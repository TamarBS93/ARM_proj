
Final_ARM_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001add8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003400  0801afa8  0801afa8  0001bfa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e3a8  0801e3a8  000201cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801e3a8  0801e3a8  0001f3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e3b0  0801e3b0  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e3b0  0801e3b0  0001f3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801e3b4  0801e3b4  0001f3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0801e3b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  0801e444  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  0801e4e4  0002012c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0002759c  200001cc  0801e584  000201cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20027768  0801e584  00020768  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003b7dd  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008c98  00000000  00000000  0005b9d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002bc0  00000000  00000000  00064678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002293  00000000  00000000  00067238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00014246  00000000  00000000  000694cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004366e  00000000  00000000  0007d711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011e25c  00000000  00000000  000c0d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001defdb  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000bf88  00000000  00000000  001df020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005a  00000000  00000000  001eafa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801af90 	.word	0x0801af90

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	0801af90 	.word	0x0801af90

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f001 fc4b 	bl	8001e7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f88c 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fa88 	bl	8000afc <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 fa50 	bl	8000a90 <MX_DMA_Init>
  MX_I2C1_Init();
 80005f0:	f000 f910 	bl	8000814 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 f9ee 	bl	80009d4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 fa1c 	bl	8000a34 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 f9ba 	bl	8000974 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000600:	f000 f988 	bl	8000914 <MX_UART4_Init>
  MX_CRC_Init();
 8000604:	f000 f8e4 	bl	80007d0 <MX_CRC_Init>
  MX_I2C4_Init();
 8000608:	f000 f944 	bl	8000894 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  // ethernetif_init(&gnetif);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800060c:	f00a fa46 	bl	800aa9c <osKernelInitialize>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UartRx */
  UartRxHandle = osSemaphoreNew(1, 0, &UartRx_attributes);
 8000610:	4a25      	ldr	r2, [pc, #148]	@ (80006a8 <main+0xcc>)
 8000612:	2100      	movs	r1, #0
 8000614:	2001      	movs	r0, #1
 8000616:	f00a fcef 	bl	800aff8 <osSemaphoreNew>
 800061a:	4603      	mov	r3, r0
 800061c:	4a23      	ldr	r2, [pc, #140]	@ (80006ac <main+0xd0>)
 800061e:	6013      	str	r3, [r2, #0]

  /* creation of UartTx */
  UartTxHandle = osSemaphoreNew(1, 0, &UartTx_attributes);
 8000620:	4a23      	ldr	r2, [pc, #140]	@ (80006b0 <main+0xd4>)
 8000622:	2100      	movs	r1, #0
 8000624:	2001      	movs	r0, #1
 8000626:	f00a fce7 	bl	800aff8 <osSemaphoreNew>
 800062a:	4603      	mov	r3, r0
 800062c:	4a21      	ldr	r2, [pc, #132]	@ (80006b4 <main+0xd8>)
 800062e:	6013      	str	r3, [r2, #0]

  /* creation of I2cRx */
  I2cRxHandle = osSemaphoreNew(1, 0, &I2cRx_attributes);
 8000630:	4a21      	ldr	r2, [pc, #132]	@ (80006b8 <main+0xdc>)
 8000632:	2100      	movs	r1, #0
 8000634:	2001      	movs	r0, #1
 8000636:	f00a fcdf 	bl	800aff8 <osSemaphoreNew>
 800063a:	4603      	mov	r3, r0
 800063c:	4a1f      	ldr	r2, [pc, #124]	@ (80006bc <main+0xe0>)
 800063e:	6013      	str	r3, [r2, #0]

  /* creation of I2cTx */
  I2cTxHandle = osSemaphoreNew(1, 0, &I2cTx_attributes);
 8000640:	4a1f      	ldr	r2, [pc, #124]	@ (80006c0 <main+0xe4>)
 8000642:	2100      	movs	r1, #0
 8000644:	2001      	movs	r0, #1
 8000646:	f00a fcd7 	bl	800aff8 <osSemaphoreNew>
 800064a:	4603      	mov	r3, r0
 800064c:	4a1d      	ldr	r2, [pc, #116]	@ (80006c4 <main+0xe8>)
 800064e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of testsQ */
  testsQHandle = osMessageQueueNew (16, 4, &testsQ_attributes);
 8000650:	4a1d      	ldr	r2, [pc, #116]	@ (80006c8 <main+0xec>)
 8000652:	2104      	movs	r1, #4
 8000654:	2010      	movs	r0, #16
 8000656:	f00a fe29 	bl	800b2ac <osMessageQueueNew>
 800065a:	4603      	mov	r3, r0
 800065c:	4a1b      	ldr	r2, [pc, #108]	@ (80006cc <main+0xf0>)
 800065e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(lwip_initiation, NULL, &defaultTask_attributes);
 8000660:	4a1b      	ldr	r2, [pc, #108]	@ (80006d0 <main+0xf4>)
 8000662:	2100      	movs	r1, #0
 8000664:	481b      	ldr	r0, [pc, #108]	@ (80006d4 <main+0xf8>)
 8000666:	f00a faab 	bl	800abc0 <osThreadNew>
 800066a:	4603      	mov	r3, r0
 800066c:	4a1a      	ldr	r2, [pc, #104]	@ (80006d8 <main+0xfc>)
 800066e:	6013      	str	r3, [r2, #0]

  /* creation of blink_task */
  blink_taskHandle = osThreadNew(blinking_blue, NULL, &blink_task_attributes);
 8000670:	4a1a      	ldr	r2, [pc, #104]	@ (80006dc <main+0x100>)
 8000672:	2100      	movs	r1, #0
 8000674:	481a      	ldr	r0, [pc, #104]	@ (80006e0 <main+0x104>)
 8000676:	f00a faa3 	bl	800abc0 <osThreadNew>
 800067a:	4603      	mov	r3, r0
 800067c:	4a19      	ldr	r2, [pc, #100]	@ (80006e4 <main+0x108>)
 800067e:	6013      	str	r3, [r2, #0]

  /* creation of udp_task */
  udp_taskHandle = osThreadNew(udp_function, NULL, &udp_task_attributes);
 8000680:	4a19      	ldr	r2, [pc, #100]	@ (80006e8 <main+0x10c>)
 8000682:	2100      	movs	r1, #0
 8000684:	4819      	ldr	r0, [pc, #100]	@ (80006ec <main+0x110>)
 8000686:	f00a fa9b 	bl	800abc0 <osThreadNew>
 800068a:	4603      	mov	r3, r0
 800068c:	4a18      	ldr	r2, [pc, #96]	@ (80006f0 <main+0x114>)
 800068e:	6013      	str	r3, [r2, #0]

  /* creation of performing_task */
  performing_taskHandle = osThreadNew(perform_tests, NULL, &performing_task_attributes);
 8000690:	4a18      	ldr	r2, [pc, #96]	@ (80006f4 <main+0x118>)
 8000692:	2100      	movs	r1, #0
 8000694:	4818      	ldr	r0, [pc, #96]	@ (80006f8 <main+0x11c>)
 8000696:	f00a fa93 	bl	800abc0 <osThreadNew>
 800069a:	4603      	mov	r3, r0
 800069c:	4a17      	ldr	r2, [pc, #92]	@ (80006fc <main+0x120>)
 800069e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006a0:	f00a fa30 	bl	800ab04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <main+0xc8>
 80006a8:	0801e13c 	.word	0x0801e13c
 80006ac:	20000ac8 	.word	0x20000ac8
 80006b0:	0801e14c 	.word	0x0801e14c
 80006b4:	20000acc 	.word	0x20000acc
 80006b8:	0801e15c 	.word	0x0801e15c
 80006bc:	20000ad0 	.word	0x20000ad0
 80006c0:	0801e16c 	.word	0x0801e16c
 80006c4:	20000ad4 	.word	0x20000ad4
 80006c8:	0801e124 	.word	0x0801e124
 80006cc:	20000ac4 	.word	0x20000ac4
 80006d0:	0801e094 	.word	0x0801e094
 80006d4:	08000f09 	.word	0x08000f09
 80006d8:	20000ab4 	.word	0x20000ab4
 80006dc:	0801e0b8 	.word	0x0801e0b8
 80006e0:	08000f1d 	.word	0x08000f1d
 80006e4:	20000ab8 	.word	0x20000ab8
 80006e8:	0801e0dc 	.word	0x0801e0dc
 80006ec:	08000f61 	.word	0x08000f61
 80006f0:	20000abc 	.word	0x20000abc
 80006f4:	0801e100 	.word	0x0801e100
 80006f8:	08000f75 	.word	0x08000f75
 80006fc:	20000ac0 	.word	0x20000ac0

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	@ 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	2230      	movs	r2, #48	@ 0x30
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f019 fdd2 	bl	801a2b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000724:	f006 f89e 	bl	8006864 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	4b27      	ldr	r3, [pc, #156]	@ (80007c8 <SystemClock_Config+0xc8>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072c:	4a26      	ldr	r2, [pc, #152]	@ (80007c8 <SystemClock_Config+0xc8>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	@ 0x40
 8000734:	4b24      	ldr	r3, [pc, #144]	@ (80007c8 <SystemClock_Config+0xc8>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000740:	4b22      	ldr	r3, [pc, #136]	@ (80007cc <SystemClock_Config+0xcc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000748:	4a20      	ldr	r2, [pc, #128]	@ (80007cc <SystemClock_Config+0xcc>)
 800074a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b1e      	ldr	r3, [pc, #120]	@ (80007cc <SystemClock_Config+0xcc>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800075c:	2301      	movs	r3, #1
 800075e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000760:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000764:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000766:	2302      	movs	r3, #2
 8000768:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800076e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000770:	2304      	movs	r3, #4
 8000772:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000774:	2348      	movs	r3, #72	@ 0x48
 8000776:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000778:	2302      	movs	r3, #2
 800077a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800077c:	2303      	movs	r3, #3
 800077e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 0320 	add.w	r3, r7, #32
 8000784:	4618      	mov	r0, r3
 8000786:	f006 f87d 	bl	8006884 <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000790:	f000 fc74 	bl	800107c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	230f      	movs	r3, #15
 8000796:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000798:	2302      	movs	r3, #2
 800079a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	2102      	movs	r1, #2
 80007b0:	4618      	mov	r0, r3
 80007b2:	f006 fb0b 	bl	8006dcc <HAL_RCC_ClockConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007bc:	f000 fc5e 	bl	800107c <Error_Handler>
  }
}
 80007c0:	bf00      	nop
 80007c2:	3750      	adds	r7, #80	@ 0x50
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	@ (800080c <MX_CRC_Init+0x3c>)
 80007d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000810 <MX_CRC_Init+0x40>)
 80007d8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80007da:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_CRC_Init+0x3c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80007e0:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <MX_CRC_Init+0x3c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_CRC_Init+0x3c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007ec:	4b07      	ldr	r3, [pc, #28]	@ (800080c <MX_CRC_Init+0x3c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007f2:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_CRC_Init+0x3c>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007f8:	4804      	ldr	r0, [pc, #16]	@ (800080c <MX_CRC_Init+0x3c>)
 80007fa:	f001 fc71 	bl	80020e0 <HAL_CRC_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000804:	f000 fc3a 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}
 800080c:	200001f0 	.word	0x200001f0
 8000810:	40023000 	.word	0x40023000

08000814 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000818:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_I2C1_Init+0x74>)
 800081a:	4a1c      	ldr	r2, [pc, #112]	@ (800088c <MX_I2C1_Init+0x78>)
 800081c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800081e:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000820:	4a1b      	ldr	r2, [pc, #108]	@ (8000890 <MX_I2C1_Init+0x7c>)
 8000822:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 240;
 8000824:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000826:	22f0      	movs	r2, #240	@ 0xf0
 8000828:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082a:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <MX_I2C1_Init+0x74>)
 800082c:	2201      	movs	r2, #1
 800082e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000830:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <MX_I2C1_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <MX_I2C1_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084e:	480e      	ldr	r0, [pc, #56]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000850:	f003 feca 	bl	80045e8 <HAL_I2C_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800085a:	f000 fc0f 	bl	800107c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800085e:	2100      	movs	r1, #0
 8000860:	4809      	ldr	r0, [pc, #36]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000862:	f005 fe2d 	bl	80064c0 <HAL_I2CEx_ConfigAnalogFilter>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800086c:	f000 fc06 	bl	800107c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000870:	2100      	movs	r1, #0
 8000872:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000874:	f005 fe6f 	bl	8006556 <HAL_I2CEx_ConfigDigitalFilter>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800087e:	f000 fbfd 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000214 	.word	0x20000214
 800088c:	40005400 	.word	0x40005400
 8000890:	00808cd2 	.word	0x00808cd2

08000894 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000898:	4b1b      	ldr	r3, [pc, #108]	@ (8000908 <MX_I2C4_Init+0x74>)
 800089a:	4a1c      	ldr	r2, [pc, #112]	@ (800090c <MX_I2C4_Init+0x78>)
 800089c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 800089e:	4b1a      	ldr	r3, [pc, #104]	@ (8000908 <MX_I2C4_Init+0x74>)
 80008a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000910 <MX_I2C4_Init+0x7c>)
 80008a2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80008a4:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <MX_I2C4_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008aa:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <MX_I2C4_Init+0x74>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b0:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <MX_I2C4_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80008b6:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <MX_I2C4_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <MX_I2C4_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c2:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <MX_I2C4_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <MX_I2C4_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80008ce:	480e      	ldr	r0, [pc, #56]	@ (8000908 <MX_I2C4_Init+0x74>)
 80008d0:	f003 fe8a 	bl	80045e8 <HAL_I2C_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80008da:	f000 fbcf 	bl	800107c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008de:	2100      	movs	r1, #0
 80008e0:	4809      	ldr	r0, [pc, #36]	@ (8000908 <MX_I2C4_Init+0x74>)
 80008e2:	f005 fded 	bl	80064c0 <HAL_I2CEx_ConfigAnalogFilter>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80008ec:	f000 fbc6 	bl	800107c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80008f0:	2100      	movs	r1, #0
 80008f2:	4805      	ldr	r0, [pc, #20]	@ (8000908 <MX_I2C4_Init+0x74>)
 80008f4:	f005 fe2f 	bl	8006556 <HAL_I2CEx_ConfigDigitalFilter>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80008fe:	f000 fbbd 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000268 	.word	0x20000268
 800090c:	40006000 	.word	0x40006000
 8000910:	00808cd2 	.word	0x00808cd2

08000914 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000918:	4b14      	ldr	r3, [pc, #80]	@ (800096c <MX_UART4_Init+0x58>)
 800091a:	4a15      	ldr	r2, [pc, #84]	@ (8000970 <MX_UART4_Init+0x5c>)
 800091c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800091e:	4b13      	ldr	r3, [pc, #76]	@ (800096c <MX_UART4_Init+0x58>)
 8000920:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000924:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b11      	ldr	r3, [pc, #68]	@ (800096c <MX_UART4_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <MX_UART4_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <MX_UART4_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <MX_UART4_Init+0x58>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <MX_UART4_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b09      	ldr	r3, [pc, #36]	@ (800096c <MX_UART4_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094a:	4b08      	ldr	r3, [pc, #32]	@ (800096c <MX_UART4_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <MX_UART4_Init+0x58>)
 8000952:	2200      	movs	r2, #0
 8000954:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	@ (800096c <MX_UART4_Init+0x58>)
 8000958:	f007 fb4e 	bl	8007ff8 <HAL_UART_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000962:	f000 fb8b 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	2000037c 	.word	0x2000037c
 8000970:	40004c00 	.word	0x40004c00

08000974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000978:	4b14      	ldr	r3, [pc, #80]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 800097a:	4a15      	ldr	r2, [pc, #84]	@ (80009d0 <MX_USART2_UART_Init+0x5c>)
 800097c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097e:	4b13      	ldr	r3, [pc, #76]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0f      	ldr	r3, [pc, #60]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b0c      	ldr	r3, [pc, #48]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009b6:	4805      	ldr	r0, [pc, #20]	@ (80009cc <MX_USART2_UART_Init+0x58>)
 80009b8:	f007 fb1e 	bl	8007ff8 <HAL_UART_Init>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009c2:	f000 fb5b 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000404 	.word	0x20000404
 80009d0:	40004400 	.word	0x40004400

080009d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009d8:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <MX_USART3_UART_Init+0x58>)
 80009da:	4a15      	ldr	r2, [pc, #84]	@ (8000a30 <MX_USART3_UART_Init+0x5c>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009de:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <MX_USART3_UART_Init+0x58>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <MX_USART3_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <MX_USART3_UART_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <MX_USART3_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <MX_USART3_UART_Init+0x58>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <MX_USART3_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <MX_USART3_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <MX_USART3_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <MX_USART3_UART_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_USART3_UART_Init+0x58>)
 8000a18:	f007 faee 	bl	8007ff8 <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a22:	f000 fb2b 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000048c 	.word	0x2000048c
 8000a30:	40004800 	.word	0x40004800

08000a34 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a38:	4b14      	ldr	r3, [pc, #80]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a40:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a42:	2206      	movs	r2, #6
 8000a44:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a46:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a48:	2202      	movs	r2, #2
 8000a4a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a54:	2202      	movs	r2, #2
 8000a56:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a64:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a78:	f005 fdb9 	bl	80065ee <HAL_PCD_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a82:	f000 fafb 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200005d4 	.word	0x200005d4

08000a90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a96:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <MX_DMA_Init+0x68>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	4a17      	ldr	r2, [pc, #92]	@ (8000af8 <MX_DMA_Init+0x68>)
 8000a9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <MX_DMA_Init+0x68>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2106      	movs	r1, #6
 8000ab2:	200b      	movs	r0, #11
 8000ab4:	f001 faea 	bl	800208c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ab8:	200b      	movs	r0, #11
 8000aba:	f001 fb03 	bl	80020c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 6, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2106      	movs	r1, #6
 8000ac2:	200d      	movs	r0, #13
 8000ac4:	f001 fae2 	bl	800208c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000ac8:	200d      	movs	r0, #13
 8000aca:	f001 fafb 	bl	80020c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2106      	movs	r1, #6
 8000ad2:	2010      	movs	r0, #16
 8000ad4:	f001 fada 	bl	800208c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ad8:	2010      	movs	r0, #16
 8000ada:	f001 faf3 	bl	80020c4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 6, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2106      	movs	r1, #6
 8000ae2:	2011      	movs	r0, #17
 8000ae4:	f001 fad2 	bl	800208c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ae8:	2011      	movs	r0, #17
 8000aea:	f001 faeb 	bl	80020c4 <HAL_NVIC_EnableIRQ>

}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08c      	sub	sp, #48	@ 0x30
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	4b4d      	ldr	r3, [pc, #308]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a4c      	ldr	r2, [pc, #304]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b4a      	ldr	r3, [pc, #296]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	61bb      	str	r3, [r7, #24]
 8000b28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2a:	4b47      	ldr	r3, [pc, #284]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a46      	ldr	r2, [pc, #280]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b44      	ldr	r3, [pc, #272]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	4b41      	ldr	r3, [pc, #260]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a40      	ldr	r2, [pc, #256]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	4a3a      	ldr	r2, [pc, #232]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b66:	4b38      	ldr	r3, [pc, #224]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b72:	4b35      	ldr	r3, [pc, #212]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a34      	ldr	r2, [pc, #208]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b78:	f043 0320 	orr.w	r3, r3, #32
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b32      	ldr	r3, [pc, #200]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f003 0320 	and.w	r3, r3, #32
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a2e      	ldr	r2, [pc, #184]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b2c      	ldr	r3, [pc, #176]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ba2:	4b29      	ldr	r3, [pc, #164]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a28      	ldr	r2, [pc, #160]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000ba8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bae:	4b26      	ldr	r3, [pc, #152]	@ (8000c48 <MX_GPIO_Init+0x14c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000bc0:	4822      	ldr	r0, [pc, #136]	@ (8000c4c <MX_GPIO_Init+0x150>)
 8000bc2:	f003 fcdd 	bl	8004580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2140      	movs	r1, #64	@ 0x40
 8000bca:	4821      	ldr	r0, [pc, #132]	@ (8000c50 <MX_GPIO_Init+0x154>)
 8000bcc:	f003 fcd8 	bl	8004580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000bd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	481b      	ldr	r0, [pc, #108]	@ (8000c54 <MX_GPIO_Init+0x158>)
 8000be8:	f003 fb1e 	bl	8004228 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000bec:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	f107 031c 	add.w	r3, r7, #28
 8000c02:	4619      	mov	r1, r3
 8000c04:	4811      	ldr	r0, [pc, #68]	@ (8000c4c <MX_GPIO_Init+0x150>)
 8000c06:	f003 fb0f 	bl	8004228 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c0a:	2340      	movs	r3, #64	@ 0x40
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 031c 	add.w	r3, r7, #28
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480b      	ldr	r0, [pc, #44]	@ (8000c50 <MX_GPIO_Init+0x154>)
 8000c22:	f003 fb01 	bl	8004228 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c26:	2380      	movs	r3, #128	@ 0x80
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_GPIO_Init+0x154>)
 8000c3a:	f003 faf5 	bl	8004228 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c3e:	bf00      	nop
 8000c40:	3730      	adds	r7, #48	@ 0x30
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020400 	.word	0x40020400
 8000c50:	40021800 	.word	0x40021800
 8000c54:	40020800 	.word	0x40020800

08000c58 <vApplicationStackOverflowHook>:
 *
 * @param xTask Task handle of the task whose stack overflowed.
 * @param pcTaskName Pointer to the name of the task whose stack overflowed.
 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, signed char *pcTaskName)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
    // A stack overflow has been detected. This is a critical error.
    // The system is in an unstable state.
    // It is generally not safe to continue execution or call complex functions.

    printf("\n!!! STACK OVERFLOW DETECTED !!!\n");
 8000c62:	4811      	ldr	r0, [pc, #68]	@ (8000ca8 <vApplicationStackOverflowHook+0x50>)
 8000c64:	f019 fa38 	bl	801a0d8 <puts>
    printf("Task: %s\n", pcTaskName);
 8000c68:	6839      	ldr	r1, [r7, #0]
 8000c6a:	4810      	ldr	r0, [pc, #64]	@ (8000cac <vApplicationStackOverflowHook+0x54>)
 8000c6c:	f019 f9cc 	bl	801a008 <iprintf>
    printf("Handle: 0x%lX\n", (uint32_t)xTask);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4619      	mov	r1, r3
 8000c74:	480e      	ldr	r0, [pc, #56]	@ (8000cb0 <vApplicationStackOverflowHook+0x58>)
 8000c76:	f019 f9c7 	bl	801a008 <iprintf>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c7e:	b672      	cpsid	i
 8000c80:	f383 8811 	msr	BASEPRI, r3
 8000c84:	f3bf 8f6f 	isb	sy
 8000c88:	f3bf 8f4f 	dsb	sy
 8000c8c:	b662      	cpsie	i
 8000c8e:	60fb      	str	r3, [r7, #12]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000c90:	bf00      	nop
    // Disable interrupts to prevent further execution and potential damage
    taskDISABLE_INTERRUPTS();
    for(;;)
    {
        // RED LED toggle for visual indication
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000c92:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c96:	4807      	ldr	r0, [pc, #28]	@ (8000cb4 <vApplicationStackOverflowHook+0x5c>)
 8000c98:	f003 fc8b 	bl	80045b2 <HAL_GPIO_TogglePin>
        osDelay(1000);
 8000c9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ca0:	f00a f834 	bl	800ad0c <osDelay>
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000ca4:	bf00      	nop
 8000ca6:	e7f4      	b.n	8000c92 <vApplicationStackOverflowHook+0x3a>
 8000ca8:	0801b004 	.word	0x0801b004
 8000cac:	0801b028 	.word	0x0801b028
 8000cb0:	0801b034 	.word	0x0801b034
 8000cb4:	40020400 	.word	0x40020400

08000cb8 <udp_receive_init>:
    }
}

void udp_receive_init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	//printf("udp_receive_init() called\n");

    udp_pcb_handle = udp_new();
 8000cbc:	f015 fef2 	bl	8016aa4 <udp_new>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4a13      	ldr	r2, [pc, #76]	@ (8000d10 <udp_receive_init+0x58>)
 8000cc4:	6013      	str	r3, [r2, #0]
    if (!udp_pcb_handle) {
 8000cc6:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <udp_receive_init+0x58>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d103      	bne.n	8000cd6 <udp_receive_init+0x1e>
        printf("Failed to create UDP PCB\n");
 8000cce:	4811      	ldr	r0, [pc, #68]	@ (8000d14 <udp_receive_init+0x5c>)
 8000cd0:	f019 fa02 	bl	801a0d8 <puts>
        return;
 8000cd4:	e01a      	b.n	8000d0c <udp_receive_init+0x54>
    }

    if (udp_bind(udp_pcb_handle, IP_ADDR_ANY, LOCAL_PORT) != ERR_OK) {
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <udp_receive_init+0x58>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f241 328d 	movw	r2, #5005	@ 0x138d
 8000cde:	490e      	ldr	r1, [pc, #56]	@ (8000d18 <udp_receive_init+0x60>)
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f015 fe37 	bl	8016954 <udp_bind>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d003      	beq.n	8000cf4 <udp_receive_init+0x3c>
        printf("UDP bind failed\n");
 8000cec:	480b      	ldr	r0, [pc, #44]	@ (8000d1c <udp_receive_init+0x64>)
 8000cee:	f019 f9f3 	bl	801a0d8 <puts>
        return;
 8000cf2:	e00b      	b.n	8000d0c <udp_receive_init+0x54>
    }

    udp_recv(udp_pcb_handle, udp_receive_callback, NULL);
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <udp_receive_init+0x58>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	4909      	ldr	r1, [pc, #36]	@ (8000d20 <udp_receive_init+0x68>)
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f015 feb1 	bl	8016a64 <udp_recv>
    printf("UDP ready, listening on port %d\n", LOCAL_PORT);
 8000d02:	f241 318d 	movw	r1, #5005	@ 0x138d
 8000d06:	4807      	ldr	r0, [pc, #28]	@ (8000d24 <udp_receive_init+0x6c>)
 8000d08:	f019 f97e 	bl	801a008 <iprintf>
}
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000ad8 	.word	0x20000ad8
 8000d14:	0801b044 	.word	0x0801b044
 8000d18:	0801e2b8 	.word	0x0801e2b8
 8000d1c:	0801b060 	.word	0x0801b060
 8000d20:	08000d29 	.word	0x08000d29
 8000d24:	0801b070 	.word	0x0801b070

08000d28 <udp_receive_callback>:

void udp_receive_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af02      	add	r7, sp, #8
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
 8000d34:	603b      	str	r3, [r7, #0]
    if (p != NULL) {
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d074      	beq.n	8000e26 <udp_receive_callback+0xfe>
        // Copy the sender's IP address
        ip_addr_copy(server_addr, *addr);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a3b      	ldr	r2, [pc, #236]	@ (8000e30 <udp_receive_callback+0x108>)
 8000d42:	6013      	str	r3, [r2, #0]
        // Copy the sender's port
        server_port = port;
 8000d44:	4a3b      	ldr	r2, [pc, #236]	@ (8000e34 <udp_receive_callback+0x10c>)
 8000d46:	8c3b      	ldrh	r3, [r7, #32]
 8000d48:	8013      	strh	r3, [r2, #0]

        printf("Received from %s:%d -> %.*s\n",
 8000d4a:	6838      	ldr	r0, [r7, #0]
 8000d4c:	f017 faa4 	bl	8018298 <ip4addr_ntoa>
 8000d50:	4601      	mov	r1, r0
 8000d52:	8c3a      	ldrh	r2, [r7, #32]
               ipaddr_ntoa(addr), port, p->len, (char *)p->payload);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	895b      	ldrh	r3, [r3, #10]
        printf("Received from %s:%d -> %.*s\n",
 8000d58:	4618      	mov	r0, r3
               ipaddr_ntoa(addr), port, p->len, (char *)p->payload);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
        printf("Received from %s:%d -> %.*s\n",
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	4603      	mov	r3, r0
 8000d62:	4835      	ldr	r0, [pc, #212]	@ (8000e38 <udp_receive_callback+0x110>)
 8000d64:	f019 f950 	bl	801a008 <iprintf>

        if (p->len >= sizeof(test_command_t)) {
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	895b      	ldrh	r3, [r3, #10]
 8000d6c:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8000d70:	d950      	bls.n	8000e14 <udp_receive_callback+0xec>
            test_command_t *cmd = (test_command_t *)pvPortMalloc(sizeof(test_command_t));
 8000d72:	f240 1007 	movw	r0, #263	@ 0x107
 8000d76:	f00d fd7f 	bl	800e878 <pvPortMalloc>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	617b      	str	r3, [r7, #20]
            if (cmd != NULL) {
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d029      	beq.n	8000dd8 <udp_receive_callback+0xb0>
			   // Copy the data from the pbuf payload to the allocated memory
			   memcpy(cmd, p->payload, sizeof(test_command_t)); // Only copy the struct size
 8000d84:	6978      	ldr	r0, [r7, #20]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f240 1207 	movw	r2, #263	@ 0x107
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f019 fb65 	bl	801a45e <memcpy>
				// Debug print received data
				printf("Received Test Command:\n");
 8000d94:	4829      	ldr	r0, [pc, #164]	@ (8000e3c <udp_receive_callback+0x114>)
 8000d96:	f019 f99f 	bl	801a0d8 <puts>
				printf("test_id: %lu\n", cmd->test_id);
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4827      	ldr	r0, [pc, #156]	@ (8000e40 <udp_receive_callback+0x118>)
 8000da2:	f019 f931 	bl	801a008 <iprintf>
				printf("peripheral bitfield: 0x%02X\n", cmd->peripheral);
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	791b      	ldrb	r3, [r3, #4]
 8000daa:	4619      	mov	r1, r3
 8000dac:	4825      	ldr	r0, [pc, #148]	@ (8000e44 <udp_receive_callback+0x11c>)
 8000dae:	f019 f92b 	bl	801a008 <iprintf>
				printf("iterations: %u\n", cmd->iterations);
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	795b      	ldrb	r3, [r3, #5]
 8000db6:	4619      	mov	r1, r3
 8000db8:	4823      	ldr	r0, [pc, #140]	@ (8000e48 <udp_receive_callback+0x120>)
 8000dba:	f019 f925 	bl	801a008 <iprintf>
				printf("bit pattern length: %u\n", cmd->bit_pattern_length);
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	799b      	ldrb	r3, [r3, #6]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4821      	ldr	r0, [pc, #132]	@ (8000e4c <udp_receive_callback+0x124>)
 8000dc6:	f019 f91f 	bl	801a008 <iprintf>
				printf("bit pattern: %s\n",cmd->bit_pattern);
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	3307      	adds	r3, #7
 8000dce:	4619      	mov	r1, r3
 8000dd0:	481f      	ldr	r0, [pc, #124]	@ (8000e50 <udp_receive_callback+0x128>)
 8000dd2:	f019 f919 	bl	801a008 <iprintf>
 8000dd6:	e002      	b.n	8000dde <udp_receive_callback+0xb6>
            }
            else{
                printf("Failed to allocate memory for test_command_t!\n");
 8000dd8:	481e      	ldr	r0, [pc, #120]	@ (8000e54 <udp_receive_callback+0x12c>)
 8000dda:	f019 f97d 	bl	801a0d8 <puts>
            }
            // Send the POINTER to the newly allocated and copied* data to the queue
            if (xQueueSendToBack(testsQHandle, &cmd, 1) != pdPASS){ // Pass address of pointer
 8000dde:	4b1e      	ldr	r3, [pc, #120]	@ (8000e58 <udp_receive_callback+0x130>)
 8000de0:	6818      	ldr	r0, [r3, #0]
 8000de2:	f107 0114 	add.w	r1, r7, #20
 8000de6:	2300      	movs	r3, #0
 8000de8:	2201      	movs	r2, #1
 8000dea:	f00a ff3f 	bl	800bc6c <xQueueGenericSend>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d007      	beq.n	8000e04 <udp_receive_callback+0xdc>
                printf("Failed to send data to tests queue.\n");
 8000df4:	4819      	ldr	r0, [pc, #100]	@ (8000e5c <udp_receive_callback+0x134>)
 8000df6:	f019 f96f 	bl	801a0d8 <puts>
                // If send fails, free the allocated memory immediately
                vPortFree(cmd);
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f00d fe09 	bl	800ea14 <vPortFree>
 8000e02:	e00d      	b.n	8000e20 <udp_receive_callback+0xf8>
            } else {
                // Only notify if successfully sent to queue
            	//printf("udp_receive_callback sent a command to the tests queue successfully\n");
                xTaskNotifyGive(performing_taskHandle);
 8000e04:	4b16      	ldr	r3, [pc, #88]	@ (8000e60 <udp_receive_callback+0x138>)
 8000e06:	6818      	ldr	r0, [r3, #0]
 8000e08:	2300      	movs	r3, #0
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	f00c fe71 	bl	800daf4 <xTaskGenericNotify>
 8000e12:	e005      	b.n	8000e20 <udp_receive_callback+0xf8>
            }
        } else {
            printf("Packet too short: %d bytes\n", p->len);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	895b      	ldrh	r3, [r3, #10]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4812      	ldr	r0, [pc, #72]	@ (8000e64 <udp_receive_callback+0x13c>)
 8000e1c:	f019 f8f4 	bl	801a008 <iprintf>
        }
        pbuf_free(p);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f00f fca3 	bl	801076c <pbuf_free>
    }
}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200001e8 	.word	0x200001e8
 8000e34:	200001ec 	.word	0x200001ec
 8000e38:	0801b094 	.word	0x0801b094
 8000e3c:	0801b0b4 	.word	0x0801b0b4
 8000e40:	0801b0cc 	.word	0x0801b0cc
 8000e44:	0801b0dc 	.word	0x0801b0dc
 8000e48:	0801b0fc 	.word	0x0801b0fc
 8000e4c:	0801b10c 	.word	0x0801b10c
 8000e50:	0801b124 	.word	0x0801b124
 8000e54:	0801b138 	.word	0x0801b138
 8000e58:	20000ac4 	.word	0x20000ac4
 8000e5c:	0801b168 	.word	0x0801b168
 8000e60:	20000ac0 	.word	0x20000ac0
 8000e64:	0801b18c 	.word	0x0801b18c

08000e68 <send_response>:

void send_response(result_pro_t result) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	463b      	mov	r3, r7
 8000e70:	e883 0003 	stmia.w	r3, {r0, r1}
    // Check if we have a valid sender address
    if (ip_addr_isany(&server_addr) == 0) {
 8000e74:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <send_response+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d022      	beq.n	8000ec2 <send_response+0x5a>
        // Create a new pbuf for the response data
        struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, sizeof(result_pro_t), PBUF_RAM);
 8000e7c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000e80:	2106      	movs	r1, #6
 8000e82:	2036      	movs	r0, #54	@ 0x36
 8000e84:	f00f f98e 	bl	80101a4 <pbuf_alloc>
 8000e88:	60f8      	str	r0, [r7, #12]
        if (p != NULL) {
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d018      	beq.n	8000ec2 <send_response+0x5a>
            // Copy the result struct into the pbuf payload
            memcpy(p->payload, &result, sizeof(result_pro_t));
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	461a      	mov	r2, r3
 8000e96:	463b      	mov	r3, r7
 8000e98:	6818      	ldr	r0, [r3, #0]
 8000e9a:	6010      	str	r0, [r2, #0]
 8000e9c:	889b      	ldrh	r3, [r3, #4]
 8000e9e:	8093      	strh	r3, [r2, #4]

            // Send the response to the stored address and port
            if(udp_sendto(udp_pcb_handle, p, &server_addr, server_port) != ERR_OK){
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <send_response+0x68>)
 8000ea2:	6818      	ldr	r0, [r3, #0]
 8000ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <send_response+0x6c>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	4a08      	ldr	r2, [pc, #32]	@ (8000ecc <send_response+0x64>)
 8000eaa:	68f9      	ldr	r1, [r7, #12]
 8000eac:	f015 fb9c 	bl	80165e8 <udp_sendto>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d002      	beq.n	8000ebc <send_response+0x54>
            	printf("sendto server failed");
 8000eb6:	4808      	ldr	r0, [pc, #32]	@ (8000ed8 <send_response+0x70>)
 8000eb8:	f019 f8a6 	bl	801a008 <iprintf>
            }

            // Free the pbuf
            pbuf_free(p);
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	f00f fc55 	bl	801076c <pbuf_free>
        }
    }
}
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200001e8 	.word	0x200001e8
 8000ed0:	20000ad8 	.word	0x20000ad8
 8000ed4:	200001ec 	.word	0x200001ec
 8000ed8:	0801b1a8 	.word	0x0801b1a8

08000edc <calculate_crc>:


uint32_t calculate_crc(uint8_t *data, size_t length) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
    // HAL_CRC_Calculate expects 32-bit words, so convert length
    uint32_t word_count = (length + 3) / 4; // Round up
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	3303      	adds	r3, #3
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	60fb      	str	r3, [r7, #12]
    return HAL_CRC_Calculate(&hcrc, (uint32_t *)data, word_count);
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	6879      	ldr	r1, [r7, #4]
 8000ef2:	4804      	ldr	r0, [pc, #16]	@ (8000f04 <calculate_crc+0x28>)
 8000ef4:	f001 f958 	bl	80021a8 <HAL_CRC_Calculate>
 8000ef8:	4603      	mov	r3, r0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200001f0 	.word	0x200001f0

08000f08 <lwip_initiation>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_lwip_initiation */
void lwip_initiation(void *argument)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000f10:	f008 ff58 	bl	8009dc4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f009 fef9 	bl	800ad0c <osDelay>
 8000f1a:	e7fb      	b.n	8000f14 <lwip_initiation+0xc>

08000f1c <blinking_blue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blinking_blue */
void blinking_blue(void *argument)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinking_blue */
  /* Infinite loop */
  for(;;)
  {
	/* visual heartbeat */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000f24:	2180      	movs	r1, #128	@ 0x80
 8000f26:	4804      	ldr	r0, [pc, #16]	@ (8000f38 <blinking_blue+0x1c>)
 8000f28:	f003 fb43 	bl	80045b2 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000f2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f30:	f009 feec 	bl	800ad0c <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000f34:	bf00      	nop
 8000f36:	e7f5      	b.n	8000f24 <blinking_blue+0x8>
 8000f38:	40020400 	.word	0x40020400

08000f3c <__io_putchar>:
  /* USER CODE END blinking_blue */
}

/* USER CODE BEGIN Header_udp_function */
int __io_putchar(int ch)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000f44:	1d39      	adds	r1, r7, #4
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4803      	ldr	r0, [pc, #12]	@ (8000f5c <__io_putchar+0x20>)
 8000f4e:	f007 f8a1 	bl	8008094 <HAL_UART_Transmit>
    return ch;
 8000f52:	687b      	ldr	r3, [r7, #4]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2000048c 	.word	0x2000048c

08000f60 <udp_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_udp_function */
void udp_function(void *argument)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN udp_function */
	udp_receive_init();
 8000f68:	f7ff fea6 	bl	8000cb8 <udp_receive_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f009 fecd 	bl	800ad0c <osDelay>
 8000f72:	e7fb      	b.n	8000f6c <udp_function+0xc>

08000f74 <perform_tests>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_perform_tests */
void perform_tests(void *argument)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08c      	sub	sp, #48	@ 0x30
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	test_command_t *cmd;

  /* Infinite loop */
  for(;;)
  {
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // waiting for a notification
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	2001      	movs	r0, #1
 8000f82:	f00c fd6b 	bl	800da5c <ulTaskNotifyTake>
	//printf("perform_tests woke up!\n");

	if (xQueueReceive(testsQHandle, &cmd, 0) != pdPASS)
 8000f86:	4b32      	ldr	r3, [pc, #200]	@ (8001050 <perform_tests+0xdc>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f107 011c 	add.w	r1, r7, #28
 8000f8e:	2200      	movs	r2, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f00b f8b1 	bl	800c0f8 <xQueueReceive>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d003      	beq.n	8000fa4 <perform_tests+0x30>
	{
		printf("perform_tests: No test command received\n");
 8000f9c:	482d      	ldr	r0, [pc, #180]	@ (8001054 <perform_tests+0xe0>)
 8000f9e:	f019 f89b 	bl	801a0d8 <puts>
 8000fa2:	e7eb      	b.n	8000f7c <perform_tests+0x8>
		continue;
	}
	if(cmd->bit_pattern_length > MAX_BIT_PATTERN_LENGTH || cmd->test_id == NULL || cmd->iterations<1){
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <perform_tests+0x40>
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	795b      	ldrb	r3, [r3, #5]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d105      	bne.n	8000fc0 <perform_tests+0x4c>
		result_pro_t response = {cmd->test_id, TEST_ERR};
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fbe:	823b      	strh	r3, [r7, #16]
//		response.test_result = TEST_ERR;
		// send response
	}
	result_pro_t response_result;
	switch (cmd->peripheral){
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	791b      	ldrb	r3, [r3, #4]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	2b0f      	cmp	r3, #15
 8000fc8:	d83e      	bhi.n	8001048 <perform_tests+0xd4>
 8000fca:	a201      	add	r2, pc, #4	@ (adr r2, 8000fd0 <perform_tests+0x5c>)
 8000fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd0:	08001049 	.word	0x08001049
 8000fd4:	08001011 	.word	0x08001011
 8000fd8:	08001049 	.word	0x08001049
 8000fdc:	08001049 	.word	0x08001049
 8000fe0:	08001049 	.word	0x08001049
 8000fe4:	08001049 	.word	0x08001049
 8000fe8:	08001049 	.word	0x08001049
 8000fec:	0800102d 	.word	0x0800102d
 8000ff0:	08001049 	.word	0x08001049
 8000ff4:	08001049 	.word	0x08001049
 8000ff8:	08001049 	.word	0x08001049
 8000ffc:	08001049 	.word	0x08001049
 8001000:	08001049 	.word	0x08001049
 8001004:	08001049 	.word	0x08001049
 8001008:	08001049 	.word	0x08001049
 800100c:	08001049 	.word	0x08001049
	case TIMER:
		break;
	case UART:
		send_response(uart_testing(cmd));
 8001010:	69fa      	ldr	r2, [r7, #28]
 8001012:	f107 0320 	add.w	r3, r7, #32
 8001016:	4611      	mov	r1, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f018 fc4b 	bl	80198b4 <uart_testing>
 800101e:	f107 0320 	add.w	r3, r7, #32
 8001022:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001026:	f7ff ff1f 	bl	8000e68 <send_response>
		break;
 800102a:	e00d      	b.n	8001048 <perform_tests+0xd4>
	case SPI:
		break;
	case I2C:
		send_response(i2c_testing(cmd));
 800102c:	69fa      	ldr	r2, [r7, #28]
 800102e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f018 f9c5 	bl	80193c4 <i2c_testing>
 800103a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800103e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001042:	f7ff ff11 	bl	8000e68 <send_response>
		break;
 8001046:	bf00      	nop
	case ADC_P:
		break;
	default:
	}
	//vPortFree(cmd); // until i will handle it
    osDelay(1);
 8001048:	2001      	movs	r0, #1
 800104a:	f009 fe5f 	bl	800ad0c <osDelay>
  {
 800104e:	e795      	b.n	8000f7c <perform_tests+0x8>
 8001050:	20000ac4 	.word	0x20000ac4
 8001054:	0801b1c0 	.word	0x0801b1c0

08001058 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800106a:	f000 ff13 	bl	8001e94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40001000 	.word	0x40001000

0800107c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <Error_Handler+0x8>

08001088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <HAL_MspInit+0x4c>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	4a10      	ldr	r2, [pc, #64]	@ (80010d4 <HAL_MspInit+0x4c>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001098:	6413      	str	r3, [r2, #64]	@ 0x40
 800109a:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <HAL_MspInit+0x4c>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <HAL_MspInit+0x4c>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010aa:	4a0a      	ldr	r2, [pc, #40]	@ (80010d4 <HAL_MspInit+0x4c>)
 80010ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010b2:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <HAL_MspInit+0x4c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	210f      	movs	r1, #15
 80010c2:	f06f 0001 	mvn.w	r0, #1
 80010c6:	f000 ffe1 	bl	800208c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800

080010d8 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <HAL_CRC_MspInit+0x38>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d10b      	bne.n	8001102 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80010ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <HAL_CRC_MspInit+0x3c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	4a09      	ldr	r2, [pc, #36]	@ (8001114 <HAL_CRC_MspInit+0x3c>)
 80010f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f6:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <HAL_CRC_MspInit+0x3c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001102:	bf00      	nop
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40023000 	.word	0x40023000
 8001114:	40023800 	.word	0x40023800

08001118 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b0ac      	sub	sp, #176	@ 0xb0
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001130:	f107 0318 	add.w	r3, r7, #24
 8001134:	2284      	movs	r2, #132	@ 0x84
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f019 f8bd 	bl	801a2b8 <memset>
  if(hi2c->Instance==I2C1)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a82      	ldr	r2, [pc, #520]	@ (800134c <HAL_I2C_MspInit+0x234>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d17b      	bne.n	8001240 <HAL_I2C_MspInit+0x128>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001148:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800114c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800114e:	2300      	movs	r3, #0
 8001150:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	4618      	mov	r0, r3
 8001158:	f006 f890 	bl	800727c <HAL_RCCEx_PeriphCLKConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001162:	f7ff ff8b 	bl	800107c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	4b7a      	ldr	r3, [pc, #488]	@ (8001350 <HAL_I2C_MspInit+0x238>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a79      	ldr	r2, [pc, #484]	@ (8001350 <HAL_I2C_MspInit+0x238>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b77      	ldr	r3, [pc, #476]	@ (8001350 <HAL_I2C_MspInit+0x238>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800117e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001182:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001186:	2312      	movs	r3, #18
 8001188:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118c:	2301      	movs	r3, #1
 800118e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001198:	2304      	movs	r3, #4
 800119a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011a2:	4619      	mov	r1, r3
 80011a4:	486b      	ldr	r0, [pc, #428]	@ (8001354 <HAL_I2C_MspInit+0x23c>)
 80011a6:	f003 f83f 	bl	8004228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011aa:	4b69      	ldr	r3, [pc, #420]	@ (8001350 <HAL_I2C_MspInit+0x238>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	4a68      	ldr	r2, [pc, #416]	@ (8001350 <HAL_I2C_MspInit+0x238>)
 80011b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b6:	4b66      	ldr	r3, [pc, #408]	@ (8001350 <HAL_I2C_MspInit+0x238>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80011c2:	4b65      	ldr	r3, [pc, #404]	@ (8001358 <HAL_I2C_MspInit+0x240>)
 80011c4:	4a65      	ldr	r2, [pc, #404]	@ (800135c <HAL_I2C_MspInit+0x244>)
 80011c6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80011c8:	4b63      	ldr	r3, [pc, #396]	@ (8001358 <HAL_I2C_MspInit+0x240>)
 80011ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80011ce:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011d0:	4b61      	ldr	r3, [pc, #388]	@ (8001358 <HAL_I2C_MspInit+0x240>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d6:	4b60      	ldr	r3, [pc, #384]	@ (8001358 <HAL_I2C_MspInit+0x240>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011dc:	4b5e      	ldr	r3, [pc, #376]	@ (8001358 <HAL_I2C_MspInit+0x240>)
 80011de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011e2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011e4:	4b5c      	ldr	r3, [pc, #368]	@ (8001358 <HAL_I2C_MspInit+0x240>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011ea:	4b5b      	ldr	r3, [pc, #364]	@ (8001358 <HAL_I2C_MspInit+0x240>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80011f0:	4b59      	ldr	r3, [pc, #356]	@ (8001358 <HAL_I2C_MspInit+0x240>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011f6:	4b58      	ldr	r3, [pc, #352]	@ (8001358 <HAL_I2C_MspInit+0x240>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011fc:	4b56      	ldr	r3, [pc, #344]	@ (8001358 <HAL_I2C_MspInit+0x240>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001202:	4855      	ldr	r0, [pc, #340]	@ (8001358 <HAL_I2C_MspInit+0x240>)
 8001204:	f001 f976 	bl	80024f4 <HAL_DMA_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 800120e:	f7ff ff35 	bl	800107c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a50      	ldr	r2, [pc, #320]	@ (8001358 <HAL_I2C_MspInit+0x240>)
 8001216:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001218:	4a4f      	ldr	r2, [pc, #316]	@ (8001358 <HAL_I2C_MspInit+0x240>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2105      	movs	r1, #5
 8001222:	201f      	movs	r0, #31
 8001224:	f000 ff32 	bl	800208c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001228:	201f      	movs	r0, #31
 800122a:	f000 ff4b 	bl	80020c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2105      	movs	r1, #5
 8001232:	2020      	movs	r0, #32
 8001234:	f000 ff2a 	bl	800208c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001238:	2020      	movs	r0, #32
 800123a:	f000 ff43 	bl	80020c4 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C4_MspInit 1 */

    /* USER CODE END I2C4_MspInit 1 */
  }

}
 800123e:	e080      	b.n	8001342 <HAL_I2C_MspInit+0x22a>
  else if(hi2c->Instance==I2C4)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a46      	ldr	r2, [pc, #280]	@ (8001360 <HAL_I2C_MspInit+0x248>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d17b      	bne.n	8001342 <HAL_I2C_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800124a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800124e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001256:	f107 0318 	add.w	r3, r7, #24
 800125a:	4618      	mov	r0, r3
 800125c:	f006 f80e 	bl	800727c <HAL_RCCEx_PeriphCLKConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_I2C_MspInit+0x152>
      Error_Handler();
 8001266:	f7ff ff09 	bl	800107c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800126a:	4b39      	ldr	r3, [pc, #228]	@ (8001350 <HAL_I2C_MspInit+0x238>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	4a38      	ldr	r2, [pc, #224]	@ (8001350 <HAL_I2C_MspInit+0x238>)
 8001270:	f043 0320 	orr.w	r3, r3, #32
 8001274:	6313      	str	r3, [r2, #48]	@ 0x30
 8001276:	4b36      	ldr	r3, [pc, #216]	@ (8001350 <HAL_I2C_MspInit+0x238>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	f003 0320 	and.w	r3, r3, #32
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001282:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001286:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800128a:	2312      	movs	r3, #18
 800128c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001290:	2301      	movs	r3, #1
 8001292:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800129c:	2304      	movs	r3, #4
 800129e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012a2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80012a6:	4619      	mov	r1, r3
 80012a8:	482e      	ldr	r0, [pc, #184]	@ (8001364 <HAL_I2C_MspInit+0x24c>)
 80012aa:	f002 ffbd 	bl	8004228 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80012ae:	4b28      	ldr	r3, [pc, #160]	@ (8001350 <HAL_I2C_MspInit+0x238>)
 80012b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b2:	4a27      	ldr	r2, [pc, #156]	@ (8001350 <HAL_I2C_MspInit+0x238>)
 80012b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80012b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ba:	4b25      	ldr	r3, [pc, #148]	@ (8001350 <HAL_I2C_MspInit+0x238>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c4_tx.Instance = DMA1_Stream5;
 80012c6:	4b28      	ldr	r3, [pc, #160]	@ (8001368 <HAL_I2C_MspInit+0x250>)
 80012c8:	4a28      	ldr	r2, [pc, #160]	@ (800136c <HAL_I2C_MspInit+0x254>)
 80012ca:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Channel = DMA_CHANNEL_2;
 80012cc:	4b26      	ldr	r3, [pc, #152]	@ (8001368 <HAL_I2C_MspInit+0x250>)
 80012ce:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80012d2:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012d4:	4b24      	ldr	r3, [pc, #144]	@ (8001368 <HAL_I2C_MspInit+0x250>)
 80012d6:	2240      	movs	r2, #64	@ 0x40
 80012d8:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012da:	4b23      	ldr	r3, [pc, #140]	@ (8001368 <HAL_I2C_MspInit+0x250>)
 80012dc:	2200      	movs	r2, #0
 80012de:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012e0:	4b21      	ldr	r3, [pc, #132]	@ (8001368 <HAL_I2C_MspInit+0x250>)
 80012e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012e6:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001368 <HAL_I2C_MspInit+0x250>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001368 <HAL_I2C_MspInit+0x250>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 80012f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001368 <HAL_I2C_MspInit+0x250>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001368 <HAL_I2C_MspInit+0x250>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	621a      	str	r2, [r3, #32]
    hdma_i2c4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001300:	4b19      	ldr	r3, [pc, #100]	@ (8001368 <HAL_I2C_MspInit+0x250>)
 8001302:	2200      	movs	r2, #0
 8001304:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 8001306:	4818      	ldr	r0, [pc, #96]	@ (8001368 <HAL_I2C_MspInit+0x250>)
 8001308:	f001 f8f4 	bl	80024f4 <HAL_DMA_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_I2C_MspInit+0x1fe>
      Error_Handler();
 8001312:	f7ff feb3 	bl	800107c <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c4_tx);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a13      	ldr	r2, [pc, #76]	@ (8001368 <HAL_I2C_MspInit+0x250>)
 800131a:	639a      	str	r2, [r3, #56]	@ 0x38
 800131c:	4a12      	ldr	r2, [pc, #72]	@ (8001368 <HAL_I2C_MspInit+0x250>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2105      	movs	r1, #5
 8001326:	205f      	movs	r0, #95	@ 0x5f
 8001328:	f000 feb0 	bl	800208c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 800132c:	205f      	movs	r0, #95	@ 0x5f
 800132e:	f000 fec9 	bl	80020c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 5, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2105      	movs	r1, #5
 8001336:	2060      	movs	r0, #96	@ 0x60
 8001338:	f000 fea8 	bl	800208c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 800133c:	2060      	movs	r0, #96	@ 0x60
 800133e:	f000 fec1 	bl	80020c4 <HAL_NVIC_EnableIRQ>
}
 8001342:	bf00      	nop
 8001344:	37b0      	adds	r7, #176	@ 0xb0
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40005400 	.word	0x40005400
 8001350:	40023800 	.word	0x40023800
 8001354:	40020400 	.word	0x40020400
 8001358:	200002bc 	.word	0x200002bc
 800135c:	40026010 	.word	0x40026010
 8001360:	40006000 	.word	0x40006000
 8001364:	40021400 	.word	0x40021400
 8001368:	2000031c 	.word	0x2000031c
 800136c:	40026088 	.word	0x40026088

08001370 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b0b0      	sub	sp, #192	@ 0xc0
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001388:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800138c:	2284      	movs	r2, #132	@ 0x84
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f018 ff91 	bl	801a2b8 <memset>
  if(huart->Instance==UART4)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a9e      	ldr	r2, [pc, #632]	@ (8001614 <HAL_UART_MspInit+0x2a4>)
 800139c:	4293      	cmp	r3, r2
 800139e:	f040 8095 	bne.w	80014cc <HAL_UART_MspInit+0x15c>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80013a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 80013a8:	2340      	movs	r3, #64	@ 0x40
 80013aa:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013b0:	4618      	mov	r0, r3
 80013b2:	f005 ff63 	bl	800727c <HAL_RCCEx_PeriphCLKConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80013bc:	f7ff fe5e 	bl	800107c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80013c0:	4b95      	ldr	r3, [pc, #596]	@ (8001618 <HAL_UART_MspInit+0x2a8>)
 80013c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c4:	4a94      	ldr	r2, [pc, #592]	@ (8001618 <HAL_UART_MspInit+0x2a8>)
 80013c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80013cc:	4b92      	ldr	r3, [pc, #584]	@ (8001618 <HAL_UART_MspInit+0x2a8>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80013d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d8:	4b8f      	ldr	r3, [pc, #572]	@ (8001618 <HAL_UART_MspInit+0x2a8>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013dc:	4a8e      	ldr	r2, [pc, #568]	@ (8001618 <HAL_UART_MspInit+0x2a8>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e4:	4b8c      	ldr	r3, [pc, #560]	@ (8001618 <HAL_UART_MspInit+0x2a8>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	623b      	str	r3, [r7, #32]
 80013ee:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f0:	4b89      	ldr	r3, [pc, #548]	@ (8001618 <HAL_UART_MspInit+0x2a8>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f4:	4a88      	ldr	r2, [pc, #544]	@ (8001618 <HAL_UART_MspInit+0x2a8>)
 80013f6:	f043 0304 	orr.w	r3, r3, #4
 80013fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fc:	4b86      	ldr	r3, [pc, #536]	@ (8001618 <HAL_UART_MspInit+0x2a8>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	61fb      	str	r3, [r7, #28]
 8001406:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001408:	2301      	movs	r3, #1
 800140a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	2302      	movs	r3, #2
 8001410:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001420:	2308      	movs	r3, #8
 8001422:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800142a:	4619      	mov	r1, r3
 800142c:	487b      	ldr	r0, [pc, #492]	@ (800161c <HAL_UART_MspInit+0x2ac>)
 800142e:	f002 fefb 	bl	8004228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001432:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001436:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800144c:	2308      	movs	r3, #8
 800144e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001452:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001456:	4619      	mov	r1, r3
 8001458:	4871      	ldr	r0, [pc, #452]	@ (8001620 <HAL_UART_MspInit+0x2b0>)
 800145a:	f002 fee5 	bl	8004228 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800145e:	4b71      	ldr	r3, [pc, #452]	@ (8001624 <HAL_UART_MspInit+0x2b4>)
 8001460:	4a71      	ldr	r2, [pc, #452]	@ (8001628 <HAL_UART_MspInit+0x2b8>)
 8001462:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001464:	4b6f      	ldr	r3, [pc, #444]	@ (8001624 <HAL_UART_MspInit+0x2b4>)
 8001466:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800146a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800146c:	4b6d      	ldr	r3, [pc, #436]	@ (8001624 <HAL_UART_MspInit+0x2b4>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001472:	4b6c      	ldr	r3, [pc, #432]	@ (8001624 <HAL_UART_MspInit+0x2b4>)
 8001474:	2200      	movs	r2, #0
 8001476:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001478:	4b6a      	ldr	r3, [pc, #424]	@ (8001624 <HAL_UART_MspInit+0x2b4>)
 800147a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800147e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001480:	4b68      	ldr	r3, [pc, #416]	@ (8001624 <HAL_UART_MspInit+0x2b4>)
 8001482:	2200      	movs	r2, #0
 8001484:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001486:	4b67      	ldr	r3, [pc, #412]	@ (8001624 <HAL_UART_MspInit+0x2b4>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800148c:	4b65      	ldr	r3, [pc, #404]	@ (8001624 <HAL_UART_MspInit+0x2b4>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001492:	4b64      	ldr	r3, [pc, #400]	@ (8001624 <HAL_UART_MspInit+0x2b4>)
 8001494:	2200      	movs	r2, #0
 8001496:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001498:	4b62      	ldr	r3, [pc, #392]	@ (8001624 <HAL_UART_MspInit+0x2b4>)
 800149a:	2200      	movs	r2, #0
 800149c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800149e:	4861      	ldr	r0, [pc, #388]	@ (8001624 <HAL_UART_MspInit+0x2b4>)
 80014a0:	f001 f828 	bl	80024f4 <HAL_DMA_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 80014aa:	f7ff fde7 	bl	800107c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a5c      	ldr	r2, [pc, #368]	@ (8001624 <HAL_UART_MspInit+0x2b4>)
 80014b2:	675a      	str	r2, [r3, #116]	@ 0x74
 80014b4:	4a5b      	ldr	r2, [pc, #364]	@ (8001624 <HAL_UART_MspInit+0x2b4>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2106      	movs	r1, #6
 80014be:	2034      	movs	r0, #52	@ 0x34
 80014c0:	f000 fde4 	bl	800208c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80014c4:	2034      	movs	r0, #52	@ 0x34
 80014c6:	f000 fdfd 	bl	80020c4 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80014ca:	e101      	b.n	80016d0 <HAL_UART_MspInit+0x360>
  else if(huart->Instance==USART2)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a56      	ldr	r2, [pc, #344]	@ (800162c <HAL_UART_MspInit+0x2bc>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	f040 80b2 	bne.w	800163c <HAL_UART_MspInit+0x2cc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014d8:	2380      	movs	r3, #128	@ 0x80
 80014da:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80014dc:	2304      	movs	r3, #4
 80014de:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014e4:	4618      	mov	r0, r3
 80014e6:	f005 fec9 	bl	800727c <HAL_RCCEx_PeriphCLKConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <HAL_UART_MspInit+0x184>
      Error_Handler();
 80014f0:	f7ff fdc4 	bl	800107c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014f4:	4b48      	ldr	r3, [pc, #288]	@ (8001618 <HAL_UART_MspInit+0x2a8>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f8:	4a47      	ldr	r2, [pc, #284]	@ (8001618 <HAL_UART_MspInit+0x2a8>)
 80014fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001500:	4b45      	ldr	r3, [pc, #276]	@ (8001618 <HAL_UART_MspInit+0x2a8>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001508:	61bb      	str	r3, [r7, #24]
 800150a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150c:	4b42      	ldr	r3, [pc, #264]	@ (8001618 <HAL_UART_MspInit+0x2a8>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001510:	4a41      	ldr	r2, [pc, #260]	@ (8001618 <HAL_UART_MspInit+0x2a8>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6313      	str	r3, [r2, #48]	@ 0x30
 8001518:	4b3f      	ldr	r3, [pc, #252]	@ (8001618 <HAL_UART_MspInit+0x2a8>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001524:	4b3c      	ldr	r3, [pc, #240]	@ (8001618 <HAL_UART_MspInit+0x2a8>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001528:	4a3b      	ldr	r2, [pc, #236]	@ (8001618 <HAL_UART_MspInit+0x2a8>)
 800152a:	f043 0308 	orr.w	r3, r3, #8
 800152e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001530:	4b39      	ldr	r3, [pc, #228]	@ (8001618 <HAL_UART_MspInit+0x2a8>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800153c:	2308      	movs	r3, #8
 800153e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001554:	2307      	movs	r3, #7
 8001556:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800155e:	4619      	mov	r1, r3
 8001560:	482e      	ldr	r0, [pc, #184]	@ (800161c <HAL_UART_MspInit+0x2ac>)
 8001562:	f002 fe61 	bl	8004228 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001566:	2320      	movs	r3, #32
 8001568:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800157e:	2307      	movs	r3, #7
 8001580:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001584:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001588:	4619      	mov	r1, r3
 800158a:	4829      	ldr	r0, [pc, #164]	@ (8001630 <HAL_UART_MspInit+0x2c0>)
 800158c:	f002 fe4c 	bl	8004228 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001590:	4b28      	ldr	r3, [pc, #160]	@ (8001634 <HAL_UART_MspInit+0x2c4>)
 8001592:	4a29      	ldr	r2, [pc, #164]	@ (8001638 <HAL_UART_MspInit+0x2c8>)
 8001594:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001596:	4b27      	ldr	r3, [pc, #156]	@ (8001634 <HAL_UART_MspInit+0x2c4>)
 8001598:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800159c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800159e:	4b25      	ldr	r3, [pc, #148]	@ (8001634 <HAL_UART_MspInit+0x2c4>)
 80015a0:	2240      	movs	r2, #64	@ 0x40
 80015a2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a4:	4b23      	ldr	r3, [pc, #140]	@ (8001634 <HAL_UART_MspInit+0x2c4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015aa:	4b22      	ldr	r3, [pc, #136]	@ (8001634 <HAL_UART_MspInit+0x2c4>)
 80015ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015b2:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <HAL_UART_MspInit+0x2c4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001634 <HAL_UART_MspInit+0x2c4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80015be:	4b1d      	ldr	r3, [pc, #116]	@ (8001634 <HAL_UART_MspInit+0x2c4>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001634 <HAL_UART_MspInit+0x2c4>)
 80015c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015ca:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80015cc:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <HAL_UART_MspInit+0x2c4>)
 80015ce:	2204      	movs	r2, #4
 80015d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80015d2:	4b18      	ldr	r3, [pc, #96]	@ (8001634 <HAL_UART_MspInit+0x2c4>)
 80015d4:	2203      	movs	r2, #3
 80015d6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80015d8:	4b16      	ldr	r3, [pc, #88]	@ (8001634 <HAL_UART_MspInit+0x2c4>)
 80015da:	2200      	movs	r2, #0
 80015dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80015de:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <HAL_UART_MspInit+0x2c4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80015e4:	4813      	ldr	r0, [pc, #76]	@ (8001634 <HAL_UART_MspInit+0x2c4>)
 80015e6:	f000 ff85 	bl	80024f4 <HAL_DMA_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_UART_MspInit+0x284>
      Error_Handler();
 80015f0:	f7ff fd44 	bl	800107c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001634 <HAL_UART_MspInit+0x2c4>)
 80015f8:	671a      	str	r2, [r3, #112]	@ 0x70
 80015fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001634 <HAL_UART_MspInit+0x2c4>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	2105      	movs	r1, #5
 8001604:	2026      	movs	r0, #38	@ 0x26
 8001606:	f000 fd41 	bl	800208c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800160a:	2026      	movs	r0, #38	@ 0x26
 800160c:	f000 fd5a 	bl	80020c4 <HAL_NVIC_EnableIRQ>
}
 8001610:	e05e      	b.n	80016d0 <HAL_UART_MspInit+0x360>
 8001612:	bf00      	nop
 8001614:	40004c00 	.word	0x40004c00
 8001618:	40023800 	.word	0x40023800
 800161c:	40020000 	.word	0x40020000
 8001620:	40020800 	.word	0x40020800
 8001624:	20000514 	.word	0x20000514
 8001628:	40026040 	.word	0x40026040
 800162c:	40004400 	.word	0x40004400
 8001630:	40020c00 	.word	0x40020c00
 8001634:	20000574 	.word	0x20000574
 8001638:	400260a0 	.word	0x400260a0
  else if(huart->Instance==USART3)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a25      	ldr	r2, [pc, #148]	@ (80016d8 <HAL_UART_MspInit+0x368>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d144      	bne.n	80016d0 <HAL_UART_MspInit+0x360>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001646:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800164a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800164c:	2300      	movs	r3, #0
 800164e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001650:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001654:	4618      	mov	r0, r3
 8001656:	f005 fe11 	bl	800727c <HAL_RCCEx_PeriphCLKConfig>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_UART_MspInit+0x2f4>
      Error_Handler();
 8001660:	f7ff fd0c 	bl	800107c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001664:	4b1d      	ldr	r3, [pc, #116]	@ (80016dc <HAL_UART_MspInit+0x36c>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	4a1c      	ldr	r2, [pc, #112]	@ (80016dc <HAL_UART_MspInit+0x36c>)
 800166a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800166e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001670:	4b1a      	ldr	r3, [pc, #104]	@ (80016dc <HAL_UART_MspInit+0x36c>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001674:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800167c:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <HAL_UART_MspInit+0x36c>)
 800167e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001680:	4a16      	ldr	r2, [pc, #88]	@ (80016dc <HAL_UART_MspInit+0x36c>)
 8001682:	f043 0308 	orr.w	r3, r3, #8
 8001686:	6313      	str	r3, [r2, #48]	@ 0x30
 8001688:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <HAL_UART_MspInit+0x36c>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001694:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001698:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016ae:	2307      	movs	r3, #7
 80016b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80016b8:	4619      	mov	r1, r3
 80016ba:	4809      	ldr	r0, [pc, #36]	@ (80016e0 <HAL_UART_MspInit+0x370>)
 80016bc:	f002 fdb4 	bl	8004228 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2105      	movs	r1, #5
 80016c4:	2027      	movs	r0, #39	@ 0x27
 80016c6:	f000 fce1 	bl	800208c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016ca:	2027      	movs	r0, #39	@ 0x27
 80016cc:	f000 fcfa 	bl	80020c4 <HAL_NVIC_EnableIRQ>
}
 80016d0:	bf00      	nop
 80016d2:	37c0      	adds	r7, #192	@ 0xc0
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40004800 	.word	0x40004800
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020c00 	.word	0x40020c00

080016e4 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b0ac      	sub	sp, #176	@ 0xb0
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016fc:	f107 0318 	add.w	r3, r7, #24
 8001700:	2284      	movs	r2, #132	@ 0x84
 8001702:	2100      	movs	r1, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f018 fdd7 	bl	801a2b8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001712:	d159      	bne.n	80017c8 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001714:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001718:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800171a:	2300      	movs	r3, #0
 800171c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001720:	f107 0318 	add.w	r3, r7, #24
 8001724:	4618      	mov	r0, r3
 8001726:	f005 fda9 	bl	800727c <HAL_RCCEx_PeriphCLKConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001730:	f7ff fca4 	bl	800107c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001734:	4b26      	ldr	r3, [pc, #152]	@ (80017d0 <HAL_PCD_MspInit+0xec>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001738:	4a25      	ldr	r2, [pc, #148]	@ (80017d0 <HAL_PCD_MspInit+0xec>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001740:	4b23      	ldr	r3, [pc, #140]	@ (80017d0 <HAL_PCD_MspInit+0xec>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800174c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001750:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001766:	230a      	movs	r3, #10
 8001768:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001770:	4619      	mov	r1, r3
 8001772:	4818      	ldr	r0, [pc, #96]	@ (80017d4 <HAL_PCD_MspInit+0xf0>)
 8001774:	f002 fd58 	bl	8004228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001778:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800177c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001790:	4619      	mov	r1, r3
 8001792:	4810      	ldr	r0, [pc, #64]	@ (80017d4 <HAL_PCD_MspInit+0xf0>)
 8001794:	f002 fd48 	bl	8004228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001798:	4b0d      	ldr	r3, [pc, #52]	@ (80017d0 <HAL_PCD_MspInit+0xec>)
 800179a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800179c:	4a0c      	ldr	r2, [pc, #48]	@ (80017d0 <HAL_PCD_MspInit+0xec>)
 800179e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017a2:	6353      	str	r3, [r2, #52]	@ 0x34
 80017a4:	4b0a      	ldr	r3, [pc, #40]	@ (80017d0 <HAL_PCD_MspInit+0xec>)
 80017a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4b07      	ldr	r3, [pc, #28]	@ (80017d0 <HAL_PCD_MspInit+0xec>)
 80017b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b4:	4a06      	ldr	r2, [pc, #24]	@ (80017d0 <HAL_PCD_MspInit+0xec>)
 80017b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80017bc:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <HAL_PCD_MspInit+0xec>)
 80017be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80017c8:	bf00      	nop
 80017ca:	37b0      	adds	r7, #176	@ 0xb0
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020000 	.word	0x40020000

080017d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08e      	sub	sp, #56	@ 0x38
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017e8:	4b33      	ldr	r3, [pc, #204]	@ (80018b8 <HAL_InitTick+0xe0>)
 80017ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ec:	4a32      	ldr	r2, [pc, #200]	@ (80018b8 <HAL_InitTick+0xe0>)
 80017ee:	f043 0310 	orr.w	r3, r3, #16
 80017f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80017f4:	4b30      	ldr	r3, [pc, #192]	@ (80018b8 <HAL_InitTick+0xe0>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f8:	f003 0310 	and.w	r3, r3, #16
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001800:	f107 0210 	add.w	r2, r7, #16
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f005 fd04 	bl	8007218 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001816:	2b00      	cmp	r3, #0
 8001818:	d103      	bne.n	8001822 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800181a:	f005 fcd5 	bl	80071c8 <HAL_RCC_GetPCLK1Freq>
 800181e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001820:	e004      	b.n	800182c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001822:	f005 fcd1 	bl	80071c8 <HAL_RCC_GetPCLK1Freq>
 8001826:	4603      	mov	r3, r0
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800182c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800182e:	4a23      	ldr	r2, [pc, #140]	@ (80018bc <HAL_InitTick+0xe4>)
 8001830:	fba2 2303 	umull	r2, r3, r2, r3
 8001834:	0c9b      	lsrs	r3, r3, #18
 8001836:	3b01      	subs	r3, #1
 8001838:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800183a:	4b21      	ldr	r3, [pc, #132]	@ (80018c0 <HAL_InitTick+0xe8>)
 800183c:	4a21      	ldr	r2, [pc, #132]	@ (80018c4 <HAL_InitTick+0xec>)
 800183e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001840:	4b1f      	ldr	r3, [pc, #124]	@ (80018c0 <HAL_InitTick+0xe8>)
 8001842:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001846:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001848:	4a1d      	ldr	r2, [pc, #116]	@ (80018c0 <HAL_InitTick+0xe8>)
 800184a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800184c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800184e:	4b1c      	ldr	r3, [pc, #112]	@ (80018c0 <HAL_InitTick+0xe8>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001854:	4b1a      	ldr	r3, [pc, #104]	@ (80018c0 <HAL_InitTick+0xe8>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185a:	4b19      	ldr	r3, [pc, #100]	@ (80018c0 <HAL_InitTick+0xe8>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001860:	4817      	ldr	r0, [pc, #92]	@ (80018c0 <HAL_InitTick+0xe8>)
 8001862:	f006 f8fb 	bl	8007a5c <HAL_TIM_Base_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800186c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001870:	2b00      	cmp	r3, #0
 8001872:	d11b      	bne.n	80018ac <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001874:	4812      	ldr	r0, [pc, #72]	@ (80018c0 <HAL_InitTick+0xe8>)
 8001876:	f006 f953 	bl	8007b20 <HAL_TIM_Base_Start_IT>
 800187a:	4603      	mov	r3, r0
 800187c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001880:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001884:	2b00      	cmp	r3, #0
 8001886:	d111      	bne.n	80018ac <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001888:	2036      	movs	r0, #54	@ 0x36
 800188a:	f000 fc1b 	bl	80020c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d808      	bhi.n	80018a6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	2036      	movs	r0, #54	@ 0x36
 800189a:	f000 fbf7 	bl	800208c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800189e:	4a0a      	ldr	r2, [pc, #40]	@ (80018c8 <HAL_InitTick+0xf0>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	e002      	b.n	80018ac <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80018ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3738      	adds	r7, #56	@ 0x38
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40023800 	.word	0x40023800
 80018bc:	431bde83 	.word	0x431bde83
 80018c0:	20000adc 	.word	0x20000adc
 80018c4:	40001000 	.word	0x40001000
 80018c8:	20000004 	.word	0x20000004

080018cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <NMI_Handler+0x4>

080018d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("!!! HARD FAULT HANDLER !!!\n");
 80018da:	4809      	ldr	r0, [pc, #36]	@ (8001900 <HardFault_Handler+0x2c>)
 80018dc:	f018 fbfc 	bl	801a0d8 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    // RED LED toggle for visual indication
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80018e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018e4:	4807      	ldr	r0, [pc, #28]	@ (8001904 <HardFault_Handler+0x30>)
 80018e6:	f002 fe64 	bl	80045b2 <HAL_GPIO_TogglePin>
  	for(volatile int i=0; i<1000000; i++);
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	e002      	b.n	80018f6 <HardFault_Handler+0x22>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3301      	adds	r3, #1
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a03      	ldr	r2, [pc, #12]	@ (8001908 <HardFault_Handler+0x34>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	ddf8      	ble.n	80018f0 <HardFault_Handler+0x1c>
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80018fe:	e7ef      	b.n	80018e0 <HardFault_Handler+0xc>
 8001900:	0801b1e8 	.word	0x0801b1e8
 8001904:	40020400 	.word	0x40020400
 8001908:	000f423f 	.word	0x000f423f

0800190c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	  printf("!!! HARD FAULT HANDLER !!!\n");
 8001910:	4802      	ldr	r0, [pc, #8]	@ (800191c <MemManage_Handler+0x10>)
 8001912:	f018 fbe1 	bl	801a0d8 <puts>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001916:	bf00      	nop
 8001918:	e7fd      	b.n	8001916 <MemManage_Handler+0xa>
 800191a:	bf00      	nop
 800191c:	0801b1e8 	.word	0x0801b1e8

08001920 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	  printf("!!! HARD FAULT HANDLER !!!\n");
 8001924:	4802      	ldr	r0, [pc, #8]	@ (8001930 <BusFault_Handler+0x10>)
 8001926:	f018 fbd7 	bl	801a0d8 <puts>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192a:	bf00      	nop
 800192c:	e7fd      	b.n	800192a <BusFault_Handler+0xa>
 800192e:	bf00      	nop
 8001930:	0801b1e8 	.word	0x0801b1e8

08001934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <UsageFault_Handler+0x4>

0800193c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001950:	4802      	ldr	r0, [pc, #8]	@ (800195c <DMA1_Stream0_IRQHandler+0x10>)
 8001952:	f000 ff6f 	bl	8002834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200002bc 	.word	0x200002bc

08001960 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001964:	4802      	ldr	r0, [pc, #8]	@ (8001970 <DMA1_Stream2_IRQHandler+0x10>)
 8001966:	f000 ff65 	bl	8002834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000514 	.word	0x20000514

08001974 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8001978:	4802      	ldr	r0, [pc, #8]	@ (8001984 <DMA1_Stream5_IRQHandler+0x10>)
 800197a:	f000 ff5b 	bl	8002834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	2000031c 	.word	0x2000031c

08001988 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800198c:	4802      	ldr	r0, [pc, #8]	@ (8001998 <DMA1_Stream6_IRQHandler+0x10>)
 800198e:	f000 ff51 	bl	8002834 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000574 	.word	0x20000574

0800199c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019a0:	4802      	ldr	r0, [pc, #8]	@ (80019ac <I2C1_EV_IRQHandler+0x10>)
 80019a2:	f003 f887 	bl	8004ab4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000214 	.word	0x20000214

080019b0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80019b4:	4802      	ldr	r0, [pc, #8]	@ (80019c0 <I2C1_ER_IRQHandler+0x10>)
 80019b6:	f003 f897 	bl	8004ae8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000214 	.word	0x20000214

080019c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019c8:	4802      	ldr	r0, [pc, #8]	@ (80019d4 <USART2_IRQHandler+0x10>)
 80019ca:	f006 fd3f 	bl	800844c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000404 	.word	0x20000404

080019d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019dc:	4802      	ldr	r0, [pc, #8]	@ (80019e8 <USART3_IRQHandler+0x10>)
 80019de:	f006 fd35 	bl	800844c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	2000048c 	.word	0x2000048c

080019ec <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80019f0:	4802      	ldr	r0, [pc, #8]	@ (80019fc <UART4_IRQHandler+0x10>)
 80019f2:	f006 fd2b 	bl	800844c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	2000037c 	.word	0x2000037c

08001a00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a04:	4802      	ldr	r0, [pc, #8]	@ (8001a10 <TIM6_DAC_IRQHandler+0x10>)
 8001a06:	f006 f903 	bl	8007c10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000adc 	.word	0x20000adc

08001a14 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */
//	printf("ETH_IRQHandler was called\n");
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001a18:	4802      	ldr	r0, [pc, #8]	@ (8001a24 <ETH_IRQHandler+0x10>)
 8001a1a:	f001 fd1d 	bl	8003458 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20009eb4 	.word	0x20009eb4

08001a28 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001a2c:	4802      	ldr	r0, [pc, #8]	@ (8001a38 <ETH_WKUP_IRQHandler+0x10>)
 8001a2e:	f001 fd13 	bl	8003458 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20009eb4 	.word	0x20009eb4

08001a3c <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8001a40:	4802      	ldr	r0, [pc, #8]	@ (8001a4c <I2C4_EV_IRQHandler+0x10>)
 8001a42:	f003 f837 	bl	8004ab4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000268 	.word	0x20000268

08001a50 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8001a54:	4802      	ldr	r0, [pc, #8]	@ (8001a60 <I2C4_ER_IRQHandler+0x10>)
 8001a56:	f003 f847 	bl	8004ae8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000268 	.word	0x20000268

08001a64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return 1;
 8001a68:	2301      	movs	r3, #1
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_kill>:

int _kill(int pid, int sig)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a7e:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <_kill+0x20>)
 8001a80:	2216      	movs	r2, #22
 8001a82:	601a      	str	r2, [r3, #0]
  return -1;
 8001a84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	20027758 	.word	0x20027758

08001a98 <_exit>:

void _exit (int status)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ffe5 	bl	8001a74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aaa:	bf00      	nop
 8001aac:	e7fd      	b.n	8001aaa <_exit+0x12>

08001aae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	e00a      	b.n	8001ad6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ac0:	f3af 8000 	nop.w
 8001ac4:	4601      	mov	r1, r0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	60ba      	str	r2, [r7, #8]
 8001acc:	b2ca      	uxtb	r2, r1
 8001ace:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	dbf0      	blt.n	8001ac0 <_read+0x12>
  }

  return len;
 8001ade:	687b      	ldr	r3, [r7, #4]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	e009      	b.n	8001b0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	60ba      	str	r2, [r7, #8]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fa1a 	bl	8000f3c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	dbf1      	blt.n	8001afa <_write+0x12>
  }
  return len;
 8001b16:	687b      	ldr	r3, [r7, #4]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_close>:

int _close(int file)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b48:	605a      	str	r2, [r3, #4]
  return 0;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <_isatty>:

int _isatty(int file)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b60:	2301      	movs	r3, #1
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b085      	sub	sp, #20
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b90:	4a14      	ldr	r2, [pc, #80]	@ (8001be4 <_sbrk+0x5c>)
 8001b92:	4b15      	ldr	r3, [pc, #84]	@ (8001be8 <_sbrk+0x60>)
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b9c:	4b13      	ldr	r3, [pc, #76]	@ (8001bec <_sbrk+0x64>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d102      	bne.n	8001baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <_sbrk+0x64>)
 8001ba6:	4a12      	ldr	r2, [pc, #72]	@ (8001bf0 <_sbrk+0x68>)
 8001ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001baa:	4b10      	ldr	r3, [pc, #64]	@ (8001bec <_sbrk+0x64>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d205      	bcs.n	8001bc4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf4 <_sbrk+0x6c>)
 8001bba:	220c      	movs	r2, #12
 8001bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	e009      	b.n	8001bd8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bca:	4b08      	ldr	r3, [pc, #32]	@ (8001bec <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a06      	ldr	r2, [pc, #24]	@ (8001bec <_sbrk+0x64>)
 8001bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	371c      	adds	r7, #28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	20050000 	.word	0x20050000
 8001be8:	00000400 	.word	0x00000400
 8001bec:	20000b28 	.word	0x20000b28
 8001bf0:	20027768 	.word	0x20027768
 8001bf4:	20027758 	.word	0x20027758

08001bf8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bfc:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <SystemInit+0x20>)
 8001bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c02:	4a05      	ldr	r2, [pc, #20]	@ (8001c18 <SystemInit+0x20>)
 8001c04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c20:	f7ff ffea 	bl	8001bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c24:	480c      	ldr	r0, [pc, #48]	@ (8001c58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c26:	490d      	ldr	r1, [pc, #52]	@ (8001c5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c28:	4a0d      	ldr	r2, [pc, #52]	@ (8001c60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c2c:	e002      	b.n	8001c34 <LoopCopyDataInit>

08001c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c32:	3304      	adds	r3, #4

08001c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c38:	d3f9      	bcc.n	8001c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c3c:	4c0a      	ldr	r4, [pc, #40]	@ (8001c68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c40:	e001      	b.n	8001c46 <LoopFillZerobss>

08001c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c44:	3204      	adds	r2, #4

08001c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c48:	d3fb      	bcc.n	8001c42 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001c4a:	f018 fbe1 	bl	801a410 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c4e:	f7fe fcc5 	bl	80005dc <main>
  bx  lr    
 8001c52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c54:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c5c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001c60:	0801e3b8 	.word	0x0801e3b8
  ldr r2, =_sbss
 8001c64:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001c68:	20027768 	.word	0x20027768

08001c6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c6c:	e7fe      	b.n	8001c6c <ADC_IRQHandler>

08001c6e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00b      	beq.n	8001c96 <LAN8742_RegisterBusIO+0x28>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d007      	beq.n	8001c96 <LAN8742_RegisterBusIO+0x28>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <LAN8742_RegisterBusIO+0x28>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d102      	bne.n	8001c9c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	e014      	b.n	8001cc6 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d139      	bne.n	8001d62 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	e01c      	b.n	8001d42 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	f107 020c 	add.w	r2, r7, #12
 8001d10:	2112      	movs	r1, #18
 8001d12:	6978      	ldr	r0, [r7, #20]
 8001d14:	4798      	blx	r3
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	da03      	bge.n	8001d24 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001d1c:	f06f 0304 	mvn.w	r3, #4
 8001d20:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001d22:	e00b      	b.n	8001d3c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f003 031f 	and.w	r3, r3, #31
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d105      	bne.n	8001d3c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
         break;
 8001d3a:	e005      	b.n	8001d48 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2b1f      	cmp	r3, #31
 8001d46:	d9df      	bls.n	8001d08 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b1f      	cmp	r3, #31
 8001d4e:	d902      	bls.n	8001d56 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001d50:	f06f 0302 	mvn.w	r3, #2
 8001d54:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001d62:	693b      	ldr	r3, [r7, #16]
 }
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6810      	ldr	r0, [r2, #0]
 8001d80:	f107 020c 	add.w	r2, r7, #12
 8001d84:	2101      	movs	r1, #1
 8001d86:	4798      	blx	r3
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	da02      	bge.n	8001d94 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001d8e:	f06f 0304 	mvn.w	r3, #4
 8001d92:	e06e      	b.n	8001e72 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6810      	ldr	r0, [r2, #0]
 8001d9c:	f107 020c 	add.w	r2, r7, #12
 8001da0:	2101      	movs	r1, #1
 8001da2:	4798      	blx	r3
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	da02      	bge.n	8001db0 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001daa:	f06f 0304 	mvn.w	r3, #4
 8001dae:	e060      	b.n	8001e72 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e059      	b.n	8001e72 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6810      	ldr	r0, [r2, #0]
 8001dc6:	f107 020c 	add.w	r2, r7, #12
 8001dca:	2100      	movs	r1, #0
 8001dcc:	4798      	blx	r3
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	da02      	bge.n	8001dda <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001dd4:	f06f 0304 	mvn.w	r3, #4
 8001dd8:	e04b      	b.n	8001e72 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d11b      	bne.n	8001e1c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d006      	beq.n	8001dfc <LAN8742_GetLinkState+0x90>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e03a      	b.n	8001e72 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e033      	b.n	8001e72 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001e14:	2304      	movs	r3, #4
 8001e16:	e02c      	b.n	8001e72 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001e18:	2305      	movs	r3, #5
 8001e1a:	e02a      	b.n	8001e72 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6810      	ldr	r0, [r2, #0]
 8001e24:	f107 020c 	add.w	r2, r7, #12
 8001e28:	211f      	movs	r1, #31
 8001e2a:	4798      	blx	r3
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	da02      	bge.n	8001e38 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001e32:	f06f 0304 	mvn.w	r3, #4
 8001e36:	e01c      	b.n	8001e72 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001e42:	2306      	movs	r3, #6
 8001e44:	e015      	b.n	8001e72 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f003 031c 	and.w	r3, r3, #28
 8001e4c:	2b18      	cmp	r3, #24
 8001e4e:	d101      	bne.n	8001e54 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001e50:	2302      	movs	r3, #2
 8001e52:	e00e      	b.n	8001e72 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 031c 	and.w	r3, r3, #28
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d101      	bne.n	8001e62 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e007      	b.n	8001e72 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 031c 	and.w	r3, r3, #28
 8001e68:	2b14      	cmp	r3, #20
 8001e6a:	d101      	bne.n	8001e70 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	e000      	b.n	8001e72 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001e70:	2305      	movs	r3, #5
    }
  }
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e7e:	2003      	movs	r0, #3
 8001e80:	f000 f8f9 	bl	8002076 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e84:	200f      	movs	r0, #15
 8001e86:	f7ff fca7 	bl	80017d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e8a:	f7ff f8fd 	bl	8001088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e98:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <HAL_IncTick+0x20>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <HAL_IncTick+0x24>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a04      	ldr	r2, [pc, #16]	@ (8001eb8 <HAL_IncTick+0x24>)
 8001ea6:	6013      	str	r3, [r2, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000008 	.word	0x20000008
 8001eb8:	20000b2c 	.word	0x20000b2c

08001ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	@ (8001ed0 <HAL_GetTick+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000b2c 	.word	0x20000b2c

08001ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001edc:	f7ff ffee 	bl	8001ebc <HAL_GetTick>
 8001ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eec:	d005      	beq.n	8001efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eee:	4b0a      	ldr	r3, [pc, #40]	@ (8001f18 <HAL_Delay+0x44>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001efa:	bf00      	nop
 8001efc:	f7ff ffde 	bl	8001ebc <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d8f7      	bhi.n	8001efc <HAL_Delay+0x28>
  {
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000008 	.word	0x20000008

08001f1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <__NVIC_SetPriorityGrouping+0x40>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f44:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <__NVIC_SetPriorityGrouping+0x44>)
 8001f46:	4313      	orrs	r3, r2
 8001f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4a:	4a04      	ldr	r2, [pc, #16]	@ (8001f5c <__NVIC_SetPriorityGrouping+0x40>)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	60d3      	str	r3, [r2, #12]
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00
 8001f60:	05fa0000 	.word	0x05fa0000

08001f64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f68:	4b04      	ldr	r3, [pc, #16]	@ (8001f7c <__NVIC_GetPriorityGrouping+0x18>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	0a1b      	lsrs	r3, r3, #8
 8001f6e:	f003 0307 	and.w	r3, r3, #7
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	db0b      	blt.n	8001faa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	f003 021f 	and.w	r2, r3, #31
 8001f98:	4907      	ldr	r1, [pc, #28]	@ (8001fb8 <__NVIC_EnableIRQ+0x38>)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000e100 	.word	0xe000e100

08001fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6039      	str	r1, [r7, #0]
 8001fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	db0a      	blt.n	8001fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	490c      	ldr	r1, [pc, #48]	@ (8002008 <__NVIC_SetPriority+0x4c>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	0112      	lsls	r2, r2, #4
 8001fdc:	b2d2      	uxtb	r2, r2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe4:	e00a      	b.n	8001ffc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4908      	ldr	r1, [pc, #32]	@ (800200c <__NVIC_SetPriority+0x50>)
 8001fec:	79fb      	ldrb	r3, [r7, #7]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	3b04      	subs	r3, #4
 8001ff4:	0112      	lsls	r2, r2, #4
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	761a      	strb	r2, [r3, #24]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000e100 	.word	0xe000e100
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002010:	b480      	push	{r7}
 8002012:	b089      	sub	sp, #36	@ 0x24
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f1c3 0307 	rsb	r3, r3, #7
 800202a:	2b04      	cmp	r3, #4
 800202c:	bf28      	it	cs
 800202e:	2304      	movcs	r3, #4
 8002030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3304      	adds	r3, #4
 8002036:	2b06      	cmp	r3, #6
 8002038:	d902      	bls.n	8002040 <NVIC_EncodePriority+0x30>
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3b03      	subs	r3, #3
 800203e:	e000      	b.n	8002042 <NVIC_EncodePriority+0x32>
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002044:	f04f 32ff 	mov.w	r2, #4294967295
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	43da      	mvns	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	401a      	ands	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002058:	f04f 31ff 	mov.w	r1, #4294967295
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	fa01 f303 	lsl.w	r3, r1, r3
 8002062:	43d9      	mvns	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002068:	4313      	orrs	r3, r2
         );
}
 800206a:	4618      	mov	r0, r3
 800206c:	3724      	adds	r7, #36	@ 0x24
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ff4c 	bl	8001f1c <__NVIC_SetPriorityGrouping>
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800208c:	b580      	push	{r7, lr}
 800208e:	b086      	sub	sp, #24
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800209e:	f7ff ff61 	bl	8001f64 <__NVIC_GetPriorityGrouping>
 80020a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	68b9      	ldr	r1, [r7, #8]
 80020a8:	6978      	ldr	r0, [r7, #20]
 80020aa:	f7ff ffb1 	bl	8002010 <NVIC_EncodePriority>
 80020ae:	4602      	mov	r2, r0
 80020b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ff80 	bl	8001fbc <__NVIC_SetPriority>
}
 80020bc:	bf00      	nop
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff54 	bl	8001f80 <__NVIC_EnableIRQ>
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e054      	b.n	800219c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	7f5b      	ldrb	r3, [r3, #29]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7fe ffe8 	bl	80010d8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	791b      	ldrb	r3, [r3, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10c      	bne.n	8002130 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a22      	ldr	r2, [pc, #136]	@ (80021a4 <HAL_CRC_Init+0xc4>)
 800211c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0218 	bic.w	r2, r2, #24
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	e00c      	b.n	800214a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6899      	ldr	r1, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	461a      	mov	r2, r3
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f94c 	bl	80023d8 <HAL_CRCEx_Polynomial_Set>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e028      	b.n	800219c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	795b      	ldrb	r3, [r3, #5]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d105      	bne.n	800215e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f04f 32ff 	mov.w	r2, #4294967295
 800215a:	611a      	str	r2, [r3, #16]
 800215c:	e004      	b.n	8002168 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6912      	ldr	r2, [r2, #16]
 8002166:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695a      	ldr	r2, [r3, #20]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699a      	ldr	r2, [r3, #24]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	04c11db7 	.word	0x04c11db7

080021a8 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2202      	movs	r2, #2
 80021bc:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0201 	orr.w	r2, r2, #1
 80021cc:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d006      	beq.n	80021e4 <HAL_CRC_Calculate+0x3c>
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d829      	bhi.n	800222e <HAL_CRC_Calculate+0x86>
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d019      	beq.n	8002212 <HAL_CRC_Calculate+0x6a>
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d01e      	beq.n	8002220 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80021e2:	e024      	b.n	800222e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	e00a      	b.n	8002200 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	441a      	add	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	3301      	adds	r3, #1
 80021fe:	617b      	str	r3, [r7, #20]
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	429a      	cmp	r2, r3
 8002206:	d3f0      	bcc.n	80021ea <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	613b      	str	r3, [r7, #16]
      break;
 8002210:	e00e      	b.n	8002230 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f812 	bl	8002240 <CRC_Handle_8>
 800221c:	6138      	str	r0, [r7, #16]
      break;
 800221e:	e007      	b.n	8002230 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	68b9      	ldr	r1, [r7, #8]
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 f89d 	bl	8002364 <CRC_Handle_16>
 800222a:	6138      	str	r0, [r7, #16]
      break;
 800222c:	e000      	b.n	8002230 <HAL_CRC_Calculate+0x88>
      break;
 800222e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2201      	movs	r2, #1
 8002234:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002236:	693b      	ldr	r3, [r7, #16]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8002240:	b480      	push	{r7}
 8002242:	b089      	sub	sp, #36	@ 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800224c:	2300      	movs	r3, #0
 800224e:	61fb      	str	r3, [r7, #28]
 8002250:	e023      	b.n	800229a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	4413      	add	r3, r2
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	3301      	adds	r3, #1
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	440b      	add	r3, r1
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800226c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	3302      	adds	r3, #2
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	440b      	add	r3, r1
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800227c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	3303      	adds	r3, #3
 8002284:	68b9      	ldr	r1, [r7, #8]
 8002286:	440b      	add	r3, r1
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8002290:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8002292:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	3301      	adds	r3, #1
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	089b      	lsrs	r3, r3, #2
 800229e:	69fa      	ldr	r2, [r7, #28]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d3d6      	bcc.n	8002252 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d051      	beq.n	8002352 <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d108      	bne.n	80022ca <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	4413      	add	r3, r2
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	7013      	strb	r3, [r2, #0]
 80022c8:	e043      	b.n	8002352 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d118      	bne.n	8002306 <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	4413      	add	r3, r2
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	b21b      	sxth	r3, r3
 80022e0:	021b      	lsls	r3, r3, #8
 80022e2:	b21a      	sxth	r2, r3
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	3301      	adds	r3, #1
 80022ea:	68b9      	ldr	r1, [r7, #8]
 80022ec:	440b      	add	r3, r1
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	b21b      	sxth	r3, r3
 80022f2:	4313      	orrs	r3, r2
 80022f4:	b21b      	sxth	r3, r3
 80022f6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	8b7a      	ldrh	r2, [r7, #26]
 8002302:	801a      	strh	r2, [r3, #0]
 8002304:	e025      	b.n	8002352 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b03      	cmp	r3, #3
 800230e:	d120      	bne.n	8002352 <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	4413      	add	r3, r2
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	b21b      	sxth	r3, r3
 800231c:	021b      	lsls	r3, r3, #8
 800231e:	b21a      	sxth	r2, r3
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	3301      	adds	r3, #1
 8002326:	68b9      	ldr	r1, [r7, #8]
 8002328:	440b      	add	r3, r1
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	b21b      	sxth	r3, r3
 800232e:	4313      	orrs	r3, r2
 8002330:	b21b      	sxth	r3, r3
 8002332:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	8b7a      	ldrh	r2, [r7, #26]
 800233e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	3302      	adds	r3, #2
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	4413      	add	r3, r2
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3724      	adds	r7, #36	@ 0x24
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	e013      	b.n	800239e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	4413      	add	r3, r2
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	041a      	lsls	r2, r3, #16
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	3302      	adds	r3, #2
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	440b      	add	r3, r1
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	4619      	mov	r1, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	3301      	adds	r3, #1
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	085b      	lsrs	r3, r3, #1
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d3e6      	bcc.n	8002376 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d009      	beq.n	80023c6 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	4413      	add	r3, r2
 80023c0:	881a      	ldrh	r2, [r3, #0]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	371c      	adds	r7, #28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80023d8:	b480      	push	{r7}
 80023da:	b087      	sub	sp, #28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80023e8:	231f      	movs	r3, #31
 80023ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d102      	bne.n	80023fc <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	75fb      	strb	r3, [r7, #23]
 80023fa:	e063      	b.n	80024c4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80023fc:	bf00      	nop
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1e5a      	subs	r2, r3, #1
 8002402:	613a      	str	r2, [r7, #16]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d009      	beq.n	800241c <HAL_CRCEx_Polynomial_Set+0x44>
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f0      	beq.n	80023fe <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b18      	cmp	r3, #24
 8002420:	d846      	bhi.n	80024b0 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002422:	a201      	add	r2, pc, #4	@ (adr r2, 8002428 <HAL_CRCEx_Polynomial_Set+0x50>)
 8002424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002428:	080024b7 	.word	0x080024b7
 800242c:	080024b1 	.word	0x080024b1
 8002430:	080024b1 	.word	0x080024b1
 8002434:	080024b1 	.word	0x080024b1
 8002438:	080024b1 	.word	0x080024b1
 800243c:	080024b1 	.word	0x080024b1
 8002440:	080024b1 	.word	0x080024b1
 8002444:	080024b1 	.word	0x080024b1
 8002448:	080024a5 	.word	0x080024a5
 800244c:	080024b1 	.word	0x080024b1
 8002450:	080024b1 	.word	0x080024b1
 8002454:	080024b1 	.word	0x080024b1
 8002458:	080024b1 	.word	0x080024b1
 800245c:	080024b1 	.word	0x080024b1
 8002460:	080024b1 	.word	0x080024b1
 8002464:	080024b1 	.word	0x080024b1
 8002468:	08002499 	.word	0x08002499
 800246c:	080024b1 	.word	0x080024b1
 8002470:	080024b1 	.word	0x080024b1
 8002474:	080024b1 	.word	0x080024b1
 8002478:	080024b1 	.word	0x080024b1
 800247c:	080024b1 	.word	0x080024b1
 8002480:	080024b1 	.word	0x080024b1
 8002484:	080024b1 	.word	0x080024b1
 8002488:	0800248d 	.word	0x0800248d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	2b06      	cmp	r3, #6
 8002490:	d913      	bls.n	80024ba <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002496:	e010      	b.n	80024ba <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	2b07      	cmp	r3, #7
 800249c:	d90f      	bls.n	80024be <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80024a2:	e00c      	b.n	80024be <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	2b0f      	cmp	r3, #15
 80024a8:	d90b      	bls.n	80024c2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80024ae:	e008      	b.n	80024c2 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	75fb      	strb	r3, [r7, #23]
        break;
 80024b4:	e006      	b.n	80024c4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80024b6:	bf00      	nop
 80024b8:	e004      	b.n	80024c4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80024ba:	bf00      	nop
 80024bc:	e002      	b.n	80024c4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80024be:	bf00      	nop
 80024c0:	e000      	b.n	80024c4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80024c2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80024c4:	7dfb      	ldrb	r3, [r7, #23]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10d      	bne.n	80024e6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f023 0118 	bic.w	r1, r3, #24
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80024e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002500:	f7ff fcdc 	bl	8001ebc <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e099      	b.n	8002644 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0201 	bic.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002530:	e00f      	b.n	8002552 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002532:	f7ff fcc3 	bl	8001ebc <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b05      	cmp	r3, #5
 800253e:	d908      	bls.n	8002552 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2220      	movs	r2, #32
 8002544:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2203      	movs	r2, #3
 800254a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e078      	b.n	8002644 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1e8      	bne.n	8002532 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	4b38      	ldr	r3, [pc, #224]	@ (800264c <HAL_DMA_Init+0x158>)
 800256c:	4013      	ands	r3, r2
 800256e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800257e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800258a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002596:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d107      	bne.n	80025bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b4:	4313      	orrs	r3, r2
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f023 0307 	bic.w	r3, r3, #7
 80025d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	4313      	orrs	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e2:	2b04      	cmp	r3, #4
 80025e4:	d117      	bne.n	8002616 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00e      	beq.n	8002616 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 fb23 	bl	8002c44 <DMA_CheckFifoParam>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d008      	beq.n	8002616 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2240      	movs	r2, #64	@ 0x40
 8002608:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002612:	2301      	movs	r3, #1
 8002614:	e016      	b.n	8002644 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 fada 	bl	8002bd8 <DMA_CalcBaseAndBitshift>
 8002624:	4603      	mov	r3, r0
 8002626:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262c:	223f      	movs	r2, #63	@ 0x3f
 800262e:	409a      	lsls	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	f010803f 	.word	0xf010803f

08002650 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002666:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_DMA_Start_IT+0x26>
 8002672:	2302      	movs	r3, #2
 8002674:	e048      	b.n	8002708 <HAL_DMA_Start_IT+0xb8>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d137      	bne.n	80026fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2202      	movs	r2, #2
 800268e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	68b9      	ldr	r1, [r7, #8]
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f000 fa6c 	bl	8002b7c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a8:	223f      	movs	r2, #63	@ 0x3f
 80026aa:	409a      	lsls	r2, r3
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0216 	orr.w	r2, r2, #22
 80026be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695a      	ldr	r2, [r3, #20]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80026ce:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d007      	beq.n	80026e8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0208 	orr.w	r2, r2, #8
 80026e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 0201 	orr.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	e005      	b.n	8002706 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002702:	2302      	movs	r3, #2
 8002704:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002706:	7dfb      	ldrb	r3, [r7, #23]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800271e:	f7ff fbcd 	bl	8001ebc <HAL_GetTick>
 8002722:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d008      	beq.n	8002742 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2280      	movs	r2, #128	@ 0x80
 8002734:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e052      	b.n	80027e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0216 	bic.w	r2, r2, #22
 8002750:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002760:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	2b00      	cmp	r3, #0
 8002768:	d103      	bne.n	8002772 <HAL_DMA_Abort+0x62>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800276e:	2b00      	cmp	r3, #0
 8002770:	d007      	beq.n	8002782 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0208 	bic.w	r2, r2, #8
 8002780:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002792:	e013      	b.n	80027bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002794:	f7ff fb92 	bl	8001ebc <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b05      	cmp	r3, #5
 80027a0:	d90c      	bls.n	80027bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2220      	movs	r2, #32
 80027a6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2203      	movs	r2, #3
 80027ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e015      	b.n	80027e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1e4      	bne.n	8002794 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ce:	223f      	movs	r2, #63	@ 0x3f
 80027d0:	409a      	lsls	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d004      	beq.n	800280e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2280      	movs	r2, #128	@ 0x80
 8002808:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e00c      	b.n	8002828 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2205      	movs	r2, #5
 8002812:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0201 	bic.w	r2, r2, #1
 8002824:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800283c:	2300      	movs	r3, #0
 800283e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002840:	4b8e      	ldr	r3, [pc, #568]	@ (8002a7c <HAL_DMA_IRQHandler+0x248>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a8e      	ldr	r2, [pc, #568]	@ (8002a80 <HAL_DMA_IRQHandler+0x24c>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	0a9b      	lsrs	r3, r3, #10
 800284c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002852:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285e:	2208      	movs	r2, #8
 8002860:	409a      	lsls	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4013      	ands	r3, r2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d01a      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d013      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0204 	bic.w	r2, r2, #4
 8002886:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288c:	2208      	movs	r2, #8
 800288e:	409a      	lsls	r2, r3
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002898:	f043 0201 	orr.w	r2, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a4:	2201      	movs	r2, #1
 80028a6:	409a      	lsls	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4013      	ands	r3, r2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d012      	beq.n	80028d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00b      	beq.n	80028d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c2:	2201      	movs	r2, #1
 80028c4:	409a      	lsls	r2, r3
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ce:	f043 0202 	orr.w	r2, r3, #2
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028da:	2204      	movs	r2, #4
 80028dc:	409a      	lsls	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d012      	beq.n	800290c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00b      	beq.n	800290c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f8:	2204      	movs	r2, #4
 80028fa:	409a      	lsls	r2, r3
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002904:	f043 0204 	orr.w	r2, r3, #4
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002910:	2210      	movs	r2, #16
 8002912:	409a      	lsls	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4013      	ands	r3, r2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d043      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d03c      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292e:	2210      	movs	r2, #16
 8002930:	409a      	lsls	r2, r3
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d018      	beq.n	8002976 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d108      	bne.n	8002964 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d024      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	4798      	blx	r3
 8002962:	e01f      	b.n	80029a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01b      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	4798      	blx	r3
 8002974:	e016      	b.n	80029a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d107      	bne.n	8002994 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0208 	bic.w	r2, r2, #8
 8002992:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a8:	2220      	movs	r2, #32
 80029aa:	409a      	lsls	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 808f 	beq.w	8002ad4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 8087 	beq.w	8002ad4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ca:	2220      	movs	r2, #32
 80029cc:	409a      	lsls	r2, r3
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b05      	cmp	r3, #5
 80029dc:	d136      	bne.n	8002a4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0216 	bic.w	r2, r2, #22
 80029ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695a      	ldr	r2, [r3, #20]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d103      	bne.n	8002a0e <HAL_DMA_IRQHandler+0x1da>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0208 	bic.w	r2, r2, #8
 8002a1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a22:	223f      	movs	r2, #63	@ 0x3f
 8002a24:	409a      	lsls	r2, r3
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d07e      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	4798      	blx	r3
        }
        return;
 8002a4a:	e079      	b.n	8002b40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d01d      	beq.n	8002a96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10d      	bne.n	8002a84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d031      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	4798      	blx	r3
 8002a78:	e02c      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x2a0>
 8002a7a:	bf00      	nop
 8002a7c:	20000000 	.word	0x20000000
 8002a80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d023      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	4798      	blx	r3
 8002a94:	e01e      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d10f      	bne.n	8002ac4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0210 	bic.w	r2, r2, #16
 8002ab2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d032      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d022      	beq.n	8002b2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2205      	movs	r2, #5
 8002aec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0201 	bic.w	r2, r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	3301      	adds	r3, #1
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d307      	bcc.n	8002b1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f2      	bne.n	8002b00 <HAL_DMA_IRQHandler+0x2cc>
 8002b1a:	e000      	b.n	8002b1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
 8002b3e:	e000      	b.n	8002b42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b40:	bf00      	nop
    }
  }
}
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b56:	b2db      	uxtb	r3, r3
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
 8002b88:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b98:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b40      	cmp	r3, #64	@ 0x40
 8002ba8:	d108      	bne.n	8002bbc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bba:	e007      	b.n	8002bcc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	60da      	str	r2, [r3, #12]
}
 8002bcc:	bf00      	nop
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	3b10      	subs	r3, #16
 8002be8:	4a13      	ldr	r2, [pc, #76]	@ (8002c38 <DMA_CalcBaseAndBitshift+0x60>)
 8002bea:	fba2 2303 	umull	r2, r3, r2, r3
 8002bee:	091b      	lsrs	r3, r3, #4
 8002bf0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bf2:	4a12      	ldr	r2, [pc, #72]	@ (8002c3c <DMA_CalcBaseAndBitshift+0x64>)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d908      	bls.n	8002c18 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c40 <DMA_CalcBaseAndBitshift+0x68>)
 8002c0e:	4013      	ands	r3, r2
 8002c10:	1d1a      	adds	r2, r3, #4
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c16:	e006      	b.n	8002c26 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b08      	ldr	r3, [pc, #32]	@ (8002c40 <DMA_CalcBaseAndBitshift+0x68>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	aaaaaaab 	.word	0xaaaaaaab
 8002c3c:	0801e194 	.word	0x0801e194
 8002c40:	fffffc00 	.word	0xfffffc00

08002c44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d11f      	bne.n	8002c9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d856      	bhi.n	8002d12 <DMA_CheckFifoParam+0xce>
 8002c64:	a201      	add	r2, pc, #4	@ (adr r2, 8002c6c <DMA_CheckFifoParam+0x28>)
 8002c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6a:	bf00      	nop
 8002c6c:	08002c7d 	.word	0x08002c7d
 8002c70:	08002c8f 	.word	0x08002c8f
 8002c74:	08002c7d 	.word	0x08002c7d
 8002c78:	08002d13 	.word	0x08002d13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d046      	beq.n	8002d16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c8c:	e043      	b.n	8002d16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c92:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c96:	d140      	bne.n	8002d1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c9c:	e03d      	b.n	8002d1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ca6:	d121      	bne.n	8002cec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d837      	bhi.n	8002d1e <DMA_CheckFifoParam+0xda>
 8002cae:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb4 <DMA_CheckFifoParam+0x70>)
 8002cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb4:	08002cc5 	.word	0x08002cc5
 8002cb8:	08002ccb 	.word	0x08002ccb
 8002cbc:	08002cc5 	.word	0x08002cc5
 8002cc0:	08002cdd 	.word	0x08002cdd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc8:	e030      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d025      	beq.n	8002d22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cda:	e022      	b.n	8002d22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ce4:	d11f      	bne.n	8002d26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cea:	e01c      	b.n	8002d26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d903      	bls.n	8002cfa <DMA_CheckFifoParam+0xb6>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	d003      	beq.n	8002d00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cf8:	e018      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8002cfe:	e015      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00e      	beq.n	8002d2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d10:	e00b      	b.n	8002d2a <DMA_CheckFifoParam+0xe6>
      break;
 8002d12:	bf00      	nop
 8002d14:	e00a      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d16:	bf00      	nop
 8002d18:	e008      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e006      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e004      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d22:	bf00      	nop
 8002d24:	e002      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;   
 8002d26:	bf00      	nop
 8002d28:	e000      	b.n	8002d2c <DMA_CheckFifoParam+0xe8>
      break;
 8002d2a:	bf00      	nop
    }
  } 
  
  return status; 
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3714      	adds	r7, #20
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop

08002d3c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e086      	b.n	8002e5c <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d106      	bne.n	8002d66 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f007 fc73 	bl	800a64c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d66:	4b3f      	ldr	r3, [pc, #252]	@ (8002e64 <HAL_ETH_Init+0x128>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6a:	4a3e      	ldr	r2, [pc, #248]	@ (8002e64 <HAL_ETH_Init+0x128>)
 8002d6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d72:	4b3c      	ldr	r3, [pc, #240]	@ (8002e64 <HAL_ETH_Init+0x128>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8002e68 <HAL_ETH_Init+0x12c>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4a39      	ldr	r2, [pc, #228]	@ (8002e68 <HAL_ETH_Init+0x12c>)
 8002d84:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002d88:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002d8a:	4b37      	ldr	r3, [pc, #220]	@ (8002e68 <HAL_ETH_Init+0x12c>)
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	4935      	ldr	r1, [pc, #212]	@ (8002e68 <HAL_ETH_Init+0x12c>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002d98:	4b33      	ldr	r3, [pc, #204]	@ (8002e68 <HAL_ETH_Init+0x12c>)
 8002d9a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6812      	ldr	r2, [r2, #0]
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002db2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002db4:	f7ff f882 	bl	8001ebc <HAL_GetTick>
 8002db8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002dba:	e011      	b.n	8002de0 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002dbc:	f7ff f87e 	bl	8001ebc <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002dca:	d909      	bls.n	8002de0 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2204      	movs	r2, #4
 8002dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	22e0      	movs	r2, #224	@ 0xe0
 8002dd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e03d      	b.n	8002e5c <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1e4      	bne.n	8002dbc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 ff5c 	bl	8003cb0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f001 f807 	bl	8003e0c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f001 f85d 	bl	8003ebe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 ffc5 	bl	8003d9c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002e20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002e6c <HAL_ETH_Init+0x130>)
 8002e30:	430b      	orrs	r3, r1
 8002e32:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002e46:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2210      	movs	r2, #16
 8002e56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40023800 	.word	0x40023800
 8002e68:	40013800 	.word	0x40013800
 8002e6c:	00020060 	.word	0x00020060

08002e70 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e7e:	2b10      	cmp	r3, #16
 8002e80:	d15f      	bne.n	8002f42 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2220      	movs	r2, #32
 8002e86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2204      	movs	r2, #4
 8002e94:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f9f6 	bl	8003288 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ea4:	2001      	movs	r0, #1
 8002ea6:	f7ff f815 	bl	8001ed4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6812      	ldr	r2, [r2, #0]
 8002ec0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ec4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ec8:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	f043 0302 	orr.w	r3, r3, #2
 8002edc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ee0:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fd80 	bl	80039e8 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0208 	orr.w	r2, r2, #8
 8002ef6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f00:	2001      	movs	r0, #1
 8002f02:	f7fe ffe7 	bl	8001ed4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0204 	orr.w	r2, r2, #4
 8002f1c:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f26:	69d9      	ldr	r1, [r3, #28]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4b07      	ldr	r3, [pc, #28]	@ (8002f4c <HAL_ETH_Start_IT+0xdc>)
 8002f2e:	430b      	orrs	r3, r1
 8002f30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f34:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2240      	movs	r2, #64	@ 0x40
 8002f3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	e000      	b.n	8002f44 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
  }
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	0001a0c1 	.word	0x0001a0c1

08002f50 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f5e:	2b40      	cmp	r3, #64	@ 0x40
 8002f60:	d16e      	bne.n	8003040 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f72:	69d9      	ldr	r1, [r3, #28]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	4b34      	ldr	r3, [pc, #208]	@ (800304c <HAL_ETH_Stop_IT+0xfc>)
 8002f7a:	400b      	ands	r3, r1
 8002f7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f80:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f94:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f98:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	f023 0302 	bic.w	r3, r3, #2
 8002fac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002fb0:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0204 	bic.w	r2, r2, #4
 8002fc0:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f7fe ff82 	bl	8001ed4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fd05 	bl	80039e8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0208 	bic.w	r2, r2, #8
 8002fec:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	f7fe ff6c 	bl	8001ed4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	e00e      	b.n	8003028 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	3212      	adds	r2, #18
 8003010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003014:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	3301      	adds	r3, #1
 8003026:	617b      	str	r3, [r7, #20]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2b03      	cmp	r3, #3
 800302c:	d9ed      	bls.n	800300a <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2210      	movs	r2, #16
 8003038:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	e000      	b.n	8003042 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
  }
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	fffe5f3e 	.word	0xfffe5f3e

08003050 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d109      	bne.n	8003074 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003066:	f043 0201 	orr.w	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e045      	b.n	8003100 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800307a:	2b40      	cmp	r3, #64	@ 0x40
 800307c:	d13f      	bne.n	80030fe <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003086:	2201      	movs	r2, #1
 8003088:	6839      	ldr	r1, [r7, #0]
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 ff86 	bl	8003f9c <ETH_Prepare_Tx_Descriptors>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309c:	f043 0202 	orr.w	r2, r3, #2
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e02a      	b.n	8003100 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80030aa:	f3bf 8f4f 	dsb	sy
}
 80030ae:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d904      	bls.n	80030cc <HAL_ETH_Transmit_IT+0x7c>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c6:	1f1a      	subs	r2, r3, #4
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00d      	beq.n	80030fa <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030e6:	461a      	mov	r2, r3
 80030e8:	2304      	movs	r3, #4
 80030ea:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030f4:	461a      	mov	r2, r3
 80030f6:	2300      	movs	r3, #0
 80030f8:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	e000      	b.n	8003100 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
  }
}
 8003100:	4618      	mov	r0, r3
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d109      	bne.n	8003134 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003126:	f043 0201 	orr.w	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0a4      	b.n	800327e <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800313a:	2b40      	cmp	r3, #64	@ 0x40
 800313c:	d001      	beq.n	8003142 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e09d      	b.n	800327e <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003146:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69fa      	ldr	r2, [r7, #28]
 800314c:	3212      	adds	r2, #18
 800314e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003152:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003158:	f1c3 0304 	rsb	r3, r3, #4
 800315c:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800315e:	e066      	b.n	800322e <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d007      	beq.n	800317c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	69da      	ldr	r2, [r3, #28]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	699a      	ldr	r2, [r3, #24]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003184:	2b00      	cmp	r3, #0
 8003186:	d103      	bne.n	8003190 <HAL_ETH_ReadData+0x88>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800318c:	2b00      	cmp	r3, #0
 800318e:	d03c      	beq.n	800320a <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	0c1b      	lsrs	r3, r3, #16
 80031ae:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80031b2:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80031c8:	2301      	movs	r3, #1
 80031ca:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80031e4:	461a      	mov	r2, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	f007 fc03 	bl	800a9f4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	441a      	add	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2200      	movs	r2, #0
 8003208:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3301      	adds	r3, #1
 800320e:	61fb      	str	r3, [r7, #28]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	2b03      	cmp	r3, #3
 8003214:	d902      	bls.n	800321c <HAL_ETH_ReadData+0x114>
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3b04      	subs	r3, #4
 800321a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69fa      	ldr	r2, [r7, #28]
 8003220:	3212      	adds	r2, #18
 8003222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003226:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	3301      	adds	r3, #1
 800322c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8003232:	2b00      	cmp	r3, #0
 8003234:	db06      	blt.n	8003244 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	429a      	cmp	r2, r3
 800323c:	d202      	bcs.n	8003244 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800323e:	7cfb      	ldrb	r3, [r7, #19]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d08d      	beq.n	8003160 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	441a      	add	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f815 	bl	8003288 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69fa      	ldr	r2, [r7, #28]
 8003262:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8003264:	7cfb      	ldrb	r3, [r7, #19]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d108      	bne.n	800327c <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	e000      	b.n	800327e <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
}
 800327e:	4618      	mov	r0, r3
 8003280:	3720      	adds	r7, #32
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003290:	2300      	movs	r3, #0
 8003292:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8003294:	2301      	movs	r3, #1
 8003296:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800329c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69fa      	ldr	r2, [r7, #28]
 80032a2:	3212      	adds	r2, #18
 80032a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032ae:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80032b0:	e042      	b.n	8003338 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d112      	bne.n	80032e0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80032ba:	f107 0308 	add.w	r3, r7, #8
 80032be:	4618      	mov	r0, r3
 80032c0:	f007 fb68 	bl	800a994 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d102      	bne.n	80032d0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	74fb      	strb	r3, [r7, #19]
 80032ce:	e007      	b.n	80032e0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	461a      	mov	r2, r3
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	461a      	mov	r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80032e0:	7cfb      	ldrb	r3, [r7, #19]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d028      	beq.n	8003338 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	4b26      	ldr	r3, [pc, #152]	@ (800338c <ETH_UpdateDescriptor+0x104>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	6053      	str	r3, [r2, #4]
 80032fa:	e005      	b.n	8003308 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	3301      	adds	r3, #1
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	2b03      	cmp	r3, #3
 800331e:	d902      	bls.n	8003326 <ETH_UpdateDescriptor+0x9e>
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	3b04      	subs	r3, #4
 8003324:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	3212      	adds	r2, #18
 800332c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003330:	617b      	str	r3, [r7, #20]
      desccount--;
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	3b01      	subs	r3, #1
 8003336:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <ETH_UpdateDescriptor+0xbc>
 800333e:	7cfb      	ldrb	r3, [r7, #19]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1b6      	bne.n	80032b2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	429a      	cmp	r2, r3
 800334c:	d01a      	beq.n	8003384 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	3303      	adds	r3, #3
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003358:	f3bf 8f5f 	dmb	sy
}
 800335c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6919      	ldr	r1, [r3, #16]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	18ca      	adds	r2, r1, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003376:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69fa      	ldr	r2, [r7, #28]
 800337c:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8003384:	bf00      	nop
 8003386:	3720      	adds	r7, #32
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	80004000 	.word	0x80004000

08003390 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3318      	adds	r3, #24
 800339c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80033aa:	2301      	movs	r3, #1
 80033ac:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80033ae:	e047      	b.n	8003440 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	3b01      	subs	r3, #1
 80033b8:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	3304      	adds	r3, #4
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10a      	bne.n	80033e0 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	3301      	adds	r3, #1
 80033ce:	613b      	str	r3, [r7, #16]
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	2b03      	cmp	r3, #3
 80033d4:	d902      	bls.n	80033dc <HAL_ETH_ReleaseTxPacket+0x4c>
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	3b04      	subs	r3, #4
 80033da:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80033e0:	7bbb      	ldrb	r3, [r7, #14]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d02c      	beq.n	8003440 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68d9      	ldr	r1, [r3, #12]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	440b      	add	r3, r1
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	db1f      	blt.n	800343c <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	3304      	adds	r3, #4
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	4618      	mov	r0, r3
 800340a:	f007 fb35 	bl	800aa78 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	3304      	adds	r3, #4
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	2200      	movs	r2, #0
 800341a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	3301      	adds	r3, #1
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d902      	bls.n	800342e <HAL_ETH_ReleaseTxPacket+0x9e>
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	3b04      	subs	r3, #4
 800342c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	62da      	str	r2, [r3, #44]	@ 0x2c
 800343a:	e001      	b.n	8003440 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_ETH_ReleaseTxPacket+0xbc>
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1b1      	bne.n	80033b0 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003466:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8003480:	4b4b      	ldr	r3, [pc, #300]	@ (80035b0 <HAL_ETH_IRQHandler+0x158>)
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00e      	beq.n	80034ae <HAL_ETH_IRQHandler+0x56>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034a2:	461a      	mov	r2, r3
 80034a4:	4b43      	ldr	r3, [pc, #268]	@ (80035b4 <HAL_ETH_IRQHandler+0x15c>)
 80034a6:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f006 fe0f 	bl	800a0cc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00f      	beq.n	80034d8 <HAL_ETH_IRQHandler+0x80>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034ca:	461a      	mov	r2, r3
 80034cc:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80034d0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f006 fe0a 	bl	800a0ec <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d042      	beq.n	8003568 <HAL_ETH_IRQHandler+0x110>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d03d      	beq.n	8003568 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f2:	f043 0208 	orr.w	r2, r3, #8
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d01a      	beq.n	800353c <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	4b29      	ldr	r3, [pc, #164]	@ (80035b8 <HAL_ETH_IRQHandler+0x160>)
 8003512:	4013      	ands	r3, r2
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 800352c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003530:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	22e0      	movs	r2, #224	@ 0xe0
 8003536:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800353a:	e012      	b.n	8003562 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	f248 6380 	movw	r3, #34432	@ 0x8680
 800354a:	4013      	ands	r3, r2
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800355a:	461a      	mov	r2, r3
 800355c:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003560:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f006 fdd2 	bl	800a10c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00e      	beq.n	8003590 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003578:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f81a 	bl	80035bc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d006      	beq.n	80035a8 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800359a:	4b05      	ldr	r3, [pc, #20]	@ (80035b0 <HAL_ETH_IRQHandler+0x158>)
 800359c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80035a0:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f814 	bl	80035d0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80035a8:	bf00      	nop
 80035aa:	3718      	adds	r7, #24
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40013c00 	.word	0x40013c00
 80035b4:	00010040 	.word	0x00010040
 80035b8:	007e2000 	.word	0x007e2000

080035bc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f003 031c 	and.w	r3, r3, #28
 8003600:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	02db      	lsls	r3, r3, #11
 8003606:	b29b      	uxth	r3, r3
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	019b      	lsls	r3, r3, #6
 8003612:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f023 0302 	bic.w	r3, r3, #2
 8003622:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003634:	f7fe fc42 	bl	8001ebc <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800363a:	e00d      	b.n	8003658 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800363c:	f7fe fc3e 	bl	8001ebc <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800364a:	d301      	bcc.n	8003650 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e010      	b.n	8003672 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1ec      	bne.n	800363c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	b29b      	uxth	r3, r3
 800366a:	461a      	mov	r2, r3
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b086      	sub	sp, #24
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	607a      	str	r2, [r7, #4]
 8003686:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f003 031c 	and.w	r3, r3, #28
 8003696:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	02db      	lsls	r3, r3, #11
 800369c:	b29b      	uxth	r3, r3
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	019b      	lsls	r3, r3, #6
 80036a8:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f043 0302 	orr.w	r3, r3, #2
 80036b8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f043 0301 	orr.w	r3, r3, #1
 80036c0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036d4:	f7fe fbf2 	bl	8001ebc <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80036da:	e00d      	b.n	80036f8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80036dc:	f7fe fbee 	bl	8001ebc <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036ea:	d301      	bcc.n	80036f0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e009      	b.n	8003704 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1ec      	bne.n	80036dc <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d101      	bne.n	8003720 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0e6      	b.n	80038ee <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0310 	and.w	r3, r3, #16
 800372a:	2b00      	cmp	r3, #0
 800372c:	bf14      	ite	ne
 800372e:	2301      	movne	r3, #1
 8003730:	2300      	moveq	r3, #0
 8003732:	b2db      	uxtb	r3, r3
 8003734:	461a      	mov	r2, r3
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003754:	2b00      	cmp	r3, #0
 8003756:	bf0c      	ite	eq
 8003758:	2301      	moveq	r3, #1
 800375a:	2300      	movne	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	461a      	mov	r2, r3
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8003770:	2b00      	cmp	r3, #0
 8003772:	bf14      	ite	ne
 8003774:	2301      	movne	r3, #1
 8003776:	2300      	moveq	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800378a:	2b00      	cmp	r3, #0
 800378c:	bf0c      	ite	eq
 800378e:	2301      	moveq	r3, #1
 8003790:	2300      	movne	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	461a      	mov	r2, r3
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	bf14      	ite	ne
 80037a8:	2301      	movne	r3, #1
 80037aa:	2300      	moveq	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bf0c      	ite	eq
 80037de:	2301      	moveq	r3, #1
 80037e0:	2300      	movne	r3, #0
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bf0c      	ite	eq
 80037f8:	2301      	moveq	r3, #1
 80037fa:	2300      	movne	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	461a      	mov	r2, r3
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800380e:	2b00      	cmp	r3, #0
 8003810:	bf14      	ite	ne
 8003812:	2301      	movne	r3, #1
 8003814:	2300      	moveq	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003836:	2b00      	cmp	r3, #0
 8003838:	bf14      	ite	ne
 800383a:	2301      	movne	r3, #1
 800383c:	2300      	moveq	r3, #0
 800383e:	b2db      	uxtb	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	bf14      	ite	ne
 8003854:	2301      	movne	r3, #1
 8003856:	2300      	moveq	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	461a      	mov	r2, r3
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	bf14      	ite	ne
 800386e:	2301      	movne	r3, #1
 8003870:	2300      	moveq	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003886:	2b00      	cmp	r3, #0
 8003888:	bf0c      	ite	eq
 800388a:	2301      	moveq	r3, #1
 800388c:	2300      	movne	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	0c1b      	lsrs	r3, r3, #16
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f003 0304 	and.w	r3, r3, #4
 80038be:	2b00      	cmp	r3, #0
 80038c0:	bf14      	ite	ne
 80038c2:	2301      	movne	r3, #1
 80038c4:	2300      	moveq	r3, #0
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	461a      	mov	r2, r3
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80038da:	2b00      	cmp	r3, #0
 80038dc:	bf14      	ite	ne
 80038de:	2301      	movne	r3, #1
 80038e0:	2300      	moveq	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e00b      	b.n	8003926 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003914:	2b10      	cmp	r3, #16
 8003916:	d105      	bne.n	8003924 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003918:	6839      	ldr	r1, [r7, #0]
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f88a 	bl	8003a34 <ETH_SetMACConfig>

    return HAL_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	e000      	b.n	8003926 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
  }
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 031c 	bic.w	r3, r3, #28
 8003946:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003948:	f003 fc32 	bl	80071b0 <HAL_RCC_GetHCLKFreq>
 800394c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	4a14      	ldr	r2, [pc, #80]	@ (80039a4 <HAL_ETH_SetMDIOClockRange+0x74>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d804      	bhi.n	8003960 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f043 0308 	orr.w	r3, r3, #8
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	e019      	b.n	8003994 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4a11      	ldr	r2, [pc, #68]	@ (80039a8 <HAL_ETH_SetMDIOClockRange+0x78>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d204      	bcs.n	8003972 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f043 030c 	orr.w	r3, r3, #12
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	e010      	b.n	8003994 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	4a0d      	ldr	r2, [pc, #52]	@ (80039ac <HAL_ETH_SetMDIOClockRange+0x7c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d90c      	bls.n	8003994 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	4a0c      	ldr	r2, [pc, #48]	@ (80039b0 <HAL_ETH_SetMDIOClockRange+0x80>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d804      	bhi.n	800398c <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f043 0304 	orr.w	r3, r3, #4
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	e003      	b.n	8003994 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f043 0310 	orr.w	r3, r3, #16
 8003992:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	611a      	str	r2, [r3, #16]
}
 800399c:	bf00      	nop
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	02160ebf 	.word	0x02160ebf
 80039a8:	03938700 	.word	0x03938700
 80039ac:	05f5e0ff 	.word	0x05f5e0ff
 80039b0:	08f0d17f 	.word	0x08f0d17f

080039b4 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80039dc:	4618      	mov	r0, r3
 80039de:	370c      	adds	r7, #12
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a0a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a18:	2001      	movs	r0, #1
 8003a1a:	f7fe fa5b 	bl	8001ed4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a28:	6193      	str	r3, [r2, #24]
}
 8003a2a:	bf00      	nop
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4b53      	ldr	r3, [pc, #332]	@ (8003b98 <ETH_SetMACConfig+0x164>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	7b9b      	ldrb	r3, [r3, #14]
 8003a52:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	7c12      	ldrb	r2, [r2, #16]
 8003a58:	2a00      	cmp	r2, #0
 8003a5a:	d102      	bne.n	8003a62 <ETH_SetMACConfig+0x2e>
 8003a5c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003a60:	e000      	b.n	8003a64 <ETH_SetMACConfig+0x30>
 8003a62:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003a64:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	7c52      	ldrb	r2, [r2, #17]
 8003a6a:	2a00      	cmp	r2, #0
 8003a6c:	d102      	bne.n	8003a74 <ETH_SetMACConfig+0x40>
 8003a6e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003a72:	e000      	b.n	8003a76 <ETH_SetMACConfig+0x42>
 8003a74:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003a76:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003a7c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	7fdb      	ldrb	r3, [r3, #31]
 8003a82:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003a84:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003a8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	7f92      	ldrb	r2, [r2, #30]
 8003a90:	2a00      	cmp	r2, #0
 8003a92:	d102      	bne.n	8003a9a <ETH_SetMACConfig+0x66>
 8003a94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003a98:	e000      	b.n	8003a9c <ETH_SetMACConfig+0x68>
 8003a9a:	2200      	movs	r2, #0
                        macconf->Speed |
 8003a9c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	7f1b      	ldrb	r3, [r3, #28]
 8003aa2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003aa4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003aaa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	791b      	ldrb	r3, [r3, #4]
 8003ab0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003ab2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003aba:	2a00      	cmp	r2, #0
 8003abc:	d102      	bne.n	8003ac4 <ETH_SetMACConfig+0x90>
 8003abe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ac2:	e000      	b.n	8003ac6 <ETH_SetMACConfig+0x92>
 8003ac4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003ac6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	7bdb      	ldrb	r3, [r3, #15]
 8003acc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003ace:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003ad4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003adc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003af6:	2001      	movs	r0, #1
 8003af8:	f7fe f9ec 	bl	8001ed4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003b12:	4013      	ands	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b1a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003b22:	2a00      	cmp	r2, #0
 8003b24:	d101      	bne.n	8003b2a <ETH_SetMACConfig+0xf6>
 8003b26:	2280      	movs	r2, #128	@ 0x80
 8003b28:	e000      	b.n	8003b2c <ETH_SetMACConfig+0xf8>
 8003b2a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003b2c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003b32:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003b3a:	2a01      	cmp	r2, #1
 8003b3c:	d101      	bne.n	8003b42 <ETH_SetMACConfig+0x10e>
 8003b3e:	2208      	movs	r2, #8
 8003b40:	e000      	b.n	8003b44 <ETH_SetMACConfig+0x110>
 8003b42:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003b44:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003b4c:	2a01      	cmp	r2, #1
 8003b4e:	d101      	bne.n	8003b54 <ETH_SetMACConfig+0x120>
 8003b50:	2204      	movs	r2, #4
 8003b52:	e000      	b.n	8003b56 <ETH_SetMACConfig+0x122>
 8003b54:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003b56:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003b5e:	2a01      	cmp	r2, #1
 8003b60:	d101      	bne.n	8003b66 <ETH_SetMACConfig+0x132>
 8003b62:	2202      	movs	r2, #2
 8003b64:	e000      	b.n	8003b68 <ETH_SetMACConfig+0x134>
 8003b66:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b80:	2001      	movs	r0, #1
 8003b82:	f7fe f9a7 	bl	8001ed4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	619a      	str	r2, [r3, #24]
}
 8003b8e:	bf00      	nop
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	fd20810f 	.word	0xfd20810f

08003b9c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4b3d      	ldr	r3, [pc, #244]	@ (8003cac <ETH_SetDMAConfig+0x110>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	7b1b      	ldrb	r3, [r3, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d102      	bne.n	8003bc8 <ETH_SetDMAConfig+0x2c>
 8003bc2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003bc6:	e000      	b.n	8003bca <ETH_SetDMAConfig+0x2e>
 8003bc8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	7b5b      	ldrb	r3, [r3, #13]
 8003bce:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003bd0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	7f52      	ldrb	r2, [r2, #29]
 8003bd6:	2a00      	cmp	r2, #0
 8003bd8:	d102      	bne.n	8003be0 <ETH_SetDMAConfig+0x44>
 8003bda:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003bde:	e000      	b.n	8003be2 <ETH_SetDMAConfig+0x46>
 8003be0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003be2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	7b9b      	ldrb	r3, [r3, #14]
 8003be8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003bea:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003bf0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	7f1b      	ldrb	r3, [r3, #28]
 8003bf6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003bf8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	7f9b      	ldrb	r3, [r3, #30]
 8003bfe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003c00:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003c06:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c0e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003c10:	4313      	orrs	r3, r2
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c20:	461a      	mov	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c32:	2001      	movs	r0, #1
 8003c34:	f7fe f94e 	bl	8001ed4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c40:	461a      	mov	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	791b      	ldrb	r3, [r3, #4]
 8003c4a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003c50:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003c56:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003c5c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003c64:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003c66:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003c6e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003c74:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c82:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c90:	2001      	movs	r0, #1
 8003c92:	f7fe f91f 	bl	8001ed4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6013      	str	r3, [r2, #0]
}
 8003ca4:	bf00      	nop
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	f8de3f23 	.word	0xf8de3f23

08003cb0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b0a6      	sub	sp, #152	@ 0x98
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003cec:	2300      	movs	r3, #0
 8003cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003d00:	2300      	movs	r3, #0
 8003d02:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003d06:	2300      	movs	r3, #0
 8003d08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003d18:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003d1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003d24:	2300      	movs	r3, #0
 8003d26:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003d2a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003d2e:	4619      	mov	r1, r3
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff fe7f 	bl	8003a34 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003d36:	2301      	movs	r3, #1
 8003d38:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003d44:	2301      	movs	r3, #1
 8003d46:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003d52:	2300      	movs	r3, #0
 8003d54:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003d62:	2301      	movs	r3, #1
 8003d64:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003d66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d6a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003d6c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003d70:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003d72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d76:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003d82:	2300      	movs	r3, #0
 8003d84:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003d86:	f107 0308 	add.w	r3, r7, #8
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff ff05 	bl	8003b9c <ETH_SetDMAConfig>
}
 8003d92:	bf00      	nop
 8003d94:	3798      	adds	r7, #152	@ 0x98
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b087      	sub	sp, #28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3305      	adds	r3, #5
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	021b      	lsls	r3, r3, #8
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	3204      	adds	r2, #4
 8003db4:	7812      	ldrb	r2, [r2, #0]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	4b11      	ldr	r3, [pc, #68]	@ (8003e04 <ETH_MACAddressConfig+0x68>)
 8003dbe:	4413      	add	r3, r2
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3303      	adds	r3, #3
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	061a      	lsls	r2, r3, #24
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3302      	adds	r3, #2
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	041b      	lsls	r3, r3, #16
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	021b      	lsls	r3, r3, #8
 8003de0:	4313      	orrs	r3, r2
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	7812      	ldrb	r2, [r2, #0]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	4b06      	ldr	r3, [pc, #24]	@ (8003e08 <ETH_MACAddressConfig+0x6c>)
 8003dee:	4413      	add	r3, r2
 8003df0:	461a      	mov	r2, r3
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	6013      	str	r3, [r2, #0]
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40028040 	.word	0x40028040
 8003e08:	40028044 	.word	0x40028044

08003e0c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	e03e      	b.n	8003e98 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68d9      	ldr	r1, [r3, #12]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	440b      	add	r3, r1
 8003e2a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2200      	movs	r2, #0
 8003e36:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2200      	movs	r2, #0
 8003e42:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003e44:	68b9      	ldr	r1, [r7, #8]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	3206      	adds	r2, #6
 8003e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d80c      	bhi.n	8003e7c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68d9      	ldr	r1, [r3, #12]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	440b      	add	r3, r1
 8003e74:	461a      	mov	r2, r3
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	60da      	str	r2, [r3, #12]
 8003e7a:	e004      	b.n	8003e86 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	461a      	mov	r2, r3
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3301      	adds	r3, #1
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d9bd      	bls.n	8003e1a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eb0:	611a      	str	r2, [r3, #16]
}
 8003eb2:	bf00      	nop
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b085      	sub	sp, #20
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	e048      	b.n	8003f5e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6919      	ldr	r1, [r3, #16]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	00db      	lsls	r3, r3, #3
 8003eda:	440b      	add	r3, r1
 8003edc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2200      	movs	r2, #0
 8003eee:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2200      	movs	r2, #0
 8003f00:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003f08:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003f22:	68b9      	ldr	r1, [r7, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	3212      	adds	r2, #18
 8003f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d80c      	bhi.n	8003f4e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6919      	ldr	r1, [r3, #16]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	440b      	add	r3, r1
 8003f46:	461a      	mov	r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	60da      	str	r2, [r3, #12]
 8003f4c:	e004      	b.n	8003f58 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	461a      	mov	r2, r3
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d9b3      	bls.n	8003ecc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691a      	ldr	r2, [r3, #16]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f8e:	60da      	str	r2, [r3, #12]
}
 8003f90:	bf00      	nop
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b091      	sub	sp, #68	@ 0x44
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	3318      	adds	r3, #24
 8003fac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fc6:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003fda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fde:	d007      	beq.n	8003ff0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003fe0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e111      	b.n	8004218 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8003ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004002:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	4b86      	ldr	r3, [pc, #536]	@ (8004224 <ETH_Prepare_Tx_Descriptors+0x288>)
 800400a:	4013      	ands	r3, r2
 800400c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800400e:	6852      	ldr	r2, [r2, #4]
 8004010:	431a      	orrs	r2, r3
 8004012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004014:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d008      	beq.n	8004034 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	431a      	orrs	r2, r3
 8004030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004032:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b00      	cmp	r3, #0
 800403e:	d008      	beq.n	8004052 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	431a      	orrs	r2, r3
 800404e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004050:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800405e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004068:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800406a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004074:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004076:	e082      	b.n	800417e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004082:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d006      	beq.n	8004098 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800408a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	e005      	b.n	80040a4 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80040a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a2:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80040a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040a6:	3301      	adds	r3, #1
 80040a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d902      	bls.n	80040b6 <ETH_Prepare_Tx_Descriptors+0x11a>
 80040b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040b2:	3b04      	subs	r3, #4
 80040b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80040b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040be:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80040c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040cc:	d007      	beq.n	80040de <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80040ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040d2:	3304      	adds	r3, #4
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d029      	beq.n	8004132 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80040e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ea:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80040ec:	2300      	movs	r3, #0
 80040ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040f0:	e019      	b.n	8004126 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80040f2:	f3bf 8f5f 	dmb	sy
}
 80040f6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80040f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004102:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004106:	3301      	adds	r3, #1
 8004108:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800410a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800410c:	2b03      	cmp	r3, #3
 800410e:	d902      	bls.n	8004116 <ETH_Prepare_Tx_Descriptors+0x17a>
 8004110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004112:	3b04      	subs	r3, #4
 8004114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800411a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800411e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8004120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004122:	3301      	adds	r3, #1
 8004124:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004126:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800412a:	429a      	cmp	r2, r3
 800412c:	d3e1      	bcc.n	80040f2 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 800412e:	2302      	movs	r3, #2
 8004130:	e072      	b.n	8004218 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800413a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800413e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004140:	3301      	adds	r3, #1
 8004142:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800414a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	461a      	mov	r2, r3
 8004150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004152:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	4b32      	ldr	r3, [pc, #200]	@ (8004224 <ETH_Prepare_Tx_Descriptors+0x288>)
 800415a:	4013      	ands	r3, r2
 800415c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800415e:	6852      	ldr	r2, [r2, #4]
 8004160:	431a      	orrs	r2, r3
 8004162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004164:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004168:	3301      	adds	r3, #1
 800416a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800416c:	f3bf 8f5f 	dmb	sy
}
 8004170:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800417a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417c:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800417e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	f47f af78 	bne.w	8004078 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d006      	beq.n	800419c <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800418e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	e005      	b.n	80041a8 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800419c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80041a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a6:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80041a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80041b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b2:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80041b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b6:	6a3a      	ldr	r2, [r7, #32]
 80041b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041bc:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80041be:	f3bf 8f5f 	dmb	sy
}
 80041c2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80041c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80041cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ce:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041d8:	3304      	adds	r3, #4
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80041e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041e4:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041e6:	f3ef 8310 	mrs	r3, PRIMASK
 80041ea:	613b      	str	r3, [r7, #16]
  return(result);
 80041ec:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80041ee:	61fb      	str	r3, [r7, #28]
 80041f0:	2301      	movs	r3, #1
 80041f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f383 8810 	msr	PRIMASK, r3
}
 80041fa:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80041fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004202:	4413      	add	r3, r2
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004208:	629a      	str	r2, [r3, #40]	@ 0x28
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	f383 8810 	msr	PRIMASK, r3
}
 8004214:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3744      	adds	r7, #68	@ 0x44
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	ffffe000 	.word	0xffffe000

08004228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004228:	b480      	push	{r7}
 800422a:	b089      	sub	sp, #36	@ 0x24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004236:	2300      	movs	r3, #0
 8004238:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800423a:	2300      	movs	r3, #0
 800423c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800423e:	2300      	movs	r3, #0
 8004240:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8004242:	2300      	movs	r3, #0
 8004244:	61fb      	str	r3, [r7, #28]
 8004246:	e175      	b.n	8004534 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004248:	2201      	movs	r2, #1
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4013      	ands	r3, r2
 800425a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	429a      	cmp	r2, r3
 8004262:	f040 8164 	bne.w	800452e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	2b01      	cmp	r3, #1
 8004270:	d005      	beq.n	800427e <HAL_GPIO_Init+0x56>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d130      	bne.n	80042e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	2203      	movs	r2, #3
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	43db      	mvns	r3, r3
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	4013      	ands	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042b4:	2201      	movs	r2, #1
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	43db      	mvns	r3, r3
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4013      	ands	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	f003 0201 	and.w	r2, r3, #1
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	2b03      	cmp	r3, #3
 80042ea:	d017      	beq.n	800431c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	2203      	movs	r2, #3
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	43db      	mvns	r3, r3
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	4013      	ands	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d123      	bne.n	8004370 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	08da      	lsrs	r2, r3, #3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3208      	adds	r2, #8
 8004330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	220f      	movs	r2, #15
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	43db      	mvns	r3, r3
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4013      	ands	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	4313      	orrs	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	08da      	lsrs	r2, r3, #3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3208      	adds	r2, #8
 800436a:	69b9      	ldr	r1, [r7, #24]
 800436c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	2203      	movs	r2, #3
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	43db      	mvns	r3, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4013      	ands	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f003 0203 	and.w	r2, r3, #3
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4313      	orrs	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 80be 	beq.w	800452e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043b2:	4b66      	ldr	r3, [pc, #408]	@ (800454c <HAL_GPIO_Init+0x324>)
 80043b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b6:	4a65      	ldr	r2, [pc, #404]	@ (800454c <HAL_GPIO_Init+0x324>)
 80043b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80043be:	4b63      	ldr	r3, [pc, #396]	@ (800454c <HAL_GPIO_Init+0x324>)
 80043c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80043ca:	4a61      	ldr	r2, [pc, #388]	@ (8004550 <HAL_GPIO_Init+0x328>)
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	089b      	lsrs	r3, r3, #2
 80043d0:	3302      	adds	r3, #2
 80043d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	220f      	movs	r2, #15
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	43db      	mvns	r3, r3
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4013      	ands	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a58      	ldr	r2, [pc, #352]	@ (8004554 <HAL_GPIO_Init+0x32c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d037      	beq.n	8004466 <HAL_GPIO_Init+0x23e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a57      	ldr	r2, [pc, #348]	@ (8004558 <HAL_GPIO_Init+0x330>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d031      	beq.n	8004462 <HAL_GPIO_Init+0x23a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a56      	ldr	r2, [pc, #344]	@ (800455c <HAL_GPIO_Init+0x334>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d02b      	beq.n	800445e <HAL_GPIO_Init+0x236>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a55      	ldr	r2, [pc, #340]	@ (8004560 <HAL_GPIO_Init+0x338>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d025      	beq.n	800445a <HAL_GPIO_Init+0x232>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a54      	ldr	r2, [pc, #336]	@ (8004564 <HAL_GPIO_Init+0x33c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d01f      	beq.n	8004456 <HAL_GPIO_Init+0x22e>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a53      	ldr	r2, [pc, #332]	@ (8004568 <HAL_GPIO_Init+0x340>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d019      	beq.n	8004452 <HAL_GPIO_Init+0x22a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a52      	ldr	r2, [pc, #328]	@ (800456c <HAL_GPIO_Init+0x344>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d013      	beq.n	800444e <HAL_GPIO_Init+0x226>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a51      	ldr	r2, [pc, #324]	@ (8004570 <HAL_GPIO_Init+0x348>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d00d      	beq.n	800444a <HAL_GPIO_Init+0x222>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a50      	ldr	r2, [pc, #320]	@ (8004574 <HAL_GPIO_Init+0x34c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d007      	beq.n	8004446 <HAL_GPIO_Init+0x21e>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a4f      	ldr	r2, [pc, #316]	@ (8004578 <HAL_GPIO_Init+0x350>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d101      	bne.n	8004442 <HAL_GPIO_Init+0x21a>
 800443e:	2309      	movs	r3, #9
 8004440:	e012      	b.n	8004468 <HAL_GPIO_Init+0x240>
 8004442:	230a      	movs	r3, #10
 8004444:	e010      	b.n	8004468 <HAL_GPIO_Init+0x240>
 8004446:	2308      	movs	r3, #8
 8004448:	e00e      	b.n	8004468 <HAL_GPIO_Init+0x240>
 800444a:	2307      	movs	r3, #7
 800444c:	e00c      	b.n	8004468 <HAL_GPIO_Init+0x240>
 800444e:	2306      	movs	r3, #6
 8004450:	e00a      	b.n	8004468 <HAL_GPIO_Init+0x240>
 8004452:	2305      	movs	r3, #5
 8004454:	e008      	b.n	8004468 <HAL_GPIO_Init+0x240>
 8004456:	2304      	movs	r3, #4
 8004458:	e006      	b.n	8004468 <HAL_GPIO_Init+0x240>
 800445a:	2303      	movs	r3, #3
 800445c:	e004      	b.n	8004468 <HAL_GPIO_Init+0x240>
 800445e:	2302      	movs	r3, #2
 8004460:	e002      	b.n	8004468 <HAL_GPIO_Init+0x240>
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <HAL_GPIO_Init+0x240>
 8004466:	2300      	movs	r3, #0
 8004468:	69fa      	ldr	r2, [r7, #28]
 800446a:	f002 0203 	and.w	r2, r2, #3
 800446e:	0092      	lsls	r2, r2, #2
 8004470:	4093      	lsls	r3, r2
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4313      	orrs	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004478:	4935      	ldr	r1, [pc, #212]	@ (8004550 <HAL_GPIO_Init+0x328>)
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	089b      	lsrs	r3, r3, #2
 800447e:	3302      	adds	r3, #2
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004486:	4b3d      	ldr	r3, [pc, #244]	@ (800457c <HAL_GPIO_Init+0x354>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	43db      	mvns	r3, r3
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	4013      	ands	r3, r2
 8004494:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044aa:	4a34      	ldr	r2, [pc, #208]	@ (800457c <HAL_GPIO_Init+0x354>)
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044b0:	4b32      	ldr	r3, [pc, #200]	@ (800457c <HAL_GPIO_Init+0x354>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	43db      	mvns	r3, r3
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4013      	ands	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044d4:	4a29      	ldr	r2, [pc, #164]	@ (800457c <HAL_GPIO_Init+0x354>)
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044da:	4b28      	ldr	r3, [pc, #160]	@ (800457c <HAL_GPIO_Init+0x354>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	43db      	mvns	r3, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4013      	ands	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044fe:	4a1f      	ldr	r2, [pc, #124]	@ (800457c <HAL_GPIO_Init+0x354>)
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004504:	4b1d      	ldr	r3, [pc, #116]	@ (800457c <HAL_GPIO_Init+0x354>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	43db      	mvns	r3, r3
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4013      	ands	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4313      	orrs	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004528:	4a14      	ldr	r2, [pc, #80]	@ (800457c <HAL_GPIO_Init+0x354>)
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	3301      	adds	r3, #1
 8004532:	61fb      	str	r3, [r7, #28]
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	2b0f      	cmp	r3, #15
 8004538:	f67f ae86 	bls.w	8004248 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800453c:	bf00      	nop
 800453e:	bf00      	nop
 8004540:	3724      	adds	r7, #36	@ 0x24
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40023800 	.word	0x40023800
 8004550:	40013800 	.word	0x40013800
 8004554:	40020000 	.word	0x40020000
 8004558:	40020400 	.word	0x40020400
 800455c:	40020800 	.word	0x40020800
 8004560:	40020c00 	.word	0x40020c00
 8004564:	40021000 	.word	0x40021000
 8004568:	40021400 	.word	0x40021400
 800456c:	40021800 	.word	0x40021800
 8004570:	40021c00 	.word	0x40021c00
 8004574:	40022000 	.word	0x40022000
 8004578:	40022400 	.word	0x40022400
 800457c:	40013c00 	.word	0x40013c00

08004580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	807b      	strh	r3, [r7, #2]
 800458c:	4613      	mov	r3, r2
 800458e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004590:	787b      	ldrb	r3, [r7, #1]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004596:	887a      	ldrh	r2, [r7, #2]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800459c:	e003      	b.n	80045a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800459e:	887b      	ldrh	r3, [r7, #2]
 80045a0:	041a      	lsls	r2, r3, #16
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	619a      	str	r2, [r3, #24]
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b085      	sub	sp, #20
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	460b      	mov	r3, r1
 80045bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045c4:	887a      	ldrh	r2, [r7, #2]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	4013      	ands	r3, r2
 80045ca:	041a      	lsls	r2, r3, #16
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	43d9      	mvns	r1, r3
 80045d0:	887b      	ldrh	r3, [r7, #2]
 80045d2:	400b      	ands	r3, r1
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	619a      	str	r2, [r3, #24]
}
 80045da:	bf00      	nop
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
	...

080045e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e08b      	b.n	8004712 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fc fd82 	bl	8001118 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2224      	movs	r2, #36	@ 0x24
 8004618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0201 	bic.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004638:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004648:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d107      	bne.n	8004662 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800465e:	609a      	str	r2, [r3, #8]
 8004660:	e006      	b.n	8004670 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800466e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	2b02      	cmp	r3, #2
 8004676:	d108      	bne.n	800468a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004686:	605a      	str	r2, [r3, #4]
 8004688:	e007      	b.n	800469a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004698:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6859      	ldr	r1, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4b1d      	ldr	r3, [pc, #116]	@ (800471c <HAL_I2C_Init+0x134>)
 80046a6:	430b      	orrs	r3, r1
 80046a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691a      	ldr	r2, [r3, #16]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69d9      	ldr	r1, [r3, #28]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a1a      	ldr	r2, [r3, #32]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0201 	orr.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	02008000 	.word	0x02008000

08004720 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08a      	sub	sp, #40	@ 0x28
 8004724:	af02      	add	r7, sp, #8
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	607a      	str	r2, [r7, #4]
 800472a:	461a      	mov	r2, r3
 800472c:	460b      	mov	r3, r1
 800472e:	817b      	strh	r3, [r7, #10]
 8004730:	4613      	mov	r3, r2
 8004732:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b20      	cmp	r3, #32
 8004742:	f040 80ef 	bne.w	8004924 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004754:	d101      	bne.n	800475a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8004756:	2302      	movs	r3, #2
 8004758:	e0e5      	b.n	8004926 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004760:	2b01      	cmp	r3, #1
 8004762:	d101      	bne.n	8004768 <HAL_I2C_Master_Transmit_DMA+0x48>
 8004764:	2302      	movs	r3, #2
 8004766:	e0de      	b.n	8004926 <HAL_I2C_Master_Transmit_DMA+0x206>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2221      	movs	r2, #33	@ 0x21
 8004774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2210      	movs	r2, #16
 800477c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	893a      	ldrh	r2, [r7, #8]
 8004790:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4a66      	ldr	r2, [pc, #408]	@ (8004930 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8004796:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4a66      	ldr	r2, [pc, #408]	@ (8004934 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800479c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2bff      	cmp	r3, #255	@ 0xff
 80047a6:	d906      	bls.n	80047b6 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	22ff      	movs	r2, #255	@ 0xff
 80047ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80047ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047b2:	61fb      	str	r3, [r7, #28]
 80047b4:	e007      	b.n	80047c6 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80047c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047c4:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d01a      	beq.n	8004804 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d2:	781a      	ldrb	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e8:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004808:	2b00      	cmp	r3, #0
 800480a:	d074      	beq.n	80048f6 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004810:	2b00      	cmp	r3, #0
 8004812:	d022      	beq.n	800485a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004818:	4a47      	ldr	r2, [pc, #284]	@ (8004938 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800481a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004820:	4a46      	ldr	r2, [pc, #280]	@ (800493c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8004822:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004828:	2200      	movs	r2, #0
 800482a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004830:	2200      	movs	r2, #0
 8004832:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8004844:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800484a:	f7fd ff01 	bl	8002650 <HAL_DMA_Start_IT>
 800484e:	4603      	mov	r3, r0
 8004850:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004852:	7dfb      	ldrb	r3, [r7, #23]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d13a      	bne.n	80048ce <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8004858:	e013      	b.n	8004882 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2220      	movs	r2, #32
 800485e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e051      	b.n	8004926 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004886:	b2db      	uxtb	r3, r3
 8004888:	3301      	adds	r3, #1
 800488a:	b2da      	uxtb	r2, r3
 800488c:	8979      	ldrh	r1, [r7, #10]
 800488e:	4b2c      	ldr	r3, [pc, #176]	@ (8004940 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f001 fcff 	bl	8006298 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80048b4:	2110      	movs	r1, #16
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f001 fd20 	bl	80062fc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	e028      	b.n	8004920 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e2:	f043 0210 	orr.w	r2, r3, #16
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e017      	b.n	8004926 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4a12      	ldr	r2, [pc, #72]	@ (8004944 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80048fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	8979      	ldrh	r1, [r7, #10]
 8004902:	4b0f      	ldr	r3, [pc, #60]	@ (8004940 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f001 fcc4 	bl	8006298 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004918:	2101      	movs	r1, #1
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f001 fcee 	bl	80062fc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	e000      	b.n	8004926 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004924:	2302      	movs	r3, #2
  }
}
 8004926:	4618      	mov	r0, r3
 8004928:	3720      	adds	r7, #32
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	ffff0000 	.word	0xffff0000
 8004934:	080050df 	.word	0x080050df
 8004938:	0800610b 	.word	0x0800610b
 800493c:	080061e7 	.word	0x080061e7
 8004940:	80002000 	.word	0x80002000
 8004944:	08004c53 	.word	0x08004c53

08004948 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	4613      	mov	r3, r2
 8004954:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800495c:	b2db      	uxtb	r3, r3
 800495e:	2b20      	cmp	r3, #32
 8004960:	f040 809b 	bne.w	8004a9a <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <HAL_I2C_Slave_Receive_DMA+0x28>
 800496a:	88fb      	ldrh	r3, [r7, #6]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d105      	bne.n	800497c <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004976:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e08f      	b.n	8004a9c <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004982:	2b01      	cmp	r3, #1
 8004984:	d101      	bne.n	800498a <HAL_I2C_Slave_Receive_DMA+0x42>
 8004986:	2302      	movs	r3, #2
 8004988:	e088      	b.n	8004a9c <HAL_I2C_Slave_Receive_DMA+0x154>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2222      	movs	r2, #34	@ 0x22
 8004996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2220      	movs	r2, #32
 800499e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	88fa      	ldrh	r2, [r7, #6]
 80049b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4a38      	ldr	r2, [pc, #224]	@ (8004aa4 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 80049c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4a38      	ldr	r2, [pc, #224]	@ (8004aa8 <HAL_I2C_Slave_Receive_DMA+0x160>)
 80049c8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d020      	beq.n	8004a14 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d6:	4a35      	ldr	r2, [pc, #212]	@ (8004aac <HAL_I2C_Slave_Receive_DMA+0x164>)
 80049d8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049de:	4a34      	ldr	r2, [pc, #208]	@ (8004ab0 <HAL_I2C_Slave_Receive_DMA+0x168>)
 80049e0:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e6:	2200      	movs	r2, #0
 80049e8:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ee:	2200      	movs	r2, #0
 80049f0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3324      	adds	r3, #36	@ 0x24
 80049fc:	4619      	mov	r1, r3
 80049fe:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004a04:	f7fd fe24 	bl	8002650 <HAL_DMA_Start_IT>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8004a0c:	7dfb      	ldrb	r3, [r7, #23]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d12f      	bne.n	8004a72 <HAL_I2C_Slave_Receive_DMA+0x12a>
 8004a12:	e013      	b.n	8004a3c <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2228      	movs	r2, #40	@ 0x28
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a28:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e02f      	b.n	8004a9c <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a4a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004a54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f001 fc4f 	bl	80062fc <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a6c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	e014      	b.n	8004a9c <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2228      	movs	r2, #40	@ 0x28
 8004a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a86:	f043 0210 	orr.w	r2, r3, #16
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8004a9a:	2302      	movs	r3, #2
  }
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	ffff0000 	.word	0xffff0000
 8004aa8:	08005581 	.word	0x08005581
 8004aac:	080061a1 	.word	0x080061a1
 8004ab0:	080061e7 	.word	0x080061e7

08004ab4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	68f9      	ldr	r1, [r7, #12]
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	4798      	blx	r3
  }
}
 8004ae0:	bf00      	nop
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	0a1b      	lsrs	r3, r3, #8
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d010      	beq.n	8004b2e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	09db      	lsrs	r3, r3, #7
 8004b10:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b1c:	f043 0201 	orr.w	r2, r3, #1
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b2c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	0a9b      	lsrs	r3, r3, #10
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d010      	beq.n	8004b5c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	09db      	lsrs	r3, r3, #7
 8004b3e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b4a:	f043 0208 	orr.w	r2, r3, #8
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b5a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	0a5b      	lsrs	r3, r3, #9
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d010      	beq.n	8004b8a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	09db      	lsrs	r3, r3, #7
 8004b6c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b78:	f043 0202 	orr.w	r2, r3, #2
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b88:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f003 030b 	and.w	r3, r3, #11
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004b9a:	68f9      	ldr	r1, [r7, #12]
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f001 f979 	bl	8005e94 <I2C_ITError>
  }
}
 8004ba2:	bf00      	nop
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	70fb      	strb	r3, [r7, #3]
 8004bde:	4613      	mov	r3, r2
 8004be0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b083      	sub	sp, #12
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004bf6:	bf00      	nop
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b083      	sub	sp, #12
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004c0a:	bf00      	nop
 8004c0c:	370c      	adds	r7, #12
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b088      	sub	sp, #32
 8004c56:	af02      	add	r7, sp, #8
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <I2C_Master_ISR_IT+0x1e>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e12e      	b.n	8004ece <I2C_Master_ISR_IT+0x27c>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	091b      	lsrs	r3, r3, #4
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d013      	beq.n	8004cac <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	091b      	lsrs	r3, r3, #4
 8004c88:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00d      	beq.n	8004cac <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2210      	movs	r2, #16
 8004c96:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c9c:	f043 0204 	orr.w	r2, r3, #4
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f001 fa0c 	bl	80060c2 <I2C_Flush_TXDR>
 8004caa:	e0fb      	b.n	8004ea4 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	089b      	lsrs	r3, r3, #2
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d023      	beq.n	8004d00 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	089b      	lsrs	r3, r3, #2
 8004cbc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d01d      	beq.n	8004d00 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f023 0304 	bic.w	r3, r3, #4
 8004cca:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004cfe:	e0d1      	b.n	8004ea4 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	099b      	lsrs	r3, r3, #6
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d12a      	bne.n	8004d62 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	085b      	lsrs	r3, r3, #1
 8004d10:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d024      	beq.n	8004d62 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	085b      	lsrs	r3, r3, #1
 8004d1c:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d01e      	beq.n	8004d62 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 80ba 	beq.w	8004ea4 <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d34:	781a      	ldrb	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8004d60:	e0a0      	b.n	8004ea4 <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	09db      	lsrs	r3, r3, #7
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d06b      	beq.n	8004e46 <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	099b      	lsrs	r3, r3, #6
 8004d72:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d065      	beq.n	8004e46 <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d04e      	beq.n	8004e22 <I2C_Master_ISR_IT+0x1d0>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d14a      	bne.n	8004e22 <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d98:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2bff      	cmp	r3, #255	@ 0xff
 8004da2:	d91c      	bls.n	8004dde <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	0c1b      	lsrs	r3, r3, #16
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d103      	bne.n	8004dc0 <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004dbe:	e002      	b.n	8004dc6 <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	22ff      	movs	r2, #255	@ 0xff
 8004dc4:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	8a79      	ldrh	r1, [r7, #18]
 8004dce:	2300      	movs	r3, #0
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f001 fa5e 	bl	8006298 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ddc:	e032      	b.n	8004e44 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004df0:	d00b      	beq.n	8004e0a <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004df6:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004dfc:	8a79      	ldrh	r1, [r7, #18]
 8004dfe:	2000      	movs	r0, #0
 8004e00:	9000      	str	r0, [sp, #0]
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f001 fa48 	bl	8006298 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e08:	e01c      	b.n	8004e44 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	8a79      	ldrh	r1, [r7, #18]
 8004e12:	2300      	movs	r3, #0
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f001 fa3c 	bl	8006298 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e20:	e010      	b.n	8004e44 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e30:	d003      	beq.n	8004e3a <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 fd09 	bl	800584a <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e38:	e034      	b.n	8004ea4 <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004e3a:	2140      	movs	r1, #64	@ 0x40
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f001 f829 	bl	8005e94 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e42:	e02f      	b.n	8004ea4 <I2C_Master_ISR_IT+0x252>
 8004e44:	e02e      	b.n	8004ea4 <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	099b      	lsrs	r3, r3, #6
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d028      	beq.n	8004ea4 <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	099b      	lsrs	r3, r3, #6
 8004e56:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d022      	beq.n	8004ea4 <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d119      	bne.n	8004e9c <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e76:	d015      	beq.n	8004ea4 <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e80:	d108      	bne.n	8004e94 <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e90:	605a      	str	r2, [r3, #4]
 8004e92:	e007      	b.n	8004ea4 <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f000 fcd8 	bl	800584a <I2C_ITMasterSeqCplt>
 8004e9a:	e003      	b.n	8004ea4 <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004e9c:	2140      	movs	r1, #64	@ 0x40
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 fff8 	bl	8005e94 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d009      	beq.n	8004ec4 <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004ebc:	6979      	ldr	r1, [r7, #20]
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 fd5e 	bl	8005980 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b086      	sub	sp, #24
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <I2C_Slave_ISR_IT+0x24>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e0ed      	b.n	80050d6 <I2C_Slave_ISR_IT+0x200>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	095b      	lsrs	r3, r3, #5
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	095b      	lsrs	r3, r3, #5
 8004f12:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d004      	beq.n	8004f24 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004f1a:	6939      	ldr	r1, [r7, #16]
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 fdf9 	bl	8005b14 <I2C_ITSlaveCplt>
 8004f22:	e0d3      	b.n	80050cc <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	091b      	lsrs	r3, r3, #4
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d04d      	beq.n	8004fcc <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	091b      	lsrs	r3, r3, #4
 8004f34:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d047      	beq.n	8004fcc <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d128      	bne.n	8004f98 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b28      	cmp	r3, #40	@ 0x28
 8004f50:	d108      	bne.n	8004f64 <I2C_Slave_ISR_IT+0x8e>
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f58:	d104      	bne.n	8004f64 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004f5a:	6939      	ldr	r1, [r7, #16]
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 ff43 	bl	8005de8 <I2C_ITListenCplt>
 8004f62:	e032      	b.n	8004fca <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b29      	cmp	r3, #41	@ 0x29
 8004f6e:	d10e      	bne.n	8004f8e <I2C_Slave_ISR_IT+0xb8>
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f76:	d00a      	beq.n	8004f8e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2210      	movs	r2, #16
 8004f7e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f001 f89e 	bl	80060c2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 fc9c 	bl	80058c4 <I2C_ITSlaveSeqCplt>
 8004f8c:	e01d      	b.n	8004fca <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2210      	movs	r2, #16
 8004f94:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004f96:	e096      	b.n	80050c6 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2210      	movs	r2, #16
 8004f9e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa4:	f043 0204 	orr.w	r2, r3, #4
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d004      	beq.n	8004fbc <I2C_Slave_ISR_IT+0xe6>
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fb8:	f040 8085 	bne.w	80050c6 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f000 ff66 	bl	8005e94 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004fc8:	e07d      	b.n	80050c6 <I2C_Slave_ISR_IT+0x1f0>
 8004fca:	e07c      	b.n	80050c6 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	089b      	lsrs	r3, r3, #2
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d030      	beq.n	800503a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	089b      	lsrs	r3, r3, #2
 8004fdc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d02a      	beq.n	800503a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d018      	beq.n	8005020 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005016:	b29b      	uxth	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005024:	b29b      	uxth	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d14f      	bne.n	80050ca <I2C_Slave_ISR_IT+0x1f4>
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005030:	d04b      	beq.n	80050ca <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 fc46 	bl	80058c4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005038:	e047      	b.n	80050ca <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	08db      	lsrs	r3, r3, #3
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	08db      	lsrs	r3, r3, #3
 800504a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800504e:	2b00      	cmp	r3, #0
 8005050:	d004      	beq.n	800505c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005052:	6939      	ldr	r1, [r7, #16]
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 fb74 	bl	8005742 <I2C_ITAddrCplt>
 800505a:	e037      	b.n	80050cc <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	085b      	lsrs	r3, r3, #1
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d031      	beq.n	80050cc <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	085b      	lsrs	r3, r3, #1
 800506c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005070:	2b00      	cmp	r3, #0
 8005072:	d02b      	beq.n	80050cc <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005078:	b29b      	uxth	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d018      	beq.n	80050b0 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005082:	781a      	ldrb	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508e:	1c5a      	adds	r2, r3, #1
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005098:	b29b      	uxth	r3, r3
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	851a      	strh	r2, [r3, #40]	@ 0x28
 80050ae:	e00d      	b.n	80050cc <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050b6:	d002      	beq.n	80050be <I2C_Slave_ISR_IT+0x1e8>
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 fc00 	bl	80058c4 <I2C_ITSlaveSeqCplt>
 80050c4:	e002      	b.n	80050cc <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80050c6:	bf00      	nop
 80050c8:	e000      	b.n	80050cc <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80050ca:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b088      	sub	sp, #32
 80050e2:	af02      	add	r7, sp, #8
 80050e4:	60f8      	str	r0, [r7, #12]
 80050e6:	60b9      	str	r1, [r7, #8]
 80050e8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d101      	bne.n	80050f8 <I2C_Master_ISR_DMA+0x1a>
 80050f4:	2302      	movs	r3, #2
 80050f6:	e0f0      	b.n	80052da <I2C_Master_ISR_DMA+0x1fc>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	091b      	lsrs	r3, r3, #4
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	2b00      	cmp	r3, #0
 800510a:	d017      	beq.n	800513c <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	091b      	lsrs	r3, r3, #4
 8005110:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005114:	2b00      	cmp	r3, #0
 8005116:	d011      	beq.n	800513c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2210      	movs	r2, #16
 800511e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005124:	f043 0204 	orr.w	r2, r3, #4
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800512c:	2120      	movs	r1, #32
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f001 f8e4 	bl	80062fc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 ffc4 	bl	80060c2 <I2C_Flush_TXDR>
 800513a:	e0c9      	b.n	80052d0 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	09db      	lsrs	r3, r3, #7
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 8081 	beq.w	800524c <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	099b      	lsrs	r3, r3, #6
 800514e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005152:	2b00      	cmp	r3, #0
 8005154:	d07a      	beq.n	800524c <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005164:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800516a:	b29b      	uxth	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d05c      	beq.n	800522a <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	b29b      	uxth	r3, r3
 8005178:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800517c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005182:	b29b      	uxth	r3, r3
 8005184:	2bff      	cmp	r3, #255	@ 0xff
 8005186:	d914      	bls.n	80051b2 <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	0c1b      	lsrs	r3, r3, #16
 8005190:	b2db      	uxtb	r3, r3
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b01      	cmp	r3, #1
 800519a:	d103      	bne.n	80051a4 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2201      	movs	r2, #1
 80051a0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80051a2:	e002      	b.n	80051aa <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	22ff      	movs	r2, #255	@ 0xff
 80051a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 80051aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051ae:	617b      	str	r3, [r7, #20]
 80051b0:	e010      	b.n	80051d4 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051c4:	d003      	beq.n	80051ce <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	e002      	b.n	80051d4 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80051ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051d2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	8a79      	ldrh	r1, [r7, #18]
 80051dc:	2300      	movs	r3, #0
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f001 f858 	bl	8006298 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b22      	cmp	r3, #34	@ 0x22
 8005204:	d108      	bne.n	8005218 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005214:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005216:	e05b      	b.n	80052d0 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005226:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005228:	e052      	b.n	80052d0 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005234:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005238:	d003      	beq.n	8005242 <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f000 fb05 	bl	800584a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005240:	e046      	b.n	80052d0 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005242:	2140      	movs	r1, #64	@ 0x40
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 fe25 	bl	8005e94 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800524a:	e041      	b.n	80052d0 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	099b      	lsrs	r3, r3, #6
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d029      	beq.n	80052ac <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	099b      	lsrs	r3, r3, #6
 800525c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005260:	2b00      	cmp	r3, #0
 8005262:	d023      	beq.n	80052ac <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005268:	b29b      	uxth	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d119      	bne.n	80052a2 <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005278:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800527c:	d027      	beq.n	80052ce <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005282:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005286:	d108      	bne.n	800529a <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005296:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005298:	e019      	b.n	80052ce <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 fad5 	bl	800584a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80052a0:	e015      	b.n	80052ce <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80052a2:	2140      	movs	r1, #64	@ 0x40
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 fdf5 	bl	8005e94 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80052aa:	e010      	b.n	80052ce <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	095b      	lsrs	r3, r3, #5
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00b      	beq.n	80052d0 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d005      	beq.n	80052d0 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80052c4:	68b9      	ldr	r1, [r7, #8]
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 fb5a 	bl	8005980 <I2C_ITMasterCplt>
 80052cc:	e000      	b.n	80052d0 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 80052ce:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80052f0:	4b94      	ldr	r3, [pc, #592]	@ (8005544 <I2C_Mem_ISR_DMA+0x260>)
 80052f2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d101      	bne.n	8005302 <I2C_Mem_ISR_DMA+0x1e>
 80052fe:	2302      	movs	r3, #2
 8005300:	e139      	b.n	8005576 <I2C_Mem_ISR_DMA+0x292>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d017      	beq.n	8005346 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	091b      	lsrs	r3, r3, #4
 800531a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800531e:	2b00      	cmp	r3, #0
 8005320:	d011      	beq.n	8005346 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2210      	movs	r2, #16
 8005328:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800532e:	f043 0204 	orr.w	r2, r3, #4
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005336:	2120      	movs	r1, #32
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 ffdf 	bl	80062fc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 febf 	bl	80060c2 <I2C_Flush_TXDR>
 8005344:	e112      	b.n	800556c <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	085b      	lsrs	r3, r3, #1
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00f      	beq.n	8005372 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	085b      	lsrs	r3, r3, #1
 8005356:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800535a:	2b00      	cmp	r3, #0
 800535c:	d009      	beq.n	8005372 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005366:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f04f 32ff 	mov.w	r2, #4294967295
 800536e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005370:	e0fc      	b.n	800556c <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	09db      	lsrs	r3, r3, #7
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d06e      	beq.n	800545c <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	099b      	lsrs	r3, r3, #6
 8005382:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005386:	2b00      	cmp	r3, #0
 8005388:	d068      	beq.n	800545c <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800538a:	2101      	movs	r1, #1
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f001 f839 	bl	8006404 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005392:	2110      	movs	r1, #16
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 ffb1 	bl	80062fc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d056      	beq.n	8005452 <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	2bff      	cmp	r3, #255	@ 0xff
 80053ac:	d91e      	bls.n	80053ec <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	0c1b      	lsrs	r3, r3, #16
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d103      	bne.n	80053ca <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2201      	movs	r2, #1
 80053c6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80053c8:	e002      	b.n	80053d0 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	22ff      	movs	r2, #255	@ 0xff
 80053ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053d4:	b299      	uxth	r1, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	2300      	movs	r3, #0
 80053de:	9300      	str	r3, [sp, #0]
 80053e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 ff57 	bl	8006298 <I2C_TransferConfig>
 80053ea:	e011      	b.n	8005410 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053fa:	b299      	uxth	r1, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005400:	b2da      	uxtb	r2, r3
 8005402:	2300      	movs	r3, #0
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 ff44 	bl	8006298 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	b29a      	uxth	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b22      	cmp	r3, #34	@ 0x22
 800542c:	d108      	bne.n	8005440 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800543c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800543e:	e095      	b.n	800556c <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800544e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005450:	e08c      	b.n	800556c <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005452:	2140      	movs	r1, #64	@ 0x40
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 fd1d 	bl	8005e94 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800545a:	e087      	b.n	800556c <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	099b      	lsrs	r3, r3, #6
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d071      	beq.n	800554c <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	099b      	lsrs	r3, r3, #6
 800546c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005470:	2b00      	cmp	r3, #0
 8005472:	d06b      	beq.n	800554c <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005474:	2101      	movs	r1, #1
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 ffc4 	bl	8006404 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800547c:	2110      	movs	r1, #16
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 ff3c 	bl	80062fc <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b22      	cmp	r3, #34	@ 0x22
 800548e:	d101      	bne.n	8005494 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8005490:	4b2d      	ldr	r3, [pc, #180]	@ (8005548 <I2C_Mem_ISR_DMA+0x264>)
 8005492:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005498:	b29b      	uxth	r3, r3
 800549a:	2bff      	cmp	r3, #255	@ 0xff
 800549c:	d91e      	bls.n	80054dc <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	0c1b      	lsrs	r3, r3, #16
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d103      	bne.n	80054ba <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2201      	movs	r2, #1
 80054b6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80054b8:	e002      	b.n	80054c0 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	22ff      	movs	r2, #255	@ 0xff
 80054be:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054c4:	b299      	uxth	r1, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 fedf 	bl	8006298 <I2C_TransferConfig>
 80054da:	e011      	b.n	8005500 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054ea:	b299      	uxth	r1, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 fecc 	bl	8006298 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005504:	b29a      	uxth	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	b29a      	uxth	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b22      	cmp	r3, #34	@ 0x22
 800551c:	d108      	bne.n	8005530 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800552c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800552e:	e01d      	b.n	800556c <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800553e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005540:	e014      	b.n	800556c <I2C_Mem_ISR_DMA+0x288>
 8005542:	bf00      	nop
 8005544:	80002000 	.word	0x80002000
 8005548:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	095b      	lsrs	r3, r3, #5
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d009      	beq.n	800556c <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	095b      	lsrs	r3, r3, #5
 800555c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005564:	68b9      	ldr	r1, [r7, #8]
 8005566:	68f8      	ldr	r0, [r7, #12]
 8005568:	f000 fa0a 	bl	8005980 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop

08005580 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005590:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005592:	2300      	movs	r3, #0
 8005594:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <I2C_Slave_ISR_DMA+0x24>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e0ca      	b.n	800573a <I2C_Slave_ISR_DMA+0x1ba>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00a      	beq.n	80055ce <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d004      	beq.n	80055ce <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80055c4:	68b9      	ldr	r1, [r7, #8]
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f000 faa4 	bl	8005b14 <I2C_ITSlaveCplt>
 80055cc:	e0b0      	b.n	8005730 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	091b      	lsrs	r3, r3, #4
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 809a 	beq.w	8005710 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	091b      	lsrs	r3, r3, #4
 80055e0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 8093 	beq.w	8005710 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	0b9b      	lsrs	r3, r3, #14
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d105      	bne.n	8005602 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	0bdb      	lsrs	r3, r3, #15
 80055fa:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d07f      	beq.n	8005702 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00d      	beq.n	8005626 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	0bdb      	lsrs	r3, r3, #15
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d007      	beq.n	8005626 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8005622:	2301      	movs	r3, #1
 8005624:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00d      	beq.n	800564a <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	0b9b      	lsrs	r3, r3, #14
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d007      	beq.n	800564a <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8005646:	2301      	movs	r3, #1
 8005648:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d128      	bne.n	80056a2 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b28      	cmp	r3, #40	@ 0x28
 800565a:	d108      	bne.n	800566e <I2C_Slave_ISR_DMA+0xee>
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005662:	d104      	bne.n	800566e <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005664:	68b9      	ldr	r1, [r7, #8]
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 fbbe 	bl	8005de8 <I2C_ITListenCplt>
 800566c:	e048      	b.n	8005700 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b29      	cmp	r3, #41	@ 0x29
 8005678:	d10e      	bne.n	8005698 <I2C_Slave_ISR_DMA+0x118>
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005680:	d00a      	beq.n	8005698 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2210      	movs	r2, #16
 8005688:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 fd19 	bl	80060c2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f000 f917 	bl	80058c4 <I2C_ITSlaveSeqCplt>
 8005696:	e033      	b.n	8005700 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2210      	movs	r2, #16
 800569e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80056a0:	e034      	b.n	800570c <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2210      	movs	r2, #16
 80056a8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ae:	f043 0204 	orr.w	r2, r3, #4
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056bc:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <I2C_Slave_ISR_DMA+0x14c>
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056ca:	d11f      	bne.n	800570c <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80056cc:	7dfb      	ldrb	r3, [r7, #23]
 80056ce:	2b21      	cmp	r3, #33	@ 0x21
 80056d0:	d002      	beq.n	80056d8 <I2C_Slave_ISR_DMA+0x158>
 80056d2:	7dfb      	ldrb	r3, [r7, #23]
 80056d4:	2b29      	cmp	r3, #41	@ 0x29
 80056d6:	d103      	bne.n	80056e0 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2221      	movs	r2, #33	@ 0x21
 80056dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80056de:	e008      	b.n	80056f2 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056e0:	7dfb      	ldrb	r3, [r7, #23]
 80056e2:	2b22      	cmp	r3, #34	@ 0x22
 80056e4:	d002      	beq.n	80056ec <I2C_Slave_ISR_DMA+0x16c>
 80056e6:	7dfb      	ldrb	r3, [r7, #23]
 80056e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80056ea:	d102      	bne.n	80056f2 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2222      	movs	r2, #34	@ 0x22
 80056f0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f6:	4619      	mov	r1, r3
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 fbcb 	bl	8005e94 <I2C_ITError>
      if (treatdmanack == 1U)
 80056fe:	e005      	b.n	800570c <I2C_Slave_ISR_DMA+0x18c>
 8005700:	e004      	b.n	800570c <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2210      	movs	r2, #16
 8005708:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800570a:	e011      	b.n	8005730 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 800570c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800570e:	e00f      	b.n	8005730 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	08db      	lsrs	r3, r3, #3
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	2b00      	cmp	r3, #0
 800571a:	d009      	beq.n	8005730 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	08db      	lsrs	r3, r3, #3
 8005720:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 f809 	bl	8005742 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3720      	adds	r7, #32
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b084      	sub	sp, #16
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
 800574a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005752:	b2db      	uxtb	r3, r3
 8005754:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005758:	2b28      	cmp	r3, #40	@ 0x28
 800575a:	d16a      	bne.n	8005832 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	0c1b      	lsrs	r3, r3, #16
 8005764:	b2db      	uxtb	r3, r3
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	0c1b      	lsrs	r3, r3, #16
 8005774:	b29b      	uxth	r3, r3
 8005776:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800577a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	b29b      	uxth	r3, r3
 8005784:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005788:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	b29b      	uxth	r3, r3
 8005792:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005796:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	2b02      	cmp	r3, #2
 800579e:	d138      	bne.n	8005812 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80057a0:	897b      	ldrh	r3, [r7, #10]
 80057a2:	09db      	lsrs	r3, r3, #7
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	89bb      	ldrh	r3, [r7, #12]
 80057a8:	4053      	eors	r3, r2
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	f003 0306 	and.w	r3, r3, #6
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d11c      	bne.n	80057ee <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80057b4:	897b      	ldrh	r3, [r7, #10]
 80057b6:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d13b      	bne.n	8005842 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2208      	movs	r2, #8
 80057d6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80057e0:	89ba      	ldrh	r2, [r7, #12]
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
 80057e4:	4619      	mov	r1, r3
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff f9f3 	bl	8004bd2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80057ec:	e029      	b.n	8005842 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80057ee:	893b      	ldrh	r3, [r7, #8]
 80057f0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80057f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fe04 	bl	8006404 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005804:	89ba      	ldrh	r2, [r7, #12]
 8005806:	7bfb      	ldrb	r3, [r7, #15]
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7ff f9e1 	bl	8004bd2 <HAL_I2C_AddrCallback>
}
 8005810:	e017      	b.n	8005842 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005812:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fdf4 	bl	8006404 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005824:	89ba      	ldrh	r2, [r7, #12]
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	4619      	mov	r1, r3
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7ff f9d1 	bl	8004bd2 <HAL_I2C_AddrCallback>
}
 8005830:	e007      	b.n	8005842 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2208      	movs	r2, #8
 8005838:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005842:	bf00      	nop
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b21      	cmp	r3, #33	@ 0x21
 8005864:	d115      	bne.n	8005892 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2220      	movs	r2, #32
 800586a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2211      	movs	r2, #17
 8005872:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800587a:	2101      	movs	r1, #1
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fdc1 	bl	8006404 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f013 ffb6 	bl	80197fc <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005890:	e014      	b.n	80058bc <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2220      	movs	r2, #32
 8005896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2212      	movs	r2, #18
 800589e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80058a6:	2102      	movs	r1, #2
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 fdab 	bl	8006404 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7ff f977 	bl	8004baa <HAL_I2C_MasterRxCpltCallback>
}
 80058bc:	bf00      	nop
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	0b9b      	lsrs	r3, r3, #14
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d008      	beq.n	80058fa <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	e00d      	b.n	8005916 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	0bdb      	lsrs	r3, r3, #15
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d007      	beq.n	8005916 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005914:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b29      	cmp	r3, #41	@ 0x29
 8005920:	d112      	bne.n	8005948 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2228      	movs	r2, #40	@ 0x28
 8005926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2221      	movs	r2, #33	@ 0x21
 800592e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005930:	2101      	movs	r1, #1
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 fd66 	bl	8006404 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7ff f93c 	bl	8004bbe <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005946:	e017      	b.n	8005978 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b2a      	cmp	r3, #42	@ 0x2a
 8005952:	d111      	bne.n	8005978 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2228      	movs	r2, #40	@ 0x28
 8005958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2222      	movs	r2, #34	@ 0x22
 8005960:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005962:	2102      	movs	r1, #2
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 fd4d 	bl	8006404 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f013 ff70 	bl	8019858 <HAL_I2C_SlaveRxCpltCallback>
}
 8005978:	bf00      	nop
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2220      	movs	r2, #32
 8005994:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b21      	cmp	r3, #33	@ 0x21
 80059a0:	d107      	bne.n	80059b2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80059a2:	2101      	movs	r1, #1
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fd2d 	bl	8006404 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2211      	movs	r2, #17
 80059ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80059b0:	e00c      	b.n	80059cc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b22      	cmp	r3, #34	@ 0x22
 80059bc:	d106      	bne.n	80059cc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80059be:	2102      	movs	r1, #2
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 fd1f 	bl	8006404 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2212      	movs	r2, #18
 80059ca:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6859      	ldr	r1, [r3, #4]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	4b4d      	ldr	r3, [pc, #308]	@ (8005b0c <I2C_ITMasterCplt+0x18c>)
 80059d8:	400b      	ands	r3, r1
 80059da:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a4a      	ldr	r2, [pc, #296]	@ (8005b10 <I2C_ITMasterCplt+0x190>)
 80059e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	091b      	lsrs	r3, r3, #4
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d009      	beq.n	8005a08 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2210      	movs	r2, #16
 80059fa:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a00:	f043 0204 	orr.w	r2, r3, #4
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b60      	cmp	r3, #96	@ 0x60
 8005a12:	d10b      	bne.n	8005a2c <I2C_ITMasterCplt+0xac>
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	089b      	lsrs	r3, r3, #2
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d005      	beq.n	8005a2c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fb48 	bl	80060c2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a36:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b60      	cmp	r3, #96	@ 0x60
 8005a42:	d002      	beq.n	8005a4a <I2C_ITMasterCplt+0xca>
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d006      	beq.n	8005a58 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fa1f 	bl	8005e94 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005a56:	e054      	b.n	8005b02 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b21      	cmp	r3, #33	@ 0x21
 8005a62:	d124      	bne.n	8005aae <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2220      	movs	r2, #32
 8005a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b40      	cmp	r3, #64	@ 0x40
 8005a7c:	d10b      	bne.n	8005a96 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7ff f8b7 	bl	8004c02 <HAL_I2C_MemTxCpltCallback>
}
 8005a94:	e035      	b.n	8005b02 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f013 fea8 	bl	80197fc <HAL_I2C_MasterTxCpltCallback>
}
 8005aac:	e029      	b.n	8005b02 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b22      	cmp	r3, #34	@ 0x22
 8005ab8:	d123      	bne.n	8005b02 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b40      	cmp	r3, #64	@ 0x40
 8005ad2:	d10b      	bne.n	8005aec <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f7ff f896 	bl	8004c16 <HAL_I2C_MemRxCpltCallback>
}
 8005aea:	e00a      	b.n	8005b02 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff f854 	bl	8004baa <HAL_I2C_MasterRxCpltCallback>
}
 8005b02:	bf00      	nop
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	fe00e800 	.word	0xfe00e800
 8005b10:	ffff0000 	.word	0xffff0000

08005b14 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b36:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005b40:	7afb      	ldrb	r3, [r7, #11]
 8005b42:	2b21      	cmp	r3, #33	@ 0x21
 8005b44:	d002      	beq.n	8005b4c <I2C_ITSlaveCplt+0x38>
 8005b46:	7afb      	ldrb	r3, [r7, #11]
 8005b48:	2b29      	cmp	r3, #41	@ 0x29
 8005b4a:	d108      	bne.n	8005b5e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005b4c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fc57 	bl	8006404 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2221      	movs	r2, #33	@ 0x21
 8005b5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b5c:	e019      	b.n	8005b92 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b5e:	7afb      	ldrb	r3, [r7, #11]
 8005b60:	2b22      	cmp	r3, #34	@ 0x22
 8005b62:	d002      	beq.n	8005b6a <I2C_ITSlaveCplt+0x56>
 8005b64:	7afb      	ldrb	r3, [r7, #11]
 8005b66:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b68:	d108      	bne.n	8005b7c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005b6a:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fc48 	bl	8006404 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2222      	movs	r2, #34	@ 0x22
 8005b78:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b7a:	e00a      	b.n	8005b92 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005b7c:	7afb      	ldrb	r3, [r7, #11]
 8005b7e:	2b28      	cmp	r3, #40	@ 0x28
 8005b80:	d107      	bne.n	8005b92 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005b82:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fc3c 	bl	8006404 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ba0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6859      	ldr	r1, [r3, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	4b8c      	ldr	r3, [pc, #560]	@ (8005de0 <I2C_ITSlaveCplt+0x2cc>)
 8005bae:	400b      	ands	r3, r1
 8005bb0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fa85 	bl	80060c2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	0b9b      	lsrs	r3, r3, #14
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d013      	beq.n	8005bec <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005bd2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d020      	beq.n	8005c1e <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005bea:	e018      	b.n	8005c1e <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	0bdb      	lsrs	r3, r3, #15
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d012      	beq.n	8005c1e <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c06:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d006      	beq.n	8005c1e <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	089b      	lsrs	r3, r3, #2
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d020      	beq.n	8005c6c <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f023 0304 	bic.w	r3, r3, #4
 8005c30:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3c:	b2d2      	uxtb	r2, r2
 8005c3e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00c      	beq.n	8005c6c <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d005      	beq.n	8005c82 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c7a:	f043 0204 	orr.w	r2, r3, #4
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	091b      	lsrs	r3, r3, #4
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d04a      	beq.n	8005d24 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	091b      	lsrs	r3, r3, #4
 8005c92:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d044      	beq.n	8005d24 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d128      	bne.n	8005cf6 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b28      	cmp	r3, #40	@ 0x28
 8005cae:	d108      	bne.n	8005cc2 <I2C_ITSlaveCplt+0x1ae>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cb6:	d104      	bne.n	8005cc2 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005cb8:	6979      	ldr	r1, [r7, #20]
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f894 	bl	8005de8 <I2C_ITListenCplt>
 8005cc0:	e030      	b.n	8005d24 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b29      	cmp	r3, #41	@ 0x29
 8005ccc:	d10e      	bne.n	8005cec <I2C_ITSlaveCplt+0x1d8>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005cd4:	d00a      	beq.n	8005cec <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2210      	movs	r2, #16
 8005cdc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f9ef 	bl	80060c2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7ff fded 	bl	80058c4 <I2C_ITSlaveSeqCplt>
 8005cea:	e01b      	b.n	8005d24 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2210      	movs	r2, #16
 8005cf2:	61da      	str	r2, [r3, #28]
 8005cf4:	e016      	b.n	8005d24 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2210      	movs	r2, #16
 8005cfc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d02:	f043 0204 	orr.w	r2, r3, #4
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <I2C_ITSlaveCplt+0x204>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d16:	d105      	bne.n	8005d24 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f8b8 	bl	8005e94 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d010      	beq.n	8005d5c <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d3e:	4619      	mov	r1, r3
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f8a7 	bl	8005e94 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b28      	cmp	r3, #40	@ 0x28
 8005d50:	d141      	bne.n	8005dd6 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005d52:	6979      	ldr	r1, [r7, #20]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f847 	bl	8005de8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d5a:	e03c      	b.n	8005dd6 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d64:	d014      	beq.n	8005d90 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff fdac 	bl	80058c4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8005de4 <I2C_ITSlaveCplt+0x2d0>)
 8005d70:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2220      	movs	r2, #32
 8005d76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7fe ff30 	bl	8004bee <HAL_I2C_ListenCpltCallback>
}
 8005d8e:	e022      	b.n	8005dd6 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b22      	cmp	r3, #34	@ 0x22
 8005d9a:	d10e      	bne.n	8005dba <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f013 fd50 	bl	8019858 <HAL_I2C_SlaveRxCpltCallback>
}
 8005db8:	e00d      	b.n	8005dd6 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7fe fef4 	bl	8004bbe <HAL_I2C_SlaveTxCpltCallback>
}
 8005dd6:	bf00      	nop
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	fe00e800 	.word	0xfe00e800
 8005de4:	ffff0000 	.word	0xffff0000

08005de8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a26      	ldr	r2, [pc, #152]	@ (8005e90 <I2C_ITListenCplt+0xa8>)
 8005df6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	089b      	lsrs	r3, r3, #2
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d022      	beq.n	8005e66 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d012      	beq.n	8005e66 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e44:	3b01      	subs	r3, #1
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e5e:	f043 0204 	orr.w	r2, r3, #4
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005e66:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 faca 	bl	8006404 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2210      	movs	r2, #16
 8005e76:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7fe feb4 	bl	8004bee <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005e86:	bf00      	nop
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	ffff0000 	.word	0xffff0000

08005e94 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ea4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a6d      	ldr	r2, [pc, #436]	@ (8006068 <I2C_ITError+0x1d4>)
 8005eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
 8005ec8:	2b28      	cmp	r3, #40	@ 0x28
 8005eca:	d005      	beq.n	8005ed8 <I2C_ITError+0x44>
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	2b29      	cmp	r3, #41	@ 0x29
 8005ed0:	d002      	beq.n	8005ed8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
 8005ed4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ed6:	d10b      	bne.n	8005ef0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005ed8:	2103      	movs	r1, #3
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fa92 	bl	8006404 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2228      	movs	r2, #40	@ 0x28
 8005ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a60      	ldr	r2, [pc, #384]	@ (800606c <I2C_ITError+0x1d8>)
 8005eec:	635a      	str	r2, [r3, #52]	@ 0x34
 8005eee:	e030      	b.n	8005f52 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005ef0:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fa85 	bl	8006404 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f8e1 	bl	80060c2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b60      	cmp	r3, #96	@ 0x60
 8005f0a:	d01f      	beq.n	8005f4c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	f003 0320 	and.w	r3, r3, #32
 8005f1e:	2b20      	cmp	r3, #32
 8005f20:	d114      	bne.n	8005f4c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	f003 0310 	and.w	r3, r3, #16
 8005f2c:	2b10      	cmp	r3, #16
 8005f2e:	d109      	bne.n	8005f44 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2210      	movs	r2, #16
 8005f36:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f3c:	f043 0204 	orr.w	r2, r3, #4
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f56:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d039      	beq.n	8005fd4 <I2C_ITError+0x140>
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2b11      	cmp	r3, #17
 8005f64:	d002      	beq.n	8005f6c <I2C_ITError+0xd8>
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	2b21      	cmp	r3, #33	@ 0x21
 8005f6a:	d133      	bne.n	8005fd4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f7a:	d107      	bne.n	8005f8c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005f8a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fc fdd9 	bl	8002b48 <HAL_DMA_GetState>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d017      	beq.n	8005fcc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa0:	4a33      	ldr	r2, [pc, #204]	@ (8006070 <I2C_ITError+0x1dc>)
 8005fa2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fc fc1d 	bl	80027f0 <HAL_DMA_Abort_IT>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d04d      	beq.n	8006058 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005fc6:	4610      	mov	r0, r2
 8005fc8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005fca:	e045      	b.n	8006058 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f851 	bl	8006074 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005fd2:	e041      	b.n	8006058 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d039      	beq.n	8006050 <I2C_ITError+0x1bc>
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2b12      	cmp	r3, #18
 8005fe0:	d002      	beq.n	8005fe8 <I2C_ITError+0x154>
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2b22      	cmp	r3, #34	@ 0x22
 8005fe6:	d133      	bne.n	8006050 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ff2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ff6:	d107      	bne.n	8006008 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006006:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800600c:	4618      	mov	r0, r3
 800600e:	f7fc fd9b 	bl	8002b48 <HAL_DMA_GetState>
 8006012:	4603      	mov	r3, r0
 8006014:	2b01      	cmp	r3, #1
 8006016:	d017      	beq.n	8006048 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800601c:	4a14      	ldr	r2, [pc, #80]	@ (8006070 <I2C_ITError+0x1dc>)
 800601e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800602c:	4618      	mov	r0, r3
 800602e:	f7fc fbdf 	bl	80027f0 <HAL_DMA_Abort_IT>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d011      	beq.n	800605c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800603c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006042:	4610      	mov	r0, r2
 8006044:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006046:	e009      	b.n	800605c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f813 	bl	8006074 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800604e:	e005      	b.n	800605c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f80f 	bl	8006074 <I2C_TreatErrorCallback>
  }
}
 8006056:	e002      	b.n	800605e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006058:	bf00      	nop
 800605a:	e000      	b.n	800605e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800605c:	bf00      	nop
}
 800605e:	bf00      	nop
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	ffff0000 	.word	0xffff0000
 800606c:	08004ed7 	.word	0x08004ed7
 8006070:	0800625b 	.word	0x0800625b

08006074 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b60      	cmp	r3, #96	@ 0x60
 8006086:	d10e      	bne.n	80060a6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2220      	movs	r2, #32
 800608c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7fe fdcd 	bl	8004c3e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80060a4:	e009      	b.n	80060ba <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7fe fdb8 	bl	8004c2a <HAL_I2C_ErrorCallback>
}
 80060ba:	bf00      	nop
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b083      	sub	sp, #12
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d103      	bne.n	80060e0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2200      	movs	r2, #0
 80060de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d007      	beq.n	80060fe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	699a      	ldr	r2, [r3, #24]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f042 0201 	orr.w	r2, r2, #1
 80060fc:	619a      	str	r2, [r3, #24]
  }
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b084      	sub	sp, #16
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006116:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006126:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800612c:	b29b      	uxth	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d104      	bne.n	800613c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006132:	2120      	movs	r1, #32
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 f8e1 	bl	80062fc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800613a:	e02d      	b.n	8006198 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8006144:	441a      	add	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800614e:	b29b      	uxth	r3, r3
 8006150:	2bff      	cmp	r3, #255	@ 0xff
 8006152:	d903      	bls.n	800615c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	22ff      	movs	r2, #255	@ 0xff
 8006158:	851a      	strh	r2, [r3, #40]	@ 0x28
 800615a:	e004      	b.n	8006166 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616e:	4619      	mov	r1, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3328      	adds	r3, #40	@ 0x28
 8006176:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800617c:	f7fc fa68 	bl	8002650 <HAL_DMA_Start_IT>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d004      	beq.n	8006190 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006186:	2110      	movs	r1, #16
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f7ff fe83 	bl	8005e94 <I2C_ITError>
}
 800618e:	e003      	b.n	8006198 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006190:	2140      	movs	r1, #64	@ 0x40
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 f8b2 	bl	80062fc <I2C_Enable_IRQ>
}
 8006198:	bf00      	nop
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b2:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10e      	bne.n	80061de <I2C_DMASlaveReceiveCplt+0x3e>
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061c6:	d00a      	beq.n	80061de <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80061d6:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f7ff fb73 	bl	80058c4 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 80061de:	bf00      	nop
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f6:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d007      	beq.n	8006210 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 800620c:	2301      	movs	r3, #1
 800620e:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8006224:	2301      	movs	r3, #1
 8006226:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7fc fc9b 	bl	8002b64 <HAL_DMA_GetError>
 800622e:	4603      	mov	r3, r0
 8006230:	2b02      	cmp	r3, #2
 8006232:	d00e      	beq.n	8006252 <I2C_DMAError+0x6c>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00b      	beq.n	8006252 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006248:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800624a:	2110      	movs	r1, #16
 800624c:	68b8      	ldr	r0, [r7, #8]
 800624e:	f7ff fe21 	bl	8005e94 <I2C_ITError>
  }
}
 8006252:	bf00      	nop
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b084      	sub	sp, #16
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006266:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626c:	2b00      	cmp	r3, #0
 800626e:	d003      	beq.n	8006278 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006274:	2200      	movs	r2, #0
 8006276:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d003      	beq.n	8006288 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006284:	2200      	movs	r2, #0
 8006286:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f7ff fef3 	bl	8006074 <I2C_TreatErrorCallback>
}
 800628e:	bf00      	nop
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
	...

08006298 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	607b      	str	r3, [r7, #4]
 80062a2:	460b      	mov	r3, r1
 80062a4:	817b      	strh	r3, [r7, #10]
 80062a6:	4613      	mov	r3, r2
 80062a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062aa:	897b      	ldrh	r3, [r7, #10]
 80062ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80062b0:	7a7b      	ldrb	r3, [r7, #9]
 80062b2:	041b      	lsls	r3, r3, #16
 80062b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062b8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062c6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	0d5b      	lsrs	r3, r3, #21
 80062d2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80062d6:	4b08      	ldr	r3, [pc, #32]	@ (80062f8 <I2C_TransferConfig+0x60>)
 80062d8:	430b      	orrs	r3, r1
 80062da:	43db      	mvns	r3, r3
 80062dc:	ea02 0103 	and.w	r1, r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80062ea:	bf00      	nop
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	03ff63ff 	.word	0x03ff63ff

080062fc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	460b      	mov	r3, r1
 8006306:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006310:	4a39      	ldr	r2, [pc, #228]	@ (80063f8 <I2C_Enable_IRQ+0xfc>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d032      	beq.n	800637c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800631a:	4a38      	ldr	r2, [pc, #224]	@ (80063fc <I2C_Enable_IRQ+0x100>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d02d      	beq.n	800637c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006324:	4a36      	ldr	r2, [pc, #216]	@ (8006400 <I2C_Enable_IRQ+0x104>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d028      	beq.n	800637c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800632a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800632e:	2b00      	cmp	r3, #0
 8006330:	da03      	bge.n	800633a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006338:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800633a:	887b      	ldrh	r3, [r7, #2]
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800634a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800634c:	887b      	ldrh	r3, [r7, #2]
 800634e:	f003 0302 	and.w	r3, r3, #2
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800635c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800635e:	887b      	ldrh	r3, [r7, #2]
 8006360:	2b10      	cmp	r3, #16
 8006362:	d103      	bne.n	800636c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800636a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800636c:	887b      	ldrh	r3, [r7, #2]
 800636e:	2b20      	cmp	r3, #32
 8006370:	d133      	bne.n	80063da <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f043 0320 	orr.w	r3, r3, #32
 8006378:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800637a:	e02e      	b.n	80063da <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800637c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006380:	2b00      	cmp	r3, #0
 8006382:	da03      	bge.n	800638c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800638a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800638c:	887b      	ldrh	r3, [r7, #2]
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800639c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800639e:	887b      	ldrh	r3, [r7, #2]
 80063a0:	f003 0302 	and.w	r3, r3, #2
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80063ae:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80063b0:	887b      	ldrh	r3, [r7, #2]
 80063b2:	2b10      	cmp	r3, #16
 80063b4:	d103      	bne.n	80063be <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80063bc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80063be:	887b      	ldrh	r3, [r7, #2]
 80063c0:	2b20      	cmp	r3, #32
 80063c2:	d103      	bne.n	80063cc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80063ca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80063cc:	887b      	ldrh	r3, [r7, #2]
 80063ce:	2b40      	cmp	r3, #64	@ 0x40
 80063d0:	d103      	bne.n	80063da <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063d8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6819      	ldr	r1, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	601a      	str	r2, [r3, #0]
}
 80063ea:	bf00      	nop
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	080050df 	.word	0x080050df
 80063fc:	08005581 	.word	0x08005581
 8006400:	080052e5 	.word	0x080052e5

08006404 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006410:	2300      	movs	r3, #0
 8006412:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006414:	887b      	ldrh	r3, [r7, #2]
 8006416:	f003 0301 	and.w	r3, r3, #1
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00f      	beq.n	800643e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006424:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800642c:	b2db      	uxtb	r3, r3
 800642e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006432:	2b28      	cmp	r3, #40	@ 0x28
 8006434:	d003      	beq.n	800643e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800643c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800643e:	887b      	ldrh	r3, [r7, #2]
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00f      	beq.n	8006468 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800644e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006456:	b2db      	uxtb	r3, r3
 8006458:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800645c:	2b28      	cmp	r3, #40	@ 0x28
 800645e:	d003      	beq.n	8006468 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006466:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006468:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800646c:	2b00      	cmp	r3, #0
 800646e:	da03      	bge.n	8006478 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006476:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006478:	887b      	ldrh	r3, [r7, #2]
 800647a:	2b10      	cmp	r3, #16
 800647c:	d103      	bne.n	8006486 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006484:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006486:	887b      	ldrh	r3, [r7, #2]
 8006488:	2b20      	cmp	r3, #32
 800648a:	d103      	bne.n	8006494 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f043 0320 	orr.w	r3, r3, #32
 8006492:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006494:	887b      	ldrh	r3, [r7, #2]
 8006496:	2b40      	cmp	r3, #64	@ 0x40
 8006498:	d103      	bne.n	80064a2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064a0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6819      	ldr	r1, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	43da      	mvns	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	400a      	ands	r2, r1
 80064b2:	601a      	str	r2, [r3, #0]
}
 80064b4:	bf00      	nop
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b20      	cmp	r3, #32
 80064d4:	d138      	bne.n	8006548 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e032      	b.n	800654a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2224      	movs	r2, #36	@ 0x24
 80064f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 0201 	bic.w	r2, r2, #1
 8006502:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006512:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6819      	ldr	r1, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0201 	orr.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2220      	movs	r2, #32
 8006538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	e000      	b.n	800654a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006548:	2302      	movs	r3, #2
  }
}
 800654a:	4618      	mov	r0, r3
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006556:	b480      	push	{r7}
 8006558:	b085      	sub	sp, #20
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b20      	cmp	r3, #32
 800656a:	d139      	bne.n	80065e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006572:	2b01      	cmp	r3, #1
 8006574:	d101      	bne.n	800657a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006576:	2302      	movs	r3, #2
 8006578:	e033      	b.n	80065e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2224      	movs	r2, #36	@ 0x24
 8006586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 0201 	bic.w	r2, r2, #1
 8006598:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80065a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	021b      	lsls	r3, r3, #8
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0201 	orr.w	r2, r2, #1
 80065ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2220      	movs	r2, #32
 80065d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	e000      	b.n	80065e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80065e0:	2302      	movs	r3, #2
  }
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b086      	sub	sp, #24
 80065f2:	af02      	add	r7, sp, #8
 80065f4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e108      	b.n	8006812 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d106      	bne.n	8006620 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7fb f862 	bl	80016e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2203      	movs	r2, #3
 8006624:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800662e:	d102      	bne.n	8006636 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4618      	mov	r0, r3
 800663c:	f003 f926 	bl	800988c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6818      	ldr	r0, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	7c1a      	ldrb	r2, [r3, #16]
 8006648:	f88d 2000 	strb.w	r2, [sp]
 800664c:	3304      	adds	r3, #4
 800664e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006650:	f003 f8c2 	bl	80097d8 <USB_CoreInit>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d005      	beq.n	8006666 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2202      	movs	r2, #2
 800665e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e0d5      	b.n	8006812 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2100      	movs	r1, #0
 800666c:	4618      	mov	r0, r3
 800666e:	f003 f91e 	bl	80098ae <USB_SetCurrentMode>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d005      	beq.n	8006684 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2202      	movs	r2, #2
 800667c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e0c6      	b.n	8006812 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006684:	2300      	movs	r3, #0
 8006686:	73fb      	strb	r3, [r7, #15]
 8006688:	e04a      	b.n	8006720 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800668a:	7bfa      	ldrb	r2, [r7, #15]
 800668c:	6879      	ldr	r1, [r7, #4]
 800668e:	4613      	mov	r3, r2
 8006690:	00db      	lsls	r3, r3, #3
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	440b      	add	r3, r1
 8006698:	3315      	adds	r3, #21
 800669a:	2201      	movs	r2, #1
 800669c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800669e:	7bfa      	ldrb	r2, [r7, #15]
 80066a0:	6879      	ldr	r1, [r7, #4]
 80066a2:	4613      	mov	r3, r2
 80066a4:	00db      	lsls	r3, r3, #3
 80066a6:	4413      	add	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	440b      	add	r3, r1
 80066ac:	3314      	adds	r3, #20
 80066ae:	7bfa      	ldrb	r2, [r7, #15]
 80066b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80066b2:	7bfa      	ldrb	r2, [r7, #15]
 80066b4:	7bfb      	ldrb	r3, [r7, #15]
 80066b6:	b298      	uxth	r0, r3
 80066b8:	6879      	ldr	r1, [r7, #4]
 80066ba:	4613      	mov	r3, r2
 80066bc:	00db      	lsls	r3, r3, #3
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	440b      	add	r3, r1
 80066c4:	332e      	adds	r3, #46	@ 0x2e
 80066c6:	4602      	mov	r2, r0
 80066c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80066ca:	7bfa      	ldrb	r2, [r7, #15]
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	4613      	mov	r3, r2
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	4413      	add	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	440b      	add	r3, r1
 80066d8:	3318      	adds	r3, #24
 80066da:	2200      	movs	r2, #0
 80066dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80066de:	7bfa      	ldrb	r2, [r7, #15]
 80066e0:	6879      	ldr	r1, [r7, #4]
 80066e2:	4613      	mov	r3, r2
 80066e4:	00db      	lsls	r3, r3, #3
 80066e6:	4413      	add	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	440b      	add	r3, r1
 80066ec:	331c      	adds	r3, #28
 80066ee:	2200      	movs	r2, #0
 80066f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80066f2:	7bfa      	ldrb	r2, [r7, #15]
 80066f4:	6879      	ldr	r1, [r7, #4]
 80066f6:	4613      	mov	r3, r2
 80066f8:	00db      	lsls	r3, r3, #3
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	440b      	add	r3, r1
 8006700:	3320      	adds	r3, #32
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006706:	7bfa      	ldrb	r2, [r7, #15]
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	4613      	mov	r3, r2
 800670c:	00db      	lsls	r3, r3, #3
 800670e:	4413      	add	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	440b      	add	r3, r1
 8006714:	3324      	adds	r3, #36	@ 0x24
 8006716:	2200      	movs	r2, #0
 8006718:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800671a:	7bfb      	ldrb	r3, [r7, #15]
 800671c:	3301      	adds	r3, #1
 800671e:	73fb      	strb	r3, [r7, #15]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	791b      	ldrb	r3, [r3, #4]
 8006724:	7bfa      	ldrb	r2, [r7, #15]
 8006726:	429a      	cmp	r2, r3
 8006728:	d3af      	bcc.n	800668a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800672a:	2300      	movs	r3, #0
 800672c:	73fb      	strb	r3, [r7, #15]
 800672e:	e044      	b.n	80067ba <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006730:	7bfa      	ldrb	r2, [r7, #15]
 8006732:	6879      	ldr	r1, [r7, #4]
 8006734:	4613      	mov	r3, r2
 8006736:	00db      	lsls	r3, r3, #3
 8006738:	4413      	add	r3, r2
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	440b      	add	r3, r1
 800673e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006742:	2200      	movs	r2, #0
 8006744:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006746:	7bfa      	ldrb	r2, [r7, #15]
 8006748:	6879      	ldr	r1, [r7, #4]
 800674a:	4613      	mov	r3, r2
 800674c:	00db      	lsls	r3, r3, #3
 800674e:	4413      	add	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	440b      	add	r3, r1
 8006754:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006758:	7bfa      	ldrb	r2, [r7, #15]
 800675a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800675c:	7bfa      	ldrb	r2, [r7, #15]
 800675e:	6879      	ldr	r1, [r7, #4]
 8006760:	4613      	mov	r3, r2
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	4413      	add	r3, r2
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	440b      	add	r3, r1
 800676a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800676e:	2200      	movs	r2, #0
 8006770:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006772:	7bfa      	ldrb	r2, [r7, #15]
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	4613      	mov	r3, r2
 8006778:	00db      	lsls	r3, r3, #3
 800677a:	4413      	add	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	440b      	add	r3, r1
 8006780:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006784:	2200      	movs	r2, #0
 8006786:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006788:	7bfa      	ldrb	r2, [r7, #15]
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	4613      	mov	r3, r2
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	4413      	add	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	440b      	add	r3, r1
 8006796:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800679a:	2200      	movs	r2, #0
 800679c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800679e:	7bfa      	ldrb	r2, [r7, #15]
 80067a0:	6879      	ldr	r1, [r7, #4]
 80067a2:	4613      	mov	r3, r2
 80067a4:	00db      	lsls	r3, r3, #3
 80067a6:	4413      	add	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	440b      	add	r3, r1
 80067ac:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067b4:	7bfb      	ldrb	r3, [r7, #15]
 80067b6:	3301      	adds	r3, #1
 80067b8:	73fb      	strb	r3, [r7, #15]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	791b      	ldrb	r3, [r3, #4]
 80067be:	7bfa      	ldrb	r2, [r7, #15]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d3b5      	bcc.n	8006730 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6818      	ldr	r0, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	7c1a      	ldrb	r2, [r3, #16]
 80067cc:	f88d 2000 	strb.w	r2, [sp]
 80067d0:	3304      	adds	r3, #4
 80067d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067d4:	f003 f8b8 	bl	8009948 <USB_DevInit>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d005      	beq.n	80067ea <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2202      	movs	r2, #2
 80067e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e013      	b.n	8006812 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	7b1b      	ldrb	r3, [r3, #12]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d102      	bne.n	8006806 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 f80b 	bl	800681c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4618      	mov	r0, r3
 800680c:	f003 fa73 	bl	8009cf6 <USB_DevDisconnect>

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
	...

0800681c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800684a:	4b05      	ldr	r3, [pc, #20]	@ (8006860 <HAL_PCDEx_ActivateLPM+0x44>)
 800684c:	4313      	orrs	r3, r2
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	10000003 	.word	0x10000003

08006864 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006864:	b480      	push	{r7}
 8006866:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006868:	4b05      	ldr	r3, [pc, #20]	@ (8006880 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a04      	ldr	r2, [pc, #16]	@ (8006880 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800686e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006872:	6013      	str	r3, [r2, #0]
}
 8006874:	bf00      	nop
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	40007000 	.word	0x40007000

08006884 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800688c:	2300      	movs	r3, #0
 800688e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e291      	b.n	8006dbe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 8087 	beq.w	80069b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80068a8:	4b96      	ldr	r3, [pc, #600]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f003 030c 	and.w	r3, r3, #12
 80068b0:	2b04      	cmp	r3, #4
 80068b2:	d00c      	beq.n	80068ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068b4:	4b93      	ldr	r3, [pc, #588]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f003 030c 	and.w	r3, r3, #12
 80068bc:	2b08      	cmp	r3, #8
 80068be:	d112      	bne.n	80068e6 <HAL_RCC_OscConfig+0x62>
 80068c0:	4b90      	ldr	r3, [pc, #576]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068cc:	d10b      	bne.n	80068e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068ce:	4b8d      	ldr	r3, [pc, #564]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d06c      	beq.n	80069b4 <HAL_RCC_OscConfig+0x130>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d168      	bne.n	80069b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e26b      	b.n	8006dbe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068ee:	d106      	bne.n	80068fe <HAL_RCC_OscConfig+0x7a>
 80068f0:	4b84      	ldr	r3, [pc, #528]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a83      	ldr	r2, [pc, #524]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 80068f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068fa:	6013      	str	r3, [r2, #0]
 80068fc:	e02e      	b.n	800695c <HAL_RCC_OscConfig+0xd8>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10c      	bne.n	8006920 <HAL_RCC_OscConfig+0x9c>
 8006906:	4b7f      	ldr	r3, [pc, #508]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a7e      	ldr	r2, [pc, #504]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 800690c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	4b7c      	ldr	r3, [pc, #496]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a7b      	ldr	r2, [pc, #492]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006918:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800691c:	6013      	str	r3, [r2, #0]
 800691e:	e01d      	b.n	800695c <HAL_RCC_OscConfig+0xd8>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006928:	d10c      	bne.n	8006944 <HAL_RCC_OscConfig+0xc0>
 800692a:	4b76      	ldr	r3, [pc, #472]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a75      	ldr	r2, [pc, #468]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006930:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006934:	6013      	str	r3, [r2, #0]
 8006936:	4b73      	ldr	r3, [pc, #460]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a72      	ldr	r2, [pc, #456]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 800693c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006940:	6013      	str	r3, [r2, #0]
 8006942:	e00b      	b.n	800695c <HAL_RCC_OscConfig+0xd8>
 8006944:	4b6f      	ldr	r3, [pc, #444]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a6e      	ldr	r2, [pc, #440]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 800694a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800694e:	6013      	str	r3, [r2, #0]
 8006950:	4b6c      	ldr	r3, [pc, #432]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a6b      	ldr	r2, [pc, #428]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006956:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800695a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d013      	beq.n	800698c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006964:	f7fb faaa 	bl	8001ebc <HAL_GetTick>
 8006968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800696a:	e008      	b.n	800697e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800696c:	f7fb faa6 	bl	8001ebc <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b64      	cmp	r3, #100	@ 0x64
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e21f      	b.n	8006dbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800697e:	4b61      	ldr	r3, [pc, #388]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d0f0      	beq.n	800696c <HAL_RCC_OscConfig+0xe8>
 800698a:	e014      	b.n	80069b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800698c:	f7fb fa96 	bl	8001ebc <HAL_GetTick>
 8006990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006992:	e008      	b.n	80069a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006994:	f7fb fa92 	bl	8001ebc <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b64      	cmp	r3, #100	@ 0x64
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e20b      	b.n	8006dbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069a6:	4b57      	ldr	r3, [pc, #348]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1f0      	bne.n	8006994 <HAL_RCC_OscConfig+0x110>
 80069b2:	e000      	b.n	80069b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d069      	beq.n	8006a96 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80069c2:	4b50      	ldr	r3, [pc, #320]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f003 030c 	and.w	r3, r3, #12
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00b      	beq.n	80069e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069ce:	4b4d      	ldr	r3, [pc, #308]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f003 030c 	and.w	r3, r3, #12
 80069d6:	2b08      	cmp	r3, #8
 80069d8:	d11c      	bne.n	8006a14 <HAL_RCC_OscConfig+0x190>
 80069da:	4b4a      	ldr	r3, [pc, #296]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d116      	bne.n	8006a14 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069e6:	4b47      	ldr	r3, [pc, #284]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d005      	beq.n	80069fe <HAL_RCC_OscConfig+0x17a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d001      	beq.n	80069fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e1df      	b.n	8006dbe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069fe:	4b41      	ldr	r3, [pc, #260]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	00db      	lsls	r3, r3, #3
 8006a0c:	493d      	ldr	r1, [pc, #244]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a12:	e040      	b.n	8006a96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d023      	beq.n	8006a64 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a1c:	4b39      	ldr	r3, [pc, #228]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a38      	ldr	r2, [pc, #224]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006a22:	f043 0301 	orr.w	r3, r3, #1
 8006a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a28:	f7fb fa48 	bl	8001ebc <HAL_GetTick>
 8006a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a2e:	e008      	b.n	8006a42 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a30:	f7fb fa44 	bl	8001ebc <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e1bd      	b.n	8006dbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a42:	4b30      	ldr	r3, [pc, #192]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d0f0      	beq.n	8006a30 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	00db      	lsls	r3, r3, #3
 8006a5c:	4929      	ldr	r1, [pc, #164]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	600b      	str	r3, [r1, #0]
 8006a62:	e018      	b.n	8006a96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a64:	4b27      	ldr	r3, [pc, #156]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a26      	ldr	r2, [pc, #152]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006a6a:	f023 0301 	bic.w	r3, r3, #1
 8006a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a70:	f7fb fa24 	bl	8001ebc <HAL_GetTick>
 8006a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a76:	e008      	b.n	8006a8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a78:	f7fb fa20 	bl	8001ebc <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d901      	bls.n	8006a8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e199      	b.n	8006dbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 0302 	and.w	r3, r3, #2
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1f0      	bne.n	8006a78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0308 	and.w	r3, r3, #8
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d038      	beq.n	8006b14 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d019      	beq.n	8006ade <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006aaa:	4b16      	ldr	r3, [pc, #88]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006aae:	4a15      	ldr	r2, [pc, #84]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006ab0:	f043 0301 	orr.w	r3, r3, #1
 8006ab4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ab6:	f7fb fa01 	bl	8001ebc <HAL_GetTick>
 8006aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006abc:	e008      	b.n	8006ad0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006abe:	f7fb f9fd 	bl	8001ebc <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d901      	bls.n	8006ad0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e176      	b.n	8006dbe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006ad2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ad4:	f003 0302 	and.w	r3, r3, #2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0f0      	beq.n	8006abe <HAL_RCC_OscConfig+0x23a>
 8006adc:	e01a      	b.n	8006b14 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ade:	4b09      	ldr	r3, [pc, #36]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ae2:	4a08      	ldr	r2, [pc, #32]	@ (8006b04 <HAL_RCC_OscConfig+0x280>)
 8006ae4:	f023 0301 	bic.w	r3, r3, #1
 8006ae8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aea:	f7fb f9e7 	bl	8001ebc <HAL_GetTick>
 8006aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006af0:	e00a      	b.n	8006b08 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006af2:	f7fb f9e3 	bl	8001ebc <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d903      	bls.n	8006b08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e15c      	b.n	8006dbe <HAL_RCC_OscConfig+0x53a>
 8006b04:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b08:	4b91      	ldr	r3, [pc, #580]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006b0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1ee      	bne.n	8006af2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0304 	and.w	r3, r3, #4
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 80a4 	beq.w	8006c6a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b22:	4b8b      	ldr	r3, [pc, #556]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10d      	bne.n	8006b4a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b2e:	4b88      	ldr	r3, [pc, #544]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b32:	4a87      	ldr	r2, [pc, #540]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b3a:	4b85      	ldr	r3, [pc, #532]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b42:	60bb      	str	r3, [r7, #8]
 8006b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b46:	2301      	movs	r3, #1
 8006b48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b4a:	4b82      	ldr	r3, [pc, #520]	@ (8006d54 <HAL_RCC_OscConfig+0x4d0>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d118      	bne.n	8006b88 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006b56:	4b7f      	ldr	r3, [pc, #508]	@ (8006d54 <HAL_RCC_OscConfig+0x4d0>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a7e      	ldr	r2, [pc, #504]	@ (8006d54 <HAL_RCC_OscConfig+0x4d0>)
 8006b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b62:	f7fb f9ab 	bl	8001ebc <HAL_GetTick>
 8006b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b68:	e008      	b.n	8006b7c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b6a:	f7fb f9a7 	bl	8001ebc <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	2b64      	cmp	r3, #100	@ 0x64
 8006b76:	d901      	bls.n	8006b7c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e120      	b.n	8006dbe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b7c:	4b75      	ldr	r3, [pc, #468]	@ (8006d54 <HAL_RCC_OscConfig+0x4d0>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d0f0      	beq.n	8006b6a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d106      	bne.n	8006b9e <HAL_RCC_OscConfig+0x31a>
 8006b90:	4b6f      	ldr	r3, [pc, #444]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b94:	4a6e      	ldr	r2, [pc, #440]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006b96:	f043 0301 	orr.w	r3, r3, #1
 8006b9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b9c:	e02d      	b.n	8006bfa <HAL_RCC_OscConfig+0x376>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10c      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x33c>
 8006ba6:	4b6a      	ldr	r3, [pc, #424]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006baa:	4a69      	ldr	r2, [pc, #420]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006bac:	f023 0301 	bic.w	r3, r3, #1
 8006bb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bb2:	4b67      	ldr	r3, [pc, #412]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bb6:	4a66      	ldr	r2, [pc, #408]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006bb8:	f023 0304 	bic.w	r3, r3, #4
 8006bbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bbe:	e01c      	b.n	8006bfa <HAL_RCC_OscConfig+0x376>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	2b05      	cmp	r3, #5
 8006bc6:	d10c      	bne.n	8006be2 <HAL_RCC_OscConfig+0x35e>
 8006bc8:	4b61      	ldr	r3, [pc, #388]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bcc:	4a60      	ldr	r2, [pc, #384]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006bce:	f043 0304 	orr.w	r3, r3, #4
 8006bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bd4:	4b5e      	ldr	r3, [pc, #376]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bd8:	4a5d      	ldr	r2, [pc, #372]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006bda:	f043 0301 	orr.w	r3, r3, #1
 8006bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8006be0:	e00b      	b.n	8006bfa <HAL_RCC_OscConfig+0x376>
 8006be2:	4b5b      	ldr	r3, [pc, #364]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006be6:	4a5a      	ldr	r2, [pc, #360]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006be8:	f023 0301 	bic.w	r3, r3, #1
 8006bec:	6713      	str	r3, [r2, #112]	@ 0x70
 8006bee:	4b58      	ldr	r3, [pc, #352]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bf2:	4a57      	ldr	r2, [pc, #348]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006bf4:	f023 0304 	bic.w	r3, r3, #4
 8006bf8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d015      	beq.n	8006c2e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c02:	f7fb f95b 	bl	8001ebc <HAL_GetTick>
 8006c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c08:	e00a      	b.n	8006c20 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c0a:	f7fb f957 	bl	8001ebc <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d901      	bls.n	8006c20 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e0ce      	b.n	8006dbe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c20:	4b4b      	ldr	r3, [pc, #300]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d0ee      	beq.n	8006c0a <HAL_RCC_OscConfig+0x386>
 8006c2c:	e014      	b.n	8006c58 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c2e:	f7fb f945 	bl	8001ebc <HAL_GetTick>
 8006c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c34:	e00a      	b.n	8006c4c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c36:	f7fb f941 	bl	8001ebc <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d901      	bls.n	8006c4c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e0b8      	b.n	8006dbe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c4c:	4b40      	ldr	r3, [pc, #256]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1ee      	bne.n	8006c36 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d105      	bne.n	8006c6a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c5e:	4b3c      	ldr	r3, [pc, #240]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c62:	4a3b      	ldr	r2, [pc, #236]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006c64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c68:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f000 80a4 	beq.w	8006dbc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c74:	4b36      	ldr	r3, [pc, #216]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f003 030c 	and.w	r3, r3, #12
 8006c7c:	2b08      	cmp	r3, #8
 8006c7e:	d06b      	beq.n	8006d58 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d149      	bne.n	8006d1c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c88:	4b31      	ldr	r3, [pc, #196]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a30      	ldr	r2, [pc, #192]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006c8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c94:	f7fb f912 	bl	8001ebc <HAL_GetTick>
 8006c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c9a:	e008      	b.n	8006cae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c9c:	f7fb f90e 	bl	8001ebc <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e087      	b.n	8006dbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cae:	4b28      	ldr	r3, [pc, #160]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1f0      	bne.n	8006c9c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	69da      	ldr	r2, [r3, #28]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc8:	019b      	lsls	r3, r3, #6
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd0:	085b      	lsrs	r3, r3, #1
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	041b      	lsls	r3, r3, #16
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cdc:	061b      	lsls	r3, r3, #24
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006ce2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ce6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ce8:	4b19      	ldr	r3, [pc, #100]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a18      	ldr	r2, [pc, #96]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006cee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cf4:	f7fb f8e2 	bl	8001ebc <HAL_GetTick>
 8006cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cfa:	e008      	b.n	8006d0e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cfc:	f7fb f8de 	bl	8001ebc <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d901      	bls.n	8006d0e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e057      	b.n	8006dbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d0e:	4b10      	ldr	r3, [pc, #64]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d0f0      	beq.n	8006cfc <HAL_RCC_OscConfig+0x478>
 8006d1a:	e04f      	b.n	8006dbc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a0b      	ldr	r2, [pc, #44]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006d22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d28:	f7fb f8c8 	bl	8001ebc <HAL_GetTick>
 8006d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d2e:	e008      	b.n	8006d42 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d30:	f7fb f8c4 	bl	8001ebc <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d901      	bls.n	8006d42 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	e03d      	b.n	8006dbe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d42:	4b03      	ldr	r3, [pc, #12]	@ (8006d50 <HAL_RCC_OscConfig+0x4cc>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1f0      	bne.n	8006d30 <HAL_RCC_OscConfig+0x4ac>
 8006d4e:	e035      	b.n	8006dbc <HAL_RCC_OscConfig+0x538>
 8006d50:	40023800 	.word	0x40023800
 8006d54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006d58:	4b1b      	ldr	r3, [pc, #108]	@ (8006dc8 <HAL_RCC_OscConfig+0x544>)
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d028      	beq.n	8006db8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d121      	bne.n	8006db8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d11a      	bne.n	8006db8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006d88:	4013      	ands	r3, r2
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006d8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d111      	bne.n	8006db8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9e:	085b      	lsrs	r3, r3, #1
 8006da0:	3b01      	subs	r3, #1
 8006da2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d107      	bne.n	8006db8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d001      	beq.n	8006dbc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e000      	b.n	8006dbe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3718      	adds	r7, #24
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	40023800 	.word	0x40023800

08006dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e0d0      	b.n	8006f86 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006de4:	4b6a      	ldr	r3, [pc, #424]	@ (8006f90 <HAL_RCC_ClockConfig+0x1c4>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 030f 	and.w	r3, r3, #15
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d910      	bls.n	8006e14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006df2:	4b67      	ldr	r3, [pc, #412]	@ (8006f90 <HAL_RCC_ClockConfig+0x1c4>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f023 020f 	bic.w	r2, r3, #15
 8006dfa:	4965      	ldr	r1, [pc, #404]	@ (8006f90 <HAL_RCC_ClockConfig+0x1c4>)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e02:	4b63      	ldr	r3, [pc, #396]	@ (8006f90 <HAL_RCC_ClockConfig+0x1c4>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 030f 	and.w	r3, r3, #15
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d001      	beq.n	8006e14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e0b8      	b.n	8006f86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0302 	and.w	r3, r3, #2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d020      	beq.n	8006e62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0304 	and.w	r3, r3, #4
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d005      	beq.n	8006e38 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e2c:	4b59      	ldr	r3, [pc, #356]	@ (8006f94 <HAL_RCC_ClockConfig+0x1c8>)
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	4a58      	ldr	r2, [pc, #352]	@ (8006f94 <HAL_RCC_ClockConfig+0x1c8>)
 8006e32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006e36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0308 	and.w	r3, r3, #8
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d005      	beq.n	8006e50 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e44:	4b53      	ldr	r3, [pc, #332]	@ (8006f94 <HAL_RCC_ClockConfig+0x1c8>)
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	4a52      	ldr	r2, [pc, #328]	@ (8006f94 <HAL_RCC_ClockConfig+0x1c8>)
 8006e4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006e4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e50:	4b50      	ldr	r3, [pc, #320]	@ (8006f94 <HAL_RCC_ClockConfig+0x1c8>)
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	494d      	ldr	r1, [pc, #308]	@ (8006f94 <HAL_RCC_ClockConfig+0x1c8>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d040      	beq.n	8006ef0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d107      	bne.n	8006e86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e76:	4b47      	ldr	r3, [pc, #284]	@ (8006f94 <HAL_RCC_ClockConfig+0x1c8>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d115      	bne.n	8006eae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e07f      	b.n	8006f86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d107      	bne.n	8006e9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e8e:	4b41      	ldr	r3, [pc, #260]	@ (8006f94 <HAL_RCC_ClockConfig+0x1c8>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d109      	bne.n	8006eae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e073      	b.n	8006f86 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e9e:	4b3d      	ldr	r3, [pc, #244]	@ (8006f94 <HAL_RCC_ClockConfig+0x1c8>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e06b      	b.n	8006f86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006eae:	4b39      	ldr	r3, [pc, #228]	@ (8006f94 <HAL_RCC_ClockConfig+0x1c8>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f023 0203 	bic.w	r2, r3, #3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	4936      	ldr	r1, [pc, #216]	@ (8006f94 <HAL_RCC_ClockConfig+0x1c8>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ec0:	f7fa fffc 	bl	8001ebc <HAL_GetTick>
 8006ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ec6:	e00a      	b.n	8006ede <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ec8:	f7fa fff8 	bl	8001ebc <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d901      	bls.n	8006ede <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e053      	b.n	8006f86 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ede:	4b2d      	ldr	r3, [pc, #180]	@ (8006f94 <HAL_RCC_ClockConfig+0x1c8>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	f003 020c 	and.w	r2, r3, #12
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d1eb      	bne.n	8006ec8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ef0:	4b27      	ldr	r3, [pc, #156]	@ (8006f90 <HAL_RCC_ClockConfig+0x1c4>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 030f 	and.w	r3, r3, #15
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d210      	bcs.n	8006f20 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006efe:	4b24      	ldr	r3, [pc, #144]	@ (8006f90 <HAL_RCC_ClockConfig+0x1c4>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f023 020f 	bic.w	r2, r3, #15
 8006f06:	4922      	ldr	r1, [pc, #136]	@ (8006f90 <HAL_RCC_ClockConfig+0x1c4>)
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f0e:	4b20      	ldr	r3, [pc, #128]	@ (8006f90 <HAL_RCC_ClockConfig+0x1c4>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 030f 	and.w	r3, r3, #15
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d001      	beq.n	8006f20 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e032      	b.n	8006f86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0304 	and.w	r3, r3, #4
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d008      	beq.n	8006f3e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f2c:	4b19      	ldr	r3, [pc, #100]	@ (8006f94 <HAL_RCC_ClockConfig+0x1c8>)
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	4916      	ldr	r1, [pc, #88]	@ (8006f94 <HAL_RCC_ClockConfig+0x1c8>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0308 	and.w	r3, r3, #8
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d009      	beq.n	8006f5e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006f4a:	4b12      	ldr	r3, [pc, #72]	@ (8006f94 <HAL_RCC_ClockConfig+0x1c8>)
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	00db      	lsls	r3, r3, #3
 8006f58:	490e      	ldr	r1, [pc, #56]	@ (8006f94 <HAL_RCC_ClockConfig+0x1c8>)
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f5e:	f000 f821 	bl	8006fa4 <HAL_RCC_GetSysClockFreq>
 8006f62:	4602      	mov	r2, r0
 8006f64:	4b0b      	ldr	r3, [pc, #44]	@ (8006f94 <HAL_RCC_ClockConfig+0x1c8>)
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	091b      	lsrs	r3, r3, #4
 8006f6a:	f003 030f 	and.w	r3, r3, #15
 8006f6e:	490a      	ldr	r1, [pc, #40]	@ (8006f98 <HAL_RCC_ClockConfig+0x1cc>)
 8006f70:	5ccb      	ldrb	r3, [r1, r3]
 8006f72:	fa22 f303 	lsr.w	r3, r2, r3
 8006f76:	4a09      	ldr	r2, [pc, #36]	@ (8006f9c <HAL_RCC_ClockConfig+0x1d0>)
 8006f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006f7a:	4b09      	ldr	r3, [pc, #36]	@ (8006fa0 <HAL_RCC_ClockConfig+0x1d4>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fa fc2a 	bl	80017d8 <HAL_InitTick>

  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	40023c00 	.word	0x40023c00
 8006f94:	40023800 	.word	0x40023800
 8006f98:	0801e17c 	.word	0x0801e17c
 8006f9c:	20000000 	.word	0x20000000
 8006fa0:	20000004 	.word	0x20000004

08006fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fa8:	b094      	sub	sp, #80	@ 0x50
 8006faa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006fac:	2300      	movs	r3, #0
 8006fae:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fbc:	4b79      	ldr	r3, [pc, #484]	@ (80071a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f003 030c 	and.w	r3, r3, #12
 8006fc4:	2b08      	cmp	r3, #8
 8006fc6:	d00d      	beq.n	8006fe4 <HAL_RCC_GetSysClockFreq+0x40>
 8006fc8:	2b08      	cmp	r3, #8
 8006fca:	f200 80e1 	bhi.w	8007190 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <HAL_RCC_GetSysClockFreq+0x34>
 8006fd2:	2b04      	cmp	r3, #4
 8006fd4:	d003      	beq.n	8006fde <HAL_RCC_GetSysClockFreq+0x3a>
 8006fd6:	e0db      	b.n	8007190 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fd8:	4b73      	ldr	r3, [pc, #460]	@ (80071a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006fda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006fdc:	e0db      	b.n	8007196 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fde:	4b73      	ldr	r3, [pc, #460]	@ (80071ac <HAL_RCC_GetSysClockFreq+0x208>)
 8006fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006fe2:	e0d8      	b.n	8007196 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fe4:	4b6f      	ldr	r3, [pc, #444]	@ (80071a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006fee:	4b6d      	ldr	r3, [pc, #436]	@ (80071a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d063      	beq.n	80070c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ffa:	4b6a      	ldr	r3, [pc, #424]	@ (80071a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	099b      	lsrs	r3, r3, #6
 8007000:	2200      	movs	r2, #0
 8007002:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007004:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800700c:	633b      	str	r3, [r7, #48]	@ 0x30
 800700e:	2300      	movs	r3, #0
 8007010:	637b      	str	r3, [r7, #52]	@ 0x34
 8007012:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007016:	4622      	mov	r2, r4
 8007018:	462b      	mov	r3, r5
 800701a:	f04f 0000 	mov.w	r0, #0
 800701e:	f04f 0100 	mov.w	r1, #0
 8007022:	0159      	lsls	r1, r3, #5
 8007024:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007028:	0150      	lsls	r0, r2, #5
 800702a:	4602      	mov	r2, r0
 800702c:	460b      	mov	r3, r1
 800702e:	4621      	mov	r1, r4
 8007030:	1a51      	subs	r1, r2, r1
 8007032:	6139      	str	r1, [r7, #16]
 8007034:	4629      	mov	r1, r5
 8007036:	eb63 0301 	sbc.w	r3, r3, r1
 800703a:	617b      	str	r3, [r7, #20]
 800703c:	f04f 0200 	mov.w	r2, #0
 8007040:	f04f 0300 	mov.w	r3, #0
 8007044:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007048:	4659      	mov	r1, fp
 800704a:	018b      	lsls	r3, r1, #6
 800704c:	4651      	mov	r1, sl
 800704e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007052:	4651      	mov	r1, sl
 8007054:	018a      	lsls	r2, r1, #6
 8007056:	4651      	mov	r1, sl
 8007058:	ebb2 0801 	subs.w	r8, r2, r1
 800705c:	4659      	mov	r1, fp
 800705e:	eb63 0901 	sbc.w	r9, r3, r1
 8007062:	f04f 0200 	mov.w	r2, #0
 8007066:	f04f 0300 	mov.w	r3, #0
 800706a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800706e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007072:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007076:	4690      	mov	r8, r2
 8007078:	4699      	mov	r9, r3
 800707a:	4623      	mov	r3, r4
 800707c:	eb18 0303 	adds.w	r3, r8, r3
 8007080:	60bb      	str	r3, [r7, #8]
 8007082:	462b      	mov	r3, r5
 8007084:	eb49 0303 	adc.w	r3, r9, r3
 8007088:	60fb      	str	r3, [r7, #12]
 800708a:	f04f 0200 	mov.w	r2, #0
 800708e:	f04f 0300 	mov.w	r3, #0
 8007092:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007096:	4629      	mov	r1, r5
 8007098:	024b      	lsls	r3, r1, #9
 800709a:	4621      	mov	r1, r4
 800709c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80070a0:	4621      	mov	r1, r4
 80070a2:	024a      	lsls	r2, r1, #9
 80070a4:	4610      	mov	r0, r2
 80070a6:	4619      	mov	r1, r3
 80070a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070aa:	2200      	movs	r2, #0
 80070ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80070b4:	f7f9 f8fc 	bl	80002b0 <__aeabi_uldivmod>
 80070b8:	4602      	mov	r2, r0
 80070ba:	460b      	mov	r3, r1
 80070bc:	4613      	mov	r3, r2
 80070be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070c0:	e058      	b.n	8007174 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070c2:	4b38      	ldr	r3, [pc, #224]	@ (80071a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	099b      	lsrs	r3, r3, #6
 80070c8:	2200      	movs	r2, #0
 80070ca:	4618      	mov	r0, r3
 80070cc:	4611      	mov	r1, r2
 80070ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80070d2:	623b      	str	r3, [r7, #32]
 80070d4:	2300      	movs	r3, #0
 80070d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80070d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80070dc:	4642      	mov	r2, r8
 80070de:	464b      	mov	r3, r9
 80070e0:	f04f 0000 	mov.w	r0, #0
 80070e4:	f04f 0100 	mov.w	r1, #0
 80070e8:	0159      	lsls	r1, r3, #5
 80070ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070ee:	0150      	lsls	r0, r2, #5
 80070f0:	4602      	mov	r2, r0
 80070f2:	460b      	mov	r3, r1
 80070f4:	4641      	mov	r1, r8
 80070f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80070fa:	4649      	mov	r1, r9
 80070fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8007100:	f04f 0200 	mov.w	r2, #0
 8007104:	f04f 0300 	mov.w	r3, #0
 8007108:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800710c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007110:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007114:	ebb2 040a 	subs.w	r4, r2, sl
 8007118:	eb63 050b 	sbc.w	r5, r3, fp
 800711c:	f04f 0200 	mov.w	r2, #0
 8007120:	f04f 0300 	mov.w	r3, #0
 8007124:	00eb      	lsls	r3, r5, #3
 8007126:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800712a:	00e2      	lsls	r2, r4, #3
 800712c:	4614      	mov	r4, r2
 800712e:	461d      	mov	r5, r3
 8007130:	4643      	mov	r3, r8
 8007132:	18e3      	adds	r3, r4, r3
 8007134:	603b      	str	r3, [r7, #0]
 8007136:	464b      	mov	r3, r9
 8007138:	eb45 0303 	adc.w	r3, r5, r3
 800713c:	607b      	str	r3, [r7, #4]
 800713e:	f04f 0200 	mov.w	r2, #0
 8007142:	f04f 0300 	mov.w	r3, #0
 8007146:	e9d7 4500 	ldrd	r4, r5, [r7]
 800714a:	4629      	mov	r1, r5
 800714c:	028b      	lsls	r3, r1, #10
 800714e:	4621      	mov	r1, r4
 8007150:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007154:	4621      	mov	r1, r4
 8007156:	028a      	lsls	r2, r1, #10
 8007158:	4610      	mov	r0, r2
 800715a:	4619      	mov	r1, r3
 800715c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800715e:	2200      	movs	r2, #0
 8007160:	61bb      	str	r3, [r7, #24]
 8007162:	61fa      	str	r2, [r7, #28]
 8007164:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007168:	f7f9 f8a2 	bl	80002b0 <__aeabi_uldivmod>
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	4613      	mov	r3, r2
 8007172:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007174:	4b0b      	ldr	r3, [pc, #44]	@ (80071a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	0c1b      	lsrs	r3, r3, #16
 800717a:	f003 0303 	and.w	r3, r3, #3
 800717e:	3301      	adds	r3, #1
 8007180:	005b      	lsls	r3, r3, #1
 8007182:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007184:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007186:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007188:	fbb2 f3f3 	udiv	r3, r2, r3
 800718c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800718e:	e002      	b.n	8007196 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007190:	4b05      	ldr	r3, [pc, #20]	@ (80071a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007192:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007198:	4618      	mov	r0, r3
 800719a:	3750      	adds	r7, #80	@ 0x50
 800719c:	46bd      	mov	sp, r7
 800719e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071a2:	bf00      	nop
 80071a4:	40023800 	.word	0x40023800
 80071a8:	00f42400 	.word	0x00f42400
 80071ac:	007a1200 	.word	0x007a1200

080071b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071b0:	b480      	push	{r7}
 80071b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071b4:	4b03      	ldr	r3, [pc, #12]	@ (80071c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80071b6:	681b      	ldr	r3, [r3, #0]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	20000000 	.word	0x20000000

080071c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80071cc:	f7ff fff0 	bl	80071b0 <HAL_RCC_GetHCLKFreq>
 80071d0:	4602      	mov	r2, r0
 80071d2:	4b05      	ldr	r3, [pc, #20]	@ (80071e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	0a9b      	lsrs	r3, r3, #10
 80071d8:	f003 0307 	and.w	r3, r3, #7
 80071dc:	4903      	ldr	r1, [pc, #12]	@ (80071ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80071de:	5ccb      	ldrb	r3, [r1, r3]
 80071e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	40023800 	.word	0x40023800
 80071ec:	0801e18c 	.word	0x0801e18c

080071f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80071f4:	f7ff ffdc 	bl	80071b0 <HAL_RCC_GetHCLKFreq>
 80071f8:	4602      	mov	r2, r0
 80071fa:	4b05      	ldr	r3, [pc, #20]	@ (8007210 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	0b5b      	lsrs	r3, r3, #13
 8007200:	f003 0307 	and.w	r3, r3, #7
 8007204:	4903      	ldr	r1, [pc, #12]	@ (8007214 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007206:	5ccb      	ldrb	r3, [r1, r3]
 8007208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800720c:	4618      	mov	r0, r3
 800720e:	bd80      	pop	{r7, pc}
 8007210:	40023800 	.word	0x40023800
 8007214:	0801e18c 	.word	0x0801e18c

08007218 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	220f      	movs	r2, #15
 8007226:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007228:	4b12      	ldr	r3, [pc, #72]	@ (8007274 <HAL_RCC_GetClockConfig+0x5c>)
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f003 0203 	and.w	r2, r3, #3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007234:	4b0f      	ldr	r3, [pc, #60]	@ (8007274 <HAL_RCC_GetClockConfig+0x5c>)
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007240:	4b0c      	ldr	r3, [pc, #48]	@ (8007274 <HAL_RCC_GetClockConfig+0x5c>)
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800724c:	4b09      	ldr	r3, [pc, #36]	@ (8007274 <HAL_RCC_GetClockConfig+0x5c>)
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	08db      	lsrs	r3, r3, #3
 8007252:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800725a:	4b07      	ldr	r3, [pc, #28]	@ (8007278 <HAL_RCC_GetClockConfig+0x60>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 020f 	and.w	r2, r3, #15
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	601a      	str	r2, [r3, #0]
}
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	40023800 	.word	0x40023800
 8007278:	40023c00 	.word	0x40023c00

0800727c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b088      	sub	sp, #32
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007284:	2300      	movs	r3, #0
 8007286:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007288:	2300      	movs	r3, #0
 800728a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800728c:	2300      	movs	r3, #0
 800728e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007290:	2300      	movs	r3, #0
 8007292:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007294:	2300      	movs	r3, #0
 8007296:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0301 	and.w	r3, r3, #1
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d012      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80072a4:	4b69      	ldr	r3, [pc, #420]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	4a68      	ldr	r2, [pc, #416]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072aa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80072ae:	6093      	str	r3, [r2, #8]
 80072b0:	4b66      	ldr	r3, [pc, #408]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072b2:	689a      	ldr	r2, [r3, #8]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072b8:	4964      	ldr	r1, [pc, #400]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80072c6:	2301      	movs	r3, #1
 80072c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d017      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072d6:	4b5d      	ldr	r3, [pc, #372]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072dc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072e4:	4959      	ldr	r1, [pc, #356]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80072f4:	d101      	bne.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80072f6:	2301      	movs	r3, #1
 80072f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d101      	bne.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007302:	2301      	movs	r3, #1
 8007304:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d017      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007312:	4b4e      	ldr	r3, [pc, #312]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007318:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007320:	494a      	ldr	r1, [pc, #296]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007322:	4313      	orrs	r3, r2
 8007324:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007330:	d101      	bne.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007332:	2301      	movs	r3, #1
 8007334:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800733e:	2301      	movs	r3, #1
 8007340:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d001      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800734e:	2301      	movs	r3, #1
 8007350:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0320 	and.w	r3, r3, #32
 800735a:	2b00      	cmp	r3, #0
 800735c:	f000 808b 	beq.w	8007476 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007360:	4b3a      	ldr	r3, [pc, #232]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007364:	4a39      	ldr	r2, [pc, #228]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007366:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800736a:	6413      	str	r3, [r2, #64]	@ 0x40
 800736c:	4b37      	ldr	r3, [pc, #220]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800736e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007374:	60bb      	str	r3, [r7, #8]
 8007376:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007378:	4b35      	ldr	r3, [pc, #212]	@ (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a34      	ldr	r2, [pc, #208]	@ (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800737e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007382:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007384:	f7fa fd9a 	bl	8001ebc <HAL_GetTick>
 8007388:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800738a:	e008      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800738c:	f7fa fd96 	bl	8001ebc <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	2b64      	cmp	r3, #100	@ 0x64
 8007398:	d901      	bls.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e357      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800739e:	4b2c      	ldr	r3, [pc, #176]	@ (8007450 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d0f0      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80073aa:	4b28      	ldr	r3, [pc, #160]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d035      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073c2:	693a      	ldr	r2, [r7, #16]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d02e      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073c8:	4b20      	ldr	r3, [pc, #128]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80073d2:	4b1e      	ldr	r3, [pc, #120]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d6:	4a1d      	ldr	r2, [pc, #116]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073dc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80073de:	4b1b      	ldr	r3, [pc, #108]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073e2:	4a1a      	ldr	r2, [pc, #104]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073e8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80073ea:	4a18      	ldr	r2, [pc, #96]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80073f0:	4b16      	ldr	r3, [pc, #88]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d114      	bne.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073fc:	f7fa fd5e 	bl	8001ebc <HAL_GetTick>
 8007400:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007402:	e00a      	b.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007404:	f7fa fd5a 	bl	8001ebc <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007412:	4293      	cmp	r3, r2
 8007414:	d901      	bls.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e319      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800741a:	4b0c      	ldr	r3, [pc, #48]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800741c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0ee      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800742a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800742e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007432:	d111      	bne.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007434:	4b05      	ldr	r3, [pc, #20]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007440:	4b04      	ldr	r3, [pc, #16]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007442:	400b      	ands	r3, r1
 8007444:	4901      	ldr	r1, [pc, #4]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007446:	4313      	orrs	r3, r2
 8007448:	608b      	str	r3, [r1, #8]
 800744a:	e00b      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800744c:	40023800 	.word	0x40023800
 8007450:	40007000 	.word	0x40007000
 8007454:	0ffffcff 	.word	0x0ffffcff
 8007458:	4baa      	ldr	r3, [pc, #680]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	4aa9      	ldr	r2, [pc, #676]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800745e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007462:	6093      	str	r3, [r2, #8]
 8007464:	4ba7      	ldr	r3, [pc, #668]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007466:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800746c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007470:	49a4      	ldr	r1, [pc, #656]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007472:	4313      	orrs	r3, r2
 8007474:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0310 	and.w	r3, r3, #16
 800747e:	2b00      	cmp	r3, #0
 8007480:	d010      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007482:	4ba0      	ldr	r3, [pc, #640]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007484:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007488:	4a9e      	ldr	r2, [pc, #632]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800748a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800748e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8007492:	4b9c      	ldr	r3, [pc, #624]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007494:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800749c:	4999      	ldr	r1, [pc, #612]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00a      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074b0:	4b94      	ldr	r3, [pc, #592]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074b6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074be:	4991      	ldr	r1, [pc, #580]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074c0:	4313      	orrs	r3, r2
 80074c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00a      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074d2:	4b8c      	ldr	r3, [pc, #560]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074e0:	4988      	ldr	r1, [pc, #544]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074e2:	4313      	orrs	r3, r2
 80074e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00a      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80074f4:	4b83      	ldr	r3, [pc, #524]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007502:	4980      	ldr	r1, [pc, #512]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007504:	4313      	orrs	r3, r2
 8007506:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00a      	beq.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007516:	4b7b      	ldr	r3, [pc, #492]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800751c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007524:	4977      	ldr	r1, [pc, #476]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007526:	4313      	orrs	r3, r2
 8007528:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00a      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007538:	4b72      	ldr	r3, [pc, #456]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800753a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800753e:	f023 0203 	bic.w	r2, r3, #3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007546:	496f      	ldr	r1, [pc, #444]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007548:	4313      	orrs	r3, r2
 800754a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00a      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800755a:	4b6a      	ldr	r3, [pc, #424]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800755c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007560:	f023 020c 	bic.w	r2, r3, #12
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007568:	4966      	ldr	r1, [pc, #408]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800756a:	4313      	orrs	r3, r2
 800756c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00a      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800757c:	4b61      	ldr	r3, [pc, #388]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800757e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007582:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800758a:	495e      	ldr	r1, [pc, #376]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800758c:	4313      	orrs	r3, r2
 800758e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800759a:	2b00      	cmp	r3, #0
 800759c:	d00a      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800759e:	4b59      	ldr	r3, [pc, #356]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075a4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075ac:	4955      	ldr	r1, [pc, #340]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00a      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80075c0:	4b50      	ldr	r3, [pc, #320]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ce:	494d      	ldr	r1, [pc, #308]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00a      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80075e2:	4b48      	ldr	r3, [pc, #288]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075e8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075f0:	4944      	ldr	r1, [pc, #272]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00a      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007604:	4b3f      	ldr	r3, [pc, #252]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800760a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007612:	493c      	ldr	r1, [pc, #240]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007614:	4313      	orrs	r3, r2
 8007616:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00a      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007626:	4b37      	ldr	r3, [pc, #220]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800762c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007634:	4933      	ldr	r1, [pc, #204]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007636:	4313      	orrs	r3, r2
 8007638:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00a      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007648:	4b2e      	ldr	r3, [pc, #184]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800764a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800764e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007656:	492b      	ldr	r1, [pc, #172]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007658:	4313      	orrs	r3, r2
 800765a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d011      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800766a:	4b26      	ldr	r3, [pc, #152]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800766c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007670:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007678:	4922      	ldr	r1, [pc, #136]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800767a:	4313      	orrs	r3, r2
 800767c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007684:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007688:	d101      	bne.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800768a:	2301      	movs	r3, #1
 800768c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0308 	and.w	r3, r3, #8
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800769a:	2301      	movs	r3, #1
 800769c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00a      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076aa:	4b16      	ldr	r3, [pc, #88]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076b0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076b8:	4912      	ldr	r1, [pc, #72]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00b      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80076cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076d2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076dc:	4909      	ldr	r1, [pc, #36]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d006      	beq.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f000 80d9 	beq.w	80078aa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80076f8:	4b02      	ldr	r3, [pc, #8]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a01      	ldr	r2, [pc, #4]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007702:	e001      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007704:	40023800 	.word	0x40023800
 8007708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800770a:	f7fa fbd7 	bl	8001ebc <HAL_GetTick>
 800770e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007710:	e008      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007712:	f7fa fbd3 	bl	8001ebc <HAL_GetTick>
 8007716:	4602      	mov	r2, r0
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	2b64      	cmp	r3, #100	@ 0x64
 800771e:	d901      	bls.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007720:	2303      	movs	r3, #3
 8007722:	e194      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007724:	4b6c      	ldr	r3, [pc, #432]	@ (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d1f0      	bne.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 0301 	and.w	r3, r3, #1
 8007738:	2b00      	cmp	r3, #0
 800773a:	d021      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007740:	2b00      	cmp	r3, #0
 8007742:	d11d      	bne.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007744:	4b64      	ldr	r3, [pc, #400]	@ (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007746:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800774a:	0c1b      	lsrs	r3, r3, #16
 800774c:	f003 0303 	and.w	r3, r3, #3
 8007750:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007752:	4b61      	ldr	r3, [pc, #388]	@ (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007754:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007758:	0e1b      	lsrs	r3, r3, #24
 800775a:	f003 030f 	and.w	r3, r3, #15
 800775e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	019a      	lsls	r2, r3, #6
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	041b      	lsls	r3, r3, #16
 800776a:	431a      	orrs	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	061b      	lsls	r3, r3, #24
 8007770:	431a      	orrs	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	071b      	lsls	r3, r3, #28
 8007778:	4957      	ldr	r1, [pc, #348]	@ (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800777a:	4313      	orrs	r3, r2
 800777c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d004      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007790:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007794:	d00a      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d02e      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80077aa:	d129      	bne.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80077ac:	4b4a      	ldr	r3, [pc, #296]	@ (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077b2:	0c1b      	lsrs	r3, r3, #16
 80077b4:	f003 0303 	and.w	r3, r3, #3
 80077b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80077ba:	4b47      	ldr	r3, [pc, #284]	@ (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077c0:	0f1b      	lsrs	r3, r3, #28
 80077c2:	f003 0307 	and.w	r3, r3, #7
 80077c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	019a      	lsls	r2, r3, #6
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	041b      	lsls	r3, r3, #16
 80077d2:	431a      	orrs	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	061b      	lsls	r3, r3, #24
 80077da:	431a      	orrs	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	071b      	lsls	r3, r3, #28
 80077e0:	493d      	ldr	r1, [pc, #244]	@ (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077e2:	4313      	orrs	r3, r2
 80077e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80077e8:	4b3b      	ldr	r3, [pc, #236]	@ (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077ee:	f023 021f 	bic.w	r2, r3, #31
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f6:	3b01      	subs	r3, #1
 80077f8:	4937      	ldr	r1, [pc, #220]	@ (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d01d      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800780c:	4b32      	ldr	r3, [pc, #200]	@ (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800780e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007812:	0e1b      	lsrs	r3, r3, #24
 8007814:	f003 030f 	and.w	r3, r3, #15
 8007818:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800781a:	4b2f      	ldr	r3, [pc, #188]	@ (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800781c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007820:	0f1b      	lsrs	r3, r3, #28
 8007822:	f003 0307 	and.w	r3, r3, #7
 8007826:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	019a      	lsls	r2, r3, #6
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	041b      	lsls	r3, r3, #16
 8007834:	431a      	orrs	r2, r3
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	061b      	lsls	r3, r3, #24
 800783a:	431a      	orrs	r2, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	071b      	lsls	r3, r3, #28
 8007840:	4925      	ldr	r1, [pc, #148]	@ (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007842:	4313      	orrs	r3, r2
 8007844:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d011      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	019a      	lsls	r2, r3, #6
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	041b      	lsls	r3, r3, #16
 8007860:	431a      	orrs	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	061b      	lsls	r3, r3, #24
 8007868:	431a      	orrs	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	071b      	lsls	r3, r3, #28
 8007870:	4919      	ldr	r1, [pc, #100]	@ (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007872:	4313      	orrs	r3, r2
 8007874:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007878:	4b17      	ldr	r3, [pc, #92]	@ (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a16      	ldr	r2, [pc, #88]	@ (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800787e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007882:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007884:	f7fa fb1a 	bl	8001ebc <HAL_GetTick>
 8007888:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800788a:	e008      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800788c:	f7fa fb16 	bl	8001ebc <HAL_GetTick>
 8007890:	4602      	mov	r2, r0
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	2b64      	cmp	r3, #100	@ 0x64
 8007898:	d901      	bls.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	e0d7      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800789e:	4b0e      	ldr	r3, [pc, #56]	@ (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d0f0      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	f040 80cd 	bne.w	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80078b2:	4b09      	ldr	r3, [pc, #36]	@ (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a08      	ldr	r2, [pc, #32]	@ (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078be:	f7fa fafd 	bl	8001ebc <HAL_GetTick>
 80078c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80078c4:	e00a      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80078c6:	f7fa faf9 	bl	8001ebc <HAL_GetTick>
 80078ca:	4602      	mov	r2, r0
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	2b64      	cmp	r3, #100	@ 0x64
 80078d2:	d903      	bls.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e0ba      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80078d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80078dc:	4b5e      	ldr	r3, [pc, #376]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80078e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078e8:	d0ed      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x682>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d009      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007906:	2b00      	cmp	r3, #0
 8007908:	d02e      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800790e:	2b00      	cmp	r3, #0
 8007910:	d12a      	bne.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007912:	4b51      	ldr	r3, [pc, #324]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007918:	0c1b      	lsrs	r3, r3, #16
 800791a:	f003 0303 	and.w	r3, r3, #3
 800791e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007920:	4b4d      	ldr	r3, [pc, #308]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007926:	0f1b      	lsrs	r3, r3, #28
 8007928:	f003 0307 	and.w	r3, r3, #7
 800792c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	019a      	lsls	r2, r3, #6
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	041b      	lsls	r3, r3, #16
 8007938:	431a      	orrs	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	061b      	lsls	r3, r3, #24
 8007940:	431a      	orrs	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	071b      	lsls	r3, r3, #28
 8007946:	4944      	ldr	r1, [pc, #272]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007948:	4313      	orrs	r3, r2
 800794a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800794e:	4b42      	ldr	r3, [pc, #264]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007950:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007954:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800795c:	3b01      	subs	r3, #1
 800795e:	021b      	lsls	r3, r3, #8
 8007960:	493d      	ldr	r1, [pc, #244]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007962:	4313      	orrs	r3, r2
 8007964:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d022      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007978:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800797c:	d11d      	bne.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800797e:	4b36      	ldr	r3, [pc, #216]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007984:	0e1b      	lsrs	r3, r3, #24
 8007986:	f003 030f 	and.w	r3, r3, #15
 800798a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800798c:	4b32      	ldr	r3, [pc, #200]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800798e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007992:	0f1b      	lsrs	r3, r3, #28
 8007994:	f003 0307 	and.w	r3, r3, #7
 8007998:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	019a      	lsls	r2, r3, #6
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	041b      	lsls	r3, r3, #16
 80079a6:	431a      	orrs	r2, r3
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	061b      	lsls	r3, r3, #24
 80079ac:	431a      	orrs	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	071b      	lsls	r3, r3, #28
 80079b2:	4929      	ldr	r1, [pc, #164]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079b4:	4313      	orrs	r3, r2
 80079b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0308 	and.w	r3, r3, #8
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d028      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80079c6:	4b24      	ldr	r3, [pc, #144]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079cc:	0e1b      	lsrs	r3, r3, #24
 80079ce:	f003 030f 	and.w	r3, r3, #15
 80079d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80079d4:	4b20      	ldr	r3, [pc, #128]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079da:	0c1b      	lsrs	r3, r3, #16
 80079dc:	f003 0303 	and.w	r3, r3, #3
 80079e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	019a      	lsls	r2, r3, #6
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	041b      	lsls	r3, r3, #16
 80079ec:	431a      	orrs	r2, r3
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	061b      	lsls	r3, r3, #24
 80079f2:	431a      	orrs	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	071b      	lsls	r3, r3, #28
 80079fa:	4917      	ldr	r1, [pc, #92]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079fc:	4313      	orrs	r3, r2
 80079fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007a02:	4b15      	ldr	r3, [pc, #84]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a10:	4911      	ldr	r1, [pc, #68]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007a18:	4b0f      	ldr	r3, [pc, #60]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a0e      	ldr	r2, [pc, #56]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a24:	f7fa fa4a 	bl	8001ebc <HAL_GetTick>
 8007a28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007a2a:	e008      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007a2c:	f7fa fa46 	bl	8001ebc <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	2b64      	cmp	r3, #100	@ 0x64
 8007a38:	d901      	bls.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e007      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007a3e:	4b06      	ldr	r3, [pc, #24]	@ (8007a58 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a4a:	d1ef      	bne.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3720      	adds	r7, #32
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	40023800 	.word	0x40023800

08007a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e049      	b.n	8007b02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d106      	bne.n	8007a88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f841 	bl	8007b0a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	3304      	adds	r3, #4
 8007a98:	4619      	mov	r1, r3
 8007a9a:	4610      	mov	r0, r2
 8007a9c:	f000 f9e8 	bl	8007e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b083      	sub	sp, #12
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007b12:	bf00      	nop
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
	...

08007b20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d001      	beq.n	8007b38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e054      	b.n	8007be2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	68da      	ldr	r2, [r3, #12]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f042 0201 	orr.w	r2, r2, #1
 8007b4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a26      	ldr	r2, [pc, #152]	@ (8007bf0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d022      	beq.n	8007ba0 <HAL_TIM_Base_Start_IT+0x80>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b62:	d01d      	beq.n	8007ba0 <HAL_TIM_Base_Start_IT+0x80>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a22      	ldr	r2, [pc, #136]	@ (8007bf4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d018      	beq.n	8007ba0 <HAL_TIM_Base_Start_IT+0x80>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a21      	ldr	r2, [pc, #132]	@ (8007bf8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d013      	beq.n	8007ba0 <HAL_TIM_Base_Start_IT+0x80>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a1f      	ldr	r2, [pc, #124]	@ (8007bfc <HAL_TIM_Base_Start_IT+0xdc>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d00e      	beq.n	8007ba0 <HAL_TIM_Base_Start_IT+0x80>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a1e      	ldr	r2, [pc, #120]	@ (8007c00 <HAL_TIM_Base_Start_IT+0xe0>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d009      	beq.n	8007ba0 <HAL_TIM_Base_Start_IT+0x80>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a1c      	ldr	r2, [pc, #112]	@ (8007c04 <HAL_TIM_Base_Start_IT+0xe4>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d004      	beq.n	8007ba0 <HAL_TIM_Base_Start_IT+0x80>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a1b      	ldr	r2, [pc, #108]	@ (8007c08 <HAL_TIM_Base_Start_IT+0xe8>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d115      	bne.n	8007bcc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	689a      	ldr	r2, [r3, #8]
 8007ba6:	4b19      	ldr	r3, [pc, #100]	@ (8007c0c <HAL_TIM_Base_Start_IT+0xec>)
 8007ba8:	4013      	ands	r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2b06      	cmp	r3, #6
 8007bb0:	d015      	beq.n	8007bde <HAL_TIM_Base_Start_IT+0xbe>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bb8:	d011      	beq.n	8007bde <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f042 0201 	orr.w	r2, r2, #1
 8007bc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bca:	e008      	b.n	8007bde <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f042 0201 	orr.w	r2, r2, #1
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	e000      	b.n	8007be0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	40010000 	.word	0x40010000
 8007bf4:	40000400 	.word	0x40000400
 8007bf8:	40000800 	.word	0x40000800
 8007bfc:	40000c00 	.word	0x40000c00
 8007c00:	40010400 	.word	0x40010400
 8007c04:	40014000 	.word	0x40014000
 8007c08:	40001800 	.word	0x40001800
 8007c0c:	00010007 	.word	0x00010007

08007c10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d020      	beq.n	8007c74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f003 0302 	and.w	r3, r3, #2
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d01b      	beq.n	8007c74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f06f 0202 	mvn.w	r2, #2
 8007c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	f003 0303 	and.w	r3, r3, #3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f8e9 	bl	8007e32 <HAL_TIM_IC_CaptureCallback>
 8007c60:	e005      	b.n	8007c6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f8db 	bl	8007e1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f8ec 	bl	8007e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	f003 0304 	and.w	r3, r3, #4
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d020      	beq.n	8007cc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f003 0304 	and.w	r3, r3, #4
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d01b      	beq.n	8007cc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f06f 0204 	mvn.w	r2, #4
 8007c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2202      	movs	r2, #2
 8007c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	699b      	ldr	r3, [r3, #24]
 8007c9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d003      	beq.n	8007cae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f8c3 	bl	8007e32 <HAL_TIM_IC_CaptureCallback>
 8007cac:	e005      	b.n	8007cba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f8b5 	bl	8007e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 f8c6 	bl	8007e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	f003 0308 	and.w	r3, r3, #8
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d020      	beq.n	8007d0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f003 0308 	and.w	r3, r3, #8
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d01b      	beq.n	8007d0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f06f 0208 	mvn.w	r2, #8
 8007cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2204      	movs	r2, #4
 8007ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	69db      	ldr	r3, [r3, #28]
 8007cea:	f003 0303 	and.w	r3, r3, #3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d003      	beq.n	8007cfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f89d 	bl	8007e32 <HAL_TIM_IC_CaptureCallback>
 8007cf8:	e005      	b.n	8007d06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f88f 	bl	8007e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f8a0 	bl	8007e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	f003 0310 	and.w	r3, r3, #16
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d020      	beq.n	8007d58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f003 0310 	and.w	r3, r3, #16
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d01b      	beq.n	8007d58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f06f 0210 	mvn.w	r2, #16
 8007d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2208      	movs	r2, #8
 8007d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	69db      	ldr	r3, [r3, #28]
 8007d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f877 	bl	8007e32 <HAL_TIM_IC_CaptureCallback>
 8007d44:	e005      	b.n	8007d52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f869 	bl	8007e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f87a 	bl	8007e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00c      	beq.n	8007d7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d007      	beq.n	8007d7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f06f 0201 	mvn.w	r2, #1
 8007d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7f9 f96e 	bl	8001058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d104      	bne.n	8007d90 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00c      	beq.n	8007daa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d007      	beq.n	8007daa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f913 	bl	8007fd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00c      	beq.n	8007dce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d007      	beq.n	8007dce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f90b 	bl	8007fe4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00c      	beq.n	8007df2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d007      	beq.n	8007df2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f834 	bl	8007e5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	f003 0320 	and.w	r3, r3, #32
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00c      	beq.n	8007e16 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f003 0320 	and.w	r3, r3, #32
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d007      	beq.n	8007e16 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f06f 0220 	mvn.w	r2, #32
 8007e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f8d3 	bl	8007fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e16:	bf00      	nop
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b083      	sub	sp, #12
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e26:	bf00      	nop
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b083      	sub	sp, #12
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e3a:	bf00      	nop
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e46:	b480      	push	{r7}
 8007e48:	b083      	sub	sp, #12
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e4e:	bf00      	nop
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e5a:	b480      	push	{r7}
 8007e5c:	b083      	sub	sp, #12
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e62:	bf00      	nop
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
	...

08007e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a43      	ldr	r2, [pc, #268]	@ (8007f90 <TIM_Base_SetConfig+0x120>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d013      	beq.n	8007eb0 <TIM_Base_SetConfig+0x40>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e8e:	d00f      	beq.n	8007eb0 <TIM_Base_SetConfig+0x40>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a40      	ldr	r2, [pc, #256]	@ (8007f94 <TIM_Base_SetConfig+0x124>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d00b      	beq.n	8007eb0 <TIM_Base_SetConfig+0x40>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a3f      	ldr	r2, [pc, #252]	@ (8007f98 <TIM_Base_SetConfig+0x128>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d007      	beq.n	8007eb0 <TIM_Base_SetConfig+0x40>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a3e      	ldr	r2, [pc, #248]	@ (8007f9c <TIM_Base_SetConfig+0x12c>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d003      	beq.n	8007eb0 <TIM_Base_SetConfig+0x40>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a3d      	ldr	r2, [pc, #244]	@ (8007fa0 <TIM_Base_SetConfig+0x130>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d108      	bne.n	8007ec2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a32      	ldr	r2, [pc, #200]	@ (8007f90 <TIM_Base_SetConfig+0x120>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d02b      	beq.n	8007f22 <TIM_Base_SetConfig+0xb2>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ed0:	d027      	beq.n	8007f22 <TIM_Base_SetConfig+0xb2>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a2f      	ldr	r2, [pc, #188]	@ (8007f94 <TIM_Base_SetConfig+0x124>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d023      	beq.n	8007f22 <TIM_Base_SetConfig+0xb2>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a2e      	ldr	r2, [pc, #184]	@ (8007f98 <TIM_Base_SetConfig+0x128>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d01f      	beq.n	8007f22 <TIM_Base_SetConfig+0xb2>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a2d      	ldr	r2, [pc, #180]	@ (8007f9c <TIM_Base_SetConfig+0x12c>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d01b      	beq.n	8007f22 <TIM_Base_SetConfig+0xb2>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a2c      	ldr	r2, [pc, #176]	@ (8007fa0 <TIM_Base_SetConfig+0x130>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d017      	beq.n	8007f22 <TIM_Base_SetConfig+0xb2>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a2b      	ldr	r2, [pc, #172]	@ (8007fa4 <TIM_Base_SetConfig+0x134>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d013      	beq.n	8007f22 <TIM_Base_SetConfig+0xb2>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a2a      	ldr	r2, [pc, #168]	@ (8007fa8 <TIM_Base_SetConfig+0x138>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d00f      	beq.n	8007f22 <TIM_Base_SetConfig+0xb2>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a29      	ldr	r2, [pc, #164]	@ (8007fac <TIM_Base_SetConfig+0x13c>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d00b      	beq.n	8007f22 <TIM_Base_SetConfig+0xb2>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4a28      	ldr	r2, [pc, #160]	@ (8007fb0 <TIM_Base_SetConfig+0x140>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d007      	beq.n	8007f22 <TIM_Base_SetConfig+0xb2>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a27      	ldr	r2, [pc, #156]	@ (8007fb4 <TIM_Base_SetConfig+0x144>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d003      	beq.n	8007f22 <TIM_Base_SetConfig+0xb2>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4a26      	ldr	r2, [pc, #152]	@ (8007fb8 <TIM_Base_SetConfig+0x148>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d108      	bne.n	8007f34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	689a      	ldr	r2, [r3, #8]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a0e      	ldr	r2, [pc, #56]	@ (8007f90 <TIM_Base_SetConfig+0x120>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d003      	beq.n	8007f62 <TIM_Base_SetConfig+0xf2>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a10      	ldr	r2, [pc, #64]	@ (8007fa0 <TIM_Base_SetConfig+0x130>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d103      	bne.n	8007f6a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	691a      	ldr	r2, [r3, #16]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f043 0204 	orr.w	r2, r3, #4
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	601a      	str	r2, [r3, #0]
}
 8007f82:	bf00      	nop
 8007f84:	3714      	adds	r7, #20
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	40010000 	.word	0x40010000
 8007f94:	40000400 	.word	0x40000400
 8007f98:	40000800 	.word	0x40000800
 8007f9c:	40000c00 	.word	0x40000c00
 8007fa0:	40010400 	.word	0x40010400
 8007fa4:	40014000 	.word	0x40014000
 8007fa8:	40014400 	.word	0x40014400
 8007fac:	40014800 	.word	0x40014800
 8007fb0:	40001800 	.word	0x40001800
 8007fb4:	40001c00 	.word	0x40001c00
 8007fb8:	40002000 	.word	0x40002000

08007fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d101      	bne.n	800800a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e040      	b.n	800808c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800800e:	2b00      	cmp	r3, #0
 8008010:	d106      	bne.n	8008020 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f7f9 f9a8 	bl	8001370 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2224      	movs	r2, #36	@ 0x24
 8008024:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f022 0201 	bic.w	r2, r2, #1
 8008034:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800803a:	2b00      	cmp	r3, #0
 800803c:	d002      	beq.n	8008044 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 ff7e 	bl	8008f40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fd17 	bl	8008a78 <UART_SetConfig>
 800804a:	4603      	mov	r3, r0
 800804c:	2b01      	cmp	r3, #1
 800804e:	d101      	bne.n	8008054 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e01b      	b.n	800808c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685a      	ldr	r2, [r3, #4]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008062:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689a      	ldr	r2, [r3, #8]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008072:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f042 0201 	orr.w	r2, r2, #1
 8008082:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fffd 	bl	8009084 <UART_CheckIdleState>
 800808a:	4603      	mov	r3, r0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b08a      	sub	sp, #40	@ 0x28
 8008098:	af02      	add	r7, sp, #8
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	603b      	str	r3, [r7, #0]
 80080a0:	4613      	mov	r3, r2
 80080a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80080a8:	2b20      	cmp	r3, #32
 80080aa:	d177      	bne.n	800819c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d002      	beq.n	80080b8 <HAL_UART_Transmit+0x24>
 80080b2:	88fb      	ldrh	r3, [r7, #6]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d101      	bne.n	80080bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e070      	b.n	800819e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2221      	movs	r2, #33	@ 0x21
 80080c8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80080ca:	f7f9 fef7 	bl	8001ebc <HAL_GetTick>
 80080ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	88fa      	ldrh	r2, [r7, #6]
 80080d4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	88fa      	ldrh	r2, [r7, #6]
 80080dc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080e8:	d108      	bne.n	80080fc <HAL_UART_Transmit+0x68>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d104      	bne.n	80080fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80080f2:	2300      	movs	r3, #0
 80080f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	61bb      	str	r3, [r7, #24]
 80080fa:	e003      	b.n	8008104 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008100:	2300      	movs	r3, #0
 8008102:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008104:	e02f      	b.n	8008166 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	2200      	movs	r2, #0
 800810e:	2180      	movs	r1, #128	@ 0x80
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f001 f80e 	bl	8009132 <UART_WaitOnFlagUntilTimeout>
 8008116:	4603      	mov	r3, r0
 8008118:	2b00      	cmp	r3, #0
 800811a:	d004      	beq.n	8008126 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2220      	movs	r2, #32
 8008120:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e03b      	b.n	800819e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10b      	bne.n	8008144 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	881b      	ldrh	r3, [r3, #0]
 8008130:	461a      	mov	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800813a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	3302      	adds	r3, #2
 8008140:	61bb      	str	r3, [r7, #24]
 8008142:	e007      	b.n	8008154 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	781a      	ldrb	r2, [r3, #0]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	3301      	adds	r3, #1
 8008152:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800815a:	b29b      	uxth	r3, r3
 800815c:	3b01      	subs	r3, #1
 800815e:	b29a      	uxth	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800816c:	b29b      	uxth	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1c9      	bne.n	8008106 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	2200      	movs	r2, #0
 800817a:	2140      	movs	r1, #64	@ 0x40
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f000 ffd8 	bl	8009132 <UART_WaitOnFlagUntilTimeout>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d004      	beq.n	8008192 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2220      	movs	r2, #32
 800818c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e005      	b.n	800819e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2220      	movs	r2, #32
 8008196:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008198:	2300      	movs	r3, #0
 800819a:	e000      	b.n	800819e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800819c:	2302      	movs	r3, #2
  }
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3720      	adds	r7, #32
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
	...

080081a8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08a      	sub	sp, #40	@ 0x28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	4613      	mov	r3, r2
 80081b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081ba:	2b20      	cmp	r3, #32
 80081bc:	d165      	bne.n	800828a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <HAL_UART_Transmit_DMA+0x22>
 80081c4:	88fb      	ldrh	r3, [r7, #6]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e05e      	b.n	800828c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	88fa      	ldrh	r2, [r7, #6]
 80081d8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	88fa      	ldrh	r2, [r7, #6]
 80081e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2221      	movs	r2, #33	@ 0x21
 80081f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d027      	beq.n	800824a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081fe:	4a25      	ldr	r2, [pc, #148]	@ (8008294 <HAL_UART_Transmit_DMA+0xec>)
 8008200:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008206:	4a24      	ldr	r2, [pc, #144]	@ (8008298 <HAL_UART_Transmit_DMA+0xf0>)
 8008208:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800820e:	4a23      	ldr	r2, [pc, #140]	@ (800829c <HAL_UART_Transmit_DMA+0xf4>)
 8008210:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008216:	2200      	movs	r2, #0
 8008218:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008222:	4619      	mov	r1, r3
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	3328      	adds	r3, #40	@ 0x28
 800822a:	461a      	mov	r2, r3
 800822c:	88fb      	ldrh	r3, [r7, #6]
 800822e:	f7fa fa0f 	bl	8002650 <HAL_DMA_Start_IT>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d008      	beq.n	800824a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2210      	movs	r2, #16
 800823c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2220      	movs	r2, #32
 8008244:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e020      	b.n	800828c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2240      	movs	r2, #64	@ 0x40
 8008250:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3308      	adds	r3, #8
 8008258:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	e853 3f00 	ldrex	r3, [r3]
 8008260:	613b      	str	r3, [r7, #16]
   return(result);
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008268:	627b      	str	r3, [r7, #36]	@ 0x24
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	3308      	adds	r3, #8
 8008270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008272:	623a      	str	r2, [r7, #32]
 8008274:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008276:	69f9      	ldr	r1, [r7, #28]
 8008278:	6a3a      	ldr	r2, [r7, #32]
 800827a:	e841 2300 	strex	r3, r2, [r1]
 800827e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1e5      	bne.n	8008252 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	e000      	b.n	800828c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800828a:	2302      	movs	r3, #2
  }
}
 800828c:	4618      	mov	r0, r3
 800828e:	3728      	adds	r7, #40	@ 0x28
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	08009461 	.word	0x08009461
 8008298:	080094f7 	.word	0x080094f7
 800829c:	080096e3 	.word	0x080096e3

080082a0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b08a      	sub	sp, #40	@ 0x28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	4613      	mov	r3, r2
 80082ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082b4:	2b20      	cmp	r3, #32
 80082b6:	d132      	bne.n	800831e <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d002      	beq.n	80082c4 <HAL_UART_Receive_DMA+0x24>
 80082be:	88fb      	ldrh	r3, [r7, #6]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e02b      	b.n	8008320 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d018      	beq.n	800830e <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	e853 3f00 	ldrex	r3, [r3]
 80082e8:	613b      	str	r3, [r7, #16]
   return(result);
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80082f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	461a      	mov	r2, r3
 80082f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fa:	623b      	str	r3, [r7, #32]
 80082fc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fe:	69f9      	ldr	r1, [r7, #28]
 8008300:	6a3a      	ldr	r2, [r7, #32]
 8008302:	e841 2300 	strex	r3, r2, [r1]
 8008306:	61bb      	str	r3, [r7, #24]
   return(result);
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1e6      	bne.n	80082dc <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800830e:	88fb      	ldrh	r3, [r7, #6]
 8008310:	461a      	mov	r2, r3
 8008312:	68b9      	ldr	r1, [r7, #8]
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f000 ff79 	bl	800920c <UART_Start_Receive_DMA>
 800831a:	4603      	mov	r3, r0
 800831c:	e000      	b.n	8008320 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800831e:	2302      	movs	r3, #2
  }
}
 8008320:	4618      	mov	r0, r3
 8008322:	3728      	adds	r7, #40	@ 0x28
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b090      	sub	sp, #64	@ 0x40
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008334:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800833c:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008348:	2b80      	cmp	r3, #128	@ 0x80
 800834a:	d139      	bne.n	80083c0 <HAL_UART_DMAStop+0x98>
 800834c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800834e:	2b21      	cmp	r3, #33	@ 0x21
 8008350:	d136      	bne.n	80083c0 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	3308      	adds	r3, #8
 8008358:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	e853 3f00 	ldrex	r3, [r3]
 8008360:	61fb      	str	r3, [r7, #28]
   return(result);
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008368:	637b      	str	r3, [r7, #52]	@ 0x34
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3308      	adds	r3, #8
 8008370:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008372:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008374:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008376:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008378:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800837a:	e841 2300 	strex	r3, r2, [r1]
 800837e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1e5      	bne.n	8008352 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800838a:	2b00      	cmp	r3, #0
 800838c:	d015      	beq.n	80083ba <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008392:	4618      	mov	r0, r3
 8008394:	f7fa f9bc 	bl	8002710 <HAL_DMA_Abort>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00d      	beq.n	80083ba <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fa fbde 	bl	8002b64 <HAL_DMA_GetError>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b20      	cmp	r3, #32
 80083ac:	d105      	bne.n	80083ba <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2210      	movs	r2, #16
 80083b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e044      	b.n	8008444 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 ffc6 	bl	800934c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083ca:	2b40      	cmp	r3, #64	@ 0x40
 80083cc:	d139      	bne.n	8008442 <HAL_UART_DMAStop+0x11a>
 80083ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d0:	2b22      	cmp	r3, #34	@ 0x22
 80083d2:	d136      	bne.n	8008442 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3308      	adds	r3, #8
 80083da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	e853 3f00 	ldrex	r3, [r3]
 80083e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	3308      	adds	r3, #8
 80083f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083f4:	61ba      	str	r2, [r7, #24]
 80083f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f8:	6979      	ldr	r1, [r7, #20]
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	e841 2300 	strex	r3, r2, [r1]
 8008400:	613b      	str	r3, [r7, #16]
   return(result);
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1e5      	bne.n	80083d4 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800840c:	2b00      	cmp	r3, #0
 800840e:	d015      	beq.n	800843c <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008414:	4618      	mov	r0, r3
 8008416:	f7fa f97b 	bl	8002710 <HAL_DMA_Abort>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00d      	beq.n	800843c <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008424:	4618      	mov	r0, r3
 8008426:	f7fa fb9d 	bl	8002b64 <HAL_DMA_GetError>
 800842a:	4603      	mov	r3, r0
 800842c:	2b20      	cmp	r3, #32
 800842e:	d105      	bne.n	800843c <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2210      	movs	r2, #16
 8008434:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	e003      	b.n	8008444 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 ffab 	bl	8009398 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3740      	adds	r7, #64	@ 0x40
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b0ba      	sub	sp, #232	@ 0xe8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	69db      	ldr	r3, [r3, #28]
 800845a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008472:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008476:	f640 030f 	movw	r3, #2063	@ 0x80f
 800847a:	4013      	ands	r3, r2
 800847c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008480:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008484:	2b00      	cmp	r3, #0
 8008486:	d115      	bne.n	80084b4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800848c:	f003 0320 	and.w	r3, r3, #32
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00f      	beq.n	80084b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008498:	f003 0320 	and.w	r3, r3, #32
 800849c:	2b00      	cmp	r3, #0
 800849e:	d009      	beq.n	80084b4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 82b1 	beq.w	8008a0c <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	4798      	blx	r3
      }
      return;
 80084b2:	e2ab      	b.n	8008a0c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80084b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f000 8117 	beq.w	80086ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80084be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80084c2:	f003 0301 	and.w	r3, r3, #1
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d106      	bne.n	80084d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80084ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80084ce:	4b85      	ldr	r3, [pc, #532]	@ (80086e4 <HAL_UART_IRQHandler+0x298>)
 80084d0:	4013      	ands	r3, r2
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f000 810a 	beq.w	80086ec <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084dc:	f003 0301 	and.w	r3, r3, #1
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d011      	beq.n	8008508 <HAL_UART_IRQHandler+0xbc>
 80084e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00b      	beq.n	8008508 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2201      	movs	r2, #1
 80084f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084fe:	f043 0201 	orr.w	r2, r3, #1
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800850c:	f003 0302 	and.w	r3, r3, #2
 8008510:	2b00      	cmp	r3, #0
 8008512:	d011      	beq.n	8008538 <HAL_UART_IRQHandler+0xec>
 8008514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00b      	beq.n	8008538 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2202      	movs	r2, #2
 8008526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800852e:	f043 0204 	orr.w	r2, r3, #4
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800853c:	f003 0304 	and.w	r3, r3, #4
 8008540:	2b00      	cmp	r3, #0
 8008542:	d011      	beq.n	8008568 <HAL_UART_IRQHandler+0x11c>
 8008544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008548:	f003 0301 	and.w	r3, r3, #1
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00b      	beq.n	8008568 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2204      	movs	r2, #4
 8008556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800855e:	f043 0202 	orr.w	r2, r3, #2
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800856c:	f003 0308 	and.w	r3, r3, #8
 8008570:	2b00      	cmp	r3, #0
 8008572:	d017      	beq.n	80085a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008578:	f003 0320 	and.w	r3, r3, #32
 800857c:	2b00      	cmp	r3, #0
 800857e:	d105      	bne.n	800858c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008584:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00b      	beq.n	80085a4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2208      	movs	r2, #8
 8008592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800859a:	f043 0208 	orr.w	r2, r3, #8
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d012      	beq.n	80085d6 <HAL_UART_IRQHandler+0x18a>
 80085b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00c      	beq.n	80085d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80085c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085cc:	f043 0220 	orr.w	r2, r3, #32
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 8217 	beq.w	8008a10 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80085e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085e6:	f003 0320 	and.w	r3, r3, #32
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00d      	beq.n	800860a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80085ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085f2:	f003 0320 	and.w	r3, r3, #32
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d007      	beq.n	800860a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d003      	beq.n	800860a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008610:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800861e:	2b40      	cmp	r3, #64	@ 0x40
 8008620:	d005      	beq.n	800862e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008626:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800862a:	2b00      	cmp	r3, #0
 800862c:	d04f      	beq.n	80086ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 feb2 	bl	8009398 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800863e:	2b40      	cmp	r3, #64	@ 0x40
 8008640:	d141      	bne.n	80086c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	3308      	adds	r3, #8
 8008648:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008650:	e853 3f00 	ldrex	r3, [r3]
 8008654:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008658:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800865c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008660:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	3308      	adds	r3, #8
 800866a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800866e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008672:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008676:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800867a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800867e:	e841 2300 	strex	r3, r2, [r1]
 8008682:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008686:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1d9      	bne.n	8008642 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008692:	2b00      	cmp	r3, #0
 8008694:	d013      	beq.n	80086be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800869a:	4a13      	ldr	r2, [pc, #76]	@ (80086e8 <HAL_UART_IRQHandler+0x29c>)
 800869c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fa f8a4 	bl	80027f0 <HAL_DMA_Abort_IT>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d017      	beq.n	80086de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80086b8:	4610      	mov	r0, r2
 80086ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086bc:	e00f      	b.n	80086de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f9c4 	bl	8008a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c4:	e00b      	b.n	80086de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f9c0 	bl	8008a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086cc:	e007      	b.n	80086de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f9bc 	bl	8008a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80086dc:	e198      	b.n	8008a10 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086de:	bf00      	nop
    return;
 80086e0:	e196      	b.n	8008a10 <HAL_UART_IRQHandler+0x5c4>
 80086e2:	bf00      	nop
 80086e4:	04000120 	.word	0x04000120
 80086e8:	08009761 	.word	0x08009761

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	f040 8166 	bne.w	80089c2 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80086f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086fa:	f003 0310 	and.w	r3, r3, #16
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f000 815f 	beq.w	80089c2 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008708:	f003 0310 	and.w	r3, r3, #16
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 8158 	beq.w	80089c2 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2210      	movs	r2, #16
 8008718:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008724:	2b40      	cmp	r3, #64	@ 0x40
 8008726:	f040 80d0 	bne.w	80088ca <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008736:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800873a:	2b00      	cmp	r3, #0
 800873c:	f000 80ab 	beq.w	8008896 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800874a:	429a      	cmp	r2, r3
 800874c:	f080 80a3 	bcs.w	8008896 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008756:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800875e:	69db      	ldr	r3, [r3, #28]
 8008760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008764:	f000 8086 	beq.w	8008874 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008770:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008774:	e853 3f00 	ldrex	r3, [r3]
 8008778:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800877c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008784:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	461a      	mov	r2, r3
 800878e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008792:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008796:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800879e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80087a2:	e841 2300 	strex	r3, r2, [r1]
 80087a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80087aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1da      	bne.n	8008768 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	3308      	adds	r3, #8
 80087b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80087bc:	e853 3f00 	ldrex	r3, [r3]
 80087c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80087c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087c4:	f023 0301 	bic.w	r3, r3, #1
 80087c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3308      	adds	r3, #8
 80087d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80087d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80087da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80087de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80087e2:	e841 2300 	strex	r3, r2, [r1]
 80087e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80087e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1e1      	bne.n	80087b2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	3308      	adds	r3, #8
 80087f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087f8:	e853 3f00 	ldrex	r3, [r3]
 80087fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80087fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008800:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008804:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3308      	adds	r3, #8
 800880e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008812:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008814:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008816:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008818:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800881a:	e841 2300 	strex	r3, r2, [r1]
 800881e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008820:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1e3      	bne.n	80087ee <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2220      	movs	r2, #32
 800882a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800883c:	e853 3f00 	ldrex	r3, [r3]
 8008840:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008844:	f023 0310 	bic.w	r3, r3, #16
 8008848:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	461a      	mov	r2, r3
 8008852:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008856:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008858:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800885c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800885e:	e841 2300 	strex	r3, r2, [r1]
 8008862:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008864:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1e4      	bne.n	8008834 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800886e:	4618      	mov	r0, r3
 8008870:	f7f9 ff4e 	bl	8002710 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2202      	movs	r2, #2
 8008878:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008886:	b29b      	uxth	r3, r3
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	b29b      	uxth	r3, r3
 800888c:	4619      	mov	r1, r3
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f8e6 	bl	8008a60 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008894:	e0be      	b.n	8008a14 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800889c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80088a0:	429a      	cmp	r2, r3
 80088a2:	f040 80b7 	bne.w	8008a14 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088aa:	69db      	ldr	r3, [r3, #28]
 80088ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088b0:	f040 80b0 	bne.w	8008a14 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2202      	movs	r2, #2
 80088b8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80088c0:	4619      	mov	r1, r3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f8cc 	bl	8008a60 <HAL_UARTEx_RxEventCallback>
      return;
 80088c8:	e0a4      	b.n	8008a14 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	1ad3      	subs	r3, r2, r3
 80088da:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f000 8096 	beq.w	8008a18 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 80088ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f000 8091 	beq.w	8008a18 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088fe:	e853 3f00 	ldrex	r3, [r3]
 8008902:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008906:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800890a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008918:	647b      	str	r3, [r7, #68]	@ 0x44
 800891a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800891e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008920:	e841 2300 	strex	r3, r2, [r1]
 8008924:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1e4      	bne.n	80088f6 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3308      	adds	r3, #8
 8008932:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008936:	e853 3f00 	ldrex	r3, [r3]
 800893a:	623b      	str	r3, [r7, #32]
   return(result);
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	f023 0301 	bic.w	r3, r3, #1
 8008942:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	3308      	adds	r3, #8
 800894c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008950:	633a      	str	r2, [r7, #48]	@ 0x30
 8008952:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008954:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008958:	e841 2300 	strex	r3, r2, [r1]
 800895c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800895e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1e3      	bne.n	800892c <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2220      	movs	r2, #32
 8008968:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	e853 3f00 	ldrex	r3, [r3]
 8008984:	60fb      	str	r3, [r7, #12]
   return(result);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f023 0310 	bic.w	r3, r3, #16
 800898c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	461a      	mov	r2, r3
 8008996:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800899a:	61fb      	str	r3, [r7, #28]
 800899c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899e:	69b9      	ldr	r1, [r7, #24]
 80089a0:	69fa      	ldr	r2, [r7, #28]
 80089a2:	e841 2300 	strex	r3, r2, [r1]
 80089a6:	617b      	str	r3, [r7, #20]
   return(result);
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1e4      	bne.n	8008978 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2202      	movs	r2, #2
 80089b2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80089b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80089b8:	4619      	mov	r1, r3
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f850 	bl	8008a60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089c0:	e02a      	b.n	8008a18 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80089c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00e      	beq.n	80089ec <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80089ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d008      	beq.n	80089ec <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d01c      	beq.n	8008a1c <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	4798      	blx	r3
    }
    return;
 80089ea:	e017      	b.n	8008a1c <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80089ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d012      	beq.n	8008a1e <HAL_UART_IRQHandler+0x5d2>
 80089f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00c      	beq.n	8008a1e <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 febd 	bl	8009784 <UART_EndTransmit_IT>
    return;
 8008a0a:	e008      	b.n	8008a1e <HAL_UART_IRQHandler+0x5d2>
      return;
 8008a0c:	bf00      	nop
 8008a0e:	e006      	b.n	8008a1e <HAL_UART_IRQHandler+0x5d2>
    return;
 8008a10:	bf00      	nop
 8008a12:	e004      	b.n	8008a1e <HAL_UART_IRQHandler+0x5d2>
      return;
 8008a14:	bf00      	nop
 8008a16:	e002      	b.n	8008a1e <HAL_UART_IRQHandler+0x5d2>
      return;
 8008a18:	bf00      	nop
 8008a1a:	e000      	b.n	8008a1e <HAL_UART_IRQHandler+0x5d2>
    return;
 8008a1c:	bf00      	nop
  }

}
 8008a1e:	37e8      	adds	r7, #232	@ 0xe8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a54:	bf00      	nop
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a6c:	bf00      	nop
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b088      	sub	sp, #32
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a80:	2300      	movs	r3, #0
 8008a82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	689a      	ldr	r2, [r3, #8]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	431a      	orrs	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	695b      	ldr	r3, [r3, #20]
 8008a92:	431a      	orrs	r2, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	69db      	ldr	r3, [r3, #28]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	4ba6      	ldr	r3, [pc, #664]	@ (8008d3c <UART_SetConfig+0x2c4>)
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	6812      	ldr	r2, [r2, #0]
 8008aaa:	6979      	ldr	r1, [r7, #20]
 8008aac:	430b      	orrs	r3, r1
 8008aae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	68da      	ldr	r2, [r3, #12]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6a1b      	ldr	r3, [r3, #32]
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a94      	ldr	r2, [pc, #592]	@ (8008d40 <UART_SetConfig+0x2c8>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d120      	bne.n	8008b36 <UART_SetConfig+0xbe>
 8008af4:	4b93      	ldr	r3, [pc, #588]	@ (8008d44 <UART_SetConfig+0x2cc>)
 8008af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008afa:	f003 0303 	and.w	r3, r3, #3
 8008afe:	2b03      	cmp	r3, #3
 8008b00:	d816      	bhi.n	8008b30 <UART_SetConfig+0xb8>
 8008b02:	a201      	add	r2, pc, #4	@ (adr r2, 8008b08 <UART_SetConfig+0x90>)
 8008b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b08:	08008b19 	.word	0x08008b19
 8008b0c:	08008b25 	.word	0x08008b25
 8008b10:	08008b1f 	.word	0x08008b1f
 8008b14:	08008b2b 	.word	0x08008b2b
 8008b18:	2301      	movs	r3, #1
 8008b1a:	77fb      	strb	r3, [r7, #31]
 8008b1c:	e150      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008b1e:	2302      	movs	r3, #2
 8008b20:	77fb      	strb	r3, [r7, #31]
 8008b22:	e14d      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008b24:	2304      	movs	r3, #4
 8008b26:	77fb      	strb	r3, [r7, #31]
 8008b28:	e14a      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008b2a:	2308      	movs	r3, #8
 8008b2c:	77fb      	strb	r3, [r7, #31]
 8008b2e:	e147      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008b30:	2310      	movs	r3, #16
 8008b32:	77fb      	strb	r3, [r7, #31]
 8008b34:	e144      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a83      	ldr	r2, [pc, #524]	@ (8008d48 <UART_SetConfig+0x2d0>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d132      	bne.n	8008ba6 <UART_SetConfig+0x12e>
 8008b40:	4b80      	ldr	r3, [pc, #512]	@ (8008d44 <UART_SetConfig+0x2cc>)
 8008b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b46:	f003 030c 	and.w	r3, r3, #12
 8008b4a:	2b0c      	cmp	r3, #12
 8008b4c:	d828      	bhi.n	8008ba0 <UART_SetConfig+0x128>
 8008b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b54 <UART_SetConfig+0xdc>)
 8008b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b54:	08008b89 	.word	0x08008b89
 8008b58:	08008ba1 	.word	0x08008ba1
 8008b5c:	08008ba1 	.word	0x08008ba1
 8008b60:	08008ba1 	.word	0x08008ba1
 8008b64:	08008b95 	.word	0x08008b95
 8008b68:	08008ba1 	.word	0x08008ba1
 8008b6c:	08008ba1 	.word	0x08008ba1
 8008b70:	08008ba1 	.word	0x08008ba1
 8008b74:	08008b8f 	.word	0x08008b8f
 8008b78:	08008ba1 	.word	0x08008ba1
 8008b7c:	08008ba1 	.word	0x08008ba1
 8008b80:	08008ba1 	.word	0x08008ba1
 8008b84:	08008b9b 	.word	0x08008b9b
 8008b88:	2300      	movs	r3, #0
 8008b8a:	77fb      	strb	r3, [r7, #31]
 8008b8c:	e118      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008b8e:	2302      	movs	r3, #2
 8008b90:	77fb      	strb	r3, [r7, #31]
 8008b92:	e115      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008b94:	2304      	movs	r3, #4
 8008b96:	77fb      	strb	r3, [r7, #31]
 8008b98:	e112      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008b9a:	2308      	movs	r3, #8
 8008b9c:	77fb      	strb	r3, [r7, #31]
 8008b9e:	e10f      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008ba0:	2310      	movs	r3, #16
 8008ba2:	77fb      	strb	r3, [r7, #31]
 8008ba4:	e10c      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a68      	ldr	r2, [pc, #416]	@ (8008d4c <UART_SetConfig+0x2d4>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d120      	bne.n	8008bf2 <UART_SetConfig+0x17a>
 8008bb0:	4b64      	ldr	r3, [pc, #400]	@ (8008d44 <UART_SetConfig+0x2cc>)
 8008bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bb6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008bba:	2b30      	cmp	r3, #48	@ 0x30
 8008bbc:	d013      	beq.n	8008be6 <UART_SetConfig+0x16e>
 8008bbe:	2b30      	cmp	r3, #48	@ 0x30
 8008bc0:	d814      	bhi.n	8008bec <UART_SetConfig+0x174>
 8008bc2:	2b20      	cmp	r3, #32
 8008bc4:	d009      	beq.n	8008bda <UART_SetConfig+0x162>
 8008bc6:	2b20      	cmp	r3, #32
 8008bc8:	d810      	bhi.n	8008bec <UART_SetConfig+0x174>
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d002      	beq.n	8008bd4 <UART_SetConfig+0x15c>
 8008bce:	2b10      	cmp	r3, #16
 8008bd0:	d006      	beq.n	8008be0 <UART_SetConfig+0x168>
 8008bd2:	e00b      	b.n	8008bec <UART_SetConfig+0x174>
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	77fb      	strb	r3, [r7, #31]
 8008bd8:	e0f2      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008bda:	2302      	movs	r3, #2
 8008bdc:	77fb      	strb	r3, [r7, #31]
 8008bde:	e0ef      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008be0:	2304      	movs	r3, #4
 8008be2:	77fb      	strb	r3, [r7, #31]
 8008be4:	e0ec      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008be6:	2308      	movs	r3, #8
 8008be8:	77fb      	strb	r3, [r7, #31]
 8008bea:	e0e9      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008bec:	2310      	movs	r3, #16
 8008bee:	77fb      	strb	r3, [r7, #31]
 8008bf0:	e0e6      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a56      	ldr	r2, [pc, #344]	@ (8008d50 <UART_SetConfig+0x2d8>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d120      	bne.n	8008c3e <UART_SetConfig+0x1c6>
 8008bfc:	4b51      	ldr	r3, [pc, #324]	@ (8008d44 <UART_SetConfig+0x2cc>)
 8008bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c02:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008c06:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c08:	d013      	beq.n	8008c32 <UART_SetConfig+0x1ba>
 8008c0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c0c:	d814      	bhi.n	8008c38 <UART_SetConfig+0x1c0>
 8008c0e:	2b80      	cmp	r3, #128	@ 0x80
 8008c10:	d009      	beq.n	8008c26 <UART_SetConfig+0x1ae>
 8008c12:	2b80      	cmp	r3, #128	@ 0x80
 8008c14:	d810      	bhi.n	8008c38 <UART_SetConfig+0x1c0>
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d002      	beq.n	8008c20 <UART_SetConfig+0x1a8>
 8008c1a:	2b40      	cmp	r3, #64	@ 0x40
 8008c1c:	d006      	beq.n	8008c2c <UART_SetConfig+0x1b4>
 8008c1e:	e00b      	b.n	8008c38 <UART_SetConfig+0x1c0>
 8008c20:	2300      	movs	r3, #0
 8008c22:	77fb      	strb	r3, [r7, #31]
 8008c24:	e0cc      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008c26:	2302      	movs	r3, #2
 8008c28:	77fb      	strb	r3, [r7, #31]
 8008c2a:	e0c9      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008c2c:	2304      	movs	r3, #4
 8008c2e:	77fb      	strb	r3, [r7, #31]
 8008c30:	e0c6      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008c32:	2308      	movs	r3, #8
 8008c34:	77fb      	strb	r3, [r7, #31]
 8008c36:	e0c3      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008c38:	2310      	movs	r3, #16
 8008c3a:	77fb      	strb	r3, [r7, #31]
 8008c3c:	e0c0      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a44      	ldr	r2, [pc, #272]	@ (8008d54 <UART_SetConfig+0x2dc>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d125      	bne.n	8008c94 <UART_SetConfig+0x21c>
 8008c48:	4b3e      	ldr	r3, [pc, #248]	@ (8008d44 <UART_SetConfig+0x2cc>)
 8008c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c56:	d017      	beq.n	8008c88 <UART_SetConfig+0x210>
 8008c58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008c5c:	d817      	bhi.n	8008c8e <UART_SetConfig+0x216>
 8008c5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c62:	d00b      	beq.n	8008c7c <UART_SetConfig+0x204>
 8008c64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c68:	d811      	bhi.n	8008c8e <UART_SetConfig+0x216>
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d003      	beq.n	8008c76 <UART_SetConfig+0x1fe>
 8008c6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c72:	d006      	beq.n	8008c82 <UART_SetConfig+0x20a>
 8008c74:	e00b      	b.n	8008c8e <UART_SetConfig+0x216>
 8008c76:	2300      	movs	r3, #0
 8008c78:	77fb      	strb	r3, [r7, #31]
 8008c7a:	e0a1      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	77fb      	strb	r3, [r7, #31]
 8008c80:	e09e      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008c82:	2304      	movs	r3, #4
 8008c84:	77fb      	strb	r3, [r7, #31]
 8008c86:	e09b      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008c88:	2308      	movs	r3, #8
 8008c8a:	77fb      	strb	r3, [r7, #31]
 8008c8c:	e098      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008c8e:	2310      	movs	r3, #16
 8008c90:	77fb      	strb	r3, [r7, #31]
 8008c92:	e095      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a2f      	ldr	r2, [pc, #188]	@ (8008d58 <UART_SetConfig+0x2e0>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d125      	bne.n	8008cea <UART_SetConfig+0x272>
 8008c9e:	4b29      	ldr	r3, [pc, #164]	@ (8008d44 <UART_SetConfig+0x2cc>)
 8008ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ca4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008ca8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008cac:	d017      	beq.n	8008cde <UART_SetConfig+0x266>
 8008cae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008cb2:	d817      	bhi.n	8008ce4 <UART_SetConfig+0x26c>
 8008cb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cb8:	d00b      	beq.n	8008cd2 <UART_SetConfig+0x25a>
 8008cba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cbe:	d811      	bhi.n	8008ce4 <UART_SetConfig+0x26c>
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d003      	beq.n	8008ccc <UART_SetConfig+0x254>
 8008cc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cc8:	d006      	beq.n	8008cd8 <UART_SetConfig+0x260>
 8008cca:	e00b      	b.n	8008ce4 <UART_SetConfig+0x26c>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	77fb      	strb	r3, [r7, #31]
 8008cd0:	e076      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008cd2:	2302      	movs	r3, #2
 8008cd4:	77fb      	strb	r3, [r7, #31]
 8008cd6:	e073      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008cd8:	2304      	movs	r3, #4
 8008cda:	77fb      	strb	r3, [r7, #31]
 8008cdc:	e070      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008cde:	2308      	movs	r3, #8
 8008ce0:	77fb      	strb	r3, [r7, #31]
 8008ce2:	e06d      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008ce4:	2310      	movs	r3, #16
 8008ce6:	77fb      	strb	r3, [r7, #31]
 8008ce8:	e06a      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a1b      	ldr	r2, [pc, #108]	@ (8008d5c <UART_SetConfig+0x2e4>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d138      	bne.n	8008d66 <UART_SetConfig+0x2ee>
 8008cf4:	4b13      	ldr	r3, [pc, #76]	@ (8008d44 <UART_SetConfig+0x2cc>)
 8008cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cfa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008cfe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008d02:	d017      	beq.n	8008d34 <UART_SetConfig+0x2bc>
 8008d04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008d08:	d82a      	bhi.n	8008d60 <UART_SetConfig+0x2e8>
 8008d0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d0e:	d00b      	beq.n	8008d28 <UART_SetConfig+0x2b0>
 8008d10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d14:	d824      	bhi.n	8008d60 <UART_SetConfig+0x2e8>
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d003      	beq.n	8008d22 <UART_SetConfig+0x2aa>
 8008d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d1e:	d006      	beq.n	8008d2e <UART_SetConfig+0x2b6>
 8008d20:	e01e      	b.n	8008d60 <UART_SetConfig+0x2e8>
 8008d22:	2300      	movs	r3, #0
 8008d24:	77fb      	strb	r3, [r7, #31]
 8008d26:	e04b      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008d28:	2302      	movs	r3, #2
 8008d2a:	77fb      	strb	r3, [r7, #31]
 8008d2c:	e048      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008d2e:	2304      	movs	r3, #4
 8008d30:	77fb      	strb	r3, [r7, #31]
 8008d32:	e045      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008d34:	2308      	movs	r3, #8
 8008d36:	77fb      	strb	r3, [r7, #31]
 8008d38:	e042      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008d3a:	bf00      	nop
 8008d3c:	efff69f3 	.word	0xefff69f3
 8008d40:	40011000 	.word	0x40011000
 8008d44:	40023800 	.word	0x40023800
 8008d48:	40004400 	.word	0x40004400
 8008d4c:	40004800 	.word	0x40004800
 8008d50:	40004c00 	.word	0x40004c00
 8008d54:	40005000 	.word	0x40005000
 8008d58:	40011400 	.word	0x40011400
 8008d5c:	40007800 	.word	0x40007800
 8008d60:	2310      	movs	r3, #16
 8008d62:	77fb      	strb	r3, [r7, #31]
 8008d64:	e02c      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a72      	ldr	r2, [pc, #456]	@ (8008f34 <UART_SetConfig+0x4bc>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d125      	bne.n	8008dbc <UART_SetConfig+0x344>
 8008d70:	4b71      	ldr	r3, [pc, #452]	@ (8008f38 <UART_SetConfig+0x4c0>)
 8008d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d76:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008d7a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008d7e:	d017      	beq.n	8008db0 <UART_SetConfig+0x338>
 8008d80:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008d84:	d817      	bhi.n	8008db6 <UART_SetConfig+0x33e>
 8008d86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d8a:	d00b      	beq.n	8008da4 <UART_SetConfig+0x32c>
 8008d8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d90:	d811      	bhi.n	8008db6 <UART_SetConfig+0x33e>
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <UART_SetConfig+0x326>
 8008d96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d9a:	d006      	beq.n	8008daa <UART_SetConfig+0x332>
 8008d9c:	e00b      	b.n	8008db6 <UART_SetConfig+0x33e>
 8008d9e:	2300      	movs	r3, #0
 8008da0:	77fb      	strb	r3, [r7, #31]
 8008da2:	e00d      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008da4:	2302      	movs	r3, #2
 8008da6:	77fb      	strb	r3, [r7, #31]
 8008da8:	e00a      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008daa:	2304      	movs	r3, #4
 8008dac:	77fb      	strb	r3, [r7, #31]
 8008dae:	e007      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008db0:	2308      	movs	r3, #8
 8008db2:	77fb      	strb	r3, [r7, #31]
 8008db4:	e004      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008db6:	2310      	movs	r3, #16
 8008db8:	77fb      	strb	r3, [r7, #31]
 8008dba:	e001      	b.n	8008dc0 <UART_SetConfig+0x348>
 8008dbc:	2310      	movs	r3, #16
 8008dbe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	69db      	ldr	r3, [r3, #28]
 8008dc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008dc8:	d15b      	bne.n	8008e82 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008dca:	7ffb      	ldrb	r3, [r7, #31]
 8008dcc:	2b08      	cmp	r3, #8
 8008dce:	d828      	bhi.n	8008e22 <UART_SetConfig+0x3aa>
 8008dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd8 <UART_SetConfig+0x360>)
 8008dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd6:	bf00      	nop
 8008dd8:	08008dfd 	.word	0x08008dfd
 8008ddc:	08008e05 	.word	0x08008e05
 8008de0:	08008e0d 	.word	0x08008e0d
 8008de4:	08008e23 	.word	0x08008e23
 8008de8:	08008e13 	.word	0x08008e13
 8008dec:	08008e23 	.word	0x08008e23
 8008df0:	08008e23 	.word	0x08008e23
 8008df4:	08008e23 	.word	0x08008e23
 8008df8:	08008e1b 	.word	0x08008e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008dfc:	f7fe f9e4 	bl	80071c8 <HAL_RCC_GetPCLK1Freq>
 8008e00:	61b8      	str	r0, [r7, #24]
        break;
 8008e02:	e013      	b.n	8008e2c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e04:	f7fe f9f4 	bl	80071f0 <HAL_RCC_GetPCLK2Freq>
 8008e08:	61b8      	str	r0, [r7, #24]
        break;
 8008e0a:	e00f      	b.n	8008e2c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e0c:	4b4b      	ldr	r3, [pc, #300]	@ (8008f3c <UART_SetConfig+0x4c4>)
 8008e0e:	61bb      	str	r3, [r7, #24]
        break;
 8008e10:	e00c      	b.n	8008e2c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e12:	f7fe f8c7 	bl	8006fa4 <HAL_RCC_GetSysClockFreq>
 8008e16:	61b8      	str	r0, [r7, #24]
        break;
 8008e18:	e008      	b.n	8008e2c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e1e:	61bb      	str	r3, [r7, #24]
        break;
 8008e20:	e004      	b.n	8008e2c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008e22:	2300      	movs	r3, #0
 8008e24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	77bb      	strb	r3, [r7, #30]
        break;
 8008e2a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d074      	beq.n	8008f1c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	005a      	lsls	r2, r3, #1
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	085b      	lsrs	r3, r3, #1
 8008e3c:	441a      	add	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e46:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	2b0f      	cmp	r3, #15
 8008e4c:	d916      	bls.n	8008e7c <UART_SetConfig+0x404>
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e54:	d212      	bcs.n	8008e7c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	f023 030f 	bic.w	r3, r3, #15
 8008e5e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	085b      	lsrs	r3, r3, #1
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	f003 0307 	and.w	r3, r3, #7
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	89fb      	ldrh	r3, [r7, #14]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	89fa      	ldrh	r2, [r7, #14]
 8008e78:	60da      	str	r2, [r3, #12]
 8008e7a:	e04f      	b.n	8008f1c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	77bb      	strb	r3, [r7, #30]
 8008e80:	e04c      	b.n	8008f1c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e82:	7ffb      	ldrb	r3, [r7, #31]
 8008e84:	2b08      	cmp	r3, #8
 8008e86:	d828      	bhi.n	8008eda <UART_SetConfig+0x462>
 8008e88:	a201      	add	r2, pc, #4	@ (adr r2, 8008e90 <UART_SetConfig+0x418>)
 8008e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8e:	bf00      	nop
 8008e90:	08008eb5 	.word	0x08008eb5
 8008e94:	08008ebd 	.word	0x08008ebd
 8008e98:	08008ec5 	.word	0x08008ec5
 8008e9c:	08008edb 	.word	0x08008edb
 8008ea0:	08008ecb 	.word	0x08008ecb
 8008ea4:	08008edb 	.word	0x08008edb
 8008ea8:	08008edb 	.word	0x08008edb
 8008eac:	08008edb 	.word	0x08008edb
 8008eb0:	08008ed3 	.word	0x08008ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008eb4:	f7fe f988 	bl	80071c8 <HAL_RCC_GetPCLK1Freq>
 8008eb8:	61b8      	str	r0, [r7, #24]
        break;
 8008eba:	e013      	b.n	8008ee4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ebc:	f7fe f998 	bl	80071f0 <HAL_RCC_GetPCLK2Freq>
 8008ec0:	61b8      	str	r0, [r7, #24]
        break;
 8008ec2:	e00f      	b.n	8008ee4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8008f3c <UART_SetConfig+0x4c4>)
 8008ec6:	61bb      	str	r3, [r7, #24]
        break;
 8008ec8:	e00c      	b.n	8008ee4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008eca:	f7fe f86b 	bl	8006fa4 <HAL_RCC_GetSysClockFreq>
 8008ece:	61b8      	str	r0, [r7, #24]
        break;
 8008ed0:	e008      	b.n	8008ee4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ed2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ed6:	61bb      	str	r3, [r7, #24]
        break;
 8008ed8:	e004      	b.n	8008ee4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008eda:	2300      	movs	r3, #0
 8008edc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	77bb      	strb	r3, [r7, #30]
        break;
 8008ee2:	bf00      	nop
    }

    if (pclk != 0U)
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d018      	beq.n	8008f1c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	085a      	lsrs	r2, r3, #1
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	441a      	add	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008efc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	2b0f      	cmp	r3, #15
 8008f02:	d909      	bls.n	8008f18 <UART_SetConfig+0x4a0>
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f0a:	d205      	bcs.n	8008f18 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	60da      	str	r2, [r3, #12]
 8008f16:	e001      	b.n	8008f1c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008f28:	7fbb      	ldrb	r3, [r7, #30]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3720      	adds	r7, #32
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	40007c00 	.word	0x40007c00
 8008f38:	40023800 	.word	0x40023800
 8008f3c:	00f42400 	.word	0x00f42400

08008f40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f4c:	f003 0308 	and.w	r3, r3, #8
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00a      	beq.n	8008f6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	430a      	orrs	r2, r1
 8008f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f6e:	f003 0301 	and.w	r3, r3, #1
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00a      	beq.n	8008f8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	430a      	orrs	r2, r1
 8008f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f90:	f003 0302 	and.w	r3, r3, #2
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00a      	beq.n	8008fae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	430a      	orrs	r2, r1
 8008fac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb2:	f003 0304 	and.w	r3, r3, #4
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00a      	beq.n	8008fd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	430a      	orrs	r2, r1
 8008fce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fd4:	f003 0310 	and.w	r3, r3, #16
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00a      	beq.n	8008ff2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	430a      	orrs	r2, r1
 8008ff0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ff6:	f003 0320 	and.w	r3, r3, #32
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00a      	beq.n	8009014 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	430a      	orrs	r2, r1
 8009012:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800901c:	2b00      	cmp	r3, #0
 800901e:	d01a      	beq.n	8009056 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	430a      	orrs	r2, r1
 8009034:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800903a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800903e:	d10a      	bne.n	8009056 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	430a      	orrs	r2, r1
 8009054:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800905a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00a      	beq.n	8009078 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	430a      	orrs	r2, r1
 8009076:	605a      	str	r2, [r3, #4]
  }
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b08c      	sub	sp, #48	@ 0x30
 8009088:	af02      	add	r7, sp, #8
 800908a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009094:	f7f8 ff12 	bl	8001ebc <HAL_GetTick>
 8009098:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 0308 	and.w	r3, r3, #8
 80090a4:	2b08      	cmp	r3, #8
 80090a6:	d12e      	bne.n	8009106 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b0:	2200      	movs	r2, #0
 80090b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 f83b 	bl	8009132 <UART_WaitOnFlagUntilTimeout>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d021      	beq.n	8009106 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	e853 3f00 	ldrex	r3, [r3]
 80090ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090d6:	623b      	str	r3, [r7, #32]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	461a      	mov	r2, r3
 80090de:	6a3b      	ldr	r3, [r7, #32]
 80090e0:	61fb      	str	r3, [r7, #28]
 80090e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e4:	69b9      	ldr	r1, [r7, #24]
 80090e6:	69fa      	ldr	r2, [r7, #28]
 80090e8:	e841 2300 	strex	r3, r2, [r1]
 80090ec:	617b      	str	r3, [r7, #20]
   return(result);
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1e6      	bne.n	80090c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2220      	movs	r2, #32
 80090f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009102:	2303      	movs	r3, #3
 8009104:	e011      	b.n	800912a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2220      	movs	r2, #32
 800910a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2220      	movs	r2, #32
 8009110:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009128:	2300      	movs	r3, #0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3728      	adds	r7, #40	@ 0x28
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b084      	sub	sp, #16
 8009136:	af00      	add	r7, sp, #0
 8009138:	60f8      	str	r0, [r7, #12]
 800913a:	60b9      	str	r1, [r7, #8]
 800913c:	603b      	str	r3, [r7, #0]
 800913e:	4613      	mov	r3, r2
 8009140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009142:	e04f      	b.n	80091e4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800914a:	d04b      	beq.n	80091e4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800914c:	f7f8 feb6 	bl	8001ebc <HAL_GetTick>
 8009150:	4602      	mov	r2, r0
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	69ba      	ldr	r2, [r7, #24]
 8009158:	429a      	cmp	r2, r3
 800915a:	d302      	bcc.n	8009162 <UART_WaitOnFlagUntilTimeout+0x30>
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d101      	bne.n	8009166 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e04e      	b.n	8009204 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f003 0304 	and.w	r3, r3, #4
 8009170:	2b00      	cmp	r3, #0
 8009172:	d037      	beq.n	80091e4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	2b80      	cmp	r3, #128	@ 0x80
 8009178:	d034      	beq.n	80091e4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	2b40      	cmp	r3, #64	@ 0x40
 800917e:	d031      	beq.n	80091e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	f003 0308 	and.w	r3, r3, #8
 800918a:	2b08      	cmp	r3, #8
 800918c:	d110      	bne.n	80091b0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2208      	movs	r2, #8
 8009194:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f000 f8fe 	bl	8009398 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2208      	movs	r2, #8
 80091a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e029      	b.n	8009204 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	69db      	ldr	r3, [r3, #28]
 80091b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80091ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091be:	d111      	bne.n	80091e4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80091c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 f8e4 	bl	8009398 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2220      	movs	r2, #32
 80091d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80091e0:	2303      	movs	r3, #3
 80091e2:	e00f      	b.n	8009204 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	69da      	ldr	r2, [r3, #28]
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	4013      	ands	r3, r2
 80091ee:	68ba      	ldr	r2, [r7, #8]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	bf0c      	ite	eq
 80091f4:	2301      	moveq	r3, #1
 80091f6:	2300      	movne	r3, #0
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	461a      	mov	r2, r3
 80091fc:	79fb      	ldrb	r3, [r7, #7]
 80091fe:	429a      	cmp	r2, r3
 8009200:	d0a0      	beq.n	8009144 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b096      	sub	sp, #88	@ 0x58
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	4613      	mov	r3, r2
 8009218:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	68ba      	ldr	r2, [r7, #8]
 800921e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	88fa      	ldrh	r2, [r7, #6]
 8009224:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2222      	movs	r2, #34	@ 0x22
 8009234:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800923c:	2b00      	cmp	r3, #0
 800923e:	d028      	beq.n	8009292 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009244:	4a3e      	ldr	r2, [pc, #248]	@ (8009340 <UART_Start_Receive_DMA+0x134>)
 8009246:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800924c:	4a3d      	ldr	r2, [pc, #244]	@ (8009344 <UART_Start_Receive_DMA+0x138>)
 800924e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009254:	4a3c      	ldr	r2, [pc, #240]	@ (8009348 <UART_Start_Receive_DMA+0x13c>)
 8009256:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800925c:	2200      	movs	r2, #0
 800925e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3324      	adds	r3, #36	@ 0x24
 800926a:	4619      	mov	r1, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009270:	461a      	mov	r2, r3
 8009272:	88fb      	ldrh	r3, [r7, #6]
 8009274:	f7f9 f9ec 	bl	8002650 <HAL_DMA_Start_IT>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d009      	beq.n	8009292 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2210      	movs	r2, #16
 8009282:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2220      	movs	r2, #32
 800928a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e051      	b.n	8009336 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d018      	beq.n	80092cc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092a2:	e853 3f00 	ldrex	r3, [r3]
 80092a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80092a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	461a      	mov	r2, r3
 80092b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80092ba:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80092be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092c0:	e841 2300 	strex	r3, r2, [r1]
 80092c4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80092c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1e6      	bne.n	800929a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3308      	adds	r3, #8
 80092d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d6:	e853 3f00 	ldrex	r3, [r3]
 80092da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80092dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092de:	f043 0301 	orr.w	r3, r3, #1
 80092e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	3308      	adds	r3, #8
 80092ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80092ec:	637a      	str	r2, [r7, #52]	@ 0x34
 80092ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80092f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092f4:	e841 2300 	strex	r3, r2, [r1]
 80092f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80092fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1e5      	bne.n	80092cc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	3308      	adds	r3, #8
 8009306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	e853 3f00 	ldrex	r3, [r3]
 800930e:	613b      	str	r3, [r7, #16]
   return(result);
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	3308      	adds	r3, #8
 800931e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009320:	623a      	str	r2, [r7, #32]
 8009322:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009324:	69f9      	ldr	r1, [r7, #28]
 8009326:	6a3a      	ldr	r2, [r7, #32]
 8009328:	e841 2300 	strex	r3, r2, [r1]
 800932c:	61bb      	str	r3, [r7, #24]
   return(result);
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1e5      	bne.n	8009300 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3758      	adds	r7, #88	@ 0x58
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	08009513 	.word	0x08009513
 8009344:	08009671 	.word	0x08009671
 8009348:	080096e3 	.word	0x080096e3

0800934c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800934c:	b480      	push	{r7}
 800934e:	b089      	sub	sp, #36	@ 0x24
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	e853 3f00 	ldrex	r3, [r3]
 8009360:	60bb      	str	r3, [r7, #8]
   return(result);
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009368:	61fb      	str	r3, [r7, #28]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	461a      	mov	r2, r3
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	61bb      	str	r3, [r7, #24]
 8009374:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009376:	6979      	ldr	r1, [r7, #20]
 8009378:	69ba      	ldr	r2, [r7, #24]
 800937a:	e841 2300 	strex	r3, r2, [r1]
 800937e:	613b      	str	r3, [r7, #16]
   return(result);
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1e6      	bne.n	8009354 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2220      	movs	r2, #32
 800938a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800938c:	bf00      	nop
 800938e:	3724      	adds	r7, #36	@ 0x24
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009398:	b480      	push	{r7}
 800939a:	b095      	sub	sp, #84	@ 0x54
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093a8:	e853 3f00 	ldrex	r3, [r3]
 80093ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80093ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80093b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	461a      	mov	r2, r3
 80093bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80093be:	643b      	str	r3, [r7, #64]	@ 0x40
 80093c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80093c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80093c6:	e841 2300 	strex	r3, r2, [r1]
 80093ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80093cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1e6      	bne.n	80093a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3308      	adds	r3, #8
 80093d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093da:	6a3b      	ldr	r3, [r7, #32]
 80093dc:	e853 3f00 	ldrex	r3, [r3]
 80093e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	f023 0301 	bic.w	r3, r3, #1
 80093e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	3308      	adds	r3, #8
 80093f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80093f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80093f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093fa:	e841 2300 	strex	r3, r2, [r1]
 80093fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1e5      	bne.n	80093d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800940a:	2b01      	cmp	r3, #1
 800940c:	d118      	bne.n	8009440 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	e853 3f00 	ldrex	r3, [r3]
 800941a:	60bb      	str	r3, [r7, #8]
   return(result);
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	f023 0310 	bic.w	r3, r3, #16
 8009422:	647b      	str	r3, [r7, #68]	@ 0x44
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	461a      	mov	r2, r3
 800942a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800942c:	61bb      	str	r3, [r7, #24]
 800942e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009430:	6979      	ldr	r1, [r7, #20]
 8009432:	69ba      	ldr	r2, [r7, #24]
 8009434:	e841 2300 	strex	r3, r2, [r1]
 8009438:	613b      	str	r3, [r7, #16]
   return(result);
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1e6      	bne.n	800940e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2220      	movs	r2, #32
 8009444:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009454:	bf00      	nop
 8009456:	3754      	adds	r7, #84	@ 0x54
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b090      	sub	sp, #64	@ 0x40
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800946c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	69db      	ldr	r3, [r3, #28]
 8009472:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009476:	d037      	beq.n	80094e8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8009478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800947a:	2200      	movs	r2, #0
 800947c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3308      	adds	r3, #8
 8009486:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800948a:	e853 3f00 	ldrex	r3, [r3]
 800948e:	623b      	str	r3, [r7, #32]
   return(result);
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009496:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	3308      	adds	r3, #8
 800949e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80094a0:	633a      	str	r2, [r7, #48]	@ 0x30
 80094a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094a8:	e841 2300 	strex	r3, r2, [r1]
 80094ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d1e5      	bne.n	8009480 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	e853 3f00 	ldrex	r3, [r3]
 80094c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80094ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	461a      	mov	r2, r3
 80094d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094d2:	61fb      	str	r3, [r7, #28]
 80094d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d6:	69b9      	ldr	r1, [r7, #24]
 80094d8:	69fa      	ldr	r2, [r7, #28]
 80094da:	e841 2300 	strex	r3, r2, [r1]
 80094de:	617b      	str	r3, [r7, #20]
   return(result);
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1e6      	bne.n	80094b4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80094e6:	e002      	b.n	80094ee <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80094e8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80094ea:	f010 fc31 	bl	8019d50 <HAL_UART_TxCpltCallback>
}
 80094ee:	bf00      	nop
 80094f0:	3740      	adds	r7, #64	@ 0x40
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b084      	sub	sp, #16
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009502:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f7ff fa8d 	bl	8008a24 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800950a:	bf00      	nop
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b09c      	sub	sp, #112	@ 0x70
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800951e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	69db      	ldr	r3, [r3, #28]
 8009524:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009528:	d071      	beq.n	800960e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800952a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800952c:	2200      	movs	r2, #0
 800952e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009532:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009538:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800953a:	e853 3f00 	ldrex	r3, [r3]
 800953e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009540:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009542:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009546:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009548:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	461a      	mov	r2, r3
 800954e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009550:	657b      	str	r3, [r7, #84]	@ 0x54
 8009552:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009554:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009556:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009558:	e841 2300 	strex	r3, r2, [r1]
 800955c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800955e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009560:	2b00      	cmp	r3, #0
 8009562:	d1e6      	bne.n	8009532 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009564:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3308      	adds	r3, #8
 800956a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800956e:	e853 3f00 	ldrex	r3, [r3]
 8009572:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009576:	f023 0301 	bic.w	r3, r3, #1
 800957a:	667b      	str	r3, [r7, #100]	@ 0x64
 800957c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	3308      	adds	r3, #8
 8009582:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009584:	643a      	str	r2, [r7, #64]	@ 0x40
 8009586:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009588:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800958a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800958c:	e841 2300 	strex	r3, r2, [r1]
 8009590:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1e5      	bne.n	8009564 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009598:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	3308      	adds	r3, #8
 800959e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a0:	6a3b      	ldr	r3, [r7, #32]
 80095a2:	e853 3f00 	ldrex	r3, [r3]
 80095a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80095b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	3308      	adds	r3, #8
 80095b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80095b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80095ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095c0:	e841 2300 	strex	r3, r2, [r1]
 80095c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1e5      	bne.n	8009598 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80095cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095ce:	2220      	movs	r2, #32
 80095d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d118      	bne.n	800960e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	e853 3f00 	ldrex	r3, [r3]
 80095e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	f023 0310 	bic.w	r3, r3, #16
 80095f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	461a      	mov	r2, r3
 80095f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095fa:	61bb      	str	r3, [r7, #24]
 80095fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fe:	6979      	ldr	r1, [r7, #20]
 8009600:	69ba      	ldr	r2, [r7, #24]
 8009602:	e841 2300 	strex	r3, r2, [r1]
 8009606:	613b      	str	r3, [r7, #16]
   return(result);
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1e6      	bne.n	80095dc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800960e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009610:	2200      	movs	r2, #0
 8009612:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009614:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009618:	2b01      	cmp	r3, #1
 800961a:	d122      	bne.n	8009662 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800961c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800961e:	2200      	movs	r2, #0
 8009620:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800962e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009630:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009634:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8009638:	429a      	cmp	r2, r3
 800963a:	d204      	bcs.n	8009646 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800963c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800963e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8009642:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009646:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009648:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800964c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800964e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009652:	b29b      	uxth	r3, r3
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	b29b      	uxth	r3, r3
 8009658:	4619      	mov	r1, r3
 800965a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800965c:	f7ff fa00 	bl	8008a60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009660:	e002      	b.n	8009668 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 8009662:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009664:	f010 fba2 	bl	8019dac <HAL_UART_RxCpltCallback>
}
 8009668:	bf00      	nop
 800966a:	3770      	adds	r7, #112	@ 0x70
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800967c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2201      	movs	r2, #1
 8009682:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009688:	2b01      	cmp	r3, #1
 800968a:	d123      	bne.n	80096d4 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009692:	085b      	lsrs	r3, r3, #1
 8009694:	b29a      	uxth	r2, r3
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80096aa:	897a      	ldrh	r2, [r7, #10]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d803      	bhi.n	80096b8 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	897a      	ldrh	r2, [r7, #10]
 80096b4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	1ad3      	subs	r3, r2, r3
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	4619      	mov	r1, r3
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f7ff f9c7 	bl	8008a60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096d2:	e002      	b.n	80096da <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f7ff f9af 	bl	8008a38 <HAL_UART_RxHalfCpltCallback>
}
 80096da:	bf00      	nop
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b086      	sub	sp, #24
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ee:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80096f4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096fc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009708:	2b80      	cmp	r3, #128	@ 0x80
 800970a:	d109      	bne.n	8009720 <UART_DMAError+0x3e>
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	2b21      	cmp	r3, #33	@ 0x21
 8009710:	d106      	bne.n	8009720 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	2200      	movs	r2, #0
 8009716:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800971a:	6978      	ldr	r0, [r7, #20]
 800971c:	f7ff fe16 	bl	800934c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800972a:	2b40      	cmp	r3, #64	@ 0x40
 800972c:	d109      	bne.n	8009742 <UART_DMAError+0x60>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2b22      	cmp	r3, #34	@ 0x22
 8009732:	d106      	bne.n	8009742 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	2200      	movs	r2, #0
 8009738:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800973c:	6978      	ldr	r0, [r7, #20]
 800973e:	f7ff fe2b 	bl	8009398 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009748:	f043 0210 	orr.w	r2, r3, #16
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009752:	6978      	ldr	r0, [r7, #20]
 8009754:	f7ff f97a 	bl	8008a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009758:	bf00      	nop
 800975a:	3718      	adds	r7, #24
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800976c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	f7ff f968 	bl	8008a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800977c:	bf00      	nop
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b088      	sub	sp, #32
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	e853 3f00 	ldrex	r3, [r3]
 8009798:	60bb      	str	r3, [r7, #8]
   return(result);
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097a0:	61fb      	str	r3, [r7, #28]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	461a      	mov	r2, r3
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	61bb      	str	r3, [r7, #24]
 80097ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ae:	6979      	ldr	r1, [r7, #20]
 80097b0:	69ba      	ldr	r2, [r7, #24]
 80097b2:	e841 2300 	strex	r3, r2, [r1]
 80097b6:	613b      	str	r3, [r7, #16]
   return(result);
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1e6      	bne.n	800978c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2220      	movs	r2, #32
 80097c2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f010 fac0 	bl	8019d50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097d0:	bf00      	nop
 80097d2:	3720      	adds	r7, #32
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80097d8:	b084      	sub	sp, #16
 80097da:	b580      	push	{r7, lr}
 80097dc:	b084      	sub	sp, #16
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
 80097e2:	f107 001c 	add.w	r0, r7, #28
 80097e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80097ea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d121      	bne.n	8009836 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	68da      	ldr	r2, [r3, #12]
 8009802:	4b21      	ldr	r3, [pc, #132]	@ (8009888 <USB_CoreInit+0xb0>)
 8009804:	4013      	ands	r3, r2
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009816:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800981a:	2b01      	cmp	r3, #1
 800981c:	d105      	bne.n	800982a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fa92 	bl	8009d54 <USB_CoreReset>
 8009830:	4603      	mov	r3, r0
 8009832:	73fb      	strb	r3, [r7, #15]
 8009834:	e010      	b.n	8009858 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	68db      	ldr	r3, [r3, #12]
 800983a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 fa86 	bl	8009d54 <USB_CoreReset>
 8009848:	4603      	mov	r3, r0
 800984a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009850:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8009858:	7fbb      	ldrb	r3, [r7, #30]
 800985a:	2b01      	cmp	r3, #1
 800985c:	d10b      	bne.n	8009876 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	f043 0206 	orr.w	r2, r3, #6
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	f043 0220 	orr.w	r2, r3, #32
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009876:	7bfb      	ldrb	r3, [r7, #15]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009882:	b004      	add	sp, #16
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	ffbdffbf 	.word	0xffbdffbf

0800988c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f023 0201 	bic.w	r2, r3, #1
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	370c      	adds	r7, #12
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr

080098ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b084      	sub	sp, #16
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	460b      	mov	r3, r1
 80098b8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80098ba:	2300      	movs	r3, #0
 80098bc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80098ca:	78fb      	ldrb	r3, [r7, #3]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d115      	bne.n	80098fc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80098dc:	200a      	movs	r0, #10
 80098de:	f7f8 faf9 	bl	8001ed4 <HAL_Delay>
      ms += 10U;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	330a      	adds	r3, #10
 80098e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 fa25 	bl	8009d38 <USB_GetMode>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d01e      	beq.n	8009932 <USB_SetCurrentMode+0x84>
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2bc7      	cmp	r3, #199	@ 0xc7
 80098f8:	d9f0      	bls.n	80098dc <USB_SetCurrentMode+0x2e>
 80098fa:	e01a      	b.n	8009932 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80098fc:	78fb      	ldrb	r3, [r7, #3]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d115      	bne.n	800992e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800990e:	200a      	movs	r0, #10
 8009910:	f7f8 fae0 	bl	8001ed4 <HAL_Delay>
      ms += 10U;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	330a      	adds	r3, #10
 8009918:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 fa0c 	bl	8009d38 <USB_GetMode>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d005      	beq.n	8009932 <USB_SetCurrentMode+0x84>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2bc7      	cmp	r3, #199	@ 0xc7
 800992a:	d9f0      	bls.n	800990e <USB_SetCurrentMode+0x60>
 800992c:	e001      	b.n	8009932 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e005      	b.n	800993e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2bc8      	cmp	r3, #200	@ 0xc8
 8009936:	d101      	bne.n	800993c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	e000      	b.n	800993e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
	...

08009948 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009948:	b084      	sub	sp, #16
 800994a:	b580      	push	{r7, lr}
 800994c:	b086      	sub	sp, #24
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
 8009952:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009956:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800995a:	2300      	movs	r3, #0
 800995c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009962:	2300      	movs	r3, #0
 8009964:	613b      	str	r3, [r7, #16]
 8009966:	e009      	b.n	800997c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	3340      	adds	r3, #64	@ 0x40
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	4413      	add	r3, r2
 8009972:	2200      	movs	r2, #0
 8009974:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	3301      	adds	r3, #1
 800997a:	613b      	str	r3, [r7, #16]
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	2b0e      	cmp	r3, #14
 8009980:	d9f2      	bls.n	8009968 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009982:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009986:	2b00      	cmp	r3, #0
 8009988:	d11c      	bne.n	80099c4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009998:	f043 0302 	orr.w	r3, r3, #2
 800999c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099a2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	601a      	str	r2, [r3, #0]
 80099c2:	e005      	b.n	80099d0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80099d6:	461a      	mov	r2, r3
 80099d8:	2300      	movs	r3, #0
 80099da:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80099dc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d10d      	bne.n	8009a00 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80099e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d104      	bne.n	80099f6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80099ec:	2100      	movs	r1, #0
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f968 	bl	8009cc4 <USB_SetDevSpeed>
 80099f4:	e008      	b.n	8009a08 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80099f6:	2101      	movs	r1, #1
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f963 	bl	8009cc4 <USB_SetDevSpeed>
 80099fe:	e003      	b.n	8009a08 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009a00:	2103      	movs	r1, #3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f95e 	bl	8009cc4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009a08:	2110      	movs	r1, #16
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f8fa 	bl	8009c04 <USB_FlushTxFifo>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f924 	bl	8009c68 <USB_FlushRxFifo>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a30:	461a      	mov	r2, r3
 8009a32:	2300      	movs	r3, #0
 8009a34:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	2300      	movs	r3, #0
 8009a40:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a48:	461a      	mov	r2, r3
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a4e:	2300      	movs	r3, #0
 8009a50:	613b      	str	r3, [r7, #16]
 8009a52:	e043      	b.n	8009adc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	015a      	lsls	r2, r3, #5
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a6a:	d118      	bne.n	8009a9e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10a      	bne.n	8009a88 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	015a      	lsls	r2, r3, #5
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	4413      	add	r3, r2
 8009a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a7e:	461a      	mov	r2, r3
 8009a80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009a84:	6013      	str	r3, [r2, #0]
 8009a86:	e013      	b.n	8009ab0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	015a      	lsls	r2, r3, #5
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	4413      	add	r3, r2
 8009a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a94:	461a      	mov	r2, r3
 8009a96:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009a9a:	6013      	str	r3, [r2, #0]
 8009a9c:	e008      	b.n	8009ab0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	015a      	lsls	r2, r3, #5
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009aaa:	461a      	mov	r2, r3
 8009aac:	2300      	movs	r3, #0
 8009aae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	015a      	lsls	r2, r3, #5
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009abc:	461a      	mov	r2, r3
 8009abe:	2300      	movs	r3, #0
 8009ac0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	015a      	lsls	r2, r3, #5
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	4413      	add	r3, r2
 8009aca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ace:	461a      	mov	r2, r3
 8009ad0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009ad4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	613b      	str	r3, [r7, #16]
 8009adc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d3b5      	bcc.n	8009a54 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ae8:	2300      	movs	r3, #0
 8009aea:	613b      	str	r3, [r7, #16]
 8009aec:	e043      	b.n	8009b76 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	015a      	lsls	r2, r3, #5
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	4413      	add	r3, r2
 8009af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009b00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009b04:	d118      	bne.n	8009b38 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d10a      	bne.n	8009b22 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	015a      	lsls	r2, r3, #5
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	4413      	add	r3, r2
 8009b14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b18:	461a      	mov	r2, r3
 8009b1a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009b1e:	6013      	str	r3, [r2, #0]
 8009b20:	e013      	b.n	8009b4a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	015a      	lsls	r2, r3, #5
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	4413      	add	r3, r2
 8009b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b2e:	461a      	mov	r2, r3
 8009b30:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009b34:	6013      	str	r3, [r2, #0]
 8009b36:	e008      	b.n	8009b4a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	015a      	lsls	r2, r3, #5
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	4413      	add	r3, r2
 8009b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b44:	461a      	mov	r2, r3
 8009b46:	2300      	movs	r3, #0
 8009b48:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	015a      	lsls	r2, r3, #5
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	4413      	add	r3, r2
 8009b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b56:	461a      	mov	r2, r3
 8009b58:	2300      	movs	r3, #0
 8009b5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	015a      	lsls	r2, r3, #5
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	4413      	add	r3, r2
 8009b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b68:	461a      	mov	r2, r3
 8009b6a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009b6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	3301      	adds	r3, #1
 8009b74:	613b      	str	r3, [r7, #16]
 8009b76:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d3b5      	bcc.n	8009aee <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b94:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009ba2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009ba4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d105      	bne.n	8009bb8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	699b      	ldr	r3, [r3, #24]
 8009bb0:	f043 0210 	orr.w	r2, r3, #16
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	699a      	ldr	r2, [r3, #24]
 8009bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8009bfc <USB_DevInit+0x2b4>)
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009bc4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d005      	beq.n	8009bd8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	699b      	ldr	r3, [r3, #24]
 8009bd0:	f043 0208 	orr.w	r2, r3, #8
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009bd8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d105      	bne.n	8009bec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	699a      	ldr	r2, [r3, #24]
 8009be4:	4b06      	ldr	r3, [pc, #24]	@ (8009c00 <USB_DevInit+0x2b8>)
 8009be6:	4313      	orrs	r3, r2
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3718      	adds	r7, #24
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009bf8:	b004      	add	sp, #16
 8009bfa:	4770      	bx	lr
 8009bfc:	803c3800 	.word	0x803c3800
 8009c00:	40000004 	.word	0x40000004

08009c04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3301      	adds	r3, #1
 8009c16:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009c1e:	d901      	bls.n	8009c24 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009c20:	2303      	movs	r3, #3
 8009c22:	e01b      	b.n	8009c5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	daf2      	bge.n	8009c12 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	019b      	lsls	r3, r3, #6
 8009c34:	f043 0220 	orr.w	r2, r3, #32
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009c48:	d901      	bls.n	8009c4e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009c4a:	2303      	movs	r3, #3
 8009c4c:	e006      	b.n	8009c5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	f003 0320 	and.w	r3, r3, #32
 8009c56:	2b20      	cmp	r3, #32
 8009c58:	d0f0      	beq.n	8009c3c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3714      	adds	r7, #20
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c70:	2300      	movs	r3, #0
 8009c72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	3301      	adds	r3, #1
 8009c78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009c80:	d901      	bls.n	8009c86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009c82:	2303      	movs	r3, #3
 8009c84:	e018      	b.n	8009cb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	daf2      	bge.n	8009c74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2210      	movs	r2, #16
 8009c96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ca4:	d901      	bls.n	8009caa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	e006      	b.n	8009cb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	f003 0310 	and.w	r3, r3, #16
 8009cb2:	2b10      	cmp	r3, #16
 8009cb4:	d0f0      	beq.n	8009c98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3714      	adds	r7, #20
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr

08009cc4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	460b      	mov	r3, r1
 8009cce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	78fb      	ldrb	r3, [r7, #3]
 8009cde:	68f9      	ldr	r1, [r7, #12]
 8009ce0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3714      	adds	r7, #20
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b085      	sub	sp, #20
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009d10:	f023 0303 	bic.w	r3, r3, #3
 8009d14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d24:	f043 0302 	orr.w	r3, r3, #2
 8009d28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d2a:	2300      	movs	r3, #0
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3714      	adds	r7, #20
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	695b      	ldr	r3, [r3, #20]
 8009d44:	f003 0301 	and.w	r3, r3, #1
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	3301      	adds	r3, #1
 8009d64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009d6c:	d901      	bls.n	8009d72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009d6e:	2303      	movs	r3, #3
 8009d70:	e022      	b.n	8009db8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	daf2      	bge.n	8009d60 <USB_CoreReset+0xc>

  count = 10U;
 8009d7a:	230a      	movs	r3, #10
 8009d7c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8009d7e:	e002      	b.n	8009d86 <USB_CoreReset+0x32>
  {
    count--;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	3b01      	subs	r3, #1
 8009d84:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1f9      	bne.n	8009d80 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	691b      	ldr	r3, [r3, #16]
 8009d90:	f043 0201 	orr.w	r2, r3, #1
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009da4:	d901      	bls.n	8009daa <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8009da6:	2303      	movs	r3, #3
 8009da8:	e006      	b.n	8009db8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	f003 0301 	and.w	r3, r3, #1
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d0f0      	beq.n	8009d98 <USB_CoreReset+0x44>

  return HAL_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3714      	adds	r7, #20
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009dca:	4b96      	ldr	r3, [pc, #600]	@ (800a024 <MX_LWIP_Init+0x260>)
 8009dcc:	22c0      	movs	r2, #192	@ 0xc0
 8009dce:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009dd0:	4b94      	ldr	r3, [pc, #592]	@ (800a024 <MX_LWIP_Init+0x260>)
 8009dd2:	22a8      	movs	r2, #168	@ 0xa8
 8009dd4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8009dd6:	4b93      	ldr	r3, [pc, #588]	@ (800a024 <MX_LWIP_Init+0x260>)
 8009dd8:	2201      	movs	r2, #1
 8009dda:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 168;
 8009ddc:	4b91      	ldr	r3, [pc, #580]	@ (800a024 <MX_LWIP_Init+0x260>)
 8009dde:	22a8      	movs	r2, #168	@ 0xa8
 8009de0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009de2:	4b91      	ldr	r3, [pc, #580]	@ (800a028 <MX_LWIP_Init+0x264>)
 8009de4:	22ff      	movs	r2, #255	@ 0xff
 8009de6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009de8:	4b8f      	ldr	r3, [pc, #572]	@ (800a028 <MX_LWIP_Init+0x264>)
 8009dea:	22ff      	movs	r2, #255	@ 0xff
 8009dec:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8009dee:	4b8e      	ldr	r3, [pc, #568]	@ (800a028 <MX_LWIP_Init+0x264>)
 8009df0:	22ff      	movs	r2, #255	@ 0xff
 8009df2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009df4:	4b8c      	ldr	r3, [pc, #560]	@ (800a028 <MX_LWIP_Init+0x264>)
 8009df6:	2200      	movs	r2, #0
 8009df8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8009dfa:	4b8c      	ldr	r3, [pc, #560]	@ (800a02c <MX_LWIP_Init+0x268>)
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8009e00:	4b8a      	ldr	r3, [pc, #552]	@ (800a02c <MX_LWIP_Init+0x268>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8009e06:	4b89      	ldr	r3, [pc, #548]	@ (800a02c <MX_LWIP_Init+0x268>)
 8009e08:	2200      	movs	r2, #0
 8009e0a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8009e0c:	4b87      	ldr	r3, [pc, #540]	@ (800a02c <MX_LWIP_Init+0x268>)
 8009e0e:	2200      	movs	r2, #0
 8009e10:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009e12:	2100      	movs	r1, #0
 8009e14:	2000      	movs	r0, #0
 8009e16:	f005 f871 	bl	800eefc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009e1a:	4b82      	ldr	r3, [pc, #520]	@ (800a024 <MX_LWIP_Init+0x260>)
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	061a      	lsls	r2, r3, #24
 8009e20:	4b80      	ldr	r3, [pc, #512]	@ (800a024 <MX_LWIP_Init+0x260>)
 8009e22:	785b      	ldrb	r3, [r3, #1]
 8009e24:	041b      	lsls	r3, r3, #16
 8009e26:	431a      	orrs	r2, r3
 8009e28:	4b7e      	ldr	r3, [pc, #504]	@ (800a024 <MX_LWIP_Init+0x260>)
 8009e2a:	789b      	ldrb	r3, [r3, #2]
 8009e2c:	021b      	lsls	r3, r3, #8
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	4a7c      	ldr	r2, [pc, #496]	@ (800a024 <MX_LWIP_Init+0x260>)
 8009e32:	78d2      	ldrb	r2, [r2, #3]
 8009e34:	4313      	orrs	r3, r2
 8009e36:	061a      	lsls	r2, r3, #24
 8009e38:	4b7a      	ldr	r3, [pc, #488]	@ (800a024 <MX_LWIP_Init+0x260>)
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	0619      	lsls	r1, r3, #24
 8009e3e:	4b79      	ldr	r3, [pc, #484]	@ (800a024 <MX_LWIP_Init+0x260>)
 8009e40:	785b      	ldrb	r3, [r3, #1]
 8009e42:	041b      	lsls	r3, r3, #16
 8009e44:	4319      	orrs	r1, r3
 8009e46:	4b77      	ldr	r3, [pc, #476]	@ (800a024 <MX_LWIP_Init+0x260>)
 8009e48:	789b      	ldrb	r3, [r3, #2]
 8009e4a:	021b      	lsls	r3, r3, #8
 8009e4c:	430b      	orrs	r3, r1
 8009e4e:	4975      	ldr	r1, [pc, #468]	@ (800a024 <MX_LWIP_Init+0x260>)
 8009e50:	78c9      	ldrb	r1, [r1, #3]
 8009e52:	430b      	orrs	r3, r1
 8009e54:	021b      	lsls	r3, r3, #8
 8009e56:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009e5a:	431a      	orrs	r2, r3
 8009e5c:	4b71      	ldr	r3, [pc, #452]	@ (800a024 <MX_LWIP_Init+0x260>)
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	0619      	lsls	r1, r3, #24
 8009e62:	4b70      	ldr	r3, [pc, #448]	@ (800a024 <MX_LWIP_Init+0x260>)
 8009e64:	785b      	ldrb	r3, [r3, #1]
 8009e66:	041b      	lsls	r3, r3, #16
 8009e68:	4319      	orrs	r1, r3
 8009e6a:	4b6e      	ldr	r3, [pc, #440]	@ (800a024 <MX_LWIP_Init+0x260>)
 8009e6c:	789b      	ldrb	r3, [r3, #2]
 8009e6e:	021b      	lsls	r3, r3, #8
 8009e70:	430b      	orrs	r3, r1
 8009e72:	496c      	ldr	r1, [pc, #432]	@ (800a024 <MX_LWIP_Init+0x260>)
 8009e74:	78c9      	ldrb	r1, [r1, #3]
 8009e76:	430b      	orrs	r3, r1
 8009e78:	0a1b      	lsrs	r3, r3, #8
 8009e7a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009e7e:	431a      	orrs	r2, r3
 8009e80:	4b68      	ldr	r3, [pc, #416]	@ (800a024 <MX_LWIP_Init+0x260>)
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	0619      	lsls	r1, r3, #24
 8009e86:	4b67      	ldr	r3, [pc, #412]	@ (800a024 <MX_LWIP_Init+0x260>)
 8009e88:	785b      	ldrb	r3, [r3, #1]
 8009e8a:	041b      	lsls	r3, r3, #16
 8009e8c:	4319      	orrs	r1, r3
 8009e8e:	4b65      	ldr	r3, [pc, #404]	@ (800a024 <MX_LWIP_Init+0x260>)
 8009e90:	789b      	ldrb	r3, [r3, #2]
 8009e92:	021b      	lsls	r3, r3, #8
 8009e94:	430b      	orrs	r3, r1
 8009e96:	4963      	ldr	r1, [pc, #396]	@ (800a024 <MX_LWIP_Init+0x260>)
 8009e98:	78c9      	ldrb	r1, [r1, #3]
 8009e9a:	430b      	orrs	r3, r1
 8009e9c:	0e1b      	lsrs	r3, r3, #24
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	4a63      	ldr	r2, [pc, #396]	@ (800a030 <MX_LWIP_Init+0x26c>)
 8009ea2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009ea4:	4b60      	ldr	r3, [pc, #384]	@ (800a028 <MX_LWIP_Init+0x264>)
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	061a      	lsls	r2, r3, #24
 8009eaa:	4b5f      	ldr	r3, [pc, #380]	@ (800a028 <MX_LWIP_Init+0x264>)
 8009eac:	785b      	ldrb	r3, [r3, #1]
 8009eae:	041b      	lsls	r3, r3, #16
 8009eb0:	431a      	orrs	r2, r3
 8009eb2:	4b5d      	ldr	r3, [pc, #372]	@ (800a028 <MX_LWIP_Init+0x264>)
 8009eb4:	789b      	ldrb	r3, [r3, #2]
 8009eb6:	021b      	lsls	r3, r3, #8
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	4a5b      	ldr	r2, [pc, #364]	@ (800a028 <MX_LWIP_Init+0x264>)
 8009ebc:	78d2      	ldrb	r2, [r2, #3]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	061a      	lsls	r2, r3, #24
 8009ec2:	4b59      	ldr	r3, [pc, #356]	@ (800a028 <MX_LWIP_Init+0x264>)
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	0619      	lsls	r1, r3, #24
 8009ec8:	4b57      	ldr	r3, [pc, #348]	@ (800a028 <MX_LWIP_Init+0x264>)
 8009eca:	785b      	ldrb	r3, [r3, #1]
 8009ecc:	041b      	lsls	r3, r3, #16
 8009ece:	4319      	orrs	r1, r3
 8009ed0:	4b55      	ldr	r3, [pc, #340]	@ (800a028 <MX_LWIP_Init+0x264>)
 8009ed2:	789b      	ldrb	r3, [r3, #2]
 8009ed4:	021b      	lsls	r3, r3, #8
 8009ed6:	430b      	orrs	r3, r1
 8009ed8:	4953      	ldr	r1, [pc, #332]	@ (800a028 <MX_LWIP_Init+0x264>)
 8009eda:	78c9      	ldrb	r1, [r1, #3]
 8009edc:	430b      	orrs	r3, r1
 8009ede:	021b      	lsls	r3, r3, #8
 8009ee0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009ee4:	431a      	orrs	r2, r3
 8009ee6:	4b50      	ldr	r3, [pc, #320]	@ (800a028 <MX_LWIP_Init+0x264>)
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	0619      	lsls	r1, r3, #24
 8009eec:	4b4e      	ldr	r3, [pc, #312]	@ (800a028 <MX_LWIP_Init+0x264>)
 8009eee:	785b      	ldrb	r3, [r3, #1]
 8009ef0:	041b      	lsls	r3, r3, #16
 8009ef2:	4319      	orrs	r1, r3
 8009ef4:	4b4c      	ldr	r3, [pc, #304]	@ (800a028 <MX_LWIP_Init+0x264>)
 8009ef6:	789b      	ldrb	r3, [r3, #2]
 8009ef8:	021b      	lsls	r3, r3, #8
 8009efa:	430b      	orrs	r3, r1
 8009efc:	494a      	ldr	r1, [pc, #296]	@ (800a028 <MX_LWIP_Init+0x264>)
 8009efe:	78c9      	ldrb	r1, [r1, #3]
 8009f00:	430b      	orrs	r3, r1
 8009f02:	0a1b      	lsrs	r3, r3, #8
 8009f04:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009f08:	431a      	orrs	r2, r3
 8009f0a:	4b47      	ldr	r3, [pc, #284]	@ (800a028 <MX_LWIP_Init+0x264>)
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	0619      	lsls	r1, r3, #24
 8009f10:	4b45      	ldr	r3, [pc, #276]	@ (800a028 <MX_LWIP_Init+0x264>)
 8009f12:	785b      	ldrb	r3, [r3, #1]
 8009f14:	041b      	lsls	r3, r3, #16
 8009f16:	4319      	orrs	r1, r3
 8009f18:	4b43      	ldr	r3, [pc, #268]	@ (800a028 <MX_LWIP_Init+0x264>)
 8009f1a:	789b      	ldrb	r3, [r3, #2]
 8009f1c:	021b      	lsls	r3, r3, #8
 8009f1e:	430b      	orrs	r3, r1
 8009f20:	4941      	ldr	r1, [pc, #260]	@ (800a028 <MX_LWIP_Init+0x264>)
 8009f22:	78c9      	ldrb	r1, [r1, #3]
 8009f24:	430b      	orrs	r3, r1
 8009f26:	0e1b      	lsrs	r3, r3, #24
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	4a42      	ldr	r2, [pc, #264]	@ (800a034 <MX_LWIP_Init+0x270>)
 8009f2c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009f2e:	4b3f      	ldr	r3, [pc, #252]	@ (800a02c <MX_LWIP_Init+0x268>)
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	061a      	lsls	r2, r3, #24
 8009f34:	4b3d      	ldr	r3, [pc, #244]	@ (800a02c <MX_LWIP_Init+0x268>)
 8009f36:	785b      	ldrb	r3, [r3, #1]
 8009f38:	041b      	lsls	r3, r3, #16
 8009f3a:	431a      	orrs	r2, r3
 8009f3c:	4b3b      	ldr	r3, [pc, #236]	@ (800a02c <MX_LWIP_Init+0x268>)
 8009f3e:	789b      	ldrb	r3, [r3, #2]
 8009f40:	021b      	lsls	r3, r3, #8
 8009f42:	4313      	orrs	r3, r2
 8009f44:	4a39      	ldr	r2, [pc, #228]	@ (800a02c <MX_LWIP_Init+0x268>)
 8009f46:	78d2      	ldrb	r2, [r2, #3]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	061a      	lsls	r2, r3, #24
 8009f4c:	4b37      	ldr	r3, [pc, #220]	@ (800a02c <MX_LWIP_Init+0x268>)
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	0619      	lsls	r1, r3, #24
 8009f52:	4b36      	ldr	r3, [pc, #216]	@ (800a02c <MX_LWIP_Init+0x268>)
 8009f54:	785b      	ldrb	r3, [r3, #1]
 8009f56:	041b      	lsls	r3, r3, #16
 8009f58:	4319      	orrs	r1, r3
 8009f5a:	4b34      	ldr	r3, [pc, #208]	@ (800a02c <MX_LWIP_Init+0x268>)
 8009f5c:	789b      	ldrb	r3, [r3, #2]
 8009f5e:	021b      	lsls	r3, r3, #8
 8009f60:	430b      	orrs	r3, r1
 8009f62:	4932      	ldr	r1, [pc, #200]	@ (800a02c <MX_LWIP_Init+0x268>)
 8009f64:	78c9      	ldrb	r1, [r1, #3]
 8009f66:	430b      	orrs	r3, r1
 8009f68:	021b      	lsls	r3, r3, #8
 8009f6a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009f6e:	431a      	orrs	r2, r3
 8009f70:	4b2e      	ldr	r3, [pc, #184]	@ (800a02c <MX_LWIP_Init+0x268>)
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	0619      	lsls	r1, r3, #24
 8009f76:	4b2d      	ldr	r3, [pc, #180]	@ (800a02c <MX_LWIP_Init+0x268>)
 8009f78:	785b      	ldrb	r3, [r3, #1]
 8009f7a:	041b      	lsls	r3, r3, #16
 8009f7c:	4319      	orrs	r1, r3
 8009f7e:	4b2b      	ldr	r3, [pc, #172]	@ (800a02c <MX_LWIP_Init+0x268>)
 8009f80:	789b      	ldrb	r3, [r3, #2]
 8009f82:	021b      	lsls	r3, r3, #8
 8009f84:	430b      	orrs	r3, r1
 8009f86:	4929      	ldr	r1, [pc, #164]	@ (800a02c <MX_LWIP_Init+0x268>)
 8009f88:	78c9      	ldrb	r1, [r1, #3]
 8009f8a:	430b      	orrs	r3, r1
 8009f8c:	0a1b      	lsrs	r3, r3, #8
 8009f8e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009f92:	431a      	orrs	r2, r3
 8009f94:	4b25      	ldr	r3, [pc, #148]	@ (800a02c <MX_LWIP_Init+0x268>)
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	0619      	lsls	r1, r3, #24
 8009f9a:	4b24      	ldr	r3, [pc, #144]	@ (800a02c <MX_LWIP_Init+0x268>)
 8009f9c:	785b      	ldrb	r3, [r3, #1]
 8009f9e:	041b      	lsls	r3, r3, #16
 8009fa0:	4319      	orrs	r1, r3
 8009fa2:	4b22      	ldr	r3, [pc, #136]	@ (800a02c <MX_LWIP_Init+0x268>)
 8009fa4:	789b      	ldrb	r3, [r3, #2]
 8009fa6:	021b      	lsls	r3, r3, #8
 8009fa8:	430b      	orrs	r3, r1
 8009faa:	4920      	ldr	r1, [pc, #128]	@ (800a02c <MX_LWIP_Init+0x268>)
 8009fac:	78c9      	ldrb	r1, [r1, #3]
 8009fae:	430b      	orrs	r3, r1
 8009fb0:	0e1b      	lsrs	r3, r3, #24
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	4a20      	ldr	r2, [pc, #128]	@ (800a038 <MX_LWIP_Init+0x274>)
 8009fb6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009fb8:	4b20      	ldr	r3, [pc, #128]	@ (800a03c <MX_LWIP_Init+0x278>)
 8009fba:	9302      	str	r3, [sp, #8]
 8009fbc:	4b20      	ldr	r3, [pc, #128]	@ (800a040 <MX_LWIP_Init+0x27c>)
 8009fbe:	9301      	str	r3, [sp, #4]
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	9300      	str	r3, [sp, #0]
 8009fc4:	4b1c      	ldr	r3, [pc, #112]	@ (800a038 <MX_LWIP_Init+0x274>)
 8009fc6:	4a1b      	ldr	r2, [pc, #108]	@ (800a034 <MX_LWIP_Init+0x270>)
 8009fc8:	4919      	ldr	r1, [pc, #100]	@ (800a030 <MX_LWIP_Init+0x26c>)
 8009fca:	481e      	ldr	r0, [pc, #120]	@ (800a044 <MX_LWIP_Init+0x280>)
 8009fcc:	f005 fd5c 	bl	800fa88 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009fd0:	481c      	ldr	r0, [pc, #112]	@ (800a044 <MX_LWIP_Init+0x280>)
 8009fd2:	f005 ff0b 	bl	800fdec <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8009fd6:	481b      	ldr	r0, [pc, #108]	@ (800a044 <MX_LWIP_Init+0x280>)
 8009fd8:	f005 ff18 	bl	800fe0c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009fdc:	491a      	ldr	r1, [pc, #104]	@ (800a048 <MX_LWIP_Init+0x284>)
 8009fde:	4819      	ldr	r0, [pc, #100]	@ (800a044 <MX_LWIP_Init+0x280>)
 8009fe0:	f006 f816 	bl	8010010 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8009fe4:	2224      	movs	r2, #36	@ 0x24
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	4818      	ldr	r0, [pc, #96]	@ (800a04c <MX_LWIP_Init+0x288>)
 8009fea:	f010 f965 	bl	801a2b8 <memset>
  attributes.name = "EthLink";
 8009fee:	4b17      	ldr	r3, [pc, #92]	@ (800a04c <MX_LWIP_Init+0x288>)
 8009ff0:	4a17      	ldr	r2, [pc, #92]	@ (800a050 <MX_LWIP_Init+0x28c>)
 8009ff2:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8009ff4:	4b15      	ldr	r3, [pc, #84]	@ (800a04c <MX_LWIP_Init+0x288>)
 8009ff6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009ffa:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8009ffc:	4b13      	ldr	r3, [pc, #76]	@ (800a04c <MX_LWIP_Init+0x288>)
 8009ffe:	2210      	movs	r2, #16
 800a000:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800a002:	4a12      	ldr	r2, [pc, #72]	@ (800a04c <MX_LWIP_Init+0x288>)
 800a004:	490f      	ldr	r1, [pc, #60]	@ (800a044 <MX_LWIP_Init+0x280>)
 800a006:	4813      	ldr	r0, [pc, #76]	@ (800a054 <MX_LWIP_Init+0x290>)
 800a008:	f000 fdda 	bl	800abc0 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */
  printf("IP: %s\n", ipaddr_ntoa(&gnetif.ip_addr));
 800a00c:	4812      	ldr	r0, [pc, #72]	@ (800a058 <MX_LWIP_Init+0x294>)
 800a00e:	f00e f943 	bl	8018298 <ip4addr_ntoa>
 800a012:	4603      	mov	r3, r0
 800a014:	4619      	mov	r1, r3
 800a016:	4811      	ldr	r0, [pc, #68]	@ (800a05c <MX_LWIP_Init+0x298>)
 800a018:	f00f fff6 	bl	801a008 <iprintf>
/* USER CODE END 3 */
}
 800a01c:	bf00      	nop
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	20000b70 	.word	0x20000b70
 800a028:	20000b74 	.word	0x20000b74
 800a02c:	20000b78 	.word	0x20000b78
 800a030:	20000b64 	.word	0x20000b64
 800a034:	20000b68 	.word	0x20000b68
 800a038:	20000b6c 	.word	0x20000b6c
 800a03c:	0800ee39 	.word	0x0800ee39
 800a040:	0800a5a1 	.word	0x0800a5a1
 800a044:	20000b30 	.word	0x20000b30
 800a048:	0800a061 	.word	0x0800a061
 800a04c:	20000b7c 	.word	0x20000b7c
 800a050:	0801b204 	.word	0x0801b204
 800a054:	0800a879 	.word	0x0800a879
 800a058:	20000b34 	.word	0x20000b34
 800a05c:	0801b20c 	.word	0x0801b20c

0800a060 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800a068:	bf00      	nop
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800a074:	b480      	push	{r7}
 800a076:	b087      	sub	sp, #28
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800a086:	2320      	movs	r3, #32
 800a088:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a08a:	f3bf 8f4f 	dsb	sy
}
 800a08e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800a090:	e00b      	b.n	800a0aa <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800a092:	4a0d      	ldr	r2, [pc, #52]	@ (800a0c8 <SCB_InvalidateDCache_by_Addr+0x54>)
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	693a      	ldr	r2, [r7, #16]
 800a09e:	4413      	add	r3, r2
 800a0a0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800a0a2:	697a      	ldr	r2, [r7, #20]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	dcf0      	bgt.n	800a092 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800a0b0:	f3bf 8f4f 	dsb	sy
}
 800a0b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a0b6:	f3bf 8f6f 	isb	sy
}
 800a0ba:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800a0bc:	bf00      	nop
 800a0be:	371c      	adds	r7, #28
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr
 800a0c8:	e000ed00 	.word	0xe000ed00

0800a0cc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800a0d4:	4b04      	ldr	r3, [pc, #16]	@ (800a0e8 <HAL_ETH_RxCpltCallback+0x1c>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f001 f88f 	bl	800b1fc <osSemaphoreRelease>
}
 800a0de:	bf00      	nop
 800a0e0:	3708      	adds	r7, #8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	20009eac 	.word	0x20009eac

0800a0ec <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800a0f4:	4b04      	ldr	r3, [pc, #16]	@ (800a108 <HAL_ETH_TxCpltCallback+0x1c>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f001 f87f 	bl	800b1fc <osSemaphoreRelease>
}
 800a0fe:	bf00      	nop
 800a100:	3708      	adds	r7, #8
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	20009eb0 	.word	0x20009eb0

0800a10c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7f9 fc5a 	bl	80039ce <HAL_ETH_GetDMAError>
 800a11a:	4603      	mov	r3, r0
 800a11c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a120:	2b80      	cmp	r3, #128	@ 0x80
 800a122:	d104      	bne.n	800a12e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800a124:	4b04      	ldr	r3, [pc, #16]	@ (800a138 <HAL_ETH_ErrorCallback+0x2c>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4618      	mov	r0, r3
 800a12a:	f001 f867 	bl	800b1fc <osSemaphoreRelease>
  }
}
 800a12e:	bf00      	nop
 800a130:	3708      	adds	r7, #8
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	20009eac 	.word	0x20009eac

0800a13c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b0aa      	sub	sp, #168	@ 0xa8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800a14a:	2300      	movs	r3, #0
 800a14c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800a150:	2300      	movs	r3, #0
 800a152:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800a156:	f107 0310 	add.w	r3, r7, #16
 800a15a:	2264      	movs	r2, #100	@ 0x64
 800a15c:	2100      	movs	r1, #0
 800a15e:	4618      	mov	r0, r3
 800a160:	f010 f8aa 	bl	801a2b8 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a164:	4b89      	ldr	r3, [pc, #548]	@ (800a38c <low_level_init+0x250>)
 800a166:	4a8a      	ldr	r2, [pc, #552]	@ (800a390 <low_level_init+0x254>)
 800a168:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a16a:	2300      	movs	r3, #0
 800a16c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800a16e:	2380      	movs	r3, #128	@ 0x80
 800a170:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800a172:	23e1      	movs	r3, #225	@ 0xe1
 800a174:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800a176:	2300      	movs	r3, #0
 800a178:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800a17a:	2300      	movs	r3, #0
 800a17c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800a17e:	2300      	movs	r3, #0
 800a180:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a182:	4a82      	ldr	r2, [pc, #520]	@ (800a38c <low_level_init+0x250>)
 800a184:	f107 0308 	add.w	r3, r7, #8
 800a188:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a18a:	4b80      	ldr	r3, [pc, #512]	@ (800a38c <low_level_init+0x250>)
 800a18c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800a190:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a192:	4b7e      	ldr	r3, [pc, #504]	@ (800a38c <low_level_init+0x250>)
 800a194:	4a7f      	ldr	r2, [pc, #508]	@ (800a394 <low_level_init+0x258>)
 800a196:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a198:	4b7c      	ldr	r3, [pc, #496]	@ (800a38c <low_level_init+0x250>)
 800a19a:	4a7f      	ldr	r2, [pc, #508]	@ (800a398 <low_level_init+0x25c>)
 800a19c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800a19e:	4b7b      	ldr	r3, [pc, #492]	@ (800a38c <low_level_init+0x250>)
 800a1a0:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800a1a4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a1a6:	4879      	ldr	r0, [pc, #484]	@ (800a38c <low_level_init+0x250>)
 800a1a8:	f7f8 fdc8 	bl	8002d3c <HAL_ETH_Init>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a1b2:	2238      	movs	r2, #56	@ 0x38
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	4879      	ldr	r0, [pc, #484]	@ (800a39c <low_level_init+0x260>)
 800a1b8:	f010 f87e 	bl	801a2b8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a1bc:	4b77      	ldr	r3, [pc, #476]	@ (800a39c <low_level_init+0x260>)
 800a1be:	2221      	movs	r2, #33	@ 0x21
 800a1c0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a1c2:	4b76      	ldr	r3, [pc, #472]	@ (800a39c <low_level_init+0x260>)
 800a1c4:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800a1c8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a1ca:	4b74      	ldr	r3, [pc, #464]	@ (800a39c <low_level_init+0x260>)
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a1d0:	4873      	ldr	r0, [pc, #460]	@ (800a3a0 <low_level_init+0x264>)
 800a1d2:	f005 fb13 	bl	800f7fc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2206      	movs	r2, #6
 800a1da:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a1de:	4b6b      	ldr	r3, [pc, #428]	@ (800a38c <low_level_init+0x250>)
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	781a      	ldrb	r2, [r3, #0]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a1ea:	4b68      	ldr	r3, [pc, #416]	@ (800a38c <low_level_init+0x250>)
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	785a      	ldrb	r2, [r3, #1]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a1f6:	4b65      	ldr	r3, [pc, #404]	@ (800a38c <low_level_init+0x250>)
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	789a      	ldrb	r2, [r3, #2]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a202:	4b62      	ldr	r3, [pc, #392]	@ (800a38c <low_level_init+0x250>)
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	78da      	ldrb	r2, [r3, #3]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a20e:	4b5f      	ldr	r3, [pc, #380]	@ (800a38c <low_level_init+0x250>)
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	791a      	ldrb	r2, [r3, #4]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a21a:	4b5c      	ldr	r3, [pc, #368]	@ (800a38c <low_level_init+0x250>)
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	795a      	ldrb	r2, [r3, #5]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800a22c:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a234:	f043 030a 	orr.w	r3, r3, #10
 800a238:	b2da      	uxtb	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800a240:	2200      	movs	r2, #0
 800a242:	2100      	movs	r1, #0
 800a244:	2001      	movs	r0, #1
 800a246:	f000 fed7 	bl	800aff8 <osSemaphoreNew>
 800a24a:	4603      	mov	r3, r0
 800a24c:	4a55      	ldr	r2, [pc, #340]	@ (800a3a4 <low_level_init+0x268>)
 800a24e:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800a250:	2200      	movs	r2, #0
 800a252:	2100      	movs	r1, #0
 800a254:	2001      	movs	r0, #1
 800a256:	f000 fecf 	bl	800aff8 <osSemaphoreNew>
 800a25a:	4603      	mov	r3, r0
 800a25c:	4a52      	ldr	r2, [pc, #328]	@ (800a3a8 <low_level_init+0x26c>)
 800a25e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800a260:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800a264:	2224      	movs	r2, #36	@ 0x24
 800a266:	2100      	movs	r1, #0
 800a268:	4618      	mov	r0, r3
 800a26a:	f010 f825 	bl	801a2b8 <memset>
  attributes.name = "EthIf";
 800a26e:	4b4f      	ldr	r3, [pc, #316]	@ (800a3ac <low_level_init+0x270>)
 800a270:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800a272:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a276:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800a27a:	2330      	movs	r3, #48	@ 0x30
 800a27c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800a280:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800a284:	461a      	mov	r2, r3
 800a286:	6879      	ldr	r1, [r7, #4]
 800a288:	4849      	ldr	r0, [pc, #292]	@ (800a3b0 <low_level_init+0x274>)
 800a28a:	f000 fc99 	bl	800abc0 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a28e:	4949      	ldr	r1, [pc, #292]	@ (800a3b4 <low_level_init+0x278>)
 800a290:	4849      	ldr	r0, [pc, #292]	@ (800a3b8 <low_level_init+0x27c>)
 800a292:	f7f7 fcec 	bl	8001c6e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800a296:	4848      	ldr	r0, [pc, #288]	@ (800a3b8 <low_level_init+0x27c>)
 800a298:	f7f7 fd1b 	bl	8001cd2 <LAN8742_Init>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d006      	beq.n	800a2b0 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f005 fe84 	bl	800ffb0 <netif_set_link_down>
    netif_set_down(netif);
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f005 fe1b 	bl	800fee4 <netif_set_down>
 800a2ae:	e06a      	b.n	800a386 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800a2b0:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d164      	bne.n	800a382 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a2b8:	483f      	ldr	r0, [pc, #252]	@ (800a3b8 <low_level_init+0x27c>)
 800a2ba:	f7f7 fd57 	bl	8001d6c <LAN8742_GetLinkState>
 800a2be:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800a2c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	dc06      	bgt.n	800a2d8 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f005 fe70 	bl	800ffb0 <netif_set_link_down>
      netif_set_down(netif);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f005 fe07 	bl	800fee4 <netif_set_down>
 800a2d6:	e056      	b.n	800a386 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800a2d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a2dc:	3b02      	subs	r3, #2
 800a2de:	2b03      	cmp	r3, #3
 800a2e0:	d82a      	bhi.n	800a338 <low_level_init+0x1fc>
 800a2e2:	a201      	add	r2, pc, #4	@ (adr r2, 800a2e8 <low_level_init+0x1ac>)
 800a2e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e8:	0800a2f9 	.word	0x0800a2f9
 800a2ec:	0800a30b 	.word	0x0800a30b
 800a2f0:	0800a31b 	.word	0x0800a31b
 800a2f4:	0800a32b 	.word	0x0800a32b
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800a2f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a2fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800a300:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a304:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800a308:	e01f      	b.n	800a34a <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800a30a:	2300      	movs	r3, #0
 800a30c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800a310:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a314:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800a318:	e017      	b.n	800a34a <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800a31a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a31e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800a322:	2300      	movs	r3, #0
 800a324:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800a328:	e00f      	b.n	800a34a <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800a32a:	2300      	movs	r3, #0
 800a32c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800a330:	2300      	movs	r3, #0
 800a332:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800a336:	e008      	b.n	800a34a <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800a338:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a33c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800a340:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a344:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800a348:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a34a:	f107 0310 	add.w	r3, r7, #16
 800a34e:	4619      	mov	r1, r3
 800a350:	480e      	ldr	r0, [pc, #56]	@ (800a38c <low_level_init+0x250>)
 800a352:	f7f9 f9db 	bl	800370c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800a356:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a35a:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800a35c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a360:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a362:	f107 0310 	add.w	r3, r7, #16
 800a366:	4619      	mov	r1, r3
 800a368:	4808      	ldr	r0, [pc, #32]	@ (800a38c <low_level_init+0x250>)
 800a36a:	f7f9 fac6 	bl	80038fa <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800a36e:	4807      	ldr	r0, [pc, #28]	@ (800a38c <low_level_init+0x250>)
 800a370:	f7f8 fd7e 	bl	8002e70 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f005 fd49 	bl	800fe0c <netif_set_up>
    netif_set_link_up(netif);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f005 fde4 	bl	800ff48 <netif_set_link_up>
 800a380:	e001      	b.n	800a386 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800a382:	f7f6 fe7b 	bl	800107c <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800a386:	37a8      	adds	r7, #168	@ 0xa8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	20009eb4 	.word	0x20009eb4
 800a390:	40028000 	.word	0x40028000
 800a394:	2000012c 	.word	0x2000012c
 800a398:	2000008c 	.word	0x2000008c
 800a39c:	20009f64 	.word	0x20009f64
 800a3a0:	0801e19c 	.word	0x0801e19c
 800a3a4:	20009eac 	.word	0x20009eac
 800a3a8:	20009eb0 	.word	0x20009eb0
 800a3ac:	0801b214 	.word	0x0801b214
 800a3b0:	0800a54d 	.word	0x0800a54d
 800a3b4:	2000000c 	.word	0x2000000c
 800a3b8:	20009f9c 	.word	0x20009f9c

0800a3bc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b092      	sub	sp, #72	@ 0x48
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800a3d4:	f107 030c 	add.w	r3, r7, #12
 800a3d8:	2230      	movs	r2, #48	@ 0x30
 800a3da:	2100      	movs	r1, #0
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f00f ff6b 	bl	801a2b8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a3e2:	f107 030c 	add.w	r3, r7, #12
 800a3e6:	2230      	movs	r2, #48	@ 0x30
 800a3e8:	2100      	movs	r1, #0
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f00f ff64 	bl	801a2b8 <memset>

  for(q = p; q != NULL; q = q->next)
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a3f4:	e045      	b.n	800a482 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a3f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a3f8:	2b03      	cmp	r3, #3
 800a3fa:	d902      	bls.n	800a402 <low_level_output+0x46>
      return ERR_IF;
 800a3fc:	f06f 030b 	mvn.w	r3, #11
 800a400:	e07f      	b.n	800a502 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800a402:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a404:	6859      	ldr	r1, [r3, #4]
 800a406:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a408:	4613      	mov	r3, r2
 800a40a:	005b      	lsls	r3, r3, #1
 800a40c:	4413      	add	r3, r2
 800a40e:	009b      	lsls	r3, r3, #2
 800a410:	3348      	adds	r3, #72	@ 0x48
 800a412:	443b      	add	r3, r7
 800a414:	3b3c      	subs	r3, #60	@ 0x3c
 800a416:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a41a:	895b      	ldrh	r3, [r3, #10]
 800a41c:	4619      	mov	r1, r3
 800a41e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a420:	4613      	mov	r3, r2
 800a422:	005b      	lsls	r3, r3, #1
 800a424:	4413      	add	r3, r2
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	3348      	adds	r3, #72	@ 0x48
 800a42a:	443b      	add	r3, r7
 800a42c:	3b38      	subs	r3, #56	@ 0x38
 800a42e:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a432:	2b00      	cmp	r3, #0
 800a434:	d011      	beq.n	800a45a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a438:	1e5a      	subs	r2, r3, #1
 800a43a:	f107 000c 	add.w	r0, r7, #12
 800a43e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a440:	460b      	mov	r3, r1
 800a442:	005b      	lsls	r3, r3, #1
 800a444:	440b      	add	r3, r1
 800a446:	009b      	lsls	r3, r3, #2
 800a448:	18c1      	adds	r1, r0, r3
 800a44a:	4613      	mov	r3, r2
 800a44c:	005b      	lsls	r3, r3, #1
 800a44e:	4413      	add	r3, r2
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	3348      	adds	r3, #72	@ 0x48
 800a454:	443b      	add	r3, r7
 800a456:	3b34      	subs	r3, #52	@ 0x34
 800a458:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a45a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d109      	bne.n	800a476 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800a462:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a464:	4613      	mov	r3, r2
 800a466:	005b      	lsls	r3, r3, #1
 800a468:	4413      	add	r3, r2
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	3348      	adds	r3, #72	@ 0x48
 800a46e:	443b      	add	r3, r7
 800a470:	3b34      	subs	r3, #52	@ 0x34
 800a472:	2200      	movs	r2, #0
 800a474:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a476:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a478:	3301      	adds	r3, #1
 800a47a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800a47c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	643b      	str	r3, [r7, #64]	@ 0x40
 800a482:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a484:	2b00      	cmp	r3, #0
 800a486:	d1b6      	bne.n	800a3f6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	891b      	ldrh	r3, [r3, #8]
 800a48c:	461a      	mov	r2, r3
 800a48e:	4b1f      	ldr	r3, [pc, #124]	@ (800a50c <low_level_output+0x150>)
 800a490:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a492:	4a1e      	ldr	r2, [pc, #120]	@ (800a50c <low_level_output+0x150>)
 800a494:	f107 030c 	add.w	r3, r7, #12
 800a498:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800a49a:	4a1c      	ldr	r2, [pc, #112]	@ (800a50c <low_level_output+0x150>)
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800a4a0:	6838      	ldr	r0, [r7, #0]
 800a4a2:	f006 fa09 	bl	80108b8 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800a4a6:	4919      	ldr	r1, [pc, #100]	@ (800a50c <low_level_output+0x150>)
 800a4a8:	4819      	ldr	r0, [pc, #100]	@ (800a510 <low_level_output+0x154>)
 800a4aa:	f7f8 fdd1 	bl	8003050 <HAL_ETH_Transmit_IT>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d103      	bne.n	800a4bc <low_level_output+0x100>
    {
      errval = ERR_OK;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a4ba:	e01b      	b.n	800a4f4 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800a4bc:	4814      	ldr	r0, [pc, #80]	@ (800a510 <low_level_output+0x154>)
 800a4be:	f7f9 fa79 	bl	80039b4 <HAL_ETH_GetError>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	f003 0302 	and.w	r3, r3, #2
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d00d      	beq.n	800a4e8 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800a4cc:	4b11      	ldr	r3, [pc, #68]	@ (800a514 <low_level_output+0x158>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f000 fe2b 	bl	800b130 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800a4da:	480d      	ldr	r0, [pc, #52]	@ (800a510 <low_level_output+0x154>)
 800a4dc:	f7f8 ff58 	bl	8003390 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800a4e0:	23fe      	movs	r3, #254	@ 0xfe
 800a4e2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a4e6:	e005      	b.n	800a4f4 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800a4e8:	6838      	ldr	r0, [r7, #0]
 800a4ea:	f006 f93f 	bl	801076c <pbuf_free>
        errval =  ERR_IF;
 800a4ee:	23f4      	movs	r3, #244	@ 0xf4
 800a4f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800a4f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a4f8:	f113 0f02 	cmn.w	r3, #2
 800a4fc:	d0d3      	beq.n	800a4a6 <low_level_output+0xea>

  return errval;
 800a4fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800a502:	4618      	mov	r0, r3
 800a504:	3748      	adds	r7, #72	@ 0x48
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	20009f64 	.word	0x20009f64
 800a510:	20009eb4 	.word	0x20009eb4
 800a514:	20009eb0 	.word	0x20009eb0

0800a518 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a520:	2300      	movs	r3, #0
 800a522:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800a524:	4b07      	ldr	r3, [pc, #28]	@ (800a544 <low_level_input+0x2c>)
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d105      	bne.n	800a538 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800a52c:	f107 030c 	add.w	r3, r7, #12
 800a530:	4619      	mov	r1, r3
 800a532:	4805      	ldr	r0, [pc, #20]	@ (800a548 <low_level_input+0x30>)
 800a534:	f7f8 fde8 	bl	8003108 <HAL_ETH_ReadData>
  }

  return p;
 800a538:	68fb      	ldr	r3, [r7, #12]
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	20009ea8 	.word	0x20009ea8
 800a548:	20009eb4 	.word	0x20009eb4

0800a54c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a554:	2300      	movs	r3, #0
 800a556:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a55c:	4b0f      	ldr	r3, [pc, #60]	@ (800a59c <ethernetif_input+0x50>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f04f 31ff 	mov.w	r1, #4294967295
 800a564:	4618      	mov	r0, r3
 800a566:	f000 fde3 	bl	800b130 <osSemaphoreAcquire>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1f5      	bne.n	800a55c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800a570:	68b8      	ldr	r0, [r7, #8]
 800a572:	f7ff ffd1 	bl	800a518 <low_level_input>
 800a576:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00a      	beq.n	800a594 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	691b      	ldr	r3, [r3, #16]
 800a582:	68b9      	ldr	r1, [r7, #8]
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	4798      	blx	r3
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d002      	beq.n	800a594 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f006 f8ec 	bl	801076c <pbuf_free>
          }
        }
      } while(p!=NULL);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d1ea      	bne.n	800a570 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a59a:	e7df      	b.n	800a55c <ethernetif_input+0x10>
 800a59c:	20009eac 	.word	0x20009eac

0800a5a0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d106      	bne.n	800a5bc <ethernetif_init+0x1c>
 800a5ae:	4b0e      	ldr	r3, [pc, #56]	@ (800a5e8 <ethernetif_init+0x48>)
 800a5b0:	f240 220d 	movw	r2, #525	@ 0x20d
 800a5b4:	490d      	ldr	r1, [pc, #52]	@ (800a5ec <ethernetif_init+0x4c>)
 800a5b6:	480e      	ldr	r0, [pc, #56]	@ (800a5f0 <ethernetif_init+0x50>)
 800a5b8:	f00f fd26 	bl	801a008 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2273      	movs	r2, #115	@ 0x73
 800a5c0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2274      	movs	r2, #116	@ 0x74
 800a5c8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4a09      	ldr	r2, [pc, #36]	@ (800a5f4 <ethernetif_init+0x54>)
 800a5d0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4a08      	ldr	r2, [pc, #32]	@ (800a5f8 <ethernetif_init+0x58>)
 800a5d6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7ff fdaf 	bl	800a13c <low_level_init>

  return ERR_OK;
 800a5de:	2300      	movs	r3, #0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	0801b21c 	.word	0x0801b21c
 800a5ec:	0801b238 	.word	0x0801b238
 800a5f0:	0801b248 	.word	0x0801b248
 800a5f4:	080173cd 	.word	0x080173cd
 800a5f8:	0800a3bd 	.word	0x0800a3bd

0800a5fc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a608:	68f9      	ldr	r1, [r7, #12]
 800a60a:	4809      	ldr	r0, [pc, #36]	@ (800a630 <pbuf_free_custom+0x34>)
 800a60c:	f005 f9e6 	bl	800f9dc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800a610:	4b08      	ldr	r3, [pc, #32]	@ (800a634 <pbuf_free_custom+0x38>)
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	2b01      	cmp	r3, #1
 800a616:	d107      	bne.n	800a628 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800a618:	4b06      	ldr	r3, [pc, #24]	@ (800a634 <pbuf_free_custom+0x38>)
 800a61a:	2200      	movs	r2, #0
 800a61c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800a61e:	4b06      	ldr	r3, [pc, #24]	@ (800a638 <pbuf_free_custom+0x3c>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4618      	mov	r0, r3
 800a624:	f000 fdea 	bl	800b1fc <osSemaphoreRelease>
  }
}
 800a628:	bf00      	nop
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	0801e19c 	.word	0x0801e19c
 800a634:	20009ea8 	.word	0x20009ea8
 800a638:	20009eac 	.word	0x20009eac

0800a63c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a640:	f7f7 fc3c 	bl	8001ebc <HAL_GetTick>
 800a644:	4603      	mov	r3, r0
}
 800a646:	4618      	mov	r0, r3
 800a648:	bd80      	pop	{r7, pc}
	...

0800a64c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b08e      	sub	sp, #56	@ 0x38
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a658:	2200      	movs	r2, #0
 800a65a:	601a      	str	r2, [r3, #0]
 800a65c:	605a      	str	r2, [r3, #4]
 800a65e:	609a      	str	r2, [r3, #8]
 800a660:	60da      	str	r2, [r3, #12]
 800a662:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a56      	ldr	r2, [pc, #344]	@ (800a7c4 <HAL_ETH_MspInit+0x178>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	f040 80a6 	bne.w	800a7bc <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a670:	4b55      	ldr	r3, [pc, #340]	@ (800a7c8 <HAL_ETH_MspInit+0x17c>)
 800a672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a674:	4a54      	ldr	r2, [pc, #336]	@ (800a7c8 <HAL_ETH_MspInit+0x17c>)
 800a676:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a67a:	6313      	str	r3, [r2, #48]	@ 0x30
 800a67c:	4b52      	ldr	r3, [pc, #328]	@ (800a7c8 <HAL_ETH_MspInit+0x17c>)
 800a67e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a684:	623b      	str	r3, [r7, #32]
 800a686:	6a3b      	ldr	r3, [r7, #32]
 800a688:	4b4f      	ldr	r3, [pc, #316]	@ (800a7c8 <HAL_ETH_MspInit+0x17c>)
 800a68a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a68c:	4a4e      	ldr	r2, [pc, #312]	@ (800a7c8 <HAL_ETH_MspInit+0x17c>)
 800a68e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a692:	6313      	str	r3, [r2, #48]	@ 0x30
 800a694:	4b4c      	ldr	r3, [pc, #304]	@ (800a7c8 <HAL_ETH_MspInit+0x17c>)
 800a696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a698:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a69c:	61fb      	str	r3, [r7, #28]
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	4b49      	ldr	r3, [pc, #292]	@ (800a7c8 <HAL_ETH_MspInit+0x17c>)
 800a6a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6a4:	4a48      	ldr	r2, [pc, #288]	@ (800a7c8 <HAL_ETH_MspInit+0x17c>)
 800a6a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a6aa:	6313      	str	r3, [r2, #48]	@ 0x30
 800a6ac:	4b46      	ldr	r3, [pc, #280]	@ (800a7c8 <HAL_ETH_MspInit+0x17c>)
 800a6ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6b4:	61bb      	str	r3, [r7, #24]
 800a6b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a6b8:	4b43      	ldr	r3, [pc, #268]	@ (800a7c8 <HAL_ETH_MspInit+0x17c>)
 800a6ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6bc:	4a42      	ldr	r2, [pc, #264]	@ (800a7c8 <HAL_ETH_MspInit+0x17c>)
 800a6be:	f043 0304 	orr.w	r3, r3, #4
 800a6c2:	6313      	str	r3, [r2, #48]	@ 0x30
 800a6c4:	4b40      	ldr	r3, [pc, #256]	@ (800a7c8 <HAL_ETH_MspInit+0x17c>)
 800a6c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6c8:	f003 0304 	and.w	r3, r3, #4
 800a6cc:	617b      	str	r3, [r7, #20]
 800a6ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6d0:	4b3d      	ldr	r3, [pc, #244]	@ (800a7c8 <HAL_ETH_MspInit+0x17c>)
 800a6d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6d4:	4a3c      	ldr	r2, [pc, #240]	@ (800a7c8 <HAL_ETH_MspInit+0x17c>)
 800a6d6:	f043 0301 	orr.w	r3, r3, #1
 800a6da:	6313      	str	r3, [r2, #48]	@ 0x30
 800a6dc:	4b3a      	ldr	r3, [pc, #232]	@ (800a7c8 <HAL_ETH_MspInit+0x17c>)
 800a6de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6e0:	f003 0301 	and.w	r3, r3, #1
 800a6e4:	613b      	str	r3, [r7, #16]
 800a6e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a6e8:	4b37      	ldr	r3, [pc, #220]	@ (800a7c8 <HAL_ETH_MspInit+0x17c>)
 800a6ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6ec:	4a36      	ldr	r2, [pc, #216]	@ (800a7c8 <HAL_ETH_MspInit+0x17c>)
 800a6ee:	f043 0302 	orr.w	r3, r3, #2
 800a6f2:	6313      	str	r3, [r2, #48]	@ 0x30
 800a6f4:	4b34      	ldr	r3, [pc, #208]	@ (800a7c8 <HAL_ETH_MspInit+0x17c>)
 800a6f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6f8:	f003 0302 	and.w	r3, r3, #2
 800a6fc:	60fb      	str	r3, [r7, #12]
 800a6fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a700:	4b31      	ldr	r3, [pc, #196]	@ (800a7c8 <HAL_ETH_MspInit+0x17c>)
 800a702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a704:	4a30      	ldr	r2, [pc, #192]	@ (800a7c8 <HAL_ETH_MspInit+0x17c>)
 800a706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a70a:	6313      	str	r3, [r2, #48]	@ 0x30
 800a70c:	4b2e      	ldr	r3, [pc, #184]	@ (800a7c8 <HAL_ETH_MspInit+0x17c>)
 800a70e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a714:	60bb      	str	r3, [r7, #8]
 800a716:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a718:	2332      	movs	r3, #50	@ 0x32
 800a71a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a71c:	2302      	movs	r3, #2
 800a71e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a720:	2300      	movs	r3, #0
 800a722:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a724:	2303      	movs	r3, #3
 800a726:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a728:	230b      	movs	r3, #11
 800a72a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a72c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a730:	4619      	mov	r1, r3
 800a732:	4826      	ldr	r0, [pc, #152]	@ (800a7cc <HAL_ETH_MspInit+0x180>)
 800a734:	f7f9 fd78 	bl	8004228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a738:	2386      	movs	r3, #134	@ 0x86
 800a73a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a73c:	2302      	movs	r3, #2
 800a73e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a740:	2300      	movs	r3, #0
 800a742:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a744:	2303      	movs	r3, #3
 800a746:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a748:	230b      	movs	r3, #11
 800a74a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a74c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a750:	4619      	mov	r1, r3
 800a752:	481f      	ldr	r0, [pc, #124]	@ (800a7d0 <HAL_ETH_MspInit+0x184>)
 800a754:	f7f9 fd68 	bl	8004228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a758:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a75c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a75e:	2302      	movs	r3, #2
 800a760:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a762:	2300      	movs	r3, #0
 800a764:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a766:	2303      	movs	r3, #3
 800a768:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a76a:	230b      	movs	r3, #11
 800a76c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a76e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a772:	4619      	mov	r1, r3
 800a774:	4817      	ldr	r0, [pc, #92]	@ (800a7d4 <HAL_ETH_MspInit+0x188>)
 800a776:	f7f9 fd57 	bl	8004228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a77a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800a77e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a780:	2302      	movs	r3, #2
 800a782:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a784:	2300      	movs	r3, #0
 800a786:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a788:	2303      	movs	r3, #3
 800a78a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a78c:	230b      	movs	r3, #11
 800a78e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a790:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a794:	4619      	mov	r1, r3
 800a796:	4810      	ldr	r0, [pc, #64]	@ (800a7d8 <HAL_ETH_MspInit+0x18c>)
 800a798:	f7f9 fd46 	bl	8004228 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800a79c:	2200      	movs	r2, #0
 800a79e:	2105      	movs	r1, #5
 800a7a0:	203d      	movs	r0, #61	@ 0x3d
 800a7a2:	f7f7 fc73 	bl	800208c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a7a6:	203d      	movs	r0, #61	@ 0x3d
 800a7a8:	f7f7 fc8c 	bl	80020c4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	2105      	movs	r1, #5
 800a7b0:	203e      	movs	r0, #62	@ 0x3e
 800a7b2:	f7f7 fc6b 	bl	800208c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800a7b6:	203e      	movs	r0, #62	@ 0x3e
 800a7b8:	f7f7 fc84 	bl	80020c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a7bc:	bf00      	nop
 800a7be:	3738      	adds	r7, #56	@ 0x38
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	40028000 	.word	0x40028000
 800a7c8:	40023800 	.word	0x40023800
 800a7cc:	40020800 	.word	0x40020800
 800a7d0:	40020000 	.word	0x40020000
 800a7d4:	40020400 	.word	0x40020400
 800a7d8:	40021800 	.word	0x40021800

0800a7dc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a7e0:	4802      	ldr	r0, [pc, #8]	@ (800a7ec <ETH_PHY_IO_Init+0x10>)
 800a7e2:	f7f9 f8a5 	bl	8003930 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	20009eb4 	.word	0x20009eb4

0800a7f0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	af00      	add	r7, sp, #0
  return 0;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	68ba      	ldr	r2, [r7, #8]
 800a810:	68f9      	ldr	r1, [r7, #12]
 800a812:	4807      	ldr	r0, [pc, #28]	@ (800a830 <ETH_PHY_IO_ReadReg+0x30>)
 800a814:	f7f8 fee6 	bl	80035e4 <HAL_ETH_ReadPHYRegister>
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d002      	beq.n	800a824 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a81e:	f04f 33ff 	mov.w	r3, #4294967295
 800a822:	e000      	b.n	800a826 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a824:	2300      	movs	r3, #0
}
 800a826:	4618      	mov	r0, r3
 800a828:	3710      	adds	r7, #16
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}
 800a82e:	bf00      	nop
 800a830:	20009eb4 	.word	0x20009eb4

0800a834 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	68ba      	ldr	r2, [r7, #8]
 800a844:	68f9      	ldr	r1, [r7, #12]
 800a846:	4807      	ldr	r0, [pc, #28]	@ (800a864 <ETH_PHY_IO_WriteReg+0x30>)
 800a848:	f7f8 ff17 	bl	800367a <HAL_ETH_WritePHYRegister>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d002      	beq.n	800a858 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a852:	f04f 33ff 	mov.w	r3, #4294967295
 800a856:	e000      	b.n	800a85a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	20009eb4 	.word	0x20009eb4

0800a868 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a86c:	f7f7 fb26 	bl	8001ebc <HAL_GetTick>
 800a870:	4603      	mov	r3, r0
}
 800a872:	4618      	mov	r0, r3
 800a874:	bd80      	pop	{r7, pc}
	...

0800a878 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b0a0      	sub	sp, #128	@ 0x80
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800a880:	f107 0308 	add.w	r3, r7, #8
 800a884:	2264      	movs	r2, #100	@ 0x64
 800a886:	2100      	movs	r1, #0
 800a888:	4618      	mov	r0, r3
 800a88a:	f00f fd15 	bl	801a2b8 <memset>
  int32_t PHYLinkState = 0;
 800a88e:	2300      	movs	r3, #0
 800a890:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800a892:	2300      	movs	r3, #0
 800a894:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a896:	2300      	movs	r3, #0
 800a898:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a89a:	2300      	movs	r3, #0
 800a89c:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a8a2:	483a      	ldr	r0, [pc, #232]	@ (800a98c <ethernet_link_thread+0x114>)
 800a8a4:	f7f7 fa62 	bl	8001d6c <LAN8742_GetLinkState>
 800a8a8:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a8aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a8b0:	089b      	lsrs	r3, r3, #2
 800a8b2:	f003 0301 	and.w	r3, r3, #1
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d00c      	beq.n	800a8d6 <ethernet_link_thread+0x5e>
 800a8bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	dc09      	bgt.n	800a8d6 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800a8c2:	4833      	ldr	r0, [pc, #204]	@ (800a990 <ethernet_link_thread+0x118>)
 800a8c4:	f7f8 fb44 	bl	8002f50 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800a8c8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a8ca:	f005 fb0b 	bl	800fee4 <netif_set_down>
    netif_set_link_down(netif);
 800a8ce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a8d0:	f005 fb6e 	bl	800ffb0 <netif_set_link_down>
 800a8d4:	e055      	b.n	800a982 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a8d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a8d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a8dc:	f003 0304 	and.w	r3, r3, #4
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d14e      	bne.n	800a982 <ethernet_link_thread+0x10a>
 800a8e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	dd4b      	ble.n	800a982 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800a8ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a8ec:	3b02      	subs	r3, #2
 800a8ee:	2b03      	cmp	r3, #3
 800a8f0:	d82a      	bhi.n	800a948 <ethernet_link_thread+0xd0>
 800a8f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a8f8 <ethernet_link_thread+0x80>)
 800a8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f8:	0800a909 	.word	0x0800a909
 800a8fc:	0800a91b 	.word	0x0800a91b
 800a900:	0800a92b 	.word	0x0800a92b
 800a904:	0800a93b 	.word	0x0800a93b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a908:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a90c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800a90e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a912:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a914:	2301      	movs	r3, #1
 800a916:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a918:	e017      	b.n	800a94a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a91a:	2300      	movs	r3, #0
 800a91c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800a91e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a922:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a924:	2301      	movs	r3, #1
 800a926:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a928:	e00f      	b.n	800a94a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800a92a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a92e:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800a930:	2300      	movs	r3, #0
 800a932:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a934:	2301      	movs	r3, #1
 800a936:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a938:	e007      	b.n	800a94a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800a93a:	2300      	movs	r3, #0
 800a93c:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800a93e:	2300      	movs	r3, #0
 800a940:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a942:	2301      	movs	r3, #1
 800a944:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a946:	e000      	b.n	800a94a <ethernet_link_thread+0xd2>
    default:
      break;
 800a948:	bf00      	nop
    }

    if(linkchanged)
 800a94a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d018      	beq.n	800a982 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a950:	f107 0308 	add.w	r3, r7, #8
 800a954:	4619      	mov	r1, r3
 800a956:	480e      	ldr	r0, [pc, #56]	@ (800a990 <ethernet_link_thread+0x118>)
 800a958:	f7f8 fed8 	bl	800370c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a95c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a95e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800a960:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a962:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a964:	f107 0308 	add.w	r3, r7, #8
 800a968:	4619      	mov	r1, r3
 800a96a:	4809      	ldr	r0, [pc, #36]	@ (800a990 <ethernet_link_thread+0x118>)
 800a96c:	f7f8 ffc5 	bl	80038fa <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800a970:	4807      	ldr	r0, [pc, #28]	@ (800a990 <ethernet_link_thread+0x118>)
 800a972:	f7f8 fa7d 	bl	8002e70 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800a976:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a978:	f005 fa48 	bl	800fe0c <netif_set_up>
      netif_set_link_up(netif);
 800a97c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a97e:	f005 fae3 	bl	800ff48 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800a982:	2064      	movs	r0, #100	@ 0x64
 800a984:	f000 f9c2 	bl	800ad0c <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a988:	e78b      	b.n	800a8a2 <ethernet_link_thread+0x2a>
 800a98a:	bf00      	nop
 800a98c:	20009f9c 	.word	0x20009f9c
 800a990:	20009eb4 	.word	0x20009eb4

0800a994 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b086      	sub	sp, #24
 800a998:	af02      	add	r7, sp, #8
 800a99a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a99c:	4812      	ldr	r0, [pc, #72]	@ (800a9e8 <HAL_ETH_RxAllocateCallback+0x54>)
 800a99e:	f004 ffa9 	bl	800f8f4 <memp_malloc_pool>
 800a9a2:	60f8      	str	r0, [r7, #12]
  if (p)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d014      	beq.n	800a9d4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f103 0220 	add.w	r2, r3, #32
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	4a0d      	ldr	r2, [pc, #52]	@ (800a9ec <HAL_ETH_RxAllocateCallback+0x58>)
 800a9b8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800a9c2:	9201      	str	r2, [sp, #4]
 800a9c4:	9300      	str	r3, [sp, #0]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2241      	movs	r2, #65	@ 0x41
 800a9ca:	2100      	movs	r1, #0
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	f005 fd13 	bl	80103f8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800a9d2:	e005      	b.n	800a9e0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800a9d4:	4b06      	ldr	r3, [pc, #24]	@ (800a9f0 <HAL_ETH_RxAllocateCallback+0x5c>)
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2200      	movs	r2, #0
 800a9de:	601a      	str	r2, [r3, #0]
}
 800a9e0:	bf00      	nop
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	0801e19c 	.word	0x0801e19c
 800a9ec:	0800a5fd 	.word	0x0800a5fd
 800a9f0:	20009ea8 	.word	0x20009ea8

0800a9f4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b088      	sub	sp, #32
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	607a      	str	r2, [r7, #4]
 800aa00:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	3b20      	subs	r3, #32
 800aa12:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	2200      	movs	r2, #0
 800aa18:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	887a      	ldrh	r2, [r7, #2]
 800aa24:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d103      	bne.n	800aa36 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800aa2e:	69bb      	ldr	r3, [r7, #24]
 800aa30:	69fa      	ldr	r2, [r7, #28]
 800aa32:	601a      	str	r2, [r3, #0]
 800aa34:	e003      	b.n	800aa3e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	69fa      	ldr	r2, [r7, #28]
 800aa3c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	69fa      	ldr	r2, [r7, #28]
 800aa42:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800aa44:	69bb      	ldr	r3, [r7, #24]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	61fb      	str	r3, [r7, #28]
 800aa4a:	e009      	b.n	800aa60 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	891a      	ldrh	r2, [r3, #8]
 800aa50:	887b      	ldrh	r3, [r7, #2]
 800aa52:	4413      	add	r3, r2
 800aa54:	b29a      	uxth	r2, r3
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	61fb      	str	r3, [r7, #28]
 800aa60:	69fb      	ldr	r3, [r7, #28]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d1f2      	bne.n	800aa4c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800aa66:	887b      	ldrh	r3, [r7, #2]
 800aa68:	4619      	mov	r1, r3
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f7ff fb02 	bl	800a074 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800aa70:	bf00      	nop
 800aa72:	3720      	adds	r7, #32
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f005 fe73 	bl	801076c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800aa86:	bf00      	nop
 800aa88:	3708      	adds	r7, #8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800aa8e:	b480      	push	{r7}
 800aa90:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800aa92:	bf00      	nop
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800aa9c:	b480      	push	{r7}
 800aa9e:	b085      	sub	sp, #20
 800aaa0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aaa2:	f3ef 8305 	mrs	r3, IPSR
 800aaa6:	60bb      	str	r3, [r7, #8]
  return(result);
 800aaa8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d10f      	bne.n	800aace <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aaae:	f3ef 8310 	mrs	r3, PRIMASK
 800aab2:	607b      	str	r3, [r7, #4]
  return(result);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d105      	bne.n	800aac6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aaba:	f3ef 8311 	mrs	r3, BASEPRI
 800aabe:	603b      	str	r3, [r7, #0]
  return(result);
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d007      	beq.n	800aad6 <osKernelInitialize+0x3a>
 800aac6:	4b0e      	ldr	r3, [pc, #56]	@ (800ab00 <osKernelInitialize+0x64>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	d103      	bne.n	800aad6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800aace:	f06f 0305 	mvn.w	r3, #5
 800aad2:	60fb      	str	r3, [r7, #12]
 800aad4:	e00c      	b.n	800aaf0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800aad6:	4b0a      	ldr	r3, [pc, #40]	@ (800ab00 <osKernelInitialize+0x64>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d105      	bne.n	800aaea <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800aade:	4b08      	ldr	r3, [pc, #32]	@ (800ab00 <osKernelInitialize+0x64>)
 800aae0:	2201      	movs	r2, #1
 800aae2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aae4:	2300      	movs	r3, #0
 800aae6:	60fb      	str	r3, [r7, #12]
 800aae8:	e002      	b.n	800aaf0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800aaea:	f04f 33ff 	mov.w	r3, #4294967295
 800aaee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3714      	adds	r7, #20
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	20009fbc 	.word	0x20009fbc

0800ab04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab0a:	f3ef 8305 	mrs	r3, IPSR
 800ab0e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ab10:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10f      	bne.n	800ab36 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab16:	f3ef 8310 	mrs	r3, PRIMASK
 800ab1a:	607b      	str	r3, [r7, #4]
  return(result);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d105      	bne.n	800ab2e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ab22:	f3ef 8311 	mrs	r3, BASEPRI
 800ab26:	603b      	str	r3, [r7, #0]
  return(result);
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d007      	beq.n	800ab3e <osKernelStart+0x3a>
 800ab2e:	4b0f      	ldr	r3, [pc, #60]	@ (800ab6c <osKernelStart+0x68>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2b02      	cmp	r3, #2
 800ab34:	d103      	bne.n	800ab3e <osKernelStart+0x3a>
    stat = osErrorISR;
 800ab36:	f06f 0305 	mvn.w	r3, #5
 800ab3a:	60fb      	str	r3, [r7, #12]
 800ab3c:	e010      	b.n	800ab60 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ab3e:	4b0b      	ldr	r3, [pc, #44]	@ (800ab6c <osKernelStart+0x68>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d109      	bne.n	800ab5a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ab46:	f7ff ffa2 	bl	800aa8e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ab4a:	4b08      	ldr	r3, [pc, #32]	@ (800ab6c <osKernelStart+0x68>)
 800ab4c:	2202      	movs	r2, #2
 800ab4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ab50:	f002 f92e 	bl	800cdb0 <vTaskStartScheduler>
      stat = osOK;
 800ab54:	2300      	movs	r3, #0
 800ab56:	60fb      	str	r3, [r7, #12]
 800ab58:	e002      	b.n	800ab60 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800ab5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ab60:	68fb      	ldr	r3, [r7, #12]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	20009fbc 	.word	0x20009fbc

0800ab70 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab76:	f3ef 8305 	mrs	r3, IPSR
 800ab7a:	60bb      	str	r3, [r7, #8]
  return(result);
 800ab7c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d10f      	bne.n	800aba2 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab82:	f3ef 8310 	mrs	r3, PRIMASK
 800ab86:	607b      	str	r3, [r7, #4]
  return(result);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d105      	bne.n	800ab9a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ab8e:	f3ef 8311 	mrs	r3, BASEPRI
 800ab92:	603b      	str	r3, [r7, #0]
  return(result);
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d007      	beq.n	800abaa <osKernelGetTickCount+0x3a>
 800ab9a:	4b08      	ldr	r3, [pc, #32]	@ (800abbc <osKernelGetTickCount+0x4c>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	d103      	bne.n	800abaa <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800aba2:	f002 fa37 	bl	800d014 <xTaskGetTickCountFromISR>
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	e002      	b.n	800abb0 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800abaa:	f002 fa23 	bl	800cff4 <xTaskGetTickCount>
 800abae:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800abb0:	68fb      	ldr	r3, [r7, #12]
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3710      	adds	r7, #16
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	20009fbc 	.word	0x20009fbc

0800abc0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b090      	sub	sp, #64	@ 0x40
 800abc4:	af04      	add	r7, sp, #16
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800abcc:	2300      	movs	r3, #0
 800abce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abd0:	f3ef 8305 	mrs	r3, IPSR
 800abd4:	61fb      	str	r3, [r7, #28]
  return(result);
 800abd6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800abd8:	2b00      	cmp	r3, #0
 800abda:	f040 8090 	bne.w	800acfe <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abde:	f3ef 8310 	mrs	r3, PRIMASK
 800abe2:	61bb      	str	r3, [r7, #24]
  return(result);
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d105      	bne.n	800abf6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800abea:	f3ef 8311 	mrs	r3, BASEPRI
 800abee:	617b      	str	r3, [r7, #20]
  return(result);
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d003      	beq.n	800abfe <osThreadNew+0x3e>
 800abf6:	4b44      	ldr	r3, [pc, #272]	@ (800ad08 <osThreadNew+0x148>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	2b02      	cmp	r3, #2
 800abfc:	d07f      	beq.n	800acfe <osThreadNew+0x13e>
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d07c      	beq.n	800acfe <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800ac04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ac08:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800ac0a:	2318      	movs	r3, #24
 800ac0c:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800ac12:	f04f 33ff 	mov.w	r3, #4294967295
 800ac16:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d045      	beq.n	800acaa <osThreadNew+0xea>
      if (attr->name != NULL) {
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d002      	beq.n	800ac2c <osThreadNew+0x6c>
        name = attr->name;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	699b      	ldr	r3, [r3, #24]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d002      	beq.n	800ac3a <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	699b      	ldr	r3, [r3, #24]
 800ac38:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d008      	beq.n	800ac52 <osThreadNew+0x92>
 800ac40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac42:	2b38      	cmp	r3, #56	@ 0x38
 800ac44:	d805      	bhi.n	800ac52 <osThreadNew+0x92>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	f003 0301 	and.w	r3, r3, #1
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d001      	beq.n	800ac56 <osThreadNew+0x96>
        return (NULL);
 800ac52:	2300      	movs	r3, #0
 800ac54:	e054      	b.n	800ad00 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	695b      	ldr	r3, [r3, #20]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d003      	beq.n	800ac66 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	695b      	ldr	r3, [r3, #20]
 800ac62:	089b      	lsrs	r3, r3, #2
 800ac64:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d00e      	beq.n	800ac8c <osThreadNew+0xcc>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	2ba7      	cmp	r3, #167	@ 0xa7
 800ac74:	d90a      	bls.n	800ac8c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d006      	beq.n	800ac8c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	695b      	ldr	r3, [r3, #20]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d002      	beq.n	800ac8c <osThreadNew+0xcc>
        mem = 1;
 800ac86:	2301      	movs	r3, #1
 800ac88:	623b      	str	r3, [r7, #32]
 800ac8a:	e010      	b.n	800acae <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d10c      	bne.n	800acae <osThreadNew+0xee>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d108      	bne.n	800acae <osThreadNew+0xee>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	691b      	ldr	r3, [r3, #16]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d104      	bne.n	800acae <osThreadNew+0xee>
          mem = 0;
 800aca4:	2300      	movs	r3, #0
 800aca6:	623b      	str	r3, [r7, #32]
 800aca8:	e001      	b.n	800acae <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800acaa:	2300      	movs	r3, #0
 800acac:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800acae:	6a3b      	ldr	r3, [r7, #32]
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d110      	bne.n	800acd6 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800acbc:	9202      	str	r2, [sp, #8]
 800acbe:	9301      	str	r3, [sp, #4]
 800acc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc2:	9300      	str	r3, [sp, #0]
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800acc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800acca:	68f8      	ldr	r0, [r7, #12]
 800accc:	f001 fe72 	bl	800c9b4 <xTaskCreateStatic>
 800acd0:	4603      	mov	r3, r0
 800acd2:	613b      	str	r3, [r7, #16]
 800acd4:	e013      	b.n	800acfe <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800acd6:	6a3b      	ldr	r3, [r7, #32]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d110      	bne.n	800acfe <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800acdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acde:	b29a      	uxth	r2, r3
 800ace0:	f107 0310 	add.w	r3, r7, #16
 800ace4:	9301      	str	r3, [sp, #4]
 800ace6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace8:	9300      	str	r3, [sp, #0]
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800acee:	68f8      	ldr	r0, [r7, #12]
 800acf0:	f001 fec6 	bl	800ca80 <xTaskCreate>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d001      	beq.n	800acfe <osThreadNew+0x13e>
          hTask = NULL;
 800acfa:	2300      	movs	r3, #0
 800acfc:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800acfe:	693b      	ldr	r3, [r7, #16]
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3730      	adds	r7, #48	@ 0x30
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}
 800ad08:	20009fbc 	.word	0x20009fbc

0800ad0c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b086      	sub	sp, #24
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad14:	f3ef 8305 	mrs	r3, IPSR
 800ad18:	613b      	str	r3, [r7, #16]
  return(result);
 800ad1a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d10f      	bne.n	800ad40 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad20:	f3ef 8310 	mrs	r3, PRIMASK
 800ad24:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d105      	bne.n	800ad38 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ad2c:	f3ef 8311 	mrs	r3, BASEPRI
 800ad30:	60bb      	str	r3, [r7, #8]
  return(result);
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d007      	beq.n	800ad48 <osDelay+0x3c>
 800ad38:	4b0a      	ldr	r3, [pc, #40]	@ (800ad64 <osDelay+0x58>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2b02      	cmp	r3, #2
 800ad3e:	d103      	bne.n	800ad48 <osDelay+0x3c>
    stat = osErrorISR;
 800ad40:	f06f 0305 	mvn.w	r3, #5
 800ad44:	617b      	str	r3, [r7, #20]
 800ad46:	e007      	b.n	800ad58 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d002      	beq.n	800ad58 <osDelay+0x4c>
      vTaskDelay(ticks);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f001 fff4 	bl	800cd40 <vTaskDelay>
    }
  }

  return (stat);
 800ad58:	697b      	ldr	r3, [r7, #20]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3718      	adds	r7, #24
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	20009fbc 	.word	0x20009fbc

0800ad68 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b08a      	sub	sp, #40	@ 0x28
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ad70:	2300      	movs	r3, #0
 800ad72:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad74:	f3ef 8305 	mrs	r3, IPSR
 800ad78:	613b      	str	r3, [r7, #16]
  return(result);
 800ad7a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	f040 8085 	bne.w	800ae8c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad82:	f3ef 8310 	mrs	r3, PRIMASK
 800ad86:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d105      	bne.n	800ad9a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ad8e:	f3ef 8311 	mrs	r3, BASEPRI
 800ad92:	60bb      	str	r3, [r7, #8]
  return(result);
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d003      	beq.n	800ada2 <osMutexNew+0x3a>
 800ad9a:	4b3f      	ldr	r3, [pc, #252]	@ (800ae98 <osMutexNew+0x130>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2b02      	cmp	r3, #2
 800ada0:	d074      	beq.n	800ae8c <osMutexNew+0x124>
    if (attr != NULL) {
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d003      	beq.n	800adb0 <osMutexNew+0x48>
      type = attr->attr_bits;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	623b      	str	r3, [r7, #32]
 800adae:	e001      	b.n	800adb4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800adb0:	2300      	movs	r3, #0
 800adb2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800adb4:	6a3b      	ldr	r3, [r7, #32]
 800adb6:	f003 0301 	and.w	r3, r3, #1
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d002      	beq.n	800adc4 <osMutexNew+0x5c>
      rmtx = 1U;
 800adbe:	2301      	movs	r3, #1
 800adc0:	61fb      	str	r3, [r7, #28]
 800adc2:	e001      	b.n	800adc8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800adc4:	2300      	movs	r3, #0
 800adc6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800adc8:	6a3b      	ldr	r3, [r7, #32]
 800adca:	f003 0308 	and.w	r3, r3, #8
 800adce:	2b00      	cmp	r3, #0
 800add0:	d15c      	bne.n	800ae8c <osMutexNew+0x124>
      mem = -1;
 800add2:	f04f 33ff 	mov.w	r3, #4294967295
 800add6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d015      	beq.n	800ae0a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d006      	beq.n	800adf4 <osMutexNew+0x8c>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	68db      	ldr	r3, [r3, #12]
 800adea:	2b4f      	cmp	r3, #79	@ 0x4f
 800adec:	d902      	bls.n	800adf4 <osMutexNew+0x8c>
          mem = 1;
 800adee:	2301      	movs	r3, #1
 800adf0:	61bb      	str	r3, [r7, #24]
 800adf2:	e00c      	b.n	800ae0e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d108      	bne.n	800ae0e <osMutexNew+0xa6>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d104      	bne.n	800ae0e <osMutexNew+0xa6>
            mem = 0;
 800ae04:	2300      	movs	r3, #0
 800ae06:	61bb      	str	r3, [r7, #24]
 800ae08:	e001      	b.n	800ae0e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d112      	bne.n	800ae3a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800ae14:	69fb      	ldr	r3, [r7, #28]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d007      	beq.n	800ae2a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	4619      	mov	r1, r3
 800ae20:	2004      	movs	r0, #4
 800ae22:	f000 fe22 	bl	800ba6a <xQueueCreateMutexStatic>
 800ae26:	6278      	str	r0, [r7, #36]	@ 0x24
 800ae28:	e016      	b.n	800ae58 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	4619      	mov	r1, r3
 800ae30:	2001      	movs	r0, #1
 800ae32:	f000 fe1a 	bl	800ba6a <xQueueCreateMutexStatic>
 800ae36:	6278      	str	r0, [r7, #36]	@ 0x24
 800ae38:	e00e      	b.n	800ae58 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d10b      	bne.n	800ae58 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d004      	beq.n	800ae50 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800ae46:	2004      	movs	r0, #4
 800ae48:	f000 fdf7 	bl	800ba3a <xQueueCreateMutex>
 800ae4c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ae4e:	e003      	b.n	800ae58 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800ae50:	2001      	movs	r0, #1
 800ae52:	f000 fdf2 	bl	800ba3a <xQueueCreateMutex>
 800ae56:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ae58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00c      	beq.n	800ae78 <osMutexNew+0x110>
        if (attr != NULL) {
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d003      	beq.n	800ae6c <osMutexNew+0x104>
          name = attr->name;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	617b      	str	r3, [r7, #20]
 800ae6a:	e001      	b.n	800ae70 <osMutexNew+0x108>
        } else {
          name = NULL;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800ae70:	6979      	ldr	r1, [r7, #20]
 800ae72:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ae74:	f001 fd16 	bl	800c8a4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ae78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d006      	beq.n	800ae8c <osMutexNew+0x124>
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d003      	beq.n	800ae8c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ae84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae86:	f043 0301 	orr.w	r3, r3, #1
 800ae8a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3728      	adds	r7, #40	@ 0x28
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	20009fbc 	.word	0x20009fbc

0800ae9c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b088      	sub	sp, #32
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f023 0301 	bic.w	r3, r3, #1
 800aeac:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f003 0301 	and.w	r3, r3, #1
 800aeb4:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aeba:	f3ef 8305 	mrs	r3, IPSR
 800aebe:	613b      	str	r3, [r7, #16]
  return(result);
 800aec0:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d10f      	bne.n	800aee6 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aec6:	f3ef 8310 	mrs	r3, PRIMASK
 800aeca:	60fb      	str	r3, [r7, #12]
  return(result);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d105      	bne.n	800aede <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aed2:	f3ef 8311 	mrs	r3, BASEPRI
 800aed6:	60bb      	str	r3, [r7, #8]
  return(result);
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d007      	beq.n	800aeee <osMutexAcquire+0x52>
 800aede:	4b1d      	ldr	r3, [pc, #116]	@ (800af54 <osMutexAcquire+0xb8>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2b02      	cmp	r3, #2
 800aee4:	d103      	bne.n	800aeee <osMutexAcquire+0x52>
    stat = osErrorISR;
 800aee6:	f06f 0305 	mvn.w	r3, #5
 800aeea:	61fb      	str	r3, [r7, #28]
 800aeec:	e02c      	b.n	800af48 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d103      	bne.n	800aefc <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800aef4:	f06f 0303 	mvn.w	r3, #3
 800aef8:	61fb      	str	r3, [r7, #28]
 800aefa:	e025      	b.n	800af48 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d011      	beq.n	800af26 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800af02:	6839      	ldr	r1, [r7, #0]
 800af04:	69b8      	ldr	r0, [r7, #24]
 800af06:	f000 fe02 	bl	800bb0e <xQueueTakeMutexRecursive>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	d01b      	beq.n	800af48 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d003      	beq.n	800af1e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800af16:	f06f 0301 	mvn.w	r3, #1
 800af1a:	61fb      	str	r3, [r7, #28]
 800af1c:	e014      	b.n	800af48 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800af1e:	f06f 0302 	mvn.w	r3, #2
 800af22:	61fb      	str	r3, [r7, #28]
 800af24:	e010      	b.n	800af48 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800af26:	6839      	ldr	r1, [r7, #0]
 800af28:	69b8      	ldr	r0, [r7, #24]
 800af2a:	f001 f9cd 	bl	800c2c8 <xQueueSemaphoreTake>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b01      	cmp	r3, #1
 800af32:	d009      	beq.n	800af48 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d003      	beq.n	800af42 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800af3a:	f06f 0301 	mvn.w	r3, #1
 800af3e:	61fb      	str	r3, [r7, #28]
 800af40:	e002      	b.n	800af48 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800af42:	f06f 0302 	mvn.w	r3, #2
 800af46:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800af48:	69fb      	ldr	r3, [r7, #28]
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3720      	adds	r7, #32
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	20009fbc 	.word	0x20009fbc

0800af58 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800af58:	b580      	push	{r7, lr}
 800af5a:	b088      	sub	sp, #32
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f023 0301 	bic.w	r3, r3, #1
 800af66:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f003 0301 	and.w	r3, r3, #1
 800af6e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800af70:	2300      	movs	r3, #0
 800af72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af74:	f3ef 8305 	mrs	r3, IPSR
 800af78:	613b      	str	r3, [r7, #16]
  return(result);
 800af7a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d10f      	bne.n	800afa0 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af80:	f3ef 8310 	mrs	r3, PRIMASK
 800af84:	60fb      	str	r3, [r7, #12]
  return(result);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d105      	bne.n	800af98 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800af8c:	f3ef 8311 	mrs	r3, BASEPRI
 800af90:	60bb      	str	r3, [r7, #8]
  return(result);
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d007      	beq.n	800afa8 <osMutexRelease+0x50>
 800af98:	4b16      	ldr	r3, [pc, #88]	@ (800aff4 <osMutexRelease+0x9c>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	d103      	bne.n	800afa8 <osMutexRelease+0x50>
    stat = osErrorISR;
 800afa0:	f06f 0305 	mvn.w	r3, #5
 800afa4:	61fb      	str	r3, [r7, #28]
 800afa6:	e01f      	b.n	800afe8 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800afa8:	69bb      	ldr	r3, [r7, #24]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d103      	bne.n	800afb6 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800afae:	f06f 0303 	mvn.w	r3, #3
 800afb2:	61fb      	str	r3, [r7, #28]
 800afb4:	e018      	b.n	800afe8 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d009      	beq.n	800afd0 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800afbc:	69b8      	ldr	r0, [r7, #24]
 800afbe:	f000 fd6f 	bl	800baa0 <xQueueGiveMutexRecursive>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	d00f      	beq.n	800afe8 <osMutexRelease+0x90>
        stat = osErrorResource;
 800afc8:	f06f 0302 	mvn.w	r3, #2
 800afcc:	61fb      	str	r3, [r7, #28]
 800afce:	e00b      	b.n	800afe8 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800afd0:	2300      	movs	r3, #0
 800afd2:	2200      	movs	r2, #0
 800afd4:	2100      	movs	r1, #0
 800afd6:	69b8      	ldr	r0, [r7, #24]
 800afd8:	f000 fe48 	bl	800bc6c <xQueueGenericSend>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d002      	beq.n	800afe8 <osMutexRelease+0x90>
        stat = osErrorResource;
 800afe2:	f06f 0302 	mvn.w	r3, #2
 800afe6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800afe8:	69fb      	ldr	r3, [r7, #28]
}
 800afea:	4618      	mov	r0, r3
 800afec:	3720      	adds	r7, #32
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	20009fbc 	.word	0x20009fbc

0800aff8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800aff8:	b580      	push	{r7, lr}
 800affa:	b08c      	sub	sp, #48	@ 0x30
 800affc:	af02      	add	r7, sp, #8
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b004:	2300      	movs	r3, #0
 800b006:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b008:	f3ef 8305 	mrs	r3, IPSR
 800b00c:	61bb      	str	r3, [r7, #24]
  return(result);
 800b00e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b010:	2b00      	cmp	r3, #0
 800b012:	f040 8086 	bne.w	800b122 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b016:	f3ef 8310 	mrs	r3, PRIMASK
 800b01a:	617b      	str	r3, [r7, #20]
  return(result);
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d105      	bne.n	800b02e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b022:	f3ef 8311 	mrs	r3, BASEPRI
 800b026:	613b      	str	r3, [r7, #16]
  return(result);
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d003      	beq.n	800b036 <osSemaphoreNew+0x3e>
 800b02e:	4b3f      	ldr	r3, [pc, #252]	@ (800b12c <osSemaphoreNew+0x134>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b02      	cmp	r3, #2
 800b034:	d075      	beq.n	800b122 <osSemaphoreNew+0x12a>
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d072      	beq.n	800b122 <osSemaphoreNew+0x12a>
 800b03c:	68ba      	ldr	r2, [r7, #8]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	429a      	cmp	r2, r3
 800b042:	d86e      	bhi.n	800b122 <osSemaphoreNew+0x12a>
    mem = -1;
 800b044:	f04f 33ff 	mov.w	r3, #4294967295
 800b048:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d015      	beq.n	800b07c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d006      	beq.n	800b066 <osSemaphoreNew+0x6e>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	2b4f      	cmp	r3, #79	@ 0x4f
 800b05e:	d902      	bls.n	800b066 <osSemaphoreNew+0x6e>
        mem = 1;
 800b060:	2301      	movs	r3, #1
 800b062:	623b      	str	r3, [r7, #32]
 800b064:	e00c      	b.n	800b080 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	689b      	ldr	r3, [r3, #8]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d108      	bne.n	800b080 <osSemaphoreNew+0x88>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d104      	bne.n	800b080 <osSemaphoreNew+0x88>
          mem = 0;
 800b076:	2300      	movs	r3, #0
 800b078:	623b      	str	r3, [r7, #32]
 800b07a:	e001      	b.n	800b080 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800b07c:	2300      	movs	r3, #0
 800b07e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800b080:	6a3b      	ldr	r3, [r7, #32]
 800b082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b086:	d04c      	beq.n	800b122 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d128      	bne.n	800b0e0 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800b08e:	6a3b      	ldr	r3, [r7, #32]
 800b090:	2b01      	cmp	r3, #1
 800b092:	d10a      	bne.n	800b0aa <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	2203      	movs	r2, #3
 800b09a:	9200      	str	r2, [sp, #0]
 800b09c:	2200      	movs	r2, #0
 800b09e:	2100      	movs	r1, #0
 800b0a0:	2001      	movs	r0, #1
 800b0a2:	f000 fbc3 	bl	800b82c <xQueueGenericCreateStatic>
 800b0a6:	6278      	str	r0, [r7, #36]	@ 0x24
 800b0a8:	e005      	b.n	800b0b6 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800b0aa:	2203      	movs	r2, #3
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	2001      	movs	r0, #1
 800b0b0:	f000 fc43 	bl	800b93a <xQueueGenericCreate>
 800b0b4:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d022      	beq.n	800b102 <osSemaphoreNew+0x10a>
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d01f      	beq.n	800b102 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b0ca:	f000 fdcf 	bl	800bc6c <xQueueGenericSend>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d016      	beq.n	800b102 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800b0d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b0d6:	f001 fa97 	bl	800c608 <vQueueDelete>
            hSemaphore = NULL;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0de:	e010      	b.n	800b102 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800b0e0:	6a3b      	ldr	r3, [r7, #32]
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d108      	bne.n	800b0f8 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	68b9      	ldr	r1, [r7, #8]
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f000 fd46 	bl	800bb80 <xQueueCreateCountingSemaphoreStatic>
 800b0f4:	6278      	str	r0, [r7, #36]	@ 0x24
 800b0f6:	e004      	b.n	800b102 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b0f8:	68b9      	ldr	r1, [r7, #8]
 800b0fa:	68f8      	ldr	r0, [r7, #12]
 800b0fc:	f000 fd7d 	bl	800bbfa <xQueueCreateCountingSemaphore>
 800b100:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b104:	2b00      	cmp	r3, #0
 800b106:	d00c      	beq.n	800b122 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d003      	beq.n	800b116 <osSemaphoreNew+0x11e>
          name = attr->name;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	61fb      	str	r3, [r7, #28]
 800b114:	e001      	b.n	800b11a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800b116:	2300      	movs	r3, #0
 800b118:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b11a:	69f9      	ldr	r1, [r7, #28]
 800b11c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b11e:	f001 fbc1 	bl	800c8a4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b124:	4618      	mov	r0, r3
 800b126:	3728      	adds	r7, #40	@ 0x28
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	20009fbc 	.word	0x20009fbc

0800b130 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b130:	b580      	push	{r7, lr}
 800b132:	b088      	sub	sp, #32
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b13e:	2300      	movs	r3, #0
 800b140:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d103      	bne.n	800b150 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b148:	f06f 0303 	mvn.w	r3, #3
 800b14c:	61fb      	str	r3, [r7, #28]
 800b14e:	e04b      	b.n	800b1e8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b150:	f3ef 8305 	mrs	r3, IPSR
 800b154:	617b      	str	r3, [r7, #20]
  return(result);
 800b156:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d10f      	bne.n	800b17c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b15c:	f3ef 8310 	mrs	r3, PRIMASK
 800b160:	613b      	str	r3, [r7, #16]
  return(result);
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d105      	bne.n	800b174 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b168:	f3ef 8311 	mrs	r3, BASEPRI
 800b16c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d026      	beq.n	800b1c2 <osSemaphoreAcquire+0x92>
 800b174:	4b1f      	ldr	r3, [pc, #124]	@ (800b1f4 <osSemaphoreAcquire+0xc4>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	2b02      	cmp	r3, #2
 800b17a:	d122      	bne.n	800b1c2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d003      	beq.n	800b18a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800b182:	f06f 0303 	mvn.w	r3, #3
 800b186:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800b188:	e02d      	b.n	800b1e6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800b18a:	2300      	movs	r3, #0
 800b18c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b18e:	f107 0308 	add.w	r3, r7, #8
 800b192:	461a      	mov	r2, r3
 800b194:	2100      	movs	r1, #0
 800b196:	69b8      	ldr	r0, [r7, #24]
 800b198:	f001 f9ae 	bl	800c4f8 <xQueueReceiveFromISR>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d003      	beq.n	800b1aa <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800b1a2:	f06f 0302 	mvn.w	r3, #2
 800b1a6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800b1a8:	e01d      	b.n	800b1e6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d01a      	beq.n	800b1e6 <osSemaphoreAcquire+0xb6>
 800b1b0:	4b11      	ldr	r3, [pc, #68]	@ (800b1f8 <osSemaphoreAcquire+0xc8>)
 800b1b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1b6:	601a      	str	r2, [r3, #0]
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800b1c0:	e011      	b.n	800b1e6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b1c2:	6839      	ldr	r1, [r7, #0]
 800b1c4:	69b8      	ldr	r0, [r7, #24]
 800b1c6:	f001 f87f 	bl	800c2c8 <xQueueSemaphoreTake>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d00b      	beq.n	800b1e8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d003      	beq.n	800b1de <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800b1d6:	f06f 0301 	mvn.w	r3, #1
 800b1da:	61fb      	str	r3, [r7, #28]
 800b1dc:	e004      	b.n	800b1e8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800b1de:	f06f 0302 	mvn.w	r3, #2
 800b1e2:	61fb      	str	r3, [r7, #28]
 800b1e4:	e000      	b.n	800b1e8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800b1e6:	bf00      	nop
      }
    }
  }

  return (stat);
 800b1e8:	69fb      	ldr	r3, [r7, #28]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3720      	adds	r7, #32
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	20009fbc 	.word	0x20009fbc
 800b1f8:	e000ed04 	.word	0xe000ed04

0800b1fc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b088      	sub	sp, #32
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b208:	2300      	movs	r3, #0
 800b20a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d103      	bne.n	800b21a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b212:	f06f 0303 	mvn.w	r3, #3
 800b216:	61fb      	str	r3, [r7, #28]
 800b218:	e03e      	b.n	800b298 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b21a:	f3ef 8305 	mrs	r3, IPSR
 800b21e:	617b      	str	r3, [r7, #20]
  return(result);
 800b220:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800b222:	2b00      	cmp	r3, #0
 800b224:	d10f      	bne.n	800b246 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b226:	f3ef 8310 	mrs	r3, PRIMASK
 800b22a:	613b      	str	r3, [r7, #16]
  return(result);
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d105      	bne.n	800b23e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b232:	f3ef 8311 	mrs	r3, BASEPRI
 800b236:	60fb      	str	r3, [r7, #12]
  return(result);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d01e      	beq.n	800b27c <osSemaphoreRelease+0x80>
 800b23e:	4b19      	ldr	r3, [pc, #100]	@ (800b2a4 <osSemaphoreRelease+0xa8>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	2b02      	cmp	r3, #2
 800b244:	d11a      	bne.n	800b27c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800b246:	2300      	movs	r3, #0
 800b248:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b24a:	f107 0308 	add.w	r3, r7, #8
 800b24e:	4619      	mov	r1, r3
 800b250:	69b8      	ldr	r0, [r7, #24]
 800b252:	f000 feb8 	bl	800bfc6 <xQueueGiveFromISR>
 800b256:	4603      	mov	r3, r0
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d003      	beq.n	800b264 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800b25c:	f06f 0302 	mvn.w	r3, #2
 800b260:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b262:	e018      	b.n	800b296 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d015      	beq.n	800b296 <osSemaphoreRelease+0x9a>
 800b26a:	4b0f      	ldr	r3, [pc, #60]	@ (800b2a8 <osSemaphoreRelease+0xac>)
 800b26c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b270:	601a      	str	r2, [r3, #0]
 800b272:	f3bf 8f4f 	dsb	sy
 800b276:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b27a:	e00c      	b.n	800b296 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b27c:	2300      	movs	r3, #0
 800b27e:	2200      	movs	r2, #0
 800b280:	2100      	movs	r1, #0
 800b282:	69b8      	ldr	r0, [r7, #24]
 800b284:	f000 fcf2 	bl	800bc6c <xQueueGenericSend>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d004      	beq.n	800b298 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800b28e:	f06f 0302 	mvn.w	r3, #2
 800b292:	61fb      	str	r3, [r7, #28]
 800b294:	e000      	b.n	800b298 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b296:	bf00      	nop
    }
  }

  return (stat);
 800b298:	69fb      	ldr	r3, [r7, #28]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3720      	adds	r7, #32
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20009fbc 	.word	0x20009fbc
 800b2a8:	e000ed04 	.word	0xe000ed04

0800b2ac <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b08c      	sub	sp, #48	@ 0x30
 800b2b0:	af02      	add	r7, sp, #8
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b2bc:	f3ef 8305 	mrs	r3, IPSR
 800b2c0:	61bb      	str	r3, [r7, #24]
  return(result);
 800b2c2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d16f      	bne.n	800b3a8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2c8:	f3ef 8310 	mrs	r3, PRIMASK
 800b2cc:	617b      	str	r3, [r7, #20]
  return(result);
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d105      	bne.n	800b2e0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b2d4:	f3ef 8311 	mrs	r3, BASEPRI
 800b2d8:	613b      	str	r3, [r7, #16]
  return(result);
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d003      	beq.n	800b2e8 <osMessageQueueNew+0x3c>
 800b2e0:	4b34      	ldr	r3, [pc, #208]	@ (800b3b4 <osMessageQueueNew+0x108>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2b02      	cmp	r3, #2
 800b2e6:	d05f      	beq.n	800b3a8 <osMessageQueueNew+0xfc>
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d05c      	beq.n	800b3a8 <osMessageQueueNew+0xfc>
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d059      	beq.n	800b3a8 <osMessageQueueNew+0xfc>
    mem = -1;
 800b2f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2f8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d029      	beq.n	800b354 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d012      	beq.n	800b32e <osMessageQueueNew+0x82>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	2b4f      	cmp	r3, #79	@ 0x4f
 800b30e:	d90e      	bls.n	800b32e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b314:	2b00      	cmp	r3, #0
 800b316:	d00a      	beq.n	800b32e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	695a      	ldr	r2, [r3, #20]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	68b9      	ldr	r1, [r7, #8]
 800b320:	fb01 f303 	mul.w	r3, r1, r3
 800b324:	429a      	cmp	r2, r3
 800b326:	d302      	bcc.n	800b32e <osMessageQueueNew+0x82>
        mem = 1;
 800b328:	2301      	movs	r3, #1
 800b32a:	623b      	str	r3, [r7, #32]
 800b32c:	e014      	b.n	800b358 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	689b      	ldr	r3, [r3, #8]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d110      	bne.n	800b358 <osMessageQueueNew+0xac>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d10c      	bne.n	800b358 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b342:	2b00      	cmp	r3, #0
 800b344:	d108      	bne.n	800b358 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	695b      	ldr	r3, [r3, #20]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d104      	bne.n	800b358 <osMessageQueueNew+0xac>
          mem = 0;
 800b34e:	2300      	movs	r3, #0
 800b350:	623b      	str	r3, [r7, #32]
 800b352:	e001      	b.n	800b358 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800b354:	2300      	movs	r3, #0
 800b356:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b358:	6a3b      	ldr	r3, [r7, #32]
 800b35a:	2b01      	cmp	r3, #1
 800b35c:	d10b      	bne.n	800b376 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	691a      	ldr	r2, [r3, #16]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	2100      	movs	r1, #0
 800b368:	9100      	str	r1, [sp, #0]
 800b36a:	68b9      	ldr	r1, [r7, #8]
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f000 fa5d 	bl	800b82c <xQueueGenericCreateStatic>
 800b372:	6278      	str	r0, [r7, #36]	@ 0x24
 800b374:	e008      	b.n	800b388 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800b376:	6a3b      	ldr	r3, [r7, #32]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d105      	bne.n	800b388 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800b37c:	2200      	movs	r2, #0
 800b37e:	68b9      	ldr	r1, [r7, #8]
 800b380:	68f8      	ldr	r0, [r7, #12]
 800b382:	f000 fada 	bl	800b93a <xQueueGenericCreate>
 800b386:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00c      	beq.n	800b3a8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d003      	beq.n	800b39c <osMessageQueueNew+0xf0>
        name = attr->name;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	61fb      	str	r3, [r7, #28]
 800b39a:	e001      	b.n	800b3a0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800b39c:	2300      	movs	r3, #0
 800b39e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800b3a0:	69f9      	ldr	r1, [r7, #28]
 800b3a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b3a4:	f001 fa7e 	bl	800c8a4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b3a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3728      	adds	r7, #40	@ 0x28
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	20009fbc 	.word	0x20009fbc

0800b3b8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b08a      	sub	sp, #40	@ 0x28
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	603b      	str	r3, [r7, #0]
 800b3c4:	4613      	mov	r3, r2
 800b3c6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3d0:	f3ef 8305 	mrs	r3, IPSR
 800b3d4:	61fb      	str	r3, [r7, #28]
  return(result);
 800b3d6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d10f      	bne.n	800b3fc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3dc:	f3ef 8310 	mrs	r3, PRIMASK
 800b3e0:	61bb      	str	r3, [r7, #24]
  return(result);
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d105      	bne.n	800b3f4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b3e8:	f3ef 8311 	mrs	r3, BASEPRI
 800b3ec:	617b      	str	r3, [r7, #20]
  return(result);
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d02c      	beq.n	800b44e <osMessageQueuePut+0x96>
 800b3f4:	4b28      	ldr	r3, [pc, #160]	@ (800b498 <osMessageQueuePut+0xe0>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	2b02      	cmp	r3, #2
 800b3fa:	d128      	bne.n	800b44e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b3fc:	6a3b      	ldr	r3, [r7, #32]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d005      	beq.n	800b40e <osMessageQueuePut+0x56>
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d002      	beq.n	800b40e <osMessageQueuePut+0x56>
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d003      	beq.n	800b416 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800b40e:	f06f 0303 	mvn.w	r3, #3
 800b412:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b414:	e039      	b.n	800b48a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800b416:	2300      	movs	r3, #0
 800b418:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b41a:	f107 0210 	add.w	r2, r7, #16
 800b41e:	2300      	movs	r3, #0
 800b420:	68b9      	ldr	r1, [r7, #8]
 800b422:	6a38      	ldr	r0, [r7, #32]
 800b424:	f000 fd2c 	bl	800be80 <xQueueGenericSendFromISR>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d003      	beq.n	800b436 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800b42e:	f06f 0302 	mvn.w	r3, #2
 800b432:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b434:	e029      	b.n	800b48a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d026      	beq.n	800b48a <osMessageQueuePut+0xd2>
 800b43c:	4b17      	ldr	r3, [pc, #92]	@ (800b49c <osMessageQueuePut+0xe4>)
 800b43e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b442:	601a      	str	r2, [r3, #0]
 800b444:	f3bf 8f4f 	dsb	sy
 800b448:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b44c:	e01d      	b.n	800b48a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b44e:	6a3b      	ldr	r3, [r7, #32]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d002      	beq.n	800b45a <osMessageQueuePut+0xa2>
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d103      	bne.n	800b462 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800b45a:	f06f 0303 	mvn.w	r3, #3
 800b45e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b460:	e014      	b.n	800b48c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b462:	2300      	movs	r3, #0
 800b464:	683a      	ldr	r2, [r7, #0]
 800b466:	68b9      	ldr	r1, [r7, #8]
 800b468:	6a38      	ldr	r0, [r7, #32]
 800b46a:	f000 fbff 	bl	800bc6c <xQueueGenericSend>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b01      	cmp	r3, #1
 800b472:	d00b      	beq.n	800b48c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d003      	beq.n	800b482 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800b47a:	f06f 0301 	mvn.w	r3, #1
 800b47e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b480:	e004      	b.n	800b48c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800b482:	f06f 0302 	mvn.w	r3, #2
 800b486:	627b      	str	r3, [r7, #36]	@ 0x24
 800b488:	e000      	b.n	800b48c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b48a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800b48c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3728      	adds	r7, #40	@ 0x28
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	20009fbc 	.word	0x20009fbc
 800b49c:	e000ed04 	.word	0xe000ed04

0800b4a0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b08a      	sub	sp, #40	@ 0x28
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	60b9      	str	r1, [r7, #8]
 800b4aa:	607a      	str	r2, [r7, #4]
 800b4ac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b4b6:	f3ef 8305 	mrs	r3, IPSR
 800b4ba:	61fb      	str	r3, [r7, #28]
  return(result);
 800b4bc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d10f      	bne.n	800b4e2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4c2:	f3ef 8310 	mrs	r3, PRIMASK
 800b4c6:	61bb      	str	r3, [r7, #24]
  return(result);
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d105      	bne.n	800b4da <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b4ce:	f3ef 8311 	mrs	r3, BASEPRI
 800b4d2:	617b      	str	r3, [r7, #20]
  return(result);
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d02c      	beq.n	800b534 <osMessageQueueGet+0x94>
 800b4da:	4b28      	ldr	r3, [pc, #160]	@ (800b57c <osMessageQueueGet+0xdc>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2b02      	cmp	r3, #2
 800b4e0:	d128      	bne.n	800b534 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b4e2:	6a3b      	ldr	r3, [r7, #32]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d005      	beq.n	800b4f4 <osMessageQueueGet+0x54>
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d002      	beq.n	800b4f4 <osMessageQueueGet+0x54>
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d003      	beq.n	800b4fc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800b4f4:	f06f 0303 	mvn.w	r3, #3
 800b4f8:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b4fa:	e038      	b.n	800b56e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b500:	f107 0310 	add.w	r3, r7, #16
 800b504:	461a      	mov	r2, r3
 800b506:	68b9      	ldr	r1, [r7, #8]
 800b508:	6a38      	ldr	r0, [r7, #32]
 800b50a:	f000 fff5 	bl	800c4f8 <xQueueReceiveFromISR>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b01      	cmp	r3, #1
 800b512:	d003      	beq.n	800b51c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800b514:	f06f 0302 	mvn.w	r3, #2
 800b518:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b51a:	e028      	b.n	800b56e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d025      	beq.n	800b56e <osMessageQueueGet+0xce>
 800b522:	4b17      	ldr	r3, [pc, #92]	@ (800b580 <osMessageQueueGet+0xe0>)
 800b524:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b528:	601a      	str	r2, [r3, #0]
 800b52a:	f3bf 8f4f 	dsb	sy
 800b52e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b532:	e01c      	b.n	800b56e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b534:	6a3b      	ldr	r3, [r7, #32]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d002      	beq.n	800b540 <osMessageQueueGet+0xa0>
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d103      	bne.n	800b548 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800b540:	f06f 0303 	mvn.w	r3, #3
 800b544:	627b      	str	r3, [r7, #36]	@ 0x24
 800b546:	e013      	b.n	800b570 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b548:	683a      	ldr	r2, [r7, #0]
 800b54a:	68b9      	ldr	r1, [r7, #8]
 800b54c:	6a38      	ldr	r0, [r7, #32]
 800b54e:	f000 fdd3 	bl	800c0f8 <xQueueReceive>
 800b552:	4603      	mov	r3, r0
 800b554:	2b01      	cmp	r3, #1
 800b556:	d00b      	beq.n	800b570 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d003      	beq.n	800b566 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800b55e:	f06f 0301 	mvn.w	r3, #1
 800b562:	627b      	str	r3, [r7, #36]	@ 0x24
 800b564:	e004      	b.n	800b570 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800b566:	f06f 0302 	mvn.w	r3, #2
 800b56a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b56c:	e000      	b.n	800b570 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b56e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800b570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b572:	4618      	mov	r0, r3
 800b574:	3728      	adds	r7, #40	@ 0x28
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	20009fbc 	.word	0x20009fbc
 800b580:	e000ed04 	.word	0xe000ed04

0800b584 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b584:	b480      	push	{r7}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	4a07      	ldr	r2, [pc, #28]	@ (800b5b0 <vApplicationGetIdleTaskMemory+0x2c>)
 800b594:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	4a06      	ldr	r2, [pc, #24]	@ (800b5b4 <vApplicationGetIdleTaskMemory+0x30>)
 800b59a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b5a2:	601a      	str	r2, [r3, #0]
}
 800b5a4:	bf00      	nop
 800b5a6:	3714      	adds	r7, #20
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr
 800b5b0:	20009fc0 	.word	0x20009fc0
 800b5b4:	2000a068 	.word	0x2000a068

0800b5b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b5b8:	b480      	push	{r7}
 800b5ba:	b085      	sub	sp, #20
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	4a07      	ldr	r2, [pc, #28]	@ (800b5e4 <vApplicationGetTimerTaskMemory+0x2c>)
 800b5c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	4a06      	ldr	r2, [pc, #24]	@ (800b5e8 <vApplicationGetTimerTaskMemory+0x30>)
 800b5ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b5d6:	601a      	str	r2, [r3, #0]
}
 800b5d8:	bf00      	nop
 800b5da:	3714      	adds	r7, #20
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr
 800b5e4:	2000a468 	.word	0x2000a468
 800b5e8:	2000a510 	.word	0x2000a510

0800b5ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f103 0208 	add.w	r2, r3, #8
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f04f 32ff 	mov.w	r2, #4294967295
 800b604:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f103 0208 	add.w	r2, r3, #8
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f103 0208 	add.w	r2, r3, #8
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2200      	movs	r2, #0
 800b61e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b620:	bf00      	nop
 800b622:	370c      	adds	r7, #12
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b63a:	bf00      	nop
 800b63c:	370c      	adds	r7, #12
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr

0800b646 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b646:	b480      	push	{r7}
 800b648:	b085      	sub	sp, #20
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
 800b64e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	689a      	ldr	r2, [r3, #8]
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	683a      	ldr	r2, [r7, #0]
 800b66a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	683a      	ldr	r2, [r7, #0]
 800b670:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	1c5a      	adds	r2, r3, #1
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	601a      	str	r2, [r3, #0]
}
 800b682:	bf00      	nop
 800b684:	3714      	adds	r7, #20
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr

0800b68e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b68e:	b480      	push	{r7}
 800b690:	b085      	sub	sp, #20
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
 800b696:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6a4:	d103      	bne.n	800b6ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	691b      	ldr	r3, [r3, #16]
 800b6aa:	60fb      	str	r3, [r7, #12]
 800b6ac:	e00c      	b.n	800b6c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	3308      	adds	r3, #8
 800b6b2:	60fb      	str	r3, [r7, #12]
 800b6b4:	e002      	b.n	800b6bc <vListInsert+0x2e>
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	60fb      	str	r3, [r7, #12]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	68ba      	ldr	r2, [r7, #8]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d2f6      	bcs.n	800b6b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	685a      	ldr	r2, [r3, #4]
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	685b      	ldr	r3, [r3, #4]
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	68fa      	ldr	r2, [r7, #12]
 800b6dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	683a      	ldr	r2, [r7, #0]
 800b6e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	1c5a      	adds	r2, r3, #1
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	601a      	str	r2, [r3, #0]
}
 800b6f4:	bf00      	nop
 800b6f6:	3714      	adds	r7, #20
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr

0800b700 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b700:	b480      	push	{r7}
 800b702:	b085      	sub	sp, #20
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	691b      	ldr	r3, [r3, #16]
 800b70c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	6892      	ldr	r2, [r2, #8]
 800b716:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	6852      	ldr	r2, [r2, #4]
 800b720:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	429a      	cmp	r2, r3
 800b72a:	d103      	bne.n	800b734 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	689a      	ldr	r2, [r3, #8]
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2200      	movs	r2, #0
 800b738:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	1e5a      	subs	r2, r3, #1
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3714      	adds	r7, #20
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d10d      	bne.n	800b784 <xQueueGenericReset+0x30>
	__asm volatile
 800b768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b76c:	b672      	cpsid	i
 800b76e:	f383 8811 	msr	BASEPRI, r3
 800b772:	f3bf 8f6f 	isb	sy
 800b776:	f3bf 8f4f 	dsb	sy
 800b77a:	b662      	cpsie	i
 800b77c:	60bb      	str	r3, [r7, #8]
}
 800b77e:	bf00      	nop
 800b780:	bf00      	nop
 800b782:	e7fd      	b.n	800b780 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b784:	f002 ff4a 	bl	800e61c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b790:	68f9      	ldr	r1, [r7, #12]
 800b792:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b794:	fb01 f303 	mul.w	r3, r1, r3
 800b798:	441a      	add	r2, r3
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7b4:	3b01      	subs	r3, #1
 800b7b6:	68f9      	ldr	r1, [r7, #12]
 800b7b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b7ba:	fb01 f303 	mul.w	r3, r1, r3
 800b7be:	441a      	add	r2, r3
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	22ff      	movs	r2, #255	@ 0xff
 800b7c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	22ff      	movs	r2, #255	@ 0xff
 800b7d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d114      	bne.n	800b804 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	691b      	ldr	r3, [r3, #16]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d01a      	beq.n	800b818 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	3310      	adds	r3, #16
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f001 fdc4 	bl	800d374 <xTaskRemoveFromEventList>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d012      	beq.n	800b818 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b7f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b828 <xQueueGenericReset+0xd4>)
 800b7f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7f8:	601a      	str	r2, [r3, #0]
 800b7fa:	f3bf 8f4f 	dsb	sy
 800b7fe:	f3bf 8f6f 	isb	sy
 800b802:	e009      	b.n	800b818 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	3310      	adds	r3, #16
 800b808:	4618      	mov	r0, r3
 800b80a:	f7ff feef 	bl	800b5ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	3324      	adds	r3, #36	@ 0x24
 800b812:	4618      	mov	r0, r3
 800b814:	f7ff feea 	bl	800b5ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b818:	f002 ff36 	bl	800e688 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b81c:	2301      	movs	r3, #1
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3710      	adds	r7, #16
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	e000ed04 	.word	0xe000ed04

0800b82c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b08e      	sub	sp, #56	@ 0x38
 800b830:	af02      	add	r7, sp, #8
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	607a      	str	r2, [r7, #4]
 800b838:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d10d      	bne.n	800b85c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800b840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b844:	b672      	cpsid	i
 800b846:	f383 8811 	msr	BASEPRI, r3
 800b84a:	f3bf 8f6f 	isb	sy
 800b84e:	f3bf 8f4f 	dsb	sy
 800b852:	b662      	cpsie	i
 800b854:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b856:	bf00      	nop
 800b858:	bf00      	nop
 800b85a:	e7fd      	b.n	800b858 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d10d      	bne.n	800b87e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800b862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b866:	b672      	cpsid	i
 800b868:	f383 8811 	msr	BASEPRI, r3
 800b86c:	f3bf 8f6f 	isb	sy
 800b870:	f3bf 8f4f 	dsb	sy
 800b874:	b662      	cpsie	i
 800b876:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b878:	bf00      	nop
 800b87a:	bf00      	nop
 800b87c:	e7fd      	b.n	800b87a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d002      	beq.n	800b88a <xQueueGenericCreateStatic+0x5e>
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d001      	beq.n	800b88e <xQueueGenericCreateStatic+0x62>
 800b88a:	2301      	movs	r3, #1
 800b88c:	e000      	b.n	800b890 <xQueueGenericCreateStatic+0x64>
 800b88e:	2300      	movs	r3, #0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d10d      	bne.n	800b8b0 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800b894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b898:	b672      	cpsid	i
 800b89a:	f383 8811 	msr	BASEPRI, r3
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f3bf 8f4f 	dsb	sy
 800b8a6:	b662      	cpsie	i
 800b8a8:	623b      	str	r3, [r7, #32]
}
 800b8aa:	bf00      	nop
 800b8ac:	bf00      	nop
 800b8ae:	e7fd      	b.n	800b8ac <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d102      	bne.n	800b8bc <xQueueGenericCreateStatic+0x90>
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d101      	bne.n	800b8c0 <xQueueGenericCreateStatic+0x94>
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e000      	b.n	800b8c2 <xQueueGenericCreateStatic+0x96>
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d10d      	bne.n	800b8e2 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800b8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ca:	b672      	cpsid	i
 800b8cc:	f383 8811 	msr	BASEPRI, r3
 800b8d0:	f3bf 8f6f 	isb	sy
 800b8d4:	f3bf 8f4f 	dsb	sy
 800b8d8:	b662      	cpsie	i
 800b8da:	61fb      	str	r3, [r7, #28]
}
 800b8dc:	bf00      	nop
 800b8de:	bf00      	nop
 800b8e0:	e7fd      	b.n	800b8de <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b8e2:	2350      	movs	r3, #80	@ 0x50
 800b8e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	2b50      	cmp	r3, #80	@ 0x50
 800b8ea:	d00d      	beq.n	800b908 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800b8ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f0:	b672      	cpsid	i
 800b8f2:	f383 8811 	msr	BASEPRI, r3
 800b8f6:	f3bf 8f6f 	isb	sy
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	b662      	cpsie	i
 800b900:	61bb      	str	r3, [r7, #24]
}
 800b902:	bf00      	nop
 800b904:	bf00      	nop
 800b906:	e7fd      	b.n	800b904 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b908:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b90e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b910:	2b00      	cmp	r3, #0
 800b912:	d00d      	beq.n	800b930 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b916:	2201      	movs	r2, #1
 800b918:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b91c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b922:	9300      	str	r3, [sp, #0]
 800b924:	4613      	mov	r3, r2
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	68b9      	ldr	r1, [r7, #8]
 800b92a:	68f8      	ldr	r0, [r7, #12]
 800b92c:	f000 f848 	bl	800b9c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b932:	4618      	mov	r0, r3
 800b934:	3730      	adds	r7, #48	@ 0x30
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b08a      	sub	sp, #40	@ 0x28
 800b93e:	af02      	add	r7, sp, #8
 800b940:	60f8      	str	r0, [r7, #12]
 800b942:	60b9      	str	r1, [r7, #8]
 800b944:	4613      	mov	r3, r2
 800b946:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d10d      	bne.n	800b96a <xQueueGenericCreate+0x30>
	__asm volatile
 800b94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b952:	b672      	cpsid	i
 800b954:	f383 8811 	msr	BASEPRI, r3
 800b958:	f3bf 8f6f 	isb	sy
 800b95c:	f3bf 8f4f 	dsb	sy
 800b960:	b662      	cpsie	i
 800b962:	613b      	str	r3, [r7, #16]
}
 800b964:	bf00      	nop
 800b966:	bf00      	nop
 800b968:	e7fd      	b.n	800b966 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d102      	bne.n	800b976 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b970:	2300      	movs	r3, #0
 800b972:	61fb      	str	r3, [r7, #28]
 800b974:	e004      	b.n	800b980 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	68ba      	ldr	r2, [r7, #8]
 800b97a:	fb02 f303 	mul.w	r3, r2, r3
 800b97e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	3350      	adds	r3, #80	@ 0x50
 800b984:	4618      	mov	r0, r3
 800b986:	f002 ff77 	bl	800e878 <pvPortMalloc>
 800b98a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d011      	beq.n	800b9b6 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b992:	69bb      	ldr	r3, [r7, #24]
 800b994:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	3350      	adds	r3, #80	@ 0x50
 800b99a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b99c:	69bb      	ldr	r3, [r7, #24]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b9a4:	79fa      	ldrb	r2, [r7, #7]
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	9300      	str	r3, [sp, #0]
 800b9aa:	4613      	mov	r3, r2
 800b9ac:	697a      	ldr	r2, [r7, #20]
 800b9ae:	68b9      	ldr	r1, [r7, #8]
 800b9b0:	68f8      	ldr	r0, [r7, #12]
 800b9b2:	f000 f805 	bl	800b9c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b9b6:	69bb      	ldr	r3, [r7, #24]
	}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3720      	adds	r7, #32
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	607a      	str	r2, [r7, #4]
 800b9cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d103      	bne.n	800b9dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b9d4:	69bb      	ldr	r3, [r7, #24]
 800b9d6:	69ba      	ldr	r2, [r7, #24]
 800b9d8:	601a      	str	r2, [r3, #0]
 800b9da:	e002      	b.n	800b9e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b9e2:	69bb      	ldr	r3, [r7, #24]
 800b9e4:	68fa      	ldr	r2, [r7, #12]
 800b9e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	68ba      	ldr	r2, [r7, #8]
 800b9ec:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b9ee:	2101      	movs	r1, #1
 800b9f0:	69b8      	ldr	r0, [r7, #24]
 800b9f2:	f7ff feaf 	bl	800b754 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	78fa      	ldrb	r2, [r7, #3]
 800b9fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b9fe:	bf00      	nop
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b082      	sub	sp, #8
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d00e      	beq.n	800ba32 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ba26:	2300      	movs	r3, #0
 800ba28:	2200      	movs	r2, #0
 800ba2a:	2100      	movs	r1, #0
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 f91d 	bl	800bc6c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ba32:	bf00      	nop
 800ba34:	3708      	adds	r7, #8
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b086      	sub	sp, #24
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	4603      	mov	r3, r0
 800ba42:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ba44:	2301      	movs	r3, #1
 800ba46:	617b      	str	r3, [r7, #20]
 800ba48:	2300      	movs	r3, #0
 800ba4a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ba4c:	79fb      	ldrb	r3, [r7, #7]
 800ba4e:	461a      	mov	r2, r3
 800ba50:	6939      	ldr	r1, [r7, #16]
 800ba52:	6978      	ldr	r0, [r7, #20]
 800ba54:	f7ff ff71 	bl	800b93a <xQueueGenericCreate>
 800ba58:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ba5a:	68f8      	ldr	r0, [r7, #12]
 800ba5c:	f7ff ffd3 	bl	800ba06 <prvInitialiseMutex>

		return xNewQueue;
 800ba60:	68fb      	ldr	r3, [r7, #12]
	}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3718      	adds	r7, #24
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b088      	sub	sp, #32
 800ba6e:	af02      	add	r7, sp, #8
 800ba70:	4603      	mov	r3, r0
 800ba72:	6039      	str	r1, [r7, #0]
 800ba74:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ba76:	2301      	movs	r3, #1
 800ba78:	617b      	str	r3, [r7, #20]
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ba7e:	79fb      	ldrb	r3, [r7, #7]
 800ba80:	9300      	str	r3, [sp, #0]
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	2200      	movs	r2, #0
 800ba86:	6939      	ldr	r1, [r7, #16]
 800ba88:	6978      	ldr	r0, [r7, #20]
 800ba8a:	f7ff fecf 	bl	800b82c <xQueueGenericCreateStatic>
 800ba8e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f7ff ffb8 	bl	800ba06 <prvInitialiseMutex>

		return xNewQueue;
 800ba96:	68fb      	ldr	r3, [r7, #12]
	}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3718      	adds	r7, #24
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800baa0:	b590      	push	{r4, r7, lr}
 800baa2:	b087      	sub	sp, #28
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d10d      	bne.n	800bace <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800bab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bab6:	b672      	cpsid	i
 800bab8:	f383 8811 	msr	BASEPRI, r3
 800babc:	f3bf 8f6f 	isb	sy
 800bac0:	f3bf 8f4f 	dsb	sy
 800bac4:	b662      	cpsie	i
 800bac6:	60fb      	str	r3, [r7, #12]
}
 800bac8:	bf00      	nop
 800baca:	bf00      	nop
 800bacc:	e7fd      	b.n	800baca <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	689c      	ldr	r4, [r3, #8]
 800bad2:	f001 fe1d 	bl	800d710 <xTaskGetCurrentTaskHandle>
 800bad6:	4603      	mov	r3, r0
 800bad8:	429c      	cmp	r4, r3
 800bada:	d111      	bne.n	800bb00 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	1e5a      	subs	r2, r3, #1
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	68db      	ldr	r3, [r3, #12]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d105      	bne.n	800bafa <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800baee:	2300      	movs	r3, #0
 800baf0:	2200      	movs	r2, #0
 800baf2:	2100      	movs	r1, #0
 800baf4:	6938      	ldr	r0, [r7, #16]
 800baf6:	f000 f8b9 	bl	800bc6c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800bafa:	2301      	movs	r3, #1
 800bafc:	617b      	str	r3, [r7, #20]
 800bafe:	e001      	b.n	800bb04 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800bb00:	2300      	movs	r3, #0
 800bb02:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800bb04:	697b      	ldr	r3, [r7, #20]
	}
 800bb06:	4618      	mov	r0, r3
 800bb08:	371c      	adds	r7, #28
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd90      	pop	{r4, r7, pc}

0800bb0e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800bb0e:	b590      	push	{r4, r7, lr}
 800bb10:	b087      	sub	sp, #28
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d10d      	bne.n	800bb3e <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800bb22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb26:	b672      	cpsid	i
 800bb28:	f383 8811 	msr	BASEPRI, r3
 800bb2c:	f3bf 8f6f 	isb	sy
 800bb30:	f3bf 8f4f 	dsb	sy
 800bb34:	b662      	cpsie	i
 800bb36:	60fb      	str	r3, [r7, #12]
}
 800bb38:	bf00      	nop
 800bb3a:	bf00      	nop
 800bb3c:	e7fd      	b.n	800bb3a <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	689c      	ldr	r4, [r3, #8]
 800bb42:	f001 fde5 	bl	800d710 <xTaskGetCurrentTaskHandle>
 800bb46:	4603      	mov	r3, r0
 800bb48:	429c      	cmp	r4, r3
 800bb4a:	d107      	bne.n	800bb5c <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	1c5a      	adds	r2, r3, #1
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800bb56:	2301      	movs	r3, #1
 800bb58:	617b      	str	r3, [r7, #20]
 800bb5a:	e00c      	b.n	800bb76 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800bb5c:	6839      	ldr	r1, [r7, #0]
 800bb5e:	6938      	ldr	r0, [r7, #16]
 800bb60:	f000 fbb2 	bl	800c2c8 <xQueueSemaphoreTake>
 800bb64:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d004      	beq.n	800bb76 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	1c5a      	adds	r2, r3, #1
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800bb76:	697b      	ldr	r3, [r7, #20]
	}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	371c      	adds	r7, #28
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd90      	pop	{r4, r7, pc}

0800bb80 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b08a      	sub	sp, #40	@ 0x28
 800bb84:	af02      	add	r7, sp, #8
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d10d      	bne.n	800bbae <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800bb92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb96:	b672      	cpsid	i
 800bb98:	f383 8811 	msr	BASEPRI, r3
 800bb9c:	f3bf 8f6f 	isb	sy
 800bba0:	f3bf 8f4f 	dsb	sy
 800bba4:	b662      	cpsie	i
 800bba6:	61bb      	str	r3, [r7, #24]
}
 800bba8:	bf00      	nop
 800bbaa:	bf00      	nop
 800bbac:	e7fd      	b.n	800bbaa <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d90d      	bls.n	800bbd2 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800bbb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbba:	b672      	cpsid	i
 800bbbc:	f383 8811 	msr	BASEPRI, r3
 800bbc0:	f3bf 8f6f 	isb	sy
 800bbc4:	f3bf 8f4f 	dsb	sy
 800bbc8:	b662      	cpsie	i
 800bbca:	617b      	str	r3, [r7, #20]
}
 800bbcc:	bf00      	nop
 800bbce:	bf00      	nop
 800bbd0:	e7fd      	b.n	800bbce <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bbd2:	2302      	movs	r3, #2
 800bbd4:	9300      	str	r3, [sp, #0]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	2100      	movs	r1, #0
 800bbdc:	68f8      	ldr	r0, [r7, #12]
 800bbde:	f7ff fe25 	bl	800b82c <xQueueGenericCreateStatic>
 800bbe2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800bbe4:	69fb      	ldr	r3, [r7, #28]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d002      	beq.n	800bbf0 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bbea:	69fb      	ldr	r3, [r7, #28]
 800bbec:	68ba      	ldr	r2, [r7, #8]
 800bbee:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bbf0:	69fb      	ldr	r3, [r7, #28]
	}
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	3720      	adds	r7, #32
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b086      	sub	sp, #24
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
 800bc02:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d10d      	bne.n	800bc26 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800bc0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc0e:	b672      	cpsid	i
 800bc10:	f383 8811 	msr	BASEPRI, r3
 800bc14:	f3bf 8f6f 	isb	sy
 800bc18:	f3bf 8f4f 	dsb	sy
 800bc1c:	b662      	cpsie	i
 800bc1e:	613b      	str	r3, [r7, #16]
}
 800bc20:	bf00      	nop
 800bc22:	bf00      	nop
 800bc24:	e7fd      	b.n	800bc22 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bc26:	683a      	ldr	r2, [r7, #0]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d90d      	bls.n	800bc4a <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800bc2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc32:	b672      	cpsid	i
 800bc34:	f383 8811 	msr	BASEPRI, r3
 800bc38:	f3bf 8f6f 	isb	sy
 800bc3c:	f3bf 8f4f 	dsb	sy
 800bc40:	b662      	cpsie	i
 800bc42:	60fb      	str	r3, [r7, #12]
}
 800bc44:	bf00      	nop
 800bc46:	bf00      	nop
 800bc48:	e7fd      	b.n	800bc46 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bc4a:	2202      	movs	r2, #2
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f7ff fe73 	bl	800b93a <xQueueGenericCreate>
 800bc54:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d002      	beq.n	800bc62 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	683a      	ldr	r2, [r7, #0]
 800bc60:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bc62:	697b      	ldr	r3, [r7, #20]
	}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3718      	adds	r7, #24
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b08e      	sub	sp, #56	@ 0x38
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]
 800bc78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bc82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d10d      	bne.n	800bca4 <xQueueGenericSend+0x38>
	__asm volatile
 800bc88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc8c:	b672      	cpsid	i
 800bc8e:	f383 8811 	msr	BASEPRI, r3
 800bc92:	f3bf 8f6f 	isb	sy
 800bc96:	f3bf 8f4f 	dsb	sy
 800bc9a:	b662      	cpsie	i
 800bc9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bc9e:	bf00      	nop
 800bca0:	bf00      	nop
 800bca2:	e7fd      	b.n	800bca0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d103      	bne.n	800bcb2 <xQueueGenericSend+0x46>
 800bcaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d101      	bne.n	800bcb6 <xQueueGenericSend+0x4a>
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e000      	b.n	800bcb8 <xQueueGenericSend+0x4c>
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d10d      	bne.n	800bcd8 <xQueueGenericSend+0x6c>
	__asm volatile
 800bcbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcc0:	b672      	cpsid	i
 800bcc2:	f383 8811 	msr	BASEPRI, r3
 800bcc6:	f3bf 8f6f 	isb	sy
 800bcca:	f3bf 8f4f 	dsb	sy
 800bcce:	b662      	cpsie	i
 800bcd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bcd2:	bf00      	nop
 800bcd4:	bf00      	nop
 800bcd6:	e7fd      	b.n	800bcd4 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	2b02      	cmp	r3, #2
 800bcdc:	d103      	bne.n	800bce6 <xQueueGenericSend+0x7a>
 800bcde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d101      	bne.n	800bcea <xQueueGenericSend+0x7e>
 800bce6:	2301      	movs	r3, #1
 800bce8:	e000      	b.n	800bcec <xQueueGenericSend+0x80>
 800bcea:	2300      	movs	r3, #0
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d10d      	bne.n	800bd0c <xQueueGenericSend+0xa0>
	__asm volatile
 800bcf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf4:	b672      	cpsid	i
 800bcf6:	f383 8811 	msr	BASEPRI, r3
 800bcfa:	f3bf 8f6f 	isb	sy
 800bcfe:	f3bf 8f4f 	dsb	sy
 800bd02:	b662      	cpsie	i
 800bd04:	623b      	str	r3, [r7, #32]
}
 800bd06:	bf00      	nop
 800bd08:	bf00      	nop
 800bd0a:	e7fd      	b.n	800bd08 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd0c:	f001 fd10 	bl	800d730 <xTaskGetSchedulerState>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d102      	bne.n	800bd1c <xQueueGenericSend+0xb0>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d101      	bne.n	800bd20 <xQueueGenericSend+0xb4>
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	e000      	b.n	800bd22 <xQueueGenericSend+0xb6>
 800bd20:	2300      	movs	r3, #0
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d10d      	bne.n	800bd42 <xQueueGenericSend+0xd6>
	__asm volatile
 800bd26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd2a:	b672      	cpsid	i
 800bd2c:	f383 8811 	msr	BASEPRI, r3
 800bd30:	f3bf 8f6f 	isb	sy
 800bd34:	f3bf 8f4f 	dsb	sy
 800bd38:	b662      	cpsie	i
 800bd3a:	61fb      	str	r3, [r7, #28]
}
 800bd3c:	bf00      	nop
 800bd3e:	bf00      	nop
 800bd40:	e7fd      	b.n	800bd3e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd42:	f002 fc6b 	bl	800e61c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d302      	bcc.n	800bd58 <xQueueGenericSend+0xec>
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	2b02      	cmp	r3, #2
 800bd56:	d129      	bne.n	800bdac <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd58:	683a      	ldr	r2, [r7, #0]
 800bd5a:	68b9      	ldr	r1, [r7, #8]
 800bd5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd5e:	f000 fc91 	bl	800c684 <prvCopyDataToQueue>
 800bd62:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d010      	beq.n	800bd8e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd6e:	3324      	adds	r3, #36	@ 0x24
 800bd70:	4618      	mov	r0, r3
 800bd72:	f001 faff 	bl	800d374 <xTaskRemoveFromEventList>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d013      	beq.n	800bda4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bd7c:	4b3f      	ldr	r3, [pc, #252]	@ (800be7c <xQueueGenericSend+0x210>)
 800bd7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd82:	601a      	str	r2, [r3, #0]
 800bd84:	f3bf 8f4f 	dsb	sy
 800bd88:	f3bf 8f6f 	isb	sy
 800bd8c:	e00a      	b.n	800bda4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bd8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d007      	beq.n	800bda4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bd94:	4b39      	ldr	r3, [pc, #228]	@ (800be7c <xQueueGenericSend+0x210>)
 800bd96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd9a:	601a      	str	r2, [r3, #0]
 800bd9c:	f3bf 8f4f 	dsb	sy
 800bda0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bda4:	f002 fc70 	bl	800e688 <vPortExitCritical>
				return pdPASS;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e063      	b.n	800be74 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d103      	bne.n	800bdba <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bdb2:	f002 fc69 	bl	800e688 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	e05c      	b.n	800be74 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bdba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d106      	bne.n	800bdce <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bdc0:	f107 0314 	add.w	r3, r7, #20
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f001 fb3b 	bl	800d440 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bdca:	2301      	movs	r3, #1
 800bdcc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bdce:	f002 fc5b 	bl	800e688 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bdd2:	f001 f861 	bl	800ce98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bdd6:	f002 fc21 	bl	800e61c <vPortEnterCritical>
 800bdda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bddc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bde0:	b25b      	sxtb	r3, r3
 800bde2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bde6:	d103      	bne.n	800bdf0 <xQueueGenericSend+0x184>
 800bde8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdea:	2200      	movs	r2, #0
 800bdec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bdf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bdf6:	b25b      	sxtb	r3, r3
 800bdf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdfc:	d103      	bne.n	800be06 <xQueueGenericSend+0x19a>
 800bdfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be00:	2200      	movs	r2, #0
 800be02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800be06:	f002 fc3f 	bl	800e688 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be0a:	1d3a      	adds	r2, r7, #4
 800be0c:	f107 0314 	add.w	r3, r7, #20
 800be10:	4611      	mov	r1, r2
 800be12:	4618      	mov	r0, r3
 800be14:	f001 fb2a 	bl	800d46c <xTaskCheckForTimeOut>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d124      	bne.n	800be68 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800be1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800be20:	f000 fd28 	bl	800c874 <prvIsQueueFull>
 800be24:	4603      	mov	r3, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d018      	beq.n	800be5c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800be2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be2c:	3310      	adds	r3, #16
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	4611      	mov	r1, r2
 800be32:	4618      	mov	r0, r3
 800be34:	f001 fa48 	bl	800d2c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800be38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800be3a:	f000 fcb3 	bl	800c7a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800be3e:	f001 f839 	bl	800ceb4 <xTaskResumeAll>
 800be42:	4603      	mov	r3, r0
 800be44:	2b00      	cmp	r3, #0
 800be46:	f47f af7c 	bne.w	800bd42 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800be4a:	4b0c      	ldr	r3, [pc, #48]	@ (800be7c <xQueueGenericSend+0x210>)
 800be4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be50:	601a      	str	r2, [r3, #0]
 800be52:	f3bf 8f4f 	dsb	sy
 800be56:	f3bf 8f6f 	isb	sy
 800be5a:	e772      	b.n	800bd42 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800be5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800be5e:	f000 fca1 	bl	800c7a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be62:	f001 f827 	bl	800ceb4 <xTaskResumeAll>
 800be66:	e76c      	b.n	800bd42 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800be68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800be6a:	f000 fc9b 	bl	800c7a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be6e:	f001 f821 	bl	800ceb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800be72:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800be74:	4618      	mov	r0, r3
 800be76:	3738      	adds	r7, #56	@ 0x38
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}
 800be7c:	e000ed04 	.word	0xe000ed04

0800be80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b08e      	sub	sp, #56	@ 0x38
 800be84:	af00      	add	r7, sp, #0
 800be86:	60f8      	str	r0, [r7, #12]
 800be88:	60b9      	str	r1, [r7, #8]
 800be8a:	607a      	str	r2, [r7, #4]
 800be8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800be92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10d      	bne.n	800beb4 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800be98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be9c:	b672      	cpsid	i
 800be9e:	f383 8811 	msr	BASEPRI, r3
 800bea2:	f3bf 8f6f 	isb	sy
 800bea6:	f3bf 8f4f 	dsb	sy
 800beaa:	b662      	cpsie	i
 800beac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800beae:	bf00      	nop
 800beb0:	bf00      	nop
 800beb2:	e7fd      	b.n	800beb0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d103      	bne.n	800bec2 <xQueueGenericSendFromISR+0x42>
 800beba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d101      	bne.n	800bec6 <xQueueGenericSendFromISR+0x46>
 800bec2:	2301      	movs	r3, #1
 800bec4:	e000      	b.n	800bec8 <xQueueGenericSendFromISR+0x48>
 800bec6:	2300      	movs	r3, #0
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d10d      	bne.n	800bee8 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800becc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bed0:	b672      	cpsid	i
 800bed2:	f383 8811 	msr	BASEPRI, r3
 800bed6:	f3bf 8f6f 	isb	sy
 800beda:	f3bf 8f4f 	dsb	sy
 800bede:	b662      	cpsie	i
 800bee0:	623b      	str	r3, [r7, #32]
}
 800bee2:	bf00      	nop
 800bee4:	bf00      	nop
 800bee6:	e7fd      	b.n	800bee4 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	2b02      	cmp	r3, #2
 800beec:	d103      	bne.n	800bef6 <xQueueGenericSendFromISR+0x76>
 800beee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d101      	bne.n	800befa <xQueueGenericSendFromISR+0x7a>
 800bef6:	2301      	movs	r3, #1
 800bef8:	e000      	b.n	800befc <xQueueGenericSendFromISR+0x7c>
 800befa:	2300      	movs	r3, #0
 800befc:	2b00      	cmp	r3, #0
 800befe:	d10d      	bne.n	800bf1c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800bf00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf04:	b672      	cpsid	i
 800bf06:	f383 8811 	msr	BASEPRI, r3
 800bf0a:	f3bf 8f6f 	isb	sy
 800bf0e:	f3bf 8f4f 	dsb	sy
 800bf12:	b662      	cpsie	i
 800bf14:	61fb      	str	r3, [r7, #28]
}
 800bf16:	bf00      	nop
 800bf18:	bf00      	nop
 800bf1a:	e7fd      	b.n	800bf18 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf1c:	f002 fc66 	bl	800e7ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bf20:	f3ef 8211 	mrs	r2, BASEPRI
 800bf24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf28:	b672      	cpsid	i
 800bf2a:	f383 8811 	msr	BASEPRI, r3
 800bf2e:	f3bf 8f6f 	isb	sy
 800bf32:	f3bf 8f4f 	dsb	sy
 800bf36:	b662      	cpsie	i
 800bf38:	61ba      	str	r2, [r7, #24]
 800bf3a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bf3c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d302      	bcc.n	800bf52 <xQueueGenericSendFromISR+0xd2>
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	2b02      	cmp	r3, #2
 800bf50:	d12c      	bne.n	800bfac <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bf52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bf58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf5c:	683a      	ldr	r2, [r7, #0]
 800bf5e:	68b9      	ldr	r1, [r7, #8]
 800bf60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bf62:	f000 fb8f 	bl	800c684 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bf66:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800bf6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf6e:	d112      	bne.n	800bf96 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d016      	beq.n	800bfa6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf7a:	3324      	adds	r3, #36	@ 0x24
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f001 f9f9 	bl	800d374 <xTaskRemoveFromEventList>
 800bf82:	4603      	mov	r3, r0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d00e      	beq.n	800bfa6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d00b      	beq.n	800bfa6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2201      	movs	r2, #1
 800bf92:	601a      	str	r2, [r3, #0]
 800bf94:	e007      	b.n	800bfa6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bf96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	b25a      	sxtb	r2, r3
 800bfa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800bfaa:	e001      	b.n	800bfb0 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bfac:	2300      	movs	r3, #0
 800bfae:	637b      	str	r3, [r7, #52]	@ 0x34
 800bfb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfb2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bfba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bfbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3738      	adds	r7, #56	@ 0x38
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}

0800bfc6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b08e      	sub	sp, #56	@ 0x38
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
 800bfce:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bfd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d10d      	bne.n	800bff6 <xQueueGiveFromISR+0x30>
	__asm volatile
 800bfda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfde:	b672      	cpsid	i
 800bfe0:	f383 8811 	msr	BASEPRI, r3
 800bfe4:	f3bf 8f6f 	isb	sy
 800bfe8:	f3bf 8f4f 	dsb	sy
 800bfec:	b662      	cpsie	i
 800bfee:	623b      	str	r3, [r7, #32]
}
 800bff0:	bf00      	nop
 800bff2:	bf00      	nop
 800bff4:	e7fd      	b.n	800bff2 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d00d      	beq.n	800c01a <xQueueGiveFromISR+0x54>
	__asm volatile
 800bffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c002:	b672      	cpsid	i
 800c004:	f383 8811 	msr	BASEPRI, r3
 800c008:	f3bf 8f6f 	isb	sy
 800c00c:	f3bf 8f4f 	dsb	sy
 800c010:	b662      	cpsie	i
 800c012:	61fb      	str	r3, [r7, #28]
}
 800c014:	bf00      	nop
 800c016:	bf00      	nop
 800c018:	e7fd      	b.n	800c016 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d103      	bne.n	800c02a <xQueueGiveFromISR+0x64>
 800c022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c024:	689b      	ldr	r3, [r3, #8]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d101      	bne.n	800c02e <xQueueGiveFromISR+0x68>
 800c02a:	2301      	movs	r3, #1
 800c02c:	e000      	b.n	800c030 <xQueueGiveFromISR+0x6a>
 800c02e:	2300      	movs	r3, #0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d10d      	bne.n	800c050 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800c034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c038:	b672      	cpsid	i
 800c03a:	f383 8811 	msr	BASEPRI, r3
 800c03e:	f3bf 8f6f 	isb	sy
 800c042:	f3bf 8f4f 	dsb	sy
 800c046:	b662      	cpsie	i
 800c048:	61bb      	str	r3, [r7, #24]
}
 800c04a:	bf00      	nop
 800c04c:	bf00      	nop
 800c04e:	e7fd      	b.n	800c04c <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c050:	f002 fbcc 	bl	800e7ec <vPortValidateInterruptPriority>
	__asm volatile
 800c054:	f3ef 8211 	mrs	r2, BASEPRI
 800c058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c05c:	b672      	cpsid	i
 800c05e:	f383 8811 	msr	BASEPRI, r3
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	b662      	cpsie	i
 800c06c:	617a      	str	r2, [r7, #20]
 800c06e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c070:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c072:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c078:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c07c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c07e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c080:	429a      	cmp	r2, r3
 800c082:	d22b      	bcs.n	800c0dc <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c086:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c08a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c090:	1c5a      	adds	r2, r3, #1
 800c092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c094:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c096:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c09e:	d112      	bne.n	800c0c6 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d016      	beq.n	800c0d6 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0aa:	3324      	adds	r3, #36	@ 0x24
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f001 f961 	bl	800d374 <xTaskRemoveFromEventList>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d00e      	beq.n	800c0d6 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d00b      	beq.n	800c0d6 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	601a      	str	r2, [r3, #0]
 800c0c4:	e007      	b.n	800c0d6 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c0c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	b2db      	uxtb	r3, r3
 800c0ce:	b25a      	sxtb	r2, r3
 800c0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0da:	e001      	b.n	800c0e0 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0e2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f383 8811 	msr	BASEPRI, r3
}
 800c0ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c0ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3738      	adds	r7, #56	@ 0x38
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
	...

0800c0f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b08c      	sub	sp, #48	@ 0x30
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	60b9      	str	r1, [r7, #8]
 800c102:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c104:	2300      	movs	r3, #0
 800c106:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d10d      	bne.n	800c12e <xQueueReceive+0x36>
	__asm volatile
 800c112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c116:	b672      	cpsid	i
 800c118:	f383 8811 	msr	BASEPRI, r3
 800c11c:	f3bf 8f6f 	isb	sy
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	b662      	cpsie	i
 800c126:	623b      	str	r3, [r7, #32]
}
 800c128:	bf00      	nop
 800c12a:	bf00      	nop
 800c12c:	e7fd      	b.n	800c12a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d103      	bne.n	800c13c <xQueueReceive+0x44>
 800c134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d101      	bne.n	800c140 <xQueueReceive+0x48>
 800c13c:	2301      	movs	r3, #1
 800c13e:	e000      	b.n	800c142 <xQueueReceive+0x4a>
 800c140:	2300      	movs	r3, #0
 800c142:	2b00      	cmp	r3, #0
 800c144:	d10d      	bne.n	800c162 <xQueueReceive+0x6a>
	__asm volatile
 800c146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c14a:	b672      	cpsid	i
 800c14c:	f383 8811 	msr	BASEPRI, r3
 800c150:	f3bf 8f6f 	isb	sy
 800c154:	f3bf 8f4f 	dsb	sy
 800c158:	b662      	cpsie	i
 800c15a:	61fb      	str	r3, [r7, #28]
}
 800c15c:	bf00      	nop
 800c15e:	bf00      	nop
 800c160:	e7fd      	b.n	800c15e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c162:	f001 fae5 	bl	800d730 <xTaskGetSchedulerState>
 800c166:	4603      	mov	r3, r0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d102      	bne.n	800c172 <xQueueReceive+0x7a>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d101      	bne.n	800c176 <xQueueReceive+0x7e>
 800c172:	2301      	movs	r3, #1
 800c174:	e000      	b.n	800c178 <xQueueReceive+0x80>
 800c176:	2300      	movs	r3, #0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d10d      	bne.n	800c198 <xQueueReceive+0xa0>
	__asm volatile
 800c17c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c180:	b672      	cpsid	i
 800c182:	f383 8811 	msr	BASEPRI, r3
 800c186:	f3bf 8f6f 	isb	sy
 800c18a:	f3bf 8f4f 	dsb	sy
 800c18e:	b662      	cpsie	i
 800c190:	61bb      	str	r3, [r7, #24]
}
 800c192:	bf00      	nop
 800c194:	bf00      	nop
 800c196:	e7fd      	b.n	800c194 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c198:	f002 fa40 	bl	800e61c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c19e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d01f      	beq.n	800c1e8 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c1a8:	68b9      	ldr	r1, [r7, #8]
 800c1aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1ac:	f000 fad4 	bl	800c758 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b2:	1e5a      	subs	r2, r3, #1
 800c1b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ba:	691b      	ldr	r3, [r3, #16]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d00f      	beq.n	800c1e0 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c1c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c2:	3310      	adds	r3, #16
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f001 f8d5 	bl	800d374 <xTaskRemoveFromEventList>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d007      	beq.n	800c1e0 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c1d0:	4b3c      	ldr	r3, [pc, #240]	@ (800c2c4 <xQueueReceive+0x1cc>)
 800c1d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1d6:	601a      	str	r2, [r3, #0]
 800c1d8:	f3bf 8f4f 	dsb	sy
 800c1dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c1e0:	f002 fa52 	bl	800e688 <vPortExitCritical>
				return pdPASS;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	e069      	b.n	800c2bc <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d103      	bne.n	800c1f6 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c1ee:	f002 fa4b 	bl	800e688 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	e062      	b.n	800c2bc <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d106      	bne.n	800c20a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1fc:	f107 0310 	add.w	r3, r7, #16
 800c200:	4618      	mov	r0, r3
 800c202:	f001 f91d 	bl	800d440 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c206:	2301      	movs	r3, #1
 800c208:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c20a:	f002 fa3d 	bl	800e688 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c20e:	f000 fe43 	bl	800ce98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c212:	f002 fa03 	bl	800e61c <vPortEnterCritical>
 800c216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c218:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c21c:	b25b      	sxtb	r3, r3
 800c21e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c222:	d103      	bne.n	800c22c <xQueueReceive+0x134>
 800c224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c226:	2200      	movs	r2, #0
 800c228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c22c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c22e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c232:	b25b      	sxtb	r3, r3
 800c234:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c238:	d103      	bne.n	800c242 <xQueueReceive+0x14a>
 800c23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c23c:	2200      	movs	r2, #0
 800c23e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c242:	f002 fa21 	bl	800e688 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c246:	1d3a      	adds	r2, r7, #4
 800c248:	f107 0310 	add.w	r3, r7, #16
 800c24c:	4611      	mov	r1, r2
 800c24e:	4618      	mov	r0, r3
 800c250:	f001 f90c 	bl	800d46c <xTaskCheckForTimeOut>
 800c254:	4603      	mov	r3, r0
 800c256:	2b00      	cmp	r3, #0
 800c258:	d123      	bne.n	800c2a2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c25a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c25c:	f000 faf4 	bl	800c848 <prvIsQueueEmpty>
 800c260:	4603      	mov	r3, r0
 800c262:	2b00      	cmp	r3, #0
 800c264:	d017      	beq.n	800c296 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c268:	3324      	adds	r3, #36	@ 0x24
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	4611      	mov	r1, r2
 800c26e:	4618      	mov	r0, r3
 800c270:	f001 f82a 	bl	800d2c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c274:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c276:	f000 fa95 	bl	800c7a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c27a:	f000 fe1b 	bl	800ceb4 <xTaskResumeAll>
 800c27e:	4603      	mov	r3, r0
 800c280:	2b00      	cmp	r3, #0
 800c282:	d189      	bne.n	800c198 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800c284:	4b0f      	ldr	r3, [pc, #60]	@ (800c2c4 <xQueueReceive+0x1cc>)
 800c286:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c28a:	601a      	str	r2, [r3, #0]
 800c28c:	f3bf 8f4f 	dsb	sy
 800c290:	f3bf 8f6f 	isb	sy
 800c294:	e780      	b.n	800c198 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c296:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c298:	f000 fa84 	bl	800c7a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c29c:	f000 fe0a 	bl	800ceb4 <xTaskResumeAll>
 800c2a0:	e77a      	b.n	800c198 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c2a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c2a4:	f000 fa7e 	bl	800c7a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c2a8:	f000 fe04 	bl	800ceb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c2ae:	f000 facb 	bl	800c848 <prvIsQueueEmpty>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	f43f af6f 	beq.w	800c198 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c2ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3730      	adds	r7, #48	@ 0x30
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}
 800c2c4:	e000ed04 	.word	0xe000ed04

0800c2c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b08e      	sub	sp, #56	@ 0x38
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c2de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d10d      	bne.n	800c300 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800c2e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2e8:	b672      	cpsid	i
 800c2ea:	f383 8811 	msr	BASEPRI, r3
 800c2ee:	f3bf 8f6f 	isb	sy
 800c2f2:	f3bf 8f4f 	dsb	sy
 800c2f6:	b662      	cpsie	i
 800c2f8:	623b      	str	r3, [r7, #32]
}
 800c2fa:	bf00      	nop
 800c2fc:	bf00      	nop
 800c2fe:	e7fd      	b.n	800c2fc <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c304:	2b00      	cmp	r3, #0
 800c306:	d00d      	beq.n	800c324 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800c308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c30c:	b672      	cpsid	i
 800c30e:	f383 8811 	msr	BASEPRI, r3
 800c312:	f3bf 8f6f 	isb	sy
 800c316:	f3bf 8f4f 	dsb	sy
 800c31a:	b662      	cpsie	i
 800c31c:	61fb      	str	r3, [r7, #28]
}
 800c31e:	bf00      	nop
 800c320:	bf00      	nop
 800c322:	e7fd      	b.n	800c320 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c324:	f001 fa04 	bl	800d730 <xTaskGetSchedulerState>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d102      	bne.n	800c334 <xQueueSemaphoreTake+0x6c>
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d101      	bne.n	800c338 <xQueueSemaphoreTake+0x70>
 800c334:	2301      	movs	r3, #1
 800c336:	e000      	b.n	800c33a <xQueueSemaphoreTake+0x72>
 800c338:	2300      	movs	r3, #0
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d10d      	bne.n	800c35a <xQueueSemaphoreTake+0x92>
	__asm volatile
 800c33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c342:	b672      	cpsid	i
 800c344:	f383 8811 	msr	BASEPRI, r3
 800c348:	f3bf 8f6f 	isb	sy
 800c34c:	f3bf 8f4f 	dsb	sy
 800c350:	b662      	cpsie	i
 800c352:	61bb      	str	r3, [r7, #24]
}
 800c354:	bf00      	nop
 800c356:	bf00      	nop
 800c358:	e7fd      	b.n	800c356 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c35a:	f002 f95f 	bl	800e61c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c35e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c362:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c366:	2b00      	cmp	r3, #0
 800c368:	d024      	beq.n	800c3b4 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c36c:	1e5a      	subs	r2, r3, #1
 800c36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c370:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d104      	bne.n	800c384 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c37a:	f001 fb5b 	bl	800da34 <pvTaskIncrementMutexHeldCount>
 800c37e:	4602      	mov	r2, r0
 800c380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c382:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c386:	691b      	ldr	r3, [r3, #16]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d00f      	beq.n	800c3ac <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c38e:	3310      	adds	r3, #16
 800c390:	4618      	mov	r0, r3
 800c392:	f000 ffef 	bl	800d374 <xTaskRemoveFromEventList>
 800c396:	4603      	mov	r3, r0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d007      	beq.n	800c3ac <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c39c:	4b55      	ldr	r3, [pc, #340]	@ (800c4f4 <xQueueSemaphoreTake+0x22c>)
 800c39e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3a2:	601a      	str	r2, [r3, #0]
 800c3a4:	f3bf 8f4f 	dsb	sy
 800c3a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c3ac:	f002 f96c 	bl	800e688 <vPortExitCritical>
				return pdPASS;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	e09a      	b.n	800c4ea <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d114      	bne.n	800c3e4 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d00d      	beq.n	800c3dc <xQueueSemaphoreTake+0x114>
	__asm volatile
 800c3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c4:	b672      	cpsid	i
 800c3c6:	f383 8811 	msr	BASEPRI, r3
 800c3ca:	f3bf 8f6f 	isb	sy
 800c3ce:	f3bf 8f4f 	dsb	sy
 800c3d2:	b662      	cpsie	i
 800c3d4:	617b      	str	r3, [r7, #20]
}
 800c3d6:	bf00      	nop
 800c3d8:	bf00      	nop
 800c3da:	e7fd      	b.n	800c3d8 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c3dc:	f002 f954 	bl	800e688 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	e082      	b.n	800c4ea <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c3e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d106      	bne.n	800c3f8 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c3ea:	f107 030c 	add.w	r3, r7, #12
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f001 f826 	bl	800d440 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c3f8:	f002 f946 	bl	800e688 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c3fc:	f000 fd4c 	bl	800ce98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c400:	f002 f90c 	bl	800e61c <vPortEnterCritical>
 800c404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c406:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c40a:	b25b      	sxtb	r3, r3
 800c40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c410:	d103      	bne.n	800c41a <xQueueSemaphoreTake+0x152>
 800c412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c414:	2200      	movs	r2, #0
 800c416:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c41a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c41c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c420:	b25b      	sxtb	r3, r3
 800c422:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c426:	d103      	bne.n	800c430 <xQueueSemaphoreTake+0x168>
 800c428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c42a:	2200      	movs	r2, #0
 800c42c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c430:	f002 f92a 	bl	800e688 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c434:	463a      	mov	r2, r7
 800c436:	f107 030c 	add.w	r3, r7, #12
 800c43a:	4611      	mov	r1, r2
 800c43c:	4618      	mov	r0, r3
 800c43e:	f001 f815 	bl	800d46c <xTaskCheckForTimeOut>
 800c442:	4603      	mov	r3, r0
 800c444:	2b00      	cmp	r3, #0
 800c446:	d132      	bne.n	800c4ae <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c448:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c44a:	f000 f9fd 	bl	800c848 <prvIsQueueEmpty>
 800c44e:	4603      	mov	r3, r0
 800c450:	2b00      	cmp	r3, #0
 800c452:	d026      	beq.n	800c4a2 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d109      	bne.n	800c470 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800c45c:	f002 f8de 	bl	800e61c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	4618      	mov	r0, r3
 800c466:	f001 f981 	bl	800d76c <xTaskPriorityInherit>
 800c46a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800c46c:	f002 f90c 	bl	800e688 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c472:	3324      	adds	r3, #36	@ 0x24
 800c474:	683a      	ldr	r2, [r7, #0]
 800c476:	4611      	mov	r1, r2
 800c478:	4618      	mov	r0, r3
 800c47a:	f000 ff25 	bl	800d2c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c47e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c480:	f000 f990 	bl	800c7a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c484:	f000 fd16 	bl	800ceb4 <xTaskResumeAll>
 800c488:	4603      	mov	r3, r0
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	f47f af65 	bne.w	800c35a <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800c490:	4b18      	ldr	r3, [pc, #96]	@ (800c4f4 <xQueueSemaphoreTake+0x22c>)
 800c492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c496:	601a      	str	r2, [r3, #0]
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	e75b      	b.n	800c35a <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c4a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c4a4:	f000 f97e 	bl	800c7a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4a8:	f000 fd04 	bl	800ceb4 <xTaskResumeAll>
 800c4ac:	e755      	b.n	800c35a <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c4ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c4b0:	f000 f978 	bl	800c7a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4b4:	f000 fcfe 	bl	800ceb4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c4ba:	f000 f9c5 	bl	800c848 <prvIsQueueEmpty>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f43f af4a 	beq.w	800c35a <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d00d      	beq.n	800c4e8 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800c4cc:	f002 f8a6 	bl	800e61c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c4d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c4d2:	f000 f8bf 	bl	800c654 <prvGetDisinheritPriorityAfterTimeout>
 800c4d6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f001 fa20 	bl	800d924 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c4e4:	f002 f8d0 	bl	800e688 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c4e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3738      	adds	r7, #56	@ 0x38
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	e000ed04 	.word	0xe000ed04

0800c4f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b08e      	sub	sp, #56	@ 0x38
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	60f8      	str	r0, [r7, #12]
 800c500:	60b9      	str	r1, [r7, #8]
 800c502:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d10d      	bne.n	800c52a <xQueueReceiveFromISR+0x32>
	__asm volatile
 800c50e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c512:	b672      	cpsid	i
 800c514:	f383 8811 	msr	BASEPRI, r3
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	f3bf 8f4f 	dsb	sy
 800c520:	b662      	cpsie	i
 800c522:	623b      	str	r3, [r7, #32]
}
 800c524:	bf00      	nop
 800c526:	bf00      	nop
 800c528:	e7fd      	b.n	800c526 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d103      	bne.n	800c538 <xQueueReceiveFromISR+0x40>
 800c530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c534:	2b00      	cmp	r3, #0
 800c536:	d101      	bne.n	800c53c <xQueueReceiveFromISR+0x44>
 800c538:	2301      	movs	r3, #1
 800c53a:	e000      	b.n	800c53e <xQueueReceiveFromISR+0x46>
 800c53c:	2300      	movs	r3, #0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d10d      	bne.n	800c55e <xQueueReceiveFromISR+0x66>
	__asm volatile
 800c542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c546:	b672      	cpsid	i
 800c548:	f383 8811 	msr	BASEPRI, r3
 800c54c:	f3bf 8f6f 	isb	sy
 800c550:	f3bf 8f4f 	dsb	sy
 800c554:	b662      	cpsie	i
 800c556:	61fb      	str	r3, [r7, #28]
}
 800c558:	bf00      	nop
 800c55a:	bf00      	nop
 800c55c:	e7fd      	b.n	800c55a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c55e:	f002 f945 	bl	800e7ec <vPortValidateInterruptPriority>
	__asm volatile
 800c562:	f3ef 8211 	mrs	r2, BASEPRI
 800c566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c56a:	b672      	cpsid	i
 800c56c:	f383 8811 	msr	BASEPRI, r3
 800c570:	f3bf 8f6f 	isb	sy
 800c574:	f3bf 8f4f 	dsb	sy
 800c578:	b662      	cpsie	i
 800c57a:	61ba      	str	r2, [r7, #24]
 800c57c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c57e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c580:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c586:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d02f      	beq.n	800c5ee <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c590:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c594:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c598:	68b9      	ldr	r1, [r7, #8]
 800c59a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c59c:	f000 f8dc 	bl	800c758 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c5a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5a2:	1e5a      	subs	r2, r3, #1
 800c5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5a6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c5a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5b0:	d112      	bne.n	800c5d8 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b4:	691b      	ldr	r3, [r3, #16]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d016      	beq.n	800c5e8 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5bc:	3310      	adds	r3, #16
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f000 fed8 	bl	800d374 <xTaskRemoveFromEventList>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d00e      	beq.n	800c5e8 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d00b      	beq.n	800c5e8 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	601a      	str	r2, [r3, #0]
 800c5d6:	e007      	b.n	800c5e8 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c5d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c5dc:	3301      	adds	r3, #1
 800c5de:	b2db      	uxtb	r3, r3
 800c5e0:	b25a      	sxtb	r2, r3
 800c5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5ec:	e001      	b.n	800c5f2 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	f383 8811 	msr	BASEPRI, r3
}
 800c5fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c5fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c600:	4618      	mov	r0, r3
 800c602:	3738      	adds	r7, #56	@ 0x38
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d10d      	bne.n	800c636 <vQueueDelete+0x2e>
	__asm volatile
 800c61a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c61e:	b672      	cpsid	i
 800c620:	f383 8811 	msr	BASEPRI, r3
 800c624:	f3bf 8f6f 	isb	sy
 800c628:	f3bf 8f4f 	dsb	sy
 800c62c:	b662      	cpsie	i
 800c62e:	60bb      	str	r3, [r7, #8]
}
 800c630:	bf00      	nop
 800c632:	bf00      	nop
 800c634:	e7fd      	b.n	800c632 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c636:	68f8      	ldr	r0, [r7, #12]
 800c638:	f000 f95e 	bl	800c8f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800c642:	2b00      	cmp	r3, #0
 800c644:	d102      	bne.n	800c64c <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800c646:	68f8      	ldr	r0, [r7, #12]
 800c648:	f002 f9e4 	bl	800ea14 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c64c:	bf00      	nop
 800c64e:	3710      	adds	r7, #16
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c654:	b480      	push	{r7}
 800c656:	b085      	sub	sp, #20
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c660:	2b00      	cmp	r3, #0
 800c662:	d006      	beq.n	800c672 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800c66e:	60fb      	str	r3, [r7, #12]
 800c670:	e001      	b.n	800c676 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c672:	2300      	movs	r3, #0
 800c674:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c676:	68fb      	ldr	r3, [r7, #12]
	}
 800c678:	4618      	mov	r0, r3
 800c67a:	3714      	adds	r7, #20
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr

0800c684 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b086      	sub	sp, #24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c690:	2300      	movs	r3, #0
 800c692:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c698:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d10d      	bne.n	800c6be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d14d      	bne.n	800c746 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	689b      	ldr	r3, [r3, #8]
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f001 f8c4 	bl	800d83c <xTaskPriorityDisinherit>
 800c6b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	609a      	str	r2, [r3, #8]
 800c6bc:	e043      	b.n	800c746 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d119      	bne.n	800c6f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6858      	ldr	r0, [r3, #4]
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	68b9      	ldr	r1, [r7, #8]
 800c6d0:	f00d fec5 	bl	801a45e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	685a      	ldr	r2, [r3, #4]
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6dc:	441a      	add	r2, r3
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	685a      	ldr	r2, [r3, #4]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d32b      	bcc.n	800c746 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681a      	ldr	r2, [r3, #0]
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	605a      	str	r2, [r3, #4]
 800c6f6:	e026      	b.n	800c746 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	68d8      	ldr	r0, [r3, #12]
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c700:	461a      	mov	r2, r3
 800c702:	68b9      	ldr	r1, [r7, #8]
 800c704:	f00d feab 	bl	801a45e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	68da      	ldr	r2, [r3, #12]
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c710:	425b      	negs	r3, r3
 800c712:	441a      	add	r2, r3
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	68da      	ldr	r2, [r3, #12]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	429a      	cmp	r2, r3
 800c722:	d207      	bcs.n	800c734 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	689a      	ldr	r2, [r3, #8]
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c72c:	425b      	negs	r3, r3
 800c72e:	441a      	add	r2, r3
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2b02      	cmp	r3, #2
 800c738:	d105      	bne.n	800c746 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c73a:	693b      	ldr	r3, [r7, #16]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d002      	beq.n	800c746 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	3b01      	subs	r3, #1
 800c744:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	1c5a      	adds	r2, r3, #1
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c74e:	697b      	ldr	r3, [r7, #20]
}
 800c750:	4618      	mov	r0, r3
 800c752:	3718      	adds	r7, #24
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}

0800c758 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c766:	2b00      	cmp	r3, #0
 800c768:	d018      	beq.n	800c79c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	68da      	ldr	r2, [r3, #12]
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c772:	441a      	add	r2, r3
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	68da      	ldr	r2, [r3, #12]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	689b      	ldr	r3, [r3, #8]
 800c780:	429a      	cmp	r2, r3
 800c782:	d303      	bcc.n	800c78c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681a      	ldr	r2, [r3, #0]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	68d9      	ldr	r1, [r3, #12]
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c794:	461a      	mov	r2, r3
 800c796:	6838      	ldr	r0, [r7, #0]
 800c798:	f00d fe61 	bl	801a45e <memcpy>
	}
}
 800c79c:	bf00      	nop
 800c79e:	3708      	adds	r7, #8
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}

0800c7a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c7ac:	f001 ff36 	bl	800e61c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c7b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7b8:	e011      	b.n	800c7de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d012      	beq.n	800c7e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	3324      	adds	r3, #36	@ 0x24
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f000 fdd4 	bl	800d374 <xTaskRemoveFromEventList>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d001      	beq.n	800c7d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c7d2:	f000 feb3 	bl	800d53c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c7d6:	7bfb      	ldrb	r3, [r7, #15]
 800c7d8:	3b01      	subs	r3, #1
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	dce9      	bgt.n	800c7ba <prvUnlockQueue+0x16>
 800c7e6:	e000      	b.n	800c7ea <prvUnlockQueue+0x46>
					break;
 800c7e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	22ff      	movs	r2, #255	@ 0xff
 800c7ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c7f2:	f001 ff49 	bl	800e688 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c7f6:	f001 ff11 	bl	800e61c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c800:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c802:	e011      	b.n	800c828 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	691b      	ldr	r3, [r3, #16]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d012      	beq.n	800c832 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	3310      	adds	r3, #16
 800c810:	4618      	mov	r0, r3
 800c812:	f000 fdaf 	bl	800d374 <xTaskRemoveFromEventList>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d001      	beq.n	800c820 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c81c:	f000 fe8e 	bl	800d53c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c820:	7bbb      	ldrb	r3, [r7, #14]
 800c822:	3b01      	subs	r3, #1
 800c824:	b2db      	uxtb	r3, r3
 800c826:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c828:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	dce9      	bgt.n	800c804 <prvUnlockQueue+0x60>
 800c830:	e000      	b.n	800c834 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c832:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	22ff      	movs	r2, #255	@ 0xff
 800c838:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c83c:	f001 ff24 	bl	800e688 <vPortExitCritical>
}
 800c840:	bf00      	nop
 800c842:	3710      	adds	r7, #16
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}

0800c848 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b084      	sub	sp, #16
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c850:	f001 fee4 	bl	800e61c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d102      	bne.n	800c862 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c85c:	2301      	movs	r3, #1
 800c85e:	60fb      	str	r3, [r7, #12]
 800c860:	e001      	b.n	800c866 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c862:	2300      	movs	r3, #0
 800c864:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c866:	f001 ff0f 	bl	800e688 <vPortExitCritical>

	return xReturn;
 800c86a:	68fb      	ldr	r3, [r7, #12]
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3710      	adds	r7, #16
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c87c:	f001 fece 	bl	800e61c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c888:	429a      	cmp	r2, r3
 800c88a:	d102      	bne.n	800c892 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c88c:	2301      	movs	r3, #1
 800c88e:	60fb      	str	r3, [r7, #12]
 800c890:	e001      	b.n	800c896 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c892:	2300      	movs	r3, #0
 800c894:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c896:	f001 fef7 	bl	800e688 <vPortExitCritical>

	return xReturn;
 800c89a:	68fb      	ldr	r3, [r7, #12]
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3710      	adds	r7, #16
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b085      	sub	sp, #20
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	60fb      	str	r3, [r7, #12]
 800c8b2:	e014      	b.n	800c8de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c8b4:	4a0f      	ldr	r2, [pc, #60]	@ (800c8f4 <vQueueAddToRegistry+0x50>)
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d10b      	bne.n	800c8d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c8c0:	490c      	ldr	r1, [pc, #48]	@ (800c8f4 <vQueueAddToRegistry+0x50>)
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	683a      	ldr	r2, [r7, #0]
 800c8c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c8ca:	4a0a      	ldr	r2, [pc, #40]	@ (800c8f4 <vQueueAddToRegistry+0x50>)
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	00db      	lsls	r3, r3, #3
 800c8d0:	4413      	add	r3, r2
 800c8d2:	687a      	ldr	r2, [r7, #4]
 800c8d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c8d6:	e006      	b.n	800c8e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	60fb      	str	r3, [r7, #12]
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	2b07      	cmp	r3, #7
 800c8e2:	d9e7      	bls.n	800c8b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c8e4:	bf00      	nop
 800c8e6:	bf00      	nop
 800c8e8:	3714      	adds	r7, #20
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f0:	4770      	bx	lr
 800c8f2:	bf00      	nop
 800c8f4:	2000ad10 	.word	0x2000ad10

0800c8f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b085      	sub	sp, #20
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c900:	2300      	movs	r3, #0
 800c902:	60fb      	str	r3, [r7, #12]
 800c904:	e016      	b.n	800c934 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c906:	4a10      	ldr	r2, [pc, #64]	@ (800c948 <vQueueUnregisterQueue+0x50>)
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	00db      	lsls	r3, r3, #3
 800c90c:	4413      	add	r3, r2
 800c90e:	685b      	ldr	r3, [r3, #4]
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	429a      	cmp	r2, r3
 800c914:	d10b      	bne.n	800c92e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c916:	4a0c      	ldr	r2, [pc, #48]	@ (800c948 <vQueueUnregisterQueue+0x50>)
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2100      	movs	r1, #0
 800c91c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c920:	4a09      	ldr	r2, [pc, #36]	@ (800c948 <vQueueUnregisterQueue+0x50>)
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	00db      	lsls	r3, r3, #3
 800c926:	4413      	add	r3, r2
 800c928:	2200      	movs	r2, #0
 800c92a:	605a      	str	r2, [r3, #4]
				break;
 800c92c:	e006      	b.n	800c93c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	3301      	adds	r3, #1
 800c932:	60fb      	str	r3, [r7, #12]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	2b07      	cmp	r3, #7
 800c938:	d9e5      	bls.n	800c906 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c93a:	bf00      	nop
 800c93c:	bf00      	nop
 800c93e:	3714      	adds	r7, #20
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr
 800c948:	2000ad10 	.word	0x2000ad10

0800c94c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b086      	sub	sp, #24
 800c950:	af00      	add	r7, sp, #0
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c95c:	f001 fe5e 	bl	800e61c <vPortEnterCritical>
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c966:	b25b      	sxtb	r3, r3
 800c968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c96c:	d103      	bne.n	800c976 <vQueueWaitForMessageRestricted+0x2a>
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	2200      	movs	r2, #0
 800c972:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c97c:	b25b      	sxtb	r3, r3
 800c97e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c982:	d103      	bne.n	800c98c <vQueueWaitForMessageRestricted+0x40>
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	2200      	movs	r2, #0
 800c988:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c98c:	f001 fe7c 	bl	800e688 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c994:	2b00      	cmp	r3, #0
 800c996:	d106      	bne.n	800c9a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	3324      	adds	r3, #36	@ 0x24
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	68b9      	ldr	r1, [r7, #8]
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f000 fcb9 	bl	800d318 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c9a6:	6978      	ldr	r0, [r7, #20]
 800c9a8:	f7ff fefc 	bl	800c7a4 <prvUnlockQueue>
	}
 800c9ac:	bf00      	nop
 800c9ae:	3718      	adds	r7, #24
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b08e      	sub	sp, #56	@ 0x38
 800c9b8:	af04      	add	r7, sp, #16
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	607a      	str	r2, [r7, #4]
 800c9c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c9c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d10d      	bne.n	800c9e4 <xTaskCreateStatic+0x30>
	__asm volatile
 800c9c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9cc:	b672      	cpsid	i
 800c9ce:	f383 8811 	msr	BASEPRI, r3
 800c9d2:	f3bf 8f6f 	isb	sy
 800c9d6:	f3bf 8f4f 	dsb	sy
 800c9da:	b662      	cpsie	i
 800c9dc:	623b      	str	r3, [r7, #32]
}
 800c9de:	bf00      	nop
 800c9e0:	bf00      	nop
 800c9e2:	e7fd      	b.n	800c9e0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d10d      	bne.n	800ca06 <xTaskCreateStatic+0x52>
	__asm volatile
 800c9ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ee:	b672      	cpsid	i
 800c9f0:	f383 8811 	msr	BASEPRI, r3
 800c9f4:	f3bf 8f6f 	isb	sy
 800c9f8:	f3bf 8f4f 	dsb	sy
 800c9fc:	b662      	cpsie	i
 800c9fe:	61fb      	str	r3, [r7, #28]
}
 800ca00:	bf00      	nop
 800ca02:	bf00      	nop
 800ca04:	e7fd      	b.n	800ca02 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ca06:	23a8      	movs	r3, #168	@ 0xa8
 800ca08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	2ba8      	cmp	r3, #168	@ 0xa8
 800ca0e:	d00d      	beq.n	800ca2c <xTaskCreateStatic+0x78>
	__asm volatile
 800ca10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca14:	b672      	cpsid	i
 800ca16:	f383 8811 	msr	BASEPRI, r3
 800ca1a:	f3bf 8f6f 	isb	sy
 800ca1e:	f3bf 8f4f 	dsb	sy
 800ca22:	b662      	cpsie	i
 800ca24:	61bb      	str	r3, [r7, #24]
}
 800ca26:	bf00      	nop
 800ca28:	bf00      	nop
 800ca2a:	e7fd      	b.n	800ca28 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ca2c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ca2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d01e      	beq.n	800ca72 <xTaskCreateStatic+0xbe>
 800ca34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d01b      	beq.n	800ca72 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca3c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ca3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca42:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ca44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca46:	2202      	movs	r2, #2
 800ca48:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	9303      	str	r3, [sp, #12]
 800ca50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca52:	9302      	str	r3, [sp, #8]
 800ca54:	f107 0314 	add.w	r3, r7, #20
 800ca58:	9301      	str	r3, [sp, #4]
 800ca5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca5c:	9300      	str	r3, [sp, #0]
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	68b9      	ldr	r1, [r7, #8]
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	f000 f851 	bl	800cb0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ca6c:	f000 f8f8 	bl	800cc60 <prvAddNewTaskToReadyList>
 800ca70:	e001      	b.n	800ca76 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800ca72:	2300      	movs	r3, #0
 800ca74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ca76:	697b      	ldr	r3, [r7, #20]
	}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3728      	adds	r7, #40	@ 0x28
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}

0800ca80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b08c      	sub	sp, #48	@ 0x30
 800ca84:	af04      	add	r7, sp, #16
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	603b      	str	r3, [r7, #0]
 800ca8c:	4613      	mov	r3, r2
 800ca8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ca90:	88fb      	ldrh	r3, [r7, #6]
 800ca92:	009b      	lsls	r3, r3, #2
 800ca94:	4618      	mov	r0, r3
 800ca96:	f001 feef 	bl	800e878 <pvPortMalloc>
 800ca9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d00e      	beq.n	800cac0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800caa2:	20a8      	movs	r0, #168	@ 0xa8
 800caa4:	f001 fee8 	bl	800e878 <pvPortMalloc>
 800caa8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800caaa:	69fb      	ldr	r3, [r7, #28]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d003      	beq.n	800cab8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cab0:	69fb      	ldr	r3, [r7, #28]
 800cab2:	697a      	ldr	r2, [r7, #20]
 800cab4:	631a      	str	r2, [r3, #48]	@ 0x30
 800cab6:	e005      	b.n	800cac4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cab8:	6978      	ldr	r0, [r7, #20]
 800caba:	f001 ffab 	bl	800ea14 <vPortFree>
 800cabe:	e001      	b.n	800cac4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cac0:	2300      	movs	r3, #0
 800cac2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cac4:	69fb      	ldr	r3, [r7, #28]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d017      	beq.n	800cafa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800caca:	69fb      	ldr	r3, [r7, #28]
 800cacc:	2200      	movs	r2, #0
 800cace:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cad2:	88fa      	ldrh	r2, [r7, #6]
 800cad4:	2300      	movs	r3, #0
 800cad6:	9303      	str	r3, [sp, #12]
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	9302      	str	r3, [sp, #8]
 800cadc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cade:	9301      	str	r3, [sp, #4]
 800cae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cae2:	9300      	str	r3, [sp, #0]
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	68b9      	ldr	r1, [r7, #8]
 800cae8:	68f8      	ldr	r0, [r7, #12]
 800caea:	f000 f80f 	bl	800cb0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800caee:	69f8      	ldr	r0, [r7, #28]
 800caf0:	f000 f8b6 	bl	800cc60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800caf4:	2301      	movs	r3, #1
 800caf6:	61bb      	str	r3, [r7, #24]
 800caf8:	e002      	b.n	800cb00 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cafa:	f04f 33ff 	mov.w	r3, #4294967295
 800cafe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cb00:	69bb      	ldr	r3, [r7, #24]
	}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3720      	adds	r7, #32
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
	...

0800cb0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b088      	sub	sp, #32
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	60b9      	str	r1, [r7, #8]
 800cb16:	607a      	str	r2, [r7, #4]
 800cb18:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cb1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb1c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	461a      	mov	r2, r3
 800cb24:	21a5      	movs	r1, #165	@ 0xa5
 800cb26:	f00d fbc7 	bl	801a2b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb2e:	6879      	ldr	r1, [r7, #4]
 800cb30:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800cb34:	440b      	add	r3, r1
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	4413      	add	r3, r2
 800cb3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cb3c:	69bb      	ldr	r3, [r7, #24]
 800cb3e:	f023 0307 	bic.w	r3, r3, #7
 800cb42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cb44:	69bb      	ldr	r3, [r7, #24]
 800cb46:	f003 0307 	and.w	r3, r3, #7
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d00d      	beq.n	800cb6a <prvInitialiseNewTask+0x5e>
	__asm volatile
 800cb4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb52:	b672      	cpsid	i
 800cb54:	f383 8811 	msr	BASEPRI, r3
 800cb58:	f3bf 8f6f 	isb	sy
 800cb5c:	f3bf 8f4f 	dsb	sy
 800cb60:	b662      	cpsie	i
 800cb62:	617b      	str	r3, [r7, #20]
}
 800cb64:	bf00      	nop
 800cb66:	bf00      	nop
 800cb68:	e7fd      	b.n	800cb66 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d01f      	beq.n	800cbb0 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb70:	2300      	movs	r3, #0
 800cb72:	61fb      	str	r3, [r7, #28]
 800cb74:	e012      	b.n	800cb9c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cb76:	68ba      	ldr	r2, [r7, #8]
 800cb78:	69fb      	ldr	r3, [r7, #28]
 800cb7a:	4413      	add	r3, r2
 800cb7c:	7819      	ldrb	r1, [r3, #0]
 800cb7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cb80:	69fb      	ldr	r3, [r7, #28]
 800cb82:	4413      	add	r3, r2
 800cb84:	3334      	adds	r3, #52	@ 0x34
 800cb86:	460a      	mov	r2, r1
 800cb88:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cb8a:	68ba      	ldr	r2, [r7, #8]
 800cb8c:	69fb      	ldr	r3, [r7, #28]
 800cb8e:	4413      	add	r3, r2
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d006      	beq.n	800cba4 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb96:	69fb      	ldr	r3, [r7, #28]
 800cb98:	3301      	adds	r3, #1
 800cb9a:	61fb      	str	r3, [r7, #28]
 800cb9c:	69fb      	ldr	r3, [r7, #28]
 800cb9e:	2b0f      	cmp	r3, #15
 800cba0:	d9e9      	bls.n	800cb76 <prvInitialiseNewTask+0x6a>
 800cba2:	e000      	b.n	800cba6 <prvInitialiseNewTask+0x9a>
			{
				break;
 800cba4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cbae:	e003      	b.n	800cbb8 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cbb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbba:	2b37      	cmp	r3, #55	@ 0x37
 800cbbc:	d901      	bls.n	800cbc2 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cbbe:	2337      	movs	r3, #55	@ 0x37
 800cbc0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cbc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbc6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cbc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbcc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cbce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cbd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd6:	3304      	adds	r3, #4
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7fe fd27 	bl	800b62c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cbde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe0:	3318      	adds	r3, #24
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7fe fd22 	bl	800b62c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cbe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbf0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cbf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbfc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc00:	2200      	movs	r2, #0
 800cc02:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cc06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc08:	2200      	movs	r2, #0
 800cc0a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cc0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc10:	3354      	adds	r3, #84	@ 0x54
 800cc12:	224c      	movs	r2, #76	@ 0x4c
 800cc14:	2100      	movs	r1, #0
 800cc16:	4618      	mov	r0, r3
 800cc18:	f00d fb4e 	bl	801a2b8 <memset>
 800cc1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc1e:	4a0d      	ldr	r2, [pc, #52]	@ (800cc54 <prvInitialiseNewTask+0x148>)
 800cc20:	659a      	str	r2, [r3, #88]	@ 0x58
 800cc22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc24:	4a0c      	ldr	r2, [pc, #48]	@ (800cc58 <prvInitialiseNewTask+0x14c>)
 800cc26:	65da      	str	r2, [r3, #92]	@ 0x5c
 800cc28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc2a:	4a0c      	ldr	r2, [pc, #48]	@ (800cc5c <prvInitialiseNewTask+0x150>)
 800cc2c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cc2e:	683a      	ldr	r2, [r7, #0]
 800cc30:	68f9      	ldr	r1, [r7, #12]
 800cc32:	69b8      	ldr	r0, [r7, #24]
 800cc34:	f001 fbe2 	bl	800e3fc <pxPortInitialiseStack>
 800cc38:	4602      	mov	r2, r0
 800cc3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cc3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d002      	beq.n	800cc4a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cc44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc4a:	bf00      	nop
 800cc4c:	3720      	adds	r7, #32
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	2002761c 	.word	0x2002761c
 800cc58:	20027684 	.word	0x20027684
 800cc5c:	200276ec 	.word	0x200276ec

0800cc60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cc68:	f001 fcd8 	bl	800e61c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cc6c:	4b2d      	ldr	r3, [pc, #180]	@ (800cd24 <prvAddNewTaskToReadyList+0xc4>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	3301      	adds	r3, #1
 800cc72:	4a2c      	ldr	r2, [pc, #176]	@ (800cd24 <prvAddNewTaskToReadyList+0xc4>)
 800cc74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cc76:	4b2c      	ldr	r3, [pc, #176]	@ (800cd28 <prvAddNewTaskToReadyList+0xc8>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d109      	bne.n	800cc92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cc7e:	4a2a      	ldr	r2, [pc, #168]	@ (800cd28 <prvAddNewTaskToReadyList+0xc8>)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cc84:	4b27      	ldr	r3, [pc, #156]	@ (800cd24 <prvAddNewTaskToReadyList+0xc4>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d110      	bne.n	800ccae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cc8c:	f000 fc7a 	bl	800d584 <prvInitialiseTaskLists>
 800cc90:	e00d      	b.n	800ccae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cc92:	4b26      	ldr	r3, [pc, #152]	@ (800cd2c <prvAddNewTaskToReadyList+0xcc>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d109      	bne.n	800ccae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cc9a:	4b23      	ldr	r3, [pc, #140]	@ (800cd28 <prvAddNewTaskToReadyList+0xc8>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d802      	bhi.n	800ccae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cca8:	4a1f      	ldr	r2, [pc, #124]	@ (800cd28 <prvAddNewTaskToReadyList+0xc8>)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ccae:	4b20      	ldr	r3, [pc, #128]	@ (800cd30 <prvAddNewTaskToReadyList+0xd0>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	4a1e      	ldr	r2, [pc, #120]	@ (800cd30 <prvAddNewTaskToReadyList+0xd0>)
 800ccb6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ccb8:	4b1d      	ldr	r3, [pc, #116]	@ (800cd30 <prvAddNewTaskToReadyList+0xd0>)
 800ccba:	681a      	ldr	r2, [r3, #0]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccc4:	4b1b      	ldr	r3, [pc, #108]	@ (800cd34 <prvAddNewTaskToReadyList+0xd4>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d903      	bls.n	800ccd4 <prvAddNewTaskToReadyList+0x74>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccd0:	4a18      	ldr	r2, [pc, #96]	@ (800cd34 <prvAddNewTaskToReadyList+0xd4>)
 800ccd2:	6013      	str	r3, [r2, #0]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccd8:	4613      	mov	r3, r2
 800ccda:	009b      	lsls	r3, r3, #2
 800ccdc:	4413      	add	r3, r2
 800ccde:	009b      	lsls	r3, r3, #2
 800cce0:	4a15      	ldr	r2, [pc, #84]	@ (800cd38 <prvAddNewTaskToReadyList+0xd8>)
 800cce2:	441a      	add	r2, r3
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	3304      	adds	r3, #4
 800cce8:	4619      	mov	r1, r3
 800ccea:	4610      	mov	r0, r2
 800ccec:	f7fe fcab 	bl	800b646 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ccf0:	f001 fcca 	bl	800e688 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ccf4:	4b0d      	ldr	r3, [pc, #52]	@ (800cd2c <prvAddNewTaskToReadyList+0xcc>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d00e      	beq.n	800cd1a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ccfc:	4b0a      	ldr	r3, [pc, #40]	@ (800cd28 <prvAddNewTaskToReadyList+0xc8>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d207      	bcs.n	800cd1a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cd0a:	4b0c      	ldr	r3, [pc, #48]	@ (800cd3c <prvAddNewTaskToReadyList+0xdc>)
 800cd0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd10:	601a      	str	r2, [r3, #0]
 800cd12:	f3bf 8f4f 	dsb	sy
 800cd16:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd1a:	bf00      	nop
 800cd1c:	3708      	adds	r7, #8
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	2000b224 	.word	0x2000b224
 800cd28:	2000ad50 	.word	0x2000ad50
 800cd2c:	2000b230 	.word	0x2000b230
 800cd30:	2000b240 	.word	0x2000b240
 800cd34:	2000b22c 	.word	0x2000b22c
 800cd38:	2000ad54 	.word	0x2000ad54
 800cd3c:	e000ed04 	.word	0xe000ed04

0800cd40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d01a      	beq.n	800cd88 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cd52:	4b15      	ldr	r3, [pc, #84]	@ (800cda8 <vTaskDelay+0x68>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d00d      	beq.n	800cd76 <vTaskDelay+0x36>
	__asm volatile
 800cd5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd5e:	b672      	cpsid	i
 800cd60:	f383 8811 	msr	BASEPRI, r3
 800cd64:	f3bf 8f6f 	isb	sy
 800cd68:	f3bf 8f4f 	dsb	sy
 800cd6c:	b662      	cpsie	i
 800cd6e:	60bb      	str	r3, [r7, #8]
}
 800cd70:	bf00      	nop
 800cd72:	bf00      	nop
 800cd74:	e7fd      	b.n	800cd72 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800cd76:	f000 f88f 	bl	800ce98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cd7a:	2100      	movs	r1, #0
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f000 ff81 	bl	800dc84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cd82:	f000 f897 	bl	800ceb4 <xTaskResumeAll>
 800cd86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d107      	bne.n	800cd9e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800cd8e:	4b07      	ldr	r3, [pc, #28]	@ (800cdac <vTaskDelay+0x6c>)
 800cd90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd94:	601a      	str	r2, [r3, #0]
 800cd96:	f3bf 8f4f 	dsb	sy
 800cd9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd9e:	bf00      	nop
 800cda0:	3710      	adds	r7, #16
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}
 800cda6:	bf00      	nop
 800cda8:	2000b24c 	.word	0x2000b24c
 800cdac:	e000ed04 	.word	0xe000ed04

0800cdb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b08a      	sub	sp, #40	@ 0x28
 800cdb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cdbe:	463a      	mov	r2, r7
 800cdc0:	1d39      	adds	r1, r7, #4
 800cdc2:	f107 0308 	add.w	r3, r7, #8
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f7fe fbdc 	bl	800b584 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cdcc:	6839      	ldr	r1, [r7, #0]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	68ba      	ldr	r2, [r7, #8]
 800cdd2:	9202      	str	r2, [sp, #8]
 800cdd4:	9301      	str	r3, [sp, #4]
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	9300      	str	r3, [sp, #0]
 800cdda:	2300      	movs	r3, #0
 800cddc:	460a      	mov	r2, r1
 800cdde:	4926      	ldr	r1, [pc, #152]	@ (800ce78 <vTaskStartScheduler+0xc8>)
 800cde0:	4826      	ldr	r0, [pc, #152]	@ (800ce7c <vTaskStartScheduler+0xcc>)
 800cde2:	f7ff fde7 	bl	800c9b4 <xTaskCreateStatic>
 800cde6:	4603      	mov	r3, r0
 800cde8:	4a25      	ldr	r2, [pc, #148]	@ (800ce80 <vTaskStartScheduler+0xd0>)
 800cdea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cdec:	4b24      	ldr	r3, [pc, #144]	@ (800ce80 <vTaskStartScheduler+0xd0>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d002      	beq.n	800cdfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	617b      	str	r3, [r7, #20]
 800cdf8:	e001      	b.n	800cdfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	2b01      	cmp	r3, #1
 800ce02:	d102      	bne.n	800ce0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ce04:	f000 ff92 	bl	800dd2c <xTimerCreateTimerTask>
 800ce08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d11d      	bne.n	800ce4c <vTaskStartScheduler+0x9c>
	__asm volatile
 800ce10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce14:	b672      	cpsid	i
 800ce16:	f383 8811 	msr	BASEPRI, r3
 800ce1a:	f3bf 8f6f 	isb	sy
 800ce1e:	f3bf 8f4f 	dsb	sy
 800ce22:	b662      	cpsie	i
 800ce24:	613b      	str	r3, [r7, #16]
}
 800ce26:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ce28:	4b16      	ldr	r3, [pc, #88]	@ (800ce84 <vTaskStartScheduler+0xd4>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	3354      	adds	r3, #84	@ 0x54
 800ce2e:	4a16      	ldr	r2, [pc, #88]	@ (800ce88 <vTaskStartScheduler+0xd8>)
 800ce30:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ce32:	4b16      	ldr	r3, [pc, #88]	@ (800ce8c <vTaskStartScheduler+0xdc>)
 800ce34:	f04f 32ff 	mov.w	r2, #4294967295
 800ce38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ce3a:	4b15      	ldr	r3, [pc, #84]	@ (800ce90 <vTaskStartScheduler+0xe0>)
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ce40:	4b14      	ldr	r3, [pc, #80]	@ (800ce94 <vTaskStartScheduler+0xe4>)
 800ce42:	2200      	movs	r2, #0
 800ce44:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ce46:	f001 fb6b 	bl	800e520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ce4a:	e011      	b.n	800ce70 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce52:	d10d      	bne.n	800ce70 <vTaskStartScheduler+0xc0>
	__asm volatile
 800ce54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce58:	b672      	cpsid	i
 800ce5a:	f383 8811 	msr	BASEPRI, r3
 800ce5e:	f3bf 8f6f 	isb	sy
 800ce62:	f3bf 8f4f 	dsb	sy
 800ce66:	b662      	cpsie	i
 800ce68:	60fb      	str	r3, [r7, #12]
}
 800ce6a:	bf00      	nop
 800ce6c:	bf00      	nop
 800ce6e:	e7fd      	b.n	800ce6c <vTaskStartScheduler+0xbc>
}
 800ce70:	bf00      	nop
 800ce72:	3718      	adds	r7, #24
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	0801b270 	.word	0x0801b270
 800ce7c:	0800d555 	.word	0x0800d555
 800ce80:	2000b248 	.word	0x2000b248
 800ce84:	2000ad50 	.word	0x2000ad50
 800ce88:	2000003c 	.word	0x2000003c
 800ce8c:	2000b244 	.word	0x2000b244
 800ce90:	2000b230 	.word	0x2000b230
 800ce94:	2000b228 	.word	0x2000b228

0800ce98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ce98:	b480      	push	{r7}
 800ce9a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ce9c:	4b04      	ldr	r3, [pc, #16]	@ (800ceb0 <vTaskSuspendAll+0x18>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	3301      	adds	r3, #1
 800cea2:	4a03      	ldr	r2, [pc, #12]	@ (800ceb0 <vTaskSuspendAll+0x18>)
 800cea4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cea6:	bf00      	nop
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr
 800ceb0:	2000b24c 	.word	0x2000b24c

0800ceb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ceba:	2300      	movs	r3, #0
 800cebc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cebe:	2300      	movs	r3, #0
 800cec0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cec2:	4b43      	ldr	r3, [pc, #268]	@ (800cfd0 <xTaskResumeAll+0x11c>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d10d      	bne.n	800cee6 <xTaskResumeAll+0x32>
	__asm volatile
 800ceca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cece:	b672      	cpsid	i
 800ced0:	f383 8811 	msr	BASEPRI, r3
 800ced4:	f3bf 8f6f 	isb	sy
 800ced8:	f3bf 8f4f 	dsb	sy
 800cedc:	b662      	cpsie	i
 800cede:	603b      	str	r3, [r7, #0]
}
 800cee0:	bf00      	nop
 800cee2:	bf00      	nop
 800cee4:	e7fd      	b.n	800cee2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cee6:	f001 fb99 	bl	800e61c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ceea:	4b39      	ldr	r3, [pc, #228]	@ (800cfd0 <xTaskResumeAll+0x11c>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	3b01      	subs	r3, #1
 800cef0:	4a37      	ldr	r2, [pc, #220]	@ (800cfd0 <xTaskResumeAll+0x11c>)
 800cef2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cef4:	4b36      	ldr	r3, [pc, #216]	@ (800cfd0 <xTaskResumeAll+0x11c>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d162      	bne.n	800cfc2 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cefc:	4b35      	ldr	r3, [pc, #212]	@ (800cfd4 <xTaskResumeAll+0x120>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d05e      	beq.n	800cfc2 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cf04:	e02f      	b.n	800cf66 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf06:	4b34      	ldr	r3, [pc, #208]	@ (800cfd8 <xTaskResumeAll+0x124>)
 800cf08:	68db      	ldr	r3, [r3, #12]
 800cf0a:	68db      	ldr	r3, [r3, #12]
 800cf0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	3318      	adds	r3, #24
 800cf12:	4618      	mov	r0, r3
 800cf14:	f7fe fbf4 	bl	800b700 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	3304      	adds	r3, #4
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7fe fbef 	bl	800b700 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf26:	4b2d      	ldr	r3, [pc, #180]	@ (800cfdc <xTaskResumeAll+0x128>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d903      	bls.n	800cf36 <xTaskResumeAll+0x82>
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf32:	4a2a      	ldr	r2, [pc, #168]	@ (800cfdc <xTaskResumeAll+0x128>)
 800cf34:	6013      	str	r3, [r2, #0]
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf3a:	4613      	mov	r3, r2
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	4413      	add	r3, r2
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	4a27      	ldr	r2, [pc, #156]	@ (800cfe0 <xTaskResumeAll+0x12c>)
 800cf44:	441a      	add	r2, r3
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	3304      	adds	r3, #4
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	4610      	mov	r0, r2
 800cf4e:	f7fe fb7a 	bl	800b646 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf56:	4b23      	ldr	r3, [pc, #140]	@ (800cfe4 <xTaskResumeAll+0x130>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	d302      	bcc.n	800cf66 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800cf60:	4b21      	ldr	r3, [pc, #132]	@ (800cfe8 <xTaskResumeAll+0x134>)
 800cf62:	2201      	movs	r2, #1
 800cf64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cf66:	4b1c      	ldr	r3, [pc, #112]	@ (800cfd8 <xTaskResumeAll+0x124>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d1cb      	bne.n	800cf06 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d001      	beq.n	800cf78 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cf74:	f000 fbac 	bl	800d6d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cf78:	4b1c      	ldr	r3, [pc, #112]	@ (800cfec <xTaskResumeAll+0x138>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d010      	beq.n	800cfa6 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cf84:	f000 f858 	bl	800d038 <xTaskIncrementTick>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d002      	beq.n	800cf94 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800cf8e:	4b16      	ldr	r3, [pc, #88]	@ (800cfe8 <xTaskResumeAll+0x134>)
 800cf90:	2201      	movs	r2, #1
 800cf92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	3b01      	subs	r3, #1
 800cf98:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d1f1      	bne.n	800cf84 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800cfa0:	4b12      	ldr	r3, [pc, #72]	@ (800cfec <xTaskResumeAll+0x138>)
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cfa6:	4b10      	ldr	r3, [pc, #64]	@ (800cfe8 <xTaskResumeAll+0x134>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d009      	beq.n	800cfc2 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cfae:	2301      	movs	r3, #1
 800cfb0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cfb2:	4b0f      	ldr	r3, [pc, #60]	@ (800cff0 <xTaskResumeAll+0x13c>)
 800cfb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cfb8:	601a      	str	r2, [r3, #0]
 800cfba:	f3bf 8f4f 	dsb	sy
 800cfbe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cfc2:	f001 fb61 	bl	800e688 <vPortExitCritical>

	return xAlreadyYielded;
 800cfc6:	68bb      	ldr	r3, [r7, #8]
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3710      	adds	r7, #16
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	2000b24c 	.word	0x2000b24c
 800cfd4:	2000b224 	.word	0x2000b224
 800cfd8:	2000b1e4 	.word	0x2000b1e4
 800cfdc:	2000b22c 	.word	0x2000b22c
 800cfe0:	2000ad54 	.word	0x2000ad54
 800cfe4:	2000ad50 	.word	0x2000ad50
 800cfe8:	2000b238 	.word	0x2000b238
 800cfec:	2000b234 	.word	0x2000b234
 800cff0:	e000ed04 	.word	0xe000ed04

0800cff4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cffa:	4b05      	ldr	r3, [pc, #20]	@ (800d010 <xTaskGetTickCount+0x1c>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d000:	687b      	ldr	r3, [r7, #4]
}
 800d002:	4618      	mov	r0, r3
 800d004:	370c      	adds	r7, #12
 800d006:	46bd      	mov	sp, r7
 800d008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00c:	4770      	bx	lr
 800d00e:	bf00      	nop
 800d010:	2000b228 	.word	0x2000b228

0800d014 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b082      	sub	sp, #8
 800d018:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d01a:	f001 fbe7 	bl	800e7ec <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d01e:	2300      	movs	r3, #0
 800d020:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d022:	4b04      	ldr	r3, [pc, #16]	@ (800d034 <xTaskGetTickCountFromISR+0x20>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d028:	683b      	ldr	r3, [r7, #0]
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3708      	adds	r7, #8
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	2000b228 	.word	0x2000b228

0800d038 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b086      	sub	sp, #24
 800d03c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d03e:	2300      	movs	r3, #0
 800d040:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d042:	4b50      	ldr	r3, [pc, #320]	@ (800d184 <xTaskIncrementTick+0x14c>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	2b00      	cmp	r3, #0
 800d048:	f040 808c 	bne.w	800d164 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d04c:	4b4e      	ldr	r3, [pc, #312]	@ (800d188 <xTaskIncrementTick+0x150>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	3301      	adds	r3, #1
 800d052:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d054:	4a4c      	ldr	r2, [pc, #304]	@ (800d188 <xTaskIncrementTick+0x150>)
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d123      	bne.n	800d0a8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800d060:	4b4a      	ldr	r3, [pc, #296]	@ (800d18c <xTaskIncrementTick+0x154>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00d      	beq.n	800d086 <xTaskIncrementTick+0x4e>
	__asm volatile
 800d06a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d06e:	b672      	cpsid	i
 800d070:	f383 8811 	msr	BASEPRI, r3
 800d074:	f3bf 8f6f 	isb	sy
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	b662      	cpsie	i
 800d07e:	603b      	str	r3, [r7, #0]
}
 800d080:	bf00      	nop
 800d082:	bf00      	nop
 800d084:	e7fd      	b.n	800d082 <xTaskIncrementTick+0x4a>
 800d086:	4b41      	ldr	r3, [pc, #260]	@ (800d18c <xTaskIncrementTick+0x154>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	60fb      	str	r3, [r7, #12]
 800d08c:	4b40      	ldr	r3, [pc, #256]	@ (800d190 <xTaskIncrementTick+0x158>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a3e      	ldr	r2, [pc, #248]	@ (800d18c <xTaskIncrementTick+0x154>)
 800d092:	6013      	str	r3, [r2, #0]
 800d094:	4a3e      	ldr	r2, [pc, #248]	@ (800d190 <xTaskIncrementTick+0x158>)
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	6013      	str	r3, [r2, #0]
 800d09a:	4b3e      	ldr	r3, [pc, #248]	@ (800d194 <xTaskIncrementTick+0x15c>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	3301      	adds	r3, #1
 800d0a0:	4a3c      	ldr	r2, [pc, #240]	@ (800d194 <xTaskIncrementTick+0x15c>)
 800d0a2:	6013      	str	r3, [r2, #0]
 800d0a4:	f000 fb14 	bl	800d6d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d0a8:	4b3b      	ldr	r3, [pc, #236]	@ (800d198 <xTaskIncrementTick+0x160>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	693a      	ldr	r2, [r7, #16]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d349      	bcc.n	800d146 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d0b2:	4b36      	ldr	r3, [pc, #216]	@ (800d18c <xTaskIncrementTick+0x154>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d104      	bne.n	800d0c6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0bc:	4b36      	ldr	r3, [pc, #216]	@ (800d198 <xTaskIncrementTick+0x160>)
 800d0be:	f04f 32ff 	mov.w	r2, #4294967295
 800d0c2:	601a      	str	r2, [r3, #0]
					break;
 800d0c4:	e03f      	b.n	800d146 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0c6:	4b31      	ldr	r3, [pc, #196]	@ (800d18c <xTaskIncrementTick+0x154>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	68db      	ldr	r3, [r3, #12]
 800d0cc:	68db      	ldr	r3, [r3, #12]
 800d0ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d0d6:	693a      	ldr	r2, [r7, #16]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d203      	bcs.n	800d0e6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d0de:	4a2e      	ldr	r2, [pc, #184]	@ (800d198 <xTaskIncrementTick+0x160>)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d0e4:	e02f      	b.n	800d146 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	3304      	adds	r3, #4
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7fe fb08 	bl	800b700 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d004      	beq.n	800d102 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	3318      	adds	r3, #24
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7fe faff 	bl	800b700 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d106:	4b25      	ldr	r3, [pc, #148]	@ (800d19c <xTaskIncrementTick+0x164>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d903      	bls.n	800d116 <xTaskIncrementTick+0xde>
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d112:	4a22      	ldr	r2, [pc, #136]	@ (800d19c <xTaskIncrementTick+0x164>)
 800d114:	6013      	str	r3, [r2, #0]
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d11a:	4613      	mov	r3, r2
 800d11c:	009b      	lsls	r3, r3, #2
 800d11e:	4413      	add	r3, r2
 800d120:	009b      	lsls	r3, r3, #2
 800d122:	4a1f      	ldr	r2, [pc, #124]	@ (800d1a0 <xTaskIncrementTick+0x168>)
 800d124:	441a      	add	r2, r3
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	3304      	adds	r3, #4
 800d12a:	4619      	mov	r1, r3
 800d12c:	4610      	mov	r0, r2
 800d12e:	f7fe fa8a 	bl	800b646 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d136:	4b1b      	ldr	r3, [pc, #108]	@ (800d1a4 <xTaskIncrementTick+0x16c>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d3b8      	bcc.n	800d0b2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800d140:	2301      	movs	r3, #1
 800d142:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d144:	e7b5      	b.n	800d0b2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d146:	4b17      	ldr	r3, [pc, #92]	@ (800d1a4 <xTaskIncrementTick+0x16c>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d14c:	4914      	ldr	r1, [pc, #80]	@ (800d1a0 <xTaskIncrementTick+0x168>)
 800d14e:	4613      	mov	r3, r2
 800d150:	009b      	lsls	r3, r3, #2
 800d152:	4413      	add	r3, r2
 800d154:	009b      	lsls	r3, r3, #2
 800d156:	440b      	add	r3, r1
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2b01      	cmp	r3, #1
 800d15c:	d907      	bls.n	800d16e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800d15e:	2301      	movs	r3, #1
 800d160:	617b      	str	r3, [r7, #20]
 800d162:	e004      	b.n	800d16e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d164:	4b10      	ldr	r3, [pc, #64]	@ (800d1a8 <xTaskIncrementTick+0x170>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	3301      	adds	r3, #1
 800d16a:	4a0f      	ldr	r2, [pc, #60]	@ (800d1a8 <xTaskIncrementTick+0x170>)
 800d16c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d16e:	4b0f      	ldr	r3, [pc, #60]	@ (800d1ac <xTaskIncrementTick+0x174>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d001      	beq.n	800d17a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800d176:	2301      	movs	r3, #1
 800d178:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d17a:	697b      	ldr	r3, [r7, #20]
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3718      	adds	r7, #24
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}
 800d184:	2000b24c 	.word	0x2000b24c
 800d188:	2000b228 	.word	0x2000b228
 800d18c:	2000b1dc 	.word	0x2000b1dc
 800d190:	2000b1e0 	.word	0x2000b1e0
 800d194:	2000b23c 	.word	0x2000b23c
 800d198:	2000b244 	.word	0x2000b244
 800d19c:	2000b22c 	.word	0x2000b22c
 800d1a0:	2000ad54 	.word	0x2000ad54
 800d1a4:	2000ad50 	.word	0x2000ad50
 800d1a8:	2000b234 	.word	0x2000b234
 800d1ac:	2000b238 	.word	0x2000b238

0800d1b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b086      	sub	sp, #24
 800d1b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d1b6:	4b3e      	ldr	r3, [pc, #248]	@ (800d2b0 <vTaskSwitchContext+0x100>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d003      	beq.n	800d1c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d1be:	4b3d      	ldr	r3, [pc, #244]	@ (800d2b4 <vTaskSwitchContext+0x104>)
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d1c4:	e070      	b.n	800d2a8 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800d1c6:	4b3b      	ldr	r3, [pc, #236]	@ (800d2b4 <vTaskSwitchContext+0x104>)
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d1cc:	4b3a      	ldr	r3, [pc, #232]	@ (800d2b8 <vTaskSwitchContext+0x108>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1d2:	613b      	str	r3, [r7, #16]
 800d1d4:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800d1d8:	60fb      	str	r3, [r7, #12]
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	68fa      	ldr	r2, [r7, #12]
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d111      	bne.n	800d208 <vTaskSwitchContext+0x58>
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	3304      	adds	r3, #4
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	68fa      	ldr	r2, [r7, #12]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d10b      	bne.n	800d208 <vTaskSwitchContext+0x58>
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	3308      	adds	r3, #8
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	68fa      	ldr	r2, [r7, #12]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d105      	bne.n	800d208 <vTaskSwitchContext+0x58>
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	330c      	adds	r3, #12
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	68fa      	ldr	r2, [r7, #12]
 800d204:	429a      	cmp	r2, r3
 800d206:	d008      	beq.n	800d21a <vTaskSwitchContext+0x6a>
 800d208:	4b2b      	ldr	r3, [pc, #172]	@ (800d2b8 <vTaskSwitchContext+0x108>)
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	4b2a      	ldr	r3, [pc, #168]	@ (800d2b8 <vTaskSwitchContext+0x108>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	3334      	adds	r3, #52	@ 0x34
 800d212:	4619      	mov	r1, r3
 800d214:	4610      	mov	r0, r2
 800d216:	f7f3 fd1f 	bl	8000c58 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d21a:	4b28      	ldr	r3, [pc, #160]	@ (800d2bc <vTaskSwitchContext+0x10c>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	617b      	str	r3, [r7, #20]
 800d220:	e013      	b.n	800d24a <vTaskSwitchContext+0x9a>
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d10d      	bne.n	800d244 <vTaskSwitchContext+0x94>
	__asm volatile
 800d228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d22c:	b672      	cpsid	i
 800d22e:	f383 8811 	msr	BASEPRI, r3
 800d232:	f3bf 8f6f 	isb	sy
 800d236:	f3bf 8f4f 	dsb	sy
 800d23a:	b662      	cpsie	i
 800d23c:	607b      	str	r3, [r7, #4]
}
 800d23e:	bf00      	nop
 800d240:	bf00      	nop
 800d242:	e7fd      	b.n	800d240 <vTaskSwitchContext+0x90>
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	3b01      	subs	r3, #1
 800d248:	617b      	str	r3, [r7, #20]
 800d24a:	491d      	ldr	r1, [pc, #116]	@ (800d2c0 <vTaskSwitchContext+0x110>)
 800d24c:	697a      	ldr	r2, [r7, #20]
 800d24e:	4613      	mov	r3, r2
 800d250:	009b      	lsls	r3, r3, #2
 800d252:	4413      	add	r3, r2
 800d254:	009b      	lsls	r3, r3, #2
 800d256:	440b      	add	r3, r1
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d0e1      	beq.n	800d222 <vTaskSwitchContext+0x72>
 800d25e:	697a      	ldr	r2, [r7, #20]
 800d260:	4613      	mov	r3, r2
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	4413      	add	r3, r2
 800d266:	009b      	lsls	r3, r3, #2
 800d268:	4a15      	ldr	r2, [pc, #84]	@ (800d2c0 <vTaskSwitchContext+0x110>)
 800d26a:	4413      	add	r3, r2
 800d26c:	60bb      	str	r3, [r7, #8]
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	685a      	ldr	r2, [r3, #4]
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	605a      	str	r2, [r3, #4]
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	685a      	ldr	r2, [r3, #4]
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	3308      	adds	r3, #8
 800d280:	429a      	cmp	r2, r3
 800d282:	d104      	bne.n	800d28e <vTaskSwitchContext+0xde>
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	685a      	ldr	r2, [r3, #4]
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	605a      	str	r2, [r3, #4]
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	4a08      	ldr	r2, [pc, #32]	@ (800d2b8 <vTaskSwitchContext+0x108>)
 800d296:	6013      	str	r3, [r2, #0]
 800d298:	4a08      	ldr	r2, [pc, #32]	@ (800d2bc <vTaskSwitchContext+0x10c>)
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d29e:	4b06      	ldr	r3, [pc, #24]	@ (800d2b8 <vTaskSwitchContext+0x108>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	3354      	adds	r3, #84	@ 0x54
 800d2a4:	4a07      	ldr	r2, [pc, #28]	@ (800d2c4 <vTaskSwitchContext+0x114>)
 800d2a6:	6013      	str	r3, [r2, #0]
}
 800d2a8:	bf00      	nop
 800d2aa:	3718      	adds	r7, #24
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	2000b24c 	.word	0x2000b24c
 800d2b4:	2000b238 	.word	0x2000b238
 800d2b8:	2000ad50 	.word	0x2000ad50
 800d2bc:	2000b22c 	.word	0x2000b22c
 800d2c0:	2000ad54 	.word	0x2000ad54
 800d2c4:	2000003c 	.word	0x2000003c

0800d2c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b084      	sub	sp, #16
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d10d      	bne.n	800d2f4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800d2d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2dc:	b672      	cpsid	i
 800d2de:	f383 8811 	msr	BASEPRI, r3
 800d2e2:	f3bf 8f6f 	isb	sy
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	b662      	cpsie	i
 800d2ec:	60fb      	str	r3, [r7, #12]
}
 800d2ee:	bf00      	nop
 800d2f0:	bf00      	nop
 800d2f2:	e7fd      	b.n	800d2f0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d2f4:	4b07      	ldr	r3, [pc, #28]	@ (800d314 <vTaskPlaceOnEventList+0x4c>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	3318      	adds	r3, #24
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f7fe f9c6 	bl	800b68e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d302:	2101      	movs	r1, #1
 800d304:	6838      	ldr	r0, [r7, #0]
 800d306:	f000 fcbd 	bl	800dc84 <prvAddCurrentTaskToDelayedList>
}
 800d30a:	bf00      	nop
 800d30c:	3710      	adds	r7, #16
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	2000ad50 	.word	0x2000ad50

0800d318 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b086      	sub	sp, #24
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	60f8      	str	r0, [r7, #12]
 800d320:	60b9      	str	r1, [r7, #8]
 800d322:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d10d      	bne.n	800d346 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800d32a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d32e:	b672      	cpsid	i
 800d330:	f383 8811 	msr	BASEPRI, r3
 800d334:	f3bf 8f6f 	isb	sy
 800d338:	f3bf 8f4f 	dsb	sy
 800d33c:	b662      	cpsie	i
 800d33e:	617b      	str	r3, [r7, #20]
}
 800d340:	bf00      	nop
 800d342:	bf00      	nop
 800d344:	e7fd      	b.n	800d342 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d346:	4b0a      	ldr	r3, [pc, #40]	@ (800d370 <vTaskPlaceOnEventListRestricted+0x58>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	3318      	adds	r3, #24
 800d34c:	4619      	mov	r1, r3
 800d34e:	68f8      	ldr	r0, [r7, #12]
 800d350:	f7fe f979 	bl	800b646 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d002      	beq.n	800d360 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800d35a:	f04f 33ff 	mov.w	r3, #4294967295
 800d35e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d360:	6879      	ldr	r1, [r7, #4]
 800d362:	68b8      	ldr	r0, [r7, #8]
 800d364:	f000 fc8e 	bl	800dc84 <prvAddCurrentTaskToDelayedList>
	}
 800d368:	bf00      	nop
 800d36a:	3718      	adds	r7, #24
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}
 800d370:	2000ad50 	.word	0x2000ad50

0800d374 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b086      	sub	sp, #24
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	68db      	ldr	r3, [r3, #12]
 800d382:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d10d      	bne.n	800d3a6 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800d38a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d38e:	b672      	cpsid	i
 800d390:	f383 8811 	msr	BASEPRI, r3
 800d394:	f3bf 8f6f 	isb	sy
 800d398:	f3bf 8f4f 	dsb	sy
 800d39c:	b662      	cpsie	i
 800d39e:	60fb      	str	r3, [r7, #12]
}
 800d3a0:	bf00      	nop
 800d3a2:	bf00      	nop
 800d3a4:	e7fd      	b.n	800d3a2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	3318      	adds	r3, #24
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7fe f9a8 	bl	800b700 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3b0:	4b1d      	ldr	r3, [pc, #116]	@ (800d428 <xTaskRemoveFromEventList+0xb4>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d11d      	bne.n	800d3f4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	3304      	adds	r3, #4
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7fe f99f 	bl	800b700 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3c6:	4b19      	ldr	r3, [pc, #100]	@ (800d42c <xTaskRemoveFromEventList+0xb8>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d903      	bls.n	800d3d6 <xTaskRemoveFromEventList+0x62>
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3d2:	4a16      	ldr	r2, [pc, #88]	@ (800d42c <xTaskRemoveFromEventList+0xb8>)
 800d3d4:	6013      	str	r3, [r2, #0]
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3da:	4613      	mov	r3, r2
 800d3dc:	009b      	lsls	r3, r3, #2
 800d3de:	4413      	add	r3, r2
 800d3e0:	009b      	lsls	r3, r3, #2
 800d3e2:	4a13      	ldr	r2, [pc, #76]	@ (800d430 <xTaskRemoveFromEventList+0xbc>)
 800d3e4:	441a      	add	r2, r3
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	3304      	adds	r3, #4
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	4610      	mov	r0, r2
 800d3ee:	f7fe f92a 	bl	800b646 <vListInsertEnd>
 800d3f2:	e005      	b.n	800d400 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	3318      	adds	r3, #24
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	480e      	ldr	r0, [pc, #56]	@ (800d434 <xTaskRemoveFromEventList+0xc0>)
 800d3fc:	f7fe f923 	bl	800b646 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d404:	4b0c      	ldr	r3, [pc, #48]	@ (800d438 <xTaskRemoveFromEventList+0xc4>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d905      	bls.n	800d41a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d40e:	2301      	movs	r3, #1
 800d410:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d412:	4b0a      	ldr	r3, [pc, #40]	@ (800d43c <xTaskRemoveFromEventList+0xc8>)
 800d414:	2201      	movs	r2, #1
 800d416:	601a      	str	r2, [r3, #0]
 800d418:	e001      	b.n	800d41e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800d41a:	2300      	movs	r3, #0
 800d41c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d41e:	697b      	ldr	r3, [r7, #20]
}
 800d420:	4618      	mov	r0, r3
 800d422:	3718      	adds	r7, #24
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}
 800d428:	2000b24c 	.word	0x2000b24c
 800d42c:	2000b22c 	.word	0x2000b22c
 800d430:	2000ad54 	.word	0x2000ad54
 800d434:	2000b1e4 	.word	0x2000b1e4
 800d438:	2000ad50 	.word	0x2000ad50
 800d43c:	2000b238 	.word	0x2000b238

0800d440 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d448:	4b06      	ldr	r3, [pc, #24]	@ (800d464 <vTaskInternalSetTimeOutState+0x24>)
 800d44a:	681a      	ldr	r2, [r3, #0]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d450:	4b05      	ldr	r3, [pc, #20]	@ (800d468 <vTaskInternalSetTimeOutState+0x28>)
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	605a      	str	r2, [r3, #4]
}
 800d458:	bf00      	nop
 800d45a:	370c      	adds	r7, #12
 800d45c:	46bd      	mov	sp, r7
 800d45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d462:	4770      	bx	lr
 800d464:	2000b23c 	.word	0x2000b23c
 800d468:	2000b228 	.word	0x2000b228

0800d46c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b088      	sub	sp, #32
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d10d      	bne.n	800d498 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800d47c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d480:	b672      	cpsid	i
 800d482:	f383 8811 	msr	BASEPRI, r3
 800d486:	f3bf 8f6f 	isb	sy
 800d48a:	f3bf 8f4f 	dsb	sy
 800d48e:	b662      	cpsie	i
 800d490:	613b      	str	r3, [r7, #16]
}
 800d492:	bf00      	nop
 800d494:	bf00      	nop
 800d496:	e7fd      	b.n	800d494 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d10d      	bne.n	800d4ba <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800d49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4a2:	b672      	cpsid	i
 800d4a4:	f383 8811 	msr	BASEPRI, r3
 800d4a8:	f3bf 8f6f 	isb	sy
 800d4ac:	f3bf 8f4f 	dsb	sy
 800d4b0:	b662      	cpsie	i
 800d4b2:	60fb      	str	r3, [r7, #12]
}
 800d4b4:	bf00      	nop
 800d4b6:	bf00      	nop
 800d4b8:	e7fd      	b.n	800d4b6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800d4ba:	f001 f8af 	bl	800e61c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d4be:	4b1d      	ldr	r3, [pc, #116]	@ (800d534 <xTaskCheckForTimeOut+0xc8>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	69ba      	ldr	r2, [r7, #24]
 800d4ca:	1ad3      	subs	r3, r2, r3
 800d4cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4d6:	d102      	bne.n	800d4de <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	61fb      	str	r3, [r7, #28]
 800d4dc:	e023      	b.n	800d526 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681a      	ldr	r2, [r3, #0]
 800d4e2:	4b15      	ldr	r3, [pc, #84]	@ (800d538 <xTaskCheckForTimeOut+0xcc>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d007      	beq.n	800d4fa <xTaskCheckForTimeOut+0x8e>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	685b      	ldr	r3, [r3, #4]
 800d4ee:	69ba      	ldr	r2, [r7, #24]
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d302      	bcc.n	800d4fa <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	61fb      	str	r3, [r7, #28]
 800d4f8:	e015      	b.n	800d526 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	697a      	ldr	r2, [r7, #20]
 800d500:	429a      	cmp	r2, r3
 800d502:	d20b      	bcs.n	800d51c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	681a      	ldr	r2, [r3, #0]
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	1ad2      	subs	r2, r2, r3
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f7ff ff95 	bl	800d440 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d516:	2300      	movs	r3, #0
 800d518:	61fb      	str	r3, [r7, #28]
 800d51a:	e004      	b.n	800d526 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	2200      	movs	r2, #0
 800d520:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d522:	2301      	movs	r3, #1
 800d524:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d526:	f001 f8af 	bl	800e688 <vPortExitCritical>

	return xReturn;
 800d52a:	69fb      	ldr	r3, [r7, #28]
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3720      	adds	r7, #32
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}
 800d534:	2000b228 	.word	0x2000b228
 800d538:	2000b23c 	.word	0x2000b23c

0800d53c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d53c:	b480      	push	{r7}
 800d53e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d540:	4b03      	ldr	r3, [pc, #12]	@ (800d550 <vTaskMissedYield+0x14>)
 800d542:	2201      	movs	r2, #1
 800d544:	601a      	str	r2, [r3, #0]
}
 800d546:	bf00      	nop
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr
 800d550:	2000b238 	.word	0x2000b238

0800d554 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b082      	sub	sp, #8
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d55c:	f000 f852 	bl	800d604 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d560:	4b06      	ldr	r3, [pc, #24]	@ (800d57c <prvIdleTask+0x28>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	2b01      	cmp	r3, #1
 800d566:	d9f9      	bls.n	800d55c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d568:	4b05      	ldr	r3, [pc, #20]	@ (800d580 <prvIdleTask+0x2c>)
 800d56a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d56e:	601a      	str	r2, [r3, #0]
 800d570:	f3bf 8f4f 	dsb	sy
 800d574:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d578:	e7f0      	b.n	800d55c <prvIdleTask+0x8>
 800d57a:	bf00      	nop
 800d57c:	2000ad54 	.word	0x2000ad54
 800d580:	e000ed04 	.word	0xe000ed04

0800d584 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d58a:	2300      	movs	r3, #0
 800d58c:	607b      	str	r3, [r7, #4]
 800d58e:	e00c      	b.n	800d5aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d590:	687a      	ldr	r2, [r7, #4]
 800d592:	4613      	mov	r3, r2
 800d594:	009b      	lsls	r3, r3, #2
 800d596:	4413      	add	r3, r2
 800d598:	009b      	lsls	r3, r3, #2
 800d59a:	4a12      	ldr	r2, [pc, #72]	@ (800d5e4 <prvInitialiseTaskLists+0x60>)
 800d59c:	4413      	add	r3, r2
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7fe f824 	bl	800b5ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	607b      	str	r3, [r7, #4]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2b37      	cmp	r3, #55	@ 0x37
 800d5ae:	d9ef      	bls.n	800d590 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d5b0:	480d      	ldr	r0, [pc, #52]	@ (800d5e8 <prvInitialiseTaskLists+0x64>)
 800d5b2:	f7fe f81b 	bl	800b5ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d5b6:	480d      	ldr	r0, [pc, #52]	@ (800d5ec <prvInitialiseTaskLists+0x68>)
 800d5b8:	f7fe f818 	bl	800b5ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d5bc:	480c      	ldr	r0, [pc, #48]	@ (800d5f0 <prvInitialiseTaskLists+0x6c>)
 800d5be:	f7fe f815 	bl	800b5ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d5c2:	480c      	ldr	r0, [pc, #48]	@ (800d5f4 <prvInitialiseTaskLists+0x70>)
 800d5c4:	f7fe f812 	bl	800b5ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d5c8:	480b      	ldr	r0, [pc, #44]	@ (800d5f8 <prvInitialiseTaskLists+0x74>)
 800d5ca:	f7fe f80f 	bl	800b5ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d5ce:	4b0b      	ldr	r3, [pc, #44]	@ (800d5fc <prvInitialiseTaskLists+0x78>)
 800d5d0:	4a05      	ldr	r2, [pc, #20]	@ (800d5e8 <prvInitialiseTaskLists+0x64>)
 800d5d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d5d4:	4b0a      	ldr	r3, [pc, #40]	@ (800d600 <prvInitialiseTaskLists+0x7c>)
 800d5d6:	4a05      	ldr	r2, [pc, #20]	@ (800d5ec <prvInitialiseTaskLists+0x68>)
 800d5d8:	601a      	str	r2, [r3, #0]
}
 800d5da:	bf00      	nop
 800d5dc:	3708      	adds	r7, #8
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	2000ad54 	.word	0x2000ad54
 800d5e8:	2000b1b4 	.word	0x2000b1b4
 800d5ec:	2000b1c8 	.word	0x2000b1c8
 800d5f0:	2000b1e4 	.word	0x2000b1e4
 800d5f4:	2000b1f8 	.word	0x2000b1f8
 800d5f8:	2000b210 	.word	0x2000b210
 800d5fc:	2000b1dc 	.word	0x2000b1dc
 800d600:	2000b1e0 	.word	0x2000b1e0

0800d604 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d60a:	e019      	b.n	800d640 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d60c:	f001 f806 	bl	800e61c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d610:	4b10      	ldr	r3, [pc, #64]	@ (800d654 <prvCheckTasksWaitingTermination+0x50>)
 800d612:	68db      	ldr	r3, [r3, #12]
 800d614:	68db      	ldr	r3, [r3, #12]
 800d616:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	3304      	adds	r3, #4
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7fe f86f 	bl	800b700 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d622:	4b0d      	ldr	r3, [pc, #52]	@ (800d658 <prvCheckTasksWaitingTermination+0x54>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	3b01      	subs	r3, #1
 800d628:	4a0b      	ldr	r2, [pc, #44]	@ (800d658 <prvCheckTasksWaitingTermination+0x54>)
 800d62a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d62c:	4b0b      	ldr	r3, [pc, #44]	@ (800d65c <prvCheckTasksWaitingTermination+0x58>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	3b01      	subs	r3, #1
 800d632:	4a0a      	ldr	r2, [pc, #40]	@ (800d65c <prvCheckTasksWaitingTermination+0x58>)
 800d634:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d636:	f001 f827 	bl	800e688 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 f810 	bl	800d660 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d640:	4b06      	ldr	r3, [pc, #24]	@ (800d65c <prvCheckTasksWaitingTermination+0x58>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d1e1      	bne.n	800d60c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d648:	bf00      	nop
 800d64a:	bf00      	nop
 800d64c:	3708      	adds	r7, #8
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}
 800d652:	bf00      	nop
 800d654:	2000b1f8 	.word	0x2000b1f8
 800d658:	2000b224 	.word	0x2000b224
 800d65c:	2000b20c 	.word	0x2000b20c

0800d660 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d660:	b580      	push	{r7, lr}
 800d662:	b084      	sub	sp, #16
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	3354      	adds	r3, #84	@ 0x54
 800d66c:	4618      	mov	r0, r3
 800d66e:	f00c fe3b 	bl	801a2e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d108      	bne.n	800d68e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d680:	4618      	mov	r0, r3
 800d682:	f001 f9c7 	bl	800ea14 <vPortFree>
				vPortFree( pxTCB );
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f001 f9c4 	bl	800ea14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d68c:	e01b      	b.n	800d6c6 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d694:	2b01      	cmp	r3, #1
 800d696:	d103      	bne.n	800d6a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f001 f9bb 	bl	800ea14 <vPortFree>
	}
 800d69e:	e012      	b.n	800d6c6 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d6a6:	2b02      	cmp	r3, #2
 800d6a8:	d00d      	beq.n	800d6c6 <prvDeleteTCB+0x66>
	__asm volatile
 800d6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ae:	b672      	cpsid	i
 800d6b0:	f383 8811 	msr	BASEPRI, r3
 800d6b4:	f3bf 8f6f 	isb	sy
 800d6b8:	f3bf 8f4f 	dsb	sy
 800d6bc:	b662      	cpsie	i
 800d6be:	60fb      	str	r3, [r7, #12]
}
 800d6c0:	bf00      	nop
 800d6c2:	bf00      	nop
 800d6c4:	e7fd      	b.n	800d6c2 <prvDeleteTCB+0x62>
	}
 800d6c6:	bf00      	nop
 800d6c8:	3710      	adds	r7, #16
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
	...

0800d6d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6d6:	4b0c      	ldr	r3, [pc, #48]	@ (800d708 <prvResetNextTaskUnblockTime+0x38>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d104      	bne.n	800d6ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d6e0:	4b0a      	ldr	r3, [pc, #40]	@ (800d70c <prvResetNextTaskUnblockTime+0x3c>)
 800d6e2:	f04f 32ff 	mov.w	r2, #4294967295
 800d6e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d6e8:	e008      	b.n	800d6fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6ea:	4b07      	ldr	r3, [pc, #28]	@ (800d708 <prvResetNextTaskUnblockTime+0x38>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	685b      	ldr	r3, [r3, #4]
 800d6f8:	4a04      	ldr	r2, [pc, #16]	@ (800d70c <prvResetNextTaskUnblockTime+0x3c>)
 800d6fa:	6013      	str	r3, [r2, #0]
}
 800d6fc:	bf00      	nop
 800d6fe:	370c      	adds	r7, #12
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr
 800d708:	2000b1dc 	.word	0x2000b1dc
 800d70c:	2000b244 	.word	0x2000b244

0800d710 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d710:	b480      	push	{r7}
 800d712:	b083      	sub	sp, #12
 800d714:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d716:	4b05      	ldr	r3, [pc, #20]	@ (800d72c <xTaskGetCurrentTaskHandle+0x1c>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d71c:	687b      	ldr	r3, [r7, #4]
	}
 800d71e:	4618      	mov	r0, r3
 800d720:	370c      	adds	r7, #12
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr
 800d72a:	bf00      	nop
 800d72c:	2000ad50 	.word	0x2000ad50

0800d730 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d730:	b480      	push	{r7}
 800d732:	b083      	sub	sp, #12
 800d734:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d736:	4b0b      	ldr	r3, [pc, #44]	@ (800d764 <xTaskGetSchedulerState+0x34>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d102      	bne.n	800d744 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d73e:	2301      	movs	r3, #1
 800d740:	607b      	str	r3, [r7, #4]
 800d742:	e008      	b.n	800d756 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d744:	4b08      	ldr	r3, [pc, #32]	@ (800d768 <xTaskGetSchedulerState+0x38>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d102      	bne.n	800d752 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d74c:	2302      	movs	r3, #2
 800d74e:	607b      	str	r3, [r7, #4]
 800d750:	e001      	b.n	800d756 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d752:	2300      	movs	r3, #0
 800d754:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d756:	687b      	ldr	r3, [r7, #4]
	}
 800d758:	4618      	mov	r0, r3
 800d75a:	370c      	adds	r7, #12
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr
 800d764:	2000b230 	.word	0x2000b230
 800d768:	2000b24c 	.word	0x2000b24c

0800d76c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b084      	sub	sp, #16
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d778:	2300      	movs	r3, #0
 800d77a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d051      	beq.n	800d826 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d786:	4b2a      	ldr	r3, [pc, #168]	@ (800d830 <xTaskPriorityInherit+0xc4>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d241      	bcs.n	800d814 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	699b      	ldr	r3, [r3, #24]
 800d794:	2b00      	cmp	r3, #0
 800d796:	db06      	blt.n	800d7a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d798:	4b25      	ldr	r3, [pc, #148]	@ (800d830 <xTaskPriorityInherit+0xc4>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d79e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	6959      	ldr	r1, [r3, #20]
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7ae:	4613      	mov	r3, r2
 800d7b0:	009b      	lsls	r3, r3, #2
 800d7b2:	4413      	add	r3, r2
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	4a1f      	ldr	r2, [pc, #124]	@ (800d834 <xTaskPriorityInherit+0xc8>)
 800d7b8:	4413      	add	r3, r2
 800d7ba:	4299      	cmp	r1, r3
 800d7bc:	d122      	bne.n	800d804 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7be:	68bb      	ldr	r3, [r7, #8]
 800d7c0:	3304      	adds	r3, #4
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7fd ff9c 	bl	800b700 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d7c8:	4b19      	ldr	r3, [pc, #100]	@ (800d830 <xTaskPriorityInherit+0xc4>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7d6:	4b18      	ldr	r3, [pc, #96]	@ (800d838 <xTaskPriorityInherit+0xcc>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d903      	bls.n	800d7e6 <xTaskPriorityInherit+0x7a>
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7e2:	4a15      	ldr	r2, [pc, #84]	@ (800d838 <xTaskPriorityInherit+0xcc>)
 800d7e4:	6013      	str	r3, [r2, #0]
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7ea:	4613      	mov	r3, r2
 800d7ec:	009b      	lsls	r3, r3, #2
 800d7ee:	4413      	add	r3, r2
 800d7f0:	009b      	lsls	r3, r3, #2
 800d7f2:	4a10      	ldr	r2, [pc, #64]	@ (800d834 <xTaskPriorityInherit+0xc8>)
 800d7f4:	441a      	add	r2, r3
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	3304      	adds	r3, #4
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	4610      	mov	r0, r2
 800d7fe:	f7fd ff22 	bl	800b646 <vListInsertEnd>
 800d802:	e004      	b.n	800d80e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d804:	4b0a      	ldr	r3, [pc, #40]	@ (800d830 <xTaskPriorityInherit+0xc4>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d80e:	2301      	movs	r3, #1
 800d810:	60fb      	str	r3, [r7, #12]
 800d812:	e008      	b.n	800d826 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d818:	4b05      	ldr	r3, [pc, #20]	@ (800d830 <xTaskPriorityInherit+0xc4>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d81e:	429a      	cmp	r2, r3
 800d820:	d201      	bcs.n	800d826 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d822:	2301      	movs	r3, #1
 800d824:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d826:	68fb      	ldr	r3, [r7, #12]
	}
 800d828:	4618      	mov	r0, r3
 800d82a:	3710      	adds	r7, #16
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	2000ad50 	.word	0x2000ad50
 800d834:	2000ad54 	.word	0x2000ad54
 800d838:	2000b22c 	.word	0x2000b22c

0800d83c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b086      	sub	sp, #24
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d848:	2300      	movs	r3, #0
 800d84a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d05c      	beq.n	800d90c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d852:	4b31      	ldr	r3, [pc, #196]	@ (800d918 <xTaskPriorityDisinherit+0xdc>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	693a      	ldr	r2, [r7, #16]
 800d858:	429a      	cmp	r2, r3
 800d85a:	d00d      	beq.n	800d878 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800d85c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d860:	b672      	cpsid	i
 800d862:	f383 8811 	msr	BASEPRI, r3
 800d866:	f3bf 8f6f 	isb	sy
 800d86a:	f3bf 8f4f 	dsb	sy
 800d86e:	b662      	cpsie	i
 800d870:	60fb      	str	r3, [r7, #12]
}
 800d872:	bf00      	nop
 800d874:	bf00      	nop
 800d876:	e7fd      	b.n	800d874 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d10d      	bne.n	800d89c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800d880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d884:	b672      	cpsid	i
 800d886:	f383 8811 	msr	BASEPRI, r3
 800d88a:	f3bf 8f6f 	isb	sy
 800d88e:	f3bf 8f4f 	dsb	sy
 800d892:	b662      	cpsie	i
 800d894:	60bb      	str	r3, [r7, #8]
}
 800d896:	bf00      	nop
 800d898:	bf00      	nop
 800d89a:	e7fd      	b.n	800d898 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d8a0:	1e5a      	subs	r2, r3, #1
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	d02c      	beq.n	800d90c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d128      	bne.n	800d90c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	3304      	adds	r3, #4
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7fd ff1e 	bl	800b700 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d8c8:	693b      	ldr	r3, [r7, #16]
 800d8ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8d0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8dc:	4b0f      	ldr	r3, [pc, #60]	@ (800d91c <xTaskPriorityDisinherit+0xe0>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d903      	bls.n	800d8ec <xTaskPriorityDisinherit+0xb0>
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8e8:	4a0c      	ldr	r2, [pc, #48]	@ (800d91c <xTaskPriorityDisinherit+0xe0>)
 800d8ea:	6013      	str	r3, [r2, #0]
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8f0:	4613      	mov	r3, r2
 800d8f2:	009b      	lsls	r3, r3, #2
 800d8f4:	4413      	add	r3, r2
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	4a09      	ldr	r2, [pc, #36]	@ (800d920 <xTaskPriorityDisinherit+0xe4>)
 800d8fa:	441a      	add	r2, r3
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	3304      	adds	r3, #4
 800d900:	4619      	mov	r1, r3
 800d902:	4610      	mov	r0, r2
 800d904:	f7fd fe9f 	bl	800b646 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d908:	2301      	movs	r3, #1
 800d90a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d90c:	697b      	ldr	r3, [r7, #20]
	}
 800d90e:	4618      	mov	r0, r3
 800d910:	3718      	adds	r7, #24
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
 800d916:	bf00      	nop
 800d918:	2000ad50 	.word	0x2000ad50
 800d91c:	2000b22c 	.word	0x2000b22c
 800d920:	2000ad54 	.word	0x2000ad54

0800d924 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d924:	b580      	push	{r7, lr}
 800d926:	b088      	sub	sp, #32
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d932:	2301      	movs	r3, #1
 800d934:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d070      	beq.n	800da1e <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d93c:	69bb      	ldr	r3, [r7, #24]
 800d93e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d940:	2b00      	cmp	r3, #0
 800d942:	d10d      	bne.n	800d960 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800d944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d948:	b672      	cpsid	i
 800d94a:	f383 8811 	msr	BASEPRI, r3
 800d94e:	f3bf 8f6f 	isb	sy
 800d952:	f3bf 8f4f 	dsb	sy
 800d956:	b662      	cpsie	i
 800d958:	60fb      	str	r3, [r7, #12]
}
 800d95a:	bf00      	nop
 800d95c:	bf00      	nop
 800d95e:	e7fd      	b.n	800d95c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d960:	69bb      	ldr	r3, [r7, #24]
 800d962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d964:	683a      	ldr	r2, [r7, #0]
 800d966:	429a      	cmp	r2, r3
 800d968:	d902      	bls.n	800d970 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d96a:	683b      	ldr	r3, [r7, #0]
 800d96c:	61fb      	str	r3, [r7, #28]
 800d96e:	e002      	b.n	800d976 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d970:	69bb      	ldr	r3, [r7, #24]
 800d972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d974:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d97a:	69fa      	ldr	r2, [r7, #28]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d04e      	beq.n	800da1e <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d980:	69bb      	ldr	r3, [r7, #24]
 800d982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d984:	697a      	ldr	r2, [r7, #20]
 800d986:	429a      	cmp	r2, r3
 800d988:	d149      	bne.n	800da1e <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d98a:	4b27      	ldr	r3, [pc, #156]	@ (800da28 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	69ba      	ldr	r2, [r7, #24]
 800d990:	429a      	cmp	r2, r3
 800d992:	d10d      	bne.n	800d9b0 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800d994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d998:	b672      	cpsid	i
 800d99a:	f383 8811 	msr	BASEPRI, r3
 800d99e:	f3bf 8f6f 	isb	sy
 800d9a2:	f3bf 8f4f 	dsb	sy
 800d9a6:	b662      	cpsie	i
 800d9a8:	60bb      	str	r3, [r7, #8]
}
 800d9aa:	bf00      	nop
 800d9ac:	bf00      	nop
 800d9ae:	e7fd      	b.n	800d9ac <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d9b0:	69bb      	ldr	r3, [r7, #24]
 800d9b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9b4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d9b6:	69bb      	ldr	r3, [r7, #24]
 800d9b8:	69fa      	ldr	r2, [r7, #28]
 800d9ba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d9bc:	69bb      	ldr	r3, [r7, #24]
 800d9be:	699b      	ldr	r3, [r3, #24]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	db04      	blt.n	800d9ce <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9c4:	69fb      	ldr	r3, [r7, #28]
 800d9c6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d9ca:	69bb      	ldr	r3, [r7, #24]
 800d9cc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d9ce:	69bb      	ldr	r3, [r7, #24]
 800d9d0:	6959      	ldr	r1, [r3, #20]
 800d9d2:	693a      	ldr	r2, [r7, #16]
 800d9d4:	4613      	mov	r3, r2
 800d9d6:	009b      	lsls	r3, r3, #2
 800d9d8:	4413      	add	r3, r2
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	4a13      	ldr	r2, [pc, #76]	@ (800da2c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d9de:	4413      	add	r3, r2
 800d9e0:	4299      	cmp	r1, r3
 800d9e2:	d11c      	bne.n	800da1e <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9e4:	69bb      	ldr	r3, [r7, #24]
 800d9e6:	3304      	adds	r3, #4
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f7fd fe89 	bl	800b700 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d9ee:	69bb      	ldr	r3, [r7, #24]
 800d9f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9f2:	4b0f      	ldr	r3, [pc, #60]	@ (800da30 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d903      	bls.n	800da02 <vTaskPriorityDisinheritAfterTimeout+0xde>
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9fe:	4a0c      	ldr	r2, [pc, #48]	@ (800da30 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800da00:	6013      	str	r3, [r2, #0]
 800da02:	69bb      	ldr	r3, [r7, #24]
 800da04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da06:	4613      	mov	r3, r2
 800da08:	009b      	lsls	r3, r3, #2
 800da0a:	4413      	add	r3, r2
 800da0c:	009b      	lsls	r3, r3, #2
 800da0e:	4a07      	ldr	r2, [pc, #28]	@ (800da2c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800da10:	441a      	add	r2, r3
 800da12:	69bb      	ldr	r3, [r7, #24]
 800da14:	3304      	adds	r3, #4
 800da16:	4619      	mov	r1, r3
 800da18:	4610      	mov	r0, r2
 800da1a:	f7fd fe14 	bl	800b646 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da1e:	bf00      	nop
 800da20:	3720      	adds	r7, #32
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}
 800da26:	bf00      	nop
 800da28:	2000ad50 	.word	0x2000ad50
 800da2c:	2000ad54 	.word	0x2000ad54
 800da30:	2000b22c 	.word	0x2000b22c

0800da34 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800da34:	b480      	push	{r7}
 800da36:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800da38:	4b07      	ldr	r3, [pc, #28]	@ (800da58 <pvTaskIncrementMutexHeldCount+0x24>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d004      	beq.n	800da4a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800da40:	4b05      	ldr	r3, [pc, #20]	@ (800da58 <pvTaskIncrementMutexHeldCount+0x24>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800da46:	3201      	adds	r2, #1
 800da48:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800da4a:	4b03      	ldr	r3, [pc, #12]	@ (800da58 <pvTaskIncrementMutexHeldCount+0x24>)
 800da4c:	681b      	ldr	r3, [r3, #0]
	}
 800da4e:	4618      	mov	r0, r3
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr
 800da58:	2000ad50 	.word	0x2000ad50

0800da5c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b084      	sub	sp, #16
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800da66:	f000 fdd9 	bl	800e61c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800da6a:	4b20      	ldr	r3, [pc, #128]	@ (800daec <ulTaskNotifyTake+0x90>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800da72:	2b00      	cmp	r3, #0
 800da74:	d113      	bne.n	800da9e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800da76:	4b1d      	ldr	r3, [pc, #116]	@ (800daec <ulTaskNotifyTake+0x90>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	2201      	movs	r2, #1
 800da7c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d00b      	beq.n	800da9e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800da86:	2101      	movs	r1, #1
 800da88:	6838      	ldr	r0, [r7, #0]
 800da8a:	f000 f8fb 	bl	800dc84 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800da8e:	4b18      	ldr	r3, [pc, #96]	@ (800daf0 <ulTaskNotifyTake+0x94>)
 800da90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da94:	601a      	str	r2, [r3, #0]
 800da96:	f3bf 8f4f 	dsb	sy
 800da9a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800da9e:	f000 fdf3 	bl	800e688 <vPortExitCritical>

		taskENTER_CRITICAL();
 800daa2:	f000 fdbb 	bl	800e61c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800daa6:	4b11      	ldr	r3, [pc, #68]	@ (800daec <ulTaskNotifyTake+0x90>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800daae:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d00e      	beq.n	800dad4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d005      	beq.n	800dac8 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800dabc:	4b0b      	ldr	r3, [pc, #44]	@ (800daec <ulTaskNotifyTake+0x90>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	2200      	movs	r2, #0
 800dac2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800dac6:	e005      	b.n	800dad4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800dac8:	4b08      	ldr	r3, [pc, #32]	@ (800daec <ulTaskNotifyTake+0x90>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	3a01      	subs	r2, #1
 800dad0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dad4:	4b05      	ldr	r3, [pc, #20]	@ (800daec <ulTaskNotifyTake+0x90>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	2200      	movs	r2, #0
 800dada:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800dade:	f000 fdd3 	bl	800e688 <vPortExitCritical>

		return ulReturn;
 800dae2:	68fb      	ldr	r3, [r7, #12]
	}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3710      	adds	r7, #16
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}
 800daec:	2000ad50 	.word	0x2000ad50
 800daf0:	e000ed04 	.word	0xe000ed04

0800daf4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b08a      	sub	sp, #40	@ 0x28
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	60f8      	str	r0, [r7, #12]
 800dafc:	60b9      	str	r1, [r7, #8]
 800dafe:	603b      	str	r3, [r7, #0]
 800db00:	4613      	mov	r3, r2
 800db02:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800db04:	2301      	movs	r3, #1
 800db06:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d10d      	bne.n	800db2a <xTaskGenericNotify+0x36>
	__asm volatile
 800db0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db12:	b672      	cpsid	i
 800db14:	f383 8811 	msr	BASEPRI, r3
 800db18:	f3bf 8f6f 	isb	sy
 800db1c:	f3bf 8f4f 	dsb	sy
 800db20:	b662      	cpsie	i
 800db22:	61bb      	str	r3, [r7, #24]
}
 800db24:	bf00      	nop
 800db26:	bf00      	nop
 800db28:	e7fd      	b.n	800db26 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800db2e:	f000 fd75 	bl	800e61c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d004      	beq.n	800db42 <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800db38:	6a3b      	ldr	r3, [r7, #32]
 800db3a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800db42:	6a3b      	ldr	r3, [r7, #32]
 800db44:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800db48:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800db4a:	6a3b      	ldr	r3, [r7, #32]
 800db4c:	2202      	movs	r2, #2
 800db4e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800db52:	79fb      	ldrb	r3, [r7, #7]
 800db54:	2b04      	cmp	r3, #4
 800db56:	d82e      	bhi.n	800dbb6 <xTaskGenericNotify+0xc2>
 800db58:	a201      	add	r2, pc, #4	@ (adr r2, 800db60 <xTaskGenericNotify+0x6c>)
 800db5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db5e:	bf00      	nop
 800db60:	0800dbdf 	.word	0x0800dbdf
 800db64:	0800db75 	.word	0x0800db75
 800db68:	0800db87 	.word	0x0800db87
 800db6c:	0800db97 	.word	0x0800db97
 800db70:	0800dba1 	.word	0x0800dba1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800db74:	6a3b      	ldr	r3, [r7, #32]
 800db76:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	431a      	orrs	r2, r3
 800db7e:	6a3b      	ldr	r3, [r7, #32]
 800db80:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800db84:	e02e      	b.n	800dbe4 <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800db86:	6a3b      	ldr	r3, [r7, #32]
 800db88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800db8c:	1c5a      	adds	r2, r3, #1
 800db8e:	6a3b      	ldr	r3, [r7, #32]
 800db90:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800db94:	e026      	b.n	800dbe4 <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800db96:	6a3b      	ldr	r3, [r7, #32]
 800db98:	68ba      	ldr	r2, [r7, #8]
 800db9a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800db9e:	e021      	b.n	800dbe4 <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800dba0:	7ffb      	ldrb	r3, [r7, #31]
 800dba2:	2b02      	cmp	r3, #2
 800dba4:	d004      	beq.n	800dbb0 <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800dba6:	6a3b      	ldr	r3, [r7, #32]
 800dba8:	68ba      	ldr	r2, [r7, #8]
 800dbaa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800dbae:	e019      	b.n	800dbe4 <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800dbb4:	e016      	b.n	800dbe4 <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800dbb6:	6a3b      	ldr	r3, [r7, #32]
 800dbb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dbbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbc0:	d00f      	beq.n	800dbe2 <xTaskGenericNotify+0xee>
	__asm volatile
 800dbc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc6:	b672      	cpsid	i
 800dbc8:	f383 8811 	msr	BASEPRI, r3
 800dbcc:	f3bf 8f6f 	isb	sy
 800dbd0:	f3bf 8f4f 	dsb	sy
 800dbd4:	b662      	cpsie	i
 800dbd6:	617b      	str	r3, [r7, #20]
}
 800dbd8:	bf00      	nop
 800dbda:	bf00      	nop
 800dbdc:	e7fd      	b.n	800dbda <xTaskGenericNotify+0xe6>
					break;
 800dbde:	bf00      	nop
 800dbe0:	e000      	b.n	800dbe4 <xTaskGenericNotify+0xf0>

					break;
 800dbe2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800dbe4:	7ffb      	ldrb	r3, [r7, #31]
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d13d      	bne.n	800dc66 <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbea:	6a3b      	ldr	r3, [r7, #32]
 800dbec:	3304      	adds	r3, #4
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7fd fd86 	bl	800b700 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800dbf4:	6a3b      	ldr	r3, [r7, #32]
 800dbf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbf8:	4b1e      	ldr	r3, [pc, #120]	@ (800dc74 <xTaskGenericNotify+0x180>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	d903      	bls.n	800dc08 <xTaskGenericNotify+0x114>
 800dc00:	6a3b      	ldr	r3, [r7, #32]
 800dc02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc04:	4a1b      	ldr	r2, [pc, #108]	@ (800dc74 <xTaskGenericNotify+0x180>)
 800dc06:	6013      	str	r3, [r2, #0]
 800dc08:	6a3b      	ldr	r3, [r7, #32]
 800dc0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc0c:	4613      	mov	r3, r2
 800dc0e:	009b      	lsls	r3, r3, #2
 800dc10:	4413      	add	r3, r2
 800dc12:	009b      	lsls	r3, r3, #2
 800dc14:	4a18      	ldr	r2, [pc, #96]	@ (800dc78 <xTaskGenericNotify+0x184>)
 800dc16:	441a      	add	r2, r3
 800dc18:	6a3b      	ldr	r3, [r7, #32]
 800dc1a:	3304      	adds	r3, #4
 800dc1c:	4619      	mov	r1, r3
 800dc1e:	4610      	mov	r0, r2
 800dc20:	f7fd fd11 	bl	800b646 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800dc24:	6a3b      	ldr	r3, [r7, #32]
 800dc26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d00d      	beq.n	800dc48 <xTaskGenericNotify+0x154>
	__asm volatile
 800dc2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc30:	b672      	cpsid	i
 800dc32:	f383 8811 	msr	BASEPRI, r3
 800dc36:	f3bf 8f6f 	isb	sy
 800dc3a:	f3bf 8f4f 	dsb	sy
 800dc3e:	b662      	cpsie	i
 800dc40:	613b      	str	r3, [r7, #16]
}
 800dc42:	bf00      	nop
 800dc44:	bf00      	nop
 800dc46:	e7fd      	b.n	800dc44 <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dc48:	6a3b      	ldr	r3, [r7, #32]
 800dc4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc4c:	4b0b      	ldr	r3, [pc, #44]	@ (800dc7c <xTaskGenericNotify+0x188>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d907      	bls.n	800dc66 <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800dc56:	4b0a      	ldr	r3, [pc, #40]	@ (800dc80 <xTaskGenericNotify+0x18c>)
 800dc58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc5c:	601a      	str	r2, [r3, #0]
 800dc5e:	f3bf 8f4f 	dsb	sy
 800dc62:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800dc66:	f000 fd0f 	bl	800e688 <vPortExitCritical>

		return xReturn;
 800dc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3728      	adds	r7, #40	@ 0x28
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	2000b22c 	.word	0x2000b22c
 800dc78:	2000ad54 	.word	0x2000ad54
 800dc7c:	2000ad50 	.word	0x2000ad50
 800dc80:	e000ed04 	.word	0xe000ed04

0800dc84 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b084      	sub	sp, #16
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dc8e:	4b21      	ldr	r3, [pc, #132]	@ (800dd14 <prvAddCurrentTaskToDelayedList+0x90>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc94:	4b20      	ldr	r3, [pc, #128]	@ (800dd18 <prvAddCurrentTaskToDelayedList+0x94>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	3304      	adds	r3, #4
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f7fd fd30 	bl	800b700 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dca6:	d10a      	bne.n	800dcbe <prvAddCurrentTaskToDelayedList+0x3a>
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d007      	beq.n	800dcbe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dcae:	4b1a      	ldr	r3, [pc, #104]	@ (800dd18 <prvAddCurrentTaskToDelayedList+0x94>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	3304      	adds	r3, #4
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	4819      	ldr	r0, [pc, #100]	@ (800dd1c <prvAddCurrentTaskToDelayedList+0x98>)
 800dcb8:	f7fd fcc5 	bl	800b646 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dcbc:	e026      	b.n	800dd0c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dcbe:	68fa      	ldr	r2, [r7, #12]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	4413      	add	r3, r2
 800dcc4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dcc6:	4b14      	ldr	r3, [pc, #80]	@ (800dd18 <prvAddCurrentTaskToDelayedList+0x94>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	68ba      	ldr	r2, [r7, #8]
 800dccc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dcce:	68ba      	ldr	r2, [r7, #8]
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d209      	bcs.n	800dcea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dcd6:	4b12      	ldr	r3, [pc, #72]	@ (800dd20 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dcd8:	681a      	ldr	r2, [r3, #0]
 800dcda:	4b0f      	ldr	r3, [pc, #60]	@ (800dd18 <prvAddCurrentTaskToDelayedList+0x94>)
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	3304      	adds	r3, #4
 800dce0:	4619      	mov	r1, r3
 800dce2:	4610      	mov	r0, r2
 800dce4:	f7fd fcd3 	bl	800b68e <vListInsert>
}
 800dce8:	e010      	b.n	800dd0c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dcea:	4b0e      	ldr	r3, [pc, #56]	@ (800dd24 <prvAddCurrentTaskToDelayedList+0xa0>)
 800dcec:	681a      	ldr	r2, [r3, #0]
 800dcee:	4b0a      	ldr	r3, [pc, #40]	@ (800dd18 <prvAddCurrentTaskToDelayedList+0x94>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	3304      	adds	r3, #4
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	4610      	mov	r0, r2
 800dcf8:	f7fd fcc9 	bl	800b68e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dcfc:	4b0a      	ldr	r3, [pc, #40]	@ (800dd28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	68ba      	ldr	r2, [r7, #8]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d202      	bcs.n	800dd0c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dd06:	4a08      	ldr	r2, [pc, #32]	@ (800dd28 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	6013      	str	r3, [r2, #0]
}
 800dd0c:	bf00      	nop
 800dd0e:	3710      	adds	r7, #16
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}
 800dd14:	2000b228 	.word	0x2000b228
 800dd18:	2000ad50 	.word	0x2000ad50
 800dd1c:	2000b210 	.word	0x2000b210
 800dd20:	2000b1e0 	.word	0x2000b1e0
 800dd24:	2000b1dc 	.word	0x2000b1dc
 800dd28:	2000b244 	.word	0x2000b244

0800dd2c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b08a      	sub	sp, #40	@ 0x28
 800dd30:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dd32:	2300      	movs	r3, #0
 800dd34:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dd36:	f000 fb21 	bl	800e37c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dd3a:	4b1e      	ldr	r3, [pc, #120]	@ (800ddb4 <xTimerCreateTimerTask+0x88>)
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d021      	beq.n	800dd86 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dd42:	2300      	movs	r3, #0
 800dd44:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dd46:	2300      	movs	r3, #0
 800dd48:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dd4a:	1d3a      	adds	r2, r7, #4
 800dd4c:	f107 0108 	add.w	r1, r7, #8
 800dd50:	f107 030c 	add.w	r3, r7, #12
 800dd54:	4618      	mov	r0, r3
 800dd56:	f7fd fc2f 	bl	800b5b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dd5a:	6879      	ldr	r1, [r7, #4]
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	68fa      	ldr	r2, [r7, #12]
 800dd60:	9202      	str	r2, [sp, #8]
 800dd62:	9301      	str	r3, [sp, #4]
 800dd64:	2302      	movs	r3, #2
 800dd66:	9300      	str	r3, [sp, #0]
 800dd68:	2300      	movs	r3, #0
 800dd6a:	460a      	mov	r2, r1
 800dd6c:	4912      	ldr	r1, [pc, #72]	@ (800ddb8 <xTimerCreateTimerTask+0x8c>)
 800dd6e:	4813      	ldr	r0, [pc, #76]	@ (800ddbc <xTimerCreateTimerTask+0x90>)
 800dd70:	f7fe fe20 	bl	800c9b4 <xTaskCreateStatic>
 800dd74:	4603      	mov	r3, r0
 800dd76:	4a12      	ldr	r2, [pc, #72]	@ (800ddc0 <xTimerCreateTimerTask+0x94>)
 800dd78:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dd7a:	4b11      	ldr	r3, [pc, #68]	@ (800ddc0 <xTimerCreateTimerTask+0x94>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d001      	beq.n	800dd86 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dd82:	2301      	movs	r3, #1
 800dd84:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d10d      	bne.n	800dda8 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800dd8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd90:	b672      	cpsid	i
 800dd92:	f383 8811 	msr	BASEPRI, r3
 800dd96:	f3bf 8f6f 	isb	sy
 800dd9a:	f3bf 8f4f 	dsb	sy
 800dd9e:	b662      	cpsie	i
 800dda0:	613b      	str	r3, [r7, #16]
}
 800dda2:	bf00      	nop
 800dda4:	bf00      	nop
 800dda6:	e7fd      	b.n	800dda4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800dda8:	697b      	ldr	r3, [r7, #20]
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3718      	adds	r7, #24
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}
 800ddb2:	bf00      	nop
 800ddb4:	2000b280 	.word	0x2000b280
 800ddb8:	0801b278 	.word	0x0801b278
 800ddbc:	0800df05 	.word	0x0800df05
 800ddc0:	2000b284 	.word	0x2000b284

0800ddc4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b08a      	sub	sp, #40	@ 0x28
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	60f8      	str	r0, [r7, #12]
 800ddcc:	60b9      	str	r1, [r7, #8]
 800ddce:	607a      	str	r2, [r7, #4]
 800ddd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d10d      	bne.n	800ddf8 <xTimerGenericCommand+0x34>
	__asm volatile
 800dddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dde0:	b672      	cpsid	i
 800dde2:	f383 8811 	msr	BASEPRI, r3
 800dde6:	f3bf 8f6f 	isb	sy
 800ddea:	f3bf 8f4f 	dsb	sy
 800ddee:	b662      	cpsie	i
 800ddf0:	623b      	str	r3, [r7, #32]
}
 800ddf2:	bf00      	nop
 800ddf4:	bf00      	nop
 800ddf6:	e7fd      	b.n	800ddf4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ddf8:	4b19      	ldr	r3, [pc, #100]	@ (800de60 <xTimerGenericCommand+0x9c>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d02a      	beq.n	800de56 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	2b05      	cmp	r3, #5
 800de10:	dc18      	bgt.n	800de44 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800de12:	f7ff fc8d 	bl	800d730 <xTaskGetSchedulerState>
 800de16:	4603      	mov	r3, r0
 800de18:	2b02      	cmp	r3, #2
 800de1a:	d109      	bne.n	800de30 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800de1c:	4b10      	ldr	r3, [pc, #64]	@ (800de60 <xTimerGenericCommand+0x9c>)
 800de1e:	6818      	ldr	r0, [r3, #0]
 800de20:	f107 0110 	add.w	r1, r7, #16
 800de24:	2300      	movs	r3, #0
 800de26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de28:	f7fd ff20 	bl	800bc6c <xQueueGenericSend>
 800de2c:	6278      	str	r0, [r7, #36]	@ 0x24
 800de2e:	e012      	b.n	800de56 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800de30:	4b0b      	ldr	r3, [pc, #44]	@ (800de60 <xTimerGenericCommand+0x9c>)
 800de32:	6818      	ldr	r0, [r3, #0]
 800de34:	f107 0110 	add.w	r1, r7, #16
 800de38:	2300      	movs	r3, #0
 800de3a:	2200      	movs	r2, #0
 800de3c:	f7fd ff16 	bl	800bc6c <xQueueGenericSend>
 800de40:	6278      	str	r0, [r7, #36]	@ 0x24
 800de42:	e008      	b.n	800de56 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800de44:	4b06      	ldr	r3, [pc, #24]	@ (800de60 <xTimerGenericCommand+0x9c>)
 800de46:	6818      	ldr	r0, [r3, #0]
 800de48:	f107 0110 	add.w	r1, r7, #16
 800de4c:	2300      	movs	r3, #0
 800de4e:	683a      	ldr	r2, [r7, #0]
 800de50:	f7fe f816 	bl	800be80 <xQueueGenericSendFromISR>
 800de54:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800de56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3728      	adds	r7, #40	@ 0x28
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	2000b280 	.word	0x2000b280

0800de64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b088      	sub	sp, #32
 800de68:	af02      	add	r7, sp, #8
 800de6a:	6078      	str	r0, [r7, #4]
 800de6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de6e:	4b24      	ldr	r3, [pc, #144]	@ (800df00 <prvProcessExpiredTimer+0x9c>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	68db      	ldr	r3, [r3, #12]
 800de74:	68db      	ldr	r3, [r3, #12]
 800de76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	3304      	adds	r3, #4
 800de7c:	4618      	mov	r0, r3
 800de7e:	f7fd fc3f 	bl	800b700 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800de88:	f003 0304 	and.w	r3, r3, #4
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d025      	beq.n	800dedc <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	699a      	ldr	r2, [r3, #24]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	18d1      	adds	r1, r2, r3
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	683a      	ldr	r2, [r7, #0]
 800de9c:	6978      	ldr	r0, [r7, #20]
 800de9e:	f000 f8d7 	bl	800e050 <prvInsertTimerInActiveList>
 800dea2:	4603      	mov	r3, r0
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d022      	beq.n	800deee <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dea8:	2300      	movs	r3, #0
 800deaa:	9300      	str	r3, [sp, #0]
 800deac:	2300      	movs	r3, #0
 800deae:	687a      	ldr	r2, [r7, #4]
 800deb0:	2100      	movs	r1, #0
 800deb2:	6978      	ldr	r0, [r7, #20]
 800deb4:	f7ff ff86 	bl	800ddc4 <xTimerGenericCommand>
 800deb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800deba:	693b      	ldr	r3, [r7, #16]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d116      	bne.n	800deee <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800dec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dec4:	b672      	cpsid	i
 800dec6:	f383 8811 	msr	BASEPRI, r3
 800deca:	f3bf 8f6f 	isb	sy
 800dece:	f3bf 8f4f 	dsb	sy
 800ded2:	b662      	cpsie	i
 800ded4:	60fb      	str	r3, [r7, #12]
}
 800ded6:	bf00      	nop
 800ded8:	bf00      	nop
 800deda:	e7fd      	b.n	800ded8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dee2:	f023 0301 	bic.w	r3, r3, #1
 800dee6:	b2da      	uxtb	r2, r3
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	6a1b      	ldr	r3, [r3, #32]
 800def2:	6978      	ldr	r0, [r7, #20]
 800def4:	4798      	blx	r3
}
 800def6:	bf00      	nop
 800def8:	3718      	adds	r7, #24
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop
 800df00:	2000b278 	.word	0x2000b278

0800df04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b084      	sub	sp, #16
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800df0c:	f107 0308 	add.w	r3, r7, #8
 800df10:	4618      	mov	r0, r3
 800df12:	f000 f859 	bl	800dfc8 <prvGetNextExpireTime>
 800df16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	4619      	mov	r1, r3
 800df1c:	68f8      	ldr	r0, [r7, #12]
 800df1e:	f000 f805 	bl	800df2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800df22:	f000 f8d7 	bl	800e0d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800df26:	bf00      	nop
 800df28:	e7f0      	b.n	800df0c <prvTimerTask+0x8>
	...

0800df2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b084      	sub	sp, #16
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
 800df34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800df36:	f7fe ffaf 	bl	800ce98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df3a:	f107 0308 	add.w	r3, r7, #8
 800df3e:	4618      	mov	r0, r3
 800df40:	f000 f866 	bl	800e010 <prvSampleTimeNow>
 800df44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d130      	bne.n	800dfae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d10a      	bne.n	800df68 <prvProcessTimerOrBlockTask+0x3c>
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	429a      	cmp	r2, r3
 800df58:	d806      	bhi.n	800df68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800df5a:	f7fe ffab 	bl	800ceb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800df5e:	68f9      	ldr	r1, [r7, #12]
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f7ff ff7f 	bl	800de64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800df66:	e024      	b.n	800dfb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d008      	beq.n	800df80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800df6e:	4b13      	ldr	r3, [pc, #76]	@ (800dfbc <prvProcessTimerOrBlockTask+0x90>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d101      	bne.n	800df7c <prvProcessTimerOrBlockTask+0x50>
 800df78:	2301      	movs	r3, #1
 800df7a:	e000      	b.n	800df7e <prvProcessTimerOrBlockTask+0x52>
 800df7c:	2300      	movs	r3, #0
 800df7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800df80:	4b0f      	ldr	r3, [pc, #60]	@ (800dfc0 <prvProcessTimerOrBlockTask+0x94>)
 800df82:	6818      	ldr	r0, [r3, #0]
 800df84:	687a      	ldr	r2, [r7, #4]
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	1ad3      	subs	r3, r2, r3
 800df8a:	683a      	ldr	r2, [r7, #0]
 800df8c:	4619      	mov	r1, r3
 800df8e:	f7fe fcdd 	bl	800c94c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800df92:	f7fe ff8f 	bl	800ceb4 <xTaskResumeAll>
 800df96:	4603      	mov	r3, r0
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d10a      	bne.n	800dfb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800df9c:	4b09      	ldr	r3, [pc, #36]	@ (800dfc4 <prvProcessTimerOrBlockTask+0x98>)
 800df9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dfa2:	601a      	str	r2, [r3, #0]
 800dfa4:	f3bf 8f4f 	dsb	sy
 800dfa8:	f3bf 8f6f 	isb	sy
}
 800dfac:	e001      	b.n	800dfb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dfae:	f7fe ff81 	bl	800ceb4 <xTaskResumeAll>
}
 800dfb2:	bf00      	nop
 800dfb4:	3710      	adds	r7, #16
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	2000b27c 	.word	0x2000b27c
 800dfc0:	2000b280 	.word	0x2000b280
 800dfc4:	e000ed04 	.word	0xe000ed04

0800dfc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b085      	sub	sp, #20
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dfd0:	4b0e      	ldr	r3, [pc, #56]	@ (800e00c <prvGetNextExpireTime+0x44>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d101      	bne.n	800dfde <prvGetNextExpireTime+0x16>
 800dfda:	2201      	movs	r2, #1
 800dfdc:	e000      	b.n	800dfe0 <prvGetNextExpireTime+0x18>
 800dfde:	2200      	movs	r2, #0
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d105      	bne.n	800dff8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dfec:	4b07      	ldr	r3, [pc, #28]	@ (800e00c <prvGetNextExpireTime+0x44>)
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	68db      	ldr	r3, [r3, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	60fb      	str	r3, [r7, #12]
 800dff6:	e001      	b.n	800dffc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dff8:	2300      	movs	r3, #0
 800dffa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dffc:	68fb      	ldr	r3, [r7, #12]
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3714      	adds	r7, #20
 800e002:	46bd      	mov	sp, r7
 800e004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e008:	4770      	bx	lr
 800e00a:	bf00      	nop
 800e00c:	2000b278 	.word	0x2000b278

0800e010 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b084      	sub	sp, #16
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e018:	f7fe ffec 	bl	800cff4 <xTaskGetTickCount>
 800e01c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e01e:	4b0b      	ldr	r3, [pc, #44]	@ (800e04c <prvSampleTimeNow+0x3c>)
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	68fa      	ldr	r2, [r7, #12]
 800e024:	429a      	cmp	r2, r3
 800e026:	d205      	bcs.n	800e034 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e028:	f000 f940 	bl	800e2ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2201      	movs	r2, #1
 800e030:	601a      	str	r2, [r3, #0]
 800e032:	e002      	b.n	800e03a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	2200      	movs	r2, #0
 800e038:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e03a:	4a04      	ldr	r2, [pc, #16]	@ (800e04c <prvSampleTimeNow+0x3c>)
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e040:	68fb      	ldr	r3, [r7, #12]
}
 800e042:	4618      	mov	r0, r3
 800e044:	3710      	adds	r7, #16
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}
 800e04a:	bf00      	nop
 800e04c:	2000b288 	.word	0x2000b288

0800e050 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b086      	sub	sp, #24
 800e054:	af00      	add	r7, sp, #0
 800e056:	60f8      	str	r0, [r7, #12]
 800e058:	60b9      	str	r1, [r7, #8]
 800e05a:	607a      	str	r2, [r7, #4]
 800e05c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e05e:	2300      	movs	r3, #0
 800e060:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	68ba      	ldr	r2, [r7, #8]
 800e066:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	68fa      	ldr	r2, [r7, #12]
 800e06c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e06e:	68ba      	ldr	r2, [r7, #8]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	429a      	cmp	r2, r3
 800e074:	d812      	bhi.n	800e09c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e076:	687a      	ldr	r2, [r7, #4]
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	1ad2      	subs	r2, r2, r3
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	699b      	ldr	r3, [r3, #24]
 800e080:	429a      	cmp	r2, r3
 800e082:	d302      	bcc.n	800e08a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e084:	2301      	movs	r3, #1
 800e086:	617b      	str	r3, [r7, #20]
 800e088:	e01b      	b.n	800e0c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e08a:	4b10      	ldr	r3, [pc, #64]	@ (800e0cc <prvInsertTimerInActiveList+0x7c>)
 800e08c:	681a      	ldr	r2, [r3, #0]
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	3304      	adds	r3, #4
 800e092:	4619      	mov	r1, r3
 800e094:	4610      	mov	r0, r2
 800e096:	f7fd fafa 	bl	800b68e <vListInsert>
 800e09a:	e012      	b.n	800e0c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e09c:	687a      	ldr	r2, [r7, #4]
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d206      	bcs.n	800e0b2 <prvInsertTimerInActiveList+0x62>
 800e0a4:	68ba      	ldr	r2, [r7, #8]
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d302      	bcc.n	800e0b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	617b      	str	r3, [r7, #20]
 800e0b0:	e007      	b.n	800e0c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e0b2:	4b07      	ldr	r3, [pc, #28]	@ (800e0d0 <prvInsertTimerInActiveList+0x80>)
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	3304      	adds	r3, #4
 800e0ba:	4619      	mov	r1, r3
 800e0bc:	4610      	mov	r0, r2
 800e0be:	f7fd fae6 	bl	800b68e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e0c2:	697b      	ldr	r3, [r7, #20]
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	3718      	adds	r7, #24
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	2000b27c 	.word	0x2000b27c
 800e0d0:	2000b278 	.word	0x2000b278

0800e0d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b08e      	sub	sp, #56	@ 0x38
 800e0d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e0da:	e0d4      	b.n	800e286 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	da1b      	bge.n	800e11a <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e0e2:	1d3b      	adds	r3, r7, #4
 800e0e4:	3304      	adds	r3, #4
 800e0e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d10d      	bne.n	800e10a <prvProcessReceivedCommands+0x36>
	__asm volatile
 800e0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0f2:	b672      	cpsid	i
 800e0f4:	f383 8811 	msr	BASEPRI, r3
 800e0f8:	f3bf 8f6f 	isb	sy
 800e0fc:	f3bf 8f4f 	dsb	sy
 800e100:	b662      	cpsie	i
 800e102:	61fb      	str	r3, [r7, #28]
}
 800e104:	bf00      	nop
 800e106:	bf00      	nop
 800e108:	e7fd      	b.n	800e106 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e10a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e110:	6850      	ldr	r0, [r2, #4]
 800e112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e114:	6892      	ldr	r2, [r2, #8]
 800e116:	4611      	mov	r1, r2
 800e118:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	f2c0 80b2 	blt.w	800e286 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e128:	695b      	ldr	r3, [r3, #20]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d004      	beq.n	800e138 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e130:	3304      	adds	r3, #4
 800e132:	4618      	mov	r0, r3
 800e134:	f7fd fae4 	bl	800b700 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e138:	463b      	mov	r3, r7
 800e13a:	4618      	mov	r0, r3
 800e13c:	f7ff ff68 	bl	800e010 <prvSampleTimeNow>
 800e140:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2b09      	cmp	r3, #9
 800e146:	f200 809b 	bhi.w	800e280 <prvProcessReceivedCommands+0x1ac>
 800e14a:	a201      	add	r2, pc, #4	@ (adr r2, 800e150 <prvProcessReceivedCommands+0x7c>)
 800e14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e150:	0800e179 	.word	0x0800e179
 800e154:	0800e179 	.word	0x0800e179
 800e158:	0800e179 	.word	0x0800e179
 800e15c:	0800e1f3 	.word	0x0800e1f3
 800e160:	0800e207 	.word	0x0800e207
 800e164:	0800e257 	.word	0x0800e257
 800e168:	0800e179 	.word	0x0800e179
 800e16c:	0800e179 	.word	0x0800e179
 800e170:	0800e1f3 	.word	0x0800e1f3
 800e174:	0800e207 	.word	0x0800e207
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e17a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e17e:	f043 0301 	orr.w	r3, r3, #1
 800e182:	b2da      	uxtb	r2, r3
 800e184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e186:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e18a:	68ba      	ldr	r2, [r7, #8]
 800e18c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e18e:	699b      	ldr	r3, [r3, #24]
 800e190:	18d1      	adds	r1, r2, r3
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e196:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e198:	f7ff ff5a 	bl	800e050 <prvInsertTimerInActiveList>
 800e19c:	4603      	mov	r3, r0
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d070      	beq.n	800e284 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1a4:	6a1b      	ldr	r3, [r3, #32]
 800e1a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e1a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e1b0:	f003 0304 	and.w	r3, r3, #4
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d065      	beq.n	800e284 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e1b8:	68ba      	ldr	r2, [r7, #8]
 800e1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1bc:	699b      	ldr	r3, [r3, #24]
 800e1be:	441a      	add	r2, r3
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	9300      	str	r3, [sp, #0]
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	2100      	movs	r1, #0
 800e1c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e1ca:	f7ff fdfb 	bl	800ddc4 <xTimerGenericCommand>
 800e1ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e1d0:	6a3b      	ldr	r3, [r7, #32]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d156      	bne.n	800e284 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800e1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1da:	b672      	cpsid	i
 800e1dc:	f383 8811 	msr	BASEPRI, r3
 800e1e0:	f3bf 8f6f 	isb	sy
 800e1e4:	f3bf 8f4f 	dsb	sy
 800e1e8:	b662      	cpsie	i
 800e1ea:	61bb      	str	r3, [r7, #24]
}
 800e1ec:	bf00      	nop
 800e1ee:	bf00      	nop
 800e1f0:	e7fd      	b.n	800e1ee <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e1f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e1f8:	f023 0301 	bic.w	r3, r3, #1
 800e1fc:	b2da      	uxtb	r2, r3
 800e1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e200:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e204:	e03f      	b.n	800e286 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e208:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e20c:	f043 0301 	orr.w	r3, r3, #1
 800e210:	b2da      	uxtb	r2, r3
 800e212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e214:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e218:	68ba      	ldr	r2, [r7, #8]
 800e21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e21c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e21e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e220:	699b      	ldr	r3, [r3, #24]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d10d      	bne.n	800e242 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800e226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e22a:	b672      	cpsid	i
 800e22c:	f383 8811 	msr	BASEPRI, r3
 800e230:	f3bf 8f6f 	isb	sy
 800e234:	f3bf 8f4f 	dsb	sy
 800e238:	b662      	cpsie	i
 800e23a:	617b      	str	r3, [r7, #20]
}
 800e23c:	bf00      	nop
 800e23e:	bf00      	nop
 800e240:	e7fd      	b.n	800e23e <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e244:	699a      	ldr	r2, [r3, #24]
 800e246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e248:	18d1      	adds	r1, r2, r3
 800e24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e24c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e24e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e250:	f7ff fefe 	bl	800e050 <prvInsertTimerInActiveList>
					break;
 800e254:	e017      	b.n	800e286 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e258:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e25c:	f003 0302 	and.w	r3, r3, #2
 800e260:	2b00      	cmp	r3, #0
 800e262:	d103      	bne.n	800e26c <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800e264:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e266:	f000 fbd5 	bl	800ea14 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e26a:	e00c      	b.n	800e286 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e26e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e272:	f023 0301 	bic.w	r3, r3, #1
 800e276:	b2da      	uxtb	r2, r3
 800e278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e27a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e27e:	e002      	b.n	800e286 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800e280:	bf00      	nop
 800e282:	e000      	b.n	800e286 <prvProcessReceivedCommands+0x1b2>
					break;
 800e284:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e286:	4b08      	ldr	r3, [pc, #32]	@ (800e2a8 <prvProcessReceivedCommands+0x1d4>)
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	1d39      	adds	r1, r7, #4
 800e28c:	2200      	movs	r2, #0
 800e28e:	4618      	mov	r0, r3
 800e290:	f7fd ff32 	bl	800c0f8 <xQueueReceive>
 800e294:	4603      	mov	r3, r0
 800e296:	2b00      	cmp	r3, #0
 800e298:	f47f af20 	bne.w	800e0dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e29c:	bf00      	nop
 800e29e:	bf00      	nop
 800e2a0:	3730      	adds	r7, #48	@ 0x30
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}
 800e2a6:	bf00      	nop
 800e2a8:	2000b280 	.word	0x2000b280

0800e2ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b088      	sub	sp, #32
 800e2b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e2b2:	e04b      	b.n	800e34c <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e2b4:	4b2f      	ldr	r3, [pc, #188]	@ (800e374 <prvSwitchTimerLists+0xc8>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	68db      	ldr	r3, [r3, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2be:	4b2d      	ldr	r3, [pc, #180]	@ (800e374 <prvSwitchTimerLists+0xc8>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	68db      	ldr	r3, [r3, #12]
 800e2c4:	68db      	ldr	r3, [r3, #12]
 800e2c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	3304      	adds	r3, #4
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f7fd fa17 	bl	800b700 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	6a1b      	ldr	r3, [r3, #32]
 800e2d6:	68f8      	ldr	r0, [r7, #12]
 800e2d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e2e0:	f003 0304 	and.w	r3, r3, #4
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d031      	beq.n	800e34c <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	699b      	ldr	r3, [r3, #24]
 800e2ec:	693a      	ldr	r2, [r7, #16]
 800e2ee:	4413      	add	r3, r2
 800e2f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e2f2:	68ba      	ldr	r2, [r7, #8]
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d90e      	bls.n	800e318 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	68ba      	ldr	r2, [r7, #8]
 800e2fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	68fa      	ldr	r2, [r7, #12]
 800e304:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e306:	4b1b      	ldr	r3, [pc, #108]	@ (800e374 <prvSwitchTimerLists+0xc8>)
 800e308:	681a      	ldr	r2, [r3, #0]
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	3304      	adds	r3, #4
 800e30e:	4619      	mov	r1, r3
 800e310:	4610      	mov	r0, r2
 800e312:	f7fd f9bc 	bl	800b68e <vListInsert>
 800e316:	e019      	b.n	800e34c <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e318:	2300      	movs	r3, #0
 800e31a:	9300      	str	r3, [sp, #0]
 800e31c:	2300      	movs	r3, #0
 800e31e:	693a      	ldr	r2, [r7, #16]
 800e320:	2100      	movs	r1, #0
 800e322:	68f8      	ldr	r0, [r7, #12]
 800e324:	f7ff fd4e 	bl	800ddc4 <xTimerGenericCommand>
 800e328:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d10d      	bne.n	800e34c <prvSwitchTimerLists+0xa0>
	__asm volatile
 800e330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e334:	b672      	cpsid	i
 800e336:	f383 8811 	msr	BASEPRI, r3
 800e33a:	f3bf 8f6f 	isb	sy
 800e33e:	f3bf 8f4f 	dsb	sy
 800e342:	b662      	cpsie	i
 800e344:	603b      	str	r3, [r7, #0]
}
 800e346:	bf00      	nop
 800e348:	bf00      	nop
 800e34a:	e7fd      	b.n	800e348 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e34c:	4b09      	ldr	r3, [pc, #36]	@ (800e374 <prvSwitchTimerLists+0xc8>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d1ae      	bne.n	800e2b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e356:	4b07      	ldr	r3, [pc, #28]	@ (800e374 <prvSwitchTimerLists+0xc8>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e35c:	4b06      	ldr	r3, [pc, #24]	@ (800e378 <prvSwitchTimerLists+0xcc>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4a04      	ldr	r2, [pc, #16]	@ (800e374 <prvSwitchTimerLists+0xc8>)
 800e362:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e364:	4a04      	ldr	r2, [pc, #16]	@ (800e378 <prvSwitchTimerLists+0xcc>)
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	6013      	str	r3, [r2, #0]
}
 800e36a:	bf00      	nop
 800e36c:	3718      	adds	r7, #24
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	2000b278 	.word	0x2000b278
 800e378:	2000b27c 	.word	0x2000b27c

0800e37c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b082      	sub	sp, #8
 800e380:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e382:	f000 f94b 	bl	800e61c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e386:	4b15      	ldr	r3, [pc, #84]	@ (800e3dc <prvCheckForValidListAndQueue+0x60>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d120      	bne.n	800e3d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e38e:	4814      	ldr	r0, [pc, #80]	@ (800e3e0 <prvCheckForValidListAndQueue+0x64>)
 800e390:	f7fd f92c 	bl	800b5ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e394:	4813      	ldr	r0, [pc, #76]	@ (800e3e4 <prvCheckForValidListAndQueue+0x68>)
 800e396:	f7fd f929 	bl	800b5ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e39a:	4b13      	ldr	r3, [pc, #76]	@ (800e3e8 <prvCheckForValidListAndQueue+0x6c>)
 800e39c:	4a10      	ldr	r2, [pc, #64]	@ (800e3e0 <prvCheckForValidListAndQueue+0x64>)
 800e39e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e3a0:	4b12      	ldr	r3, [pc, #72]	@ (800e3ec <prvCheckForValidListAndQueue+0x70>)
 800e3a2:	4a10      	ldr	r2, [pc, #64]	@ (800e3e4 <prvCheckForValidListAndQueue+0x68>)
 800e3a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	9300      	str	r3, [sp, #0]
 800e3aa:	4b11      	ldr	r3, [pc, #68]	@ (800e3f0 <prvCheckForValidListAndQueue+0x74>)
 800e3ac:	4a11      	ldr	r2, [pc, #68]	@ (800e3f4 <prvCheckForValidListAndQueue+0x78>)
 800e3ae:	2110      	movs	r1, #16
 800e3b0:	200a      	movs	r0, #10
 800e3b2:	f7fd fa3b 	bl	800b82c <xQueueGenericCreateStatic>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	4a08      	ldr	r2, [pc, #32]	@ (800e3dc <prvCheckForValidListAndQueue+0x60>)
 800e3ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e3bc:	4b07      	ldr	r3, [pc, #28]	@ (800e3dc <prvCheckForValidListAndQueue+0x60>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d005      	beq.n	800e3d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e3c4:	4b05      	ldr	r3, [pc, #20]	@ (800e3dc <prvCheckForValidListAndQueue+0x60>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	490b      	ldr	r1, [pc, #44]	@ (800e3f8 <prvCheckForValidListAndQueue+0x7c>)
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7fe fa6a 	bl	800c8a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e3d0:	f000 f95a 	bl	800e688 <vPortExitCritical>
}
 800e3d4:	bf00      	nop
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	2000b280 	.word	0x2000b280
 800e3e0:	2000b250 	.word	0x2000b250
 800e3e4:	2000b264 	.word	0x2000b264
 800e3e8:	2000b278 	.word	0x2000b278
 800e3ec:	2000b27c 	.word	0x2000b27c
 800e3f0:	2000b32c 	.word	0x2000b32c
 800e3f4:	2000b28c 	.word	0x2000b28c
 800e3f8:	0801b280 	.word	0x0801b280

0800e3fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b085      	sub	sp, #20
 800e400:	af00      	add	r7, sp, #0
 800e402:	60f8      	str	r0, [r7, #12]
 800e404:	60b9      	str	r1, [r7, #8]
 800e406:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	3b04      	subs	r3, #4
 800e40c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e414:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	3b04      	subs	r3, #4
 800e41a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	f023 0201 	bic.w	r2, r3, #1
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	3b04      	subs	r3, #4
 800e42a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e42c:	4a0c      	ldr	r2, [pc, #48]	@ (800e460 <pxPortInitialiseStack+0x64>)
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	3b14      	subs	r3, #20
 800e436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e438:	687a      	ldr	r2, [r7, #4]
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	3b04      	subs	r3, #4
 800e442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	f06f 0202 	mvn.w	r2, #2
 800e44a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	3b20      	subs	r3, #32
 800e450:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e452:	68fb      	ldr	r3, [r7, #12]
}
 800e454:	4618      	mov	r0, r3
 800e456:	3714      	adds	r7, #20
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr
 800e460:	0800e465 	.word	0x0800e465

0800e464 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e464:	b480      	push	{r7}
 800e466:	b085      	sub	sp, #20
 800e468:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e46a:	2300      	movs	r3, #0
 800e46c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e46e:	4b15      	ldr	r3, [pc, #84]	@ (800e4c4 <prvTaskExitError+0x60>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e476:	d00d      	beq.n	800e494 <prvTaskExitError+0x30>
	__asm volatile
 800e478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e47c:	b672      	cpsid	i
 800e47e:	f383 8811 	msr	BASEPRI, r3
 800e482:	f3bf 8f6f 	isb	sy
 800e486:	f3bf 8f4f 	dsb	sy
 800e48a:	b662      	cpsie	i
 800e48c:	60fb      	str	r3, [r7, #12]
}
 800e48e:	bf00      	nop
 800e490:	bf00      	nop
 800e492:	e7fd      	b.n	800e490 <prvTaskExitError+0x2c>
	__asm volatile
 800e494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e498:	b672      	cpsid	i
 800e49a:	f383 8811 	msr	BASEPRI, r3
 800e49e:	f3bf 8f6f 	isb	sy
 800e4a2:	f3bf 8f4f 	dsb	sy
 800e4a6:	b662      	cpsie	i
 800e4a8:	60bb      	str	r3, [r7, #8]
}
 800e4aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e4ac:	bf00      	nop
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d0fc      	beq.n	800e4ae <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e4b4:	bf00      	nop
 800e4b6:	bf00      	nop
 800e4b8:	3714      	adds	r7, #20
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c0:	4770      	bx	lr
 800e4c2:	bf00      	nop
 800e4c4:	20000020 	.word	0x20000020
	...

0800e4d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e4d0:	4b07      	ldr	r3, [pc, #28]	@ (800e4f0 <pxCurrentTCBConst2>)
 800e4d2:	6819      	ldr	r1, [r3, #0]
 800e4d4:	6808      	ldr	r0, [r1, #0]
 800e4d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4da:	f380 8809 	msr	PSP, r0
 800e4de:	f3bf 8f6f 	isb	sy
 800e4e2:	f04f 0000 	mov.w	r0, #0
 800e4e6:	f380 8811 	msr	BASEPRI, r0
 800e4ea:	4770      	bx	lr
 800e4ec:	f3af 8000 	nop.w

0800e4f0 <pxCurrentTCBConst2>:
 800e4f0:	2000ad50 	.word	0x2000ad50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e4f4:	bf00      	nop
 800e4f6:	bf00      	nop

0800e4f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e4f8:	4808      	ldr	r0, [pc, #32]	@ (800e51c <prvPortStartFirstTask+0x24>)
 800e4fa:	6800      	ldr	r0, [r0, #0]
 800e4fc:	6800      	ldr	r0, [r0, #0]
 800e4fe:	f380 8808 	msr	MSP, r0
 800e502:	f04f 0000 	mov.w	r0, #0
 800e506:	f380 8814 	msr	CONTROL, r0
 800e50a:	b662      	cpsie	i
 800e50c:	b661      	cpsie	f
 800e50e:	f3bf 8f4f 	dsb	sy
 800e512:	f3bf 8f6f 	isb	sy
 800e516:	df00      	svc	0
 800e518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e51a:	bf00      	nop
 800e51c:	e000ed08 	.word	0xe000ed08

0800e520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b084      	sub	sp, #16
 800e524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e526:	4b37      	ldr	r3, [pc, #220]	@ (800e604 <xPortStartScheduler+0xe4>)
 800e528:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	781b      	ldrb	r3, [r3, #0]
 800e52e:	b2db      	uxtb	r3, r3
 800e530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	22ff      	movs	r2, #255	@ 0xff
 800e536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	781b      	ldrb	r3, [r3, #0]
 800e53c:	b2db      	uxtb	r3, r3
 800e53e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e540:	78fb      	ldrb	r3, [r7, #3]
 800e542:	b2db      	uxtb	r3, r3
 800e544:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e548:	b2da      	uxtb	r2, r3
 800e54a:	4b2f      	ldr	r3, [pc, #188]	@ (800e608 <xPortStartScheduler+0xe8>)
 800e54c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e54e:	4b2f      	ldr	r3, [pc, #188]	@ (800e60c <xPortStartScheduler+0xec>)
 800e550:	2207      	movs	r2, #7
 800e552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e554:	e009      	b.n	800e56a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e556:	4b2d      	ldr	r3, [pc, #180]	@ (800e60c <xPortStartScheduler+0xec>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	3b01      	subs	r3, #1
 800e55c:	4a2b      	ldr	r2, [pc, #172]	@ (800e60c <xPortStartScheduler+0xec>)
 800e55e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e560:	78fb      	ldrb	r3, [r7, #3]
 800e562:	b2db      	uxtb	r3, r3
 800e564:	005b      	lsls	r3, r3, #1
 800e566:	b2db      	uxtb	r3, r3
 800e568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e56a:	78fb      	ldrb	r3, [r7, #3]
 800e56c:	b2db      	uxtb	r3, r3
 800e56e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e572:	2b80      	cmp	r3, #128	@ 0x80
 800e574:	d0ef      	beq.n	800e556 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e576:	4b25      	ldr	r3, [pc, #148]	@ (800e60c <xPortStartScheduler+0xec>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	f1c3 0307 	rsb	r3, r3, #7
 800e57e:	2b04      	cmp	r3, #4
 800e580:	d00d      	beq.n	800e59e <xPortStartScheduler+0x7e>
	__asm volatile
 800e582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e586:	b672      	cpsid	i
 800e588:	f383 8811 	msr	BASEPRI, r3
 800e58c:	f3bf 8f6f 	isb	sy
 800e590:	f3bf 8f4f 	dsb	sy
 800e594:	b662      	cpsie	i
 800e596:	60bb      	str	r3, [r7, #8]
}
 800e598:	bf00      	nop
 800e59a:	bf00      	nop
 800e59c:	e7fd      	b.n	800e59a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e59e:	4b1b      	ldr	r3, [pc, #108]	@ (800e60c <xPortStartScheduler+0xec>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	021b      	lsls	r3, r3, #8
 800e5a4:	4a19      	ldr	r2, [pc, #100]	@ (800e60c <xPortStartScheduler+0xec>)
 800e5a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e5a8:	4b18      	ldr	r3, [pc, #96]	@ (800e60c <xPortStartScheduler+0xec>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e5b0:	4a16      	ldr	r2, [pc, #88]	@ (800e60c <xPortStartScheduler+0xec>)
 800e5b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	b2da      	uxtb	r2, r3
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e5bc:	4b14      	ldr	r3, [pc, #80]	@ (800e610 <xPortStartScheduler+0xf0>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4a13      	ldr	r2, [pc, #76]	@ (800e610 <xPortStartScheduler+0xf0>)
 800e5c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e5c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e5c8:	4b11      	ldr	r3, [pc, #68]	@ (800e610 <xPortStartScheduler+0xf0>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	4a10      	ldr	r2, [pc, #64]	@ (800e610 <xPortStartScheduler+0xf0>)
 800e5ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e5d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e5d4:	f000 f8dc 	bl	800e790 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e5d8:	4b0e      	ldr	r3, [pc, #56]	@ (800e614 <xPortStartScheduler+0xf4>)
 800e5da:	2200      	movs	r2, #0
 800e5dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e5de:	f000 f8fb 	bl	800e7d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e5e2:	4b0d      	ldr	r3, [pc, #52]	@ (800e618 <xPortStartScheduler+0xf8>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	4a0c      	ldr	r2, [pc, #48]	@ (800e618 <xPortStartScheduler+0xf8>)
 800e5e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e5ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e5ee:	f7ff ff83 	bl	800e4f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e5f2:	f7fe fddd 	bl	800d1b0 <vTaskSwitchContext>
	prvTaskExitError();
 800e5f6:	f7ff ff35 	bl	800e464 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e5fa:	2300      	movs	r3, #0
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3710      	adds	r7, #16
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}
 800e604:	e000e400 	.word	0xe000e400
 800e608:	2000b37c 	.word	0x2000b37c
 800e60c:	2000b380 	.word	0x2000b380
 800e610:	e000ed20 	.word	0xe000ed20
 800e614:	20000020 	.word	0x20000020
 800e618:	e000ef34 	.word	0xe000ef34

0800e61c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e61c:	b480      	push	{r7}
 800e61e:	b083      	sub	sp, #12
 800e620:	af00      	add	r7, sp, #0
	__asm volatile
 800e622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e626:	b672      	cpsid	i
 800e628:	f383 8811 	msr	BASEPRI, r3
 800e62c:	f3bf 8f6f 	isb	sy
 800e630:	f3bf 8f4f 	dsb	sy
 800e634:	b662      	cpsie	i
 800e636:	607b      	str	r3, [r7, #4]
}
 800e638:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e63a:	4b11      	ldr	r3, [pc, #68]	@ (800e680 <vPortEnterCritical+0x64>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	3301      	adds	r3, #1
 800e640:	4a0f      	ldr	r2, [pc, #60]	@ (800e680 <vPortEnterCritical+0x64>)
 800e642:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e644:	4b0e      	ldr	r3, [pc, #56]	@ (800e680 <vPortEnterCritical+0x64>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	2b01      	cmp	r3, #1
 800e64a:	d112      	bne.n	800e672 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e64c:	4b0d      	ldr	r3, [pc, #52]	@ (800e684 <vPortEnterCritical+0x68>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	b2db      	uxtb	r3, r3
 800e652:	2b00      	cmp	r3, #0
 800e654:	d00d      	beq.n	800e672 <vPortEnterCritical+0x56>
	__asm volatile
 800e656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e65a:	b672      	cpsid	i
 800e65c:	f383 8811 	msr	BASEPRI, r3
 800e660:	f3bf 8f6f 	isb	sy
 800e664:	f3bf 8f4f 	dsb	sy
 800e668:	b662      	cpsie	i
 800e66a:	603b      	str	r3, [r7, #0]
}
 800e66c:	bf00      	nop
 800e66e:	bf00      	nop
 800e670:	e7fd      	b.n	800e66e <vPortEnterCritical+0x52>
	}
}
 800e672:	bf00      	nop
 800e674:	370c      	adds	r7, #12
 800e676:	46bd      	mov	sp, r7
 800e678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67c:	4770      	bx	lr
 800e67e:	bf00      	nop
 800e680:	20000020 	.word	0x20000020
 800e684:	e000ed04 	.word	0xe000ed04

0800e688 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e688:	b480      	push	{r7}
 800e68a:	b083      	sub	sp, #12
 800e68c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e68e:	4b13      	ldr	r3, [pc, #76]	@ (800e6dc <vPortExitCritical+0x54>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d10d      	bne.n	800e6b2 <vPortExitCritical+0x2a>
	__asm volatile
 800e696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e69a:	b672      	cpsid	i
 800e69c:	f383 8811 	msr	BASEPRI, r3
 800e6a0:	f3bf 8f6f 	isb	sy
 800e6a4:	f3bf 8f4f 	dsb	sy
 800e6a8:	b662      	cpsie	i
 800e6aa:	607b      	str	r3, [r7, #4]
}
 800e6ac:	bf00      	nop
 800e6ae:	bf00      	nop
 800e6b0:	e7fd      	b.n	800e6ae <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800e6b2:	4b0a      	ldr	r3, [pc, #40]	@ (800e6dc <vPortExitCritical+0x54>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	3b01      	subs	r3, #1
 800e6b8:	4a08      	ldr	r2, [pc, #32]	@ (800e6dc <vPortExitCritical+0x54>)
 800e6ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e6bc:	4b07      	ldr	r3, [pc, #28]	@ (800e6dc <vPortExitCritical+0x54>)
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d105      	bne.n	800e6d0 <vPortExitCritical+0x48>
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	f383 8811 	msr	BASEPRI, r3
}
 800e6ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e6d0:	bf00      	nop
 800e6d2:	370c      	adds	r7, #12
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr
 800e6dc:	20000020 	.word	0x20000020

0800e6e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e6e0:	f3ef 8009 	mrs	r0, PSP
 800e6e4:	f3bf 8f6f 	isb	sy
 800e6e8:	4b15      	ldr	r3, [pc, #84]	@ (800e740 <pxCurrentTCBConst>)
 800e6ea:	681a      	ldr	r2, [r3, #0]
 800e6ec:	f01e 0f10 	tst.w	lr, #16
 800e6f0:	bf08      	it	eq
 800e6f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e6f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6fa:	6010      	str	r0, [r2, #0]
 800e6fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e700:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e704:	b672      	cpsid	i
 800e706:	f380 8811 	msr	BASEPRI, r0
 800e70a:	f3bf 8f4f 	dsb	sy
 800e70e:	f3bf 8f6f 	isb	sy
 800e712:	b662      	cpsie	i
 800e714:	f7fe fd4c 	bl	800d1b0 <vTaskSwitchContext>
 800e718:	f04f 0000 	mov.w	r0, #0
 800e71c:	f380 8811 	msr	BASEPRI, r0
 800e720:	bc09      	pop	{r0, r3}
 800e722:	6819      	ldr	r1, [r3, #0]
 800e724:	6808      	ldr	r0, [r1, #0]
 800e726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e72a:	f01e 0f10 	tst.w	lr, #16
 800e72e:	bf08      	it	eq
 800e730:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e734:	f380 8809 	msr	PSP, r0
 800e738:	f3bf 8f6f 	isb	sy
 800e73c:	4770      	bx	lr
 800e73e:	bf00      	nop

0800e740 <pxCurrentTCBConst>:
 800e740:	2000ad50 	.word	0x2000ad50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e744:	bf00      	nop
 800e746:	bf00      	nop

0800e748 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b082      	sub	sp, #8
 800e74c:	af00      	add	r7, sp, #0
	__asm volatile
 800e74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e752:	b672      	cpsid	i
 800e754:	f383 8811 	msr	BASEPRI, r3
 800e758:	f3bf 8f6f 	isb	sy
 800e75c:	f3bf 8f4f 	dsb	sy
 800e760:	b662      	cpsie	i
 800e762:	607b      	str	r3, [r7, #4]
}
 800e764:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e766:	f7fe fc67 	bl	800d038 <xTaskIncrementTick>
 800e76a:	4603      	mov	r3, r0
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d003      	beq.n	800e778 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e770:	4b06      	ldr	r3, [pc, #24]	@ (800e78c <SysTick_Handler+0x44>)
 800e772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e776:	601a      	str	r2, [r3, #0]
 800e778:	2300      	movs	r3, #0
 800e77a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	f383 8811 	msr	BASEPRI, r3
}
 800e782:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e784:	bf00      	nop
 800e786:	3708      	adds	r7, #8
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}
 800e78c:	e000ed04 	.word	0xe000ed04

0800e790 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e790:	b480      	push	{r7}
 800e792:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e794:	4b0b      	ldr	r3, [pc, #44]	@ (800e7c4 <vPortSetupTimerInterrupt+0x34>)
 800e796:	2200      	movs	r2, #0
 800e798:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e79a:	4b0b      	ldr	r3, [pc, #44]	@ (800e7c8 <vPortSetupTimerInterrupt+0x38>)
 800e79c:	2200      	movs	r2, #0
 800e79e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e7a0:	4b0a      	ldr	r3, [pc, #40]	@ (800e7cc <vPortSetupTimerInterrupt+0x3c>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	4a0a      	ldr	r2, [pc, #40]	@ (800e7d0 <vPortSetupTimerInterrupt+0x40>)
 800e7a6:	fba2 2303 	umull	r2, r3, r2, r3
 800e7aa:	099b      	lsrs	r3, r3, #6
 800e7ac:	4a09      	ldr	r2, [pc, #36]	@ (800e7d4 <vPortSetupTimerInterrupt+0x44>)
 800e7ae:	3b01      	subs	r3, #1
 800e7b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e7b2:	4b04      	ldr	r3, [pc, #16]	@ (800e7c4 <vPortSetupTimerInterrupt+0x34>)
 800e7b4:	2207      	movs	r2, #7
 800e7b6:	601a      	str	r2, [r3, #0]
}
 800e7b8:	bf00      	nop
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c0:	4770      	bx	lr
 800e7c2:	bf00      	nop
 800e7c4:	e000e010 	.word	0xe000e010
 800e7c8:	e000e018 	.word	0xe000e018
 800e7cc:	20000000 	.word	0x20000000
 800e7d0:	10624dd3 	.word	0x10624dd3
 800e7d4:	e000e014 	.word	0xe000e014

0800e7d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e7d8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e7e8 <vPortEnableVFP+0x10>
 800e7dc:	6801      	ldr	r1, [r0, #0]
 800e7de:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e7e2:	6001      	str	r1, [r0, #0]
 800e7e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e7e6:	bf00      	nop
 800e7e8:	e000ed88 	.word	0xe000ed88

0800e7ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b085      	sub	sp, #20
 800e7f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e7f2:	f3ef 8305 	mrs	r3, IPSR
 800e7f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	2b0f      	cmp	r3, #15
 800e7fc:	d917      	bls.n	800e82e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e7fe:	4a1a      	ldr	r2, [pc, #104]	@ (800e868 <vPortValidateInterruptPriority+0x7c>)
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	4413      	add	r3, r2
 800e804:	781b      	ldrb	r3, [r3, #0]
 800e806:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e808:	4b18      	ldr	r3, [pc, #96]	@ (800e86c <vPortValidateInterruptPriority+0x80>)
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	7afa      	ldrb	r2, [r7, #11]
 800e80e:	429a      	cmp	r2, r3
 800e810:	d20d      	bcs.n	800e82e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800e812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e816:	b672      	cpsid	i
 800e818:	f383 8811 	msr	BASEPRI, r3
 800e81c:	f3bf 8f6f 	isb	sy
 800e820:	f3bf 8f4f 	dsb	sy
 800e824:	b662      	cpsie	i
 800e826:	607b      	str	r3, [r7, #4]
}
 800e828:	bf00      	nop
 800e82a:	bf00      	nop
 800e82c:	e7fd      	b.n	800e82a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e82e:	4b10      	ldr	r3, [pc, #64]	@ (800e870 <vPortValidateInterruptPriority+0x84>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e836:	4b0f      	ldr	r3, [pc, #60]	@ (800e874 <vPortValidateInterruptPriority+0x88>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d90d      	bls.n	800e85a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800e83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e842:	b672      	cpsid	i
 800e844:	f383 8811 	msr	BASEPRI, r3
 800e848:	f3bf 8f6f 	isb	sy
 800e84c:	f3bf 8f4f 	dsb	sy
 800e850:	b662      	cpsie	i
 800e852:	603b      	str	r3, [r7, #0]
}
 800e854:	bf00      	nop
 800e856:	bf00      	nop
 800e858:	e7fd      	b.n	800e856 <vPortValidateInterruptPriority+0x6a>
	}
 800e85a:	bf00      	nop
 800e85c:	3714      	adds	r7, #20
 800e85e:	46bd      	mov	sp, r7
 800e860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e864:	4770      	bx	lr
 800e866:	bf00      	nop
 800e868:	e000e3f0 	.word	0xe000e3f0
 800e86c:	2000b37c 	.word	0x2000b37c
 800e870:	e000ed0c 	.word	0xe000ed0c
 800e874:	2000b380 	.word	0x2000b380

0800e878 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b08a      	sub	sp, #40	@ 0x28
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e880:	2300      	movs	r3, #0
 800e882:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e884:	f7fe fb08 	bl	800ce98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e888:	4b5d      	ldr	r3, [pc, #372]	@ (800ea00 <pvPortMalloc+0x188>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d101      	bne.n	800e894 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e890:	f000 f920 	bl	800ead4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e894:	4b5b      	ldr	r3, [pc, #364]	@ (800ea04 <pvPortMalloc+0x18c>)
 800e896:	681a      	ldr	r2, [r3, #0]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	4013      	ands	r3, r2
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	f040 8094 	bne.w	800e9ca <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d020      	beq.n	800e8ea <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800e8a8:	2208      	movs	r2, #8
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	4413      	add	r3, r2
 800e8ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f003 0307 	and.w	r3, r3, #7
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d017      	beq.n	800e8ea <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f023 0307 	bic.w	r3, r3, #7
 800e8c0:	3308      	adds	r3, #8
 800e8c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f003 0307 	and.w	r3, r3, #7
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d00d      	beq.n	800e8ea <pvPortMalloc+0x72>
	__asm volatile
 800e8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8d2:	b672      	cpsid	i
 800e8d4:	f383 8811 	msr	BASEPRI, r3
 800e8d8:	f3bf 8f6f 	isb	sy
 800e8dc:	f3bf 8f4f 	dsb	sy
 800e8e0:	b662      	cpsie	i
 800e8e2:	617b      	str	r3, [r7, #20]
}
 800e8e4:	bf00      	nop
 800e8e6:	bf00      	nop
 800e8e8:	e7fd      	b.n	800e8e6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d06c      	beq.n	800e9ca <pvPortMalloc+0x152>
 800e8f0:	4b45      	ldr	r3, [pc, #276]	@ (800ea08 <pvPortMalloc+0x190>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	687a      	ldr	r2, [r7, #4]
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d867      	bhi.n	800e9ca <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e8fa:	4b44      	ldr	r3, [pc, #272]	@ (800ea0c <pvPortMalloc+0x194>)
 800e8fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e8fe:	4b43      	ldr	r3, [pc, #268]	@ (800ea0c <pvPortMalloc+0x194>)
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e904:	e004      	b.n	800e910 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800e906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e908:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e90a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	429a      	cmp	r2, r3
 800e918:	d903      	bls.n	800e922 <pvPortMalloc+0xaa>
 800e91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d1f1      	bne.n	800e906 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e922:	4b37      	ldr	r3, [pc, #220]	@ (800ea00 <pvPortMalloc+0x188>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e928:	429a      	cmp	r2, r3
 800e92a:	d04e      	beq.n	800e9ca <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e92c:	6a3b      	ldr	r3, [r7, #32]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	2208      	movs	r2, #8
 800e932:	4413      	add	r3, r2
 800e934:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	6a3b      	ldr	r3, [r7, #32]
 800e93c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e940:	685a      	ldr	r2, [r3, #4]
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	1ad2      	subs	r2, r2, r3
 800e946:	2308      	movs	r3, #8
 800e948:	005b      	lsls	r3, r3, #1
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d922      	bls.n	800e994 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e94e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	4413      	add	r3, r2
 800e954:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e956:	69bb      	ldr	r3, [r7, #24]
 800e958:	f003 0307 	and.w	r3, r3, #7
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d00d      	beq.n	800e97c <pvPortMalloc+0x104>
	__asm volatile
 800e960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e964:	b672      	cpsid	i
 800e966:	f383 8811 	msr	BASEPRI, r3
 800e96a:	f3bf 8f6f 	isb	sy
 800e96e:	f3bf 8f4f 	dsb	sy
 800e972:	b662      	cpsie	i
 800e974:	613b      	str	r3, [r7, #16]
}
 800e976:	bf00      	nop
 800e978:	bf00      	nop
 800e97a:	e7fd      	b.n	800e978 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e97e:	685a      	ldr	r2, [r3, #4]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	1ad2      	subs	r2, r2, r3
 800e984:	69bb      	ldr	r3, [r7, #24]
 800e986:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e98a:	687a      	ldr	r2, [r7, #4]
 800e98c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e98e:	69b8      	ldr	r0, [r7, #24]
 800e990:	f000 f902 	bl	800eb98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e994:	4b1c      	ldr	r3, [pc, #112]	@ (800ea08 <pvPortMalloc+0x190>)
 800e996:	681a      	ldr	r2, [r3, #0]
 800e998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e99a:	685b      	ldr	r3, [r3, #4]
 800e99c:	1ad3      	subs	r3, r2, r3
 800e99e:	4a1a      	ldr	r2, [pc, #104]	@ (800ea08 <pvPortMalloc+0x190>)
 800e9a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e9a2:	4b19      	ldr	r3, [pc, #100]	@ (800ea08 <pvPortMalloc+0x190>)
 800e9a4:	681a      	ldr	r2, [r3, #0]
 800e9a6:	4b1a      	ldr	r3, [pc, #104]	@ (800ea10 <pvPortMalloc+0x198>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d203      	bcs.n	800e9b6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e9ae:	4b16      	ldr	r3, [pc, #88]	@ (800ea08 <pvPortMalloc+0x190>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	4a17      	ldr	r2, [pc, #92]	@ (800ea10 <pvPortMalloc+0x198>)
 800e9b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9b8:	685a      	ldr	r2, [r3, #4]
 800e9ba:	4b12      	ldr	r3, [pc, #72]	@ (800ea04 <pvPortMalloc+0x18c>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	431a      	orrs	r2, r3
 800e9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e9ca:	f7fe fa73 	bl	800ceb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e9ce:	69fb      	ldr	r3, [r7, #28]
 800e9d0:	f003 0307 	and.w	r3, r3, #7
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d00d      	beq.n	800e9f4 <pvPortMalloc+0x17c>
	__asm volatile
 800e9d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9dc:	b672      	cpsid	i
 800e9de:	f383 8811 	msr	BASEPRI, r3
 800e9e2:	f3bf 8f6f 	isb	sy
 800e9e6:	f3bf 8f4f 	dsb	sy
 800e9ea:	b662      	cpsie	i
 800e9ec:	60fb      	str	r3, [r7, #12]
}
 800e9ee:	bf00      	nop
 800e9f0:	bf00      	nop
 800e9f2:	e7fd      	b.n	800e9f0 <pvPortMalloc+0x178>
	return pvReturn;
 800e9f4:	69fb      	ldr	r3, [r7, #28]
}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3728      	adds	r7, #40	@ 0x28
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}
 800e9fe:	bf00      	nop
 800ea00:	2002438c 	.word	0x2002438c
 800ea04:	20024398 	.word	0x20024398
 800ea08:	20024390 	.word	0x20024390
 800ea0c:	20024384 	.word	0x20024384
 800ea10:	20024394 	.word	0x20024394

0800ea14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b086      	sub	sp, #24
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d04e      	beq.n	800eac4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ea26:	2308      	movs	r3, #8
 800ea28:	425b      	negs	r3, r3
 800ea2a:	697a      	ldr	r2, [r7, #20]
 800ea2c:	4413      	add	r3, r2
 800ea2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	685a      	ldr	r2, [r3, #4]
 800ea38:	4b24      	ldr	r3, [pc, #144]	@ (800eacc <vPortFree+0xb8>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	4013      	ands	r3, r2
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d10d      	bne.n	800ea5e <vPortFree+0x4a>
	__asm volatile
 800ea42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea46:	b672      	cpsid	i
 800ea48:	f383 8811 	msr	BASEPRI, r3
 800ea4c:	f3bf 8f6f 	isb	sy
 800ea50:	f3bf 8f4f 	dsb	sy
 800ea54:	b662      	cpsie	i
 800ea56:	60fb      	str	r3, [r7, #12]
}
 800ea58:	bf00      	nop
 800ea5a:	bf00      	nop
 800ea5c:	e7fd      	b.n	800ea5a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d00d      	beq.n	800ea82 <vPortFree+0x6e>
	__asm volatile
 800ea66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea6a:	b672      	cpsid	i
 800ea6c:	f383 8811 	msr	BASEPRI, r3
 800ea70:	f3bf 8f6f 	isb	sy
 800ea74:	f3bf 8f4f 	dsb	sy
 800ea78:	b662      	cpsie	i
 800ea7a:	60bb      	str	r3, [r7, #8]
}
 800ea7c:	bf00      	nop
 800ea7e:	bf00      	nop
 800ea80:	e7fd      	b.n	800ea7e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	685a      	ldr	r2, [r3, #4]
 800ea86:	4b11      	ldr	r3, [pc, #68]	@ (800eacc <vPortFree+0xb8>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	4013      	ands	r3, r2
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d019      	beq.n	800eac4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d115      	bne.n	800eac4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	685a      	ldr	r2, [r3, #4]
 800ea9c:	4b0b      	ldr	r3, [pc, #44]	@ (800eacc <vPortFree+0xb8>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	43db      	mvns	r3, r3
 800eaa2:	401a      	ands	r2, r3
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eaa8:	f7fe f9f6 	bl	800ce98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	685a      	ldr	r2, [r3, #4]
 800eab0:	4b07      	ldr	r3, [pc, #28]	@ (800ead0 <vPortFree+0xbc>)
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	4413      	add	r3, r2
 800eab6:	4a06      	ldr	r2, [pc, #24]	@ (800ead0 <vPortFree+0xbc>)
 800eab8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eaba:	6938      	ldr	r0, [r7, #16]
 800eabc:	f000 f86c 	bl	800eb98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800eac0:	f7fe f9f8 	bl	800ceb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800eac4:	bf00      	nop
 800eac6:	3718      	adds	r7, #24
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}
 800eacc:	20024398 	.word	0x20024398
 800ead0:	20024390 	.word	0x20024390

0800ead4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ead4:	b480      	push	{r7}
 800ead6:	b085      	sub	sp, #20
 800ead8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eada:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 800eade:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eae0:	4b27      	ldr	r3, [pc, #156]	@ (800eb80 <prvHeapInit+0xac>)
 800eae2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	f003 0307 	and.w	r3, r3, #7
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d00c      	beq.n	800eb08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	3307      	adds	r3, #7
 800eaf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	f023 0307 	bic.w	r3, r3, #7
 800eafa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800eafc:	68ba      	ldr	r2, [r7, #8]
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	1ad3      	subs	r3, r2, r3
 800eb02:	4a1f      	ldr	r2, [pc, #124]	@ (800eb80 <prvHeapInit+0xac>)
 800eb04:	4413      	add	r3, r2
 800eb06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eb0c:	4a1d      	ldr	r2, [pc, #116]	@ (800eb84 <prvHeapInit+0xb0>)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eb12:	4b1c      	ldr	r3, [pc, #112]	@ (800eb84 <prvHeapInit+0xb0>)
 800eb14:	2200      	movs	r2, #0
 800eb16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	68ba      	ldr	r2, [r7, #8]
 800eb1c:	4413      	add	r3, r2
 800eb1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eb20:	2208      	movs	r2, #8
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	1a9b      	subs	r3, r3, r2
 800eb26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	f023 0307 	bic.w	r3, r3, #7
 800eb2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	4a15      	ldr	r2, [pc, #84]	@ (800eb88 <prvHeapInit+0xb4>)
 800eb34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eb36:	4b14      	ldr	r3, [pc, #80]	@ (800eb88 <prvHeapInit+0xb4>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eb3e:	4b12      	ldr	r3, [pc, #72]	@ (800eb88 <prvHeapInit+0xb4>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	2200      	movs	r2, #0
 800eb44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	68fa      	ldr	r2, [r7, #12]
 800eb4e:	1ad2      	subs	r2, r2, r3
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eb54:	4b0c      	ldr	r3, [pc, #48]	@ (800eb88 <prvHeapInit+0xb4>)
 800eb56:	681a      	ldr	r2, [r3, #0]
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	685b      	ldr	r3, [r3, #4]
 800eb60:	4a0a      	ldr	r2, [pc, #40]	@ (800eb8c <prvHeapInit+0xb8>)
 800eb62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	685b      	ldr	r3, [r3, #4]
 800eb68:	4a09      	ldr	r2, [pc, #36]	@ (800eb90 <prvHeapInit+0xbc>)
 800eb6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eb6c:	4b09      	ldr	r3, [pc, #36]	@ (800eb94 <prvHeapInit+0xc0>)
 800eb6e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800eb72:	601a      	str	r2, [r3, #0]
}
 800eb74:	bf00      	nop
 800eb76:	3714      	adds	r7, #20
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7e:	4770      	bx	lr
 800eb80:	2000b384 	.word	0x2000b384
 800eb84:	20024384 	.word	0x20024384
 800eb88:	2002438c 	.word	0x2002438c
 800eb8c:	20024394 	.word	0x20024394
 800eb90:	20024390 	.word	0x20024390
 800eb94:	20024398 	.word	0x20024398

0800eb98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b085      	sub	sp, #20
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eba0:	4b28      	ldr	r3, [pc, #160]	@ (800ec44 <prvInsertBlockIntoFreeList+0xac>)
 800eba2:	60fb      	str	r3, [r7, #12]
 800eba4:	e002      	b.n	800ebac <prvInsertBlockIntoFreeList+0x14>
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	60fb      	str	r3, [r7, #12]
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	687a      	ldr	r2, [r7, #4]
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	d8f7      	bhi.n	800eba6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	68ba      	ldr	r2, [r7, #8]
 800ebc0:	4413      	add	r3, r2
 800ebc2:	687a      	ldr	r2, [r7, #4]
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d108      	bne.n	800ebda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	685a      	ldr	r2, [r3, #4]
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	441a      	add	r2, r3
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	685b      	ldr	r3, [r3, #4]
 800ebe2:	68ba      	ldr	r2, [r7, #8]
 800ebe4:	441a      	add	r2, r3
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	429a      	cmp	r2, r3
 800ebec:	d118      	bne.n	800ec20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681a      	ldr	r2, [r3, #0]
 800ebf2:	4b15      	ldr	r3, [pc, #84]	@ (800ec48 <prvInsertBlockIntoFreeList+0xb0>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	d00d      	beq.n	800ec16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	685a      	ldr	r2, [r3, #4]
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	441a      	add	r2, r3
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	681a      	ldr	r2, [r3, #0]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	601a      	str	r2, [r3, #0]
 800ec14:	e008      	b.n	800ec28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ec16:	4b0c      	ldr	r3, [pc, #48]	@ (800ec48 <prvInsertBlockIntoFreeList+0xb0>)
 800ec18:	681a      	ldr	r2, [r3, #0]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	601a      	str	r2, [r3, #0]
 800ec1e:	e003      	b.n	800ec28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681a      	ldr	r2, [r3, #0]
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ec28:	68fa      	ldr	r2, [r7, #12]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d002      	beq.n	800ec36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	687a      	ldr	r2, [r7, #4]
 800ec34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ec36:	bf00      	nop
 800ec38:	3714      	adds	r7, #20
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec40:	4770      	bx	lr
 800ec42:	bf00      	nop
 800ec44:	20024384 	.word	0x20024384
 800ec48:	2002438c 	.word	0x2002438c

0800ec4c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ec56:	f007 facd 	bl	80161f4 <sys_timeouts_sleeptime>
 800ec5a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec62:	d10b      	bne.n	800ec7c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800ec64:	4813      	ldr	r0, [pc, #76]	@ (800ecb4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ec66:	f00a fb62 	bl	801932e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	6839      	ldr	r1, [r7, #0]
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f00a faea 	bl	8019248 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ec74:	480f      	ldr	r0, [pc, #60]	@ (800ecb4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ec76:	f00a fb4b 	bl	8019310 <sys_mutex_lock>
    return;
 800ec7a:	e018      	b.n	800ecae <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d102      	bne.n	800ec88 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ec82:	f007 fa7d 	bl	8016180 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ec86:	e7e6      	b.n	800ec56 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800ec88:	480a      	ldr	r0, [pc, #40]	@ (800ecb4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ec8a:	f00a fb50 	bl	801932e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ec8e:	68fa      	ldr	r2, [r7, #12]
 800ec90:	6839      	ldr	r1, [r7, #0]
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f00a fad8 	bl	8019248 <sys_arch_mbox_fetch>
 800ec98:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ec9a:	4806      	ldr	r0, [pc, #24]	@ (800ecb4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ec9c:	f00a fb38 	bl	8019310 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eca6:	d102      	bne.n	800ecae <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800eca8:	f007 fa6a 	bl	8016180 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ecac:	e7d3      	b.n	800ec56 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ecae:	3710      	adds	r7, #16
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}
 800ecb4:	200243a8 	.word	0x200243a8

0800ecb8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b084      	sub	sp, #16
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800ecc0:	4810      	ldr	r0, [pc, #64]	@ (800ed04 <tcpip_thread+0x4c>)
 800ecc2:	f00a fb25 	bl	8019310 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800ecc6:	4b10      	ldr	r3, [pc, #64]	@ (800ed08 <tcpip_thread+0x50>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d005      	beq.n	800ecda <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ecce:	4b0e      	ldr	r3, [pc, #56]	@ (800ed08 <tcpip_thread+0x50>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	4a0e      	ldr	r2, [pc, #56]	@ (800ed0c <tcpip_thread+0x54>)
 800ecd4:	6812      	ldr	r2, [r2, #0]
 800ecd6:	4610      	mov	r0, r2
 800ecd8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ecda:	f107 030c 	add.w	r3, r7, #12
 800ecde:	4619      	mov	r1, r3
 800ece0:	480b      	ldr	r0, [pc, #44]	@ (800ed10 <tcpip_thread+0x58>)
 800ece2:	f7ff ffb3 	bl	800ec4c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d106      	bne.n	800ecfa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ecec:	4b09      	ldr	r3, [pc, #36]	@ (800ed14 <tcpip_thread+0x5c>)
 800ecee:	2291      	movs	r2, #145	@ 0x91
 800ecf0:	4909      	ldr	r1, [pc, #36]	@ (800ed18 <tcpip_thread+0x60>)
 800ecf2:	480a      	ldr	r0, [pc, #40]	@ (800ed1c <tcpip_thread+0x64>)
 800ecf4:	f00b f988 	bl	801a008 <iprintf>
      continue;
 800ecf8:	e003      	b.n	800ed02 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f000 f80f 	bl	800ed20 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ed02:	e7ea      	b.n	800ecda <tcpip_thread+0x22>
 800ed04:	200243a8 	.word	0x200243a8
 800ed08:	2002439c 	.word	0x2002439c
 800ed0c:	200243a0 	.word	0x200243a0
 800ed10:	200243a4 	.word	0x200243a4
 800ed14:	0801b288 	.word	0x0801b288
 800ed18:	0801b2b8 	.word	0x0801b2b8
 800ed1c:	0801b2d8 	.word	0x0801b2d8

0800ed20 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b082      	sub	sp, #8
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	781b      	ldrb	r3, [r3, #0]
 800ed2c:	2b02      	cmp	r3, #2
 800ed2e:	d026      	beq.n	800ed7e <tcpip_thread_handle_msg+0x5e>
 800ed30:	2b02      	cmp	r3, #2
 800ed32:	dc2b      	bgt.n	800ed8c <tcpip_thread_handle_msg+0x6c>
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d002      	beq.n	800ed3e <tcpip_thread_handle_msg+0x1e>
 800ed38:	2b01      	cmp	r3, #1
 800ed3a:	d015      	beq.n	800ed68 <tcpip_thread_handle_msg+0x48>
 800ed3c:	e026      	b.n	800ed8c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	68db      	ldr	r3, [r3, #12]
 800ed42:	687a      	ldr	r2, [r7, #4]
 800ed44:	6850      	ldr	r0, [r2, #4]
 800ed46:	687a      	ldr	r2, [r7, #4]
 800ed48:	6892      	ldr	r2, [r2, #8]
 800ed4a:	4611      	mov	r1, r2
 800ed4c:	4798      	blx	r3
 800ed4e:	4603      	mov	r3, r0
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d004      	beq.n	800ed5e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	685b      	ldr	r3, [r3, #4]
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f001 fd07 	bl	801076c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ed5e:	6879      	ldr	r1, [r7, #4]
 800ed60:	2009      	movs	r0, #9
 800ed62:	f000 fe5f 	bl	800fa24 <memp_free>
      break;
 800ed66:	e018      	b.n	800ed9a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	685b      	ldr	r3, [r3, #4]
 800ed6c:	687a      	ldr	r2, [r7, #4]
 800ed6e:	6892      	ldr	r2, [r2, #8]
 800ed70:	4610      	mov	r0, r2
 800ed72:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ed74:	6879      	ldr	r1, [r7, #4]
 800ed76:	2008      	movs	r0, #8
 800ed78:	f000 fe54 	bl	800fa24 <memp_free>
      break;
 800ed7c:	e00d      	b.n	800ed9a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	685b      	ldr	r3, [r3, #4]
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	6892      	ldr	r2, [r2, #8]
 800ed86:	4610      	mov	r0, r2
 800ed88:	4798      	blx	r3
      break;
 800ed8a:	e006      	b.n	800ed9a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ed8c:	4b05      	ldr	r3, [pc, #20]	@ (800eda4 <tcpip_thread_handle_msg+0x84>)
 800ed8e:	22cf      	movs	r2, #207	@ 0xcf
 800ed90:	4905      	ldr	r1, [pc, #20]	@ (800eda8 <tcpip_thread_handle_msg+0x88>)
 800ed92:	4806      	ldr	r0, [pc, #24]	@ (800edac <tcpip_thread_handle_msg+0x8c>)
 800ed94:	f00b f938 	bl	801a008 <iprintf>
      break;
 800ed98:	bf00      	nop
  }
}
 800ed9a:	bf00      	nop
 800ed9c:	3708      	adds	r7, #8
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop
 800eda4:	0801b288 	.word	0x0801b288
 800eda8:	0801b2b8 	.word	0x0801b2b8
 800edac:	0801b2d8 	.word	0x0801b2d8

0800edb0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b086      	sub	sp, #24
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	60f8      	str	r0, [r7, #12]
 800edb8:	60b9      	str	r1, [r7, #8]
 800edba:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800edbc:	481a      	ldr	r0, [pc, #104]	@ (800ee28 <tcpip_inpkt+0x78>)
 800edbe:	f00a fa74 	bl	80192aa <sys_mbox_valid>
 800edc2:	4603      	mov	r3, r0
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d105      	bne.n	800edd4 <tcpip_inpkt+0x24>
 800edc8:	4b18      	ldr	r3, [pc, #96]	@ (800ee2c <tcpip_inpkt+0x7c>)
 800edca:	22fc      	movs	r2, #252	@ 0xfc
 800edcc:	4918      	ldr	r1, [pc, #96]	@ (800ee30 <tcpip_inpkt+0x80>)
 800edce:	4819      	ldr	r0, [pc, #100]	@ (800ee34 <tcpip_inpkt+0x84>)
 800edd0:	f00b f91a 	bl	801a008 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800edd4:	2009      	movs	r0, #9
 800edd6:	f000 fdaf 	bl	800f938 <memp_malloc>
 800edda:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d102      	bne.n	800ede8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ede2:	f04f 33ff 	mov.w	r3, #4294967295
 800ede6:	e01a      	b.n	800ee1e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ede8:	697b      	ldr	r3, [r7, #20]
 800edea:	2200      	movs	r2, #0
 800edec:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800edee:	697b      	ldr	r3, [r7, #20]
 800edf0:	68fa      	ldr	r2, [r7, #12]
 800edf2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	68ba      	ldr	r2, [r7, #8]
 800edf8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	687a      	ldr	r2, [r7, #4]
 800edfe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ee00:	6979      	ldr	r1, [r7, #20]
 800ee02:	4809      	ldr	r0, [pc, #36]	@ (800ee28 <tcpip_inpkt+0x78>)
 800ee04:	f00a fa06 	bl	8019214 <sys_mbox_trypost>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d006      	beq.n	800ee1c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ee0e:	6979      	ldr	r1, [r7, #20]
 800ee10:	2009      	movs	r0, #9
 800ee12:	f000 fe07 	bl	800fa24 <memp_free>
    return ERR_MEM;
 800ee16:	f04f 33ff 	mov.w	r3, #4294967295
 800ee1a:	e000      	b.n	800ee1e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ee1c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3718      	adds	r7, #24
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}
 800ee26:	bf00      	nop
 800ee28:	200243a4 	.word	0x200243a4
 800ee2c:	0801b288 	.word	0x0801b288
 800ee30:	0801b300 	.word	0x0801b300
 800ee34:	0801b2d8 	.word	0x0801b2d8

0800ee38 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b082      	sub	sp, #8
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ee48:	f003 0318 	and.w	r3, r3, #24
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d006      	beq.n	800ee5e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ee50:	4a08      	ldr	r2, [pc, #32]	@ (800ee74 <tcpip_input+0x3c>)
 800ee52:	6839      	ldr	r1, [r7, #0]
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f7ff ffab 	bl	800edb0 <tcpip_inpkt>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	e005      	b.n	800ee6a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ee5e:	4a06      	ldr	r2, [pc, #24]	@ (800ee78 <tcpip_input+0x40>)
 800ee60:	6839      	ldr	r1, [r7, #0]
 800ee62:	6878      	ldr	r0, [r7, #4]
 800ee64:	f7ff ffa4 	bl	800edb0 <tcpip_inpkt>
 800ee68:	4603      	mov	r3, r0
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3708      	adds	r7, #8
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	bf00      	nop
 800ee74:	08019035 	.word	0x08019035
 800ee78:	08017e1d 	.word	0x08017e1d

0800ee7c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b084      	sub	sp, #16
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
 800ee84:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ee86:	4819      	ldr	r0, [pc, #100]	@ (800eeec <tcpip_try_callback+0x70>)
 800ee88:	f00a fa0f 	bl	80192aa <sys_mbox_valid>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d106      	bne.n	800eea0 <tcpip_try_callback+0x24>
 800ee92:	4b17      	ldr	r3, [pc, #92]	@ (800eef0 <tcpip_try_callback+0x74>)
 800ee94:	f240 125d 	movw	r2, #349	@ 0x15d
 800ee98:	4916      	ldr	r1, [pc, #88]	@ (800eef4 <tcpip_try_callback+0x78>)
 800ee9a:	4817      	ldr	r0, [pc, #92]	@ (800eef8 <tcpip_try_callback+0x7c>)
 800ee9c:	f00b f8b4 	bl	801a008 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800eea0:	2008      	movs	r0, #8
 800eea2:	f000 fd49 	bl	800f938 <memp_malloc>
 800eea6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d102      	bne.n	800eeb4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800eeae:	f04f 33ff 	mov.w	r3, #4294967295
 800eeb2:	e017      	b.n	800eee4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	687a      	ldr	r2, [r7, #4]
 800eebe:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	683a      	ldr	r2, [r7, #0]
 800eec4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800eec6:	68f9      	ldr	r1, [r7, #12]
 800eec8:	4808      	ldr	r0, [pc, #32]	@ (800eeec <tcpip_try_callback+0x70>)
 800eeca:	f00a f9a3 	bl	8019214 <sys_mbox_trypost>
 800eece:	4603      	mov	r3, r0
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d006      	beq.n	800eee2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800eed4:	68f9      	ldr	r1, [r7, #12]
 800eed6:	2008      	movs	r0, #8
 800eed8:	f000 fda4 	bl	800fa24 <memp_free>
    return ERR_MEM;
 800eedc:	f04f 33ff 	mov.w	r3, #4294967295
 800eee0:	e000      	b.n	800eee4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800eee2:	2300      	movs	r3, #0
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	3710      	adds	r7, #16
 800eee8:	46bd      	mov	sp, r7
 800eeea:	bd80      	pop	{r7, pc}
 800eeec:	200243a4 	.word	0x200243a4
 800eef0:	0801b288 	.word	0x0801b288
 800eef4:	0801b300 	.word	0x0801b300
 800eef8:	0801b2d8 	.word	0x0801b2d8

0800eefc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b084      	sub	sp, #16
 800ef00:	af02      	add	r7, sp, #8
 800ef02:	6078      	str	r0, [r7, #4]
 800ef04:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ef06:	f000 f872 	bl	800efee <lwip_init>

  tcpip_init_done = initfunc;
 800ef0a:	4a17      	ldr	r2, [pc, #92]	@ (800ef68 <tcpip_init+0x6c>)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ef10:	4a16      	ldr	r2, [pc, #88]	@ (800ef6c <tcpip_init+0x70>)
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ef16:	2106      	movs	r1, #6
 800ef18:	4815      	ldr	r0, [pc, #84]	@ (800ef70 <tcpip_init+0x74>)
 800ef1a:	f00a f961 	bl	80191e0 <sys_mbox_new>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d006      	beq.n	800ef32 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ef24:	4b13      	ldr	r3, [pc, #76]	@ (800ef74 <tcpip_init+0x78>)
 800ef26:	f240 2261 	movw	r2, #609	@ 0x261
 800ef2a:	4913      	ldr	r1, [pc, #76]	@ (800ef78 <tcpip_init+0x7c>)
 800ef2c:	4813      	ldr	r0, [pc, #76]	@ (800ef7c <tcpip_init+0x80>)
 800ef2e:	f00b f86b 	bl	801a008 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ef32:	4813      	ldr	r0, [pc, #76]	@ (800ef80 <tcpip_init+0x84>)
 800ef34:	f00a f9d6 	bl	80192e4 <sys_mutex_new>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d006      	beq.n	800ef4c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ef3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ef74 <tcpip_init+0x78>)
 800ef40:	f240 2265 	movw	r2, #613	@ 0x265
 800ef44:	490f      	ldr	r1, [pc, #60]	@ (800ef84 <tcpip_init+0x88>)
 800ef46:	480d      	ldr	r0, [pc, #52]	@ (800ef7c <tcpip_init+0x80>)
 800ef48:	f00b f85e 	bl	801a008 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ef4c:	2318      	movs	r3, #24
 800ef4e:	9300      	str	r3, [sp, #0]
 800ef50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ef54:	2200      	movs	r2, #0
 800ef56:	490c      	ldr	r1, [pc, #48]	@ (800ef88 <tcpip_init+0x8c>)
 800ef58:	480c      	ldr	r0, [pc, #48]	@ (800ef8c <tcpip_init+0x90>)
 800ef5a:	f00a f9f5 	bl	8019348 <sys_thread_new>
}
 800ef5e:	bf00      	nop
 800ef60:	3708      	adds	r7, #8
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
 800ef66:	bf00      	nop
 800ef68:	2002439c 	.word	0x2002439c
 800ef6c:	200243a0 	.word	0x200243a0
 800ef70:	200243a4 	.word	0x200243a4
 800ef74:	0801b288 	.word	0x0801b288
 800ef78:	0801b310 	.word	0x0801b310
 800ef7c:	0801b2d8 	.word	0x0801b2d8
 800ef80:	200243a8 	.word	0x200243a8
 800ef84:	0801b334 	.word	0x0801b334
 800ef88:	0800ecb9 	.word	0x0800ecb9
 800ef8c:	0801b358 	.word	0x0801b358

0800ef90 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ef90:	b480      	push	{r7}
 800ef92:	b083      	sub	sp, #12
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	4603      	mov	r3, r0
 800ef98:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ef9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ef9e:	021b      	lsls	r3, r3, #8
 800efa0:	b21a      	sxth	r2, r3
 800efa2:	88fb      	ldrh	r3, [r7, #6]
 800efa4:	0a1b      	lsrs	r3, r3, #8
 800efa6:	b29b      	uxth	r3, r3
 800efa8:	b21b      	sxth	r3, r3
 800efaa:	4313      	orrs	r3, r2
 800efac:	b21b      	sxth	r3, r3
 800efae:	b29b      	uxth	r3, r3
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	370c      	adds	r7, #12
 800efb4:	46bd      	mov	sp, r7
 800efb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efba:	4770      	bx	lr

0800efbc <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800efbc:	b480      	push	{r7}
 800efbe:	b083      	sub	sp, #12
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	061a      	lsls	r2, r3, #24
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	021b      	lsls	r3, r3, #8
 800efcc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800efd0:	431a      	orrs	r2, r3
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	0a1b      	lsrs	r3, r3, #8
 800efd6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800efda:	431a      	orrs	r2, r3
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	0e1b      	lsrs	r3, r3, #24
 800efe0:	4313      	orrs	r3, r2
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	370c      	adds	r7, #12
 800efe6:	46bd      	mov	sp, r7
 800efe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efec:	4770      	bx	lr

0800efee <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800efee:	b580      	push	{r7, lr}
 800eff0:	b082      	sub	sp, #8
 800eff2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800eff4:	2300      	movs	r3, #0
 800eff6:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800eff8:	f00a f968 	bl	80192cc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800effc:	f000 f8d4 	bl	800f1a8 <mem_init>
  memp_init();
 800f000:	f000 fc2c 	bl	800f85c <memp_init>
  pbuf_init();
  netif_init();
 800f004:	f000 fd38 	bl	800fa78 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f008:	f007 f92c 	bl	8016264 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f00c:	f001 fe58 	bl	8010cc0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800f010:	f007 f86e 	bl	80160f0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f014:	bf00      	nop
 800f016:	3708      	adds	r7, #8
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}

0800f01c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b083      	sub	sp, #12
 800f020:	af00      	add	r7, sp, #0
 800f022:	4603      	mov	r3, r0
 800f024:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800f026:	4b05      	ldr	r3, [pc, #20]	@ (800f03c <ptr_to_mem+0x20>)
 800f028:	681a      	ldr	r2, [r3, #0]
 800f02a:	88fb      	ldrh	r3, [r7, #6]
 800f02c:	4413      	add	r3, r2
}
 800f02e:	4618      	mov	r0, r3
 800f030:	370c      	adds	r7, #12
 800f032:	46bd      	mov	sp, r7
 800f034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f038:	4770      	bx	lr
 800f03a:	bf00      	nop
 800f03c:	200243c4 	.word	0x200243c4

0800f040 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f040:	b480      	push	{r7}
 800f042:	b083      	sub	sp, #12
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f048:	4b05      	ldr	r3, [pc, #20]	@ (800f060 <mem_to_ptr+0x20>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	687a      	ldr	r2, [r7, #4]
 800f04e:	1ad3      	subs	r3, r2, r3
 800f050:	b29b      	uxth	r3, r3
}
 800f052:	4618      	mov	r0, r3
 800f054:	370c      	adds	r7, #12
 800f056:	46bd      	mov	sp, r7
 800f058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05c:	4770      	bx	lr
 800f05e:	bf00      	nop
 800f060:	200243c4 	.word	0x200243c4

0800f064 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f064:	b590      	push	{r4, r7, lr}
 800f066:	b085      	sub	sp, #20
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f06c:	4b45      	ldr	r3, [pc, #276]	@ (800f184 <plug_holes+0x120>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	687a      	ldr	r2, [r7, #4]
 800f072:	429a      	cmp	r2, r3
 800f074:	d206      	bcs.n	800f084 <plug_holes+0x20>
 800f076:	4b44      	ldr	r3, [pc, #272]	@ (800f188 <plug_holes+0x124>)
 800f078:	f240 12df 	movw	r2, #479	@ 0x1df
 800f07c:	4943      	ldr	r1, [pc, #268]	@ (800f18c <plug_holes+0x128>)
 800f07e:	4844      	ldr	r0, [pc, #272]	@ (800f190 <plug_holes+0x12c>)
 800f080:	f00a ffc2 	bl	801a008 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f084:	4b43      	ldr	r3, [pc, #268]	@ (800f194 <plug_holes+0x130>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	687a      	ldr	r2, [r7, #4]
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d306      	bcc.n	800f09c <plug_holes+0x38>
 800f08e:	4b3e      	ldr	r3, [pc, #248]	@ (800f188 <plug_holes+0x124>)
 800f090:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800f094:	4940      	ldr	r1, [pc, #256]	@ (800f198 <plug_holes+0x134>)
 800f096:	483e      	ldr	r0, [pc, #248]	@ (800f190 <plug_holes+0x12c>)
 800f098:	f00a ffb6 	bl	801a008 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	791b      	ldrb	r3, [r3, #4]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d006      	beq.n	800f0b2 <plug_holes+0x4e>
 800f0a4:	4b38      	ldr	r3, [pc, #224]	@ (800f188 <plug_holes+0x124>)
 800f0a6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800f0aa:	493c      	ldr	r1, [pc, #240]	@ (800f19c <plug_holes+0x138>)
 800f0ac:	4838      	ldr	r0, [pc, #224]	@ (800f190 <plug_holes+0x12c>)
 800f0ae:	f00a ffab 	bl	801a008 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	881b      	ldrh	r3, [r3, #0]
 800f0b6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800f0ba:	d906      	bls.n	800f0ca <plug_holes+0x66>
 800f0bc:	4b32      	ldr	r3, [pc, #200]	@ (800f188 <plug_holes+0x124>)
 800f0be:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800f0c2:	4937      	ldr	r1, [pc, #220]	@ (800f1a0 <plug_holes+0x13c>)
 800f0c4:	4832      	ldr	r0, [pc, #200]	@ (800f190 <plug_holes+0x12c>)
 800f0c6:	f00a ff9f 	bl	801a008 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	881b      	ldrh	r3, [r3, #0]
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f7ff ffa4 	bl	800f01c <ptr_to_mem>
 800f0d4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f0d6:	687a      	ldr	r2, [r7, #4]
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d024      	beq.n	800f128 <plug_holes+0xc4>
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	791b      	ldrb	r3, [r3, #4]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d120      	bne.n	800f128 <plug_holes+0xc4>
 800f0e6:	4b2b      	ldr	r3, [pc, #172]	@ (800f194 <plug_holes+0x130>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	68fa      	ldr	r2, [r7, #12]
 800f0ec:	429a      	cmp	r2, r3
 800f0ee:	d01b      	beq.n	800f128 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f0f0:	4b2c      	ldr	r3, [pc, #176]	@ (800f1a4 <plug_holes+0x140>)
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	68fa      	ldr	r2, [r7, #12]
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d102      	bne.n	800f100 <plug_holes+0x9c>
      lfree = mem;
 800f0fa:	4a2a      	ldr	r2, [pc, #168]	@ (800f1a4 <plug_holes+0x140>)
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	881a      	ldrh	r2, [r3, #0]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	881b      	ldrh	r3, [r3, #0]
 800f10c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800f110:	d00a      	beq.n	800f128 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	881b      	ldrh	r3, [r3, #0]
 800f116:	4618      	mov	r0, r3
 800f118:	f7ff ff80 	bl	800f01c <ptr_to_mem>
 800f11c:	4604      	mov	r4, r0
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f7ff ff8e 	bl	800f040 <mem_to_ptr>
 800f124:	4603      	mov	r3, r0
 800f126:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	885b      	ldrh	r3, [r3, #2]
 800f12c:	4618      	mov	r0, r3
 800f12e:	f7ff ff75 	bl	800f01c <ptr_to_mem>
 800f132:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f134:	68ba      	ldr	r2, [r7, #8]
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	429a      	cmp	r2, r3
 800f13a:	d01f      	beq.n	800f17c <plug_holes+0x118>
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	791b      	ldrb	r3, [r3, #4]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d11b      	bne.n	800f17c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f144:	4b17      	ldr	r3, [pc, #92]	@ (800f1a4 <plug_holes+0x140>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	687a      	ldr	r2, [r7, #4]
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d102      	bne.n	800f154 <plug_holes+0xf0>
      lfree = pmem;
 800f14e:	4a15      	ldr	r2, [pc, #84]	@ (800f1a4 <plug_holes+0x140>)
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	881a      	ldrh	r2, [r3, #0]
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	881b      	ldrh	r3, [r3, #0]
 800f160:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800f164:	d00a      	beq.n	800f17c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	881b      	ldrh	r3, [r3, #0]
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7ff ff56 	bl	800f01c <ptr_to_mem>
 800f170:	4604      	mov	r4, r0
 800f172:	68b8      	ldr	r0, [r7, #8]
 800f174:	f7ff ff64 	bl	800f040 <mem_to_ptr>
 800f178:	4603      	mov	r3, r0
 800f17a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800f17c:	bf00      	nop
 800f17e:	3714      	adds	r7, #20
 800f180:	46bd      	mov	sp, r7
 800f182:	bd90      	pop	{r4, r7, pc}
 800f184:	200243c4 	.word	0x200243c4
 800f188:	0801b368 	.word	0x0801b368
 800f18c:	0801b398 	.word	0x0801b398
 800f190:	0801b3b0 	.word	0x0801b3b0
 800f194:	200243c8 	.word	0x200243c8
 800f198:	0801b3d8 	.word	0x0801b3d8
 800f19c:	0801b3f4 	.word	0x0801b3f4
 800f1a0:	0801b410 	.word	0x0801b410
 800f1a4:	200243d0 	.word	0x200243d0

0800f1a8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b082      	sub	sp, #8
 800f1ac:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f1ae:	4b1d      	ldr	r3, [pc, #116]	@ (800f224 <mem_init+0x7c>)
 800f1b0:	4a1d      	ldr	r2, [pc, #116]	@ (800f228 <mem_init+0x80>)
 800f1b2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f1b4:	4b1b      	ldr	r3, [pc, #108]	@ (800f224 <mem_init+0x7c>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800f1c0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f1ce:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800f1d2:	f7ff ff23 	bl	800f01c <ptr_to_mem>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	4a14      	ldr	r2, [pc, #80]	@ (800f22c <mem_init+0x84>)
 800f1da:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f1dc:	4b13      	ldr	r3, [pc, #76]	@ (800f22c <mem_init+0x84>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	2201      	movs	r2, #1
 800f1e2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f1e4:	4b11      	ldr	r3, [pc, #68]	@ (800f22c <mem_init+0x84>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800f1ec:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f1ee:	4b0f      	ldr	r3, [pc, #60]	@ (800f22c <mem_init+0x84>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800f1f6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f1f8:	4b0a      	ldr	r3, [pc, #40]	@ (800f224 <mem_init+0x7c>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	4a0c      	ldr	r2, [pc, #48]	@ (800f230 <mem_init+0x88>)
 800f1fe:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f200:	480c      	ldr	r0, [pc, #48]	@ (800f234 <mem_init+0x8c>)
 800f202:	f00a f86f 	bl	80192e4 <sys_mutex_new>
 800f206:	4603      	mov	r3, r0
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d006      	beq.n	800f21a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f20c:	4b0a      	ldr	r3, [pc, #40]	@ (800f238 <mem_init+0x90>)
 800f20e:	f240 221f 	movw	r2, #543	@ 0x21f
 800f212:	490a      	ldr	r1, [pc, #40]	@ (800f23c <mem_init+0x94>)
 800f214:	480a      	ldr	r0, [pc, #40]	@ (800f240 <mem_init+0x98>)
 800f216:	f00a fef7 	bl	801a008 <iprintf>
  }
}
 800f21a:	bf00      	nop
 800f21c:	3708      	adds	r7, #8
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	200243c4 	.word	0x200243c4
 800f228:	20048000 	.word	0x20048000
 800f22c:	200243c8 	.word	0x200243c8
 800f230:	200243d0 	.word	0x200243d0
 800f234:	200243cc 	.word	0x200243cc
 800f238:	0801b368 	.word	0x0801b368
 800f23c:	0801b43c 	.word	0x0801b43c
 800f240:	0801b3b0 	.word	0x0801b3b0

0800f244 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b086      	sub	sp, #24
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f7ff fef7 	bl	800f040 <mem_to_ptr>
 800f252:	4603      	mov	r3, r0
 800f254:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	881b      	ldrh	r3, [r3, #0]
 800f25a:	4618      	mov	r0, r3
 800f25c:	f7ff fede 	bl	800f01c <ptr_to_mem>
 800f260:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	885b      	ldrh	r3, [r3, #2]
 800f266:	4618      	mov	r0, r3
 800f268:	f7ff fed8 	bl	800f01c <ptr_to_mem>
 800f26c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	881b      	ldrh	r3, [r3, #0]
 800f272:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800f276:	d818      	bhi.n	800f2aa <mem_link_valid+0x66>
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	885b      	ldrh	r3, [r3, #2]
 800f27c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800f280:	d813      	bhi.n	800f2aa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f286:	8afa      	ldrh	r2, [r7, #22]
 800f288:	429a      	cmp	r2, r3
 800f28a:	d004      	beq.n	800f296 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	881b      	ldrh	r3, [r3, #0]
 800f290:	8afa      	ldrh	r2, [r7, #22]
 800f292:	429a      	cmp	r2, r3
 800f294:	d109      	bne.n	800f2aa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f296:	4b08      	ldr	r3, [pc, #32]	@ (800f2b8 <mem_link_valid+0x74>)
 800f298:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f29a:	693a      	ldr	r2, [r7, #16]
 800f29c:	429a      	cmp	r2, r3
 800f29e:	d006      	beq.n	800f2ae <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f2a0:	693b      	ldr	r3, [r7, #16]
 800f2a2:	885b      	ldrh	r3, [r3, #2]
 800f2a4:	8afa      	ldrh	r2, [r7, #22]
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d001      	beq.n	800f2ae <mem_link_valid+0x6a>
    return 0;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	e000      	b.n	800f2b0 <mem_link_valid+0x6c>
  }
  return 1;
 800f2ae:	2301      	movs	r3, #1
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3718      	adds	r7, #24
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}
 800f2b8:	200243c8 	.word	0x200243c8

0800f2bc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b088      	sub	sp, #32
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d070      	beq.n	800f3ac <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f003 0303 	and.w	r3, r3, #3
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d00d      	beq.n	800f2f0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f2d4:	4b37      	ldr	r3, [pc, #220]	@ (800f3b4 <mem_free+0xf8>)
 800f2d6:	f240 2273 	movw	r2, #627	@ 0x273
 800f2da:	4937      	ldr	r1, [pc, #220]	@ (800f3b8 <mem_free+0xfc>)
 800f2dc:	4837      	ldr	r0, [pc, #220]	@ (800f3bc <mem_free+0x100>)
 800f2de:	f00a fe93 	bl	801a008 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f2e2:	f00a f851 	bl	8019388 <sys_arch_protect>
 800f2e6:	60f8      	str	r0, [r7, #12]
 800f2e8:	68f8      	ldr	r0, [r7, #12]
 800f2ea:	f00a f85b 	bl	80193a4 <sys_arch_unprotect>
    return;
 800f2ee:	e05e      	b.n	800f3ae <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	3b08      	subs	r3, #8
 800f2f4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f2f6:	4b32      	ldr	r3, [pc, #200]	@ (800f3c0 <mem_free+0x104>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	69fa      	ldr	r2, [r7, #28]
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d306      	bcc.n	800f30e <mem_free+0x52>
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f103 020c 	add.w	r2, r3, #12
 800f306:	4b2f      	ldr	r3, [pc, #188]	@ (800f3c4 <mem_free+0x108>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	429a      	cmp	r2, r3
 800f30c:	d90d      	bls.n	800f32a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f30e:	4b29      	ldr	r3, [pc, #164]	@ (800f3b4 <mem_free+0xf8>)
 800f310:	f240 227f 	movw	r2, #639	@ 0x27f
 800f314:	492c      	ldr	r1, [pc, #176]	@ (800f3c8 <mem_free+0x10c>)
 800f316:	4829      	ldr	r0, [pc, #164]	@ (800f3bc <mem_free+0x100>)
 800f318:	f00a fe76 	bl	801a008 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f31c:	f00a f834 	bl	8019388 <sys_arch_protect>
 800f320:	6138      	str	r0, [r7, #16]
 800f322:	6938      	ldr	r0, [r7, #16]
 800f324:	f00a f83e 	bl	80193a4 <sys_arch_unprotect>
    return;
 800f328:	e041      	b.n	800f3ae <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f32a:	4828      	ldr	r0, [pc, #160]	@ (800f3cc <mem_free+0x110>)
 800f32c:	f009 fff0 	bl	8019310 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800f330:	69fb      	ldr	r3, [r7, #28]
 800f332:	791b      	ldrb	r3, [r3, #4]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d110      	bne.n	800f35a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f338:	4b1e      	ldr	r3, [pc, #120]	@ (800f3b4 <mem_free+0xf8>)
 800f33a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800f33e:	4924      	ldr	r1, [pc, #144]	@ (800f3d0 <mem_free+0x114>)
 800f340:	481e      	ldr	r0, [pc, #120]	@ (800f3bc <mem_free+0x100>)
 800f342:	f00a fe61 	bl	801a008 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f346:	4821      	ldr	r0, [pc, #132]	@ (800f3cc <mem_free+0x110>)
 800f348:	f009 fff1 	bl	801932e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f34c:	f00a f81c 	bl	8019388 <sys_arch_protect>
 800f350:	6178      	str	r0, [r7, #20]
 800f352:	6978      	ldr	r0, [r7, #20]
 800f354:	f00a f826 	bl	80193a4 <sys_arch_unprotect>
    return;
 800f358:	e029      	b.n	800f3ae <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800f35a:	69f8      	ldr	r0, [r7, #28]
 800f35c:	f7ff ff72 	bl	800f244 <mem_link_valid>
 800f360:	4603      	mov	r3, r0
 800f362:	2b00      	cmp	r3, #0
 800f364:	d110      	bne.n	800f388 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f366:	4b13      	ldr	r3, [pc, #76]	@ (800f3b4 <mem_free+0xf8>)
 800f368:	f240 2295 	movw	r2, #661	@ 0x295
 800f36c:	4919      	ldr	r1, [pc, #100]	@ (800f3d4 <mem_free+0x118>)
 800f36e:	4813      	ldr	r0, [pc, #76]	@ (800f3bc <mem_free+0x100>)
 800f370:	f00a fe4a 	bl	801a008 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f374:	4815      	ldr	r0, [pc, #84]	@ (800f3cc <mem_free+0x110>)
 800f376:	f009 ffda 	bl	801932e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f37a:	f00a f805 	bl	8019388 <sys_arch_protect>
 800f37e:	61b8      	str	r0, [r7, #24]
 800f380:	69b8      	ldr	r0, [r7, #24]
 800f382:	f00a f80f 	bl	80193a4 <sys_arch_unprotect>
    return;
 800f386:	e012      	b.n	800f3ae <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f388:	69fb      	ldr	r3, [r7, #28]
 800f38a:	2200      	movs	r2, #0
 800f38c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f38e:	4b12      	ldr	r3, [pc, #72]	@ (800f3d8 <mem_free+0x11c>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	69fa      	ldr	r2, [r7, #28]
 800f394:	429a      	cmp	r2, r3
 800f396:	d202      	bcs.n	800f39e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f398:	4a0f      	ldr	r2, [pc, #60]	@ (800f3d8 <mem_free+0x11c>)
 800f39a:	69fb      	ldr	r3, [r7, #28]
 800f39c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f39e:	69f8      	ldr	r0, [r7, #28]
 800f3a0:	f7ff fe60 	bl	800f064 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f3a4:	4809      	ldr	r0, [pc, #36]	@ (800f3cc <mem_free+0x110>)
 800f3a6:	f009 ffc2 	bl	801932e <sys_mutex_unlock>
 800f3aa:	e000      	b.n	800f3ae <mem_free+0xf2>
    return;
 800f3ac:	bf00      	nop
}
 800f3ae:	3720      	adds	r7, #32
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}
 800f3b4:	0801b368 	.word	0x0801b368
 800f3b8:	0801b458 	.word	0x0801b458
 800f3bc:	0801b3b0 	.word	0x0801b3b0
 800f3c0:	200243c4 	.word	0x200243c4
 800f3c4:	200243c8 	.word	0x200243c8
 800f3c8:	0801b47c 	.word	0x0801b47c
 800f3cc:	200243cc 	.word	0x200243cc
 800f3d0:	0801b498 	.word	0x0801b498
 800f3d4:	0801b4c0 	.word	0x0801b4c0
 800f3d8:	200243d0 	.word	0x200243d0

0800f3dc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b088      	sub	sp, #32
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
 800f3e4:	460b      	mov	r3, r1
 800f3e6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f3e8:	887b      	ldrh	r3, [r7, #2]
 800f3ea:	3303      	adds	r3, #3
 800f3ec:	b29b      	uxth	r3, r3
 800f3ee:	f023 0303 	bic.w	r3, r3, #3
 800f3f2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f3f4:	8bfb      	ldrh	r3, [r7, #30]
 800f3f6:	2b0b      	cmp	r3, #11
 800f3f8:	d801      	bhi.n	800f3fe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f3fa:	230c      	movs	r3, #12
 800f3fc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f3fe:	8bfb      	ldrh	r3, [r7, #30]
 800f400:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800f404:	d803      	bhi.n	800f40e <mem_trim+0x32>
 800f406:	8bfa      	ldrh	r2, [r7, #30]
 800f408:	887b      	ldrh	r3, [r7, #2]
 800f40a:	429a      	cmp	r2, r3
 800f40c:	d201      	bcs.n	800f412 <mem_trim+0x36>
    return NULL;
 800f40e:	2300      	movs	r3, #0
 800f410:	e0d8      	b.n	800f5c4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f412:	4b6e      	ldr	r3, [pc, #440]	@ (800f5cc <mem_trim+0x1f0>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	687a      	ldr	r2, [r7, #4]
 800f418:	429a      	cmp	r2, r3
 800f41a:	d304      	bcc.n	800f426 <mem_trim+0x4a>
 800f41c:	4b6c      	ldr	r3, [pc, #432]	@ (800f5d0 <mem_trim+0x1f4>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	687a      	ldr	r2, [r7, #4]
 800f422:	429a      	cmp	r2, r3
 800f424:	d306      	bcc.n	800f434 <mem_trim+0x58>
 800f426:	4b6b      	ldr	r3, [pc, #428]	@ (800f5d4 <mem_trim+0x1f8>)
 800f428:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800f42c:	496a      	ldr	r1, [pc, #424]	@ (800f5d8 <mem_trim+0x1fc>)
 800f42e:	486b      	ldr	r0, [pc, #428]	@ (800f5dc <mem_trim+0x200>)
 800f430:	f00a fdea 	bl	801a008 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f434:	4b65      	ldr	r3, [pc, #404]	@ (800f5cc <mem_trim+0x1f0>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	687a      	ldr	r2, [r7, #4]
 800f43a:	429a      	cmp	r2, r3
 800f43c:	d304      	bcc.n	800f448 <mem_trim+0x6c>
 800f43e:	4b64      	ldr	r3, [pc, #400]	@ (800f5d0 <mem_trim+0x1f4>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	687a      	ldr	r2, [r7, #4]
 800f444:	429a      	cmp	r2, r3
 800f446:	d307      	bcc.n	800f458 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f448:	f009 ff9e 	bl	8019388 <sys_arch_protect>
 800f44c:	60b8      	str	r0, [r7, #8]
 800f44e:	68b8      	ldr	r0, [r7, #8]
 800f450:	f009 ffa8 	bl	80193a4 <sys_arch_unprotect>
    return rmem;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	e0b5      	b.n	800f5c4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	3b08      	subs	r3, #8
 800f45c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f45e:	69b8      	ldr	r0, [r7, #24]
 800f460:	f7ff fdee 	bl	800f040 <mem_to_ptr>
 800f464:	4603      	mov	r3, r0
 800f466:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f468:	69bb      	ldr	r3, [r7, #24]
 800f46a:	881a      	ldrh	r2, [r3, #0]
 800f46c:	8afb      	ldrh	r3, [r7, #22]
 800f46e:	1ad3      	subs	r3, r2, r3
 800f470:	b29b      	uxth	r3, r3
 800f472:	3b08      	subs	r3, #8
 800f474:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f476:	8bfa      	ldrh	r2, [r7, #30]
 800f478:	8abb      	ldrh	r3, [r7, #20]
 800f47a:	429a      	cmp	r2, r3
 800f47c:	d906      	bls.n	800f48c <mem_trim+0xb0>
 800f47e:	4b55      	ldr	r3, [pc, #340]	@ (800f5d4 <mem_trim+0x1f8>)
 800f480:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800f484:	4956      	ldr	r1, [pc, #344]	@ (800f5e0 <mem_trim+0x204>)
 800f486:	4855      	ldr	r0, [pc, #340]	@ (800f5dc <mem_trim+0x200>)
 800f488:	f00a fdbe 	bl	801a008 <iprintf>
  if (newsize > size) {
 800f48c:	8bfa      	ldrh	r2, [r7, #30]
 800f48e:	8abb      	ldrh	r3, [r7, #20]
 800f490:	429a      	cmp	r2, r3
 800f492:	d901      	bls.n	800f498 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800f494:	2300      	movs	r3, #0
 800f496:	e095      	b.n	800f5c4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800f498:	8bfa      	ldrh	r2, [r7, #30]
 800f49a:	8abb      	ldrh	r3, [r7, #20]
 800f49c:	429a      	cmp	r2, r3
 800f49e:	d101      	bne.n	800f4a4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	e08f      	b.n	800f5c4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f4a4:	484f      	ldr	r0, [pc, #316]	@ (800f5e4 <mem_trim+0x208>)
 800f4a6:	f009 ff33 	bl	8019310 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800f4aa:	69bb      	ldr	r3, [r7, #24]
 800f4ac:	881b      	ldrh	r3, [r3, #0]
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7ff fdb4 	bl	800f01c <ptr_to_mem>
 800f4b4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f4b6:	693b      	ldr	r3, [r7, #16]
 800f4b8:	791b      	ldrb	r3, [r3, #4]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d13f      	bne.n	800f53e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f4be:	69bb      	ldr	r3, [r7, #24]
 800f4c0:	881b      	ldrh	r3, [r3, #0]
 800f4c2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800f4c6:	d106      	bne.n	800f4d6 <mem_trim+0xfa>
 800f4c8:	4b42      	ldr	r3, [pc, #264]	@ (800f5d4 <mem_trim+0x1f8>)
 800f4ca:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800f4ce:	4946      	ldr	r1, [pc, #280]	@ (800f5e8 <mem_trim+0x20c>)
 800f4d0:	4842      	ldr	r0, [pc, #264]	@ (800f5dc <mem_trim+0x200>)
 800f4d2:	f00a fd99 	bl	801a008 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	881b      	ldrh	r3, [r3, #0]
 800f4da:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f4dc:	8afa      	ldrh	r2, [r7, #22]
 800f4de:	8bfb      	ldrh	r3, [r7, #30]
 800f4e0:	4413      	add	r3, r2
 800f4e2:	b29b      	uxth	r3, r3
 800f4e4:	3308      	adds	r3, #8
 800f4e6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f4e8:	4b40      	ldr	r3, [pc, #256]	@ (800f5ec <mem_trim+0x210>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	693a      	ldr	r2, [r7, #16]
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d106      	bne.n	800f500 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800f4f2:	89fb      	ldrh	r3, [r7, #14]
 800f4f4:	4618      	mov	r0, r3
 800f4f6:	f7ff fd91 	bl	800f01c <ptr_to_mem>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	4a3b      	ldr	r2, [pc, #236]	@ (800f5ec <mem_trim+0x210>)
 800f4fe:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f500:	89fb      	ldrh	r3, [r7, #14]
 800f502:	4618      	mov	r0, r3
 800f504:	f7ff fd8a 	bl	800f01c <ptr_to_mem>
 800f508:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f50a:	693b      	ldr	r3, [r7, #16]
 800f50c:	2200      	movs	r2, #0
 800f50e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	89ba      	ldrh	r2, [r7, #12]
 800f514:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f516:	693b      	ldr	r3, [r7, #16]
 800f518:	8afa      	ldrh	r2, [r7, #22]
 800f51a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f51c:	69bb      	ldr	r3, [r7, #24]
 800f51e:	89fa      	ldrh	r2, [r7, #14]
 800f520:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f522:	693b      	ldr	r3, [r7, #16]
 800f524:	881b      	ldrh	r3, [r3, #0]
 800f526:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800f52a:	d047      	beq.n	800f5bc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	881b      	ldrh	r3, [r3, #0]
 800f530:	4618      	mov	r0, r3
 800f532:	f7ff fd73 	bl	800f01c <ptr_to_mem>
 800f536:	4602      	mov	r2, r0
 800f538:	89fb      	ldrh	r3, [r7, #14]
 800f53a:	8053      	strh	r3, [r2, #2]
 800f53c:	e03e      	b.n	800f5bc <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f53e:	8bfb      	ldrh	r3, [r7, #30]
 800f540:	f103 0214 	add.w	r2, r3, #20
 800f544:	8abb      	ldrh	r3, [r7, #20]
 800f546:	429a      	cmp	r2, r3
 800f548:	d838      	bhi.n	800f5bc <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f54a:	8afa      	ldrh	r2, [r7, #22]
 800f54c:	8bfb      	ldrh	r3, [r7, #30]
 800f54e:	4413      	add	r3, r2
 800f550:	b29b      	uxth	r3, r3
 800f552:	3308      	adds	r3, #8
 800f554:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f556:	69bb      	ldr	r3, [r7, #24]
 800f558:	881b      	ldrh	r3, [r3, #0]
 800f55a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800f55e:	d106      	bne.n	800f56e <mem_trim+0x192>
 800f560:	4b1c      	ldr	r3, [pc, #112]	@ (800f5d4 <mem_trim+0x1f8>)
 800f562:	f240 3216 	movw	r2, #790	@ 0x316
 800f566:	4920      	ldr	r1, [pc, #128]	@ (800f5e8 <mem_trim+0x20c>)
 800f568:	481c      	ldr	r0, [pc, #112]	@ (800f5dc <mem_trim+0x200>)
 800f56a:	f00a fd4d 	bl	801a008 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f56e:	89fb      	ldrh	r3, [r7, #14]
 800f570:	4618      	mov	r0, r3
 800f572:	f7ff fd53 	bl	800f01c <ptr_to_mem>
 800f576:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f578:	4b1c      	ldr	r3, [pc, #112]	@ (800f5ec <mem_trim+0x210>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	693a      	ldr	r2, [r7, #16]
 800f57e:	429a      	cmp	r2, r3
 800f580:	d202      	bcs.n	800f588 <mem_trim+0x1ac>
      lfree = mem2;
 800f582:	4a1a      	ldr	r2, [pc, #104]	@ (800f5ec <mem_trim+0x210>)
 800f584:	693b      	ldr	r3, [r7, #16]
 800f586:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	2200      	movs	r2, #0
 800f58c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f58e:	69bb      	ldr	r3, [r7, #24]
 800f590:	881a      	ldrh	r2, [r3, #0]
 800f592:	693b      	ldr	r3, [r7, #16]
 800f594:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f596:	693b      	ldr	r3, [r7, #16]
 800f598:	8afa      	ldrh	r2, [r7, #22]
 800f59a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f59c:	69bb      	ldr	r3, [r7, #24]
 800f59e:	89fa      	ldrh	r2, [r7, #14]
 800f5a0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f5a2:	693b      	ldr	r3, [r7, #16]
 800f5a4:	881b      	ldrh	r3, [r3, #0]
 800f5a6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800f5aa:	d007      	beq.n	800f5bc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f5ac:	693b      	ldr	r3, [r7, #16]
 800f5ae:	881b      	ldrh	r3, [r3, #0]
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f7ff fd33 	bl	800f01c <ptr_to_mem>
 800f5b6:	4602      	mov	r2, r0
 800f5b8:	89fb      	ldrh	r3, [r7, #14]
 800f5ba:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f5bc:	4809      	ldr	r0, [pc, #36]	@ (800f5e4 <mem_trim+0x208>)
 800f5be:	f009 feb6 	bl	801932e <sys_mutex_unlock>
  return rmem;
 800f5c2:	687b      	ldr	r3, [r7, #4]
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	3720      	adds	r7, #32
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}
 800f5cc:	200243c4 	.word	0x200243c4
 800f5d0:	200243c8 	.word	0x200243c8
 800f5d4:	0801b368 	.word	0x0801b368
 800f5d8:	0801b4f4 	.word	0x0801b4f4
 800f5dc:	0801b3b0 	.word	0x0801b3b0
 800f5e0:	0801b50c 	.word	0x0801b50c
 800f5e4:	200243cc 	.word	0x200243cc
 800f5e8:	0801b52c 	.word	0x0801b52c
 800f5ec:	200243d0 	.word	0x200243d0

0800f5f0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b088      	sub	sp, #32
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	4603      	mov	r3, r0
 800f5f8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f5fa:	88fb      	ldrh	r3, [r7, #6]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d101      	bne.n	800f604 <mem_malloc+0x14>
    return NULL;
 800f600:	2300      	movs	r3, #0
 800f602:	e0e2      	b.n	800f7ca <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f604:	88fb      	ldrh	r3, [r7, #6]
 800f606:	3303      	adds	r3, #3
 800f608:	b29b      	uxth	r3, r3
 800f60a:	f023 0303 	bic.w	r3, r3, #3
 800f60e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f610:	8bbb      	ldrh	r3, [r7, #28]
 800f612:	2b0b      	cmp	r3, #11
 800f614:	d801      	bhi.n	800f61a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f616:	230c      	movs	r3, #12
 800f618:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f61a:	8bbb      	ldrh	r3, [r7, #28]
 800f61c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800f620:	d803      	bhi.n	800f62a <mem_malloc+0x3a>
 800f622:	8bba      	ldrh	r2, [r7, #28]
 800f624:	88fb      	ldrh	r3, [r7, #6]
 800f626:	429a      	cmp	r2, r3
 800f628:	d201      	bcs.n	800f62e <mem_malloc+0x3e>
    return NULL;
 800f62a:	2300      	movs	r3, #0
 800f62c:	e0cd      	b.n	800f7ca <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f62e:	4869      	ldr	r0, [pc, #420]	@ (800f7d4 <mem_malloc+0x1e4>)
 800f630:	f009 fe6e 	bl	8019310 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f634:	4b68      	ldr	r3, [pc, #416]	@ (800f7d8 <mem_malloc+0x1e8>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4618      	mov	r0, r3
 800f63a:	f7ff fd01 	bl	800f040 <mem_to_ptr>
 800f63e:	4603      	mov	r3, r0
 800f640:	83fb      	strh	r3, [r7, #30]
 800f642:	e0b7      	b.n	800f7b4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f644:	8bfb      	ldrh	r3, [r7, #30]
 800f646:	4618      	mov	r0, r3
 800f648:	f7ff fce8 	bl	800f01c <ptr_to_mem>
 800f64c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f64e:	697b      	ldr	r3, [r7, #20]
 800f650:	791b      	ldrb	r3, [r3, #4]
 800f652:	2b00      	cmp	r3, #0
 800f654:	f040 80a7 	bne.w	800f7a6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	881b      	ldrh	r3, [r3, #0]
 800f65c:	461a      	mov	r2, r3
 800f65e:	8bfb      	ldrh	r3, [r7, #30]
 800f660:	1ad3      	subs	r3, r2, r3
 800f662:	f1a3 0208 	sub.w	r2, r3, #8
 800f666:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f668:	429a      	cmp	r2, r3
 800f66a:	f0c0 809c 	bcc.w	800f7a6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	881b      	ldrh	r3, [r3, #0]
 800f672:	461a      	mov	r2, r3
 800f674:	8bfb      	ldrh	r3, [r7, #30]
 800f676:	1ad3      	subs	r3, r2, r3
 800f678:	f1a3 0208 	sub.w	r2, r3, #8
 800f67c:	8bbb      	ldrh	r3, [r7, #28]
 800f67e:	3314      	adds	r3, #20
 800f680:	429a      	cmp	r2, r3
 800f682:	d333      	bcc.n	800f6ec <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f684:	8bfa      	ldrh	r2, [r7, #30]
 800f686:	8bbb      	ldrh	r3, [r7, #28]
 800f688:	4413      	add	r3, r2
 800f68a:	b29b      	uxth	r3, r3
 800f68c:	3308      	adds	r3, #8
 800f68e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f690:	8a7b      	ldrh	r3, [r7, #18]
 800f692:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800f696:	d106      	bne.n	800f6a6 <mem_malloc+0xb6>
 800f698:	4b50      	ldr	r3, [pc, #320]	@ (800f7dc <mem_malloc+0x1ec>)
 800f69a:	f240 3287 	movw	r2, #903	@ 0x387
 800f69e:	4950      	ldr	r1, [pc, #320]	@ (800f7e0 <mem_malloc+0x1f0>)
 800f6a0:	4850      	ldr	r0, [pc, #320]	@ (800f7e4 <mem_malloc+0x1f4>)
 800f6a2:	f00a fcb1 	bl	801a008 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f6a6:	8a7b      	ldrh	r3, [r7, #18]
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	f7ff fcb7 	bl	800f01c <ptr_to_mem>
 800f6ae:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	881a      	ldrh	r2, [r3, #0]
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	8bfa      	ldrh	r2, [r7, #30]
 800f6c2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	8a7a      	ldrh	r2, [r7, #18]
 800f6c8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	2201      	movs	r2, #1
 800f6ce:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	881b      	ldrh	r3, [r3, #0]
 800f6d4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800f6d8:	d00b      	beq.n	800f6f2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	881b      	ldrh	r3, [r3, #0]
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7ff fc9c 	bl	800f01c <ptr_to_mem>
 800f6e4:	4602      	mov	r2, r0
 800f6e6:	8a7b      	ldrh	r3, [r7, #18]
 800f6e8:	8053      	strh	r3, [r2, #2]
 800f6ea:	e002      	b.n	800f6f2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	2201      	movs	r2, #1
 800f6f0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f6f2:	4b39      	ldr	r3, [pc, #228]	@ (800f7d8 <mem_malloc+0x1e8>)
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	697a      	ldr	r2, [r7, #20]
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d127      	bne.n	800f74c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800f6fc:	4b36      	ldr	r3, [pc, #216]	@ (800f7d8 <mem_malloc+0x1e8>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f702:	e005      	b.n	800f710 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f704:	69bb      	ldr	r3, [r7, #24]
 800f706:	881b      	ldrh	r3, [r3, #0]
 800f708:	4618      	mov	r0, r3
 800f70a:	f7ff fc87 	bl	800f01c <ptr_to_mem>
 800f70e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f710:	69bb      	ldr	r3, [r7, #24]
 800f712:	791b      	ldrb	r3, [r3, #4]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d004      	beq.n	800f722 <mem_malloc+0x132>
 800f718:	4b33      	ldr	r3, [pc, #204]	@ (800f7e8 <mem_malloc+0x1f8>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	69ba      	ldr	r2, [r7, #24]
 800f71e:	429a      	cmp	r2, r3
 800f720:	d1f0      	bne.n	800f704 <mem_malloc+0x114>
          }
          lfree = cur;
 800f722:	4a2d      	ldr	r2, [pc, #180]	@ (800f7d8 <mem_malloc+0x1e8>)
 800f724:	69bb      	ldr	r3, [r7, #24]
 800f726:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f728:	4b2b      	ldr	r3, [pc, #172]	@ (800f7d8 <mem_malloc+0x1e8>)
 800f72a:	681a      	ldr	r2, [r3, #0]
 800f72c:	4b2e      	ldr	r3, [pc, #184]	@ (800f7e8 <mem_malloc+0x1f8>)
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	429a      	cmp	r2, r3
 800f732:	d00b      	beq.n	800f74c <mem_malloc+0x15c>
 800f734:	4b28      	ldr	r3, [pc, #160]	@ (800f7d8 <mem_malloc+0x1e8>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	791b      	ldrb	r3, [r3, #4]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d006      	beq.n	800f74c <mem_malloc+0x15c>
 800f73e:	4b27      	ldr	r3, [pc, #156]	@ (800f7dc <mem_malloc+0x1ec>)
 800f740:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800f744:	4929      	ldr	r1, [pc, #164]	@ (800f7ec <mem_malloc+0x1fc>)
 800f746:	4827      	ldr	r0, [pc, #156]	@ (800f7e4 <mem_malloc+0x1f4>)
 800f748:	f00a fc5e 	bl	801a008 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f74c:	4821      	ldr	r0, [pc, #132]	@ (800f7d4 <mem_malloc+0x1e4>)
 800f74e:	f009 fdee 	bl	801932e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f752:	8bba      	ldrh	r2, [r7, #28]
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	4413      	add	r3, r2
 800f758:	3308      	adds	r3, #8
 800f75a:	4a23      	ldr	r2, [pc, #140]	@ (800f7e8 <mem_malloc+0x1f8>)
 800f75c:	6812      	ldr	r2, [r2, #0]
 800f75e:	4293      	cmp	r3, r2
 800f760:	d906      	bls.n	800f770 <mem_malloc+0x180>
 800f762:	4b1e      	ldr	r3, [pc, #120]	@ (800f7dc <mem_malloc+0x1ec>)
 800f764:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800f768:	4921      	ldr	r1, [pc, #132]	@ (800f7f0 <mem_malloc+0x200>)
 800f76a:	481e      	ldr	r0, [pc, #120]	@ (800f7e4 <mem_malloc+0x1f4>)
 800f76c:	f00a fc4c 	bl	801a008 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	f003 0303 	and.w	r3, r3, #3
 800f776:	2b00      	cmp	r3, #0
 800f778:	d006      	beq.n	800f788 <mem_malloc+0x198>
 800f77a:	4b18      	ldr	r3, [pc, #96]	@ (800f7dc <mem_malloc+0x1ec>)
 800f77c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800f780:	491c      	ldr	r1, [pc, #112]	@ (800f7f4 <mem_malloc+0x204>)
 800f782:	4818      	ldr	r0, [pc, #96]	@ (800f7e4 <mem_malloc+0x1f4>)
 800f784:	f00a fc40 	bl	801a008 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f788:	697b      	ldr	r3, [r7, #20]
 800f78a:	f003 0303 	and.w	r3, r3, #3
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d006      	beq.n	800f7a0 <mem_malloc+0x1b0>
 800f792:	4b12      	ldr	r3, [pc, #72]	@ (800f7dc <mem_malloc+0x1ec>)
 800f794:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800f798:	4917      	ldr	r1, [pc, #92]	@ (800f7f8 <mem_malloc+0x208>)
 800f79a:	4812      	ldr	r0, [pc, #72]	@ (800f7e4 <mem_malloc+0x1f4>)
 800f79c:	f00a fc34 	bl	801a008 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	3308      	adds	r3, #8
 800f7a4:	e011      	b.n	800f7ca <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800f7a6:	8bfb      	ldrh	r3, [r7, #30]
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	f7ff fc37 	bl	800f01c <ptr_to_mem>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	881b      	ldrh	r3, [r3, #0]
 800f7b2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f7b4:	8bfa      	ldrh	r2, [r7, #30]
 800f7b6:	8bbb      	ldrh	r3, [r7, #28]
 800f7b8:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	f4ff af41 	bcc.w	800f644 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f7c2:	4804      	ldr	r0, [pc, #16]	@ (800f7d4 <mem_malloc+0x1e4>)
 800f7c4:	f009 fdb3 	bl	801932e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f7c8:	2300      	movs	r3, #0
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3720      	adds	r7, #32
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
 800f7d2:	bf00      	nop
 800f7d4:	200243cc 	.word	0x200243cc
 800f7d8:	200243d0 	.word	0x200243d0
 800f7dc:	0801b368 	.word	0x0801b368
 800f7e0:	0801b52c 	.word	0x0801b52c
 800f7e4:	0801b3b0 	.word	0x0801b3b0
 800f7e8:	200243c8 	.word	0x200243c8
 800f7ec:	0801b540 	.word	0x0801b540
 800f7f0:	0801b55c 	.word	0x0801b55c
 800f7f4:	0801b58c 	.word	0x0801b58c
 800f7f8:	0801b5bc 	.word	0x0801b5bc

0800f7fc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b085      	sub	sp, #20
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	689b      	ldr	r3, [r3, #8]
 800f808:	2200      	movs	r2, #0
 800f80a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	685b      	ldr	r3, [r3, #4]
 800f810:	3303      	adds	r3, #3
 800f812:	f023 0303 	bic.w	r3, r3, #3
 800f816:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f818:	2300      	movs	r3, #0
 800f81a:	60fb      	str	r3, [r7, #12]
 800f81c:	e011      	b.n	800f842 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	689b      	ldr	r3, [r3, #8]
 800f822:	681a      	ldr	r2, [r3, #0]
 800f824:	68bb      	ldr	r3, [r7, #8]
 800f826:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	689b      	ldr	r3, [r3, #8]
 800f82c:	68ba      	ldr	r2, [r7, #8]
 800f82e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	881b      	ldrh	r3, [r3, #0]
 800f834:	461a      	mov	r2, r3
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	4413      	add	r3, r2
 800f83a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	3301      	adds	r3, #1
 800f840:	60fb      	str	r3, [r7, #12]
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	885b      	ldrh	r3, [r3, #2]
 800f846:	461a      	mov	r2, r3
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	4293      	cmp	r3, r2
 800f84c:	dbe7      	blt.n	800f81e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f84e:	bf00      	nop
 800f850:	bf00      	nop
 800f852:	3714      	adds	r7, #20
 800f854:	46bd      	mov	sp, r7
 800f856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85a:	4770      	bx	lr

0800f85c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f862:	2300      	movs	r3, #0
 800f864:	80fb      	strh	r3, [r7, #6]
 800f866:	e009      	b.n	800f87c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f868:	88fb      	ldrh	r3, [r7, #6]
 800f86a:	4a08      	ldr	r2, [pc, #32]	@ (800f88c <memp_init+0x30>)
 800f86c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f870:	4618      	mov	r0, r3
 800f872:	f7ff ffc3 	bl	800f7fc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f876:	88fb      	ldrh	r3, [r7, #6]
 800f878:	3301      	adds	r3, #1
 800f87a:	80fb      	strh	r3, [r7, #6]
 800f87c:	88fb      	ldrh	r3, [r7, #6]
 800f87e:	2b0c      	cmp	r3, #12
 800f880:	d9f2      	bls.n	800f868 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f882:	bf00      	nop
 800f884:	bf00      	nop
 800f886:	3708      	adds	r7, #8
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}
 800f88c:	0801e244 	.word	0x0801e244

0800f890 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b084      	sub	sp, #16
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f898:	f009 fd76 	bl	8019388 <sys_arch_protect>
 800f89c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	689b      	ldr	r3, [r3, #8]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f8a6:	68bb      	ldr	r3, [r7, #8]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d015      	beq.n	800f8d8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	689b      	ldr	r3, [r3, #8]
 800f8b0:	68ba      	ldr	r2, [r7, #8]
 800f8b2:	6812      	ldr	r2, [r2, #0]
 800f8b4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	f003 0303 	and.w	r3, r3, #3
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d006      	beq.n	800f8ce <do_memp_malloc_pool+0x3e>
 800f8c0:	4b09      	ldr	r3, [pc, #36]	@ (800f8e8 <do_memp_malloc_pool+0x58>)
 800f8c2:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800f8c6:	4909      	ldr	r1, [pc, #36]	@ (800f8ec <do_memp_malloc_pool+0x5c>)
 800f8c8:	4809      	ldr	r0, [pc, #36]	@ (800f8f0 <do_memp_malloc_pool+0x60>)
 800f8ca:	f00a fb9d 	bl	801a008 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f8ce:	68f8      	ldr	r0, [r7, #12]
 800f8d0:	f009 fd68 	bl	80193a4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f8d4:	68bb      	ldr	r3, [r7, #8]
 800f8d6:	e003      	b.n	800f8e0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f8d8:	68f8      	ldr	r0, [r7, #12]
 800f8da:	f009 fd63 	bl	80193a4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f8de:	2300      	movs	r3, #0
}
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	3710      	adds	r7, #16
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}
 800f8e8:	0801b5e0 	.word	0x0801b5e0
 800f8ec:	0801b610 	.word	0x0801b610
 800f8f0:	0801b634 	.word	0x0801b634

0800f8f4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b082      	sub	sp, #8
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d106      	bne.n	800f910 <memp_malloc_pool+0x1c>
 800f902:	4b0a      	ldr	r3, [pc, #40]	@ (800f92c <memp_malloc_pool+0x38>)
 800f904:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800f908:	4909      	ldr	r1, [pc, #36]	@ (800f930 <memp_malloc_pool+0x3c>)
 800f90a:	480a      	ldr	r0, [pc, #40]	@ (800f934 <memp_malloc_pool+0x40>)
 800f90c:	f00a fb7c 	bl	801a008 <iprintf>
  if (desc == NULL) {
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d101      	bne.n	800f91a <memp_malloc_pool+0x26>
    return NULL;
 800f916:	2300      	movs	r3, #0
 800f918:	e003      	b.n	800f922 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	f7ff ffb8 	bl	800f890 <do_memp_malloc_pool>
 800f920:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f922:	4618      	mov	r0, r3
 800f924:	3708      	adds	r7, #8
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}
 800f92a:	bf00      	nop
 800f92c:	0801b5e0 	.word	0x0801b5e0
 800f930:	0801b65c 	.word	0x0801b65c
 800f934:	0801b634 	.word	0x0801b634

0800f938 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b084      	sub	sp, #16
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	4603      	mov	r3, r0
 800f940:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f942:	79fb      	ldrb	r3, [r7, #7]
 800f944:	2b0c      	cmp	r3, #12
 800f946:	d908      	bls.n	800f95a <memp_malloc+0x22>
 800f948:	4b0a      	ldr	r3, [pc, #40]	@ (800f974 <memp_malloc+0x3c>)
 800f94a:	f240 1257 	movw	r2, #343	@ 0x157
 800f94e:	490a      	ldr	r1, [pc, #40]	@ (800f978 <memp_malloc+0x40>)
 800f950:	480a      	ldr	r0, [pc, #40]	@ (800f97c <memp_malloc+0x44>)
 800f952:	f00a fb59 	bl	801a008 <iprintf>
 800f956:	2300      	movs	r3, #0
 800f958:	e008      	b.n	800f96c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f95a:	79fb      	ldrb	r3, [r7, #7]
 800f95c:	4a08      	ldr	r2, [pc, #32]	@ (800f980 <memp_malloc+0x48>)
 800f95e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f962:	4618      	mov	r0, r3
 800f964:	f7ff ff94 	bl	800f890 <do_memp_malloc_pool>
 800f968:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f96a:	68fb      	ldr	r3, [r7, #12]
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	3710      	adds	r7, #16
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}
 800f974:	0801b5e0 	.word	0x0801b5e0
 800f978:	0801b670 	.word	0x0801b670
 800f97c:	0801b634 	.word	0x0801b634
 800f980:	0801e244 	.word	0x0801e244

0800f984 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b084      	sub	sp, #16
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	f003 0303 	and.w	r3, r3, #3
 800f994:	2b00      	cmp	r3, #0
 800f996:	d006      	beq.n	800f9a6 <do_memp_free_pool+0x22>
 800f998:	4b0d      	ldr	r3, [pc, #52]	@ (800f9d0 <do_memp_free_pool+0x4c>)
 800f99a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800f99e:	490d      	ldr	r1, [pc, #52]	@ (800f9d4 <do_memp_free_pool+0x50>)
 800f9a0:	480d      	ldr	r0, [pc, #52]	@ (800f9d8 <do_memp_free_pool+0x54>)
 800f9a2:	f00a fb31 	bl	801a008 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800f9aa:	f009 fced 	bl	8019388 <sys_arch_protect>
 800f9ae:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	689b      	ldr	r3, [r3, #8]
 800f9b4:	681a      	ldr	r2, [r3, #0]
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	689b      	ldr	r3, [r3, #8]
 800f9be:	68fa      	ldr	r2, [r7, #12]
 800f9c0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800f9c2:	68b8      	ldr	r0, [r7, #8]
 800f9c4:	f009 fcee 	bl	80193a4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800f9c8:	bf00      	nop
 800f9ca:	3710      	adds	r7, #16
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}
 800f9d0:	0801b5e0 	.word	0x0801b5e0
 800f9d4:	0801b690 	.word	0x0801b690
 800f9d8:	0801b634 	.word	0x0801b634

0800f9dc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b082      	sub	sp, #8
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d106      	bne.n	800f9fa <memp_free_pool+0x1e>
 800f9ec:	4b0a      	ldr	r3, [pc, #40]	@ (800fa18 <memp_free_pool+0x3c>)
 800f9ee:	f240 1295 	movw	r2, #405	@ 0x195
 800f9f2:	490a      	ldr	r1, [pc, #40]	@ (800fa1c <memp_free_pool+0x40>)
 800f9f4:	480a      	ldr	r0, [pc, #40]	@ (800fa20 <memp_free_pool+0x44>)
 800f9f6:	f00a fb07 	bl	801a008 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d007      	beq.n	800fa10 <memp_free_pool+0x34>
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d004      	beq.n	800fa10 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800fa06:	6839      	ldr	r1, [r7, #0]
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f7ff ffbb 	bl	800f984 <do_memp_free_pool>
 800fa0e:	e000      	b.n	800fa12 <memp_free_pool+0x36>
    return;
 800fa10:	bf00      	nop
}
 800fa12:	3708      	adds	r7, #8
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}
 800fa18:	0801b5e0 	.word	0x0801b5e0
 800fa1c:	0801b65c 	.word	0x0801b65c
 800fa20:	0801b634 	.word	0x0801b634

0800fa24 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b082      	sub	sp, #8
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	6039      	str	r1, [r7, #0]
 800fa2e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800fa30:	79fb      	ldrb	r3, [r7, #7]
 800fa32:	2b0c      	cmp	r3, #12
 800fa34:	d907      	bls.n	800fa46 <memp_free+0x22>
 800fa36:	4b0c      	ldr	r3, [pc, #48]	@ (800fa68 <memp_free+0x44>)
 800fa38:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800fa3c:	490b      	ldr	r1, [pc, #44]	@ (800fa6c <memp_free+0x48>)
 800fa3e:	480c      	ldr	r0, [pc, #48]	@ (800fa70 <memp_free+0x4c>)
 800fa40:	f00a fae2 	bl	801a008 <iprintf>
 800fa44:	e00c      	b.n	800fa60 <memp_free+0x3c>

  if (mem == NULL) {
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d008      	beq.n	800fa5e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800fa4c:	79fb      	ldrb	r3, [r7, #7]
 800fa4e:	4a09      	ldr	r2, [pc, #36]	@ (800fa74 <memp_free+0x50>)
 800fa50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa54:	6839      	ldr	r1, [r7, #0]
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7ff ff94 	bl	800f984 <do_memp_free_pool>
 800fa5c:	e000      	b.n	800fa60 <memp_free+0x3c>
    return;
 800fa5e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800fa60:	3708      	adds	r7, #8
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bd80      	pop	{r7, pc}
 800fa66:	bf00      	nop
 800fa68:	0801b5e0 	.word	0x0801b5e0
 800fa6c:	0801b6b0 	.word	0x0801b6b0
 800fa70:	0801b634 	.word	0x0801b634
 800fa74:	0801e244 	.word	0x0801e244

0800fa78 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800fa78:	b480      	push	{r7}
 800fa7a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800fa7c:	bf00      	nop
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa84:	4770      	bx	lr
	...

0800fa88 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b086      	sub	sp, #24
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	60f8      	str	r0, [r7, #12]
 800fa90:	60b9      	str	r1, [r7, #8]
 800fa92:	607a      	str	r2, [r7, #4]
 800fa94:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d108      	bne.n	800faae <netif_add+0x26>
 800fa9c:	4b57      	ldr	r3, [pc, #348]	@ (800fbfc <netif_add+0x174>)
 800fa9e:	f240 1227 	movw	r2, #295	@ 0x127
 800faa2:	4957      	ldr	r1, [pc, #348]	@ (800fc00 <netif_add+0x178>)
 800faa4:	4857      	ldr	r0, [pc, #348]	@ (800fc04 <netif_add+0x17c>)
 800faa6:	f00a faaf 	bl	801a008 <iprintf>
 800faaa:	2300      	movs	r3, #0
 800faac:	e0a2      	b.n	800fbf4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800faae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d108      	bne.n	800fac6 <netif_add+0x3e>
 800fab4:	4b51      	ldr	r3, [pc, #324]	@ (800fbfc <netif_add+0x174>)
 800fab6:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800faba:	4953      	ldr	r1, [pc, #332]	@ (800fc08 <netif_add+0x180>)
 800fabc:	4851      	ldr	r0, [pc, #324]	@ (800fc04 <netif_add+0x17c>)
 800fabe:	f00a faa3 	bl	801a008 <iprintf>
 800fac2:	2300      	movs	r3, #0
 800fac4:	e096      	b.n	800fbf4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d101      	bne.n	800fad0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800facc:	4b4f      	ldr	r3, [pc, #316]	@ (800fc0c <netif_add+0x184>)
 800face:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d101      	bne.n	800fada <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800fad6:	4b4d      	ldr	r3, [pc, #308]	@ (800fc0c <netif_add+0x184>)
 800fad8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d101      	bne.n	800fae4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800fae0:	4b4a      	ldr	r3, [pc, #296]	@ (800fc0c <netif_add+0x184>)
 800fae2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	2200      	movs	r2, #0
 800fae8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	2200      	movs	r2, #0
 800faee:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	2200      	movs	r2, #0
 800faf4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	4a45      	ldr	r2, [pc, #276]	@ (800fc10 <netif_add+0x188>)
 800fafa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	2200      	movs	r2, #0
 800fb00:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	2200      	movs	r2, #0
 800fb06:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	6a3a      	ldr	r2, [r7, #32]
 800fb14:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800fb16:	4b3f      	ldr	r3, [pc, #252]	@ (800fc14 <netif_add+0x18c>)
 800fb18:	781a      	ldrb	r2, [r3, #0]
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fb24:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	687a      	ldr	r2, [r7, #4]
 800fb2a:	68b9      	ldr	r1, [r7, #8]
 800fb2c:	68f8      	ldr	r0, [r7, #12]
 800fb2e:	f000 f913 	bl	800fd58 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800fb32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb34:	68f8      	ldr	r0, [r7, #12]
 800fb36:	4798      	blx	r3
 800fb38:	4603      	mov	r3, r0
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d001      	beq.n	800fb42 <netif_add+0xba>
    return NULL;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	e058      	b.n	800fbf4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fb48:	2bff      	cmp	r3, #255	@ 0xff
 800fb4a:	d103      	bne.n	800fb54 <netif_add+0xcc>
        netif->num = 0;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800fb54:	2300      	movs	r3, #0
 800fb56:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fb58:	4b2f      	ldr	r3, [pc, #188]	@ (800fc18 <netif_add+0x190>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	617b      	str	r3, [r7, #20]
 800fb5e:	e02b      	b.n	800fbb8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800fb60:	697a      	ldr	r2, [r7, #20]
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d106      	bne.n	800fb76 <netif_add+0xee>
 800fb68:	4b24      	ldr	r3, [pc, #144]	@ (800fbfc <netif_add+0x174>)
 800fb6a:	f240 128b 	movw	r2, #395	@ 0x18b
 800fb6e:	492b      	ldr	r1, [pc, #172]	@ (800fc1c <netif_add+0x194>)
 800fb70:	4824      	ldr	r0, [pc, #144]	@ (800fc04 <netif_add+0x17c>)
 800fb72:	f00a fa49 	bl	801a008 <iprintf>
        num_netifs++;
 800fb76:	693b      	ldr	r3, [r7, #16]
 800fb78:	3301      	adds	r3, #1
 800fb7a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800fb7c:	693b      	ldr	r3, [r7, #16]
 800fb7e:	2bff      	cmp	r3, #255	@ 0xff
 800fb80:	dd06      	ble.n	800fb90 <netif_add+0x108>
 800fb82:	4b1e      	ldr	r3, [pc, #120]	@ (800fbfc <netif_add+0x174>)
 800fb84:	f240 128d 	movw	r2, #397	@ 0x18d
 800fb88:	4925      	ldr	r1, [pc, #148]	@ (800fc20 <netif_add+0x198>)
 800fb8a:	481e      	ldr	r0, [pc, #120]	@ (800fc04 <netif_add+0x17c>)
 800fb8c:	f00a fa3c 	bl	801a008 <iprintf>
        if (netif2->num == netif->num) {
 800fb90:	697b      	ldr	r3, [r7, #20]
 800fb92:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	d108      	bne.n	800fbb2 <netif_add+0x12a>
          netif->num++;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fba6:	3301      	adds	r3, #1
 800fba8:	b2da      	uxtb	r2, r3
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800fbb0:	e005      	b.n	800fbbe <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	617b      	str	r3, [r7, #20]
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d1d0      	bne.n	800fb60 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d1be      	bne.n	800fb42 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fbca:	2bfe      	cmp	r3, #254	@ 0xfe
 800fbcc:	d103      	bne.n	800fbd6 <netif_add+0x14e>
    netif_num = 0;
 800fbce:	4b11      	ldr	r3, [pc, #68]	@ (800fc14 <netif_add+0x18c>)
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	701a      	strb	r2, [r3, #0]
 800fbd4:	e006      	b.n	800fbe4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fbdc:	3301      	adds	r3, #1
 800fbde:	b2da      	uxtb	r2, r3
 800fbe0:	4b0c      	ldr	r3, [pc, #48]	@ (800fc14 <netif_add+0x18c>)
 800fbe2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800fbe4:	4b0c      	ldr	r3, [pc, #48]	@ (800fc18 <netif_add+0x190>)
 800fbe6:	681a      	ldr	r2, [r3, #0]
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800fbec:	4a0a      	ldr	r2, [pc, #40]	@ (800fc18 <netif_add+0x190>)
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3718      	adds	r7, #24
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}
 800fbfc:	0801b6cc 	.word	0x0801b6cc
 800fc00:	0801b760 	.word	0x0801b760
 800fc04:	0801b71c 	.word	0x0801b71c
 800fc08:	0801b77c 	.word	0x0801b77c
 800fc0c:	0801e2b8 	.word	0x0801e2b8
 800fc10:	08010033 	.word	0x08010033
 800fc14:	200274a8 	.word	0x200274a8
 800fc18:	200274a0 	.word	0x200274a0
 800fc1c:	0801b7a0 	.word	0x0801b7a0
 800fc20:	0801b7b4 	.word	0x0801b7b4

0800fc24 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b082      	sub	sp, #8
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
 800fc2c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800fc2e:	6839      	ldr	r1, [r7, #0]
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f002 fb8f 	bl	8012354 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800fc36:	6839      	ldr	r1, [r7, #0]
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	f006 ff4b 	bl	8016ad4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800fc3e:	bf00      	nop
 800fc40:	3708      	adds	r7, #8
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}
	...

0800fc48 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b086      	sub	sp, #24
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	60f8      	str	r0, [r7, #12]
 800fc50:	60b9      	str	r1, [r7, #8]
 800fc52:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d106      	bne.n	800fc68 <netif_do_set_ipaddr+0x20>
 800fc5a:	4b1d      	ldr	r3, [pc, #116]	@ (800fcd0 <netif_do_set_ipaddr+0x88>)
 800fc5c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800fc60:	491c      	ldr	r1, [pc, #112]	@ (800fcd4 <netif_do_set_ipaddr+0x8c>)
 800fc62:	481d      	ldr	r0, [pc, #116]	@ (800fcd8 <netif_do_set_ipaddr+0x90>)
 800fc64:	f00a f9d0 	bl	801a008 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d106      	bne.n	800fc7c <netif_do_set_ipaddr+0x34>
 800fc6e:	4b18      	ldr	r3, [pc, #96]	@ (800fcd0 <netif_do_set_ipaddr+0x88>)
 800fc70:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800fc74:	4917      	ldr	r1, [pc, #92]	@ (800fcd4 <netif_do_set_ipaddr+0x8c>)
 800fc76:	4818      	ldr	r0, [pc, #96]	@ (800fcd8 <netif_do_set_ipaddr+0x90>)
 800fc78:	f00a f9c6 	bl	801a008 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	681a      	ldr	r2, [r3, #0]
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	3304      	adds	r3, #4
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d01c      	beq.n	800fcc4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	3304      	adds	r3, #4
 800fc94:	681a      	ldr	r2, [r3, #0]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800fc9a:	f107 0314 	add.w	r3, r7, #20
 800fc9e:	4619      	mov	r1, r3
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f7ff ffbf 	bl	800fc24 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800fca6:	68bb      	ldr	r3, [r7, #8]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d002      	beq.n	800fcb2 <netif_do_set_ipaddr+0x6a>
 800fcac:	68bb      	ldr	r3, [r7, #8]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	e000      	b.n	800fcb4 <netif_do_set_ipaddr+0x6c>
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	68fa      	ldr	r2, [r7, #12]
 800fcb6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800fcb8:	2101      	movs	r1, #1
 800fcba:	68f8      	ldr	r0, [r7, #12]
 800fcbc:	f000 f8d2 	bl	800fe64 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	e000      	b.n	800fcc6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800fcc4:	2300      	movs	r3, #0
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3718      	adds	r7, #24
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}
 800fcce:	bf00      	nop
 800fcd0:	0801b6cc 	.word	0x0801b6cc
 800fcd4:	0801b7e4 	.word	0x0801b7e4
 800fcd8:	0801b71c 	.word	0x0801b71c

0800fcdc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800fcdc:	b480      	push	{r7}
 800fcde:	b085      	sub	sp, #20
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	60f8      	str	r0, [r7, #12]
 800fce4:	60b9      	str	r1, [r7, #8]
 800fce6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	681a      	ldr	r2, [r3, #0]
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	3308      	adds	r3, #8
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	d00a      	beq.n	800fd0c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d002      	beq.n	800fd02 <netif_do_set_netmask+0x26>
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	e000      	b.n	800fd04 <netif_do_set_netmask+0x28>
 800fd02:	2300      	movs	r3, #0
 800fd04:	68fa      	ldr	r2, [r7, #12]
 800fd06:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800fd08:	2301      	movs	r3, #1
 800fd0a:	e000      	b.n	800fd0e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800fd0c:	2300      	movs	r3, #0
}
 800fd0e:	4618      	mov	r0, r3
 800fd10:	3714      	adds	r7, #20
 800fd12:	46bd      	mov	sp, r7
 800fd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd18:	4770      	bx	lr

0800fd1a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800fd1a:	b480      	push	{r7}
 800fd1c:	b085      	sub	sp, #20
 800fd1e:	af00      	add	r7, sp, #0
 800fd20:	60f8      	str	r0, [r7, #12]
 800fd22:	60b9      	str	r1, [r7, #8]
 800fd24:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	681a      	ldr	r2, [r3, #0]
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	330c      	adds	r3, #12
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	429a      	cmp	r2, r3
 800fd32:	d00a      	beq.n	800fd4a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d002      	beq.n	800fd40 <netif_do_set_gw+0x26>
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	e000      	b.n	800fd42 <netif_do_set_gw+0x28>
 800fd40:	2300      	movs	r3, #0
 800fd42:	68fa      	ldr	r2, [r7, #12]
 800fd44:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800fd46:	2301      	movs	r3, #1
 800fd48:	e000      	b.n	800fd4c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800fd4a:	2300      	movs	r3, #0
}
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	3714      	adds	r7, #20
 800fd50:	46bd      	mov	sp, r7
 800fd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd56:	4770      	bx	lr

0800fd58 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b088      	sub	sp, #32
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	60f8      	str	r0, [r7, #12]
 800fd60:	60b9      	str	r1, [r7, #8]
 800fd62:	607a      	str	r2, [r7, #4]
 800fd64:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800fd66:	2300      	movs	r3, #0
 800fd68:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d101      	bne.n	800fd78 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800fd74:	4b1c      	ldr	r3, [pc, #112]	@ (800fde8 <netif_set_addr+0x90>)
 800fd76:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d101      	bne.n	800fd82 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800fd7e:	4b1a      	ldr	r3, [pc, #104]	@ (800fde8 <netif_set_addr+0x90>)
 800fd80:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d101      	bne.n	800fd8c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800fd88:	4b17      	ldr	r3, [pc, #92]	@ (800fde8 <netif_set_addr+0x90>)
 800fd8a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d003      	beq.n	800fd9a <netif_set_addr+0x42>
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d101      	bne.n	800fd9e <netif_set_addr+0x46>
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	e000      	b.n	800fda0 <netif_set_addr+0x48>
 800fd9e:	2300      	movs	r3, #0
 800fda0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d006      	beq.n	800fdb6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fda8:	f107 0310 	add.w	r3, r7, #16
 800fdac:	461a      	mov	r2, r3
 800fdae:	68b9      	ldr	r1, [r7, #8]
 800fdb0:	68f8      	ldr	r0, [r7, #12]
 800fdb2:	f7ff ff49 	bl	800fc48 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800fdb6:	69fa      	ldr	r2, [r7, #28]
 800fdb8:	6879      	ldr	r1, [r7, #4]
 800fdba:	68f8      	ldr	r0, [r7, #12]
 800fdbc:	f7ff ff8e 	bl	800fcdc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800fdc0:	69ba      	ldr	r2, [r7, #24]
 800fdc2:	6839      	ldr	r1, [r7, #0]
 800fdc4:	68f8      	ldr	r0, [r7, #12]
 800fdc6:	f7ff ffa8 	bl	800fd1a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d106      	bne.n	800fdde <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fdd0:	f107 0310 	add.w	r3, r7, #16
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	68b9      	ldr	r1, [r7, #8]
 800fdd8:	68f8      	ldr	r0, [r7, #12]
 800fdda:	f7ff ff35 	bl	800fc48 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800fdde:	bf00      	nop
 800fde0:	3720      	adds	r7, #32
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}
 800fde6:	bf00      	nop
 800fde8:	0801e2b8 	.word	0x0801e2b8

0800fdec <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800fdec:	b480      	push	{r7}
 800fdee:	b083      	sub	sp, #12
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800fdf4:	4a04      	ldr	r2, [pc, #16]	@ (800fe08 <netif_set_default+0x1c>)
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800fdfa:	bf00      	nop
 800fdfc:	370c      	adds	r7, #12
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe04:	4770      	bx	lr
 800fe06:	bf00      	nop
 800fe08:	200274a4 	.word	0x200274a4

0800fe0c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b082      	sub	sp, #8
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d107      	bne.n	800fe2a <netif_set_up+0x1e>
 800fe1a:	4b0f      	ldr	r3, [pc, #60]	@ (800fe58 <netif_set_up+0x4c>)
 800fe1c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800fe20:	490e      	ldr	r1, [pc, #56]	@ (800fe5c <netif_set_up+0x50>)
 800fe22:	480f      	ldr	r0, [pc, #60]	@ (800fe60 <netif_set_up+0x54>)
 800fe24:	f00a f8f0 	bl	801a008 <iprintf>
 800fe28:	e013      	b.n	800fe52 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fe30:	f003 0301 	and.w	r3, r3, #1
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d10c      	bne.n	800fe52 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fe3e:	f043 0301 	orr.w	r3, r3, #1
 800fe42:	b2da      	uxtb	r2, r3
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fe4a:	2103      	movs	r1, #3
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f000 f809 	bl	800fe64 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800fe52:	3708      	adds	r7, #8
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	0801b6cc 	.word	0x0801b6cc
 800fe5c:	0801b854 	.word	0x0801b854
 800fe60:	0801b71c 	.word	0x0801b71c

0800fe64 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b082      	sub	sp, #8
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	460b      	mov	r3, r1
 800fe6e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d106      	bne.n	800fe84 <netif_issue_reports+0x20>
 800fe76:	4b18      	ldr	r3, [pc, #96]	@ (800fed8 <netif_issue_reports+0x74>)
 800fe78:	f240 326d 	movw	r2, #877	@ 0x36d
 800fe7c:	4917      	ldr	r1, [pc, #92]	@ (800fedc <netif_issue_reports+0x78>)
 800fe7e:	4818      	ldr	r0, [pc, #96]	@ (800fee0 <netif_issue_reports+0x7c>)
 800fe80:	f00a f8c2 	bl	801a008 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fe8a:	f003 0304 	and.w	r3, r3, #4
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d01e      	beq.n	800fed0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fe98:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d017      	beq.n	800fed0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fea0:	78fb      	ldrb	r3, [r7, #3]
 800fea2:	f003 0301 	and.w	r3, r3, #1
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d013      	beq.n	800fed2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	3304      	adds	r3, #4
 800feae:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d00e      	beq.n	800fed2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800feba:	f003 0308 	and.w	r3, r3, #8
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d007      	beq.n	800fed2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	3304      	adds	r3, #4
 800fec6:	4619      	mov	r1, r3
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f007 fd6d 	bl	80179a8 <etharp_request>
 800fece:	e000      	b.n	800fed2 <netif_issue_reports+0x6e>
    return;
 800fed0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800fed2:	3708      	adds	r7, #8
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}
 800fed8:	0801b6cc 	.word	0x0801b6cc
 800fedc:	0801b870 	.word	0x0801b870
 800fee0:	0801b71c 	.word	0x0801b71c

0800fee4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b082      	sub	sp, #8
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d107      	bne.n	800ff02 <netif_set_down+0x1e>
 800fef2:	4b12      	ldr	r3, [pc, #72]	@ (800ff3c <netif_set_down+0x58>)
 800fef4:	f240 329b 	movw	r2, #923	@ 0x39b
 800fef8:	4911      	ldr	r1, [pc, #68]	@ (800ff40 <netif_set_down+0x5c>)
 800fefa:	4812      	ldr	r0, [pc, #72]	@ (800ff44 <netif_set_down+0x60>)
 800fefc:	f00a f884 	bl	801a008 <iprintf>
 800ff00:	e019      	b.n	800ff36 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ff08:	f003 0301 	and.w	r3, r3, #1
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d012      	beq.n	800ff36 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ff16:	f023 0301 	bic.w	r3, r3, #1
 800ff1a:	b2da      	uxtb	r2, r3
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ff28:	f003 0308 	and.w	r3, r3, #8
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d002      	beq.n	800ff36 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f007 f8f7 	bl	8017124 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ff36:	3708      	adds	r7, #8
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}
 800ff3c:	0801b6cc 	.word	0x0801b6cc
 800ff40:	0801b894 	.word	0x0801b894
 800ff44:	0801b71c 	.word	0x0801b71c

0800ff48 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ff48:	b580      	push	{r7, lr}
 800ff4a:	b082      	sub	sp, #8
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d107      	bne.n	800ff66 <netif_set_link_up+0x1e>
 800ff56:	4b13      	ldr	r3, [pc, #76]	@ (800ffa4 <netif_set_link_up+0x5c>)
 800ff58:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800ff5c:	4912      	ldr	r1, [pc, #72]	@ (800ffa8 <netif_set_link_up+0x60>)
 800ff5e:	4813      	ldr	r0, [pc, #76]	@ (800ffac <netif_set_link_up+0x64>)
 800ff60:	f00a f852 	bl	801a008 <iprintf>
 800ff64:	e01b      	b.n	800ff9e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ff6c:	f003 0304 	and.w	r3, r3, #4
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d114      	bne.n	800ff9e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ff7a:	f043 0304 	orr.w	r3, r3, #4
 800ff7e:	b2da      	uxtb	r2, r3
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ff86:	2103      	movs	r1, #3
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f7ff ff6b 	bl	800fe64 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	69db      	ldr	r3, [r3, #28]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d003      	beq.n	800ff9e <netif_set_link_up+0x56>
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	69db      	ldr	r3, [r3, #28]
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ff9e:	3708      	adds	r7, #8
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}
 800ffa4:	0801b6cc 	.word	0x0801b6cc
 800ffa8:	0801b8b4 	.word	0x0801b8b4
 800ffac:	0801b71c 	.word	0x0801b71c

0800ffb0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b082      	sub	sp, #8
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d107      	bne.n	800ffce <netif_set_link_down+0x1e>
 800ffbe:	4b11      	ldr	r3, [pc, #68]	@ (8010004 <netif_set_link_down+0x54>)
 800ffc0:	f240 4206 	movw	r2, #1030	@ 0x406
 800ffc4:	4910      	ldr	r1, [pc, #64]	@ (8010008 <netif_set_link_down+0x58>)
 800ffc6:	4811      	ldr	r0, [pc, #68]	@ (801000c <netif_set_link_down+0x5c>)
 800ffc8:	f00a f81e 	bl	801a008 <iprintf>
 800ffcc:	e017      	b.n	800fffe <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ffd4:	f003 0304 	and.w	r3, r3, #4
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d010      	beq.n	800fffe <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ffe2:	f023 0304 	bic.w	r3, r3, #4
 800ffe6:	b2da      	uxtb	r2, r3
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	69db      	ldr	r3, [r3, #28]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d003      	beq.n	800fffe <netif_set_link_down+0x4e>
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	69db      	ldr	r3, [r3, #28]
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fffe:	3708      	adds	r7, #8
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}
 8010004:	0801b6cc 	.word	0x0801b6cc
 8010008:	0801b8d8 	.word	0x0801b8d8
 801000c:	0801b71c 	.word	0x0801b71c

08010010 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010010:	b480      	push	{r7}
 8010012:	b083      	sub	sp, #12
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
 8010018:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d002      	beq.n	8010026 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	683a      	ldr	r2, [r7, #0]
 8010024:	61da      	str	r2, [r3, #28]
  }
}
 8010026:	bf00      	nop
 8010028:	370c      	adds	r7, #12
 801002a:	46bd      	mov	sp, r7
 801002c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010030:	4770      	bx	lr

08010032 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010032:	b480      	push	{r7}
 8010034:	b085      	sub	sp, #20
 8010036:	af00      	add	r7, sp, #0
 8010038:	60f8      	str	r0, [r7, #12]
 801003a:	60b9      	str	r1, [r7, #8]
 801003c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801003e:	f06f 030b 	mvn.w	r3, #11
}
 8010042:	4618      	mov	r0, r3
 8010044:	3714      	adds	r7, #20
 8010046:	46bd      	mov	sp, r7
 8010048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004c:	4770      	bx	lr
	...

08010050 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010050:	b480      	push	{r7}
 8010052:	b085      	sub	sp, #20
 8010054:	af00      	add	r7, sp, #0
 8010056:	4603      	mov	r3, r0
 8010058:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801005a:	79fb      	ldrb	r3, [r7, #7]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d013      	beq.n	8010088 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010060:	4b0d      	ldr	r3, [pc, #52]	@ (8010098 <netif_get_by_index+0x48>)
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	60fb      	str	r3, [r7, #12]
 8010066:	e00c      	b.n	8010082 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801006e:	3301      	adds	r3, #1
 8010070:	b2db      	uxtb	r3, r3
 8010072:	79fa      	ldrb	r2, [r7, #7]
 8010074:	429a      	cmp	r2, r3
 8010076:	d101      	bne.n	801007c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	e006      	b.n	801008a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	60fb      	str	r3, [r7, #12]
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d1ef      	bne.n	8010068 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010088:	2300      	movs	r3, #0
}
 801008a:	4618      	mov	r0, r3
 801008c:	3714      	adds	r7, #20
 801008e:	46bd      	mov	sp, r7
 8010090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010094:	4770      	bx	lr
 8010096:	bf00      	nop
 8010098:	200274a0 	.word	0x200274a0

0801009c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80100a2:	f009 f971 	bl	8019388 <sys_arch_protect>
 80100a6:	6038      	str	r0, [r7, #0]
 80100a8:	4b0d      	ldr	r3, [pc, #52]	@ (80100e0 <pbuf_free_ooseq+0x44>)
 80100aa:	2200      	movs	r2, #0
 80100ac:	701a      	strb	r2, [r3, #0]
 80100ae:	6838      	ldr	r0, [r7, #0]
 80100b0:	f009 f978 	bl	80193a4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80100b4:	4b0b      	ldr	r3, [pc, #44]	@ (80100e4 <pbuf_free_ooseq+0x48>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	607b      	str	r3, [r7, #4]
 80100ba:	e00a      	b.n	80100d2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d003      	beq.n	80100cc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f002 f983 	bl	80123d0 <tcp_free_ooseq>
      return;
 80100ca:	e005      	b.n	80100d8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	68db      	ldr	r3, [r3, #12]
 80100d0:	607b      	str	r3, [r7, #4]
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d1f1      	bne.n	80100bc <pbuf_free_ooseq+0x20>
    }
  }
}
 80100d8:	3708      	adds	r7, #8
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}
 80100de:	bf00      	nop
 80100e0:	200274a9 	.word	0x200274a9
 80100e4:	200274b8 	.word	0x200274b8

080100e8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b082      	sub	sp, #8
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80100f0:	f7ff ffd4 	bl	801009c <pbuf_free_ooseq>
}
 80100f4:	bf00      	nop
 80100f6:	3708      	adds	r7, #8
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}

080100fc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b082      	sub	sp, #8
 8010100:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010102:	f009 f941 	bl	8019388 <sys_arch_protect>
 8010106:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010108:	4b0f      	ldr	r3, [pc, #60]	@ (8010148 <pbuf_pool_is_empty+0x4c>)
 801010a:	781b      	ldrb	r3, [r3, #0]
 801010c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801010e:	4b0e      	ldr	r3, [pc, #56]	@ (8010148 <pbuf_pool_is_empty+0x4c>)
 8010110:	2201      	movs	r2, #1
 8010112:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	f009 f945 	bl	80193a4 <sys_arch_unprotect>

  if (!queued) {
 801011a:	78fb      	ldrb	r3, [r7, #3]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d10f      	bne.n	8010140 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010120:	2100      	movs	r1, #0
 8010122:	480a      	ldr	r0, [pc, #40]	@ (801014c <pbuf_pool_is_empty+0x50>)
 8010124:	f7fe feaa 	bl	800ee7c <tcpip_try_callback>
 8010128:	4603      	mov	r3, r0
 801012a:	2b00      	cmp	r3, #0
 801012c:	d008      	beq.n	8010140 <pbuf_pool_is_empty+0x44>
 801012e:	f009 f92b 	bl	8019388 <sys_arch_protect>
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	4b04      	ldr	r3, [pc, #16]	@ (8010148 <pbuf_pool_is_empty+0x4c>)
 8010136:	2200      	movs	r2, #0
 8010138:	701a      	strb	r2, [r3, #0]
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f009 f932 	bl	80193a4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010140:	bf00      	nop
 8010142:	3708      	adds	r7, #8
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}
 8010148:	200274a9 	.word	0x200274a9
 801014c:	080100e9 	.word	0x080100e9

08010150 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010150:	b480      	push	{r7}
 8010152:	b085      	sub	sp, #20
 8010154:	af00      	add	r7, sp, #0
 8010156:	60f8      	str	r0, [r7, #12]
 8010158:	60b9      	str	r1, [r7, #8]
 801015a:	4611      	mov	r1, r2
 801015c:	461a      	mov	r2, r3
 801015e:	460b      	mov	r3, r1
 8010160:	80fb      	strh	r3, [r7, #6]
 8010162:	4613      	mov	r3, r2
 8010164:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	2200      	movs	r2, #0
 801016a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	68ba      	ldr	r2, [r7, #8]
 8010170:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	88fa      	ldrh	r2, [r7, #6]
 8010176:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	88ba      	ldrh	r2, [r7, #4]
 801017c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801017e:	8b3b      	ldrh	r3, [r7, #24]
 8010180:	b2da      	uxtb	r2, r3
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	7f3a      	ldrb	r2, [r7, #28]
 801018a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	2201      	movs	r2, #1
 8010190:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	2200      	movs	r2, #0
 8010196:	73da      	strb	r2, [r3, #15]
}
 8010198:	bf00      	nop
 801019a:	3714      	adds	r7, #20
 801019c:	46bd      	mov	sp, r7
 801019e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a2:	4770      	bx	lr

080101a4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b08c      	sub	sp, #48	@ 0x30
 80101a8:	af02      	add	r7, sp, #8
 80101aa:	4603      	mov	r3, r0
 80101ac:	71fb      	strb	r3, [r7, #7]
 80101ae:	460b      	mov	r3, r1
 80101b0:	80bb      	strh	r3, [r7, #4]
 80101b2:	4613      	mov	r3, r2
 80101b4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80101b6:	79fb      	ldrb	r3, [r7, #7]
 80101b8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80101ba:	887b      	ldrh	r3, [r7, #2]
 80101bc:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80101c0:	d07f      	beq.n	80102c2 <pbuf_alloc+0x11e>
 80101c2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80101c6:	f300 80c8 	bgt.w	801035a <pbuf_alloc+0x1b6>
 80101ca:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80101ce:	d010      	beq.n	80101f2 <pbuf_alloc+0x4e>
 80101d0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80101d4:	f300 80c1 	bgt.w	801035a <pbuf_alloc+0x1b6>
 80101d8:	2b01      	cmp	r3, #1
 80101da:	d002      	beq.n	80101e2 <pbuf_alloc+0x3e>
 80101dc:	2b41      	cmp	r3, #65	@ 0x41
 80101de:	f040 80bc 	bne.w	801035a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80101e2:	887a      	ldrh	r2, [r7, #2]
 80101e4:	88bb      	ldrh	r3, [r7, #4]
 80101e6:	4619      	mov	r1, r3
 80101e8:	2000      	movs	r0, #0
 80101ea:	f000 f8d1 	bl	8010390 <pbuf_alloc_reference>
 80101ee:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80101f0:	e0bd      	b.n	801036e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80101f2:	2300      	movs	r3, #0
 80101f4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80101f6:	2300      	movs	r3, #0
 80101f8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80101fa:	88bb      	ldrh	r3, [r7, #4]
 80101fc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80101fe:	200c      	movs	r0, #12
 8010200:	f7ff fb9a 	bl	800f938 <memp_malloc>
 8010204:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010206:	693b      	ldr	r3, [r7, #16]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d109      	bne.n	8010220 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801020c:	f7ff ff76 	bl	80100fc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010212:	2b00      	cmp	r3, #0
 8010214:	d002      	beq.n	801021c <pbuf_alloc+0x78>
            pbuf_free(p);
 8010216:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010218:	f000 faa8 	bl	801076c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801021c:	2300      	movs	r3, #0
 801021e:	e0a7      	b.n	8010370 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010220:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010222:	3303      	adds	r3, #3
 8010224:	b29b      	uxth	r3, r3
 8010226:	f023 0303 	bic.w	r3, r3, #3
 801022a:	b29b      	uxth	r3, r3
 801022c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8010230:	b29b      	uxth	r3, r3
 8010232:	8b7a      	ldrh	r2, [r7, #26]
 8010234:	4293      	cmp	r3, r2
 8010236:	bf28      	it	cs
 8010238:	4613      	movcs	r3, r2
 801023a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801023c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801023e:	3310      	adds	r3, #16
 8010240:	693a      	ldr	r2, [r7, #16]
 8010242:	4413      	add	r3, r2
 8010244:	3303      	adds	r3, #3
 8010246:	f023 0303 	bic.w	r3, r3, #3
 801024a:	4618      	mov	r0, r3
 801024c:	89f9      	ldrh	r1, [r7, #14]
 801024e:	8b7a      	ldrh	r2, [r7, #26]
 8010250:	2300      	movs	r3, #0
 8010252:	9301      	str	r3, [sp, #4]
 8010254:	887b      	ldrh	r3, [r7, #2]
 8010256:	9300      	str	r3, [sp, #0]
 8010258:	460b      	mov	r3, r1
 801025a:	4601      	mov	r1, r0
 801025c:	6938      	ldr	r0, [r7, #16]
 801025e:	f7ff ff77 	bl	8010150 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010262:	693b      	ldr	r3, [r7, #16]
 8010264:	685b      	ldr	r3, [r3, #4]
 8010266:	f003 0303 	and.w	r3, r3, #3
 801026a:	2b00      	cmp	r3, #0
 801026c:	d006      	beq.n	801027c <pbuf_alloc+0xd8>
 801026e:	4b42      	ldr	r3, [pc, #264]	@ (8010378 <pbuf_alloc+0x1d4>)
 8010270:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010274:	4941      	ldr	r1, [pc, #260]	@ (801037c <pbuf_alloc+0x1d8>)
 8010276:	4842      	ldr	r0, [pc, #264]	@ (8010380 <pbuf_alloc+0x1dc>)
 8010278:	f009 fec6 	bl	801a008 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801027c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801027e:	3303      	adds	r3, #3
 8010280:	f023 0303 	bic.w	r3, r3, #3
 8010284:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8010288:	d106      	bne.n	8010298 <pbuf_alloc+0xf4>
 801028a:	4b3b      	ldr	r3, [pc, #236]	@ (8010378 <pbuf_alloc+0x1d4>)
 801028c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8010290:	493c      	ldr	r1, [pc, #240]	@ (8010384 <pbuf_alloc+0x1e0>)
 8010292:	483b      	ldr	r0, [pc, #236]	@ (8010380 <pbuf_alloc+0x1dc>)
 8010294:	f009 feb8 	bl	801a008 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801029a:	2b00      	cmp	r3, #0
 801029c:	d102      	bne.n	80102a4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801029e:	693b      	ldr	r3, [r7, #16]
 80102a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80102a2:	e002      	b.n	80102aa <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80102a4:	69fb      	ldr	r3, [r7, #28]
 80102a6:	693a      	ldr	r2, [r7, #16]
 80102a8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80102ae:	8b7a      	ldrh	r2, [r7, #26]
 80102b0:	89fb      	ldrh	r3, [r7, #14]
 80102b2:	1ad3      	subs	r3, r2, r3
 80102b4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80102b6:	2300      	movs	r3, #0
 80102b8:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80102ba:	8b7b      	ldrh	r3, [r7, #26]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d19e      	bne.n	80101fe <pbuf_alloc+0x5a>
      break;
 80102c0:	e055      	b.n	801036e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80102c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80102c4:	3303      	adds	r3, #3
 80102c6:	b29b      	uxth	r3, r3
 80102c8:	f023 0303 	bic.w	r3, r3, #3
 80102cc:	b29a      	uxth	r2, r3
 80102ce:	88bb      	ldrh	r3, [r7, #4]
 80102d0:	3303      	adds	r3, #3
 80102d2:	b29b      	uxth	r3, r3
 80102d4:	f023 0303 	bic.w	r3, r3, #3
 80102d8:	b29b      	uxth	r3, r3
 80102da:	4413      	add	r3, r2
 80102dc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80102de:	8b3b      	ldrh	r3, [r7, #24]
 80102e0:	3310      	adds	r3, #16
 80102e2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80102e4:	8b3a      	ldrh	r2, [r7, #24]
 80102e6:	88bb      	ldrh	r3, [r7, #4]
 80102e8:	3303      	adds	r3, #3
 80102ea:	f023 0303 	bic.w	r3, r3, #3
 80102ee:	429a      	cmp	r2, r3
 80102f0:	d306      	bcc.n	8010300 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80102f2:	8afa      	ldrh	r2, [r7, #22]
 80102f4:	88bb      	ldrh	r3, [r7, #4]
 80102f6:	3303      	adds	r3, #3
 80102f8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d201      	bcs.n	8010304 <pbuf_alloc+0x160>
        return NULL;
 8010300:	2300      	movs	r3, #0
 8010302:	e035      	b.n	8010370 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010304:	8afb      	ldrh	r3, [r7, #22]
 8010306:	4618      	mov	r0, r3
 8010308:	f7ff f972 	bl	800f5f0 <mem_malloc>
 801030c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 801030e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010310:	2b00      	cmp	r3, #0
 8010312:	d101      	bne.n	8010318 <pbuf_alloc+0x174>
        return NULL;
 8010314:	2300      	movs	r3, #0
 8010316:	e02b      	b.n	8010370 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010318:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801031a:	3310      	adds	r3, #16
 801031c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801031e:	4413      	add	r3, r2
 8010320:	3303      	adds	r3, #3
 8010322:	f023 0303 	bic.w	r3, r3, #3
 8010326:	4618      	mov	r0, r3
 8010328:	88b9      	ldrh	r1, [r7, #4]
 801032a:	88ba      	ldrh	r2, [r7, #4]
 801032c:	2300      	movs	r3, #0
 801032e:	9301      	str	r3, [sp, #4]
 8010330:	887b      	ldrh	r3, [r7, #2]
 8010332:	9300      	str	r3, [sp, #0]
 8010334:	460b      	mov	r3, r1
 8010336:	4601      	mov	r1, r0
 8010338:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801033a:	f7ff ff09 	bl	8010150 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801033e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010340:	685b      	ldr	r3, [r3, #4]
 8010342:	f003 0303 	and.w	r3, r3, #3
 8010346:	2b00      	cmp	r3, #0
 8010348:	d010      	beq.n	801036c <pbuf_alloc+0x1c8>
 801034a:	4b0b      	ldr	r3, [pc, #44]	@ (8010378 <pbuf_alloc+0x1d4>)
 801034c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8010350:	490d      	ldr	r1, [pc, #52]	@ (8010388 <pbuf_alloc+0x1e4>)
 8010352:	480b      	ldr	r0, [pc, #44]	@ (8010380 <pbuf_alloc+0x1dc>)
 8010354:	f009 fe58 	bl	801a008 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010358:	e008      	b.n	801036c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801035a:	4b07      	ldr	r3, [pc, #28]	@ (8010378 <pbuf_alloc+0x1d4>)
 801035c:	f240 1227 	movw	r2, #295	@ 0x127
 8010360:	490a      	ldr	r1, [pc, #40]	@ (801038c <pbuf_alloc+0x1e8>)
 8010362:	4807      	ldr	r0, [pc, #28]	@ (8010380 <pbuf_alloc+0x1dc>)
 8010364:	f009 fe50 	bl	801a008 <iprintf>
      return NULL;
 8010368:	2300      	movs	r3, #0
 801036a:	e001      	b.n	8010370 <pbuf_alloc+0x1cc>
      break;
 801036c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801036e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010370:	4618      	mov	r0, r3
 8010372:	3728      	adds	r7, #40	@ 0x28
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}
 8010378:	0801b8fc 	.word	0x0801b8fc
 801037c:	0801b92c 	.word	0x0801b92c
 8010380:	0801b95c 	.word	0x0801b95c
 8010384:	0801b984 	.word	0x0801b984
 8010388:	0801b9b8 	.word	0x0801b9b8
 801038c:	0801b9e4 	.word	0x0801b9e4

08010390 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b086      	sub	sp, #24
 8010394:	af02      	add	r7, sp, #8
 8010396:	6078      	str	r0, [r7, #4]
 8010398:	460b      	mov	r3, r1
 801039a:	807b      	strh	r3, [r7, #2]
 801039c:	4613      	mov	r3, r2
 801039e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80103a0:	883b      	ldrh	r3, [r7, #0]
 80103a2:	2b41      	cmp	r3, #65	@ 0x41
 80103a4:	d009      	beq.n	80103ba <pbuf_alloc_reference+0x2a>
 80103a6:	883b      	ldrh	r3, [r7, #0]
 80103a8:	2b01      	cmp	r3, #1
 80103aa:	d006      	beq.n	80103ba <pbuf_alloc_reference+0x2a>
 80103ac:	4b0f      	ldr	r3, [pc, #60]	@ (80103ec <pbuf_alloc_reference+0x5c>)
 80103ae:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80103b2:	490f      	ldr	r1, [pc, #60]	@ (80103f0 <pbuf_alloc_reference+0x60>)
 80103b4:	480f      	ldr	r0, [pc, #60]	@ (80103f4 <pbuf_alloc_reference+0x64>)
 80103b6:	f009 fe27 	bl	801a008 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80103ba:	200b      	movs	r0, #11
 80103bc:	f7ff fabc 	bl	800f938 <memp_malloc>
 80103c0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d101      	bne.n	80103cc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80103c8:	2300      	movs	r3, #0
 80103ca:	e00b      	b.n	80103e4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80103cc:	8879      	ldrh	r1, [r7, #2]
 80103ce:	887a      	ldrh	r2, [r7, #2]
 80103d0:	2300      	movs	r3, #0
 80103d2:	9301      	str	r3, [sp, #4]
 80103d4:	883b      	ldrh	r3, [r7, #0]
 80103d6:	9300      	str	r3, [sp, #0]
 80103d8:	460b      	mov	r3, r1
 80103da:	6879      	ldr	r1, [r7, #4]
 80103dc:	68f8      	ldr	r0, [r7, #12]
 80103de:	f7ff feb7 	bl	8010150 <pbuf_init_alloced_pbuf>
  return p;
 80103e2:	68fb      	ldr	r3, [r7, #12]
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3710      	adds	r7, #16
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}
 80103ec:	0801b8fc 	.word	0x0801b8fc
 80103f0:	0801ba00 	.word	0x0801ba00
 80103f4:	0801b95c 	.word	0x0801b95c

080103f8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b088      	sub	sp, #32
 80103fc:	af02      	add	r7, sp, #8
 80103fe:	607b      	str	r3, [r7, #4]
 8010400:	4603      	mov	r3, r0
 8010402:	73fb      	strb	r3, [r7, #15]
 8010404:	460b      	mov	r3, r1
 8010406:	81bb      	strh	r3, [r7, #12]
 8010408:	4613      	mov	r3, r2
 801040a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801040c:	7bfb      	ldrb	r3, [r7, #15]
 801040e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010410:	8a7b      	ldrh	r3, [r7, #18]
 8010412:	3303      	adds	r3, #3
 8010414:	f023 0203 	bic.w	r2, r3, #3
 8010418:	89bb      	ldrh	r3, [r7, #12]
 801041a:	441a      	add	r2, r3
 801041c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801041e:	429a      	cmp	r2, r3
 8010420:	d901      	bls.n	8010426 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010422:	2300      	movs	r3, #0
 8010424:	e018      	b.n	8010458 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010426:	6a3b      	ldr	r3, [r7, #32]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d007      	beq.n	801043c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801042c:	8a7b      	ldrh	r3, [r7, #18]
 801042e:	3303      	adds	r3, #3
 8010430:	f023 0303 	bic.w	r3, r3, #3
 8010434:	6a3a      	ldr	r2, [r7, #32]
 8010436:	4413      	add	r3, r2
 8010438:	617b      	str	r3, [r7, #20]
 801043a:	e001      	b.n	8010440 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801043c:	2300      	movs	r3, #0
 801043e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010440:	6878      	ldr	r0, [r7, #4]
 8010442:	89b9      	ldrh	r1, [r7, #12]
 8010444:	89ba      	ldrh	r2, [r7, #12]
 8010446:	2302      	movs	r3, #2
 8010448:	9301      	str	r3, [sp, #4]
 801044a:	897b      	ldrh	r3, [r7, #10]
 801044c:	9300      	str	r3, [sp, #0]
 801044e:	460b      	mov	r3, r1
 8010450:	6979      	ldr	r1, [r7, #20]
 8010452:	f7ff fe7d 	bl	8010150 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010456:	687b      	ldr	r3, [r7, #4]
}
 8010458:	4618      	mov	r0, r3
 801045a:	3718      	adds	r7, #24
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}

08010460 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b084      	sub	sp, #16
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	460b      	mov	r3, r1
 801046a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d106      	bne.n	8010480 <pbuf_realloc+0x20>
 8010472:	4b3a      	ldr	r3, [pc, #232]	@ (801055c <pbuf_realloc+0xfc>)
 8010474:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8010478:	4939      	ldr	r1, [pc, #228]	@ (8010560 <pbuf_realloc+0x100>)
 801047a:	483a      	ldr	r0, [pc, #232]	@ (8010564 <pbuf_realloc+0x104>)
 801047c:	f009 fdc4 	bl	801a008 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	891b      	ldrh	r3, [r3, #8]
 8010484:	887a      	ldrh	r2, [r7, #2]
 8010486:	429a      	cmp	r2, r3
 8010488:	d263      	bcs.n	8010552 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	891a      	ldrh	r2, [r3, #8]
 801048e:	887b      	ldrh	r3, [r7, #2]
 8010490:	1ad3      	subs	r3, r2, r3
 8010492:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010494:	887b      	ldrh	r3, [r7, #2]
 8010496:	817b      	strh	r3, [r7, #10]
  q = p;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801049c:	e018      	b.n	80104d0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	895b      	ldrh	r3, [r3, #10]
 80104a2:	897a      	ldrh	r2, [r7, #10]
 80104a4:	1ad3      	subs	r3, r2, r3
 80104a6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	891a      	ldrh	r2, [r3, #8]
 80104ac:	893b      	ldrh	r3, [r7, #8]
 80104ae:	1ad3      	subs	r3, r2, r3
 80104b0:	b29a      	uxth	r2, r3
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d106      	bne.n	80104d0 <pbuf_realloc+0x70>
 80104c2:	4b26      	ldr	r3, [pc, #152]	@ (801055c <pbuf_realloc+0xfc>)
 80104c4:	f240 12af 	movw	r2, #431	@ 0x1af
 80104c8:	4927      	ldr	r1, [pc, #156]	@ (8010568 <pbuf_realloc+0x108>)
 80104ca:	4826      	ldr	r0, [pc, #152]	@ (8010564 <pbuf_realloc+0x104>)
 80104cc:	f009 fd9c 	bl	801a008 <iprintf>
  while (rem_len > q->len) {
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	895b      	ldrh	r3, [r3, #10]
 80104d4:	897a      	ldrh	r2, [r7, #10]
 80104d6:	429a      	cmp	r2, r3
 80104d8:	d8e1      	bhi.n	801049e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	7b1b      	ldrb	r3, [r3, #12]
 80104de:	f003 030f 	and.w	r3, r3, #15
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d121      	bne.n	801052a <pbuf_realloc+0xca>
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	895b      	ldrh	r3, [r3, #10]
 80104ea:	897a      	ldrh	r2, [r7, #10]
 80104ec:	429a      	cmp	r2, r3
 80104ee:	d01c      	beq.n	801052a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	7b5b      	ldrb	r3, [r3, #13]
 80104f4:	f003 0302 	and.w	r3, r3, #2
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d116      	bne.n	801052a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	685a      	ldr	r2, [r3, #4]
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	1ad3      	subs	r3, r2, r3
 8010504:	b29a      	uxth	r2, r3
 8010506:	897b      	ldrh	r3, [r7, #10]
 8010508:	4413      	add	r3, r2
 801050a:	b29b      	uxth	r3, r3
 801050c:	4619      	mov	r1, r3
 801050e:	68f8      	ldr	r0, [r7, #12]
 8010510:	f7fe ff64 	bl	800f3dc <mem_trim>
 8010514:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d106      	bne.n	801052a <pbuf_realloc+0xca>
 801051c:	4b0f      	ldr	r3, [pc, #60]	@ (801055c <pbuf_realloc+0xfc>)
 801051e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8010522:	4912      	ldr	r1, [pc, #72]	@ (801056c <pbuf_realloc+0x10c>)
 8010524:	480f      	ldr	r0, [pc, #60]	@ (8010564 <pbuf_realloc+0x104>)
 8010526:	f009 fd6f 	bl	801a008 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	897a      	ldrh	r2, [r7, #10]
 801052e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	895a      	ldrh	r2, [r3, #10]
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d004      	beq.n	801054a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	4618      	mov	r0, r3
 8010546:	f000 f911 	bl	801076c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	2200      	movs	r2, #0
 801054e:	601a      	str	r2, [r3, #0]
 8010550:	e000      	b.n	8010554 <pbuf_realloc+0xf4>
    return;
 8010552:	bf00      	nop

}
 8010554:	3710      	adds	r7, #16
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}
 801055a:	bf00      	nop
 801055c:	0801b8fc 	.word	0x0801b8fc
 8010560:	0801ba14 	.word	0x0801ba14
 8010564:	0801b95c 	.word	0x0801b95c
 8010568:	0801ba2c 	.word	0x0801ba2c
 801056c:	0801ba44 	.word	0x0801ba44

08010570 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b086      	sub	sp, #24
 8010574:	af00      	add	r7, sp, #0
 8010576:	60f8      	str	r0, [r7, #12]
 8010578:	60b9      	str	r1, [r7, #8]
 801057a:	4613      	mov	r3, r2
 801057c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d106      	bne.n	8010592 <pbuf_add_header_impl+0x22>
 8010584:	4b2b      	ldr	r3, [pc, #172]	@ (8010634 <pbuf_add_header_impl+0xc4>)
 8010586:	f240 12df 	movw	r2, #479	@ 0x1df
 801058a:	492b      	ldr	r1, [pc, #172]	@ (8010638 <pbuf_add_header_impl+0xc8>)
 801058c:	482b      	ldr	r0, [pc, #172]	@ (801063c <pbuf_add_header_impl+0xcc>)
 801058e:	f009 fd3b 	bl	801a008 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d003      	beq.n	80105a0 <pbuf_add_header_impl+0x30>
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801059e:	d301      	bcc.n	80105a4 <pbuf_add_header_impl+0x34>
    return 1;
 80105a0:	2301      	movs	r3, #1
 80105a2:	e043      	b.n	801062c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d101      	bne.n	80105ae <pbuf_add_header_impl+0x3e>
    return 0;
 80105aa:	2300      	movs	r3, #0
 80105ac:	e03e      	b.n	801062c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	891a      	ldrh	r2, [r3, #8]
 80105b6:	8a7b      	ldrh	r3, [r7, #18]
 80105b8:	4413      	add	r3, r2
 80105ba:	b29b      	uxth	r3, r3
 80105bc:	8a7a      	ldrh	r2, [r7, #18]
 80105be:	429a      	cmp	r2, r3
 80105c0:	d901      	bls.n	80105c6 <pbuf_add_header_impl+0x56>
    return 1;
 80105c2:	2301      	movs	r3, #1
 80105c4:	e032      	b.n	801062c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	7b1b      	ldrb	r3, [r3, #12]
 80105ca:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80105cc:	8a3b      	ldrh	r3, [r7, #16]
 80105ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d00c      	beq.n	80105f0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	685a      	ldr	r2, [r3, #4]
 80105da:	68bb      	ldr	r3, [r7, #8]
 80105dc:	425b      	negs	r3, r3
 80105de:	4413      	add	r3, r2
 80105e0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	3310      	adds	r3, #16
 80105e6:	697a      	ldr	r2, [r7, #20]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d20d      	bcs.n	8010608 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80105ec:	2301      	movs	r3, #1
 80105ee:	e01d      	b.n	801062c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80105f0:	79fb      	ldrb	r3, [r7, #7]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d006      	beq.n	8010604 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	685a      	ldr	r2, [r3, #4]
 80105fa:	68bb      	ldr	r3, [r7, #8]
 80105fc:	425b      	negs	r3, r3
 80105fe:	4413      	add	r3, r2
 8010600:	617b      	str	r3, [r7, #20]
 8010602:	e001      	b.n	8010608 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010604:	2301      	movs	r3, #1
 8010606:	e011      	b.n	801062c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	697a      	ldr	r2, [r7, #20]
 801060c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	895a      	ldrh	r2, [r3, #10]
 8010612:	8a7b      	ldrh	r3, [r7, #18]
 8010614:	4413      	add	r3, r2
 8010616:	b29a      	uxth	r2, r3
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	891a      	ldrh	r2, [r3, #8]
 8010620:	8a7b      	ldrh	r3, [r7, #18]
 8010622:	4413      	add	r3, r2
 8010624:	b29a      	uxth	r2, r3
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	811a      	strh	r2, [r3, #8]


  return 0;
 801062a:	2300      	movs	r3, #0
}
 801062c:	4618      	mov	r0, r3
 801062e:	3718      	adds	r7, #24
 8010630:	46bd      	mov	sp, r7
 8010632:	bd80      	pop	{r7, pc}
 8010634:	0801b8fc 	.word	0x0801b8fc
 8010638:	0801ba60 	.word	0x0801ba60
 801063c:	0801b95c 	.word	0x0801b95c

08010640 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b082      	sub	sp, #8
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801064a:	2200      	movs	r2, #0
 801064c:	6839      	ldr	r1, [r7, #0]
 801064e:	6878      	ldr	r0, [r7, #4]
 8010650:	f7ff ff8e 	bl	8010570 <pbuf_add_header_impl>
 8010654:	4603      	mov	r3, r0
}
 8010656:	4618      	mov	r0, r3
 8010658:	3708      	adds	r7, #8
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}
	...

08010660 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b084      	sub	sp, #16
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
 8010668:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d106      	bne.n	801067e <pbuf_remove_header+0x1e>
 8010670:	4b20      	ldr	r3, [pc, #128]	@ (80106f4 <pbuf_remove_header+0x94>)
 8010672:	f240 224b 	movw	r2, #587	@ 0x24b
 8010676:	4920      	ldr	r1, [pc, #128]	@ (80106f8 <pbuf_remove_header+0x98>)
 8010678:	4820      	ldr	r0, [pc, #128]	@ (80106fc <pbuf_remove_header+0x9c>)
 801067a:	f009 fcc5 	bl	801a008 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d003      	beq.n	801068c <pbuf_remove_header+0x2c>
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801068a:	d301      	bcc.n	8010690 <pbuf_remove_header+0x30>
    return 1;
 801068c:	2301      	movs	r3, #1
 801068e:	e02c      	b.n	80106ea <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d101      	bne.n	801069a <pbuf_remove_header+0x3a>
    return 0;
 8010696:	2300      	movs	r3, #0
 8010698:	e027      	b.n	80106ea <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	895b      	ldrh	r3, [r3, #10]
 80106a2:	89fa      	ldrh	r2, [r7, #14]
 80106a4:	429a      	cmp	r2, r3
 80106a6:	d908      	bls.n	80106ba <pbuf_remove_header+0x5a>
 80106a8:	4b12      	ldr	r3, [pc, #72]	@ (80106f4 <pbuf_remove_header+0x94>)
 80106aa:	f240 2255 	movw	r2, #597	@ 0x255
 80106ae:	4914      	ldr	r1, [pc, #80]	@ (8010700 <pbuf_remove_header+0xa0>)
 80106b0:	4812      	ldr	r0, [pc, #72]	@ (80106fc <pbuf_remove_header+0x9c>)
 80106b2:	f009 fca9 	bl	801a008 <iprintf>
 80106b6:	2301      	movs	r3, #1
 80106b8:	e017      	b.n	80106ea <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	685b      	ldr	r3, [r3, #4]
 80106be:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	685a      	ldr	r2, [r3, #4]
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	441a      	add	r2, r3
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	895a      	ldrh	r2, [r3, #10]
 80106d0:	89fb      	ldrh	r3, [r7, #14]
 80106d2:	1ad3      	subs	r3, r2, r3
 80106d4:	b29a      	uxth	r2, r3
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	891a      	ldrh	r2, [r3, #8]
 80106de:	89fb      	ldrh	r3, [r7, #14]
 80106e0:	1ad3      	subs	r3, r2, r3
 80106e2:	b29a      	uxth	r2, r3
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80106e8:	2300      	movs	r3, #0
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3710      	adds	r7, #16
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}
 80106f2:	bf00      	nop
 80106f4:	0801b8fc 	.word	0x0801b8fc
 80106f8:	0801ba60 	.word	0x0801ba60
 80106fc:	0801b95c 	.word	0x0801b95c
 8010700:	0801ba6c 	.word	0x0801ba6c

08010704 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b082      	sub	sp, #8
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
 801070c:	460b      	mov	r3, r1
 801070e:	807b      	strh	r3, [r7, #2]
 8010710:	4613      	mov	r3, r2
 8010712:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010714:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010718:	2b00      	cmp	r3, #0
 801071a:	da08      	bge.n	801072e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801071c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010720:	425b      	negs	r3, r3
 8010722:	4619      	mov	r1, r3
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f7ff ff9b 	bl	8010660 <pbuf_remove_header>
 801072a:	4603      	mov	r3, r0
 801072c:	e007      	b.n	801073e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801072e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010732:	787a      	ldrb	r2, [r7, #1]
 8010734:	4619      	mov	r1, r3
 8010736:	6878      	ldr	r0, [r7, #4]
 8010738:	f7ff ff1a 	bl	8010570 <pbuf_add_header_impl>
 801073c:	4603      	mov	r3, r0
  }
}
 801073e:	4618      	mov	r0, r3
 8010740:	3708      	adds	r7, #8
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}

08010746 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010746:	b580      	push	{r7, lr}
 8010748:	b082      	sub	sp, #8
 801074a:	af00      	add	r7, sp, #0
 801074c:	6078      	str	r0, [r7, #4]
 801074e:	460b      	mov	r3, r1
 8010750:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8010752:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010756:	2201      	movs	r2, #1
 8010758:	4619      	mov	r1, r3
 801075a:	6878      	ldr	r0, [r7, #4]
 801075c:	f7ff ffd2 	bl	8010704 <pbuf_header_impl>
 8010760:	4603      	mov	r3, r0
}
 8010762:	4618      	mov	r0, r3
 8010764:	3708      	adds	r7, #8
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}
	...

0801076c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b088      	sub	sp, #32
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d10b      	bne.n	8010792 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d106      	bne.n	801078e <pbuf_free+0x22>
 8010780:	4b3b      	ldr	r3, [pc, #236]	@ (8010870 <pbuf_free+0x104>)
 8010782:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8010786:	493b      	ldr	r1, [pc, #236]	@ (8010874 <pbuf_free+0x108>)
 8010788:	483b      	ldr	r0, [pc, #236]	@ (8010878 <pbuf_free+0x10c>)
 801078a:	f009 fc3d 	bl	801a008 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801078e:	2300      	movs	r3, #0
 8010790:	e069      	b.n	8010866 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010792:	2300      	movs	r3, #0
 8010794:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010796:	e062      	b.n	801085e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010798:	f008 fdf6 	bl	8019388 <sys_arch_protect>
 801079c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	7b9b      	ldrb	r3, [r3, #14]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d106      	bne.n	80107b4 <pbuf_free+0x48>
 80107a6:	4b32      	ldr	r3, [pc, #200]	@ (8010870 <pbuf_free+0x104>)
 80107a8:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80107ac:	4933      	ldr	r1, [pc, #204]	@ (801087c <pbuf_free+0x110>)
 80107ae:	4832      	ldr	r0, [pc, #200]	@ (8010878 <pbuf_free+0x10c>)
 80107b0:	f009 fc2a 	bl	801a008 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	7b9b      	ldrb	r3, [r3, #14]
 80107b8:	3b01      	subs	r3, #1
 80107ba:	b2da      	uxtb	r2, r3
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	739a      	strb	r2, [r3, #14]
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	7b9b      	ldrb	r3, [r3, #14]
 80107c4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80107c6:	69b8      	ldr	r0, [r7, #24]
 80107c8:	f008 fdec 	bl	80193a4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80107cc:	7dfb      	ldrb	r3, [r7, #23]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d143      	bne.n	801085a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	7b1b      	ldrb	r3, [r3, #12]
 80107dc:	f003 030f 	and.w	r3, r3, #15
 80107e0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	7b5b      	ldrb	r3, [r3, #13]
 80107e6:	f003 0302 	and.w	r3, r3, #2
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d011      	beq.n	8010812 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80107f2:	68bb      	ldr	r3, [r7, #8]
 80107f4:	691b      	ldr	r3, [r3, #16]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d106      	bne.n	8010808 <pbuf_free+0x9c>
 80107fa:	4b1d      	ldr	r3, [pc, #116]	@ (8010870 <pbuf_free+0x104>)
 80107fc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8010800:	491f      	ldr	r1, [pc, #124]	@ (8010880 <pbuf_free+0x114>)
 8010802:	481d      	ldr	r0, [pc, #116]	@ (8010878 <pbuf_free+0x10c>)
 8010804:	f009 fc00 	bl	801a008 <iprintf>
        pc->custom_free_function(p);
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	691b      	ldr	r3, [r3, #16]
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	4798      	blx	r3
 8010810:	e01d      	b.n	801084e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010812:	7bfb      	ldrb	r3, [r7, #15]
 8010814:	2b02      	cmp	r3, #2
 8010816:	d104      	bne.n	8010822 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8010818:	6879      	ldr	r1, [r7, #4]
 801081a:	200c      	movs	r0, #12
 801081c:	f7ff f902 	bl	800fa24 <memp_free>
 8010820:	e015      	b.n	801084e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010822:	7bfb      	ldrb	r3, [r7, #15]
 8010824:	2b01      	cmp	r3, #1
 8010826:	d104      	bne.n	8010832 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8010828:	6879      	ldr	r1, [r7, #4]
 801082a:	200b      	movs	r0, #11
 801082c:	f7ff f8fa 	bl	800fa24 <memp_free>
 8010830:	e00d      	b.n	801084e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010832:	7bfb      	ldrb	r3, [r7, #15]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d103      	bne.n	8010840 <pbuf_free+0xd4>
          mem_free(p);
 8010838:	6878      	ldr	r0, [r7, #4]
 801083a:	f7fe fd3f 	bl	800f2bc <mem_free>
 801083e:	e006      	b.n	801084e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010840:	4b0b      	ldr	r3, [pc, #44]	@ (8010870 <pbuf_free+0x104>)
 8010842:	f240 320f 	movw	r2, #783	@ 0x30f
 8010846:	490f      	ldr	r1, [pc, #60]	@ (8010884 <pbuf_free+0x118>)
 8010848:	480b      	ldr	r0, [pc, #44]	@ (8010878 <pbuf_free+0x10c>)
 801084a:	f009 fbdd 	bl	801a008 <iprintf>
        }
      }
      count++;
 801084e:	7ffb      	ldrb	r3, [r7, #31]
 8010850:	3301      	adds	r3, #1
 8010852:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8010854:	693b      	ldr	r3, [r7, #16]
 8010856:	607b      	str	r3, [r7, #4]
 8010858:	e001      	b.n	801085e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801085a:	2300      	movs	r3, #0
 801085c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d199      	bne.n	8010798 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010864:	7ffb      	ldrb	r3, [r7, #31]
}
 8010866:	4618      	mov	r0, r3
 8010868:	3720      	adds	r7, #32
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
 801086e:	bf00      	nop
 8010870:	0801b8fc 	.word	0x0801b8fc
 8010874:	0801ba60 	.word	0x0801ba60
 8010878:	0801b95c 	.word	0x0801b95c
 801087c:	0801ba8c 	.word	0x0801ba8c
 8010880:	0801baa4 	.word	0x0801baa4
 8010884:	0801bac8 	.word	0x0801bac8

08010888 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010888:	b480      	push	{r7}
 801088a:	b085      	sub	sp, #20
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010890:	2300      	movs	r3, #0
 8010892:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010894:	e005      	b.n	80108a2 <pbuf_clen+0x1a>
    ++len;
 8010896:	89fb      	ldrh	r3, [r7, #14]
 8010898:	3301      	adds	r3, #1
 801089a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d1f6      	bne.n	8010896 <pbuf_clen+0xe>
  }
  return len;
 80108a8:	89fb      	ldrh	r3, [r7, #14]
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	3714      	adds	r7, #20
 80108ae:	46bd      	mov	sp, r7
 80108b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b4:	4770      	bx	lr
	...

080108b8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b084      	sub	sp, #16
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d016      	beq.n	80108f4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80108c6:	f008 fd5f 	bl	8019388 <sys_arch_protect>
 80108ca:	60f8      	str	r0, [r7, #12]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	7b9b      	ldrb	r3, [r3, #14]
 80108d0:	3301      	adds	r3, #1
 80108d2:	b2da      	uxtb	r2, r3
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	739a      	strb	r2, [r3, #14]
 80108d8:	68f8      	ldr	r0, [r7, #12]
 80108da:	f008 fd63 	bl	80193a4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	7b9b      	ldrb	r3, [r3, #14]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d106      	bne.n	80108f4 <pbuf_ref+0x3c>
 80108e6:	4b05      	ldr	r3, [pc, #20]	@ (80108fc <pbuf_ref+0x44>)
 80108e8:	f240 3242 	movw	r2, #834	@ 0x342
 80108ec:	4904      	ldr	r1, [pc, #16]	@ (8010900 <pbuf_ref+0x48>)
 80108ee:	4805      	ldr	r0, [pc, #20]	@ (8010904 <pbuf_ref+0x4c>)
 80108f0:	f009 fb8a 	bl	801a008 <iprintf>
  }
}
 80108f4:	bf00      	nop
 80108f6:	3710      	adds	r7, #16
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}
 80108fc:	0801b8fc 	.word	0x0801b8fc
 8010900:	0801badc 	.word	0x0801badc
 8010904:	0801b95c 	.word	0x0801b95c

08010908 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b084      	sub	sp, #16
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
 8010910:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d002      	beq.n	801091e <pbuf_cat+0x16>
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d107      	bne.n	801092e <pbuf_cat+0x26>
 801091e:	4b20      	ldr	r3, [pc, #128]	@ (80109a0 <pbuf_cat+0x98>)
 8010920:	f240 3259 	movw	r2, #857	@ 0x359
 8010924:	491f      	ldr	r1, [pc, #124]	@ (80109a4 <pbuf_cat+0x9c>)
 8010926:	4820      	ldr	r0, [pc, #128]	@ (80109a8 <pbuf_cat+0xa0>)
 8010928:	f009 fb6e 	bl	801a008 <iprintf>
 801092c:	e034      	b.n	8010998 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	60fb      	str	r3, [r7, #12]
 8010932:	e00a      	b.n	801094a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	891a      	ldrh	r2, [r3, #8]
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	891b      	ldrh	r3, [r3, #8]
 801093c:	4413      	add	r3, r2
 801093e:	b29a      	uxth	r2, r3
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	60fb      	str	r3, [r7, #12]
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d1f0      	bne.n	8010934 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	891a      	ldrh	r2, [r3, #8]
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	895b      	ldrh	r3, [r3, #10]
 801095a:	429a      	cmp	r2, r3
 801095c:	d006      	beq.n	801096c <pbuf_cat+0x64>
 801095e:	4b10      	ldr	r3, [pc, #64]	@ (80109a0 <pbuf_cat+0x98>)
 8010960:	f240 3262 	movw	r2, #866	@ 0x362
 8010964:	4911      	ldr	r1, [pc, #68]	@ (80109ac <pbuf_cat+0xa4>)
 8010966:	4810      	ldr	r0, [pc, #64]	@ (80109a8 <pbuf_cat+0xa0>)
 8010968:	f009 fb4e 	bl	801a008 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d006      	beq.n	8010982 <pbuf_cat+0x7a>
 8010974:	4b0a      	ldr	r3, [pc, #40]	@ (80109a0 <pbuf_cat+0x98>)
 8010976:	f240 3263 	movw	r2, #867	@ 0x363
 801097a:	490d      	ldr	r1, [pc, #52]	@ (80109b0 <pbuf_cat+0xa8>)
 801097c:	480a      	ldr	r0, [pc, #40]	@ (80109a8 <pbuf_cat+0xa0>)
 801097e:	f009 fb43 	bl	801a008 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	891a      	ldrh	r2, [r3, #8]
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	891b      	ldrh	r3, [r3, #8]
 801098a:	4413      	add	r3, r2
 801098c:	b29a      	uxth	r2, r3
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	683a      	ldr	r2, [r7, #0]
 8010996:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010998:	3710      	adds	r7, #16
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}
 801099e:	bf00      	nop
 80109a0:	0801b8fc 	.word	0x0801b8fc
 80109a4:	0801baf0 	.word	0x0801baf0
 80109a8:	0801b95c 	.word	0x0801b95c
 80109ac:	0801bb28 	.word	0x0801bb28
 80109b0:	0801bb58 	.word	0x0801bb58

080109b4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b082      	sub	sp, #8
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80109be:	6839      	ldr	r1, [r7, #0]
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	f7ff ffa1 	bl	8010908 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80109c6:	6838      	ldr	r0, [r7, #0]
 80109c8:	f7ff ff76 	bl	80108b8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80109cc:	bf00      	nop
 80109ce:	3708      	adds	r7, #8
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}

080109d4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b086      	sub	sp, #24
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
 80109dc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80109de:	2300      	movs	r3, #0
 80109e0:	617b      	str	r3, [r7, #20]
 80109e2:	2300      	movs	r3, #0
 80109e4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d008      	beq.n	80109fe <pbuf_copy+0x2a>
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d005      	beq.n	80109fe <pbuf_copy+0x2a>
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	891a      	ldrh	r2, [r3, #8]
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	891b      	ldrh	r3, [r3, #8]
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d209      	bcs.n	8010a12 <pbuf_copy+0x3e>
 80109fe:	4b57      	ldr	r3, [pc, #348]	@ (8010b5c <pbuf_copy+0x188>)
 8010a00:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8010a04:	4956      	ldr	r1, [pc, #344]	@ (8010b60 <pbuf_copy+0x18c>)
 8010a06:	4857      	ldr	r0, [pc, #348]	@ (8010b64 <pbuf_copy+0x190>)
 8010a08:	f009 fafe 	bl	801a008 <iprintf>
 8010a0c:	f06f 030f 	mvn.w	r3, #15
 8010a10:	e09f      	b.n	8010b52 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	895b      	ldrh	r3, [r3, #10]
 8010a16:	461a      	mov	r2, r3
 8010a18:	697b      	ldr	r3, [r7, #20]
 8010a1a:	1ad2      	subs	r2, r2, r3
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	895b      	ldrh	r3, [r3, #10]
 8010a20:	4619      	mov	r1, r3
 8010a22:	693b      	ldr	r3, [r7, #16]
 8010a24:	1acb      	subs	r3, r1, r3
 8010a26:	429a      	cmp	r2, r3
 8010a28:	d306      	bcc.n	8010a38 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	895b      	ldrh	r3, [r3, #10]
 8010a2e:	461a      	mov	r2, r3
 8010a30:	693b      	ldr	r3, [r7, #16]
 8010a32:	1ad3      	subs	r3, r2, r3
 8010a34:	60fb      	str	r3, [r7, #12]
 8010a36:	e005      	b.n	8010a44 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	895b      	ldrh	r3, [r3, #10]
 8010a3c:	461a      	mov	r2, r3
 8010a3e:	697b      	ldr	r3, [r7, #20]
 8010a40:	1ad3      	subs	r3, r2, r3
 8010a42:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	685a      	ldr	r2, [r3, #4]
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	18d0      	adds	r0, r2, r3
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	685a      	ldr	r2, [r3, #4]
 8010a50:	693b      	ldr	r3, [r7, #16]
 8010a52:	4413      	add	r3, r2
 8010a54:	68fa      	ldr	r2, [r7, #12]
 8010a56:	4619      	mov	r1, r3
 8010a58:	f009 fd01 	bl	801a45e <memcpy>
    offset_to += len;
 8010a5c:	697a      	ldr	r2, [r7, #20]
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	4413      	add	r3, r2
 8010a62:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010a64:	693a      	ldr	r2, [r7, #16]
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	4413      	add	r3, r2
 8010a6a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	895b      	ldrh	r3, [r3, #10]
 8010a70:	461a      	mov	r2, r3
 8010a72:	697b      	ldr	r3, [r7, #20]
 8010a74:	4293      	cmp	r3, r2
 8010a76:	d906      	bls.n	8010a86 <pbuf_copy+0xb2>
 8010a78:	4b38      	ldr	r3, [pc, #224]	@ (8010b5c <pbuf_copy+0x188>)
 8010a7a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8010a7e:	493a      	ldr	r1, [pc, #232]	@ (8010b68 <pbuf_copy+0x194>)
 8010a80:	4838      	ldr	r0, [pc, #224]	@ (8010b64 <pbuf_copy+0x190>)
 8010a82:	f009 fac1 	bl	801a008 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	895b      	ldrh	r3, [r3, #10]
 8010a8a:	461a      	mov	r2, r3
 8010a8c:	693b      	ldr	r3, [r7, #16]
 8010a8e:	4293      	cmp	r3, r2
 8010a90:	d906      	bls.n	8010aa0 <pbuf_copy+0xcc>
 8010a92:	4b32      	ldr	r3, [pc, #200]	@ (8010b5c <pbuf_copy+0x188>)
 8010a94:	f240 32da 	movw	r2, #986	@ 0x3da
 8010a98:	4934      	ldr	r1, [pc, #208]	@ (8010b6c <pbuf_copy+0x198>)
 8010a9a:	4832      	ldr	r0, [pc, #200]	@ (8010b64 <pbuf_copy+0x190>)
 8010a9c:	f009 fab4 	bl	801a008 <iprintf>
    if (offset_from >= p_from->len) {
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	895b      	ldrh	r3, [r3, #10]
 8010aa4:	461a      	mov	r2, r3
 8010aa6:	693b      	ldr	r3, [r7, #16]
 8010aa8:	4293      	cmp	r3, r2
 8010aaa:	d304      	bcc.n	8010ab6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010aac:	2300      	movs	r3, #0
 8010aae:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	895b      	ldrh	r3, [r3, #10]
 8010aba:	461a      	mov	r2, r3
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	4293      	cmp	r3, r2
 8010ac0:	d114      	bne.n	8010aec <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d10c      	bne.n	8010aec <pbuf_copy+0x118>
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d009      	beq.n	8010aec <pbuf_copy+0x118>
 8010ad8:	4b20      	ldr	r3, [pc, #128]	@ (8010b5c <pbuf_copy+0x188>)
 8010ada:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8010ade:	4924      	ldr	r1, [pc, #144]	@ (8010b70 <pbuf_copy+0x19c>)
 8010ae0:	4820      	ldr	r0, [pc, #128]	@ (8010b64 <pbuf_copy+0x190>)
 8010ae2:	f009 fa91 	bl	801a008 <iprintf>
 8010ae6:	f06f 030f 	mvn.w	r3, #15
 8010aea:	e032      	b.n	8010b52 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010aec:	683b      	ldr	r3, [r7, #0]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d013      	beq.n	8010b1a <pbuf_copy+0x146>
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	895a      	ldrh	r2, [r3, #10]
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	891b      	ldrh	r3, [r3, #8]
 8010afa:	429a      	cmp	r2, r3
 8010afc:	d10d      	bne.n	8010b1a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d009      	beq.n	8010b1a <pbuf_copy+0x146>
 8010b06:	4b15      	ldr	r3, [pc, #84]	@ (8010b5c <pbuf_copy+0x188>)
 8010b08:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8010b0c:	4919      	ldr	r1, [pc, #100]	@ (8010b74 <pbuf_copy+0x1a0>)
 8010b0e:	4815      	ldr	r0, [pc, #84]	@ (8010b64 <pbuf_copy+0x190>)
 8010b10:	f009 fa7a 	bl	801a008 <iprintf>
 8010b14:	f06f 0305 	mvn.w	r3, #5
 8010b18:	e01b      	b.n	8010b52 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d013      	beq.n	8010b48 <pbuf_copy+0x174>
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	895a      	ldrh	r2, [r3, #10]
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	891b      	ldrh	r3, [r3, #8]
 8010b28:	429a      	cmp	r2, r3
 8010b2a:	d10d      	bne.n	8010b48 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d009      	beq.n	8010b48 <pbuf_copy+0x174>
 8010b34:	4b09      	ldr	r3, [pc, #36]	@ (8010b5c <pbuf_copy+0x188>)
 8010b36:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8010b3a:	490e      	ldr	r1, [pc, #56]	@ (8010b74 <pbuf_copy+0x1a0>)
 8010b3c:	4809      	ldr	r0, [pc, #36]	@ (8010b64 <pbuf_copy+0x190>)
 8010b3e:	f009 fa63 	bl	801a008 <iprintf>
 8010b42:	f06f 0305 	mvn.w	r3, #5
 8010b46:	e004      	b.n	8010b52 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	f47f af61 	bne.w	8010a12 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010b50:	2300      	movs	r3, #0
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3718      	adds	r7, #24
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	0801b8fc 	.word	0x0801b8fc
 8010b60:	0801bba4 	.word	0x0801bba4
 8010b64:	0801b95c 	.word	0x0801b95c
 8010b68:	0801bbd4 	.word	0x0801bbd4
 8010b6c:	0801bbec 	.word	0x0801bbec
 8010b70:	0801bc08 	.word	0x0801bc08
 8010b74:	0801bc18 	.word	0x0801bc18

08010b78 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b088      	sub	sp, #32
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	60f8      	str	r0, [r7, #12]
 8010b80:	60b9      	str	r1, [r7, #8]
 8010b82:	4611      	mov	r1, r2
 8010b84:	461a      	mov	r2, r3
 8010b86:	460b      	mov	r3, r1
 8010b88:	80fb      	strh	r3, [r7, #6]
 8010b8a:	4613      	mov	r3, r2
 8010b8c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010b92:	2300      	movs	r3, #0
 8010b94:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d108      	bne.n	8010bae <pbuf_copy_partial+0x36>
 8010b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8010c4c <pbuf_copy_partial+0xd4>)
 8010b9e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8010ba2:	492b      	ldr	r1, [pc, #172]	@ (8010c50 <pbuf_copy_partial+0xd8>)
 8010ba4:	482b      	ldr	r0, [pc, #172]	@ (8010c54 <pbuf_copy_partial+0xdc>)
 8010ba6:	f009 fa2f 	bl	801a008 <iprintf>
 8010baa:	2300      	movs	r3, #0
 8010bac:	e04a      	b.n	8010c44 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010bae:	68bb      	ldr	r3, [r7, #8]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d108      	bne.n	8010bc6 <pbuf_copy_partial+0x4e>
 8010bb4:	4b25      	ldr	r3, [pc, #148]	@ (8010c4c <pbuf_copy_partial+0xd4>)
 8010bb6:	f240 420b 	movw	r2, #1035	@ 0x40b
 8010bba:	4927      	ldr	r1, [pc, #156]	@ (8010c58 <pbuf_copy_partial+0xe0>)
 8010bbc:	4825      	ldr	r0, [pc, #148]	@ (8010c54 <pbuf_copy_partial+0xdc>)
 8010bbe:	f009 fa23 	bl	801a008 <iprintf>
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	e03e      	b.n	8010c44 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	61fb      	str	r3, [r7, #28]
 8010bca:	e034      	b.n	8010c36 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010bcc:	88bb      	ldrh	r3, [r7, #4]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d00a      	beq.n	8010be8 <pbuf_copy_partial+0x70>
 8010bd2:	69fb      	ldr	r3, [r7, #28]
 8010bd4:	895b      	ldrh	r3, [r3, #10]
 8010bd6:	88ba      	ldrh	r2, [r7, #4]
 8010bd8:	429a      	cmp	r2, r3
 8010bda:	d305      	bcc.n	8010be8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010bdc:	69fb      	ldr	r3, [r7, #28]
 8010bde:	895b      	ldrh	r3, [r3, #10]
 8010be0:	88ba      	ldrh	r2, [r7, #4]
 8010be2:	1ad3      	subs	r3, r2, r3
 8010be4:	80bb      	strh	r3, [r7, #4]
 8010be6:	e023      	b.n	8010c30 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010be8:	69fb      	ldr	r3, [r7, #28]
 8010bea:	895a      	ldrh	r2, [r3, #10]
 8010bec:	88bb      	ldrh	r3, [r7, #4]
 8010bee:	1ad3      	subs	r3, r2, r3
 8010bf0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010bf2:	8b3a      	ldrh	r2, [r7, #24]
 8010bf4:	88fb      	ldrh	r3, [r7, #6]
 8010bf6:	429a      	cmp	r2, r3
 8010bf8:	d901      	bls.n	8010bfe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010bfa:	88fb      	ldrh	r3, [r7, #6]
 8010bfc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010bfe:	8b7b      	ldrh	r3, [r7, #26]
 8010c00:	68ba      	ldr	r2, [r7, #8]
 8010c02:	18d0      	adds	r0, r2, r3
 8010c04:	69fb      	ldr	r3, [r7, #28]
 8010c06:	685a      	ldr	r2, [r3, #4]
 8010c08:	88bb      	ldrh	r3, [r7, #4]
 8010c0a:	4413      	add	r3, r2
 8010c0c:	8b3a      	ldrh	r2, [r7, #24]
 8010c0e:	4619      	mov	r1, r3
 8010c10:	f009 fc25 	bl	801a45e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010c14:	8afa      	ldrh	r2, [r7, #22]
 8010c16:	8b3b      	ldrh	r3, [r7, #24]
 8010c18:	4413      	add	r3, r2
 8010c1a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010c1c:	8b7a      	ldrh	r2, [r7, #26]
 8010c1e:	8b3b      	ldrh	r3, [r7, #24]
 8010c20:	4413      	add	r3, r2
 8010c22:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010c24:	88fa      	ldrh	r2, [r7, #6]
 8010c26:	8b3b      	ldrh	r3, [r7, #24]
 8010c28:	1ad3      	subs	r3, r2, r3
 8010c2a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010c30:	69fb      	ldr	r3, [r7, #28]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	61fb      	str	r3, [r7, #28]
 8010c36:	88fb      	ldrh	r3, [r7, #6]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d002      	beq.n	8010c42 <pbuf_copy_partial+0xca>
 8010c3c:	69fb      	ldr	r3, [r7, #28]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d1c4      	bne.n	8010bcc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010c42:	8afb      	ldrh	r3, [r7, #22]
}
 8010c44:	4618      	mov	r0, r3
 8010c46:	3720      	adds	r7, #32
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	bd80      	pop	{r7, pc}
 8010c4c:	0801b8fc 	.word	0x0801b8fc
 8010c50:	0801bc44 	.word	0x0801bc44
 8010c54:	0801b95c 	.word	0x0801b95c
 8010c58:	0801bc64 	.word	0x0801bc64

08010c5c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b084      	sub	sp, #16
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	4603      	mov	r3, r0
 8010c64:	603a      	str	r2, [r7, #0]
 8010c66:	71fb      	strb	r3, [r7, #7]
 8010c68:	460b      	mov	r3, r1
 8010c6a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010c6c:	683b      	ldr	r3, [r7, #0]
 8010c6e:	8919      	ldrh	r1, [r3, #8]
 8010c70:	88ba      	ldrh	r2, [r7, #4]
 8010c72:	79fb      	ldrb	r3, [r7, #7]
 8010c74:	4618      	mov	r0, r3
 8010c76:	f7ff fa95 	bl	80101a4 <pbuf_alloc>
 8010c7a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d101      	bne.n	8010c86 <pbuf_clone+0x2a>
    return NULL;
 8010c82:	2300      	movs	r3, #0
 8010c84:	e011      	b.n	8010caa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010c86:	6839      	ldr	r1, [r7, #0]
 8010c88:	68f8      	ldr	r0, [r7, #12]
 8010c8a:	f7ff fea3 	bl	80109d4 <pbuf_copy>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010c92:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d006      	beq.n	8010ca8 <pbuf_clone+0x4c>
 8010c9a:	4b06      	ldr	r3, [pc, #24]	@ (8010cb4 <pbuf_clone+0x58>)
 8010c9c:	f240 5224 	movw	r2, #1316	@ 0x524
 8010ca0:	4905      	ldr	r1, [pc, #20]	@ (8010cb8 <pbuf_clone+0x5c>)
 8010ca2:	4806      	ldr	r0, [pc, #24]	@ (8010cbc <pbuf_clone+0x60>)
 8010ca4:	f009 f9b0 	bl	801a008 <iprintf>
  return q;
 8010ca8:	68fb      	ldr	r3, [r7, #12]
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3710      	adds	r7, #16
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	bd80      	pop	{r7, pc}
 8010cb2:	bf00      	nop
 8010cb4:	0801b8fc 	.word	0x0801b8fc
 8010cb8:	0801bd70 	.word	0x0801bd70
 8010cbc:	0801b95c 	.word	0x0801b95c

08010cc0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010cc4:	f009 f8a0 	bl	8019e08 <rand>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	b29b      	uxth	r3, r3
 8010ccc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010cd0:	b29b      	uxth	r3, r3
 8010cd2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8010cd6:	b29a      	uxth	r2, r3
 8010cd8:	4b01      	ldr	r3, [pc, #4]	@ (8010ce0 <tcp_init+0x20>)
 8010cda:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010cdc:	bf00      	nop
 8010cde:	bd80      	pop	{r7, pc}
 8010ce0:	20000024 	.word	0x20000024

08010ce4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	7d1b      	ldrb	r3, [r3, #20]
 8010cf0:	2b01      	cmp	r3, #1
 8010cf2:	d105      	bne.n	8010d00 <tcp_free+0x1c>
 8010cf4:	4b06      	ldr	r3, [pc, #24]	@ (8010d10 <tcp_free+0x2c>)
 8010cf6:	22d4      	movs	r2, #212	@ 0xd4
 8010cf8:	4906      	ldr	r1, [pc, #24]	@ (8010d14 <tcp_free+0x30>)
 8010cfa:	4807      	ldr	r0, [pc, #28]	@ (8010d18 <tcp_free+0x34>)
 8010cfc:	f009 f984 	bl	801a008 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010d00:	6879      	ldr	r1, [r7, #4]
 8010d02:	2001      	movs	r0, #1
 8010d04:	f7fe fe8e 	bl	800fa24 <memp_free>
}
 8010d08:	bf00      	nop
 8010d0a:	3708      	adds	r7, #8
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	bd80      	pop	{r7, pc}
 8010d10:	0801bdfc 	.word	0x0801bdfc
 8010d14:	0801be2c 	.word	0x0801be2c
 8010d18:	0801be40 	.word	0x0801be40

08010d1c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b082      	sub	sp, #8
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	7d1b      	ldrb	r3, [r3, #20]
 8010d28:	2b01      	cmp	r3, #1
 8010d2a:	d105      	bne.n	8010d38 <tcp_free_listen+0x1c>
 8010d2c:	4b06      	ldr	r3, [pc, #24]	@ (8010d48 <tcp_free_listen+0x2c>)
 8010d2e:	22df      	movs	r2, #223	@ 0xdf
 8010d30:	4906      	ldr	r1, [pc, #24]	@ (8010d4c <tcp_free_listen+0x30>)
 8010d32:	4807      	ldr	r0, [pc, #28]	@ (8010d50 <tcp_free_listen+0x34>)
 8010d34:	f009 f968 	bl	801a008 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010d38:	6879      	ldr	r1, [r7, #4]
 8010d3a:	2002      	movs	r0, #2
 8010d3c:	f7fe fe72 	bl	800fa24 <memp_free>
}
 8010d40:	bf00      	nop
 8010d42:	3708      	adds	r7, #8
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}
 8010d48:	0801bdfc 	.word	0x0801bdfc
 8010d4c:	0801be68 	.word	0x0801be68
 8010d50:	0801be40 	.word	0x0801be40

08010d54 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010d58:	f000 fea4 	bl	8011aa4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010d5c:	4b07      	ldr	r3, [pc, #28]	@ (8010d7c <tcp_tmr+0x28>)
 8010d5e:	781b      	ldrb	r3, [r3, #0]
 8010d60:	3301      	adds	r3, #1
 8010d62:	b2da      	uxtb	r2, r3
 8010d64:	4b05      	ldr	r3, [pc, #20]	@ (8010d7c <tcp_tmr+0x28>)
 8010d66:	701a      	strb	r2, [r3, #0]
 8010d68:	4b04      	ldr	r3, [pc, #16]	@ (8010d7c <tcp_tmr+0x28>)
 8010d6a:	781b      	ldrb	r3, [r3, #0]
 8010d6c:	f003 0301 	and.w	r3, r3, #1
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d001      	beq.n	8010d78 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010d74:	f000 fb54 	bl	8011420 <tcp_slowtmr>
  }
}
 8010d78:	bf00      	nop
 8010d7a:	bd80      	pop	{r7, pc}
 8010d7c:	200274c1 	.word	0x200274c1

08010d80 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b084      	sub	sp, #16
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
 8010d88:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d105      	bne.n	8010d9c <tcp_remove_listener+0x1c>
 8010d90:	4b0d      	ldr	r3, [pc, #52]	@ (8010dc8 <tcp_remove_listener+0x48>)
 8010d92:	22ff      	movs	r2, #255	@ 0xff
 8010d94:	490d      	ldr	r1, [pc, #52]	@ (8010dcc <tcp_remove_listener+0x4c>)
 8010d96:	480e      	ldr	r0, [pc, #56]	@ (8010dd0 <tcp_remove_listener+0x50>)
 8010d98:	f009 f936 	bl	801a008 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	60fb      	str	r3, [r7, #12]
 8010da0:	e00a      	b.n	8010db8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010da6:	683a      	ldr	r2, [r7, #0]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	d102      	bne.n	8010db2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	2200      	movs	r2, #0
 8010db0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	68db      	ldr	r3, [r3, #12]
 8010db6:	60fb      	str	r3, [r7, #12]
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d1f1      	bne.n	8010da2 <tcp_remove_listener+0x22>
    }
  }
}
 8010dbe:	bf00      	nop
 8010dc0:	bf00      	nop
 8010dc2:	3710      	adds	r7, #16
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}
 8010dc8:	0801bdfc 	.word	0x0801bdfc
 8010dcc:	0801be84 	.word	0x0801be84
 8010dd0:	0801be40 	.word	0x0801be40

08010dd4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b084      	sub	sp, #16
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d106      	bne.n	8010df0 <tcp_listen_closed+0x1c>
 8010de2:	4b14      	ldr	r3, [pc, #80]	@ (8010e34 <tcp_listen_closed+0x60>)
 8010de4:	f240 1211 	movw	r2, #273	@ 0x111
 8010de8:	4913      	ldr	r1, [pc, #76]	@ (8010e38 <tcp_listen_closed+0x64>)
 8010dea:	4814      	ldr	r0, [pc, #80]	@ (8010e3c <tcp_listen_closed+0x68>)
 8010dec:	f009 f90c 	bl	801a008 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	7d1b      	ldrb	r3, [r3, #20]
 8010df4:	2b01      	cmp	r3, #1
 8010df6:	d006      	beq.n	8010e06 <tcp_listen_closed+0x32>
 8010df8:	4b0e      	ldr	r3, [pc, #56]	@ (8010e34 <tcp_listen_closed+0x60>)
 8010dfa:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8010dfe:	4910      	ldr	r1, [pc, #64]	@ (8010e40 <tcp_listen_closed+0x6c>)
 8010e00:	480e      	ldr	r0, [pc, #56]	@ (8010e3c <tcp_listen_closed+0x68>)
 8010e02:	f009 f901 	bl	801a008 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010e06:	2301      	movs	r3, #1
 8010e08:	60fb      	str	r3, [r7, #12]
 8010e0a:	e00b      	b.n	8010e24 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8010e44 <tcp_listen_closed+0x70>)
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	6879      	ldr	r1, [r7, #4]
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7ff ffb1 	bl	8010d80 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	3301      	adds	r3, #1
 8010e22:	60fb      	str	r3, [r7, #12]
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	2b03      	cmp	r3, #3
 8010e28:	d9f0      	bls.n	8010e0c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010e2a:	bf00      	nop
 8010e2c:	bf00      	nop
 8010e2e:	3710      	adds	r7, #16
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}
 8010e34:	0801bdfc 	.word	0x0801bdfc
 8010e38:	0801beac 	.word	0x0801beac
 8010e3c:	0801be40 	.word	0x0801be40
 8010e40:	0801beb8 	.word	0x0801beb8
 8010e44:	0801e290 	.word	0x0801e290

08010e48 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010e48:	b5b0      	push	{r4, r5, r7, lr}
 8010e4a:	b088      	sub	sp, #32
 8010e4c:	af04      	add	r7, sp, #16
 8010e4e:	6078      	str	r0, [r7, #4]
 8010e50:	460b      	mov	r3, r1
 8010e52:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d106      	bne.n	8010e68 <tcp_close_shutdown+0x20>
 8010e5a:	4b63      	ldr	r3, [pc, #396]	@ (8010fe8 <tcp_close_shutdown+0x1a0>)
 8010e5c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8010e60:	4962      	ldr	r1, [pc, #392]	@ (8010fec <tcp_close_shutdown+0x1a4>)
 8010e62:	4863      	ldr	r0, [pc, #396]	@ (8010ff0 <tcp_close_shutdown+0x1a8>)
 8010e64:	f009 f8d0 	bl	801a008 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010e68:	78fb      	ldrb	r3, [r7, #3]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d066      	beq.n	8010f3c <tcp_close_shutdown+0xf4>
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	7d1b      	ldrb	r3, [r3, #20]
 8010e72:	2b04      	cmp	r3, #4
 8010e74:	d003      	beq.n	8010e7e <tcp_close_shutdown+0x36>
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	7d1b      	ldrb	r3, [r3, #20]
 8010e7a:	2b07      	cmp	r3, #7
 8010e7c:	d15e      	bne.n	8010f3c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d104      	bne.n	8010e90 <tcp_close_shutdown+0x48>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010e8a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8010e8e:	d055      	beq.n	8010f3c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	8b5b      	ldrh	r3, [r3, #26]
 8010e94:	f003 0310 	and.w	r3, r3, #16
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d106      	bne.n	8010eaa <tcp_close_shutdown+0x62>
 8010e9c:	4b52      	ldr	r3, [pc, #328]	@ (8010fe8 <tcp_close_shutdown+0x1a0>)
 8010e9e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8010ea2:	4954      	ldr	r1, [pc, #336]	@ (8010ff4 <tcp_close_shutdown+0x1ac>)
 8010ea4:	4852      	ldr	r0, [pc, #328]	@ (8010ff0 <tcp_close_shutdown+0x1a8>)
 8010ea6:	f009 f8af 	bl	801a008 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010eb2:	687d      	ldr	r5, [r7, #4]
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	3304      	adds	r3, #4
 8010eb8:	687a      	ldr	r2, [r7, #4]
 8010eba:	8ad2      	ldrh	r2, [r2, #22]
 8010ebc:	6879      	ldr	r1, [r7, #4]
 8010ebe:	8b09      	ldrh	r1, [r1, #24]
 8010ec0:	9102      	str	r1, [sp, #8]
 8010ec2:	9201      	str	r2, [sp, #4]
 8010ec4:	9300      	str	r3, [sp, #0]
 8010ec6:	462b      	mov	r3, r5
 8010ec8:	4622      	mov	r2, r4
 8010eca:	4601      	mov	r1, r0
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f004 fe8d 	bl	8015bec <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f001 f8c8 	bl	8012068 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010ed8:	4b47      	ldr	r3, [pc, #284]	@ (8010ff8 <tcp_close_shutdown+0x1b0>)
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	687a      	ldr	r2, [r7, #4]
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	d105      	bne.n	8010eee <tcp_close_shutdown+0xa6>
 8010ee2:	4b45      	ldr	r3, [pc, #276]	@ (8010ff8 <tcp_close_shutdown+0x1b0>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	68db      	ldr	r3, [r3, #12]
 8010ee8:	4a43      	ldr	r2, [pc, #268]	@ (8010ff8 <tcp_close_shutdown+0x1b0>)
 8010eea:	6013      	str	r3, [r2, #0]
 8010eec:	e013      	b.n	8010f16 <tcp_close_shutdown+0xce>
 8010eee:	4b42      	ldr	r3, [pc, #264]	@ (8010ff8 <tcp_close_shutdown+0x1b0>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	60fb      	str	r3, [r7, #12]
 8010ef4:	e00c      	b.n	8010f10 <tcp_close_shutdown+0xc8>
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	68db      	ldr	r3, [r3, #12]
 8010efa:	687a      	ldr	r2, [r7, #4]
 8010efc:	429a      	cmp	r2, r3
 8010efe:	d104      	bne.n	8010f0a <tcp_close_shutdown+0xc2>
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	68da      	ldr	r2, [r3, #12]
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	60da      	str	r2, [r3, #12]
 8010f08:	e005      	b.n	8010f16 <tcp_close_shutdown+0xce>
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	68db      	ldr	r3, [r3, #12]
 8010f0e:	60fb      	str	r3, [r7, #12]
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d1ef      	bne.n	8010ef6 <tcp_close_shutdown+0xae>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2200      	movs	r2, #0
 8010f1a:	60da      	str	r2, [r3, #12]
 8010f1c:	4b37      	ldr	r3, [pc, #220]	@ (8010ffc <tcp_close_shutdown+0x1b4>)
 8010f1e:	2201      	movs	r2, #1
 8010f20:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010f22:	4b37      	ldr	r3, [pc, #220]	@ (8011000 <tcp_close_shutdown+0x1b8>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	687a      	ldr	r2, [r7, #4]
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	d102      	bne.n	8010f32 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010f2c:	f003 fd5c 	bl	80149e8 <tcp_trigger_input_pcb_close>
 8010f30:	e002      	b.n	8010f38 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f7ff fed6 	bl	8010ce4 <tcp_free>
      }
      return ERR_OK;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	e050      	b.n	8010fde <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	7d1b      	ldrb	r3, [r3, #20]
 8010f40:	2b02      	cmp	r3, #2
 8010f42:	d03b      	beq.n	8010fbc <tcp_close_shutdown+0x174>
 8010f44:	2b02      	cmp	r3, #2
 8010f46:	dc44      	bgt.n	8010fd2 <tcp_close_shutdown+0x18a>
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d002      	beq.n	8010f52 <tcp_close_shutdown+0x10a>
 8010f4c:	2b01      	cmp	r3, #1
 8010f4e:	d02a      	beq.n	8010fa6 <tcp_close_shutdown+0x15e>
 8010f50:	e03f      	b.n	8010fd2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	8adb      	ldrh	r3, [r3, #22]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d021      	beq.n	8010f9e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8011004 <tcp_close_shutdown+0x1bc>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	687a      	ldr	r2, [r7, #4]
 8010f60:	429a      	cmp	r2, r3
 8010f62:	d105      	bne.n	8010f70 <tcp_close_shutdown+0x128>
 8010f64:	4b27      	ldr	r3, [pc, #156]	@ (8011004 <tcp_close_shutdown+0x1bc>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	68db      	ldr	r3, [r3, #12]
 8010f6a:	4a26      	ldr	r2, [pc, #152]	@ (8011004 <tcp_close_shutdown+0x1bc>)
 8010f6c:	6013      	str	r3, [r2, #0]
 8010f6e:	e013      	b.n	8010f98 <tcp_close_shutdown+0x150>
 8010f70:	4b24      	ldr	r3, [pc, #144]	@ (8011004 <tcp_close_shutdown+0x1bc>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	60bb      	str	r3, [r7, #8]
 8010f76:	e00c      	b.n	8010f92 <tcp_close_shutdown+0x14a>
 8010f78:	68bb      	ldr	r3, [r7, #8]
 8010f7a:	68db      	ldr	r3, [r3, #12]
 8010f7c:	687a      	ldr	r2, [r7, #4]
 8010f7e:	429a      	cmp	r2, r3
 8010f80:	d104      	bne.n	8010f8c <tcp_close_shutdown+0x144>
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	68da      	ldr	r2, [r3, #12]
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	60da      	str	r2, [r3, #12]
 8010f8a:	e005      	b.n	8010f98 <tcp_close_shutdown+0x150>
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	68db      	ldr	r3, [r3, #12]
 8010f90:	60bb      	str	r3, [r7, #8]
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d1ef      	bne.n	8010f78 <tcp_close_shutdown+0x130>
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010f9e:	6878      	ldr	r0, [r7, #4]
 8010fa0:	f7ff fea0 	bl	8010ce4 <tcp_free>
      break;
 8010fa4:	e01a      	b.n	8010fdc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f7ff ff14 	bl	8010dd4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010fac:	6879      	ldr	r1, [r7, #4]
 8010fae:	4816      	ldr	r0, [pc, #88]	@ (8011008 <tcp_close_shutdown+0x1c0>)
 8010fb0:	f001 f8aa 	bl	8012108 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8010fb4:	6878      	ldr	r0, [r7, #4]
 8010fb6:	f7ff feb1 	bl	8010d1c <tcp_free_listen>
      break;
 8010fba:	e00f      	b.n	8010fdc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010fbc:	6879      	ldr	r1, [r7, #4]
 8010fbe:	480e      	ldr	r0, [pc, #56]	@ (8010ff8 <tcp_close_shutdown+0x1b0>)
 8010fc0:	f001 f8a2 	bl	8012108 <tcp_pcb_remove>
 8010fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8010ffc <tcp_close_shutdown+0x1b4>)
 8010fc6:	2201      	movs	r2, #1
 8010fc8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	f7ff fe8a 	bl	8010ce4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8010fd0:	e004      	b.n	8010fdc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010fd2:	6878      	ldr	r0, [r7, #4]
 8010fd4:	f000 f81a 	bl	801100c <tcp_close_shutdown_fin>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	e000      	b.n	8010fde <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8010fdc:	2300      	movs	r3, #0
}
 8010fde:	4618      	mov	r0, r3
 8010fe0:	3710      	adds	r7, #16
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bdb0      	pop	{r4, r5, r7, pc}
 8010fe6:	bf00      	nop
 8010fe8:	0801bdfc 	.word	0x0801bdfc
 8010fec:	0801bed0 	.word	0x0801bed0
 8010ff0:	0801be40 	.word	0x0801be40
 8010ff4:	0801bef0 	.word	0x0801bef0
 8010ff8:	200274b8 	.word	0x200274b8
 8010ffc:	200274c0 	.word	0x200274c0
 8011000:	200274f8 	.word	0x200274f8
 8011004:	200274b0 	.word	0x200274b0
 8011008:	200274b4 	.word	0x200274b4

0801100c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b084      	sub	sp, #16
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d106      	bne.n	8011028 <tcp_close_shutdown_fin+0x1c>
 801101a:	4b2e      	ldr	r3, [pc, #184]	@ (80110d4 <tcp_close_shutdown_fin+0xc8>)
 801101c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8011020:	492d      	ldr	r1, [pc, #180]	@ (80110d8 <tcp_close_shutdown_fin+0xcc>)
 8011022:	482e      	ldr	r0, [pc, #184]	@ (80110dc <tcp_close_shutdown_fin+0xd0>)
 8011024:	f008 fff0 	bl	801a008 <iprintf>

  switch (pcb->state) {
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	7d1b      	ldrb	r3, [r3, #20]
 801102c:	2b07      	cmp	r3, #7
 801102e:	d020      	beq.n	8011072 <tcp_close_shutdown_fin+0x66>
 8011030:	2b07      	cmp	r3, #7
 8011032:	dc2b      	bgt.n	801108c <tcp_close_shutdown_fin+0x80>
 8011034:	2b03      	cmp	r3, #3
 8011036:	d002      	beq.n	801103e <tcp_close_shutdown_fin+0x32>
 8011038:	2b04      	cmp	r3, #4
 801103a:	d00d      	beq.n	8011058 <tcp_close_shutdown_fin+0x4c>
 801103c:	e026      	b.n	801108c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f003 fee2 	bl	8014e08 <tcp_send_fin>
 8011044:	4603      	mov	r3, r0
 8011046:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d11f      	bne.n	8011090 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2205      	movs	r2, #5
 8011054:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011056:	e01b      	b.n	8011090 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f003 fed5 	bl	8014e08 <tcp_send_fin>
 801105e:	4603      	mov	r3, r0
 8011060:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d114      	bne.n	8011094 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2205      	movs	r2, #5
 801106e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011070:	e010      	b.n	8011094 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011072:	6878      	ldr	r0, [r7, #4]
 8011074:	f003 fec8 	bl	8014e08 <tcp_send_fin>
 8011078:	4603      	mov	r3, r0
 801107a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801107c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d109      	bne.n	8011098 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2209      	movs	r2, #9
 8011088:	751a      	strb	r2, [r3, #20]
      }
      break;
 801108a:	e005      	b.n	8011098 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801108c:	2300      	movs	r3, #0
 801108e:	e01c      	b.n	80110ca <tcp_close_shutdown_fin+0xbe>
      break;
 8011090:	bf00      	nop
 8011092:	e002      	b.n	801109a <tcp_close_shutdown_fin+0x8e>
      break;
 8011094:	bf00      	nop
 8011096:	e000      	b.n	801109a <tcp_close_shutdown_fin+0x8e>
      break;
 8011098:	bf00      	nop
  }

  if (err == ERR_OK) {
 801109a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d103      	bne.n	80110aa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	f003 ffee 	bl	8015084 <tcp_output>
 80110a8:	e00d      	b.n	80110c6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80110aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110b2:	d108      	bne.n	80110c6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	8b5b      	ldrh	r3, [r3, #26]
 80110b8:	f043 0308 	orr.w	r3, r3, #8
 80110bc:	b29a      	uxth	r2, r3
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80110c2:	2300      	movs	r3, #0
 80110c4:	e001      	b.n	80110ca <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80110c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80110ca:	4618      	mov	r0, r3
 80110cc:	3710      	adds	r7, #16
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}
 80110d2:	bf00      	nop
 80110d4:	0801bdfc 	.word	0x0801bdfc
 80110d8:	0801beac 	.word	0x0801beac
 80110dc:	0801be40 	.word	0x0801be40

080110e0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b082      	sub	sp, #8
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d109      	bne.n	8011102 <tcp_close+0x22>
 80110ee:	4b0f      	ldr	r3, [pc, #60]	@ (801112c <tcp_close+0x4c>)
 80110f0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80110f4:	490e      	ldr	r1, [pc, #56]	@ (8011130 <tcp_close+0x50>)
 80110f6:	480f      	ldr	r0, [pc, #60]	@ (8011134 <tcp_close+0x54>)
 80110f8:	f008 ff86 	bl	801a008 <iprintf>
 80110fc:	f06f 030f 	mvn.w	r3, #15
 8011100:	e00f      	b.n	8011122 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	7d1b      	ldrb	r3, [r3, #20]
 8011106:	2b01      	cmp	r3, #1
 8011108:	d006      	beq.n	8011118 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	8b5b      	ldrh	r3, [r3, #26]
 801110e:	f043 0310 	orr.w	r3, r3, #16
 8011112:	b29a      	uxth	r2, r3
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011118:	2101      	movs	r1, #1
 801111a:	6878      	ldr	r0, [r7, #4]
 801111c:	f7ff fe94 	bl	8010e48 <tcp_close_shutdown>
 8011120:	4603      	mov	r3, r0
}
 8011122:	4618      	mov	r0, r3
 8011124:	3708      	adds	r7, #8
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}
 801112a:	bf00      	nop
 801112c:	0801bdfc 	.word	0x0801bdfc
 8011130:	0801bf0c 	.word	0x0801bf0c
 8011134:	0801be40 	.word	0x0801be40

08011138 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b08e      	sub	sp, #56	@ 0x38
 801113c:	af04      	add	r7, sp, #16
 801113e:	6078      	str	r0, [r7, #4]
 8011140:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d107      	bne.n	8011158 <tcp_abandon+0x20>
 8011148:	4b52      	ldr	r3, [pc, #328]	@ (8011294 <tcp_abandon+0x15c>)
 801114a:	f240 223d 	movw	r2, #573	@ 0x23d
 801114e:	4952      	ldr	r1, [pc, #328]	@ (8011298 <tcp_abandon+0x160>)
 8011150:	4852      	ldr	r0, [pc, #328]	@ (801129c <tcp_abandon+0x164>)
 8011152:	f008 ff59 	bl	801a008 <iprintf>
 8011156:	e099      	b.n	801128c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	7d1b      	ldrb	r3, [r3, #20]
 801115c:	2b01      	cmp	r3, #1
 801115e:	d106      	bne.n	801116e <tcp_abandon+0x36>
 8011160:	4b4c      	ldr	r3, [pc, #304]	@ (8011294 <tcp_abandon+0x15c>)
 8011162:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8011166:	494e      	ldr	r1, [pc, #312]	@ (80112a0 <tcp_abandon+0x168>)
 8011168:	484c      	ldr	r0, [pc, #304]	@ (801129c <tcp_abandon+0x164>)
 801116a:	f008 ff4d 	bl	801a008 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	7d1b      	ldrb	r3, [r3, #20]
 8011172:	2b0a      	cmp	r3, #10
 8011174:	d107      	bne.n	8011186 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011176:	6879      	ldr	r1, [r7, #4]
 8011178:	484a      	ldr	r0, [pc, #296]	@ (80112a4 <tcp_abandon+0x16c>)
 801117a:	f000 ffc5 	bl	8012108 <tcp_pcb_remove>
    tcp_free(pcb);
 801117e:	6878      	ldr	r0, [r7, #4]
 8011180:	f7ff fdb0 	bl	8010ce4 <tcp_free>
 8011184:	e082      	b.n	801128c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011186:	2300      	movs	r3, #0
 8011188:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801118a:	2300      	movs	r3, #0
 801118c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011192:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011198:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80111a0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	691b      	ldr	r3, [r3, #16]
 80111a6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	7d1b      	ldrb	r3, [r3, #20]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d126      	bne.n	80111fe <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	8adb      	ldrh	r3, [r3, #22]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d02e      	beq.n	8011216 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80111b8:	4b3b      	ldr	r3, [pc, #236]	@ (80112a8 <tcp_abandon+0x170>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	687a      	ldr	r2, [r7, #4]
 80111be:	429a      	cmp	r2, r3
 80111c0:	d105      	bne.n	80111ce <tcp_abandon+0x96>
 80111c2:	4b39      	ldr	r3, [pc, #228]	@ (80112a8 <tcp_abandon+0x170>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	68db      	ldr	r3, [r3, #12]
 80111c8:	4a37      	ldr	r2, [pc, #220]	@ (80112a8 <tcp_abandon+0x170>)
 80111ca:	6013      	str	r3, [r2, #0]
 80111cc:	e013      	b.n	80111f6 <tcp_abandon+0xbe>
 80111ce:	4b36      	ldr	r3, [pc, #216]	@ (80112a8 <tcp_abandon+0x170>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	61fb      	str	r3, [r7, #28]
 80111d4:	e00c      	b.n	80111f0 <tcp_abandon+0xb8>
 80111d6:	69fb      	ldr	r3, [r7, #28]
 80111d8:	68db      	ldr	r3, [r3, #12]
 80111da:	687a      	ldr	r2, [r7, #4]
 80111dc:	429a      	cmp	r2, r3
 80111de:	d104      	bne.n	80111ea <tcp_abandon+0xb2>
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	68da      	ldr	r2, [r3, #12]
 80111e4:	69fb      	ldr	r3, [r7, #28]
 80111e6:	60da      	str	r2, [r3, #12]
 80111e8:	e005      	b.n	80111f6 <tcp_abandon+0xbe>
 80111ea:	69fb      	ldr	r3, [r7, #28]
 80111ec:	68db      	ldr	r3, [r3, #12]
 80111ee:	61fb      	str	r3, [r7, #28]
 80111f0:	69fb      	ldr	r3, [r7, #28]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d1ef      	bne.n	80111d6 <tcp_abandon+0x9e>
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2200      	movs	r2, #0
 80111fa:	60da      	str	r2, [r3, #12]
 80111fc:	e00b      	b.n	8011216 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	8adb      	ldrh	r3, [r3, #22]
 8011206:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011208:	6879      	ldr	r1, [r7, #4]
 801120a:	4828      	ldr	r0, [pc, #160]	@ (80112ac <tcp_abandon+0x174>)
 801120c:	f000 ff7c 	bl	8012108 <tcp_pcb_remove>
 8011210:	4b27      	ldr	r3, [pc, #156]	@ (80112b0 <tcp_abandon+0x178>)
 8011212:	2201      	movs	r2, #1
 8011214:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801121a:	2b00      	cmp	r3, #0
 801121c:	d004      	beq.n	8011228 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011222:	4618      	mov	r0, r3
 8011224:	f000 fd1e 	bl	8011c64 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801122c:	2b00      	cmp	r3, #0
 801122e:	d004      	beq.n	801123a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011234:	4618      	mov	r0, r3
 8011236:	f000 fd15 	bl	8011c64 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801123e:	2b00      	cmp	r3, #0
 8011240:	d004      	beq.n	801124c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011246:	4618      	mov	r0, r3
 8011248:	f000 fd0c 	bl	8011c64 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801124c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801124e:	2b00      	cmp	r3, #0
 8011250:	d00e      	beq.n	8011270 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011252:	6879      	ldr	r1, [r7, #4]
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	3304      	adds	r3, #4
 8011258:	687a      	ldr	r2, [r7, #4]
 801125a:	8b12      	ldrh	r2, [r2, #24]
 801125c:	9202      	str	r2, [sp, #8]
 801125e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8011260:	9201      	str	r2, [sp, #4]
 8011262:	9300      	str	r3, [sp, #0]
 8011264:	460b      	mov	r3, r1
 8011266:	697a      	ldr	r2, [r7, #20]
 8011268:	69b9      	ldr	r1, [r7, #24]
 801126a:	6878      	ldr	r0, [r7, #4]
 801126c:	f004 fcbe 	bl	8015bec <tcp_rst>
    }
    last_state = pcb->state;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	7d1b      	ldrb	r3, [r3, #20]
 8011274:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f7ff fd34 	bl	8010ce4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801127c:	693b      	ldr	r3, [r7, #16]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d004      	beq.n	801128c <tcp_abandon+0x154>
 8011282:	693b      	ldr	r3, [r7, #16]
 8011284:	f06f 010c 	mvn.w	r1, #12
 8011288:	68f8      	ldr	r0, [r7, #12]
 801128a:	4798      	blx	r3
  }
}
 801128c:	3728      	adds	r7, #40	@ 0x28
 801128e:	46bd      	mov	sp, r7
 8011290:	bd80      	pop	{r7, pc}
 8011292:	bf00      	nop
 8011294:	0801bdfc 	.word	0x0801bdfc
 8011298:	0801bf40 	.word	0x0801bf40
 801129c:	0801be40 	.word	0x0801be40
 80112a0:	0801bf5c 	.word	0x0801bf5c
 80112a4:	200274bc 	.word	0x200274bc
 80112a8:	200274b0 	.word	0x200274b0
 80112ac:	200274b8 	.word	0x200274b8
 80112b0:	200274c0 	.word	0x200274c0

080112b4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b082      	sub	sp, #8
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80112bc:	2101      	movs	r1, #1
 80112be:	6878      	ldr	r0, [r7, #4]
 80112c0:	f7ff ff3a 	bl	8011138 <tcp_abandon>
}
 80112c4:	bf00      	nop
 80112c6:	3708      	adds	r7, #8
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bd80      	pop	{r7, pc}

080112cc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b084      	sub	sp, #16
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d106      	bne.n	80112e8 <tcp_update_rcv_ann_wnd+0x1c>
 80112da:	4b25      	ldr	r3, [pc, #148]	@ (8011370 <tcp_update_rcv_ann_wnd+0xa4>)
 80112dc:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80112e0:	4924      	ldr	r1, [pc, #144]	@ (8011374 <tcp_update_rcv_ann_wnd+0xa8>)
 80112e2:	4825      	ldr	r0, [pc, #148]	@ (8011378 <tcp_update_rcv_ann_wnd+0xac>)
 80112e4:	f008 fe90 	bl	801a008 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112ec:	687a      	ldr	r2, [r7, #4]
 80112ee:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80112f0:	4413      	add	r3, r2
 80112f2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112f8:	687a      	ldr	r2, [r7, #4]
 80112fa:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80112fc:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8011300:	bf28      	it	cs
 8011302:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8011306:	b292      	uxth	r2, r2
 8011308:	4413      	add	r3, r2
 801130a:	68fa      	ldr	r2, [r7, #12]
 801130c:	1ad3      	subs	r3, r2, r3
 801130e:	2b00      	cmp	r3, #0
 8011310:	db08      	blt.n	8011324 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801131e:	68fa      	ldr	r2, [r7, #12]
 8011320:	1ad3      	subs	r3, r2, r3
 8011322:	e020      	b.n	8011366 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801132c:	1ad3      	subs	r3, r2, r3
 801132e:	2b00      	cmp	r3, #0
 8011330:	dd03      	ble.n	801133a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	2200      	movs	r2, #0
 8011336:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011338:	e014      	b.n	8011364 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011342:	1ad3      	subs	r3, r2, r3
 8011344:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011346:	68bb      	ldr	r3, [r7, #8]
 8011348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801134c:	d306      	bcc.n	801135c <tcp_update_rcv_ann_wnd+0x90>
 801134e:	4b08      	ldr	r3, [pc, #32]	@ (8011370 <tcp_update_rcv_ann_wnd+0xa4>)
 8011350:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8011354:	4909      	ldr	r1, [pc, #36]	@ (801137c <tcp_update_rcv_ann_wnd+0xb0>)
 8011356:	4808      	ldr	r0, [pc, #32]	@ (8011378 <tcp_update_rcv_ann_wnd+0xac>)
 8011358:	f008 fe56 	bl	801a008 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801135c:	68bb      	ldr	r3, [r7, #8]
 801135e:	b29a      	uxth	r2, r3
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8011364:	2300      	movs	r3, #0
  }
}
 8011366:	4618      	mov	r0, r3
 8011368:	3710      	adds	r7, #16
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}
 801136e:	bf00      	nop
 8011370:	0801bdfc 	.word	0x0801bdfc
 8011374:	0801c058 	.word	0x0801c058
 8011378:	0801be40 	.word	0x0801be40
 801137c:	0801c07c 	.word	0x0801c07c

08011380 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b084      	sub	sp, #16
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
 8011388:	460b      	mov	r3, r1
 801138a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d107      	bne.n	80113a2 <tcp_recved+0x22>
 8011392:	4b1f      	ldr	r3, [pc, #124]	@ (8011410 <tcp_recved+0x90>)
 8011394:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8011398:	491e      	ldr	r1, [pc, #120]	@ (8011414 <tcp_recved+0x94>)
 801139a:	481f      	ldr	r0, [pc, #124]	@ (8011418 <tcp_recved+0x98>)
 801139c:	f008 fe34 	bl	801a008 <iprintf>
 80113a0:	e032      	b.n	8011408 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	7d1b      	ldrb	r3, [r3, #20]
 80113a6:	2b01      	cmp	r3, #1
 80113a8:	d106      	bne.n	80113b8 <tcp_recved+0x38>
 80113aa:	4b19      	ldr	r3, [pc, #100]	@ (8011410 <tcp_recved+0x90>)
 80113ac:	f240 32d2 	movw	r2, #978	@ 0x3d2
 80113b0:	491a      	ldr	r1, [pc, #104]	@ (801141c <tcp_recved+0x9c>)
 80113b2:	4819      	ldr	r0, [pc, #100]	@ (8011418 <tcp_recved+0x98>)
 80113b4:	f008 fe28 	bl	801a008 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80113bc:	887b      	ldrh	r3, [r7, #2]
 80113be:	4413      	add	r3, r2
 80113c0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80113c2:	89fb      	ldrh	r3, [r7, #14]
 80113c4:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80113c8:	d804      	bhi.n	80113d4 <tcp_recved+0x54>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80113ce:	89fa      	ldrh	r2, [r7, #14]
 80113d0:	429a      	cmp	r2, r3
 80113d2:	d204      	bcs.n	80113de <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80113da:	851a      	strh	r2, [r3, #40]	@ 0x28
 80113dc:	e002      	b.n	80113e4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	89fa      	ldrh	r2, [r7, #14]
 80113e2:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80113e4:	6878      	ldr	r0, [r7, #4]
 80113e6:	f7ff ff71 	bl	80112cc <tcp_update_rcv_ann_wnd>
 80113ea:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80113f2:	d309      	bcc.n	8011408 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	8b5b      	ldrh	r3, [r3, #26]
 80113f8:	f043 0302 	orr.w	r3, r3, #2
 80113fc:	b29a      	uxth	r2, r3
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011402:	6878      	ldr	r0, [r7, #4]
 8011404:	f003 fe3e 	bl	8015084 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011408:	3710      	adds	r7, #16
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}
 801140e:	bf00      	nop
 8011410:	0801bdfc 	.word	0x0801bdfc
 8011414:	0801c098 	.word	0x0801c098
 8011418:	0801be40 	.word	0x0801be40
 801141c:	0801c0b0 	.word	0x0801c0b0

08011420 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011420:	b5b0      	push	{r4, r5, r7, lr}
 8011422:	b090      	sub	sp, #64	@ 0x40
 8011424:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011426:	2300      	movs	r3, #0
 8011428:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 801142c:	4b95      	ldr	r3, [pc, #596]	@ (8011684 <tcp_slowtmr+0x264>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	3301      	adds	r3, #1
 8011432:	4a94      	ldr	r2, [pc, #592]	@ (8011684 <tcp_slowtmr+0x264>)
 8011434:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011436:	4b94      	ldr	r3, [pc, #592]	@ (8011688 <tcp_slowtmr+0x268>)
 8011438:	781b      	ldrb	r3, [r3, #0]
 801143a:	3301      	adds	r3, #1
 801143c:	b2da      	uxtb	r2, r3
 801143e:	4b92      	ldr	r3, [pc, #584]	@ (8011688 <tcp_slowtmr+0x268>)
 8011440:	701a      	strb	r2, [r3, #0]
 8011442:	e000      	b.n	8011446 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8011444:	bf00      	nop
  prev = NULL;
 8011446:	2300      	movs	r3, #0
 8011448:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801144a:	4b90      	ldr	r3, [pc, #576]	@ (801168c <tcp_slowtmr+0x26c>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8011450:	e29d      	b.n	801198e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011454:	7d1b      	ldrb	r3, [r3, #20]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d106      	bne.n	8011468 <tcp_slowtmr+0x48>
 801145a:	4b8d      	ldr	r3, [pc, #564]	@ (8011690 <tcp_slowtmr+0x270>)
 801145c:	f240 42be 	movw	r2, #1214	@ 0x4be
 8011460:	498c      	ldr	r1, [pc, #560]	@ (8011694 <tcp_slowtmr+0x274>)
 8011462:	488d      	ldr	r0, [pc, #564]	@ (8011698 <tcp_slowtmr+0x278>)
 8011464:	f008 fdd0 	bl	801a008 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801146a:	7d1b      	ldrb	r3, [r3, #20]
 801146c:	2b01      	cmp	r3, #1
 801146e:	d106      	bne.n	801147e <tcp_slowtmr+0x5e>
 8011470:	4b87      	ldr	r3, [pc, #540]	@ (8011690 <tcp_slowtmr+0x270>)
 8011472:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8011476:	4989      	ldr	r1, [pc, #548]	@ (801169c <tcp_slowtmr+0x27c>)
 8011478:	4887      	ldr	r0, [pc, #540]	@ (8011698 <tcp_slowtmr+0x278>)
 801147a:	f008 fdc5 	bl	801a008 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801147e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011480:	7d1b      	ldrb	r3, [r3, #20]
 8011482:	2b0a      	cmp	r3, #10
 8011484:	d106      	bne.n	8011494 <tcp_slowtmr+0x74>
 8011486:	4b82      	ldr	r3, [pc, #520]	@ (8011690 <tcp_slowtmr+0x270>)
 8011488:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 801148c:	4984      	ldr	r1, [pc, #528]	@ (80116a0 <tcp_slowtmr+0x280>)
 801148e:	4882      	ldr	r0, [pc, #520]	@ (8011698 <tcp_slowtmr+0x278>)
 8011490:	f008 fdba 	bl	801a008 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011496:	7f9a      	ldrb	r2, [r3, #30]
 8011498:	4b7b      	ldr	r3, [pc, #492]	@ (8011688 <tcp_slowtmr+0x268>)
 801149a:	781b      	ldrb	r3, [r3, #0]
 801149c:	429a      	cmp	r2, r3
 801149e:	d105      	bne.n	80114ac <tcp_slowtmr+0x8c>
      prev = pcb;
 80114a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80114a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114a6:	68db      	ldr	r3, [r3, #12]
 80114a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80114aa:	e270      	b.n	801198e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 80114ac:	4b76      	ldr	r3, [pc, #472]	@ (8011688 <tcp_slowtmr+0x268>)
 80114ae:	781a      	ldrb	r2, [r3, #0]
 80114b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114b2:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80114b4:	2300      	movs	r3, #0
 80114b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 80114ba:	2300      	movs	r3, #0
 80114bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80114c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114c2:	7d1b      	ldrb	r3, [r3, #20]
 80114c4:	2b02      	cmp	r3, #2
 80114c6:	d10a      	bne.n	80114de <tcp_slowtmr+0xbe>
 80114c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80114ce:	2b05      	cmp	r3, #5
 80114d0:	d905      	bls.n	80114de <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80114d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80114d6:	3301      	adds	r3, #1
 80114d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80114dc:	e11e      	b.n	801171c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80114de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80114e4:	2b0b      	cmp	r3, #11
 80114e6:	d905      	bls.n	80114f4 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80114e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80114ec:	3301      	adds	r3, #1
 80114ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80114f2:	e113      	b.n	801171c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80114f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114f6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d075      	beq.n	80115ea <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80114fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011502:	2b00      	cmp	r3, #0
 8011504:	d006      	beq.n	8011514 <tcp_slowtmr+0xf4>
 8011506:	4b62      	ldr	r3, [pc, #392]	@ (8011690 <tcp_slowtmr+0x270>)
 8011508:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 801150c:	4965      	ldr	r1, [pc, #404]	@ (80116a4 <tcp_slowtmr+0x284>)
 801150e:	4862      	ldr	r0, [pc, #392]	@ (8011698 <tcp_slowtmr+0x278>)
 8011510:	f008 fd7a 	bl	801a008 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011518:	2b00      	cmp	r3, #0
 801151a:	d106      	bne.n	801152a <tcp_slowtmr+0x10a>
 801151c:	4b5c      	ldr	r3, [pc, #368]	@ (8011690 <tcp_slowtmr+0x270>)
 801151e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8011522:	4961      	ldr	r1, [pc, #388]	@ (80116a8 <tcp_slowtmr+0x288>)
 8011524:	485c      	ldr	r0, [pc, #368]	@ (8011698 <tcp_slowtmr+0x278>)
 8011526:	f008 fd6f 	bl	801a008 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801152a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801152c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8011530:	2b0b      	cmp	r3, #11
 8011532:	d905      	bls.n	8011540 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8011534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011538:	3301      	adds	r3, #1
 801153a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801153e:	e0ed      	b.n	801171c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011542:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011546:	3b01      	subs	r3, #1
 8011548:	4a58      	ldr	r2, [pc, #352]	@ (80116ac <tcp_slowtmr+0x28c>)
 801154a:	5cd3      	ldrb	r3, [r2, r3]
 801154c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801154e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011550:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8011554:	7c7a      	ldrb	r2, [r7, #17]
 8011556:	429a      	cmp	r2, r3
 8011558:	d907      	bls.n	801156a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801155a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801155c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8011560:	3301      	adds	r3, #1
 8011562:	b2da      	uxtb	r2, r3
 8011564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011566:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801156a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801156c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8011570:	7c7a      	ldrb	r2, [r7, #17]
 8011572:	429a      	cmp	r2, r3
 8011574:	f200 80d2 	bhi.w	801171c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8011578:	2301      	movs	r3, #1
 801157a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 801157c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801157e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011582:	2b00      	cmp	r3, #0
 8011584:	d108      	bne.n	8011598 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011586:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011588:	f004 fc24 	bl	8015dd4 <tcp_zero_window_probe>
 801158c:	4603      	mov	r3, r0
 801158e:	2b00      	cmp	r3, #0
 8011590:	d014      	beq.n	80115bc <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8011592:	2300      	movs	r3, #0
 8011594:	623b      	str	r3, [r7, #32]
 8011596:	e011      	b.n	80115bc <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801159a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801159e:	4619      	mov	r1, r3
 80115a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80115a2:	f003 fae9 	bl	8014b78 <tcp_split_unsent_seg>
 80115a6:	4603      	mov	r3, r0
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d107      	bne.n	80115bc <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80115ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80115ae:	f003 fd69 	bl	8015084 <tcp_output>
 80115b2:	4603      	mov	r3, r0
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d101      	bne.n	80115bc <tcp_slowtmr+0x19c>
                  next_slot = 0;
 80115b8:	2300      	movs	r3, #0
 80115ba:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80115bc:	6a3b      	ldr	r3, [r7, #32]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	f000 80ac 	beq.w	801171c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80115c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115c6:	2200      	movs	r2, #0
 80115c8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80115cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115ce:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80115d2:	2b06      	cmp	r3, #6
 80115d4:	f200 80a2 	bhi.w	801171c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80115d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115da:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80115de:	3301      	adds	r3, #1
 80115e0:	b2da      	uxtb	r2, r3
 80115e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115e4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80115e8:	e098      	b.n	801171c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80115ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	db0f      	blt.n	8011614 <tcp_slowtmr+0x1f4>
 80115f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115f6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80115fa:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80115fe:	4293      	cmp	r3, r2
 8011600:	d008      	beq.n	8011614 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8011602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011604:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011608:	b29b      	uxth	r3, r3
 801160a:	3301      	adds	r3, #1
 801160c:	b29b      	uxth	r3, r3
 801160e:	b21a      	sxth	r2, r3
 8011610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011612:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8011614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011616:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801161a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801161c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8011620:	429a      	cmp	r2, r3
 8011622:	db7b      	blt.n	801171c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011624:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011626:	f004 f821 	bl	801566c <tcp_rexmit_rto_prepare>
 801162a:	4603      	mov	r3, r0
 801162c:	2b00      	cmp	r3, #0
 801162e:	d007      	beq.n	8011640 <tcp_slowtmr+0x220>
 8011630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011634:	2b00      	cmp	r3, #0
 8011636:	d171      	bne.n	801171c <tcp_slowtmr+0x2fc>
 8011638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801163a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801163c:	2b00      	cmp	r3, #0
 801163e:	d06d      	beq.n	801171c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8011640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011642:	7d1b      	ldrb	r3, [r3, #20]
 8011644:	2b02      	cmp	r3, #2
 8011646:	d03a      	beq.n	80116be <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801164a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801164e:	2b0c      	cmp	r3, #12
 8011650:	bf28      	it	cs
 8011652:	230c      	movcs	r3, #12
 8011654:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011658:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801165c:	10db      	asrs	r3, r3, #3
 801165e:	b21b      	sxth	r3, r3
 8011660:	461a      	mov	r2, r3
 8011662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011664:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011668:	4413      	add	r3, r2
 801166a:	7efa      	ldrb	r2, [r7, #27]
 801166c:	4910      	ldr	r1, [pc, #64]	@ (80116b0 <tcp_slowtmr+0x290>)
 801166e:	5c8a      	ldrb	r2, [r1, r2]
 8011670:	4093      	lsls	r3, r2
 8011672:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011674:	697b      	ldr	r3, [r7, #20]
 8011676:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801167a:	4293      	cmp	r3, r2
 801167c:	dc1a      	bgt.n	80116b4 <tcp_slowtmr+0x294>
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	b21a      	sxth	r2, r3
 8011682:	e019      	b.n	80116b8 <tcp_slowtmr+0x298>
 8011684:	200274ac 	.word	0x200274ac
 8011688:	200274c2 	.word	0x200274c2
 801168c:	200274b8 	.word	0x200274b8
 8011690:	0801bdfc 	.word	0x0801bdfc
 8011694:	0801c140 	.word	0x0801c140
 8011698:	0801be40 	.word	0x0801be40
 801169c:	0801c16c 	.word	0x0801c16c
 80116a0:	0801c198 	.word	0x0801c198
 80116a4:	0801c1c8 	.word	0x0801c1c8
 80116a8:	0801c1fc 	.word	0x0801c1fc
 80116ac:	0801e288 	.word	0x0801e288
 80116b0:	0801e278 	.word	0x0801e278
 80116b4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80116b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80116be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116c0:	2200      	movs	r2, #0
 80116c2:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80116c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80116ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80116d0:	4293      	cmp	r3, r2
 80116d2:	bf28      	it	cs
 80116d4:	4613      	movcs	r3, r2
 80116d6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80116d8:	8a7b      	ldrh	r3, [r7, #18]
 80116da:	085b      	lsrs	r3, r3, #1
 80116dc:	b29a      	uxth	r2, r3
 80116de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116e0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80116e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80116ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80116ee:	005b      	lsls	r3, r3, #1
 80116f0:	b29b      	uxth	r3, r3
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d206      	bcs.n	8011704 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80116f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80116fa:	005b      	lsls	r3, r3, #1
 80116fc:	b29a      	uxth	r2, r3
 80116fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011700:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8011704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011706:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8011708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801170a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801170e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011710:	2200      	movs	r2, #0
 8011712:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8011716:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011718:	f004 f818 	bl	801574c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 801171c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801171e:	7d1b      	ldrb	r3, [r3, #20]
 8011720:	2b06      	cmp	r3, #6
 8011722:	d111      	bne.n	8011748 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8011724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011726:	8b5b      	ldrh	r3, [r3, #26]
 8011728:	f003 0310 	and.w	r3, r3, #16
 801172c:	2b00      	cmp	r3, #0
 801172e:	d00b      	beq.n	8011748 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011730:	4b9c      	ldr	r3, [pc, #624]	@ (80119a4 <tcp_slowtmr+0x584>)
 8011732:	681a      	ldr	r2, [r3, #0]
 8011734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011736:	6a1b      	ldr	r3, [r3, #32]
 8011738:	1ad3      	subs	r3, r2, r3
 801173a:	2b28      	cmp	r3, #40	@ 0x28
 801173c:	d904      	bls.n	8011748 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801173e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011742:	3301      	adds	r3, #1
 8011744:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801174a:	7a5b      	ldrb	r3, [r3, #9]
 801174c:	f003 0308 	and.w	r3, r3, #8
 8011750:	2b00      	cmp	r3, #0
 8011752:	d04a      	beq.n	80117ea <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8011754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011756:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011758:	2b04      	cmp	r3, #4
 801175a:	d003      	beq.n	8011764 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 801175c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801175e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011760:	2b07      	cmp	r3, #7
 8011762:	d142      	bne.n	80117ea <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011764:	4b8f      	ldr	r3, [pc, #572]	@ (80119a4 <tcp_slowtmr+0x584>)
 8011766:	681a      	ldr	r2, [r3, #0]
 8011768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801176a:	6a1b      	ldr	r3, [r3, #32]
 801176c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801176e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011770:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8011774:	4b8c      	ldr	r3, [pc, #560]	@ (80119a8 <tcp_slowtmr+0x588>)
 8011776:	440b      	add	r3, r1
 8011778:	498c      	ldr	r1, [pc, #560]	@ (80119ac <tcp_slowtmr+0x58c>)
 801177a:	fba1 1303 	umull	r1, r3, r1, r3
 801177e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011780:	429a      	cmp	r2, r3
 8011782:	d90a      	bls.n	801179a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8011784:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011788:	3301      	adds	r3, #1
 801178a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801178e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011792:	3301      	adds	r3, #1
 8011794:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011798:	e027      	b.n	80117ea <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801179a:	4b82      	ldr	r3, [pc, #520]	@ (80119a4 <tcp_slowtmr+0x584>)
 801179c:	681a      	ldr	r2, [r3, #0]
 801179e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117a0:	6a1b      	ldr	r3, [r3, #32]
 80117a2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80117a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117a6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80117aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117ac:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80117b0:	4618      	mov	r0, r3
 80117b2:	4b7f      	ldr	r3, [pc, #508]	@ (80119b0 <tcp_slowtmr+0x590>)
 80117b4:	fb00 f303 	mul.w	r3, r0, r3
 80117b8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80117ba:	497c      	ldr	r1, [pc, #496]	@ (80119ac <tcp_slowtmr+0x58c>)
 80117bc:	fba1 1303 	umull	r1, r3, r1, r3
 80117c0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80117c2:	429a      	cmp	r2, r3
 80117c4:	d911      	bls.n	80117ea <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80117c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80117c8:	f004 fac4 	bl	8015d54 <tcp_keepalive>
 80117cc:	4603      	mov	r3, r0
 80117ce:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80117d2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d107      	bne.n	80117ea <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80117da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117dc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80117e0:	3301      	adds	r3, #1
 80117e2:	b2da      	uxtb	r2, r3
 80117e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117e6:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80117ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d011      	beq.n	8011816 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80117f2:	4b6c      	ldr	r3, [pc, #432]	@ (80119a4 <tcp_slowtmr+0x584>)
 80117f4:	681a      	ldr	r2, [r3, #0]
 80117f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117f8:	6a1b      	ldr	r3, [r3, #32]
 80117fa:	1ad2      	subs	r2, r2, r3
 80117fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117fe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8011802:	4619      	mov	r1, r3
 8011804:	460b      	mov	r3, r1
 8011806:	005b      	lsls	r3, r3, #1
 8011808:	440b      	add	r3, r1
 801180a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801180c:	429a      	cmp	r2, r3
 801180e:	d302      	bcc.n	8011816 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8011810:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011812:	f000 fddd 	bl	80123d0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8011816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011818:	7d1b      	ldrb	r3, [r3, #20]
 801181a:	2b03      	cmp	r3, #3
 801181c:	d10b      	bne.n	8011836 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801181e:	4b61      	ldr	r3, [pc, #388]	@ (80119a4 <tcp_slowtmr+0x584>)
 8011820:	681a      	ldr	r2, [r3, #0]
 8011822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011824:	6a1b      	ldr	r3, [r3, #32]
 8011826:	1ad3      	subs	r3, r2, r3
 8011828:	2b28      	cmp	r3, #40	@ 0x28
 801182a:	d904      	bls.n	8011836 <tcp_slowtmr+0x416>
        ++pcb_remove;
 801182c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011830:	3301      	adds	r3, #1
 8011832:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8011836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011838:	7d1b      	ldrb	r3, [r3, #20]
 801183a:	2b09      	cmp	r3, #9
 801183c:	d10b      	bne.n	8011856 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801183e:	4b59      	ldr	r3, [pc, #356]	@ (80119a4 <tcp_slowtmr+0x584>)
 8011840:	681a      	ldr	r2, [r3, #0]
 8011842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011844:	6a1b      	ldr	r3, [r3, #32]
 8011846:	1ad3      	subs	r3, r2, r3
 8011848:	2bf0      	cmp	r3, #240	@ 0xf0
 801184a:	d904      	bls.n	8011856 <tcp_slowtmr+0x436>
        ++pcb_remove;
 801184c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011850:	3301      	adds	r3, #1
 8011852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8011856:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801185a:	2b00      	cmp	r3, #0
 801185c:	d060      	beq.n	8011920 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 801185e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011864:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8011866:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011868:	f000 fbfe 	bl	8012068 <tcp_pcb_purge>
      if (prev != NULL) {
 801186c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801186e:	2b00      	cmp	r3, #0
 8011870:	d010      	beq.n	8011894 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011872:	4b50      	ldr	r3, [pc, #320]	@ (80119b4 <tcp_slowtmr+0x594>)
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011878:	429a      	cmp	r2, r3
 801187a:	d106      	bne.n	801188a <tcp_slowtmr+0x46a>
 801187c:	4b4e      	ldr	r3, [pc, #312]	@ (80119b8 <tcp_slowtmr+0x598>)
 801187e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8011882:	494e      	ldr	r1, [pc, #312]	@ (80119bc <tcp_slowtmr+0x59c>)
 8011884:	484e      	ldr	r0, [pc, #312]	@ (80119c0 <tcp_slowtmr+0x5a0>)
 8011886:	f008 fbbf 	bl	801a008 <iprintf>
        prev->next = pcb->next;
 801188a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801188c:	68da      	ldr	r2, [r3, #12]
 801188e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011890:	60da      	str	r2, [r3, #12]
 8011892:	e00f      	b.n	80118b4 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011894:	4b47      	ldr	r3, [pc, #284]	@ (80119b4 <tcp_slowtmr+0x594>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801189a:	429a      	cmp	r2, r3
 801189c:	d006      	beq.n	80118ac <tcp_slowtmr+0x48c>
 801189e:	4b46      	ldr	r3, [pc, #280]	@ (80119b8 <tcp_slowtmr+0x598>)
 80118a0:	f240 5271 	movw	r2, #1393	@ 0x571
 80118a4:	4947      	ldr	r1, [pc, #284]	@ (80119c4 <tcp_slowtmr+0x5a4>)
 80118a6:	4846      	ldr	r0, [pc, #280]	@ (80119c0 <tcp_slowtmr+0x5a0>)
 80118a8:	f008 fbae 	bl	801a008 <iprintf>
        tcp_active_pcbs = pcb->next;
 80118ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118ae:	68db      	ldr	r3, [r3, #12]
 80118b0:	4a40      	ldr	r2, [pc, #256]	@ (80119b4 <tcp_slowtmr+0x594>)
 80118b2:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80118b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d013      	beq.n	80118e4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80118bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118be:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80118c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118c2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80118c4:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80118c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118c8:	3304      	adds	r3, #4
 80118ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80118cc:	8ad2      	ldrh	r2, [r2, #22]
 80118ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80118d0:	8b09      	ldrh	r1, [r1, #24]
 80118d2:	9102      	str	r1, [sp, #8]
 80118d4:	9201      	str	r2, [sp, #4]
 80118d6:	9300      	str	r3, [sp, #0]
 80118d8:	462b      	mov	r3, r5
 80118da:	4622      	mov	r2, r4
 80118dc:	4601      	mov	r1, r0
 80118de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80118e0:	f004 f984 	bl	8015bec <tcp_rst>
      err_arg = pcb->callback_arg;
 80118e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118e6:	691b      	ldr	r3, [r3, #16]
 80118e8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80118ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118ec:	7d1b      	ldrb	r3, [r3, #20]
 80118ee:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80118f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118f2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80118f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118f6:	68db      	ldr	r3, [r3, #12]
 80118f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80118fa:	6838      	ldr	r0, [r7, #0]
 80118fc:	f7ff f9f2 	bl	8010ce4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8011900:	4b31      	ldr	r3, [pc, #196]	@ (80119c8 <tcp_slowtmr+0x5a8>)
 8011902:	2200      	movs	r2, #0
 8011904:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d004      	beq.n	8011916 <tcp_slowtmr+0x4f6>
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	f06f 010c 	mvn.w	r1, #12
 8011912:	68b8      	ldr	r0, [r7, #8]
 8011914:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011916:	4b2c      	ldr	r3, [pc, #176]	@ (80119c8 <tcp_slowtmr+0x5a8>)
 8011918:	781b      	ldrb	r3, [r3, #0]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d037      	beq.n	801198e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801191e:	e592      	b.n	8011446 <tcp_slowtmr+0x26>
      prev = pcb;
 8011920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011922:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8011924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011926:	68db      	ldr	r3, [r3, #12]
 8011928:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801192a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801192c:	7f1b      	ldrb	r3, [r3, #28]
 801192e:	3301      	adds	r3, #1
 8011930:	b2da      	uxtb	r2, r3
 8011932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011934:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011938:	7f1a      	ldrb	r2, [r3, #28]
 801193a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801193c:	7f5b      	ldrb	r3, [r3, #29]
 801193e:	429a      	cmp	r2, r3
 8011940:	d325      	bcc.n	801198e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8011942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011944:	2200      	movs	r2, #0
 8011946:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8011948:	4b1f      	ldr	r3, [pc, #124]	@ (80119c8 <tcp_slowtmr+0x5a8>)
 801194a:	2200      	movs	r2, #0
 801194c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801194e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011950:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011954:	2b00      	cmp	r3, #0
 8011956:	d00b      	beq.n	8011970 <tcp_slowtmr+0x550>
 8011958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801195a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801195e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011960:	6912      	ldr	r2, [r2, #16]
 8011962:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011964:	4610      	mov	r0, r2
 8011966:	4798      	blx	r3
 8011968:	4603      	mov	r3, r0
 801196a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801196e:	e002      	b.n	8011976 <tcp_slowtmr+0x556>
 8011970:	2300      	movs	r3, #0
 8011972:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8011976:	4b14      	ldr	r3, [pc, #80]	@ (80119c8 <tcp_slowtmr+0x5a8>)
 8011978:	781b      	ldrb	r3, [r3, #0]
 801197a:	2b00      	cmp	r3, #0
 801197c:	f47f ad62 	bne.w	8011444 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011980:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8011984:	2b00      	cmp	r3, #0
 8011986:	d102      	bne.n	801198e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8011988:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801198a:	f003 fb7b 	bl	8015084 <tcp_output>
  while (pcb != NULL) {
 801198e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011990:	2b00      	cmp	r3, #0
 8011992:	f47f ad5e 	bne.w	8011452 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011996:	2300      	movs	r3, #0
 8011998:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801199a:	4b0c      	ldr	r3, [pc, #48]	@ (80119cc <tcp_slowtmr+0x5ac>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80119a0:	e069      	b.n	8011a76 <tcp_slowtmr+0x656>
 80119a2:	bf00      	nop
 80119a4:	200274ac 	.word	0x200274ac
 80119a8:	000a4cb8 	.word	0x000a4cb8
 80119ac:	10624dd3 	.word	0x10624dd3
 80119b0:	000124f8 	.word	0x000124f8
 80119b4:	200274b8 	.word	0x200274b8
 80119b8:	0801bdfc 	.word	0x0801bdfc
 80119bc:	0801c234 	.word	0x0801c234
 80119c0:	0801be40 	.word	0x0801be40
 80119c4:	0801c260 	.word	0x0801c260
 80119c8:	200274c0 	.word	0x200274c0
 80119cc:	200274bc 	.word	0x200274bc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80119d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119d2:	7d1b      	ldrb	r3, [r3, #20]
 80119d4:	2b0a      	cmp	r3, #10
 80119d6:	d006      	beq.n	80119e6 <tcp_slowtmr+0x5c6>
 80119d8:	4b2b      	ldr	r3, [pc, #172]	@ (8011a88 <tcp_slowtmr+0x668>)
 80119da:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80119de:	492b      	ldr	r1, [pc, #172]	@ (8011a8c <tcp_slowtmr+0x66c>)
 80119e0:	482b      	ldr	r0, [pc, #172]	@ (8011a90 <tcp_slowtmr+0x670>)
 80119e2:	f008 fb11 	bl	801a008 <iprintf>
    pcb_remove = 0;
 80119e6:	2300      	movs	r3, #0
 80119e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80119ec:	4b29      	ldr	r3, [pc, #164]	@ (8011a94 <tcp_slowtmr+0x674>)
 80119ee:	681a      	ldr	r2, [r3, #0]
 80119f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119f2:	6a1b      	ldr	r3, [r3, #32]
 80119f4:	1ad3      	subs	r3, r2, r3
 80119f6:	2bf0      	cmp	r3, #240	@ 0xf0
 80119f8:	d904      	bls.n	8011a04 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80119fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80119fe:	3301      	adds	r3, #1
 8011a00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011a04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d02f      	beq.n	8011a6c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011a0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011a0e:	f000 fb2b 	bl	8012068 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d010      	beq.n	8011a3a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011a18:	4b1f      	ldr	r3, [pc, #124]	@ (8011a98 <tcp_slowtmr+0x678>)
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a1e:	429a      	cmp	r2, r3
 8011a20:	d106      	bne.n	8011a30 <tcp_slowtmr+0x610>
 8011a22:	4b19      	ldr	r3, [pc, #100]	@ (8011a88 <tcp_slowtmr+0x668>)
 8011a24:	f240 52af 	movw	r2, #1455	@ 0x5af
 8011a28:	491c      	ldr	r1, [pc, #112]	@ (8011a9c <tcp_slowtmr+0x67c>)
 8011a2a:	4819      	ldr	r0, [pc, #100]	@ (8011a90 <tcp_slowtmr+0x670>)
 8011a2c:	f008 faec 	bl	801a008 <iprintf>
        prev->next = pcb->next;
 8011a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a32:	68da      	ldr	r2, [r3, #12]
 8011a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a36:	60da      	str	r2, [r3, #12]
 8011a38:	e00f      	b.n	8011a5a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011a3a:	4b17      	ldr	r3, [pc, #92]	@ (8011a98 <tcp_slowtmr+0x678>)
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a40:	429a      	cmp	r2, r3
 8011a42:	d006      	beq.n	8011a52 <tcp_slowtmr+0x632>
 8011a44:	4b10      	ldr	r3, [pc, #64]	@ (8011a88 <tcp_slowtmr+0x668>)
 8011a46:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8011a4a:	4915      	ldr	r1, [pc, #84]	@ (8011aa0 <tcp_slowtmr+0x680>)
 8011a4c:	4810      	ldr	r0, [pc, #64]	@ (8011a90 <tcp_slowtmr+0x670>)
 8011a4e:	f008 fadb 	bl	801a008 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a54:	68db      	ldr	r3, [r3, #12]
 8011a56:	4a10      	ldr	r2, [pc, #64]	@ (8011a98 <tcp_slowtmr+0x678>)
 8011a58:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a5c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a60:	68db      	ldr	r3, [r3, #12]
 8011a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8011a64:	69f8      	ldr	r0, [r7, #28]
 8011a66:	f7ff f93d 	bl	8010ce4 <tcp_free>
 8011a6a:	e004      	b.n	8011a76 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8011a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8011a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a72:	68db      	ldr	r3, [r3, #12]
 8011a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8011a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d1a9      	bne.n	80119d0 <tcp_slowtmr+0x5b0>
    }
  }
}
 8011a7c:	bf00      	nop
 8011a7e:	bf00      	nop
 8011a80:	3730      	adds	r7, #48	@ 0x30
 8011a82:	46bd      	mov	sp, r7
 8011a84:	bdb0      	pop	{r4, r5, r7, pc}
 8011a86:	bf00      	nop
 8011a88:	0801bdfc 	.word	0x0801bdfc
 8011a8c:	0801c28c 	.word	0x0801c28c
 8011a90:	0801be40 	.word	0x0801be40
 8011a94:	200274ac 	.word	0x200274ac
 8011a98:	200274bc 	.word	0x200274bc
 8011a9c:	0801c2bc 	.word	0x0801c2bc
 8011aa0:	0801c2e4 	.word	0x0801c2e4

08011aa4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b082      	sub	sp, #8
 8011aa8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8011b60 <tcp_fasttmr+0xbc>)
 8011aac:	781b      	ldrb	r3, [r3, #0]
 8011aae:	3301      	adds	r3, #1
 8011ab0:	b2da      	uxtb	r2, r3
 8011ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8011b60 <tcp_fasttmr+0xbc>)
 8011ab4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011ab6:	4b2b      	ldr	r3, [pc, #172]	@ (8011b64 <tcp_fasttmr+0xc0>)
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011abc:	e048      	b.n	8011b50 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	7f9a      	ldrb	r2, [r3, #30]
 8011ac2:	4b27      	ldr	r3, [pc, #156]	@ (8011b60 <tcp_fasttmr+0xbc>)
 8011ac4:	781b      	ldrb	r3, [r3, #0]
 8011ac6:	429a      	cmp	r2, r3
 8011ac8:	d03f      	beq.n	8011b4a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011aca:	4b25      	ldr	r3, [pc, #148]	@ (8011b60 <tcp_fasttmr+0xbc>)
 8011acc:	781a      	ldrb	r2, [r3, #0]
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	8b5b      	ldrh	r3, [r3, #26]
 8011ad6:	f003 0301 	and.w	r3, r3, #1
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d010      	beq.n	8011b00 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	8b5b      	ldrh	r3, [r3, #26]
 8011ae2:	f043 0302 	orr.w	r3, r3, #2
 8011ae6:	b29a      	uxth	r2, r3
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011aec:	6878      	ldr	r0, [r7, #4]
 8011aee:	f003 fac9 	bl	8015084 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	8b5b      	ldrh	r3, [r3, #26]
 8011af6:	f023 0303 	bic.w	r3, r3, #3
 8011afa:	b29a      	uxth	r2, r3
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	8b5b      	ldrh	r3, [r3, #26]
 8011b04:	f003 0308 	and.w	r3, r3, #8
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d009      	beq.n	8011b20 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	8b5b      	ldrh	r3, [r3, #26]
 8011b10:	f023 0308 	bic.w	r3, r3, #8
 8011b14:	b29a      	uxth	r2, r3
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011b1a:	6878      	ldr	r0, [r7, #4]
 8011b1c:	f7ff fa76 	bl	801100c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	68db      	ldr	r3, [r3, #12]
 8011b24:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d00a      	beq.n	8011b44 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8011b68 <tcp_fasttmr+0xc4>)
 8011b30:	2200      	movs	r2, #0
 8011b32:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	f000 f819 	bl	8011b6c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8011b68 <tcp_fasttmr+0xc4>)
 8011b3c:	781b      	ldrb	r3, [r3, #0]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d000      	beq.n	8011b44 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011b42:	e7b8      	b.n	8011ab6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011b44:	683b      	ldr	r3, [r7, #0]
 8011b46:	607b      	str	r3, [r7, #4]
 8011b48:	e002      	b.n	8011b50 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	68db      	ldr	r3, [r3, #12]
 8011b4e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d1b3      	bne.n	8011abe <tcp_fasttmr+0x1a>
    }
  }
}
 8011b56:	bf00      	nop
 8011b58:	bf00      	nop
 8011b5a:	3708      	adds	r7, #8
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	bd80      	pop	{r7, pc}
 8011b60:	200274c2 	.word	0x200274c2
 8011b64:	200274b8 	.word	0x200274b8
 8011b68:	200274c0 	.word	0x200274c0

08011b6c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011b6c:	b590      	push	{r4, r7, lr}
 8011b6e:	b085      	sub	sp, #20
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d109      	bne.n	8011b8e <tcp_process_refused_data+0x22>
 8011b7a:	4b37      	ldr	r3, [pc, #220]	@ (8011c58 <tcp_process_refused_data+0xec>)
 8011b7c:	f240 6209 	movw	r2, #1545	@ 0x609
 8011b80:	4936      	ldr	r1, [pc, #216]	@ (8011c5c <tcp_process_refused_data+0xf0>)
 8011b82:	4837      	ldr	r0, [pc, #220]	@ (8011c60 <tcp_process_refused_data+0xf4>)
 8011b84:	f008 fa40 	bl	801a008 <iprintf>
 8011b88:	f06f 030f 	mvn.w	r3, #15
 8011b8c:	e060      	b.n	8011c50 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b92:	7b5b      	ldrb	r3, [r3, #13]
 8011b94:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011b9a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d00b      	beq.n	8011bc4 <tcp_process_refused_data+0x58>
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	6918      	ldr	r0, [r3, #16]
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	68ba      	ldr	r2, [r7, #8]
 8011bba:	6879      	ldr	r1, [r7, #4]
 8011bbc:	47a0      	blx	r4
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	73fb      	strb	r3, [r7, #15]
 8011bc2:	e007      	b.n	8011bd4 <tcp_process_refused_data+0x68>
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	68ba      	ldr	r2, [r7, #8]
 8011bc8:	6879      	ldr	r1, [r7, #4]
 8011bca:	2000      	movs	r0, #0
 8011bcc:	f000 f8a4 	bl	8011d18 <tcp_recv_null>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d12a      	bne.n	8011c32 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011bdc:	7bbb      	ldrb	r3, [r7, #14]
 8011bde:	f003 0320 	and.w	r3, r3, #32
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d033      	beq.n	8011c4e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011bea:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8011bee:	d005      	beq.n	8011bfc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011bf4:	3301      	adds	r3, #1
 8011bf6:	b29a      	uxth	r2, r3
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d00b      	beq.n	8011c1e <tcp_process_refused_data+0xb2>
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	6918      	ldr	r0, [r3, #16]
 8011c10:	2300      	movs	r3, #0
 8011c12:	2200      	movs	r2, #0
 8011c14:	6879      	ldr	r1, [r7, #4]
 8011c16:	47a0      	blx	r4
 8011c18:	4603      	mov	r3, r0
 8011c1a:	73fb      	strb	r3, [r7, #15]
 8011c1c:	e001      	b.n	8011c22 <tcp_process_refused_data+0xb6>
 8011c1e:	2300      	movs	r3, #0
 8011c20:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c26:	f113 0f0d 	cmn.w	r3, #13
 8011c2a:	d110      	bne.n	8011c4e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8011c2c:	f06f 030c 	mvn.w	r3, #12
 8011c30:	e00e      	b.n	8011c50 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8011c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c36:	f113 0f0d 	cmn.w	r3, #13
 8011c3a:	d102      	bne.n	8011c42 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011c3c:	f06f 030c 	mvn.w	r3, #12
 8011c40:	e006      	b.n	8011c50 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	68ba      	ldr	r2, [r7, #8]
 8011c46:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8011c48:	f06f 0304 	mvn.w	r3, #4
 8011c4c:	e000      	b.n	8011c50 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8011c4e:	2300      	movs	r3, #0
}
 8011c50:	4618      	mov	r0, r3
 8011c52:	3714      	adds	r7, #20
 8011c54:	46bd      	mov	sp, r7
 8011c56:	bd90      	pop	{r4, r7, pc}
 8011c58:	0801bdfc 	.word	0x0801bdfc
 8011c5c:	0801c30c 	.word	0x0801c30c
 8011c60:	0801be40 	.word	0x0801be40

08011c64 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b084      	sub	sp, #16
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011c6c:	e007      	b.n	8011c7e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011c74:	6878      	ldr	r0, [r7, #4]
 8011c76:	f000 f80a 	bl	8011c8e <tcp_seg_free>
    seg = next;
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d1f4      	bne.n	8011c6e <tcp_segs_free+0xa>
  }
}
 8011c84:	bf00      	nop
 8011c86:	bf00      	nop
 8011c88:	3710      	adds	r7, #16
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd80      	pop	{r7, pc}

08011c8e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011c8e:	b580      	push	{r7, lr}
 8011c90:	b082      	sub	sp, #8
 8011c92:	af00      	add	r7, sp, #0
 8011c94:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d00c      	beq.n	8011cb6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	685b      	ldr	r3, [r3, #4]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d004      	beq.n	8011cae <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	685b      	ldr	r3, [r3, #4]
 8011ca8:	4618      	mov	r0, r3
 8011caa:	f7fe fd5f 	bl	801076c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011cae:	6879      	ldr	r1, [r7, #4]
 8011cb0:	2003      	movs	r0, #3
 8011cb2:	f7fd feb7 	bl	800fa24 <memp_free>
  }
}
 8011cb6:	bf00      	nop
 8011cb8:	3708      	adds	r7, #8
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}
	...

08011cc0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b084      	sub	sp, #16
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d106      	bne.n	8011cdc <tcp_seg_copy+0x1c>
 8011cce:	4b0f      	ldr	r3, [pc, #60]	@ (8011d0c <tcp_seg_copy+0x4c>)
 8011cd0:	f240 6282 	movw	r2, #1666	@ 0x682
 8011cd4:	490e      	ldr	r1, [pc, #56]	@ (8011d10 <tcp_seg_copy+0x50>)
 8011cd6:	480f      	ldr	r0, [pc, #60]	@ (8011d14 <tcp_seg_copy+0x54>)
 8011cd8:	f008 f996 	bl	801a008 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011cdc:	2003      	movs	r0, #3
 8011cde:	f7fd fe2b 	bl	800f938 <memp_malloc>
 8011ce2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d101      	bne.n	8011cee <tcp_seg_copy+0x2e>
    return NULL;
 8011cea:	2300      	movs	r3, #0
 8011cec:	e00a      	b.n	8011d04 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011cee:	2210      	movs	r2, #16
 8011cf0:	6879      	ldr	r1, [r7, #4]
 8011cf2:	68f8      	ldr	r0, [r7, #12]
 8011cf4:	f008 fbb3 	bl	801a45e <memcpy>
  pbuf_ref(cseg->p);
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	685b      	ldr	r3, [r3, #4]
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f7fe fddb 	bl	80108b8 <pbuf_ref>
  return cseg;
 8011d02:	68fb      	ldr	r3, [r7, #12]
}
 8011d04:	4618      	mov	r0, r3
 8011d06:	3710      	adds	r7, #16
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	bd80      	pop	{r7, pc}
 8011d0c:	0801bdfc 	.word	0x0801bdfc
 8011d10:	0801c350 	.word	0x0801c350
 8011d14:	0801be40 	.word	0x0801be40

08011d18 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b084      	sub	sp, #16
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	60f8      	str	r0, [r7, #12]
 8011d20:	60b9      	str	r1, [r7, #8]
 8011d22:	607a      	str	r2, [r7, #4]
 8011d24:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011d26:	68bb      	ldr	r3, [r7, #8]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d109      	bne.n	8011d40 <tcp_recv_null+0x28>
 8011d2c:	4b12      	ldr	r3, [pc, #72]	@ (8011d78 <tcp_recv_null+0x60>)
 8011d2e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8011d32:	4912      	ldr	r1, [pc, #72]	@ (8011d7c <tcp_recv_null+0x64>)
 8011d34:	4812      	ldr	r0, [pc, #72]	@ (8011d80 <tcp_recv_null+0x68>)
 8011d36:	f008 f967 	bl	801a008 <iprintf>
 8011d3a:	f06f 030f 	mvn.w	r3, #15
 8011d3e:	e016      	b.n	8011d6e <tcp_recv_null+0x56>

  if (p != NULL) {
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d009      	beq.n	8011d5a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	891b      	ldrh	r3, [r3, #8]
 8011d4a:	4619      	mov	r1, r3
 8011d4c:	68b8      	ldr	r0, [r7, #8]
 8011d4e:	f7ff fb17 	bl	8011380 <tcp_recved>
    pbuf_free(p);
 8011d52:	6878      	ldr	r0, [r7, #4]
 8011d54:	f7fe fd0a 	bl	801076c <pbuf_free>
 8011d58:	e008      	b.n	8011d6c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011d5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d104      	bne.n	8011d6c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8011d62:	68b8      	ldr	r0, [r7, #8]
 8011d64:	f7ff f9bc 	bl	80110e0 <tcp_close>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	e000      	b.n	8011d6e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011d6c:	2300      	movs	r3, #0
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	3710      	adds	r7, #16
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}
 8011d76:	bf00      	nop
 8011d78:	0801bdfc 	.word	0x0801bdfc
 8011d7c:	0801c36c 	.word	0x0801c36c
 8011d80:	0801be40 	.word	0x0801be40

08011d84 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b086      	sub	sp, #24
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	db01      	blt.n	8011d9a <tcp_kill_prio+0x16>
 8011d96:	79fb      	ldrb	r3, [r7, #7]
 8011d98:	e000      	b.n	8011d9c <tcp_kill_prio+0x18>
 8011d9a:	237f      	movs	r3, #127	@ 0x7f
 8011d9c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011d9e:	7afb      	ldrb	r3, [r7, #11]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d034      	beq.n	8011e0e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011da4:	7afb      	ldrb	r3, [r7, #11]
 8011da6:	3b01      	subs	r3, #1
 8011da8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011daa:	2300      	movs	r3, #0
 8011dac:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011dae:	2300      	movs	r3, #0
 8011db0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011db2:	4b19      	ldr	r3, [pc, #100]	@ (8011e18 <tcp_kill_prio+0x94>)
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	617b      	str	r3, [r7, #20]
 8011db8:	e01f      	b.n	8011dfa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011dba:	697b      	ldr	r3, [r7, #20]
 8011dbc:	7d5b      	ldrb	r3, [r3, #21]
 8011dbe:	7afa      	ldrb	r2, [r7, #11]
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	d80c      	bhi.n	8011dde <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011dc4:	697b      	ldr	r3, [r7, #20]
 8011dc6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8011dc8:	7afa      	ldrb	r2, [r7, #11]
 8011dca:	429a      	cmp	r2, r3
 8011dcc:	d112      	bne.n	8011df4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011dce:	4b13      	ldr	r3, [pc, #76]	@ (8011e1c <tcp_kill_prio+0x98>)
 8011dd0:	681a      	ldr	r2, [r3, #0]
 8011dd2:	697b      	ldr	r3, [r7, #20]
 8011dd4:	6a1b      	ldr	r3, [r3, #32]
 8011dd6:	1ad3      	subs	r3, r2, r3
 8011dd8:	68fa      	ldr	r2, [r7, #12]
 8011dda:	429a      	cmp	r2, r3
 8011ddc:	d80a      	bhi.n	8011df4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8011dde:	4b0f      	ldr	r3, [pc, #60]	@ (8011e1c <tcp_kill_prio+0x98>)
 8011de0:	681a      	ldr	r2, [r3, #0]
 8011de2:	697b      	ldr	r3, [r7, #20]
 8011de4:	6a1b      	ldr	r3, [r3, #32]
 8011de6:	1ad3      	subs	r3, r2, r3
 8011de8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8011dea:	697b      	ldr	r3, [r7, #20]
 8011dec:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8011dee:	697b      	ldr	r3, [r7, #20]
 8011df0:	7d5b      	ldrb	r3, [r3, #21]
 8011df2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011df4:	697b      	ldr	r3, [r7, #20]
 8011df6:	68db      	ldr	r3, [r3, #12]
 8011df8:	617b      	str	r3, [r7, #20]
 8011dfa:	697b      	ldr	r3, [r7, #20]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d1dc      	bne.n	8011dba <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8011e00:	693b      	ldr	r3, [r7, #16]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d004      	beq.n	8011e10 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011e06:	6938      	ldr	r0, [r7, #16]
 8011e08:	f7ff fa54 	bl	80112b4 <tcp_abort>
 8011e0c:	e000      	b.n	8011e10 <tcp_kill_prio+0x8c>
    return;
 8011e0e:	bf00      	nop
  }
}
 8011e10:	3718      	adds	r7, #24
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}
 8011e16:	bf00      	nop
 8011e18:	200274b8 	.word	0x200274b8
 8011e1c:	200274ac 	.word	0x200274ac

08011e20 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b086      	sub	sp, #24
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	4603      	mov	r3, r0
 8011e28:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011e2a:	79fb      	ldrb	r3, [r7, #7]
 8011e2c:	2b08      	cmp	r3, #8
 8011e2e:	d009      	beq.n	8011e44 <tcp_kill_state+0x24>
 8011e30:	79fb      	ldrb	r3, [r7, #7]
 8011e32:	2b09      	cmp	r3, #9
 8011e34:	d006      	beq.n	8011e44 <tcp_kill_state+0x24>
 8011e36:	4b1a      	ldr	r3, [pc, #104]	@ (8011ea0 <tcp_kill_state+0x80>)
 8011e38:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8011e3c:	4919      	ldr	r1, [pc, #100]	@ (8011ea4 <tcp_kill_state+0x84>)
 8011e3e:	481a      	ldr	r0, [pc, #104]	@ (8011ea8 <tcp_kill_state+0x88>)
 8011e40:	f008 f8e2 	bl	801a008 <iprintf>

  inactivity = 0;
 8011e44:	2300      	movs	r3, #0
 8011e46:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011e48:	2300      	movs	r3, #0
 8011e4a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e4c:	4b17      	ldr	r3, [pc, #92]	@ (8011eac <tcp_kill_state+0x8c>)
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	617b      	str	r3, [r7, #20]
 8011e52:	e017      	b.n	8011e84 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011e54:	697b      	ldr	r3, [r7, #20]
 8011e56:	7d1b      	ldrb	r3, [r3, #20]
 8011e58:	79fa      	ldrb	r2, [r7, #7]
 8011e5a:	429a      	cmp	r2, r3
 8011e5c:	d10f      	bne.n	8011e7e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011e5e:	4b14      	ldr	r3, [pc, #80]	@ (8011eb0 <tcp_kill_state+0x90>)
 8011e60:	681a      	ldr	r2, [r3, #0]
 8011e62:	697b      	ldr	r3, [r7, #20]
 8011e64:	6a1b      	ldr	r3, [r3, #32]
 8011e66:	1ad3      	subs	r3, r2, r3
 8011e68:	68fa      	ldr	r2, [r7, #12]
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	d807      	bhi.n	8011e7e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011e6e:	4b10      	ldr	r3, [pc, #64]	@ (8011eb0 <tcp_kill_state+0x90>)
 8011e70:	681a      	ldr	r2, [r3, #0]
 8011e72:	697b      	ldr	r3, [r7, #20]
 8011e74:	6a1b      	ldr	r3, [r3, #32]
 8011e76:	1ad3      	subs	r3, r2, r3
 8011e78:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011e7a:	697b      	ldr	r3, [r7, #20]
 8011e7c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011e7e:	697b      	ldr	r3, [r7, #20]
 8011e80:	68db      	ldr	r3, [r3, #12]
 8011e82:	617b      	str	r3, [r7, #20]
 8011e84:	697b      	ldr	r3, [r7, #20]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d1e4      	bne.n	8011e54 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011e8a:	693b      	ldr	r3, [r7, #16]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d003      	beq.n	8011e98 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011e90:	2100      	movs	r1, #0
 8011e92:	6938      	ldr	r0, [r7, #16]
 8011e94:	f7ff f950 	bl	8011138 <tcp_abandon>
  }
}
 8011e98:	bf00      	nop
 8011e9a:	3718      	adds	r7, #24
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bd80      	pop	{r7, pc}
 8011ea0:	0801bdfc 	.word	0x0801bdfc
 8011ea4:	0801c388 	.word	0x0801c388
 8011ea8:	0801be40 	.word	0x0801be40
 8011eac:	200274b8 	.word	0x200274b8
 8011eb0:	200274ac 	.word	0x200274ac

08011eb4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b084      	sub	sp, #16
 8011eb8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011eba:	2300      	movs	r3, #0
 8011ebc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ec2:	4b12      	ldr	r3, [pc, #72]	@ (8011f0c <tcp_kill_timewait+0x58>)
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	60fb      	str	r3, [r7, #12]
 8011ec8:	e012      	b.n	8011ef0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011eca:	4b11      	ldr	r3, [pc, #68]	@ (8011f10 <tcp_kill_timewait+0x5c>)
 8011ecc:	681a      	ldr	r2, [r3, #0]
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	6a1b      	ldr	r3, [r3, #32]
 8011ed2:	1ad3      	subs	r3, r2, r3
 8011ed4:	687a      	ldr	r2, [r7, #4]
 8011ed6:	429a      	cmp	r2, r3
 8011ed8:	d807      	bhi.n	8011eea <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011eda:	4b0d      	ldr	r3, [pc, #52]	@ (8011f10 <tcp_kill_timewait+0x5c>)
 8011edc:	681a      	ldr	r2, [r3, #0]
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	6a1b      	ldr	r3, [r3, #32]
 8011ee2:	1ad3      	subs	r3, r2, r3
 8011ee4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	68db      	ldr	r3, [r3, #12]
 8011eee:	60fb      	str	r3, [r7, #12]
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d1e9      	bne.n	8011eca <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011ef6:	68bb      	ldr	r3, [r7, #8]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d002      	beq.n	8011f02 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011efc:	68b8      	ldr	r0, [r7, #8]
 8011efe:	f7ff f9d9 	bl	80112b4 <tcp_abort>
  }
}
 8011f02:	bf00      	nop
 8011f04:	3710      	adds	r7, #16
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}
 8011f0a:	bf00      	nop
 8011f0c:	200274bc 	.word	0x200274bc
 8011f10:	200274ac 	.word	0x200274ac

08011f14 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b082      	sub	sp, #8
 8011f18:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8011f1a:	4b10      	ldr	r3, [pc, #64]	@ (8011f5c <tcp_handle_closepend+0x48>)
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011f20:	e014      	b.n	8011f4c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	68db      	ldr	r3, [r3, #12]
 8011f26:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	8b5b      	ldrh	r3, [r3, #26]
 8011f2c:	f003 0308 	and.w	r3, r3, #8
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d009      	beq.n	8011f48 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	8b5b      	ldrh	r3, [r3, #26]
 8011f38:	f023 0308 	bic.w	r3, r3, #8
 8011f3c:	b29a      	uxth	r2, r3
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f7ff f862 	bl	801100c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011f48:	683b      	ldr	r3, [r7, #0]
 8011f4a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d1e7      	bne.n	8011f22 <tcp_handle_closepend+0xe>
  }
}
 8011f52:	bf00      	nop
 8011f54:	bf00      	nop
 8011f56:	3708      	adds	r7, #8
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	bd80      	pop	{r7, pc}
 8011f5c:	200274b8 	.word	0x200274b8

08011f60 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b084      	sub	sp, #16
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	4603      	mov	r3, r0
 8011f68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011f6a:	2001      	movs	r0, #1
 8011f6c:	f7fd fce4 	bl	800f938 <memp_malloc>
 8011f70:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d126      	bne.n	8011fc6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011f78:	f7ff ffcc 	bl	8011f14 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011f7c:	f7ff ff9a 	bl	8011eb4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011f80:	2001      	movs	r0, #1
 8011f82:	f7fd fcd9 	bl	800f938 <memp_malloc>
 8011f86:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d11b      	bne.n	8011fc6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011f8e:	2009      	movs	r0, #9
 8011f90:	f7ff ff46 	bl	8011e20 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011f94:	2001      	movs	r0, #1
 8011f96:	f7fd fccf 	bl	800f938 <memp_malloc>
 8011f9a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d111      	bne.n	8011fc6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011fa2:	2008      	movs	r0, #8
 8011fa4:	f7ff ff3c 	bl	8011e20 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011fa8:	2001      	movs	r0, #1
 8011faa:	f7fd fcc5 	bl	800f938 <memp_malloc>
 8011fae:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d107      	bne.n	8011fc6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8011fb6:	79fb      	ldrb	r3, [r7, #7]
 8011fb8:	4618      	mov	r0, r3
 8011fba:	f7ff fee3 	bl	8011d84 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011fbe:	2001      	movs	r0, #1
 8011fc0:	f7fd fcba 	bl	800f938 <memp_malloc>
 8011fc4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d03f      	beq.n	801204c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011fcc:	229c      	movs	r2, #156	@ 0x9c
 8011fce:	2100      	movs	r1, #0
 8011fd0:	68f8      	ldr	r0, [r7, #12]
 8011fd2:	f008 f971 	bl	801a2b8 <memset>
    pcb->prio = prio;
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	79fa      	ldrb	r2, [r7, #7]
 8011fda:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8011fe2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8011fec:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	22ff      	movs	r2, #255	@ 0xff
 8011ffa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8012002:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	2206      	movs	r2, #6
 8012008:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	2206      	movs	r2, #6
 8012010:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012018:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	2201      	movs	r2, #1
 801201e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8012022:	4b0d      	ldr	r3, [pc, #52]	@ (8012058 <tcp_alloc+0xf8>)
 8012024:	681a      	ldr	r2, [r3, #0]
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801202a:	4b0c      	ldr	r3, [pc, #48]	@ (801205c <tcp_alloc+0xfc>)
 801202c:	781a      	ldrb	r2, [r3, #0]
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8012038:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	4a08      	ldr	r2, [pc, #32]	@ (8012060 <tcp_alloc+0x100>)
 8012040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	4a07      	ldr	r2, [pc, #28]	@ (8012064 <tcp_alloc+0x104>)
 8012048:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801204c:	68fb      	ldr	r3, [r7, #12]
}
 801204e:	4618      	mov	r0, r3
 8012050:	3710      	adds	r7, #16
 8012052:	46bd      	mov	sp, r7
 8012054:	bd80      	pop	{r7, pc}
 8012056:	bf00      	nop
 8012058:	200274ac 	.word	0x200274ac
 801205c:	200274c2 	.word	0x200274c2
 8012060:	08011d19 	.word	0x08011d19
 8012064:	006ddd00 	.word	0x006ddd00

08012068 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	b082      	sub	sp, #8
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d107      	bne.n	8012086 <tcp_pcb_purge+0x1e>
 8012076:	4b21      	ldr	r3, [pc, #132]	@ (80120fc <tcp_pcb_purge+0x94>)
 8012078:	f640 0251 	movw	r2, #2129	@ 0x851
 801207c:	4920      	ldr	r1, [pc, #128]	@ (8012100 <tcp_pcb_purge+0x98>)
 801207e:	4821      	ldr	r0, [pc, #132]	@ (8012104 <tcp_pcb_purge+0x9c>)
 8012080:	f007 ffc2 	bl	801a008 <iprintf>
 8012084:	e037      	b.n	80120f6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	7d1b      	ldrb	r3, [r3, #20]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d033      	beq.n	80120f6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012092:	2b0a      	cmp	r3, #10
 8012094:	d02f      	beq.n	80120f6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801209a:	2b01      	cmp	r3, #1
 801209c:	d02b      	beq.n	80120f6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d007      	beq.n	80120b6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80120aa:	4618      	mov	r0, r3
 80120ac:	f7fe fb5e 	bl	801076c <pbuf_free>
      pcb->refused_data = NULL;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	2200      	movs	r2, #0
 80120b4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d002      	beq.n	80120c4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80120be:	6878      	ldr	r0, [r7, #4]
 80120c0:	f000 f986 	bl	80123d0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80120ca:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80120d0:	4618      	mov	r0, r3
 80120d2:	f7ff fdc7 	bl	8011c64 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80120da:	4618      	mov	r0, r3
 80120dc:	f7ff fdc2 	bl	8011c64 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	2200      	movs	r2, #0
 80120e4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	2200      	movs	r2, #0
 80120f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80120f6:	3708      	adds	r7, #8
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bd80      	pop	{r7, pc}
 80120fc:	0801bdfc 	.word	0x0801bdfc
 8012100:	0801c448 	.word	0x0801c448
 8012104:	0801be40 	.word	0x0801be40

08012108 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b084      	sub	sp, #16
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
 8012110:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d106      	bne.n	8012126 <tcp_pcb_remove+0x1e>
 8012118:	4b3e      	ldr	r3, [pc, #248]	@ (8012214 <tcp_pcb_remove+0x10c>)
 801211a:	f640 0283 	movw	r2, #2179	@ 0x883
 801211e:	493e      	ldr	r1, [pc, #248]	@ (8012218 <tcp_pcb_remove+0x110>)
 8012120:	483e      	ldr	r0, [pc, #248]	@ (801221c <tcp_pcb_remove+0x114>)
 8012122:	f007 ff71 	bl	801a008 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d106      	bne.n	801213a <tcp_pcb_remove+0x32>
 801212c:	4b39      	ldr	r3, [pc, #228]	@ (8012214 <tcp_pcb_remove+0x10c>)
 801212e:	f640 0284 	movw	r2, #2180	@ 0x884
 8012132:	493b      	ldr	r1, [pc, #236]	@ (8012220 <tcp_pcb_remove+0x118>)
 8012134:	4839      	ldr	r0, [pc, #228]	@ (801221c <tcp_pcb_remove+0x114>)
 8012136:	f007 ff67 	bl	801a008 <iprintf>

  TCP_RMV(pcblist, pcb);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	683a      	ldr	r2, [r7, #0]
 8012140:	429a      	cmp	r2, r3
 8012142:	d105      	bne.n	8012150 <tcp_pcb_remove+0x48>
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	68da      	ldr	r2, [r3, #12]
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	601a      	str	r2, [r3, #0]
 801214e:	e013      	b.n	8012178 <tcp_pcb_remove+0x70>
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	60fb      	str	r3, [r7, #12]
 8012156:	e00c      	b.n	8012172 <tcp_pcb_remove+0x6a>
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	68db      	ldr	r3, [r3, #12]
 801215c:	683a      	ldr	r2, [r7, #0]
 801215e:	429a      	cmp	r2, r3
 8012160:	d104      	bne.n	801216c <tcp_pcb_remove+0x64>
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	68da      	ldr	r2, [r3, #12]
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	60da      	str	r2, [r3, #12]
 801216a:	e005      	b.n	8012178 <tcp_pcb_remove+0x70>
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	68db      	ldr	r3, [r3, #12]
 8012170:	60fb      	str	r3, [r7, #12]
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d1ef      	bne.n	8012158 <tcp_pcb_remove+0x50>
 8012178:	683b      	ldr	r3, [r7, #0]
 801217a:	2200      	movs	r2, #0
 801217c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801217e:	6838      	ldr	r0, [r7, #0]
 8012180:	f7ff ff72 	bl	8012068 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	7d1b      	ldrb	r3, [r3, #20]
 8012188:	2b0a      	cmp	r3, #10
 801218a:	d013      	beq.n	80121b4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801218c:	683b      	ldr	r3, [r7, #0]
 801218e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012190:	2b01      	cmp	r3, #1
 8012192:	d00f      	beq.n	80121b4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	8b5b      	ldrh	r3, [r3, #26]
 8012198:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801219c:	2b00      	cmp	r3, #0
 801219e:	d009      	beq.n	80121b4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80121a0:	683b      	ldr	r3, [r7, #0]
 80121a2:	8b5b      	ldrh	r3, [r3, #26]
 80121a4:	f043 0302 	orr.w	r3, r3, #2
 80121a8:	b29a      	uxth	r2, r3
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80121ae:	6838      	ldr	r0, [r7, #0]
 80121b0:	f002 ff68 	bl	8015084 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80121b4:	683b      	ldr	r3, [r7, #0]
 80121b6:	7d1b      	ldrb	r3, [r3, #20]
 80121b8:	2b01      	cmp	r3, #1
 80121ba:	d020      	beq.n	80121fe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80121bc:	683b      	ldr	r3, [r7, #0]
 80121be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d006      	beq.n	80121d2 <tcp_pcb_remove+0xca>
 80121c4:	4b13      	ldr	r3, [pc, #76]	@ (8012214 <tcp_pcb_remove+0x10c>)
 80121c6:	f640 0293 	movw	r2, #2195	@ 0x893
 80121ca:	4916      	ldr	r1, [pc, #88]	@ (8012224 <tcp_pcb_remove+0x11c>)
 80121cc:	4813      	ldr	r0, [pc, #76]	@ (801221c <tcp_pcb_remove+0x114>)
 80121ce:	f007 ff1b 	bl	801a008 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d006      	beq.n	80121e8 <tcp_pcb_remove+0xe0>
 80121da:	4b0e      	ldr	r3, [pc, #56]	@ (8012214 <tcp_pcb_remove+0x10c>)
 80121dc:	f640 0294 	movw	r2, #2196	@ 0x894
 80121e0:	4911      	ldr	r1, [pc, #68]	@ (8012228 <tcp_pcb_remove+0x120>)
 80121e2:	480e      	ldr	r0, [pc, #56]	@ (801221c <tcp_pcb_remove+0x114>)
 80121e4:	f007 ff10 	bl	801a008 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d006      	beq.n	80121fe <tcp_pcb_remove+0xf6>
 80121f0:	4b08      	ldr	r3, [pc, #32]	@ (8012214 <tcp_pcb_remove+0x10c>)
 80121f2:	f640 0296 	movw	r2, #2198	@ 0x896
 80121f6:	490d      	ldr	r1, [pc, #52]	@ (801222c <tcp_pcb_remove+0x124>)
 80121f8:	4808      	ldr	r0, [pc, #32]	@ (801221c <tcp_pcb_remove+0x114>)
 80121fa:	f007 ff05 	bl	801a008 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	2200      	movs	r2, #0
 8012202:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012204:	683b      	ldr	r3, [r7, #0]
 8012206:	2200      	movs	r2, #0
 8012208:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801220a:	bf00      	nop
 801220c:	3710      	adds	r7, #16
 801220e:	46bd      	mov	sp, r7
 8012210:	bd80      	pop	{r7, pc}
 8012212:	bf00      	nop
 8012214:	0801bdfc 	.word	0x0801bdfc
 8012218:	0801c464 	.word	0x0801c464
 801221c:	0801be40 	.word	0x0801be40
 8012220:	0801c480 	.word	0x0801c480
 8012224:	0801c4a0 	.word	0x0801c4a0
 8012228:	0801c4b8 	.word	0x0801c4b8
 801222c:	0801c4d4 	.word	0x0801c4d4

08012230 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012230:	b580      	push	{r7, lr}
 8012232:	b082      	sub	sp, #8
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d106      	bne.n	801224c <tcp_next_iss+0x1c>
 801223e:	4b0a      	ldr	r3, [pc, #40]	@ (8012268 <tcp_next_iss+0x38>)
 8012240:	f640 02af 	movw	r2, #2223	@ 0x8af
 8012244:	4909      	ldr	r1, [pc, #36]	@ (801226c <tcp_next_iss+0x3c>)
 8012246:	480a      	ldr	r0, [pc, #40]	@ (8012270 <tcp_next_iss+0x40>)
 8012248:	f007 fede 	bl	801a008 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801224c:	4b09      	ldr	r3, [pc, #36]	@ (8012274 <tcp_next_iss+0x44>)
 801224e:	681a      	ldr	r2, [r3, #0]
 8012250:	4b09      	ldr	r3, [pc, #36]	@ (8012278 <tcp_next_iss+0x48>)
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	4413      	add	r3, r2
 8012256:	4a07      	ldr	r2, [pc, #28]	@ (8012274 <tcp_next_iss+0x44>)
 8012258:	6013      	str	r3, [r2, #0]
  return iss;
 801225a:	4b06      	ldr	r3, [pc, #24]	@ (8012274 <tcp_next_iss+0x44>)
 801225c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801225e:	4618      	mov	r0, r3
 8012260:	3708      	adds	r7, #8
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
 8012266:	bf00      	nop
 8012268:	0801bdfc 	.word	0x0801bdfc
 801226c:	0801c4ec 	.word	0x0801c4ec
 8012270:	0801be40 	.word	0x0801be40
 8012274:	20000028 	.word	0x20000028
 8012278:	200274ac 	.word	0x200274ac

0801227c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	b086      	sub	sp, #24
 8012280:	af00      	add	r7, sp, #0
 8012282:	4603      	mov	r3, r0
 8012284:	60b9      	str	r1, [r7, #8]
 8012286:	607a      	str	r2, [r7, #4]
 8012288:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d106      	bne.n	801229e <tcp_eff_send_mss_netif+0x22>
 8012290:	4b14      	ldr	r3, [pc, #80]	@ (80122e4 <tcp_eff_send_mss_netif+0x68>)
 8012292:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8012296:	4914      	ldr	r1, [pc, #80]	@ (80122e8 <tcp_eff_send_mss_netif+0x6c>)
 8012298:	4814      	ldr	r0, [pc, #80]	@ (80122ec <tcp_eff_send_mss_netif+0x70>)
 801229a:	f007 feb5 	bl	801a008 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801229e:	68bb      	ldr	r3, [r7, #8]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d101      	bne.n	80122a8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80122a4:	89fb      	ldrh	r3, [r7, #14]
 80122a6:	e019      	b.n	80122dc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80122a8:	68bb      	ldr	r3, [r7, #8]
 80122aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80122ac:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80122ae:	8afb      	ldrh	r3, [r7, #22]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d012      	beq.n	80122da <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80122b4:	2328      	movs	r3, #40	@ 0x28
 80122b6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80122b8:	8afa      	ldrh	r2, [r7, #22]
 80122ba:	8abb      	ldrh	r3, [r7, #20]
 80122bc:	429a      	cmp	r2, r3
 80122be:	d904      	bls.n	80122ca <tcp_eff_send_mss_netif+0x4e>
 80122c0:	8afa      	ldrh	r2, [r7, #22]
 80122c2:	8abb      	ldrh	r3, [r7, #20]
 80122c4:	1ad3      	subs	r3, r2, r3
 80122c6:	b29b      	uxth	r3, r3
 80122c8:	e000      	b.n	80122cc <tcp_eff_send_mss_netif+0x50>
 80122ca:	2300      	movs	r3, #0
 80122cc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80122ce:	8a7a      	ldrh	r2, [r7, #18]
 80122d0:	89fb      	ldrh	r3, [r7, #14]
 80122d2:	4293      	cmp	r3, r2
 80122d4:	bf28      	it	cs
 80122d6:	4613      	movcs	r3, r2
 80122d8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80122da:	89fb      	ldrh	r3, [r7, #14]
}
 80122dc:	4618      	mov	r0, r3
 80122de:	3718      	adds	r7, #24
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}
 80122e4:	0801bdfc 	.word	0x0801bdfc
 80122e8:	0801c508 	.word	0x0801c508
 80122ec:	0801be40 	.word	0x0801be40

080122f0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b084      	sub	sp, #16
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
 80122f8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d119      	bne.n	8012338 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012304:	4b10      	ldr	r3, [pc, #64]	@ (8012348 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8012306:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801230a:	4910      	ldr	r1, [pc, #64]	@ (801234c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801230c:	4810      	ldr	r0, [pc, #64]	@ (8012350 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801230e:	f007 fe7b 	bl	801a008 <iprintf>

  while (pcb != NULL) {
 8012312:	e011      	b.n	8012338 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	681a      	ldr	r2, [r3, #0]
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	429a      	cmp	r2, r3
 801231e:	d108      	bne.n	8012332 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	68db      	ldr	r3, [r3, #12]
 8012324:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012326:	68f8      	ldr	r0, [r7, #12]
 8012328:	f7fe ffc4 	bl	80112b4 <tcp_abort>
      pcb = next;
 801232c:	68bb      	ldr	r3, [r7, #8]
 801232e:	60fb      	str	r3, [r7, #12]
 8012330:	e002      	b.n	8012338 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	68db      	ldr	r3, [r3, #12]
 8012336:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d1ea      	bne.n	8012314 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801233e:	bf00      	nop
 8012340:	bf00      	nop
 8012342:	3710      	adds	r7, #16
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}
 8012348:	0801bdfc 	.word	0x0801bdfc
 801234c:	0801c530 	.word	0x0801c530
 8012350:	0801be40 	.word	0x0801be40

08012354 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b084      	sub	sp, #16
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
 801235c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d02a      	beq.n	80123ba <tcp_netif_ip_addr_changed+0x66>
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d026      	beq.n	80123ba <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801236c:	4b15      	ldr	r3, [pc, #84]	@ (80123c4 <tcp_netif_ip_addr_changed+0x70>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	4619      	mov	r1, r3
 8012372:	6878      	ldr	r0, [r7, #4]
 8012374:	f7ff ffbc 	bl	80122f0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012378:	4b13      	ldr	r3, [pc, #76]	@ (80123c8 <tcp_netif_ip_addr_changed+0x74>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	4619      	mov	r1, r3
 801237e:	6878      	ldr	r0, [r7, #4]
 8012380:	f7ff ffb6 	bl	80122f0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d017      	beq.n	80123ba <tcp_netif_ip_addr_changed+0x66>
 801238a:	683b      	ldr	r3, [r7, #0]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d013      	beq.n	80123ba <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012392:	4b0e      	ldr	r3, [pc, #56]	@ (80123cc <tcp_netif_ip_addr_changed+0x78>)
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	60fb      	str	r3, [r7, #12]
 8012398:	e00c      	b.n	80123b4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	681a      	ldr	r2, [r3, #0]
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	429a      	cmp	r2, r3
 80123a4:	d103      	bne.n	80123ae <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	681a      	ldr	r2, [r3, #0]
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	68db      	ldr	r3, [r3, #12]
 80123b2:	60fb      	str	r3, [r7, #12]
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d1ef      	bne.n	801239a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80123ba:	bf00      	nop
 80123bc:	3710      	adds	r7, #16
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}
 80123c2:	bf00      	nop
 80123c4:	200274b8 	.word	0x200274b8
 80123c8:	200274b0 	.word	0x200274b0
 80123cc:	200274b4 	.word	0x200274b4

080123d0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b082      	sub	sp, #8
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d007      	beq.n	80123f0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80123e4:	4618      	mov	r0, r3
 80123e6:	f7ff fc3d 	bl	8011c64 <tcp_segs_free>
    pcb->ooseq = NULL;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	2200      	movs	r2, #0
 80123ee:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80123f0:	bf00      	nop
 80123f2:	3708      	adds	r7, #8
 80123f4:	46bd      	mov	sp, r7
 80123f6:	bd80      	pop	{r7, pc}

080123f8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80123f8:	b590      	push	{r4, r7, lr}
 80123fa:	b08d      	sub	sp, #52	@ 0x34
 80123fc:	af04      	add	r7, sp, #16
 80123fe:	6078      	str	r0, [r7, #4]
 8012400:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d105      	bne.n	8012414 <tcp_input+0x1c>
 8012408:	4b9b      	ldr	r3, [pc, #620]	@ (8012678 <tcp_input+0x280>)
 801240a:	2283      	movs	r2, #131	@ 0x83
 801240c:	499b      	ldr	r1, [pc, #620]	@ (801267c <tcp_input+0x284>)
 801240e:	489c      	ldr	r0, [pc, #624]	@ (8012680 <tcp_input+0x288>)
 8012410:	f007 fdfa 	bl	801a008 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	685b      	ldr	r3, [r3, #4]
 8012418:	4a9a      	ldr	r2, [pc, #616]	@ (8012684 <tcp_input+0x28c>)
 801241a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	895b      	ldrh	r3, [r3, #10]
 8012420:	2b13      	cmp	r3, #19
 8012422:	f240 83d1 	bls.w	8012bc8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012426:	4b98      	ldr	r3, [pc, #608]	@ (8012688 <tcp_input+0x290>)
 8012428:	695b      	ldr	r3, [r3, #20]
 801242a:	4a97      	ldr	r2, [pc, #604]	@ (8012688 <tcp_input+0x290>)
 801242c:	6812      	ldr	r2, [r2, #0]
 801242e:	4611      	mov	r1, r2
 8012430:	4618      	mov	r0, r3
 8012432:	f005 feef 	bl	8018214 <ip4_addr_isbroadcast_u32>
 8012436:	4603      	mov	r3, r0
 8012438:	2b00      	cmp	r3, #0
 801243a:	f040 83c7 	bne.w	8012bcc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801243e:	4b92      	ldr	r3, [pc, #584]	@ (8012688 <tcp_input+0x290>)
 8012440:	695b      	ldr	r3, [r3, #20]
 8012442:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012446:	2be0      	cmp	r3, #224	@ 0xe0
 8012448:	f000 83c0 	beq.w	8012bcc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801244c:	4b8d      	ldr	r3, [pc, #564]	@ (8012684 <tcp_input+0x28c>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	899b      	ldrh	r3, [r3, #12]
 8012452:	b29b      	uxth	r3, r3
 8012454:	4618      	mov	r0, r3
 8012456:	f7fc fd9b 	bl	800ef90 <lwip_htons>
 801245a:	4603      	mov	r3, r0
 801245c:	0b1b      	lsrs	r3, r3, #12
 801245e:	b29b      	uxth	r3, r3
 8012460:	b2db      	uxtb	r3, r3
 8012462:	009b      	lsls	r3, r3, #2
 8012464:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012466:	7cbb      	ldrb	r3, [r7, #18]
 8012468:	2b13      	cmp	r3, #19
 801246a:	f240 83b1 	bls.w	8012bd0 <tcp_input+0x7d8>
 801246e:	7cbb      	ldrb	r3, [r7, #18]
 8012470:	b29a      	uxth	r2, r3
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	891b      	ldrh	r3, [r3, #8]
 8012476:	429a      	cmp	r2, r3
 8012478:	f200 83aa 	bhi.w	8012bd0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801247c:	7cbb      	ldrb	r3, [r7, #18]
 801247e:	b29b      	uxth	r3, r3
 8012480:	3b14      	subs	r3, #20
 8012482:	b29a      	uxth	r2, r3
 8012484:	4b81      	ldr	r3, [pc, #516]	@ (801268c <tcp_input+0x294>)
 8012486:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012488:	4b81      	ldr	r3, [pc, #516]	@ (8012690 <tcp_input+0x298>)
 801248a:	2200      	movs	r2, #0
 801248c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	895a      	ldrh	r2, [r3, #10]
 8012492:	7cbb      	ldrb	r3, [r7, #18]
 8012494:	b29b      	uxth	r3, r3
 8012496:	429a      	cmp	r2, r3
 8012498:	d309      	bcc.n	80124ae <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801249a:	4b7c      	ldr	r3, [pc, #496]	@ (801268c <tcp_input+0x294>)
 801249c:	881a      	ldrh	r2, [r3, #0]
 801249e:	4b7d      	ldr	r3, [pc, #500]	@ (8012694 <tcp_input+0x29c>)
 80124a0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80124a2:	7cbb      	ldrb	r3, [r7, #18]
 80124a4:	4619      	mov	r1, r3
 80124a6:	6878      	ldr	r0, [r7, #4]
 80124a8:	f7fe f8da 	bl	8010660 <pbuf_remove_header>
 80124ac:	e04e      	b.n	801254c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d105      	bne.n	80124c2 <tcp_input+0xca>
 80124b6:	4b70      	ldr	r3, [pc, #448]	@ (8012678 <tcp_input+0x280>)
 80124b8:	22c2      	movs	r2, #194	@ 0xc2
 80124ba:	4977      	ldr	r1, [pc, #476]	@ (8012698 <tcp_input+0x2a0>)
 80124bc:	4870      	ldr	r0, [pc, #448]	@ (8012680 <tcp_input+0x288>)
 80124be:	f007 fda3 	bl	801a008 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80124c2:	2114      	movs	r1, #20
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f7fe f8cb 	bl	8010660 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	895a      	ldrh	r2, [r3, #10]
 80124ce:	4b71      	ldr	r3, [pc, #452]	@ (8012694 <tcp_input+0x29c>)
 80124d0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80124d2:	4b6e      	ldr	r3, [pc, #440]	@ (801268c <tcp_input+0x294>)
 80124d4:	881a      	ldrh	r2, [r3, #0]
 80124d6:	4b6f      	ldr	r3, [pc, #444]	@ (8012694 <tcp_input+0x29c>)
 80124d8:	881b      	ldrh	r3, [r3, #0]
 80124da:	1ad3      	subs	r3, r2, r3
 80124dc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80124de:	4b6d      	ldr	r3, [pc, #436]	@ (8012694 <tcp_input+0x29c>)
 80124e0:	881b      	ldrh	r3, [r3, #0]
 80124e2:	4619      	mov	r1, r3
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f7fe f8bb 	bl	8010660 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	895b      	ldrh	r3, [r3, #10]
 80124f0:	8a3a      	ldrh	r2, [r7, #16]
 80124f2:	429a      	cmp	r2, r3
 80124f4:	f200 836e 	bhi.w	8012bd4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	685b      	ldr	r3, [r3, #4]
 80124fe:	4a64      	ldr	r2, [pc, #400]	@ (8012690 <tcp_input+0x298>)
 8012500:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	8a3a      	ldrh	r2, [r7, #16]
 8012508:	4611      	mov	r1, r2
 801250a:	4618      	mov	r0, r3
 801250c:	f7fe f8a8 	bl	8010660 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	891a      	ldrh	r2, [r3, #8]
 8012514:	8a3b      	ldrh	r3, [r7, #16]
 8012516:	1ad3      	subs	r3, r2, r3
 8012518:	b29a      	uxth	r2, r3
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	895b      	ldrh	r3, [r3, #10]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d005      	beq.n	8012532 <tcp_input+0x13a>
 8012526:	4b54      	ldr	r3, [pc, #336]	@ (8012678 <tcp_input+0x280>)
 8012528:	22df      	movs	r2, #223	@ 0xdf
 801252a:	495c      	ldr	r1, [pc, #368]	@ (801269c <tcp_input+0x2a4>)
 801252c:	4854      	ldr	r0, [pc, #336]	@ (8012680 <tcp_input+0x288>)
 801252e:	f007 fd6b 	bl	801a008 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	891a      	ldrh	r2, [r3, #8]
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	891b      	ldrh	r3, [r3, #8]
 801253c:	429a      	cmp	r2, r3
 801253e:	d005      	beq.n	801254c <tcp_input+0x154>
 8012540:	4b4d      	ldr	r3, [pc, #308]	@ (8012678 <tcp_input+0x280>)
 8012542:	22e0      	movs	r2, #224	@ 0xe0
 8012544:	4956      	ldr	r1, [pc, #344]	@ (80126a0 <tcp_input+0x2a8>)
 8012546:	484e      	ldr	r0, [pc, #312]	@ (8012680 <tcp_input+0x288>)
 8012548:	f007 fd5e 	bl	801a008 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801254c:	4b4d      	ldr	r3, [pc, #308]	@ (8012684 <tcp_input+0x28c>)
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	881b      	ldrh	r3, [r3, #0]
 8012552:	b29b      	uxth	r3, r3
 8012554:	4a4b      	ldr	r2, [pc, #300]	@ (8012684 <tcp_input+0x28c>)
 8012556:	6814      	ldr	r4, [r2, #0]
 8012558:	4618      	mov	r0, r3
 801255a:	f7fc fd19 	bl	800ef90 <lwip_htons>
 801255e:	4603      	mov	r3, r0
 8012560:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012562:	4b48      	ldr	r3, [pc, #288]	@ (8012684 <tcp_input+0x28c>)
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	885b      	ldrh	r3, [r3, #2]
 8012568:	b29b      	uxth	r3, r3
 801256a:	4a46      	ldr	r2, [pc, #280]	@ (8012684 <tcp_input+0x28c>)
 801256c:	6814      	ldr	r4, [r2, #0]
 801256e:	4618      	mov	r0, r3
 8012570:	f7fc fd0e 	bl	800ef90 <lwip_htons>
 8012574:	4603      	mov	r3, r0
 8012576:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012578:	4b42      	ldr	r3, [pc, #264]	@ (8012684 <tcp_input+0x28c>)
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	685b      	ldr	r3, [r3, #4]
 801257e:	4a41      	ldr	r2, [pc, #260]	@ (8012684 <tcp_input+0x28c>)
 8012580:	6814      	ldr	r4, [r2, #0]
 8012582:	4618      	mov	r0, r3
 8012584:	f7fc fd1a 	bl	800efbc <lwip_htonl>
 8012588:	4603      	mov	r3, r0
 801258a:	6063      	str	r3, [r4, #4]
 801258c:	6863      	ldr	r3, [r4, #4]
 801258e:	4a45      	ldr	r2, [pc, #276]	@ (80126a4 <tcp_input+0x2ac>)
 8012590:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012592:	4b3c      	ldr	r3, [pc, #240]	@ (8012684 <tcp_input+0x28c>)
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	689b      	ldr	r3, [r3, #8]
 8012598:	4a3a      	ldr	r2, [pc, #232]	@ (8012684 <tcp_input+0x28c>)
 801259a:	6814      	ldr	r4, [r2, #0]
 801259c:	4618      	mov	r0, r3
 801259e:	f7fc fd0d 	bl	800efbc <lwip_htonl>
 80125a2:	4603      	mov	r3, r0
 80125a4:	60a3      	str	r3, [r4, #8]
 80125a6:	68a3      	ldr	r3, [r4, #8]
 80125a8:	4a3f      	ldr	r2, [pc, #252]	@ (80126a8 <tcp_input+0x2b0>)
 80125aa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80125ac:	4b35      	ldr	r3, [pc, #212]	@ (8012684 <tcp_input+0x28c>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	89db      	ldrh	r3, [r3, #14]
 80125b2:	b29b      	uxth	r3, r3
 80125b4:	4a33      	ldr	r2, [pc, #204]	@ (8012684 <tcp_input+0x28c>)
 80125b6:	6814      	ldr	r4, [r2, #0]
 80125b8:	4618      	mov	r0, r3
 80125ba:	f7fc fce9 	bl	800ef90 <lwip_htons>
 80125be:	4603      	mov	r3, r0
 80125c0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80125c2:	4b30      	ldr	r3, [pc, #192]	@ (8012684 <tcp_input+0x28c>)
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	899b      	ldrh	r3, [r3, #12]
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	4618      	mov	r0, r3
 80125cc:	f7fc fce0 	bl	800ef90 <lwip_htons>
 80125d0:	4603      	mov	r3, r0
 80125d2:	b2db      	uxtb	r3, r3
 80125d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80125d8:	b2da      	uxtb	r2, r3
 80125da:	4b34      	ldr	r3, [pc, #208]	@ (80126ac <tcp_input+0x2b4>)
 80125dc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	891a      	ldrh	r2, [r3, #8]
 80125e2:	4b33      	ldr	r3, [pc, #204]	@ (80126b0 <tcp_input+0x2b8>)
 80125e4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80125e6:	4b31      	ldr	r3, [pc, #196]	@ (80126ac <tcp_input+0x2b4>)
 80125e8:	781b      	ldrb	r3, [r3, #0]
 80125ea:	f003 0303 	and.w	r3, r3, #3
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d00c      	beq.n	801260c <tcp_input+0x214>
    tcplen++;
 80125f2:	4b2f      	ldr	r3, [pc, #188]	@ (80126b0 <tcp_input+0x2b8>)
 80125f4:	881b      	ldrh	r3, [r3, #0]
 80125f6:	3301      	adds	r3, #1
 80125f8:	b29a      	uxth	r2, r3
 80125fa:	4b2d      	ldr	r3, [pc, #180]	@ (80126b0 <tcp_input+0x2b8>)
 80125fc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	891a      	ldrh	r2, [r3, #8]
 8012602:	4b2b      	ldr	r3, [pc, #172]	@ (80126b0 <tcp_input+0x2b8>)
 8012604:	881b      	ldrh	r3, [r3, #0]
 8012606:	429a      	cmp	r2, r3
 8012608:	f200 82e6 	bhi.w	8012bd8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801260c:	2300      	movs	r3, #0
 801260e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012610:	4b28      	ldr	r3, [pc, #160]	@ (80126b4 <tcp_input+0x2bc>)
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	61fb      	str	r3, [r7, #28]
 8012616:	e09d      	b.n	8012754 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012618:	69fb      	ldr	r3, [r7, #28]
 801261a:	7d1b      	ldrb	r3, [r3, #20]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d105      	bne.n	801262c <tcp_input+0x234>
 8012620:	4b15      	ldr	r3, [pc, #84]	@ (8012678 <tcp_input+0x280>)
 8012622:	22fb      	movs	r2, #251	@ 0xfb
 8012624:	4924      	ldr	r1, [pc, #144]	@ (80126b8 <tcp_input+0x2c0>)
 8012626:	4816      	ldr	r0, [pc, #88]	@ (8012680 <tcp_input+0x288>)
 8012628:	f007 fcee 	bl	801a008 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801262c:	69fb      	ldr	r3, [r7, #28]
 801262e:	7d1b      	ldrb	r3, [r3, #20]
 8012630:	2b0a      	cmp	r3, #10
 8012632:	d105      	bne.n	8012640 <tcp_input+0x248>
 8012634:	4b10      	ldr	r3, [pc, #64]	@ (8012678 <tcp_input+0x280>)
 8012636:	22fc      	movs	r2, #252	@ 0xfc
 8012638:	4920      	ldr	r1, [pc, #128]	@ (80126bc <tcp_input+0x2c4>)
 801263a:	4811      	ldr	r0, [pc, #68]	@ (8012680 <tcp_input+0x288>)
 801263c:	f007 fce4 	bl	801a008 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012640:	69fb      	ldr	r3, [r7, #28]
 8012642:	7d1b      	ldrb	r3, [r3, #20]
 8012644:	2b01      	cmp	r3, #1
 8012646:	d105      	bne.n	8012654 <tcp_input+0x25c>
 8012648:	4b0b      	ldr	r3, [pc, #44]	@ (8012678 <tcp_input+0x280>)
 801264a:	22fd      	movs	r2, #253	@ 0xfd
 801264c:	491c      	ldr	r1, [pc, #112]	@ (80126c0 <tcp_input+0x2c8>)
 801264e:	480c      	ldr	r0, [pc, #48]	@ (8012680 <tcp_input+0x288>)
 8012650:	f007 fcda 	bl	801a008 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012654:	69fb      	ldr	r3, [r7, #28]
 8012656:	7a1b      	ldrb	r3, [r3, #8]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d033      	beq.n	80126c4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801265c:	69fb      	ldr	r3, [r7, #28]
 801265e:	7a1a      	ldrb	r2, [r3, #8]
 8012660:	4b09      	ldr	r3, [pc, #36]	@ (8012688 <tcp_input+0x290>)
 8012662:	685b      	ldr	r3, [r3, #4]
 8012664:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012668:	3301      	adds	r3, #1
 801266a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801266c:	429a      	cmp	r2, r3
 801266e:	d029      	beq.n	80126c4 <tcp_input+0x2cc>
      prev = pcb;
 8012670:	69fb      	ldr	r3, [r7, #28]
 8012672:	61bb      	str	r3, [r7, #24]
      continue;
 8012674:	e06b      	b.n	801274e <tcp_input+0x356>
 8012676:	bf00      	nop
 8012678:	0801c564 	.word	0x0801c564
 801267c:	0801c598 	.word	0x0801c598
 8012680:	0801c5b0 	.word	0x0801c5b0
 8012684:	200274d4 	.word	0x200274d4
 8012688:	200243ac 	.word	0x200243ac
 801268c:	200274d8 	.word	0x200274d8
 8012690:	200274dc 	.word	0x200274dc
 8012694:	200274da 	.word	0x200274da
 8012698:	0801c5d8 	.word	0x0801c5d8
 801269c:	0801c5e8 	.word	0x0801c5e8
 80126a0:	0801c5f4 	.word	0x0801c5f4
 80126a4:	200274e4 	.word	0x200274e4
 80126a8:	200274e8 	.word	0x200274e8
 80126ac:	200274f0 	.word	0x200274f0
 80126b0:	200274ee 	.word	0x200274ee
 80126b4:	200274b8 	.word	0x200274b8
 80126b8:	0801c614 	.word	0x0801c614
 80126bc:	0801c63c 	.word	0x0801c63c
 80126c0:	0801c668 	.word	0x0801c668
    }

    if (pcb->remote_port == tcphdr->src &&
 80126c4:	69fb      	ldr	r3, [r7, #28]
 80126c6:	8b1a      	ldrh	r2, [r3, #24]
 80126c8:	4b72      	ldr	r3, [pc, #456]	@ (8012894 <tcp_input+0x49c>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	881b      	ldrh	r3, [r3, #0]
 80126ce:	b29b      	uxth	r3, r3
 80126d0:	429a      	cmp	r2, r3
 80126d2:	d13a      	bne.n	801274a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80126d4:	69fb      	ldr	r3, [r7, #28]
 80126d6:	8ada      	ldrh	r2, [r3, #22]
 80126d8:	4b6e      	ldr	r3, [pc, #440]	@ (8012894 <tcp_input+0x49c>)
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	885b      	ldrh	r3, [r3, #2]
 80126de:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80126e0:	429a      	cmp	r2, r3
 80126e2:	d132      	bne.n	801274a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80126e4:	69fb      	ldr	r3, [r7, #28]
 80126e6:	685a      	ldr	r2, [r3, #4]
 80126e8:	4b6b      	ldr	r3, [pc, #428]	@ (8012898 <tcp_input+0x4a0>)
 80126ea:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80126ec:	429a      	cmp	r2, r3
 80126ee:	d12c      	bne.n	801274a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80126f0:	69fb      	ldr	r3, [r7, #28]
 80126f2:	681a      	ldr	r2, [r3, #0]
 80126f4:	4b68      	ldr	r3, [pc, #416]	@ (8012898 <tcp_input+0x4a0>)
 80126f6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80126f8:	429a      	cmp	r2, r3
 80126fa:	d126      	bne.n	801274a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80126fc:	69fb      	ldr	r3, [r7, #28]
 80126fe:	68db      	ldr	r3, [r3, #12]
 8012700:	69fa      	ldr	r2, [r7, #28]
 8012702:	429a      	cmp	r2, r3
 8012704:	d106      	bne.n	8012714 <tcp_input+0x31c>
 8012706:	4b65      	ldr	r3, [pc, #404]	@ (801289c <tcp_input+0x4a4>)
 8012708:	f240 120d 	movw	r2, #269	@ 0x10d
 801270c:	4964      	ldr	r1, [pc, #400]	@ (80128a0 <tcp_input+0x4a8>)
 801270e:	4865      	ldr	r0, [pc, #404]	@ (80128a4 <tcp_input+0x4ac>)
 8012710:	f007 fc7a 	bl	801a008 <iprintf>
      if (prev != NULL) {
 8012714:	69bb      	ldr	r3, [r7, #24]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d00a      	beq.n	8012730 <tcp_input+0x338>
        prev->next = pcb->next;
 801271a:	69fb      	ldr	r3, [r7, #28]
 801271c:	68da      	ldr	r2, [r3, #12]
 801271e:	69bb      	ldr	r3, [r7, #24]
 8012720:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012722:	4b61      	ldr	r3, [pc, #388]	@ (80128a8 <tcp_input+0x4b0>)
 8012724:	681a      	ldr	r2, [r3, #0]
 8012726:	69fb      	ldr	r3, [r7, #28]
 8012728:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801272a:	4a5f      	ldr	r2, [pc, #380]	@ (80128a8 <tcp_input+0x4b0>)
 801272c:	69fb      	ldr	r3, [r7, #28]
 801272e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012730:	69fb      	ldr	r3, [r7, #28]
 8012732:	68db      	ldr	r3, [r3, #12]
 8012734:	69fa      	ldr	r2, [r7, #28]
 8012736:	429a      	cmp	r2, r3
 8012738:	d111      	bne.n	801275e <tcp_input+0x366>
 801273a:	4b58      	ldr	r3, [pc, #352]	@ (801289c <tcp_input+0x4a4>)
 801273c:	f240 1215 	movw	r2, #277	@ 0x115
 8012740:	495a      	ldr	r1, [pc, #360]	@ (80128ac <tcp_input+0x4b4>)
 8012742:	4858      	ldr	r0, [pc, #352]	@ (80128a4 <tcp_input+0x4ac>)
 8012744:	f007 fc60 	bl	801a008 <iprintf>
      break;
 8012748:	e009      	b.n	801275e <tcp_input+0x366>
    }
    prev = pcb;
 801274a:	69fb      	ldr	r3, [r7, #28]
 801274c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801274e:	69fb      	ldr	r3, [r7, #28]
 8012750:	68db      	ldr	r3, [r3, #12]
 8012752:	61fb      	str	r3, [r7, #28]
 8012754:	69fb      	ldr	r3, [r7, #28]
 8012756:	2b00      	cmp	r3, #0
 8012758:	f47f af5e 	bne.w	8012618 <tcp_input+0x220>
 801275c:	e000      	b.n	8012760 <tcp_input+0x368>
      break;
 801275e:	bf00      	nop
  }

  if (pcb == NULL) {
 8012760:	69fb      	ldr	r3, [r7, #28]
 8012762:	2b00      	cmp	r3, #0
 8012764:	f040 80aa 	bne.w	80128bc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012768:	4b51      	ldr	r3, [pc, #324]	@ (80128b0 <tcp_input+0x4b8>)
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	61fb      	str	r3, [r7, #28]
 801276e:	e03f      	b.n	80127f0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012770:	69fb      	ldr	r3, [r7, #28]
 8012772:	7d1b      	ldrb	r3, [r3, #20]
 8012774:	2b0a      	cmp	r3, #10
 8012776:	d006      	beq.n	8012786 <tcp_input+0x38e>
 8012778:	4b48      	ldr	r3, [pc, #288]	@ (801289c <tcp_input+0x4a4>)
 801277a:	f240 121f 	movw	r2, #287	@ 0x11f
 801277e:	494d      	ldr	r1, [pc, #308]	@ (80128b4 <tcp_input+0x4bc>)
 8012780:	4848      	ldr	r0, [pc, #288]	@ (80128a4 <tcp_input+0x4ac>)
 8012782:	f007 fc41 	bl	801a008 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012786:	69fb      	ldr	r3, [r7, #28]
 8012788:	7a1b      	ldrb	r3, [r3, #8]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d009      	beq.n	80127a2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801278e:	69fb      	ldr	r3, [r7, #28]
 8012790:	7a1a      	ldrb	r2, [r3, #8]
 8012792:	4b41      	ldr	r3, [pc, #260]	@ (8012898 <tcp_input+0x4a0>)
 8012794:	685b      	ldr	r3, [r3, #4]
 8012796:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801279a:	3301      	adds	r3, #1
 801279c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801279e:	429a      	cmp	r2, r3
 80127a0:	d122      	bne.n	80127e8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80127a2:	69fb      	ldr	r3, [r7, #28]
 80127a4:	8b1a      	ldrh	r2, [r3, #24]
 80127a6:	4b3b      	ldr	r3, [pc, #236]	@ (8012894 <tcp_input+0x49c>)
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	881b      	ldrh	r3, [r3, #0]
 80127ac:	b29b      	uxth	r3, r3
 80127ae:	429a      	cmp	r2, r3
 80127b0:	d11b      	bne.n	80127ea <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80127b2:	69fb      	ldr	r3, [r7, #28]
 80127b4:	8ada      	ldrh	r2, [r3, #22]
 80127b6:	4b37      	ldr	r3, [pc, #220]	@ (8012894 <tcp_input+0x49c>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	885b      	ldrh	r3, [r3, #2]
 80127bc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80127be:	429a      	cmp	r2, r3
 80127c0:	d113      	bne.n	80127ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80127c2:	69fb      	ldr	r3, [r7, #28]
 80127c4:	685a      	ldr	r2, [r3, #4]
 80127c6:	4b34      	ldr	r3, [pc, #208]	@ (8012898 <tcp_input+0x4a0>)
 80127c8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80127ca:	429a      	cmp	r2, r3
 80127cc:	d10d      	bne.n	80127ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80127ce:	69fb      	ldr	r3, [r7, #28]
 80127d0:	681a      	ldr	r2, [r3, #0]
 80127d2:	4b31      	ldr	r3, [pc, #196]	@ (8012898 <tcp_input+0x4a0>)
 80127d4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80127d6:	429a      	cmp	r2, r3
 80127d8:	d107      	bne.n	80127ea <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80127da:	69f8      	ldr	r0, [r7, #28]
 80127dc:	f000 fb56 	bl	8012e8c <tcp_timewait_input>
        }
        pbuf_free(p);
 80127e0:	6878      	ldr	r0, [r7, #4]
 80127e2:	f7fd ffc3 	bl	801076c <pbuf_free>
        return;
 80127e6:	e1fd      	b.n	8012be4 <tcp_input+0x7ec>
        continue;
 80127e8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80127ea:	69fb      	ldr	r3, [r7, #28]
 80127ec:	68db      	ldr	r3, [r3, #12]
 80127ee:	61fb      	str	r3, [r7, #28]
 80127f0:	69fb      	ldr	r3, [r7, #28]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d1bc      	bne.n	8012770 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80127f6:	2300      	movs	r3, #0
 80127f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80127fa:	4b2f      	ldr	r3, [pc, #188]	@ (80128b8 <tcp_input+0x4c0>)
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	617b      	str	r3, [r7, #20]
 8012800:	e02a      	b.n	8012858 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012802:	697b      	ldr	r3, [r7, #20]
 8012804:	7a1b      	ldrb	r3, [r3, #8]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d00c      	beq.n	8012824 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801280a:	697b      	ldr	r3, [r7, #20]
 801280c:	7a1a      	ldrb	r2, [r3, #8]
 801280e:	4b22      	ldr	r3, [pc, #136]	@ (8012898 <tcp_input+0x4a0>)
 8012810:	685b      	ldr	r3, [r3, #4]
 8012812:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012816:	3301      	adds	r3, #1
 8012818:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801281a:	429a      	cmp	r2, r3
 801281c:	d002      	beq.n	8012824 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	61bb      	str	r3, [r7, #24]
        continue;
 8012822:	e016      	b.n	8012852 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	8ada      	ldrh	r2, [r3, #22]
 8012828:	4b1a      	ldr	r3, [pc, #104]	@ (8012894 <tcp_input+0x49c>)
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	885b      	ldrh	r3, [r3, #2]
 801282e:	b29b      	uxth	r3, r3
 8012830:	429a      	cmp	r2, r3
 8012832:	d10c      	bne.n	801284e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012834:	697b      	ldr	r3, [r7, #20]
 8012836:	681a      	ldr	r2, [r3, #0]
 8012838:	4b17      	ldr	r3, [pc, #92]	@ (8012898 <tcp_input+0x4a0>)
 801283a:	695b      	ldr	r3, [r3, #20]
 801283c:	429a      	cmp	r2, r3
 801283e:	d00f      	beq.n	8012860 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d00d      	beq.n	8012862 <tcp_input+0x46a>
 8012846:	697b      	ldr	r3, [r7, #20]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d009      	beq.n	8012862 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012852:	697b      	ldr	r3, [r7, #20]
 8012854:	68db      	ldr	r3, [r3, #12]
 8012856:	617b      	str	r3, [r7, #20]
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d1d1      	bne.n	8012802 <tcp_input+0x40a>
 801285e:	e000      	b.n	8012862 <tcp_input+0x46a>
            break;
 8012860:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d029      	beq.n	80128bc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012868:	69bb      	ldr	r3, [r7, #24]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d00a      	beq.n	8012884 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801286e:	697b      	ldr	r3, [r7, #20]
 8012870:	68da      	ldr	r2, [r3, #12]
 8012872:	69bb      	ldr	r3, [r7, #24]
 8012874:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012876:	4b10      	ldr	r3, [pc, #64]	@ (80128b8 <tcp_input+0x4c0>)
 8012878:	681a      	ldr	r2, [r3, #0]
 801287a:	697b      	ldr	r3, [r7, #20]
 801287c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801287e:	4a0e      	ldr	r2, [pc, #56]	@ (80128b8 <tcp_input+0x4c0>)
 8012880:	697b      	ldr	r3, [r7, #20]
 8012882:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012884:	6978      	ldr	r0, [r7, #20]
 8012886:	f000 fa03 	bl	8012c90 <tcp_listen_input>
      }
      pbuf_free(p);
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	f7fd ff6e 	bl	801076c <pbuf_free>
      return;
 8012890:	e1a8      	b.n	8012be4 <tcp_input+0x7ec>
 8012892:	bf00      	nop
 8012894:	200274d4 	.word	0x200274d4
 8012898:	200243ac 	.word	0x200243ac
 801289c:	0801c564 	.word	0x0801c564
 80128a0:	0801c690 	.word	0x0801c690
 80128a4:	0801c5b0 	.word	0x0801c5b0
 80128a8:	200274b8 	.word	0x200274b8
 80128ac:	0801c6bc 	.word	0x0801c6bc
 80128b0:	200274bc 	.word	0x200274bc
 80128b4:	0801c6e8 	.word	0x0801c6e8
 80128b8:	200274b4 	.word	0x200274b4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80128bc:	69fb      	ldr	r3, [r7, #28]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	f000 8158 	beq.w	8012b74 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80128c4:	4b95      	ldr	r3, [pc, #596]	@ (8012b1c <tcp_input+0x724>)
 80128c6:	2200      	movs	r2, #0
 80128c8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	891a      	ldrh	r2, [r3, #8]
 80128ce:	4b93      	ldr	r3, [pc, #588]	@ (8012b1c <tcp_input+0x724>)
 80128d0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80128d2:	4a92      	ldr	r2, [pc, #584]	@ (8012b1c <tcp_input+0x724>)
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80128d8:	4b91      	ldr	r3, [pc, #580]	@ (8012b20 <tcp_input+0x728>)
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	4a8f      	ldr	r2, [pc, #572]	@ (8012b1c <tcp_input+0x724>)
 80128de:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80128e0:	4b90      	ldr	r3, [pc, #576]	@ (8012b24 <tcp_input+0x72c>)
 80128e2:	2200      	movs	r2, #0
 80128e4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80128e6:	4b90      	ldr	r3, [pc, #576]	@ (8012b28 <tcp_input+0x730>)
 80128e8:	2200      	movs	r2, #0
 80128ea:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80128ec:	4b8f      	ldr	r3, [pc, #572]	@ (8012b2c <tcp_input+0x734>)
 80128ee:	2200      	movs	r2, #0
 80128f0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80128f2:	4b8f      	ldr	r3, [pc, #572]	@ (8012b30 <tcp_input+0x738>)
 80128f4:	781b      	ldrb	r3, [r3, #0]
 80128f6:	f003 0308 	and.w	r3, r3, #8
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d006      	beq.n	801290c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	7b5b      	ldrb	r3, [r3, #13]
 8012902:	f043 0301 	orr.w	r3, r3, #1
 8012906:	b2da      	uxtb	r2, r3
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801290c:	69fb      	ldr	r3, [r7, #28]
 801290e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012910:	2b00      	cmp	r3, #0
 8012912:	d017      	beq.n	8012944 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012914:	69f8      	ldr	r0, [r7, #28]
 8012916:	f7ff f929 	bl	8011b6c <tcp_process_refused_data>
 801291a:	4603      	mov	r3, r0
 801291c:	f113 0f0d 	cmn.w	r3, #13
 8012920:	d007      	beq.n	8012932 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012922:	69fb      	ldr	r3, [r7, #28]
 8012924:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012926:	2b00      	cmp	r3, #0
 8012928:	d00c      	beq.n	8012944 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801292a:	4b82      	ldr	r3, [pc, #520]	@ (8012b34 <tcp_input+0x73c>)
 801292c:	881b      	ldrh	r3, [r3, #0]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d008      	beq.n	8012944 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012932:	69fb      	ldr	r3, [r7, #28]
 8012934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8012936:	2b00      	cmp	r3, #0
 8012938:	f040 80e3 	bne.w	8012b02 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801293c:	69f8      	ldr	r0, [r7, #28]
 801293e:	f003 f9a7 	bl	8015c90 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012942:	e0de      	b.n	8012b02 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8012944:	4a7c      	ldr	r2, [pc, #496]	@ (8012b38 <tcp_input+0x740>)
 8012946:	69fb      	ldr	r3, [r7, #28]
 8012948:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801294a:	69f8      	ldr	r0, [r7, #28]
 801294c:	f000 fb18 	bl	8012f80 <tcp_process>
 8012950:	4603      	mov	r3, r0
 8012952:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012954:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012958:	f113 0f0d 	cmn.w	r3, #13
 801295c:	f000 80d3 	beq.w	8012b06 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8012960:	4b71      	ldr	r3, [pc, #452]	@ (8012b28 <tcp_input+0x730>)
 8012962:	781b      	ldrb	r3, [r3, #0]
 8012964:	f003 0308 	and.w	r3, r3, #8
 8012968:	2b00      	cmp	r3, #0
 801296a:	d015      	beq.n	8012998 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801296c:	69fb      	ldr	r3, [r7, #28]
 801296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012972:	2b00      	cmp	r3, #0
 8012974:	d008      	beq.n	8012988 <tcp_input+0x590>
 8012976:	69fb      	ldr	r3, [r7, #28]
 8012978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801297c:	69fa      	ldr	r2, [r7, #28]
 801297e:	6912      	ldr	r2, [r2, #16]
 8012980:	f06f 010d 	mvn.w	r1, #13
 8012984:	4610      	mov	r0, r2
 8012986:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012988:	69f9      	ldr	r1, [r7, #28]
 801298a:	486c      	ldr	r0, [pc, #432]	@ (8012b3c <tcp_input+0x744>)
 801298c:	f7ff fbbc 	bl	8012108 <tcp_pcb_remove>
        tcp_free(pcb);
 8012990:	69f8      	ldr	r0, [r7, #28]
 8012992:	f7fe f9a7 	bl	8010ce4 <tcp_free>
 8012996:	e0da      	b.n	8012b4e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8012998:	2300      	movs	r3, #0
 801299a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801299c:	4b63      	ldr	r3, [pc, #396]	@ (8012b2c <tcp_input+0x734>)
 801299e:	881b      	ldrh	r3, [r3, #0]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d01d      	beq.n	80129e0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80129a4:	4b61      	ldr	r3, [pc, #388]	@ (8012b2c <tcp_input+0x734>)
 80129a6:	881b      	ldrh	r3, [r3, #0]
 80129a8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80129aa:	69fb      	ldr	r3, [r7, #28]
 80129ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d00a      	beq.n	80129ca <tcp_input+0x5d2>
 80129b4:	69fb      	ldr	r3, [r7, #28]
 80129b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80129ba:	69fa      	ldr	r2, [r7, #28]
 80129bc:	6910      	ldr	r0, [r2, #16]
 80129be:	89fa      	ldrh	r2, [r7, #14]
 80129c0:	69f9      	ldr	r1, [r7, #28]
 80129c2:	4798      	blx	r3
 80129c4:	4603      	mov	r3, r0
 80129c6:	74fb      	strb	r3, [r7, #19]
 80129c8:	e001      	b.n	80129ce <tcp_input+0x5d6>
 80129ca:	2300      	movs	r3, #0
 80129cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80129ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80129d2:	f113 0f0d 	cmn.w	r3, #13
 80129d6:	f000 8098 	beq.w	8012b0a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80129da:	4b54      	ldr	r3, [pc, #336]	@ (8012b2c <tcp_input+0x734>)
 80129dc:	2200      	movs	r2, #0
 80129de:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80129e0:	69f8      	ldr	r0, [r7, #28]
 80129e2:	f000 f915 	bl	8012c10 <tcp_input_delayed_close>
 80129e6:	4603      	mov	r3, r0
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	f040 8090 	bne.w	8012b0e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80129ee:	4b4d      	ldr	r3, [pc, #308]	@ (8012b24 <tcp_input+0x72c>)
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d041      	beq.n	8012a7a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80129f6:	69fb      	ldr	r3, [r7, #28]
 80129f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d006      	beq.n	8012a0c <tcp_input+0x614>
 80129fe:	4b50      	ldr	r3, [pc, #320]	@ (8012b40 <tcp_input+0x748>)
 8012a00:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8012a04:	494f      	ldr	r1, [pc, #316]	@ (8012b44 <tcp_input+0x74c>)
 8012a06:	4850      	ldr	r0, [pc, #320]	@ (8012b48 <tcp_input+0x750>)
 8012a08:	f007 fafe 	bl	801a008 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012a0c:	69fb      	ldr	r3, [r7, #28]
 8012a0e:	8b5b      	ldrh	r3, [r3, #26]
 8012a10:	f003 0310 	and.w	r3, r3, #16
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d008      	beq.n	8012a2a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012a18:	4b42      	ldr	r3, [pc, #264]	@ (8012b24 <tcp_input+0x72c>)
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f7fd fea5 	bl	801076c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012a22:	69f8      	ldr	r0, [r7, #28]
 8012a24:	f7fe fc46 	bl	80112b4 <tcp_abort>
            goto aborted;
 8012a28:	e091      	b.n	8012b4e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012a2a:	69fb      	ldr	r3, [r7, #28]
 8012a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d00c      	beq.n	8012a4e <tcp_input+0x656>
 8012a34:	69fb      	ldr	r3, [r7, #28]
 8012a36:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012a3a:	69fb      	ldr	r3, [r7, #28]
 8012a3c:	6918      	ldr	r0, [r3, #16]
 8012a3e:	4b39      	ldr	r3, [pc, #228]	@ (8012b24 <tcp_input+0x72c>)
 8012a40:	681a      	ldr	r2, [r3, #0]
 8012a42:	2300      	movs	r3, #0
 8012a44:	69f9      	ldr	r1, [r7, #28]
 8012a46:	47a0      	blx	r4
 8012a48:	4603      	mov	r3, r0
 8012a4a:	74fb      	strb	r3, [r7, #19]
 8012a4c:	e008      	b.n	8012a60 <tcp_input+0x668>
 8012a4e:	4b35      	ldr	r3, [pc, #212]	@ (8012b24 <tcp_input+0x72c>)
 8012a50:	681a      	ldr	r2, [r3, #0]
 8012a52:	2300      	movs	r3, #0
 8012a54:	69f9      	ldr	r1, [r7, #28]
 8012a56:	2000      	movs	r0, #0
 8012a58:	f7ff f95e 	bl	8011d18 <tcp_recv_null>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012a60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012a64:	f113 0f0d 	cmn.w	r3, #13
 8012a68:	d053      	beq.n	8012b12 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012a6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d003      	beq.n	8012a7a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012a72:	4b2c      	ldr	r3, [pc, #176]	@ (8012b24 <tcp_input+0x72c>)
 8012a74:	681a      	ldr	r2, [r3, #0]
 8012a76:	69fb      	ldr	r3, [r7, #28]
 8012a78:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8012b28 <tcp_input+0x730>)
 8012a7c:	781b      	ldrb	r3, [r3, #0]
 8012a7e:	f003 0320 	and.w	r3, r3, #32
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d030      	beq.n	8012ae8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8012a86:	69fb      	ldr	r3, [r7, #28]
 8012a88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d009      	beq.n	8012aa2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012a8e:	69fb      	ldr	r3, [r7, #28]
 8012a90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012a92:	7b5a      	ldrb	r2, [r3, #13]
 8012a94:	69fb      	ldr	r3, [r7, #28]
 8012a96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012a98:	f042 0220 	orr.w	r2, r2, #32
 8012a9c:	b2d2      	uxtb	r2, r2
 8012a9e:	735a      	strb	r2, [r3, #13]
 8012aa0:	e022      	b.n	8012ae8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012aa2:	69fb      	ldr	r3, [r7, #28]
 8012aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012aa6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8012aaa:	d005      	beq.n	8012ab8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8012aac:	69fb      	ldr	r3, [r7, #28]
 8012aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012ab0:	3301      	adds	r3, #1
 8012ab2:	b29a      	uxth	r2, r3
 8012ab4:	69fb      	ldr	r3, [r7, #28]
 8012ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012ab8:	69fb      	ldr	r3, [r7, #28]
 8012aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d00b      	beq.n	8012ada <tcp_input+0x6e2>
 8012ac2:	69fb      	ldr	r3, [r7, #28]
 8012ac4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012ac8:	69fb      	ldr	r3, [r7, #28]
 8012aca:	6918      	ldr	r0, [r3, #16]
 8012acc:	2300      	movs	r3, #0
 8012ace:	2200      	movs	r2, #0
 8012ad0:	69f9      	ldr	r1, [r7, #28]
 8012ad2:	47a0      	blx	r4
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	74fb      	strb	r3, [r7, #19]
 8012ad8:	e001      	b.n	8012ade <tcp_input+0x6e6>
 8012ada:	2300      	movs	r3, #0
 8012adc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012ade:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012ae2:	f113 0f0d 	cmn.w	r3, #13
 8012ae6:	d016      	beq.n	8012b16 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012ae8:	4b13      	ldr	r3, [pc, #76]	@ (8012b38 <tcp_input+0x740>)
 8012aea:	2200      	movs	r2, #0
 8012aec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012aee:	69f8      	ldr	r0, [r7, #28]
 8012af0:	f000 f88e 	bl	8012c10 <tcp_input_delayed_close>
 8012af4:	4603      	mov	r3, r0
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d128      	bne.n	8012b4c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012afa:	69f8      	ldr	r0, [r7, #28]
 8012afc:	f002 fac2 	bl	8015084 <tcp_output>
 8012b00:	e025      	b.n	8012b4e <tcp_input+0x756>
        goto aborted;
 8012b02:	bf00      	nop
 8012b04:	e023      	b.n	8012b4e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012b06:	bf00      	nop
 8012b08:	e021      	b.n	8012b4e <tcp_input+0x756>
              goto aborted;
 8012b0a:	bf00      	nop
 8012b0c:	e01f      	b.n	8012b4e <tcp_input+0x756>
          goto aborted;
 8012b0e:	bf00      	nop
 8012b10:	e01d      	b.n	8012b4e <tcp_input+0x756>
            goto aborted;
 8012b12:	bf00      	nop
 8012b14:	e01b      	b.n	8012b4e <tcp_input+0x756>
              goto aborted;
 8012b16:	bf00      	nop
 8012b18:	e019      	b.n	8012b4e <tcp_input+0x756>
 8012b1a:	bf00      	nop
 8012b1c:	200274c4 	.word	0x200274c4
 8012b20:	200274d4 	.word	0x200274d4
 8012b24:	200274f4 	.word	0x200274f4
 8012b28:	200274f1 	.word	0x200274f1
 8012b2c:	200274ec 	.word	0x200274ec
 8012b30:	200274f0 	.word	0x200274f0
 8012b34:	200274ee 	.word	0x200274ee
 8012b38:	200274f8 	.word	0x200274f8
 8012b3c:	200274b8 	.word	0x200274b8
 8012b40:	0801c564 	.word	0x0801c564
 8012b44:	0801c718 	.word	0x0801c718
 8012b48:	0801c5b0 	.word	0x0801c5b0
          goto aborted;
 8012b4c:	bf00      	nop
    tcp_input_pcb = NULL;
 8012b4e:	4b27      	ldr	r3, [pc, #156]	@ (8012bec <tcp_input+0x7f4>)
 8012b50:	2200      	movs	r2, #0
 8012b52:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012b54:	4b26      	ldr	r3, [pc, #152]	@ (8012bf0 <tcp_input+0x7f8>)
 8012b56:	2200      	movs	r2, #0
 8012b58:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012b5a:	4b26      	ldr	r3, [pc, #152]	@ (8012bf4 <tcp_input+0x7fc>)
 8012b5c:	685b      	ldr	r3, [r3, #4]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d03f      	beq.n	8012be2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8012b62:	4b24      	ldr	r3, [pc, #144]	@ (8012bf4 <tcp_input+0x7fc>)
 8012b64:	685b      	ldr	r3, [r3, #4]
 8012b66:	4618      	mov	r0, r3
 8012b68:	f7fd fe00 	bl	801076c <pbuf_free>
      inseg.p = NULL;
 8012b6c:	4b21      	ldr	r3, [pc, #132]	@ (8012bf4 <tcp_input+0x7fc>)
 8012b6e:	2200      	movs	r2, #0
 8012b70:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012b72:	e036      	b.n	8012be2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012b74:	4b20      	ldr	r3, [pc, #128]	@ (8012bf8 <tcp_input+0x800>)
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	899b      	ldrh	r3, [r3, #12]
 8012b7a:	b29b      	uxth	r3, r3
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f7fc fa07 	bl	800ef90 <lwip_htons>
 8012b82:	4603      	mov	r3, r0
 8012b84:	b2db      	uxtb	r3, r3
 8012b86:	f003 0304 	and.w	r3, r3, #4
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d118      	bne.n	8012bc0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8012bfc <tcp_input+0x804>)
 8012b90:	6819      	ldr	r1, [r3, #0]
 8012b92:	4b1b      	ldr	r3, [pc, #108]	@ (8012c00 <tcp_input+0x808>)
 8012b94:	881b      	ldrh	r3, [r3, #0]
 8012b96:	461a      	mov	r2, r3
 8012b98:	4b1a      	ldr	r3, [pc, #104]	@ (8012c04 <tcp_input+0x80c>)
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012b9e:	4b16      	ldr	r3, [pc, #88]	@ (8012bf8 <tcp_input+0x800>)
 8012ba0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ba2:	885b      	ldrh	r3, [r3, #2]
 8012ba4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012ba6:	4a14      	ldr	r2, [pc, #80]	@ (8012bf8 <tcp_input+0x800>)
 8012ba8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012baa:	8812      	ldrh	r2, [r2, #0]
 8012bac:	b292      	uxth	r2, r2
 8012bae:	9202      	str	r2, [sp, #8]
 8012bb0:	9301      	str	r3, [sp, #4]
 8012bb2:	4b15      	ldr	r3, [pc, #84]	@ (8012c08 <tcp_input+0x810>)
 8012bb4:	9300      	str	r3, [sp, #0]
 8012bb6:	4b15      	ldr	r3, [pc, #84]	@ (8012c0c <tcp_input+0x814>)
 8012bb8:	4602      	mov	r2, r0
 8012bba:	2000      	movs	r0, #0
 8012bbc:	f003 f816 	bl	8015bec <tcp_rst>
    pbuf_free(p);
 8012bc0:	6878      	ldr	r0, [r7, #4]
 8012bc2:	f7fd fdd3 	bl	801076c <pbuf_free>
  return;
 8012bc6:	e00c      	b.n	8012be2 <tcp_input+0x7ea>
    goto dropped;
 8012bc8:	bf00      	nop
 8012bca:	e006      	b.n	8012bda <tcp_input+0x7e2>
    goto dropped;
 8012bcc:	bf00      	nop
 8012bce:	e004      	b.n	8012bda <tcp_input+0x7e2>
    goto dropped;
 8012bd0:	bf00      	nop
 8012bd2:	e002      	b.n	8012bda <tcp_input+0x7e2>
      goto dropped;
 8012bd4:	bf00      	nop
 8012bd6:	e000      	b.n	8012bda <tcp_input+0x7e2>
      goto dropped;
 8012bd8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012bda:	6878      	ldr	r0, [r7, #4]
 8012bdc:	f7fd fdc6 	bl	801076c <pbuf_free>
 8012be0:	e000      	b.n	8012be4 <tcp_input+0x7ec>
  return;
 8012be2:	bf00      	nop
}
 8012be4:	3724      	adds	r7, #36	@ 0x24
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bd90      	pop	{r4, r7, pc}
 8012bea:	bf00      	nop
 8012bec:	200274f8 	.word	0x200274f8
 8012bf0:	200274f4 	.word	0x200274f4
 8012bf4:	200274c4 	.word	0x200274c4
 8012bf8:	200274d4 	.word	0x200274d4
 8012bfc:	200274e8 	.word	0x200274e8
 8012c00:	200274ee 	.word	0x200274ee
 8012c04:	200274e4 	.word	0x200274e4
 8012c08:	200243bc 	.word	0x200243bc
 8012c0c:	200243c0 	.word	0x200243c0

08012c10 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b082      	sub	sp, #8
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d106      	bne.n	8012c2c <tcp_input_delayed_close+0x1c>
 8012c1e:	4b17      	ldr	r3, [pc, #92]	@ (8012c7c <tcp_input_delayed_close+0x6c>)
 8012c20:	f240 225a 	movw	r2, #602	@ 0x25a
 8012c24:	4916      	ldr	r1, [pc, #88]	@ (8012c80 <tcp_input_delayed_close+0x70>)
 8012c26:	4817      	ldr	r0, [pc, #92]	@ (8012c84 <tcp_input_delayed_close+0x74>)
 8012c28:	f007 f9ee 	bl	801a008 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012c2c:	4b16      	ldr	r3, [pc, #88]	@ (8012c88 <tcp_input_delayed_close+0x78>)
 8012c2e:	781b      	ldrb	r3, [r3, #0]
 8012c30:	f003 0310 	and.w	r3, r3, #16
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d01c      	beq.n	8012c72 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	8b5b      	ldrh	r3, [r3, #26]
 8012c3c:	f003 0310 	and.w	r3, r3, #16
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d10d      	bne.n	8012c60 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d008      	beq.n	8012c60 <tcp_input_delayed_close+0x50>
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012c54:	687a      	ldr	r2, [r7, #4]
 8012c56:	6912      	ldr	r2, [r2, #16]
 8012c58:	f06f 010e 	mvn.w	r1, #14
 8012c5c:	4610      	mov	r0, r2
 8012c5e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012c60:	6879      	ldr	r1, [r7, #4]
 8012c62:	480a      	ldr	r0, [pc, #40]	@ (8012c8c <tcp_input_delayed_close+0x7c>)
 8012c64:	f7ff fa50 	bl	8012108 <tcp_pcb_remove>
    tcp_free(pcb);
 8012c68:	6878      	ldr	r0, [r7, #4]
 8012c6a:	f7fe f83b 	bl	8010ce4 <tcp_free>
    return 1;
 8012c6e:	2301      	movs	r3, #1
 8012c70:	e000      	b.n	8012c74 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8012c72:	2300      	movs	r3, #0
}
 8012c74:	4618      	mov	r0, r3
 8012c76:	3708      	adds	r7, #8
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	bd80      	pop	{r7, pc}
 8012c7c:	0801c564 	.word	0x0801c564
 8012c80:	0801c734 	.word	0x0801c734
 8012c84:	0801c5b0 	.word	0x0801c5b0
 8012c88:	200274f1 	.word	0x200274f1
 8012c8c:	200274b8 	.word	0x200274b8

08012c90 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012c90:	b590      	push	{r4, r7, lr}
 8012c92:	b08b      	sub	sp, #44	@ 0x2c
 8012c94:	af04      	add	r7, sp, #16
 8012c96:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012c98:	4b6f      	ldr	r3, [pc, #444]	@ (8012e58 <tcp_listen_input+0x1c8>)
 8012c9a:	781b      	ldrb	r3, [r3, #0]
 8012c9c:	f003 0304 	and.w	r3, r3, #4
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	f040 80d2 	bne.w	8012e4a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d106      	bne.n	8012cba <tcp_listen_input+0x2a>
 8012cac:	4b6b      	ldr	r3, [pc, #428]	@ (8012e5c <tcp_listen_input+0x1cc>)
 8012cae:	f240 2281 	movw	r2, #641	@ 0x281
 8012cb2:	496b      	ldr	r1, [pc, #428]	@ (8012e60 <tcp_listen_input+0x1d0>)
 8012cb4:	486b      	ldr	r0, [pc, #428]	@ (8012e64 <tcp_listen_input+0x1d4>)
 8012cb6:	f007 f9a7 	bl	801a008 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012cba:	4b67      	ldr	r3, [pc, #412]	@ (8012e58 <tcp_listen_input+0x1c8>)
 8012cbc:	781b      	ldrb	r3, [r3, #0]
 8012cbe:	f003 0310 	and.w	r3, r3, #16
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d019      	beq.n	8012cfa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012cc6:	4b68      	ldr	r3, [pc, #416]	@ (8012e68 <tcp_listen_input+0x1d8>)
 8012cc8:	6819      	ldr	r1, [r3, #0]
 8012cca:	4b68      	ldr	r3, [pc, #416]	@ (8012e6c <tcp_listen_input+0x1dc>)
 8012ccc:	881b      	ldrh	r3, [r3, #0]
 8012cce:	461a      	mov	r2, r3
 8012cd0:	4b67      	ldr	r3, [pc, #412]	@ (8012e70 <tcp_listen_input+0x1e0>)
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012cd6:	4b67      	ldr	r3, [pc, #412]	@ (8012e74 <tcp_listen_input+0x1e4>)
 8012cd8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012cda:	885b      	ldrh	r3, [r3, #2]
 8012cdc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012cde:	4a65      	ldr	r2, [pc, #404]	@ (8012e74 <tcp_listen_input+0x1e4>)
 8012ce0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ce2:	8812      	ldrh	r2, [r2, #0]
 8012ce4:	b292      	uxth	r2, r2
 8012ce6:	9202      	str	r2, [sp, #8]
 8012ce8:	9301      	str	r3, [sp, #4]
 8012cea:	4b63      	ldr	r3, [pc, #396]	@ (8012e78 <tcp_listen_input+0x1e8>)
 8012cec:	9300      	str	r3, [sp, #0]
 8012cee:	4b63      	ldr	r3, [pc, #396]	@ (8012e7c <tcp_listen_input+0x1ec>)
 8012cf0:	4602      	mov	r2, r0
 8012cf2:	6878      	ldr	r0, [r7, #4]
 8012cf4:	f002 ff7a 	bl	8015bec <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012cf8:	e0a9      	b.n	8012e4e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8012cfa:	4b57      	ldr	r3, [pc, #348]	@ (8012e58 <tcp_listen_input+0x1c8>)
 8012cfc:	781b      	ldrb	r3, [r3, #0]
 8012cfe:	f003 0302 	and.w	r3, r3, #2
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	f000 80a3 	beq.w	8012e4e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	7d5b      	ldrb	r3, [r3, #21]
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f7ff f927 	bl	8011f60 <tcp_alloc>
 8012d12:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012d14:	697b      	ldr	r3, [r7, #20]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d111      	bne.n	8012d3e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	699b      	ldr	r3, [r3, #24]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d00a      	beq.n	8012d38 <tcp_listen_input+0xa8>
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	699b      	ldr	r3, [r3, #24]
 8012d26:	687a      	ldr	r2, [r7, #4]
 8012d28:	6910      	ldr	r0, [r2, #16]
 8012d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8012d2e:	2100      	movs	r1, #0
 8012d30:	4798      	blx	r3
 8012d32:	4603      	mov	r3, r0
 8012d34:	73bb      	strb	r3, [r7, #14]
      return;
 8012d36:	e08b      	b.n	8012e50 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012d38:	23f0      	movs	r3, #240	@ 0xf0
 8012d3a:	73bb      	strb	r3, [r7, #14]
      return;
 8012d3c:	e088      	b.n	8012e50 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012d3e:	4b50      	ldr	r3, [pc, #320]	@ (8012e80 <tcp_listen_input+0x1f0>)
 8012d40:	695a      	ldr	r2, [r3, #20]
 8012d42:	697b      	ldr	r3, [r7, #20]
 8012d44:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012d46:	4b4e      	ldr	r3, [pc, #312]	@ (8012e80 <tcp_listen_input+0x1f0>)
 8012d48:	691a      	ldr	r2, [r3, #16]
 8012d4a:	697b      	ldr	r3, [r7, #20]
 8012d4c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	8ada      	ldrh	r2, [r3, #22]
 8012d52:	697b      	ldr	r3, [r7, #20]
 8012d54:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8012d56:	4b47      	ldr	r3, [pc, #284]	@ (8012e74 <tcp_listen_input+0x1e4>)
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	881b      	ldrh	r3, [r3, #0]
 8012d5c:	b29a      	uxth	r2, r3
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012d62:	697b      	ldr	r3, [r7, #20]
 8012d64:	2203      	movs	r2, #3
 8012d66:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012d68:	4b41      	ldr	r3, [pc, #260]	@ (8012e70 <tcp_listen_input+0x1e0>)
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	1c5a      	adds	r2, r3, #1
 8012d6e:	697b      	ldr	r3, [r7, #20]
 8012d70:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012d72:	697b      	ldr	r3, [r7, #20]
 8012d74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012d76:	697b      	ldr	r3, [r7, #20]
 8012d78:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8012d7a:	6978      	ldr	r0, [r7, #20]
 8012d7c:	f7ff fa58 	bl	8012230 <tcp_next_iss>
 8012d80:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012d82:	697b      	ldr	r3, [r7, #20]
 8012d84:	693a      	ldr	r2, [r7, #16]
 8012d86:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8012d88:	697b      	ldr	r3, [r7, #20]
 8012d8a:	693a      	ldr	r2, [r7, #16]
 8012d8c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8012d8e:	697b      	ldr	r3, [r7, #20]
 8012d90:	693a      	ldr	r2, [r7, #16]
 8012d92:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8012d94:	697b      	ldr	r3, [r7, #20]
 8012d96:	693a      	ldr	r2, [r7, #16]
 8012d98:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012d9a:	4b35      	ldr	r3, [pc, #212]	@ (8012e70 <tcp_listen_input+0x1e0>)
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	1e5a      	subs	r2, r3, #1
 8012da0:	697b      	ldr	r3, [r7, #20]
 8012da2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	691a      	ldr	r2, [r3, #16]
 8012da8:	697b      	ldr	r3, [r7, #20]
 8012daa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012dac:	697b      	ldr	r3, [r7, #20]
 8012dae:	687a      	ldr	r2, [r7, #4]
 8012db0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	7a5b      	ldrb	r3, [r3, #9]
 8012db6:	f003 030c 	and.w	r3, r3, #12
 8012dba:	b2da      	uxtb	r2, r3
 8012dbc:	697b      	ldr	r3, [r7, #20]
 8012dbe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	7a1a      	ldrb	r2, [r3, #8]
 8012dc4:	697b      	ldr	r3, [r7, #20]
 8012dc6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8012dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8012e84 <tcp_listen_input+0x1f4>)
 8012dca:	681a      	ldr	r2, [r3, #0]
 8012dcc:	697b      	ldr	r3, [r7, #20]
 8012dce:	60da      	str	r2, [r3, #12]
 8012dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8012e84 <tcp_listen_input+0x1f4>)
 8012dd2:	697b      	ldr	r3, [r7, #20]
 8012dd4:	6013      	str	r3, [r2, #0]
 8012dd6:	f003 f8cb 	bl	8015f70 <tcp_timer_needed>
 8012dda:	4b2b      	ldr	r3, [pc, #172]	@ (8012e88 <tcp_listen_input+0x1f8>)
 8012ddc:	2201      	movs	r2, #1
 8012dde:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012de0:	6978      	ldr	r0, [r7, #20]
 8012de2:	f001 fd8b 	bl	80148fc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8012de6:	4b23      	ldr	r3, [pc, #140]	@ (8012e74 <tcp_listen_input+0x1e4>)
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	89db      	ldrh	r3, [r3, #14]
 8012dec:	b29a      	uxth	r2, r3
 8012dee:	697b      	ldr	r3, [r7, #20]
 8012df0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012df4:	697b      	ldr	r3, [r7, #20]
 8012df6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012dfa:	697b      	ldr	r3, [r7, #20]
 8012dfc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012e00:	697b      	ldr	r3, [r7, #20]
 8012e02:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8012e04:	697b      	ldr	r3, [r7, #20]
 8012e06:	3304      	adds	r3, #4
 8012e08:	4618      	mov	r0, r3
 8012e0a:	f004 ff6d 	bl	8017ce8 <ip4_route>
 8012e0e:	4601      	mov	r1, r0
 8012e10:	697b      	ldr	r3, [r7, #20]
 8012e12:	3304      	adds	r3, #4
 8012e14:	461a      	mov	r2, r3
 8012e16:	4620      	mov	r0, r4
 8012e18:	f7ff fa30 	bl	801227c <tcp_eff_send_mss_netif>
 8012e1c:	4603      	mov	r3, r0
 8012e1e:	461a      	mov	r2, r3
 8012e20:	697b      	ldr	r3, [r7, #20]
 8012e22:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012e24:	2112      	movs	r1, #18
 8012e26:	6978      	ldr	r0, [r7, #20]
 8012e28:	f002 f83e 	bl	8014ea8 <tcp_enqueue_flags>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8012e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d004      	beq.n	8012e42 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012e38:	2100      	movs	r1, #0
 8012e3a:	6978      	ldr	r0, [r7, #20]
 8012e3c:	f7fe f97c 	bl	8011138 <tcp_abandon>
      return;
 8012e40:	e006      	b.n	8012e50 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8012e42:	6978      	ldr	r0, [r7, #20]
 8012e44:	f002 f91e 	bl	8015084 <tcp_output>
  return;
 8012e48:	e001      	b.n	8012e4e <tcp_listen_input+0x1be>
    return;
 8012e4a:	bf00      	nop
 8012e4c:	e000      	b.n	8012e50 <tcp_listen_input+0x1c0>
  return;
 8012e4e:	bf00      	nop
}
 8012e50:	371c      	adds	r7, #28
 8012e52:	46bd      	mov	sp, r7
 8012e54:	bd90      	pop	{r4, r7, pc}
 8012e56:	bf00      	nop
 8012e58:	200274f0 	.word	0x200274f0
 8012e5c:	0801c564 	.word	0x0801c564
 8012e60:	0801c75c 	.word	0x0801c75c
 8012e64:	0801c5b0 	.word	0x0801c5b0
 8012e68:	200274e8 	.word	0x200274e8
 8012e6c:	200274ee 	.word	0x200274ee
 8012e70:	200274e4 	.word	0x200274e4
 8012e74:	200274d4 	.word	0x200274d4
 8012e78:	200243bc 	.word	0x200243bc
 8012e7c:	200243c0 	.word	0x200243c0
 8012e80:	200243ac 	.word	0x200243ac
 8012e84:	200274b8 	.word	0x200274b8
 8012e88:	200274c0 	.word	0x200274c0

08012e8c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b086      	sub	sp, #24
 8012e90:	af04      	add	r7, sp, #16
 8012e92:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012e94:	4b2f      	ldr	r3, [pc, #188]	@ (8012f54 <tcp_timewait_input+0xc8>)
 8012e96:	781b      	ldrb	r3, [r3, #0]
 8012e98:	f003 0304 	and.w	r3, r3, #4
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d153      	bne.n	8012f48 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d106      	bne.n	8012eb4 <tcp_timewait_input+0x28>
 8012ea6:	4b2c      	ldr	r3, [pc, #176]	@ (8012f58 <tcp_timewait_input+0xcc>)
 8012ea8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012eac:	492b      	ldr	r1, [pc, #172]	@ (8012f5c <tcp_timewait_input+0xd0>)
 8012eae:	482c      	ldr	r0, [pc, #176]	@ (8012f60 <tcp_timewait_input+0xd4>)
 8012eb0:	f007 f8aa 	bl	801a008 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012eb4:	4b27      	ldr	r3, [pc, #156]	@ (8012f54 <tcp_timewait_input+0xc8>)
 8012eb6:	781b      	ldrb	r3, [r3, #0]
 8012eb8:	f003 0302 	and.w	r3, r3, #2
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d02a      	beq.n	8012f16 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012ec0:	4b28      	ldr	r3, [pc, #160]	@ (8012f64 <tcp_timewait_input+0xd8>)
 8012ec2:	681a      	ldr	r2, [r3, #0]
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ec8:	1ad3      	subs	r3, r2, r3
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	db2d      	blt.n	8012f2a <tcp_timewait_input+0x9e>
 8012ece:	4b25      	ldr	r3, [pc, #148]	@ (8012f64 <tcp_timewait_input+0xd8>)
 8012ed0:	681a      	ldr	r2, [r3, #0]
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ed6:	6879      	ldr	r1, [r7, #4]
 8012ed8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012eda:	440b      	add	r3, r1
 8012edc:	1ad3      	subs	r3, r2, r3
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	dc23      	bgt.n	8012f2a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ee2:	4b21      	ldr	r3, [pc, #132]	@ (8012f68 <tcp_timewait_input+0xdc>)
 8012ee4:	6819      	ldr	r1, [r3, #0]
 8012ee6:	4b21      	ldr	r3, [pc, #132]	@ (8012f6c <tcp_timewait_input+0xe0>)
 8012ee8:	881b      	ldrh	r3, [r3, #0]
 8012eea:	461a      	mov	r2, r3
 8012eec:	4b1d      	ldr	r3, [pc, #116]	@ (8012f64 <tcp_timewait_input+0xd8>)
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8012f70 <tcp_timewait_input+0xe4>)
 8012ef4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ef6:	885b      	ldrh	r3, [r3, #2]
 8012ef8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012efa:	4a1d      	ldr	r2, [pc, #116]	@ (8012f70 <tcp_timewait_input+0xe4>)
 8012efc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012efe:	8812      	ldrh	r2, [r2, #0]
 8012f00:	b292      	uxth	r2, r2
 8012f02:	9202      	str	r2, [sp, #8]
 8012f04:	9301      	str	r3, [sp, #4]
 8012f06:	4b1b      	ldr	r3, [pc, #108]	@ (8012f74 <tcp_timewait_input+0xe8>)
 8012f08:	9300      	str	r3, [sp, #0]
 8012f0a:	4b1b      	ldr	r3, [pc, #108]	@ (8012f78 <tcp_timewait_input+0xec>)
 8012f0c:	4602      	mov	r2, r0
 8012f0e:	6878      	ldr	r0, [r7, #4]
 8012f10:	f002 fe6c 	bl	8015bec <tcp_rst>
      return;
 8012f14:	e01b      	b.n	8012f4e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8012f16:	4b0f      	ldr	r3, [pc, #60]	@ (8012f54 <tcp_timewait_input+0xc8>)
 8012f18:	781b      	ldrb	r3, [r3, #0]
 8012f1a:	f003 0301 	and.w	r3, r3, #1
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d003      	beq.n	8012f2a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8012f22:	4b16      	ldr	r3, [pc, #88]	@ (8012f7c <tcp_timewait_input+0xf0>)
 8012f24:	681a      	ldr	r2, [r3, #0]
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012f2a:	4b10      	ldr	r3, [pc, #64]	@ (8012f6c <tcp_timewait_input+0xe0>)
 8012f2c:	881b      	ldrh	r3, [r3, #0]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d00c      	beq.n	8012f4c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	8b5b      	ldrh	r3, [r3, #26]
 8012f36:	f043 0302 	orr.w	r3, r3, #2
 8012f3a:	b29a      	uxth	r2, r3
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012f40:	6878      	ldr	r0, [r7, #4]
 8012f42:	f002 f89f 	bl	8015084 <tcp_output>
  }
  return;
 8012f46:	e001      	b.n	8012f4c <tcp_timewait_input+0xc0>
    return;
 8012f48:	bf00      	nop
 8012f4a:	e000      	b.n	8012f4e <tcp_timewait_input+0xc2>
  return;
 8012f4c:	bf00      	nop
}
 8012f4e:	3708      	adds	r7, #8
 8012f50:	46bd      	mov	sp, r7
 8012f52:	bd80      	pop	{r7, pc}
 8012f54:	200274f0 	.word	0x200274f0
 8012f58:	0801c564 	.word	0x0801c564
 8012f5c:	0801c77c 	.word	0x0801c77c
 8012f60:	0801c5b0 	.word	0x0801c5b0
 8012f64:	200274e4 	.word	0x200274e4
 8012f68:	200274e8 	.word	0x200274e8
 8012f6c:	200274ee 	.word	0x200274ee
 8012f70:	200274d4 	.word	0x200274d4
 8012f74:	200243bc 	.word	0x200243bc
 8012f78:	200243c0 	.word	0x200243c0
 8012f7c:	200274ac 	.word	0x200274ac

08012f80 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012f80:	b590      	push	{r4, r7, lr}
 8012f82:	b08d      	sub	sp, #52	@ 0x34
 8012f84:	af04      	add	r7, sp, #16
 8012f86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012f88:	2300      	movs	r3, #0
 8012f8a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d106      	bne.n	8012fa4 <tcp_process+0x24>
 8012f96:	4b9d      	ldr	r3, [pc, #628]	@ (801320c <tcp_process+0x28c>)
 8012f98:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8012f9c:	499c      	ldr	r1, [pc, #624]	@ (8013210 <tcp_process+0x290>)
 8012f9e:	489d      	ldr	r0, [pc, #628]	@ (8013214 <tcp_process+0x294>)
 8012fa0:	f007 f832 	bl	801a008 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012fa4:	4b9c      	ldr	r3, [pc, #624]	@ (8013218 <tcp_process+0x298>)
 8012fa6:	781b      	ldrb	r3, [r3, #0]
 8012fa8:	f003 0304 	and.w	r3, r3, #4
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d04e      	beq.n	801304e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	7d1b      	ldrb	r3, [r3, #20]
 8012fb4:	2b02      	cmp	r3, #2
 8012fb6:	d108      	bne.n	8012fca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012fbc:	4b97      	ldr	r3, [pc, #604]	@ (801321c <tcp_process+0x29c>)
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	429a      	cmp	r2, r3
 8012fc2:	d123      	bne.n	801300c <tcp_process+0x8c>
        acceptable = 1;
 8012fc4:	2301      	movs	r3, #1
 8012fc6:	76fb      	strb	r3, [r7, #27]
 8012fc8:	e020      	b.n	801300c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012fce:	4b94      	ldr	r3, [pc, #592]	@ (8013220 <tcp_process+0x2a0>)
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	429a      	cmp	r2, r3
 8012fd4:	d102      	bne.n	8012fdc <tcp_process+0x5c>
        acceptable = 1;
 8012fd6:	2301      	movs	r3, #1
 8012fd8:	76fb      	strb	r3, [r7, #27]
 8012fda:	e017      	b.n	801300c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012fdc:	4b90      	ldr	r3, [pc, #576]	@ (8013220 <tcp_process+0x2a0>)
 8012fde:	681a      	ldr	r2, [r3, #0]
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fe4:	1ad3      	subs	r3, r2, r3
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	db10      	blt.n	801300c <tcp_process+0x8c>
 8012fea:	4b8d      	ldr	r3, [pc, #564]	@ (8013220 <tcp_process+0x2a0>)
 8012fec:	681a      	ldr	r2, [r3, #0]
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ff2:	6879      	ldr	r1, [r7, #4]
 8012ff4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012ff6:	440b      	add	r3, r1
 8012ff8:	1ad3      	subs	r3, r2, r3
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	dc06      	bgt.n	801300c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	8b5b      	ldrh	r3, [r3, #26]
 8013002:	f043 0302 	orr.w	r3, r3, #2
 8013006:	b29a      	uxth	r2, r3
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801300c:	7efb      	ldrb	r3, [r7, #27]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d01b      	beq.n	801304a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	7d1b      	ldrb	r3, [r3, #20]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d106      	bne.n	8013028 <tcp_process+0xa8>
 801301a:	4b7c      	ldr	r3, [pc, #496]	@ (801320c <tcp_process+0x28c>)
 801301c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8013020:	4980      	ldr	r1, [pc, #512]	@ (8013224 <tcp_process+0x2a4>)
 8013022:	487c      	ldr	r0, [pc, #496]	@ (8013214 <tcp_process+0x294>)
 8013024:	f006 fff0 	bl	801a008 <iprintf>
      recv_flags |= TF_RESET;
 8013028:	4b7f      	ldr	r3, [pc, #508]	@ (8013228 <tcp_process+0x2a8>)
 801302a:	781b      	ldrb	r3, [r3, #0]
 801302c:	f043 0308 	orr.w	r3, r3, #8
 8013030:	b2da      	uxtb	r2, r3
 8013032:	4b7d      	ldr	r3, [pc, #500]	@ (8013228 <tcp_process+0x2a8>)
 8013034:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	8b5b      	ldrh	r3, [r3, #26]
 801303a:	f023 0301 	bic.w	r3, r3, #1
 801303e:	b29a      	uxth	r2, r3
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8013044:	f06f 030d 	mvn.w	r3, #13
 8013048:	e37a      	b.n	8013740 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801304a:	2300      	movs	r3, #0
 801304c:	e378      	b.n	8013740 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801304e:	4b72      	ldr	r3, [pc, #456]	@ (8013218 <tcp_process+0x298>)
 8013050:	781b      	ldrb	r3, [r3, #0]
 8013052:	f003 0302 	and.w	r3, r3, #2
 8013056:	2b00      	cmp	r3, #0
 8013058:	d010      	beq.n	801307c <tcp_process+0xfc>
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	7d1b      	ldrb	r3, [r3, #20]
 801305e:	2b02      	cmp	r3, #2
 8013060:	d00c      	beq.n	801307c <tcp_process+0xfc>
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	7d1b      	ldrb	r3, [r3, #20]
 8013066:	2b03      	cmp	r3, #3
 8013068:	d008      	beq.n	801307c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	8b5b      	ldrh	r3, [r3, #26]
 801306e:	f043 0302 	orr.w	r3, r3, #2
 8013072:	b29a      	uxth	r2, r3
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8013078:	2300      	movs	r3, #0
 801307a:	e361      	b.n	8013740 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	8b5b      	ldrh	r3, [r3, #26]
 8013080:	f003 0310 	and.w	r3, r3, #16
 8013084:	2b00      	cmp	r3, #0
 8013086:	d103      	bne.n	8013090 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013088:	4b68      	ldr	r3, [pc, #416]	@ (801322c <tcp_process+0x2ac>)
 801308a:	681a      	ldr	r2, [r3, #0]
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2200      	movs	r2, #0
 8013094:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	2200      	movs	r2, #0
 801309c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80130a0:	6878      	ldr	r0, [r7, #4]
 80130a2:	f001 fc2b 	bl	80148fc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	7d1b      	ldrb	r3, [r3, #20]
 80130aa:	3b02      	subs	r3, #2
 80130ac:	2b07      	cmp	r3, #7
 80130ae:	f200 8337 	bhi.w	8013720 <tcp_process+0x7a0>
 80130b2:	a201      	add	r2, pc, #4	@ (adr r2, 80130b8 <tcp_process+0x138>)
 80130b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130b8:	080130d9 	.word	0x080130d9
 80130bc:	08013309 	.word	0x08013309
 80130c0:	08013481 	.word	0x08013481
 80130c4:	080134ab 	.word	0x080134ab
 80130c8:	080135cf 	.word	0x080135cf
 80130cc:	08013481 	.word	0x08013481
 80130d0:	0801365b 	.word	0x0801365b
 80130d4:	080136eb 	.word	0x080136eb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80130d8:	4b4f      	ldr	r3, [pc, #316]	@ (8013218 <tcp_process+0x298>)
 80130da:	781b      	ldrb	r3, [r3, #0]
 80130dc:	f003 0310 	and.w	r3, r3, #16
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	f000 80e4 	beq.w	80132ae <tcp_process+0x32e>
 80130e6:	4b4c      	ldr	r3, [pc, #304]	@ (8013218 <tcp_process+0x298>)
 80130e8:	781b      	ldrb	r3, [r3, #0]
 80130ea:	f003 0302 	and.w	r3, r3, #2
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	f000 80dd 	beq.w	80132ae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80130f8:	1c5a      	adds	r2, r3, #1
 80130fa:	4b48      	ldr	r3, [pc, #288]	@ (801321c <tcp_process+0x29c>)
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	429a      	cmp	r2, r3
 8013100:	f040 80d5 	bne.w	80132ae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013104:	4b46      	ldr	r3, [pc, #280]	@ (8013220 <tcp_process+0x2a0>)
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	1c5a      	adds	r2, r3, #1
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8013116:	4b41      	ldr	r3, [pc, #260]	@ (801321c <tcp_process+0x29c>)
 8013118:	681a      	ldr	r2, [r3, #0]
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801311e:	4b44      	ldr	r3, [pc, #272]	@ (8013230 <tcp_process+0x2b0>)
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	89db      	ldrh	r3, [r3, #14]
 8013124:	b29a      	uxth	r2, r3
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013138:	4b39      	ldr	r3, [pc, #228]	@ (8013220 <tcp_process+0x2a0>)
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	1e5a      	subs	r2, r3, #1
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	2204      	movs	r2, #4
 8013146:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	3304      	adds	r3, #4
 8013150:	4618      	mov	r0, r3
 8013152:	f004 fdc9 	bl	8017ce8 <ip4_route>
 8013156:	4601      	mov	r1, r0
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	3304      	adds	r3, #4
 801315c:	461a      	mov	r2, r3
 801315e:	4620      	mov	r0, r4
 8013160:	f7ff f88c 	bl	801227c <tcp_eff_send_mss_netif>
 8013164:	4603      	mov	r3, r0
 8013166:	461a      	mov	r2, r3
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013170:	009a      	lsls	r2, r3, #2
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013176:	005b      	lsls	r3, r3, #1
 8013178:	f241 111c 	movw	r1, #4380	@ 0x111c
 801317c:	428b      	cmp	r3, r1
 801317e:	bf38      	it	cc
 8013180:	460b      	movcc	r3, r1
 8013182:	429a      	cmp	r2, r3
 8013184:	d204      	bcs.n	8013190 <tcp_process+0x210>
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801318a:	009b      	lsls	r3, r3, #2
 801318c:	b29b      	uxth	r3, r3
 801318e:	e00d      	b.n	80131ac <tcp_process+0x22c>
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013194:	005b      	lsls	r3, r3, #1
 8013196:	f241 121c 	movw	r2, #4380	@ 0x111c
 801319a:	4293      	cmp	r3, r2
 801319c:	d904      	bls.n	80131a8 <tcp_process+0x228>
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80131a2:	005b      	lsls	r3, r3, #1
 80131a4:	b29b      	uxth	r3, r3
 80131a6:	e001      	b.n	80131ac <tcp_process+0x22c>
 80131a8:	f241 131c 	movw	r3, #4380	@ 0x111c
 80131ac:	687a      	ldr	r2, [r7, #4]
 80131ae:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d106      	bne.n	80131ca <tcp_process+0x24a>
 80131bc:	4b13      	ldr	r3, [pc, #76]	@ (801320c <tcp_process+0x28c>)
 80131be:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80131c2:	491c      	ldr	r1, [pc, #112]	@ (8013234 <tcp_process+0x2b4>)
 80131c4:	4813      	ldr	r0, [pc, #76]	@ (8013214 <tcp_process+0x294>)
 80131c6:	f006 ff1f 	bl	801a008 <iprintf>
        --pcb->snd_queuelen;
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80131d0:	3b01      	subs	r3, #1
 80131d2:	b29a      	uxth	r2, r3
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80131de:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80131e0:	69fb      	ldr	r3, [r7, #28]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d12a      	bne.n	801323c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80131ea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80131ec:	69fb      	ldr	r3, [r7, #28]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d106      	bne.n	8013200 <tcp_process+0x280>
 80131f2:	4b06      	ldr	r3, [pc, #24]	@ (801320c <tcp_process+0x28c>)
 80131f4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80131f8:	490f      	ldr	r1, [pc, #60]	@ (8013238 <tcp_process+0x2b8>)
 80131fa:	4806      	ldr	r0, [pc, #24]	@ (8013214 <tcp_process+0x294>)
 80131fc:	f006 ff04 	bl	801a008 <iprintf>
          pcb->unsent = rseg->next;
 8013200:	69fb      	ldr	r3, [r7, #28]
 8013202:	681a      	ldr	r2, [r3, #0]
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013208:	e01c      	b.n	8013244 <tcp_process+0x2c4>
 801320a:	bf00      	nop
 801320c:	0801c564 	.word	0x0801c564
 8013210:	0801c79c 	.word	0x0801c79c
 8013214:	0801c5b0 	.word	0x0801c5b0
 8013218:	200274f0 	.word	0x200274f0
 801321c:	200274e8 	.word	0x200274e8
 8013220:	200274e4 	.word	0x200274e4
 8013224:	0801c7b8 	.word	0x0801c7b8
 8013228:	200274f1 	.word	0x200274f1
 801322c:	200274ac 	.word	0x200274ac
 8013230:	200274d4 	.word	0x200274d4
 8013234:	0801c7d8 	.word	0x0801c7d8
 8013238:	0801c7f0 	.word	0x0801c7f0
        } else {
          pcb->unacked = rseg->next;
 801323c:	69fb      	ldr	r3, [r7, #28]
 801323e:	681a      	ldr	r2, [r3, #0]
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8013244:	69f8      	ldr	r0, [r7, #28]
 8013246:	f7fe fd22 	bl	8011c8e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801324e:	2b00      	cmp	r3, #0
 8013250:	d104      	bne.n	801325c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013258:	861a      	strh	r2, [r3, #48]	@ 0x30
 801325a:	e006      	b.n	801326a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	2200      	movs	r2, #0
 8013260:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	2200      	movs	r2, #0
 8013266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8013270:	2b00      	cmp	r3, #0
 8013272:	d00a      	beq.n	801328a <tcp_process+0x30a>
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801327a:	687a      	ldr	r2, [r7, #4]
 801327c:	6910      	ldr	r0, [r2, #16]
 801327e:	2200      	movs	r2, #0
 8013280:	6879      	ldr	r1, [r7, #4]
 8013282:	4798      	blx	r3
 8013284:	4603      	mov	r3, r0
 8013286:	76bb      	strb	r3, [r7, #26]
 8013288:	e001      	b.n	801328e <tcp_process+0x30e>
 801328a:	2300      	movs	r3, #0
 801328c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801328e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013292:	f113 0f0d 	cmn.w	r3, #13
 8013296:	d102      	bne.n	801329e <tcp_process+0x31e>
          return ERR_ABRT;
 8013298:	f06f 030c 	mvn.w	r3, #12
 801329c:	e250      	b.n	8013740 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	8b5b      	ldrh	r3, [r3, #26]
 80132a2:	f043 0302 	orr.w	r3, r3, #2
 80132a6:	b29a      	uxth	r2, r3
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80132ac:	e23a      	b.n	8013724 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80132ae:	4b98      	ldr	r3, [pc, #608]	@ (8013510 <tcp_process+0x590>)
 80132b0:	781b      	ldrb	r3, [r3, #0]
 80132b2:	f003 0310 	and.w	r3, r3, #16
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	f000 8234 	beq.w	8013724 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132bc:	4b95      	ldr	r3, [pc, #596]	@ (8013514 <tcp_process+0x594>)
 80132be:	6819      	ldr	r1, [r3, #0]
 80132c0:	4b95      	ldr	r3, [pc, #596]	@ (8013518 <tcp_process+0x598>)
 80132c2:	881b      	ldrh	r3, [r3, #0]
 80132c4:	461a      	mov	r2, r3
 80132c6:	4b95      	ldr	r3, [pc, #596]	@ (801351c <tcp_process+0x59c>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80132cc:	4b94      	ldr	r3, [pc, #592]	@ (8013520 <tcp_process+0x5a0>)
 80132ce:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132d0:	885b      	ldrh	r3, [r3, #2]
 80132d2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80132d4:	4a92      	ldr	r2, [pc, #584]	@ (8013520 <tcp_process+0x5a0>)
 80132d6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80132d8:	8812      	ldrh	r2, [r2, #0]
 80132da:	b292      	uxth	r2, r2
 80132dc:	9202      	str	r2, [sp, #8]
 80132de:	9301      	str	r3, [sp, #4]
 80132e0:	4b90      	ldr	r3, [pc, #576]	@ (8013524 <tcp_process+0x5a4>)
 80132e2:	9300      	str	r3, [sp, #0]
 80132e4:	4b90      	ldr	r3, [pc, #576]	@ (8013528 <tcp_process+0x5a8>)
 80132e6:	4602      	mov	r2, r0
 80132e8:	6878      	ldr	r0, [r7, #4]
 80132ea:	f002 fc7f 	bl	8015bec <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80132f4:	2b05      	cmp	r3, #5
 80132f6:	f200 8215 	bhi.w	8013724 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	2200      	movs	r2, #0
 80132fe:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8013300:	6878      	ldr	r0, [r7, #4]
 8013302:	f002 fa4b 	bl	801579c <tcp_rexmit_rto>
      break;
 8013306:	e20d      	b.n	8013724 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013308:	4b81      	ldr	r3, [pc, #516]	@ (8013510 <tcp_process+0x590>)
 801330a:	781b      	ldrb	r3, [r3, #0]
 801330c:	f003 0310 	and.w	r3, r3, #16
 8013310:	2b00      	cmp	r3, #0
 8013312:	f000 80a1 	beq.w	8013458 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013316:	4b7f      	ldr	r3, [pc, #508]	@ (8013514 <tcp_process+0x594>)
 8013318:	681a      	ldr	r2, [r3, #0]
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801331e:	1ad3      	subs	r3, r2, r3
 8013320:	3b01      	subs	r3, #1
 8013322:	2b00      	cmp	r3, #0
 8013324:	db7e      	blt.n	8013424 <tcp_process+0x4a4>
 8013326:	4b7b      	ldr	r3, [pc, #492]	@ (8013514 <tcp_process+0x594>)
 8013328:	681a      	ldr	r2, [r3, #0]
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801332e:	1ad3      	subs	r3, r2, r3
 8013330:	2b00      	cmp	r3, #0
 8013332:	dc77      	bgt.n	8013424 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	2204      	movs	r2, #4
 8013338:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801333e:	2b00      	cmp	r3, #0
 8013340:	d102      	bne.n	8013348 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8013342:	23fa      	movs	r3, #250	@ 0xfa
 8013344:	76bb      	strb	r3, [r7, #26]
 8013346:	e01d      	b.n	8013384 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801334c:	699b      	ldr	r3, [r3, #24]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d106      	bne.n	8013360 <tcp_process+0x3e0>
 8013352:	4b76      	ldr	r3, [pc, #472]	@ (801352c <tcp_process+0x5ac>)
 8013354:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8013358:	4975      	ldr	r1, [pc, #468]	@ (8013530 <tcp_process+0x5b0>)
 801335a:	4876      	ldr	r0, [pc, #472]	@ (8013534 <tcp_process+0x5b4>)
 801335c:	f006 fe54 	bl	801a008 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013364:	699b      	ldr	r3, [r3, #24]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d00a      	beq.n	8013380 <tcp_process+0x400>
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801336e:	699b      	ldr	r3, [r3, #24]
 8013370:	687a      	ldr	r2, [r7, #4]
 8013372:	6910      	ldr	r0, [r2, #16]
 8013374:	2200      	movs	r2, #0
 8013376:	6879      	ldr	r1, [r7, #4]
 8013378:	4798      	blx	r3
 801337a:	4603      	mov	r3, r0
 801337c:	76bb      	strb	r3, [r7, #26]
 801337e:	e001      	b.n	8013384 <tcp_process+0x404>
 8013380:	23f0      	movs	r3, #240	@ 0xf0
 8013382:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013384:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d00a      	beq.n	80133a2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801338c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013390:	f113 0f0d 	cmn.w	r3, #13
 8013394:	d002      	beq.n	801339c <tcp_process+0x41c>
              tcp_abort(pcb);
 8013396:	6878      	ldr	r0, [r7, #4]
 8013398:	f7fd ff8c 	bl	80112b4 <tcp_abort>
            }
            return ERR_ABRT;
 801339c:	f06f 030c 	mvn.w	r3, #12
 80133a0:	e1ce      	b.n	8013740 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80133a2:	6878      	ldr	r0, [r7, #4]
 80133a4:	f000 fae0 	bl	8013968 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80133a8:	4b63      	ldr	r3, [pc, #396]	@ (8013538 <tcp_process+0x5b8>)
 80133aa:	881b      	ldrh	r3, [r3, #0]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d005      	beq.n	80133bc <tcp_process+0x43c>
            recv_acked--;
 80133b0:	4b61      	ldr	r3, [pc, #388]	@ (8013538 <tcp_process+0x5b8>)
 80133b2:	881b      	ldrh	r3, [r3, #0]
 80133b4:	3b01      	subs	r3, #1
 80133b6:	b29a      	uxth	r2, r3
 80133b8:	4b5f      	ldr	r3, [pc, #380]	@ (8013538 <tcp_process+0x5b8>)
 80133ba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80133c0:	009a      	lsls	r2, r3, #2
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80133c6:	005b      	lsls	r3, r3, #1
 80133c8:	f241 111c 	movw	r1, #4380	@ 0x111c
 80133cc:	428b      	cmp	r3, r1
 80133ce:	bf38      	it	cc
 80133d0:	460b      	movcc	r3, r1
 80133d2:	429a      	cmp	r2, r3
 80133d4:	d204      	bcs.n	80133e0 <tcp_process+0x460>
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80133da:	009b      	lsls	r3, r3, #2
 80133dc:	b29b      	uxth	r3, r3
 80133de:	e00d      	b.n	80133fc <tcp_process+0x47c>
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80133e4:	005b      	lsls	r3, r3, #1
 80133e6:	f241 121c 	movw	r2, #4380	@ 0x111c
 80133ea:	4293      	cmp	r3, r2
 80133ec:	d904      	bls.n	80133f8 <tcp_process+0x478>
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80133f2:	005b      	lsls	r3, r3, #1
 80133f4:	b29b      	uxth	r3, r3
 80133f6:	e001      	b.n	80133fc <tcp_process+0x47c>
 80133f8:	f241 131c 	movw	r3, #4380	@ 0x111c
 80133fc:	687a      	ldr	r2, [r7, #4]
 80133fe:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013402:	4b4e      	ldr	r3, [pc, #312]	@ (801353c <tcp_process+0x5bc>)
 8013404:	781b      	ldrb	r3, [r3, #0]
 8013406:	f003 0320 	and.w	r3, r3, #32
 801340a:	2b00      	cmp	r3, #0
 801340c:	d037      	beq.n	801347e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	8b5b      	ldrh	r3, [r3, #26]
 8013412:	f043 0302 	orr.w	r3, r3, #2
 8013416:	b29a      	uxth	r2, r3
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	2207      	movs	r2, #7
 8013420:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013422:	e02c      	b.n	801347e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013424:	4b3b      	ldr	r3, [pc, #236]	@ (8013514 <tcp_process+0x594>)
 8013426:	6819      	ldr	r1, [r3, #0]
 8013428:	4b3b      	ldr	r3, [pc, #236]	@ (8013518 <tcp_process+0x598>)
 801342a:	881b      	ldrh	r3, [r3, #0]
 801342c:	461a      	mov	r2, r3
 801342e:	4b3b      	ldr	r3, [pc, #236]	@ (801351c <tcp_process+0x59c>)
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013434:	4b3a      	ldr	r3, [pc, #232]	@ (8013520 <tcp_process+0x5a0>)
 8013436:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013438:	885b      	ldrh	r3, [r3, #2]
 801343a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801343c:	4a38      	ldr	r2, [pc, #224]	@ (8013520 <tcp_process+0x5a0>)
 801343e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013440:	8812      	ldrh	r2, [r2, #0]
 8013442:	b292      	uxth	r2, r2
 8013444:	9202      	str	r2, [sp, #8]
 8013446:	9301      	str	r3, [sp, #4]
 8013448:	4b36      	ldr	r3, [pc, #216]	@ (8013524 <tcp_process+0x5a4>)
 801344a:	9300      	str	r3, [sp, #0]
 801344c:	4b36      	ldr	r3, [pc, #216]	@ (8013528 <tcp_process+0x5a8>)
 801344e:	4602      	mov	r2, r0
 8013450:	6878      	ldr	r0, [r7, #4]
 8013452:	f002 fbcb 	bl	8015bec <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8013456:	e167      	b.n	8013728 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013458:	4b2d      	ldr	r3, [pc, #180]	@ (8013510 <tcp_process+0x590>)
 801345a:	781b      	ldrb	r3, [r3, #0]
 801345c:	f003 0302 	and.w	r3, r3, #2
 8013460:	2b00      	cmp	r3, #0
 8013462:	f000 8161 	beq.w	8013728 <tcp_process+0x7a8>
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801346a:	1e5a      	subs	r2, r3, #1
 801346c:	4b2b      	ldr	r3, [pc, #172]	@ (801351c <tcp_process+0x59c>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	429a      	cmp	r2, r3
 8013472:	f040 8159 	bne.w	8013728 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013476:	6878      	ldr	r0, [r7, #4]
 8013478:	f002 f9b2 	bl	80157e0 <tcp_rexmit>
      break;
 801347c:	e154      	b.n	8013728 <tcp_process+0x7a8>
 801347e:	e153      	b.n	8013728 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013480:	6878      	ldr	r0, [r7, #4]
 8013482:	f000 fa71 	bl	8013968 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013486:	4b2d      	ldr	r3, [pc, #180]	@ (801353c <tcp_process+0x5bc>)
 8013488:	781b      	ldrb	r3, [r3, #0]
 801348a:	f003 0320 	and.w	r3, r3, #32
 801348e:	2b00      	cmp	r3, #0
 8013490:	f000 814c 	beq.w	801372c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	8b5b      	ldrh	r3, [r3, #26]
 8013498:	f043 0302 	orr.w	r3, r3, #2
 801349c:	b29a      	uxth	r2, r3
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	2207      	movs	r2, #7
 80134a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80134a8:	e140      	b.n	801372c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80134aa:	6878      	ldr	r0, [r7, #4]
 80134ac:	f000 fa5c 	bl	8013968 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80134b0:	4b22      	ldr	r3, [pc, #136]	@ (801353c <tcp_process+0x5bc>)
 80134b2:	781b      	ldrb	r3, [r3, #0]
 80134b4:	f003 0320 	and.w	r3, r3, #32
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d071      	beq.n	80135a0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80134bc:	4b14      	ldr	r3, [pc, #80]	@ (8013510 <tcp_process+0x590>)
 80134be:	781b      	ldrb	r3, [r3, #0]
 80134c0:	f003 0310 	and.w	r3, r3, #16
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d060      	beq.n	801358a <tcp_process+0x60a>
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80134cc:	4b11      	ldr	r3, [pc, #68]	@ (8013514 <tcp_process+0x594>)
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	429a      	cmp	r2, r3
 80134d2:	d15a      	bne.n	801358a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d156      	bne.n	801358a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	8b5b      	ldrh	r3, [r3, #26]
 80134e0:	f043 0302 	orr.w	r3, r3, #2
 80134e4:	b29a      	uxth	r2, r3
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80134ea:	6878      	ldr	r0, [r7, #4]
 80134ec:	f7fe fdbc 	bl	8012068 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80134f0:	4b13      	ldr	r3, [pc, #76]	@ (8013540 <tcp_process+0x5c0>)
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	687a      	ldr	r2, [r7, #4]
 80134f6:	429a      	cmp	r2, r3
 80134f8:	d105      	bne.n	8013506 <tcp_process+0x586>
 80134fa:	4b11      	ldr	r3, [pc, #68]	@ (8013540 <tcp_process+0x5c0>)
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	68db      	ldr	r3, [r3, #12]
 8013500:	4a0f      	ldr	r2, [pc, #60]	@ (8013540 <tcp_process+0x5c0>)
 8013502:	6013      	str	r3, [r2, #0]
 8013504:	e02e      	b.n	8013564 <tcp_process+0x5e4>
 8013506:	4b0e      	ldr	r3, [pc, #56]	@ (8013540 <tcp_process+0x5c0>)
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	617b      	str	r3, [r7, #20]
 801350c:	e027      	b.n	801355e <tcp_process+0x5de>
 801350e:	bf00      	nop
 8013510:	200274f0 	.word	0x200274f0
 8013514:	200274e8 	.word	0x200274e8
 8013518:	200274ee 	.word	0x200274ee
 801351c:	200274e4 	.word	0x200274e4
 8013520:	200274d4 	.word	0x200274d4
 8013524:	200243bc 	.word	0x200243bc
 8013528:	200243c0 	.word	0x200243c0
 801352c:	0801c564 	.word	0x0801c564
 8013530:	0801c804 	.word	0x0801c804
 8013534:	0801c5b0 	.word	0x0801c5b0
 8013538:	200274ec 	.word	0x200274ec
 801353c:	200274f1 	.word	0x200274f1
 8013540:	200274b8 	.word	0x200274b8
 8013544:	697b      	ldr	r3, [r7, #20]
 8013546:	68db      	ldr	r3, [r3, #12]
 8013548:	687a      	ldr	r2, [r7, #4]
 801354a:	429a      	cmp	r2, r3
 801354c:	d104      	bne.n	8013558 <tcp_process+0x5d8>
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	68da      	ldr	r2, [r3, #12]
 8013552:	697b      	ldr	r3, [r7, #20]
 8013554:	60da      	str	r2, [r3, #12]
 8013556:	e005      	b.n	8013564 <tcp_process+0x5e4>
 8013558:	697b      	ldr	r3, [r7, #20]
 801355a:	68db      	ldr	r3, [r3, #12]
 801355c:	617b      	str	r3, [r7, #20]
 801355e:	697b      	ldr	r3, [r7, #20]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d1ef      	bne.n	8013544 <tcp_process+0x5c4>
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	2200      	movs	r2, #0
 8013568:	60da      	str	r2, [r3, #12]
 801356a:	4b77      	ldr	r3, [pc, #476]	@ (8013748 <tcp_process+0x7c8>)
 801356c:	2201      	movs	r2, #1
 801356e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	220a      	movs	r2, #10
 8013574:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013576:	4b75      	ldr	r3, [pc, #468]	@ (801374c <tcp_process+0x7cc>)
 8013578:	681a      	ldr	r2, [r3, #0]
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	60da      	str	r2, [r3, #12]
 801357e:	4a73      	ldr	r2, [pc, #460]	@ (801374c <tcp_process+0x7cc>)
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	6013      	str	r3, [r2, #0]
 8013584:	f002 fcf4 	bl	8015f70 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013588:	e0d2      	b.n	8013730 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	8b5b      	ldrh	r3, [r3, #26]
 801358e:	f043 0302 	orr.w	r3, r3, #2
 8013592:	b29a      	uxth	r2, r3
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	2208      	movs	r2, #8
 801359c:	751a      	strb	r2, [r3, #20]
      break;
 801359e:	e0c7      	b.n	8013730 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80135a0:	4b6b      	ldr	r3, [pc, #428]	@ (8013750 <tcp_process+0x7d0>)
 80135a2:	781b      	ldrb	r3, [r3, #0]
 80135a4:	f003 0310 	and.w	r3, r3, #16
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	f000 80c1 	beq.w	8013730 <tcp_process+0x7b0>
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80135b2:	4b68      	ldr	r3, [pc, #416]	@ (8013754 <tcp_process+0x7d4>)
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	429a      	cmp	r2, r3
 80135b8:	f040 80ba 	bne.w	8013730 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	f040 80b5 	bne.w	8013730 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	2206      	movs	r2, #6
 80135ca:	751a      	strb	r2, [r3, #20]
      break;
 80135cc:	e0b0      	b.n	8013730 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80135ce:	6878      	ldr	r0, [r7, #4]
 80135d0:	f000 f9ca 	bl	8013968 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80135d4:	4b60      	ldr	r3, [pc, #384]	@ (8013758 <tcp_process+0x7d8>)
 80135d6:	781b      	ldrb	r3, [r3, #0]
 80135d8:	f003 0320 	and.w	r3, r3, #32
 80135dc:	2b00      	cmp	r3, #0
 80135de:	f000 80a9 	beq.w	8013734 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	8b5b      	ldrh	r3, [r3, #26]
 80135e6:	f043 0302 	orr.w	r3, r3, #2
 80135ea:	b29a      	uxth	r2, r3
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80135f0:	6878      	ldr	r0, [r7, #4]
 80135f2:	f7fe fd39 	bl	8012068 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80135f6:	4b59      	ldr	r3, [pc, #356]	@ (801375c <tcp_process+0x7dc>)
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	687a      	ldr	r2, [r7, #4]
 80135fc:	429a      	cmp	r2, r3
 80135fe:	d105      	bne.n	801360c <tcp_process+0x68c>
 8013600:	4b56      	ldr	r3, [pc, #344]	@ (801375c <tcp_process+0x7dc>)
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	68db      	ldr	r3, [r3, #12]
 8013606:	4a55      	ldr	r2, [pc, #340]	@ (801375c <tcp_process+0x7dc>)
 8013608:	6013      	str	r3, [r2, #0]
 801360a:	e013      	b.n	8013634 <tcp_process+0x6b4>
 801360c:	4b53      	ldr	r3, [pc, #332]	@ (801375c <tcp_process+0x7dc>)
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	613b      	str	r3, [r7, #16]
 8013612:	e00c      	b.n	801362e <tcp_process+0x6ae>
 8013614:	693b      	ldr	r3, [r7, #16]
 8013616:	68db      	ldr	r3, [r3, #12]
 8013618:	687a      	ldr	r2, [r7, #4]
 801361a:	429a      	cmp	r2, r3
 801361c:	d104      	bne.n	8013628 <tcp_process+0x6a8>
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	68da      	ldr	r2, [r3, #12]
 8013622:	693b      	ldr	r3, [r7, #16]
 8013624:	60da      	str	r2, [r3, #12]
 8013626:	e005      	b.n	8013634 <tcp_process+0x6b4>
 8013628:	693b      	ldr	r3, [r7, #16]
 801362a:	68db      	ldr	r3, [r3, #12]
 801362c:	613b      	str	r3, [r7, #16]
 801362e:	693b      	ldr	r3, [r7, #16]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d1ef      	bne.n	8013614 <tcp_process+0x694>
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	2200      	movs	r2, #0
 8013638:	60da      	str	r2, [r3, #12]
 801363a:	4b43      	ldr	r3, [pc, #268]	@ (8013748 <tcp_process+0x7c8>)
 801363c:	2201      	movs	r2, #1
 801363e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	220a      	movs	r2, #10
 8013644:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013646:	4b41      	ldr	r3, [pc, #260]	@ (801374c <tcp_process+0x7cc>)
 8013648:	681a      	ldr	r2, [r3, #0]
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	60da      	str	r2, [r3, #12]
 801364e:	4a3f      	ldr	r2, [pc, #252]	@ (801374c <tcp_process+0x7cc>)
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	6013      	str	r3, [r2, #0]
 8013654:	f002 fc8c 	bl	8015f70 <tcp_timer_needed>
      }
      break;
 8013658:	e06c      	b.n	8013734 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801365a:	6878      	ldr	r0, [r7, #4]
 801365c:	f000 f984 	bl	8013968 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013660:	4b3b      	ldr	r3, [pc, #236]	@ (8013750 <tcp_process+0x7d0>)
 8013662:	781b      	ldrb	r3, [r3, #0]
 8013664:	f003 0310 	and.w	r3, r3, #16
 8013668:	2b00      	cmp	r3, #0
 801366a:	d065      	beq.n	8013738 <tcp_process+0x7b8>
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013670:	4b38      	ldr	r3, [pc, #224]	@ (8013754 <tcp_process+0x7d4>)
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	429a      	cmp	r2, r3
 8013676:	d15f      	bne.n	8013738 <tcp_process+0x7b8>
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801367c:	2b00      	cmp	r3, #0
 801367e:	d15b      	bne.n	8013738 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013680:	6878      	ldr	r0, [r7, #4]
 8013682:	f7fe fcf1 	bl	8012068 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013686:	4b35      	ldr	r3, [pc, #212]	@ (801375c <tcp_process+0x7dc>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	687a      	ldr	r2, [r7, #4]
 801368c:	429a      	cmp	r2, r3
 801368e:	d105      	bne.n	801369c <tcp_process+0x71c>
 8013690:	4b32      	ldr	r3, [pc, #200]	@ (801375c <tcp_process+0x7dc>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	68db      	ldr	r3, [r3, #12]
 8013696:	4a31      	ldr	r2, [pc, #196]	@ (801375c <tcp_process+0x7dc>)
 8013698:	6013      	str	r3, [r2, #0]
 801369a:	e013      	b.n	80136c4 <tcp_process+0x744>
 801369c:	4b2f      	ldr	r3, [pc, #188]	@ (801375c <tcp_process+0x7dc>)
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	60fb      	str	r3, [r7, #12]
 80136a2:	e00c      	b.n	80136be <tcp_process+0x73e>
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	68db      	ldr	r3, [r3, #12]
 80136a8:	687a      	ldr	r2, [r7, #4]
 80136aa:	429a      	cmp	r2, r3
 80136ac:	d104      	bne.n	80136b8 <tcp_process+0x738>
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	68da      	ldr	r2, [r3, #12]
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	60da      	str	r2, [r3, #12]
 80136b6:	e005      	b.n	80136c4 <tcp_process+0x744>
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	68db      	ldr	r3, [r3, #12]
 80136bc:	60fb      	str	r3, [r7, #12]
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d1ef      	bne.n	80136a4 <tcp_process+0x724>
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	2200      	movs	r2, #0
 80136c8:	60da      	str	r2, [r3, #12]
 80136ca:	4b1f      	ldr	r3, [pc, #124]	@ (8013748 <tcp_process+0x7c8>)
 80136cc:	2201      	movs	r2, #1
 80136ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	220a      	movs	r2, #10
 80136d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80136d6:	4b1d      	ldr	r3, [pc, #116]	@ (801374c <tcp_process+0x7cc>)
 80136d8:	681a      	ldr	r2, [r3, #0]
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	60da      	str	r2, [r3, #12]
 80136de:	4a1b      	ldr	r2, [pc, #108]	@ (801374c <tcp_process+0x7cc>)
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	6013      	str	r3, [r2, #0]
 80136e4:	f002 fc44 	bl	8015f70 <tcp_timer_needed>
      }
      break;
 80136e8:	e026      	b.n	8013738 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80136ea:	6878      	ldr	r0, [r7, #4]
 80136ec:	f000 f93c 	bl	8013968 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80136f0:	4b17      	ldr	r3, [pc, #92]	@ (8013750 <tcp_process+0x7d0>)
 80136f2:	781b      	ldrb	r3, [r3, #0]
 80136f4:	f003 0310 	and.w	r3, r3, #16
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d01f      	beq.n	801373c <tcp_process+0x7bc>
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013700:	4b14      	ldr	r3, [pc, #80]	@ (8013754 <tcp_process+0x7d4>)
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	429a      	cmp	r2, r3
 8013706:	d119      	bne.n	801373c <tcp_process+0x7bc>
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801370c:	2b00      	cmp	r3, #0
 801370e:	d115      	bne.n	801373c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013710:	4b11      	ldr	r3, [pc, #68]	@ (8013758 <tcp_process+0x7d8>)
 8013712:	781b      	ldrb	r3, [r3, #0]
 8013714:	f043 0310 	orr.w	r3, r3, #16
 8013718:	b2da      	uxtb	r2, r3
 801371a:	4b0f      	ldr	r3, [pc, #60]	@ (8013758 <tcp_process+0x7d8>)
 801371c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801371e:	e00d      	b.n	801373c <tcp_process+0x7bc>
    default:
      break;
 8013720:	bf00      	nop
 8013722:	e00c      	b.n	801373e <tcp_process+0x7be>
      break;
 8013724:	bf00      	nop
 8013726:	e00a      	b.n	801373e <tcp_process+0x7be>
      break;
 8013728:	bf00      	nop
 801372a:	e008      	b.n	801373e <tcp_process+0x7be>
      break;
 801372c:	bf00      	nop
 801372e:	e006      	b.n	801373e <tcp_process+0x7be>
      break;
 8013730:	bf00      	nop
 8013732:	e004      	b.n	801373e <tcp_process+0x7be>
      break;
 8013734:	bf00      	nop
 8013736:	e002      	b.n	801373e <tcp_process+0x7be>
      break;
 8013738:	bf00      	nop
 801373a:	e000      	b.n	801373e <tcp_process+0x7be>
      break;
 801373c:	bf00      	nop
  }
  return ERR_OK;
 801373e:	2300      	movs	r3, #0
}
 8013740:	4618      	mov	r0, r3
 8013742:	3724      	adds	r7, #36	@ 0x24
 8013744:	46bd      	mov	sp, r7
 8013746:	bd90      	pop	{r4, r7, pc}
 8013748:	200274c0 	.word	0x200274c0
 801374c:	200274bc 	.word	0x200274bc
 8013750:	200274f0 	.word	0x200274f0
 8013754:	200274e8 	.word	0x200274e8
 8013758:	200274f1 	.word	0x200274f1
 801375c:	200274b8 	.word	0x200274b8

08013760 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013760:	b590      	push	{r4, r7, lr}
 8013762:	b085      	sub	sp, #20
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
 8013768:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d106      	bne.n	801377e <tcp_oos_insert_segment+0x1e>
 8013770:	4b3b      	ldr	r3, [pc, #236]	@ (8013860 <tcp_oos_insert_segment+0x100>)
 8013772:	f240 421f 	movw	r2, #1055	@ 0x41f
 8013776:	493b      	ldr	r1, [pc, #236]	@ (8013864 <tcp_oos_insert_segment+0x104>)
 8013778:	483b      	ldr	r0, [pc, #236]	@ (8013868 <tcp_oos_insert_segment+0x108>)
 801377a:	f006 fc45 	bl	801a008 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	68db      	ldr	r3, [r3, #12]
 8013782:	899b      	ldrh	r3, [r3, #12]
 8013784:	b29b      	uxth	r3, r3
 8013786:	4618      	mov	r0, r3
 8013788:	f7fb fc02 	bl	800ef90 <lwip_htons>
 801378c:	4603      	mov	r3, r0
 801378e:	b2db      	uxtb	r3, r3
 8013790:	f003 0301 	and.w	r3, r3, #1
 8013794:	2b00      	cmp	r3, #0
 8013796:	d028      	beq.n	80137ea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013798:	6838      	ldr	r0, [r7, #0]
 801379a:	f7fe fa63 	bl	8011c64 <tcp_segs_free>
    next = NULL;
 801379e:	2300      	movs	r3, #0
 80137a0:	603b      	str	r3, [r7, #0]
 80137a2:	e056      	b.n	8013852 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80137a4:	683b      	ldr	r3, [r7, #0]
 80137a6:	68db      	ldr	r3, [r3, #12]
 80137a8:	899b      	ldrh	r3, [r3, #12]
 80137aa:	b29b      	uxth	r3, r3
 80137ac:	4618      	mov	r0, r3
 80137ae:	f7fb fbef 	bl	800ef90 <lwip_htons>
 80137b2:	4603      	mov	r3, r0
 80137b4:	b2db      	uxtb	r3, r3
 80137b6:	f003 0301 	and.w	r3, r3, #1
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d00d      	beq.n	80137da <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	68db      	ldr	r3, [r3, #12]
 80137c2:	899b      	ldrh	r3, [r3, #12]
 80137c4:	b29c      	uxth	r4, r3
 80137c6:	2001      	movs	r0, #1
 80137c8:	f7fb fbe2 	bl	800ef90 <lwip_htons>
 80137cc:	4603      	mov	r3, r0
 80137ce:	461a      	mov	r2, r3
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	68db      	ldr	r3, [r3, #12]
 80137d4:	4322      	orrs	r2, r4
 80137d6:	b292      	uxth	r2, r2
 80137d8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80137da:	683b      	ldr	r3, [r7, #0]
 80137dc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80137de:	683b      	ldr	r3, [r7, #0]
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80137e4:	68f8      	ldr	r0, [r7, #12]
 80137e6:	f7fe fa52 	bl	8011c8e <tcp_seg_free>
    while (next &&
 80137ea:	683b      	ldr	r3, [r7, #0]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d00e      	beq.n	801380e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	891b      	ldrh	r3, [r3, #8]
 80137f4:	461a      	mov	r2, r3
 80137f6:	4b1d      	ldr	r3, [pc, #116]	@ (801386c <tcp_oos_insert_segment+0x10c>)
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	441a      	add	r2, r3
 80137fc:	683b      	ldr	r3, [r7, #0]
 80137fe:	68db      	ldr	r3, [r3, #12]
 8013800:	685b      	ldr	r3, [r3, #4]
 8013802:	6839      	ldr	r1, [r7, #0]
 8013804:	8909      	ldrh	r1, [r1, #8]
 8013806:	440b      	add	r3, r1
 8013808:	1ad3      	subs	r3, r2, r3
    while (next &&
 801380a:	2b00      	cmp	r3, #0
 801380c:	daca      	bge.n	80137a4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801380e:	683b      	ldr	r3, [r7, #0]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d01e      	beq.n	8013852 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	891b      	ldrh	r3, [r3, #8]
 8013818:	461a      	mov	r2, r3
 801381a:	4b14      	ldr	r3, [pc, #80]	@ (801386c <tcp_oos_insert_segment+0x10c>)
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	441a      	add	r2, r3
 8013820:	683b      	ldr	r3, [r7, #0]
 8013822:	68db      	ldr	r3, [r3, #12]
 8013824:	685b      	ldr	r3, [r3, #4]
 8013826:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013828:	2b00      	cmp	r3, #0
 801382a:	dd12      	ble.n	8013852 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801382c:	683b      	ldr	r3, [r7, #0]
 801382e:	68db      	ldr	r3, [r3, #12]
 8013830:	685b      	ldr	r3, [r3, #4]
 8013832:	b29a      	uxth	r2, r3
 8013834:	4b0d      	ldr	r3, [pc, #52]	@ (801386c <tcp_oos_insert_segment+0x10c>)
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	b29b      	uxth	r3, r3
 801383a:	1ad3      	subs	r3, r2, r3
 801383c:	b29a      	uxth	r2, r3
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	685a      	ldr	r2, [r3, #4]
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	891b      	ldrh	r3, [r3, #8]
 801384a:	4619      	mov	r1, r3
 801384c:	4610      	mov	r0, r2
 801384e:	f7fc fe07 	bl	8010460 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	683a      	ldr	r2, [r7, #0]
 8013856:	601a      	str	r2, [r3, #0]
}
 8013858:	bf00      	nop
 801385a:	3714      	adds	r7, #20
 801385c:	46bd      	mov	sp, r7
 801385e:	bd90      	pop	{r4, r7, pc}
 8013860:	0801c564 	.word	0x0801c564
 8013864:	0801c824 	.word	0x0801c824
 8013868:	0801c5b0 	.word	0x0801c5b0
 801386c:	200274e4 	.word	0x200274e4

08013870 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013870:	b5b0      	push	{r4, r5, r7, lr}
 8013872:	b086      	sub	sp, #24
 8013874:	af00      	add	r7, sp, #0
 8013876:	60f8      	str	r0, [r7, #12]
 8013878:	60b9      	str	r1, [r7, #8]
 801387a:	607a      	str	r2, [r7, #4]
 801387c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801387e:	e03e      	b.n	80138fe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013880:	68bb      	ldr	r3, [r7, #8]
 8013882:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013884:	68bb      	ldr	r3, [r7, #8]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	685b      	ldr	r3, [r3, #4]
 801388e:	4618      	mov	r0, r3
 8013890:	f7fc fffa 	bl	8010888 <pbuf_clen>
 8013894:	4603      	mov	r3, r0
 8013896:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801389e:	8a7a      	ldrh	r2, [r7, #18]
 80138a0:	429a      	cmp	r2, r3
 80138a2:	d906      	bls.n	80138b2 <tcp_free_acked_segments+0x42>
 80138a4:	4b2a      	ldr	r3, [pc, #168]	@ (8013950 <tcp_free_acked_segments+0xe0>)
 80138a6:	f240 4257 	movw	r2, #1111	@ 0x457
 80138aa:	492a      	ldr	r1, [pc, #168]	@ (8013954 <tcp_free_acked_segments+0xe4>)
 80138ac:	482a      	ldr	r0, [pc, #168]	@ (8013958 <tcp_free_acked_segments+0xe8>)
 80138ae:	f006 fbab 	bl	801a008 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80138b8:	8a7b      	ldrh	r3, [r7, #18]
 80138ba:	1ad3      	subs	r3, r2, r3
 80138bc:	b29a      	uxth	r2, r3
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80138c4:	697b      	ldr	r3, [r7, #20]
 80138c6:	891a      	ldrh	r2, [r3, #8]
 80138c8:	4b24      	ldr	r3, [pc, #144]	@ (801395c <tcp_free_acked_segments+0xec>)
 80138ca:	881b      	ldrh	r3, [r3, #0]
 80138cc:	4413      	add	r3, r2
 80138ce:	b29a      	uxth	r2, r3
 80138d0:	4b22      	ldr	r3, [pc, #136]	@ (801395c <tcp_free_acked_segments+0xec>)
 80138d2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80138d4:	6978      	ldr	r0, [r7, #20]
 80138d6:	f7fe f9da 	bl	8011c8e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d00c      	beq.n	80138fe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	d109      	bne.n	80138fe <tcp_free_acked_segments+0x8e>
 80138ea:	683b      	ldr	r3, [r7, #0]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d106      	bne.n	80138fe <tcp_free_acked_segments+0x8e>
 80138f0:	4b17      	ldr	r3, [pc, #92]	@ (8013950 <tcp_free_acked_segments+0xe0>)
 80138f2:	f240 4261 	movw	r2, #1121	@ 0x461
 80138f6:	491a      	ldr	r1, [pc, #104]	@ (8013960 <tcp_free_acked_segments+0xf0>)
 80138f8:	4817      	ldr	r0, [pc, #92]	@ (8013958 <tcp_free_acked_segments+0xe8>)
 80138fa:	f006 fb85 	bl	801a008 <iprintf>
  while (seg_list != NULL &&
 80138fe:	68bb      	ldr	r3, [r7, #8]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d020      	beq.n	8013946 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013904:	68bb      	ldr	r3, [r7, #8]
 8013906:	68db      	ldr	r3, [r3, #12]
 8013908:	685b      	ldr	r3, [r3, #4]
 801390a:	4618      	mov	r0, r3
 801390c:	f7fb fb56 	bl	800efbc <lwip_htonl>
 8013910:	4604      	mov	r4, r0
 8013912:	68bb      	ldr	r3, [r7, #8]
 8013914:	891b      	ldrh	r3, [r3, #8]
 8013916:	461d      	mov	r5, r3
 8013918:	68bb      	ldr	r3, [r7, #8]
 801391a:	68db      	ldr	r3, [r3, #12]
 801391c:	899b      	ldrh	r3, [r3, #12]
 801391e:	b29b      	uxth	r3, r3
 8013920:	4618      	mov	r0, r3
 8013922:	f7fb fb35 	bl	800ef90 <lwip_htons>
 8013926:	4603      	mov	r3, r0
 8013928:	b2db      	uxtb	r3, r3
 801392a:	f003 0303 	and.w	r3, r3, #3
 801392e:	2b00      	cmp	r3, #0
 8013930:	d001      	beq.n	8013936 <tcp_free_acked_segments+0xc6>
 8013932:	2301      	movs	r3, #1
 8013934:	e000      	b.n	8013938 <tcp_free_acked_segments+0xc8>
 8013936:	2300      	movs	r3, #0
 8013938:	442b      	add	r3, r5
 801393a:	18e2      	adds	r2, r4, r3
 801393c:	4b09      	ldr	r3, [pc, #36]	@ (8013964 <tcp_free_acked_segments+0xf4>)
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013942:	2b00      	cmp	r3, #0
 8013944:	dd9c      	ble.n	8013880 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013946:	68bb      	ldr	r3, [r7, #8]
}
 8013948:	4618      	mov	r0, r3
 801394a:	3718      	adds	r7, #24
 801394c:	46bd      	mov	sp, r7
 801394e:	bdb0      	pop	{r4, r5, r7, pc}
 8013950:	0801c564 	.word	0x0801c564
 8013954:	0801c84c 	.word	0x0801c84c
 8013958:	0801c5b0 	.word	0x0801c5b0
 801395c:	200274ec 	.word	0x200274ec
 8013960:	0801c874 	.word	0x0801c874
 8013964:	200274e8 	.word	0x200274e8

08013968 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013968:	b5b0      	push	{r4, r5, r7, lr}
 801396a:	b094      	sub	sp, #80	@ 0x50
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013970:	2300      	movs	r3, #0
 8013972:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d106      	bne.n	8013988 <tcp_receive+0x20>
 801397a:	4b91      	ldr	r3, [pc, #580]	@ (8013bc0 <tcp_receive+0x258>)
 801397c:	f240 427b 	movw	r2, #1147	@ 0x47b
 8013980:	4990      	ldr	r1, [pc, #576]	@ (8013bc4 <tcp_receive+0x25c>)
 8013982:	4891      	ldr	r0, [pc, #580]	@ (8013bc8 <tcp_receive+0x260>)
 8013984:	f006 fb40 	bl	801a008 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	7d1b      	ldrb	r3, [r3, #20]
 801398c:	2b03      	cmp	r3, #3
 801398e:	d806      	bhi.n	801399e <tcp_receive+0x36>
 8013990:	4b8b      	ldr	r3, [pc, #556]	@ (8013bc0 <tcp_receive+0x258>)
 8013992:	f240 427c 	movw	r2, #1148	@ 0x47c
 8013996:	498d      	ldr	r1, [pc, #564]	@ (8013bcc <tcp_receive+0x264>)
 8013998:	488b      	ldr	r0, [pc, #556]	@ (8013bc8 <tcp_receive+0x260>)
 801399a:	f006 fb35 	bl	801a008 <iprintf>

  if (flags & TCP_ACK) {
 801399e:	4b8c      	ldr	r3, [pc, #560]	@ (8013bd0 <tcp_receive+0x268>)
 80139a0:	781b      	ldrb	r3, [r3, #0]
 80139a2:	f003 0310 	and.w	r3, r3, #16
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	f000 8264 	beq.w	8013e74 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80139b2:	461a      	mov	r2, r3
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80139b8:	4413      	add	r3, r2
 80139ba:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80139c0:	4b84      	ldr	r3, [pc, #528]	@ (8013bd4 <tcp_receive+0x26c>)
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	1ad3      	subs	r3, r2, r3
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	db1b      	blt.n	8013a02 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80139ce:	4b81      	ldr	r3, [pc, #516]	@ (8013bd4 <tcp_receive+0x26c>)
 80139d0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80139d2:	429a      	cmp	r2, r3
 80139d4:	d106      	bne.n	80139e4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80139da:	4b7f      	ldr	r3, [pc, #508]	@ (8013bd8 <tcp_receive+0x270>)
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	1ad3      	subs	r3, r2, r3
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	db0e      	blt.n	8013a02 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80139e8:	4b7b      	ldr	r3, [pc, #492]	@ (8013bd8 <tcp_receive+0x270>)
 80139ea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80139ec:	429a      	cmp	r2, r3
 80139ee:	d125      	bne.n	8013a3c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80139f0:	4b7a      	ldr	r3, [pc, #488]	@ (8013bdc <tcp_receive+0x274>)
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	89db      	ldrh	r3, [r3, #14]
 80139f6:	b29a      	uxth	r2, r3
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80139fe:	429a      	cmp	r2, r3
 8013a00:	d91c      	bls.n	8013a3c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013a02:	4b76      	ldr	r3, [pc, #472]	@ (8013bdc <tcp_receive+0x274>)
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	89db      	ldrh	r3, [r3, #14]
 8013a08:	b29a      	uxth	r2, r3
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013a1c:	429a      	cmp	r2, r3
 8013a1e:	d205      	bcs.n	8013a2c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8013a2c:	4b69      	ldr	r3, [pc, #420]	@ (8013bd4 <tcp_receive+0x26c>)
 8013a2e:	681a      	ldr	r2, [r3, #0]
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8013a34:	4b68      	ldr	r3, [pc, #416]	@ (8013bd8 <tcp_receive+0x270>)
 8013a36:	681a      	ldr	r2, [r3, #0]
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013a3c:	4b66      	ldr	r3, [pc, #408]	@ (8013bd8 <tcp_receive+0x270>)
 8013a3e:	681a      	ldr	r2, [r3, #0]
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013a44:	1ad3      	subs	r3, r2, r3
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	dc58      	bgt.n	8013afc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8013a4a:	4b65      	ldr	r3, [pc, #404]	@ (8013be0 <tcp_receive+0x278>)
 8013a4c:	881b      	ldrh	r3, [r3, #0]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d14b      	bne.n	8013aea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013a56:	687a      	ldr	r2, [r7, #4]
 8013a58:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8013a5c:	4413      	add	r3, r2
 8013a5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013a60:	429a      	cmp	r2, r3
 8013a62:	d142      	bne.n	8013aea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	db3d      	blt.n	8013aea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013a72:	4b59      	ldr	r3, [pc, #356]	@ (8013bd8 <tcp_receive+0x270>)
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	429a      	cmp	r2, r3
 8013a78:	d137      	bne.n	8013aea <tcp_receive+0x182>
              found_dupack = 1;
 8013a7a:	2301      	movs	r3, #1
 8013a7c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013a84:	2bff      	cmp	r3, #255	@ 0xff
 8013a86:	d007      	beq.n	8013a98 <tcp_receive+0x130>
                ++pcb->dupacks;
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013a8e:	3301      	adds	r3, #1
 8013a90:	b2da      	uxtb	r2, r3
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013a9e:	2b03      	cmp	r3, #3
 8013aa0:	d91b      	bls.n	8013ada <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013aac:	4413      	add	r3, r2
 8013aae:	b29a      	uxth	r2, r3
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013ab6:	429a      	cmp	r2, r3
 8013ab8:	d30a      	bcc.n	8013ad0 <tcp_receive+0x168>
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013ac4:	4413      	add	r3, r2
 8013ac6:	b29a      	uxth	r2, r3
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013ace:	e004      	b.n	8013ada <tcp_receive+0x172>
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013ad6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013ae0:	2b02      	cmp	r3, #2
 8013ae2:	d902      	bls.n	8013aea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013ae4:	6878      	ldr	r0, [r7, #4]
 8013ae6:	f001 fee7 	bl	80158b8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013aea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	f040 8161 	bne.w	8013db4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	2200      	movs	r2, #0
 8013af6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013afa:	e15b      	b.n	8013db4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013afc:	4b36      	ldr	r3, [pc, #216]	@ (8013bd8 <tcp_receive+0x270>)
 8013afe:	681a      	ldr	r2, [r3, #0]
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013b04:	1ad3      	subs	r3, r2, r3
 8013b06:	3b01      	subs	r3, #1
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	f2c0 814e 	blt.w	8013daa <tcp_receive+0x442>
 8013b0e:	4b32      	ldr	r3, [pc, #200]	@ (8013bd8 <tcp_receive+0x270>)
 8013b10:	681a      	ldr	r2, [r3, #0]
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013b16:	1ad3      	subs	r3, r2, r3
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	f300 8146 	bgt.w	8013daa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	8b5b      	ldrh	r3, [r3, #26]
 8013b22:	f003 0304 	and.w	r3, r3, #4
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d010      	beq.n	8013b4c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	8b5b      	ldrh	r3, [r3, #26]
 8013b2e:	f023 0304 	bic.w	r3, r3, #4
 8013b32:	b29a      	uxth	r2, r3
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	2200      	movs	r2, #0
 8013b48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	2200      	movs	r2, #0
 8013b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013b5a:	10db      	asrs	r3, r3, #3
 8013b5c:	b21b      	sxth	r3, r3
 8013b5e:	b29a      	uxth	r2, r3
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013b66:	b29b      	uxth	r3, r3
 8013b68:	4413      	add	r3, r2
 8013b6a:	b29b      	uxth	r3, r3
 8013b6c:	b21a      	sxth	r2, r3
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013b74:	4b18      	ldr	r3, [pc, #96]	@ (8013bd8 <tcp_receive+0x270>)
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	b29a      	uxth	r2, r3
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013b7e:	b29b      	uxth	r3, r3
 8013b80:	1ad3      	subs	r3, r2, r3
 8013b82:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	2200      	movs	r2, #0
 8013b88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8013b8c:	4b12      	ldr	r3, [pc, #72]	@ (8013bd8 <tcp_receive+0x270>)
 8013b8e:	681a      	ldr	r2, [r3, #0]
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	7d1b      	ldrb	r3, [r3, #20]
 8013b98:	2b03      	cmp	r3, #3
 8013b9a:	f240 8097 	bls.w	8013ccc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8013baa:	429a      	cmp	r2, r3
 8013bac:	d245      	bcs.n	8013c3a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	8b5b      	ldrh	r3, [r3, #26]
 8013bb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d014      	beq.n	8013be4 <tcp_receive+0x27c>
 8013bba:	2301      	movs	r3, #1
 8013bbc:	e013      	b.n	8013be6 <tcp_receive+0x27e>
 8013bbe:	bf00      	nop
 8013bc0:	0801c564 	.word	0x0801c564
 8013bc4:	0801c894 	.word	0x0801c894
 8013bc8:	0801c5b0 	.word	0x0801c5b0
 8013bcc:	0801c8b0 	.word	0x0801c8b0
 8013bd0:	200274f0 	.word	0x200274f0
 8013bd4:	200274e4 	.word	0x200274e4
 8013bd8:	200274e8 	.word	0x200274e8
 8013bdc:	200274d4 	.word	0x200274d4
 8013be0:	200274ee 	.word	0x200274ee
 8013be4:	2302      	movs	r3, #2
 8013be6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013bea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8013bee:	b29a      	uxth	r2, r3
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013bf4:	fb12 f303 	smulbb	r3, r2, r3
 8013bf8:	b29b      	uxth	r3, r3
 8013bfa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013bfc:	4293      	cmp	r3, r2
 8013bfe:	bf28      	it	cs
 8013c00:	4613      	movcs	r3, r2
 8013c02:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013c0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013c0c:	4413      	add	r3, r2
 8013c0e:	b29a      	uxth	r2, r3
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013c16:	429a      	cmp	r2, r3
 8013c18:	d309      	bcc.n	8013c2e <tcp_receive+0x2c6>
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013c20:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013c22:	4413      	add	r3, r2
 8013c24:	b29a      	uxth	r2, r3
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013c2c:	e04e      	b.n	8013ccc <tcp_receive+0x364>
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013c34:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013c38:	e048      	b.n	8013ccc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013c40:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013c42:	4413      	add	r3, r2
 8013c44:	b29a      	uxth	r2, r3
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8013c4c:	429a      	cmp	r2, r3
 8013c4e:	d309      	bcc.n	8013c64 <tcp_receive+0x2fc>
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013c56:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013c58:	4413      	add	r3, r2
 8013c5a:	b29a      	uxth	r2, r3
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8013c62:	e004      	b.n	8013c6e <tcp_receive+0x306>
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013c6a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013c7a:	429a      	cmp	r2, r3
 8013c7c:	d326      	bcc.n	8013ccc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013c8a:	1ad3      	subs	r3, r2, r3
 8013c8c:	b29a      	uxth	r2, r3
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013c9e:	4413      	add	r3, r2
 8013ca0:	b29a      	uxth	r2, r3
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013ca8:	429a      	cmp	r2, r3
 8013caa:	d30a      	bcc.n	8013cc2 <tcp_receive+0x35a>
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013cb6:	4413      	add	r3, r2
 8013cb8:	b29a      	uxth	r2, r3
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013cc0:	e004      	b.n	8013ccc <tcp_receive+0x364>
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013cc8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013cd4:	4a98      	ldr	r2, [pc, #608]	@ (8013f38 <tcp_receive+0x5d0>)
 8013cd6:	6878      	ldr	r0, [r7, #4]
 8013cd8:	f7ff fdca 	bl	8013870 <tcp_free_acked_segments>
 8013cdc:	4602      	mov	r2, r0
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013cea:	4a94      	ldr	r2, [pc, #592]	@ (8013f3c <tcp_receive+0x5d4>)
 8013cec:	6878      	ldr	r0, [r7, #4]
 8013cee:	f7ff fdbf 	bl	8013870 <tcp_free_acked_segments>
 8013cf2:	4602      	mov	r2, r0
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d104      	bne.n	8013d0a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013d06:	861a      	strh	r2, [r3, #48]	@ 0x30
 8013d08:	e002      	b.n	8013d10 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	2200      	movs	r2, #0
 8013d14:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d103      	bne.n	8013d26 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	2200      	movs	r2, #0
 8013d22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8013d2c:	4b84      	ldr	r3, [pc, #528]	@ (8013f40 <tcp_receive+0x5d8>)
 8013d2e:	881b      	ldrh	r3, [r3, #0]
 8013d30:	4413      	add	r3, r2
 8013d32:	b29a      	uxth	r2, r3
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	8b5b      	ldrh	r3, [r3, #26]
 8013d3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d035      	beq.n	8013db2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d118      	bne.n	8013d80 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d00c      	beq.n	8013d70 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013d5e:	68db      	ldr	r3, [r3, #12]
 8013d60:	685b      	ldr	r3, [r3, #4]
 8013d62:	4618      	mov	r0, r3
 8013d64:	f7fb f92a 	bl	800efbc <lwip_htonl>
 8013d68:	4603      	mov	r3, r0
 8013d6a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	dc20      	bgt.n	8013db2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	8b5b      	ldrh	r3, [r3, #26]
 8013d74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013d78:	b29a      	uxth	r2, r3
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013d7e:	e018      	b.n	8013db2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013d88:	68db      	ldr	r3, [r3, #12]
 8013d8a:	685b      	ldr	r3, [r3, #4]
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	f7fb f915 	bl	800efbc <lwip_htonl>
 8013d92:	4603      	mov	r3, r0
 8013d94:	1ae3      	subs	r3, r4, r3
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	dc0b      	bgt.n	8013db2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	8b5b      	ldrh	r3, [r3, #26]
 8013d9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013da2:	b29a      	uxth	r2, r3
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013da8:	e003      	b.n	8013db2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8013daa:	6878      	ldr	r0, [r7, #4]
 8013dac:	f001 ff70 	bl	8015c90 <tcp_send_empty_ack>
 8013db0:	e000      	b.n	8013db4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013db2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d05b      	beq.n	8013e74 <tcp_receive+0x50c>
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013dc0:	4b60      	ldr	r3, [pc, #384]	@ (8013f44 <tcp_receive+0x5dc>)
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	1ad3      	subs	r3, r2, r3
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	da54      	bge.n	8013e74 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8013dca:	4b5f      	ldr	r3, [pc, #380]	@ (8013f48 <tcp_receive+0x5e0>)
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	b29a      	uxth	r2, r3
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013dd4:	b29b      	uxth	r3, r3
 8013dd6:	1ad3      	subs	r3, r2, r3
 8013dd8:	b29b      	uxth	r3, r3
 8013dda:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013dde:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013de8:	10db      	asrs	r3, r3, #3
 8013dea:	b21b      	sxth	r3, r3
 8013dec:	b29b      	uxth	r3, r3
 8013dee:	1ad3      	subs	r3, r2, r3
 8013df0:	b29b      	uxth	r3, r3
 8013df2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013dfc:	b29a      	uxth	r2, r3
 8013dfe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8013e02:	4413      	add	r3, r2
 8013e04:	b29b      	uxth	r3, r3
 8013e06:	b21a      	sxth	r2, r3
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8013e0c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	da05      	bge.n	8013e20 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8013e14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8013e18:	425b      	negs	r3, r3
 8013e1a:	b29b      	uxth	r3, r3
 8013e1c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8013e20:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013e2a:	109b      	asrs	r3, r3, #2
 8013e2c:	b21b      	sxth	r3, r3
 8013e2e:	b29b      	uxth	r3, r3
 8013e30:	1ad3      	subs	r3, r2, r3
 8013e32:	b29b      	uxth	r3, r3
 8013e34:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013e3e:	b29a      	uxth	r2, r3
 8013e40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8013e44:	4413      	add	r3, r2
 8013e46:	b29b      	uxth	r3, r3
 8013e48:	b21a      	sxth	r2, r3
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013e54:	10db      	asrs	r3, r3, #3
 8013e56:	b21b      	sxth	r3, r3
 8013e58:	b29a      	uxth	r2, r3
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013e60:	b29b      	uxth	r3, r3
 8013e62:	4413      	add	r3, r2
 8013e64:	b29b      	uxth	r3, r3
 8013e66:	b21a      	sxth	r2, r3
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	2200      	movs	r2, #0
 8013e72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013e74:	4b35      	ldr	r3, [pc, #212]	@ (8013f4c <tcp_receive+0x5e4>)
 8013e76:	881b      	ldrh	r3, [r3, #0]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	f000 84df 	beq.w	801483c <tcp_receive+0xed4>
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	7d1b      	ldrb	r3, [r3, #20]
 8013e82:	2b06      	cmp	r3, #6
 8013e84:	f200 84da 	bhi.w	801483c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013e8c:	4b30      	ldr	r3, [pc, #192]	@ (8013f50 <tcp_receive+0x5e8>)
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	1ad3      	subs	r3, r2, r3
 8013e92:	3b01      	subs	r3, #1
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	f2c0 808f 	blt.w	8013fb8 <tcp_receive+0x650>
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013e9e:	4b2b      	ldr	r3, [pc, #172]	@ (8013f4c <tcp_receive+0x5e4>)
 8013ea0:	881b      	ldrh	r3, [r3, #0]
 8013ea2:	4619      	mov	r1, r3
 8013ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8013f50 <tcp_receive+0x5e8>)
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	440b      	add	r3, r1
 8013eaa:	1ad3      	subs	r3, r2, r3
 8013eac:	3301      	adds	r3, #1
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	f300 8082 	bgt.w	8013fb8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013eb4:	4b27      	ldr	r3, [pc, #156]	@ (8013f54 <tcp_receive+0x5ec>)
 8013eb6:	685b      	ldr	r3, [r3, #4]
 8013eb8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013ebe:	4b24      	ldr	r3, [pc, #144]	@ (8013f50 <tcp_receive+0x5e8>)
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	1ad3      	subs	r3, r2, r3
 8013ec4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8013ec6:	4b23      	ldr	r3, [pc, #140]	@ (8013f54 <tcp_receive+0x5ec>)
 8013ec8:	685b      	ldr	r3, [r3, #4]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d106      	bne.n	8013edc <tcp_receive+0x574>
 8013ece:	4b22      	ldr	r3, [pc, #136]	@ (8013f58 <tcp_receive+0x5f0>)
 8013ed0:	f240 5294 	movw	r2, #1428	@ 0x594
 8013ed4:	4921      	ldr	r1, [pc, #132]	@ (8013f5c <tcp_receive+0x5f4>)
 8013ed6:	4822      	ldr	r0, [pc, #136]	@ (8013f60 <tcp_receive+0x5f8>)
 8013ed8:	f006 f896 	bl	801a008 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ede:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8013ee2:	4293      	cmp	r3, r2
 8013ee4:	d906      	bls.n	8013ef4 <tcp_receive+0x58c>
 8013ee6:	4b1c      	ldr	r3, [pc, #112]	@ (8013f58 <tcp_receive+0x5f0>)
 8013ee8:	f240 5295 	movw	r2, #1429	@ 0x595
 8013eec:	491d      	ldr	r1, [pc, #116]	@ (8013f64 <tcp_receive+0x5fc>)
 8013eee:	481c      	ldr	r0, [pc, #112]	@ (8013f60 <tcp_receive+0x5f8>)
 8013ef0:	f006 f88a 	bl	801a008 <iprintf>
      off = (u16_t)off32;
 8013ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ef6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8013efa:	4b16      	ldr	r3, [pc, #88]	@ (8013f54 <tcp_receive+0x5ec>)
 8013efc:	685b      	ldr	r3, [r3, #4]
 8013efe:	891b      	ldrh	r3, [r3, #8]
 8013f00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013f04:	429a      	cmp	r2, r3
 8013f06:	d906      	bls.n	8013f16 <tcp_receive+0x5ae>
 8013f08:	4b13      	ldr	r3, [pc, #76]	@ (8013f58 <tcp_receive+0x5f0>)
 8013f0a:	f240 5297 	movw	r2, #1431	@ 0x597
 8013f0e:	4916      	ldr	r1, [pc, #88]	@ (8013f68 <tcp_receive+0x600>)
 8013f10:	4813      	ldr	r0, [pc, #76]	@ (8013f60 <tcp_receive+0x5f8>)
 8013f12:	f006 f879 	bl	801a008 <iprintf>
      inseg.len -= off;
 8013f16:	4b0f      	ldr	r3, [pc, #60]	@ (8013f54 <tcp_receive+0x5ec>)
 8013f18:	891a      	ldrh	r2, [r3, #8]
 8013f1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013f1e:	1ad3      	subs	r3, r2, r3
 8013f20:	b29a      	uxth	r2, r3
 8013f22:	4b0c      	ldr	r3, [pc, #48]	@ (8013f54 <tcp_receive+0x5ec>)
 8013f24:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013f26:	4b0b      	ldr	r3, [pc, #44]	@ (8013f54 <tcp_receive+0x5ec>)
 8013f28:	685b      	ldr	r3, [r3, #4]
 8013f2a:	891a      	ldrh	r2, [r3, #8]
 8013f2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013f30:	1ad3      	subs	r3, r2, r3
 8013f32:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8013f34:	e02a      	b.n	8013f8c <tcp_receive+0x624>
 8013f36:	bf00      	nop
 8013f38:	0801c8cc 	.word	0x0801c8cc
 8013f3c:	0801c8d4 	.word	0x0801c8d4
 8013f40:	200274ec 	.word	0x200274ec
 8013f44:	200274e8 	.word	0x200274e8
 8013f48:	200274ac 	.word	0x200274ac
 8013f4c:	200274ee 	.word	0x200274ee
 8013f50:	200274e4 	.word	0x200274e4
 8013f54:	200274c4 	.word	0x200274c4
 8013f58:	0801c564 	.word	0x0801c564
 8013f5c:	0801c8dc 	.word	0x0801c8dc
 8013f60:	0801c5b0 	.word	0x0801c5b0
 8013f64:	0801c8ec 	.word	0x0801c8ec
 8013f68:	0801c8fc 	.word	0x0801c8fc
        off -= p->len;
 8013f6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f6e:	895b      	ldrh	r3, [r3, #10]
 8013f70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013f74:	1ad3      	subs	r3, r2, r3
 8013f76:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013f7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f7c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013f7e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013f80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f82:	2200      	movs	r2, #0
 8013f84:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8013f86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8013f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f8e:	895b      	ldrh	r3, [r3, #10]
 8013f90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013f94:	429a      	cmp	r2, r3
 8013f96:	d8e9      	bhi.n	8013f6c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013f98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013f9c:	4619      	mov	r1, r3
 8013f9e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8013fa0:	f7fc fb5e 	bl	8010660 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013fa8:	4a90      	ldr	r2, [pc, #576]	@ (80141ec <tcp_receive+0x884>)
 8013faa:	6013      	str	r3, [r2, #0]
 8013fac:	4b90      	ldr	r3, [pc, #576]	@ (80141f0 <tcp_receive+0x888>)
 8013fae:	68db      	ldr	r3, [r3, #12]
 8013fb0:	4a8e      	ldr	r2, [pc, #568]	@ (80141ec <tcp_receive+0x884>)
 8013fb2:	6812      	ldr	r2, [r2, #0]
 8013fb4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013fb6:	e00d      	b.n	8013fd4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8013fb8:	4b8c      	ldr	r3, [pc, #560]	@ (80141ec <tcp_receive+0x884>)
 8013fba:	681a      	ldr	r2, [r3, #0]
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013fc0:	1ad3      	subs	r3, r2, r3
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	da06      	bge.n	8013fd4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	8b5b      	ldrh	r3, [r3, #26]
 8013fca:	f043 0302 	orr.w	r3, r3, #2
 8013fce:	b29a      	uxth	r2, r3
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013fd4:	4b85      	ldr	r3, [pc, #532]	@ (80141ec <tcp_receive+0x884>)
 8013fd6:	681a      	ldr	r2, [r3, #0]
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013fdc:	1ad3      	subs	r3, r2, r3
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	f2c0 8427 	blt.w	8014832 <tcp_receive+0xeca>
 8013fe4:	4b81      	ldr	r3, [pc, #516]	@ (80141ec <tcp_receive+0x884>)
 8013fe6:	681a      	ldr	r2, [r3, #0]
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013fec:	6879      	ldr	r1, [r7, #4]
 8013fee:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013ff0:	440b      	add	r3, r1
 8013ff2:	1ad3      	subs	r3, r2, r3
 8013ff4:	3301      	adds	r3, #1
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	f300 841b 	bgt.w	8014832 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014000:	4b7a      	ldr	r3, [pc, #488]	@ (80141ec <tcp_receive+0x884>)
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	429a      	cmp	r2, r3
 8014006:	f040 8298 	bne.w	801453a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801400a:	4b79      	ldr	r3, [pc, #484]	@ (80141f0 <tcp_receive+0x888>)
 801400c:	891c      	ldrh	r4, [r3, #8]
 801400e:	4b78      	ldr	r3, [pc, #480]	@ (80141f0 <tcp_receive+0x888>)
 8014010:	68db      	ldr	r3, [r3, #12]
 8014012:	899b      	ldrh	r3, [r3, #12]
 8014014:	b29b      	uxth	r3, r3
 8014016:	4618      	mov	r0, r3
 8014018:	f7fa ffba 	bl	800ef90 <lwip_htons>
 801401c:	4603      	mov	r3, r0
 801401e:	b2db      	uxtb	r3, r3
 8014020:	f003 0303 	and.w	r3, r3, #3
 8014024:	2b00      	cmp	r3, #0
 8014026:	d001      	beq.n	801402c <tcp_receive+0x6c4>
 8014028:	2301      	movs	r3, #1
 801402a:	e000      	b.n	801402e <tcp_receive+0x6c6>
 801402c:	2300      	movs	r3, #0
 801402e:	4423      	add	r3, r4
 8014030:	b29a      	uxth	r2, r3
 8014032:	4b70      	ldr	r3, [pc, #448]	@ (80141f4 <tcp_receive+0x88c>)
 8014034:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801403a:	4b6e      	ldr	r3, [pc, #440]	@ (80141f4 <tcp_receive+0x88c>)
 801403c:	881b      	ldrh	r3, [r3, #0]
 801403e:	429a      	cmp	r2, r3
 8014040:	d274      	bcs.n	801412c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014042:	4b6b      	ldr	r3, [pc, #428]	@ (80141f0 <tcp_receive+0x888>)
 8014044:	68db      	ldr	r3, [r3, #12]
 8014046:	899b      	ldrh	r3, [r3, #12]
 8014048:	b29b      	uxth	r3, r3
 801404a:	4618      	mov	r0, r3
 801404c:	f7fa ffa0 	bl	800ef90 <lwip_htons>
 8014050:	4603      	mov	r3, r0
 8014052:	b2db      	uxtb	r3, r3
 8014054:	f003 0301 	and.w	r3, r3, #1
 8014058:	2b00      	cmp	r3, #0
 801405a:	d01e      	beq.n	801409a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801405c:	4b64      	ldr	r3, [pc, #400]	@ (80141f0 <tcp_receive+0x888>)
 801405e:	68db      	ldr	r3, [r3, #12]
 8014060:	899b      	ldrh	r3, [r3, #12]
 8014062:	b29b      	uxth	r3, r3
 8014064:	b21b      	sxth	r3, r3
 8014066:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801406a:	b21c      	sxth	r4, r3
 801406c:	4b60      	ldr	r3, [pc, #384]	@ (80141f0 <tcp_receive+0x888>)
 801406e:	68db      	ldr	r3, [r3, #12]
 8014070:	899b      	ldrh	r3, [r3, #12]
 8014072:	b29b      	uxth	r3, r3
 8014074:	4618      	mov	r0, r3
 8014076:	f7fa ff8b 	bl	800ef90 <lwip_htons>
 801407a:	4603      	mov	r3, r0
 801407c:	b2db      	uxtb	r3, r3
 801407e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8014082:	b29b      	uxth	r3, r3
 8014084:	4618      	mov	r0, r3
 8014086:	f7fa ff83 	bl	800ef90 <lwip_htons>
 801408a:	4603      	mov	r3, r0
 801408c:	b21b      	sxth	r3, r3
 801408e:	4323      	orrs	r3, r4
 8014090:	b21a      	sxth	r2, r3
 8014092:	4b57      	ldr	r3, [pc, #348]	@ (80141f0 <tcp_receive+0x888>)
 8014094:	68db      	ldr	r3, [r3, #12]
 8014096:	b292      	uxth	r2, r2
 8014098:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801409e:	4b54      	ldr	r3, [pc, #336]	@ (80141f0 <tcp_receive+0x888>)
 80140a0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80140a2:	4b53      	ldr	r3, [pc, #332]	@ (80141f0 <tcp_receive+0x888>)
 80140a4:	68db      	ldr	r3, [r3, #12]
 80140a6:	899b      	ldrh	r3, [r3, #12]
 80140a8:	b29b      	uxth	r3, r3
 80140aa:	4618      	mov	r0, r3
 80140ac:	f7fa ff70 	bl	800ef90 <lwip_htons>
 80140b0:	4603      	mov	r3, r0
 80140b2:	b2db      	uxtb	r3, r3
 80140b4:	f003 0302 	and.w	r3, r3, #2
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d005      	beq.n	80140c8 <tcp_receive+0x760>
            inseg.len -= 1;
 80140bc:	4b4c      	ldr	r3, [pc, #304]	@ (80141f0 <tcp_receive+0x888>)
 80140be:	891b      	ldrh	r3, [r3, #8]
 80140c0:	3b01      	subs	r3, #1
 80140c2:	b29a      	uxth	r2, r3
 80140c4:	4b4a      	ldr	r3, [pc, #296]	@ (80141f0 <tcp_receive+0x888>)
 80140c6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80140c8:	4b49      	ldr	r3, [pc, #292]	@ (80141f0 <tcp_receive+0x888>)
 80140ca:	685b      	ldr	r3, [r3, #4]
 80140cc:	4a48      	ldr	r2, [pc, #288]	@ (80141f0 <tcp_receive+0x888>)
 80140ce:	8912      	ldrh	r2, [r2, #8]
 80140d0:	4611      	mov	r1, r2
 80140d2:	4618      	mov	r0, r3
 80140d4:	f7fc f9c4 	bl	8010460 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80140d8:	4b45      	ldr	r3, [pc, #276]	@ (80141f0 <tcp_receive+0x888>)
 80140da:	891c      	ldrh	r4, [r3, #8]
 80140dc:	4b44      	ldr	r3, [pc, #272]	@ (80141f0 <tcp_receive+0x888>)
 80140de:	68db      	ldr	r3, [r3, #12]
 80140e0:	899b      	ldrh	r3, [r3, #12]
 80140e2:	b29b      	uxth	r3, r3
 80140e4:	4618      	mov	r0, r3
 80140e6:	f7fa ff53 	bl	800ef90 <lwip_htons>
 80140ea:	4603      	mov	r3, r0
 80140ec:	b2db      	uxtb	r3, r3
 80140ee:	f003 0303 	and.w	r3, r3, #3
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d001      	beq.n	80140fa <tcp_receive+0x792>
 80140f6:	2301      	movs	r3, #1
 80140f8:	e000      	b.n	80140fc <tcp_receive+0x794>
 80140fa:	2300      	movs	r3, #0
 80140fc:	4423      	add	r3, r4
 80140fe:	b29a      	uxth	r2, r3
 8014100:	4b3c      	ldr	r3, [pc, #240]	@ (80141f4 <tcp_receive+0x88c>)
 8014102:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014104:	4b3b      	ldr	r3, [pc, #236]	@ (80141f4 <tcp_receive+0x88c>)
 8014106:	881b      	ldrh	r3, [r3, #0]
 8014108:	461a      	mov	r2, r3
 801410a:	4b38      	ldr	r3, [pc, #224]	@ (80141ec <tcp_receive+0x884>)
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	441a      	add	r2, r3
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014114:	6879      	ldr	r1, [r7, #4]
 8014116:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014118:	440b      	add	r3, r1
 801411a:	429a      	cmp	r2, r3
 801411c:	d006      	beq.n	801412c <tcp_receive+0x7c4>
 801411e:	4b36      	ldr	r3, [pc, #216]	@ (80141f8 <tcp_receive+0x890>)
 8014120:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8014124:	4935      	ldr	r1, [pc, #212]	@ (80141fc <tcp_receive+0x894>)
 8014126:	4836      	ldr	r0, [pc, #216]	@ (8014200 <tcp_receive+0x898>)
 8014128:	f005 ff6e 	bl	801a008 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014130:	2b00      	cmp	r3, #0
 8014132:	f000 80e6 	beq.w	8014302 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014136:	4b2e      	ldr	r3, [pc, #184]	@ (80141f0 <tcp_receive+0x888>)
 8014138:	68db      	ldr	r3, [r3, #12]
 801413a:	899b      	ldrh	r3, [r3, #12]
 801413c:	b29b      	uxth	r3, r3
 801413e:	4618      	mov	r0, r3
 8014140:	f7fa ff26 	bl	800ef90 <lwip_htons>
 8014144:	4603      	mov	r3, r0
 8014146:	b2db      	uxtb	r3, r3
 8014148:	f003 0301 	and.w	r3, r3, #1
 801414c:	2b00      	cmp	r3, #0
 801414e:	d010      	beq.n	8014172 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8014150:	e00a      	b.n	8014168 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014156:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801415c:	681a      	ldr	r2, [r3, #0]
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8014162:	68f8      	ldr	r0, [r7, #12]
 8014164:	f7fd fd93 	bl	8011c8e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801416c:	2b00      	cmp	r3, #0
 801416e:	d1f0      	bne.n	8014152 <tcp_receive+0x7ea>
 8014170:	e0c7      	b.n	8014302 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014176:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8014178:	e051      	b.n	801421e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801417a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801417c:	68db      	ldr	r3, [r3, #12]
 801417e:	899b      	ldrh	r3, [r3, #12]
 8014180:	b29b      	uxth	r3, r3
 8014182:	4618      	mov	r0, r3
 8014184:	f7fa ff04 	bl	800ef90 <lwip_htons>
 8014188:	4603      	mov	r3, r0
 801418a:	b2db      	uxtb	r3, r3
 801418c:	f003 0301 	and.w	r3, r3, #1
 8014190:	2b00      	cmp	r3, #0
 8014192:	d03c      	beq.n	801420e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8014194:	4b16      	ldr	r3, [pc, #88]	@ (80141f0 <tcp_receive+0x888>)
 8014196:	68db      	ldr	r3, [r3, #12]
 8014198:	899b      	ldrh	r3, [r3, #12]
 801419a:	b29b      	uxth	r3, r3
 801419c:	4618      	mov	r0, r3
 801419e:	f7fa fef7 	bl	800ef90 <lwip_htons>
 80141a2:	4603      	mov	r3, r0
 80141a4:	b2db      	uxtb	r3, r3
 80141a6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d12f      	bne.n	801420e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80141ae:	4b10      	ldr	r3, [pc, #64]	@ (80141f0 <tcp_receive+0x888>)
 80141b0:	68db      	ldr	r3, [r3, #12]
 80141b2:	899b      	ldrh	r3, [r3, #12]
 80141b4:	b29c      	uxth	r4, r3
 80141b6:	2001      	movs	r0, #1
 80141b8:	f7fa feea 	bl	800ef90 <lwip_htons>
 80141bc:	4603      	mov	r3, r0
 80141be:	461a      	mov	r2, r3
 80141c0:	4b0b      	ldr	r3, [pc, #44]	@ (80141f0 <tcp_receive+0x888>)
 80141c2:	68db      	ldr	r3, [r3, #12]
 80141c4:	4322      	orrs	r2, r4
 80141c6:	b292      	uxth	r2, r2
 80141c8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80141ca:	4b09      	ldr	r3, [pc, #36]	@ (80141f0 <tcp_receive+0x888>)
 80141cc:	891c      	ldrh	r4, [r3, #8]
 80141ce:	4b08      	ldr	r3, [pc, #32]	@ (80141f0 <tcp_receive+0x888>)
 80141d0:	68db      	ldr	r3, [r3, #12]
 80141d2:	899b      	ldrh	r3, [r3, #12]
 80141d4:	b29b      	uxth	r3, r3
 80141d6:	4618      	mov	r0, r3
 80141d8:	f7fa feda 	bl	800ef90 <lwip_htons>
 80141dc:	4603      	mov	r3, r0
 80141de:	b2db      	uxtb	r3, r3
 80141e0:	f003 0303 	and.w	r3, r3, #3
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d00d      	beq.n	8014204 <tcp_receive+0x89c>
 80141e8:	2301      	movs	r3, #1
 80141ea:	e00c      	b.n	8014206 <tcp_receive+0x89e>
 80141ec:	200274e4 	.word	0x200274e4
 80141f0:	200274c4 	.word	0x200274c4
 80141f4:	200274ee 	.word	0x200274ee
 80141f8:	0801c564 	.word	0x0801c564
 80141fc:	0801c90c 	.word	0x0801c90c
 8014200:	0801c5b0 	.word	0x0801c5b0
 8014204:	2300      	movs	r3, #0
 8014206:	4423      	add	r3, r4
 8014208:	b29a      	uxth	r2, r3
 801420a:	4b98      	ldr	r3, [pc, #608]	@ (801446c <tcp_receive+0xb04>)
 801420c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801420e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014210:	613b      	str	r3, [r7, #16]
              next = next->next;
 8014212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8014218:	6938      	ldr	r0, [r7, #16]
 801421a:	f7fd fd38 	bl	8011c8e <tcp_seg_free>
            while (next &&
 801421e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014220:	2b00      	cmp	r3, #0
 8014222:	d00e      	beq.n	8014242 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014224:	4b91      	ldr	r3, [pc, #580]	@ (801446c <tcp_receive+0xb04>)
 8014226:	881b      	ldrh	r3, [r3, #0]
 8014228:	461a      	mov	r2, r3
 801422a:	4b91      	ldr	r3, [pc, #580]	@ (8014470 <tcp_receive+0xb08>)
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	441a      	add	r2, r3
 8014230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014232:	68db      	ldr	r3, [r3, #12]
 8014234:	685b      	ldr	r3, [r3, #4]
 8014236:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014238:	8909      	ldrh	r1, [r1, #8]
 801423a:	440b      	add	r3, r1
 801423c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801423e:	2b00      	cmp	r3, #0
 8014240:	da9b      	bge.n	801417a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014244:	2b00      	cmp	r3, #0
 8014246:	d059      	beq.n	80142fc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8014248:	4b88      	ldr	r3, [pc, #544]	@ (801446c <tcp_receive+0xb04>)
 801424a:	881b      	ldrh	r3, [r3, #0]
 801424c:	461a      	mov	r2, r3
 801424e:	4b88      	ldr	r3, [pc, #544]	@ (8014470 <tcp_receive+0xb08>)
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	441a      	add	r2, r3
 8014254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014256:	68db      	ldr	r3, [r3, #12]
 8014258:	685b      	ldr	r3, [r3, #4]
 801425a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801425c:	2b00      	cmp	r3, #0
 801425e:	dd4d      	ble.n	80142fc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014262:	68db      	ldr	r3, [r3, #12]
 8014264:	685b      	ldr	r3, [r3, #4]
 8014266:	b29a      	uxth	r2, r3
 8014268:	4b81      	ldr	r3, [pc, #516]	@ (8014470 <tcp_receive+0xb08>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	b29b      	uxth	r3, r3
 801426e:	1ad3      	subs	r3, r2, r3
 8014270:	b29a      	uxth	r2, r3
 8014272:	4b80      	ldr	r3, [pc, #512]	@ (8014474 <tcp_receive+0xb0c>)
 8014274:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014276:	4b7f      	ldr	r3, [pc, #508]	@ (8014474 <tcp_receive+0xb0c>)
 8014278:	68db      	ldr	r3, [r3, #12]
 801427a:	899b      	ldrh	r3, [r3, #12]
 801427c:	b29b      	uxth	r3, r3
 801427e:	4618      	mov	r0, r3
 8014280:	f7fa fe86 	bl	800ef90 <lwip_htons>
 8014284:	4603      	mov	r3, r0
 8014286:	b2db      	uxtb	r3, r3
 8014288:	f003 0302 	and.w	r3, r3, #2
 801428c:	2b00      	cmp	r3, #0
 801428e:	d005      	beq.n	801429c <tcp_receive+0x934>
                inseg.len -= 1;
 8014290:	4b78      	ldr	r3, [pc, #480]	@ (8014474 <tcp_receive+0xb0c>)
 8014292:	891b      	ldrh	r3, [r3, #8]
 8014294:	3b01      	subs	r3, #1
 8014296:	b29a      	uxth	r2, r3
 8014298:	4b76      	ldr	r3, [pc, #472]	@ (8014474 <tcp_receive+0xb0c>)
 801429a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801429c:	4b75      	ldr	r3, [pc, #468]	@ (8014474 <tcp_receive+0xb0c>)
 801429e:	685b      	ldr	r3, [r3, #4]
 80142a0:	4a74      	ldr	r2, [pc, #464]	@ (8014474 <tcp_receive+0xb0c>)
 80142a2:	8912      	ldrh	r2, [r2, #8]
 80142a4:	4611      	mov	r1, r2
 80142a6:	4618      	mov	r0, r3
 80142a8:	f7fc f8da 	bl	8010460 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80142ac:	4b71      	ldr	r3, [pc, #452]	@ (8014474 <tcp_receive+0xb0c>)
 80142ae:	891c      	ldrh	r4, [r3, #8]
 80142b0:	4b70      	ldr	r3, [pc, #448]	@ (8014474 <tcp_receive+0xb0c>)
 80142b2:	68db      	ldr	r3, [r3, #12]
 80142b4:	899b      	ldrh	r3, [r3, #12]
 80142b6:	b29b      	uxth	r3, r3
 80142b8:	4618      	mov	r0, r3
 80142ba:	f7fa fe69 	bl	800ef90 <lwip_htons>
 80142be:	4603      	mov	r3, r0
 80142c0:	b2db      	uxtb	r3, r3
 80142c2:	f003 0303 	and.w	r3, r3, #3
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d001      	beq.n	80142ce <tcp_receive+0x966>
 80142ca:	2301      	movs	r3, #1
 80142cc:	e000      	b.n	80142d0 <tcp_receive+0x968>
 80142ce:	2300      	movs	r3, #0
 80142d0:	4423      	add	r3, r4
 80142d2:	b29a      	uxth	r2, r3
 80142d4:	4b65      	ldr	r3, [pc, #404]	@ (801446c <tcp_receive+0xb04>)
 80142d6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80142d8:	4b64      	ldr	r3, [pc, #400]	@ (801446c <tcp_receive+0xb04>)
 80142da:	881b      	ldrh	r3, [r3, #0]
 80142dc:	461a      	mov	r2, r3
 80142de:	4b64      	ldr	r3, [pc, #400]	@ (8014470 <tcp_receive+0xb08>)
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	441a      	add	r2, r3
 80142e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80142e6:	68db      	ldr	r3, [r3, #12]
 80142e8:	685b      	ldr	r3, [r3, #4]
 80142ea:	429a      	cmp	r2, r3
 80142ec:	d006      	beq.n	80142fc <tcp_receive+0x994>
 80142ee:	4b62      	ldr	r3, [pc, #392]	@ (8014478 <tcp_receive+0xb10>)
 80142f0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80142f4:	4961      	ldr	r1, [pc, #388]	@ (801447c <tcp_receive+0xb14>)
 80142f6:	4862      	ldr	r0, [pc, #392]	@ (8014480 <tcp_receive+0xb18>)
 80142f8:	f005 fe86 	bl	801a008 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014300:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014302:	4b5a      	ldr	r3, [pc, #360]	@ (801446c <tcp_receive+0xb04>)
 8014304:	881b      	ldrh	r3, [r3, #0]
 8014306:	461a      	mov	r2, r3
 8014308:	4b59      	ldr	r3, [pc, #356]	@ (8014470 <tcp_receive+0xb08>)
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	441a      	add	r2, r3
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014316:	4b55      	ldr	r3, [pc, #340]	@ (801446c <tcp_receive+0xb04>)
 8014318:	881b      	ldrh	r3, [r3, #0]
 801431a:	429a      	cmp	r2, r3
 801431c:	d206      	bcs.n	801432c <tcp_receive+0x9c4>
 801431e:	4b56      	ldr	r3, [pc, #344]	@ (8014478 <tcp_receive+0xb10>)
 8014320:	f240 6207 	movw	r2, #1543	@ 0x607
 8014324:	4957      	ldr	r1, [pc, #348]	@ (8014484 <tcp_receive+0xb1c>)
 8014326:	4856      	ldr	r0, [pc, #344]	@ (8014480 <tcp_receive+0xb18>)
 8014328:	f005 fe6e 	bl	801a008 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014330:	4b4e      	ldr	r3, [pc, #312]	@ (801446c <tcp_receive+0xb04>)
 8014332:	881b      	ldrh	r3, [r3, #0]
 8014334:	1ad3      	subs	r3, r2, r3
 8014336:	b29a      	uxth	r2, r3
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801433c:	6878      	ldr	r0, [r7, #4]
 801433e:	f7fc ffc5 	bl	80112cc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014342:	4b4c      	ldr	r3, [pc, #304]	@ (8014474 <tcp_receive+0xb0c>)
 8014344:	685b      	ldr	r3, [r3, #4]
 8014346:	891b      	ldrh	r3, [r3, #8]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d006      	beq.n	801435a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801434c:	4b49      	ldr	r3, [pc, #292]	@ (8014474 <tcp_receive+0xb0c>)
 801434e:	685b      	ldr	r3, [r3, #4]
 8014350:	4a4d      	ldr	r2, [pc, #308]	@ (8014488 <tcp_receive+0xb20>)
 8014352:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014354:	4b47      	ldr	r3, [pc, #284]	@ (8014474 <tcp_receive+0xb0c>)
 8014356:	2200      	movs	r2, #0
 8014358:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801435a:	4b46      	ldr	r3, [pc, #280]	@ (8014474 <tcp_receive+0xb0c>)
 801435c:	68db      	ldr	r3, [r3, #12]
 801435e:	899b      	ldrh	r3, [r3, #12]
 8014360:	b29b      	uxth	r3, r3
 8014362:	4618      	mov	r0, r3
 8014364:	f7fa fe14 	bl	800ef90 <lwip_htons>
 8014368:	4603      	mov	r3, r0
 801436a:	b2db      	uxtb	r3, r3
 801436c:	f003 0301 	and.w	r3, r3, #1
 8014370:	2b00      	cmp	r3, #0
 8014372:	f000 80b8 	beq.w	80144e6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8014376:	4b45      	ldr	r3, [pc, #276]	@ (801448c <tcp_receive+0xb24>)
 8014378:	781b      	ldrb	r3, [r3, #0]
 801437a:	f043 0320 	orr.w	r3, r3, #32
 801437e:	b2da      	uxtb	r2, r3
 8014380:	4b42      	ldr	r3, [pc, #264]	@ (801448c <tcp_receive+0xb24>)
 8014382:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014384:	e0af      	b.n	80144e6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801438a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014390:	68db      	ldr	r3, [r3, #12]
 8014392:	685b      	ldr	r3, [r3, #4]
 8014394:	4a36      	ldr	r2, [pc, #216]	@ (8014470 <tcp_receive+0xb08>)
 8014396:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014398:	68bb      	ldr	r3, [r7, #8]
 801439a:	891b      	ldrh	r3, [r3, #8]
 801439c:	461c      	mov	r4, r3
 801439e:	68bb      	ldr	r3, [r7, #8]
 80143a0:	68db      	ldr	r3, [r3, #12]
 80143a2:	899b      	ldrh	r3, [r3, #12]
 80143a4:	b29b      	uxth	r3, r3
 80143a6:	4618      	mov	r0, r3
 80143a8:	f7fa fdf2 	bl	800ef90 <lwip_htons>
 80143ac:	4603      	mov	r3, r0
 80143ae:	b2db      	uxtb	r3, r3
 80143b0:	f003 0303 	and.w	r3, r3, #3
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d001      	beq.n	80143bc <tcp_receive+0xa54>
 80143b8:	2301      	movs	r3, #1
 80143ba:	e000      	b.n	80143be <tcp_receive+0xa56>
 80143bc:	2300      	movs	r3, #0
 80143be:	191a      	adds	r2, r3, r4
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143c4:	441a      	add	r2, r3
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80143ce:	461c      	mov	r4, r3
 80143d0:	68bb      	ldr	r3, [r7, #8]
 80143d2:	891b      	ldrh	r3, [r3, #8]
 80143d4:	461d      	mov	r5, r3
 80143d6:	68bb      	ldr	r3, [r7, #8]
 80143d8:	68db      	ldr	r3, [r3, #12]
 80143da:	899b      	ldrh	r3, [r3, #12]
 80143dc:	b29b      	uxth	r3, r3
 80143de:	4618      	mov	r0, r3
 80143e0:	f7fa fdd6 	bl	800ef90 <lwip_htons>
 80143e4:	4603      	mov	r3, r0
 80143e6:	b2db      	uxtb	r3, r3
 80143e8:	f003 0303 	and.w	r3, r3, #3
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d001      	beq.n	80143f4 <tcp_receive+0xa8c>
 80143f0:	2301      	movs	r3, #1
 80143f2:	e000      	b.n	80143f6 <tcp_receive+0xa8e>
 80143f4:	2300      	movs	r3, #0
 80143f6:	442b      	add	r3, r5
 80143f8:	429c      	cmp	r4, r3
 80143fa:	d206      	bcs.n	801440a <tcp_receive+0xaa2>
 80143fc:	4b1e      	ldr	r3, [pc, #120]	@ (8014478 <tcp_receive+0xb10>)
 80143fe:	f240 622b 	movw	r2, #1579	@ 0x62b
 8014402:	4923      	ldr	r1, [pc, #140]	@ (8014490 <tcp_receive+0xb28>)
 8014404:	481e      	ldr	r0, [pc, #120]	@ (8014480 <tcp_receive+0xb18>)
 8014406:	f005 fdff 	bl	801a008 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801440a:	68bb      	ldr	r3, [r7, #8]
 801440c:	891b      	ldrh	r3, [r3, #8]
 801440e:	461c      	mov	r4, r3
 8014410:	68bb      	ldr	r3, [r7, #8]
 8014412:	68db      	ldr	r3, [r3, #12]
 8014414:	899b      	ldrh	r3, [r3, #12]
 8014416:	b29b      	uxth	r3, r3
 8014418:	4618      	mov	r0, r3
 801441a:	f7fa fdb9 	bl	800ef90 <lwip_htons>
 801441e:	4603      	mov	r3, r0
 8014420:	b2db      	uxtb	r3, r3
 8014422:	f003 0303 	and.w	r3, r3, #3
 8014426:	2b00      	cmp	r3, #0
 8014428:	d001      	beq.n	801442e <tcp_receive+0xac6>
 801442a:	2301      	movs	r3, #1
 801442c:	e000      	b.n	8014430 <tcp_receive+0xac8>
 801442e:	2300      	movs	r3, #0
 8014430:	1919      	adds	r1, r3, r4
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014436:	b28b      	uxth	r3, r1
 8014438:	1ad3      	subs	r3, r2, r3
 801443a:	b29a      	uxth	r2, r3
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014440:	6878      	ldr	r0, [r7, #4]
 8014442:	f7fc ff43 	bl	80112cc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014446:	68bb      	ldr	r3, [r7, #8]
 8014448:	685b      	ldr	r3, [r3, #4]
 801444a:	891b      	ldrh	r3, [r3, #8]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d028      	beq.n	80144a2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014450:	4b0d      	ldr	r3, [pc, #52]	@ (8014488 <tcp_receive+0xb20>)
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d01d      	beq.n	8014494 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8014458:	4b0b      	ldr	r3, [pc, #44]	@ (8014488 <tcp_receive+0xb20>)
 801445a:	681a      	ldr	r2, [r3, #0]
 801445c:	68bb      	ldr	r3, [r7, #8]
 801445e:	685b      	ldr	r3, [r3, #4]
 8014460:	4619      	mov	r1, r3
 8014462:	4610      	mov	r0, r2
 8014464:	f7fc fa50 	bl	8010908 <pbuf_cat>
 8014468:	e018      	b.n	801449c <tcp_receive+0xb34>
 801446a:	bf00      	nop
 801446c:	200274ee 	.word	0x200274ee
 8014470:	200274e4 	.word	0x200274e4
 8014474:	200274c4 	.word	0x200274c4
 8014478:	0801c564 	.word	0x0801c564
 801447c:	0801c944 	.word	0x0801c944
 8014480:	0801c5b0 	.word	0x0801c5b0
 8014484:	0801c980 	.word	0x0801c980
 8014488:	200274f4 	.word	0x200274f4
 801448c:	200274f1 	.word	0x200274f1
 8014490:	0801c9a0 	.word	0x0801c9a0
            } else {
              recv_data = cseg->p;
 8014494:	68bb      	ldr	r3, [r7, #8]
 8014496:	685b      	ldr	r3, [r3, #4]
 8014498:	4a70      	ldr	r2, [pc, #448]	@ (801465c <tcp_receive+0xcf4>)
 801449a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	2200      	movs	r2, #0
 80144a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80144a2:	68bb      	ldr	r3, [r7, #8]
 80144a4:	68db      	ldr	r3, [r3, #12]
 80144a6:	899b      	ldrh	r3, [r3, #12]
 80144a8:	b29b      	uxth	r3, r3
 80144aa:	4618      	mov	r0, r3
 80144ac:	f7fa fd70 	bl	800ef90 <lwip_htons>
 80144b0:	4603      	mov	r3, r0
 80144b2:	b2db      	uxtb	r3, r3
 80144b4:	f003 0301 	and.w	r3, r3, #1
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d00d      	beq.n	80144d8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80144bc:	4b68      	ldr	r3, [pc, #416]	@ (8014660 <tcp_receive+0xcf8>)
 80144be:	781b      	ldrb	r3, [r3, #0]
 80144c0:	f043 0320 	orr.w	r3, r3, #32
 80144c4:	b2da      	uxtb	r2, r3
 80144c6:	4b66      	ldr	r3, [pc, #408]	@ (8014660 <tcp_receive+0xcf8>)
 80144c8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	7d1b      	ldrb	r3, [r3, #20]
 80144ce:	2b04      	cmp	r3, #4
 80144d0:	d102      	bne.n	80144d8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	2207      	movs	r2, #7
 80144d6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80144d8:	68bb      	ldr	r3, [r7, #8]
 80144da:	681a      	ldr	r2, [r3, #0]
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80144e0:	68b8      	ldr	r0, [r7, #8]
 80144e2:	f7fd fbd4 	bl	8011c8e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d008      	beq.n	8014500 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80144f2:	68db      	ldr	r3, [r3, #12]
 80144f4:	685a      	ldr	r2, [r3, #4]
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80144fa:	429a      	cmp	r2, r3
 80144fc:	f43f af43 	beq.w	8014386 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	8b5b      	ldrh	r3, [r3, #26]
 8014504:	f003 0301 	and.w	r3, r3, #1
 8014508:	2b00      	cmp	r3, #0
 801450a:	d00e      	beq.n	801452a <tcp_receive+0xbc2>
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	8b5b      	ldrh	r3, [r3, #26]
 8014510:	f023 0301 	bic.w	r3, r3, #1
 8014514:	b29a      	uxth	r2, r3
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	835a      	strh	r2, [r3, #26]
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	8b5b      	ldrh	r3, [r3, #26]
 801451e:	f043 0302 	orr.w	r3, r3, #2
 8014522:	b29a      	uxth	r2, r3
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014528:	e187      	b.n	801483a <tcp_receive+0xed2>
        tcp_ack(pcb);
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	8b5b      	ldrh	r3, [r3, #26]
 801452e:	f043 0301 	orr.w	r3, r3, #1
 8014532:	b29a      	uxth	r2, r3
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014538:	e17f      	b.n	801483a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801453e:	2b00      	cmp	r3, #0
 8014540:	d106      	bne.n	8014550 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014542:	4848      	ldr	r0, [pc, #288]	@ (8014664 <tcp_receive+0xcfc>)
 8014544:	f7fd fbbc 	bl	8011cc0 <tcp_seg_copy>
 8014548:	4602      	mov	r2, r0
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	675a      	str	r2, [r3, #116]	@ 0x74
 801454e:	e16c      	b.n	801482a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014550:	2300      	movs	r3, #0
 8014552:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014558:	63bb      	str	r3, [r7, #56]	@ 0x38
 801455a:	e156      	b.n	801480a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801455c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801455e:	68db      	ldr	r3, [r3, #12]
 8014560:	685a      	ldr	r2, [r3, #4]
 8014562:	4b41      	ldr	r3, [pc, #260]	@ (8014668 <tcp_receive+0xd00>)
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	429a      	cmp	r2, r3
 8014568:	d11d      	bne.n	80145a6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801456a:	4b3e      	ldr	r3, [pc, #248]	@ (8014664 <tcp_receive+0xcfc>)
 801456c:	891a      	ldrh	r2, [r3, #8]
 801456e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014570:	891b      	ldrh	r3, [r3, #8]
 8014572:	429a      	cmp	r2, r3
 8014574:	f240 814e 	bls.w	8014814 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014578:	483a      	ldr	r0, [pc, #232]	@ (8014664 <tcp_receive+0xcfc>)
 801457a:	f7fd fba1 	bl	8011cc0 <tcp_seg_copy>
 801457e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014580:	697b      	ldr	r3, [r7, #20]
 8014582:	2b00      	cmp	r3, #0
 8014584:	f000 8148 	beq.w	8014818 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8014588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801458a:	2b00      	cmp	r3, #0
 801458c:	d003      	beq.n	8014596 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801458e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014590:	697a      	ldr	r2, [r7, #20]
 8014592:	601a      	str	r2, [r3, #0]
 8014594:	e002      	b.n	801459c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	697a      	ldr	r2, [r7, #20]
 801459a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801459c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801459e:	6978      	ldr	r0, [r7, #20]
 80145a0:	f7ff f8de 	bl	8013760 <tcp_oos_insert_segment>
                }
                break;
 80145a4:	e138      	b.n	8014818 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80145a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d117      	bne.n	80145dc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80145ac:	4b2e      	ldr	r3, [pc, #184]	@ (8014668 <tcp_receive+0xd00>)
 80145ae:	681a      	ldr	r2, [r3, #0]
 80145b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145b2:	68db      	ldr	r3, [r3, #12]
 80145b4:	685b      	ldr	r3, [r3, #4]
 80145b6:	1ad3      	subs	r3, r2, r3
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	da57      	bge.n	801466c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80145bc:	4829      	ldr	r0, [pc, #164]	@ (8014664 <tcp_receive+0xcfc>)
 80145be:	f7fd fb7f 	bl	8011cc0 <tcp_seg_copy>
 80145c2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80145c4:	69bb      	ldr	r3, [r7, #24]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	f000 8128 	beq.w	801481c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	69ba      	ldr	r2, [r7, #24]
 80145d0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80145d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80145d4:	69b8      	ldr	r0, [r7, #24]
 80145d6:	f7ff f8c3 	bl	8013760 <tcp_oos_insert_segment>
                  }
                  break;
 80145da:	e11f      	b.n	801481c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80145dc:	4b22      	ldr	r3, [pc, #136]	@ (8014668 <tcp_receive+0xd00>)
 80145de:	681a      	ldr	r2, [r3, #0]
 80145e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80145e2:	68db      	ldr	r3, [r3, #12]
 80145e4:	685b      	ldr	r3, [r3, #4]
 80145e6:	1ad3      	subs	r3, r2, r3
 80145e8:	3b01      	subs	r3, #1
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	db3e      	blt.n	801466c <tcp_receive+0xd04>
 80145ee:	4b1e      	ldr	r3, [pc, #120]	@ (8014668 <tcp_receive+0xd00>)
 80145f0:	681a      	ldr	r2, [r3, #0]
 80145f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80145f4:	68db      	ldr	r3, [r3, #12]
 80145f6:	685b      	ldr	r3, [r3, #4]
 80145f8:	1ad3      	subs	r3, r2, r3
 80145fa:	3301      	adds	r3, #1
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	dc35      	bgt.n	801466c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014600:	4818      	ldr	r0, [pc, #96]	@ (8014664 <tcp_receive+0xcfc>)
 8014602:	f7fd fb5d 	bl	8011cc0 <tcp_seg_copy>
 8014606:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014608:	69fb      	ldr	r3, [r7, #28]
 801460a:	2b00      	cmp	r3, #0
 801460c:	f000 8108 	beq.w	8014820 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014612:	68db      	ldr	r3, [r3, #12]
 8014614:	685b      	ldr	r3, [r3, #4]
 8014616:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014618:	8912      	ldrh	r2, [r2, #8]
 801461a:	441a      	add	r2, r3
 801461c:	4b12      	ldr	r3, [pc, #72]	@ (8014668 <tcp_receive+0xd00>)
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	1ad3      	subs	r3, r2, r3
 8014622:	2b00      	cmp	r3, #0
 8014624:	dd12      	ble.n	801464c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014626:	4b10      	ldr	r3, [pc, #64]	@ (8014668 <tcp_receive+0xd00>)
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	b29a      	uxth	r2, r3
 801462c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801462e:	68db      	ldr	r3, [r3, #12]
 8014630:	685b      	ldr	r3, [r3, #4]
 8014632:	b29b      	uxth	r3, r3
 8014634:	1ad3      	subs	r3, r2, r3
 8014636:	b29a      	uxth	r2, r3
 8014638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801463a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801463c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801463e:	685a      	ldr	r2, [r3, #4]
 8014640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014642:	891b      	ldrh	r3, [r3, #8]
 8014644:	4619      	mov	r1, r3
 8014646:	4610      	mov	r0, r2
 8014648:	f7fb ff0a 	bl	8010460 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801464c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801464e:	69fa      	ldr	r2, [r7, #28]
 8014650:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014652:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014654:	69f8      	ldr	r0, [r7, #28]
 8014656:	f7ff f883 	bl	8013760 <tcp_oos_insert_segment>
                  }
                  break;
 801465a:	e0e1      	b.n	8014820 <tcp_receive+0xeb8>
 801465c:	200274f4 	.word	0x200274f4
 8014660:	200274f1 	.word	0x200274f1
 8014664:	200274c4 	.word	0x200274c4
 8014668:	200274e4 	.word	0x200274e4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801466c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801466e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	2b00      	cmp	r3, #0
 8014676:	f040 80c5 	bne.w	8014804 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801467a:	4b7f      	ldr	r3, [pc, #508]	@ (8014878 <tcp_receive+0xf10>)
 801467c:	681a      	ldr	r2, [r3, #0]
 801467e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014680:	68db      	ldr	r3, [r3, #12]
 8014682:	685b      	ldr	r3, [r3, #4]
 8014684:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014686:	2b00      	cmp	r3, #0
 8014688:	f340 80bc 	ble.w	8014804 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801468c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801468e:	68db      	ldr	r3, [r3, #12]
 8014690:	899b      	ldrh	r3, [r3, #12]
 8014692:	b29b      	uxth	r3, r3
 8014694:	4618      	mov	r0, r3
 8014696:	f7fa fc7b 	bl	800ef90 <lwip_htons>
 801469a:	4603      	mov	r3, r0
 801469c:	b2db      	uxtb	r3, r3
 801469e:	f003 0301 	and.w	r3, r3, #1
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	f040 80be 	bne.w	8014824 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80146a8:	4874      	ldr	r0, [pc, #464]	@ (801487c <tcp_receive+0xf14>)
 80146aa:	f7fd fb09 	bl	8011cc0 <tcp_seg_copy>
 80146ae:	4602      	mov	r2, r0
 80146b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80146b2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80146b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	f000 80b5 	beq.w	8014828 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80146be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80146c0:	68db      	ldr	r3, [r3, #12]
 80146c2:	685b      	ldr	r3, [r3, #4]
 80146c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80146c6:	8912      	ldrh	r2, [r2, #8]
 80146c8:	441a      	add	r2, r3
 80146ca:	4b6b      	ldr	r3, [pc, #428]	@ (8014878 <tcp_receive+0xf10>)
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	1ad3      	subs	r3, r2, r3
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	dd12      	ble.n	80146fa <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80146d4:	4b68      	ldr	r3, [pc, #416]	@ (8014878 <tcp_receive+0xf10>)
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	b29a      	uxth	r2, r3
 80146da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80146dc:	68db      	ldr	r3, [r3, #12]
 80146de:	685b      	ldr	r3, [r3, #4]
 80146e0:	b29b      	uxth	r3, r3
 80146e2:	1ad3      	subs	r3, r2, r3
 80146e4:	b29a      	uxth	r2, r3
 80146e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80146e8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80146ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80146ec:	685a      	ldr	r2, [r3, #4]
 80146ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80146f0:	891b      	ldrh	r3, [r3, #8]
 80146f2:	4619      	mov	r1, r3
 80146f4:	4610      	mov	r0, r2
 80146f6:	f7fb feb3 	bl	8010460 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80146fa:	4b61      	ldr	r3, [pc, #388]	@ (8014880 <tcp_receive+0xf18>)
 80146fc:	881b      	ldrh	r3, [r3, #0]
 80146fe:	461a      	mov	r2, r3
 8014700:	4b5d      	ldr	r3, [pc, #372]	@ (8014878 <tcp_receive+0xf10>)
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	441a      	add	r2, r3
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801470a:	6879      	ldr	r1, [r7, #4]
 801470c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801470e:	440b      	add	r3, r1
 8014710:	1ad3      	subs	r3, r2, r3
 8014712:	2b00      	cmp	r3, #0
 8014714:	f340 8088 	ble.w	8014828 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	68db      	ldr	r3, [r3, #12]
 801471e:	899b      	ldrh	r3, [r3, #12]
 8014720:	b29b      	uxth	r3, r3
 8014722:	4618      	mov	r0, r3
 8014724:	f7fa fc34 	bl	800ef90 <lwip_htons>
 8014728:	4603      	mov	r3, r0
 801472a:	b2db      	uxtb	r3, r3
 801472c:	f003 0301 	and.w	r3, r3, #1
 8014730:	2b00      	cmp	r3, #0
 8014732:	d021      	beq.n	8014778 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	68db      	ldr	r3, [r3, #12]
 801473a:	899b      	ldrh	r3, [r3, #12]
 801473c:	b29b      	uxth	r3, r3
 801473e:	b21b      	sxth	r3, r3
 8014740:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8014744:	b21c      	sxth	r4, r3
 8014746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	68db      	ldr	r3, [r3, #12]
 801474c:	899b      	ldrh	r3, [r3, #12]
 801474e:	b29b      	uxth	r3, r3
 8014750:	4618      	mov	r0, r3
 8014752:	f7fa fc1d 	bl	800ef90 <lwip_htons>
 8014756:	4603      	mov	r3, r0
 8014758:	b2db      	uxtb	r3, r3
 801475a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801475e:	b29b      	uxth	r3, r3
 8014760:	4618      	mov	r0, r3
 8014762:	f7fa fc15 	bl	800ef90 <lwip_htons>
 8014766:	4603      	mov	r3, r0
 8014768:	b21b      	sxth	r3, r3
 801476a:	4323      	orrs	r3, r4
 801476c:	b21a      	sxth	r2, r3
 801476e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	68db      	ldr	r3, [r3, #12]
 8014774:	b292      	uxth	r2, r2
 8014776:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801477c:	b29a      	uxth	r2, r3
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014782:	4413      	add	r3, r2
 8014784:	b299      	uxth	r1, r3
 8014786:	4b3c      	ldr	r3, [pc, #240]	@ (8014878 <tcp_receive+0xf10>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	b29a      	uxth	r2, r3
 801478c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	1a8a      	subs	r2, r1, r2
 8014792:	b292      	uxth	r2, r2
 8014794:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	685a      	ldr	r2, [r3, #4]
 801479c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	891b      	ldrh	r3, [r3, #8]
 80147a2:	4619      	mov	r1, r3
 80147a4:	4610      	mov	r0, r2
 80147a6:	f7fb fe5b 	bl	8010460 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80147aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	891c      	ldrh	r4, [r3, #8]
 80147b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	68db      	ldr	r3, [r3, #12]
 80147b6:	899b      	ldrh	r3, [r3, #12]
 80147b8:	b29b      	uxth	r3, r3
 80147ba:	4618      	mov	r0, r3
 80147bc:	f7fa fbe8 	bl	800ef90 <lwip_htons>
 80147c0:	4603      	mov	r3, r0
 80147c2:	b2db      	uxtb	r3, r3
 80147c4:	f003 0303 	and.w	r3, r3, #3
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d001      	beq.n	80147d0 <tcp_receive+0xe68>
 80147cc:	2301      	movs	r3, #1
 80147ce:	e000      	b.n	80147d2 <tcp_receive+0xe6a>
 80147d0:	2300      	movs	r3, #0
 80147d2:	4423      	add	r3, r4
 80147d4:	b29a      	uxth	r2, r3
 80147d6:	4b2a      	ldr	r3, [pc, #168]	@ (8014880 <tcp_receive+0xf18>)
 80147d8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80147da:	4b29      	ldr	r3, [pc, #164]	@ (8014880 <tcp_receive+0xf18>)
 80147dc:	881b      	ldrh	r3, [r3, #0]
 80147de:	461a      	mov	r2, r3
 80147e0:	4b25      	ldr	r3, [pc, #148]	@ (8014878 <tcp_receive+0xf10>)
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	441a      	add	r2, r3
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147ea:	6879      	ldr	r1, [r7, #4]
 80147ec:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80147ee:	440b      	add	r3, r1
 80147f0:	429a      	cmp	r2, r3
 80147f2:	d019      	beq.n	8014828 <tcp_receive+0xec0>
 80147f4:	4b23      	ldr	r3, [pc, #140]	@ (8014884 <tcp_receive+0xf1c>)
 80147f6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80147fa:	4923      	ldr	r1, [pc, #140]	@ (8014888 <tcp_receive+0xf20>)
 80147fc:	4823      	ldr	r0, [pc, #140]	@ (801488c <tcp_receive+0xf24>)
 80147fe:	f005 fc03 	bl	801a008 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014802:	e011      	b.n	8014828 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	63bb      	str	r3, [r7, #56]	@ 0x38
 801480a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801480c:	2b00      	cmp	r3, #0
 801480e:	f47f aea5 	bne.w	801455c <tcp_receive+0xbf4>
 8014812:	e00a      	b.n	801482a <tcp_receive+0xec2>
                break;
 8014814:	bf00      	nop
 8014816:	e008      	b.n	801482a <tcp_receive+0xec2>
                break;
 8014818:	bf00      	nop
 801481a:	e006      	b.n	801482a <tcp_receive+0xec2>
                  break;
 801481c:	bf00      	nop
 801481e:	e004      	b.n	801482a <tcp_receive+0xec2>
                  break;
 8014820:	bf00      	nop
 8014822:	e002      	b.n	801482a <tcp_receive+0xec2>
                  break;
 8014824:	bf00      	nop
 8014826:	e000      	b.n	801482a <tcp_receive+0xec2>
                break;
 8014828:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801482a:	6878      	ldr	r0, [r7, #4]
 801482c:	f001 fa30 	bl	8015c90 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014830:	e003      	b.n	801483a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014832:	6878      	ldr	r0, [r7, #4]
 8014834:	f001 fa2c 	bl	8015c90 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014838:	e01a      	b.n	8014870 <tcp_receive+0xf08>
 801483a:	e019      	b.n	8014870 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801483c:	4b0e      	ldr	r3, [pc, #56]	@ (8014878 <tcp_receive+0xf10>)
 801483e:	681a      	ldr	r2, [r3, #0]
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014844:	1ad3      	subs	r3, r2, r3
 8014846:	2b00      	cmp	r3, #0
 8014848:	db0a      	blt.n	8014860 <tcp_receive+0xef8>
 801484a:	4b0b      	ldr	r3, [pc, #44]	@ (8014878 <tcp_receive+0xf10>)
 801484c:	681a      	ldr	r2, [r3, #0]
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014852:	6879      	ldr	r1, [r7, #4]
 8014854:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014856:	440b      	add	r3, r1
 8014858:	1ad3      	subs	r3, r2, r3
 801485a:	3301      	adds	r3, #1
 801485c:	2b00      	cmp	r3, #0
 801485e:	dd07      	ble.n	8014870 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	8b5b      	ldrh	r3, [r3, #26]
 8014864:	f043 0302 	orr.w	r3, r3, #2
 8014868:	b29a      	uxth	r2, r3
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801486e:	e7ff      	b.n	8014870 <tcp_receive+0xf08>
 8014870:	bf00      	nop
 8014872:	3750      	adds	r7, #80	@ 0x50
 8014874:	46bd      	mov	sp, r7
 8014876:	bdb0      	pop	{r4, r5, r7, pc}
 8014878:	200274e4 	.word	0x200274e4
 801487c:	200274c4 	.word	0x200274c4
 8014880:	200274ee 	.word	0x200274ee
 8014884:	0801c564 	.word	0x0801c564
 8014888:	0801c90c 	.word	0x0801c90c
 801488c:	0801c5b0 	.word	0x0801c5b0

08014890 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014890:	b480      	push	{r7}
 8014892:	b083      	sub	sp, #12
 8014894:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014896:	4b15      	ldr	r3, [pc, #84]	@ (80148ec <tcp_get_next_optbyte+0x5c>)
 8014898:	881b      	ldrh	r3, [r3, #0]
 801489a:	1c5a      	adds	r2, r3, #1
 801489c:	b291      	uxth	r1, r2
 801489e:	4a13      	ldr	r2, [pc, #76]	@ (80148ec <tcp_get_next_optbyte+0x5c>)
 80148a0:	8011      	strh	r1, [r2, #0]
 80148a2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80148a4:	4b12      	ldr	r3, [pc, #72]	@ (80148f0 <tcp_get_next_optbyte+0x60>)
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d004      	beq.n	80148b6 <tcp_get_next_optbyte+0x26>
 80148ac:	4b11      	ldr	r3, [pc, #68]	@ (80148f4 <tcp_get_next_optbyte+0x64>)
 80148ae:	881b      	ldrh	r3, [r3, #0]
 80148b0:	88fa      	ldrh	r2, [r7, #6]
 80148b2:	429a      	cmp	r2, r3
 80148b4:	d208      	bcs.n	80148c8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80148b6:	4b10      	ldr	r3, [pc, #64]	@ (80148f8 <tcp_get_next_optbyte+0x68>)
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	3314      	adds	r3, #20
 80148bc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80148be:	88fb      	ldrh	r3, [r7, #6]
 80148c0:	683a      	ldr	r2, [r7, #0]
 80148c2:	4413      	add	r3, r2
 80148c4:	781b      	ldrb	r3, [r3, #0]
 80148c6:	e00b      	b.n	80148e0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80148c8:	88fb      	ldrh	r3, [r7, #6]
 80148ca:	b2da      	uxtb	r2, r3
 80148cc:	4b09      	ldr	r3, [pc, #36]	@ (80148f4 <tcp_get_next_optbyte+0x64>)
 80148ce:	881b      	ldrh	r3, [r3, #0]
 80148d0:	b2db      	uxtb	r3, r3
 80148d2:	1ad3      	subs	r3, r2, r3
 80148d4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80148d6:	4b06      	ldr	r3, [pc, #24]	@ (80148f0 <tcp_get_next_optbyte+0x60>)
 80148d8:	681a      	ldr	r2, [r3, #0]
 80148da:	797b      	ldrb	r3, [r7, #5]
 80148dc:	4413      	add	r3, r2
 80148de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80148e0:	4618      	mov	r0, r3
 80148e2:	370c      	adds	r7, #12
 80148e4:	46bd      	mov	sp, r7
 80148e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ea:	4770      	bx	lr
 80148ec:	200274e0 	.word	0x200274e0
 80148f0:	200274dc 	.word	0x200274dc
 80148f4:	200274da 	.word	0x200274da
 80148f8:	200274d4 	.word	0x200274d4

080148fc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b084      	sub	sp, #16
 8014900:	af00      	add	r7, sp, #0
 8014902:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d106      	bne.n	8014918 <tcp_parseopt+0x1c>
 801490a:	4b32      	ldr	r3, [pc, #200]	@ (80149d4 <tcp_parseopt+0xd8>)
 801490c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8014910:	4931      	ldr	r1, [pc, #196]	@ (80149d8 <tcp_parseopt+0xdc>)
 8014912:	4832      	ldr	r0, [pc, #200]	@ (80149dc <tcp_parseopt+0xe0>)
 8014914:	f005 fb78 	bl	801a008 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014918:	4b31      	ldr	r3, [pc, #196]	@ (80149e0 <tcp_parseopt+0xe4>)
 801491a:	881b      	ldrh	r3, [r3, #0]
 801491c:	2b00      	cmp	r3, #0
 801491e:	d056      	beq.n	80149ce <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014920:	4b30      	ldr	r3, [pc, #192]	@ (80149e4 <tcp_parseopt+0xe8>)
 8014922:	2200      	movs	r2, #0
 8014924:	801a      	strh	r2, [r3, #0]
 8014926:	e046      	b.n	80149b6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8014928:	f7ff ffb2 	bl	8014890 <tcp_get_next_optbyte>
 801492c:	4603      	mov	r3, r0
 801492e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014930:	7bfb      	ldrb	r3, [r7, #15]
 8014932:	2b02      	cmp	r3, #2
 8014934:	d006      	beq.n	8014944 <tcp_parseopt+0x48>
 8014936:	2b02      	cmp	r3, #2
 8014938:	dc2a      	bgt.n	8014990 <tcp_parseopt+0x94>
 801493a:	2b00      	cmp	r3, #0
 801493c:	d042      	beq.n	80149c4 <tcp_parseopt+0xc8>
 801493e:	2b01      	cmp	r3, #1
 8014940:	d038      	beq.n	80149b4 <tcp_parseopt+0xb8>
 8014942:	e025      	b.n	8014990 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014944:	f7ff ffa4 	bl	8014890 <tcp_get_next_optbyte>
 8014948:	4603      	mov	r3, r0
 801494a:	2b04      	cmp	r3, #4
 801494c:	d13c      	bne.n	80149c8 <tcp_parseopt+0xcc>
 801494e:	4b25      	ldr	r3, [pc, #148]	@ (80149e4 <tcp_parseopt+0xe8>)
 8014950:	881b      	ldrh	r3, [r3, #0]
 8014952:	3301      	adds	r3, #1
 8014954:	4a22      	ldr	r2, [pc, #136]	@ (80149e0 <tcp_parseopt+0xe4>)
 8014956:	8812      	ldrh	r2, [r2, #0]
 8014958:	4293      	cmp	r3, r2
 801495a:	da35      	bge.n	80149c8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801495c:	f7ff ff98 	bl	8014890 <tcp_get_next_optbyte>
 8014960:	4603      	mov	r3, r0
 8014962:	021b      	lsls	r3, r3, #8
 8014964:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014966:	f7ff ff93 	bl	8014890 <tcp_get_next_optbyte>
 801496a:	4603      	mov	r3, r0
 801496c:	461a      	mov	r2, r3
 801496e:	89bb      	ldrh	r3, [r7, #12]
 8014970:	4313      	orrs	r3, r2
 8014972:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014974:	89bb      	ldrh	r3, [r7, #12]
 8014976:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801497a:	d804      	bhi.n	8014986 <tcp_parseopt+0x8a>
 801497c:	89bb      	ldrh	r3, [r7, #12]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d001      	beq.n	8014986 <tcp_parseopt+0x8a>
 8014982:	89ba      	ldrh	r2, [r7, #12]
 8014984:	e001      	b.n	801498a <tcp_parseopt+0x8e>
 8014986:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 801498e:	e012      	b.n	80149b6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014990:	f7ff ff7e 	bl	8014890 <tcp_get_next_optbyte>
 8014994:	4603      	mov	r3, r0
 8014996:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014998:	7afb      	ldrb	r3, [r7, #11]
 801499a:	2b01      	cmp	r3, #1
 801499c:	d916      	bls.n	80149cc <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801499e:	7afb      	ldrb	r3, [r7, #11]
 80149a0:	b29a      	uxth	r2, r3
 80149a2:	4b10      	ldr	r3, [pc, #64]	@ (80149e4 <tcp_parseopt+0xe8>)
 80149a4:	881b      	ldrh	r3, [r3, #0]
 80149a6:	4413      	add	r3, r2
 80149a8:	b29b      	uxth	r3, r3
 80149aa:	3b02      	subs	r3, #2
 80149ac:	b29a      	uxth	r2, r3
 80149ae:	4b0d      	ldr	r3, [pc, #52]	@ (80149e4 <tcp_parseopt+0xe8>)
 80149b0:	801a      	strh	r2, [r3, #0]
 80149b2:	e000      	b.n	80149b6 <tcp_parseopt+0xba>
          break;
 80149b4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80149b6:	4b0b      	ldr	r3, [pc, #44]	@ (80149e4 <tcp_parseopt+0xe8>)
 80149b8:	881a      	ldrh	r2, [r3, #0]
 80149ba:	4b09      	ldr	r3, [pc, #36]	@ (80149e0 <tcp_parseopt+0xe4>)
 80149bc:	881b      	ldrh	r3, [r3, #0]
 80149be:	429a      	cmp	r2, r3
 80149c0:	d3b2      	bcc.n	8014928 <tcp_parseopt+0x2c>
 80149c2:	e004      	b.n	80149ce <tcp_parseopt+0xd2>
          return;
 80149c4:	bf00      	nop
 80149c6:	e002      	b.n	80149ce <tcp_parseopt+0xd2>
            return;
 80149c8:	bf00      	nop
 80149ca:	e000      	b.n	80149ce <tcp_parseopt+0xd2>
            return;
 80149cc:	bf00      	nop
      }
    }
  }
}
 80149ce:	3710      	adds	r7, #16
 80149d0:	46bd      	mov	sp, r7
 80149d2:	bd80      	pop	{r7, pc}
 80149d4:	0801c564 	.word	0x0801c564
 80149d8:	0801c9c8 	.word	0x0801c9c8
 80149dc:	0801c5b0 	.word	0x0801c5b0
 80149e0:	200274d8 	.word	0x200274d8
 80149e4:	200274e0 	.word	0x200274e0

080149e8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80149e8:	b480      	push	{r7}
 80149ea:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80149ec:	4b05      	ldr	r3, [pc, #20]	@ (8014a04 <tcp_trigger_input_pcb_close+0x1c>)
 80149ee:	781b      	ldrb	r3, [r3, #0]
 80149f0:	f043 0310 	orr.w	r3, r3, #16
 80149f4:	b2da      	uxtb	r2, r3
 80149f6:	4b03      	ldr	r3, [pc, #12]	@ (8014a04 <tcp_trigger_input_pcb_close+0x1c>)
 80149f8:	701a      	strb	r2, [r3, #0]
}
 80149fa:	bf00      	nop
 80149fc:	46bd      	mov	sp, r7
 80149fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a02:	4770      	bx	lr
 8014a04:	200274f1 	.word	0x200274f1

08014a08 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b084      	sub	sp, #16
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	60f8      	str	r0, [r7, #12]
 8014a10:	60b9      	str	r1, [r7, #8]
 8014a12:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d00a      	beq.n	8014a30 <tcp_route+0x28>
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	7a1b      	ldrb	r3, [r3, #8]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d006      	beq.n	8014a30 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	7a1b      	ldrb	r3, [r3, #8]
 8014a26:	4618      	mov	r0, r3
 8014a28:	f7fb fb12 	bl	8010050 <netif_get_by_index>
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	e003      	b.n	8014a38 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014a30:	6878      	ldr	r0, [r7, #4]
 8014a32:	f003 f959 	bl	8017ce8 <ip4_route>
 8014a36:	4603      	mov	r3, r0
  }
}
 8014a38:	4618      	mov	r0, r3
 8014a3a:	3710      	adds	r7, #16
 8014a3c:	46bd      	mov	sp, r7
 8014a3e:	bd80      	pop	{r7, pc}

08014a40 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014a40:	b590      	push	{r4, r7, lr}
 8014a42:	b087      	sub	sp, #28
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	60f8      	str	r0, [r7, #12]
 8014a48:	60b9      	str	r1, [r7, #8]
 8014a4a:	603b      	str	r3, [r7, #0]
 8014a4c:	4613      	mov	r3, r2
 8014a4e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d105      	bne.n	8014a62 <tcp_create_segment+0x22>
 8014a56:	4b43      	ldr	r3, [pc, #268]	@ (8014b64 <tcp_create_segment+0x124>)
 8014a58:	22a3      	movs	r2, #163	@ 0xa3
 8014a5a:	4943      	ldr	r1, [pc, #268]	@ (8014b68 <tcp_create_segment+0x128>)
 8014a5c:	4843      	ldr	r0, [pc, #268]	@ (8014b6c <tcp_create_segment+0x12c>)
 8014a5e:	f005 fad3 	bl	801a008 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8014a62:	68bb      	ldr	r3, [r7, #8]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d105      	bne.n	8014a74 <tcp_create_segment+0x34>
 8014a68:	4b3e      	ldr	r3, [pc, #248]	@ (8014b64 <tcp_create_segment+0x124>)
 8014a6a:	22a4      	movs	r2, #164	@ 0xa4
 8014a6c:	4940      	ldr	r1, [pc, #256]	@ (8014b70 <tcp_create_segment+0x130>)
 8014a6e:	483f      	ldr	r0, [pc, #252]	@ (8014b6c <tcp_create_segment+0x12c>)
 8014a70:	f005 faca 	bl	801a008 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014a74:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014a78:	009b      	lsls	r3, r3, #2
 8014a7a:	b2db      	uxtb	r3, r3
 8014a7c:	f003 0304 	and.w	r3, r3, #4
 8014a80:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014a82:	2003      	movs	r0, #3
 8014a84:	f7fa ff58 	bl	800f938 <memp_malloc>
 8014a88:	6138      	str	r0, [r7, #16]
 8014a8a:	693b      	ldr	r3, [r7, #16]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d104      	bne.n	8014a9a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014a90:	68b8      	ldr	r0, [r7, #8]
 8014a92:	f7fb fe6b 	bl	801076c <pbuf_free>
    return NULL;
 8014a96:	2300      	movs	r3, #0
 8014a98:	e060      	b.n	8014b5c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8014a9a:	693b      	ldr	r3, [r7, #16]
 8014a9c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8014aa0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014aa2:	693b      	ldr	r3, [r7, #16]
 8014aa4:	2200      	movs	r2, #0
 8014aa6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014aa8:	693b      	ldr	r3, [r7, #16]
 8014aaa:	68ba      	ldr	r2, [r7, #8]
 8014aac:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014aae:	68bb      	ldr	r3, [r7, #8]
 8014ab0:	891a      	ldrh	r2, [r3, #8]
 8014ab2:	7dfb      	ldrb	r3, [r7, #23]
 8014ab4:	b29b      	uxth	r3, r3
 8014ab6:	429a      	cmp	r2, r3
 8014ab8:	d205      	bcs.n	8014ac6 <tcp_create_segment+0x86>
 8014aba:	4b2a      	ldr	r3, [pc, #168]	@ (8014b64 <tcp_create_segment+0x124>)
 8014abc:	22b0      	movs	r2, #176	@ 0xb0
 8014abe:	492d      	ldr	r1, [pc, #180]	@ (8014b74 <tcp_create_segment+0x134>)
 8014ac0:	482a      	ldr	r0, [pc, #168]	@ (8014b6c <tcp_create_segment+0x12c>)
 8014ac2:	f005 faa1 	bl	801a008 <iprintf>
  seg->len = p->tot_len - optlen;
 8014ac6:	68bb      	ldr	r3, [r7, #8]
 8014ac8:	891a      	ldrh	r2, [r3, #8]
 8014aca:	7dfb      	ldrb	r3, [r7, #23]
 8014acc:	b29b      	uxth	r3, r3
 8014ace:	1ad3      	subs	r3, r2, r3
 8014ad0:	b29a      	uxth	r2, r3
 8014ad2:	693b      	ldr	r3, [r7, #16]
 8014ad4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014ad6:	2114      	movs	r1, #20
 8014ad8:	68b8      	ldr	r0, [r7, #8]
 8014ada:	f7fb fdb1 	bl	8010640 <pbuf_add_header>
 8014ade:	4603      	mov	r3, r0
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d004      	beq.n	8014aee <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014ae4:	6938      	ldr	r0, [r7, #16]
 8014ae6:	f7fd f8d2 	bl	8011c8e <tcp_seg_free>
    return NULL;
 8014aea:	2300      	movs	r3, #0
 8014aec:	e036      	b.n	8014b5c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014aee:	693b      	ldr	r3, [r7, #16]
 8014af0:	685b      	ldr	r3, [r3, #4]
 8014af2:	685a      	ldr	r2, [r3, #4]
 8014af4:	693b      	ldr	r3, [r7, #16]
 8014af6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	8ada      	ldrh	r2, [r3, #22]
 8014afc:	693b      	ldr	r3, [r7, #16]
 8014afe:	68dc      	ldr	r4, [r3, #12]
 8014b00:	4610      	mov	r0, r2
 8014b02:	f7fa fa45 	bl	800ef90 <lwip_htons>
 8014b06:	4603      	mov	r3, r0
 8014b08:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	8b1a      	ldrh	r2, [r3, #24]
 8014b0e:	693b      	ldr	r3, [r7, #16]
 8014b10:	68dc      	ldr	r4, [r3, #12]
 8014b12:	4610      	mov	r0, r2
 8014b14:	f7fa fa3c 	bl	800ef90 <lwip_htons>
 8014b18:	4603      	mov	r3, r0
 8014b1a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014b1c:	693b      	ldr	r3, [r7, #16]
 8014b1e:	68dc      	ldr	r4, [r3, #12]
 8014b20:	6838      	ldr	r0, [r7, #0]
 8014b22:	f7fa fa4b 	bl	800efbc <lwip_htonl>
 8014b26:	4603      	mov	r3, r0
 8014b28:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014b2a:	7dfb      	ldrb	r3, [r7, #23]
 8014b2c:	089b      	lsrs	r3, r3, #2
 8014b2e:	b2db      	uxtb	r3, r3
 8014b30:	3305      	adds	r3, #5
 8014b32:	b29b      	uxth	r3, r3
 8014b34:	031b      	lsls	r3, r3, #12
 8014b36:	b29a      	uxth	r2, r3
 8014b38:	79fb      	ldrb	r3, [r7, #7]
 8014b3a:	b29b      	uxth	r3, r3
 8014b3c:	4313      	orrs	r3, r2
 8014b3e:	b29a      	uxth	r2, r3
 8014b40:	693b      	ldr	r3, [r7, #16]
 8014b42:	68dc      	ldr	r4, [r3, #12]
 8014b44:	4610      	mov	r0, r2
 8014b46:	f7fa fa23 	bl	800ef90 <lwip_htons>
 8014b4a:	4603      	mov	r3, r0
 8014b4c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014b4e:	693b      	ldr	r3, [r7, #16]
 8014b50:	68db      	ldr	r3, [r3, #12]
 8014b52:	2200      	movs	r2, #0
 8014b54:	749a      	strb	r2, [r3, #18]
 8014b56:	2200      	movs	r2, #0
 8014b58:	74da      	strb	r2, [r3, #19]
  return seg;
 8014b5a:	693b      	ldr	r3, [r7, #16]
}
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	371c      	adds	r7, #28
 8014b60:	46bd      	mov	sp, r7
 8014b62:	bd90      	pop	{r4, r7, pc}
 8014b64:	0801c9e4 	.word	0x0801c9e4
 8014b68:	0801ca18 	.word	0x0801ca18
 8014b6c:	0801ca38 	.word	0x0801ca38
 8014b70:	0801ca60 	.word	0x0801ca60
 8014b74:	0801ca84 	.word	0x0801ca84

08014b78 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014b78:	b590      	push	{r4, r7, lr}
 8014b7a:	b08b      	sub	sp, #44	@ 0x2c
 8014b7c:	af02      	add	r7, sp, #8
 8014b7e:	6078      	str	r0, [r7, #4]
 8014b80:	460b      	mov	r3, r1
 8014b82:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8014b84:	2300      	movs	r3, #0
 8014b86:	61fb      	str	r3, [r7, #28]
 8014b88:	2300      	movs	r3, #0
 8014b8a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d106      	bne.n	8014ba4 <tcp_split_unsent_seg+0x2c>
 8014b96:	4b95      	ldr	r3, [pc, #596]	@ (8014dec <tcp_split_unsent_seg+0x274>)
 8014b98:	f240 324b 	movw	r2, #843	@ 0x34b
 8014b9c:	4994      	ldr	r1, [pc, #592]	@ (8014df0 <tcp_split_unsent_seg+0x278>)
 8014b9e:	4895      	ldr	r0, [pc, #596]	@ (8014df4 <tcp_split_unsent_seg+0x27c>)
 8014ba0:	f005 fa32 	bl	801a008 <iprintf>

  useg = pcb->unsent;
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014ba8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8014baa:	697b      	ldr	r3, [r7, #20]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d102      	bne.n	8014bb6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8014bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8014bb4:	e116      	b.n	8014de4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8014bb6:	887b      	ldrh	r3, [r7, #2]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d109      	bne.n	8014bd0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8014bbc:	4b8b      	ldr	r3, [pc, #556]	@ (8014dec <tcp_split_unsent_seg+0x274>)
 8014bbe:	f240 3253 	movw	r2, #851	@ 0x353
 8014bc2:	498d      	ldr	r1, [pc, #564]	@ (8014df8 <tcp_split_unsent_seg+0x280>)
 8014bc4:	488b      	ldr	r0, [pc, #556]	@ (8014df4 <tcp_split_unsent_seg+0x27c>)
 8014bc6:	f005 fa1f 	bl	801a008 <iprintf>
    return ERR_VAL;
 8014bca:	f06f 0305 	mvn.w	r3, #5
 8014bce:	e109      	b.n	8014de4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8014bd0:	697b      	ldr	r3, [r7, #20]
 8014bd2:	891b      	ldrh	r3, [r3, #8]
 8014bd4:	887a      	ldrh	r2, [r7, #2]
 8014bd6:	429a      	cmp	r2, r3
 8014bd8:	d301      	bcc.n	8014bde <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8014bda:	2300      	movs	r3, #0
 8014bdc:	e102      	b.n	8014de4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014be2:	887a      	ldrh	r2, [r7, #2]
 8014be4:	429a      	cmp	r2, r3
 8014be6:	d906      	bls.n	8014bf6 <tcp_split_unsent_seg+0x7e>
 8014be8:	4b80      	ldr	r3, [pc, #512]	@ (8014dec <tcp_split_unsent_seg+0x274>)
 8014bea:	f240 325b 	movw	r2, #859	@ 0x35b
 8014bee:	4983      	ldr	r1, [pc, #524]	@ (8014dfc <tcp_split_unsent_seg+0x284>)
 8014bf0:	4880      	ldr	r0, [pc, #512]	@ (8014df4 <tcp_split_unsent_seg+0x27c>)
 8014bf2:	f005 fa09 	bl	801a008 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8014bf6:	697b      	ldr	r3, [r7, #20]
 8014bf8:	891b      	ldrh	r3, [r3, #8]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d106      	bne.n	8014c0c <tcp_split_unsent_seg+0x94>
 8014bfe:	4b7b      	ldr	r3, [pc, #492]	@ (8014dec <tcp_split_unsent_seg+0x274>)
 8014c00:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8014c04:	497e      	ldr	r1, [pc, #504]	@ (8014e00 <tcp_split_unsent_seg+0x288>)
 8014c06:	487b      	ldr	r0, [pc, #492]	@ (8014df4 <tcp_split_unsent_seg+0x27c>)
 8014c08:	f005 f9fe 	bl	801a008 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014c0c:	697b      	ldr	r3, [r7, #20]
 8014c0e:	7a9b      	ldrb	r3, [r3, #10]
 8014c10:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014c12:	7bfb      	ldrb	r3, [r7, #15]
 8014c14:	009b      	lsls	r3, r3, #2
 8014c16:	b2db      	uxtb	r3, r3
 8014c18:	f003 0304 	and.w	r3, r3, #4
 8014c1c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014c1e:	697b      	ldr	r3, [r7, #20]
 8014c20:	891a      	ldrh	r2, [r3, #8]
 8014c22:	887b      	ldrh	r3, [r7, #2]
 8014c24:	1ad3      	subs	r3, r2, r3
 8014c26:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014c28:	7bbb      	ldrb	r3, [r7, #14]
 8014c2a:	b29a      	uxth	r2, r3
 8014c2c:	89bb      	ldrh	r3, [r7, #12]
 8014c2e:	4413      	add	r3, r2
 8014c30:	b29b      	uxth	r3, r3
 8014c32:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014c36:	4619      	mov	r1, r3
 8014c38:	2036      	movs	r0, #54	@ 0x36
 8014c3a:	f7fb fab3 	bl	80101a4 <pbuf_alloc>
 8014c3e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014c40:	693b      	ldr	r3, [r7, #16]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	f000 80b7 	beq.w	8014db6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014c48:	697b      	ldr	r3, [r7, #20]
 8014c4a:	685b      	ldr	r3, [r3, #4]
 8014c4c:	891a      	ldrh	r2, [r3, #8]
 8014c4e:	697b      	ldr	r3, [r7, #20]
 8014c50:	891b      	ldrh	r3, [r3, #8]
 8014c52:	1ad3      	subs	r3, r2, r3
 8014c54:	b29a      	uxth	r2, r3
 8014c56:	887b      	ldrh	r3, [r7, #2]
 8014c58:	4413      	add	r3, r2
 8014c5a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014c5c:	697b      	ldr	r3, [r7, #20]
 8014c5e:	6858      	ldr	r0, [r3, #4]
 8014c60:	693b      	ldr	r3, [r7, #16]
 8014c62:	685a      	ldr	r2, [r3, #4]
 8014c64:	7bbb      	ldrb	r3, [r7, #14]
 8014c66:	18d1      	adds	r1, r2, r3
 8014c68:	897b      	ldrh	r3, [r7, #10]
 8014c6a:	89ba      	ldrh	r2, [r7, #12]
 8014c6c:	f7fb ff84 	bl	8010b78 <pbuf_copy_partial>
 8014c70:	4603      	mov	r3, r0
 8014c72:	461a      	mov	r2, r3
 8014c74:	89bb      	ldrh	r3, [r7, #12]
 8014c76:	4293      	cmp	r3, r2
 8014c78:	f040 809f 	bne.w	8014dba <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014c7c:	697b      	ldr	r3, [r7, #20]
 8014c7e:	68db      	ldr	r3, [r3, #12]
 8014c80:	899b      	ldrh	r3, [r3, #12]
 8014c82:	b29b      	uxth	r3, r3
 8014c84:	4618      	mov	r0, r3
 8014c86:	f7fa f983 	bl	800ef90 <lwip_htons>
 8014c8a:	4603      	mov	r3, r0
 8014c8c:	b2db      	uxtb	r3, r3
 8014c8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014c92:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014c94:	2300      	movs	r3, #0
 8014c96:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014c98:	7efb      	ldrb	r3, [r7, #27]
 8014c9a:	f003 0308 	and.w	r3, r3, #8
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d007      	beq.n	8014cb2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014ca2:	7efb      	ldrb	r3, [r7, #27]
 8014ca4:	f023 0308 	bic.w	r3, r3, #8
 8014ca8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014caa:	7ebb      	ldrb	r3, [r7, #26]
 8014cac:	f043 0308 	orr.w	r3, r3, #8
 8014cb0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8014cb2:	7efb      	ldrb	r3, [r7, #27]
 8014cb4:	f003 0301 	and.w	r3, r3, #1
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d007      	beq.n	8014ccc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014cbc:	7efb      	ldrb	r3, [r7, #27]
 8014cbe:	f023 0301 	bic.w	r3, r3, #1
 8014cc2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014cc4:	7ebb      	ldrb	r3, [r7, #26]
 8014cc6:	f043 0301 	orr.w	r3, r3, #1
 8014cca:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014ccc:	697b      	ldr	r3, [r7, #20]
 8014cce:	68db      	ldr	r3, [r3, #12]
 8014cd0:	685b      	ldr	r3, [r3, #4]
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	f7fa f972 	bl	800efbc <lwip_htonl>
 8014cd8:	4602      	mov	r2, r0
 8014cda:	887b      	ldrh	r3, [r7, #2]
 8014cdc:	18d1      	adds	r1, r2, r3
 8014cde:	7eba      	ldrb	r2, [r7, #26]
 8014ce0:	7bfb      	ldrb	r3, [r7, #15]
 8014ce2:	9300      	str	r3, [sp, #0]
 8014ce4:	460b      	mov	r3, r1
 8014ce6:	6939      	ldr	r1, [r7, #16]
 8014ce8:	6878      	ldr	r0, [r7, #4]
 8014cea:	f7ff fea9 	bl	8014a40 <tcp_create_segment>
 8014cee:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014cf0:	69fb      	ldr	r3, [r7, #28]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d063      	beq.n	8014dbe <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8014cf6:	697b      	ldr	r3, [r7, #20]
 8014cf8:	685b      	ldr	r3, [r3, #4]
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	f7fb fdc4 	bl	8010888 <pbuf_clen>
 8014d00:	4603      	mov	r3, r0
 8014d02:	461a      	mov	r2, r3
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014d0a:	1a9b      	subs	r3, r3, r2
 8014d0c:	b29a      	uxth	r2, r3
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014d14:	697b      	ldr	r3, [r7, #20]
 8014d16:	6858      	ldr	r0, [r3, #4]
 8014d18:	697b      	ldr	r3, [r7, #20]
 8014d1a:	685b      	ldr	r3, [r3, #4]
 8014d1c:	891a      	ldrh	r2, [r3, #8]
 8014d1e:	89bb      	ldrh	r3, [r7, #12]
 8014d20:	1ad3      	subs	r3, r2, r3
 8014d22:	b29b      	uxth	r3, r3
 8014d24:	4619      	mov	r1, r3
 8014d26:	f7fb fb9b 	bl	8010460 <pbuf_realloc>
  useg->len -= remainder;
 8014d2a:	697b      	ldr	r3, [r7, #20]
 8014d2c:	891a      	ldrh	r2, [r3, #8]
 8014d2e:	89bb      	ldrh	r3, [r7, #12]
 8014d30:	1ad3      	subs	r3, r2, r3
 8014d32:	b29a      	uxth	r2, r3
 8014d34:	697b      	ldr	r3, [r7, #20]
 8014d36:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014d38:	697b      	ldr	r3, [r7, #20]
 8014d3a:	68db      	ldr	r3, [r3, #12]
 8014d3c:	899b      	ldrh	r3, [r3, #12]
 8014d3e:	b29c      	uxth	r4, r3
 8014d40:	7efb      	ldrb	r3, [r7, #27]
 8014d42:	b29b      	uxth	r3, r3
 8014d44:	4618      	mov	r0, r3
 8014d46:	f7fa f923 	bl	800ef90 <lwip_htons>
 8014d4a:	4603      	mov	r3, r0
 8014d4c:	461a      	mov	r2, r3
 8014d4e:	697b      	ldr	r3, [r7, #20]
 8014d50:	68db      	ldr	r3, [r3, #12]
 8014d52:	4322      	orrs	r2, r4
 8014d54:	b292      	uxth	r2, r2
 8014d56:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014d58:	697b      	ldr	r3, [r7, #20]
 8014d5a:	685b      	ldr	r3, [r3, #4]
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	f7fb fd93 	bl	8010888 <pbuf_clen>
 8014d62:	4603      	mov	r3, r0
 8014d64:	461a      	mov	r2, r3
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014d6c:	4413      	add	r3, r2
 8014d6e:	b29a      	uxth	r2, r3
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014d76:	69fb      	ldr	r3, [r7, #28]
 8014d78:	685b      	ldr	r3, [r3, #4]
 8014d7a:	4618      	mov	r0, r3
 8014d7c:	f7fb fd84 	bl	8010888 <pbuf_clen>
 8014d80:	4603      	mov	r3, r0
 8014d82:	461a      	mov	r2, r3
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014d8a:	4413      	add	r3, r2
 8014d8c:	b29a      	uxth	r2, r3
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014d94:	697b      	ldr	r3, [r7, #20]
 8014d96:	681a      	ldr	r2, [r3, #0]
 8014d98:	69fb      	ldr	r3, [r7, #28]
 8014d9a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014d9c:	697b      	ldr	r3, [r7, #20]
 8014d9e:	69fa      	ldr	r2, [r7, #28]
 8014da0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014da2:	69fb      	ldr	r3, [r7, #28]
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d103      	bne.n	8014db2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	2200      	movs	r2, #0
 8014dae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8014db2:	2300      	movs	r3, #0
 8014db4:	e016      	b.n	8014de4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8014db6:	bf00      	nop
 8014db8:	e002      	b.n	8014dc0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014dba:	bf00      	nop
 8014dbc:	e000      	b.n	8014dc0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014dbe:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014dc0:	69fb      	ldr	r3, [r7, #28]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d006      	beq.n	8014dd4 <tcp_split_unsent_seg+0x25c>
 8014dc6:	4b09      	ldr	r3, [pc, #36]	@ (8014dec <tcp_split_unsent_seg+0x274>)
 8014dc8:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8014dcc:	490d      	ldr	r1, [pc, #52]	@ (8014e04 <tcp_split_unsent_seg+0x28c>)
 8014dce:	4809      	ldr	r0, [pc, #36]	@ (8014df4 <tcp_split_unsent_seg+0x27c>)
 8014dd0:	f005 f91a 	bl	801a008 <iprintf>
  if (p != NULL) {
 8014dd4:	693b      	ldr	r3, [r7, #16]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d002      	beq.n	8014de0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8014dda:	6938      	ldr	r0, [r7, #16]
 8014ddc:	f7fb fcc6 	bl	801076c <pbuf_free>
  }

  return ERR_MEM;
 8014de0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014de4:	4618      	mov	r0, r3
 8014de6:	3724      	adds	r7, #36	@ 0x24
 8014de8:	46bd      	mov	sp, r7
 8014dea:	bd90      	pop	{r4, r7, pc}
 8014dec:	0801c9e4 	.word	0x0801c9e4
 8014df0:	0801cd78 	.word	0x0801cd78
 8014df4:	0801ca38 	.word	0x0801ca38
 8014df8:	0801cd9c 	.word	0x0801cd9c
 8014dfc:	0801cdc0 	.word	0x0801cdc0
 8014e00:	0801cdd0 	.word	0x0801cdd0
 8014e04:	0801cde0 	.word	0x0801cde0

08014e08 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014e08:	b590      	push	{r4, r7, lr}
 8014e0a:	b085      	sub	sp, #20
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d106      	bne.n	8014e24 <tcp_send_fin+0x1c>
 8014e16:	4b21      	ldr	r3, [pc, #132]	@ (8014e9c <tcp_send_fin+0x94>)
 8014e18:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8014e1c:	4920      	ldr	r1, [pc, #128]	@ (8014ea0 <tcp_send_fin+0x98>)
 8014e1e:	4821      	ldr	r0, [pc, #132]	@ (8014ea4 <tcp_send_fin+0x9c>)
 8014e20:	f005 f8f2 	bl	801a008 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d02e      	beq.n	8014e8a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014e30:	60fb      	str	r3, [r7, #12]
 8014e32:	e002      	b.n	8014e3a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014e3a:	68fb      	ldr	r3, [r7, #12]
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d1f8      	bne.n	8014e34 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	68db      	ldr	r3, [r3, #12]
 8014e46:	899b      	ldrh	r3, [r3, #12]
 8014e48:	b29b      	uxth	r3, r3
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	f7fa f8a0 	bl	800ef90 <lwip_htons>
 8014e50:	4603      	mov	r3, r0
 8014e52:	b2db      	uxtb	r3, r3
 8014e54:	f003 0307 	and.w	r3, r3, #7
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d116      	bne.n	8014e8a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	68db      	ldr	r3, [r3, #12]
 8014e60:	899b      	ldrh	r3, [r3, #12]
 8014e62:	b29c      	uxth	r4, r3
 8014e64:	2001      	movs	r0, #1
 8014e66:	f7fa f893 	bl	800ef90 <lwip_htons>
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	461a      	mov	r2, r3
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	68db      	ldr	r3, [r3, #12]
 8014e72:	4322      	orrs	r2, r4
 8014e74:	b292      	uxth	r2, r2
 8014e76:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	8b5b      	ldrh	r3, [r3, #26]
 8014e7c:	f043 0320 	orr.w	r3, r3, #32
 8014e80:	b29a      	uxth	r2, r3
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8014e86:	2300      	movs	r3, #0
 8014e88:	e004      	b.n	8014e94 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014e8a:	2101      	movs	r1, #1
 8014e8c:	6878      	ldr	r0, [r7, #4]
 8014e8e:	f000 f80b 	bl	8014ea8 <tcp_enqueue_flags>
 8014e92:	4603      	mov	r3, r0
}
 8014e94:	4618      	mov	r0, r3
 8014e96:	3714      	adds	r7, #20
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	bd90      	pop	{r4, r7, pc}
 8014e9c:	0801c9e4 	.word	0x0801c9e4
 8014ea0:	0801cdec 	.word	0x0801cdec
 8014ea4:	0801ca38 	.word	0x0801ca38

08014ea8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b08a      	sub	sp, #40	@ 0x28
 8014eac:	af02      	add	r7, sp, #8
 8014eae:	6078      	str	r0, [r7, #4]
 8014eb0:	460b      	mov	r3, r1
 8014eb2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014eb8:	2300      	movs	r3, #0
 8014eba:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014ebc:	78fb      	ldrb	r3, [r7, #3]
 8014ebe:	f003 0303 	and.w	r3, r3, #3
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d106      	bne.n	8014ed4 <tcp_enqueue_flags+0x2c>
 8014ec6:	4b67      	ldr	r3, [pc, #412]	@ (8015064 <tcp_enqueue_flags+0x1bc>)
 8014ec8:	f240 4211 	movw	r2, #1041	@ 0x411
 8014ecc:	4966      	ldr	r1, [pc, #408]	@ (8015068 <tcp_enqueue_flags+0x1c0>)
 8014ece:	4867      	ldr	r0, [pc, #412]	@ (801506c <tcp_enqueue_flags+0x1c4>)
 8014ed0:	f005 f89a 	bl	801a008 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d106      	bne.n	8014ee8 <tcp_enqueue_flags+0x40>
 8014eda:	4b62      	ldr	r3, [pc, #392]	@ (8015064 <tcp_enqueue_flags+0x1bc>)
 8014edc:	f240 4213 	movw	r2, #1043	@ 0x413
 8014ee0:	4963      	ldr	r1, [pc, #396]	@ (8015070 <tcp_enqueue_flags+0x1c8>)
 8014ee2:	4862      	ldr	r0, [pc, #392]	@ (801506c <tcp_enqueue_flags+0x1c4>)
 8014ee4:	f005 f890 	bl	801a008 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014ee8:	78fb      	ldrb	r3, [r7, #3]
 8014eea:	f003 0302 	and.w	r3, r3, #2
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d001      	beq.n	8014ef6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8014ef2:	2301      	movs	r3, #1
 8014ef4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014ef6:	7ffb      	ldrb	r3, [r7, #31]
 8014ef8:	009b      	lsls	r3, r3, #2
 8014efa:	b2db      	uxtb	r3, r3
 8014efc:	f003 0304 	and.w	r3, r3, #4
 8014f00:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8014f02:	7dfb      	ldrb	r3, [r7, #23]
 8014f04:	b29b      	uxth	r3, r3
 8014f06:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014f0a:	4619      	mov	r1, r3
 8014f0c:	2036      	movs	r0, #54	@ 0x36
 8014f0e:	f7fb f949 	bl	80101a4 <pbuf_alloc>
 8014f12:	6138      	str	r0, [r7, #16]
 8014f14:	693b      	ldr	r3, [r7, #16]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d109      	bne.n	8014f2e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	8b5b      	ldrh	r3, [r3, #26]
 8014f1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014f22:	b29a      	uxth	r2, r3
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014f28:	f04f 33ff 	mov.w	r3, #4294967295
 8014f2c:	e095      	b.n	801505a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014f2e:	693b      	ldr	r3, [r7, #16]
 8014f30:	895a      	ldrh	r2, [r3, #10]
 8014f32:	7dfb      	ldrb	r3, [r7, #23]
 8014f34:	b29b      	uxth	r3, r3
 8014f36:	429a      	cmp	r2, r3
 8014f38:	d206      	bcs.n	8014f48 <tcp_enqueue_flags+0xa0>
 8014f3a:	4b4a      	ldr	r3, [pc, #296]	@ (8015064 <tcp_enqueue_flags+0x1bc>)
 8014f3c:	f240 4239 	movw	r2, #1081	@ 0x439
 8014f40:	494c      	ldr	r1, [pc, #304]	@ (8015074 <tcp_enqueue_flags+0x1cc>)
 8014f42:	484a      	ldr	r0, [pc, #296]	@ (801506c <tcp_enqueue_flags+0x1c4>)
 8014f44:	f005 f860 	bl	801a008 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8014f4c:	78fa      	ldrb	r2, [r7, #3]
 8014f4e:	7ffb      	ldrb	r3, [r7, #31]
 8014f50:	9300      	str	r3, [sp, #0]
 8014f52:	460b      	mov	r3, r1
 8014f54:	6939      	ldr	r1, [r7, #16]
 8014f56:	6878      	ldr	r0, [r7, #4]
 8014f58:	f7ff fd72 	bl	8014a40 <tcp_create_segment>
 8014f5c:	60f8      	str	r0, [r7, #12]
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d109      	bne.n	8014f78 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	8b5b      	ldrh	r3, [r3, #26]
 8014f68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014f6c:	b29a      	uxth	r2, r3
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014f72:	f04f 33ff 	mov.w	r3, #4294967295
 8014f76:	e070      	b.n	801505a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	68db      	ldr	r3, [r3, #12]
 8014f7c:	f003 0303 	and.w	r3, r3, #3
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d006      	beq.n	8014f92 <tcp_enqueue_flags+0xea>
 8014f84:	4b37      	ldr	r3, [pc, #220]	@ (8015064 <tcp_enqueue_flags+0x1bc>)
 8014f86:	f240 4242 	movw	r2, #1090	@ 0x442
 8014f8a:	493b      	ldr	r1, [pc, #236]	@ (8015078 <tcp_enqueue_flags+0x1d0>)
 8014f8c:	4837      	ldr	r0, [pc, #220]	@ (801506c <tcp_enqueue_flags+0x1c4>)
 8014f8e:	f005 f83b 	bl	801a008 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	891b      	ldrh	r3, [r3, #8]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d006      	beq.n	8014fa8 <tcp_enqueue_flags+0x100>
 8014f9a:	4b32      	ldr	r3, [pc, #200]	@ (8015064 <tcp_enqueue_flags+0x1bc>)
 8014f9c:	f240 4243 	movw	r2, #1091	@ 0x443
 8014fa0:	4936      	ldr	r1, [pc, #216]	@ (801507c <tcp_enqueue_flags+0x1d4>)
 8014fa2:	4832      	ldr	r0, [pc, #200]	@ (801506c <tcp_enqueue_flags+0x1c4>)
 8014fa4:	f005 f830 	bl	801a008 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d103      	bne.n	8014fb8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	68fa      	ldr	r2, [r7, #12]
 8014fb4:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014fb6:	e00d      	b.n	8014fd4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014fbc:	61bb      	str	r3, [r7, #24]
 8014fbe:	e002      	b.n	8014fc6 <tcp_enqueue_flags+0x11e>
 8014fc0:	69bb      	ldr	r3, [r7, #24]
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	61bb      	str	r3, [r7, #24]
 8014fc6:	69bb      	ldr	r3, [r7, #24]
 8014fc8:	681b      	ldr	r3, [r3, #0]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d1f8      	bne.n	8014fc0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014fce:	69bb      	ldr	r3, [r7, #24]
 8014fd0:	68fa      	ldr	r2, [r7, #12]
 8014fd2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014fdc:	78fb      	ldrb	r3, [r7, #3]
 8014fde:	f003 0302 	and.w	r3, r3, #2
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d104      	bne.n	8014ff0 <tcp_enqueue_flags+0x148>
 8014fe6:	78fb      	ldrb	r3, [r7, #3]
 8014fe8:	f003 0301 	and.w	r3, r3, #1
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d004      	beq.n	8014ffa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014ff4:	1c5a      	adds	r2, r3, #1
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014ffa:	78fb      	ldrb	r3, [r7, #3]
 8014ffc:	f003 0301 	and.w	r3, r3, #1
 8015000:	2b00      	cmp	r3, #0
 8015002:	d006      	beq.n	8015012 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	8b5b      	ldrh	r3, [r3, #26]
 8015008:	f043 0320 	orr.w	r3, r3, #32
 801500c:	b29a      	uxth	r2, r3
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	685b      	ldr	r3, [r3, #4]
 8015016:	4618      	mov	r0, r3
 8015018:	f7fb fc36 	bl	8010888 <pbuf_clen>
 801501c:	4603      	mov	r3, r0
 801501e:	461a      	mov	r2, r3
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015026:	4413      	add	r3, r2
 8015028:	b29a      	uxth	r2, r3
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015036:	2b00      	cmp	r3, #0
 8015038:	d00e      	beq.n	8015058 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801503e:	2b00      	cmp	r3, #0
 8015040:	d10a      	bne.n	8015058 <tcp_enqueue_flags+0x1b0>
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015046:	2b00      	cmp	r3, #0
 8015048:	d106      	bne.n	8015058 <tcp_enqueue_flags+0x1b0>
 801504a:	4b06      	ldr	r3, [pc, #24]	@ (8015064 <tcp_enqueue_flags+0x1bc>)
 801504c:	f240 4265 	movw	r2, #1125	@ 0x465
 8015050:	490b      	ldr	r1, [pc, #44]	@ (8015080 <tcp_enqueue_flags+0x1d8>)
 8015052:	4806      	ldr	r0, [pc, #24]	@ (801506c <tcp_enqueue_flags+0x1c4>)
 8015054:	f004 ffd8 	bl	801a008 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015058:	2300      	movs	r3, #0
}
 801505a:	4618      	mov	r0, r3
 801505c:	3720      	adds	r7, #32
 801505e:	46bd      	mov	sp, r7
 8015060:	bd80      	pop	{r7, pc}
 8015062:	bf00      	nop
 8015064:	0801c9e4 	.word	0x0801c9e4
 8015068:	0801ce08 	.word	0x0801ce08
 801506c:	0801ca38 	.word	0x0801ca38
 8015070:	0801ce60 	.word	0x0801ce60
 8015074:	0801ce80 	.word	0x0801ce80
 8015078:	0801cebc 	.word	0x0801cebc
 801507c:	0801ced4 	.word	0x0801ced4
 8015080:	0801cf00 	.word	0x0801cf00

08015084 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015084:	b5b0      	push	{r4, r5, r7, lr}
 8015086:	b08a      	sub	sp, #40	@ 0x28
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d106      	bne.n	80150a0 <tcp_output+0x1c>
 8015092:	4b8a      	ldr	r3, [pc, #552]	@ (80152bc <tcp_output+0x238>)
 8015094:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8015098:	4989      	ldr	r1, [pc, #548]	@ (80152c0 <tcp_output+0x23c>)
 801509a:	488a      	ldr	r0, [pc, #552]	@ (80152c4 <tcp_output+0x240>)
 801509c:	f004 ffb4 	bl	801a008 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	7d1b      	ldrb	r3, [r3, #20]
 80150a4:	2b01      	cmp	r3, #1
 80150a6:	d106      	bne.n	80150b6 <tcp_output+0x32>
 80150a8:	4b84      	ldr	r3, [pc, #528]	@ (80152bc <tcp_output+0x238>)
 80150aa:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80150ae:	4986      	ldr	r1, [pc, #536]	@ (80152c8 <tcp_output+0x244>)
 80150b0:	4884      	ldr	r0, [pc, #528]	@ (80152c4 <tcp_output+0x240>)
 80150b2:	f004 ffa9 	bl	801a008 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80150b6:	4b85      	ldr	r3, [pc, #532]	@ (80152cc <tcp_output+0x248>)
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	687a      	ldr	r2, [r7, #4]
 80150bc:	429a      	cmp	r2, r3
 80150be:	d101      	bne.n	80150c4 <tcp_output+0x40>
    return ERR_OK;
 80150c0:	2300      	movs	r3, #0
 80150c2:	e1ce      	b.n	8015462 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80150d0:	4293      	cmp	r3, r2
 80150d2:	bf28      	it	cs
 80150d4:	4613      	movcs	r3, r2
 80150d6:	b29b      	uxth	r3, r3
 80150d8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80150de:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80150e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d10b      	bne.n	80150fe <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	8b5b      	ldrh	r3, [r3, #26]
 80150ea:	f003 0302 	and.w	r3, r3, #2
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	f000 81aa 	beq.w	8015448 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80150f4:	6878      	ldr	r0, [r7, #4]
 80150f6:	f000 fdcb 	bl	8015c90 <tcp_send_empty_ack>
 80150fa:	4603      	mov	r3, r0
 80150fc:	e1b1      	b.n	8015462 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80150fe:	6879      	ldr	r1, [r7, #4]
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	3304      	adds	r3, #4
 8015104:	461a      	mov	r2, r3
 8015106:	6878      	ldr	r0, [r7, #4]
 8015108:	f7ff fc7e 	bl	8014a08 <tcp_route>
 801510c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801510e:	697b      	ldr	r3, [r7, #20]
 8015110:	2b00      	cmp	r3, #0
 8015112:	d102      	bne.n	801511a <tcp_output+0x96>
    return ERR_RTE;
 8015114:	f06f 0303 	mvn.w	r3, #3
 8015118:	e1a3      	b.n	8015462 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d003      	beq.n	8015128 <tcp_output+0xa4>
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d111      	bne.n	801514c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015128:	697b      	ldr	r3, [r7, #20]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d002      	beq.n	8015134 <tcp_output+0xb0>
 801512e:	697b      	ldr	r3, [r7, #20]
 8015130:	3304      	adds	r3, #4
 8015132:	e000      	b.n	8015136 <tcp_output+0xb2>
 8015134:	2300      	movs	r3, #0
 8015136:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015138:	693b      	ldr	r3, [r7, #16]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d102      	bne.n	8015144 <tcp_output+0xc0>
      return ERR_RTE;
 801513e:	f06f 0303 	mvn.w	r3, #3
 8015142:	e18e      	b.n	8015462 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015144:	693b      	ldr	r3, [r7, #16]
 8015146:	681a      	ldr	r2, [r3, #0]
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801514c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801514e:	68db      	ldr	r3, [r3, #12]
 8015150:	685b      	ldr	r3, [r3, #4]
 8015152:	4618      	mov	r0, r3
 8015154:	f7f9 ff32 	bl	800efbc <lwip_htonl>
 8015158:	4602      	mov	r2, r0
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801515e:	1ad3      	subs	r3, r2, r3
 8015160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015162:	8912      	ldrh	r2, [r2, #8]
 8015164:	4413      	add	r3, r2
 8015166:	69ba      	ldr	r2, [r7, #24]
 8015168:	429a      	cmp	r2, r3
 801516a:	d227      	bcs.n	80151bc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015172:	461a      	mov	r2, r3
 8015174:	69bb      	ldr	r3, [r7, #24]
 8015176:	4293      	cmp	r3, r2
 8015178:	d114      	bne.n	80151a4 <tcp_output+0x120>
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801517e:	2b00      	cmp	r3, #0
 8015180:	d110      	bne.n	80151a4 <tcp_output+0x120>
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015188:	2b00      	cmp	r3, #0
 801518a:	d10b      	bne.n	80151a4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	2200      	movs	r2, #0
 8015190:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	2201      	movs	r2, #1
 8015198:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	2200      	movs	r2, #0
 80151a0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	8b5b      	ldrh	r3, [r3, #26]
 80151a8:	f003 0302 	and.w	r3, r3, #2
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	f000 814d 	beq.w	801544c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80151b2:	6878      	ldr	r0, [r7, #4]
 80151b4:	f000 fd6c 	bl	8015c90 <tcp_send_empty_ack>
 80151b8:	4603      	mov	r3, r0
 80151ba:	e152      	b.n	8015462 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	2200      	movs	r2, #0
 80151c0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80151c8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80151ca:	6a3b      	ldr	r3, [r7, #32]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	f000 811c 	beq.w	801540a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80151d2:	e002      	b.n	80151da <tcp_output+0x156>
 80151d4:	6a3b      	ldr	r3, [r7, #32]
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	623b      	str	r3, [r7, #32]
 80151da:	6a3b      	ldr	r3, [r7, #32]
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d1f8      	bne.n	80151d4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80151e2:	e112      	b.n	801540a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80151e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151e6:	68db      	ldr	r3, [r3, #12]
 80151e8:	899b      	ldrh	r3, [r3, #12]
 80151ea:	b29b      	uxth	r3, r3
 80151ec:	4618      	mov	r0, r3
 80151ee:	f7f9 fecf 	bl	800ef90 <lwip_htons>
 80151f2:	4603      	mov	r3, r0
 80151f4:	b2db      	uxtb	r3, r3
 80151f6:	f003 0304 	and.w	r3, r3, #4
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d006      	beq.n	801520c <tcp_output+0x188>
 80151fe:	4b2f      	ldr	r3, [pc, #188]	@ (80152bc <tcp_output+0x238>)
 8015200:	f240 5236 	movw	r2, #1334	@ 0x536
 8015204:	4932      	ldr	r1, [pc, #200]	@ (80152d0 <tcp_output+0x24c>)
 8015206:	482f      	ldr	r0, [pc, #188]	@ (80152c4 <tcp_output+0x240>)
 8015208:	f004 fefe 	bl	801a008 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015210:	2b00      	cmp	r3, #0
 8015212:	d01f      	beq.n	8015254 <tcp_output+0x1d0>
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	8b5b      	ldrh	r3, [r3, #26]
 8015218:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801521c:	2b00      	cmp	r3, #0
 801521e:	d119      	bne.n	8015254 <tcp_output+0x1d0>
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015224:	2b00      	cmp	r3, #0
 8015226:	d00b      	beq.n	8015240 <tcp_output+0x1bc>
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d110      	bne.n	8015254 <tcp_output+0x1d0>
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015236:	891a      	ldrh	r2, [r3, #8]
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801523c:	429a      	cmp	r2, r3
 801523e:	d209      	bcs.n	8015254 <tcp_output+0x1d0>
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015246:	2b00      	cmp	r3, #0
 8015248:	d004      	beq.n	8015254 <tcp_output+0x1d0>
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015250:	2b08      	cmp	r3, #8
 8015252:	d901      	bls.n	8015258 <tcp_output+0x1d4>
 8015254:	2301      	movs	r3, #1
 8015256:	e000      	b.n	801525a <tcp_output+0x1d6>
 8015258:	2300      	movs	r3, #0
 801525a:	2b00      	cmp	r3, #0
 801525c:	d106      	bne.n	801526c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	8b5b      	ldrh	r3, [r3, #26]
 8015262:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015266:	2b00      	cmp	r3, #0
 8015268:	f000 80e4 	beq.w	8015434 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	7d1b      	ldrb	r3, [r3, #20]
 8015270:	2b02      	cmp	r3, #2
 8015272:	d00d      	beq.n	8015290 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015276:	68db      	ldr	r3, [r3, #12]
 8015278:	899b      	ldrh	r3, [r3, #12]
 801527a:	b29c      	uxth	r4, r3
 801527c:	2010      	movs	r0, #16
 801527e:	f7f9 fe87 	bl	800ef90 <lwip_htons>
 8015282:	4603      	mov	r3, r0
 8015284:	461a      	mov	r2, r3
 8015286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015288:	68db      	ldr	r3, [r3, #12]
 801528a:	4322      	orrs	r2, r4
 801528c:	b292      	uxth	r2, r2
 801528e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015290:	697a      	ldr	r2, [r7, #20]
 8015292:	6879      	ldr	r1, [r7, #4]
 8015294:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015296:	f000 f909 	bl	80154ac <tcp_output_segment>
 801529a:	4603      	mov	r3, r0
 801529c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801529e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d016      	beq.n	80152d4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	8b5b      	ldrh	r3, [r3, #26]
 80152aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80152ae:	b29a      	uxth	r2, r3
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	835a      	strh	r2, [r3, #26]
      return err;
 80152b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80152b8:	e0d3      	b.n	8015462 <tcp_output+0x3de>
 80152ba:	bf00      	nop
 80152bc:	0801c9e4 	.word	0x0801c9e4
 80152c0:	0801cf28 	.word	0x0801cf28
 80152c4:	0801ca38 	.word	0x0801ca38
 80152c8:	0801cf40 	.word	0x0801cf40
 80152cc:	200274f8 	.word	0x200274f8
 80152d0:	0801cf68 	.word	0x0801cf68
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80152d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152d6:	681a      	ldr	r2, [r3, #0]
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	7d1b      	ldrb	r3, [r3, #20]
 80152e0:	2b02      	cmp	r3, #2
 80152e2:	d006      	beq.n	80152f2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	8b5b      	ldrh	r3, [r3, #26]
 80152e8:	f023 0303 	bic.w	r3, r3, #3
 80152ec:	b29a      	uxth	r2, r3
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80152f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152f4:	68db      	ldr	r3, [r3, #12]
 80152f6:	685b      	ldr	r3, [r3, #4]
 80152f8:	4618      	mov	r0, r3
 80152fa:	f7f9 fe5f 	bl	800efbc <lwip_htonl>
 80152fe:	4604      	mov	r4, r0
 8015300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015302:	891b      	ldrh	r3, [r3, #8]
 8015304:	461d      	mov	r5, r3
 8015306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015308:	68db      	ldr	r3, [r3, #12]
 801530a:	899b      	ldrh	r3, [r3, #12]
 801530c:	b29b      	uxth	r3, r3
 801530e:	4618      	mov	r0, r3
 8015310:	f7f9 fe3e 	bl	800ef90 <lwip_htons>
 8015314:	4603      	mov	r3, r0
 8015316:	b2db      	uxtb	r3, r3
 8015318:	f003 0303 	and.w	r3, r3, #3
 801531c:	2b00      	cmp	r3, #0
 801531e:	d001      	beq.n	8015324 <tcp_output+0x2a0>
 8015320:	2301      	movs	r3, #1
 8015322:	e000      	b.n	8015326 <tcp_output+0x2a2>
 8015324:	2300      	movs	r3, #0
 8015326:	442b      	add	r3, r5
 8015328:	4423      	add	r3, r4
 801532a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015330:	68bb      	ldr	r3, [r7, #8]
 8015332:	1ad3      	subs	r3, r2, r3
 8015334:	2b00      	cmp	r3, #0
 8015336:	da02      	bge.n	801533e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	68ba      	ldr	r2, [r7, #8]
 801533c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015340:	891b      	ldrh	r3, [r3, #8]
 8015342:	461c      	mov	r4, r3
 8015344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015346:	68db      	ldr	r3, [r3, #12]
 8015348:	899b      	ldrh	r3, [r3, #12]
 801534a:	b29b      	uxth	r3, r3
 801534c:	4618      	mov	r0, r3
 801534e:	f7f9 fe1f 	bl	800ef90 <lwip_htons>
 8015352:	4603      	mov	r3, r0
 8015354:	b2db      	uxtb	r3, r3
 8015356:	f003 0303 	and.w	r3, r3, #3
 801535a:	2b00      	cmp	r3, #0
 801535c:	d001      	beq.n	8015362 <tcp_output+0x2de>
 801535e:	2301      	movs	r3, #1
 8015360:	e000      	b.n	8015364 <tcp_output+0x2e0>
 8015362:	2300      	movs	r3, #0
 8015364:	4423      	add	r3, r4
 8015366:	2b00      	cmp	r3, #0
 8015368:	d049      	beq.n	80153fe <tcp_output+0x37a>
      seg->next = NULL;
 801536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801536c:	2200      	movs	r2, #0
 801536e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015374:	2b00      	cmp	r3, #0
 8015376:	d105      	bne.n	8015384 <tcp_output+0x300>
        pcb->unacked = seg;
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801537c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801537e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015380:	623b      	str	r3, [r7, #32]
 8015382:	e03f      	b.n	8015404 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015386:	68db      	ldr	r3, [r3, #12]
 8015388:	685b      	ldr	r3, [r3, #4]
 801538a:	4618      	mov	r0, r3
 801538c:	f7f9 fe16 	bl	800efbc <lwip_htonl>
 8015390:	4604      	mov	r4, r0
 8015392:	6a3b      	ldr	r3, [r7, #32]
 8015394:	68db      	ldr	r3, [r3, #12]
 8015396:	685b      	ldr	r3, [r3, #4]
 8015398:	4618      	mov	r0, r3
 801539a:	f7f9 fe0f 	bl	800efbc <lwip_htonl>
 801539e:	4603      	mov	r3, r0
 80153a0:	1ae3      	subs	r3, r4, r3
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	da24      	bge.n	80153f0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	3370      	adds	r3, #112	@ 0x70
 80153aa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80153ac:	e002      	b.n	80153b4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80153ae:	69fb      	ldr	r3, [r7, #28]
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80153b4:	69fb      	ldr	r3, [r7, #28]
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d011      	beq.n	80153e0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80153bc:	69fb      	ldr	r3, [r7, #28]
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	68db      	ldr	r3, [r3, #12]
 80153c2:	685b      	ldr	r3, [r3, #4]
 80153c4:	4618      	mov	r0, r3
 80153c6:	f7f9 fdf9 	bl	800efbc <lwip_htonl>
 80153ca:	4604      	mov	r4, r0
 80153cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153ce:	68db      	ldr	r3, [r3, #12]
 80153d0:	685b      	ldr	r3, [r3, #4]
 80153d2:	4618      	mov	r0, r3
 80153d4:	f7f9 fdf2 	bl	800efbc <lwip_htonl>
 80153d8:	4603      	mov	r3, r0
 80153da:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80153dc:	2b00      	cmp	r3, #0
 80153de:	dbe6      	blt.n	80153ae <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80153e0:	69fb      	ldr	r3, [r7, #28]
 80153e2:	681a      	ldr	r2, [r3, #0]
 80153e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153e6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80153e8:	69fb      	ldr	r3, [r7, #28]
 80153ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80153ec:	601a      	str	r2, [r3, #0]
 80153ee:	e009      	b.n	8015404 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80153f0:	6a3b      	ldr	r3, [r7, #32]
 80153f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80153f4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80153f6:	6a3b      	ldr	r3, [r7, #32]
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	623b      	str	r3, [r7, #32]
 80153fc:	e002      	b.n	8015404 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80153fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015400:	f7fc fc45 	bl	8011c8e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015408:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801540a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801540c:	2b00      	cmp	r3, #0
 801540e:	d012      	beq.n	8015436 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015412:	68db      	ldr	r3, [r3, #12]
 8015414:	685b      	ldr	r3, [r3, #4]
 8015416:	4618      	mov	r0, r3
 8015418:	f7f9 fdd0 	bl	800efbc <lwip_htonl>
 801541c:	4602      	mov	r2, r0
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015422:	1ad3      	subs	r3, r2, r3
 8015424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015426:	8912      	ldrh	r2, [r2, #8]
 8015428:	4413      	add	r3, r2
  while (seg != NULL &&
 801542a:	69ba      	ldr	r2, [r7, #24]
 801542c:	429a      	cmp	r2, r3
 801542e:	f4bf aed9 	bcs.w	80151e4 <tcp_output+0x160>
 8015432:	e000      	b.n	8015436 <tcp_output+0x3b2>
      break;
 8015434:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801543a:	2b00      	cmp	r3, #0
 801543c:	d108      	bne.n	8015450 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	2200      	movs	r2, #0
 8015442:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8015446:	e004      	b.n	8015452 <tcp_output+0x3ce>
    goto output_done;
 8015448:	bf00      	nop
 801544a:	e002      	b.n	8015452 <tcp_output+0x3ce>
    goto output_done;
 801544c:	bf00      	nop
 801544e:	e000      	b.n	8015452 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015450:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	8b5b      	ldrh	r3, [r3, #26]
 8015456:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801545a:	b29a      	uxth	r2, r3
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015460:	2300      	movs	r3, #0
}
 8015462:	4618      	mov	r0, r3
 8015464:	3728      	adds	r7, #40	@ 0x28
 8015466:	46bd      	mov	sp, r7
 8015468:	bdb0      	pop	{r4, r5, r7, pc}
 801546a:	bf00      	nop

0801546c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801546c:	b580      	push	{r7, lr}
 801546e:	b082      	sub	sp, #8
 8015470:	af00      	add	r7, sp, #0
 8015472:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d106      	bne.n	8015488 <tcp_output_segment_busy+0x1c>
 801547a:	4b09      	ldr	r3, [pc, #36]	@ (80154a0 <tcp_output_segment_busy+0x34>)
 801547c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8015480:	4908      	ldr	r1, [pc, #32]	@ (80154a4 <tcp_output_segment_busy+0x38>)
 8015482:	4809      	ldr	r0, [pc, #36]	@ (80154a8 <tcp_output_segment_busy+0x3c>)
 8015484:	f004 fdc0 	bl	801a008 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	685b      	ldr	r3, [r3, #4]
 801548c:	7b9b      	ldrb	r3, [r3, #14]
 801548e:	2b01      	cmp	r3, #1
 8015490:	d001      	beq.n	8015496 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8015492:	2301      	movs	r3, #1
 8015494:	e000      	b.n	8015498 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8015496:	2300      	movs	r3, #0
}
 8015498:	4618      	mov	r0, r3
 801549a:	3708      	adds	r7, #8
 801549c:	46bd      	mov	sp, r7
 801549e:	bd80      	pop	{r7, pc}
 80154a0:	0801c9e4 	.word	0x0801c9e4
 80154a4:	0801cf80 	.word	0x0801cf80
 80154a8:	0801ca38 	.word	0x0801ca38

080154ac <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80154ac:	b5b0      	push	{r4, r5, r7, lr}
 80154ae:	b08c      	sub	sp, #48	@ 0x30
 80154b0:	af04      	add	r7, sp, #16
 80154b2:	60f8      	str	r0, [r7, #12]
 80154b4:	60b9      	str	r1, [r7, #8]
 80154b6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d106      	bne.n	80154cc <tcp_output_segment+0x20>
 80154be:	4b64      	ldr	r3, [pc, #400]	@ (8015650 <tcp_output_segment+0x1a4>)
 80154c0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80154c4:	4963      	ldr	r1, [pc, #396]	@ (8015654 <tcp_output_segment+0x1a8>)
 80154c6:	4864      	ldr	r0, [pc, #400]	@ (8015658 <tcp_output_segment+0x1ac>)
 80154c8:	f004 fd9e 	bl	801a008 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80154cc:	68bb      	ldr	r3, [r7, #8]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d106      	bne.n	80154e0 <tcp_output_segment+0x34>
 80154d2:	4b5f      	ldr	r3, [pc, #380]	@ (8015650 <tcp_output_segment+0x1a4>)
 80154d4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80154d8:	4960      	ldr	r1, [pc, #384]	@ (801565c <tcp_output_segment+0x1b0>)
 80154da:	485f      	ldr	r0, [pc, #380]	@ (8015658 <tcp_output_segment+0x1ac>)
 80154dc:	f004 fd94 	bl	801a008 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d106      	bne.n	80154f4 <tcp_output_segment+0x48>
 80154e6:	4b5a      	ldr	r3, [pc, #360]	@ (8015650 <tcp_output_segment+0x1a4>)
 80154e8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80154ec:	495c      	ldr	r1, [pc, #368]	@ (8015660 <tcp_output_segment+0x1b4>)
 80154ee:	485a      	ldr	r0, [pc, #360]	@ (8015658 <tcp_output_segment+0x1ac>)
 80154f0:	f004 fd8a 	bl	801a008 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80154f4:	68f8      	ldr	r0, [r7, #12]
 80154f6:	f7ff ffb9 	bl	801546c <tcp_output_segment_busy>
 80154fa:	4603      	mov	r3, r0
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d001      	beq.n	8015504 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015500:	2300      	movs	r3, #0
 8015502:	e0a1      	b.n	8015648 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015504:	68bb      	ldr	r3, [r7, #8]
 8015506:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	68dc      	ldr	r4, [r3, #12]
 801550c:	4610      	mov	r0, r2
 801550e:	f7f9 fd55 	bl	800efbc <lwip_htonl>
 8015512:	4603      	mov	r3, r0
 8015514:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015516:	68bb      	ldr	r3, [r7, #8]
 8015518:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	68dc      	ldr	r4, [r3, #12]
 801551e:	4610      	mov	r0, r2
 8015520:	f7f9 fd36 	bl	800ef90 <lwip_htons>
 8015524:	4603      	mov	r3, r0
 8015526:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015528:	68bb      	ldr	r3, [r7, #8]
 801552a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801552c:	68ba      	ldr	r2, [r7, #8]
 801552e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8015530:	441a      	add	r2, r3
 8015532:	68bb      	ldr	r3, [r7, #8]
 8015534:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	68db      	ldr	r3, [r3, #12]
 801553a:	3314      	adds	r3, #20
 801553c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	7a9b      	ldrb	r3, [r3, #10]
 8015542:	f003 0301 	and.w	r3, r3, #1
 8015546:	2b00      	cmp	r3, #0
 8015548:	d015      	beq.n	8015576 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801554a:	68bb      	ldr	r3, [r7, #8]
 801554c:	3304      	adds	r3, #4
 801554e:	461a      	mov	r2, r3
 8015550:	6879      	ldr	r1, [r7, #4]
 8015552:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8015556:	f7fc fe91 	bl	801227c <tcp_eff_send_mss_netif>
 801555a:	4603      	mov	r3, r0
 801555c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801555e:	8b7b      	ldrh	r3, [r7, #26]
 8015560:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8015564:	4618      	mov	r0, r3
 8015566:	f7f9 fd29 	bl	800efbc <lwip_htonl>
 801556a:	4602      	mov	r2, r0
 801556c:	69fb      	ldr	r3, [r7, #28]
 801556e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015570:	69fb      	ldr	r3, [r7, #28]
 8015572:	3304      	adds	r3, #4
 8015574:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015576:	68bb      	ldr	r3, [r7, #8]
 8015578:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801557c:	2b00      	cmp	r3, #0
 801557e:	da02      	bge.n	8015586 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015580:	68bb      	ldr	r3, [r7, #8]
 8015582:	2200      	movs	r2, #0
 8015584:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8015586:	68bb      	ldr	r3, [r7, #8]
 8015588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801558a:	2b00      	cmp	r3, #0
 801558c:	d10c      	bne.n	80155a8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801558e:	4b35      	ldr	r3, [pc, #212]	@ (8015664 <tcp_output_segment+0x1b8>)
 8015590:	681a      	ldr	r2, [r3, #0]
 8015592:	68bb      	ldr	r3, [r7, #8]
 8015594:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	68db      	ldr	r3, [r3, #12]
 801559a:	685b      	ldr	r3, [r3, #4]
 801559c:	4618      	mov	r0, r3
 801559e:	f7f9 fd0d 	bl	800efbc <lwip_htonl>
 80155a2:	4602      	mov	r2, r0
 80155a4:	68bb      	ldr	r3, [r7, #8]
 80155a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	68da      	ldr	r2, [r3, #12]
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	685b      	ldr	r3, [r3, #4]
 80155b0:	685b      	ldr	r3, [r3, #4]
 80155b2:	1ad3      	subs	r3, r2, r3
 80155b4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	685b      	ldr	r3, [r3, #4]
 80155ba:	8959      	ldrh	r1, [r3, #10]
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	685b      	ldr	r3, [r3, #4]
 80155c0:	8b3a      	ldrh	r2, [r7, #24]
 80155c2:	1a8a      	subs	r2, r1, r2
 80155c4:	b292      	uxth	r2, r2
 80155c6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	685b      	ldr	r3, [r3, #4]
 80155cc:	8919      	ldrh	r1, [r3, #8]
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	685b      	ldr	r3, [r3, #4]
 80155d2:	8b3a      	ldrh	r2, [r7, #24]
 80155d4:	1a8a      	subs	r2, r1, r2
 80155d6:	b292      	uxth	r2, r2
 80155d8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	685b      	ldr	r3, [r3, #4]
 80155de:	68fa      	ldr	r2, [r7, #12]
 80155e0:	68d2      	ldr	r2, [r2, #12]
 80155e2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	68db      	ldr	r3, [r3, #12]
 80155e8:	2200      	movs	r2, #0
 80155ea:	741a      	strb	r2, [r3, #16]
 80155ec:	2200      	movs	r2, #0
 80155ee:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	68da      	ldr	r2, [r3, #12]
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	7a9b      	ldrb	r3, [r3, #10]
 80155f8:	f003 0301 	and.w	r3, r3, #1
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d001      	beq.n	8015604 <tcp_output_segment+0x158>
 8015600:	2318      	movs	r3, #24
 8015602:	e000      	b.n	8015606 <tcp_output_segment+0x15a>
 8015604:	2314      	movs	r3, #20
 8015606:	4413      	add	r3, r2
 8015608:	69fa      	ldr	r2, [r7, #28]
 801560a:	429a      	cmp	r2, r3
 801560c:	d006      	beq.n	801561c <tcp_output_segment+0x170>
 801560e:	4b10      	ldr	r3, [pc, #64]	@ (8015650 <tcp_output_segment+0x1a4>)
 8015610:	f240 621c 	movw	r2, #1564	@ 0x61c
 8015614:	4914      	ldr	r1, [pc, #80]	@ (8015668 <tcp_output_segment+0x1bc>)
 8015616:	4810      	ldr	r0, [pc, #64]	@ (8015658 <tcp_output_segment+0x1ac>)
 8015618:	f004 fcf6 	bl	801a008 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	6858      	ldr	r0, [r3, #4]
 8015620:	68b9      	ldr	r1, [r7, #8]
 8015622:	68bb      	ldr	r3, [r7, #8]
 8015624:	1d1c      	adds	r4, r3, #4
 8015626:	68bb      	ldr	r3, [r7, #8]
 8015628:	7add      	ldrb	r5, [r3, #11]
 801562a:	68bb      	ldr	r3, [r7, #8]
 801562c:	7a9b      	ldrb	r3, [r3, #10]
 801562e:	687a      	ldr	r2, [r7, #4]
 8015630:	9202      	str	r2, [sp, #8]
 8015632:	2206      	movs	r2, #6
 8015634:	9201      	str	r2, [sp, #4]
 8015636:	9300      	str	r3, [sp, #0]
 8015638:	462b      	mov	r3, r5
 801563a:	4622      	mov	r2, r4
 801563c:	f002 fd12 	bl	8018064 <ip4_output_if>
 8015640:	4603      	mov	r3, r0
 8015642:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015644:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015648:	4618      	mov	r0, r3
 801564a:	3720      	adds	r7, #32
 801564c:	46bd      	mov	sp, r7
 801564e:	bdb0      	pop	{r4, r5, r7, pc}
 8015650:	0801c9e4 	.word	0x0801c9e4
 8015654:	0801cfa8 	.word	0x0801cfa8
 8015658:	0801ca38 	.word	0x0801ca38
 801565c:	0801cfc8 	.word	0x0801cfc8
 8015660:	0801cfe8 	.word	0x0801cfe8
 8015664:	200274ac 	.word	0x200274ac
 8015668:	0801d00c 	.word	0x0801d00c

0801566c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801566c:	b5b0      	push	{r4, r5, r7, lr}
 801566e:	b084      	sub	sp, #16
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d106      	bne.n	8015688 <tcp_rexmit_rto_prepare+0x1c>
 801567a:	4b31      	ldr	r3, [pc, #196]	@ (8015740 <tcp_rexmit_rto_prepare+0xd4>)
 801567c:	f240 6263 	movw	r2, #1635	@ 0x663
 8015680:	4930      	ldr	r1, [pc, #192]	@ (8015744 <tcp_rexmit_rto_prepare+0xd8>)
 8015682:	4831      	ldr	r0, [pc, #196]	@ (8015748 <tcp_rexmit_rto_prepare+0xdc>)
 8015684:	f004 fcc0 	bl	801a008 <iprintf>

  if (pcb->unacked == NULL) {
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801568c:	2b00      	cmp	r3, #0
 801568e:	d102      	bne.n	8015696 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8015690:	f06f 0305 	mvn.w	r3, #5
 8015694:	e050      	b.n	8015738 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801569a:	60fb      	str	r3, [r7, #12]
 801569c:	e00b      	b.n	80156b6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801569e:	68f8      	ldr	r0, [r7, #12]
 80156a0:	f7ff fee4 	bl	801546c <tcp_output_segment_busy>
 80156a4:	4603      	mov	r3, r0
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d002      	beq.n	80156b0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80156aa:	f06f 0305 	mvn.w	r3, #5
 80156ae:	e043      	b.n	8015738 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	60fb      	str	r3, [r7, #12]
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d1ef      	bne.n	801569e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80156be:	68f8      	ldr	r0, [r7, #12]
 80156c0:	f7ff fed4 	bl	801546c <tcp_output_segment_busy>
 80156c4:	4603      	mov	r3, r0
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d002      	beq.n	80156d0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80156ca:	f06f 0305 	mvn.w	r3, #5
 80156ce:	e033      	b.n	8015738 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	2200      	movs	r2, #0
 80156e4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	8b5b      	ldrh	r3, [r3, #26]
 80156ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80156ee:	b29a      	uxth	r2, r3
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	68db      	ldr	r3, [r3, #12]
 80156f8:	685b      	ldr	r3, [r3, #4]
 80156fa:	4618      	mov	r0, r3
 80156fc:	f7f9 fc5e 	bl	800efbc <lwip_htonl>
 8015700:	4604      	mov	r4, r0
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	891b      	ldrh	r3, [r3, #8]
 8015706:	461d      	mov	r5, r3
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	68db      	ldr	r3, [r3, #12]
 801570c:	899b      	ldrh	r3, [r3, #12]
 801570e:	b29b      	uxth	r3, r3
 8015710:	4618      	mov	r0, r3
 8015712:	f7f9 fc3d 	bl	800ef90 <lwip_htons>
 8015716:	4603      	mov	r3, r0
 8015718:	b2db      	uxtb	r3, r3
 801571a:	f003 0303 	and.w	r3, r3, #3
 801571e:	2b00      	cmp	r3, #0
 8015720:	d001      	beq.n	8015726 <tcp_rexmit_rto_prepare+0xba>
 8015722:	2301      	movs	r3, #1
 8015724:	e000      	b.n	8015728 <tcp_rexmit_rto_prepare+0xbc>
 8015726:	2300      	movs	r3, #0
 8015728:	442b      	add	r3, r5
 801572a:	18e2      	adds	r2, r4, r3
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	2200      	movs	r2, #0
 8015734:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8015736:	2300      	movs	r3, #0
}
 8015738:	4618      	mov	r0, r3
 801573a:	3710      	adds	r7, #16
 801573c:	46bd      	mov	sp, r7
 801573e:	bdb0      	pop	{r4, r5, r7, pc}
 8015740:	0801c9e4 	.word	0x0801c9e4
 8015744:	0801d020 	.word	0x0801d020
 8015748:	0801ca38 	.word	0x0801ca38

0801574c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801574c:	b580      	push	{r7, lr}
 801574e:	b082      	sub	sp, #8
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d106      	bne.n	8015768 <tcp_rexmit_rto_commit+0x1c>
 801575a:	4b0d      	ldr	r3, [pc, #52]	@ (8015790 <tcp_rexmit_rto_commit+0x44>)
 801575c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8015760:	490c      	ldr	r1, [pc, #48]	@ (8015794 <tcp_rexmit_rto_commit+0x48>)
 8015762:	480d      	ldr	r0, [pc, #52]	@ (8015798 <tcp_rexmit_rto_commit+0x4c>)
 8015764:	f004 fc50 	bl	801a008 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801576e:	2bff      	cmp	r3, #255	@ 0xff
 8015770:	d007      	beq.n	8015782 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015778:	3301      	adds	r3, #1
 801577a:	b2da      	uxtb	r2, r3
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8015782:	6878      	ldr	r0, [r7, #4]
 8015784:	f7ff fc7e 	bl	8015084 <tcp_output>
}
 8015788:	bf00      	nop
 801578a:	3708      	adds	r7, #8
 801578c:	46bd      	mov	sp, r7
 801578e:	bd80      	pop	{r7, pc}
 8015790:	0801c9e4 	.word	0x0801c9e4
 8015794:	0801d044 	.word	0x0801d044
 8015798:	0801ca38 	.word	0x0801ca38

0801579c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b082      	sub	sp, #8
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d106      	bne.n	80157b8 <tcp_rexmit_rto+0x1c>
 80157aa:	4b0a      	ldr	r3, [pc, #40]	@ (80157d4 <tcp_rexmit_rto+0x38>)
 80157ac:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80157b0:	4909      	ldr	r1, [pc, #36]	@ (80157d8 <tcp_rexmit_rto+0x3c>)
 80157b2:	480a      	ldr	r0, [pc, #40]	@ (80157dc <tcp_rexmit_rto+0x40>)
 80157b4:	f004 fc28 	bl	801a008 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80157b8:	6878      	ldr	r0, [r7, #4]
 80157ba:	f7ff ff57 	bl	801566c <tcp_rexmit_rto_prepare>
 80157be:	4603      	mov	r3, r0
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d102      	bne.n	80157ca <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80157c4:	6878      	ldr	r0, [r7, #4]
 80157c6:	f7ff ffc1 	bl	801574c <tcp_rexmit_rto_commit>
  }
}
 80157ca:	bf00      	nop
 80157cc:	3708      	adds	r7, #8
 80157ce:	46bd      	mov	sp, r7
 80157d0:	bd80      	pop	{r7, pc}
 80157d2:	bf00      	nop
 80157d4:	0801c9e4 	.word	0x0801c9e4
 80157d8:	0801d068 	.word	0x0801d068
 80157dc:	0801ca38 	.word	0x0801ca38

080157e0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80157e0:	b590      	push	{r4, r7, lr}
 80157e2:	b085      	sub	sp, #20
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d106      	bne.n	80157fc <tcp_rexmit+0x1c>
 80157ee:	4b2f      	ldr	r3, [pc, #188]	@ (80158ac <tcp_rexmit+0xcc>)
 80157f0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80157f4:	492e      	ldr	r1, [pc, #184]	@ (80158b0 <tcp_rexmit+0xd0>)
 80157f6:	482f      	ldr	r0, [pc, #188]	@ (80158b4 <tcp_rexmit+0xd4>)
 80157f8:	f004 fc06 	bl	801a008 <iprintf>

  if (pcb->unacked == NULL) {
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015800:	2b00      	cmp	r3, #0
 8015802:	d102      	bne.n	801580a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8015804:	f06f 0305 	mvn.w	r3, #5
 8015808:	e04c      	b.n	80158a4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801580e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8015810:	68b8      	ldr	r0, [r7, #8]
 8015812:	f7ff fe2b 	bl	801546c <tcp_output_segment_busy>
 8015816:	4603      	mov	r3, r0
 8015818:	2b00      	cmp	r3, #0
 801581a:	d002      	beq.n	8015822 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801581c:	f06f 0305 	mvn.w	r3, #5
 8015820:	e040      	b.n	80158a4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8015822:	68bb      	ldr	r3, [r7, #8]
 8015824:	681a      	ldr	r2, [r3, #0]
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	336c      	adds	r3, #108	@ 0x6c
 801582e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015830:	e002      	b.n	8015838 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d011      	beq.n	8015864 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	68db      	ldr	r3, [r3, #12]
 8015846:	685b      	ldr	r3, [r3, #4]
 8015848:	4618      	mov	r0, r3
 801584a:	f7f9 fbb7 	bl	800efbc <lwip_htonl>
 801584e:	4604      	mov	r4, r0
 8015850:	68bb      	ldr	r3, [r7, #8]
 8015852:	68db      	ldr	r3, [r3, #12]
 8015854:	685b      	ldr	r3, [r3, #4]
 8015856:	4618      	mov	r0, r3
 8015858:	f7f9 fbb0 	bl	800efbc <lwip_htonl>
 801585c:	4603      	mov	r3, r0
 801585e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8015860:	2b00      	cmp	r3, #0
 8015862:	dbe6      	blt.n	8015832 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	681a      	ldr	r2, [r3, #0]
 8015868:	68bb      	ldr	r3, [r7, #8]
 801586a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	68ba      	ldr	r2, [r7, #8]
 8015870:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8015872:	68bb      	ldr	r3, [r7, #8]
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d103      	bne.n	8015882 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	2200      	movs	r2, #0
 801587e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015888:	2bff      	cmp	r3, #255	@ 0xff
 801588a:	d007      	beq.n	801589c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015892:	3301      	adds	r3, #1
 8015894:	b2da      	uxtb	r2, r3
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	2200      	movs	r2, #0
 80158a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80158a2:	2300      	movs	r3, #0
}
 80158a4:	4618      	mov	r0, r3
 80158a6:	3714      	adds	r7, #20
 80158a8:	46bd      	mov	sp, r7
 80158aa:	bd90      	pop	{r4, r7, pc}
 80158ac:	0801c9e4 	.word	0x0801c9e4
 80158b0:	0801d084 	.word	0x0801d084
 80158b4:	0801ca38 	.word	0x0801ca38

080158b8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b082      	sub	sp, #8
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d106      	bne.n	80158d4 <tcp_rexmit_fast+0x1c>
 80158c6:	4b2a      	ldr	r3, [pc, #168]	@ (8015970 <tcp_rexmit_fast+0xb8>)
 80158c8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80158cc:	4929      	ldr	r1, [pc, #164]	@ (8015974 <tcp_rexmit_fast+0xbc>)
 80158ce:	482a      	ldr	r0, [pc, #168]	@ (8015978 <tcp_rexmit_fast+0xc0>)
 80158d0:	f004 fb9a 	bl	801a008 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d045      	beq.n	8015968 <tcp_rexmit_fast+0xb0>
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	8b5b      	ldrh	r3, [r3, #26]
 80158e0:	f003 0304 	and.w	r3, r3, #4
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d13f      	bne.n	8015968 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80158e8:	6878      	ldr	r0, [r7, #4]
 80158ea:	f7ff ff79 	bl	80157e0 <tcp_rexmit>
 80158ee:	4603      	mov	r3, r0
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d139      	bne.n	8015968 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015900:	4293      	cmp	r3, r2
 8015902:	bf28      	it	cs
 8015904:	4613      	movcs	r3, r2
 8015906:	b29b      	uxth	r3, r3
 8015908:	2b00      	cmp	r3, #0
 801590a:	da00      	bge.n	801590e <tcp_rexmit_fast+0x56>
 801590c:	3301      	adds	r3, #1
 801590e:	105b      	asrs	r3, r3, #1
 8015910:	b29a      	uxth	r2, r3
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801591e:	461a      	mov	r2, r3
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015924:	005b      	lsls	r3, r3, #1
 8015926:	429a      	cmp	r2, r3
 8015928:	d206      	bcs.n	8015938 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801592e:	005b      	lsls	r3, r3, #1
 8015930:	b29a      	uxth	r2, r3
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015942:	4619      	mov	r1, r3
 8015944:	0049      	lsls	r1, r1, #1
 8015946:	440b      	add	r3, r1
 8015948:	b29b      	uxth	r3, r3
 801594a:	4413      	add	r3, r2
 801594c:	b29a      	uxth	r2, r3
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	8b5b      	ldrh	r3, [r3, #26]
 8015958:	f043 0304 	orr.w	r3, r3, #4
 801595c:	b29a      	uxth	r2, r3
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	2200      	movs	r2, #0
 8015966:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8015968:	bf00      	nop
 801596a:	3708      	adds	r7, #8
 801596c:	46bd      	mov	sp, r7
 801596e:	bd80      	pop	{r7, pc}
 8015970:	0801c9e4 	.word	0x0801c9e4
 8015974:	0801d09c 	.word	0x0801d09c
 8015978:	0801ca38 	.word	0x0801ca38

0801597c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801597c:	b580      	push	{r7, lr}
 801597e:	b086      	sub	sp, #24
 8015980:	af00      	add	r7, sp, #0
 8015982:	60f8      	str	r0, [r7, #12]
 8015984:	607b      	str	r3, [r7, #4]
 8015986:	460b      	mov	r3, r1
 8015988:	817b      	strh	r3, [r7, #10]
 801598a:	4613      	mov	r3, r2
 801598c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801598e:	897a      	ldrh	r2, [r7, #10]
 8015990:	893b      	ldrh	r3, [r7, #8]
 8015992:	4413      	add	r3, r2
 8015994:	b29b      	uxth	r3, r3
 8015996:	3314      	adds	r3, #20
 8015998:	b29b      	uxth	r3, r3
 801599a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801599e:	4619      	mov	r1, r3
 80159a0:	2022      	movs	r0, #34	@ 0x22
 80159a2:	f7fa fbff 	bl	80101a4 <pbuf_alloc>
 80159a6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80159a8:	697b      	ldr	r3, [r7, #20]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d04d      	beq.n	8015a4a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80159ae:	897b      	ldrh	r3, [r7, #10]
 80159b0:	3313      	adds	r3, #19
 80159b2:	697a      	ldr	r2, [r7, #20]
 80159b4:	8952      	ldrh	r2, [r2, #10]
 80159b6:	4293      	cmp	r3, r2
 80159b8:	db06      	blt.n	80159c8 <tcp_output_alloc_header_common+0x4c>
 80159ba:	4b26      	ldr	r3, [pc, #152]	@ (8015a54 <tcp_output_alloc_header_common+0xd8>)
 80159bc:	f240 7223 	movw	r2, #1827	@ 0x723
 80159c0:	4925      	ldr	r1, [pc, #148]	@ (8015a58 <tcp_output_alloc_header_common+0xdc>)
 80159c2:	4826      	ldr	r0, [pc, #152]	@ (8015a5c <tcp_output_alloc_header_common+0xe0>)
 80159c4:	f004 fb20 	bl	801a008 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80159c8:	697b      	ldr	r3, [r7, #20]
 80159ca:	685b      	ldr	r3, [r3, #4]
 80159cc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80159ce:	8c3b      	ldrh	r3, [r7, #32]
 80159d0:	4618      	mov	r0, r3
 80159d2:	f7f9 fadd 	bl	800ef90 <lwip_htons>
 80159d6:	4603      	mov	r3, r0
 80159d8:	461a      	mov	r2, r3
 80159da:	693b      	ldr	r3, [r7, #16]
 80159dc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80159de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80159e0:	4618      	mov	r0, r3
 80159e2:	f7f9 fad5 	bl	800ef90 <lwip_htons>
 80159e6:	4603      	mov	r3, r0
 80159e8:	461a      	mov	r2, r3
 80159ea:	693b      	ldr	r3, [r7, #16]
 80159ec:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80159ee:	693b      	ldr	r3, [r7, #16]
 80159f0:	687a      	ldr	r2, [r7, #4]
 80159f2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80159f4:	68f8      	ldr	r0, [r7, #12]
 80159f6:	f7f9 fae1 	bl	800efbc <lwip_htonl>
 80159fa:	4602      	mov	r2, r0
 80159fc:	693b      	ldr	r3, [r7, #16]
 80159fe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8015a00:	897b      	ldrh	r3, [r7, #10]
 8015a02:	089b      	lsrs	r3, r3, #2
 8015a04:	b29b      	uxth	r3, r3
 8015a06:	3305      	adds	r3, #5
 8015a08:	b29b      	uxth	r3, r3
 8015a0a:	031b      	lsls	r3, r3, #12
 8015a0c:	b29a      	uxth	r2, r3
 8015a0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015a12:	b29b      	uxth	r3, r3
 8015a14:	4313      	orrs	r3, r2
 8015a16:	b29b      	uxth	r3, r3
 8015a18:	4618      	mov	r0, r3
 8015a1a:	f7f9 fab9 	bl	800ef90 <lwip_htons>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	461a      	mov	r2, r3
 8015a22:	693b      	ldr	r3, [r7, #16]
 8015a24:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015a26:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015a28:	4618      	mov	r0, r3
 8015a2a:	f7f9 fab1 	bl	800ef90 <lwip_htons>
 8015a2e:	4603      	mov	r3, r0
 8015a30:	461a      	mov	r2, r3
 8015a32:	693b      	ldr	r3, [r7, #16]
 8015a34:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015a36:	693b      	ldr	r3, [r7, #16]
 8015a38:	2200      	movs	r2, #0
 8015a3a:	741a      	strb	r2, [r3, #16]
 8015a3c:	2200      	movs	r2, #0
 8015a3e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015a40:	693b      	ldr	r3, [r7, #16]
 8015a42:	2200      	movs	r2, #0
 8015a44:	749a      	strb	r2, [r3, #18]
 8015a46:	2200      	movs	r2, #0
 8015a48:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8015a4a:	697b      	ldr	r3, [r7, #20]
}
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	3718      	adds	r7, #24
 8015a50:	46bd      	mov	sp, r7
 8015a52:	bd80      	pop	{r7, pc}
 8015a54:	0801c9e4 	.word	0x0801c9e4
 8015a58:	0801d0bc 	.word	0x0801d0bc
 8015a5c:	0801ca38 	.word	0x0801ca38

08015a60 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015a60:	b5b0      	push	{r4, r5, r7, lr}
 8015a62:	b08a      	sub	sp, #40	@ 0x28
 8015a64:	af04      	add	r7, sp, #16
 8015a66:	60f8      	str	r0, [r7, #12]
 8015a68:	607b      	str	r3, [r7, #4]
 8015a6a:	460b      	mov	r3, r1
 8015a6c:	817b      	strh	r3, [r7, #10]
 8015a6e:	4613      	mov	r3, r2
 8015a70:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d106      	bne.n	8015a86 <tcp_output_alloc_header+0x26>
 8015a78:	4b15      	ldr	r3, [pc, #84]	@ (8015ad0 <tcp_output_alloc_header+0x70>)
 8015a7a:	f240 7242 	movw	r2, #1858	@ 0x742
 8015a7e:	4915      	ldr	r1, [pc, #84]	@ (8015ad4 <tcp_output_alloc_header+0x74>)
 8015a80:	4815      	ldr	r0, [pc, #84]	@ (8015ad8 <tcp_output_alloc_header+0x78>)
 8015a82:	f004 fac1 	bl	801a008 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	8adb      	ldrh	r3, [r3, #22]
 8015a8e:	68fa      	ldr	r2, [r7, #12]
 8015a90:	8b12      	ldrh	r2, [r2, #24]
 8015a92:	68f9      	ldr	r1, [r7, #12]
 8015a94:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8015a96:	893d      	ldrh	r5, [r7, #8]
 8015a98:	897c      	ldrh	r4, [r7, #10]
 8015a9a:	9103      	str	r1, [sp, #12]
 8015a9c:	2110      	movs	r1, #16
 8015a9e:	9102      	str	r1, [sp, #8]
 8015aa0:	9201      	str	r2, [sp, #4]
 8015aa2:	9300      	str	r3, [sp, #0]
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	462a      	mov	r2, r5
 8015aa8:	4621      	mov	r1, r4
 8015aaa:	f7ff ff67 	bl	801597c <tcp_output_alloc_header_common>
 8015aae:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8015ab0:	697b      	ldr	r3, [r7, #20]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d006      	beq.n	8015ac4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015aba:	68fa      	ldr	r2, [r7, #12]
 8015abc:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8015abe:	441a      	add	r2, r3
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8015ac4:	697b      	ldr	r3, [r7, #20]
}
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	3718      	adds	r7, #24
 8015aca:	46bd      	mov	sp, r7
 8015acc:	bdb0      	pop	{r4, r5, r7, pc}
 8015ace:	bf00      	nop
 8015ad0:	0801c9e4 	.word	0x0801c9e4
 8015ad4:	0801d0ec 	.word	0x0801d0ec
 8015ad8:	0801ca38 	.word	0x0801ca38

08015adc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b088      	sub	sp, #32
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	60f8      	str	r0, [r7, #12]
 8015ae4:	60b9      	str	r1, [r7, #8]
 8015ae6:	4611      	mov	r1, r2
 8015ae8:	461a      	mov	r2, r3
 8015aea:	460b      	mov	r3, r1
 8015aec:	71fb      	strb	r3, [r7, #7]
 8015aee:	4613      	mov	r3, r2
 8015af0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8015af2:	2300      	movs	r3, #0
 8015af4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8015af6:	68bb      	ldr	r3, [r7, #8]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d106      	bne.n	8015b0a <tcp_output_fill_options+0x2e>
 8015afc:	4b12      	ldr	r3, [pc, #72]	@ (8015b48 <tcp_output_fill_options+0x6c>)
 8015afe:	f240 7256 	movw	r2, #1878	@ 0x756
 8015b02:	4912      	ldr	r1, [pc, #72]	@ (8015b4c <tcp_output_fill_options+0x70>)
 8015b04:	4812      	ldr	r0, [pc, #72]	@ (8015b50 <tcp_output_fill_options+0x74>)
 8015b06:	f004 fa7f 	bl	801a008 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015b0a:	68bb      	ldr	r3, [r7, #8]
 8015b0c:	685b      	ldr	r3, [r3, #4]
 8015b0e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015b10:	69bb      	ldr	r3, [r7, #24]
 8015b12:	3314      	adds	r3, #20
 8015b14:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015b16:	8bfb      	ldrh	r3, [r7, #30]
 8015b18:	009b      	lsls	r3, r3, #2
 8015b1a:	461a      	mov	r2, r3
 8015b1c:	79fb      	ldrb	r3, [r7, #7]
 8015b1e:	009b      	lsls	r3, r3, #2
 8015b20:	f003 0304 	and.w	r3, r3, #4
 8015b24:	4413      	add	r3, r2
 8015b26:	3314      	adds	r3, #20
 8015b28:	69ba      	ldr	r2, [r7, #24]
 8015b2a:	4413      	add	r3, r2
 8015b2c:	697a      	ldr	r2, [r7, #20]
 8015b2e:	429a      	cmp	r2, r3
 8015b30:	d006      	beq.n	8015b40 <tcp_output_fill_options+0x64>
 8015b32:	4b05      	ldr	r3, [pc, #20]	@ (8015b48 <tcp_output_fill_options+0x6c>)
 8015b34:	f240 7275 	movw	r2, #1909	@ 0x775
 8015b38:	4906      	ldr	r1, [pc, #24]	@ (8015b54 <tcp_output_fill_options+0x78>)
 8015b3a:	4805      	ldr	r0, [pc, #20]	@ (8015b50 <tcp_output_fill_options+0x74>)
 8015b3c:	f004 fa64 	bl	801a008 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015b40:	bf00      	nop
 8015b42:	3720      	adds	r7, #32
 8015b44:	46bd      	mov	sp, r7
 8015b46:	bd80      	pop	{r7, pc}
 8015b48:	0801c9e4 	.word	0x0801c9e4
 8015b4c:	0801d114 	.word	0x0801d114
 8015b50:	0801ca38 	.word	0x0801ca38
 8015b54:	0801d00c 	.word	0x0801d00c

08015b58 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015b58:	b580      	push	{r7, lr}
 8015b5a:	b08a      	sub	sp, #40	@ 0x28
 8015b5c:	af04      	add	r7, sp, #16
 8015b5e:	60f8      	str	r0, [r7, #12]
 8015b60:	60b9      	str	r1, [r7, #8]
 8015b62:	607a      	str	r2, [r7, #4]
 8015b64:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8015b66:	68bb      	ldr	r3, [r7, #8]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d106      	bne.n	8015b7a <tcp_output_control_segment+0x22>
 8015b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8015be0 <tcp_output_control_segment+0x88>)
 8015b6e:	f240 7287 	movw	r2, #1927	@ 0x787
 8015b72:	491c      	ldr	r1, [pc, #112]	@ (8015be4 <tcp_output_control_segment+0x8c>)
 8015b74:	481c      	ldr	r0, [pc, #112]	@ (8015be8 <tcp_output_control_segment+0x90>)
 8015b76:	f004 fa47 	bl	801a008 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015b7a:	683a      	ldr	r2, [r7, #0]
 8015b7c:	6879      	ldr	r1, [r7, #4]
 8015b7e:	68f8      	ldr	r0, [r7, #12]
 8015b80:	f7fe ff42 	bl	8014a08 <tcp_route>
 8015b84:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8015b86:	693b      	ldr	r3, [r7, #16]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d102      	bne.n	8015b92 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015b8c:	23fc      	movs	r3, #252	@ 0xfc
 8015b8e:	75fb      	strb	r3, [r7, #23]
 8015b90:	e01c      	b.n	8015bcc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d006      	beq.n	8015ba6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	7adb      	ldrb	r3, [r3, #11]
 8015b9c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	7a9b      	ldrb	r3, [r3, #10]
 8015ba2:	757b      	strb	r3, [r7, #21]
 8015ba4:	e003      	b.n	8015bae <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8015ba6:	23ff      	movs	r3, #255	@ 0xff
 8015ba8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8015baa:	2300      	movs	r3, #0
 8015bac:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8015bae:	7dba      	ldrb	r2, [r7, #22]
 8015bb0:	693b      	ldr	r3, [r7, #16]
 8015bb2:	9302      	str	r3, [sp, #8]
 8015bb4:	2306      	movs	r3, #6
 8015bb6:	9301      	str	r3, [sp, #4]
 8015bb8:	7d7b      	ldrb	r3, [r7, #21]
 8015bba:	9300      	str	r3, [sp, #0]
 8015bbc:	4613      	mov	r3, r2
 8015bbe:	683a      	ldr	r2, [r7, #0]
 8015bc0:	6879      	ldr	r1, [r7, #4]
 8015bc2:	68b8      	ldr	r0, [r7, #8]
 8015bc4:	f002 fa4e 	bl	8018064 <ip4_output_if>
 8015bc8:	4603      	mov	r3, r0
 8015bca:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8015bcc:	68b8      	ldr	r0, [r7, #8]
 8015bce:	f7fa fdcd 	bl	801076c <pbuf_free>
  return err;
 8015bd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	3718      	adds	r7, #24
 8015bda:	46bd      	mov	sp, r7
 8015bdc:	bd80      	pop	{r7, pc}
 8015bde:	bf00      	nop
 8015be0:	0801c9e4 	.word	0x0801c9e4
 8015be4:	0801d13c 	.word	0x0801d13c
 8015be8:	0801ca38 	.word	0x0801ca38

08015bec <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8015bec:	b590      	push	{r4, r7, lr}
 8015bee:	b08b      	sub	sp, #44	@ 0x2c
 8015bf0:	af04      	add	r7, sp, #16
 8015bf2:	60f8      	str	r0, [r7, #12]
 8015bf4:	60b9      	str	r1, [r7, #8]
 8015bf6:	607a      	str	r2, [r7, #4]
 8015bf8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015bfa:	683b      	ldr	r3, [r7, #0]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d106      	bne.n	8015c0e <tcp_rst+0x22>
 8015c00:	4b1f      	ldr	r3, [pc, #124]	@ (8015c80 <tcp_rst+0x94>)
 8015c02:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8015c06:	491f      	ldr	r1, [pc, #124]	@ (8015c84 <tcp_rst+0x98>)
 8015c08:	481f      	ldr	r0, [pc, #124]	@ (8015c88 <tcp_rst+0x9c>)
 8015c0a:	f004 f9fd 	bl	801a008 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d106      	bne.n	8015c22 <tcp_rst+0x36>
 8015c14:	4b1a      	ldr	r3, [pc, #104]	@ (8015c80 <tcp_rst+0x94>)
 8015c16:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8015c1a:	491c      	ldr	r1, [pc, #112]	@ (8015c8c <tcp_rst+0xa0>)
 8015c1c:	481a      	ldr	r0, [pc, #104]	@ (8015c88 <tcp_rst+0x9c>)
 8015c1e:	f004 f9f3 	bl	801a008 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015c22:	2300      	movs	r3, #0
 8015c24:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8015c26:	f246 0308 	movw	r3, #24584	@ 0x6008
 8015c2a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015c2c:	7dfb      	ldrb	r3, [r7, #23]
 8015c2e:	b29c      	uxth	r4, r3
 8015c30:	68b8      	ldr	r0, [r7, #8]
 8015c32:	f7f9 f9c3 	bl	800efbc <lwip_htonl>
 8015c36:	4602      	mov	r2, r0
 8015c38:	8abb      	ldrh	r3, [r7, #20]
 8015c3a:	9303      	str	r3, [sp, #12]
 8015c3c:	2314      	movs	r3, #20
 8015c3e:	9302      	str	r3, [sp, #8]
 8015c40:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8015c42:	9301      	str	r3, [sp, #4]
 8015c44:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015c46:	9300      	str	r3, [sp, #0]
 8015c48:	4613      	mov	r3, r2
 8015c4a:	2200      	movs	r2, #0
 8015c4c:	4621      	mov	r1, r4
 8015c4e:	6878      	ldr	r0, [r7, #4]
 8015c50:	f7ff fe94 	bl	801597c <tcp_output_alloc_header_common>
 8015c54:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015c56:	693b      	ldr	r3, [r7, #16]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d00c      	beq.n	8015c76 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015c5c:	7dfb      	ldrb	r3, [r7, #23]
 8015c5e:	2200      	movs	r2, #0
 8015c60:	6939      	ldr	r1, [r7, #16]
 8015c62:	68f8      	ldr	r0, [r7, #12]
 8015c64:	f7ff ff3a 	bl	8015adc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c6a:	683a      	ldr	r2, [r7, #0]
 8015c6c:	6939      	ldr	r1, [r7, #16]
 8015c6e:	68f8      	ldr	r0, [r7, #12]
 8015c70:	f7ff ff72 	bl	8015b58 <tcp_output_control_segment>
 8015c74:	e000      	b.n	8015c78 <tcp_rst+0x8c>
    return;
 8015c76:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015c78:	371c      	adds	r7, #28
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	bd90      	pop	{r4, r7, pc}
 8015c7e:	bf00      	nop
 8015c80:	0801c9e4 	.word	0x0801c9e4
 8015c84:	0801d168 	.word	0x0801d168
 8015c88:	0801ca38 	.word	0x0801ca38
 8015c8c:	0801d184 	.word	0x0801d184

08015c90 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015c90:	b590      	push	{r4, r7, lr}
 8015c92:	b087      	sub	sp, #28
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015c98:	2300      	movs	r3, #0
 8015c9a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d106      	bne.n	8015cb4 <tcp_send_empty_ack+0x24>
 8015ca6:	4b28      	ldr	r3, [pc, #160]	@ (8015d48 <tcp_send_empty_ack+0xb8>)
 8015ca8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8015cac:	4927      	ldr	r1, [pc, #156]	@ (8015d4c <tcp_send_empty_ack+0xbc>)
 8015cae:	4828      	ldr	r0, [pc, #160]	@ (8015d50 <tcp_send_empty_ack+0xc0>)
 8015cb0:	f004 f9aa 	bl	801a008 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015cb4:	7dfb      	ldrb	r3, [r7, #23]
 8015cb6:	009b      	lsls	r3, r3, #2
 8015cb8:	b2db      	uxtb	r3, r3
 8015cba:	f003 0304 	and.w	r3, r3, #4
 8015cbe:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015cc0:	7d7b      	ldrb	r3, [r7, #21]
 8015cc2:	b29c      	uxth	r4, r3
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015cc8:	4618      	mov	r0, r3
 8015cca:	f7f9 f977 	bl	800efbc <lwip_htonl>
 8015cce:	4603      	mov	r3, r0
 8015cd0:	2200      	movs	r2, #0
 8015cd2:	4621      	mov	r1, r4
 8015cd4:	6878      	ldr	r0, [r7, #4]
 8015cd6:	f7ff fec3 	bl	8015a60 <tcp_output_alloc_header>
 8015cda:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015cdc:	693b      	ldr	r3, [r7, #16]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d109      	bne.n	8015cf6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	8b5b      	ldrh	r3, [r3, #26]
 8015ce6:	f043 0303 	orr.w	r3, r3, #3
 8015cea:	b29a      	uxth	r2, r3
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015cf0:	f06f 0301 	mvn.w	r3, #1
 8015cf4:	e023      	b.n	8015d3e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8015cf6:	7dbb      	ldrb	r3, [r7, #22]
 8015cf8:	7dfa      	ldrb	r2, [r7, #23]
 8015cfa:	6939      	ldr	r1, [r7, #16]
 8015cfc:	6878      	ldr	r0, [r7, #4]
 8015cfe:	f7ff feed 	bl	8015adc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015d02:	687a      	ldr	r2, [r7, #4]
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	3304      	adds	r3, #4
 8015d08:	6939      	ldr	r1, [r7, #16]
 8015d0a:	6878      	ldr	r0, [r7, #4]
 8015d0c:	f7ff ff24 	bl	8015b58 <tcp_output_control_segment>
 8015d10:	4603      	mov	r3, r0
 8015d12:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d007      	beq.n	8015d2c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	8b5b      	ldrh	r3, [r3, #26]
 8015d20:	f043 0303 	orr.w	r3, r3, #3
 8015d24:	b29a      	uxth	r2, r3
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	835a      	strh	r2, [r3, #26]
 8015d2a:	e006      	b.n	8015d3a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	8b5b      	ldrh	r3, [r3, #26]
 8015d30:	f023 0303 	bic.w	r3, r3, #3
 8015d34:	b29a      	uxth	r2, r3
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015d3e:	4618      	mov	r0, r3
 8015d40:	371c      	adds	r7, #28
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bd90      	pop	{r4, r7, pc}
 8015d46:	bf00      	nop
 8015d48:	0801c9e4 	.word	0x0801c9e4
 8015d4c:	0801d1a0 	.word	0x0801d1a0
 8015d50:	0801ca38 	.word	0x0801ca38

08015d54 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015d54:	b590      	push	{r4, r7, lr}
 8015d56:	b087      	sub	sp, #28
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d106      	bne.n	8015d74 <tcp_keepalive+0x20>
 8015d66:	4b18      	ldr	r3, [pc, #96]	@ (8015dc8 <tcp_keepalive+0x74>)
 8015d68:	f640 0224 	movw	r2, #2084	@ 0x824
 8015d6c:	4917      	ldr	r1, [pc, #92]	@ (8015dcc <tcp_keepalive+0x78>)
 8015d6e:	4818      	ldr	r0, [pc, #96]	@ (8015dd0 <tcp_keepalive+0x7c>)
 8015d70:	f004 f94a 	bl	801a008 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015d74:	7dfb      	ldrb	r3, [r7, #23]
 8015d76:	b29c      	uxth	r4, r3
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015d7c:	3b01      	subs	r3, #1
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f7f9 f91c 	bl	800efbc <lwip_htonl>
 8015d84:	4603      	mov	r3, r0
 8015d86:	2200      	movs	r2, #0
 8015d88:	4621      	mov	r1, r4
 8015d8a:	6878      	ldr	r0, [r7, #4]
 8015d8c:	f7ff fe68 	bl	8015a60 <tcp_output_alloc_header>
 8015d90:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015d92:	693b      	ldr	r3, [r7, #16]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d102      	bne.n	8015d9e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015d98:	f04f 33ff 	mov.w	r3, #4294967295
 8015d9c:	e010      	b.n	8015dc0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015d9e:	7dfb      	ldrb	r3, [r7, #23]
 8015da0:	2200      	movs	r2, #0
 8015da2:	6939      	ldr	r1, [r7, #16]
 8015da4:	6878      	ldr	r0, [r7, #4]
 8015da6:	f7ff fe99 	bl	8015adc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015daa:	687a      	ldr	r2, [r7, #4]
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	3304      	adds	r3, #4
 8015db0:	6939      	ldr	r1, [r7, #16]
 8015db2:	6878      	ldr	r0, [r7, #4]
 8015db4:	f7ff fed0 	bl	8015b58 <tcp_output_control_segment>
 8015db8:	4603      	mov	r3, r0
 8015dba:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	371c      	adds	r7, #28
 8015dc4:	46bd      	mov	sp, r7
 8015dc6:	bd90      	pop	{r4, r7, pc}
 8015dc8:	0801c9e4 	.word	0x0801c9e4
 8015dcc:	0801d1c0 	.word	0x0801d1c0
 8015dd0:	0801ca38 	.word	0x0801ca38

08015dd4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015dd4:	b590      	push	{r4, r7, lr}
 8015dd6:	b08b      	sub	sp, #44	@ 0x2c
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015ddc:	2300      	movs	r3, #0
 8015dde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d106      	bne.n	8015df6 <tcp_zero_window_probe+0x22>
 8015de8:	4b4c      	ldr	r3, [pc, #304]	@ (8015f1c <tcp_zero_window_probe+0x148>)
 8015dea:	f640 024f 	movw	r2, #2127	@ 0x84f
 8015dee:	494c      	ldr	r1, [pc, #304]	@ (8015f20 <tcp_zero_window_probe+0x14c>)
 8015df0:	484c      	ldr	r0, [pc, #304]	@ (8015f24 <tcp_zero_window_probe+0x150>)
 8015df2:	f004 f909 	bl	801a008 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015dfa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015dfc:	6a3b      	ldr	r3, [r7, #32]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d101      	bne.n	8015e06 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8015e02:	2300      	movs	r3, #0
 8015e04:	e086      	b.n	8015f14 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015e0c:	2bff      	cmp	r3, #255	@ 0xff
 8015e0e:	d007      	beq.n	8015e20 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015e16:	3301      	adds	r3, #1
 8015e18:	b2da      	uxtb	r2, r3
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015e20:	6a3b      	ldr	r3, [r7, #32]
 8015e22:	68db      	ldr	r3, [r3, #12]
 8015e24:	899b      	ldrh	r3, [r3, #12]
 8015e26:	b29b      	uxth	r3, r3
 8015e28:	4618      	mov	r0, r3
 8015e2a:	f7f9 f8b1 	bl	800ef90 <lwip_htons>
 8015e2e:	4603      	mov	r3, r0
 8015e30:	b2db      	uxtb	r3, r3
 8015e32:	f003 0301 	and.w	r3, r3, #1
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d005      	beq.n	8015e46 <tcp_zero_window_probe+0x72>
 8015e3a:	6a3b      	ldr	r3, [r7, #32]
 8015e3c:	891b      	ldrh	r3, [r3, #8]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d101      	bne.n	8015e46 <tcp_zero_window_probe+0x72>
 8015e42:	2301      	movs	r3, #1
 8015e44:	e000      	b.n	8015e48 <tcp_zero_window_probe+0x74>
 8015e46:	2300      	movs	r3, #0
 8015e48:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015e4a:	7ffb      	ldrb	r3, [r7, #31]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	bf0c      	ite	eq
 8015e50:	2301      	moveq	r3, #1
 8015e52:	2300      	movne	r3, #0
 8015e54:	b2db      	uxtb	r3, r3
 8015e56:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015e58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015e5c:	b299      	uxth	r1, r3
 8015e5e:	6a3b      	ldr	r3, [r7, #32]
 8015e60:	68db      	ldr	r3, [r3, #12]
 8015e62:	685b      	ldr	r3, [r3, #4]
 8015e64:	8bba      	ldrh	r2, [r7, #28]
 8015e66:	6878      	ldr	r0, [r7, #4]
 8015e68:	f7ff fdfa 	bl	8015a60 <tcp_output_alloc_header>
 8015e6c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015e6e:	69bb      	ldr	r3, [r7, #24]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d102      	bne.n	8015e7a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015e74:	f04f 33ff 	mov.w	r3, #4294967295
 8015e78:	e04c      	b.n	8015f14 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015e7a:	69bb      	ldr	r3, [r7, #24]
 8015e7c:	685b      	ldr	r3, [r3, #4]
 8015e7e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015e80:	7ffb      	ldrb	r3, [r7, #31]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d011      	beq.n	8015eaa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015e86:	697b      	ldr	r3, [r7, #20]
 8015e88:	899b      	ldrh	r3, [r3, #12]
 8015e8a:	b29b      	uxth	r3, r3
 8015e8c:	b21b      	sxth	r3, r3
 8015e8e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015e92:	b21c      	sxth	r4, r3
 8015e94:	2011      	movs	r0, #17
 8015e96:	f7f9 f87b 	bl	800ef90 <lwip_htons>
 8015e9a:	4603      	mov	r3, r0
 8015e9c:	b21b      	sxth	r3, r3
 8015e9e:	4323      	orrs	r3, r4
 8015ea0:	b21b      	sxth	r3, r3
 8015ea2:	b29a      	uxth	r2, r3
 8015ea4:	697b      	ldr	r3, [r7, #20]
 8015ea6:	819a      	strh	r2, [r3, #12]
 8015ea8:	e010      	b.n	8015ecc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015eaa:	69bb      	ldr	r3, [r7, #24]
 8015eac:	685b      	ldr	r3, [r3, #4]
 8015eae:	3314      	adds	r3, #20
 8015eb0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8015eb2:	6a3b      	ldr	r3, [r7, #32]
 8015eb4:	6858      	ldr	r0, [r3, #4]
 8015eb6:	6a3b      	ldr	r3, [r7, #32]
 8015eb8:	685b      	ldr	r3, [r3, #4]
 8015eba:	891a      	ldrh	r2, [r3, #8]
 8015ebc:	6a3b      	ldr	r3, [r7, #32]
 8015ebe:	891b      	ldrh	r3, [r3, #8]
 8015ec0:	1ad3      	subs	r3, r2, r3
 8015ec2:	b29b      	uxth	r3, r3
 8015ec4:	2201      	movs	r2, #1
 8015ec6:	6939      	ldr	r1, [r7, #16]
 8015ec8:	f7fa fe56 	bl	8010b78 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015ecc:	6a3b      	ldr	r3, [r7, #32]
 8015ece:	68db      	ldr	r3, [r3, #12]
 8015ed0:	685b      	ldr	r3, [r3, #4]
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	f7f9 f872 	bl	800efbc <lwip_htonl>
 8015ed8:	4603      	mov	r3, r0
 8015eda:	3301      	adds	r3, #1
 8015edc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	1ad3      	subs	r3, r2, r3
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	da02      	bge.n	8015ef0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	68fa      	ldr	r2, [r7, #12]
 8015eee:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015ef4:	2200      	movs	r2, #0
 8015ef6:	69b9      	ldr	r1, [r7, #24]
 8015ef8:	6878      	ldr	r0, [r7, #4]
 8015efa:	f7ff fdef 	bl	8015adc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015efe:	687a      	ldr	r2, [r7, #4]
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	3304      	adds	r3, #4
 8015f04:	69b9      	ldr	r1, [r7, #24]
 8015f06:	6878      	ldr	r0, [r7, #4]
 8015f08:	f7ff fe26 	bl	8015b58 <tcp_output_control_segment>
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015f10:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015f14:	4618      	mov	r0, r3
 8015f16:	372c      	adds	r7, #44	@ 0x2c
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	bd90      	pop	{r4, r7, pc}
 8015f1c:	0801c9e4 	.word	0x0801c9e4
 8015f20:	0801d1dc 	.word	0x0801d1dc
 8015f24:	0801ca38 	.word	0x0801ca38

08015f28 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b082      	sub	sp, #8
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015f30:	f7fa ff10 	bl	8010d54 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015f34:	4b0a      	ldr	r3, [pc, #40]	@ (8015f60 <tcpip_tcp_timer+0x38>)
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d103      	bne.n	8015f44 <tcpip_tcp_timer+0x1c>
 8015f3c:	4b09      	ldr	r3, [pc, #36]	@ (8015f64 <tcpip_tcp_timer+0x3c>)
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d005      	beq.n	8015f50 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015f44:	2200      	movs	r2, #0
 8015f46:	4908      	ldr	r1, [pc, #32]	@ (8015f68 <tcpip_tcp_timer+0x40>)
 8015f48:	20fa      	movs	r0, #250	@ 0xfa
 8015f4a:	f000 f8f3 	bl	8016134 <sys_timeout>
 8015f4e:	e003      	b.n	8015f58 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015f50:	4b06      	ldr	r3, [pc, #24]	@ (8015f6c <tcpip_tcp_timer+0x44>)
 8015f52:	2200      	movs	r2, #0
 8015f54:	601a      	str	r2, [r3, #0]
  }
}
 8015f56:	bf00      	nop
 8015f58:	bf00      	nop
 8015f5a:	3708      	adds	r7, #8
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	bd80      	pop	{r7, pc}
 8015f60:	200274b8 	.word	0x200274b8
 8015f64:	200274bc 	.word	0x200274bc
 8015f68:	08015f29 	.word	0x08015f29
 8015f6c:	20027504 	.word	0x20027504

08015f70 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015f70:	b580      	push	{r7, lr}
 8015f72:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015f74:	4b0a      	ldr	r3, [pc, #40]	@ (8015fa0 <tcp_timer_needed+0x30>)
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d10f      	bne.n	8015f9c <tcp_timer_needed+0x2c>
 8015f7c:	4b09      	ldr	r3, [pc, #36]	@ (8015fa4 <tcp_timer_needed+0x34>)
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d103      	bne.n	8015f8c <tcp_timer_needed+0x1c>
 8015f84:	4b08      	ldr	r3, [pc, #32]	@ (8015fa8 <tcp_timer_needed+0x38>)
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d007      	beq.n	8015f9c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015f8c:	4b04      	ldr	r3, [pc, #16]	@ (8015fa0 <tcp_timer_needed+0x30>)
 8015f8e:	2201      	movs	r2, #1
 8015f90:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015f92:	2200      	movs	r2, #0
 8015f94:	4905      	ldr	r1, [pc, #20]	@ (8015fac <tcp_timer_needed+0x3c>)
 8015f96:	20fa      	movs	r0, #250	@ 0xfa
 8015f98:	f000 f8cc 	bl	8016134 <sys_timeout>
  }
}
 8015f9c:	bf00      	nop
 8015f9e:	bd80      	pop	{r7, pc}
 8015fa0:	20027504 	.word	0x20027504
 8015fa4:	200274b8 	.word	0x200274b8
 8015fa8:	200274bc 	.word	0x200274bc
 8015fac:	08015f29 	.word	0x08015f29

08015fb0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015fb0:	b580      	push	{r7, lr}
 8015fb2:	b086      	sub	sp, #24
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	60f8      	str	r0, [r7, #12]
 8015fb8:	60b9      	str	r1, [r7, #8]
 8015fba:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015fbc:	200a      	movs	r0, #10
 8015fbe:	f7f9 fcbb 	bl	800f938 <memp_malloc>
 8015fc2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015fc4:	693b      	ldr	r3, [r7, #16]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d109      	bne.n	8015fde <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015fca:	693b      	ldr	r3, [r7, #16]
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d151      	bne.n	8016074 <sys_timeout_abs+0xc4>
 8015fd0:	4b2a      	ldr	r3, [pc, #168]	@ (801607c <sys_timeout_abs+0xcc>)
 8015fd2:	22be      	movs	r2, #190	@ 0xbe
 8015fd4:	492a      	ldr	r1, [pc, #168]	@ (8016080 <sys_timeout_abs+0xd0>)
 8015fd6:	482b      	ldr	r0, [pc, #172]	@ (8016084 <sys_timeout_abs+0xd4>)
 8015fd8:	f004 f816 	bl	801a008 <iprintf>
    return;
 8015fdc:	e04a      	b.n	8016074 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015fde:	693b      	ldr	r3, [r7, #16]
 8015fe0:	2200      	movs	r2, #0
 8015fe2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8015fe4:	693b      	ldr	r3, [r7, #16]
 8015fe6:	68ba      	ldr	r2, [r7, #8]
 8015fe8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015fea:	693b      	ldr	r3, [r7, #16]
 8015fec:	687a      	ldr	r2, [r7, #4]
 8015fee:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015ff0:	693b      	ldr	r3, [r7, #16]
 8015ff2:	68fa      	ldr	r2, [r7, #12]
 8015ff4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8015ff6:	4b24      	ldr	r3, [pc, #144]	@ (8016088 <sys_timeout_abs+0xd8>)
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d103      	bne.n	8016006 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015ffe:	4a22      	ldr	r2, [pc, #136]	@ (8016088 <sys_timeout_abs+0xd8>)
 8016000:	693b      	ldr	r3, [r7, #16]
 8016002:	6013      	str	r3, [r2, #0]
    return;
 8016004:	e037      	b.n	8016076 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8016006:	693b      	ldr	r3, [r7, #16]
 8016008:	685a      	ldr	r2, [r3, #4]
 801600a:	4b1f      	ldr	r3, [pc, #124]	@ (8016088 <sys_timeout_abs+0xd8>)
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	685b      	ldr	r3, [r3, #4]
 8016010:	1ad3      	subs	r3, r2, r3
 8016012:	0fdb      	lsrs	r3, r3, #31
 8016014:	f003 0301 	and.w	r3, r3, #1
 8016018:	b2db      	uxtb	r3, r3
 801601a:	2b00      	cmp	r3, #0
 801601c:	d007      	beq.n	801602e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801601e:	4b1a      	ldr	r3, [pc, #104]	@ (8016088 <sys_timeout_abs+0xd8>)
 8016020:	681a      	ldr	r2, [r3, #0]
 8016022:	693b      	ldr	r3, [r7, #16]
 8016024:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8016026:	4a18      	ldr	r2, [pc, #96]	@ (8016088 <sys_timeout_abs+0xd8>)
 8016028:	693b      	ldr	r3, [r7, #16]
 801602a:	6013      	str	r3, [r2, #0]
 801602c:	e023      	b.n	8016076 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801602e:	4b16      	ldr	r3, [pc, #88]	@ (8016088 <sys_timeout_abs+0xd8>)
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	617b      	str	r3, [r7, #20]
 8016034:	e01a      	b.n	801606c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8016036:	697b      	ldr	r3, [r7, #20]
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d00b      	beq.n	8016056 <sys_timeout_abs+0xa6>
 801603e:	693b      	ldr	r3, [r7, #16]
 8016040:	685a      	ldr	r2, [r3, #4]
 8016042:	697b      	ldr	r3, [r7, #20]
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	685b      	ldr	r3, [r3, #4]
 8016048:	1ad3      	subs	r3, r2, r3
 801604a:	0fdb      	lsrs	r3, r3, #31
 801604c:	f003 0301 	and.w	r3, r3, #1
 8016050:	b2db      	uxtb	r3, r3
 8016052:	2b00      	cmp	r3, #0
 8016054:	d007      	beq.n	8016066 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8016056:	697b      	ldr	r3, [r7, #20]
 8016058:	681a      	ldr	r2, [r3, #0]
 801605a:	693b      	ldr	r3, [r7, #16]
 801605c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801605e:	697b      	ldr	r3, [r7, #20]
 8016060:	693a      	ldr	r2, [r7, #16]
 8016062:	601a      	str	r2, [r3, #0]
        break;
 8016064:	e007      	b.n	8016076 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016066:	697b      	ldr	r3, [r7, #20]
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	617b      	str	r3, [r7, #20]
 801606c:	697b      	ldr	r3, [r7, #20]
 801606e:	2b00      	cmp	r3, #0
 8016070:	d1e1      	bne.n	8016036 <sys_timeout_abs+0x86>
 8016072:	e000      	b.n	8016076 <sys_timeout_abs+0xc6>
    return;
 8016074:	bf00      	nop
      }
    }
  }
}
 8016076:	3718      	adds	r7, #24
 8016078:	46bd      	mov	sp, r7
 801607a:	bd80      	pop	{r7, pc}
 801607c:	0801d200 	.word	0x0801d200
 8016080:	0801d234 	.word	0x0801d234
 8016084:	0801d274 	.word	0x0801d274
 8016088:	200274fc 	.word	0x200274fc

0801608c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801608c:	b580      	push	{r7, lr}
 801608e:	b086      	sub	sp, #24
 8016090:	af00      	add	r7, sp, #0
 8016092:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016098:	697b      	ldr	r3, [r7, #20]
 801609a:	685b      	ldr	r3, [r3, #4]
 801609c:	4798      	blx	r3

  now = sys_now();
 801609e:	f7f4 facd 	bl	800a63c <sys_now>
 80160a2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80160a4:	697b      	ldr	r3, [r7, #20]
 80160a6:	681a      	ldr	r2, [r3, #0]
 80160a8:	4b0f      	ldr	r3, [pc, #60]	@ (80160e8 <lwip_cyclic_timer+0x5c>)
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	4413      	add	r3, r2
 80160ae:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80160b0:	68fa      	ldr	r2, [r7, #12]
 80160b2:	693b      	ldr	r3, [r7, #16]
 80160b4:	1ad3      	subs	r3, r2, r3
 80160b6:	0fdb      	lsrs	r3, r3, #31
 80160b8:	f003 0301 	and.w	r3, r3, #1
 80160bc:	b2db      	uxtb	r3, r3
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d009      	beq.n	80160d6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80160c2:	697b      	ldr	r3, [r7, #20]
 80160c4:	681a      	ldr	r2, [r3, #0]
 80160c6:	693b      	ldr	r3, [r7, #16]
 80160c8:	4413      	add	r3, r2
 80160ca:	687a      	ldr	r2, [r7, #4]
 80160cc:	4907      	ldr	r1, [pc, #28]	@ (80160ec <lwip_cyclic_timer+0x60>)
 80160ce:	4618      	mov	r0, r3
 80160d0:	f7ff ff6e 	bl	8015fb0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80160d4:	e004      	b.n	80160e0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80160d6:	687a      	ldr	r2, [r7, #4]
 80160d8:	4904      	ldr	r1, [pc, #16]	@ (80160ec <lwip_cyclic_timer+0x60>)
 80160da:	68f8      	ldr	r0, [r7, #12]
 80160dc:	f7ff ff68 	bl	8015fb0 <sys_timeout_abs>
}
 80160e0:	bf00      	nop
 80160e2:	3718      	adds	r7, #24
 80160e4:	46bd      	mov	sp, r7
 80160e6:	bd80      	pop	{r7, pc}
 80160e8:	20027500 	.word	0x20027500
 80160ec:	0801608d 	.word	0x0801608d

080160f0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80160f0:	b580      	push	{r7, lr}
 80160f2:	b082      	sub	sp, #8
 80160f4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80160f6:	2301      	movs	r3, #1
 80160f8:	607b      	str	r3, [r7, #4]
 80160fa:	e00e      	b.n	801611a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80160fc:	4a0b      	ldr	r2, [pc, #44]	@ (801612c <sys_timeouts_init+0x3c>)
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	00db      	lsls	r3, r3, #3
 8016108:	4a08      	ldr	r2, [pc, #32]	@ (801612c <sys_timeouts_init+0x3c>)
 801610a:	4413      	add	r3, r2
 801610c:	461a      	mov	r2, r3
 801610e:	4908      	ldr	r1, [pc, #32]	@ (8016130 <sys_timeouts_init+0x40>)
 8016110:	f000 f810 	bl	8016134 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	3301      	adds	r3, #1
 8016118:	607b      	str	r3, [r7, #4]
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	2b02      	cmp	r3, #2
 801611e:	d9ed      	bls.n	80160fc <sys_timeouts_init+0xc>
  }
}
 8016120:	bf00      	nop
 8016122:	bf00      	nop
 8016124:	3708      	adds	r7, #8
 8016126:	46bd      	mov	sp, r7
 8016128:	bd80      	pop	{r7, pc}
 801612a:	bf00      	nop
 801612c:	0801e2a0 	.word	0x0801e2a0
 8016130:	0801608d 	.word	0x0801608d

08016134 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016134:	b580      	push	{r7, lr}
 8016136:	b086      	sub	sp, #24
 8016138:	af00      	add	r7, sp, #0
 801613a:	60f8      	str	r0, [r7, #12]
 801613c:	60b9      	str	r1, [r7, #8]
 801613e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016146:	d306      	bcc.n	8016156 <sys_timeout+0x22>
 8016148:	4b0a      	ldr	r3, [pc, #40]	@ (8016174 <sys_timeout+0x40>)
 801614a:	f240 1229 	movw	r2, #297	@ 0x129
 801614e:	490a      	ldr	r1, [pc, #40]	@ (8016178 <sys_timeout+0x44>)
 8016150:	480a      	ldr	r0, [pc, #40]	@ (801617c <sys_timeout+0x48>)
 8016152:	f003 ff59 	bl	801a008 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8016156:	f7f4 fa71 	bl	800a63c <sys_now>
 801615a:	4602      	mov	r2, r0
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	4413      	add	r3, r2
 8016160:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8016162:	687a      	ldr	r2, [r7, #4]
 8016164:	68b9      	ldr	r1, [r7, #8]
 8016166:	6978      	ldr	r0, [r7, #20]
 8016168:	f7ff ff22 	bl	8015fb0 <sys_timeout_abs>
#endif
}
 801616c:	bf00      	nop
 801616e:	3718      	adds	r7, #24
 8016170:	46bd      	mov	sp, r7
 8016172:	bd80      	pop	{r7, pc}
 8016174:	0801d200 	.word	0x0801d200
 8016178:	0801d29c 	.word	0x0801d29c
 801617c:	0801d274 	.word	0x0801d274

08016180 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016180:	b580      	push	{r7, lr}
 8016182:	b084      	sub	sp, #16
 8016184:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8016186:	f7f4 fa59 	bl	800a63c <sys_now>
 801618a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801618c:	4b17      	ldr	r3, [pc, #92]	@ (80161ec <sys_check_timeouts+0x6c>)
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8016192:	68bb      	ldr	r3, [r7, #8]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d022      	beq.n	80161de <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8016198:	68bb      	ldr	r3, [r7, #8]
 801619a:	685b      	ldr	r3, [r3, #4]
 801619c:	68fa      	ldr	r2, [r7, #12]
 801619e:	1ad3      	subs	r3, r2, r3
 80161a0:	0fdb      	lsrs	r3, r3, #31
 80161a2:	f003 0301 	and.w	r3, r3, #1
 80161a6:	b2db      	uxtb	r3, r3
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d11a      	bne.n	80161e2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80161ac:	68bb      	ldr	r3, [r7, #8]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	4a0e      	ldr	r2, [pc, #56]	@ (80161ec <sys_check_timeouts+0x6c>)
 80161b2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80161b4:	68bb      	ldr	r3, [r7, #8]
 80161b6:	689b      	ldr	r3, [r3, #8]
 80161b8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80161ba:	68bb      	ldr	r3, [r7, #8]
 80161bc:	68db      	ldr	r3, [r3, #12]
 80161be:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80161c0:	68bb      	ldr	r3, [r7, #8]
 80161c2:	685b      	ldr	r3, [r3, #4]
 80161c4:	4a0a      	ldr	r2, [pc, #40]	@ (80161f0 <sys_check_timeouts+0x70>)
 80161c6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80161c8:	68b9      	ldr	r1, [r7, #8]
 80161ca:	200a      	movs	r0, #10
 80161cc:	f7f9 fc2a 	bl	800fa24 <memp_free>
    if (handler != NULL) {
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d0da      	beq.n	801618c <sys_check_timeouts+0xc>
      handler(arg);
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	6838      	ldr	r0, [r7, #0]
 80161da:	4798      	blx	r3
  do {
 80161dc:	e7d6      	b.n	801618c <sys_check_timeouts+0xc>
      return;
 80161de:	bf00      	nop
 80161e0:	e000      	b.n	80161e4 <sys_check_timeouts+0x64>
      return;
 80161e2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80161e4:	3710      	adds	r7, #16
 80161e6:	46bd      	mov	sp, r7
 80161e8:	bd80      	pop	{r7, pc}
 80161ea:	bf00      	nop
 80161ec:	200274fc 	.word	0x200274fc
 80161f0:	20027500 	.word	0x20027500

080161f4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b082      	sub	sp, #8
 80161f8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80161fa:	4b16      	ldr	r3, [pc, #88]	@ (8016254 <sys_timeouts_sleeptime+0x60>)
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d102      	bne.n	8016208 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8016202:	f04f 33ff 	mov.w	r3, #4294967295
 8016206:	e020      	b.n	801624a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8016208:	f7f4 fa18 	bl	800a63c <sys_now>
 801620c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801620e:	4b11      	ldr	r3, [pc, #68]	@ (8016254 <sys_timeouts_sleeptime+0x60>)
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	685a      	ldr	r2, [r3, #4]
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	1ad3      	subs	r3, r2, r3
 8016218:	0fdb      	lsrs	r3, r3, #31
 801621a:	f003 0301 	and.w	r3, r3, #1
 801621e:	b2db      	uxtb	r3, r3
 8016220:	2b00      	cmp	r3, #0
 8016222:	d001      	beq.n	8016228 <sys_timeouts_sleeptime+0x34>
    return 0;
 8016224:	2300      	movs	r3, #0
 8016226:	e010      	b.n	801624a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8016228:	4b0a      	ldr	r3, [pc, #40]	@ (8016254 <sys_timeouts_sleeptime+0x60>)
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	685a      	ldr	r2, [r3, #4]
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	1ad3      	subs	r3, r2, r3
 8016232:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8016234:	683b      	ldr	r3, [r7, #0]
 8016236:	2b00      	cmp	r3, #0
 8016238:	da06      	bge.n	8016248 <sys_timeouts_sleeptime+0x54>
 801623a:	4b07      	ldr	r3, [pc, #28]	@ (8016258 <sys_timeouts_sleeptime+0x64>)
 801623c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8016240:	4906      	ldr	r1, [pc, #24]	@ (801625c <sys_timeouts_sleeptime+0x68>)
 8016242:	4807      	ldr	r0, [pc, #28]	@ (8016260 <sys_timeouts_sleeptime+0x6c>)
 8016244:	f003 fee0 	bl	801a008 <iprintf>
    return ret;
 8016248:	683b      	ldr	r3, [r7, #0]
  }
}
 801624a:	4618      	mov	r0, r3
 801624c:	3708      	adds	r7, #8
 801624e:	46bd      	mov	sp, r7
 8016250:	bd80      	pop	{r7, pc}
 8016252:	bf00      	nop
 8016254:	200274fc 	.word	0x200274fc
 8016258:	0801d200 	.word	0x0801d200
 801625c:	0801d2d4 	.word	0x0801d2d4
 8016260:	0801d274 	.word	0x0801d274

08016264 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016264:	b580      	push	{r7, lr}
 8016266:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016268:	f003 fdce 	bl	8019e08 <rand>
 801626c:	4603      	mov	r3, r0
 801626e:	b29b      	uxth	r3, r3
 8016270:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016274:	b29b      	uxth	r3, r3
 8016276:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801627a:	b29a      	uxth	r2, r3
 801627c:	4b01      	ldr	r3, [pc, #4]	@ (8016284 <udp_init+0x20>)
 801627e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016280:	bf00      	nop
 8016282:	bd80      	pop	{r7, pc}
 8016284:	2000002c 	.word	0x2000002c

08016288 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016288:	b480      	push	{r7}
 801628a:	b083      	sub	sp, #12
 801628c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801628e:	2300      	movs	r3, #0
 8016290:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8016292:	4b17      	ldr	r3, [pc, #92]	@ (80162f0 <udp_new_port+0x68>)
 8016294:	881b      	ldrh	r3, [r3, #0]
 8016296:	1c5a      	adds	r2, r3, #1
 8016298:	b291      	uxth	r1, r2
 801629a:	4a15      	ldr	r2, [pc, #84]	@ (80162f0 <udp_new_port+0x68>)
 801629c:	8011      	strh	r1, [r2, #0]
 801629e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80162a2:	4293      	cmp	r3, r2
 80162a4:	d103      	bne.n	80162ae <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80162a6:	4b12      	ldr	r3, [pc, #72]	@ (80162f0 <udp_new_port+0x68>)
 80162a8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80162ac:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80162ae:	4b11      	ldr	r3, [pc, #68]	@ (80162f4 <udp_new_port+0x6c>)
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	603b      	str	r3, [r7, #0]
 80162b4:	e011      	b.n	80162da <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80162b6:	683b      	ldr	r3, [r7, #0]
 80162b8:	8a5a      	ldrh	r2, [r3, #18]
 80162ba:	4b0d      	ldr	r3, [pc, #52]	@ (80162f0 <udp_new_port+0x68>)
 80162bc:	881b      	ldrh	r3, [r3, #0]
 80162be:	429a      	cmp	r2, r3
 80162c0:	d108      	bne.n	80162d4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80162c2:	88fb      	ldrh	r3, [r7, #6]
 80162c4:	3301      	adds	r3, #1
 80162c6:	80fb      	strh	r3, [r7, #6]
 80162c8:	88fb      	ldrh	r3, [r7, #6]
 80162ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80162ce:	d3e0      	bcc.n	8016292 <udp_new_port+0xa>
        return 0;
 80162d0:	2300      	movs	r3, #0
 80162d2:	e007      	b.n	80162e4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80162d4:	683b      	ldr	r3, [r7, #0]
 80162d6:	68db      	ldr	r3, [r3, #12]
 80162d8:	603b      	str	r3, [r7, #0]
 80162da:	683b      	ldr	r3, [r7, #0]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d1ea      	bne.n	80162b6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80162e0:	4b03      	ldr	r3, [pc, #12]	@ (80162f0 <udp_new_port+0x68>)
 80162e2:	881b      	ldrh	r3, [r3, #0]
}
 80162e4:	4618      	mov	r0, r3
 80162e6:	370c      	adds	r7, #12
 80162e8:	46bd      	mov	sp, r7
 80162ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ee:	4770      	bx	lr
 80162f0:	2000002c 	.word	0x2000002c
 80162f4:	20027508 	.word	0x20027508

080162f8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80162f8:	b580      	push	{r7, lr}
 80162fa:	b084      	sub	sp, #16
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	60f8      	str	r0, [r7, #12]
 8016300:	60b9      	str	r1, [r7, #8]
 8016302:	4613      	mov	r3, r2
 8016304:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d105      	bne.n	8016318 <udp_input_local_match+0x20>
 801630c:	4b27      	ldr	r3, [pc, #156]	@ (80163ac <udp_input_local_match+0xb4>)
 801630e:	2287      	movs	r2, #135	@ 0x87
 8016310:	4927      	ldr	r1, [pc, #156]	@ (80163b0 <udp_input_local_match+0xb8>)
 8016312:	4828      	ldr	r0, [pc, #160]	@ (80163b4 <udp_input_local_match+0xbc>)
 8016314:	f003 fe78 	bl	801a008 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016318:	68bb      	ldr	r3, [r7, #8]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d105      	bne.n	801632a <udp_input_local_match+0x32>
 801631e:	4b23      	ldr	r3, [pc, #140]	@ (80163ac <udp_input_local_match+0xb4>)
 8016320:	2288      	movs	r2, #136	@ 0x88
 8016322:	4925      	ldr	r1, [pc, #148]	@ (80163b8 <udp_input_local_match+0xc0>)
 8016324:	4823      	ldr	r0, [pc, #140]	@ (80163b4 <udp_input_local_match+0xbc>)
 8016326:	f003 fe6f 	bl	801a008 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	7a1b      	ldrb	r3, [r3, #8]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d00b      	beq.n	801634a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	7a1a      	ldrb	r2, [r3, #8]
 8016336:	4b21      	ldr	r3, [pc, #132]	@ (80163bc <udp_input_local_match+0xc4>)
 8016338:	685b      	ldr	r3, [r3, #4]
 801633a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801633e:	3301      	adds	r3, #1
 8016340:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016342:	429a      	cmp	r2, r3
 8016344:	d001      	beq.n	801634a <udp_input_local_match+0x52>
    return 0;
 8016346:	2300      	movs	r3, #0
 8016348:	e02b      	b.n	80163a2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801634a:	79fb      	ldrb	r3, [r7, #7]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d018      	beq.n	8016382 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d013      	beq.n	801637e <udp_input_local_match+0x86>
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	681b      	ldr	r3, [r3, #0]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d00f      	beq.n	801637e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801635e:	4b17      	ldr	r3, [pc, #92]	@ (80163bc <udp_input_local_match+0xc4>)
 8016360:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016366:	d00a      	beq.n	801637e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	681a      	ldr	r2, [r3, #0]
 801636c:	4b13      	ldr	r3, [pc, #76]	@ (80163bc <udp_input_local_match+0xc4>)
 801636e:	695b      	ldr	r3, [r3, #20]
 8016370:	405a      	eors	r2, r3
 8016372:	68bb      	ldr	r3, [r7, #8]
 8016374:	3308      	adds	r3, #8
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801637a:	2b00      	cmp	r3, #0
 801637c:	d110      	bne.n	80163a0 <udp_input_local_match+0xa8>
          return 1;
 801637e:	2301      	movs	r3, #1
 8016380:	e00f      	b.n	80163a2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d009      	beq.n	801639c <udp_input_local_match+0xa4>
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d005      	beq.n	801639c <udp_input_local_match+0xa4>
 8016390:	68fb      	ldr	r3, [r7, #12]
 8016392:	681a      	ldr	r2, [r3, #0]
 8016394:	4b09      	ldr	r3, [pc, #36]	@ (80163bc <udp_input_local_match+0xc4>)
 8016396:	695b      	ldr	r3, [r3, #20]
 8016398:	429a      	cmp	r2, r3
 801639a:	d101      	bne.n	80163a0 <udp_input_local_match+0xa8>
        return 1;
 801639c:	2301      	movs	r3, #1
 801639e:	e000      	b.n	80163a2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80163a0:	2300      	movs	r3, #0
}
 80163a2:	4618      	mov	r0, r3
 80163a4:	3710      	adds	r7, #16
 80163a6:	46bd      	mov	sp, r7
 80163a8:	bd80      	pop	{r7, pc}
 80163aa:	bf00      	nop
 80163ac:	0801d2e8 	.word	0x0801d2e8
 80163b0:	0801d318 	.word	0x0801d318
 80163b4:	0801d33c 	.word	0x0801d33c
 80163b8:	0801d364 	.word	0x0801d364
 80163bc:	200243ac 	.word	0x200243ac

080163c0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80163c0:	b590      	push	{r4, r7, lr}
 80163c2:	b08d      	sub	sp, #52	@ 0x34
 80163c4:	af02      	add	r7, sp, #8
 80163c6:	6078      	str	r0, [r7, #4]
 80163c8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80163ca:	2300      	movs	r3, #0
 80163cc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	d105      	bne.n	80163e0 <udp_input+0x20>
 80163d4:	4b7c      	ldr	r3, [pc, #496]	@ (80165c8 <udp_input+0x208>)
 80163d6:	22cf      	movs	r2, #207	@ 0xcf
 80163d8:	497c      	ldr	r1, [pc, #496]	@ (80165cc <udp_input+0x20c>)
 80163da:	487d      	ldr	r0, [pc, #500]	@ (80165d0 <udp_input+0x210>)
 80163dc:	f003 fe14 	bl	801a008 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80163e0:	683b      	ldr	r3, [r7, #0]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d105      	bne.n	80163f2 <udp_input+0x32>
 80163e6:	4b78      	ldr	r3, [pc, #480]	@ (80165c8 <udp_input+0x208>)
 80163e8:	22d0      	movs	r2, #208	@ 0xd0
 80163ea:	497a      	ldr	r1, [pc, #488]	@ (80165d4 <udp_input+0x214>)
 80163ec:	4878      	ldr	r0, [pc, #480]	@ (80165d0 <udp_input+0x210>)
 80163ee:	f003 fe0b 	bl	801a008 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	895b      	ldrh	r3, [r3, #10]
 80163f6:	2b07      	cmp	r3, #7
 80163f8:	d803      	bhi.n	8016402 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80163fa:	6878      	ldr	r0, [r7, #4]
 80163fc:	f7fa f9b6 	bl	801076c <pbuf_free>
    goto end;
 8016400:	e0de      	b.n	80165c0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	685b      	ldr	r3, [r3, #4]
 8016406:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016408:	4b73      	ldr	r3, [pc, #460]	@ (80165d8 <udp_input+0x218>)
 801640a:	695b      	ldr	r3, [r3, #20]
 801640c:	4a72      	ldr	r2, [pc, #456]	@ (80165d8 <udp_input+0x218>)
 801640e:	6812      	ldr	r2, [r2, #0]
 8016410:	4611      	mov	r1, r2
 8016412:	4618      	mov	r0, r3
 8016414:	f001 fefe 	bl	8018214 <ip4_addr_isbroadcast_u32>
 8016418:	4603      	mov	r3, r0
 801641a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801641c:	697b      	ldr	r3, [r7, #20]
 801641e:	881b      	ldrh	r3, [r3, #0]
 8016420:	b29b      	uxth	r3, r3
 8016422:	4618      	mov	r0, r3
 8016424:	f7f8 fdb4 	bl	800ef90 <lwip_htons>
 8016428:	4603      	mov	r3, r0
 801642a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801642c:	697b      	ldr	r3, [r7, #20]
 801642e:	885b      	ldrh	r3, [r3, #2]
 8016430:	b29b      	uxth	r3, r3
 8016432:	4618      	mov	r0, r3
 8016434:	f7f8 fdac 	bl	800ef90 <lwip_htons>
 8016438:	4603      	mov	r3, r0
 801643a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801643c:	2300      	movs	r3, #0
 801643e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8016440:	2300      	movs	r3, #0
 8016442:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016444:	2300      	movs	r3, #0
 8016446:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016448:	4b64      	ldr	r3, [pc, #400]	@ (80165dc <udp_input+0x21c>)
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	627b      	str	r3, [r7, #36]	@ 0x24
 801644e:	e054      	b.n	80164fa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016452:	8a5b      	ldrh	r3, [r3, #18]
 8016454:	89fa      	ldrh	r2, [r7, #14]
 8016456:	429a      	cmp	r2, r3
 8016458:	d14a      	bne.n	80164f0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801645a:	7cfb      	ldrb	r3, [r7, #19]
 801645c:	461a      	mov	r2, r3
 801645e:	6839      	ldr	r1, [r7, #0]
 8016460:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016462:	f7ff ff49 	bl	80162f8 <udp_input_local_match>
 8016466:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016468:	2b00      	cmp	r3, #0
 801646a:	d041      	beq.n	80164f0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801646c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801646e:	7c1b      	ldrb	r3, [r3, #16]
 8016470:	f003 0304 	and.w	r3, r3, #4
 8016474:	2b00      	cmp	r3, #0
 8016476:	d11d      	bne.n	80164b4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016478:	69fb      	ldr	r3, [r7, #28]
 801647a:	2b00      	cmp	r3, #0
 801647c:	d102      	bne.n	8016484 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801647e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016480:	61fb      	str	r3, [r7, #28]
 8016482:	e017      	b.n	80164b4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016484:	7cfb      	ldrb	r3, [r7, #19]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d014      	beq.n	80164b4 <udp_input+0xf4>
 801648a:	4b53      	ldr	r3, [pc, #332]	@ (80165d8 <udp_input+0x218>)
 801648c:	695b      	ldr	r3, [r3, #20]
 801648e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016492:	d10f      	bne.n	80164b4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016494:	69fb      	ldr	r3, [r7, #28]
 8016496:	681a      	ldr	r2, [r3, #0]
 8016498:	683b      	ldr	r3, [r7, #0]
 801649a:	3304      	adds	r3, #4
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	429a      	cmp	r2, r3
 80164a0:	d008      	beq.n	80164b4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80164a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164a4:	681a      	ldr	r2, [r3, #0]
 80164a6:	683b      	ldr	r3, [r7, #0]
 80164a8:	3304      	adds	r3, #4
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	429a      	cmp	r2, r3
 80164ae:	d101      	bne.n	80164b4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80164b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164b2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80164b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164b6:	8a9b      	ldrh	r3, [r3, #20]
 80164b8:	8a3a      	ldrh	r2, [r7, #16]
 80164ba:	429a      	cmp	r2, r3
 80164bc:	d118      	bne.n	80164f0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80164be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164c0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d005      	beq.n	80164d2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80164c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164c8:	685a      	ldr	r2, [r3, #4]
 80164ca:	4b43      	ldr	r3, [pc, #268]	@ (80165d8 <udp_input+0x218>)
 80164cc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80164ce:	429a      	cmp	r2, r3
 80164d0:	d10e      	bne.n	80164f0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80164d2:	6a3b      	ldr	r3, [r7, #32]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d014      	beq.n	8016502 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80164d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164da:	68da      	ldr	r2, [r3, #12]
 80164dc:	6a3b      	ldr	r3, [r7, #32]
 80164de:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80164e0:	4b3e      	ldr	r3, [pc, #248]	@ (80165dc <udp_input+0x21c>)
 80164e2:	681a      	ldr	r2, [r3, #0]
 80164e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164e6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80164e8:	4a3c      	ldr	r2, [pc, #240]	@ (80165dc <udp_input+0x21c>)
 80164ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164ec:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80164ee:	e008      	b.n	8016502 <udp_input+0x142>
      }
    }

    prev = pcb;
 80164f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164f2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80164f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164f6:	68db      	ldr	r3, [r3, #12]
 80164f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80164fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d1a7      	bne.n	8016450 <udp_input+0x90>
 8016500:	e000      	b.n	8016504 <udp_input+0x144>
        break;
 8016502:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016506:	2b00      	cmp	r3, #0
 8016508:	d101      	bne.n	801650e <udp_input+0x14e>
    pcb = uncon_pcb;
 801650a:	69fb      	ldr	r3, [r7, #28]
 801650c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801650e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016510:	2b00      	cmp	r3, #0
 8016512:	d002      	beq.n	801651a <udp_input+0x15a>
    for_us = 1;
 8016514:	2301      	movs	r3, #1
 8016516:	76fb      	strb	r3, [r7, #27]
 8016518:	e00a      	b.n	8016530 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801651a:	683b      	ldr	r3, [r7, #0]
 801651c:	3304      	adds	r3, #4
 801651e:	681a      	ldr	r2, [r3, #0]
 8016520:	4b2d      	ldr	r3, [pc, #180]	@ (80165d8 <udp_input+0x218>)
 8016522:	695b      	ldr	r3, [r3, #20]
 8016524:	429a      	cmp	r2, r3
 8016526:	bf0c      	ite	eq
 8016528:	2301      	moveq	r3, #1
 801652a:	2300      	movne	r3, #0
 801652c:	b2db      	uxtb	r3, r3
 801652e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016530:	7efb      	ldrb	r3, [r7, #27]
 8016532:	2b00      	cmp	r3, #0
 8016534:	d041      	beq.n	80165ba <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016536:	2108      	movs	r1, #8
 8016538:	6878      	ldr	r0, [r7, #4]
 801653a:	f7fa f891 	bl	8010660 <pbuf_remove_header>
 801653e:	4603      	mov	r3, r0
 8016540:	2b00      	cmp	r3, #0
 8016542:	d00a      	beq.n	801655a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016544:	4b20      	ldr	r3, [pc, #128]	@ (80165c8 <udp_input+0x208>)
 8016546:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801654a:	4925      	ldr	r1, [pc, #148]	@ (80165e0 <udp_input+0x220>)
 801654c:	4820      	ldr	r0, [pc, #128]	@ (80165d0 <udp_input+0x210>)
 801654e:	f003 fd5b 	bl	801a008 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016552:	6878      	ldr	r0, [r7, #4]
 8016554:	f7fa f90a 	bl	801076c <pbuf_free>
      goto end;
 8016558:	e032      	b.n	80165c0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801655c:	2b00      	cmp	r3, #0
 801655e:	d012      	beq.n	8016586 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016562:	699b      	ldr	r3, [r3, #24]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d00a      	beq.n	801657e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801656a:	699c      	ldr	r4, [r3, #24]
 801656c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801656e:	69d8      	ldr	r0, [r3, #28]
 8016570:	8a3b      	ldrh	r3, [r7, #16]
 8016572:	9300      	str	r3, [sp, #0]
 8016574:	4b1b      	ldr	r3, [pc, #108]	@ (80165e4 <udp_input+0x224>)
 8016576:	687a      	ldr	r2, [r7, #4]
 8016578:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801657a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801657c:	e021      	b.n	80165c2 <udp_input+0x202>
        pbuf_free(p);
 801657e:	6878      	ldr	r0, [r7, #4]
 8016580:	f7fa f8f4 	bl	801076c <pbuf_free>
        goto end;
 8016584:	e01c      	b.n	80165c0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016586:	7cfb      	ldrb	r3, [r7, #19]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d112      	bne.n	80165b2 <udp_input+0x1f2>
 801658c:	4b12      	ldr	r3, [pc, #72]	@ (80165d8 <udp_input+0x218>)
 801658e:	695b      	ldr	r3, [r3, #20]
 8016590:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016594:	2be0      	cmp	r3, #224	@ 0xe0
 8016596:	d00c      	beq.n	80165b2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016598:	4b0f      	ldr	r3, [pc, #60]	@ (80165d8 <udp_input+0x218>)
 801659a:	899b      	ldrh	r3, [r3, #12]
 801659c:	3308      	adds	r3, #8
 801659e:	b29b      	uxth	r3, r3
 80165a0:	b21b      	sxth	r3, r3
 80165a2:	4619      	mov	r1, r3
 80165a4:	6878      	ldr	r0, [r7, #4]
 80165a6:	f7fa f8ce 	bl	8010746 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80165aa:	2103      	movs	r1, #3
 80165ac:	6878      	ldr	r0, [r7, #4]
 80165ae:	f001 fb11 	bl	8017bd4 <icmp_dest_unreach>
      pbuf_free(p);
 80165b2:	6878      	ldr	r0, [r7, #4]
 80165b4:	f7fa f8da 	bl	801076c <pbuf_free>
  return;
 80165b8:	e003      	b.n	80165c2 <udp_input+0x202>
    pbuf_free(p);
 80165ba:	6878      	ldr	r0, [r7, #4]
 80165bc:	f7fa f8d6 	bl	801076c <pbuf_free>
  return;
 80165c0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80165c2:	372c      	adds	r7, #44	@ 0x2c
 80165c4:	46bd      	mov	sp, r7
 80165c6:	bd90      	pop	{r4, r7, pc}
 80165c8:	0801d2e8 	.word	0x0801d2e8
 80165cc:	0801d38c 	.word	0x0801d38c
 80165d0:	0801d33c 	.word	0x0801d33c
 80165d4:	0801d3a4 	.word	0x0801d3a4
 80165d8:	200243ac 	.word	0x200243ac
 80165dc:	20027508 	.word	0x20027508
 80165e0:	0801d3c0 	.word	0x0801d3c0
 80165e4:	200243bc 	.word	0x200243bc

080165e8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80165e8:	b580      	push	{r7, lr}
 80165ea:	b088      	sub	sp, #32
 80165ec:	af02      	add	r7, sp, #8
 80165ee:	60f8      	str	r0, [r7, #12]
 80165f0:	60b9      	str	r1, [r7, #8]
 80165f2:	607a      	str	r2, [r7, #4]
 80165f4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d109      	bne.n	8016610 <udp_sendto+0x28>
 80165fc:	4b23      	ldr	r3, [pc, #140]	@ (801668c <udp_sendto+0xa4>)
 80165fe:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8016602:	4923      	ldr	r1, [pc, #140]	@ (8016690 <udp_sendto+0xa8>)
 8016604:	4823      	ldr	r0, [pc, #140]	@ (8016694 <udp_sendto+0xac>)
 8016606:	f003 fcff 	bl	801a008 <iprintf>
 801660a:	f06f 030f 	mvn.w	r3, #15
 801660e:	e038      	b.n	8016682 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8016610:	68bb      	ldr	r3, [r7, #8]
 8016612:	2b00      	cmp	r3, #0
 8016614:	d109      	bne.n	801662a <udp_sendto+0x42>
 8016616:	4b1d      	ldr	r3, [pc, #116]	@ (801668c <udp_sendto+0xa4>)
 8016618:	f240 2219 	movw	r2, #537	@ 0x219
 801661c:	491e      	ldr	r1, [pc, #120]	@ (8016698 <udp_sendto+0xb0>)
 801661e:	481d      	ldr	r0, [pc, #116]	@ (8016694 <udp_sendto+0xac>)
 8016620:	f003 fcf2 	bl	801a008 <iprintf>
 8016624:	f06f 030f 	mvn.w	r3, #15
 8016628:	e02b      	b.n	8016682 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d109      	bne.n	8016644 <udp_sendto+0x5c>
 8016630:	4b16      	ldr	r3, [pc, #88]	@ (801668c <udp_sendto+0xa4>)
 8016632:	f240 221a 	movw	r2, #538	@ 0x21a
 8016636:	4919      	ldr	r1, [pc, #100]	@ (801669c <udp_sendto+0xb4>)
 8016638:	4816      	ldr	r0, [pc, #88]	@ (8016694 <udp_sendto+0xac>)
 801663a:	f003 fce5 	bl	801a008 <iprintf>
 801663e:	f06f 030f 	mvn.w	r3, #15
 8016642:	e01e      	b.n	8016682 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8016644:	68fb      	ldr	r3, [r7, #12]
 8016646:	7a1b      	ldrb	r3, [r3, #8]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d006      	beq.n	801665a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	7a1b      	ldrb	r3, [r3, #8]
 8016650:	4618      	mov	r0, r3
 8016652:	f7f9 fcfd 	bl	8010050 <netif_get_by_index>
 8016656:	6178      	str	r0, [r7, #20]
 8016658:	e003      	b.n	8016662 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801665a:	6878      	ldr	r0, [r7, #4]
 801665c:	f001 fb44 	bl	8017ce8 <ip4_route>
 8016660:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8016662:	697b      	ldr	r3, [r7, #20]
 8016664:	2b00      	cmp	r3, #0
 8016666:	d102      	bne.n	801666e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8016668:	f06f 0303 	mvn.w	r3, #3
 801666c:	e009      	b.n	8016682 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801666e:	887a      	ldrh	r2, [r7, #2]
 8016670:	697b      	ldr	r3, [r7, #20]
 8016672:	9300      	str	r3, [sp, #0]
 8016674:	4613      	mov	r3, r2
 8016676:	687a      	ldr	r2, [r7, #4]
 8016678:	68b9      	ldr	r1, [r7, #8]
 801667a:	68f8      	ldr	r0, [r7, #12]
 801667c:	f000 f810 	bl	80166a0 <udp_sendto_if>
 8016680:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016682:	4618      	mov	r0, r3
 8016684:	3718      	adds	r7, #24
 8016686:	46bd      	mov	sp, r7
 8016688:	bd80      	pop	{r7, pc}
 801668a:	bf00      	nop
 801668c:	0801d2e8 	.word	0x0801d2e8
 8016690:	0801d40c 	.word	0x0801d40c
 8016694:	0801d33c 	.word	0x0801d33c
 8016698:	0801d424 	.word	0x0801d424
 801669c:	0801d440 	.word	0x0801d440

080166a0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80166a0:	b580      	push	{r7, lr}
 80166a2:	b088      	sub	sp, #32
 80166a4:	af02      	add	r7, sp, #8
 80166a6:	60f8      	str	r0, [r7, #12]
 80166a8:	60b9      	str	r1, [r7, #8]
 80166aa:	607a      	str	r2, [r7, #4]
 80166ac:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d109      	bne.n	80166c8 <udp_sendto_if+0x28>
 80166b4:	4b2e      	ldr	r3, [pc, #184]	@ (8016770 <udp_sendto_if+0xd0>)
 80166b6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80166ba:	492e      	ldr	r1, [pc, #184]	@ (8016774 <udp_sendto_if+0xd4>)
 80166bc:	482e      	ldr	r0, [pc, #184]	@ (8016778 <udp_sendto_if+0xd8>)
 80166be:	f003 fca3 	bl	801a008 <iprintf>
 80166c2:	f06f 030f 	mvn.w	r3, #15
 80166c6:	e04f      	b.n	8016768 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80166c8:	68bb      	ldr	r3, [r7, #8]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d109      	bne.n	80166e2 <udp_sendto_if+0x42>
 80166ce:	4b28      	ldr	r3, [pc, #160]	@ (8016770 <udp_sendto_if+0xd0>)
 80166d0:	f240 2281 	movw	r2, #641	@ 0x281
 80166d4:	4929      	ldr	r1, [pc, #164]	@ (801677c <udp_sendto_if+0xdc>)
 80166d6:	4828      	ldr	r0, [pc, #160]	@ (8016778 <udp_sendto_if+0xd8>)
 80166d8:	f003 fc96 	bl	801a008 <iprintf>
 80166dc:	f06f 030f 	mvn.w	r3, #15
 80166e0:	e042      	b.n	8016768 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d109      	bne.n	80166fc <udp_sendto_if+0x5c>
 80166e8:	4b21      	ldr	r3, [pc, #132]	@ (8016770 <udp_sendto_if+0xd0>)
 80166ea:	f240 2282 	movw	r2, #642	@ 0x282
 80166ee:	4924      	ldr	r1, [pc, #144]	@ (8016780 <udp_sendto_if+0xe0>)
 80166f0:	4821      	ldr	r0, [pc, #132]	@ (8016778 <udp_sendto_if+0xd8>)
 80166f2:	f003 fc89 	bl	801a008 <iprintf>
 80166f6:	f06f 030f 	mvn.w	r3, #15
 80166fa:	e035      	b.n	8016768 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80166fc:	6a3b      	ldr	r3, [r7, #32]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d109      	bne.n	8016716 <udp_sendto_if+0x76>
 8016702:	4b1b      	ldr	r3, [pc, #108]	@ (8016770 <udp_sendto_if+0xd0>)
 8016704:	f240 2283 	movw	r2, #643	@ 0x283
 8016708:	491e      	ldr	r1, [pc, #120]	@ (8016784 <udp_sendto_if+0xe4>)
 801670a:	481b      	ldr	r0, [pc, #108]	@ (8016778 <udp_sendto_if+0xd8>)
 801670c:	f003 fc7c 	bl	801a008 <iprintf>
 8016710:	f06f 030f 	mvn.w	r3, #15
 8016714:	e028      	b.n	8016768 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016716:	68fb      	ldr	r3, [r7, #12]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d009      	beq.n	8016730 <udp_sendto_if+0x90>
 801671c:	68fb      	ldr	r3, [r7, #12]
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	2b00      	cmp	r3, #0
 8016722:	d005      	beq.n	8016730 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801672c:	2be0      	cmp	r3, #224	@ 0xe0
 801672e:	d103      	bne.n	8016738 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8016730:	6a3b      	ldr	r3, [r7, #32]
 8016732:	3304      	adds	r3, #4
 8016734:	617b      	str	r3, [r7, #20]
 8016736:	e00b      	b.n	8016750 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	681a      	ldr	r2, [r3, #0]
 801673c:	6a3b      	ldr	r3, [r7, #32]
 801673e:	3304      	adds	r3, #4
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	429a      	cmp	r2, r3
 8016744:	d002      	beq.n	801674c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8016746:	f06f 0303 	mvn.w	r3, #3
 801674a:	e00d      	b.n	8016768 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8016750:	887a      	ldrh	r2, [r7, #2]
 8016752:	697b      	ldr	r3, [r7, #20]
 8016754:	9301      	str	r3, [sp, #4]
 8016756:	6a3b      	ldr	r3, [r7, #32]
 8016758:	9300      	str	r3, [sp, #0]
 801675a:	4613      	mov	r3, r2
 801675c:	687a      	ldr	r2, [r7, #4]
 801675e:	68b9      	ldr	r1, [r7, #8]
 8016760:	68f8      	ldr	r0, [r7, #12]
 8016762:	f000 f811 	bl	8016788 <udp_sendto_if_src>
 8016766:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8016768:	4618      	mov	r0, r3
 801676a:	3718      	adds	r7, #24
 801676c:	46bd      	mov	sp, r7
 801676e:	bd80      	pop	{r7, pc}
 8016770:	0801d2e8 	.word	0x0801d2e8
 8016774:	0801d45c 	.word	0x0801d45c
 8016778:	0801d33c 	.word	0x0801d33c
 801677c:	0801d478 	.word	0x0801d478
 8016780:	0801d494 	.word	0x0801d494
 8016784:	0801d4b4 	.word	0x0801d4b4

08016788 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8016788:	b580      	push	{r7, lr}
 801678a:	b08c      	sub	sp, #48	@ 0x30
 801678c:	af04      	add	r7, sp, #16
 801678e:	60f8      	str	r0, [r7, #12]
 8016790:	60b9      	str	r1, [r7, #8]
 8016792:	607a      	str	r2, [r7, #4]
 8016794:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	2b00      	cmp	r3, #0
 801679a:	d109      	bne.n	80167b0 <udp_sendto_if_src+0x28>
 801679c:	4b65      	ldr	r3, [pc, #404]	@ (8016934 <udp_sendto_if_src+0x1ac>)
 801679e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80167a2:	4965      	ldr	r1, [pc, #404]	@ (8016938 <udp_sendto_if_src+0x1b0>)
 80167a4:	4865      	ldr	r0, [pc, #404]	@ (801693c <udp_sendto_if_src+0x1b4>)
 80167a6:	f003 fc2f 	bl	801a008 <iprintf>
 80167aa:	f06f 030f 	mvn.w	r3, #15
 80167ae:	e0bc      	b.n	801692a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80167b0:	68bb      	ldr	r3, [r7, #8]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d109      	bne.n	80167ca <udp_sendto_if_src+0x42>
 80167b6:	4b5f      	ldr	r3, [pc, #380]	@ (8016934 <udp_sendto_if_src+0x1ac>)
 80167b8:	f240 22d2 	movw	r2, #722	@ 0x2d2
 80167bc:	4960      	ldr	r1, [pc, #384]	@ (8016940 <udp_sendto_if_src+0x1b8>)
 80167be:	485f      	ldr	r0, [pc, #380]	@ (801693c <udp_sendto_if_src+0x1b4>)
 80167c0:	f003 fc22 	bl	801a008 <iprintf>
 80167c4:	f06f 030f 	mvn.w	r3, #15
 80167c8:	e0af      	b.n	801692a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d109      	bne.n	80167e4 <udp_sendto_if_src+0x5c>
 80167d0:	4b58      	ldr	r3, [pc, #352]	@ (8016934 <udp_sendto_if_src+0x1ac>)
 80167d2:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80167d6:	495b      	ldr	r1, [pc, #364]	@ (8016944 <udp_sendto_if_src+0x1bc>)
 80167d8:	4858      	ldr	r0, [pc, #352]	@ (801693c <udp_sendto_if_src+0x1b4>)
 80167da:	f003 fc15 	bl	801a008 <iprintf>
 80167de:	f06f 030f 	mvn.w	r3, #15
 80167e2:	e0a2      	b.n	801692a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80167e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d109      	bne.n	80167fe <udp_sendto_if_src+0x76>
 80167ea:	4b52      	ldr	r3, [pc, #328]	@ (8016934 <udp_sendto_if_src+0x1ac>)
 80167ec:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80167f0:	4955      	ldr	r1, [pc, #340]	@ (8016948 <udp_sendto_if_src+0x1c0>)
 80167f2:	4852      	ldr	r0, [pc, #328]	@ (801693c <udp_sendto_if_src+0x1b4>)
 80167f4:	f003 fc08 	bl	801a008 <iprintf>
 80167f8:	f06f 030f 	mvn.w	r3, #15
 80167fc:	e095      	b.n	801692a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80167fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016800:	2b00      	cmp	r3, #0
 8016802:	d109      	bne.n	8016818 <udp_sendto_if_src+0x90>
 8016804:	4b4b      	ldr	r3, [pc, #300]	@ (8016934 <udp_sendto_if_src+0x1ac>)
 8016806:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801680a:	4950      	ldr	r1, [pc, #320]	@ (801694c <udp_sendto_if_src+0x1c4>)
 801680c:	484b      	ldr	r0, [pc, #300]	@ (801693c <udp_sendto_if_src+0x1b4>)
 801680e:	f003 fbfb 	bl	801a008 <iprintf>
 8016812:	f06f 030f 	mvn.w	r3, #15
 8016816:	e088      	b.n	801692a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	8a5b      	ldrh	r3, [r3, #18]
 801681c:	2b00      	cmp	r3, #0
 801681e:	d10f      	bne.n	8016840 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8016820:	68f9      	ldr	r1, [r7, #12]
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	8a5b      	ldrh	r3, [r3, #18]
 8016826:	461a      	mov	r2, r3
 8016828:	68f8      	ldr	r0, [r7, #12]
 801682a:	f000 f893 	bl	8016954 <udp_bind>
 801682e:	4603      	mov	r3, r0
 8016830:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8016832:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d002      	beq.n	8016840 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801683a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801683e:	e074      	b.n	801692a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8016840:	68bb      	ldr	r3, [r7, #8]
 8016842:	891b      	ldrh	r3, [r3, #8]
 8016844:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8016848:	4293      	cmp	r3, r2
 801684a:	d902      	bls.n	8016852 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801684c:	f04f 33ff 	mov.w	r3, #4294967295
 8016850:	e06b      	b.n	801692a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8016852:	2108      	movs	r1, #8
 8016854:	68b8      	ldr	r0, [r7, #8]
 8016856:	f7f9 fef3 	bl	8010640 <pbuf_add_header>
 801685a:	4603      	mov	r3, r0
 801685c:	2b00      	cmp	r3, #0
 801685e:	d015      	beq.n	801688c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8016860:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016864:	2108      	movs	r1, #8
 8016866:	2022      	movs	r0, #34	@ 0x22
 8016868:	f7f9 fc9c 	bl	80101a4 <pbuf_alloc>
 801686c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801686e:	69fb      	ldr	r3, [r7, #28]
 8016870:	2b00      	cmp	r3, #0
 8016872:	d102      	bne.n	801687a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8016874:	f04f 33ff 	mov.w	r3, #4294967295
 8016878:	e057      	b.n	801692a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801687a:	68bb      	ldr	r3, [r7, #8]
 801687c:	891b      	ldrh	r3, [r3, #8]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d006      	beq.n	8016890 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8016882:	68b9      	ldr	r1, [r7, #8]
 8016884:	69f8      	ldr	r0, [r7, #28]
 8016886:	f7fa f895 	bl	80109b4 <pbuf_chain>
 801688a:	e001      	b.n	8016890 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801688c:	68bb      	ldr	r3, [r7, #8]
 801688e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8016890:	69fb      	ldr	r3, [r7, #28]
 8016892:	895b      	ldrh	r3, [r3, #10]
 8016894:	2b07      	cmp	r3, #7
 8016896:	d806      	bhi.n	80168a6 <udp_sendto_if_src+0x11e>
 8016898:	4b26      	ldr	r3, [pc, #152]	@ (8016934 <udp_sendto_if_src+0x1ac>)
 801689a:	f240 320d 	movw	r2, #781	@ 0x30d
 801689e:	492c      	ldr	r1, [pc, #176]	@ (8016950 <udp_sendto_if_src+0x1c8>)
 80168a0:	4826      	ldr	r0, [pc, #152]	@ (801693c <udp_sendto_if_src+0x1b4>)
 80168a2:	f003 fbb1 	bl	801a008 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80168a6:	69fb      	ldr	r3, [r7, #28]
 80168a8:	685b      	ldr	r3, [r3, #4]
 80168aa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	8a5b      	ldrh	r3, [r3, #18]
 80168b0:	4618      	mov	r0, r3
 80168b2:	f7f8 fb6d 	bl	800ef90 <lwip_htons>
 80168b6:	4603      	mov	r3, r0
 80168b8:	461a      	mov	r2, r3
 80168ba:	697b      	ldr	r3, [r7, #20]
 80168bc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80168be:	887b      	ldrh	r3, [r7, #2]
 80168c0:	4618      	mov	r0, r3
 80168c2:	f7f8 fb65 	bl	800ef90 <lwip_htons>
 80168c6:	4603      	mov	r3, r0
 80168c8:	461a      	mov	r2, r3
 80168ca:	697b      	ldr	r3, [r7, #20]
 80168cc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80168ce:	697b      	ldr	r3, [r7, #20]
 80168d0:	2200      	movs	r2, #0
 80168d2:	719a      	strb	r2, [r3, #6]
 80168d4:	2200      	movs	r2, #0
 80168d6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80168d8:	69fb      	ldr	r3, [r7, #28]
 80168da:	891b      	ldrh	r3, [r3, #8]
 80168dc:	4618      	mov	r0, r3
 80168de:	f7f8 fb57 	bl	800ef90 <lwip_htons>
 80168e2:	4603      	mov	r3, r0
 80168e4:	461a      	mov	r2, r3
 80168e6:	697b      	ldr	r3, [r7, #20]
 80168e8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80168ea:	2311      	movs	r3, #17
 80168ec:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	7adb      	ldrb	r3, [r3, #11]
 80168f2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	7a9b      	ldrb	r3, [r3, #10]
 80168f8:	7cb9      	ldrb	r1, [r7, #18]
 80168fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80168fc:	9202      	str	r2, [sp, #8]
 80168fe:	7cfa      	ldrb	r2, [r7, #19]
 8016900:	9201      	str	r2, [sp, #4]
 8016902:	9300      	str	r3, [sp, #0]
 8016904:	460b      	mov	r3, r1
 8016906:	687a      	ldr	r2, [r7, #4]
 8016908:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801690a:	69f8      	ldr	r0, [r7, #28]
 801690c:	f001 fbd4 	bl	80180b8 <ip4_output_if_src>
 8016910:	4603      	mov	r3, r0
 8016912:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8016914:	69fa      	ldr	r2, [r7, #28]
 8016916:	68bb      	ldr	r3, [r7, #8]
 8016918:	429a      	cmp	r2, r3
 801691a:	d004      	beq.n	8016926 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801691c:	69f8      	ldr	r0, [r7, #28]
 801691e:	f7f9 ff25 	bl	801076c <pbuf_free>
    q = NULL;
 8016922:	2300      	movs	r3, #0
 8016924:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8016926:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801692a:	4618      	mov	r0, r3
 801692c:	3720      	adds	r7, #32
 801692e:	46bd      	mov	sp, r7
 8016930:	bd80      	pop	{r7, pc}
 8016932:	bf00      	nop
 8016934:	0801d2e8 	.word	0x0801d2e8
 8016938:	0801d4d4 	.word	0x0801d4d4
 801693c:	0801d33c 	.word	0x0801d33c
 8016940:	0801d4f4 	.word	0x0801d4f4
 8016944:	0801d514 	.word	0x0801d514
 8016948:	0801d538 	.word	0x0801d538
 801694c:	0801d55c 	.word	0x0801d55c
 8016950:	0801d580 	.word	0x0801d580

08016954 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8016954:	b580      	push	{r7, lr}
 8016956:	b086      	sub	sp, #24
 8016958:	af00      	add	r7, sp, #0
 801695a:	60f8      	str	r0, [r7, #12]
 801695c:	60b9      	str	r1, [r7, #8]
 801695e:	4613      	mov	r3, r2
 8016960:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016962:	68bb      	ldr	r3, [r7, #8]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d101      	bne.n	801696c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8016968:	4b39      	ldr	r3, [pc, #228]	@ (8016a50 <udp_bind+0xfc>)
 801696a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	2b00      	cmp	r3, #0
 8016970:	d109      	bne.n	8016986 <udp_bind+0x32>
 8016972:	4b38      	ldr	r3, [pc, #224]	@ (8016a54 <udp_bind+0x100>)
 8016974:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8016978:	4937      	ldr	r1, [pc, #220]	@ (8016a58 <udp_bind+0x104>)
 801697a:	4838      	ldr	r0, [pc, #224]	@ (8016a5c <udp_bind+0x108>)
 801697c:	f003 fb44 	bl	801a008 <iprintf>
 8016980:	f06f 030f 	mvn.w	r3, #15
 8016984:	e060      	b.n	8016a48 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8016986:	2300      	movs	r3, #0
 8016988:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801698a:	4b35      	ldr	r3, [pc, #212]	@ (8016a60 <udp_bind+0x10c>)
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	617b      	str	r3, [r7, #20]
 8016990:	e009      	b.n	80169a6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8016992:	68fa      	ldr	r2, [r7, #12]
 8016994:	697b      	ldr	r3, [r7, #20]
 8016996:	429a      	cmp	r2, r3
 8016998:	d102      	bne.n	80169a0 <udp_bind+0x4c>
      rebind = 1;
 801699a:	2301      	movs	r3, #1
 801699c:	74fb      	strb	r3, [r7, #19]
      break;
 801699e:	e005      	b.n	80169ac <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80169a0:	697b      	ldr	r3, [r7, #20]
 80169a2:	68db      	ldr	r3, [r3, #12]
 80169a4:	617b      	str	r3, [r7, #20]
 80169a6:	697b      	ldr	r3, [r7, #20]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d1f2      	bne.n	8016992 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80169ac:	88fb      	ldrh	r3, [r7, #6]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d109      	bne.n	80169c6 <udp_bind+0x72>
    port = udp_new_port();
 80169b2:	f7ff fc69 	bl	8016288 <udp_new_port>
 80169b6:	4603      	mov	r3, r0
 80169b8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80169ba:	88fb      	ldrh	r3, [r7, #6]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d12c      	bne.n	8016a1a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80169c0:	f06f 0307 	mvn.w	r3, #7
 80169c4:	e040      	b.n	8016a48 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80169c6:	4b26      	ldr	r3, [pc, #152]	@ (8016a60 <udp_bind+0x10c>)
 80169c8:	681b      	ldr	r3, [r3, #0]
 80169ca:	617b      	str	r3, [r7, #20]
 80169cc:	e022      	b.n	8016a14 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80169ce:	68fa      	ldr	r2, [r7, #12]
 80169d0:	697b      	ldr	r3, [r7, #20]
 80169d2:	429a      	cmp	r2, r3
 80169d4:	d01b      	beq.n	8016a0e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80169d6:	697b      	ldr	r3, [r7, #20]
 80169d8:	8a5b      	ldrh	r3, [r3, #18]
 80169da:	88fa      	ldrh	r2, [r7, #6]
 80169dc:	429a      	cmp	r2, r3
 80169de:	d116      	bne.n	8016a0e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80169e0:	697b      	ldr	r3, [r7, #20]
 80169e2:	681a      	ldr	r2, [r3, #0]
 80169e4:	68bb      	ldr	r3, [r7, #8]
 80169e6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80169e8:	429a      	cmp	r2, r3
 80169ea:	d00d      	beq.n	8016a08 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80169ec:	68bb      	ldr	r3, [r7, #8]
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d00a      	beq.n	8016a08 <udp_bind+0xb4>
 80169f2:	68bb      	ldr	r3, [r7, #8]
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d006      	beq.n	8016a08 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80169fa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d003      	beq.n	8016a08 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016a00:	697b      	ldr	r3, [r7, #20]
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d102      	bne.n	8016a0e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016a08:	f06f 0307 	mvn.w	r3, #7
 8016a0c:	e01c      	b.n	8016a48 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016a0e:	697b      	ldr	r3, [r7, #20]
 8016a10:	68db      	ldr	r3, [r3, #12]
 8016a12:	617b      	str	r3, [r7, #20]
 8016a14:	697b      	ldr	r3, [r7, #20]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d1d9      	bne.n	80169ce <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8016a1a:	68bb      	ldr	r3, [r7, #8]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d002      	beq.n	8016a26 <udp_bind+0xd2>
 8016a20:	68bb      	ldr	r3, [r7, #8]
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	e000      	b.n	8016a28 <udp_bind+0xd4>
 8016a26:	2300      	movs	r3, #0
 8016a28:	68fa      	ldr	r2, [r7, #12]
 8016a2a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	88fa      	ldrh	r2, [r7, #6]
 8016a30:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8016a32:	7cfb      	ldrb	r3, [r7, #19]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d106      	bne.n	8016a46 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8016a38:	4b09      	ldr	r3, [pc, #36]	@ (8016a60 <udp_bind+0x10c>)
 8016a3a:	681a      	ldr	r2, [r3, #0]
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8016a40:	4a07      	ldr	r2, [pc, #28]	@ (8016a60 <udp_bind+0x10c>)
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8016a46:	2300      	movs	r3, #0
}
 8016a48:	4618      	mov	r0, r3
 8016a4a:	3718      	adds	r7, #24
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	bd80      	pop	{r7, pc}
 8016a50:	0801e2b8 	.word	0x0801e2b8
 8016a54:	0801d2e8 	.word	0x0801d2e8
 8016a58:	0801d5b0 	.word	0x0801d5b0
 8016a5c:	0801d33c 	.word	0x0801d33c
 8016a60:	20027508 	.word	0x20027508

08016a64 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	b084      	sub	sp, #16
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	60f8      	str	r0, [r7, #12]
 8016a6c:	60b9      	str	r1, [r7, #8]
 8016a6e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d107      	bne.n	8016a86 <udp_recv+0x22>
 8016a76:	4b08      	ldr	r3, [pc, #32]	@ (8016a98 <udp_recv+0x34>)
 8016a78:	f240 428a 	movw	r2, #1162	@ 0x48a
 8016a7c:	4907      	ldr	r1, [pc, #28]	@ (8016a9c <udp_recv+0x38>)
 8016a7e:	4808      	ldr	r0, [pc, #32]	@ (8016aa0 <udp_recv+0x3c>)
 8016a80:	f003 fac2 	bl	801a008 <iprintf>
 8016a84:	e005      	b.n	8016a92 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	68ba      	ldr	r2, [r7, #8]
 8016a8a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	687a      	ldr	r2, [r7, #4]
 8016a90:	61da      	str	r2, [r3, #28]
}
 8016a92:	3710      	adds	r7, #16
 8016a94:	46bd      	mov	sp, r7
 8016a96:	bd80      	pop	{r7, pc}
 8016a98:	0801d2e8 	.word	0x0801d2e8
 8016a9c:	0801d61c 	.word	0x0801d61c
 8016aa0:	0801d33c 	.word	0x0801d33c

08016aa4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	b082      	sub	sp, #8
 8016aa8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8016aaa:	2000      	movs	r0, #0
 8016aac:	f7f8 ff44 	bl	800f938 <memp_malloc>
 8016ab0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d007      	beq.n	8016ac8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8016ab8:	2220      	movs	r2, #32
 8016aba:	2100      	movs	r1, #0
 8016abc:	6878      	ldr	r0, [r7, #4]
 8016abe:	f003 fbfb 	bl	801a2b8 <memset>
    pcb->ttl = UDP_TTL;
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	22ff      	movs	r2, #255	@ 0xff
 8016ac6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8016ac8:	687b      	ldr	r3, [r7, #4]
}
 8016aca:	4618      	mov	r0, r3
 8016acc:	3708      	adds	r7, #8
 8016ace:	46bd      	mov	sp, r7
 8016ad0:	bd80      	pop	{r7, pc}
	...

08016ad4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016ad4:	b480      	push	{r7}
 8016ad6:	b085      	sub	sp, #20
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	6078      	str	r0, [r7, #4]
 8016adc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d01e      	beq.n	8016b22 <udp_netif_ip_addr_changed+0x4e>
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d01a      	beq.n	8016b22 <udp_netif_ip_addr_changed+0x4e>
 8016aec:	683b      	ldr	r3, [r7, #0]
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d017      	beq.n	8016b22 <udp_netif_ip_addr_changed+0x4e>
 8016af2:	683b      	ldr	r3, [r7, #0]
 8016af4:	681b      	ldr	r3, [r3, #0]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d013      	beq.n	8016b22 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016afa:	4b0d      	ldr	r3, [pc, #52]	@ (8016b30 <udp_netif_ip_addr_changed+0x5c>)
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	60fb      	str	r3, [r7, #12]
 8016b00:	e00c      	b.n	8016b1c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	681a      	ldr	r2, [r3, #0]
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	429a      	cmp	r2, r3
 8016b0c:	d103      	bne.n	8016b16 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016b0e:	683b      	ldr	r3, [r7, #0]
 8016b10:	681a      	ldr	r2, [r3, #0]
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	68db      	ldr	r3, [r3, #12]
 8016b1a:	60fb      	str	r3, [r7, #12]
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d1ef      	bne.n	8016b02 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016b22:	bf00      	nop
 8016b24:	3714      	adds	r7, #20
 8016b26:	46bd      	mov	sp, r7
 8016b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b2c:	4770      	bx	lr
 8016b2e:	bf00      	nop
 8016b30:	20027508 	.word	0x20027508

08016b34 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016b34:	b580      	push	{r7, lr}
 8016b36:	b082      	sub	sp, #8
 8016b38:	af00      	add	r7, sp, #0
 8016b3a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016b3c:	4915      	ldr	r1, [pc, #84]	@ (8016b94 <etharp_free_entry+0x60>)
 8016b3e:	687a      	ldr	r2, [r7, #4]
 8016b40:	4613      	mov	r3, r2
 8016b42:	005b      	lsls	r3, r3, #1
 8016b44:	4413      	add	r3, r2
 8016b46:	00db      	lsls	r3, r3, #3
 8016b48:	440b      	add	r3, r1
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d013      	beq.n	8016b78 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016b50:	4910      	ldr	r1, [pc, #64]	@ (8016b94 <etharp_free_entry+0x60>)
 8016b52:	687a      	ldr	r2, [r7, #4]
 8016b54:	4613      	mov	r3, r2
 8016b56:	005b      	lsls	r3, r3, #1
 8016b58:	4413      	add	r3, r2
 8016b5a:	00db      	lsls	r3, r3, #3
 8016b5c:	440b      	add	r3, r1
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	4618      	mov	r0, r3
 8016b62:	f7f9 fe03 	bl	801076c <pbuf_free>
    arp_table[i].q = NULL;
 8016b66:	490b      	ldr	r1, [pc, #44]	@ (8016b94 <etharp_free_entry+0x60>)
 8016b68:	687a      	ldr	r2, [r7, #4]
 8016b6a:	4613      	mov	r3, r2
 8016b6c:	005b      	lsls	r3, r3, #1
 8016b6e:	4413      	add	r3, r2
 8016b70:	00db      	lsls	r3, r3, #3
 8016b72:	440b      	add	r3, r1
 8016b74:	2200      	movs	r2, #0
 8016b76:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016b78:	4906      	ldr	r1, [pc, #24]	@ (8016b94 <etharp_free_entry+0x60>)
 8016b7a:	687a      	ldr	r2, [r7, #4]
 8016b7c:	4613      	mov	r3, r2
 8016b7e:	005b      	lsls	r3, r3, #1
 8016b80:	4413      	add	r3, r2
 8016b82:	00db      	lsls	r3, r3, #3
 8016b84:	440b      	add	r3, r1
 8016b86:	3314      	adds	r3, #20
 8016b88:	2200      	movs	r2, #0
 8016b8a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016b8c:	bf00      	nop
 8016b8e:	3708      	adds	r7, #8
 8016b90:	46bd      	mov	sp, r7
 8016b92:	bd80      	pop	{r7, pc}
 8016b94:	2002750c 	.word	0x2002750c

08016b98 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016b98:	b580      	push	{r7, lr}
 8016b9a:	b082      	sub	sp, #8
 8016b9c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016b9e:	2300      	movs	r3, #0
 8016ba0:	607b      	str	r3, [r7, #4]
 8016ba2:	e096      	b.n	8016cd2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016ba4:	494f      	ldr	r1, [pc, #316]	@ (8016ce4 <etharp_tmr+0x14c>)
 8016ba6:	687a      	ldr	r2, [r7, #4]
 8016ba8:	4613      	mov	r3, r2
 8016baa:	005b      	lsls	r3, r3, #1
 8016bac:	4413      	add	r3, r2
 8016bae:	00db      	lsls	r3, r3, #3
 8016bb0:	440b      	add	r3, r1
 8016bb2:	3314      	adds	r3, #20
 8016bb4:	781b      	ldrb	r3, [r3, #0]
 8016bb6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016bb8:	78fb      	ldrb	r3, [r7, #3]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	f000 8086 	beq.w	8016ccc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016bc0:	4948      	ldr	r1, [pc, #288]	@ (8016ce4 <etharp_tmr+0x14c>)
 8016bc2:	687a      	ldr	r2, [r7, #4]
 8016bc4:	4613      	mov	r3, r2
 8016bc6:	005b      	lsls	r3, r3, #1
 8016bc8:	4413      	add	r3, r2
 8016bca:	00db      	lsls	r3, r3, #3
 8016bcc:	440b      	add	r3, r1
 8016bce:	3312      	adds	r3, #18
 8016bd0:	881b      	ldrh	r3, [r3, #0]
 8016bd2:	3301      	adds	r3, #1
 8016bd4:	b298      	uxth	r0, r3
 8016bd6:	4943      	ldr	r1, [pc, #268]	@ (8016ce4 <etharp_tmr+0x14c>)
 8016bd8:	687a      	ldr	r2, [r7, #4]
 8016bda:	4613      	mov	r3, r2
 8016bdc:	005b      	lsls	r3, r3, #1
 8016bde:	4413      	add	r3, r2
 8016be0:	00db      	lsls	r3, r3, #3
 8016be2:	440b      	add	r3, r1
 8016be4:	3312      	adds	r3, #18
 8016be6:	4602      	mov	r2, r0
 8016be8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016bea:	493e      	ldr	r1, [pc, #248]	@ (8016ce4 <etharp_tmr+0x14c>)
 8016bec:	687a      	ldr	r2, [r7, #4]
 8016bee:	4613      	mov	r3, r2
 8016bf0:	005b      	lsls	r3, r3, #1
 8016bf2:	4413      	add	r3, r2
 8016bf4:	00db      	lsls	r3, r3, #3
 8016bf6:	440b      	add	r3, r1
 8016bf8:	3312      	adds	r3, #18
 8016bfa:	881b      	ldrh	r3, [r3, #0]
 8016bfc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8016c00:	d215      	bcs.n	8016c2e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016c02:	4938      	ldr	r1, [pc, #224]	@ (8016ce4 <etharp_tmr+0x14c>)
 8016c04:	687a      	ldr	r2, [r7, #4]
 8016c06:	4613      	mov	r3, r2
 8016c08:	005b      	lsls	r3, r3, #1
 8016c0a:	4413      	add	r3, r2
 8016c0c:	00db      	lsls	r3, r3, #3
 8016c0e:	440b      	add	r3, r1
 8016c10:	3314      	adds	r3, #20
 8016c12:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016c14:	2b01      	cmp	r3, #1
 8016c16:	d10e      	bne.n	8016c36 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016c18:	4932      	ldr	r1, [pc, #200]	@ (8016ce4 <etharp_tmr+0x14c>)
 8016c1a:	687a      	ldr	r2, [r7, #4]
 8016c1c:	4613      	mov	r3, r2
 8016c1e:	005b      	lsls	r3, r3, #1
 8016c20:	4413      	add	r3, r2
 8016c22:	00db      	lsls	r3, r3, #3
 8016c24:	440b      	add	r3, r1
 8016c26:	3312      	adds	r3, #18
 8016c28:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016c2a:	2b04      	cmp	r3, #4
 8016c2c:	d903      	bls.n	8016c36 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016c2e:	6878      	ldr	r0, [r7, #4]
 8016c30:	f7ff ff80 	bl	8016b34 <etharp_free_entry>
 8016c34:	e04a      	b.n	8016ccc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016c36:	492b      	ldr	r1, [pc, #172]	@ (8016ce4 <etharp_tmr+0x14c>)
 8016c38:	687a      	ldr	r2, [r7, #4]
 8016c3a:	4613      	mov	r3, r2
 8016c3c:	005b      	lsls	r3, r3, #1
 8016c3e:	4413      	add	r3, r2
 8016c40:	00db      	lsls	r3, r3, #3
 8016c42:	440b      	add	r3, r1
 8016c44:	3314      	adds	r3, #20
 8016c46:	781b      	ldrb	r3, [r3, #0]
 8016c48:	2b03      	cmp	r3, #3
 8016c4a:	d10a      	bne.n	8016c62 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016c4c:	4925      	ldr	r1, [pc, #148]	@ (8016ce4 <etharp_tmr+0x14c>)
 8016c4e:	687a      	ldr	r2, [r7, #4]
 8016c50:	4613      	mov	r3, r2
 8016c52:	005b      	lsls	r3, r3, #1
 8016c54:	4413      	add	r3, r2
 8016c56:	00db      	lsls	r3, r3, #3
 8016c58:	440b      	add	r3, r1
 8016c5a:	3314      	adds	r3, #20
 8016c5c:	2204      	movs	r2, #4
 8016c5e:	701a      	strb	r2, [r3, #0]
 8016c60:	e034      	b.n	8016ccc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016c62:	4920      	ldr	r1, [pc, #128]	@ (8016ce4 <etharp_tmr+0x14c>)
 8016c64:	687a      	ldr	r2, [r7, #4]
 8016c66:	4613      	mov	r3, r2
 8016c68:	005b      	lsls	r3, r3, #1
 8016c6a:	4413      	add	r3, r2
 8016c6c:	00db      	lsls	r3, r3, #3
 8016c6e:	440b      	add	r3, r1
 8016c70:	3314      	adds	r3, #20
 8016c72:	781b      	ldrb	r3, [r3, #0]
 8016c74:	2b04      	cmp	r3, #4
 8016c76:	d10a      	bne.n	8016c8e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016c78:	491a      	ldr	r1, [pc, #104]	@ (8016ce4 <etharp_tmr+0x14c>)
 8016c7a:	687a      	ldr	r2, [r7, #4]
 8016c7c:	4613      	mov	r3, r2
 8016c7e:	005b      	lsls	r3, r3, #1
 8016c80:	4413      	add	r3, r2
 8016c82:	00db      	lsls	r3, r3, #3
 8016c84:	440b      	add	r3, r1
 8016c86:	3314      	adds	r3, #20
 8016c88:	2202      	movs	r2, #2
 8016c8a:	701a      	strb	r2, [r3, #0]
 8016c8c:	e01e      	b.n	8016ccc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016c8e:	4915      	ldr	r1, [pc, #84]	@ (8016ce4 <etharp_tmr+0x14c>)
 8016c90:	687a      	ldr	r2, [r7, #4]
 8016c92:	4613      	mov	r3, r2
 8016c94:	005b      	lsls	r3, r3, #1
 8016c96:	4413      	add	r3, r2
 8016c98:	00db      	lsls	r3, r3, #3
 8016c9a:	440b      	add	r3, r1
 8016c9c:	3314      	adds	r3, #20
 8016c9e:	781b      	ldrb	r3, [r3, #0]
 8016ca0:	2b01      	cmp	r3, #1
 8016ca2:	d113      	bne.n	8016ccc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016ca4:	490f      	ldr	r1, [pc, #60]	@ (8016ce4 <etharp_tmr+0x14c>)
 8016ca6:	687a      	ldr	r2, [r7, #4]
 8016ca8:	4613      	mov	r3, r2
 8016caa:	005b      	lsls	r3, r3, #1
 8016cac:	4413      	add	r3, r2
 8016cae:	00db      	lsls	r3, r3, #3
 8016cb0:	440b      	add	r3, r1
 8016cb2:	3308      	adds	r3, #8
 8016cb4:	6818      	ldr	r0, [r3, #0]
 8016cb6:	687a      	ldr	r2, [r7, #4]
 8016cb8:	4613      	mov	r3, r2
 8016cba:	005b      	lsls	r3, r3, #1
 8016cbc:	4413      	add	r3, r2
 8016cbe:	00db      	lsls	r3, r3, #3
 8016cc0:	4a08      	ldr	r2, [pc, #32]	@ (8016ce4 <etharp_tmr+0x14c>)
 8016cc2:	4413      	add	r3, r2
 8016cc4:	3304      	adds	r3, #4
 8016cc6:	4619      	mov	r1, r3
 8016cc8:	f000 fe6e 	bl	80179a8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	3301      	adds	r3, #1
 8016cd0:	607b      	str	r3, [r7, #4]
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	2b09      	cmp	r3, #9
 8016cd6:	f77f af65 	ble.w	8016ba4 <etharp_tmr+0xc>
      }
    }
  }
}
 8016cda:	bf00      	nop
 8016cdc:	bf00      	nop
 8016cde:	3708      	adds	r7, #8
 8016ce0:	46bd      	mov	sp, r7
 8016ce2:	bd80      	pop	{r7, pc}
 8016ce4:	2002750c 	.word	0x2002750c

08016ce8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b08a      	sub	sp, #40	@ 0x28
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	60f8      	str	r0, [r7, #12]
 8016cf0:	460b      	mov	r3, r1
 8016cf2:	607a      	str	r2, [r7, #4]
 8016cf4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016cf6:	230a      	movs	r3, #10
 8016cf8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8016cfa:	230a      	movs	r3, #10
 8016cfc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016cfe:	230a      	movs	r3, #10
 8016d00:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8016d02:	2300      	movs	r3, #0
 8016d04:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016d06:	230a      	movs	r3, #10
 8016d08:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	83bb      	strh	r3, [r7, #28]
 8016d0e:	2300      	movs	r3, #0
 8016d10:	837b      	strh	r3, [r7, #26]
 8016d12:	2300      	movs	r3, #0
 8016d14:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016d16:	2300      	movs	r3, #0
 8016d18:	843b      	strh	r3, [r7, #32]
 8016d1a:	e0ae      	b.n	8016e7a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016d1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d20:	49a6      	ldr	r1, [pc, #664]	@ (8016fbc <etharp_find_entry+0x2d4>)
 8016d22:	4613      	mov	r3, r2
 8016d24:	005b      	lsls	r3, r3, #1
 8016d26:	4413      	add	r3, r2
 8016d28:	00db      	lsls	r3, r3, #3
 8016d2a:	440b      	add	r3, r1
 8016d2c:	3314      	adds	r3, #20
 8016d2e:	781b      	ldrb	r3, [r3, #0]
 8016d30:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016d32:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016d36:	2b0a      	cmp	r3, #10
 8016d38:	d105      	bne.n	8016d46 <etharp_find_entry+0x5e>
 8016d3a:	7dfb      	ldrb	r3, [r7, #23]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d102      	bne.n	8016d46 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016d40:	8c3b      	ldrh	r3, [r7, #32]
 8016d42:	847b      	strh	r3, [r7, #34]	@ 0x22
 8016d44:	e095      	b.n	8016e72 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016d46:	7dfb      	ldrb	r3, [r7, #23]
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	f000 8092 	beq.w	8016e72 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016d4e:	7dfb      	ldrb	r3, [r7, #23]
 8016d50:	2b01      	cmp	r3, #1
 8016d52:	d009      	beq.n	8016d68 <etharp_find_entry+0x80>
 8016d54:	7dfb      	ldrb	r3, [r7, #23]
 8016d56:	2b01      	cmp	r3, #1
 8016d58:	d806      	bhi.n	8016d68 <etharp_find_entry+0x80>
 8016d5a:	4b99      	ldr	r3, [pc, #612]	@ (8016fc0 <etharp_find_entry+0x2d8>)
 8016d5c:	f240 1223 	movw	r2, #291	@ 0x123
 8016d60:	4998      	ldr	r1, [pc, #608]	@ (8016fc4 <etharp_find_entry+0x2dc>)
 8016d62:	4899      	ldr	r0, [pc, #612]	@ (8016fc8 <etharp_find_entry+0x2e0>)
 8016d64:	f003 f950 	bl	801a008 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d020      	beq.n	8016db0 <etharp_find_entry+0xc8>
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	6819      	ldr	r1, [r3, #0]
 8016d72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d76:	4891      	ldr	r0, [pc, #580]	@ (8016fbc <etharp_find_entry+0x2d4>)
 8016d78:	4613      	mov	r3, r2
 8016d7a:	005b      	lsls	r3, r3, #1
 8016d7c:	4413      	add	r3, r2
 8016d7e:	00db      	lsls	r3, r3, #3
 8016d80:	4403      	add	r3, r0
 8016d82:	3304      	adds	r3, #4
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	4299      	cmp	r1, r3
 8016d88:	d112      	bne.n	8016db0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d00c      	beq.n	8016daa <etharp_find_entry+0xc2>
 8016d90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d94:	4989      	ldr	r1, [pc, #548]	@ (8016fbc <etharp_find_entry+0x2d4>)
 8016d96:	4613      	mov	r3, r2
 8016d98:	005b      	lsls	r3, r3, #1
 8016d9a:	4413      	add	r3, r2
 8016d9c:	00db      	lsls	r3, r3, #3
 8016d9e:	440b      	add	r3, r1
 8016da0:	3308      	adds	r3, #8
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	687a      	ldr	r2, [r7, #4]
 8016da6:	429a      	cmp	r2, r3
 8016da8:	d102      	bne.n	8016db0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016daa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016dae:	e100      	b.n	8016fb2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016db0:	7dfb      	ldrb	r3, [r7, #23]
 8016db2:	2b01      	cmp	r3, #1
 8016db4:	d140      	bne.n	8016e38 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016db6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016dba:	4980      	ldr	r1, [pc, #512]	@ (8016fbc <etharp_find_entry+0x2d4>)
 8016dbc:	4613      	mov	r3, r2
 8016dbe:	005b      	lsls	r3, r3, #1
 8016dc0:	4413      	add	r3, r2
 8016dc2:	00db      	lsls	r3, r3, #3
 8016dc4:	440b      	add	r3, r1
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d01a      	beq.n	8016e02 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016dcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016dd0:	497a      	ldr	r1, [pc, #488]	@ (8016fbc <etharp_find_entry+0x2d4>)
 8016dd2:	4613      	mov	r3, r2
 8016dd4:	005b      	lsls	r3, r3, #1
 8016dd6:	4413      	add	r3, r2
 8016dd8:	00db      	lsls	r3, r3, #3
 8016dda:	440b      	add	r3, r1
 8016ddc:	3312      	adds	r3, #18
 8016dde:	881b      	ldrh	r3, [r3, #0]
 8016de0:	8bba      	ldrh	r2, [r7, #28]
 8016de2:	429a      	cmp	r2, r3
 8016de4:	d845      	bhi.n	8016e72 <etharp_find_entry+0x18a>
            old_queue = i;
 8016de6:	8c3b      	ldrh	r3, [r7, #32]
 8016de8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016dea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016dee:	4973      	ldr	r1, [pc, #460]	@ (8016fbc <etharp_find_entry+0x2d4>)
 8016df0:	4613      	mov	r3, r2
 8016df2:	005b      	lsls	r3, r3, #1
 8016df4:	4413      	add	r3, r2
 8016df6:	00db      	lsls	r3, r3, #3
 8016df8:	440b      	add	r3, r1
 8016dfa:	3312      	adds	r3, #18
 8016dfc:	881b      	ldrh	r3, [r3, #0]
 8016dfe:	83bb      	strh	r3, [r7, #28]
 8016e00:	e037      	b.n	8016e72 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016e02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e06:	496d      	ldr	r1, [pc, #436]	@ (8016fbc <etharp_find_entry+0x2d4>)
 8016e08:	4613      	mov	r3, r2
 8016e0a:	005b      	lsls	r3, r3, #1
 8016e0c:	4413      	add	r3, r2
 8016e0e:	00db      	lsls	r3, r3, #3
 8016e10:	440b      	add	r3, r1
 8016e12:	3312      	adds	r3, #18
 8016e14:	881b      	ldrh	r3, [r3, #0]
 8016e16:	8b7a      	ldrh	r2, [r7, #26]
 8016e18:	429a      	cmp	r2, r3
 8016e1a:	d82a      	bhi.n	8016e72 <etharp_find_entry+0x18a>
            old_pending = i;
 8016e1c:	8c3b      	ldrh	r3, [r7, #32]
 8016e1e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8016e20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e24:	4965      	ldr	r1, [pc, #404]	@ (8016fbc <etharp_find_entry+0x2d4>)
 8016e26:	4613      	mov	r3, r2
 8016e28:	005b      	lsls	r3, r3, #1
 8016e2a:	4413      	add	r3, r2
 8016e2c:	00db      	lsls	r3, r3, #3
 8016e2e:	440b      	add	r3, r1
 8016e30:	3312      	adds	r3, #18
 8016e32:	881b      	ldrh	r3, [r3, #0]
 8016e34:	837b      	strh	r3, [r7, #26]
 8016e36:	e01c      	b.n	8016e72 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016e38:	7dfb      	ldrb	r3, [r7, #23]
 8016e3a:	2b01      	cmp	r3, #1
 8016e3c:	d919      	bls.n	8016e72 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016e3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e42:	495e      	ldr	r1, [pc, #376]	@ (8016fbc <etharp_find_entry+0x2d4>)
 8016e44:	4613      	mov	r3, r2
 8016e46:	005b      	lsls	r3, r3, #1
 8016e48:	4413      	add	r3, r2
 8016e4a:	00db      	lsls	r3, r3, #3
 8016e4c:	440b      	add	r3, r1
 8016e4e:	3312      	adds	r3, #18
 8016e50:	881b      	ldrh	r3, [r3, #0]
 8016e52:	8b3a      	ldrh	r2, [r7, #24]
 8016e54:	429a      	cmp	r2, r3
 8016e56:	d80c      	bhi.n	8016e72 <etharp_find_entry+0x18a>
            old_stable = i;
 8016e58:	8c3b      	ldrh	r3, [r7, #32]
 8016e5a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8016e5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e60:	4956      	ldr	r1, [pc, #344]	@ (8016fbc <etharp_find_entry+0x2d4>)
 8016e62:	4613      	mov	r3, r2
 8016e64:	005b      	lsls	r3, r3, #1
 8016e66:	4413      	add	r3, r2
 8016e68:	00db      	lsls	r3, r3, #3
 8016e6a:	440b      	add	r3, r1
 8016e6c:	3312      	adds	r3, #18
 8016e6e:	881b      	ldrh	r3, [r3, #0]
 8016e70:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016e72:	8c3b      	ldrh	r3, [r7, #32]
 8016e74:	3301      	adds	r3, #1
 8016e76:	b29b      	uxth	r3, r3
 8016e78:	843b      	strh	r3, [r7, #32]
 8016e7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016e7e:	2b09      	cmp	r3, #9
 8016e80:	f77f af4c 	ble.w	8016d1c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016e84:	7afb      	ldrb	r3, [r7, #11]
 8016e86:	f003 0302 	and.w	r3, r3, #2
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d108      	bne.n	8016ea0 <etharp_find_entry+0x1b8>
 8016e8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016e92:	2b0a      	cmp	r3, #10
 8016e94:	d107      	bne.n	8016ea6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016e96:	7afb      	ldrb	r3, [r7, #11]
 8016e98:	f003 0301 	and.w	r3, r3, #1
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d102      	bne.n	8016ea6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8016ea4:	e085      	b.n	8016fb2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016ea6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016eaa:	2b09      	cmp	r3, #9
 8016eac:	dc02      	bgt.n	8016eb4 <etharp_find_entry+0x1cc>
    i = empty;
 8016eae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016eb0:	843b      	strh	r3, [r7, #32]
 8016eb2:	e039      	b.n	8016f28 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016eb4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8016eb8:	2b09      	cmp	r3, #9
 8016eba:	dc14      	bgt.n	8016ee6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016ebc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016ebe:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016ec0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ec4:	493d      	ldr	r1, [pc, #244]	@ (8016fbc <etharp_find_entry+0x2d4>)
 8016ec6:	4613      	mov	r3, r2
 8016ec8:	005b      	lsls	r3, r3, #1
 8016eca:	4413      	add	r3, r2
 8016ecc:	00db      	lsls	r3, r3, #3
 8016ece:	440b      	add	r3, r1
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d018      	beq.n	8016f08 <etharp_find_entry+0x220>
 8016ed6:	4b3a      	ldr	r3, [pc, #232]	@ (8016fc0 <etharp_find_entry+0x2d8>)
 8016ed8:	f240 126d 	movw	r2, #365	@ 0x16d
 8016edc:	493b      	ldr	r1, [pc, #236]	@ (8016fcc <etharp_find_entry+0x2e4>)
 8016ede:	483a      	ldr	r0, [pc, #232]	@ (8016fc8 <etharp_find_entry+0x2e0>)
 8016ee0:	f003 f892 	bl	801a008 <iprintf>
 8016ee4:	e010      	b.n	8016f08 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016ee6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8016eea:	2b09      	cmp	r3, #9
 8016eec:	dc02      	bgt.n	8016ef4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016eee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8016ef0:	843b      	strh	r3, [r7, #32]
 8016ef2:	e009      	b.n	8016f08 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016ef4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016ef8:	2b09      	cmp	r3, #9
 8016efa:	dc02      	bgt.n	8016f02 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016efc:	8bfb      	ldrh	r3, [r7, #30]
 8016efe:	843b      	strh	r3, [r7, #32]
 8016f00:	e002      	b.n	8016f08 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016f02:	f04f 33ff 	mov.w	r3, #4294967295
 8016f06:	e054      	b.n	8016fb2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016f08:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016f0c:	2b09      	cmp	r3, #9
 8016f0e:	dd06      	ble.n	8016f1e <etharp_find_entry+0x236>
 8016f10:	4b2b      	ldr	r3, [pc, #172]	@ (8016fc0 <etharp_find_entry+0x2d8>)
 8016f12:	f240 127f 	movw	r2, #383	@ 0x17f
 8016f16:	492e      	ldr	r1, [pc, #184]	@ (8016fd0 <etharp_find_entry+0x2e8>)
 8016f18:	482b      	ldr	r0, [pc, #172]	@ (8016fc8 <etharp_find_entry+0x2e0>)
 8016f1a:	f003 f875 	bl	801a008 <iprintf>
    etharp_free_entry(i);
 8016f1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016f22:	4618      	mov	r0, r3
 8016f24:	f7ff fe06 	bl	8016b34 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016f28:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016f2c:	2b09      	cmp	r3, #9
 8016f2e:	dd06      	ble.n	8016f3e <etharp_find_entry+0x256>
 8016f30:	4b23      	ldr	r3, [pc, #140]	@ (8016fc0 <etharp_find_entry+0x2d8>)
 8016f32:	f240 1283 	movw	r2, #387	@ 0x183
 8016f36:	4926      	ldr	r1, [pc, #152]	@ (8016fd0 <etharp_find_entry+0x2e8>)
 8016f38:	4823      	ldr	r0, [pc, #140]	@ (8016fc8 <etharp_find_entry+0x2e0>)
 8016f3a:	f003 f865 	bl	801a008 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016f3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f42:	491e      	ldr	r1, [pc, #120]	@ (8016fbc <etharp_find_entry+0x2d4>)
 8016f44:	4613      	mov	r3, r2
 8016f46:	005b      	lsls	r3, r3, #1
 8016f48:	4413      	add	r3, r2
 8016f4a:	00db      	lsls	r3, r3, #3
 8016f4c:	440b      	add	r3, r1
 8016f4e:	3314      	adds	r3, #20
 8016f50:	781b      	ldrb	r3, [r3, #0]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d006      	beq.n	8016f64 <etharp_find_entry+0x27c>
 8016f56:	4b1a      	ldr	r3, [pc, #104]	@ (8016fc0 <etharp_find_entry+0x2d8>)
 8016f58:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8016f5c:	491d      	ldr	r1, [pc, #116]	@ (8016fd4 <etharp_find_entry+0x2ec>)
 8016f5e:	481a      	ldr	r0, [pc, #104]	@ (8016fc8 <etharp_find_entry+0x2e0>)
 8016f60:	f003 f852 	bl	801a008 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d00b      	beq.n	8016f82 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016f6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	6819      	ldr	r1, [r3, #0]
 8016f72:	4812      	ldr	r0, [pc, #72]	@ (8016fbc <etharp_find_entry+0x2d4>)
 8016f74:	4613      	mov	r3, r2
 8016f76:	005b      	lsls	r3, r3, #1
 8016f78:	4413      	add	r3, r2
 8016f7a:	00db      	lsls	r3, r3, #3
 8016f7c:	4403      	add	r3, r0
 8016f7e:	3304      	adds	r3, #4
 8016f80:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016f82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f86:	490d      	ldr	r1, [pc, #52]	@ (8016fbc <etharp_find_entry+0x2d4>)
 8016f88:	4613      	mov	r3, r2
 8016f8a:	005b      	lsls	r3, r3, #1
 8016f8c:	4413      	add	r3, r2
 8016f8e:	00db      	lsls	r3, r3, #3
 8016f90:	440b      	add	r3, r1
 8016f92:	3312      	adds	r3, #18
 8016f94:	2200      	movs	r2, #0
 8016f96:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016f98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f9c:	4907      	ldr	r1, [pc, #28]	@ (8016fbc <etharp_find_entry+0x2d4>)
 8016f9e:	4613      	mov	r3, r2
 8016fa0:	005b      	lsls	r3, r3, #1
 8016fa2:	4413      	add	r3, r2
 8016fa4:	00db      	lsls	r3, r3, #3
 8016fa6:	440b      	add	r3, r1
 8016fa8:	3308      	adds	r3, #8
 8016faa:	687a      	ldr	r2, [r7, #4]
 8016fac:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016fae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	3728      	adds	r7, #40	@ 0x28
 8016fb6:	46bd      	mov	sp, r7
 8016fb8:	bd80      	pop	{r7, pc}
 8016fba:	bf00      	nop
 8016fbc:	2002750c 	.word	0x2002750c
 8016fc0:	0801d64c 	.word	0x0801d64c
 8016fc4:	0801d684 	.word	0x0801d684
 8016fc8:	0801d6c4 	.word	0x0801d6c4
 8016fcc:	0801d6ec 	.word	0x0801d6ec
 8016fd0:	0801d704 	.word	0x0801d704
 8016fd4:	0801d718 	.word	0x0801d718

08016fd8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016fd8:	b580      	push	{r7, lr}
 8016fda:	b088      	sub	sp, #32
 8016fdc:	af02      	add	r7, sp, #8
 8016fde:	60f8      	str	r0, [r7, #12]
 8016fe0:	60b9      	str	r1, [r7, #8]
 8016fe2:	607a      	str	r2, [r7, #4]
 8016fe4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016fec:	2b06      	cmp	r3, #6
 8016fee:	d006      	beq.n	8016ffe <etharp_update_arp_entry+0x26>
 8016ff0:	4b48      	ldr	r3, [pc, #288]	@ (8017114 <etharp_update_arp_entry+0x13c>)
 8016ff2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8016ff6:	4948      	ldr	r1, [pc, #288]	@ (8017118 <etharp_update_arp_entry+0x140>)
 8016ff8:	4848      	ldr	r0, [pc, #288]	@ (801711c <etharp_update_arp_entry+0x144>)
 8016ffa:	f003 f805 	bl	801a008 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016ffe:	68bb      	ldr	r3, [r7, #8]
 8017000:	2b00      	cmp	r3, #0
 8017002:	d012      	beq.n	801702a <etharp_update_arp_entry+0x52>
 8017004:	68bb      	ldr	r3, [r7, #8]
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	2b00      	cmp	r3, #0
 801700a:	d00e      	beq.n	801702a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801700c:	68bb      	ldr	r3, [r7, #8]
 801700e:	681b      	ldr	r3, [r3, #0]
 8017010:	68f9      	ldr	r1, [r7, #12]
 8017012:	4618      	mov	r0, r3
 8017014:	f001 f8fe 	bl	8018214 <ip4_addr_isbroadcast_u32>
 8017018:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801701a:	2b00      	cmp	r3, #0
 801701c:	d105      	bne.n	801702a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801701e:	68bb      	ldr	r3, [r7, #8]
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017026:	2be0      	cmp	r3, #224	@ 0xe0
 8017028:	d102      	bne.n	8017030 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801702a:	f06f 030f 	mvn.w	r3, #15
 801702e:	e06c      	b.n	801710a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017030:	78fb      	ldrb	r3, [r7, #3]
 8017032:	68fa      	ldr	r2, [r7, #12]
 8017034:	4619      	mov	r1, r3
 8017036:	68b8      	ldr	r0, [r7, #8]
 8017038:	f7ff fe56 	bl	8016ce8 <etharp_find_entry>
 801703c:	4603      	mov	r3, r0
 801703e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017040:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017044:	2b00      	cmp	r3, #0
 8017046:	da02      	bge.n	801704e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017048:	8afb      	ldrh	r3, [r7, #22]
 801704a:	b25b      	sxtb	r3, r3
 801704c:	e05d      	b.n	801710a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801704e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017052:	4933      	ldr	r1, [pc, #204]	@ (8017120 <etharp_update_arp_entry+0x148>)
 8017054:	4613      	mov	r3, r2
 8017056:	005b      	lsls	r3, r3, #1
 8017058:	4413      	add	r3, r2
 801705a:	00db      	lsls	r3, r3, #3
 801705c:	440b      	add	r3, r1
 801705e:	3314      	adds	r3, #20
 8017060:	2202      	movs	r2, #2
 8017062:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017064:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017068:	492d      	ldr	r1, [pc, #180]	@ (8017120 <etharp_update_arp_entry+0x148>)
 801706a:	4613      	mov	r3, r2
 801706c:	005b      	lsls	r3, r3, #1
 801706e:	4413      	add	r3, r2
 8017070:	00db      	lsls	r3, r3, #3
 8017072:	440b      	add	r3, r1
 8017074:	3308      	adds	r3, #8
 8017076:	68fa      	ldr	r2, [r7, #12]
 8017078:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801707a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801707e:	4613      	mov	r3, r2
 8017080:	005b      	lsls	r3, r3, #1
 8017082:	4413      	add	r3, r2
 8017084:	00db      	lsls	r3, r3, #3
 8017086:	3308      	adds	r3, #8
 8017088:	4a25      	ldr	r2, [pc, #148]	@ (8017120 <etharp_update_arp_entry+0x148>)
 801708a:	4413      	add	r3, r2
 801708c:	3304      	adds	r3, #4
 801708e:	2206      	movs	r2, #6
 8017090:	6879      	ldr	r1, [r7, #4]
 8017092:	4618      	mov	r0, r3
 8017094:	f003 f9e3 	bl	801a45e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017098:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801709c:	4920      	ldr	r1, [pc, #128]	@ (8017120 <etharp_update_arp_entry+0x148>)
 801709e:	4613      	mov	r3, r2
 80170a0:	005b      	lsls	r3, r3, #1
 80170a2:	4413      	add	r3, r2
 80170a4:	00db      	lsls	r3, r3, #3
 80170a6:	440b      	add	r3, r1
 80170a8:	3312      	adds	r3, #18
 80170aa:	2200      	movs	r2, #0
 80170ac:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80170ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80170b2:	491b      	ldr	r1, [pc, #108]	@ (8017120 <etharp_update_arp_entry+0x148>)
 80170b4:	4613      	mov	r3, r2
 80170b6:	005b      	lsls	r3, r3, #1
 80170b8:	4413      	add	r3, r2
 80170ba:	00db      	lsls	r3, r3, #3
 80170bc:	440b      	add	r3, r1
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d021      	beq.n	8017108 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80170c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80170c8:	4915      	ldr	r1, [pc, #84]	@ (8017120 <etharp_update_arp_entry+0x148>)
 80170ca:	4613      	mov	r3, r2
 80170cc:	005b      	lsls	r3, r3, #1
 80170ce:	4413      	add	r3, r2
 80170d0:	00db      	lsls	r3, r3, #3
 80170d2:	440b      	add	r3, r1
 80170d4:	681b      	ldr	r3, [r3, #0]
 80170d6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80170d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80170dc:	4910      	ldr	r1, [pc, #64]	@ (8017120 <etharp_update_arp_entry+0x148>)
 80170de:	4613      	mov	r3, r2
 80170e0:	005b      	lsls	r3, r3, #1
 80170e2:	4413      	add	r3, r2
 80170e4:	00db      	lsls	r3, r3, #3
 80170e6:	440b      	add	r3, r1
 80170e8:	2200      	movs	r2, #0
 80170ea:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80170f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80170f6:	9300      	str	r3, [sp, #0]
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	6939      	ldr	r1, [r7, #16]
 80170fc:	68f8      	ldr	r0, [r7, #12]
 80170fe:	f002 f827 	bl	8019150 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8017102:	6938      	ldr	r0, [r7, #16]
 8017104:	f7f9 fb32 	bl	801076c <pbuf_free>
  }
  return ERR_OK;
 8017108:	2300      	movs	r3, #0
}
 801710a:	4618      	mov	r0, r3
 801710c:	3718      	adds	r7, #24
 801710e:	46bd      	mov	sp, r7
 8017110:	bd80      	pop	{r7, pc}
 8017112:	bf00      	nop
 8017114:	0801d64c 	.word	0x0801d64c
 8017118:	0801d744 	.word	0x0801d744
 801711c:	0801d6c4 	.word	0x0801d6c4
 8017120:	2002750c 	.word	0x2002750c

08017124 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017124:	b580      	push	{r7, lr}
 8017126:	b084      	sub	sp, #16
 8017128:	af00      	add	r7, sp, #0
 801712a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801712c:	2300      	movs	r3, #0
 801712e:	60fb      	str	r3, [r7, #12]
 8017130:	e01e      	b.n	8017170 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8017132:	4913      	ldr	r1, [pc, #76]	@ (8017180 <etharp_cleanup_netif+0x5c>)
 8017134:	68fa      	ldr	r2, [r7, #12]
 8017136:	4613      	mov	r3, r2
 8017138:	005b      	lsls	r3, r3, #1
 801713a:	4413      	add	r3, r2
 801713c:	00db      	lsls	r3, r3, #3
 801713e:	440b      	add	r3, r1
 8017140:	3314      	adds	r3, #20
 8017142:	781b      	ldrb	r3, [r3, #0]
 8017144:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017146:	7afb      	ldrb	r3, [r7, #11]
 8017148:	2b00      	cmp	r3, #0
 801714a:	d00e      	beq.n	801716a <etharp_cleanup_netif+0x46>
 801714c:	490c      	ldr	r1, [pc, #48]	@ (8017180 <etharp_cleanup_netif+0x5c>)
 801714e:	68fa      	ldr	r2, [r7, #12]
 8017150:	4613      	mov	r3, r2
 8017152:	005b      	lsls	r3, r3, #1
 8017154:	4413      	add	r3, r2
 8017156:	00db      	lsls	r3, r3, #3
 8017158:	440b      	add	r3, r1
 801715a:	3308      	adds	r3, #8
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	687a      	ldr	r2, [r7, #4]
 8017160:	429a      	cmp	r2, r3
 8017162:	d102      	bne.n	801716a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017164:	68f8      	ldr	r0, [r7, #12]
 8017166:	f7ff fce5 	bl	8016b34 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	3301      	adds	r3, #1
 801716e:	60fb      	str	r3, [r7, #12]
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	2b09      	cmp	r3, #9
 8017174:	dddd      	ble.n	8017132 <etharp_cleanup_netif+0xe>
    }
  }
}
 8017176:	bf00      	nop
 8017178:	bf00      	nop
 801717a:	3710      	adds	r7, #16
 801717c:	46bd      	mov	sp, r7
 801717e:	bd80      	pop	{r7, pc}
 8017180:	2002750c 	.word	0x2002750c

08017184 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017184:	b5b0      	push	{r4, r5, r7, lr}
 8017186:	b08a      	sub	sp, #40	@ 0x28
 8017188:	af04      	add	r7, sp, #16
 801718a:	6078      	str	r0, [r7, #4]
 801718c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801718e:	683b      	ldr	r3, [r7, #0]
 8017190:	2b00      	cmp	r3, #0
 8017192:	d107      	bne.n	80171a4 <etharp_input+0x20>
 8017194:	4b3d      	ldr	r3, [pc, #244]	@ (801728c <etharp_input+0x108>)
 8017196:	f240 228a 	movw	r2, #650	@ 0x28a
 801719a:	493d      	ldr	r1, [pc, #244]	@ (8017290 <etharp_input+0x10c>)
 801719c:	483d      	ldr	r0, [pc, #244]	@ (8017294 <etharp_input+0x110>)
 801719e:	f002 ff33 	bl	801a008 <iprintf>
 80171a2:	e06f      	b.n	8017284 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	685b      	ldr	r3, [r3, #4]
 80171a8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80171aa:	693b      	ldr	r3, [r7, #16]
 80171ac:	881b      	ldrh	r3, [r3, #0]
 80171ae:	b29b      	uxth	r3, r3
 80171b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80171b4:	d10c      	bne.n	80171d0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80171b6:	693b      	ldr	r3, [r7, #16]
 80171b8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80171ba:	2b06      	cmp	r3, #6
 80171bc:	d108      	bne.n	80171d0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80171be:	693b      	ldr	r3, [r7, #16]
 80171c0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80171c2:	2b04      	cmp	r3, #4
 80171c4:	d104      	bne.n	80171d0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80171c6:	693b      	ldr	r3, [r7, #16]
 80171c8:	885b      	ldrh	r3, [r3, #2]
 80171ca:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80171cc:	2b08      	cmp	r3, #8
 80171ce:	d003      	beq.n	80171d8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80171d0:	6878      	ldr	r0, [r7, #4]
 80171d2:	f7f9 facb 	bl	801076c <pbuf_free>
    return;
 80171d6:	e055      	b.n	8017284 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80171d8:	693b      	ldr	r3, [r7, #16]
 80171da:	330e      	adds	r3, #14
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80171e0:	693b      	ldr	r3, [r7, #16]
 80171e2:	3318      	adds	r3, #24
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80171e8:	683b      	ldr	r3, [r7, #0]
 80171ea:	3304      	adds	r3, #4
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d102      	bne.n	80171f8 <etharp_input+0x74>
    for_us = 0;
 80171f2:	2300      	movs	r3, #0
 80171f4:	75fb      	strb	r3, [r7, #23]
 80171f6:	e009      	b.n	801720c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80171f8:	68ba      	ldr	r2, [r7, #8]
 80171fa:	683b      	ldr	r3, [r7, #0]
 80171fc:	3304      	adds	r3, #4
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	429a      	cmp	r2, r3
 8017202:	bf0c      	ite	eq
 8017204:	2301      	moveq	r3, #1
 8017206:	2300      	movne	r3, #0
 8017208:	b2db      	uxtb	r3, r3
 801720a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801720c:	693b      	ldr	r3, [r7, #16]
 801720e:	f103 0208 	add.w	r2, r3, #8
 8017212:	7dfb      	ldrb	r3, [r7, #23]
 8017214:	2b00      	cmp	r3, #0
 8017216:	d001      	beq.n	801721c <etharp_input+0x98>
 8017218:	2301      	movs	r3, #1
 801721a:	e000      	b.n	801721e <etharp_input+0x9a>
 801721c:	2302      	movs	r3, #2
 801721e:	f107 010c 	add.w	r1, r7, #12
 8017222:	6838      	ldr	r0, [r7, #0]
 8017224:	f7ff fed8 	bl	8016fd8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017228:	693b      	ldr	r3, [r7, #16]
 801722a:	88db      	ldrh	r3, [r3, #6]
 801722c:	b29b      	uxth	r3, r3
 801722e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017232:	d003      	beq.n	801723c <etharp_input+0xb8>
 8017234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017238:	d01e      	beq.n	8017278 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801723a:	e020      	b.n	801727e <etharp_input+0xfa>
      if (for_us) {
 801723c:	7dfb      	ldrb	r3, [r7, #23]
 801723e:	2b00      	cmp	r3, #0
 8017240:	d01c      	beq.n	801727c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017242:	683b      	ldr	r3, [r7, #0]
 8017244:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8017248:	693b      	ldr	r3, [r7, #16]
 801724a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801724e:	683b      	ldr	r3, [r7, #0]
 8017250:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8017254:	683b      	ldr	r3, [r7, #0]
 8017256:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017258:	693a      	ldr	r2, [r7, #16]
 801725a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801725c:	2102      	movs	r1, #2
 801725e:	9103      	str	r1, [sp, #12]
 8017260:	f107 010c 	add.w	r1, r7, #12
 8017264:	9102      	str	r1, [sp, #8]
 8017266:	9201      	str	r2, [sp, #4]
 8017268:	9300      	str	r3, [sp, #0]
 801726a:	462b      	mov	r3, r5
 801726c:	4622      	mov	r2, r4
 801726e:	4601      	mov	r1, r0
 8017270:	6838      	ldr	r0, [r7, #0]
 8017272:	f000 faeb 	bl	801784c <etharp_raw>
      break;
 8017276:	e001      	b.n	801727c <etharp_input+0xf8>
      break;
 8017278:	bf00      	nop
 801727a:	e000      	b.n	801727e <etharp_input+0xfa>
      break;
 801727c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801727e:	6878      	ldr	r0, [r7, #4]
 8017280:	f7f9 fa74 	bl	801076c <pbuf_free>
}
 8017284:	3718      	adds	r7, #24
 8017286:	46bd      	mov	sp, r7
 8017288:	bdb0      	pop	{r4, r5, r7, pc}
 801728a:	bf00      	nop
 801728c:	0801d64c 	.word	0x0801d64c
 8017290:	0801d79c 	.word	0x0801d79c
 8017294:	0801d6c4 	.word	0x0801d6c4

08017298 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b086      	sub	sp, #24
 801729c:	af02      	add	r7, sp, #8
 801729e:	60f8      	str	r0, [r7, #12]
 80172a0:	60b9      	str	r1, [r7, #8]
 80172a2:	4613      	mov	r3, r2
 80172a4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80172a6:	79fa      	ldrb	r2, [r7, #7]
 80172a8:	4944      	ldr	r1, [pc, #272]	@ (80173bc <etharp_output_to_arp_index+0x124>)
 80172aa:	4613      	mov	r3, r2
 80172ac:	005b      	lsls	r3, r3, #1
 80172ae:	4413      	add	r3, r2
 80172b0:	00db      	lsls	r3, r3, #3
 80172b2:	440b      	add	r3, r1
 80172b4:	3314      	adds	r3, #20
 80172b6:	781b      	ldrb	r3, [r3, #0]
 80172b8:	2b01      	cmp	r3, #1
 80172ba:	d806      	bhi.n	80172ca <etharp_output_to_arp_index+0x32>
 80172bc:	4b40      	ldr	r3, [pc, #256]	@ (80173c0 <etharp_output_to_arp_index+0x128>)
 80172be:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80172c2:	4940      	ldr	r1, [pc, #256]	@ (80173c4 <etharp_output_to_arp_index+0x12c>)
 80172c4:	4840      	ldr	r0, [pc, #256]	@ (80173c8 <etharp_output_to_arp_index+0x130>)
 80172c6:	f002 fe9f 	bl	801a008 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80172ca:	79fa      	ldrb	r2, [r7, #7]
 80172cc:	493b      	ldr	r1, [pc, #236]	@ (80173bc <etharp_output_to_arp_index+0x124>)
 80172ce:	4613      	mov	r3, r2
 80172d0:	005b      	lsls	r3, r3, #1
 80172d2:	4413      	add	r3, r2
 80172d4:	00db      	lsls	r3, r3, #3
 80172d6:	440b      	add	r3, r1
 80172d8:	3314      	adds	r3, #20
 80172da:	781b      	ldrb	r3, [r3, #0]
 80172dc:	2b02      	cmp	r3, #2
 80172de:	d153      	bne.n	8017388 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80172e0:	79fa      	ldrb	r2, [r7, #7]
 80172e2:	4936      	ldr	r1, [pc, #216]	@ (80173bc <etharp_output_to_arp_index+0x124>)
 80172e4:	4613      	mov	r3, r2
 80172e6:	005b      	lsls	r3, r3, #1
 80172e8:	4413      	add	r3, r2
 80172ea:	00db      	lsls	r3, r3, #3
 80172ec:	440b      	add	r3, r1
 80172ee:	3312      	adds	r3, #18
 80172f0:	881b      	ldrh	r3, [r3, #0]
 80172f2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80172f6:	d919      	bls.n	801732c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80172f8:	79fa      	ldrb	r2, [r7, #7]
 80172fa:	4613      	mov	r3, r2
 80172fc:	005b      	lsls	r3, r3, #1
 80172fe:	4413      	add	r3, r2
 8017300:	00db      	lsls	r3, r3, #3
 8017302:	4a2e      	ldr	r2, [pc, #184]	@ (80173bc <etharp_output_to_arp_index+0x124>)
 8017304:	4413      	add	r3, r2
 8017306:	3304      	adds	r3, #4
 8017308:	4619      	mov	r1, r3
 801730a:	68f8      	ldr	r0, [r7, #12]
 801730c:	f000 fb4c 	bl	80179a8 <etharp_request>
 8017310:	4603      	mov	r3, r0
 8017312:	2b00      	cmp	r3, #0
 8017314:	d138      	bne.n	8017388 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017316:	79fa      	ldrb	r2, [r7, #7]
 8017318:	4928      	ldr	r1, [pc, #160]	@ (80173bc <etharp_output_to_arp_index+0x124>)
 801731a:	4613      	mov	r3, r2
 801731c:	005b      	lsls	r3, r3, #1
 801731e:	4413      	add	r3, r2
 8017320:	00db      	lsls	r3, r3, #3
 8017322:	440b      	add	r3, r1
 8017324:	3314      	adds	r3, #20
 8017326:	2203      	movs	r2, #3
 8017328:	701a      	strb	r2, [r3, #0]
 801732a:	e02d      	b.n	8017388 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801732c:	79fa      	ldrb	r2, [r7, #7]
 801732e:	4923      	ldr	r1, [pc, #140]	@ (80173bc <etharp_output_to_arp_index+0x124>)
 8017330:	4613      	mov	r3, r2
 8017332:	005b      	lsls	r3, r3, #1
 8017334:	4413      	add	r3, r2
 8017336:	00db      	lsls	r3, r3, #3
 8017338:	440b      	add	r3, r1
 801733a:	3312      	adds	r3, #18
 801733c:	881b      	ldrh	r3, [r3, #0]
 801733e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8017342:	d321      	bcc.n	8017388 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017344:	79fa      	ldrb	r2, [r7, #7]
 8017346:	4613      	mov	r3, r2
 8017348:	005b      	lsls	r3, r3, #1
 801734a:	4413      	add	r3, r2
 801734c:	00db      	lsls	r3, r3, #3
 801734e:	4a1b      	ldr	r2, [pc, #108]	@ (80173bc <etharp_output_to_arp_index+0x124>)
 8017350:	4413      	add	r3, r2
 8017352:	1d19      	adds	r1, r3, #4
 8017354:	79fa      	ldrb	r2, [r7, #7]
 8017356:	4613      	mov	r3, r2
 8017358:	005b      	lsls	r3, r3, #1
 801735a:	4413      	add	r3, r2
 801735c:	00db      	lsls	r3, r3, #3
 801735e:	3308      	adds	r3, #8
 8017360:	4a16      	ldr	r2, [pc, #88]	@ (80173bc <etharp_output_to_arp_index+0x124>)
 8017362:	4413      	add	r3, r2
 8017364:	3304      	adds	r3, #4
 8017366:	461a      	mov	r2, r3
 8017368:	68f8      	ldr	r0, [r7, #12]
 801736a:	f000 fafb 	bl	8017964 <etharp_request_dst>
 801736e:	4603      	mov	r3, r0
 8017370:	2b00      	cmp	r3, #0
 8017372:	d109      	bne.n	8017388 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017374:	79fa      	ldrb	r2, [r7, #7]
 8017376:	4911      	ldr	r1, [pc, #68]	@ (80173bc <etharp_output_to_arp_index+0x124>)
 8017378:	4613      	mov	r3, r2
 801737a:	005b      	lsls	r3, r3, #1
 801737c:	4413      	add	r3, r2
 801737e:	00db      	lsls	r3, r3, #3
 8017380:	440b      	add	r3, r1
 8017382:	3314      	adds	r3, #20
 8017384:	2203      	movs	r2, #3
 8017386:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017388:	68fb      	ldr	r3, [r7, #12]
 801738a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801738e:	79fa      	ldrb	r2, [r7, #7]
 8017390:	4613      	mov	r3, r2
 8017392:	005b      	lsls	r3, r3, #1
 8017394:	4413      	add	r3, r2
 8017396:	00db      	lsls	r3, r3, #3
 8017398:	3308      	adds	r3, #8
 801739a:	4a08      	ldr	r2, [pc, #32]	@ (80173bc <etharp_output_to_arp_index+0x124>)
 801739c:	4413      	add	r3, r2
 801739e:	3304      	adds	r3, #4
 80173a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80173a4:	9200      	str	r2, [sp, #0]
 80173a6:	460a      	mov	r2, r1
 80173a8:	68b9      	ldr	r1, [r7, #8]
 80173aa:	68f8      	ldr	r0, [r7, #12]
 80173ac:	f001 fed0 	bl	8019150 <ethernet_output>
 80173b0:	4603      	mov	r3, r0
}
 80173b2:	4618      	mov	r0, r3
 80173b4:	3710      	adds	r7, #16
 80173b6:	46bd      	mov	sp, r7
 80173b8:	bd80      	pop	{r7, pc}
 80173ba:	bf00      	nop
 80173bc:	2002750c 	.word	0x2002750c
 80173c0:	0801d64c 	.word	0x0801d64c
 80173c4:	0801d7bc 	.word	0x0801d7bc
 80173c8:	0801d6c4 	.word	0x0801d6c4

080173cc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80173cc:	b580      	push	{r7, lr}
 80173ce:	b08a      	sub	sp, #40	@ 0x28
 80173d0:	af02      	add	r7, sp, #8
 80173d2:	60f8      	str	r0, [r7, #12]
 80173d4:	60b9      	str	r1, [r7, #8]
 80173d6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d106      	bne.n	80173f0 <etharp_output+0x24>
 80173e2:	4b73      	ldr	r3, [pc, #460]	@ (80175b0 <etharp_output+0x1e4>)
 80173e4:	f240 321e 	movw	r2, #798	@ 0x31e
 80173e8:	4972      	ldr	r1, [pc, #456]	@ (80175b4 <etharp_output+0x1e8>)
 80173ea:	4873      	ldr	r0, [pc, #460]	@ (80175b8 <etharp_output+0x1ec>)
 80173ec:	f002 fe0c 	bl	801a008 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80173f0:	68bb      	ldr	r3, [r7, #8]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d106      	bne.n	8017404 <etharp_output+0x38>
 80173f6:	4b6e      	ldr	r3, [pc, #440]	@ (80175b0 <etharp_output+0x1e4>)
 80173f8:	f240 321f 	movw	r2, #799	@ 0x31f
 80173fc:	496f      	ldr	r1, [pc, #444]	@ (80175bc <etharp_output+0x1f0>)
 80173fe:	486e      	ldr	r0, [pc, #440]	@ (80175b8 <etharp_output+0x1ec>)
 8017400:	f002 fe02 	bl	801a008 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	2b00      	cmp	r3, #0
 8017408:	d106      	bne.n	8017418 <etharp_output+0x4c>
 801740a:	4b69      	ldr	r3, [pc, #420]	@ (80175b0 <etharp_output+0x1e4>)
 801740c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8017410:	496b      	ldr	r1, [pc, #428]	@ (80175c0 <etharp_output+0x1f4>)
 8017412:	4869      	ldr	r0, [pc, #420]	@ (80175b8 <etharp_output+0x1ec>)
 8017414:	f002 fdf8 	bl	801a008 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	68f9      	ldr	r1, [r7, #12]
 801741e:	4618      	mov	r0, r3
 8017420:	f000 fef8 	bl	8018214 <ip4_addr_isbroadcast_u32>
 8017424:	4603      	mov	r3, r0
 8017426:	2b00      	cmp	r3, #0
 8017428:	d002      	beq.n	8017430 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801742a:	4b66      	ldr	r3, [pc, #408]	@ (80175c4 <etharp_output+0x1f8>)
 801742c:	61fb      	str	r3, [r7, #28]
 801742e:	e0af      	b.n	8017590 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017438:	2be0      	cmp	r3, #224	@ 0xe0
 801743a:	d118      	bne.n	801746e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801743c:	2301      	movs	r3, #1
 801743e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017440:	2300      	movs	r3, #0
 8017442:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017444:	235e      	movs	r3, #94	@ 0x5e
 8017446:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	3301      	adds	r3, #1
 801744c:	781b      	ldrb	r3, [r3, #0]
 801744e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017452:	b2db      	uxtb	r3, r3
 8017454:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	3302      	adds	r3, #2
 801745a:	781b      	ldrb	r3, [r3, #0]
 801745c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	3303      	adds	r3, #3
 8017462:	781b      	ldrb	r3, [r3, #0]
 8017464:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017466:	f107 0310 	add.w	r3, r7, #16
 801746a:	61fb      	str	r3, [r7, #28]
 801746c:	e090      	b.n	8017590 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	681a      	ldr	r2, [r3, #0]
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	3304      	adds	r3, #4
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	405a      	eors	r2, r3
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	3308      	adds	r3, #8
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	4013      	ands	r3, r2
 8017482:	2b00      	cmp	r3, #0
 8017484:	d012      	beq.n	80174ac <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801748c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8017490:	4293      	cmp	r3, r2
 8017492:	d00b      	beq.n	80174ac <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	330c      	adds	r3, #12
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	2b00      	cmp	r3, #0
 801749c:	d003      	beq.n	80174a6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	330c      	adds	r3, #12
 80174a2:	61bb      	str	r3, [r7, #24]
 80174a4:	e002      	b.n	80174ac <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80174a6:	f06f 0303 	mvn.w	r3, #3
 80174aa:	e07d      	b.n	80175a8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80174ac:	4b46      	ldr	r3, [pc, #280]	@ (80175c8 <etharp_output+0x1fc>)
 80174ae:	781b      	ldrb	r3, [r3, #0]
 80174b0:	4619      	mov	r1, r3
 80174b2:	4a46      	ldr	r2, [pc, #280]	@ (80175cc <etharp_output+0x200>)
 80174b4:	460b      	mov	r3, r1
 80174b6:	005b      	lsls	r3, r3, #1
 80174b8:	440b      	add	r3, r1
 80174ba:	00db      	lsls	r3, r3, #3
 80174bc:	4413      	add	r3, r2
 80174be:	3314      	adds	r3, #20
 80174c0:	781b      	ldrb	r3, [r3, #0]
 80174c2:	2b01      	cmp	r3, #1
 80174c4:	d925      	bls.n	8017512 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80174c6:	4b40      	ldr	r3, [pc, #256]	@ (80175c8 <etharp_output+0x1fc>)
 80174c8:	781b      	ldrb	r3, [r3, #0]
 80174ca:	4619      	mov	r1, r3
 80174cc:	4a3f      	ldr	r2, [pc, #252]	@ (80175cc <etharp_output+0x200>)
 80174ce:	460b      	mov	r3, r1
 80174d0:	005b      	lsls	r3, r3, #1
 80174d2:	440b      	add	r3, r1
 80174d4:	00db      	lsls	r3, r3, #3
 80174d6:	4413      	add	r3, r2
 80174d8:	3308      	adds	r3, #8
 80174da:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80174dc:	68fa      	ldr	r2, [r7, #12]
 80174de:	429a      	cmp	r2, r3
 80174e0:	d117      	bne.n	8017512 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80174e2:	69bb      	ldr	r3, [r7, #24]
 80174e4:	681a      	ldr	r2, [r3, #0]
 80174e6:	4b38      	ldr	r3, [pc, #224]	@ (80175c8 <etharp_output+0x1fc>)
 80174e8:	781b      	ldrb	r3, [r3, #0]
 80174ea:	4618      	mov	r0, r3
 80174ec:	4937      	ldr	r1, [pc, #220]	@ (80175cc <etharp_output+0x200>)
 80174ee:	4603      	mov	r3, r0
 80174f0:	005b      	lsls	r3, r3, #1
 80174f2:	4403      	add	r3, r0
 80174f4:	00db      	lsls	r3, r3, #3
 80174f6:	440b      	add	r3, r1
 80174f8:	3304      	adds	r3, #4
 80174fa:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80174fc:	429a      	cmp	r2, r3
 80174fe:	d108      	bne.n	8017512 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017500:	4b31      	ldr	r3, [pc, #196]	@ (80175c8 <etharp_output+0x1fc>)
 8017502:	781b      	ldrb	r3, [r3, #0]
 8017504:	461a      	mov	r2, r3
 8017506:	68b9      	ldr	r1, [r7, #8]
 8017508:	68f8      	ldr	r0, [r7, #12]
 801750a:	f7ff fec5 	bl	8017298 <etharp_output_to_arp_index>
 801750e:	4603      	mov	r3, r0
 8017510:	e04a      	b.n	80175a8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017512:	2300      	movs	r3, #0
 8017514:	75fb      	strb	r3, [r7, #23]
 8017516:	e031      	b.n	801757c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017518:	7dfa      	ldrb	r2, [r7, #23]
 801751a:	492c      	ldr	r1, [pc, #176]	@ (80175cc <etharp_output+0x200>)
 801751c:	4613      	mov	r3, r2
 801751e:	005b      	lsls	r3, r3, #1
 8017520:	4413      	add	r3, r2
 8017522:	00db      	lsls	r3, r3, #3
 8017524:	440b      	add	r3, r1
 8017526:	3314      	adds	r3, #20
 8017528:	781b      	ldrb	r3, [r3, #0]
 801752a:	2b01      	cmp	r3, #1
 801752c:	d923      	bls.n	8017576 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801752e:	7dfa      	ldrb	r2, [r7, #23]
 8017530:	4926      	ldr	r1, [pc, #152]	@ (80175cc <etharp_output+0x200>)
 8017532:	4613      	mov	r3, r2
 8017534:	005b      	lsls	r3, r3, #1
 8017536:	4413      	add	r3, r2
 8017538:	00db      	lsls	r3, r3, #3
 801753a:	440b      	add	r3, r1
 801753c:	3308      	adds	r3, #8
 801753e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017540:	68fa      	ldr	r2, [r7, #12]
 8017542:	429a      	cmp	r2, r3
 8017544:	d117      	bne.n	8017576 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017546:	69bb      	ldr	r3, [r7, #24]
 8017548:	6819      	ldr	r1, [r3, #0]
 801754a:	7dfa      	ldrb	r2, [r7, #23]
 801754c:	481f      	ldr	r0, [pc, #124]	@ (80175cc <etharp_output+0x200>)
 801754e:	4613      	mov	r3, r2
 8017550:	005b      	lsls	r3, r3, #1
 8017552:	4413      	add	r3, r2
 8017554:	00db      	lsls	r3, r3, #3
 8017556:	4403      	add	r3, r0
 8017558:	3304      	adds	r3, #4
 801755a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801755c:	4299      	cmp	r1, r3
 801755e:	d10a      	bne.n	8017576 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017560:	4a19      	ldr	r2, [pc, #100]	@ (80175c8 <etharp_output+0x1fc>)
 8017562:	7dfb      	ldrb	r3, [r7, #23]
 8017564:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017566:	7dfb      	ldrb	r3, [r7, #23]
 8017568:	461a      	mov	r2, r3
 801756a:	68b9      	ldr	r1, [r7, #8]
 801756c:	68f8      	ldr	r0, [r7, #12]
 801756e:	f7ff fe93 	bl	8017298 <etharp_output_to_arp_index>
 8017572:	4603      	mov	r3, r0
 8017574:	e018      	b.n	80175a8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017576:	7dfb      	ldrb	r3, [r7, #23]
 8017578:	3301      	adds	r3, #1
 801757a:	75fb      	strb	r3, [r7, #23]
 801757c:	7dfb      	ldrb	r3, [r7, #23]
 801757e:	2b09      	cmp	r3, #9
 8017580:	d9ca      	bls.n	8017518 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8017582:	68ba      	ldr	r2, [r7, #8]
 8017584:	69b9      	ldr	r1, [r7, #24]
 8017586:	68f8      	ldr	r0, [r7, #12]
 8017588:	f000 f822 	bl	80175d0 <etharp_query>
 801758c:	4603      	mov	r3, r0
 801758e:	e00b      	b.n	80175a8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8017596:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801759a:	9300      	str	r3, [sp, #0]
 801759c:	69fb      	ldr	r3, [r7, #28]
 801759e:	68b9      	ldr	r1, [r7, #8]
 80175a0:	68f8      	ldr	r0, [r7, #12]
 80175a2:	f001 fdd5 	bl	8019150 <ethernet_output>
 80175a6:	4603      	mov	r3, r0
}
 80175a8:	4618      	mov	r0, r3
 80175aa:	3720      	adds	r7, #32
 80175ac:	46bd      	mov	sp, r7
 80175ae:	bd80      	pop	{r7, pc}
 80175b0:	0801d64c 	.word	0x0801d64c
 80175b4:	0801d79c 	.word	0x0801d79c
 80175b8:	0801d6c4 	.word	0x0801d6c4
 80175bc:	0801d7ec 	.word	0x0801d7ec
 80175c0:	0801d78c 	.word	0x0801d78c
 80175c4:	0801e2bc 	.word	0x0801e2bc
 80175c8:	200275fc 	.word	0x200275fc
 80175cc:	2002750c 	.word	0x2002750c

080175d0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80175d0:	b580      	push	{r7, lr}
 80175d2:	b08c      	sub	sp, #48	@ 0x30
 80175d4:	af02      	add	r7, sp, #8
 80175d6:	60f8      	str	r0, [r7, #12]
 80175d8:	60b9      	str	r1, [r7, #8]
 80175da:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	3326      	adds	r3, #38	@ 0x26
 80175e0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80175e2:	23ff      	movs	r3, #255	@ 0xff
 80175e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80175e8:	2300      	movs	r3, #0
 80175ea:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80175ec:	68bb      	ldr	r3, [r7, #8]
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	68f9      	ldr	r1, [r7, #12]
 80175f2:	4618      	mov	r0, r3
 80175f4:	f000 fe0e 	bl	8018214 <ip4_addr_isbroadcast_u32>
 80175f8:	4603      	mov	r3, r0
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d10c      	bne.n	8017618 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80175fe:	68bb      	ldr	r3, [r7, #8]
 8017600:	681b      	ldr	r3, [r3, #0]
 8017602:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017606:	2be0      	cmp	r3, #224	@ 0xe0
 8017608:	d006      	beq.n	8017618 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801760a:	68bb      	ldr	r3, [r7, #8]
 801760c:	2b00      	cmp	r3, #0
 801760e:	d003      	beq.n	8017618 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017610:	68bb      	ldr	r3, [r7, #8]
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	2b00      	cmp	r3, #0
 8017616:	d102      	bne.n	801761e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017618:	f06f 030f 	mvn.w	r3, #15
 801761c:	e101      	b.n	8017822 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801761e:	68fa      	ldr	r2, [r7, #12]
 8017620:	2101      	movs	r1, #1
 8017622:	68b8      	ldr	r0, [r7, #8]
 8017624:	f7ff fb60 	bl	8016ce8 <etharp_find_entry>
 8017628:	4603      	mov	r3, r0
 801762a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801762c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017630:	2b00      	cmp	r3, #0
 8017632:	da02      	bge.n	801763a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017634:	8a7b      	ldrh	r3, [r7, #18]
 8017636:	b25b      	sxtb	r3, r3
 8017638:	e0f3      	b.n	8017822 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801763a:	8a7b      	ldrh	r3, [r7, #18]
 801763c:	2b7e      	cmp	r3, #126	@ 0x7e
 801763e:	d906      	bls.n	801764e <etharp_query+0x7e>
 8017640:	4b7a      	ldr	r3, [pc, #488]	@ (801782c <etharp_query+0x25c>)
 8017642:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8017646:	497a      	ldr	r1, [pc, #488]	@ (8017830 <etharp_query+0x260>)
 8017648:	487a      	ldr	r0, [pc, #488]	@ (8017834 <etharp_query+0x264>)
 801764a:	f002 fcdd 	bl	801a008 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801764e:	8a7b      	ldrh	r3, [r7, #18]
 8017650:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8017652:	7c7a      	ldrb	r2, [r7, #17]
 8017654:	4978      	ldr	r1, [pc, #480]	@ (8017838 <etharp_query+0x268>)
 8017656:	4613      	mov	r3, r2
 8017658:	005b      	lsls	r3, r3, #1
 801765a:	4413      	add	r3, r2
 801765c:	00db      	lsls	r3, r3, #3
 801765e:	440b      	add	r3, r1
 8017660:	3314      	adds	r3, #20
 8017662:	781b      	ldrb	r3, [r3, #0]
 8017664:	2b00      	cmp	r3, #0
 8017666:	d115      	bne.n	8017694 <etharp_query+0xc4>
    is_new_entry = 1;
 8017668:	2301      	movs	r3, #1
 801766a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801766c:	7c7a      	ldrb	r2, [r7, #17]
 801766e:	4972      	ldr	r1, [pc, #456]	@ (8017838 <etharp_query+0x268>)
 8017670:	4613      	mov	r3, r2
 8017672:	005b      	lsls	r3, r3, #1
 8017674:	4413      	add	r3, r2
 8017676:	00db      	lsls	r3, r3, #3
 8017678:	440b      	add	r3, r1
 801767a:	3314      	adds	r3, #20
 801767c:	2201      	movs	r2, #1
 801767e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017680:	7c7a      	ldrb	r2, [r7, #17]
 8017682:	496d      	ldr	r1, [pc, #436]	@ (8017838 <etharp_query+0x268>)
 8017684:	4613      	mov	r3, r2
 8017686:	005b      	lsls	r3, r3, #1
 8017688:	4413      	add	r3, r2
 801768a:	00db      	lsls	r3, r3, #3
 801768c:	440b      	add	r3, r1
 801768e:	3308      	adds	r3, #8
 8017690:	68fa      	ldr	r2, [r7, #12]
 8017692:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017694:	7c7a      	ldrb	r2, [r7, #17]
 8017696:	4968      	ldr	r1, [pc, #416]	@ (8017838 <etharp_query+0x268>)
 8017698:	4613      	mov	r3, r2
 801769a:	005b      	lsls	r3, r3, #1
 801769c:	4413      	add	r3, r2
 801769e:	00db      	lsls	r3, r3, #3
 80176a0:	440b      	add	r3, r1
 80176a2:	3314      	adds	r3, #20
 80176a4:	781b      	ldrb	r3, [r3, #0]
 80176a6:	2b01      	cmp	r3, #1
 80176a8:	d011      	beq.n	80176ce <etharp_query+0xfe>
 80176aa:	7c7a      	ldrb	r2, [r7, #17]
 80176ac:	4962      	ldr	r1, [pc, #392]	@ (8017838 <etharp_query+0x268>)
 80176ae:	4613      	mov	r3, r2
 80176b0:	005b      	lsls	r3, r3, #1
 80176b2:	4413      	add	r3, r2
 80176b4:	00db      	lsls	r3, r3, #3
 80176b6:	440b      	add	r3, r1
 80176b8:	3314      	adds	r3, #20
 80176ba:	781b      	ldrb	r3, [r3, #0]
 80176bc:	2b01      	cmp	r3, #1
 80176be:	d806      	bhi.n	80176ce <etharp_query+0xfe>
 80176c0:	4b5a      	ldr	r3, [pc, #360]	@ (801782c <etharp_query+0x25c>)
 80176c2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 80176c6:	495d      	ldr	r1, [pc, #372]	@ (801783c <etharp_query+0x26c>)
 80176c8:	485a      	ldr	r0, [pc, #360]	@ (8017834 <etharp_query+0x264>)
 80176ca:	f002 fc9d 	bl	801a008 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80176ce:	6a3b      	ldr	r3, [r7, #32]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d102      	bne.n	80176da <etharp_query+0x10a>
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d10c      	bne.n	80176f4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80176da:	68b9      	ldr	r1, [r7, #8]
 80176dc:	68f8      	ldr	r0, [r7, #12]
 80176de:	f000 f963 	bl	80179a8 <etharp_request>
 80176e2:	4603      	mov	r3, r0
 80176e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d102      	bne.n	80176f4 <etharp_query+0x124>
      return result;
 80176ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80176f2:	e096      	b.n	8017822 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d106      	bne.n	8017708 <etharp_query+0x138>
 80176fa:	4b4c      	ldr	r3, [pc, #304]	@ (801782c <etharp_query+0x25c>)
 80176fc:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8017700:	494f      	ldr	r1, [pc, #316]	@ (8017840 <etharp_query+0x270>)
 8017702:	484c      	ldr	r0, [pc, #304]	@ (8017834 <etharp_query+0x264>)
 8017704:	f002 fc80 	bl	801a008 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017708:	7c7a      	ldrb	r2, [r7, #17]
 801770a:	494b      	ldr	r1, [pc, #300]	@ (8017838 <etharp_query+0x268>)
 801770c:	4613      	mov	r3, r2
 801770e:	005b      	lsls	r3, r3, #1
 8017710:	4413      	add	r3, r2
 8017712:	00db      	lsls	r3, r3, #3
 8017714:	440b      	add	r3, r1
 8017716:	3314      	adds	r3, #20
 8017718:	781b      	ldrb	r3, [r3, #0]
 801771a:	2b01      	cmp	r3, #1
 801771c:	d917      	bls.n	801774e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801771e:	4a49      	ldr	r2, [pc, #292]	@ (8017844 <etharp_query+0x274>)
 8017720:	7c7b      	ldrb	r3, [r7, #17]
 8017722:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017724:	7c7a      	ldrb	r2, [r7, #17]
 8017726:	4613      	mov	r3, r2
 8017728:	005b      	lsls	r3, r3, #1
 801772a:	4413      	add	r3, r2
 801772c:	00db      	lsls	r3, r3, #3
 801772e:	3308      	adds	r3, #8
 8017730:	4a41      	ldr	r2, [pc, #260]	@ (8017838 <etharp_query+0x268>)
 8017732:	4413      	add	r3, r2
 8017734:	3304      	adds	r3, #4
 8017736:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801773a:	9200      	str	r2, [sp, #0]
 801773c:	697a      	ldr	r2, [r7, #20]
 801773e:	6879      	ldr	r1, [r7, #4]
 8017740:	68f8      	ldr	r0, [r7, #12]
 8017742:	f001 fd05 	bl	8019150 <ethernet_output>
 8017746:	4603      	mov	r3, r0
 8017748:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801774c:	e067      	b.n	801781e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801774e:	7c7a      	ldrb	r2, [r7, #17]
 8017750:	4939      	ldr	r1, [pc, #228]	@ (8017838 <etharp_query+0x268>)
 8017752:	4613      	mov	r3, r2
 8017754:	005b      	lsls	r3, r3, #1
 8017756:	4413      	add	r3, r2
 8017758:	00db      	lsls	r3, r3, #3
 801775a:	440b      	add	r3, r1
 801775c:	3314      	adds	r3, #20
 801775e:	781b      	ldrb	r3, [r3, #0]
 8017760:	2b01      	cmp	r3, #1
 8017762:	d15c      	bne.n	801781e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017764:	2300      	movs	r3, #0
 8017766:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801776c:	e01c      	b.n	80177a8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801776e:	69fb      	ldr	r3, [r7, #28]
 8017770:	895a      	ldrh	r2, [r3, #10]
 8017772:	69fb      	ldr	r3, [r7, #28]
 8017774:	891b      	ldrh	r3, [r3, #8]
 8017776:	429a      	cmp	r2, r3
 8017778:	d10a      	bne.n	8017790 <etharp_query+0x1c0>
 801777a:	69fb      	ldr	r3, [r7, #28]
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d006      	beq.n	8017790 <etharp_query+0x1c0>
 8017782:	4b2a      	ldr	r3, [pc, #168]	@ (801782c <etharp_query+0x25c>)
 8017784:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8017788:	492f      	ldr	r1, [pc, #188]	@ (8017848 <etharp_query+0x278>)
 801778a:	482a      	ldr	r0, [pc, #168]	@ (8017834 <etharp_query+0x264>)
 801778c:	f002 fc3c 	bl	801a008 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017790:	69fb      	ldr	r3, [r7, #28]
 8017792:	7b1b      	ldrb	r3, [r3, #12]
 8017794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017798:	2b00      	cmp	r3, #0
 801779a:	d002      	beq.n	80177a2 <etharp_query+0x1d2>
        copy_needed = 1;
 801779c:	2301      	movs	r3, #1
 801779e:	61bb      	str	r3, [r7, #24]
        break;
 80177a0:	e005      	b.n	80177ae <etharp_query+0x1de>
      }
      p = p->next;
 80177a2:	69fb      	ldr	r3, [r7, #28]
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80177a8:	69fb      	ldr	r3, [r7, #28]
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d1df      	bne.n	801776e <etharp_query+0x19e>
    }
    if (copy_needed) {
 80177ae:	69bb      	ldr	r3, [r7, #24]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d007      	beq.n	80177c4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80177b4:	687a      	ldr	r2, [r7, #4]
 80177b6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 80177ba:	200e      	movs	r0, #14
 80177bc:	f7f9 fa4e 	bl	8010c5c <pbuf_clone>
 80177c0:	61f8      	str	r0, [r7, #28]
 80177c2:	e004      	b.n	80177ce <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80177c8:	69f8      	ldr	r0, [r7, #28]
 80177ca:	f7f9 f875 	bl	80108b8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80177ce:	69fb      	ldr	r3, [r7, #28]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d021      	beq.n	8017818 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80177d4:	7c7a      	ldrb	r2, [r7, #17]
 80177d6:	4918      	ldr	r1, [pc, #96]	@ (8017838 <etharp_query+0x268>)
 80177d8:	4613      	mov	r3, r2
 80177da:	005b      	lsls	r3, r3, #1
 80177dc:	4413      	add	r3, r2
 80177de:	00db      	lsls	r3, r3, #3
 80177e0:	440b      	add	r3, r1
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d00a      	beq.n	80177fe <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80177e8:	7c7a      	ldrb	r2, [r7, #17]
 80177ea:	4913      	ldr	r1, [pc, #76]	@ (8017838 <etharp_query+0x268>)
 80177ec:	4613      	mov	r3, r2
 80177ee:	005b      	lsls	r3, r3, #1
 80177f0:	4413      	add	r3, r2
 80177f2:	00db      	lsls	r3, r3, #3
 80177f4:	440b      	add	r3, r1
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	4618      	mov	r0, r3
 80177fa:	f7f8 ffb7 	bl	801076c <pbuf_free>
      }
      arp_table[i].q = p;
 80177fe:	7c7a      	ldrb	r2, [r7, #17]
 8017800:	490d      	ldr	r1, [pc, #52]	@ (8017838 <etharp_query+0x268>)
 8017802:	4613      	mov	r3, r2
 8017804:	005b      	lsls	r3, r3, #1
 8017806:	4413      	add	r3, r2
 8017808:	00db      	lsls	r3, r3, #3
 801780a:	440b      	add	r3, r1
 801780c:	69fa      	ldr	r2, [r7, #28]
 801780e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017810:	2300      	movs	r3, #0
 8017812:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017816:	e002      	b.n	801781e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017818:	23ff      	movs	r3, #255	@ 0xff
 801781a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801781e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8017822:	4618      	mov	r0, r3
 8017824:	3728      	adds	r7, #40	@ 0x28
 8017826:	46bd      	mov	sp, r7
 8017828:	bd80      	pop	{r7, pc}
 801782a:	bf00      	nop
 801782c:	0801d64c 	.word	0x0801d64c
 8017830:	0801d7f8 	.word	0x0801d7f8
 8017834:	0801d6c4 	.word	0x0801d6c4
 8017838:	2002750c 	.word	0x2002750c
 801783c:	0801d808 	.word	0x0801d808
 8017840:	0801d7ec 	.word	0x0801d7ec
 8017844:	200275fc 	.word	0x200275fc
 8017848:	0801d830 	.word	0x0801d830

0801784c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801784c:	b580      	push	{r7, lr}
 801784e:	b08a      	sub	sp, #40	@ 0x28
 8017850:	af02      	add	r7, sp, #8
 8017852:	60f8      	str	r0, [r7, #12]
 8017854:	60b9      	str	r1, [r7, #8]
 8017856:	607a      	str	r2, [r7, #4]
 8017858:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801785a:	2300      	movs	r3, #0
 801785c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d106      	bne.n	8017872 <etharp_raw+0x26>
 8017864:	4b3a      	ldr	r3, [pc, #232]	@ (8017950 <etharp_raw+0x104>)
 8017866:	f240 4257 	movw	r2, #1111	@ 0x457
 801786a:	493a      	ldr	r1, [pc, #232]	@ (8017954 <etharp_raw+0x108>)
 801786c:	483a      	ldr	r0, [pc, #232]	@ (8017958 <etharp_raw+0x10c>)
 801786e:	f002 fbcb 	bl	801a008 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017872:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017876:	211c      	movs	r1, #28
 8017878:	200e      	movs	r0, #14
 801787a:	f7f8 fc93 	bl	80101a4 <pbuf_alloc>
 801787e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017880:	69bb      	ldr	r3, [r7, #24]
 8017882:	2b00      	cmp	r3, #0
 8017884:	d102      	bne.n	801788c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017886:	f04f 33ff 	mov.w	r3, #4294967295
 801788a:	e05d      	b.n	8017948 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801788c:	69bb      	ldr	r3, [r7, #24]
 801788e:	895b      	ldrh	r3, [r3, #10]
 8017890:	2b1b      	cmp	r3, #27
 8017892:	d806      	bhi.n	80178a2 <etharp_raw+0x56>
 8017894:	4b2e      	ldr	r3, [pc, #184]	@ (8017950 <etharp_raw+0x104>)
 8017896:	f240 4262 	movw	r2, #1122	@ 0x462
 801789a:	4930      	ldr	r1, [pc, #192]	@ (801795c <etharp_raw+0x110>)
 801789c:	482e      	ldr	r0, [pc, #184]	@ (8017958 <etharp_raw+0x10c>)
 801789e:	f002 fbb3 	bl	801a008 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80178a2:	69bb      	ldr	r3, [r7, #24]
 80178a4:	685b      	ldr	r3, [r3, #4]
 80178a6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80178a8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80178aa:	4618      	mov	r0, r3
 80178ac:	f7f7 fb70 	bl	800ef90 <lwip_htons>
 80178b0:	4603      	mov	r3, r0
 80178b2:	461a      	mov	r2, r3
 80178b4:	697b      	ldr	r3, [r7, #20]
 80178b6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80178be:	2b06      	cmp	r3, #6
 80178c0:	d006      	beq.n	80178d0 <etharp_raw+0x84>
 80178c2:	4b23      	ldr	r3, [pc, #140]	@ (8017950 <etharp_raw+0x104>)
 80178c4:	f240 4269 	movw	r2, #1129	@ 0x469
 80178c8:	4925      	ldr	r1, [pc, #148]	@ (8017960 <etharp_raw+0x114>)
 80178ca:	4823      	ldr	r0, [pc, #140]	@ (8017958 <etharp_raw+0x10c>)
 80178cc:	f002 fb9c 	bl	801a008 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80178d0:	697b      	ldr	r3, [r7, #20]
 80178d2:	3308      	adds	r3, #8
 80178d4:	2206      	movs	r2, #6
 80178d6:	6839      	ldr	r1, [r7, #0]
 80178d8:	4618      	mov	r0, r3
 80178da:	f002 fdc0 	bl	801a45e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80178de:	697b      	ldr	r3, [r7, #20]
 80178e0:	3312      	adds	r3, #18
 80178e2:	2206      	movs	r2, #6
 80178e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80178e6:	4618      	mov	r0, r3
 80178e8:	f002 fdb9 	bl	801a45e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80178ec:	697b      	ldr	r3, [r7, #20]
 80178ee:	330e      	adds	r3, #14
 80178f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80178f2:	6812      	ldr	r2, [r2, #0]
 80178f4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80178f6:	697b      	ldr	r3, [r7, #20]
 80178f8:	3318      	adds	r3, #24
 80178fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80178fc:	6812      	ldr	r2, [r2, #0]
 80178fe:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017900:	697b      	ldr	r3, [r7, #20]
 8017902:	2200      	movs	r2, #0
 8017904:	701a      	strb	r2, [r3, #0]
 8017906:	2200      	movs	r2, #0
 8017908:	f042 0201 	orr.w	r2, r2, #1
 801790c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801790e:	697b      	ldr	r3, [r7, #20]
 8017910:	2200      	movs	r2, #0
 8017912:	f042 0208 	orr.w	r2, r2, #8
 8017916:	709a      	strb	r2, [r3, #2]
 8017918:	2200      	movs	r2, #0
 801791a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801791c:	697b      	ldr	r3, [r7, #20]
 801791e:	2206      	movs	r2, #6
 8017920:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017922:	697b      	ldr	r3, [r7, #20]
 8017924:	2204      	movs	r2, #4
 8017926:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017928:	f640 0306 	movw	r3, #2054	@ 0x806
 801792c:	9300      	str	r3, [sp, #0]
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	68ba      	ldr	r2, [r7, #8]
 8017932:	69b9      	ldr	r1, [r7, #24]
 8017934:	68f8      	ldr	r0, [r7, #12]
 8017936:	f001 fc0b 	bl	8019150 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801793a:	69b8      	ldr	r0, [r7, #24]
 801793c:	f7f8 ff16 	bl	801076c <pbuf_free>
  p = NULL;
 8017940:	2300      	movs	r3, #0
 8017942:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017944:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017948:	4618      	mov	r0, r3
 801794a:	3720      	adds	r7, #32
 801794c:	46bd      	mov	sp, r7
 801794e:	bd80      	pop	{r7, pc}
 8017950:	0801d64c 	.word	0x0801d64c
 8017954:	0801d79c 	.word	0x0801d79c
 8017958:	0801d6c4 	.word	0x0801d6c4
 801795c:	0801d84c 	.word	0x0801d84c
 8017960:	0801d880 	.word	0x0801d880

08017964 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017964:	b580      	push	{r7, lr}
 8017966:	b088      	sub	sp, #32
 8017968:	af04      	add	r7, sp, #16
 801796a:	60f8      	str	r0, [r7, #12]
 801796c:	60b9      	str	r1, [r7, #8]
 801796e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017980:	2201      	movs	r2, #1
 8017982:	9203      	str	r2, [sp, #12]
 8017984:	68ba      	ldr	r2, [r7, #8]
 8017986:	9202      	str	r2, [sp, #8]
 8017988:	4a06      	ldr	r2, [pc, #24]	@ (80179a4 <etharp_request_dst+0x40>)
 801798a:	9201      	str	r2, [sp, #4]
 801798c:	9300      	str	r3, [sp, #0]
 801798e:	4603      	mov	r3, r0
 8017990:	687a      	ldr	r2, [r7, #4]
 8017992:	68f8      	ldr	r0, [r7, #12]
 8017994:	f7ff ff5a 	bl	801784c <etharp_raw>
 8017998:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801799a:	4618      	mov	r0, r3
 801799c:	3710      	adds	r7, #16
 801799e:	46bd      	mov	sp, r7
 80179a0:	bd80      	pop	{r7, pc}
 80179a2:	bf00      	nop
 80179a4:	0801e2c4 	.word	0x0801e2c4

080179a8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b082      	sub	sp, #8
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	6078      	str	r0, [r7, #4]
 80179b0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80179b2:	4a05      	ldr	r2, [pc, #20]	@ (80179c8 <etharp_request+0x20>)
 80179b4:	6839      	ldr	r1, [r7, #0]
 80179b6:	6878      	ldr	r0, [r7, #4]
 80179b8:	f7ff ffd4 	bl	8017964 <etharp_request_dst>
 80179bc:	4603      	mov	r3, r0
}
 80179be:	4618      	mov	r0, r3
 80179c0:	3708      	adds	r7, #8
 80179c2:	46bd      	mov	sp, r7
 80179c4:	bd80      	pop	{r7, pc}
 80179c6:	bf00      	nop
 80179c8:	0801e2bc 	.word	0x0801e2bc

080179cc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80179cc:	b580      	push	{r7, lr}
 80179ce:	b08e      	sub	sp, #56	@ 0x38
 80179d0:	af04      	add	r7, sp, #16
 80179d2:	6078      	str	r0, [r7, #4]
 80179d4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80179d6:	4b79      	ldr	r3, [pc, #484]	@ (8017bbc <icmp_input+0x1f0>)
 80179d8:	689b      	ldr	r3, [r3, #8]
 80179da:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80179dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179de:	781b      	ldrb	r3, [r3, #0]
 80179e0:	f003 030f 	and.w	r3, r3, #15
 80179e4:	b2db      	uxtb	r3, r3
 80179e6:	009b      	lsls	r3, r3, #2
 80179e8:	b2db      	uxtb	r3, r3
 80179ea:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80179ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80179ee:	2b13      	cmp	r3, #19
 80179f0:	f240 80cd 	bls.w	8017b8e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	895b      	ldrh	r3, [r3, #10]
 80179f8:	2b03      	cmp	r3, #3
 80179fa:	f240 80ca 	bls.w	8017b92 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	685b      	ldr	r3, [r3, #4]
 8017a02:	781b      	ldrb	r3, [r3, #0]
 8017a04:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017a08:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8017a0c:	2b00      	cmp	r3, #0
 8017a0e:	f000 80b7 	beq.w	8017b80 <icmp_input+0x1b4>
 8017a12:	2b08      	cmp	r3, #8
 8017a14:	f040 80b7 	bne.w	8017b86 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017a18:	4b69      	ldr	r3, [pc, #420]	@ (8017bc0 <icmp_input+0x1f4>)
 8017a1a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017a1c:	4b67      	ldr	r3, [pc, #412]	@ (8017bbc <icmp_input+0x1f0>)
 8017a1e:	695b      	ldr	r3, [r3, #20]
 8017a20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017a24:	2be0      	cmp	r3, #224	@ 0xe0
 8017a26:	f000 80bb 	beq.w	8017ba0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017a2a:	4b64      	ldr	r3, [pc, #400]	@ (8017bbc <icmp_input+0x1f0>)
 8017a2c:	695b      	ldr	r3, [r3, #20]
 8017a2e:	4a63      	ldr	r2, [pc, #396]	@ (8017bbc <icmp_input+0x1f0>)
 8017a30:	6812      	ldr	r2, [r2, #0]
 8017a32:	4611      	mov	r1, r2
 8017a34:	4618      	mov	r0, r3
 8017a36:	f000 fbed 	bl	8018214 <ip4_addr_isbroadcast_u32>
 8017a3a:	4603      	mov	r3, r0
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	f040 80b1 	bne.w	8017ba4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	891b      	ldrh	r3, [r3, #8]
 8017a46:	2b07      	cmp	r3, #7
 8017a48:	f240 80a5 	bls.w	8017b96 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017a4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017a4e:	330e      	adds	r3, #14
 8017a50:	4619      	mov	r1, r3
 8017a52:	6878      	ldr	r0, [r7, #4]
 8017a54:	f7f8 fdf4 	bl	8010640 <pbuf_add_header>
 8017a58:	4603      	mov	r3, r0
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d04b      	beq.n	8017af6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	891a      	ldrh	r2, [r3, #8]
 8017a62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017a64:	4413      	add	r3, r2
 8017a66:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	891b      	ldrh	r3, [r3, #8]
 8017a6c:	8b7a      	ldrh	r2, [r7, #26]
 8017a6e:	429a      	cmp	r2, r3
 8017a70:	f0c0 809a 	bcc.w	8017ba8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017a74:	8b7b      	ldrh	r3, [r7, #26]
 8017a76:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017a7a:	4619      	mov	r1, r3
 8017a7c:	200e      	movs	r0, #14
 8017a7e:	f7f8 fb91 	bl	80101a4 <pbuf_alloc>
 8017a82:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017a84:	697b      	ldr	r3, [r7, #20]
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	f000 8090 	beq.w	8017bac <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017a8c:	697b      	ldr	r3, [r7, #20]
 8017a8e:	895b      	ldrh	r3, [r3, #10]
 8017a90:	461a      	mov	r2, r3
 8017a92:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017a94:	3308      	adds	r3, #8
 8017a96:	429a      	cmp	r2, r3
 8017a98:	d203      	bcs.n	8017aa2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017a9a:	6978      	ldr	r0, [r7, #20]
 8017a9c:	f7f8 fe66 	bl	801076c <pbuf_free>
          goto icmperr;
 8017aa0:	e085      	b.n	8017bae <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017aa2:	697b      	ldr	r3, [r7, #20]
 8017aa4:	685b      	ldr	r3, [r3, #4]
 8017aa6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017aa8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017aaa:	4618      	mov	r0, r3
 8017aac:	f002 fcd7 	bl	801a45e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017ab0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017ab2:	4619      	mov	r1, r3
 8017ab4:	6978      	ldr	r0, [r7, #20]
 8017ab6:	f7f8 fdd3 	bl	8010660 <pbuf_remove_header>
 8017aba:	4603      	mov	r3, r0
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d009      	beq.n	8017ad4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017ac0:	4b40      	ldr	r3, [pc, #256]	@ (8017bc4 <icmp_input+0x1f8>)
 8017ac2:	22b6      	movs	r2, #182	@ 0xb6
 8017ac4:	4940      	ldr	r1, [pc, #256]	@ (8017bc8 <icmp_input+0x1fc>)
 8017ac6:	4841      	ldr	r0, [pc, #260]	@ (8017bcc <icmp_input+0x200>)
 8017ac8:	f002 fa9e 	bl	801a008 <iprintf>
          pbuf_free(r);
 8017acc:	6978      	ldr	r0, [r7, #20]
 8017ace:	f7f8 fe4d 	bl	801076c <pbuf_free>
          goto icmperr;
 8017ad2:	e06c      	b.n	8017bae <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017ad4:	6879      	ldr	r1, [r7, #4]
 8017ad6:	6978      	ldr	r0, [r7, #20]
 8017ad8:	f7f8 ff7c 	bl	80109d4 <pbuf_copy>
 8017adc:	4603      	mov	r3, r0
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d003      	beq.n	8017aea <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017ae2:	6978      	ldr	r0, [r7, #20]
 8017ae4:	f7f8 fe42 	bl	801076c <pbuf_free>
          goto icmperr;
 8017ae8:	e061      	b.n	8017bae <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8017aea:	6878      	ldr	r0, [r7, #4]
 8017aec:	f7f8 fe3e 	bl	801076c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017af0:	697b      	ldr	r3, [r7, #20]
 8017af2:	607b      	str	r3, [r7, #4]
 8017af4:	e00f      	b.n	8017b16 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017af6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017af8:	330e      	adds	r3, #14
 8017afa:	4619      	mov	r1, r3
 8017afc:	6878      	ldr	r0, [r7, #4]
 8017afe:	f7f8 fdaf 	bl	8010660 <pbuf_remove_header>
 8017b02:	4603      	mov	r3, r0
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d006      	beq.n	8017b16 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017b08:	4b2e      	ldr	r3, [pc, #184]	@ (8017bc4 <icmp_input+0x1f8>)
 8017b0a:	22c7      	movs	r2, #199	@ 0xc7
 8017b0c:	4930      	ldr	r1, [pc, #192]	@ (8017bd0 <icmp_input+0x204>)
 8017b0e:	482f      	ldr	r0, [pc, #188]	@ (8017bcc <icmp_input+0x200>)
 8017b10:	f002 fa7a 	bl	801a008 <iprintf>
          goto icmperr;
 8017b14:	e04b      	b.n	8017bae <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	685b      	ldr	r3, [r3, #4]
 8017b1a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017b1c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8017b1e:	4619      	mov	r1, r3
 8017b20:	6878      	ldr	r0, [r7, #4]
 8017b22:	f7f8 fd8d 	bl	8010640 <pbuf_add_header>
 8017b26:	4603      	mov	r3, r0
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d12b      	bne.n	8017b84 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	685b      	ldr	r3, [r3, #4]
 8017b30:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017b32:	69fb      	ldr	r3, [r7, #28]
 8017b34:	681a      	ldr	r2, [r3, #0]
 8017b36:	68fb      	ldr	r3, [r7, #12]
 8017b38:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017b3a:	4b20      	ldr	r3, [pc, #128]	@ (8017bbc <icmp_input+0x1f0>)
 8017b3c:	691a      	ldr	r2, [r3, #16]
 8017b3e:	68fb      	ldr	r3, [r7, #12]
 8017b40:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017b42:	693b      	ldr	r3, [r7, #16]
 8017b44:	2200      	movs	r2, #0
 8017b46:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017b48:	693b      	ldr	r3, [r7, #16]
 8017b4a:	2200      	movs	r2, #0
 8017b4c:	709a      	strb	r2, [r3, #2]
 8017b4e:	2200      	movs	r2, #0
 8017b50:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	22ff      	movs	r2, #255	@ 0xff
 8017b56:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	2200      	movs	r2, #0
 8017b5c:	729a      	strb	r2, [r3, #10]
 8017b5e:	2200      	movs	r2, #0
 8017b60:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017b62:	683b      	ldr	r3, [r7, #0]
 8017b64:	9302      	str	r3, [sp, #8]
 8017b66:	2301      	movs	r3, #1
 8017b68:	9301      	str	r3, [sp, #4]
 8017b6a:	2300      	movs	r3, #0
 8017b6c:	9300      	str	r3, [sp, #0]
 8017b6e:	23ff      	movs	r3, #255	@ 0xff
 8017b70:	2200      	movs	r2, #0
 8017b72:	69f9      	ldr	r1, [r7, #28]
 8017b74:	6878      	ldr	r0, [r7, #4]
 8017b76:	f000 fa75 	bl	8018064 <ip4_output_if>
 8017b7a:	4603      	mov	r3, r0
 8017b7c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017b7e:	e001      	b.n	8017b84 <icmp_input+0x1b8>
      break;
 8017b80:	bf00      	nop
 8017b82:	e000      	b.n	8017b86 <icmp_input+0x1ba>
      break;
 8017b84:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017b86:	6878      	ldr	r0, [r7, #4]
 8017b88:	f7f8 fdf0 	bl	801076c <pbuf_free>
  return;
 8017b8c:	e013      	b.n	8017bb6 <icmp_input+0x1ea>
    goto lenerr;
 8017b8e:	bf00      	nop
 8017b90:	e002      	b.n	8017b98 <icmp_input+0x1cc>
    goto lenerr;
 8017b92:	bf00      	nop
 8017b94:	e000      	b.n	8017b98 <icmp_input+0x1cc>
        goto lenerr;
 8017b96:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017b98:	6878      	ldr	r0, [r7, #4]
 8017b9a:	f7f8 fde7 	bl	801076c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017b9e:	e00a      	b.n	8017bb6 <icmp_input+0x1ea>
        goto icmperr;
 8017ba0:	bf00      	nop
 8017ba2:	e004      	b.n	8017bae <icmp_input+0x1e2>
        goto icmperr;
 8017ba4:	bf00      	nop
 8017ba6:	e002      	b.n	8017bae <icmp_input+0x1e2>
          goto icmperr;
 8017ba8:	bf00      	nop
 8017baa:	e000      	b.n	8017bae <icmp_input+0x1e2>
          goto icmperr;
 8017bac:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017bae:	6878      	ldr	r0, [r7, #4]
 8017bb0:	f7f8 fddc 	bl	801076c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017bb4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017bb6:	3728      	adds	r7, #40	@ 0x28
 8017bb8:	46bd      	mov	sp, r7
 8017bba:	bd80      	pop	{r7, pc}
 8017bbc:	200243ac 	.word	0x200243ac
 8017bc0:	200243c0 	.word	0x200243c0
 8017bc4:	0801d8c4 	.word	0x0801d8c4
 8017bc8:	0801d8fc 	.word	0x0801d8fc
 8017bcc:	0801d934 	.word	0x0801d934
 8017bd0:	0801d95c 	.word	0x0801d95c

08017bd4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017bd4:	b580      	push	{r7, lr}
 8017bd6:	b082      	sub	sp, #8
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	6078      	str	r0, [r7, #4]
 8017bdc:	460b      	mov	r3, r1
 8017bde:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017be0:	78fb      	ldrb	r3, [r7, #3]
 8017be2:	461a      	mov	r2, r3
 8017be4:	2103      	movs	r1, #3
 8017be6:	6878      	ldr	r0, [r7, #4]
 8017be8:	f000 f814 	bl	8017c14 <icmp_send_response>
}
 8017bec:	bf00      	nop
 8017bee:	3708      	adds	r7, #8
 8017bf0:	46bd      	mov	sp, r7
 8017bf2:	bd80      	pop	{r7, pc}

08017bf4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017bf4:	b580      	push	{r7, lr}
 8017bf6:	b082      	sub	sp, #8
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	6078      	str	r0, [r7, #4]
 8017bfc:	460b      	mov	r3, r1
 8017bfe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017c00:	78fb      	ldrb	r3, [r7, #3]
 8017c02:	461a      	mov	r2, r3
 8017c04:	210b      	movs	r1, #11
 8017c06:	6878      	ldr	r0, [r7, #4]
 8017c08:	f000 f804 	bl	8017c14 <icmp_send_response>
}
 8017c0c:	bf00      	nop
 8017c0e:	3708      	adds	r7, #8
 8017c10:	46bd      	mov	sp, r7
 8017c12:	bd80      	pop	{r7, pc}

08017c14 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017c14:	b580      	push	{r7, lr}
 8017c16:	b08c      	sub	sp, #48	@ 0x30
 8017c18:	af04      	add	r7, sp, #16
 8017c1a:	6078      	str	r0, [r7, #4]
 8017c1c:	460b      	mov	r3, r1
 8017c1e:	70fb      	strb	r3, [r7, #3]
 8017c20:	4613      	mov	r3, r2
 8017c22:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017c24:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017c28:	2124      	movs	r1, #36	@ 0x24
 8017c2a:	2022      	movs	r0, #34	@ 0x22
 8017c2c:	f7f8 faba 	bl	80101a4 <pbuf_alloc>
 8017c30:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017c32:	69fb      	ldr	r3, [r7, #28]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d04c      	beq.n	8017cd2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017c38:	69fb      	ldr	r3, [r7, #28]
 8017c3a:	895b      	ldrh	r3, [r3, #10]
 8017c3c:	2b23      	cmp	r3, #35	@ 0x23
 8017c3e:	d806      	bhi.n	8017c4e <icmp_send_response+0x3a>
 8017c40:	4b26      	ldr	r3, [pc, #152]	@ (8017cdc <icmp_send_response+0xc8>)
 8017c42:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8017c46:	4926      	ldr	r1, [pc, #152]	@ (8017ce0 <icmp_send_response+0xcc>)
 8017c48:	4826      	ldr	r0, [pc, #152]	@ (8017ce4 <icmp_send_response+0xd0>)
 8017c4a:	f002 f9dd 	bl	801a008 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	685b      	ldr	r3, [r3, #4]
 8017c52:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017c54:	69fb      	ldr	r3, [r7, #28]
 8017c56:	685b      	ldr	r3, [r3, #4]
 8017c58:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017c5a:	697b      	ldr	r3, [r7, #20]
 8017c5c:	78fa      	ldrb	r2, [r7, #3]
 8017c5e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017c60:	697b      	ldr	r3, [r7, #20]
 8017c62:	78ba      	ldrb	r2, [r7, #2]
 8017c64:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017c66:	697b      	ldr	r3, [r7, #20]
 8017c68:	2200      	movs	r2, #0
 8017c6a:	711a      	strb	r2, [r3, #4]
 8017c6c:	2200      	movs	r2, #0
 8017c6e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017c70:	697b      	ldr	r3, [r7, #20]
 8017c72:	2200      	movs	r2, #0
 8017c74:	719a      	strb	r2, [r3, #6]
 8017c76:	2200      	movs	r2, #0
 8017c78:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017c7a:	69fb      	ldr	r3, [r7, #28]
 8017c7c:	685b      	ldr	r3, [r3, #4]
 8017c7e:	f103 0008 	add.w	r0, r3, #8
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	685b      	ldr	r3, [r3, #4]
 8017c86:	221c      	movs	r2, #28
 8017c88:	4619      	mov	r1, r3
 8017c8a:	f002 fbe8 	bl	801a45e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017c8e:	69bb      	ldr	r3, [r7, #24]
 8017c90:	68db      	ldr	r3, [r3, #12]
 8017c92:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017c94:	f107 030c 	add.w	r3, r7, #12
 8017c98:	4618      	mov	r0, r3
 8017c9a:	f000 f825 	bl	8017ce8 <ip4_route>
 8017c9e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017ca0:	693b      	ldr	r3, [r7, #16]
 8017ca2:	2b00      	cmp	r3, #0
 8017ca4:	d011      	beq.n	8017cca <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017ca6:	697b      	ldr	r3, [r7, #20]
 8017ca8:	2200      	movs	r2, #0
 8017caa:	709a      	strb	r2, [r3, #2]
 8017cac:	2200      	movs	r2, #0
 8017cae:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017cb0:	f107 020c 	add.w	r2, r7, #12
 8017cb4:	693b      	ldr	r3, [r7, #16]
 8017cb6:	9302      	str	r3, [sp, #8]
 8017cb8:	2301      	movs	r3, #1
 8017cba:	9301      	str	r3, [sp, #4]
 8017cbc:	2300      	movs	r3, #0
 8017cbe:	9300      	str	r3, [sp, #0]
 8017cc0:	23ff      	movs	r3, #255	@ 0xff
 8017cc2:	2100      	movs	r1, #0
 8017cc4:	69f8      	ldr	r0, [r7, #28]
 8017cc6:	f000 f9cd 	bl	8018064 <ip4_output_if>
  }
  pbuf_free(q);
 8017cca:	69f8      	ldr	r0, [r7, #28]
 8017ccc:	f7f8 fd4e 	bl	801076c <pbuf_free>
 8017cd0:	e000      	b.n	8017cd4 <icmp_send_response+0xc0>
    return;
 8017cd2:	bf00      	nop
}
 8017cd4:	3720      	adds	r7, #32
 8017cd6:	46bd      	mov	sp, r7
 8017cd8:	bd80      	pop	{r7, pc}
 8017cda:	bf00      	nop
 8017cdc:	0801d8c4 	.word	0x0801d8c4
 8017ce0:	0801d990 	.word	0x0801d990
 8017ce4:	0801d934 	.word	0x0801d934

08017ce8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017ce8:	b480      	push	{r7}
 8017cea:	b085      	sub	sp, #20
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017cf0:	4b33      	ldr	r3, [pc, #204]	@ (8017dc0 <ip4_route+0xd8>)
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	60fb      	str	r3, [r7, #12]
 8017cf6:	e036      	b.n	8017d66 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017cfe:	f003 0301 	and.w	r3, r3, #1
 8017d02:	b2db      	uxtb	r3, r3
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d02b      	beq.n	8017d60 <ip4_route+0x78>
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017d0e:	089b      	lsrs	r3, r3, #2
 8017d10:	f003 0301 	and.w	r3, r3, #1
 8017d14:	b2db      	uxtb	r3, r3
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d022      	beq.n	8017d60 <ip4_route+0x78>
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	3304      	adds	r3, #4
 8017d1e:	681b      	ldr	r3, [r3, #0]
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d01d      	beq.n	8017d60 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	681a      	ldr	r2, [r3, #0]
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	3304      	adds	r3, #4
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	405a      	eors	r2, r3
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	3308      	adds	r3, #8
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	4013      	ands	r3, r2
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d101      	bne.n	8017d40 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	e038      	b.n	8017db2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017d46:	f003 0302 	and.w	r3, r3, #2
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d108      	bne.n	8017d60 <ip4_route+0x78>
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	681a      	ldr	r2, [r3, #0]
 8017d52:	68fb      	ldr	r3, [r7, #12]
 8017d54:	330c      	adds	r3, #12
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	429a      	cmp	r2, r3
 8017d5a:	d101      	bne.n	8017d60 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017d5c:	68fb      	ldr	r3, [r7, #12]
 8017d5e:	e028      	b.n	8017db2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	681b      	ldr	r3, [r3, #0]
 8017d64:	60fb      	str	r3, [r7, #12]
 8017d66:	68fb      	ldr	r3, [r7, #12]
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d1c5      	bne.n	8017cf8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017d6c:	4b15      	ldr	r3, [pc, #84]	@ (8017dc4 <ip4_route+0xdc>)
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d01a      	beq.n	8017daa <ip4_route+0xc2>
 8017d74:	4b13      	ldr	r3, [pc, #76]	@ (8017dc4 <ip4_route+0xdc>)
 8017d76:	681b      	ldr	r3, [r3, #0]
 8017d78:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017d7c:	f003 0301 	and.w	r3, r3, #1
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d012      	beq.n	8017daa <ip4_route+0xc2>
 8017d84:	4b0f      	ldr	r3, [pc, #60]	@ (8017dc4 <ip4_route+0xdc>)
 8017d86:	681b      	ldr	r3, [r3, #0]
 8017d88:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017d8c:	f003 0304 	and.w	r3, r3, #4
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d00a      	beq.n	8017daa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017d94:	4b0b      	ldr	r3, [pc, #44]	@ (8017dc4 <ip4_route+0xdc>)
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	3304      	adds	r3, #4
 8017d9a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d004      	beq.n	8017daa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	b2db      	uxtb	r3, r3
 8017da6:	2b7f      	cmp	r3, #127	@ 0x7f
 8017da8:	d101      	bne.n	8017dae <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017daa:	2300      	movs	r3, #0
 8017dac:	e001      	b.n	8017db2 <ip4_route+0xca>
  }

  return netif_default;
 8017dae:	4b05      	ldr	r3, [pc, #20]	@ (8017dc4 <ip4_route+0xdc>)
 8017db0:	681b      	ldr	r3, [r3, #0]
}
 8017db2:	4618      	mov	r0, r3
 8017db4:	3714      	adds	r7, #20
 8017db6:	46bd      	mov	sp, r7
 8017db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dbc:	4770      	bx	lr
 8017dbe:	bf00      	nop
 8017dc0:	200274a0 	.word	0x200274a0
 8017dc4:	200274a4 	.word	0x200274a4

08017dc8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017dc8:	b580      	push	{r7, lr}
 8017dca:	b082      	sub	sp, #8
 8017dcc:	af00      	add	r7, sp, #0
 8017dce:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017dd6:	f003 0301 	and.w	r3, r3, #1
 8017dda:	b2db      	uxtb	r3, r3
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d016      	beq.n	8017e0e <ip4_input_accept+0x46>
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	3304      	adds	r3, #4
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d011      	beq.n	8017e0e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017dea:	4b0b      	ldr	r3, [pc, #44]	@ (8017e18 <ip4_input_accept+0x50>)
 8017dec:	695a      	ldr	r2, [r3, #20]
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	3304      	adds	r3, #4
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	429a      	cmp	r2, r3
 8017df6:	d008      	beq.n	8017e0a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017df8:	4b07      	ldr	r3, [pc, #28]	@ (8017e18 <ip4_input_accept+0x50>)
 8017dfa:	695b      	ldr	r3, [r3, #20]
 8017dfc:	6879      	ldr	r1, [r7, #4]
 8017dfe:	4618      	mov	r0, r3
 8017e00:	f000 fa08 	bl	8018214 <ip4_addr_isbroadcast_u32>
 8017e04:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d001      	beq.n	8017e0e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017e0a:	2301      	movs	r3, #1
 8017e0c:	e000      	b.n	8017e10 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017e0e:	2300      	movs	r3, #0
}
 8017e10:	4618      	mov	r0, r3
 8017e12:	3708      	adds	r7, #8
 8017e14:	46bd      	mov	sp, r7
 8017e16:	bd80      	pop	{r7, pc}
 8017e18:	200243ac 	.word	0x200243ac

08017e1c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017e1c:	b580      	push	{r7, lr}
 8017e1e:	b086      	sub	sp, #24
 8017e20:	af00      	add	r7, sp, #0
 8017e22:	6078      	str	r0, [r7, #4]
 8017e24:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	685b      	ldr	r3, [r3, #4]
 8017e2a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017e2c:	697b      	ldr	r3, [r7, #20]
 8017e2e:	781b      	ldrb	r3, [r3, #0]
 8017e30:	091b      	lsrs	r3, r3, #4
 8017e32:	b2db      	uxtb	r3, r3
 8017e34:	2b04      	cmp	r3, #4
 8017e36:	d004      	beq.n	8017e42 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017e38:	6878      	ldr	r0, [r7, #4]
 8017e3a:	f7f8 fc97 	bl	801076c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017e3e:	2300      	movs	r3, #0
 8017e40:	e107      	b.n	8018052 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017e42:	697b      	ldr	r3, [r7, #20]
 8017e44:	781b      	ldrb	r3, [r3, #0]
 8017e46:	f003 030f 	and.w	r3, r3, #15
 8017e4a:	b2db      	uxtb	r3, r3
 8017e4c:	009b      	lsls	r3, r3, #2
 8017e4e:	b2db      	uxtb	r3, r3
 8017e50:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017e52:	697b      	ldr	r3, [r7, #20]
 8017e54:	885b      	ldrh	r3, [r3, #2]
 8017e56:	b29b      	uxth	r3, r3
 8017e58:	4618      	mov	r0, r3
 8017e5a:	f7f7 f899 	bl	800ef90 <lwip_htons>
 8017e5e:	4603      	mov	r3, r0
 8017e60:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	891b      	ldrh	r3, [r3, #8]
 8017e66:	89ba      	ldrh	r2, [r7, #12]
 8017e68:	429a      	cmp	r2, r3
 8017e6a:	d204      	bcs.n	8017e76 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8017e6c:	89bb      	ldrh	r3, [r7, #12]
 8017e6e:	4619      	mov	r1, r3
 8017e70:	6878      	ldr	r0, [r7, #4]
 8017e72:	f7f8 faf5 	bl	8010460 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	895b      	ldrh	r3, [r3, #10]
 8017e7a:	89fa      	ldrh	r2, [r7, #14]
 8017e7c:	429a      	cmp	r2, r3
 8017e7e:	d807      	bhi.n	8017e90 <ip4_input+0x74>
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	891b      	ldrh	r3, [r3, #8]
 8017e84:	89ba      	ldrh	r2, [r7, #12]
 8017e86:	429a      	cmp	r2, r3
 8017e88:	d802      	bhi.n	8017e90 <ip4_input+0x74>
 8017e8a:	89fb      	ldrh	r3, [r7, #14]
 8017e8c:	2b13      	cmp	r3, #19
 8017e8e:	d804      	bhi.n	8017e9a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017e90:	6878      	ldr	r0, [r7, #4]
 8017e92:	f7f8 fc6b 	bl	801076c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017e96:	2300      	movs	r3, #0
 8017e98:	e0db      	b.n	8018052 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017e9a:	697b      	ldr	r3, [r7, #20]
 8017e9c:	691b      	ldr	r3, [r3, #16]
 8017e9e:	4a6f      	ldr	r2, [pc, #444]	@ (801805c <ip4_input+0x240>)
 8017ea0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017ea2:	697b      	ldr	r3, [r7, #20]
 8017ea4:	68db      	ldr	r3, [r3, #12]
 8017ea6:	4a6d      	ldr	r2, [pc, #436]	@ (801805c <ip4_input+0x240>)
 8017ea8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017eaa:	4b6c      	ldr	r3, [pc, #432]	@ (801805c <ip4_input+0x240>)
 8017eac:	695b      	ldr	r3, [r3, #20]
 8017eae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017eb2:	2be0      	cmp	r3, #224	@ 0xe0
 8017eb4:	d112      	bne.n	8017edc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017eb6:	683b      	ldr	r3, [r7, #0]
 8017eb8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017ebc:	f003 0301 	and.w	r3, r3, #1
 8017ec0:	b2db      	uxtb	r3, r3
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d007      	beq.n	8017ed6 <ip4_input+0xba>
 8017ec6:	683b      	ldr	r3, [r7, #0]
 8017ec8:	3304      	adds	r3, #4
 8017eca:	681b      	ldr	r3, [r3, #0]
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d002      	beq.n	8017ed6 <ip4_input+0xba>
      netif = inp;
 8017ed0:	683b      	ldr	r3, [r7, #0]
 8017ed2:	613b      	str	r3, [r7, #16]
 8017ed4:	e02a      	b.n	8017f2c <ip4_input+0x110>
    } else {
      netif = NULL;
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	613b      	str	r3, [r7, #16]
 8017eda:	e027      	b.n	8017f2c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017edc:	6838      	ldr	r0, [r7, #0]
 8017ede:	f7ff ff73 	bl	8017dc8 <ip4_input_accept>
 8017ee2:	4603      	mov	r3, r0
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d002      	beq.n	8017eee <ip4_input+0xd2>
      netif = inp;
 8017ee8:	683b      	ldr	r3, [r7, #0]
 8017eea:	613b      	str	r3, [r7, #16]
 8017eec:	e01e      	b.n	8017f2c <ip4_input+0x110>
    } else {
      netif = NULL;
 8017eee:	2300      	movs	r3, #0
 8017ef0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017ef2:	4b5a      	ldr	r3, [pc, #360]	@ (801805c <ip4_input+0x240>)
 8017ef4:	695b      	ldr	r3, [r3, #20]
 8017ef6:	b2db      	uxtb	r3, r3
 8017ef8:	2b7f      	cmp	r3, #127	@ 0x7f
 8017efa:	d017      	beq.n	8017f2c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017efc:	4b58      	ldr	r3, [pc, #352]	@ (8018060 <ip4_input+0x244>)
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	613b      	str	r3, [r7, #16]
 8017f02:	e00e      	b.n	8017f22 <ip4_input+0x106>
          if (netif == inp) {
 8017f04:	693a      	ldr	r2, [r7, #16]
 8017f06:	683b      	ldr	r3, [r7, #0]
 8017f08:	429a      	cmp	r2, r3
 8017f0a:	d006      	beq.n	8017f1a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017f0c:	6938      	ldr	r0, [r7, #16]
 8017f0e:	f7ff ff5b 	bl	8017dc8 <ip4_input_accept>
 8017f12:	4603      	mov	r3, r0
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d108      	bne.n	8017f2a <ip4_input+0x10e>
 8017f18:	e000      	b.n	8017f1c <ip4_input+0x100>
            continue;
 8017f1a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017f1c:	693b      	ldr	r3, [r7, #16]
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	613b      	str	r3, [r7, #16]
 8017f22:	693b      	ldr	r3, [r7, #16]
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d1ed      	bne.n	8017f04 <ip4_input+0xe8>
 8017f28:	e000      	b.n	8017f2c <ip4_input+0x110>
            break;
 8017f2a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017f2c:	4b4b      	ldr	r3, [pc, #300]	@ (801805c <ip4_input+0x240>)
 8017f2e:	691b      	ldr	r3, [r3, #16]
 8017f30:	6839      	ldr	r1, [r7, #0]
 8017f32:	4618      	mov	r0, r3
 8017f34:	f000 f96e 	bl	8018214 <ip4_addr_isbroadcast_u32>
 8017f38:	4603      	mov	r3, r0
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	d105      	bne.n	8017f4a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017f3e:	4b47      	ldr	r3, [pc, #284]	@ (801805c <ip4_input+0x240>)
 8017f40:	691b      	ldr	r3, [r3, #16]
 8017f42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017f46:	2be0      	cmp	r3, #224	@ 0xe0
 8017f48:	d104      	bne.n	8017f54 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017f4a:	6878      	ldr	r0, [r7, #4]
 8017f4c:	f7f8 fc0e 	bl	801076c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017f50:	2300      	movs	r3, #0
 8017f52:	e07e      	b.n	8018052 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017f54:	693b      	ldr	r3, [r7, #16]
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d104      	bne.n	8017f64 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017f5a:	6878      	ldr	r0, [r7, #4]
 8017f5c:	f7f8 fc06 	bl	801076c <pbuf_free>
    return ERR_OK;
 8017f60:	2300      	movs	r3, #0
 8017f62:	e076      	b.n	8018052 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017f64:	697b      	ldr	r3, [r7, #20]
 8017f66:	88db      	ldrh	r3, [r3, #6]
 8017f68:	b29b      	uxth	r3, r3
 8017f6a:	461a      	mov	r2, r3
 8017f6c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8017f70:	4013      	ands	r3, r2
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	d00b      	beq.n	8017f8e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017f76:	6878      	ldr	r0, [r7, #4]
 8017f78:	f000 fd22 	bl	80189c0 <ip4_reass>
 8017f7c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d101      	bne.n	8017f88 <ip4_input+0x16c>
      return ERR_OK;
 8017f84:	2300      	movs	r3, #0
 8017f86:	e064      	b.n	8018052 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	685b      	ldr	r3, [r3, #4]
 8017f8c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017f8e:	4a33      	ldr	r2, [pc, #204]	@ (801805c <ip4_input+0x240>)
 8017f90:	693b      	ldr	r3, [r7, #16]
 8017f92:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017f94:	4a31      	ldr	r2, [pc, #196]	@ (801805c <ip4_input+0x240>)
 8017f96:	683b      	ldr	r3, [r7, #0]
 8017f98:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017f9a:	4a30      	ldr	r2, [pc, #192]	@ (801805c <ip4_input+0x240>)
 8017f9c:	697b      	ldr	r3, [r7, #20]
 8017f9e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017fa0:	697b      	ldr	r3, [r7, #20]
 8017fa2:	781b      	ldrb	r3, [r3, #0]
 8017fa4:	f003 030f 	and.w	r3, r3, #15
 8017fa8:	b2db      	uxtb	r3, r3
 8017faa:	009b      	lsls	r3, r3, #2
 8017fac:	b2db      	uxtb	r3, r3
 8017fae:	461a      	mov	r2, r3
 8017fb0:	4b2a      	ldr	r3, [pc, #168]	@ (801805c <ip4_input+0x240>)
 8017fb2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017fb4:	89fb      	ldrh	r3, [r7, #14]
 8017fb6:	4619      	mov	r1, r3
 8017fb8:	6878      	ldr	r0, [r7, #4]
 8017fba:	f7f8 fb51 	bl	8010660 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017fbe:	697b      	ldr	r3, [r7, #20]
 8017fc0:	7a5b      	ldrb	r3, [r3, #9]
 8017fc2:	2b11      	cmp	r3, #17
 8017fc4:	d006      	beq.n	8017fd4 <ip4_input+0x1b8>
 8017fc6:	2b11      	cmp	r3, #17
 8017fc8:	dc13      	bgt.n	8017ff2 <ip4_input+0x1d6>
 8017fca:	2b01      	cmp	r3, #1
 8017fcc:	d00c      	beq.n	8017fe8 <ip4_input+0x1cc>
 8017fce:	2b06      	cmp	r3, #6
 8017fd0:	d005      	beq.n	8017fde <ip4_input+0x1c2>
 8017fd2:	e00e      	b.n	8017ff2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017fd4:	6839      	ldr	r1, [r7, #0]
 8017fd6:	6878      	ldr	r0, [r7, #4]
 8017fd8:	f7fe f9f2 	bl	80163c0 <udp_input>
        break;
 8017fdc:	e026      	b.n	801802c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017fde:	6839      	ldr	r1, [r7, #0]
 8017fe0:	6878      	ldr	r0, [r7, #4]
 8017fe2:	f7fa fa09 	bl	80123f8 <tcp_input>
        break;
 8017fe6:	e021      	b.n	801802c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017fe8:	6839      	ldr	r1, [r7, #0]
 8017fea:	6878      	ldr	r0, [r7, #4]
 8017fec:	f7ff fcee 	bl	80179cc <icmp_input>
        break;
 8017ff0:	e01c      	b.n	801802c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017ff2:	4b1a      	ldr	r3, [pc, #104]	@ (801805c <ip4_input+0x240>)
 8017ff4:	695b      	ldr	r3, [r3, #20]
 8017ff6:	6939      	ldr	r1, [r7, #16]
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	f000 f90b 	bl	8018214 <ip4_addr_isbroadcast_u32>
 8017ffe:	4603      	mov	r3, r0
 8018000:	2b00      	cmp	r3, #0
 8018002:	d10f      	bne.n	8018024 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018004:	4b15      	ldr	r3, [pc, #84]	@ (801805c <ip4_input+0x240>)
 8018006:	695b      	ldr	r3, [r3, #20]
 8018008:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801800c:	2be0      	cmp	r3, #224	@ 0xe0
 801800e:	d009      	beq.n	8018024 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018010:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018014:	4619      	mov	r1, r3
 8018016:	6878      	ldr	r0, [r7, #4]
 8018018:	f7f8 fb95 	bl	8010746 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801801c:	2102      	movs	r1, #2
 801801e:	6878      	ldr	r0, [r7, #4]
 8018020:	f7ff fdd8 	bl	8017bd4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8018024:	6878      	ldr	r0, [r7, #4]
 8018026:	f7f8 fba1 	bl	801076c <pbuf_free>
        break;
 801802a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801802c:	4b0b      	ldr	r3, [pc, #44]	@ (801805c <ip4_input+0x240>)
 801802e:	2200      	movs	r2, #0
 8018030:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018032:	4b0a      	ldr	r3, [pc, #40]	@ (801805c <ip4_input+0x240>)
 8018034:	2200      	movs	r2, #0
 8018036:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018038:	4b08      	ldr	r3, [pc, #32]	@ (801805c <ip4_input+0x240>)
 801803a:	2200      	movs	r2, #0
 801803c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801803e:	4b07      	ldr	r3, [pc, #28]	@ (801805c <ip4_input+0x240>)
 8018040:	2200      	movs	r2, #0
 8018042:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018044:	4b05      	ldr	r3, [pc, #20]	@ (801805c <ip4_input+0x240>)
 8018046:	2200      	movs	r2, #0
 8018048:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801804a:	4b04      	ldr	r3, [pc, #16]	@ (801805c <ip4_input+0x240>)
 801804c:	2200      	movs	r2, #0
 801804e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018050:	2300      	movs	r3, #0
}
 8018052:	4618      	mov	r0, r3
 8018054:	3718      	adds	r7, #24
 8018056:	46bd      	mov	sp, r7
 8018058:	bd80      	pop	{r7, pc}
 801805a:	bf00      	nop
 801805c:	200243ac 	.word	0x200243ac
 8018060:	200274a0 	.word	0x200274a0

08018064 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8018064:	b580      	push	{r7, lr}
 8018066:	b08a      	sub	sp, #40	@ 0x28
 8018068:	af04      	add	r7, sp, #16
 801806a:	60f8      	str	r0, [r7, #12]
 801806c:	60b9      	str	r1, [r7, #8]
 801806e:	607a      	str	r2, [r7, #4]
 8018070:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018072:	68bb      	ldr	r3, [r7, #8]
 8018074:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	2b00      	cmp	r3, #0
 801807a:	d009      	beq.n	8018090 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801807c:	68bb      	ldr	r3, [r7, #8]
 801807e:	2b00      	cmp	r3, #0
 8018080:	d003      	beq.n	801808a <ip4_output_if+0x26>
 8018082:	68bb      	ldr	r3, [r7, #8]
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	2b00      	cmp	r3, #0
 8018088:	d102      	bne.n	8018090 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801808a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801808c:	3304      	adds	r3, #4
 801808e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018090:	78fa      	ldrb	r2, [r7, #3]
 8018092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018094:	9302      	str	r3, [sp, #8]
 8018096:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801809a:	9301      	str	r3, [sp, #4]
 801809c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80180a0:	9300      	str	r3, [sp, #0]
 80180a2:	4613      	mov	r3, r2
 80180a4:	687a      	ldr	r2, [r7, #4]
 80180a6:	6979      	ldr	r1, [r7, #20]
 80180a8:	68f8      	ldr	r0, [r7, #12]
 80180aa:	f000 f805 	bl	80180b8 <ip4_output_if_src>
 80180ae:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80180b0:	4618      	mov	r0, r3
 80180b2:	3718      	adds	r7, #24
 80180b4:	46bd      	mov	sp, r7
 80180b6:	bd80      	pop	{r7, pc}

080180b8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80180b8:	b580      	push	{r7, lr}
 80180ba:	b088      	sub	sp, #32
 80180bc:	af00      	add	r7, sp, #0
 80180be:	60f8      	str	r0, [r7, #12]
 80180c0:	60b9      	str	r1, [r7, #8]
 80180c2:	607a      	str	r2, [r7, #4]
 80180c4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80180c6:	68fb      	ldr	r3, [r7, #12]
 80180c8:	7b9b      	ldrb	r3, [r3, #14]
 80180ca:	2b01      	cmp	r3, #1
 80180cc:	d006      	beq.n	80180dc <ip4_output_if_src+0x24>
 80180ce:	4b4b      	ldr	r3, [pc, #300]	@ (80181fc <ip4_output_if_src+0x144>)
 80180d0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80180d4:	494a      	ldr	r1, [pc, #296]	@ (8018200 <ip4_output_if_src+0x148>)
 80180d6:	484b      	ldr	r0, [pc, #300]	@ (8018204 <ip4_output_if_src+0x14c>)
 80180d8:	f001 ff96 	bl	801a008 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d060      	beq.n	80181a4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80180e2:	2314      	movs	r3, #20
 80180e4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80180e6:	2114      	movs	r1, #20
 80180e8:	68f8      	ldr	r0, [r7, #12]
 80180ea:	f7f8 faa9 	bl	8010640 <pbuf_add_header>
 80180ee:	4603      	mov	r3, r0
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d002      	beq.n	80180fa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80180f4:	f06f 0301 	mvn.w	r3, #1
 80180f8:	e07c      	b.n	80181f4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80180fa:	68fb      	ldr	r3, [r7, #12]
 80180fc:	685b      	ldr	r3, [r3, #4]
 80180fe:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018100:	68fb      	ldr	r3, [r7, #12]
 8018102:	895b      	ldrh	r3, [r3, #10]
 8018104:	2b13      	cmp	r3, #19
 8018106:	d806      	bhi.n	8018116 <ip4_output_if_src+0x5e>
 8018108:	4b3c      	ldr	r3, [pc, #240]	@ (80181fc <ip4_output_if_src+0x144>)
 801810a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801810e:	493e      	ldr	r1, [pc, #248]	@ (8018208 <ip4_output_if_src+0x150>)
 8018110:	483c      	ldr	r0, [pc, #240]	@ (8018204 <ip4_output_if_src+0x14c>)
 8018112:	f001 ff79 	bl	801a008 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8018116:	69fb      	ldr	r3, [r7, #28]
 8018118:	78fa      	ldrb	r2, [r7, #3]
 801811a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801811c:	69fb      	ldr	r3, [r7, #28]
 801811e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8018122:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	681a      	ldr	r2, [r3, #0]
 8018128:	69fb      	ldr	r3, [r7, #28]
 801812a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801812c:	8b7b      	ldrh	r3, [r7, #26]
 801812e:	089b      	lsrs	r3, r3, #2
 8018130:	b29b      	uxth	r3, r3
 8018132:	b2db      	uxtb	r3, r3
 8018134:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018138:	b2da      	uxtb	r2, r3
 801813a:	69fb      	ldr	r3, [r7, #28]
 801813c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801813e:	69fb      	ldr	r3, [r7, #28]
 8018140:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8018144:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8018146:	68fb      	ldr	r3, [r7, #12]
 8018148:	891b      	ldrh	r3, [r3, #8]
 801814a:	4618      	mov	r0, r3
 801814c:	f7f6 ff20 	bl	800ef90 <lwip_htons>
 8018150:	4603      	mov	r3, r0
 8018152:	461a      	mov	r2, r3
 8018154:	69fb      	ldr	r3, [r7, #28]
 8018156:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018158:	69fb      	ldr	r3, [r7, #28]
 801815a:	2200      	movs	r2, #0
 801815c:	719a      	strb	r2, [r3, #6]
 801815e:	2200      	movs	r2, #0
 8018160:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018162:	4b2a      	ldr	r3, [pc, #168]	@ (801820c <ip4_output_if_src+0x154>)
 8018164:	881b      	ldrh	r3, [r3, #0]
 8018166:	4618      	mov	r0, r3
 8018168:	f7f6 ff12 	bl	800ef90 <lwip_htons>
 801816c:	4603      	mov	r3, r0
 801816e:	461a      	mov	r2, r3
 8018170:	69fb      	ldr	r3, [r7, #28]
 8018172:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018174:	4b25      	ldr	r3, [pc, #148]	@ (801820c <ip4_output_if_src+0x154>)
 8018176:	881b      	ldrh	r3, [r3, #0]
 8018178:	3301      	adds	r3, #1
 801817a:	b29a      	uxth	r2, r3
 801817c:	4b23      	ldr	r3, [pc, #140]	@ (801820c <ip4_output_if_src+0x154>)
 801817e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018180:	68bb      	ldr	r3, [r7, #8]
 8018182:	2b00      	cmp	r3, #0
 8018184:	d104      	bne.n	8018190 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8018186:	4b22      	ldr	r3, [pc, #136]	@ (8018210 <ip4_output_if_src+0x158>)
 8018188:	681a      	ldr	r2, [r3, #0]
 801818a:	69fb      	ldr	r3, [r7, #28]
 801818c:	60da      	str	r2, [r3, #12]
 801818e:	e003      	b.n	8018198 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018190:	68bb      	ldr	r3, [r7, #8]
 8018192:	681a      	ldr	r2, [r3, #0]
 8018194:	69fb      	ldr	r3, [r7, #28]
 8018196:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018198:	69fb      	ldr	r3, [r7, #28]
 801819a:	2200      	movs	r2, #0
 801819c:	729a      	strb	r2, [r3, #10]
 801819e:	2200      	movs	r2, #0
 80181a0:	72da      	strb	r2, [r3, #11]
 80181a2:	e00f      	b.n	80181c4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	895b      	ldrh	r3, [r3, #10]
 80181a8:	2b13      	cmp	r3, #19
 80181aa:	d802      	bhi.n	80181b2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80181ac:	f06f 0301 	mvn.w	r3, #1
 80181b0:	e020      	b.n	80181f4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80181b2:	68fb      	ldr	r3, [r7, #12]
 80181b4:	685b      	ldr	r3, [r3, #4]
 80181b6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80181b8:	69fb      	ldr	r3, [r7, #28]
 80181ba:	691b      	ldr	r3, [r3, #16]
 80181bc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80181be:	f107 0314 	add.w	r3, r7, #20
 80181c2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80181c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181c6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d00c      	beq.n	80181e6 <ip4_output_if_src+0x12e>
 80181cc:	68fb      	ldr	r3, [r7, #12]
 80181ce:	891a      	ldrh	r2, [r3, #8]
 80181d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181d2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80181d4:	429a      	cmp	r2, r3
 80181d6:	d906      	bls.n	80181e6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80181d8:	687a      	ldr	r2, [r7, #4]
 80181da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80181dc:	68f8      	ldr	r0, [r7, #12]
 80181de:	f000 fde3 	bl	8018da8 <ip4_frag>
 80181e2:	4603      	mov	r3, r0
 80181e4:	e006      	b.n	80181f4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80181e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181e8:	695b      	ldr	r3, [r3, #20]
 80181ea:	687a      	ldr	r2, [r7, #4]
 80181ec:	68f9      	ldr	r1, [r7, #12]
 80181ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80181f0:	4798      	blx	r3
 80181f2:	4603      	mov	r3, r0
}
 80181f4:	4618      	mov	r0, r3
 80181f6:	3720      	adds	r7, #32
 80181f8:	46bd      	mov	sp, r7
 80181fa:	bd80      	pop	{r7, pc}
 80181fc:	0801d9bc 	.word	0x0801d9bc
 8018200:	0801d9f0 	.word	0x0801d9f0
 8018204:	0801d9fc 	.word	0x0801d9fc
 8018208:	0801da24 	.word	0x0801da24
 801820c:	200275fe 	.word	0x200275fe
 8018210:	0801e2b8 	.word	0x0801e2b8

08018214 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018214:	b480      	push	{r7}
 8018216:	b085      	sub	sp, #20
 8018218:	af00      	add	r7, sp, #0
 801821a:	6078      	str	r0, [r7, #4]
 801821c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018228:	d002      	beq.n	8018230 <ip4_addr_isbroadcast_u32+0x1c>
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	2b00      	cmp	r3, #0
 801822e:	d101      	bne.n	8018234 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018230:	2301      	movs	r3, #1
 8018232:	e02a      	b.n	801828a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018234:	683b      	ldr	r3, [r7, #0]
 8018236:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801823a:	f003 0302 	and.w	r3, r3, #2
 801823e:	2b00      	cmp	r3, #0
 8018240:	d101      	bne.n	8018246 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8018242:	2300      	movs	r3, #0
 8018244:	e021      	b.n	801828a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8018246:	683b      	ldr	r3, [r7, #0]
 8018248:	3304      	adds	r3, #4
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	687a      	ldr	r2, [r7, #4]
 801824e:	429a      	cmp	r2, r3
 8018250:	d101      	bne.n	8018256 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8018252:	2300      	movs	r3, #0
 8018254:	e019      	b.n	801828a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8018256:	68fa      	ldr	r2, [r7, #12]
 8018258:	683b      	ldr	r3, [r7, #0]
 801825a:	3304      	adds	r3, #4
 801825c:	681b      	ldr	r3, [r3, #0]
 801825e:	405a      	eors	r2, r3
 8018260:	683b      	ldr	r3, [r7, #0]
 8018262:	3308      	adds	r3, #8
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	4013      	ands	r3, r2
 8018268:	2b00      	cmp	r3, #0
 801826a:	d10d      	bne.n	8018288 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801826c:	683b      	ldr	r3, [r7, #0]
 801826e:	3308      	adds	r3, #8
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	43da      	mvns	r2, r3
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018278:	683b      	ldr	r3, [r7, #0]
 801827a:	3308      	adds	r3, #8
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018280:	429a      	cmp	r2, r3
 8018282:	d101      	bne.n	8018288 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8018284:	2301      	movs	r3, #1
 8018286:	e000      	b.n	801828a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018288:	2300      	movs	r3, #0
  }
}
 801828a:	4618      	mov	r0, r3
 801828c:	3714      	adds	r7, #20
 801828e:	46bd      	mov	sp, r7
 8018290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018294:	4770      	bx	lr
	...

08018298 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8018298:	b580      	push	{r7, lr}
 801829a:	b082      	sub	sp, #8
 801829c:	af00      	add	r7, sp, #0
 801829e:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80182a0:	2210      	movs	r2, #16
 80182a2:	4904      	ldr	r1, [pc, #16]	@ (80182b4 <ip4addr_ntoa+0x1c>)
 80182a4:	6878      	ldr	r0, [r7, #4]
 80182a6:	f000 f807 	bl	80182b8 <ip4addr_ntoa_r>
 80182aa:	4603      	mov	r3, r0
}
 80182ac:	4618      	mov	r0, r3
 80182ae:	3708      	adds	r7, #8
 80182b0:	46bd      	mov	sp, r7
 80182b2:	bd80      	pop	{r7, pc}
 80182b4:	20027600 	.word	0x20027600

080182b8 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80182b8:	b480      	push	{r7}
 80182ba:	b08d      	sub	sp, #52	@ 0x34
 80182bc:	af00      	add	r7, sp, #0
 80182be:	60f8      	str	r0, [r7, #12]
 80182c0:	60b9      	str	r1, [r7, #8]
 80182c2:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80182c4:	2300      	movs	r3, #0
 80182c6:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80182ce:	68bb      	ldr	r3, [r7, #8]
 80182d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ap = (u8_t *)&s_addr;
 80182d2:	f107 0318 	add.w	r3, r7, #24
 80182d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 80182d8:	2300      	movs	r3, #0
 80182da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80182de:	e058      	b.n	8018392 <ip4addr_ntoa_r+0xda>
    i = 0;
 80182e0:	2300      	movs	r3, #0
 80182e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    do {
      rem = *ap % (u8_t)10;
 80182e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80182e8:	781a      	ldrb	r2, [r3, #0]
 80182ea:	4b32      	ldr	r3, [pc, #200]	@ (80183b4 <ip4addr_ntoa_r+0xfc>)
 80182ec:	fba3 1302 	umull	r1, r3, r3, r2
 80182f0:	08d9      	lsrs	r1, r3, #3
 80182f2:	460b      	mov	r3, r1
 80182f4:	009b      	lsls	r3, r3, #2
 80182f6:	440b      	add	r3, r1
 80182f8:	005b      	lsls	r3, r3, #1
 80182fa:	1ad3      	subs	r3, r2, r3
 80182fc:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80182fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018300:	781b      	ldrb	r3, [r3, #0]
 8018302:	4a2c      	ldr	r2, [pc, #176]	@ (80183b4 <ip4addr_ntoa_r+0xfc>)
 8018304:	fba2 2303 	umull	r2, r3, r2, r3
 8018308:	08db      	lsrs	r3, r3, #3
 801830a:	b2da      	uxtb	r2, r3
 801830c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801830e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8018310:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8018314:	1c5a      	adds	r2, r3, #1
 8018316:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 801831a:	4619      	mov	r1, r3
 801831c:	7ffb      	ldrb	r3, [r7, #31]
 801831e:	3330      	adds	r3, #48	@ 0x30
 8018320:	b2da      	uxtb	r2, r3
 8018322:	f101 0330 	add.w	r3, r1, #48	@ 0x30
 8018326:	443b      	add	r3, r7
 8018328:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801832c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801832e:	781b      	ldrb	r3, [r3, #0]
 8018330:	2b00      	cmp	r3, #0
 8018332:	d1d8      	bne.n	80182e6 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8018334:	e011      	b.n	801835a <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8018336:	6a3b      	ldr	r3, [r7, #32]
 8018338:	1c5a      	adds	r2, r3, #1
 801833a:	623a      	str	r2, [r7, #32]
 801833c:	687a      	ldr	r2, [r7, #4]
 801833e:	429a      	cmp	r2, r3
 8018340:	dc01      	bgt.n	8018346 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8018342:	2300      	movs	r3, #0
 8018344:	e030      	b.n	80183a8 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8018346:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801834a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801834c:	1c59      	adds	r1, r3, #1
 801834e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8018350:	3230      	adds	r2, #48	@ 0x30
 8018352:	443a      	add	r2, r7
 8018354:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8018358:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801835a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801835e:	1e5a      	subs	r2, r3, #1
 8018360:	f887 2026 	strb.w	r2, [r7, #38]	@ 0x26
 8018364:	2b00      	cmp	r3, #0
 8018366:	d1e6      	bne.n	8018336 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8018368:	6a3b      	ldr	r3, [r7, #32]
 801836a:	1c5a      	adds	r2, r3, #1
 801836c:	623a      	str	r2, [r7, #32]
 801836e:	687a      	ldr	r2, [r7, #4]
 8018370:	429a      	cmp	r2, r3
 8018372:	dc01      	bgt.n	8018378 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8018374:	2300      	movs	r3, #0
 8018376:	e017      	b.n	80183a8 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8018378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801837a:	1c5a      	adds	r2, r3, #1
 801837c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801837e:	222e      	movs	r2, #46	@ 0x2e
 8018380:	701a      	strb	r2, [r3, #0]
    ap++;
 8018382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018384:	3301      	adds	r3, #1
 8018386:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (n = 0; n < 4; n++) {
 8018388:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801838c:	3301      	adds	r3, #1
 801838e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018392:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018396:	2b03      	cmp	r3, #3
 8018398:	d9a2      	bls.n	80182e0 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801839a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801839c:	3b01      	subs	r3, #1
 801839e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80183a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80183a2:	2200      	movs	r2, #0
 80183a4:	701a      	strb	r2, [r3, #0]
  return buf;
 80183a6:	68bb      	ldr	r3, [r7, #8]
}
 80183a8:	4618      	mov	r0, r3
 80183aa:	3734      	adds	r7, #52	@ 0x34
 80183ac:	46bd      	mov	sp, r7
 80183ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183b2:	4770      	bx	lr
 80183b4:	cccccccd 	.word	0xcccccccd

080183b8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b084      	sub	sp, #16
 80183bc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80183be:	2300      	movs	r3, #0
 80183c0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80183c2:	4b12      	ldr	r3, [pc, #72]	@ (801840c <ip_reass_tmr+0x54>)
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80183c8:	e018      	b.n	80183fc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80183ca:	68fb      	ldr	r3, [r7, #12]
 80183cc:	7fdb      	ldrb	r3, [r3, #31]
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	d00b      	beq.n	80183ea <ip_reass_tmr+0x32>
      r->timer--;
 80183d2:	68fb      	ldr	r3, [r7, #12]
 80183d4:	7fdb      	ldrb	r3, [r3, #31]
 80183d6:	3b01      	subs	r3, #1
 80183d8:	b2da      	uxtb	r2, r3
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	681b      	ldr	r3, [r3, #0]
 80183e6:	60fb      	str	r3, [r7, #12]
 80183e8:	e008      	b.n	80183fc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80183ee:	68fb      	ldr	r3, [r7, #12]
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80183f4:	68b9      	ldr	r1, [r7, #8]
 80183f6:	6878      	ldr	r0, [r7, #4]
 80183f8:	f000 f80a 	bl	8018410 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80183fc:	68fb      	ldr	r3, [r7, #12]
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d1e3      	bne.n	80183ca <ip_reass_tmr+0x12>
    }
  }
}
 8018402:	bf00      	nop
 8018404:	bf00      	nop
 8018406:	3710      	adds	r7, #16
 8018408:	46bd      	mov	sp, r7
 801840a:	bd80      	pop	{r7, pc}
 801840c:	20027610 	.word	0x20027610

08018410 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018410:	b580      	push	{r7, lr}
 8018412:	b088      	sub	sp, #32
 8018414:	af00      	add	r7, sp, #0
 8018416:	6078      	str	r0, [r7, #4]
 8018418:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801841a:	2300      	movs	r3, #0
 801841c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801841e:	683a      	ldr	r2, [r7, #0]
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	429a      	cmp	r2, r3
 8018424:	d105      	bne.n	8018432 <ip_reass_free_complete_datagram+0x22>
 8018426:	4b45      	ldr	r3, [pc, #276]	@ (801853c <ip_reass_free_complete_datagram+0x12c>)
 8018428:	22ab      	movs	r2, #171	@ 0xab
 801842a:	4945      	ldr	r1, [pc, #276]	@ (8018540 <ip_reass_free_complete_datagram+0x130>)
 801842c:	4845      	ldr	r0, [pc, #276]	@ (8018544 <ip_reass_free_complete_datagram+0x134>)
 801842e:	f001 fdeb 	bl	801a008 <iprintf>
  if (prev != NULL) {
 8018432:	683b      	ldr	r3, [r7, #0]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d00a      	beq.n	801844e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018438:	683b      	ldr	r3, [r7, #0]
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	687a      	ldr	r2, [r7, #4]
 801843e:	429a      	cmp	r2, r3
 8018440:	d005      	beq.n	801844e <ip_reass_free_complete_datagram+0x3e>
 8018442:	4b3e      	ldr	r3, [pc, #248]	@ (801853c <ip_reass_free_complete_datagram+0x12c>)
 8018444:	22ad      	movs	r2, #173	@ 0xad
 8018446:	4940      	ldr	r1, [pc, #256]	@ (8018548 <ip_reass_free_complete_datagram+0x138>)
 8018448:	483e      	ldr	r0, [pc, #248]	@ (8018544 <ip_reass_free_complete_datagram+0x134>)
 801844a:	f001 fddd 	bl	801a008 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	685b      	ldr	r3, [r3, #4]
 8018452:	685b      	ldr	r3, [r3, #4]
 8018454:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018456:	697b      	ldr	r3, [r7, #20]
 8018458:	889b      	ldrh	r3, [r3, #4]
 801845a:	b29b      	uxth	r3, r3
 801845c:	2b00      	cmp	r3, #0
 801845e:	d12a      	bne.n	80184b6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	685b      	ldr	r3, [r3, #4]
 8018464:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018466:	697b      	ldr	r3, [r7, #20]
 8018468:	681a      	ldr	r2, [r3, #0]
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801846e:	69bb      	ldr	r3, [r7, #24]
 8018470:	6858      	ldr	r0, [r3, #4]
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	3308      	adds	r3, #8
 8018476:	2214      	movs	r2, #20
 8018478:	4619      	mov	r1, r3
 801847a:	f001 fff0 	bl	801a45e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801847e:	2101      	movs	r1, #1
 8018480:	69b8      	ldr	r0, [r7, #24]
 8018482:	f7ff fbb7 	bl	8017bf4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018486:	69b8      	ldr	r0, [r7, #24]
 8018488:	f7f8 f9fe 	bl	8010888 <pbuf_clen>
 801848c:	4603      	mov	r3, r0
 801848e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018490:	8bfa      	ldrh	r2, [r7, #30]
 8018492:	8a7b      	ldrh	r3, [r7, #18]
 8018494:	4413      	add	r3, r2
 8018496:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801849a:	db05      	blt.n	80184a8 <ip_reass_free_complete_datagram+0x98>
 801849c:	4b27      	ldr	r3, [pc, #156]	@ (801853c <ip_reass_free_complete_datagram+0x12c>)
 801849e:	22bc      	movs	r2, #188	@ 0xbc
 80184a0:	492a      	ldr	r1, [pc, #168]	@ (801854c <ip_reass_free_complete_datagram+0x13c>)
 80184a2:	4828      	ldr	r0, [pc, #160]	@ (8018544 <ip_reass_free_complete_datagram+0x134>)
 80184a4:	f001 fdb0 	bl	801a008 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80184a8:	8bfa      	ldrh	r2, [r7, #30]
 80184aa:	8a7b      	ldrh	r3, [r7, #18]
 80184ac:	4413      	add	r3, r2
 80184ae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80184b0:	69b8      	ldr	r0, [r7, #24]
 80184b2:	f7f8 f95b 	bl	801076c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	685b      	ldr	r3, [r3, #4]
 80184ba:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80184bc:	e01f      	b.n	80184fe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80184be:	69bb      	ldr	r3, [r7, #24]
 80184c0:	685b      	ldr	r3, [r3, #4]
 80184c2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80184c4:	69bb      	ldr	r3, [r7, #24]
 80184c6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80184c8:	697b      	ldr	r3, [r7, #20]
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80184ce:	68f8      	ldr	r0, [r7, #12]
 80184d0:	f7f8 f9da 	bl	8010888 <pbuf_clen>
 80184d4:	4603      	mov	r3, r0
 80184d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80184d8:	8bfa      	ldrh	r2, [r7, #30]
 80184da:	8a7b      	ldrh	r3, [r7, #18]
 80184dc:	4413      	add	r3, r2
 80184de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80184e2:	db05      	blt.n	80184f0 <ip_reass_free_complete_datagram+0xe0>
 80184e4:	4b15      	ldr	r3, [pc, #84]	@ (801853c <ip_reass_free_complete_datagram+0x12c>)
 80184e6:	22cc      	movs	r2, #204	@ 0xcc
 80184e8:	4918      	ldr	r1, [pc, #96]	@ (801854c <ip_reass_free_complete_datagram+0x13c>)
 80184ea:	4816      	ldr	r0, [pc, #88]	@ (8018544 <ip_reass_free_complete_datagram+0x134>)
 80184ec:	f001 fd8c 	bl	801a008 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80184f0:	8bfa      	ldrh	r2, [r7, #30]
 80184f2:	8a7b      	ldrh	r3, [r7, #18]
 80184f4:	4413      	add	r3, r2
 80184f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80184f8:	68f8      	ldr	r0, [r7, #12]
 80184fa:	f7f8 f937 	bl	801076c <pbuf_free>
  while (p != NULL) {
 80184fe:	69bb      	ldr	r3, [r7, #24]
 8018500:	2b00      	cmp	r3, #0
 8018502:	d1dc      	bne.n	80184be <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018504:	6839      	ldr	r1, [r7, #0]
 8018506:	6878      	ldr	r0, [r7, #4]
 8018508:	f000 f8c2 	bl	8018690 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801850c:	4b10      	ldr	r3, [pc, #64]	@ (8018550 <ip_reass_free_complete_datagram+0x140>)
 801850e:	881b      	ldrh	r3, [r3, #0]
 8018510:	8bfa      	ldrh	r2, [r7, #30]
 8018512:	429a      	cmp	r2, r3
 8018514:	d905      	bls.n	8018522 <ip_reass_free_complete_datagram+0x112>
 8018516:	4b09      	ldr	r3, [pc, #36]	@ (801853c <ip_reass_free_complete_datagram+0x12c>)
 8018518:	22d2      	movs	r2, #210	@ 0xd2
 801851a:	490e      	ldr	r1, [pc, #56]	@ (8018554 <ip_reass_free_complete_datagram+0x144>)
 801851c:	4809      	ldr	r0, [pc, #36]	@ (8018544 <ip_reass_free_complete_datagram+0x134>)
 801851e:	f001 fd73 	bl	801a008 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018522:	4b0b      	ldr	r3, [pc, #44]	@ (8018550 <ip_reass_free_complete_datagram+0x140>)
 8018524:	881a      	ldrh	r2, [r3, #0]
 8018526:	8bfb      	ldrh	r3, [r7, #30]
 8018528:	1ad3      	subs	r3, r2, r3
 801852a:	b29a      	uxth	r2, r3
 801852c:	4b08      	ldr	r3, [pc, #32]	@ (8018550 <ip_reass_free_complete_datagram+0x140>)
 801852e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018530:	8bfb      	ldrh	r3, [r7, #30]
}
 8018532:	4618      	mov	r0, r3
 8018534:	3720      	adds	r7, #32
 8018536:	46bd      	mov	sp, r7
 8018538:	bd80      	pop	{r7, pc}
 801853a:	bf00      	nop
 801853c:	0801da54 	.word	0x0801da54
 8018540:	0801da90 	.word	0x0801da90
 8018544:	0801da9c 	.word	0x0801da9c
 8018548:	0801dac4 	.word	0x0801dac4
 801854c:	0801dad8 	.word	0x0801dad8
 8018550:	20027614 	.word	0x20027614
 8018554:	0801daf8 	.word	0x0801daf8

08018558 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018558:	b580      	push	{r7, lr}
 801855a:	b08a      	sub	sp, #40	@ 0x28
 801855c:	af00      	add	r7, sp, #0
 801855e:	6078      	str	r0, [r7, #4]
 8018560:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018562:	2300      	movs	r3, #0
 8018564:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018566:	2300      	movs	r3, #0
 8018568:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801856a:	2300      	movs	r3, #0
 801856c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801856e:	2300      	movs	r3, #0
 8018570:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018572:	2300      	movs	r3, #0
 8018574:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018576:	4b28      	ldr	r3, [pc, #160]	@ (8018618 <ip_reass_remove_oldest_datagram+0xc0>)
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801857c:	e030      	b.n	80185e0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801857e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018580:	695a      	ldr	r2, [r3, #20]
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	68db      	ldr	r3, [r3, #12]
 8018586:	429a      	cmp	r2, r3
 8018588:	d10c      	bne.n	80185a4 <ip_reass_remove_oldest_datagram+0x4c>
 801858a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801858c:	699a      	ldr	r2, [r3, #24]
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	691b      	ldr	r3, [r3, #16]
 8018592:	429a      	cmp	r2, r3
 8018594:	d106      	bne.n	80185a4 <ip_reass_remove_oldest_datagram+0x4c>
 8018596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018598:	899a      	ldrh	r2, [r3, #12]
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	889b      	ldrh	r3, [r3, #4]
 801859e:	b29b      	uxth	r3, r3
 80185a0:	429a      	cmp	r2, r3
 80185a2:	d014      	beq.n	80185ce <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80185a4:	693b      	ldr	r3, [r7, #16]
 80185a6:	3301      	adds	r3, #1
 80185a8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80185aa:	6a3b      	ldr	r3, [r7, #32]
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	d104      	bne.n	80185ba <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80185b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185b2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80185b4:	69fb      	ldr	r3, [r7, #28]
 80185b6:	61bb      	str	r3, [r7, #24]
 80185b8:	e009      	b.n	80185ce <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80185ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185bc:	7fda      	ldrb	r2, [r3, #31]
 80185be:	6a3b      	ldr	r3, [r7, #32]
 80185c0:	7fdb      	ldrb	r3, [r3, #31]
 80185c2:	429a      	cmp	r2, r3
 80185c4:	d803      	bhi.n	80185ce <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80185c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185c8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80185ca:	69fb      	ldr	r3, [r7, #28]
 80185cc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80185ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	d001      	beq.n	80185da <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80185d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185d8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80185da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80185e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d1cb      	bne.n	801857e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80185e6:	6a3b      	ldr	r3, [r7, #32]
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d008      	beq.n	80185fe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80185ec:	69b9      	ldr	r1, [r7, #24]
 80185ee:	6a38      	ldr	r0, [r7, #32]
 80185f0:	f7ff ff0e 	bl	8018410 <ip_reass_free_complete_datagram>
 80185f4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80185f6:	697a      	ldr	r2, [r7, #20]
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	4413      	add	r3, r2
 80185fc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80185fe:	697a      	ldr	r2, [r7, #20]
 8018600:	683b      	ldr	r3, [r7, #0]
 8018602:	429a      	cmp	r2, r3
 8018604:	da02      	bge.n	801860c <ip_reass_remove_oldest_datagram+0xb4>
 8018606:	693b      	ldr	r3, [r7, #16]
 8018608:	2b01      	cmp	r3, #1
 801860a:	dcac      	bgt.n	8018566 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801860c:	697b      	ldr	r3, [r7, #20]
}
 801860e:	4618      	mov	r0, r3
 8018610:	3728      	adds	r7, #40	@ 0x28
 8018612:	46bd      	mov	sp, r7
 8018614:	bd80      	pop	{r7, pc}
 8018616:	bf00      	nop
 8018618:	20027610 	.word	0x20027610

0801861c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801861c:	b580      	push	{r7, lr}
 801861e:	b084      	sub	sp, #16
 8018620:	af00      	add	r7, sp, #0
 8018622:	6078      	str	r0, [r7, #4]
 8018624:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018626:	2004      	movs	r0, #4
 8018628:	f7f7 f986 	bl	800f938 <memp_malloc>
 801862c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	2b00      	cmp	r3, #0
 8018632:	d110      	bne.n	8018656 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018634:	6839      	ldr	r1, [r7, #0]
 8018636:	6878      	ldr	r0, [r7, #4]
 8018638:	f7ff ff8e 	bl	8018558 <ip_reass_remove_oldest_datagram>
 801863c:	4602      	mov	r2, r0
 801863e:	683b      	ldr	r3, [r7, #0]
 8018640:	4293      	cmp	r3, r2
 8018642:	dc03      	bgt.n	801864c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018644:	2004      	movs	r0, #4
 8018646:	f7f7 f977 	bl	800f938 <memp_malloc>
 801864a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801864c:	68fb      	ldr	r3, [r7, #12]
 801864e:	2b00      	cmp	r3, #0
 8018650:	d101      	bne.n	8018656 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8018652:	2300      	movs	r3, #0
 8018654:	e016      	b.n	8018684 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018656:	2220      	movs	r2, #32
 8018658:	2100      	movs	r1, #0
 801865a:	68f8      	ldr	r0, [r7, #12]
 801865c:	f001 fe2c 	bl	801a2b8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	220f      	movs	r2, #15
 8018664:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018666:	4b09      	ldr	r3, [pc, #36]	@ (801868c <ip_reass_enqueue_new_datagram+0x70>)
 8018668:	681a      	ldr	r2, [r3, #0]
 801866a:	68fb      	ldr	r3, [r7, #12]
 801866c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801866e:	4a07      	ldr	r2, [pc, #28]	@ (801868c <ip_reass_enqueue_new_datagram+0x70>)
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	3308      	adds	r3, #8
 8018678:	2214      	movs	r2, #20
 801867a:	6879      	ldr	r1, [r7, #4]
 801867c:	4618      	mov	r0, r3
 801867e:	f001 feee 	bl	801a45e <memcpy>
  return ipr;
 8018682:	68fb      	ldr	r3, [r7, #12]
}
 8018684:	4618      	mov	r0, r3
 8018686:	3710      	adds	r7, #16
 8018688:	46bd      	mov	sp, r7
 801868a:	bd80      	pop	{r7, pc}
 801868c:	20027610 	.word	0x20027610

08018690 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018690:	b580      	push	{r7, lr}
 8018692:	b082      	sub	sp, #8
 8018694:	af00      	add	r7, sp, #0
 8018696:	6078      	str	r0, [r7, #4]
 8018698:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801869a:	4b10      	ldr	r3, [pc, #64]	@ (80186dc <ip_reass_dequeue_datagram+0x4c>)
 801869c:	681b      	ldr	r3, [r3, #0]
 801869e:	687a      	ldr	r2, [r7, #4]
 80186a0:	429a      	cmp	r2, r3
 80186a2:	d104      	bne.n	80186ae <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	4a0c      	ldr	r2, [pc, #48]	@ (80186dc <ip_reass_dequeue_datagram+0x4c>)
 80186aa:	6013      	str	r3, [r2, #0]
 80186ac:	e00d      	b.n	80186ca <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80186ae:	683b      	ldr	r3, [r7, #0]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d106      	bne.n	80186c2 <ip_reass_dequeue_datagram+0x32>
 80186b4:	4b0a      	ldr	r3, [pc, #40]	@ (80186e0 <ip_reass_dequeue_datagram+0x50>)
 80186b6:	f240 1245 	movw	r2, #325	@ 0x145
 80186ba:	490a      	ldr	r1, [pc, #40]	@ (80186e4 <ip_reass_dequeue_datagram+0x54>)
 80186bc:	480a      	ldr	r0, [pc, #40]	@ (80186e8 <ip_reass_dequeue_datagram+0x58>)
 80186be:	f001 fca3 	bl	801a008 <iprintf>
    prev->next = ipr->next;
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	681a      	ldr	r2, [r3, #0]
 80186c6:	683b      	ldr	r3, [r7, #0]
 80186c8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80186ca:	6879      	ldr	r1, [r7, #4]
 80186cc:	2004      	movs	r0, #4
 80186ce:	f7f7 f9a9 	bl	800fa24 <memp_free>
}
 80186d2:	bf00      	nop
 80186d4:	3708      	adds	r7, #8
 80186d6:	46bd      	mov	sp, r7
 80186d8:	bd80      	pop	{r7, pc}
 80186da:	bf00      	nop
 80186dc:	20027610 	.word	0x20027610
 80186e0:	0801da54 	.word	0x0801da54
 80186e4:	0801db1c 	.word	0x0801db1c
 80186e8:	0801da9c 	.word	0x0801da9c

080186ec <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80186ec:	b580      	push	{r7, lr}
 80186ee:	b08c      	sub	sp, #48	@ 0x30
 80186f0:	af00      	add	r7, sp, #0
 80186f2:	60f8      	str	r0, [r7, #12]
 80186f4:	60b9      	str	r1, [r7, #8]
 80186f6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80186f8:	2300      	movs	r3, #0
 80186fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80186fc:	2301      	movs	r3, #1
 80186fe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018700:	68bb      	ldr	r3, [r7, #8]
 8018702:	685b      	ldr	r3, [r3, #4]
 8018704:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018706:	69fb      	ldr	r3, [r7, #28]
 8018708:	885b      	ldrh	r3, [r3, #2]
 801870a:	b29b      	uxth	r3, r3
 801870c:	4618      	mov	r0, r3
 801870e:	f7f6 fc3f 	bl	800ef90 <lwip_htons>
 8018712:	4603      	mov	r3, r0
 8018714:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8018716:	69fb      	ldr	r3, [r7, #28]
 8018718:	781b      	ldrb	r3, [r3, #0]
 801871a:	f003 030f 	and.w	r3, r3, #15
 801871e:	b2db      	uxtb	r3, r3
 8018720:	009b      	lsls	r3, r3, #2
 8018722:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018724:	7e7b      	ldrb	r3, [r7, #25]
 8018726:	b29b      	uxth	r3, r3
 8018728:	8b7a      	ldrh	r2, [r7, #26]
 801872a:	429a      	cmp	r2, r3
 801872c:	d202      	bcs.n	8018734 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801872e:	f04f 33ff 	mov.w	r3, #4294967295
 8018732:	e135      	b.n	80189a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018734:	7e7b      	ldrb	r3, [r7, #25]
 8018736:	b29b      	uxth	r3, r3
 8018738:	8b7a      	ldrh	r2, [r7, #26]
 801873a:	1ad3      	subs	r3, r2, r3
 801873c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801873e:	69fb      	ldr	r3, [r7, #28]
 8018740:	88db      	ldrh	r3, [r3, #6]
 8018742:	b29b      	uxth	r3, r3
 8018744:	4618      	mov	r0, r3
 8018746:	f7f6 fc23 	bl	800ef90 <lwip_htons>
 801874a:	4603      	mov	r3, r0
 801874c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018750:	b29b      	uxth	r3, r3
 8018752:	00db      	lsls	r3, r3, #3
 8018754:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8018756:	68bb      	ldr	r3, [r7, #8]
 8018758:	685b      	ldr	r3, [r3, #4]
 801875a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801875c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801875e:	2200      	movs	r2, #0
 8018760:	701a      	strb	r2, [r3, #0]
 8018762:	2200      	movs	r2, #0
 8018764:	705a      	strb	r2, [r3, #1]
 8018766:	2200      	movs	r2, #0
 8018768:	709a      	strb	r2, [r3, #2]
 801876a:	2200      	movs	r2, #0
 801876c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801876e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018770:	8afa      	ldrh	r2, [r7, #22]
 8018772:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018774:	8afa      	ldrh	r2, [r7, #22]
 8018776:	8b7b      	ldrh	r3, [r7, #26]
 8018778:	4413      	add	r3, r2
 801877a:	b29a      	uxth	r2, r3
 801877c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801877e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018782:	88db      	ldrh	r3, [r3, #6]
 8018784:	b29b      	uxth	r3, r3
 8018786:	8afa      	ldrh	r2, [r7, #22]
 8018788:	429a      	cmp	r2, r3
 801878a:	d902      	bls.n	8018792 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801878c:	f04f 33ff 	mov.w	r3, #4294967295
 8018790:	e106      	b.n	80189a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	685b      	ldr	r3, [r3, #4]
 8018796:	627b      	str	r3, [r7, #36]	@ 0x24
 8018798:	e068      	b.n	801886c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801879a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801879c:	685b      	ldr	r3, [r3, #4]
 801879e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80187a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187a2:	889b      	ldrh	r3, [r3, #4]
 80187a4:	b29a      	uxth	r2, r3
 80187a6:	693b      	ldr	r3, [r7, #16]
 80187a8:	889b      	ldrh	r3, [r3, #4]
 80187aa:	b29b      	uxth	r3, r3
 80187ac:	429a      	cmp	r2, r3
 80187ae:	d235      	bcs.n	801881c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80187b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80187b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80187b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d020      	beq.n	80187fe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80187bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187be:	889b      	ldrh	r3, [r3, #4]
 80187c0:	b29a      	uxth	r2, r3
 80187c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187c4:	88db      	ldrh	r3, [r3, #6]
 80187c6:	b29b      	uxth	r3, r3
 80187c8:	429a      	cmp	r2, r3
 80187ca:	d307      	bcc.n	80187dc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80187cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187ce:	88db      	ldrh	r3, [r3, #6]
 80187d0:	b29a      	uxth	r2, r3
 80187d2:	693b      	ldr	r3, [r7, #16]
 80187d4:	889b      	ldrh	r3, [r3, #4]
 80187d6:	b29b      	uxth	r3, r3
 80187d8:	429a      	cmp	r2, r3
 80187da:	d902      	bls.n	80187e2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80187dc:	f04f 33ff 	mov.w	r3, #4294967295
 80187e0:	e0de      	b.n	80189a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80187e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187e4:	68ba      	ldr	r2, [r7, #8]
 80187e6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80187e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80187ea:	88db      	ldrh	r3, [r3, #6]
 80187ec:	b29a      	uxth	r2, r3
 80187ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187f0:	889b      	ldrh	r3, [r3, #4]
 80187f2:	b29b      	uxth	r3, r3
 80187f4:	429a      	cmp	r2, r3
 80187f6:	d03d      	beq.n	8018874 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80187f8:	2300      	movs	r3, #0
 80187fa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80187fc:	e03a      	b.n	8018874 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80187fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018800:	88db      	ldrh	r3, [r3, #6]
 8018802:	b29a      	uxth	r2, r3
 8018804:	693b      	ldr	r3, [r7, #16]
 8018806:	889b      	ldrh	r3, [r3, #4]
 8018808:	b29b      	uxth	r3, r3
 801880a:	429a      	cmp	r2, r3
 801880c:	d902      	bls.n	8018814 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801880e:	f04f 33ff 	mov.w	r3, #4294967295
 8018812:	e0c5      	b.n	80189a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	68ba      	ldr	r2, [r7, #8]
 8018818:	605a      	str	r2, [r3, #4]
      break;
 801881a:	e02b      	b.n	8018874 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801881c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801881e:	889b      	ldrh	r3, [r3, #4]
 8018820:	b29a      	uxth	r2, r3
 8018822:	693b      	ldr	r3, [r7, #16]
 8018824:	889b      	ldrh	r3, [r3, #4]
 8018826:	b29b      	uxth	r3, r3
 8018828:	429a      	cmp	r2, r3
 801882a:	d102      	bne.n	8018832 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801882c:	f04f 33ff 	mov.w	r3, #4294967295
 8018830:	e0b6      	b.n	80189a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8018832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018834:	889b      	ldrh	r3, [r3, #4]
 8018836:	b29a      	uxth	r2, r3
 8018838:	693b      	ldr	r3, [r7, #16]
 801883a:	88db      	ldrh	r3, [r3, #6]
 801883c:	b29b      	uxth	r3, r3
 801883e:	429a      	cmp	r2, r3
 8018840:	d202      	bcs.n	8018848 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018842:	f04f 33ff 	mov.w	r3, #4294967295
 8018846:	e0ab      	b.n	80189a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801884a:	2b00      	cmp	r3, #0
 801884c:	d009      	beq.n	8018862 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801884e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018850:	88db      	ldrh	r3, [r3, #6]
 8018852:	b29a      	uxth	r2, r3
 8018854:	693b      	ldr	r3, [r7, #16]
 8018856:	889b      	ldrh	r3, [r3, #4]
 8018858:	b29b      	uxth	r3, r3
 801885a:	429a      	cmp	r2, r3
 801885c:	d001      	beq.n	8018862 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801885e:	2300      	movs	r3, #0
 8018860:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018862:	693b      	ldr	r3, [r7, #16]
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8018868:	693b      	ldr	r3, [r7, #16]
 801886a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801886c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801886e:	2b00      	cmp	r3, #0
 8018870:	d193      	bne.n	801879a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8018872:	e000      	b.n	8018876 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018874:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018878:	2b00      	cmp	r3, #0
 801887a:	d12d      	bne.n	80188d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801887c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801887e:	2b00      	cmp	r3, #0
 8018880:	d01c      	beq.n	80188bc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018884:	88db      	ldrh	r3, [r3, #6]
 8018886:	b29a      	uxth	r2, r3
 8018888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801888a:	889b      	ldrh	r3, [r3, #4]
 801888c:	b29b      	uxth	r3, r3
 801888e:	429a      	cmp	r2, r3
 8018890:	d906      	bls.n	80188a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018892:	4b45      	ldr	r3, [pc, #276]	@ (80189a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018894:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8018898:	4944      	ldr	r1, [pc, #272]	@ (80189ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801889a:	4845      	ldr	r0, [pc, #276]	@ (80189b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801889c:	f001 fbb4 	bl	801a008 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80188a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80188a2:	68ba      	ldr	r2, [r7, #8]
 80188a4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80188a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80188a8:	88db      	ldrh	r3, [r3, #6]
 80188aa:	b29a      	uxth	r2, r3
 80188ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80188ae:	889b      	ldrh	r3, [r3, #4]
 80188b0:	b29b      	uxth	r3, r3
 80188b2:	429a      	cmp	r2, r3
 80188b4:	d010      	beq.n	80188d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80188b6:	2300      	movs	r3, #0
 80188b8:	623b      	str	r3, [r7, #32]
 80188ba:	e00d      	b.n	80188d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80188bc:	68fb      	ldr	r3, [r7, #12]
 80188be:	685b      	ldr	r3, [r3, #4]
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d006      	beq.n	80188d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80188c4:	4b38      	ldr	r3, [pc, #224]	@ (80189a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80188c6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80188ca:	493a      	ldr	r1, [pc, #232]	@ (80189b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80188cc:	4838      	ldr	r0, [pc, #224]	@ (80189b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80188ce:	f001 fb9b 	bl	801a008 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80188d2:	68fb      	ldr	r3, [r7, #12]
 80188d4:	68ba      	ldr	r2, [r7, #8]
 80188d6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d105      	bne.n	80188ea <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80188de:	68fb      	ldr	r3, [r7, #12]
 80188e0:	7f9b      	ldrb	r3, [r3, #30]
 80188e2:	f003 0301 	and.w	r3, r3, #1
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d059      	beq.n	801899e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80188ea:	6a3b      	ldr	r3, [r7, #32]
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d04f      	beq.n	8018990 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80188f0:	68fb      	ldr	r3, [r7, #12]
 80188f2:	685b      	ldr	r3, [r3, #4]
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d006      	beq.n	8018906 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80188f8:	68fb      	ldr	r3, [r7, #12]
 80188fa:	685b      	ldr	r3, [r3, #4]
 80188fc:	685b      	ldr	r3, [r3, #4]
 80188fe:	889b      	ldrh	r3, [r3, #4]
 8018900:	b29b      	uxth	r3, r3
 8018902:	2b00      	cmp	r3, #0
 8018904:	d002      	beq.n	801890c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018906:	2300      	movs	r3, #0
 8018908:	623b      	str	r3, [r7, #32]
 801890a:	e041      	b.n	8018990 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801890c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801890e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8018910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018912:	681b      	ldr	r3, [r3, #0]
 8018914:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8018916:	e012      	b.n	801893e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801891a:	685b      	ldr	r3, [r3, #4]
 801891c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801891e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018920:	88db      	ldrh	r3, [r3, #6]
 8018922:	b29a      	uxth	r2, r3
 8018924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018926:	889b      	ldrh	r3, [r3, #4]
 8018928:	b29b      	uxth	r3, r3
 801892a:	429a      	cmp	r2, r3
 801892c:	d002      	beq.n	8018934 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801892e:	2300      	movs	r3, #0
 8018930:	623b      	str	r3, [r7, #32]
            break;
 8018932:	e007      	b.n	8018944 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018936:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8018938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801893a:	681b      	ldr	r3, [r3, #0]
 801893c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801893e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018940:	2b00      	cmp	r3, #0
 8018942:	d1e9      	bne.n	8018918 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018944:	6a3b      	ldr	r3, [r7, #32]
 8018946:	2b00      	cmp	r3, #0
 8018948:	d022      	beq.n	8018990 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801894a:	68fb      	ldr	r3, [r7, #12]
 801894c:	685b      	ldr	r3, [r3, #4]
 801894e:	2b00      	cmp	r3, #0
 8018950:	d106      	bne.n	8018960 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018952:	4b15      	ldr	r3, [pc, #84]	@ (80189a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018954:	f240 12df 	movw	r2, #479	@ 0x1df
 8018958:	4917      	ldr	r1, [pc, #92]	@ (80189b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801895a:	4815      	ldr	r0, [pc, #84]	@ (80189b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801895c:	f001 fb54 	bl	801a008 <iprintf>
          LWIP_ASSERT("sanity check",
 8018960:	68fb      	ldr	r3, [r7, #12]
 8018962:	685b      	ldr	r3, [r3, #4]
 8018964:	685b      	ldr	r3, [r3, #4]
 8018966:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018968:	429a      	cmp	r2, r3
 801896a:	d106      	bne.n	801897a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801896c:	4b0e      	ldr	r3, [pc, #56]	@ (80189a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801896e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8018972:	4911      	ldr	r1, [pc, #68]	@ (80189b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018974:	480e      	ldr	r0, [pc, #56]	@ (80189b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018976:	f001 fb47 	bl	801a008 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801897a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	2b00      	cmp	r3, #0
 8018980:	d006      	beq.n	8018990 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018982:	4b09      	ldr	r3, [pc, #36]	@ (80189a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018984:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8018988:	490c      	ldr	r1, [pc, #48]	@ (80189bc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801898a:	4809      	ldr	r0, [pc, #36]	@ (80189b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801898c:	f001 fb3c 	bl	801a008 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018990:	6a3b      	ldr	r3, [r7, #32]
 8018992:	2b00      	cmp	r3, #0
 8018994:	bf14      	ite	ne
 8018996:	2301      	movne	r3, #1
 8018998:	2300      	moveq	r3, #0
 801899a:	b2db      	uxtb	r3, r3
 801899c:	e000      	b.n	80189a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801899e:	2300      	movs	r3, #0
}
 80189a0:	4618      	mov	r0, r3
 80189a2:	3730      	adds	r7, #48	@ 0x30
 80189a4:	46bd      	mov	sp, r7
 80189a6:	bd80      	pop	{r7, pc}
 80189a8:	0801da54 	.word	0x0801da54
 80189ac:	0801db38 	.word	0x0801db38
 80189b0:	0801da9c 	.word	0x0801da9c
 80189b4:	0801db58 	.word	0x0801db58
 80189b8:	0801db90 	.word	0x0801db90
 80189bc:	0801dba0 	.word	0x0801dba0

080189c0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80189c0:	b580      	push	{r7, lr}
 80189c2:	b08e      	sub	sp, #56	@ 0x38
 80189c4:	af00      	add	r7, sp, #0
 80189c6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	685b      	ldr	r3, [r3, #4]
 80189cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80189ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189d0:	781b      	ldrb	r3, [r3, #0]
 80189d2:	f003 030f 	and.w	r3, r3, #15
 80189d6:	b2db      	uxtb	r3, r3
 80189d8:	009b      	lsls	r3, r3, #2
 80189da:	b2db      	uxtb	r3, r3
 80189dc:	2b14      	cmp	r3, #20
 80189de:	f040 8171 	bne.w	8018cc4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80189e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189e4:	88db      	ldrh	r3, [r3, #6]
 80189e6:	b29b      	uxth	r3, r3
 80189e8:	4618      	mov	r0, r3
 80189ea:	f7f6 fad1 	bl	800ef90 <lwip_htons>
 80189ee:	4603      	mov	r3, r0
 80189f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80189f4:	b29b      	uxth	r3, r3
 80189f6:	00db      	lsls	r3, r3, #3
 80189f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80189fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189fc:	885b      	ldrh	r3, [r3, #2]
 80189fe:	b29b      	uxth	r3, r3
 8018a00:	4618      	mov	r0, r3
 8018a02:	f7f6 fac5 	bl	800ef90 <lwip_htons>
 8018a06:	4603      	mov	r3, r0
 8018a08:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a0c:	781b      	ldrb	r3, [r3, #0]
 8018a0e:	f003 030f 	and.w	r3, r3, #15
 8018a12:	b2db      	uxtb	r3, r3
 8018a14:	009b      	lsls	r3, r3, #2
 8018a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8018a1a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018a1e:	b29b      	uxth	r3, r3
 8018a20:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018a22:	429a      	cmp	r2, r3
 8018a24:	f0c0 8150 	bcc.w	8018cc8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018a28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018a2c:	b29b      	uxth	r3, r3
 8018a2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018a30:	1ad3      	subs	r3, r2, r3
 8018a32:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018a34:	6878      	ldr	r0, [r7, #4]
 8018a36:	f7f7 ff27 	bl	8010888 <pbuf_clen>
 8018a3a:	4603      	mov	r3, r0
 8018a3c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018a3e:	4b8c      	ldr	r3, [pc, #560]	@ (8018c70 <ip4_reass+0x2b0>)
 8018a40:	881b      	ldrh	r3, [r3, #0]
 8018a42:	461a      	mov	r2, r3
 8018a44:	8c3b      	ldrh	r3, [r7, #32]
 8018a46:	4413      	add	r3, r2
 8018a48:	2b0a      	cmp	r3, #10
 8018a4a:	dd10      	ble.n	8018a6e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018a4c:	8c3b      	ldrh	r3, [r7, #32]
 8018a4e:	4619      	mov	r1, r3
 8018a50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018a52:	f7ff fd81 	bl	8018558 <ip_reass_remove_oldest_datagram>
 8018a56:	4603      	mov	r3, r0
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	f000 8137 	beq.w	8018ccc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018a5e:	4b84      	ldr	r3, [pc, #528]	@ (8018c70 <ip4_reass+0x2b0>)
 8018a60:	881b      	ldrh	r3, [r3, #0]
 8018a62:	461a      	mov	r2, r3
 8018a64:	8c3b      	ldrh	r3, [r7, #32]
 8018a66:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018a68:	2b0a      	cmp	r3, #10
 8018a6a:	f300 812f 	bgt.w	8018ccc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018a6e:	4b81      	ldr	r3, [pc, #516]	@ (8018c74 <ip4_reass+0x2b4>)
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	633b      	str	r3, [r7, #48]	@ 0x30
 8018a74:	e015      	b.n	8018aa2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a78:	695a      	ldr	r2, [r3, #20]
 8018a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a7c:	68db      	ldr	r3, [r3, #12]
 8018a7e:	429a      	cmp	r2, r3
 8018a80:	d10c      	bne.n	8018a9c <ip4_reass+0xdc>
 8018a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a84:	699a      	ldr	r2, [r3, #24]
 8018a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a88:	691b      	ldr	r3, [r3, #16]
 8018a8a:	429a      	cmp	r2, r3
 8018a8c:	d106      	bne.n	8018a9c <ip4_reass+0xdc>
 8018a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a90:	899a      	ldrh	r2, [r3, #12]
 8018a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018a94:	889b      	ldrh	r3, [r3, #4]
 8018a96:	b29b      	uxth	r3, r3
 8018a98:	429a      	cmp	r2, r3
 8018a9a:	d006      	beq.n	8018aaa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8018aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d1e6      	bne.n	8018a76 <ip4_reass+0xb6>
 8018aa8:	e000      	b.n	8018aac <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018aaa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d109      	bne.n	8018ac6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018ab2:	8c3b      	ldrh	r3, [r7, #32]
 8018ab4:	4619      	mov	r1, r3
 8018ab6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018ab8:	f7ff fdb0 	bl	801861c <ip_reass_enqueue_new_datagram>
 8018abc:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d11c      	bne.n	8018afe <ip4_reass+0x13e>
      goto nullreturn;
 8018ac4:	e105      	b.n	8018cd2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018ac8:	88db      	ldrh	r3, [r3, #6]
 8018aca:	b29b      	uxth	r3, r3
 8018acc:	4618      	mov	r0, r3
 8018ace:	f7f6 fa5f 	bl	800ef90 <lwip_htons>
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d110      	bne.n	8018afe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ade:	89db      	ldrh	r3, [r3, #14]
 8018ae0:	4618      	mov	r0, r3
 8018ae2:	f7f6 fa55 	bl	800ef90 <lwip_htons>
 8018ae6:	4603      	mov	r3, r0
 8018ae8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d006      	beq.n	8018afe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018af2:	3308      	adds	r3, #8
 8018af4:	2214      	movs	r2, #20
 8018af6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018af8:	4618      	mov	r0, r3
 8018afa:	f001 fcb0 	bl	801a45e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b00:	88db      	ldrh	r3, [r3, #6]
 8018b02:	b29b      	uxth	r3, r3
 8018b04:	f003 0320 	and.w	r3, r3, #32
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	bf0c      	ite	eq
 8018b0c:	2301      	moveq	r3, #1
 8018b0e:	2300      	movne	r3, #0
 8018b10:	b2db      	uxtb	r3, r3
 8018b12:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018b14:	69fb      	ldr	r3, [r7, #28]
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d00e      	beq.n	8018b38 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018b1a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018b1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018b1e:	4413      	add	r3, r2
 8018b20:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018b22:	8b7a      	ldrh	r2, [r7, #26]
 8018b24:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8018b26:	429a      	cmp	r2, r3
 8018b28:	f0c0 80a0 	bcc.w	8018c6c <ip4_reass+0x2ac>
 8018b2c:	8b7b      	ldrh	r3, [r7, #26]
 8018b2e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8018b32:	4293      	cmp	r3, r2
 8018b34:	f200 809a 	bhi.w	8018c6c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018b38:	69fa      	ldr	r2, [r7, #28]
 8018b3a:	6879      	ldr	r1, [r7, #4]
 8018b3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018b3e:	f7ff fdd5 	bl	80186ec <ip_reass_chain_frag_into_datagram_and_validate>
 8018b42:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018b44:	697b      	ldr	r3, [r7, #20]
 8018b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b4a:	f000 809b 	beq.w	8018c84 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018b4e:	4b48      	ldr	r3, [pc, #288]	@ (8018c70 <ip4_reass+0x2b0>)
 8018b50:	881a      	ldrh	r2, [r3, #0]
 8018b52:	8c3b      	ldrh	r3, [r7, #32]
 8018b54:	4413      	add	r3, r2
 8018b56:	b29a      	uxth	r2, r3
 8018b58:	4b45      	ldr	r3, [pc, #276]	@ (8018c70 <ip4_reass+0x2b0>)
 8018b5a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018b5c:	69fb      	ldr	r3, [r7, #28]
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d00d      	beq.n	8018b7e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018b62:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8018b64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018b66:	4413      	add	r3, r2
 8018b68:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b6c:	8a7a      	ldrh	r2, [r7, #18]
 8018b6e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b72:	7f9b      	ldrb	r3, [r3, #30]
 8018b74:	f043 0301 	orr.w	r3, r3, #1
 8018b78:	b2da      	uxtb	r2, r3
 8018b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b7c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018b7e:	697b      	ldr	r3, [r7, #20]
 8018b80:	2b01      	cmp	r3, #1
 8018b82:	d171      	bne.n	8018c68 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b86:	8b9b      	ldrh	r3, [r3, #28]
 8018b88:	3314      	adds	r3, #20
 8018b8a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b8e:	685b      	ldr	r3, [r3, #4]
 8018b90:	685b      	ldr	r3, [r3, #4]
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018b98:	685b      	ldr	r3, [r3, #4]
 8018b9a:	685b      	ldr	r3, [r3, #4]
 8018b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ba0:	3308      	adds	r3, #8
 8018ba2:	2214      	movs	r2, #20
 8018ba4:	4619      	mov	r1, r3
 8018ba6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018ba8:	f001 fc59 	bl	801a45e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018bac:	8a3b      	ldrh	r3, [r7, #16]
 8018bae:	4618      	mov	r0, r3
 8018bb0:	f7f6 f9ee 	bl	800ef90 <lwip_htons>
 8018bb4:	4603      	mov	r3, r0
 8018bb6:	461a      	mov	r2, r3
 8018bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bba:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bbe:	2200      	movs	r2, #0
 8018bc0:	719a      	strb	r2, [r3, #6]
 8018bc2:	2200      	movs	r2, #0
 8018bc4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018bc8:	2200      	movs	r2, #0
 8018bca:	729a      	strb	r2, [r3, #10]
 8018bcc:	2200      	movs	r2, #0
 8018bce:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018bd2:	685b      	ldr	r3, [r3, #4]
 8018bd4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018bd6:	e00d      	b.n	8018bf4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018bda:	685b      	ldr	r3, [r3, #4]
 8018bdc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018bde:	2114      	movs	r1, #20
 8018be0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8018be2:	f7f7 fd3d 	bl	8010660 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018be6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018be8:	6878      	ldr	r0, [r7, #4]
 8018bea:	f7f7 fe8d 	bl	8010908 <pbuf_cat>
      r = iprh->next_pbuf;
 8018bee:	68fb      	ldr	r3, [r7, #12]
 8018bf0:	681b      	ldr	r3, [r3, #0]
 8018bf2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8018bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	d1ee      	bne.n	8018bd8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8018c74 <ip4_reass+0x2b4>)
 8018bfc:	681b      	ldr	r3, [r3, #0]
 8018bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018c00:	429a      	cmp	r2, r3
 8018c02:	d102      	bne.n	8018c0a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018c04:	2300      	movs	r3, #0
 8018c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018c08:	e010      	b.n	8018c2c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8018c74 <ip4_reass+0x2b4>)
 8018c0c:	681b      	ldr	r3, [r3, #0]
 8018c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018c10:	e007      	b.n	8018c22 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018c18:	429a      	cmp	r2, r3
 8018c1a:	d006      	beq.n	8018c2a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d1f4      	bne.n	8018c12 <ip4_reass+0x252>
 8018c28:	e000      	b.n	8018c2c <ip4_reass+0x26c>
          break;
 8018c2a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018c2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018c2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018c30:	f7ff fd2e 	bl	8018690 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018c34:	6878      	ldr	r0, [r7, #4]
 8018c36:	f7f7 fe27 	bl	8010888 <pbuf_clen>
 8018c3a:	4603      	mov	r3, r0
 8018c3c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8018c70 <ip4_reass+0x2b0>)
 8018c40:	881b      	ldrh	r3, [r3, #0]
 8018c42:	8c3a      	ldrh	r2, [r7, #32]
 8018c44:	429a      	cmp	r2, r3
 8018c46:	d906      	bls.n	8018c56 <ip4_reass+0x296>
 8018c48:	4b0b      	ldr	r3, [pc, #44]	@ (8018c78 <ip4_reass+0x2b8>)
 8018c4a:	f240 229b 	movw	r2, #667	@ 0x29b
 8018c4e:	490b      	ldr	r1, [pc, #44]	@ (8018c7c <ip4_reass+0x2bc>)
 8018c50:	480b      	ldr	r0, [pc, #44]	@ (8018c80 <ip4_reass+0x2c0>)
 8018c52:	f001 f9d9 	bl	801a008 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018c56:	4b06      	ldr	r3, [pc, #24]	@ (8018c70 <ip4_reass+0x2b0>)
 8018c58:	881a      	ldrh	r2, [r3, #0]
 8018c5a:	8c3b      	ldrh	r3, [r7, #32]
 8018c5c:	1ad3      	subs	r3, r2, r3
 8018c5e:	b29a      	uxth	r2, r3
 8018c60:	4b03      	ldr	r3, [pc, #12]	@ (8018c70 <ip4_reass+0x2b0>)
 8018c62:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	e038      	b.n	8018cda <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018c68:	2300      	movs	r3, #0
 8018c6a:	e036      	b.n	8018cda <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018c6c:	bf00      	nop
 8018c6e:	e00a      	b.n	8018c86 <ip4_reass+0x2c6>
 8018c70:	20027614 	.word	0x20027614
 8018c74:	20027610 	.word	0x20027610
 8018c78:	0801da54 	.word	0x0801da54
 8018c7c:	0801dbc4 	.word	0x0801dbc4
 8018c80:	0801da9c 	.word	0x0801da9c
    goto nullreturn_ipr;
 8018c84:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	d106      	bne.n	8018c9a <ip4_reass+0x2da>
 8018c8c:	4b15      	ldr	r3, [pc, #84]	@ (8018ce4 <ip4_reass+0x324>)
 8018c8e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8018c92:	4915      	ldr	r1, [pc, #84]	@ (8018ce8 <ip4_reass+0x328>)
 8018c94:	4815      	ldr	r0, [pc, #84]	@ (8018cec <ip4_reass+0x32c>)
 8018c96:	f001 f9b7 	bl	801a008 <iprintf>
  if (ipr->p == NULL) {
 8018c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018c9c:	685b      	ldr	r3, [r3, #4]
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d116      	bne.n	8018cd0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018ca2:	4b13      	ldr	r3, [pc, #76]	@ (8018cf0 <ip4_reass+0x330>)
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018ca8:	429a      	cmp	r2, r3
 8018caa:	d006      	beq.n	8018cba <ip4_reass+0x2fa>
 8018cac:	4b0d      	ldr	r3, [pc, #52]	@ (8018ce4 <ip4_reass+0x324>)
 8018cae:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8018cb2:	4910      	ldr	r1, [pc, #64]	@ (8018cf4 <ip4_reass+0x334>)
 8018cb4:	480d      	ldr	r0, [pc, #52]	@ (8018cec <ip4_reass+0x32c>)
 8018cb6:	f001 f9a7 	bl	801a008 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018cba:	2100      	movs	r1, #0
 8018cbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018cbe:	f7ff fce7 	bl	8018690 <ip_reass_dequeue_datagram>
 8018cc2:	e006      	b.n	8018cd2 <ip4_reass+0x312>
    goto nullreturn;
 8018cc4:	bf00      	nop
 8018cc6:	e004      	b.n	8018cd2 <ip4_reass+0x312>
    goto nullreturn;
 8018cc8:	bf00      	nop
 8018cca:	e002      	b.n	8018cd2 <ip4_reass+0x312>
      goto nullreturn;
 8018ccc:	bf00      	nop
 8018cce:	e000      	b.n	8018cd2 <ip4_reass+0x312>
  }

nullreturn:
 8018cd0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018cd2:	6878      	ldr	r0, [r7, #4]
 8018cd4:	f7f7 fd4a 	bl	801076c <pbuf_free>
  return NULL;
 8018cd8:	2300      	movs	r3, #0
}
 8018cda:	4618      	mov	r0, r3
 8018cdc:	3738      	adds	r7, #56	@ 0x38
 8018cde:	46bd      	mov	sp, r7
 8018ce0:	bd80      	pop	{r7, pc}
 8018ce2:	bf00      	nop
 8018ce4:	0801da54 	.word	0x0801da54
 8018ce8:	0801dbe0 	.word	0x0801dbe0
 8018cec:	0801da9c 	.word	0x0801da9c
 8018cf0:	20027610 	.word	0x20027610
 8018cf4:	0801dbec 	.word	0x0801dbec

08018cf8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018cf8:	b580      	push	{r7, lr}
 8018cfa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018cfc:	2005      	movs	r0, #5
 8018cfe:	f7f6 fe1b 	bl	800f938 <memp_malloc>
 8018d02:	4603      	mov	r3, r0
}
 8018d04:	4618      	mov	r0, r3
 8018d06:	bd80      	pop	{r7, pc}

08018d08 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018d08:	b580      	push	{r7, lr}
 8018d0a:	b082      	sub	sp, #8
 8018d0c:	af00      	add	r7, sp, #0
 8018d0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d106      	bne.n	8018d24 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018d16:	4b07      	ldr	r3, [pc, #28]	@ (8018d34 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018d18:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8018d1c:	4906      	ldr	r1, [pc, #24]	@ (8018d38 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018d1e:	4807      	ldr	r0, [pc, #28]	@ (8018d3c <ip_frag_free_pbuf_custom_ref+0x34>)
 8018d20:	f001 f972 	bl	801a008 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018d24:	6879      	ldr	r1, [r7, #4]
 8018d26:	2005      	movs	r0, #5
 8018d28:	f7f6 fe7c 	bl	800fa24 <memp_free>
}
 8018d2c:	bf00      	nop
 8018d2e:	3708      	adds	r7, #8
 8018d30:	46bd      	mov	sp, r7
 8018d32:	bd80      	pop	{r7, pc}
 8018d34:	0801da54 	.word	0x0801da54
 8018d38:	0801dc0c 	.word	0x0801dc0c
 8018d3c:	0801da9c 	.word	0x0801da9c

08018d40 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018d40:	b580      	push	{r7, lr}
 8018d42:	b084      	sub	sp, #16
 8018d44:	af00      	add	r7, sp, #0
 8018d46:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d106      	bne.n	8018d60 <ipfrag_free_pbuf_custom+0x20>
 8018d52:	4b11      	ldr	r3, [pc, #68]	@ (8018d98 <ipfrag_free_pbuf_custom+0x58>)
 8018d54:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8018d58:	4910      	ldr	r1, [pc, #64]	@ (8018d9c <ipfrag_free_pbuf_custom+0x5c>)
 8018d5a:	4811      	ldr	r0, [pc, #68]	@ (8018da0 <ipfrag_free_pbuf_custom+0x60>)
 8018d5c:	f001 f954 	bl	801a008 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018d60:	68fa      	ldr	r2, [r7, #12]
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	429a      	cmp	r2, r3
 8018d66:	d006      	beq.n	8018d76 <ipfrag_free_pbuf_custom+0x36>
 8018d68:	4b0b      	ldr	r3, [pc, #44]	@ (8018d98 <ipfrag_free_pbuf_custom+0x58>)
 8018d6a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8018d6e:	490d      	ldr	r1, [pc, #52]	@ (8018da4 <ipfrag_free_pbuf_custom+0x64>)
 8018d70:	480b      	ldr	r0, [pc, #44]	@ (8018da0 <ipfrag_free_pbuf_custom+0x60>)
 8018d72:	f001 f949 	bl	801a008 <iprintf>
  if (pcr->original != NULL) {
 8018d76:	68fb      	ldr	r3, [r7, #12]
 8018d78:	695b      	ldr	r3, [r3, #20]
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d004      	beq.n	8018d88 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018d7e:	68fb      	ldr	r3, [r7, #12]
 8018d80:	695b      	ldr	r3, [r3, #20]
 8018d82:	4618      	mov	r0, r3
 8018d84:	f7f7 fcf2 	bl	801076c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018d88:	68f8      	ldr	r0, [r7, #12]
 8018d8a:	f7ff ffbd 	bl	8018d08 <ip_frag_free_pbuf_custom_ref>
}
 8018d8e:	bf00      	nop
 8018d90:	3710      	adds	r7, #16
 8018d92:	46bd      	mov	sp, r7
 8018d94:	bd80      	pop	{r7, pc}
 8018d96:	bf00      	nop
 8018d98:	0801da54 	.word	0x0801da54
 8018d9c:	0801dc18 	.word	0x0801dc18
 8018da0:	0801da9c 	.word	0x0801da9c
 8018da4:	0801dc24 	.word	0x0801dc24

08018da8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018da8:	b580      	push	{r7, lr}
 8018daa:	b094      	sub	sp, #80	@ 0x50
 8018dac:	af02      	add	r7, sp, #8
 8018dae:	60f8      	str	r0, [r7, #12]
 8018db0:	60b9      	str	r1, [r7, #8]
 8018db2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018db4:	2300      	movs	r3, #0
 8018db6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018dba:	68bb      	ldr	r3, [r7, #8]
 8018dbc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8018dbe:	3b14      	subs	r3, #20
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	da00      	bge.n	8018dc6 <ip4_frag+0x1e>
 8018dc4:	3307      	adds	r3, #7
 8018dc6:	10db      	asrs	r3, r3, #3
 8018dc8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018dca:	2314      	movs	r3, #20
 8018dcc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018dce:	68fb      	ldr	r3, [r7, #12]
 8018dd0:	685b      	ldr	r3, [r3, #4]
 8018dd2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8018dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018dd6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018dda:	781b      	ldrb	r3, [r3, #0]
 8018ddc:	f003 030f 	and.w	r3, r3, #15
 8018de0:	b2db      	uxtb	r3, r3
 8018de2:	009b      	lsls	r3, r3, #2
 8018de4:	b2db      	uxtb	r3, r3
 8018de6:	2b14      	cmp	r3, #20
 8018de8:	d002      	beq.n	8018df0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018dea:	f06f 0305 	mvn.w	r3, #5
 8018dee:	e110      	b.n	8019012 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018df0:	68fb      	ldr	r3, [r7, #12]
 8018df2:	895b      	ldrh	r3, [r3, #10]
 8018df4:	2b13      	cmp	r3, #19
 8018df6:	d809      	bhi.n	8018e0c <ip4_frag+0x64>
 8018df8:	4b88      	ldr	r3, [pc, #544]	@ (801901c <ip4_frag+0x274>)
 8018dfa:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8018dfe:	4988      	ldr	r1, [pc, #544]	@ (8019020 <ip4_frag+0x278>)
 8018e00:	4888      	ldr	r0, [pc, #544]	@ (8019024 <ip4_frag+0x27c>)
 8018e02:	f001 f901 	bl	801a008 <iprintf>
 8018e06:	f06f 0305 	mvn.w	r3, #5
 8018e0a:	e102      	b.n	8019012 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018e0e:	88db      	ldrh	r3, [r3, #6]
 8018e10:	b29b      	uxth	r3, r3
 8018e12:	4618      	mov	r0, r3
 8018e14:	f7f6 f8bc 	bl	800ef90 <lwip_htons>
 8018e18:	4603      	mov	r3, r0
 8018e1a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8018e1c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018e1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018e22:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018e26:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018e28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8018e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018e2e:	68fb      	ldr	r3, [r7, #12]
 8018e30:	891b      	ldrh	r3, [r3, #8]
 8018e32:	3b14      	subs	r3, #20
 8018e34:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8018e38:	e0e1      	b.n	8018ffe <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018e3a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018e3c:	00db      	lsls	r3, r3, #3
 8018e3e:	b29b      	uxth	r3, r3
 8018e40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018e44:	4293      	cmp	r3, r2
 8018e46:	bf28      	it	cs
 8018e48:	4613      	movcs	r3, r2
 8018e4a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018e4c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018e50:	2114      	movs	r1, #20
 8018e52:	200e      	movs	r0, #14
 8018e54:	f7f7 f9a6 	bl	80101a4 <pbuf_alloc>
 8018e58:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8018e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	f000 80d5 	beq.w	801900c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e64:	895b      	ldrh	r3, [r3, #10]
 8018e66:	2b13      	cmp	r3, #19
 8018e68:	d806      	bhi.n	8018e78 <ip4_frag+0xd0>
 8018e6a:	4b6c      	ldr	r3, [pc, #432]	@ (801901c <ip4_frag+0x274>)
 8018e6c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8018e70:	496d      	ldr	r1, [pc, #436]	@ (8019028 <ip4_frag+0x280>)
 8018e72:	486c      	ldr	r0, [pc, #432]	@ (8019024 <ip4_frag+0x27c>)
 8018e74:	f001 f8c8 	bl	801a008 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e7a:	685b      	ldr	r3, [r3, #4]
 8018e7c:	2214      	movs	r2, #20
 8018e7e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018e80:	4618      	mov	r0, r3
 8018e82:	f001 faec 	bl	801a45e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e88:	685b      	ldr	r3, [r3, #4]
 8018e8a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8018e8c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018e8e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8018e92:	e064      	b.n	8018f5e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018e94:	68fb      	ldr	r3, [r7, #12]
 8018e96:	895a      	ldrh	r2, [r3, #10]
 8018e98:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018e9a:	1ad3      	subs	r3, r2, r3
 8018e9c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018e9e:	68fb      	ldr	r3, [r7, #12]
 8018ea0:	895b      	ldrh	r3, [r3, #10]
 8018ea2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018ea4:	429a      	cmp	r2, r3
 8018ea6:	d906      	bls.n	8018eb6 <ip4_frag+0x10e>
 8018ea8:	4b5c      	ldr	r3, [pc, #368]	@ (801901c <ip4_frag+0x274>)
 8018eaa:	f240 322d 	movw	r2, #813	@ 0x32d
 8018eae:	495f      	ldr	r1, [pc, #380]	@ (801902c <ip4_frag+0x284>)
 8018eb0:	485c      	ldr	r0, [pc, #368]	@ (8019024 <ip4_frag+0x27c>)
 8018eb2:	f001 f8a9 	bl	801a008 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018eb6:	8bfa      	ldrh	r2, [r7, #30]
 8018eb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018ebc:	4293      	cmp	r3, r2
 8018ebe:	bf28      	it	cs
 8018ec0:	4613      	movcs	r3, r2
 8018ec2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018ec6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d105      	bne.n	8018eda <ip4_frag+0x132>
        poff = 0;
 8018ece:	2300      	movs	r3, #0
 8018ed0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8018ed2:	68fb      	ldr	r3, [r7, #12]
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	60fb      	str	r3, [r7, #12]
        continue;
 8018ed8:	e041      	b.n	8018f5e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018eda:	f7ff ff0d 	bl	8018cf8 <ip_frag_alloc_pbuf_custom_ref>
 8018ede:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018ee0:	69bb      	ldr	r3, [r7, #24]
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	d103      	bne.n	8018eee <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018ee6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018ee8:	f7f7 fc40 	bl	801076c <pbuf_free>
        goto memerr;
 8018eec:	e08f      	b.n	801900e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018eee:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018ef0:	68fb      	ldr	r3, [r7, #12]
 8018ef2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018ef4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018ef6:	4413      	add	r3, r2
 8018ef8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8018efc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8018f00:	9201      	str	r2, [sp, #4]
 8018f02:	9300      	str	r3, [sp, #0]
 8018f04:	4603      	mov	r3, r0
 8018f06:	2241      	movs	r2, #65	@ 0x41
 8018f08:	2000      	movs	r0, #0
 8018f0a:	f7f7 fa75 	bl	80103f8 <pbuf_alloced_custom>
 8018f0e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018f10:	697b      	ldr	r3, [r7, #20]
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d106      	bne.n	8018f24 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018f16:	69b8      	ldr	r0, [r7, #24]
 8018f18:	f7ff fef6 	bl	8018d08 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018f1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018f1e:	f7f7 fc25 	bl	801076c <pbuf_free>
        goto memerr;
 8018f22:	e074      	b.n	801900e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018f24:	68f8      	ldr	r0, [r7, #12]
 8018f26:	f7f7 fcc7 	bl	80108b8 <pbuf_ref>
      pcr->original = p;
 8018f2a:	69bb      	ldr	r3, [r7, #24]
 8018f2c:	68fa      	ldr	r2, [r7, #12]
 8018f2e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018f30:	69bb      	ldr	r3, [r7, #24]
 8018f32:	4a3f      	ldr	r2, [pc, #252]	@ (8019030 <ip4_frag+0x288>)
 8018f34:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018f36:	6979      	ldr	r1, [r7, #20]
 8018f38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018f3a:	f7f7 fce5 	bl	8010908 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018f3e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8018f42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018f46:	1ad3      	subs	r3, r2, r3
 8018f48:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8018f4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d004      	beq.n	8018f5e <ip4_frag+0x1b6>
        poff = 0;
 8018f54:	2300      	movs	r3, #0
 8018f56:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	681b      	ldr	r3, [r3, #0]
 8018f5c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018f5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d196      	bne.n	8018e94 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018f66:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018f68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018f6c:	4413      	add	r3, r2
 8018f6e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018f70:	68bb      	ldr	r3, [r7, #8]
 8018f72:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8018f74:	f1a3 0213 	sub.w	r2, r3, #19
 8018f78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018f7c:	429a      	cmp	r2, r3
 8018f7e:	bfcc      	ite	gt
 8018f80:	2301      	movgt	r3, #1
 8018f82:	2300      	movle	r3, #0
 8018f84:	b2db      	uxtb	r3, r3
 8018f86:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018f88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018f8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018f90:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8018f92:	6a3b      	ldr	r3, [r7, #32]
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d002      	beq.n	8018f9e <ip4_frag+0x1f6>
 8018f98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	d003      	beq.n	8018fa6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018f9e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018fa0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8018fa4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018fa6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018fa8:	4618      	mov	r0, r3
 8018faa:	f7f5 fff1 	bl	800ef90 <lwip_htons>
 8018fae:	4603      	mov	r3, r0
 8018fb0:	461a      	mov	r2, r3
 8018fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018fb4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018fb6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018fb8:	3314      	adds	r3, #20
 8018fba:	b29b      	uxth	r3, r3
 8018fbc:	4618      	mov	r0, r3
 8018fbe:	f7f5 ffe7 	bl	800ef90 <lwip_htons>
 8018fc2:	4603      	mov	r3, r0
 8018fc4:	461a      	mov	r2, r3
 8018fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018fc8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018fcc:	2200      	movs	r2, #0
 8018fce:	729a      	strb	r2, [r3, #10]
 8018fd0:	2200      	movs	r2, #0
 8018fd2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018fd4:	68bb      	ldr	r3, [r7, #8]
 8018fd6:	695b      	ldr	r3, [r3, #20]
 8018fd8:	687a      	ldr	r2, [r7, #4]
 8018fda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018fdc:	68b8      	ldr	r0, [r7, #8]
 8018fde:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018fe0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018fe2:	f7f7 fbc3 	bl	801076c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018fe6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018fea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018fec:	1ad3      	subs	r3, r2, r3
 8018fee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8018ff2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8018ff6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8018ff8:	4413      	add	r3, r2
 8018ffa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8018ffe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019002:	2b00      	cmp	r3, #0
 8019004:	f47f af19 	bne.w	8018e3a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019008:	2300      	movs	r3, #0
 801900a:	e002      	b.n	8019012 <ip4_frag+0x26a>
      goto memerr;
 801900c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801900e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019012:	4618      	mov	r0, r3
 8019014:	3748      	adds	r7, #72	@ 0x48
 8019016:	46bd      	mov	sp, r7
 8019018:	bd80      	pop	{r7, pc}
 801901a:	bf00      	nop
 801901c:	0801da54 	.word	0x0801da54
 8019020:	0801dc30 	.word	0x0801dc30
 8019024:	0801da9c 	.word	0x0801da9c
 8019028:	0801dc4c 	.word	0x0801dc4c
 801902c:	0801dc6c 	.word	0x0801dc6c
 8019030:	08018d41 	.word	0x08018d41

08019034 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019034:	b580      	push	{r7, lr}
 8019036:	b086      	sub	sp, #24
 8019038:	af00      	add	r7, sp, #0
 801903a:	6078      	str	r0, [r7, #4]
 801903c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801903e:	230e      	movs	r3, #14
 8019040:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	895b      	ldrh	r3, [r3, #10]
 8019046:	2b0e      	cmp	r3, #14
 8019048:	d96e      	bls.n	8019128 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	7bdb      	ldrb	r3, [r3, #15]
 801904e:	2b00      	cmp	r3, #0
 8019050:	d106      	bne.n	8019060 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8019052:	683b      	ldr	r3, [r7, #0]
 8019054:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019058:	3301      	adds	r3, #1
 801905a:	b2da      	uxtb	r2, r3
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	685b      	ldr	r3, [r3, #4]
 8019064:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019066:	693b      	ldr	r3, [r7, #16]
 8019068:	7b1a      	ldrb	r2, [r3, #12]
 801906a:	7b5b      	ldrb	r3, [r3, #13]
 801906c:	021b      	lsls	r3, r3, #8
 801906e:	4313      	orrs	r3, r2
 8019070:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019072:	693b      	ldr	r3, [r7, #16]
 8019074:	781b      	ldrb	r3, [r3, #0]
 8019076:	f003 0301 	and.w	r3, r3, #1
 801907a:	2b00      	cmp	r3, #0
 801907c:	d023      	beq.n	80190c6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801907e:	693b      	ldr	r3, [r7, #16]
 8019080:	781b      	ldrb	r3, [r3, #0]
 8019082:	2b01      	cmp	r3, #1
 8019084:	d10f      	bne.n	80190a6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019086:	693b      	ldr	r3, [r7, #16]
 8019088:	785b      	ldrb	r3, [r3, #1]
 801908a:	2b00      	cmp	r3, #0
 801908c:	d11b      	bne.n	80190c6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801908e:	693b      	ldr	r3, [r7, #16]
 8019090:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019092:	2b5e      	cmp	r3, #94	@ 0x5e
 8019094:	d117      	bne.n	80190c6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	7b5b      	ldrb	r3, [r3, #13]
 801909a:	f043 0310 	orr.w	r3, r3, #16
 801909e:	b2da      	uxtb	r2, r3
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	735a      	strb	r2, [r3, #13]
 80190a4:	e00f      	b.n	80190c6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80190a6:	693b      	ldr	r3, [r7, #16]
 80190a8:	2206      	movs	r2, #6
 80190aa:	4928      	ldr	r1, [pc, #160]	@ (801914c <ethernet_input+0x118>)
 80190ac:	4618      	mov	r0, r3
 80190ae:	f001 f8f3 	bl	801a298 <memcmp>
 80190b2:	4603      	mov	r3, r0
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d106      	bne.n	80190c6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	7b5b      	ldrb	r3, [r3, #13]
 80190bc:	f043 0308 	orr.w	r3, r3, #8
 80190c0:	b2da      	uxtb	r2, r3
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80190c6:	89fb      	ldrh	r3, [r7, #14]
 80190c8:	2b08      	cmp	r3, #8
 80190ca:	d003      	beq.n	80190d4 <ethernet_input+0xa0>
 80190cc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80190d0:	d014      	beq.n	80190fc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80190d2:	e032      	b.n	801913a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80190d4:	683b      	ldr	r3, [r7, #0]
 80190d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80190da:	f003 0308 	and.w	r3, r3, #8
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d024      	beq.n	801912c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80190e2:	8afb      	ldrh	r3, [r7, #22]
 80190e4:	4619      	mov	r1, r3
 80190e6:	6878      	ldr	r0, [r7, #4]
 80190e8:	f7f7 faba 	bl	8010660 <pbuf_remove_header>
 80190ec:	4603      	mov	r3, r0
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	d11e      	bne.n	8019130 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80190f2:	6839      	ldr	r1, [r7, #0]
 80190f4:	6878      	ldr	r0, [r7, #4]
 80190f6:	f7fe fe91 	bl	8017e1c <ip4_input>
      break;
 80190fa:	e013      	b.n	8019124 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80190fc:	683b      	ldr	r3, [r7, #0]
 80190fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8019102:	f003 0308 	and.w	r3, r3, #8
 8019106:	2b00      	cmp	r3, #0
 8019108:	d014      	beq.n	8019134 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801910a:	8afb      	ldrh	r3, [r7, #22]
 801910c:	4619      	mov	r1, r3
 801910e:	6878      	ldr	r0, [r7, #4]
 8019110:	f7f7 faa6 	bl	8010660 <pbuf_remove_header>
 8019114:	4603      	mov	r3, r0
 8019116:	2b00      	cmp	r3, #0
 8019118:	d10e      	bne.n	8019138 <ethernet_input+0x104>
        etharp_input(p, netif);
 801911a:	6839      	ldr	r1, [r7, #0]
 801911c:	6878      	ldr	r0, [r7, #4]
 801911e:	f7fe f831 	bl	8017184 <etharp_input>
      break;
 8019122:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019124:	2300      	movs	r3, #0
 8019126:	e00c      	b.n	8019142 <ethernet_input+0x10e>
    goto free_and_return;
 8019128:	bf00      	nop
 801912a:	e006      	b.n	801913a <ethernet_input+0x106>
        goto free_and_return;
 801912c:	bf00      	nop
 801912e:	e004      	b.n	801913a <ethernet_input+0x106>
        goto free_and_return;
 8019130:	bf00      	nop
 8019132:	e002      	b.n	801913a <ethernet_input+0x106>
        goto free_and_return;
 8019134:	bf00      	nop
 8019136:	e000      	b.n	801913a <ethernet_input+0x106>
        goto free_and_return;
 8019138:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801913a:	6878      	ldr	r0, [r7, #4]
 801913c:	f7f7 fb16 	bl	801076c <pbuf_free>
  return ERR_OK;
 8019140:	2300      	movs	r3, #0
}
 8019142:	4618      	mov	r0, r3
 8019144:	3718      	adds	r7, #24
 8019146:	46bd      	mov	sp, r7
 8019148:	bd80      	pop	{r7, pc}
 801914a:	bf00      	nop
 801914c:	0801e2bc 	.word	0x0801e2bc

08019150 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019150:	b580      	push	{r7, lr}
 8019152:	b086      	sub	sp, #24
 8019154:	af00      	add	r7, sp, #0
 8019156:	60f8      	str	r0, [r7, #12]
 8019158:	60b9      	str	r1, [r7, #8]
 801915a:	607a      	str	r2, [r7, #4]
 801915c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801915e:	8c3b      	ldrh	r3, [r7, #32]
 8019160:	4618      	mov	r0, r3
 8019162:	f7f5 ff15 	bl	800ef90 <lwip_htons>
 8019166:	4603      	mov	r3, r0
 8019168:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801916a:	210e      	movs	r1, #14
 801916c:	68b8      	ldr	r0, [r7, #8]
 801916e:	f7f7 fa67 	bl	8010640 <pbuf_add_header>
 8019172:	4603      	mov	r3, r0
 8019174:	2b00      	cmp	r3, #0
 8019176:	d125      	bne.n	80191c4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8019178:	68bb      	ldr	r3, [r7, #8]
 801917a:	685b      	ldr	r3, [r3, #4]
 801917c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801917e:	693b      	ldr	r3, [r7, #16]
 8019180:	8afa      	ldrh	r2, [r7, #22]
 8019182:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8019184:	693b      	ldr	r3, [r7, #16]
 8019186:	2206      	movs	r2, #6
 8019188:	6839      	ldr	r1, [r7, #0]
 801918a:	4618      	mov	r0, r3
 801918c:	f001 f967 	bl	801a45e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019190:	693b      	ldr	r3, [r7, #16]
 8019192:	3306      	adds	r3, #6
 8019194:	2206      	movs	r2, #6
 8019196:	6879      	ldr	r1, [r7, #4]
 8019198:	4618      	mov	r0, r3
 801919a:	f001 f960 	bl	801a45e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80191a4:	2b06      	cmp	r3, #6
 80191a6:	d006      	beq.n	80191b6 <ethernet_output+0x66>
 80191a8:	4b0a      	ldr	r3, [pc, #40]	@ (80191d4 <ethernet_output+0x84>)
 80191aa:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80191ae:	490a      	ldr	r1, [pc, #40]	@ (80191d8 <ethernet_output+0x88>)
 80191b0:	480a      	ldr	r0, [pc, #40]	@ (80191dc <ethernet_output+0x8c>)
 80191b2:	f000 ff29 	bl	801a008 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80191b6:	68fb      	ldr	r3, [r7, #12]
 80191b8:	699b      	ldr	r3, [r3, #24]
 80191ba:	68b9      	ldr	r1, [r7, #8]
 80191bc:	68f8      	ldr	r0, [r7, #12]
 80191be:	4798      	blx	r3
 80191c0:	4603      	mov	r3, r0
 80191c2:	e002      	b.n	80191ca <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80191c4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80191c6:	f06f 0301 	mvn.w	r3, #1
}
 80191ca:	4618      	mov	r0, r3
 80191cc:	3718      	adds	r7, #24
 80191ce:	46bd      	mov	sp, r7
 80191d0:	bd80      	pop	{r7, pc}
 80191d2:	bf00      	nop
 80191d4:	0801dc7c 	.word	0x0801dc7c
 80191d8:	0801dcb4 	.word	0x0801dcb4
 80191dc:	0801dce8 	.word	0x0801dce8

080191e0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80191e0:	b580      	push	{r7, lr}
 80191e2:	b082      	sub	sp, #8
 80191e4:	af00      	add	r7, sp, #0
 80191e6:	6078      	str	r0, [r7, #4]
 80191e8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80191ea:	683b      	ldr	r3, [r7, #0]
 80191ec:	2200      	movs	r2, #0
 80191ee:	2104      	movs	r1, #4
 80191f0:	4618      	mov	r0, r3
 80191f2:	f7f2 f85b 	bl	800b2ac <osMessageQueueNew>
 80191f6:	4602      	mov	r2, r0
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	2b00      	cmp	r3, #0
 8019202:	d102      	bne.n	801920a <sys_mbox_new+0x2a>
    return ERR_MEM;
 8019204:	f04f 33ff 	mov.w	r3, #4294967295
 8019208:	e000      	b.n	801920c <sys_mbox_new+0x2c>

  return ERR_OK;
 801920a:	2300      	movs	r3, #0
}
 801920c:	4618      	mov	r0, r3
 801920e:	3708      	adds	r7, #8
 8019210:	46bd      	mov	sp, r7
 8019212:	bd80      	pop	{r7, pc}

08019214 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019214:	b580      	push	{r7, lr}
 8019216:	b084      	sub	sp, #16
 8019218:	af00      	add	r7, sp, #0
 801921a:	6078      	str	r0, [r7, #4]
 801921c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	6818      	ldr	r0, [r3, #0]
 8019222:	4639      	mov	r1, r7
 8019224:	2300      	movs	r3, #0
 8019226:	2200      	movs	r2, #0
 8019228:	f7f2 f8c6 	bl	800b3b8 <osMessageQueuePut>
 801922c:	4603      	mov	r3, r0
 801922e:	2b00      	cmp	r3, #0
 8019230:	d102      	bne.n	8019238 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8019232:	2300      	movs	r3, #0
 8019234:	73fb      	strb	r3, [r7, #15]
 8019236:	e001      	b.n	801923c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8019238:	23ff      	movs	r3, #255	@ 0xff
 801923a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801923c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019240:	4618      	mov	r0, r3
 8019242:	3710      	adds	r7, #16
 8019244:	46bd      	mov	sp, r7
 8019246:	bd80      	pop	{r7, pc}

08019248 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019248:	b580      	push	{r7, lr}
 801924a:	b086      	sub	sp, #24
 801924c:	af00      	add	r7, sp, #0
 801924e:	60f8      	str	r0, [r7, #12]
 8019250:	60b9      	str	r1, [r7, #8]
 8019252:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8019254:	f7f1 fc8c 	bl	800ab70 <osKernelGetTickCount>
 8019258:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	2b00      	cmp	r3, #0
 801925e:	d013      	beq.n	8019288 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8019260:	68fb      	ldr	r3, [r7, #12]
 8019262:	6818      	ldr	r0, [r3, #0]
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	2200      	movs	r2, #0
 8019268:	68b9      	ldr	r1, [r7, #8]
 801926a:	f7f2 f919 	bl	800b4a0 <osMessageQueueGet>
 801926e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8019270:	693b      	ldr	r3, [r7, #16]
 8019272:	2b00      	cmp	r3, #0
 8019274:	d105      	bne.n	8019282 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8019276:	f7f1 fc7b 	bl	800ab70 <osKernelGetTickCount>
 801927a:	4602      	mov	r2, r0
 801927c:	697b      	ldr	r3, [r7, #20]
 801927e:	1ad3      	subs	r3, r2, r3
 8019280:	e00f      	b.n	80192a2 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019282:	f04f 33ff 	mov.w	r3, #4294967295
 8019286:	e00c      	b.n	80192a2 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8019288:	68fb      	ldr	r3, [r7, #12]
 801928a:	6818      	ldr	r0, [r3, #0]
 801928c:	f04f 33ff 	mov.w	r3, #4294967295
 8019290:	2200      	movs	r2, #0
 8019292:	68b9      	ldr	r1, [r7, #8]
 8019294:	f7f2 f904 	bl	800b4a0 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8019298:	f7f1 fc6a 	bl	800ab70 <osKernelGetTickCount>
 801929c:	4602      	mov	r2, r0
 801929e:	697b      	ldr	r3, [r7, #20]
 80192a0:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80192a2:	4618      	mov	r0, r3
 80192a4:	3718      	adds	r7, #24
 80192a6:	46bd      	mov	sp, r7
 80192a8:	bd80      	pop	{r7, pc}

080192aa <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80192aa:	b480      	push	{r7}
 80192ac:	b083      	sub	sp, #12
 80192ae:	af00      	add	r7, sp, #0
 80192b0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	681b      	ldr	r3, [r3, #0]
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	d101      	bne.n	80192be <sys_mbox_valid+0x14>
    return 0;
 80192ba:	2300      	movs	r3, #0
 80192bc:	e000      	b.n	80192c0 <sys_mbox_valid+0x16>
  else
    return 1;
 80192be:	2301      	movs	r3, #1
}
 80192c0:	4618      	mov	r0, r3
 80192c2:	370c      	adds	r7, #12
 80192c4:	46bd      	mov	sp, r7
 80192c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ca:	4770      	bx	lr

080192cc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80192cc:	b580      	push	{r7, lr}
 80192ce:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80192d0:	2000      	movs	r0, #0
 80192d2:	f7f1 fd49 	bl	800ad68 <osMutexNew>
 80192d6:	4603      	mov	r3, r0
 80192d8:	4a01      	ldr	r2, [pc, #4]	@ (80192e0 <sys_init+0x14>)
 80192da:	6013      	str	r3, [r2, #0]
#endif
}
 80192dc:	bf00      	nop
 80192de:	bd80      	pop	{r7, pc}
 80192e0:	20027618 	.word	0x20027618

080192e4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80192e4:	b580      	push	{r7, lr}
 80192e6:	b082      	sub	sp, #8
 80192e8:	af00      	add	r7, sp, #0
 80192ea:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80192ec:	2000      	movs	r0, #0
 80192ee:	f7f1 fd3b 	bl	800ad68 <osMutexNew>
 80192f2:	4602      	mov	r2, r0
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d102      	bne.n	8019306 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019300:	f04f 33ff 	mov.w	r3, #4294967295
 8019304:	e000      	b.n	8019308 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019306:	2300      	movs	r3, #0
}
 8019308:	4618      	mov	r0, r3
 801930a:	3708      	adds	r7, #8
 801930c:	46bd      	mov	sp, r7
 801930e:	bd80      	pop	{r7, pc}

08019310 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019310:	b580      	push	{r7, lr}
 8019312:	b082      	sub	sp, #8
 8019314:	af00      	add	r7, sp, #0
 8019316:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	f04f 31ff 	mov.w	r1, #4294967295
 8019320:	4618      	mov	r0, r3
 8019322:	f7f1 fdbb 	bl	800ae9c <osMutexAcquire>
#endif
}
 8019326:	bf00      	nop
 8019328:	3708      	adds	r7, #8
 801932a:	46bd      	mov	sp, r7
 801932c:	bd80      	pop	{r7, pc}

0801932e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801932e:	b580      	push	{r7, lr}
 8019330:	b082      	sub	sp, #8
 8019332:	af00      	add	r7, sp, #0
 8019334:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	4618      	mov	r0, r3
 801933c:	f7f1 fe0c 	bl	800af58 <osMutexRelease>
}
 8019340:	bf00      	nop
 8019342:	3708      	adds	r7, #8
 8019344:	46bd      	mov	sp, r7
 8019346:	bd80      	pop	{r7, pc}

08019348 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019348:	b580      	push	{r7, lr}
 801934a:	b08e      	sub	sp, #56	@ 0x38
 801934c:	af00      	add	r7, sp, #0
 801934e:	60f8      	str	r0, [r7, #12]
 8019350:	60b9      	str	r1, [r7, #8]
 8019352:	607a      	str	r2, [r7, #4]
 8019354:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8019356:	f107 0314 	add.w	r3, r7, #20
 801935a:	2224      	movs	r2, #36	@ 0x24
 801935c:	2100      	movs	r1, #0
 801935e:	4618      	mov	r0, r3
 8019360:	f000 ffaa 	bl	801a2b8 <memset>
 8019364:	68fb      	ldr	r3, [r7, #12]
 8019366:	617b      	str	r3, [r7, #20]
 8019368:	683b      	ldr	r3, [r7, #0]
 801936a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801936c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801936e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8019370:	f107 0314 	add.w	r3, r7, #20
 8019374:	461a      	mov	r2, r3
 8019376:	6879      	ldr	r1, [r7, #4]
 8019378:	68b8      	ldr	r0, [r7, #8]
 801937a:	f7f1 fc21 	bl	800abc0 <osThreadNew>
 801937e:	4603      	mov	r3, r0
#endif
}
 8019380:	4618      	mov	r0, r3
 8019382:	3738      	adds	r7, #56	@ 0x38
 8019384:	46bd      	mov	sp, r7
 8019386:	bd80      	pop	{r7, pc}

08019388 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019388:	b580      	push	{r7, lr}
 801938a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801938c:	4b04      	ldr	r3, [pc, #16]	@ (80193a0 <sys_arch_protect+0x18>)
 801938e:	681b      	ldr	r3, [r3, #0]
 8019390:	f04f 31ff 	mov.w	r1, #4294967295
 8019394:	4618      	mov	r0, r3
 8019396:	f7f1 fd81 	bl	800ae9c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801939a:	2301      	movs	r3, #1
}
 801939c:	4618      	mov	r0, r3
 801939e:	bd80      	pop	{r7, pc}
 80193a0:	20027618 	.word	0x20027618

080193a4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80193a4:	b580      	push	{r7, lr}
 80193a6:	b082      	sub	sp, #8
 80193a8:	af00      	add	r7, sp, #0
 80193aa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80193ac:	4b04      	ldr	r3, [pc, #16]	@ (80193c0 <sys_arch_unprotect+0x1c>)
 80193ae:	681b      	ldr	r3, [r3, #0]
 80193b0:	4618      	mov	r0, r3
 80193b2:	f7f1 fdd1 	bl	800af58 <osMutexRelease>
}
 80193b6:	bf00      	nop
 80193b8:	3708      	adds	r7, #8
 80193ba:	46bd      	mov	sp, r7
 80193bc:	bd80      	pop	{r7, pc}
 80193be:	bf00      	nop
 80193c0:	20027618 	.word	0x20027618

080193c4 <i2c_testing>:
#define I2C_SENDER 		(&hi2c4) // Master
#define I2C_RECEIVER 	(&hi2c1) // Slave
#define I2C_SLAVE_ADDR  (120 << 1) // left-shifted 7-bit address


result_pro_t i2c_testing(test_command_t* command){
 80193c4:	b580      	push	{r7, lr}
 80193c6:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 80193ca:	af00      	add	r7, sp, #0
 80193cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80193d0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80193d4:	6018      	str	r0, [r3, #0]
 80193d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80193da:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80193de:	6019      	str	r1, [r3, #0]

	uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 80193e0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80193e4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80193e8:	4618      	mov	r0, r3
 80193ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80193ee:	461a      	mov	r2, r3
 80193f0:	2100      	movs	r1, #0
 80193f2:	f000 ff61 	bl	801a2b8 <memset>
	uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 80193f6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80193fa:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80193fe:	4618      	mov	r0, r3
 8019400:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019404:	461a      	mov	r2, r3
 8019406:	2100      	movs	r1, #0
 8019408:	f000 ff56 	bl	801a2b8 <memset>

	result_pro_t response;
	HAL_StatusTypeDef rx_status, tx_status;

	if (command == NULL) {
 801940c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019410:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	2b00      	cmp	r3, #0
 8019418:	d118      	bne.n	801944c <i2c_testing+0x88>
        printf("I2C_TEST: Received NULL command pointer. Skipping.\n");
 801941a:	48cc      	ldr	r0, [pc, #816]	@ (801974c <i2c_testing+0x388>)
 801941c:	f000 fe5c 	bl	801a0d8 <puts>
        response.test_result = TEST_ERR;
 8019420:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019424:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8019428:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801942c:	809a      	strh	r2, [r3, #4]
        return response;
 801942e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019432:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019436:	6819      	ldr	r1, [r3, #0]
 8019438:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801943c:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8019440:	460b      	mov	r3, r1
 8019442:	6810      	ldr	r0, [r2, #0]
 8019444:	6018      	str	r0, [r3, #0]
 8019446:	8892      	ldrh	r2, [r2, #4]
 8019448:	809a      	strh	r2, [r3, #4]
 801944a:	e1cc      	b.n	80197e6 <i2c_testing+0x422>
	}

	response.test_id = command->test_id;
 801944c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019450:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019454:	681b      	ldr	r3, [r3, #0]
 8019456:	681a      	ldr	r2, [r3, #0]
 8019458:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801945c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8019460:	601a      	str	r2, [r3, #0]
    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 8019462:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019466:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	1dd9      	adds	r1, r3, #7
 801946e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019472:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019476:	681b      	ldr	r3, [r3, #0]
 8019478:	799b      	ldrb	r3, [r3, #6]
 801947a:	461a      	mov	r2, r3
 801947c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8019480:	4618      	mov	r0, r3
 8019482:	f000 ffec 	bl	801a45e <memcpy>

	for(uint8_t i=0 ; i< command->iterations ; i++){
 8019486:	2300      	movs	r3, #0
 8019488:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 801948c:	e185      	b.n	801979a <i2c_testing+0x3d6>
	    printf("I2C_TEST: Iteration %u/%u -\n", i + 1, command->iterations);
 801948e:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8019492:	1c59      	adds	r1, r3, #1
 8019494:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019498:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801949c:	681b      	ldr	r3, [r3, #0]
 801949e:	795b      	ldrb	r3, [r3, #5]
 80194a0:	461a      	mov	r2, r3
 80194a2:	48ab      	ldr	r0, [pc, #684]	@ (8019750 <i2c_testing+0x38c>)
 80194a4:	f000 fdb0 	bl	801a008 <iprintf>
	    memset(rx_buffer, 0, command->bit_pattern_length);
 80194a8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80194ac:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	799b      	ldrb	r3, [r3, #6]
 80194b4:	461a      	mov	r2, r3
 80194b6:	f107 0310 	add.w	r3, r7, #16
 80194ba:	2100      	movs	r1, #0
 80194bc:	4618      	mov	r0, r3
 80194be:	f000 fefb 	bl	801a2b8 <memset>

	    // --- 1. START RECEIVE DMA FIRST (SLAVE) ---
	    rx_status = HAL_I2C_Slave_Receive_DMA(I2C_RECEIVER, rx_buffer, command->bit_pattern_length);
 80194c2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80194c6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	799b      	ldrb	r3, [r3, #6]
 80194ce:	461a      	mov	r2, r3
 80194d0:	f107 0310 	add.w	r3, r7, #16
 80194d4:	4619      	mov	r1, r3
 80194d6:	489f      	ldr	r0, [pc, #636]	@ (8019754 <i2c_testing+0x390>)
 80194d8:	f7eb fa36 	bl	8004948 <HAL_I2C_Slave_Receive_DMA>
 80194dc:	4603      	mov	r3, r0
 80194de:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
	    if (rx_status != HAL_OK) {
 80194e2:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d021      	beq.n	801952e <i2c_testing+0x16a>
	        printf("Failed to start slave receive DMA: %d\n", rx_status);
 80194ea:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 80194ee:	4619      	mov	r1, r3
 80194f0:	4899      	ldr	r0, [pc, #612]	@ (8019758 <i2c_testing+0x394>)
 80194f2:	f000 fd89 	bl	801a008 <iprintf>
	        response.test_result = TEST_FAIL;
 80194f6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80194fa:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80194fe:	22ff      	movs	r2, #255	@ 0xff
 8019500:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 8019502:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019506:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801950a:	6818      	ldr	r0, [r3, #0]
 801950c:	f7f5 fa82 	bl	800ea14 <vPortFree>
	        return response;
 8019510:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019514:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019518:	6819      	ldr	r1, [r3, #0]
 801951a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801951e:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8019522:	460b      	mov	r3, r1
 8019524:	6810      	ldr	r0, [r2, #0]
 8019526:	6018      	str	r0, [r3, #0]
 8019528:	8892      	ldrh	r2, [r2, #4]
 801952a:	809a      	strh	r2, [r3, #4]
 801952c:	e15b      	b.n	80197e6 <i2c_testing+0x422>
	    }

	    // --- 2. TRANSMIT a block of data via DMA (MASTER) ---
	    tx_status = HAL_I2C_Master_Transmit_DMA(I2C_SENDER, I2C_SLAVE_ADDR, tx_buffer, command->bit_pattern_length);
 801952e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019532:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019536:	681b      	ldr	r3, [r3, #0]
 8019538:	799b      	ldrb	r3, [r3, #6]
 801953a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 801953e:	21f0      	movs	r1, #240	@ 0xf0
 8019540:	4886      	ldr	r0, [pc, #536]	@ (801975c <i2c_testing+0x398>)
 8019542:	f7eb f8ed 	bl	8004720 <HAL_I2C_Master_Transmit_DMA>
 8019546:	4603      	mov	r3, r0
 8019548:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
	    if (tx_status != HAL_OK) {
 801954c:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 8019550:	2b00      	cmp	r3, #0
 8019552:	d021      	beq.n	8019598 <i2c_testing+0x1d4>
	        printf("Failed to send DMA on I2C sender: %d\n", tx_status);
 8019554:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 8019558:	4619      	mov	r1, r3
 801955a:	4881      	ldr	r0, [pc, #516]	@ (8019760 <i2c_testing+0x39c>)
 801955c:	f000 fd54 	bl	801a008 <iprintf>
	        response.test_result = TEST_FAIL;
 8019560:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019564:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8019568:	22ff      	movs	r2, #255	@ 0xff
 801956a:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 801956c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019570:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019574:	6818      	ldr	r0, [r3, #0]
 8019576:	f7f5 fa4d 	bl	800ea14 <vPortFree>
	        //HAL_I2C_Master_Abort_DMA(I2C_SENDER, I2C_SLAVE_ADDR); // Abort Master transfer on error
	        //HAL_I2C_Slave_Abort_DMA(I2C_RECEIVER); // Abort Slave transfer on error
	        return response;
 801957a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801957e:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019582:	6819      	ldr	r1, [r3, #0]
 8019584:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019588:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 801958c:	460b      	mov	r3, r1
 801958e:	6810      	ldr	r0, [r2, #0]
 8019590:	6018      	str	r0, [r3, #0]
 8019592:	8892      	ldrh	r2, [r2, #4]
 8019594:	809a      	strh	r2, [r3, #4]
 8019596:	e126      	b.n	80197e6 <i2c_testing+0x422>
	    }

	    // --- 3. WAIT FOR BOTH TX AND RX DMA COMPLETION ---
	    if (xSemaphoreTake(I2cTxHandle, TIMEOUT) != pdPASS) {
 8019598:	4b72      	ldr	r3, [pc, #456]	@ (8019764 <i2c_testing+0x3a0>)
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80195a0:	4618      	mov	r0, r3
 80195a2:	f7f2 fe91 	bl	800c2c8 <xQueueSemaphoreTake>
 80195a6:	4603      	mov	r3, r0
 80195a8:	2b01      	cmp	r3, #1
 80195aa:	d01e      	beq.n	80195ea <i2c_testing+0x226>
	         printf("Master TX timeout\n");
 80195ac:	486e      	ldr	r0, [pc, #440]	@ (8019768 <i2c_testing+0x3a4>)
 80195ae:	f000 fd93 	bl	801a0d8 <puts>
	         response.test_result = TEST_FAIL;
 80195b2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80195b6:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80195ba:	22ff      	movs	r2, #255	@ 0xff
 80195bc:	809a      	strh	r2, [r3, #4]
	         vPortFree(command);
 80195be:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80195c2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80195c6:	6818      	ldr	r0, [r3, #0]
 80195c8:	f7f5 fa24 	bl	800ea14 <vPortFree>
	         //HAL_I2C_Master_Abort_DMA(I2C_SENDER,I2C_SLAVE_ADDR); // Abort Master transfer on timeout
	         //HAL_I2C_Slave_Abort_DMA(I2C_RECEIVER); // Abort Slave transfer on timeout
	         return response;
 80195cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80195d0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80195d4:	6819      	ldr	r1, [r3, #0]
 80195d6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80195da:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 80195de:	460b      	mov	r3, r1
 80195e0:	6810      	ldr	r0, [r2, #0]
 80195e2:	6018      	str	r0, [r3, #0]
 80195e4:	8892      	ldrh	r2, [r2, #4]
 80195e6:	809a      	strh	r2, [r3, #4]
 80195e8:	e0fd      	b.n	80197e6 <i2c_testing+0x422>
	    }

	    if (xSemaphoreTake(I2cRxHandle, TIMEOUT) != pdPASS) {
 80195ea:	4b60      	ldr	r3, [pc, #384]	@ (801976c <i2c_testing+0x3a8>)
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80195f2:	4618      	mov	r0, r3
 80195f4:	f7f2 fe68 	bl	800c2c8 <xQueueSemaphoreTake>
 80195f8:	4603      	mov	r3, r0
 80195fa:	2b01      	cmp	r3, #1
 80195fc:	d01e      	beq.n	801963c <i2c_testing+0x278>
	         printf("Slave RX timeout\n");
 80195fe:	485c      	ldr	r0, [pc, #368]	@ (8019770 <i2c_testing+0x3ac>)
 8019600:	f000 fd6a 	bl	801a0d8 <puts>
	         response.test_result = TEST_FAIL;
 8019604:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019608:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801960c:	22ff      	movs	r2, #255	@ 0xff
 801960e:	809a      	strh	r2, [r3, #4]
	         vPortFree(command);
 8019610:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019614:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019618:	6818      	ldr	r0, [r3, #0]
 801961a:	f7f5 f9fb 	bl	800ea14 <vPortFree>
	         //HAL_I2C_Slave_Abort_DMA(I2C_RECEIVER); // CRITICAL: Stop the stuck slave receive
	         return response;
 801961e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019622:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019626:	6819      	ldr	r1, [r3, #0]
 8019628:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801962c:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8019630:	460b      	mov	r3, r1
 8019632:	6810      	ldr	r0, [r2, #0]
 8019634:	6018      	str	r0, [r3, #0]
 8019636:	8892      	ldrh	r2, [r2, #4]
 8019638:	809a      	strh	r2, [r3, #4]
 801963a:	e0d4      	b.n	80197e6 <i2c_testing+0x422>
	    }

	    // --- 4. COMPARE SENT vs. RECEIVED data ---
	    if (command->bit_pattern_length > 100) {
 801963c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019640:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019644:	681b      	ldr	r3, [r3, #0]
 8019646:	799b      	ldrb	r3, [r3, #6]
 8019648:	2b64      	cmp	r3, #100	@ 0x64
 801964a:	d948      	bls.n	80196de <i2c_testing+0x31a>
	        uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 801964c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019650:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	799b      	ldrb	r3, [r3, #6]
 8019658:	461a      	mov	r2, r3
 801965a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801965e:	4611      	mov	r1, r2
 8019660:	4618      	mov	r0, r3
 8019662:	f7e7 fc3b 	bl	8000edc <calculate_crc>
 8019666:	4603      	mov	r3, r0
 8019668:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
	        uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 801966c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019670:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	799b      	ldrb	r3, [r3, #6]
 8019678:	461a      	mov	r2, r3
 801967a:	f107 0310 	add.w	r3, r7, #16
 801967e:	4611      	mov	r1, r2
 8019680:	4618      	mov	r0, r3
 8019682:	f7e7 fc2b 	bl	8000edc <calculate_crc>
 8019686:	4603      	mov	r3, r0
 8019688:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	        if (sent_crc != received_crc) {
 801968c:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8019690:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8019694:	429a      	cmp	r2, r3
 8019696:	d071      	beq.n	801977c <i2c_testing+0x3b8>
	            printf("I2C_TEST: CRC mismatch on iteration %u.\n", i + 1);
 8019698:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801969c:	3301      	adds	r3, #1
 801969e:	4619      	mov	r1, r3
 80196a0:	4834      	ldr	r0, [pc, #208]	@ (8019774 <i2c_testing+0x3b0>)
 80196a2:	f000 fcb1 	bl	801a008 <iprintf>
	            response.test_result = TEST_FAIL;
 80196a6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80196aa:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80196ae:	22ff      	movs	r2, #255	@ 0xff
 80196b0:	809a      	strh	r2, [r3, #4]
	            vPortFree(command);
 80196b2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80196b6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80196ba:	6818      	ldr	r0, [r3, #0]
 80196bc:	f7f5 f9aa 	bl	800ea14 <vPortFree>
	            return response;
 80196c0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80196c4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80196c8:	6819      	ldr	r1, [r3, #0]
 80196ca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80196ce:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 80196d2:	460b      	mov	r3, r1
 80196d4:	6810      	ldr	r0, [r2, #0]
 80196d6:	6018      	str	r0, [r3, #0]
 80196d8:	8892      	ldrh	r2, [r2, #4]
 80196da:	809a      	strh	r2, [r3, #4]
 80196dc:	e083      	b.n	80197e6 <i2c_testing+0x422>
	        }
	    } else {
	        int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 80196de:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80196e2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80196e6:	681b      	ldr	r3, [r3, #0]
 80196e8:	799b      	ldrb	r3, [r3, #6]
 80196ea:	461a      	mov	r2, r3
 80196ec:	f107 0110 	add.w	r1, r7, #16
 80196f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80196f4:	4618      	mov	r0, r3
 80196f6:	f000 fdcf 	bl	801a298 <memcmp>
 80196fa:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
	        if (comp != 0) {
 80196fe:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8019702:	2b00      	cmp	r3, #0
 8019704:	d03a      	beq.n	801977c <i2c_testing+0x3b8>
	            printf("Data mismatch on iteration %u.\n", i + 1);
 8019706:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 801970a:	3301      	adds	r3, #1
 801970c:	4619      	mov	r1, r3
 801970e:	481a      	ldr	r0, [pc, #104]	@ (8019778 <i2c_testing+0x3b4>)
 8019710:	f000 fc7a 	bl	801a008 <iprintf>
	            response.test_result = TEST_FAIL;
 8019714:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019718:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 801971c:	22ff      	movs	r2, #255	@ 0xff
 801971e:	809a      	strh	r2, [r3, #4]
	            vPortFree(command);
 8019720:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019724:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019728:	6818      	ldr	r0, [r3, #0]
 801972a:	f7f5 f973 	bl	800ea14 <vPortFree>
	            return response;
 801972e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019732:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019736:	6819      	ldr	r1, [r3, #0]
 8019738:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801973c:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8019740:	460b      	mov	r3, r1
 8019742:	6810      	ldr	r0, [r2, #0]
 8019744:	6018      	str	r0, [r3, #0]
 8019746:	8892      	ldrh	r2, [r2, #4]
 8019748:	809a      	strh	r2, [r3, #4]
 801974a:	e04c      	b.n	80197e6 <i2c_testing+0x422>
 801974c:	0801dd10 	.word	0x0801dd10
 8019750:	0801dd44 	.word	0x0801dd44
 8019754:	20000214 	.word	0x20000214
 8019758:	0801dd64 	.word	0x0801dd64
 801975c:	20000268 	.word	0x20000268
 8019760:	0801dd8c 	.word	0x0801dd8c
 8019764:	20000ad4 	.word	0x20000ad4
 8019768:	0801ddb4 	.word	0x0801ddb4
 801976c:	20000ad0 	.word	0x20000ad0
 8019770:	0801ddc8 	.word	0x0801ddc8
 8019774:	0801dddc 	.word	0x0801dddc
 8019778:	0801de08 	.word	0x0801de08
	        }
	    }
	    printf("Data Match on iteration %u.\n", i + 1);
 801977c:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8019780:	3301      	adds	r3, #1
 8019782:	4619      	mov	r1, r3
 8019784:	481c      	ldr	r0, [pc, #112]	@ (80197f8 <i2c_testing+0x434>)
 8019786:	f000 fc3f 	bl	801a008 <iprintf>

        osDelay(10);
 801978a:	200a      	movs	r0, #10
 801978c:	f7f1 fabe 	bl	800ad0c <osDelay>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 8019790:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8019794:	3301      	adds	r3, #1
 8019796:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 801979a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801979e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	795b      	ldrb	r3, [r3, #5]
 80197a6:	f897 221f 	ldrb.w	r2, [r7, #543]	@ 0x21f
 80197aa:	429a      	cmp	r2, r3
 80197ac:	f4ff ae6f 	bcc.w	801948e <i2c_testing+0xca>
	}
    response.test_result = TEST_PASS;
 80197b0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80197b4:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80197b8:	2201      	movs	r2, #1
 80197ba:	809a      	strh	r2, [r3, #4]
    vPortFree(command);
 80197bc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80197c0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80197c4:	6818      	ldr	r0, [r3, #0]
 80197c6:	f7f5 f925 	bl	800ea14 <vPortFree>
    return response;
 80197ca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80197ce:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80197d2:	6819      	ldr	r1, [r3, #0]
 80197d4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80197d8:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 80197dc:	460b      	mov	r3, r1
 80197de:	6810      	ldr	r0, [r2, #0]
 80197e0:	6018      	str	r0, [r3, #0]
 80197e2:	8892      	ldrh	r2, [r2, #4]
 80197e4:	809a      	strh	r2, [r3, #4]
}
 80197e6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80197ea:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80197ee:	6818      	ldr	r0, [r3, #0]
 80197f0:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 80197f4:	46bd      	mov	sp, r7
 80197f6:	bd80      	pop	{r7, pc}
 80197f8:	0801de28 	.word	0x0801de28

080197fc <HAL_I2C_MasterTxCpltCallback>:


void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80197fc:	b580      	push	{r7, lr}
 80197fe:	b084      	sub	sp, #16
 8019800:	af00      	add	r7, sp, #0
 8019802:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8019804:	2300      	movs	r3, #0
 8019806:	60fb      	str	r3, [r7, #12]

    if (hi2c->Instance == I2C_SENDER->Instance) // Check the instance of your sender UART
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	681a      	ldr	r2, [r3, #0]
 801980c:	4b0e      	ldr	r3, [pc, #56]	@ (8019848 <HAL_I2C_MasterTxCpltCallback+0x4c>)
 801980e:	681b      	ldr	r3, [r3, #0]
 8019810:	429a      	cmp	r2, r3
 8019812:	d10a      	bne.n	801982a <HAL_I2C_MasterTxCpltCallback+0x2e>
    {
        xSemaphoreGiveFromISR(I2cTxHandle, &xHigherPriorityTaskWoken);
 8019814:	4b0d      	ldr	r3, [pc, #52]	@ (801984c <HAL_I2C_MasterTxCpltCallback+0x50>)
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	f107 020c 	add.w	r2, r7, #12
 801981c:	4611      	mov	r1, r2
 801981e:	4618      	mov	r0, r3
 8019820:	f7f2 fbd1 	bl	800bfc6 <xQueueGiveFromISR>
        printf("TX callback fired and freed the semaphore\n");
 8019824:	480a      	ldr	r0, [pc, #40]	@ (8019850 <HAL_I2C_MasterTxCpltCallback+0x54>)
 8019826:	f000 fc57 	bl	801a0d8 <puts>
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801982a:	68fb      	ldr	r3, [r7, #12]
 801982c:	2b00      	cmp	r3, #0
 801982e:	d007      	beq.n	8019840 <HAL_I2C_MasterTxCpltCallback+0x44>
 8019830:	4b08      	ldr	r3, [pc, #32]	@ (8019854 <HAL_I2C_MasterTxCpltCallback+0x58>)
 8019832:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019836:	601a      	str	r2, [r3, #0]
 8019838:	f3bf 8f4f 	dsb	sy
 801983c:	f3bf 8f6f 	isb	sy

}
 8019840:	bf00      	nop
 8019842:	3710      	adds	r7, #16
 8019844:	46bd      	mov	sp, r7
 8019846:	bd80      	pop	{r7, pc}
 8019848:	20000268 	.word	0x20000268
 801984c:	20000ad4 	.word	0x20000ad4
 8019850:	0801de48 	.word	0x0801de48
 8019854:	e000ed04 	.word	0xe000ed04

08019858 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8019858:	b580      	push	{r7, lr}
 801985a:	b084      	sub	sp, #16
 801985c:	af00      	add	r7, sp, #0
 801985e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8019860:	2300      	movs	r3, #0
 8019862:	60fb      	str	r3, [r7, #12]

    if (hi2c->Instance == I2C_RECEIVER->Instance) // Check the instance of your receiver UART
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	681a      	ldr	r2, [r3, #0]
 8019868:	4b0e      	ldr	r3, [pc, #56]	@ (80198a4 <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	429a      	cmp	r2, r3
 801986e:	d10a      	bne.n	8019886 <HAL_I2C_SlaveRxCpltCallback+0x2e>
    {
        xSemaphoreGiveFromISR(I2cRxHandle, &xHigherPriorityTaskWoken);
 8019870:	4b0d      	ldr	r3, [pc, #52]	@ (80198a8 <HAL_I2C_SlaveRxCpltCallback+0x50>)
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	f107 020c 	add.w	r2, r7, #12
 8019878:	4611      	mov	r1, r2
 801987a:	4618      	mov	r0, r3
 801987c:	f7f2 fba3 	bl	800bfc6 <xQueueGiveFromISR>
        printf("RX callback fired and freed the semaphore\n");
 8019880:	480a      	ldr	r0, [pc, #40]	@ (80198ac <HAL_I2C_SlaveRxCpltCallback+0x54>)
 8019882:	f000 fc29 	bl	801a0d8 <puts>
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8019886:	68fb      	ldr	r3, [r7, #12]
 8019888:	2b00      	cmp	r3, #0
 801988a:	d007      	beq.n	801989c <HAL_I2C_SlaveRxCpltCallback+0x44>
 801988c:	4b08      	ldr	r3, [pc, #32]	@ (80198b0 <HAL_I2C_SlaveRxCpltCallback+0x58>)
 801988e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019892:	601a      	str	r2, [r3, #0]
 8019894:	f3bf 8f4f 	dsb	sy
 8019898:	f3bf 8f6f 	isb	sy
}
 801989c:	bf00      	nop
 801989e:	3710      	adds	r7, #16
 80198a0:	46bd      	mov	sp, r7
 80198a2:	bd80      	pop	{r7, pc}
 80198a4:	20000214 	.word	0x20000214
 80198a8:	20000ad0 	.word	0x20000ad0
 80198ac:	0801de74 	.word	0x0801de74
 80198b0:	e000ed04 	.word	0xe000ed04

080198b4 <uart_testing>:
#include "uarts.h"

#define UART_SENDER 		(&huart2)
#define UART_RECEIVER 		(&huart4)

result_pro_t uart_testing(test_command_t* command){
 80198b4:	b580      	push	{r7, lr}
 80198b6:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 80198ba:	af00      	add	r7, sp, #0
 80198bc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80198c0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80198c4:	6018      	str	r0, [r3, #0]
 80198c6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80198ca:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80198ce:	6019      	str	r1, [r3, #0]


	uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 80198d0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80198d4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80198d8:	4618      	mov	r0, r3
 80198da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80198de:	461a      	mov	r2, r3
 80198e0:	2100      	movs	r1, #0
 80198e2:	f000 fce9 	bl	801a2b8 <memset>
	uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 80198e6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80198ea:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80198ee:	4618      	mov	r0, r3
 80198f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80198f4:	461a      	mov	r2, r3
 80198f6:	2100      	movs	r1, #0
 80198f8:	f000 fcde 	bl	801a2b8 <memset>

	result_pro_t response;
	HAL_StatusTypeDef rx_status, tx_status;

	if (command == NULL) {
 80198fc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019900:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	2b00      	cmp	r3, #0
 8019908:	d118      	bne.n	801993c <uart_testing+0x88>
        printf("UART_TEST: Received NULL command pointer. Skipping.\n");
 801990a:	48b9      	ldr	r0, [pc, #740]	@ (8019bf0 <uart_testing+0x33c>)
 801990c:	f000 fbe4 	bl	801a0d8 <puts>
        response.test_result = TEST_ERR;
 8019910:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019914:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8019918:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801991c:	809a      	strh	r2, [r3, #4]
        return response;
 801991e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019922:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019926:	6819      	ldr	r1, [r3, #0]
 8019928:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801992c:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8019930:	460b      	mov	r3, r1
 8019932:	6810      	ldr	r0, [r2, #0]
 8019934:	6018      	str	r0, [r3, #0]
 8019936:	8892      	ldrh	r2, [r2, #4]
 8019938:	809a      	strh	r2, [r3, #4]
 801993a:	e1f7      	b.n	8019d2c <uart_testing+0x478>
	}

	response.test_id = command->test_id;
 801993c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019940:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	681a      	ldr	r2, [r3, #0]
 8019948:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801994c:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8019950:	601a      	str	r2, [r3, #0]
	// Copy pattern to TX buffer
    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 8019952:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019956:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	1dd9      	adds	r1, r3, #7
 801995e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019962:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019966:	681b      	ldr	r3, [r3, #0]
 8019968:	799b      	ldrb	r3, [r3, #6]
 801996a:	461a      	mov	r2, r3
 801996c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8019970:	4618      	mov	r0, r3
 8019972:	f000 fd74 	bl	801a45e <memcpy>

	for(uint8_t i=0 ; i< command->iterations ; i++){
 8019976:	2300      	movs	r3, #0
 8019978:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 801997c:	e1b0      	b.n	8019ce0 <uart_testing+0x42c>
	    printf("UART_TEST: Iteration %u/%u -\n", i + 1, command->iterations);
 801997e:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8019982:	1c59      	adds	r1, r3, #1
 8019984:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019988:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	795b      	ldrb	r3, [r3, #5]
 8019990:	461a      	mov	r2, r3
 8019992:	4898      	ldr	r0, [pc, #608]	@ (8019bf4 <uart_testing+0x340>)
 8019994:	f000 fb38 	bl	801a008 <iprintf>
	    memset(rx_buffer, 0, command->bit_pattern_length);
 8019998:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801999c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	799b      	ldrb	r3, [r3, #6]
 80199a4:	461a      	mov	r2, r3
 80199a6:	f107 0310 	add.w	r3, r7, #16
 80199aa:	2100      	movs	r1, #0
 80199ac:	4618      	mov	r0, r3
 80199ae:	f000 fc83 	bl	801a2b8 <memset>

	    // --- 1. START RECEIVE DMA ---
	    HAL_StatusTypeDef rx_status = HAL_UART_Receive_DMA(UART_RECEIVER, rx_buffer, command->bit_pattern_length);
 80199b2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80199b6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80199ba:	681b      	ldr	r3, [r3, #0]
 80199bc:	799b      	ldrb	r3, [r3, #6]
 80199be:	461a      	mov	r2, r3
 80199c0:	f107 0310 	add.w	r3, r7, #16
 80199c4:	4619      	mov	r1, r3
 80199c6:	488c      	ldr	r0, [pc, #560]	@ (8019bf8 <uart_testing+0x344>)
 80199c8:	f7ee fc6a 	bl	80082a0 <HAL_UART_Receive_DMA>
 80199cc:	4603      	mov	r3, r0
 80199ce:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e
	    if (rx_status != HAL_OK) {
 80199d2:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d021      	beq.n	8019a1e <uart_testing+0x16a>
	        printf("Failed to start receive DMA: %d\n", rx_status);
 80199da:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 80199de:	4619      	mov	r1, r3
 80199e0:	4886      	ldr	r0, [pc, #536]	@ (8019bfc <uart_testing+0x348>)
 80199e2:	f000 fb11 	bl	801a008 <iprintf>
	        response.test_result = TEST_FAIL;
 80199e6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80199ea:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80199ee:	22ff      	movs	r2, #255	@ 0xff
 80199f0:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 80199f2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80199f6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 80199fa:	6818      	ldr	r0, [r3, #0]
 80199fc:	f7f5 f80a 	bl	800ea14 <vPortFree>
	        return response;
 8019a00:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019a04:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019a08:	6819      	ldr	r1, [r3, #0]
 8019a0a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019a0e:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8019a12:	460b      	mov	r3, r1
 8019a14:	6810      	ldr	r0, [r2, #0]
 8019a16:	6018      	str	r0, [r3, #0]
 8019a18:	8892      	ldrh	r2, [r2, #4]
 8019a1a:	809a      	strh	r2, [r3, #4]
 8019a1c:	e186      	b.n	8019d2c <uart_testing+0x478>
	    }

	    // --- 2. TRANSMIT a block of data via DMA ---
	    HAL_StatusTypeDef tx_status = HAL_UART_Transmit_DMA(UART_SENDER, tx_buffer, command->bit_pattern_length);
 8019a1e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019a22:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	799b      	ldrb	r3, [r3, #6]
 8019a2a:	461a      	mov	r2, r3
 8019a2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8019a30:	4619      	mov	r1, r3
 8019a32:	4873      	ldr	r0, [pc, #460]	@ (8019c00 <uart_testing+0x34c>)
 8019a34:	f7ee fbb8 	bl	80081a8 <HAL_UART_Transmit_DMA>
 8019a38:	4603      	mov	r3, r0
 8019a3a:	f887 321d 	strb.w	r3, [r7, #541]	@ 0x21d
	    if (tx_status != HAL_OK) {
 8019a3e:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	d024      	beq.n	8019a90 <uart_testing+0x1dc>
	        printf("Failed to send DMA on UART sender: %d\n", tx_status);
 8019a46:	f897 321d 	ldrb.w	r3, [r7, #541]	@ 0x21d
 8019a4a:	4619      	mov	r1, r3
 8019a4c:	486d      	ldr	r0, [pc, #436]	@ (8019c04 <uart_testing+0x350>)
 8019a4e:	f000 fadb 	bl	801a008 <iprintf>
	        response.test_result = TEST_FAIL;
 8019a52:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019a56:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8019a5a:	22ff      	movs	r2, #255	@ 0xff
 8019a5c:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 8019a5e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019a62:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019a66:	6818      	ldr	r0, [r3, #0]
 8019a68:	f7f4 ffd4 	bl	800ea14 <vPortFree>
	        HAL_UART_DMAStop(UART_RECEIVER); // Stop the pending receive
 8019a6c:	4862      	ldr	r0, [pc, #392]	@ (8019bf8 <uart_testing+0x344>)
 8019a6e:	f7ee fc5b 	bl	8008328 <HAL_UART_DMAStop>
	        return response;
 8019a72:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019a76:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019a7a:	6819      	ldr	r1, [r3, #0]
 8019a7c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019a80:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8019a84:	460b      	mov	r3, r1
 8019a86:	6810      	ldr	r0, [r2, #0]
 8019a88:	6018      	str	r0, [r3, #0]
 8019a8a:	8892      	ldrh	r2, [r2, #4]
 8019a8c:	809a      	strh	r2, [r3, #4]
 8019a8e:	e14d      	b.n	8019d2c <uart_testing+0x478>
	    }

	    // --- 3. WAIT FOR BOTH TX AND RX DMA COMPLETION ---
	    if (xSemaphoreTake(UartTxHandle, TIMEOUT) != pdPASS) {
 8019a90:	4b5d      	ldr	r3, [pc, #372]	@ (8019c08 <uart_testing+0x354>)
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8019a98:	4618      	mov	r0, r3
 8019a9a:	f7f2 fc15 	bl	800c2c8 <xQueueSemaphoreTake>
 8019a9e:	4603      	mov	r3, r0
 8019aa0:	2b01      	cmp	r3, #1
 8019aa2:	d021      	beq.n	8019ae8 <uart_testing+0x234>
	         printf("fail to get TxSemaphore\n");
 8019aa4:	4859      	ldr	r0, [pc, #356]	@ (8019c0c <uart_testing+0x358>)
 8019aa6:	f000 fb17 	bl	801a0d8 <puts>
	         response.test_result = TEST_FAIL;
 8019aaa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019aae:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8019ab2:	22ff      	movs	r2, #255	@ 0xff
 8019ab4:	809a      	strh	r2, [r3, #4]
	         vPortFree(command);
 8019ab6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019aba:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019abe:	6818      	ldr	r0, [r3, #0]
 8019ac0:	f7f4 ffa8 	bl	800ea14 <vPortFree>
	         HAL_UART_DMAStop(UART_RECEIVER); // Stop the pending receive
 8019ac4:	484c      	ldr	r0, [pc, #304]	@ (8019bf8 <uart_testing+0x344>)
 8019ac6:	f7ee fc2f 	bl	8008328 <HAL_UART_DMAStop>
	         return response;
 8019aca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019ace:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019ad2:	6819      	ldr	r1, [r3, #0]
 8019ad4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019ad8:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8019adc:	460b      	mov	r3, r1
 8019ade:	6810      	ldr	r0, [r2, #0]
 8019ae0:	6018      	str	r0, [r3, #0]
 8019ae2:	8892      	ldrh	r2, [r2, #4]
 8019ae4:	809a      	strh	r2, [r3, #4]
 8019ae6:	e121      	b.n	8019d2c <uart_testing+0x478>
	    }

	    if (xSemaphoreTake(UartRxHandle, TIMEOUT) != pdPASS) {
 8019ae8:	4b49      	ldr	r3, [pc, #292]	@ (8019c10 <uart_testing+0x35c>)
 8019aea:	681b      	ldr	r3, [r3, #0]
 8019aec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8019af0:	4618      	mov	r0, r3
 8019af2:	f7f2 fbe9 	bl	800c2c8 <xQueueSemaphoreTake>
 8019af6:	4603      	mov	r3, r0
 8019af8:	2b01      	cmp	r3, #1
 8019afa:	d021      	beq.n	8019b40 <uart_testing+0x28c>
	         printf("fail to get RxSemaphore\n");
 8019afc:	4845      	ldr	r0, [pc, #276]	@ (8019c14 <uart_testing+0x360>)
 8019afe:	f000 faeb 	bl	801a0d8 <puts>
	        response.test_result = TEST_FAIL;
 8019b02:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019b06:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8019b0a:	22ff      	movs	r2, #255	@ 0xff
 8019b0c:	809a      	strh	r2, [r3, #4]
	        vPortFree(command);
 8019b0e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019b12:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019b16:	6818      	ldr	r0, [r3, #0]
 8019b18:	f7f4 ff7c 	bl	800ea14 <vPortFree>
	        HAL_UART_DMAStop(UART_RECEIVER); //Stop the stuck receive
 8019b1c:	4836      	ldr	r0, [pc, #216]	@ (8019bf8 <uart_testing+0x344>)
 8019b1e:	f7ee fc03 	bl	8008328 <HAL_UART_DMAStop>
	        return response;
 8019b22:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019b26:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019b2a:	6819      	ldr	r1, [r3, #0]
 8019b2c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019b30:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8019b34:	460b      	mov	r3, r1
 8019b36:	6810      	ldr	r0, [r2, #0]
 8019b38:	6018      	str	r0, [r3, #0]
 8019b3a:	8892      	ldrh	r2, [r2, #4]
 8019b3c:	809a      	strh	r2, [r3, #4]
 8019b3e:	e0f5      	b.n	8019d2c <uart_testing+0x478>
	    }

	    // --- 4. COMPARE SENT vs. RECEIVED data ---
	    if (command->bit_pattern_length > 100) {
 8019b40:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019b44:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	799b      	ldrb	r3, [r3, #6]
 8019b4c:	2b64      	cmp	r3, #100	@ 0x64
 8019b4e:	d967      	bls.n	8019c20 <uart_testing+0x36c>
			printf("bit_pattern_length more than 100\n");
 8019b50:	4831      	ldr	r0, [pc, #196]	@ (8019c18 <uart_testing+0x364>)
 8019b52:	f000 fac1 	bl	801a0d8 <puts>

			// Use CRC comparison for large data
			uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 8019b56:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019b5a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019b5e:	681b      	ldr	r3, [r3, #0]
 8019b60:	799b      	ldrb	r3, [r3, #6]
 8019b62:	461a      	mov	r2, r3
 8019b64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8019b68:	4611      	mov	r1, r2
 8019b6a:	4618      	mov	r0, r3
 8019b6c:	f7e7 f9b6 	bl	8000edc <calculate_crc>
 8019b70:	4603      	mov	r3, r0
 8019b72:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
			uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 8019b76:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019b7a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019b7e:	681b      	ldr	r3, [r3, #0]
 8019b80:	799b      	ldrb	r3, [r3, #6]
 8019b82:	461a      	mov	r2, r3
 8019b84:	f107 0310 	add.w	r3, r7, #16
 8019b88:	4611      	mov	r1, r2
 8019b8a:	4618      	mov	r0, r3
 8019b8c:	f7e7 f9a6 	bl	8000edc <calculate_crc>
 8019b90:	4603      	mov	r3, r0
 8019b92:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
			if (sent_crc != received_crc) {
 8019b96:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8019b9a:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8019b9e:	429a      	cmp	r2, r3
 8019ba0:	f000 808f 	beq.w	8019cc2 <uart_testing+0x40e>
				printf("UART_TEST: CRC mismatch on iteration %u. Sent CRC: 0x%lX, Received CRC: 0x%lX\n",
 8019ba4:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8019ba8:	1c59      	adds	r1, r3, #1
 8019baa:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8019bae:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 8019bb2:	481a      	ldr	r0, [pc, #104]	@ (8019c1c <uart_testing+0x368>)
 8019bb4:	f000 fa28 	bl	801a008 <iprintf>
					   i + 1, sent_crc, received_crc);
				response.test_result = TEST_FAIL;
 8019bb8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019bbc:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8019bc0:	22ff      	movs	r2, #255	@ 0xff
 8019bc2:	809a      	strh	r2, [r3, #4]
				vPortFree(command);
 8019bc4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019bc8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019bcc:	6818      	ldr	r0, [r3, #0]
 8019bce:	f7f4 ff21 	bl	800ea14 <vPortFree>
				return response;
 8019bd2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019bd6:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019bda:	6819      	ldr	r1, [r3, #0]
 8019bdc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019be0:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8019be4:	460b      	mov	r3, r1
 8019be6:	6810      	ldr	r0, [r2, #0]
 8019be8:	6018      	str	r0, [r3, #0]
 8019bea:	8892      	ldrh	r2, [r2, #4]
 8019bec:	809a      	strh	r2, [r3, #4]
 8019bee:	e09d      	b.n	8019d2c <uart_testing+0x478>
 8019bf0:	0801dea0 	.word	0x0801dea0
 8019bf4:	0801ded4 	.word	0x0801ded4
 8019bf8:	2000037c 	.word	0x2000037c
 8019bfc:	0801def4 	.word	0x0801def4
 8019c00:	20000404 	.word	0x20000404
 8019c04:	0801df18 	.word	0x0801df18
 8019c08:	20000acc 	.word	0x20000acc
 8019c0c:	0801df40 	.word	0x0801df40
 8019c10:	20000ac8 	.word	0x20000ac8
 8019c14:	0801df58 	.word	0x0801df58
 8019c18:	0801df70 	.word	0x0801df70
 8019c1c:	0801df94 	.word	0x0801df94
			}
	    }
	    else {
			int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 8019c20:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019c24:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019c28:	681b      	ldr	r3, [r3, #0]
 8019c2a:	799b      	ldrb	r3, [r3, #6]
 8019c2c:	461a      	mov	r2, r3
 8019c2e:	f107 0110 	add.w	r1, r7, #16
 8019c32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8019c36:	4618      	mov	r0, r3
 8019c38:	f000 fb2e 	bl	801a298 <memcmp>
 8019c3c:	f8c7 0218 	str.w	r0, [r7, #536]	@ 0x218
			if (comp != 0) {
 8019c40:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d03c      	beq.n	8019cc2 <uart_testing+0x40e>
				printf("Data mismatch on iteration %u.\n", i + 1);
 8019c48:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8019c4c:	3301      	adds	r3, #1
 8019c4e:	4619      	mov	r1, r3
 8019c50:	483b      	ldr	r0, [pc, #236]	@ (8019d40 <uart_testing+0x48c>)
 8019c52:	f000 f9d9 	bl	801a008 <iprintf>
				printf("Sent: %.*s\n", command->bit_pattern_length, tx_buffer);
 8019c56:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019c5a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019c5e:	681b      	ldr	r3, [r3, #0]
 8019c60:	799b      	ldrb	r3, [r3, #6]
 8019c62:	4619      	mov	r1, r3
 8019c64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8019c68:	461a      	mov	r2, r3
 8019c6a:	4836      	ldr	r0, [pc, #216]	@ (8019d44 <uart_testing+0x490>)
 8019c6c:	f000 f9cc 	bl	801a008 <iprintf>
				printf("Recv: %.*s\n", command->bit_pattern_length, rx_buffer);
 8019c70:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019c74:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019c78:	681b      	ldr	r3, [r3, #0]
 8019c7a:	799b      	ldrb	r3, [r3, #6]
 8019c7c:	4619      	mov	r1, r3
 8019c7e:	f107 0310 	add.w	r3, r7, #16
 8019c82:	461a      	mov	r2, r3
 8019c84:	4830      	ldr	r0, [pc, #192]	@ (8019d48 <uart_testing+0x494>)
 8019c86:	f000 f9bf 	bl	801a008 <iprintf>
				response.test_result = TEST_FAIL;
 8019c8a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019c8e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8019c92:	22ff      	movs	r2, #255	@ 0xff
 8019c94:	809a      	strh	r2, [r3, #4]
				vPortFree(command);
 8019c96:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019c9a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019c9e:	6818      	ldr	r0, [r3, #0]
 8019ca0:	f7f4 feb8 	bl	800ea14 <vPortFree>
				return response;
 8019ca4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019ca8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019cac:	6819      	ldr	r1, [r3, #0]
 8019cae:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019cb2:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8019cb6:	460b      	mov	r3, r1
 8019cb8:	6810      	ldr	r0, [r2, #0]
 8019cba:	6018      	str	r0, [r3, #0]
 8019cbc:	8892      	ldrh	r2, [r2, #4]
 8019cbe:	809a      	strh	r2, [r3, #4]
 8019cc0:	e034      	b.n	8019d2c <uart_testing+0x478>
			}
	    }
	    printf("Data Match on iteration %u.\n", i + 1);
 8019cc2:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8019cc6:	3301      	adds	r3, #1
 8019cc8:	4619      	mov	r1, r3
 8019cca:	4820      	ldr	r0, [pc, #128]	@ (8019d4c <uart_testing+0x498>)
 8019ccc:	f000 f99c 	bl	801a008 <iprintf>

        osDelay(10); // Small delay between iterations to prevent overwhelming the UUT or the system
 8019cd0:	200a      	movs	r0, #10
 8019cd2:	f7f1 f81b 	bl	800ad0c <osDelay>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 8019cd6:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8019cda:	3301      	adds	r3, #1
 8019cdc:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 8019ce0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019ce4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	795b      	ldrb	r3, [r3, #5]
 8019cec:	f897 221f 	ldrb.w	r2, [r7, #543]	@ 0x21f
 8019cf0:	429a      	cmp	r2, r3
 8019cf2:	f4ff ae44 	bcc.w	801997e <uart_testing+0xca>
	}
    response.test_result = TEST_PASS;
 8019cf6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019cfa:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8019cfe:	2201      	movs	r2, #1
 8019d00:	809a      	strh	r2, [r3, #4]
    vPortFree(command);
 8019d02:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019d06:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8019d0a:	6818      	ldr	r0, [r3, #0]
 8019d0c:	f7f4 fe82 	bl	800ea14 <vPortFree>
    return response;
 8019d10:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019d14:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019d18:	6819      	ldr	r1, [r3, #0]
 8019d1a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019d1e:	f5a3 7206 	sub.w	r2, r3, #536	@ 0x218
 8019d22:	460b      	mov	r3, r1
 8019d24:	6810      	ldr	r0, [r2, #0]
 8019d26:	6018      	str	r0, [r3, #0]
 8019d28:	8892      	ldrh	r2, [r2, #4]
 8019d2a:	809a      	strh	r2, [r3, #4]
}
 8019d2c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8019d30:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8019d34:	6818      	ldr	r0, [r3, #0]
 8019d36:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8019d3a:	46bd      	mov	sp, r7
 8019d3c:	bd80      	pop	{r7, pc}
 8019d3e:	bf00      	nop
 8019d40:	0801dfe4 	.word	0x0801dfe4
 8019d44:	0801e004 	.word	0x0801e004
 8019d48:	0801e010 	.word	0x0801e010
 8019d4c:	0801e01c 	.word	0x0801e01c

08019d50 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8019d50:	b580      	push	{r7, lr}
 8019d52:	b084      	sub	sp, #16
 8019d54:	af00      	add	r7, sp, #0
 8019d56:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8019d58:	2300      	movs	r3, #0
 8019d5a:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == UART_SENDER->Instance) // Check the instance of your sender UART
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	681a      	ldr	r2, [r3, #0]
 8019d60:	4b0e      	ldr	r3, [pc, #56]	@ (8019d9c <HAL_UART_TxCpltCallback+0x4c>)
 8019d62:	681b      	ldr	r3, [r3, #0]
 8019d64:	429a      	cmp	r2, r3
 8019d66:	d10a      	bne.n	8019d7e <HAL_UART_TxCpltCallback+0x2e>
    {
        xSemaphoreGiveFromISR(UartTxHandle, &xHigherPriorityTaskWoken);
 8019d68:	4b0d      	ldr	r3, [pc, #52]	@ (8019da0 <HAL_UART_TxCpltCallback+0x50>)
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	f107 020c 	add.w	r2, r7, #12
 8019d70:	4611      	mov	r1, r2
 8019d72:	4618      	mov	r0, r3
 8019d74:	f7f2 f927 	bl	800bfc6 <xQueueGiveFromISR>
        printf("TX callback fired and freed the semaphore\n");
 8019d78:	480a      	ldr	r0, [pc, #40]	@ (8019da4 <HAL_UART_TxCpltCallback+0x54>)
 8019d7a:	f000 f9ad 	bl	801a0d8 <puts>
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8019d7e:	68fb      	ldr	r3, [r7, #12]
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	d007      	beq.n	8019d94 <HAL_UART_TxCpltCallback+0x44>
 8019d84:	4b08      	ldr	r3, [pc, #32]	@ (8019da8 <HAL_UART_TxCpltCallback+0x58>)
 8019d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019d8a:	601a      	str	r2, [r3, #0]
 8019d8c:	f3bf 8f4f 	dsb	sy
 8019d90:	f3bf 8f6f 	isb	sy

}
 8019d94:	bf00      	nop
 8019d96:	3710      	adds	r7, #16
 8019d98:	46bd      	mov	sp, r7
 8019d9a:	bd80      	pop	{r7, pc}
 8019d9c:	20000404 	.word	0x20000404
 8019da0:	20000acc 	.word	0x20000acc
 8019da4:	0801e03c 	.word	0x0801e03c
 8019da8:	e000ed04 	.word	0xe000ed04

08019dac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8019dac:	b580      	push	{r7, lr}
 8019dae:	b084      	sub	sp, #16
 8019db0:	af00      	add	r7, sp, #0
 8019db2:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8019db4:	2300      	movs	r3, #0
 8019db6:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == UART_RECEIVER->Instance) // Check the instance of your receiver UART
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	681a      	ldr	r2, [r3, #0]
 8019dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8019df8 <HAL_UART_RxCpltCallback+0x4c>)
 8019dbe:	681b      	ldr	r3, [r3, #0]
 8019dc0:	429a      	cmp	r2, r3
 8019dc2:	d10a      	bne.n	8019dda <HAL_UART_RxCpltCallback+0x2e>
    {
        xSemaphoreGiveFromISR(UartRxHandle, &xHigherPriorityTaskWoken);
 8019dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8019dfc <HAL_UART_RxCpltCallback+0x50>)
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	f107 020c 	add.w	r2, r7, #12
 8019dcc:	4611      	mov	r1, r2
 8019dce:	4618      	mov	r0, r3
 8019dd0:	f7f2 f8f9 	bl	800bfc6 <xQueueGiveFromISR>
        printf("RX callback fired and freed the semaphore\n");
 8019dd4:	480a      	ldr	r0, [pc, #40]	@ (8019e00 <HAL_UART_RxCpltCallback+0x54>)
 8019dd6:	f000 f97f 	bl	801a0d8 <puts>
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8019dda:	68fb      	ldr	r3, [r7, #12]
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d007      	beq.n	8019df0 <HAL_UART_RxCpltCallback+0x44>
 8019de0:	4b08      	ldr	r3, [pc, #32]	@ (8019e04 <HAL_UART_RxCpltCallback+0x58>)
 8019de2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019de6:	601a      	str	r2, [r3, #0]
 8019de8:	f3bf 8f4f 	dsb	sy
 8019dec:	f3bf 8f6f 	isb	sy
}
 8019df0:	bf00      	nop
 8019df2:	3710      	adds	r7, #16
 8019df4:	46bd      	mov	sp, r7
 8019df6:	bd80      	pop	{r7, pc}
 8019df8:	2000037c 	.word	0x2000037c
 8019dfc:	20000ac8 	.word	0x20000ac8
 8019e00:	0801e068 	.word	0x0801e068
 8019e04:	e000ed04 	.word	0xe000ed04

08019e08 <rand>:
 8019e08:	4b16      	ldr	r3, [pc, #88]	@ (8019e64 <rand+0x5c>)
 8019e0a:	b510      	push	{r4, lr}
 8019e0c:	681c      	ldr	r4, [r3, #0]
 8019e0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019e10:	b9b3      	cbnz	r3, 8019e40 <rand+0x38>
 8019e12:	2018      	movs	r0, #24
 8019e14:	f000 fb9a 	bl	801a54c <malloc>
 8019e18:	4602      	mov	r2, r0
 8019e1a:	6320      	str	r0, [r4, #48]	@ 0x30
 8019e1c:	b920      	cbnz	r0, 8019e28 <rand+0x20>
 8019e1e:	4b12      	ldr	r3, [pc, #72]	@ (8019e68 <rand+0x60>)
 8019e20:	4812      	ldr	r0, [pc, #72]	@ (8019e6c <rand+0x64>)
 8019e22:	2152      	movs	r1, #82	@ 0x52
 8019e24:	f000 fb2a 	bl	801a47c <__assert_func>
 8019e28:	4911      	ldr	r1, [pc, #68]	@ (8019e70 <rand+0x68>)
 8019e2a:	4b12      	ldr	r3, [pc, #72]	@ (8019e74 <rand+0x6c>)
 8019e2c:	e9c0 1300 	strd	r1, r3, [r0]
 8019e30:	4b11      	ldr	r3, [pc, #68]	@ (8019e78 <rand+0x70>)
 8019e32:	6083      	str	r3, [r0, #8]
 8019e34:	230b      	movs	r3, #11
 8019e36:	8183      	strh	r3, [r0, #12]
 8019e38:	2100      	movs	r1, #0
 8019e3a:	2001      	movs	r0, #1
 8019e3c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019e40:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019e42:	480e      	ldr	r0, [pc, #56]	@ (8019e7c <rand+0x74>)
 8019e44:	690b      	ldr	r3, [r1, #16]
 8019e46:	694c      	ldr	r4, [r1, #20]
 8019e48:	4a0d      	ldr	r2, [pc, #52]	@ (8019e80 <rand+0x78>)
 8019e4a:	4358      	muls	r0, r3
 8019e4c:	fb02 0004 	mla	r0, r2, r4, r0
 8019e50:	fba3 3202 	umull	r3, r2, r3, r2
 8019e54:	3301      	adds	r3, #1
 8019e56:	eb40 0002 	adc.w	r0, r0, r2
 8019e5a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8019e5e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8019e62:	bd10      	pop	{r4, pc}
 8019e64:	2000003c 	.word	0x2000003c
 8019e68:	0801e2ca 	.word	0x0801e2ca
 8019e6c:	0801e2e1 	.word	0x0801e2e1
 8019e70:	abcd330e 	.word	0xabcd330e
 8019e74:	e66d1234 	.word	0xe66d1234
 8019e78:	0005deec 	.word	0x0005deec
 8019e7c:	5851f42d 	.word	0x5851f42d
 8019e80:	4c957f2d 	.word	0x4c957f2d

08019e84 <std>:
 8019e84:	2300      	movs	r3, #0
 8019e86:	b510      	push	{r4, lr}
 8019e88:	4604      	mov	r4, r0
 8019e8a:	e9c0 3300 	strd	r3, r3, [r0]
 8019e8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019e92:	6083      	str	r3, [r0, #8]
 8019e94:	8181      	strh	r1, [r0, #12]
 8019e96:	6643      	str	r3, [r0, #100]	@ 0x64
 8019e98:	81c2      	strh	r2, [r0, #14]
 8019e9a:	6183      	str	r3, [r0, #24]
 8019e9c:	4619      	mov	r1, r3
 8019e9e:	2208      	movs	r2, #8
 8019ea0:	305c      	adds	r0, #92	@ 0x5c
 8019ea2:	f000 fa09 	bl	801a2b8 <memset>
 8019ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8019edc <std+0x58>)
 8019ea8:	6263      	str	r3, [r4, #36]	@ 0x24
 8019eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8019ee0 <std+0x5c>)
 8019eac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019eae:	4b0d      	ldr	r3, [pc, #52]	@ (8019ee4 <std+0x60>)
 8019eb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8019eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8019ee8 <std+0x64>)
 8019eb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8019eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8019eec <std+0x68>)
 8019eb8:	6224      	str	r4, [r4, #32]
 8019eba:	429c      	cmp	r4, r3
 8019ebc:	d006      	beq.n	8019ecc <std+0x48>
 8019ebe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8019ec2:	4294      	cmp	r4, r2
 8019ec4:	d002      	beq.n	8019ecc <std+0x48>
 8019ec6:	33d0      	adds	r3, #208	@ 0xd0
 8019ec8:	429c      	cmp	r4, r3
 8019eca:	d105      	bne.n	8019ed8 <std+0x54>
 8019ecc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019ed4:	f000 bac0 	b.w	801a458 <__retarget_lock_init_recursive>
 8019ed8:	bd10      	pop	{r4, pc}
 8019eda:	bf00      	nop
 8019edc:	0801a0e9 	.word	0x0801a0e9
 8019ee0:	0801a10b 	.word	0x0801a10b
 8019ee4:	0801a143 	.word	0x0801a143
 8019ee8:	0801a167 	.word	0x0801a167
 8019eec:	2002761c 	.word	0x2002761c

08019ef0 <stdio_exit_handler>:
 8019ef0:	4a02      	ldr	r2, [pc, #8]	@ (8019efc <stdio_exit_handler+0xc>)
 8019ef2:	4903      	ldr	r1, [pc, #12]	@ (8019f00 <stdio_exit_handler+0x10>)
 8019ef4:	4803      	ldr	r0, [pc, #12]	@ (8019f04 <stdio_exit_handler+0x14>)
 8019ef6:	f000 b869 	b.w	8019fcc <_fwalk_sglue>
 8019efa:	bf00      	nop
 8019efc:	20000030 	.word	0x20000030
 8019f00:	0801ad5d 	.word	0x0801ad5d
 8019f04:	20000040 	.word	0x20000040

08019f08 <cleanup_stdio>:
 8019f08:	6841      	ldr	r1, [r0, #4]
 8019f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8019f3c <cleanup_stdio+0x34>)
 8019f0c:	4299      	cmp	r1, r3
 8019f0e:	b510      	push	{r4, lr}
 8019f10:	4604      	mov	r4, r0
 8019f12:	d001      	beq.n	8019f18 <cleanup_stdio+0x10>
 8019f14:	f000 ff22 	bl	801ad5c <_fflush_r>
 8019f18:	68a1      	ldr	r1, [r4, #8]
 8019f1a:	4b09      	ldr	r3, [pc, #36]	@ (8019f40 <cleanup_stdio+0x38>)
 8019f1c:	4299      	cmp	r1, r3
 8019f1e:	d002      	beq.n	8019f26 <cleanup_stdio+0x1e>
 8019f20:	4620      	mov	r0, r4
 8019f22:	f000 ff1b 	bl	801ad5c <_fflush_r>
 8019f26:	68e1      	ldr	r1, [r4, #12]
 8019f28:	4b06      	ldr	r3, [pc, #24]	@ (8019f44 <cleanup_stdio+0x3c>)
 8019f2a:	4299      	cmp	r1, r3
 8019f2c:	d004      	beq.n	8019f38 <cleanup_stdio+0x30>
 8019f2e:	4620      	mov	r0, r4
 8019f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f34:	f000 bf12 	b.w	801ad5c <_fflush_r>
 8019f38:	bd10      	pop	{r4, pc}
 8019f3a:	bf00      	nop
 8019f3c:	2002761c 	.word	0x2002761c
 8019f40:	20027684 	.word	0x20027684
 8019f44:	200276ec 	.word	0x200276ec

08019f48 <global_stdio_init.part.0>:
 8019f48:	b510      	push	{r4, lr}
 8019f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8019f78 <global_stdio_init.part.0+0x30>)
 8019f4c:	4c0b      	ldr	r4, [pc, #44]	@ (8019f7c <global_stdio_init.part.0+0x34>)
 8019f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8019f80 <global_stdio_init.part.0+0x38>)
 8019f50:	601a      	str	r2, [r3, #0]
 8019f52:	4620      	mov	r0, r4
 8019f54:	2200      	movs	r2, #0
 8019f56:	2104      	movs	r1, #4
 8019f58:	f7ff ff94 	bl	8019e84 <std>
 8019f5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8019f60:	2201      	movs	r2, #1
 8019f62:	2109      	movs	r1, #9
 8019f64:	f7ff ff8e 	bl	8019e84 <std>
 8019f68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8019f6c:	2202      	movs	r2, #2
 8019f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f72:	2112      	movs	r1, #18
 8019f74:	f7ff bf86 	b.w	8019e84 <std>
 8019f78:	20027754 	.word	0x20027754
 8019f7c:	2002761c 	.word	0x2002761c
 8019f80:	08019ef1 	.word	0x08019ef1

08019f84 <__sfp_lock_acquire>:
 8019f84:	4801      	ldr	r0, [pc, #4]	@ (8019f8c <__sfp_lock_acquire+0x8>)
 8019f86:	f000 ba68 	b.w	801a45a <__retarget_lock_acquire_recursive>
 8019f8a:	bf00      	nop
 8019f8c:	2002775d 	.word	0x2002775d

08019f90 <__sfp_lock_release>:
 8019f90:	4801      	ldr	r0, [pc, #4]	@ (8019f98 <__sfp_lock_release+0x8>)
 8019f92:	f000 ba63 	b.w	801a45c <__retarget_lock_release_recursive>
 8019f96:	bf00      	nop
 8019f98:	2002775d 	.word	0x2002775d

08019f9c <__sinit>:
 8019f9c:	b510      	push	{r4, lr}
 8019f9e:	4604      	mov	r4, r0
 8019fa0:	f7ff fff0 	bl	8019f84 <__sfp_lock_acquire>
 8019fa4:	6a23      	ldr	r3, [r4, #32]
 8019fa6:	b11b      	cbz	r3, 8019fb0 <__sinit+0x14>
 8019fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019fac:	f7ff bff0 	b.w	8019f90 <__sfp_lock_release>
 8019fb0:	4b04      	ldr	r3, [pc, #16]	@ (8019fc4 <__sinit+0x28>)
 8019fb2:	6223      	str	r3, [r4, #32]
 8019fb4:	4b04      	ldr	r3, [pc, #16]	@ (8019fc8 <__sinit+0x2c>)
 8019fb6:	681b      	ldr	r3, [r3, #0]
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d1f5      	bne.n	8019fa8 <__sinit+0xc>
 8019fbc:	f7ff ffc4 	bl	8019f48 <global_stdio_init.part.0>
 8019fc0:	e7f2      	b.n	8019fa8 <__sinit+0xc>
 8019fc2:	bf00      	nop
 8019fc4:	08019f09 	.word	0x08019f09
 8019fc8:	20027754 	.word	0x20027754

08019fcc <_fwalk_sglue>:
 8019fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019fd0:	4607      	mov	r7, r0
 8019fd2:	4688      	mov	r8, r1
 8019fd4:	4614      	mov	r4, r2
 8019fd6:	2600      	movs	r6, #0
 8019fd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019fdc:	f1b9 0901 	subs.w	r9, r9, #1
 8019fe0:	d505      	bpl.n	8019fee <_fwalk_sglue+0x22>
 8019fe2:	6824      	ldr	r4, [r4, #0]
 8019fe4:	2c00      	cmp	r4, #0
 8019fe6:	d1f7      	bne.n	8019fd8 <_fwalk_sglue+0xc>
 8019fe8:	4630      	mov	r0, r6
 8019fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019fee:	89ab      	ldrh	r3, [r5, #12]
 8019ff0:	2b01      	cmp	r3, #1
 8019ff2:	d907      	bls.n	801a004 <_fwalk_sglue+0x38>
 8019ff4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019ff8:	3301      	adds	r3, #1
 8019ffa:	d003      	beq.n	801a004 <_fwalk_sglue+0x38>
 8019ffc:	4629      	mov	r1, r5
 8019ffe:	4638      	mov	r0, r7
 801a000:	47c0      	blx	r8
 801a002:	4306      	orrs	r6, r0
 801a004:	3568      	adds	r5, #104	@ 0x68
 801a006:	e7e9      	b.n	8019fdc <_fwalk_sglue+0x10>

0801a008 <iprintf>:
 801a008:	b40f      	push	{r0, r1, r2, r3}
 801a00a:	b507      	push	{r0, r1, r2, lr}
 801a00c:	4906      	ldr	r1, [pc, #24]	@ (801a028 <iprintf+0x20>)
 801a00e:	ab04      	add	r3, sp, #16
 801a010:	6808      	ldr	r0, [r1, #0]
 801a012:	f853 2b04 	ldr.w	r2, [r3], #4
 801a016:	6881      	ldr	r1, [r0, #8]
 801a018:	9301      	str	r3, [sp, #4]
 801a01a:	f000 fb77 	bl	801a70c <_vfiprintf_r>
 801a01e:	b003      	add	sp, #12
 801a020:	f85d eb04 	ldr.w	lr, [sp], #4
 801a024:	b004      	add	sp, #16
 801a026:	4770      	bx	lr
 801a028:	2000003c 	.word	0x2000003c

0801a02c <_puts_r>:
 801a02c:	6a03      	ldr	r3, [r0, #32]
 801a02e:	b570      	push	{r4, r5, r6, lr}
 801a030:	6884      	ldr	r4, [r0, #8]
 801a032:	4605      	mov	r5, r0
 801a034:	460e      	mov	r6, r1
 801a036:	b90b      	cbnz	r3, 801a03c <_puts_r+0x10>
 801a038:	f7ff ffb0 	bl	8019f9c <__sinit>
 801a03c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a03e:	07db      	lsls	r3, r3, #31
 801a040:	d405      	bmi.n	801a04e <_puts_r+0x22>
 801a042:	89a3      	ldrh	r3, [r4, #12]
 801a044:	0598      	lsls	r0, r3, #22
 801a046:	d402      	bmi.n	801a04e <_puts_r+0x22>
 801a048:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a04a:	f000 fa06 	bl	801a45a <__retarget_lock_acquire_recursive>
 801a04e:	89a3      	ldrh	r3, [r4, #12]
 801a050:	0719      	lsls	r1, r3, #28
 801a052:	d502      	bpl.n	801a05a <_puts_r+0x2e>
 801a054:	6923      	ldr	r3, [r4, #16]
 801a056:	2b00      	cmp	r3, #0
 801a058:	d135      	bne.n	801a0c6 <_puts_r+0x9a>
 801a05a:	4621      	mov	r1, r4
 801a05c:	4628      	mov	r0, r5
 801a05e:	f000 f8c5 	bl	801a1ec <__swsetup_r>
 801a062:	b380      	cbz	r0, 801a0c6 <_puts_r+0x9a>
 801a064:	f04f 35ff 	mov.w	r5, #4294967295
 801a068:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a06a:	07da      	lsls	r2, r3, #31
 801a06c:	d405      	bmi.n	801a07a <_puts_r+0x4e>
 801a06e:	89a3      	ldrh	r3, [r4, #12]
 801a070:	059b      	lsls	r3, r3, #22
 801a072:	d402      	bmi.n	801a07a <_puts_r+0x4e>
 801a074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a076:	f000 f9f1 	bl	801a45c <__retarget_lock_release_recursive>
 801a07a:	4628      	mov	r0, r5
 801a07c:	bd70      	pop	{r4, r5, r6, pc}
 801a07e:	2b00      	cmp	r3, #0
 801a080:	da04      	bge.n	801a08c <_puts_r+0x60>
 801a082:	69a2      	ldr	r2, [r4, #24]
 801a084:	429a      	cmp	r2, r3
 801a086:	dc17      	bgt.n	801a0b8 <_puts_r+0x8c>
 801a088:	290a      	cmp	r1, #10
 801a08a:	d015      	beq.n	801a0b8 <_puts_r+0x8c>
 801a08c:	6823      	ldr	r3, [r4, #0]
 801a08e:	1c5a      	adds	r2, r3, #1
 801a090:	6022      	str	r2, [r4, #0]
 801a092:	7019      	strb	r1, [r3, #0]
 801a094:	68a3      	ldr	r3, [r4, #8]
 801a096:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a09a:	3b01      	subs	r3, #1
 801a09c:	60a3      	str	r3, [r4, #8]
 801a09e:	2900      	cmp	r1, #0
 801a0a0:	d1ed      	bne.n	801a07e <_puts_r+0x52>
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	da11      	bge.n	801a0ca <_puts_r+0x9e>
 801a0a6:	4622      	mov	r2, r4
 801a0a8:	210a      	movs	r1, #10
 801a0aa:	4628      	mov	r0, r5
 801a0ac:	f000 f85f 	bl	801a16e <__swbuf_r>
 801a0b0:	3001      	adds	r0, #1
 801a0b2:	d0d7      	beq.n	801a064 <_puts_r+0x38>
 801a0b4:	250a      	movs	r5, #10
 801a0b6:	e7d7      	b.n	801a068 <_puts_r+0x3c>
 801a0b8:	4622      	mov	r2, r4
 801a0ba:	4628      	mov	r0, r5
 801a0bc:	f000 f857 	bl	801a16e <__swbuf_r>
 801a0c0:	3001      	adds	r0, #1
 801a0c2:	d1e7      	bne.n	801a094 <_puts_r+0x68>
 801a0c4:	e7ce      	b.n	801a064 <_puts_r+0x38>
 801a0c6:	3e01      	subs	r6, #1
 801a0c8:	e7e4      	b.n	801a094 <_puts_r+0x68>
 801a0ca:	6823      	ldr	r3, [r4, #0]
 801a0cc:	1c5a      	adds	r2, r3, #1
 801a0ce:	6022      	str	r2, [r4, #0]
 801a0d0:	220a      	movs	r2, #10
 801a0d2:	701a      	strb	r2, [r3, #0]
 801a0d4:	e7ee      	b.n	801a0b4 <_puts_r+0x88>
	...

0801a0d8 <puts>:
 801a0d8:	4b02      	ldr	r3, [pc, #8]	@ (801a0e4 <puts+0xc>)
 801a0da:	4601      	mov	r1, r0
 801a0dc:	6818      	ldr	r0, [r3, #0]
 801a0de:	f7ff bfa5 	b.w	801a02c <_puts_r>
 801a0e2:	bf00      	nop
 801a0e4:	2000003c 	.word	0x2000003c

0801a0e8 <__sread>:
 801a0e8:	b510      	push	{r4, lr}
 801a0ea:	460c      	mov	r4, r1
 801a0ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0f0:	f000 f96a 	bl	801a3c8 <_read_r>
 801a0f4:	2800      	cmp	r0, #0
 801a0f6:	bfab      	itete	ge
 801a0f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a0fa:	89a3      	ldrhlt	r3, [r4, #12]
 801a0fc:	181b      	addge	r3, r3, r0
 801a0fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a102:	bfac      	ite	ge
 801a104:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a106:	81a3      	strhlt	r3, [r4, #12]
 801a108:	bd10      	pop	{r4, pc}

0801a10a <__swrite>:
 801a10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a10e:	461f      	mov	r7, r3
 801a110:	898b      	ldrh	r3, [r1, #12]
 801a112:	05db      	lsls	r3, r3, #23
 801a114:	4605      	mov	r5, r0
 801a116:	460c      	mov	r4, r1
 801a118:	4616      	mov	r6, r2
 801a11a:	d505      	bpl.n	801a128 <__swrite+0x1e>
 801a11c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a120:	2302      	movs	r3, #2
 801a122:	2200      	movs	r2, #0
 801a124:	f000 f93e 	bl	801a3a4 <_lseek_r>
 801a128:	89a3      	ldrh	r3, [r4, #12]
 801a12a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a12e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a132:	81a3      	strh	r3, [r4, #12]
 801a134:	4632      	mov	r2, r6
 801a136:	463b      	mov	r3, r7
 801a138:	4628      	mov	r0, r5
 801a13a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a13e:	f000 b955 	b.w	801a3ec <_write_r>

0801a142 <__sseek>:
 801a142:	b510      	push	{r4, lr}
 801a144:	460c      	mov	r4, r1
 801a146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a14a:	f000 f92b 	bl	801a3a4 <_lseek_r>
 801a14e:	1c43      	adds	r3, r0, #1
 801a150:	89a3      	ldrh	r3, [r4, #12]
 801a152:	bf15      	itete	ne
 801a154:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a156:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a15a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a15e:	81a3      	strheq	r3, [r4, #12]
 801a160:	bf18      	it	ne
 801a162:	81a3      	strhne	r3, [r4, #12]
 801a164:	bd10      	pop	{r4, pc}

0801a166 <__sclose>:
 801a166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a16a:	f000 b8ad 	b.w	801a2c8 <_close_r>

0801a16e <__swbuf_r>:
 801a16e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a170:	460e      	mov	r6, r1
 801a172:	4614      	mov	r4, r2
 801a174:	4605      	mov	r5, r0
 801a176:	b118      	cbz	r0, 801a180 <__swbuf_r+0x12>
 801a178:	6a03      	ldr	r3, [r0, #32]
 801a17a:	b90b      	cbnz	r3, 801a180 <__swbuf_r+0x12>
 801a17c:	f7ff ff0e 	bl	8019f9c <__sinit>
 801a180:	69a3      	ldr	r3, [r4, #24]
 801a182:	60a3      	str	r3, [r4, #8]
 801a184:	89a3      	ldrh	r3, [r4, #12]
 801a186:	071a      	lsls	r2, r3, #28
 801a188:	d501      	bpl.n	801a18e <__swbuf_r+0x20>
 801a18a:	6923      	ldr	r3, [r4, #16]
 801a18c:	b943      	cbnz	r3, 801a1a0 <__swbuf_r+0x32>
 801a18e:	4621      	mov	r1, r4
 801a190:	4628      	mov	r0, r5
 801a192:	f000 f82b 	bl	801a1ec <__swsetup_r>
 801a196:	b118      	cbz	r0, 801a1a0 <__swbuf_r+0x32>
 801a198:	f04f 37ff 	mov.w	r7, #4294967295
 801a19c:	4638      	mov	r0, r7
 801a19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a1a0:	6823      	ldr	r3, [r4, #0]
 801a1a2:	6922      	ldr	r2, [r4, #16]
 801a1a4:	1a98      	subs	r0, r3, r2
 801a1a6:	6963      	ldr	r3, [r4, #20]
 801a1a8:	b2f6      	uxtb	r6, r6
 801a1aa:	4283      	cmp	r3, r0
 801a1ac:	4637      	mov	r7, r6
 801a1ae:	dc05      	bgt.n	801a1bc <__swbuf_r+0x4e>
 801a1b0:	4621      	mov	r1, r4
 801a1b2:	4628      	mov	r0, r5
 801a1b4:	f000 fdd2 	bl	801ad5c <_fflush_r>
 801a1b8:	2800      	cmp	r0, #0
 801a1ba:	d1ed      	bne.n	801a198 <__swbuf_r+0x2a>
 801a1bc:	68a3      	ldr	r3, [r4, #8]
 801a1be:	3b01      	subs	r3, #1
 801a1c0:	60a3      	str	r3, [r4, #8]
 801a1c2:	6823      	ldr	r3, [r4, #0]
 801a1c4:	1c5a      	adds	r2, r3, #1
 801a1c6:	6022      	str	r2, [r4, #0]
 801a1c8:	701e      	strb	r6, [r3, #0]
 801a1ca:	6962      	ldr	r2, [r4, #20]
 801a1cc:	1c43      	adds	r3, r0, #1
 801a1ce:	429a      	cmp	r2, r3
 801a1d0:	d004      	beq.n	801a1dc <__swbuf_r+0x6e>
 801a1d2:	89a3      	ldrh	r3, [r4, #12]
 801a1d4:	07db      	lsls	r3, r3, #31
 801a1d6:	d5e1      	bpl.n	801a19c <__swbuf_r+0x2e>
 801a1d8:	2e0a      	cmp	r6, #10
 801a1da:	d1df      	bne.n	801a19c <__swbuf_r+0x2e>
 801a1dc:	4621      	mov	r1, r4
 801a1de:	4628      	mov	r0, r5
 801a1e0:	f000 fdbc 	bl	801ad5c <_fflush_r>
 801a1e4:	2800      	cmp	r0, #0
 801a1e6:	d0d9      	beq.n	801a19c <__swbuf_r+0x2e>
 801a1e8:	e7d6      	b.n	801a198 <__swbuf_r+0x2a>
	...

0801a1ec <__swsetup_r>:
 801a1ec:	b538      	push	{r3, r4, r5, lr}
 801a1ee:	4b29      	ldr	r3, [pc, #164]	@ (801a294 <__swsetup_r+0xa8>)
 801a1f0:	4605      	mov	r5, r0
 801a1f2:	6818      	ldr	r0, [r3, #0]
 801a1f4:	460c      	mov	r4, r1
 801a1f6:	b118      	cbz	r0, 801a200 <__swsetup_r+0x14>
 801a1f8:	6a03      	ldr	r3, [r0, #32]
 801a1fa:	b90b      	cbnz	r3, 801a200 <__swsetup_r+0x14>
 801a1fc:	f7ff fece 	bl	8019f9c <__sinit>
 801a200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a204:	0719      	lsls	r1, r3, #28
 801a206:	d422      	bmi.n	801a24e <__swsetup_r+0x62>
 801a208:	06da      	lsls	r2, r3, #27
 801a20a:	d407      	bmi.n	801a21c <__swsetup_r+0x30>
 801a20c:	2209      	movs	r2, #9
 801a20e:	602a      	str	r2, [r5, #0]
 801a210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a214:	81a3      	strh	r3, [r4, #12]
 801a216:	f04f 30ff 	mov.w	r0, #4294967295
 801a21a:	e033      	b.n	801a284 <__swsetup_r+0x98>
 801a21c:	0758      	lsls	r0, r3, #29
 801a21e:	d512      	bpl.n	801a246 <__swsetup_r+0x5a>
 801a220:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a222:	b141      	cbz	r1, 801a236 <__swsetup_r+0x4a>
 801a224:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a228:	4299      	cmp	r1, r3
 801a22a:	d002      	beq.n	801a232 <__swsetup_r+0x46>
 801a22c:	4628      	mov	r0, r5
 801a22e:	f000 f943 	bl	801a4b8 <_free_r>
 801a232:	2300      	movs	r3, #0
 801a234:	6363      	str	r3, [r4, #52]	@ 0x34
 801a236:	89a3      	ldrh	r3, [r4, #12]
 801a238:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a23c:	81a3      	strh	r3, [r4, #12]
 801a23e:	2300      	movs	r3, #0
 801a240:	6063      	str	r3, [r4, #4]
 801a242:	6923      	ldr	r3, [r4, #16]
 801a244:	6023      	str	r3, [r4, #0]
 801a246:	89a3      	ldrh	r3, [r4, #12]
 801a248:	f043 0308 	orr.w	r3, r3, #8
 801a24c:	81a3      	strh	r3, [r4, #12]
 801a24e:	6923      	ldr	r3, [r4, #16]
 801a250:	b94b      	cbnz	r3, 801a266 <__swsetup_r+0x7a>
 801a252:	89a3      	ldrh	r3, [r4, #12]
 801a254:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801a258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a25c:	d003      	beq.n	801a266 <__swsetup_r+0x7a>
 801a25e:	4621      	mov	r1, r4
 801a260:	4628      	mov	r0, r5
 801a262:	f000 fddb 	bl	801ae1c <__smakebuf_r>
 801a266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a26a:	f013 0201 	ands.w	r2, r3, #1
 801a26e:	d00a      	beq.n	801a286 <__swsetup_r+0x9a>
 801a270:	2200      	movs	r2, #0
 801a272:	60a2      	str	r2, [r4, #8]
 801a274:	6962      	ldr	r2, [r4, #20]
 801a276:	4252      	negs	r2, r2
 801a278:	61a2      	str	r2, [r4, #24]
 801a27a:	6922      	ldr	r2, [r4, #16]
 801a27c:	b942      	cbnz	r2, 801a290 <__swsetup_r+0xa4>
 801a27e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a282:	d1c5      	bne.n	801a210 <__swsetup_r+0x24>
 801a284:	bd38      	pop	{r3, r4, r5, pc}
 801a286:	0799      	lsls	r1, r3, #30
 801a288:	bf58      	it	pl
 801a28a:	6962      	ldrpl	r2, [r4, #20]
 801a28c:	60a2      	str	r2, [r4, #8]
 801a28e:	e7f4      	b.n	801a27a <__swsetup_r+0x8e>
 801a290:	2000      	movs	r0, #0
 801a292:	e7f7      	b.n	801a284 <__swsetup_r+0x98>
 801a294:	2000003c 	.word	0x2000003c

0801a298 <memcmp>:
 801a298:	b510      	push	{r4, lr}
 801a29a:	3901      	subs	r1, #1
 801a29c:	4402      	add	r2, r0
 801a29e:	4290      	cmp	r0, r2
 801a2a0:	d101      	bne.n	801a2a6 <memcmp+0xe>
 801a2a2:	2000      	movs	r0, #0
 801a2a4:	e005      	b.n	801a2b2 <memcmp+0x1a>
 801a2a6:	7803      	ldrb	r3, [r0, #0]
 801a2a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a2ac:	42a3      	cmp	r3, r4
 801a2ae:	d001      	beq.n	801a2b4 <memcmp+0x1c>
 801a2b0:	1b18      	subs	r0, r3, r4
 801a2b2:	bd10      	pop	{r4, pc}
 801a2b4:	3001      	adds	r0, #1
 801a2b6:	e7f2      	b.n	801a29e <memcmp+0x6>

0801a2b8 <memset>:
 801a2b8:	4402      	add	r2, r0
 801a2ba:	4603      	mov	r3, r0
 801a2bc:	4293      	cmp	r3, r2
 801a2be:	d100      	bne.n	801a2c2 <memset+0xa>
 801a2c0:	4770      	bx	lr
 801a2c2:	f803 1b01 	strb.w	r1, [r3], #1
 801a2c6:	e7f9      	b.n	801a2bc <memset+0x4>

0801a2c8 <_close_r>:
 801a2c8:	b538      	push	{r3, r4, r5, lr}
 801a2ca:	4d06      	ldr	r5, [pc, #24]	@ (801a2e4 <_close_r+0x1c>)
 801a2cc:	2300      	movs	r3, #0
 801a2ce:	4604      	mov	r4, r0
 801a2d0:	4608      	mov	r0, r1
 801a2d2:	602b      	str	r3, [r5, #0]
 801a2d4:	f7e7 fc24 	bl	8001b20 <_close>
 801a2d8:	1c43      	adds	r3, r0, #1
 801a2da:	d102      	bne.n	801a2e2 <_close_r+0x1a>
 801a2dc:	682b      	ldr	r3, [r5, #0]
 801a2de:	b103      	cbz	r3, 801a2e2 <_close_r+0x1a>
 801a2e0:	6023      	str	r3, [r4, #0]
 801a2e2:	bd38      	pop	{r3, r4, r5, pc}
 801a2e4:	20027758 	.word	0x20027758

0801a2e8 <_reclaim_reent>:
 801a2e8:	4b2d      	ldr	r3, [pc, #180]	@ (801a3a0 <_reclaim_reent+0xb8>)
 801a2ea:	681b      	ldr	r3, [r3, #0]
 801a2ec:	4283      	cmp	r3, r0
 801a2ee:	b570      	push	{r4, r5, r6, lr}
 801a2f0:	4604      	mov	r4, r0
 801a2f2:	d053      	beq.n	801a39c <_reclaim_reent+0xb4>
 801a2f4:	69c3      	ldr	r3, [r0, #28]
 801a2f6:	b31b      	cbz	r3, 801a340 <_reclaim_reent+0x58>
 801a2f8:	68db      	ldr	r3, [r3, #12]
 801a2fa:	b163      	cbz	r3, 801a316 <_reclaim_reent+0x2e>
 801a2fc:	2500      	movs	r5, #0
 801a2fe:	69e3      	ldr	r3, [r4, #28]
 801a300:	68db      	ldr	r3, [r3, #12]
 801a302:	5959      	ldr	r1, [r3, r5]
 801a304:	b9b1      	cbnz	r1, 801a334 <_reclaim_reent+0x4c>
 801a306:	3504      	adds	r5, #4
 801a308:	2d80      	cmp	r5, #128	@ 0x80
 801a30a:	d1f8      	bne.n	801a2fe <_reclaim_reent+0x16>
 801a30c:	69e3      	ldr	r3, [r4, #28]
 801a30e:	4620      	mov	r0, r4
 801a310:	68d9      	ldr	r1, [r3, #12]
 801a312:	f000 f8d1 	bl	801a4b8 <_free_r>
 801a316:	69e3      	ldr	r3, [r4, #28]
 801a318:	6819      	ldr	r1, [r3, #0]
 801a31a:	b111      	cbz	r1, 801a322 <_reclaim_reent+0x3a>
 801a31c:	4620      	mov	r0, r4
 801a31e:	f000 f8cb 	bl	801a4b8 <_free_r>
 801a322:	69e3      	ldr	r3, [r4, #28]
 801a324:	689d      	ldr	r5, [r3, #8]
 801a326:	b15d      	cbz	r5, 801a340 <_reclaim_reent+0x58>
 801a328:	4629      	mov	r1, r5
 801a32a:	4620      	mov	r0, r4
 801a32c:	682d      	ldr	r5, [r5, #0]
 801a32e:	f000 f8c3 	bl	801a4b8 <_free_r>
 801a332:	e7f8      	b.n	801a326 <_reclaim_reent+0x3e>
 801a334:	680e      	ldr	r6, [r1, #0]
 801a336:	4620      	mov	r0, r4
 801a338:	f000 f8be 	bl	801a4b8 <_free_r>
 801a33c:	4631      	mov	r1, r6
 801a33e:	e7e1      	b.n	801a304 <_reclaim_reent+0x1c>
 801a340:	6961      	ldr	r1, [r4, #20]
 801a342:	b111      	cbz	r1, 801a34a <_reclaim_reent+0x62>
 801a344:	4620      	mov	r0, r4
 801a346:	f000 f8b7 	bl	801a4b8 <_free_r>
 801a34a:	69e1      	ldr	r1, [r4, #28]
 801a34c:	b111      	cbz	r1, 801a354 <_reclaim_reent+0x6c>
 801a34e:	4620      	mov	r0, r4
 801a350:	f000 f8b2 	bl	801a4b8 <_free_r>
 801a354:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a356:	b111      	cbz	r1, 801a35e <_reclaim_reent+0x76>
 801a358:	4620      	mov	r0, r4
 801a35a:	f000 f8ad 	bl	801a4b8 <_free_r>
 801a35e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a360:	b111      	cbz	r1, 801a368 <_reclaim_reent+0x80>
 801a362:	4620      	mov	r0, r4
 801a364:	f000 f8a8 	bl	801a4b8 <_free_r>
 801a368:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801a36a:	b111      	cbz	r1, 801a372 <_reclaim_reent+0x8a>
 801a36c:	4620      	mov	r0, r4
 801a36e:	f000 f8a3 	bl	801a4b8 <_free_r>
 801a372:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801a374:	b111      	cbz	r1, 801a37c <_reclaim_reent+0x94>
 801a376:	4620      	mov	r0, r4
 801a378:	f000 f89e 	bl	801a4b8 <_free_r>
 801a37c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801a37e:	b111      	cbz	r1, 801a386 <_reclaim_reent+0x9e>
 801a380:	4620      	mov	r0, r4
 801a382:	f000 f899 	bl	801a4b8 <_free_r>
 801a386:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801a388:	b111      	cbz	r1, 801a390 <_reclaim_reent+0xa8>
 801a38a:	4620      	mov	r0, r4
 801a38c:	f000 f894 	bl	801a4b8 <_free_r>
 801a390:	6a23      	ldr	r3, [r4, #32]
 801a392:	b11b      	cbz	r3, 801a39c <_reclaim_reent+0xb4>
 801a394:	4620      	mov	r0, r4
 801a396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a39a:	4718      	bx	r3
 801a39c:	bd70      	pop	{r4, r5, r6, pc}
 801a39e:	bf00      	nop
 801a3a0:	2000003c 	.word	0x2000003c

0801a3a4 <_lseek_r>:
 801a3a4:	b538      	push	{r3, r4, r5, lr}
 801a3a6:	4d07      	ldr	r5, [pc, #28]	@ (801a3c4 <_lseek_r+0x20>)
 801a3a8:	4604      	mov	r4, r0
 801a3aa:	4608      	mov	r0, r1
 801a3ac:	4611      	mov	r1, r2
 801a3ae:	2200      	movs	r2, #0
 801a3b0:	602a      	str	r2, [r5, #0]
 801a3b2:	461a      	mov	r2, r3
 801a3b4:	f7e7 fbdb 	bl	8001b6e <_lseek>
 801a3b8:	1c43      	adds	r3, r0, #1
 801a3ba:	d102      	bne.n	801a3c2 <_lseek_r+0x1e>
 801a3bc:	682b      	ldr	r3, [r5, #0]
 801a3be:	b103      	cbz	r3, 801a3c2 <_lseek_r+0x1e>
 801a3c0:	6023      	str	r3, [r4, #0]
 801a3c2:	bd38      	pop	{r3, r4, r5, pc}
 801a3c4:	20027758 	.word	0x20027758

0801a3c8 <_read_r>:
 801a3c8:	b538      	push	{r3, r4, r5, lr}
 801a3ca:	4d07      	ldr	r5, [pc, #28]	@ (801a3e8 <_read_r+0x20>)
 801a3cc:	4604      	mov	r4, r0
 801a3ce:	4608      	mov	r0, r1
 801a3d0:	4611      	mov	r1, r2
 801a3d2:	2200      	movs	r2, #0
 801a3d4:	602a      	str	r2, [r5, #0]
 801a3d6:	461a      	mov	r2, r3
 801a3d8:	f7e7 fb69 	bl	8001aae <_read>
 801a3dc:	1c43      	adds	r3, r0, #1
 801a3de:	d102      	bne.n	801a3e6 <_read_r+0x1e>
 801a3e0:	682b      	ldr	r3, [r5, #0]
 801a3e2:	b103      	cbz	r3, 801a3e6 <_read_r+0x1e>
 801a3e4:	6023      	str	r3, [r4, #0]
 801a3e6:	bd38      	pop	{r3, r4, r5, pc}
 801a3e8:	20027758 	.word	0x20027758

0801a3ec <_write_r>:
 801a3ec:	b538      	push	{r3, r4, r5, lr}
 801a3ee:	4d07      	ldr	r5, [pc, #28]	@ (801a40c <_write_r+0x20>)
 801a3f0:	4604      	mov	r4, r0
 801a3f2:	4608      	mov	r0, r1
 801a3f4:	4611      	mov	r1, r2
 801a3f6:	2200      	movs	r2, #0
 801a3f8:	602a      	str	r2, [r5, #0]
 801a3fa:	461a      	mov	r2, r3
 801a3fc:	f7e7 fb74 	bl	8001ae8 <_write>
 801a400:	1c43      	adds	r3, r0, #1
 801a402:	d102      	bne.n	801a40a <_write_r+0x1e>
 801a404:	682b      	ldr	r3, [r5, #0]
 801a406:	b103      	cbz	r3, 801a40a <_write_r+0x1e>
 801a408:	6023      	str	r3, [r4, #0]
 801a40a:	bd38      	pop	{r3, r4, r5, pc}
 801a40c:	20027758 	.word	0x20027758

0801a410 <__libc_init_array>:
 801a410:	b570      	push	{r4, r5, r6, lr}
 801a412:	4d0d      	ldr	r5, [pc, #52]	@ (801a448 <__libc_init_array+0x38>)
 801a414:	4c0d      	ldr	r4, [pc, #52]	@ (801a44c <__libc_init_array+0x3c>)
 801a416:	1b64      	subs	r4, r4, r5
 801a418:	10a4      	asrs	r4, r4, #2
 801a41a:	2600      	movs	r6, #0
 801a41c:	42a6      	cmp	r6, r4
 801a41e:	d109      	bne.n	801a434 <__libc_init_array+0x24>
 801a420:	4d0b      	ldr	r5, [pc, #44]	@ (801a450 <__libc_init_array+0x40>)
 801a422:	4c0c      	ldr	r4, [pc, #48]	@ (801a454 <__libc_init_array+0x44>)
 801a424:	f000 fdb4 	bl	801af90 <_init>
 801a428:	1b64      	subs	r4, r4, r5
 801a42a:	10a4      	asrs	r4, r4, #2
 801a42c:	2600      	movs	r6, #0
 801a42e:	42a6      	cmp	r6, r4
 801a430:	d105      	bne.n	801a43e <__libc_init_array+0x2e>
 801a432:	bd70      	pop	{r4, r5, r6, pc}
 801a434:	f855 3b04 	ldr.w	r3, [r5], #4
 801a438:	4798      	blx	r3
 801a43a:	3601      	adds	r6, #1
 801a43c:	e7ee      	b.n	801a41c <__libc_init_array+0xc>
 801a43e:	f855 3b04 	ldr.w	r3, [r5], #4
 801a442:	4798      	blx	r3
 801a444:	3601      	adds	r6, #1
 801a446:	e7f2      	b.n	801a42e <__libc_init_array+0x1e>
 801a448:	0801e3b0 	.word	0x0801e3b0
 801a44c:	0801e3b0 	.word	0x0801e3b0
 801a450:	0801e3b0 	.word	0x0801e3b0
 801a454:	0801e3b4 	.word	0x0801e3b4

0801a458 <__retarget_lock_init_recursive>:
 801a458:	4770      	bx	lr

0801a45a <__retarget_lock_acquire_recursive>:
 801a45a:	4770      	bx	lr

0801a45c <__retarget_lock_release_recursive>:
 801a45c:	4770      	bx	lr

0801a45e <memcpy>:
 801a45e:	440a      	add	r2, r1
 801a460:	4291      	cmp	r1, r2
 801a462:	f100 33ff 	add.w	r3, r0, #4294967295
 801a466:	d100      	bne.n	801a46a <memcpy+0xc>
 801a468:	4770      	bx	lr
 801a46a:	b510      	push	{r4, lr}
 801a46c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a470:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a474:	4291      	cmp	r1, r2
 801a476:	d1f9      	bne.n	801a46c <memcpy+0xe>
 801a478:	bd10      	pop	{r4, pc}
	...

0801a47c <__assert_func>:
 801a47c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a47e:	4614      	mov	r4, r2
 801a480:	461a      	mov	r2, r3
 801a482:	4b09      	ldr	r3, [pc, #36]	@ (801a4a8 <__assert_func+0x2c>)
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	4605      	mov	r5, r0
 801a488:	68d8      	ldr	r0, [r3, #12]
 801a48a:	b14c      	cbz	r4, 801a4a0 <__assert_func+0x24>
 801a48c:	4b07      	ldr	r3, [pc, #28]	@ (801a4ac <__assert_func+0x30>)
 801a48e:	9100      	str	r1, [sp, #0]
 801a490:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a494:	4906      	ldr	r1, [pc, #24]	@ (801a4b0 <__assert_func+0x34>)
 801a496:	462b      	mov	r3, r5
 801a498:	f000 fc88 	bl	801adac <fiprintf>
 801a49c:	f000 fd2c 	bl	801aef8 <abort>
 801a4a0:	4b04      	ldr	r3, [pc, #16]	@ (801a4b4 <__assert_func+0x38>)
 801a4a2:	461c      	mov	r4, r3
 801a4a4:	e7f3      	b.n	801a48e <__assert_func+0x12>
 801a4a6:	bf00      	nop
 801a4a8:	2000003c 	.word	0x2000003c
 801a4ac:	0801e339 	.word	0x0801e339
 801a4b0:	0801e346 	.word	0x0801e346
 801a4b4:	0801e374 	.word	0x0801e374

0801a4b8 <_free_r>:
 801a4b8:	b538      	push	{r3, r4, r5, lr}
 801a4ba:	4605      	mov	r5, r0
 801a4bc:	2900      	cmp	r1, #0
 801a4be:	d041      	beq.n	801a544 <_free_r+0x8c>
 801a4c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a4c4:	1f0c      	subs	r4, r1, #4
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	bfb8      	it	lt
 801a4ca:	18e4      	addlt	r4, r4, r3
 801a4cc:	f000 f8e8 	bl	801a6a0 <__malloc_lock>
 801a4d0:	4a1d      	ldr	r2, [pc, #116]	@ (801a548 <_free_r+0x90>)
 801a4d2:	6813      	ldr	r3, [r2, #0]
 801a4d4:	b933      	cbnz	r3, 801a4e4 <_free_r+0x2c>
 801a4d6:	6063      	str	r3, [r4, #4]
 801a4d8:	6014      	str	r4, [r2, #0]
 801a4da:	4628      	mov	r0, r5
 801a4dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a4e0:	f000 b8e4 	b.w	801a6ac <__malloc_unlock>
 801a4e4:	42a3      	cmp	r3, r4
 801a4e6:	d908      	bls.n	801a4fa <_free_r+0x42>
 801a4e8:	6820      	ldr	r0, [r4, #0]
 801a4ea:	1821      	adds	r1, r4, r0
 801a4ec:	428b      	cmp	r3, r1
 801a4ee:	bf01      	itttt	eq
 801a4f0:	6819      	ldreq	r1, [r3, #0]
 801a4f2:	685b      	ldreq	r3, [r3, #4]
 801a4f4:	1809      	addeq	r1, r1, r0
 801a4f6:	6021      	streq	r1, [r4, #0]
 801a4f8:	e7ed      	b.n	801a4d6 <_free_r+0x1e>
 801a4fa:	461a      	mov	r2, r3
 801a4fc:	685b      	ldr	r3, [r3, #4]
 801a4fe:	b10b      	cbz	r3, 801a504 <_free_r+0x4c>
 801a500:	42a3      	cmp	r3, r4
 801a502:	d9fa      	bls.n	801a4fa <_free_r+0x42>
 801a504:	6811      	ldr	r1, [r2, #0]
 801a506:	1850      	adds	r0, r2, r1
 801a508:	42a0      	cmp	r0, r4
 801a50a:	d10b      	bne.n	801a524 <_free_r+0x6c>
 801a50c:	6820      	ldr	r0, [r4, #0]
 801a50e:	4401      	add	r1, r0
 801a510:	1850      	adds	r0, r2, r1
 801a512:	4283      	cmp	r3, r0
 801a514:	6011      	str	r1, [r2, #0]
 801a516:	d1e0      	bne.n	801a4da <_free_r+0x22>
 801a518:	6818      	ldr	r0, [r3, #0]
 801a51a:	685b      	ldr	r3, [r3, #4]
 801a51c:	6053      	str	r3, [r2, #4]
 801a51e:	4408      	add	r0, r1
 801a520:	6010      	str	r0, [r2, #0]
 801a522:	e7da      	b.n	801a4da <_free_r+0x22>
 801a524:	d902      	bls.n	801a52c <_free_r+0x74>
 801a526:	230c      	movs	r3, #12
 801a528:	602b      	str	r3, [r5, #0]
 801a52a:	e7d6      	b.n	801a4da <_free_r+0x22>
 801a52c:	6820      	ldr	r0, [r4, #0]
 801a52e:	1821      	adds	r1, r4, r0
 801a530:	428b      	cmp	r3, r1
 801a532:	bf04      	itt	eq
 801a534:	6819      	ldreq	r1, [r3, #0]
 801a536:	685b      	ldreq	r3, [r3, #4]
 801a538:	6063      	str	r3, [r4, #4]
 801a53a:	bf04      	itt	eq
 801a53c:	1809      	addeq	r1, r1, r0
 801a53e:	6021      	streq	r1, [r4, #0]
 801a540:	6054      	str	r4, [r2, #4]
 801a542:	e7ca      	b.n	801a4da <_free_r+0x22>
 801a544:	bd38      	pop	{r3, r4, r5, pc}
 801a546:	bf00      	nop
 801a548:	20027764 	.word	0x20027764

0801a54c <malloc>:
 801a54c:	4b02      	ldr	r3, [pc, #8]	@ (801a558 <malloc+0xc>)
 801a54e:	4601      	mov	r1, r0
 801a550:	6818      	ldr	r0, [r3, #0]
 801a552:	f000 b825 	b.w	801a5a0 <_malloc_r>
 801a556:	bf00      	nop
 801a558:	2000003c 	.word	0x2000003c

0801a55c <sbrk_aligned>:
 801a55c:	b570      	push	{r4, r5, r6, lr}
 801a55e:	4e0f      	ldr	r6, [pc, #60]	@ (801a59c <sbrk_aligned+0x40>)
 801a560:	460c      	mov	r4, r1
 801a562:	6831      	ldr	r1, [r6, #0]
 801a564:	4605      	mov	r5, r0
 801a566:	b911      	cbnz	r1, 801a56e <sbrk_aligned+0x12>
 801a568:	f000 fcb6 	bl	801aed8 <_sbrk_r>
 801a56c:	6030      	str	r0, [r6, #0]
 801a56e:	4621      	mov	r1, r4
 801a570:	4628      	mov	r0, r5
 801a572:	f000 fcb1 	bl	801aed8 <_sbrk_r>
 801a576:	1c43      	adds	r3, r0, #1
 801a578:	d103      	bne.n	801a582 <sbrk_aligned+0x26>
 801a57a:	f04f 34ff 	mov.w	r4, #4294967295
 801a57e:	4620      	mov	r0, r4
 801a580:	bd70      	pop	{r4, r5, r6, pc}
 801a582:	1cc4      	adds	r4, r0, #3
 801a584:	f024 0403 	bic.w	r4, r4, #3
 801a588:	42a0      	cmp	r0, r4
 801a58a:	d0f8      	beq.n	801a57e <sbrk_aligned+0x22>
 801a58c:	1a21      	subs	r1, r4, r0
 801a58e:	4628      	mov	r0, r5
 801a590:	f000 fca2 	bl	801aed8 <_sbrk_r>
 801a594:	3001      	adds	r0, #1
 801a596:	d1f2      	bne.n	801a57e <sbrk_aligned+0x22>
 801a598:	e7ef      	b.n	801a57a <sbrk_aligned+0x1e>
 801a59a:	bf00      	nop
 801a59c:	20027760 	.word	0x20027760

0801a5a0 <_malloc_r>:
 801a5a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a5a4:	1ccd      	adds	r5, r1, #3
 801a5a6:	f025 0503 	bic.w	r5, r5, #3
 801a5aa:	3508      	adds	r5, #8
 801a5ac:	2d0c      	cmp	r5, #12
 801a5ae:	bf38      	it	cc
 801a5b0:	250c      	movcc	r5, #12
 801a5b2:	2d00      	cmp	r5, #0
 801a5b4:	4606      	mov	r6, r0
 801a5b6:	db01      	blt.n	801a5bc <_malloc_r+0x1c>
 801a5b8:	42a9      	cmp	r1, r5
 801a5ba:	d904      	bls.n	801a5c6 <_malloc_r+0x26>
 801a5bc:	230c      	movs	r3, #12
 801a5be:	6033      	str	r3, [r6, #0]
 801a5c0:	2000      	movs	r0, #0
 801a5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a5c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801a69c <_malloc_r+0xfc>
 801a5ca:	f000 f869 	bl	801a6a0 <__malloc_lock>
 801a5ce:	f8d8 3000 	ldr.w	r3, [r8]
 801a5d2:	461c      	mov	r4, r3
 801a5d4:	bb44      	cbnz	r4, 801a628 <_malloc_r+0x88>
 801a5d6:	4629      	mov	r1, r5
 801a5d8:	4630      	mov	r0, r6
 801a5da:	f7ff ffbf 	bl	801a55c <sbrk_aligned>
 801a5de:	1c43      	adds	r3, r0, #1
 801a5e0:	4604      	mov	r4, r0
 801a5e2:	d158      	bne.n	801a696 <_malloc_r+0xf6>
 801a5e4:	f8d8 4000 	ldr.w	r4, [r8]
 801a5e8:	4627      	mov	r7, r4
 801a5ea:	2f00      	cmp	r7, #0
 801a5ec:	d143      	bne.n	801a676 <_malloc_r+0xd6>
 801a5ee:	2c00      	cmp	r4, #0
 801a5f0:	d04b      	beq.n	801a68a <_malloc_r+0xea>
 801a5f2:	6823      	ldr	r3, [r4, #0]
 801a5f4:	4639      	mov	r1, r7
 801a5f6:	4630      	mov	r0, r6
 801a5f8:	eb04 0903 	add.w	r9, r4, r3
 801a5fc:	f000 fc6c 	bl	801aed8 <_sbrk_r>
 801a600:	4581      	cmp	r9, r0
 801a602:	d142      	bne.n	801a68a <_malloc_r+0xea>
 801a604:	6821      	ldr	r1, [r4, #0]
 801a606:	1a6d      	subs	r5, r5, r1
 801a608:	4629      	mov	r1, r5
 801a60a:	4630      	mov	r0, r6
 801a60c:	f7ff ffa6 	bl	801a55c <sbrk_aligned>
 801a610:	3001      	adds	r0, #1
 801a612:	d03a      	beq.n	801a68a <_malloc_r+0xea>
 801a614:	6823      	ldr	r3, [r4, #0]
 801a616:	442b      	add	r3, r5
 801a618:	6023      	str	r3, [r4, #0]
 801a61a:	f8d8 3000 	ldr.w	r3, [r8]
 801a61e:	685a      	ldr	r2, [r3, #4]
 801a620:	bb62      	cbnz	r2, 801a67c <_malloc_r+0xdc>
 801a622:	f8c8 7000 	str.w	r7, [r8]
 801a626:	e00f      	b.n	801a648 <_malloc_r+0xa8>
 801a628:	6822      	ldr	r2, [r4, #0]
 801a62a:	1b52      	subs	r2, r2, r5
 801a62c:	d420      	bmi.n	801a670 <_malloc_r+0xd0>
 801a62e:	2a0b      	cmp	r2, #11
 801a630:	d917      	bls.n	801a662 <_malloc_r+0xc2>
 801a632:	1961      	adds	r1, r4, r5
 801a634:	42a3      	cmp	r3, r4
 801a636:	6025      	str	r5, [r4, #0]
 801a638:	bf18      	it	ne
 801a63a:	6059      	strne	r1, [r3, #4]
 801a63c:	6863      	ldr	r3, [r4, #4]
 801a63e:	bf08      	it	eq
 801a640:	f8c8 1000 	streq.w	r1, [r8]
 801a644:	5162      	str	r2, [r4, r5]
 801a646:	604b      	str	r3, [r1, #4]
 801a648:	4630      	mov	r0, r6
 801a64a:	f000 f82f 	bl	801a6ac <__malloc_unlock>
 801a64e:	f104 000b 	add.w	r0, r4, #11
 801a652:	1d23      	adds	r3, r4, #4
 801a654:	f020 0007 	bic.w	r0, r0, #7
 801a658:	1ac2      	subs	r2, r0, r3
 801a65a:	bf1c      	itt	ne
 801a65c:	1a1b      	subne	r3, r3, r0
 801a65e:	50a3      	strne	r3, [r4, r2]
 801a660:	e7af      	b.n	801a5c2 <_malloc_r+0x22>
 801a662:	6862      	ldr	r2, [r4, #4]
 801a664:	42a3      	cmp	r3, r4
 801a666:	bf0c      	ite	eq
 801a668:	f8c8 2000 	streq.w	r2, [r8]
 801a66c:	605a      	strne	r2, [r3, #4]
 801a66e:	e7eb      	b.n	801a648 <_malloc_r+0xa8>
 801a670:	4623      	mov	r3, r4
 801a672:	6864      	ldr	r4, [r4, #4]
 801a674:	e7ae      	b.n	801a5d4 <_malloc_r+0x34>
 801a676:	463c      	mov	r4, r7
 801a678:	687f      	ldr	r7, [r7, #4]
 801a67a:	e7b6      	b.n	801a5ea <_malloc_r+0x4a>
 801a67c:	461a      	mov	r2, r3
 801a67e:	685b      	ldr	r3, [r3, #4]
 801a680:	42a3      	cmp	r3, r4
 801a682:	d1fb      	bne.n	801a67c <_malloc_r+0xdc>
 801a684:	2300      	movs	r3, #0
 801a686:	6053      	str	r3, [r2, #4]
 801a688:	e7de      	b.n	801a648 <_malloc_r+0xa8>
 801a68a:	230c      	movs	r3, #12
 801a68c:	6033      	str	r3, [r6, #0]
 801a68e:	4630      	mov	r0, r6
 801a690:	f000 f80c 	bl	801a6ac <__malloc_unlock>
 801a694:	e794      	b.n	801a5c0 <_malloc_r+0x20>
 801a696:	6005      	str	r5, [r0, #0]
 801a698:	e7d6      	b.n	801a648 <_malloc_r+0xa8>
 801a69a:	bf00      	nop
 801a69c:	20027764 	.word	0x20027764

0801a6a0 <__malloc_lock>:
 801a6a0:	4801      	ldr	r0, [pc, #4]	@ (801a6a8 <__malloc_lock+0x8>)
 801a6a2:	f7ff beda 	b.w	801a45a <__retarget_lock_acquire_recursive>
 801a6a6:	bf00      	nop
 801a6a8:	2002775c 	.word	0x2002775c

0801a6ac <__malloc_unlock>:
 801a6ac:	4801      	ldr	r0, [pc, #4]	@ (801a6b4 <__malloc_unlock+0x8>)
 801a6ae:	f7ff bed5 	b.w	801a45c <__retarget_lock_release_recursive>
 801a6b2:	bf00      	nop
 801a6b4:	2002775c 	.word	0x2002775c

0801a6b8 <__sfputc_r>:
 801a6b8:	6893      	ldr	r3, [r2, #8]
 801a6ba:	3b01      	subs	r3, #1
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	b410      	push	{r4}
 801a6c0:	6093      	str	r3, [r2, #8]
 801a6c2:	da08      	bge.n	801a6d6 <__sfputc_r+0x1e>
 801a6c4:	6994      	ldr	r4, [r2, #24]
 801a6c6:	42a3      	cmp	r3, r4
 801a6c8:	db01      	blt.n	801a6ce <__sfputc_r+0x16>
 801a6ca:	290a      	cmp	r1, #10
 801a6cc:	d103      	bne.n	801a6d6 <__sfputc_r+0x1e>
 801a6ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a6d2:	f7ff bd4c 	b.w	801a16e <__swbuf_r>
 801a6d6:	6813      	ldr	r3, [r2, #0]
 801a6d8:	1c58      	adds	r0, r3, #1
 801a6da:	6010      	str	r0, [r2, #0]
 801a6dc:	7019      	strb	r1, [r3, #0]
 801a6de:	4608      	mov	r0, r1
 801a6e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a6e4:	4770      	bx	lr

0801a6e6 <__sfputs_r>:
 801a6e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6e8:	4606      	mov	r6, r0
 801a6ea:	460f      	mov	r7, r1
 801a6ec:	4614      	mov	r4, r2
 801a6ee:	18d5      	adds	r5, r2, r3
 801a6f0:	42ac      	cmp	r4, r5
 801a6f2:	d101      	bne.n	801a6f8 <__sfputs_r+0x12>
 801a6f4:	2000      	movs	r0, #0
 801a6f6:	e007      	b.n	801a708 <__sfputs_r+0x22>
 801a6f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a6fc:	463a      	mov	r2, r7
 801a6fe:	4630      	mov	r0, r6
 801a700:	f7ff ffda 	bl	801a6b8 <__sfputc_r>
 801a704:	1c43      	adds	r3, r0, #1
 801a706:	d1f3      	bne.n	801a6f0 <__sfputs_r+0xa>
 801a708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a70c <_vfiprintf_r>:
 801a70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a710:	460d      	mov	r5, r1
 801a712:	b09d      	sub	sp, #116	@ 0x74
 801a714:	4614      	mov	r4, r2
 801a716:	4698      	mov	r8, r3
 801a718:	4606      	mov	r6, r0
 801a71a:	b118      	cbz	r0, 801a724 <_vfiprintf_r+0x18>
 801a71c:	6a03      	ldr	r3, [r0, #32]
 801a71e:	b90b      	cbnz	r3, 801a724 <_vfiprintf_r+0x18>
 801a720:	f7ff fc3c 	bl	8019f9c <__sinit>
 801a724:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a726:	07d9      	lsls	r1, r3, #31
 801a728:	d405      	bmi.n	801a736 <_vfiprintf_r+0x2a>
 801a72a:	89ab      	ldrh	r3, [r5, #12]
 801a72c:	059a      	lsls	r2, r3, #22
 801a72e:	d402      	bmi.n	801a736 <_vfiprintf_r+0x2a>
 801a730:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a732:	f7ff fe92 	bl	801a45a <__retarget_lock_acquire_recursive>
 801a736:	89ab      	ldrh	r3, [r5, #12]
 801a738:	071b      	lsls	r3, r3, #28
 801a73a:	d501      	bpl.n	801a740 <_vfiprintf_r+0x34>
 801a73c:	692b      	ldr	r3, [r5, #16]
 801a73e:	b99b      	cbnz	r3, 801a768 <_vfiprintf_r+0x5c>
 801a740:	4629      	mov	r1, r5
 801a742:	4630      	mov	r0, r6
 801a744:	f7ff fd52 	bl	801a1ec <__swsetup_r>
 801a748:	b170      	cbz	r0, 801a768 <_vfiprintf_r+0x5c>
 801a74a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a74c:	07dc      	lsls	r4, r3, #31
 801a74e:	d504      	bpl.n	801a75a <_vfiprintf_r+0x4e>
 801a750:	f04f 30ff 	mov.w	r0, #4294967295
 801a754:	b01d      	add	sp, #116	@ 0x74
 801a756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a75a:	89ab      	ldrh	r3, [r5, #12]
 801a75c:	0598      	lsls	r0, r3, #22
 801a75e:	d4f7      	bmi.n	801a750 <_vfiprintf_r+0x44>
 801a760:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a762:	f7ff fe7b 	bl	801a45c <__retarget_lock_release_recursive>
 801a766:	e7f3      	b.n	801a750 <_vfiprintf_r+0x44>
 801a768:	2300      	movs	r3, #0
 801a76a:	9309      	str	r3, [sp, #36]	@ 0x24
 801a76c:	2320      	movs	r3, #32
 801a76e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a772:	f8cd 800c 	str.w	r8, [sp, #12]
 801a776:	2330      	movs	r3, #48	@ 0x30
 801a778:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a928 <_vfiprintf_r+0x21c>
 801a77c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a780:	f04f 0901 	mov.w	r9, #1
 801a784:	4623      	mov	r3, r4
 801a786:	469a      	mov	sl, r3
 801a788:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a78c:	b10a      	cbz	r2, 801a792 <_vfiprintf_r+0x86>
 801a78e:	2a25      	cmp	r2, #37	@ 0x25
 801a790:	d1f9      	bne.n	801a786 <_vfiprintf_r+0x7a>
 801a792:	ebba 0b04 	subs.w	fp, sl, r4
 801a796:	d00b      	beq.n	801a7b0 <_vfiprintf_r+0xa4>
 801a798:	465b      	mov	r3, fp
 801a79a:	4622      	mov	r2, r4
 801a79c:	4629      	mov	r1, r5
 801a79e:	4630      	mov	r0, r6
 801a7a0:	f7ff ffa1 	bl	801a6e6 <__sfputs_r>
 801a7a4:	3001      	adds	r0, #1
 801a7a6:	f000 80a7 	beq.w	801a8f8 <_vfiprintf_r+0x1ec>
 801a7aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a7ac:	445a      	add	r2, fp
 801a7ae:	9209      	str	r2, [sp, #36]	@ 0x24
 801a7b0:	f89a 3000 	ldrb.w	r3, [sl]
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	f000 809f 	beq.w	801a8f8 <_vfiprintf_r+0x1ec>
 801a7ba:	2300      	movs	r3, #0
 801a7bc:	f04f 32ff 	mov.w	r2, #4294967295
 801a7c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a7c4:	f10a 0a01 	add.w	sl, sl, #1
 801a7c8:	9304      	str	r3, [sp, #16]
 801a7ca:	9307      	str	r3, [sp, #28]
 801a7cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a7d0:	931a      	str	r3, [sp, #104]	@ 0x68
 801a7d2:	4654      	mov	r4, sl
 801a7d4:	2205      	movs	r2, #5
 801a7d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a7da:	4853      	ldr	r0, [pc, #332]	@ (801a928 <_vfiprintf_r+0x21c>)
 801a7dc:	f7e5 fd18 	bl	8000210 <memchr>
 801a7e0:	9a04      	ldr	r2, [sp, #16]
 801a7e2:	b9d8      	cbnz	r0, 801a81c <_vfiprintf_r+0x110>
 801a7e4:	06d1      	lsls	r1, r2, #27
 801a7e6:	bf44      	itt	mi
 801a7e8:	2320      	movmi	r3, #32
 801a7ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a7ee:	0713      	lsls	r3, r2, #28
 801a7f0:	bf44      	itt	mi
 801a7f2:	232b      	movmi	r3, #43	@ 0x2b
 801a7f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a7f8:	f89a 3000 	ldrb.w	r3, [sl]
 801a7fc:	2b2a      	cmp	r3, #42	@ 0x2a
 801a7fe:	d015      	beq.n	801a82c <_vfiprintf_r+0x120>
 801a800:	9a07      	ldr	r2, [sp, #28]
 801a802:	4654      	mov	r4, sl
 801a804:	2000      	movs	r0, #0
 801a806:	f04f 0c0a 	mov.w	ip, #10
 801a80a:	4621      	mov	r1, r4
 801a80c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a810:	3b30      	subs	r3, #48	@ 0x30
 801a812:	2b09      	cmp	r3, #9
 801a814:	d94b      	bls.n	801a8ae <_vfiprintf_r+0x1a2>
 801a816:	b1b0      	cbz	r0, 801a846 <_vfiprintf_r+0x13a>
 801a818:	9207      	str	r2, [sp, #28]
 801a81a:	e014      	b.n	801a846 <_vfiprintf_r+0x13a>
 801a81c:	eba0 0308 	sub.w	r3, r0, r8
 801a820:	fa09 f303 	lsl.w	r3, r9, r3
 801a824:	4313      	orrs	r3, r2
 801a826:	9304      	str	r3, [sp, #16]
 801a828:	46a2      	mov	sl, r4
 801a82a:	e7d2      	b.n	801a7d2 <_vfiprintf_r+0xc6>
 801a82c:	9b03      	ldr	r3, [sp, #12]
 801a82e:	1d19      	adds	r1, r3, #4
 801a830:	681b      	ldr	r3, [r3, #0]
 801a832:	9103      	str	r1, [sp, #12]
 801a834:	2b00      	cmp	r3, #0
 801a836:	bfbb      	ittet	lt
 801a838:	425b      	neglt	r3, r3
 801a83a:	f042 0202 	orrlt.w	r2, r2, #2
 801a83e:	9307      	strge	r3, [sp, #28]
 801a840:	9307      	strlt	r3, [sp, #28]
 801a842:	bfb8      	it	lt
 801a844:	9204      	strlt	r2, [sp, #16]
 801a846:	7823      	ldrb	r3, [r4, #0]
 801a848:	2b2e      	cmp	r3, #46	@ 0x2e
 801a84a:	d10a      	bne.n	801a862 <_vfiprintf_r+0x156>
 801a84c:	7863      	ldrb	r3, [r4, #1]
 801a84e:	2b2a      	cmp	r3, #42	@ 0x2a
 801a850:	d132      	bne.n	801a8b8 <_vfiprintf_r+0x1ac>
 801a852:	9b03      	ldr	r3, [sp, #12]
 801a854:	1d1a      	adds	r2, r3, #4
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	9203      	str	r2, [sp, #12]
 801a85a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a85e:	3402      	adds	r4, #2
 801a860:	9305      	str	r3, [sp, #20]
 801a862:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a938 <_vfiprintf_r+0x22c>
 801a866:	7821      	ldrb	r1, [r4, #0]
 801a868:	2203      	movs	r2, #3
 801a86a:	4650      	mov	r0, sl
 801a86c:	f7e5 fcd0 	bl	8000210 <memchr>
 801a870:	b138      	cbz	r0, 801a882 <_vfiprintf_r+0x176>
 801a872:	9b04      	ldr	r3, [sp, #16]
 801a874:	eba0 000a 	sub.w	r0, r0, sl
 801a878:	2240      	movs	r2, #64	@ 0x40
 801a87a:	4082      	lsls	r2, r0
 801a87c:	4313      	orrs	r3, r2
 801a87e:	3401      	adds	r4, #1
 801a880:	9304      	str	r3, [sp, #16]
 801a882:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a886:	4829      	ldr	r0, [pc, #164]	@ (801a92c <_vfiprintf_r+0x220>)
 801a888:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a88c:	2206      	movs	r2, #6
 801a88e:	f7e5 fcbf 	bl	8000210 <memchr>
 801a892:	2800      	cmp	r0, #0
 801a894:	d03f      	beq.n	801a916 <_vfiprintf_r+0x20a>
 801a896:	4b26      	ldr	r3, [pc, #152]	@ (801a930 <_vfiprintf_r+0x224>)
 801a898:	bb1b      	cbnz	r3, 801a8e2 <_vfiprintf_r+0x1d6>
 801a89a:	9b03      	ldr	r3, [sp, #12]
 801a89c:	3307      	adds	r3, #7
 801a89e:	f023 0307 	bic.w	r3, r3, #7
 801a8a2:	3308      	adds	r3, #8
 801a8a4:	9303      	str	r3, [sp, #12]
 801a8a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a8a8:	443b      	add	r3, r7
 801a8aa:	9309      	str	r3, [sp, #36]	@ 0x24
 801a8ac:	e76a      	b.n	801a784 <_vfiprintf_r+0x78>
 801a8ae:	fb0c 3202 	mla	r2, ip, r2, r3
 801a8b2:	460c      	mov	r4, r1
 801a8b4:	2001      	movs	r0, #1
 801a8b6:	e7a8      	b.n	801a80a <_vfiprintf_r+0xfe>
 801a8b8:	2300      	movs	r3, #0
 801a8ba:	3401      	adds	r4, #1
 801a8bc:	9305      	str	r3, [sp, #20]
 801a8be:	4619      	mov	r1, r3
 801a8c0:	f04f 0c0a 	mov.w	ip, #10
 801a8c4:	4620      	mov	r0, r4
 801a8c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a8ca:	3a30      	subs	r2, #48	@ 0x30
 801a8cc:	2a09      	cmp	r2, #9
 801a8ce:	d903      	bls.n	801a8d8 <_vfiprintf_r+0x1cc>
 801a8d0:	2b00      	cmp	r3, #0
 801a8d2:	d0c6      	beq.n	801a862 <_vfiprintf_r+0x156>
 801a8d4:	9105      	str	r1, [sp, #20]
 801a8d6:	e7c4      	b.n	801a862 <_vfiprintf_r+0x156>
 801a8d8:	fb0c 2101 	mla	r1, ip, r1, r2
 801a8dc:	4604      	mov	r4, r0
 801a8de:	2301      	movs	r3, #1
 801a8e0:	e7f0      	b.n	801a8c4 <_vfiprintf_r+0x1b8>
 801a8e2:	ab03      	add	r3, sp, #12
 801a8e4:	9300      	str	r3, [sp, #0]
 801a8e6:	462a      	mov	r2, r5
 801a8e8:	4b12      	ldr	r3, [pc, #72]	@ (801a934 <_vfiprintf_r+0x228>)
 801a8ea:	a904      	add	r1, sp, #16
 801a8ec:	4630      	mov	r0, r6
 801a8ee:	f3af 8000 	nop.w
 801a8f2:	4607      	mov	r7, r0
 801a8f4:	1c78      	adds	r0, r7, #1
 801a8f6:	d1d6      	bne.n	801a8a6 <_vfiprintf_r+0x19a>
 801a8f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a8fa:	07d9      	lsls	r1, r3, #31
 801a8fc:	d405      	bmi.n	801a90a <_vfiprintf_r+0x1fe>
 801a8fe:	89ab      	ldrh	r3, [r5, #12]
 801a900:	059a      	lsls	r2, r3, #22
 801a902:	d402      	bmi.n	801a90a <_vfiprintf_r+0x1fe>
 801a904:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a906:	f7ff fda9 	bl	801a45c <__retarget_lock_release_recursive>
 801a90a:	89ab      	ldrh	r3, [r5, #12]
 801a90c:	065b      	lsls	r3, r3, #25
 801a90e:	f53f af1f 	bmi.w	801a750 <_vfiprintf_r+0x44>
 801a912:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a914:	e71e      	b.n	801a754 <_vfiprintf_r+0x48>
 801a916:	ab03      	add	r3, sp, #12
 801a918:	9300      	str	r3, [sp, #0]
 801a91a:	462a      	mov	r2, r5
 801a91c:	4b05      	ldr	r3, [pc, #20]	@ (801a934 <_vfiprintf_r+0x228>)
 801a91e:	a904      	add	r1, sp, #16
 801a920:	4630      	mov	r0, r6
 801a922:	f000 f879 	bl	801aa18 <_printf_i>
 801a926:	e7e4      	b.n	801a8f2 <_vfiprintf_r+0x1e6>
 801a928:	0801e375 	.word	0x0801e375
 801a92c:	0801e37f 	.word	0x0801e37f
 801a930:	00000000 	.word	0x00000000
 801a934:	0801a6e7 	.word	0x0801a6e7
 801a938:	0801e37b 	.word	0x0801e37b

0801a93c <_printf_common>:
 801a93c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a940:	4616      	mov	r6, r2
 801a942:	4698      	mov	r8, r3
 801a944:	688a      	ldr	r2, [r1, #8]
 801a946:	690b      	ldr	r3, [r1, #16]
 801a948:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a94c:	4293      	cmp	r3, r2
 801a94e:	bfb8      	it	lt
 801a950:	4613      	movlt	r3, r2
 801a952:	6033      	str	r3, [r6, #0]
 801a954:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a958:	4607      	mov	r7, r0
 801a95a:	460c      	mov	r4, r1
 801a95c:	b10a      	cbz	r2, 801a962 <_printf_common+0x26>
 801a95e:	3301      	adds	r3, #1
 801a960:	6033      	str	r3, [r6, #0]
 801a962:	6823      	ldr	r3, [r4, #0]
 801a964:	0699      	lsls	r1, r3, #26
 801a966:	bf42      	ittt	mi
 801a968:	6833      	ldrmi	r3, [r6, #0]
 801a96a:	3302      	addmi	r3, #2
 801a96c:	6033      	strmi	r3, [r6, #0]
 801a96e:	6825      	ldr	r5, [r4, #0]
 801a970:	f015 0506 	ands.w	r5, r5, #6
 801a974:	d106      	bne.n	801a984 <_printf_common+0x48>
 801a976:	f104 0a19 	add.w	sl, r4, #25
 801a97a:	68e3      	ldr	r3, [r4, #12]
 801a97c:	6832      	ldr	r2, [r6, #0]
 801a97e:	1a9b      	subs	r3, r3, r2
 801a980:	42ab      	cmp	r3, r5
 801a982:	dc26      	bgt.n	801a9d2 <_printf_common+0x96>
 801a984:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a988:	6822      	ldr	r2, [r4, #0]
 801a98a:	3b00      	subs	r3, #0
 801a98c:	bf18      	it	ne
 801a98e:	2301      	movne	r3, #1
 801a990:	0692      	lsls	r2, r2, #26
 801a992:	d42b      	bmi.n	801a9ec <_printf_common+0xb0>
 801a994:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a998:	4641      	mov	r1, r8
 801a99a:	4638      	mov	r0, r7
 801a99c:	47c8      	blx	r9
 801a99e:	3001      	adds	r0, #1
 801a9a0:	d01e      	beq.n	801a9e0 <_printf_common+0xa4>
 801a9a2:	6823      	ldr	r3, [r4, #0]
 801a9a4:	6922      	ldr	r2, [r4, #16]
 801a9a6:	f003 0306 	and.w	r3, r3, #6
 801a9aa:	2b04      	cmp	r3, #4
 801a9ac:	bf02      	ittt	eq
 801a9ae:	68e5      	ldreq	r5, [r4, #12]
 801a9b0:	6833      	ldreq	r3, [r6, #0]
 801a9b2:	1aed      	subeq	r5, r5, r3
 801a9b4:	68a3      	ldr	r3, [r4, #8]
 801a9b6:	bf0c      	ite	eq
 801a9b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a9bc:	2500      	movne	r5, #0
 801a9be:	4293      	cmp	r3, r2
 801a9c0:	bfc4      	itt	gt
 801a9c2:	1a9b      	subgt	r3, r3, r2
 801a9c4:	18ed      	addgt	r5, r5, r3
 801a9c6:	2600      	movs	r6, #0
 801a9c8:	341a      	adds	r4, #26
 801a9ca:	42b5      	cmp	r5, r6
 801a9cc:	d11a      	bne.n	801aa04 <_printf_common+0xc8>
 801a9ce:	2000      	movs	r0, #0
 801a9d0:	e008      	b.n	801a9e4 <_printf_common+0xa8>
 801a9d2:	2301      	movs	r3, #1
 801a9d4:	4652      	mov	r2, sl
 801a9d6:	4641      	mov	r1, r8
 801a9d8:	4638      	mov	r0, r7
 801a9da:	47c8      	blx	r9
 801a9dc:	3001      	adds	r0, #1
 801a9de:	d103      	bne.n	801a9e8 <_printf_common+0xac>
 801a9e0:	f04f 30ff 	mov.w	r0, #4294967295
 801a9e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a9e8:	3501      	adds	r5, #1
 801a9ea:	e7c6      	b.n	801a97a <_printf_common+0x3e>
 801a9ec:	18e1      	adds	r1, r4, r3
 801a9ee:	1c5a      	adds	r2, r3, #1
 801a9f0:	2030      	movs	r0, #48	@ 0x30
 801a9f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a9f6:	4422      	add	r2, r4
 801a9f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a9fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801aa00:	3302      	adds	r3, #2
 801aa02:	e7c7      	b.n	801a994 <_printf_common+0x58>
 801aa04:	2301      	movs	r3, #1
 801aa06:	4622      	mov	r2, r4
 801aa08:	4641      	mov	r1, r8
 801aa0a:	4638      	mov	r0, r7
 801aa0c:	47c8      	blx	r9
 801aa0e:	3001      	adds	r0, #1
 801aa10:	d0e6      	beq.n	801a9e0 <_printf_common+0xa4>
 801aa12:	3601      	adds	r6, #1
 801aa14:	e7d9      	b.n	801a9ca <_printf_common+0x8e>
	...

0801aa18 <_printf_i>:
 801aa18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aa1c:	7e0f      	ldrb	r7, [r1, #24]
 801aa1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801aa20:	2f78      	cmp	r7, #120	@ 0x78
 801aa22:	4691      	mov	r9, r2
 801aa24:	4680      	mov	r8, r0
 801aa26:	460c      	mov	r4, r1
 801aa28:	469a      	mov	sl, r3
 801aa2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801aa2e:	d807      	bhi.n	801aa40 <_printf_i+0x28>
 801aa30:	2f62      	cmp	r7, #98	@ 0x62
 801aa32:	d80a      	bhi.n	801aa4a <_printf_i+0x32>
 801aa34:	2f00      	cmp	r7, #0
 801aa36:	f000 80d1 	beq.w	801abdc <_printf_i+0x1c4>
 801aa3a:	2f58      	cmp	r7, #88	@ 0x58
 801aa3c:	f000 80b8 	beq.w	801abb0 <_printf_i+0x198>
 801aa40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801aa44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801aa48:	e03a      	b.n	801aac0 <_printf_i+0xa8>
 801aa4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801aa4e:	2b15      	cmp	r3, #21
 801aa50:	d8f6      	bhi.n	801aa40 <_printf_i+0x28>
 801aa52:	a101      	add	r1, pc, #4	@ (adr r1, 801aa58 <_printf_i+0x40>)
 801aa54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aa58:	0801aab1 	.word	0x0801aab1
 801aa5c:	0801aac5 	.word	0x0801aac5
 801aa60:	0801aa41 	.word	0x0801aa41
 801aa64:	0801aa41 	.word	0x0801aa41
 801aa68:	0801aa41 	.word	0x0801aa41
 801aa6c:	0801aa41 	.word	0x0801aa41
 801aa70:	0801aac5 	.word	0x0801aac5
 801aa74:	0801aa41 	.word	0x0801aa41
 801aa78:	0801aa41 	.word	0x0801aa41
 801aa7c:	0801aa41 	.word	0x0801aa41
 801aa80:	0801aa41 	.word	0x0801aa41
 801aa84:	0801abc3 	.word	0x0801abc3
 801aa88:	0801aaef 	.word	0x0801aaef
 801aa8c:	0801ab7d 	.word	0x0801ab7d
 801aa90:	0801aa41 	.word	0x0801aa41
 801aa94:	0801aa41 	.word	0x0801aa41
 801aa98:	0801abe5 	.word	0x0801abe5
 801aa9c:	0801aa41 	.word	0x0801aa41
 801aaa0:	0801aaef 	.word	0x0801aaef
 801aaa4:	0801aa41 	.word	0x0801aa41
 801aaa8:	0801aa41 	.word	0x0801aa41
 801aaac:	0801ab85 	.word	0x0801ab85
 801aab0:	6833      	ldr	r3, [r6, #0]
 801aab2:	1d1a      	adds	r2, r3, #4
 801aab4:	681b      	ldr	r3, [r3, #0]
 801aab6:	6032      	str	r2, [r6, #0]
 801aab8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801aabc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801aac0:	2301      	movs	r3, #1
 801aac2:	e09c      	b.n	801abfe <_printf_i+0x1e6>
 801aac4:	6833      	ldr	r3, [r6, #0]
 801aac6:	6820      	ldr	r0, [r4, #0]
 801aac8:	1d19      	adds	r1, r3, #4
 801aaca:	6031      	str	r1, [r6, #0]
 801aacc:	0606      	lsls	r6, r0, #24
 801aace:	d501      	bpl.n	801aad4 <_printf_i+0xbc>
 801aad0:	681d      	ldr	r5, [r3, #0]
 801aad2:	e003      	b.n	801aadc <_printf_i+0xc4>
 801aad4:	0645      	lsls	r5, r0, #25
 801aad6:	d5fb      	bpl.n	801aad0 <_printf_i+0xb8>
 801aad8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801aadc:	2d00      	cmp	r5, #0
 801aade:	da03      	bge.n	801aae8 <_printf_i+0xd0>
 801aae0:	232d      	movs	r3, #45	@ 0x2d
 801aae2:	426d      	negs	r5, r5
 801aae4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801aae8:	4858      	ldr	r0, [pc, #352]	@ (801ac4c <_printf_i+0x234>)
 801aaea:	230a      	movs	r3, #10
 801aaec:	e011      	b.n	801ab12 <_printf_i+0xfa>
 801aaee:	6821      	ldr	r1, [r4, #0]
 801aaf0:	6833      	ldr	r3, [r6, #0]
 801aaf2:	0608      	lsls	r0, r1, #24
 801aaf4:	f853 5b04 	ldr.w	r5, [r3], #4
 801aaf8:	d402      	bmi.n	801ab00 <_printf_i+0xe8>
 801aafa:	0649      	lsls	r1, r1, #25
 801aafc:	bf48      	it	mi
 801aafe:	b2ad      	uxthmi	r5, r5
 801ab00:	2f6f      	cmp	r7, #111	@ 0x6f
 801ab02:	4852      	ldr	r0, [pc, #328]	@ (801ac4c <_printf_i+0x234>)
 801ab04:	6033      	str	r3, [r6, #0]
 801ab06:	bf14      	ite	ne
 801ab08:	230a      	movne	r3, #10
 801ab0a:	2308      	moveq	r3, #8
 801ab0c:	2100      	movs	r1, #0
 801ab0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801ab12:	6866      	ldr	r6, [r4, #4]
 801ab14:	60a6      	str	r6, [r4, #8]
 801ab16:	2e00      	cmp	r6, #0
 801ab18:	db05      	blt.n	801ab26 <_printf_i+0x10e>
 801ab1a:	6821      	ldr	r1, [r4, #0]
 801ab1c:	432e      	orrs	r6, r5
 801ab1e:	f021 0104 	bic.w	r1, r1, #4
 801ab22:	6021      	str	r1, [r4, #0]
 801ab24:	d04b      	beq.n	801abbe <_printf_i+0x1a6>
 801ab26:	4616      	mov	r6, r2
 801ab28:	fbb5 f1f3 	udiv	r1, r5, r3
 801ab2c:	fb03 5711 	mls	r7, r3, r1, r5
 801ab30:	5dc7      	ldrb	r7, [r0, r7]
 801ab32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ab36:	462f      	mov	r7, r5
 801ab38:	42bb      	cmp	r3, r7
 801ab3a:	460d      	mov	r5, r1
 801ab3c:	d9f4      	bls.n	801ab28 <_printf_i+0x110>
 801ab3e:	2b08      	cmp	r3, #8
 801ab40:	d10b      	bne.n	801ab5a <_printf_i+0x142>
 801ab42:	6823      	ldr	r3, [r4, #0]
 801ab44:	07df      	lsls	r7, r3, #31
 801ab46:	d508      	bpl.n	801ab5a <_printf_i+0x142>
 801ab48:	6923      	ldr	r3, [r4, #16]
 801ab4a:	6861      	ldr	r1, [r4, #4]
 801ab4c:	4299      	cmp	r1, r3
 801ab4e:	bfde      	ittt	le
 801ab50:	2330      	movle	r3, #48	@ 0x30
 801ab52:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ab56:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ab5a:	1b92      	subs	r2, r2, r6
 801ab5c:	6122      	str	r2, [r4, #16]
 801ab5e:	f8cd a000 	str.w	sl, [sp]
 801ab62:	464b      	mov	r3, r9
 801ab64:	aa03      	add	r2, sp, #12
 801ab66:	4621      	mov	r1, r4
 801ab68:	4640      	mov	r0, r8
 801ab6a:	f7ff fee7 	bl	801a93c <_printf_common>
 801ab6e:	3001      	adds	r0, #1
 801ab70:	d14a      	bne.n	801ac08 <_printf_i+0x1f0>
 801ab72:	f04f 30ff 	mov.w	r0, #4294967295
 801ab76:	b004      	add	sp, #16
 801ab78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab7c:	6823      	ldr	r3, [r4, #0]
 801ab7e:	f043 0320 	orr.w	r3, r3, #32
 801ab82:	6023      	str	r3, [r4, #0]
 801ab84:	4832      	ldr	r0, [pc, #200]	@ (801ac50 <_printf_i+0x238>)
 801ab86:	2778      	movs	r7, #120	@ 0x78
 801ab88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ab8c:	6823      	ldr	r3, [r4, #0]
 801ab8e:	6831      	ldr	r1, [r6, #0]
 801ab90:	061f      	lsls	r7, r3, #24
 801ab92:	f851 5b04 	ldr.w	r5, [r1], #4
 801ab96:	d402      	bmi.n	801ab9e <_printf_i+0x186>
 801ab98:	065f      	lsls	r7, r3, #25
 801ab9a:	bf48      	it	mi
 801ab9c:	b2ad      	uxthmi	r5, r5
 801ab9e:	6031      	str	r1, [r6, #0]
 801aba0:	07d9      	lsls	r1, r3, #31
 801aba2:	bf44      	itt	mi
 801aba4:	f043 0320 	orrmi.w	r3, r3, #32
 801aba8:	6023      	strmi	r3, [r4, #0]
 801abaa:	b11d      	cbz	r5, 801abb4 <_printf_i+0x19c>
 801abac:	2310      	movs	r3, #16
 801abae:	e7ad      	b.n	801ab0c <_printf_i+0xf4>
 801abb0:	4826      	ldr	r0, [pc, #152]	@ (801ac4c <_printf_i+0x234>)
 801abb2:	e7e9      	b.n	801ab88 <_printf_i+0x170>
 801abb4:	6823      	ldr	r3, [r4, #0]
 801abb6:	f023 0320 	bic.w	r3, r3, #32
 801abba:	6023      	str	r3, [r4, #0]
 801abbc:	e7f6      	b.n	801abac <_printf_i+0x194>
 801abbe:	4616      	mov	r6, r2
 801abc0:	e7bd      	b.n	801ab3e <_printf_i+0x126>
 801abc2:	6833      	ldr	r3, [r6, #0]
 801abc4:	6825      	ldr	r5, [r4, #0]
 801abc6:	6961      	ldr	r1, [r4, #20]
 801abc8:	1d18      	adds	r0, r3, #4
 801abca:	6030      	str	r0, [r6, #0]
 801abcc:	062e      	lsls	r6, r5, #24
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	d501      	bpl.n	801abd6 <_printf_i+0x1be>
 801abd2:	6019      	str	r1, [r3, #0]
 801abd4:	e002      	b.n	801abdc <_printf_i+0x1c4>
 801abd6:	0668      	lsls	r0, r5, #25
 801abd8:	d5fb      	bpl.n	801abd2 <_printf_i+0x1ba>
 801abda:	8019      	strh	r1, [r3, #0]
 801abdc:	2300      	movs	r3, #0
 801abde:	6123      	str	r3, [r4, #16]
 801abe0:	4616      	mov	r6, r2
 801abe2:	e7bc      	b.n	801ab5e <_printf_i+0x146>
 801abe4:	6833      	ldr	r3, [r6, #0]
 801abe6:	1d1a      	adds	r2, r3, #4
 801abe8:	6032      	str	r2, [r6, #0]
 801abea:	681e      	ldr	r6, [r3, #0]
 801abec:	6862      	ldr	r2, [r4, #4]
 801abee:	2100      	movs	r1, #0
 801abf0:	4630      	mov	r0, r6
 801abf2:	f7e5 fb0d 	bl	8000210 <memchr>
 801abf6:	b108      	cbz	r0, 801abfc <_printf_i+0x1e4>
 801abf8:	1b80      	subs	r0, r0, r6
 801abfa:	6060      	str	r0, [r4, #4]
 801abfc:	6863      	ldr	r3, [r4, #4]
 801abfe:	6123      	str	r3, [r4, #16]
 801ac00:	2300      	movs	r3, #0
 801ac02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ac06:	e7aa      	b.n	801ab5e <_printf_i+0x146>
 801ac08:	6923      	ldr	r3, [r4, #16]
 801ac0a:	4632      	mov	r2, r6
 801ac0c:	4649      	mov	r1, r9
 801ac0e:	4640      	mov	r0, r8
 801ac10:	47d0      	blx	sl
 801ac12:	3001      	adds	r0, #1
 801ac14:	d0ad      	beq.n	801ab72 <_printf_i+0x15a>
 801ac16:	6823      	ldr	r3, [r4, #0]
 801ac18:	079b      	lsls	r3, r3, #30
 801ac1a:	d413      	bmi.n	801ac44 <_printf_i+0x22c>
 801ac1c:	68e0      	ldr	r0, [r4, #12]
 801ac1e:	9b03      	ldr	r3, [sp, #12]
 801ac20:	4298      	cmp	r0, r3
 801ac22:	bfb8      	it	lt
 801ac24:	4618      	movlt	r0, r3
 801ac26:	e7a6      	b.n	801ab76 <_printf_i+0x15e>
 801ac28:	2301      	movs	r3, #1
 801ac2a:	4632      	mov	r2, r6
 801ac2c:	4649      	mov	r1, r9
 801ac2e:	4640      	mov	r0, r8
 801ac30:	47d0      	blx	sl
 801ac32:	3001      	adds	r0, #1
 801ac34:	d09d      	beq.n	801ab72 <_printf_i+0x15a>
 801ac36:	3501      	adds	r5, #1
 801ac38:	68e3      	ldr	r3, [r4, #12]
 801ac3a:	9903      	ldr	r1, [sp, #12]
 801ac3c:	1a5b      	subs	r3, r3, r1
 801ac3e:	42ab      	cmp	r3, r5
 801ac40:	dcf2      	bgt.n	801ac28 <_printf_i+0x210>
 801ac42:	e7eb      	b.n	801ac1c <_printf_i+0x204>
 801ac44:	2500      	movs	r5, #0
 801ac46:	f104 0619 	add.w	r6, r4, #25
 801ac4a:	e7f5      	b.n	801ac38 <_printf_i+0x220>
 801ac4c:	0801e386 	.word	0x0801e386
 801ac50:	0801e397 	.word	0x0801e397

0801ac54 <__sflush_r>:
 801ac54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ac58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac5c:	0716      	lsls	r6, r2, #28
 801ac5e:	4605      	mov	r5, r0
 801ac60:	460c      	mov	r4, r1
 801ac62:	d454      	bmi.n	801ad0e <__sflush_r+0xba>
 801ac64:	684b      	ldr	r3, [r1, #4]
 801ac66:	2b00      	cmp	r3, #0
 801ac68:	dc02      	bgt.n	801ac70 <__sflush_r+0x1c>
 801ac6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	dd48      	ble.n	801ad02 <__sflush_r+0xae>
 801ac70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ac72:	2e00      	cmp	r6, #0
 801ac74:	d045      	beq.n	801ad02 <__sflush_r+0xae>
 801ac76:	2300      	movs	r3, #0
 801ac78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ac7c:	682f      	ldr	r7, [r5, #0]
 801ac7e:	6a21      	ldr	r1, [r4, #32]
 801ac80:	602b      	str	r3, [r5, #0]
 801ac82:	d030      	beq.n	801ace6 <__sflush_r+0x92>
 801ac84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ac86:	89a3      	ldrh	r3, [r4, #12]
 801ac88:	0759      	lsls	r1, r3, #29
 801ac8a:	d505      	bpl.n	801ac98 <__sflush_r+0x44>
 801ac8c:	6863      	ldr	r3, [r4, #4]
 801ac8e:	1ad2      	subs	r2, r2, r3
 801ac90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ac92:	b10b      	cbz	r3, 801ac98 <__sflush_r+0x44>
 801ac94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ac96:	1ad2      	subs	r2, r2, r3
 801ac98:	2300      	movs	r3, #0
 801ac9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ac9c:	6a21      	ldr	r1, [r4, #32]
 801ac9e:	4628      	mov	r0, r5
 801aca0:	47b0      	blx	r6
 801aca2:	1c43      	adds	r3, r0, #1
 801aca4:	89a3      	ldrh	r3, [r4, #12]
 801aca6:	d106      	bne.n	801acb6 <__sflush_r+0x62>
 801aca8:	6829      	ldr	r1, [r5, #0]
 801acaa:	291d      	cmp	r1, #29
 801acac:	d82b      	bhi.n	801ad06 <__sflush_r+0xb2>
 801acae:	4a2a      	ldr	r2, [pc, #168]	@ (801ad58 <__sflush_r+0x104>)
 801acb0:	40ca      	lsrs	r2, r1
 801acb2:	07d6      	lsls	r6, r2, #31
 801acb4:	d527      	bpl.n	801ad06 <__sflush_r+0xb2>
 801acb6:	2200      	movs	r2, #0
 801acb8:	6062      	str	r2, [r4, #4]
 801acba:	04d9      	lsls	r1, r3, #19
 801acbc:	6922      	ldr	r2, [r4, #16]
 801acbe:	6022      	str	r2, [r4, #0]
 801acc0:	d504      	bpl.n	801accc <__sflush_r+0x78>
 801acc2:	1c42      	adds	r2, r0, #1
 801acc4:	d101      	bne.n	801acca <__sflush_r+0x76>
 801acc6:	682b      	ldr	r3, [r5, #0]
 801acc8:	b903      	cbnz	r3, 801accc <__sflush_r+0x78>
 801acca:	6560      	str	r0, [r4, #84]	@ 0x54
 801accc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801acce:	602f      	str	r7, [r5, #0]
 801acd0:	b1b9      	cbz	r1, 801ad02 <__sflush_r+0xae>
 801acd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801acd6:	4299      	cmp	r1, r3
 801acd8:	d002      	beq.n	801ace0 <__sflush_r+0x8c>
 801acda:	4628      	mov	r0, r5
 801acdc:	f7ff fbec 	bl	801a4b8 <_free_r>
 801ace0:	2300      	movs	r3, #0
 801ace2:	6363      	str	r3, [r4, #52]	@ 0x34
 801ace4:	e00d      	b.n	801ad02 <__sflush_r+0xae>
 801ace6:	2301      	movs	r3, #1
 801ace8:	4628      	mov	r0, r5
 801acea:	47b0      	blx	r6
 801acec:	4602      	mov	r2, r0
 801acee:	1c50      	adds	r0, r2, #1
 801acf0:	d1c9      	bne.n	801ac86 <__sflush_r+0x32>
 801acf2:	682b      	ldr	r3, [r5, #0]
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d0c6      	beq.n	801ac86 <__sflush_r+0x32>
 801acf8:	2b1d      	cmp	r3, #29
 801acfa:	d001      	beq.n	801ad00 <__sflush_r+0xac>
 801acfc:	2b16      	cmp	r3, #22
 801acfe:	d11e      	bne.n	801ad3e <__sflush_r+0xea>
 801ad00:	602f      	str	r7, [r5, #0]
 801ad02:	2000      	movs	r0, #0
 801ad04:	e022      	b.n	801ad4c <__sflush_r+0xf8>
 801ad06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ad0a:	b21b      	sxth	r3, r3
 801ad0c:	e01b      	b.n	801ad46 <__sflush_r+0xf2>
 801ad0e:	690f      	ldr	r7, [r1, #16]
 801ad10:	2f00      	cmp	r7, #0
 801ad12:	d0f6      	beq.n	801ad02 <__sflush_r+0xae>
 801ad14:	0793      	lsls	r3, r2, #30
 801ad16:	680e      	ldr	r6, [r1, #0]
 801ad18:	bf08      	it	eq
 801ad1a:	694b      	ldreq	r3, [r1, #20]
 801ad1c:	600f      	str	r7, [r1, #0]
 801ad1e:	bf18      	it	ne
 801ad20:	2300      	movne	r3, #0
 801ad22:	eba6 0807 	sub.w	r8, r6, r7
 801ad26:	608b      	str	r3, [r1, #8]
 801ad28:	f1b8 0f00 	cmp.w	r8, #0
 801ad2c:	dde9      	ble.n	801ad02 <__sflush_r+0xae>
 801ad2e:	6a21      	ldr	r1, [r4, #32]
 801ad30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ad32:	4643      	mov	r3, r8
 801ad34:	463a      	mov	r2, r7
 801ad36:	4628      	mov	r0, r5
 801ad38:	47b0      	blx	r6
 801ad3a:	2800      	cmp	r0, #0
 801ad3c:	dc08      	bgt.n	801ad50 <__sflush_r+0xfc>
 801ad3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ad42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ad46:	81a3      	strh	r3, [r4, #12]
 801ad48:	f04f 30ff 	mov.w	r0, #4294967295
 801ad4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad50:	4407      	add	r7, r0
 801ad52:	eba8 0800 	sub.w	r8, r8, r0
 801ad56:	e7e7      	b.n	801ad28 <__sflush_r+0xd4>
 801ad58:	20400001 	.word	0x20400001

0801ad5c <_fflush_r>:
 801ad5c:	b538      	push	{r3, r4, r5, lr}
 801ad5e:	690b      	ldr	r3, [r1, #16]
 801ad60:	4605      	mov	r5, r0
 801ad62:	460c      	mov	r4, r1
 801ad64:	b913      	cbnz	r3, 801ad6c <_fflush_r+0x10>
 801ad66:	2500      	movs	r5, #0
 801ad68:	4628      	mov	r0, r5
 801ad6a:	bd38      	pop	{r3, r4, r5, pc}
 801ad6c:	b118      	cbz	r0, 801ad76 <_fflush_r+0x1a>
 801ad6e:	6a03      	ldr	r3, [r0, #32]
 801ad70:	b90b      	cbnz	r3, 801ad76 <_fflush_r+0x1a>
 801ad72:	f7ff f913 	bl	8019f9c <__sinit>
 801ad76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	d0f3      	beq.n	801ad66 <_fflush_r+0xa>
 801ad7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ad80:	07d0      	lsls	r0, r2, #31
 801ad82:	d404      	bmi.n	801ad8e <_fflush_r+0x32>
 801ad84:	0599      	lsls	r1, r3, #22
 801ad86:	d402      	bmi.n	801ad8e <_fflush_r+0x32>
 801ad88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ad8a:	f7ff fb66 	bl	801a45a <__retarget_lock_acquire_recursive>
 801ad8e:	4628      	mov	r0, r5
 801ad90:	4621      	mov	r1, r4
 801ad92:	f7ff ff5f 	bl	801ac54 <__sflush_r>
 801ad96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ad98:	07da      	lsls	r2, r3, #31
 801ad9a:	4605      	mov	r5, r0
 801ad9c:	d4e4      	bmi.n	801ad68 <_fflush_r+0xc>
 801ad9e:	89a3      	ldrh	r3, [r4, #12]
 801ada0:	059b      	lsls	r3, r3, #22
 801ada2:	d4e1      	bmi.n	801ad68 <_fflush_r+0xc>
 801ada4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ada6:	f7ff fb59 	bl	801a45c <__retarget_lock_release_recursive>
 801adaa:	e7dd      	b.n	801ad68 <_fflush_r+0xc>

0801adac <fiprintf>:
 801adac:	b40e      	push	{r1, r2, r3}
 801adae:	b503      	push	{r0, r1, lr}
 801adb0:	4601      	mov	r1, r0
 801adb2:	ab03      	add	r3, sp, #12
 801adb4:	4805      	ldr	r0, [pc, #20]	@ (801adcc <fiprintf+0x20>)
 801adb6:	f853 2b04 	ldr.w	r2, [r3], #4
 801adba:	6800      	ldr	r0, [r0, #0]
 801adbc:	9301      	str	r3, [sp, #4]
 801adbe:	f7ff fca5 	bl	801a70c <_vfiprintf_r>
 801adc2:	b002      	add	sp, #8
 801adc4:	f85d eb04 	ldr.w	lr, [sp], #4
 801adc8:	b003      	add	sp, #12
 801adca:	4770      	bx	lr
 801adcc:	2000003c 	.word	0x2000003c

0801add0 <__swhatbuf_r>:
 801add0:	b570      	push	{r4, r5, r6, lr}
 801add2:	460c      	mov	r4, r1
 801add4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801add8:	2900      	cmp	r1, #0
 801adda:	b096      	sub	sp, #88	@ 0x58
 801addc:	4615      	mov	r5, r2
 801adde:	461e      	mov	r6, r3
 801ade0:	da0d      	bge.n	801adfe <__swhatbuf_r+0x2e>
 801ade2:	89a3      	ldrh	r3, [r4, #12]
 801ade4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ade8:	f04f 0100 	mov.w	r1, #0
 801adec:	bf14      	ite	ne
 801adee:	2340      	movne	r3, #64	@ 0x40
 801adf0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801adf4:	2000      	movs	r0, #0
 801adf6:	6031      	str	r1, [r6, #0]
 801adf8:	602b      	str	r3, [r5, #0]
 801adfa:	b016      	add	sp, #88	@ 0x58
 801adfc:	bd70      	pop	{r4, r5, r6, pc}
 801adfe:	466a      	mov	r2, sp
 801ae00:	f000 f848 	bl	801ae94 <_fstat_r>
 801ae04:	2800      	cmp	r0, #0
 801ae06:	dbec      	blt.n	801ade2 <__swhatbuf_r+0x12>
 801ae08:	9901      	ldr	r1, [sp, #4]
 801ae0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801ae0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801ae12:	4259      	negs	r1, r3
 801ae14:	4159      	adcs	r1, r3
 801ae16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801ae1a:	e7eb      	b.n	801adf4 <__swhatbuf_r+0x24>

0801ae1c <__smakebuf_r>:
 801ae1c:	898b      	ldrh	r3, [r1, #12]
 801ae1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ae20:	079d      	lsls	r5, r3, #30
 801ae22:	4606      	mov	r6, r0
 801ae24:	460c      	mov	r4, r1
 801ae26:	d507      	bpl.n	801ae38 <__smakebuf_r+0x1c>
 801ae28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801ae2c:	6023      	str	r3, [r4, #0]
 801ae2e:	6123      	str	r3, [r4, #16]
 801ae30:	2301      	movs	r3, #1
 801ae32:	6163      	str	r3, [r4, #20]
 801ae34:	b003      	add	sp, #12
 801ae36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae38:	ab01      	add	r3, sp, #4
 801ae3a:	466a      	mov	r2, sp
 801ae3c:	f7ff ffc8 	bl	801add0 <__swhatbuf_r>
 801ae40:	9f00      	ldr	r7, [sp, #0]
 801ae42:	4605      	mov	r5, r0
 801ae44:	4639      	mov	r1, r7
 801ae46:	4630      	mov	r0, r6
 801ae48:	f7ff fbaa 	bl	801a5a0 <_malloc_r>
 801ae4c:	b948      	cbnz	r0, 801ae62 <__smakebuf_r+0x46>
 801ae4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae52:	059a      	lsls	r2, r3, #22
 801ae54:	d4ee      	bmi.n	801ae34 <__smakebuf_r+0x18>
 801ae56:	f023 0303 	bic.w	r3, r3, #3
 801ae5a:	f043 0302 	orr.w	r3, r3, #2
 801ae5e:	81a3      	strh	r3, [r4, #12]
 801ae60:	e7e2      	b.n	801ae28 <__smakebuf_r+0xc>
 801ae62:	89a3      	ldrh	r3, [r4, #12]
 801ae64:	6020      	str	r0, [r4, #0]
 801ae66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ae6a:	81a3      	strh	r3, [r4, #12]
 801ae6c:	9b01      	ldr	r3, [sp, #4]
 801ae6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ae72:	b15b      	cbz	r3, 801ae8c <__smakebuf_r+0x70>
 801ae74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ae78:	4630      	mov	r0, r6
 801ae7a:	f000 f81d 	bl	801aeb8 <_isatty_r>
 801ae7e:	b128      	cbz	r0, 801ae8c <__smakebuf_r+0x70>
 801ae80:	89a3      	ldrh	r3, [r4, #12]
 801ae82:	f023 0303 	bic.w	r3, r3, #3
 801ae86:	f043 0301 	orr.w	r3, r3, #1
 801ae8a:	81a3      	strh	r3, [r4, #12]
 801ae8c:	89a3      	ldrh	r3, [r4, #12]
 801ae8e:	431d      	orrs	r5, r3
 801ae90:	81a5      	strh	r5, [r4, #12]
 801ae92:	e7cf      	b.n	801ae34 <__smakebuf_r+0x18>

0801ae94 <_fstat_r>:
 801ae94:	b538      	push	{r3, r4, r5, lr}
 801ae96:	4d07      	ldr	r5, [pc, #28]	@ (801aeb4 <_fstat_r+0x20>)
 801ae98:	2300      	movs	r3, #0
 801ae9a:	4604      	mov	r4, r0
 801ae9c:	4608      	mov	r0, r1
 801ae9e:	4611      	mov	r1, r2
 801aea0:	602b      	str	r3, [r5, #0]
 801aea2:	f7e6 fe49 	bl	8001b38 <_fstat>
 801aea6:	1c43      	adds	r3, r0, #1
 801aea8:	d102      	bne.n	801aeb0 <_fstat_r+0x1c>
 801aeaa:	682b      	ldr	r3, [r5, #0]
 801aeac:	b103      	cbz	r3, 801aeb0 <_fstat_r+0x1c>
 801aeae:	6023      	str	r3, [r4, #0]
 801aeb0:	bd38      	pop	{r3, r4, r5, pc}
 801aeb2:	bf00      	nop
 801aeb4:	20027758 	.word	0x20027758

0801aeb8 <_isatty_r>:
 801aeb8:	b538      	push	{r3, r4, r5, lr}
 801aeba:	4d06      	ldr	r5, [pc, #24]	@ (801aed4 <_isatty_r+0x1c>)
 801aebc:	2300      	movs	r3, #0
 801aebe:	4604      	mov	r4, r0
 801aec0:	4608      	mov	r0, r1
 801aec2:	602b      	str	r3, [r5, #0]
 801aec4:	f7e6 fe48 	bl	8001b58 <_isatty>
 801aec8:	1c43      	adds	r3, r0, #1
 801aeca:	d102      	bne.n	801aed2 <_isatty_r+0x1a>
 801aecc:	682b      	ldr	r3, [r5, #0]
 801aece:	b103      	cbz	r3, 801aed2 <_isatty_r+0x1a>
 801aed0:	6023      	str	r3, [r4, #0]
 801aed2:	bd38      	pop	{r3, r4, r5, pc}
 801aed4:	20027758 	.word	0x20027758

0801aed8 <_sbrk_r>:
 801aed8:	b538      	push	{r3, r4, r5, lr}
 801aeda:	4d06      	ldr	r5, [pc, #24]	@ (801aef4 <_sbrk_r+0x1c>)
 801aedc:	2300      	movs	r3, #0
 801aede:	4604      	mov	r4, r0
 801aee0:	4608      	mov	r0, r1
 801aee2:	602b      	str	r3, [r5, #0]
 801aee4:	f7e6 fe50 	bl	8001b88 <_sbrk>
 801aee8:	1c43      	adds	r3, r0, #1
 801aeea:	d102      	bne.n	801aef2 <_sbrk_r+0x1a>
 801aeec:	682b      	ldr	r3, [r5, #0]
 801aeee:	b103      	cbz	r3, 801aef2 <_sbrk_r+0x1a>
 801aef0:	6023      	str	r3, [r4, #0]
 801aef2:	bd38      	pop	{r3, r4, r5, pc}
 801aef4:	20027758 	.word	0x20027758

0801aef8 <abort>:
 801aef8:	b508      	push	{r3, lr}
 801aefa:	2006      	movs	r0, #6
 801aefc:	f000 f82c 	bl	801af58 <raise>
 801af00:	2001      	movs	r0, #1
 801af02:	f7e6 fdc9 	bl	8001a98 <_exit>

0801af06 <_raise_r>:
 801af06:	291f      	cmp	r1, #31
 801af08:	b538      	push	{r3, r4, r5, lr}
 801af0a:	4605      	mov	r5, r0
 801af0c:	460c      	mov	r4, r1
 801af0e:	d904      	bls.n	801af1a <_raise_r+0x14>
 801af10:	2316      	movs	r3, #22
 801af12:	6003      	str	r3, [r0, #0]
 801af14:	f04f 30ff 	mov.w	r0, #4294967295
 801af18:	bd38      	pop	{r3, r4, r5, pc}
 801af1a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801af1c:	b112      	cbz	r2, 801af24 <_raise_r+0x1e>
 801af1e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801af22:	b94b      	cbnz	r3, 801af38 <_raise_r+0x32>
 801af24:	4628      	mov	r0, r5
 801af26:	f000 f831 	bl	801af8c <_getpid_r>
 801af2a:	4622      	mov	r2, r4
 801af2c:	4601      	mov	r1, r0
 801af2e:	4628      	mov	r0, r5
 801af30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801af34:	f000 b818 	b.w	801af68 <_kill_r>
 801af38:	2b01      	cmp	r3, #1
 801af3a:	d00a      	beq.n	801af52 <_raise_r+0x4c>
 801af3c:	1c59      	adds	r1, r3, #1
 801af3e:	d103      	bne.n	801af48 <_raise_r+0x42>
 801af40:	2316      	movs	r3, #22
 801af42:	6003      	str	r3, [r0, #0]
 801af44:	2001      	movs	r0, #1
 801af46:	e7e7      	b.n	801af18 <_raise_r+0x12>
 801af48:	2100      	movs	r1, #0
 801af4a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801af4e:	4620      	mov	r0, r4
 801af50:	4798      	blx	r3
 801af52:	2000      	movs	r0, #0
 801af54:	e7e0      	b.n	801af18 <_raise_r+0x12>
	...

0801af58 <raise>:
 801af58:	4b02      	ldr	r3, [pc, #8]	@ (801af64 <raise+0xc>)
 801af5a:	4601      	mov	r1, r0
 801af5c:	6818      	ldr	r0, [r3, #0]
 801af5e:	f7ff bfd2 	b.w	801af06 <_raise_r>
 801af62:	bf00      	nop
 801af64:	2000003c 	.word	0x2000003c

0801af68 <_kill_r>:
 801af68:	b538      	push	{r3, r4, r5, lr}
 801af6a:	4d07      	ldr	r5, [pc, #28]	@ (801af88 <_kill_r+0x20>)
 801af6c:	2300      	movs	r3, #0
 801af6e:	4604      	mov	r4, r0
 801af70:	4608      	mov	r0, r1
 801af72:	4611      	mov	r1, r2
 801af74:	602b      	str	r3, [r5, #0]
 801af76:	f7e6 fd7d 	bl	8001a74 <_kill>
 801af7a:	1c43      	adds	r3, r0, #1
 801af7c:	d102      	bne.n	801af84 <_kill_r+0x1c>
 801af7e:	682b      	ldr	r3, [r5, #0]
 801af80:	b103      	cbz	r3, 801af84 <_kill_r+0x1c>
 801af82:	6023      	str	r3, [r4, #0]
 801af84:	bd38      	pop	{r3, r4, r5, pc}
 801af86:	bf00      	nop
 801af88:	20027758 	.word	0x20027758

0801af8c <_getpid_r>:
 801af8c:	f7e6 bd6a 	b.w	8001a64 <_getpid>

0801af90 <_init>:
 801af90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af92:	bf00      	nop
 801af94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801af96:	bc08      	pop	{r3}
 801af98:	469e      	mov	lr, r3
 801af9a:	4770      	bx	lr

0801af9c <_fini>:
 801af9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af9e:	bf00      	nop
 801afa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801afa2:	bc08      	pop	{r3}
 801afa4:	469e      	mov	lr, r3
 801afa6:	4770      	bx	lr
