
Final_ARM_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001eea4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033ac  0801f074  0801f074  00020074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022420  08022420  000241cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08022420  08022420  00023420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022428  08022428  000241cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022428  08022428  00023428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802242c  0802242c  0002342c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08022430  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  080224bc  0002408c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  0802255c  0002412c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00027c90  200001cc  080225fc  000241cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20027e5c  080225fc  00024e5c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000241cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00044220  00000000  00000000  000241fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009ff3  00000000  00000000  0006841c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003200  00000000  00000000  00072410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002767  00000000  00000000  00075610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001732c  00000000  00000000  00077d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004f1ba  00000000  00000000  0008f0a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001278ba  00000000  00000000  000de25d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00205b17  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d958  00000000  00000000  00205b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005a  00000000  00000000  002134b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801f05c 	.word	0x0801f05c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	0801f05c 	.word	0x0801f05c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f002 f8ff 	bl	80027e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f8d2 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fc24 	bl	8000e34 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 fbc0 	bl	8000d70 <MX_DMA_Init>
  MX_I2C1_Init();
 80005f0:	f000 f9d2 	bl	8000998 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 fb5e 	bl	8000cb4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 fb8c 	bl	8000d14 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 fb2a 	bl	8000c54 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000600:	f000 f97e 	bl	8000900 <MX_CRC_Init>
  MX_I2C4_Init();
 8000604:	f000 fa08 	bl	8000a18 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000608:	f000 fa46 	bl	8000a98 <MX_SPI1_Init>
  MX_SPI2_Init();
 800060c:	f000 fa82 	bl	8000b14 <MX_SPI2_Init>
  MX_ADC1_Init();
 8000610:	f000 f924 	bl	800085c <MX_ADC1_Init>
  MX_TIM7_Init();
 8000614:	f000 fab8 	bl	8000b88 <MX_TIM7_Init>
  MX_UART4_Init();
 8000618:	f000 faec 	bl	8000bf4 <MX_UART4_Init>
  MX_DAC_Init();
 800061c:	f000 f992 	bl	8000944 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000620:	f00e f8f2 	bl	800e808 <osKernelInitialize>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UartRx */
  UartRxHandle = osSemaphoreNew(1, 0, &UartRx_attributes);
 8000624:	4a39      	ldr	r2, [pc, #228]	@ (800070c <main+0x130>)
 8000626:	2100      	movs	r1, #0
 8000628:	2001      	movs	r0, #1
 800062a:	f00e fb9b 	bl	800ed64 <osSemaphoreNew>
 800062e:	4603      	mov	r3, r0
 8000630:	4a37      	ldr	r2, [pc, #220]	@ (8000710 <main+0x134>)
 8000632:	6013      	str	r3, [r2, #0]

  /* creation of UartTx */
  UartTxHandle = osSemaphoreNew(1, 0, &UartTx_attributes);
 8000634:	4a37      	ldr	r2, [pc, #220]	@ (8000714 <main+0x138>)
 8000636:	2100      	movs	r1, #0
 8000638:	2001      	movs	r0, #1
 800063a:	f00e fb93 	bl	800ed64 <osSemaphoreNew>
 800063e:	4603      	mov	r3, r0
 8000640:	4a35      	ldr	r2, [pc, #212]	@ (8000718 <main+0x13c>)
 8000642:	6013      	str	r3, [r2, #0]

  /* creation of I2cRx */
  I2cRxHandle = osSemaphoreNew(1, 0, &I2cRx_attributes);
 8000644:	4a35      	ldr	r2, [pc, #212]	@ (800071c <main+0x140>)
 8000646:	2100      	movs	r1, #0
 8000648:	2001      	movs	r0, #1
 800064a:	f00e fb8b 	bl	800ed64 <osSemaphoreNew>
 800064e:	4603      	mov	r3, r0
 8000650:	4a33      	ldr	r2, [pc, #204]	@ (8000720 <main+0x144>)
 8000652:	6013      	str	r3, [r2, #0]

  /* creation of I2cTx */
  I2cTxHandle = osSemaphoreNew(1, 0, &I2cTx_attributes);
 8000654:	4a33      	ldr	r2, [pc, #204]	@ (8000724 <main+0x148>)
 8000656:	2100      	movs	r1, #0
 8000658:	2001      	movs	r0, #1
 800065a:	f00e fb83 	bl	800ed64 <osSemaphoreNew>
 800065e:	4603      	mov	r3, r0
 8000660:	4a31      	ldr	r2, [pc, #196]	@ (8000728 <main+0x14c>)
 8000662:	6013      	str	r3, [r2, #0]

  /* creation of SpiRx */
  SpiRxHandle = osSemaphoreNew(1, 0, &SpiRx_attributes);
 8000664:	4a31      	ldr	r2, [pc, #196]	@ (800072c <main+0x150>)
 8000666:	2100      	movs	r1, #0
 8000668:	2001      	movs	r0, #1
 800066a:	f00e fb7b 	bl	800ed64 <osSemaphoreNew>
 800066e:	4603      	mov	r3, r0
 8000670:	4a2f      	ldr	r2, [pc, #188]	@ (8000730 <main+0x154>)
 8000672:	6013      	str	r3, [r2, #0]

  /* creation of AdcSem */
  AdcSemHandle = osSemaphoreNew(1, 0, &AdcSem_attributes);
 8000674:	4a2f      	ldr	r2, [pc, #188]	@ (8000734 <main+0x158>)
 8000676:	2100      	movs	r1, #0
 8000678:	2001      	movs	r0, #1
 800067a:	f00e fb73 	bl	800ed64 <osSemaphoreNew>
 800067e:	4603      	mov	r3, r0
 8000680:	4a2d      	ldr	r2, [pc, #180]	@ (8000738 <main+0x15c>)
 8000682:	6013      	str	r3, [r2, #0]

  /* creation of TimSem */
  TimSemHandle = osSemaphoreNew(1, 0, &TimSem_attributes);
 8000684:	4a2d      	ldr	r2, [pc, #180]	@ (800073c <main+0x160>)
 8000686:	2100      	movs	r1, #0
 8000688:	2001      	movs	r0, #1
 800068a:	f00e fb6b 	bl	800ed64 <osSemaphoreNew>
 800068e:	4603      	mov	r3, r0
 8000690:	4a2b      	ldr	r2, [pc, #172]	@ (8000740 <main+0x164>)
 8000692:	6013      	str	r3, [r2, #0]

  /* creation of SpiTx */
  SpiTxHandle = osSemaphoreNew(1, 0, &SpiTx_attributes);
 8000694:	4a2b      	ldr	r2, [pc, #172]	@ (8000744 <main+0x168>)
 8000696:	2100      	movs	r1, #0
 8000698:	2001      	movs	r0, #1
 800069a:	f00e fb63 	bl	800ed64 <osSemaphoreNew>
 800069e:	4603      	mov	r3, r0
 80006a0:	4a29      	ldr	r2, [pc, #164]	@ (8000748 <main+0x16c>)
 80006a2:	6013      	str	r3, [r2, #0]

  /* creation of SpiSlaveRx */
  SpiSlaveRxHandle = osSemaphoreNew(1, 0, &SpiSlaveRx_attributes);
 80006a4:	4a29      	ldr	r2, [pc, #164]	@ (800074c <main+0x170>)
 80006a6:	2100      	movs	r1, #0
 80006a8:	2001      	movs	r0, #1
 80006aa:	f00e fb5b 	bl	800ed64 <osSemaphoreNew>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4a27      	ldr	r2, [pc, #156]	@ (8000750 <main+0x174>)
 80006b2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of testsQ */
  testsQHandle = osMessageQueueNew (16, 4, &testsQ_attributes);
 80006b4:	4a27      	ldr	r2, [pc, #156]	@ (8000754 <main+0x178>)
 80006b6:	2104      	movs	r1, #4
 80006b8:	2010      	movs	r0, #16
 80006ba:	f00e fcad 	bl	800f018 <osMessageQueueNew>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a25      	ldr	r2, [pc, #148]	@ (8000758 <main+0x17c>)
 80006c2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(lwip_initiation, NULL, &defaultTask_attributes);
 80006c4:	4a25      	ldr	r2, [pc, #148]	@ (800075c <main+0x180>)
 80006c6:	2100      	movs	r1, #0
 80006c8:	4825      	ldr	r0, [pc, #148]	@ (8000760 <main+0x184>)
 80006ca:	f00e f92f 	bl	800e92c <osThreadNew>
 80006ce:	4603      	mov	r3, r0
 80006d0:	4a24      	ldr	r2, [pc, #144]	@ (8000764 <main+0x188>)
 80006d2:	6013      	str	r3, [r2, #0]

  /* creation of blink_task */
  blink_taskHandle = osThreadNew(blinking_blue, NULL, &blink_task_attributes);
 80006d4:	4a24      	ldr	r2, [pc, #144]	@ (8000768 <main+0x18c>)
 80006d6:	2100      	movs	r1, #0
 80006d8:	4824      	ldr	r0, [pc, #144]	@ (800076c <main+0x190>)
 80006da:	f00e f927 	bl	800e92c <osThreadNew>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a23      	ldr	r2, [pc, #140]	@ (8000770 <main+0x194>)
 80006e2:	6013      	str	r3, [r2, #0]

  /* creation of udp_task */
  udp_taskHandle = osThreadNew(udp_function, NULL, &udp_task_attributes);
 80006e4:	4a23      	ldr	r2, [pc, #140]	@ (8000774 <main+0x198>)
 80006e6:	2100      	movs	r1, #0
 80006e8:	4823      	ldr	r0, [pc, #140]	@ (8000778 <main+0x19c>)
 80006ea:	f00e f91f 	bl	800e92c <osThreadNew>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a22      	ldr	r2, [pc, #136]	@ (800077c <main+0x1a0>)
 80006f2:	6013      	str	r3, [r2, #0]

  /* creation of performing_task */
  performing_taskHandle = osThreadNew(perform_tests, NULL, &performing_task_attributes);
 80006f4:	4a22      	ldr	r2, [pc, #136]	@ (8000780 <main+0x1a4>)
 80006f6:	2100      	movs	r1, #0
 80006f8:	4822      	ldr	r0, [pc, #136]	@ (8000784 <main+0x1a8>)
 80006fa:	f00e f917 	bl	800e92c <osThreadNew>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a21      	ldr	r2, [pc, #132]	@ (8000788 <main+0x1ac>)
 8000702:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000704:	f00e f8b4 	bl	800e870 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <main+0x12c>
 800070c:	08022164 	.word	0x08022164
 8000710:	20000db0 	.word	0x20000db0
 8000714:	08022174 	.word	0x08022174
 8000718:	20000db4 	.word	0x20000db4
 800071c:	08022184 	.word	0x08022184
 8000720:	20000db8 	.word	0x20000db8
 8000724:	08022194 	.word	0x08022194
 8000728:	20000dbc 	.word	0x20000dbc
 800072c:	080221a4 	.word	0x080221a4
 8000730:	20000dc0 	.word	0x20000dc0
 8000734:	080221b4 	.word	0x080221b4
 8000738:	20000dc4 	.word	0x20000dc4
 800073c:	080221c4 	.word	0x080221c4
 8000740:	20000dc8 	.word	0x20000dc8
 8000744:	080221d4 	.word	0x080221d4
 8000748:	20000dcc 	.word	0x20000dcc
 800074c:	080221e4 	.word	0x080221e4
 8000750:	20000dd0 	.word	0x20000dd0
 8000754:	0802214c 	.word	0x0802214c
 8000758:	20000dac 	.word	0x20000dac
 800075c:	080220bc 	.word	0x080220bc
 8000760:	08001229 	.word	0x08001229
 8000764:	20000d9c 	.word	0x20000d9c
 8000768:	080220e0 	.word	0x080220e0
 800076c:	0800123d 	.word	0x0800123d
 8000770:	20000da0 	.word	0x20000da0
 8000774:	08022104 	.word	0x08022104
 8000778:	08001281 	.word	0x08001281
 800077c:	20000da4 	.word	0x20000da4
 8000780:	08022128 	.word	0x08022128
 8000784:	08001295 	.word	0x08001295
 8000788:	20000da8 	.word	0x20000da8

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	@ 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	2230      	movs	r2, #48	@ 0x30
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f01d fdf2 	bl	801e384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007b0:	f007 fe20 	bl	80083f4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b4:	4b27      	ldr	r3, [pc, #156]	@ (8000854 <SystemClock_Config+0xc8>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b8:	4a26      	ldr	r2, [pc, #152]	@ (8000854 <SystemClock_Config+0xc8>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c0:	4b24      	ldr	r3, [pc, #144]	@ (8000854 <SystemClock_Config+0xc8>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007cc:	4b22      	ldr	r3, [pc, #136]	@ (8000858 <SystemClock_Config+0xcc>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007d4:	4a20      	ldr	r2, [pc, #128]	@ (8000858 <SystemClock_Config+0xcc>)
 80007d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000858 <SystemClock_Config+0xcc>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007ec:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000800:	2348      	movs	r3, #72	@ 0x48
 8000802:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000808:	2303      	movs	r3, #3
 800080a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	4618      	mov	r0, r3
 8000812:	f007 fdff 	bl	8008414 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800081c:	f000 fdfa 	bl	8001414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000820:	230f      	movs	r3, #15
 8000822:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000824:	2302      	movs	r3, #2
 8000826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800082c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000830:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2102      	movs	r1, #2
 800083c:	4618      	mov	r0, r3
 800083e:	f008 f88d 	bl	800895c <HAL_RCC_ClockConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000848:	f000 fde4 	bl	8001414 <Error_Handler>
  }
}
 800084c:	bf00      	nop
 800084e:	3750      	adds	r7, #80	@ 0x50
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800
 8000858:	40007000 	.word	0x40007000

0800085c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000862:	463b      	mov	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800086e:	4b21      	ldr	r3, [pc, #132]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000870:	4a21      	ldr	r2, [pc, #132]	@ (80008f8 <MX_ADC1_Init+0x9c>)
 8000872:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000874:	4b1f      	ldr	r3, [pc, #124]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800087a:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <MX_ADC1_Init+0x98>)
 800087c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000880:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000882:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000884:	2201      	movs	r2, #1
 8000886:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000888:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <MX_ADC1_Init+0x98>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088e:	4b19      	ldr	r3, [pc, #100]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000896:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000898:	2200      	movs	r2, #0
 800089a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800089c:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <MX_ADC1_Init+0x98>)
 800089e:	4a17      	ldr	r2, [pc, #92]	@ (80008fc <MX_ADC1_Init+0xa0>)
 80008a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a2:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008bc:	480d      	ldr	r0, [pc, #52]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008be:	f001 ffe1 	bl	8002884 <HAL_ADC_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008c8:	f000 fda4 	bl	8001414 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008cc:	230a      	movs	r3, #10
 80008ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008de:	f002 fa53 	bl	8002d88 <HAL_ADC_ConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008e8:	f000 fd94 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200001e8 	.word	0x200001e8
 80008f8:	40012000 	.word	0x40012000
 80008fc:	0f000001 	.word	0x0f000001

08000900 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000904:	4b0d      	ldr	r3, [pc, #52]	@ (800093c <MX_CRC_Init+0x3c>)
 8000906:	4a0e      	ldr	r2, [pc, #56]	@ (8000940 <MX_CRC_Init+0x40>)
 8000908:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800090a:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_CRC_Init+0x3c>)
 800090c:	2200      	movs	r2, #0
 800090e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000910:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <MX_CRC_Init+0x3c>)
 8000912:	2200      	movs	r2, #0
 8000914:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000916:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_CRC_Init+0x3c>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800091c:	4b07      	ldr	r3, [pc, #28]	@ (800093c <MX_CRC_Init+0x3c>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000922:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_CRC_Init+0x3c>)
 8000924:	2201      	movs	r2, #1
 8000926:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	@ (800093c <MX_CRC_Init+0x3c>)
 800092a:	f002 fd9f 	bl	800346c <HAL_CRC_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000934:	f000 fd6e 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000230 	.word	0x20000230
 8000940:	40023000 	.word	0x40023000

08000944 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800094a:	463b      	mov	r3, r7
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_DAC_Init+0x4c>)
 8000954:	4a0f      	ldr	r2, [pc, #60]	@ (8000994 <MX_DAC_Init+0x50>)
 8000956:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000958:	480d      	ldr	r0, [pc, #52]	@ (8000990 <MX_DAC_Init+0x4c>)
 800095a:	f002 ff91 	bl	8003880 <HAL_DAC_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000964:	f000 fd56 	bl	8001414 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000968:	2300      	movs	r3, #0
 800096a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000970:	463b      	mov	r3, r7
 8000972:	2200      	movs	r2, #0
 8000974:	4619      	mov	r1, r3
 8000976:	4806      	ldr	r0, [pc, #24]	@ (8000990 <MX_DAC_Init+0x4c>)
 8000978:	f003 f885 	bl	8003a86 <HAL_DAC_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000982:	f000 fd47 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000254 	.word	0x20000254
 8000994:	40007400 	.word	0x40007400

08000998 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800099c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <MX_I2C1_Init+0x74>)
 800099e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a10 <MX_I2C1_Init+0x78>)
 80009a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a14 <MX_I2C1_Init+0x7c>)
 80009a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 240;
 80009a8:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009aa:	22f0      	movs	r2, #240	@ 0xf0
 80009ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ae:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b4:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009d2:	480e      	ldr	r0, [pc, #56]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009d4:	f005 fac2 	bl	8005f5c <HAL_I2C_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009de:	f000 fd19 	bl	8001414 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009e2:	2100      	movs	r1, #0
 80009e4:	4809      	ldr	r0, [pc, #36]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009e6:	f007 fb33 	bl	8008050 <HAL_I2CEx_ConfigAnalogFilter>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009f0:	f000 fd10 	bl	8001414 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009f4:	2100      	movs	r1, #0
 80009f6:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009f8:	f007 fb75 	bl	80080e6 <HAL_I2CEx_ConfigDigitalFilter>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a02:	f000 fd07 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000268 	.word	0x20000268
 8000a10:	40005400 	.word	0x40005400
 8000a14:	00808cd2 	.word	0x00808cd2

08000a18 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a90 <MX_I2C4_Init+0x78>)
 8000a20:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 8000a22:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a24:	4a1b      	ldr	r2, [pc, #108]	@ (8000a94 <MX_I2C4_Init+0x7c>)
 8000a26:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a28:	4b18      	ldr	r3, [pc, #96]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a34:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a3a:	4b14      	ldr	r3, [pc, #80]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a40:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a46:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a52:	480e      	ldr	r0, [pc, #56]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a54:	f005 fa82 	bl	8005f5c <HAL_I2C_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a5e:	f000 fcd9 	bl	8001414 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a62:	2100      	movs	r1, #0
 8000a64:	4809      	ldr	r0, [pc, #36]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a66:	f007 faf3 	bl	8008050 <HAL_I2CEx_ConfigAnalogFilter>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a70:	f000 fcd0 	bl	8001414 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a74:	2100      	movs	r1, #0
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a78:	f007 fb35 	bl	80080e6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a82:	f000 fcc7 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200002bc 	.word	0x200002bc
 8000a90:	40006000 	.word	0x40006000
 8000a94:	00808cd2 	.word	0x00808cd2

08000a98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000b10 <MX_SPI1_Init+0x78>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000aa4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000aa8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aaa:	4b18      	ldr	r3, [pc, #96]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab0:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ab2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000ab6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000abe:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ac6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ace:	2230      	movs	r2, #48	@ 0x30
 8000ad0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ae0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ae4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ae6:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ae8:	2207      	movs	r2, #7
 8000aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aec:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000af4:	2208      	movs	r2, #8
 8000af6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000af8:	4804      	ldr	r0, [pc, #16]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000afa:	f008 fd77 	bl	80095ec <HAL_SPI_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000b04:	f000 fc86 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200003d0 	.word	0x200003d0
 8000b10:	40013000 	.word	0x40013000

08000b14 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b18:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000b84 <MX_SPI2_Init+0x70>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000b1e:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b24:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b2a:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b2c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000b30:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b38:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b44:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b58:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b5c:	2207      	movs	r2, #7
 8000b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b60:	4b07      	ldr	r3, [pc, #28]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	@ (8000b80 <MX_SPI2_Init+0x6c>)
 8000b6e:	f008 fd3d 	bl	80095ec <HAL_SPI_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_SPI2_Init+0x68>
  {
    Error_Handler();
 8000b78:	f000 fc4c 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000434 	.word	0x20000434
 8000b84:	40003800 	.word	0x40003800

08000b88 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b98:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000b9a:	4a15      	ldr	r2, [pc, #84]	@ (8000bf0 <MX_TIM7_Init+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 48000 - 1;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000ba0:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000ba4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100 - 1;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000bae:	2263      	movs	r2, #99	@ 0x63
 8000bb0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000bb8:	480c      	ldr	r0, [pc, #48]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000bba:	f00a f929 	bl	800ae10 <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000bc4:	f000 fc26 	bl	8001414 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000bd6:	f00a fbf1 	bl	800b3bc <HAL_TIMEx_MasterConfigSynchronization>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000be0:	f000 fc18 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000618 	.word	0x20000618
 8000bf0:	40001400 	.word	0x40001400

08000bf4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000bfa:	4a15      	ldr	r2, [pc, #84]	@ (8000c50 <MX_UART4_Init+0x5c>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c38:	f00a fc6c 	bl	800b514 <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000c42:	f000 fbe7 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000664 	.word	0x20000664
 8000c50:	40004c00 	.word	0x40004c00

08000c54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c58:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c5a:	4a15      	ldr	r2, [pc, #84]	@ (8000cb0 <MX_USART2_UART_Init+0x5c>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c98:	f00a fc3c 	bl	800b514 <HAL_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ca2:	f000 fbb7 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200006ec 	.word	0x200006ec
 8000cb0:	40004400 	.word	0x40004400

08000cb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cba:	4a15      	ldr	r2, [pc, #84]	@ (8000d10 <MX_USART3_UART_Init+0x5c>)
 8000cbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cbe:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cda:	220c      	movs	r2, #12
 8000cdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cf8:	f00a fc0c 	bl	800b514 <HAL_UART_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d02:	f000 fb87 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000774 	.word	0x20000774
 8000d10:	40004800 	.word	0x40004800

08000d14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d18:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d1a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d22:	2206      	movs	r2, #6
 8000d24:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d26:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d28:	2202      	movs	r2, #2
 8000d2a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d34:	2202      	movs	r2, #2
 8000d36:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d44:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d58:	f007 fa11 	bl	800817e <HAL_PCD_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d62:	f000 fb57 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200008bc 	.word	0x200008bc

08000d70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d76:	4b2e      	ldr	r3, [pc, #184]	@ (8000e30 <MX_DMA_Init+0xc0>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a2d      	ldr	r2, [pc, #180]	@ (8000e30 <MX_DMA_Init+0xc0>)
 8000d7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b2b      	ldr	r3, [pc, #172]	@ (8000e30 <MX_DMA_Init+0xc0>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d8e:	4b28      	ldr	r3, [pc, #160]	@ (8000e30 <MX_DMA_Init+0xc0>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a27      	ldr	r2, [pc, #156]	@ (8000e30 <MX_DMA_Init+0xc0>)
 8000d94:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9a:	4b25      	ldr	r3, [pc, #148]	@ (8000e30 <MX_DMA_Init+0xc0>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2106      	movs	r1, #6
 8000daa:	200b      	movs	r0, #11
 8000dac:	f002 fb26 	bl	80033fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000db0:	200b      	movs	r0, #11
 8000db2:	f002 fb3f 	bl	8003434 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 6, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2106      	movs	r1, #6
 8000dba:	200d      	movs	r0, #13
 8000dbc:	f002 fb1e 	bl	80033fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000dc0:	200d      	movs	r0, #13
 8000dc2:	f002 fb37 	bl	8003434 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 6, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2106      	movs	r1, #6
 8000dca:	200e      	movs	r0, #14
 8000dcc:	f002 fb16 	bl	80033fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000dd0:	200e      	movs	r0, #14
 8000dd2:	f002 fb2f 	bl	8003434 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 6, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2106      	movs	r1, #6
 8000dda:	200f      	movs	r0, #15
 8000ddc:	f002 fb0e 	bl	80033fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000de0:	200f      	movs	r0, #15
 8000de2:	f002 fb27 	bl	8003434 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2106      	movs	r1, #6
 8000dea:	2010      	movs	r0, #16
 8000dec:	f002 fb06 	bl	80033fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000df0:	2010      	movs	r0, #16
 8000df2:	f002 fb1f 	bl	8003434 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 6, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2106      	movs	r1, #6
 8000dfa:	2011      	movs	r0, #17
 8000dfc:	f002 fafe 	bl	80033fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000e00:	2011      	movs	r0, #17
 8000e02:	f002 fb17 	bl	8003434 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2105      	movs	r1, #5
 8000e0a:	2038      	movs	r0, #56	@ 0x38
 8000e0c:	f002 faf6 	bl	80033fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e10:	2038      	movs	r0, #56	@ 0x38
 8000e12:	f002 fb0f 	bl	8003434 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2105      	movs	r1, #5
 8000e1a:	203b      	movs	r0, #59	@ 0x3b
 8000e1c:	f002 faee 	bl	80033fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000e20:	203b      	movs	r0, #59	@ 0x3b
 8000e22:	f002 fb07 	bl	8003434 <HAL_NVIC_EnableIRQ>

}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800

08000e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	@ 0x30
 8000e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 031c 	add.w	r3, r7, #28
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e4a:	4b53      	ldr	r3, [pc, #332]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a52      	ldr	r2, [pc, #328]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b50      	ldr	r3, [pc, #320]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	61bb      	str	r3, [r7, #24]
 8000e60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e62:	4b4d      	ldr	r3, [pc, #308]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a4c      	ldr	r2, [pc, #304]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b4a      	ldr	r3, [pc, #296]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	4b47      	ldr	r3, [pc, #284]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a46      	ldr	r2, [pc, #280]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b44      	ldr	r3, [pc, #272]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	4b41      	ldr	r3, [pc, #260]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	4a40      	ldr	r2, [pc, #256]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a3a      	ldr	r2, [pc, #232]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000eb0:	f043 0320 	orr.w	r3, r3, #32
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b38      	ldr	r3, [pc, #224]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f003 0320 	and.w	r3, r3, #32
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ec2:	4b35      	ldr	r3, [pc, #212]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a34      	ldr	r2, [pc, #208]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000ec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b32      	ldr	r3, [pc, #200]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eda:	4b2f      	ldr	r3, [pc, #188]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a2e      	ldr	r2, [pc, #184]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000ee0:	f043 0308 	orr.w	r3, r3, #8
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8000f98 <MX_GPIO_Init+0x164>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0308 	and.w	r3, r3, #8
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000ef8:	4828      	ldr	r0, [pc, #160]	@ (8000f9c <MX_GPIO_Init+0x168>)
 8000efa:	f004 ffd7 	bl	8005eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000efe:	2201      	movs	r2, #1
 8000f00:	2101      	movs	r1, #1
 8000f02:	4827      	ldr	r0, [pc, #156]	@ (8000fa0 <MX_GPIO_Init+0x16c>)
 8000f04:	f004 ffd2 	bl	8005eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2140      	movs	r1, #64	@ 0x40
 8000f0c:	4824      	ldr	r0, [pc, #144]	@ (8000fa0 <MX_GPIO_Init+0x16c>)
 8000f0e:	f004 ffcd 	bl	8005eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f18:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	481e      	ldr	r0, [pc, #120]	@ (8000fa4 <MX_GPIO_Init+0x170>)
 8000f2a:	f004 fd07 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000f2e:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4619      	mov	r1, r3
 8000f46:	4815      	ldr	r0, [pc, #84]	@ (8000f9c <MX_GPIO_Init+0x168>)
 8000f48:	f004 fcf8 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin PG6 */
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_6;
 8000f4c:	2341      	movs	r3, #65	@ 0x41
 8000f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f50:	2301      	movs	r3, #1
 8000f52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	4619      	mov	r1, r3
 8000f62:	480f      	ldr	r0, [pc, #60]	@ (8000fa0 <MX_GPIO_Init+0x16c>)
 8000f64:	f004 fcea 	bl	800593c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f68:	2380      	movs	r3, #128	@ 0x80
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4809      	ldr	r0, [pc, #36]	@ (8000fa0 <MX_GPIO_Init+0x16c>)
 8000f7c:	f004 fcde 	bl	800593c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f80:	2200      	movs	r2, #0
 8000f82:	2105      	movs	r1, #5
 8000f84:	2028      	movs	r0, #40	@ 0x28
 8000f86:	f002 fa39 	bl	80033fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f8a:	2028      	movs	r0, #40	@ 0x28
 8000f8c:	f002 fa52 	bl	8003434 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f90:	bf00      	nop
 8000f92:	3730      	adds	r7, #48	@ 0x30
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40020400 	.word	0x40020400
 8000fa0:	40021800 	.word	0x40021800
 8000fa4:	40020800 	.word	0x40020800

08000fa8 <vApplicationStackOverflowHook>:
 *
 * @param xTask Task handle of the task whose stack overflowed.
 * @param pcTaskName Pointer to the name of the task whose stack overflowed.
 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, signed char *pcTaskName)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
    // A stack overflow has been detected. This is a critical error.
    // The system is in an unstable state.

    printf("\n\r!!! STACK OVERFLOW DETECTED !!!\n\r");
 8000fb2:	4811      	ldr	r0, [pc, #68]	@ (8000ff8 <vApplicationStackOverflowHook+0x50>)
 8000fb4:	f01d f88e 	bl	801e0d4 <iprintf>
    printf("Task: %s\n\r", pcTaskName);
 8000fb8:	6839      	ldr	r1, [r7, #0]
 8000fba:	4810      	ldr	r0, [pc, #64]	@ (8000ffc <vApplicationStackOverflowHook+0x54>)
 8000fbc:	f01d f88a 	bl	801e0d4 <iprintf>
    printf("Handle: 0x%lX\n\r", (uint32_t)xTask);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480e      	ldr	r0, [pc, #56]	@ (8001000 <vApplicationStackOverflowHook+0x58>)
 8000fc6:	f01d f885 	bl	801e0d4 <iprintf>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fce:	b672      	cpsid	i
 8000fd0:	f383 8811 	msr	BASEPRI, r3
 8000fd4:	f3bf 8f6f 	isb	sy
 8000fd8:	f3bf 8f4f 	dsb	sy
 8000fdc:	b662      	cpsie	i
 8000fde:	60fb      	str	r3, [r7, #12]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000fe0:	bf00      	nop
    // Disable interrupts to prevent further execution and potential damage
    taskDISABLE_INTERRUPTS();
    for(;;)
    {
        // RED LED toggle for visual indication
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000fe2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fe6:	4807      	ldr	r0, [pc, #28]	@ (8001004 <vApplicationStackOverflowHook+0x5c>)
 8000fe8:	f004 ff79 	bl	8005ede <HAL_GPIO_TogglePin>
        osDelay(1000);
 8000fec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ff0:	f00d fd42 	bl	800ea78 <osDelay>
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000ff4:	bf00      	nop
 8000ff6:	e7f4      	b.n	8000fe2 <vApplicationStackOverflowHook+0x3a>
 8000ff8:	0801f0fc 	.word	0x0801f0fc
 8000ffc:	0801f120 	.word	0x0801f120
 8001000:	0801f12c 	.word	0x0801f12c
 8001004:	40020400 	.word	0x40020400

08001008 <udp_receive_init>:
    }
}

void udp_receive_init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
    udp_pcb_handle = udp_new();
 800100c:	f019 fc02 	bl	801a814 <udp_new>
 8001010:	4603      	mov	r3, r0
 8001012:	4a13      	ldr	r2, [pc, #76]	@ (8001060 <udp_receive_init+0x58>)
 8001014:	6013      	str	r3, [r2, #0]
    if (!udp_pcb_handle) {
 8001016:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <udp_receive_init+0x58>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d103      	bne.n	8001026 <udp_receive_init+0x1e>
        printf("Failed to create UDP PCB\n\r");
 800101e:	4811      	ldr	r0, [pc, #68]	@ (8001064 <udp_receive_init+0x5c>)
 8001020:	f01d f858 	bl	801e0d4 <iprintf>
        return;
 8001024:	e01a      	b.n	800105c <udp_receive_init+0x54>
    }

    if (udp_bind(udp_pcb_handle, IP_ADDR_ANY, LOCAL_PORT) != ERR_OK) {
 8001026:	4b0e      	ldr	r3, [pc, #56]	@ (8001060 <udp_receive_init+0x58>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f241 328d 	movw	r2, #5005	@ 0x138d
 800102e:	490e      	ldr	r1, [pc, #56]	@ (8001068 <udp_receive_init+0x60>)
 8001030:	4618      	mov	r0, r3
 8001032:	f019 fb47 	bl	801a6c4 <udp_bind>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <udp_receive_init+0x3c>
        printf("UDP bind failed\n\r");
 800103c:	480b      	ldr	r0, [pc, #44]	@ (800106c <udp_receive_init+0x64>)
 800103e:	f01d f849 	bl	801e0d4 <iprintf>
        return;
 8001042:	e00b      	b.n	800105c <udp_receive_init+0x54>
    }

    udp_recv(udp_pcb_handle, udp_receive_callback, NULL);
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <udp_receive_init+0x58>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2200      	movs	r2, #0
 800104a:	4909      	ldr	r1, [pc, #36]	@ (8001070 <udp_receive_init+0x68>)
 800104c:	4618      	mov	r0, r3
 800104e:	f019 fbc1 	bl	801a7d4 <udp_recv>
    printf("UDP ready, listening on port %d\n\r", LOCAL_PORT);
 8001052:	f241 318d 	movw	r1, #5005	@ 0x138d
 8001056:	4807      	ldr	r0, [pc, #28]	@ (8001074 <udp_receive_init+0x6c>)
 8001058:	f01d f83c 	bl	801e0d4 <iprintf>
}
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000dd4 	.word	0x20000dd4
 8001064:	0801f13c 	.word	0x0801f13c
 8001068:	08022330 	.word	0x08022330
 800106c:	0801f158 	.word	0x0801f158
 8001070:	08001079 	.word	0x08001079
 8001074:	0801f16c 	.word	0x0801f16c

08001078 <udp_receive_callback>:
 * 1. alters it to a test_command_t struct
 * 2. sends it to execution queue.
 *
 * */
void udp_receive_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08e      	sub	sp, #56	@ 0x38
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
    if (p != NULL) {
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d05e      	beq.n	800114a <udp_receive_callback+0xd2>
        // Copy the sender's IP address
        ip_addr_copy(g_server_addr, *addr);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a35      	ldr	r2, [pc, #212]	@ (8001168 <udp_receive_callback+0xf0>)
 8001092:	6013      	str	r3, [r2, #0]
        // Copy the sender's port
        g_server_port = port;
 8001094:	4a35      	ldr	r2, [pc, #212]	@ (800116c <udp_receive_callback+0xf4>)
 8001096:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800109a:	8013      	strh	r3, [r2, #0]

        if (p->len >= sizeof(test_command_t))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	895b      	ldrh	r3, [r3, #10]
 80010a0:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 80010a4:	d942      	bls.n	800112c <udp_receive_callback+0xb4>
        {
            test_command_t *cmd = (test_command_t *)pvPortMalloc(sizeof(test_command_t));
 80010a6:	f240 1007 	movw	r0, #263	@ 0x107
 80010aa:	f011 fa9d 	bl	80125e8 <pvPortMalloc>
 80010ae:	4603      	mov	r3, r0
 80010b0:	637b      	str	r3, [r7, #52]	@ 0x34
            if (cmd != NULL)
 80010b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d02a      	beq.n	800110e <udp_receive_callback+0x96>
            {
			   // Copy the data from the pbuf payload to the allocated memory
			   memcpy(cmd, p->payload, sizeof(test_command_t)); // Only copy the struct size
 80010b8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f240 1207 	movw	r2, #263	@ 0x107
 80010c2:	4619      	mov	r1, r3
 80010c4:	f01d fa31 	bl	801e52a <memcpy>

	            // Send the POINTER to the newly allocated and copied* data to the queue
	            if (xQueueSendToBack(testsQHandle, &cmd, 1) != pdPASS) // Pass address of pointer
 80010c8:	4b29      	ldr	r3, [pc, #164]	@ (8001170 <udp_receive_callback+0xf8>)
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80010d0:	2300      	movs	r3, #0
 80010d2:	2201      	movs	r2, #1
 80010d4:	f00e fc80 	bl	800f9d8 <xQueueGenericSend>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d00f      	beq.n	80010fe <udp_receive_callback+0x86>
	            {
	            	result_pro_t response={NULL, TEST_ERR};
 80010de:	2300      	movs	r3, #0
 80010e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010e6:	863b      	strh	r3, [r7, #48]	@ 0x30
	            	send_response(response);
 80010e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010f0:	f000 f844 	bl	800117c <send_response>
	                vPortFree(cmd); // If send fails, free the allocated memory
 80010f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010f6:	4618      	mov	r0, r3
 80010f8:	f011 fb44 	bl	8012784 <vPortFree>
 80010fc:	e021      	b.n	8001142 <udp_receive_callback+0xca>
	            } else {
	                // notify if successfully sent to queue
	                xTaskNotifyGive(performing_taskHandle);
 80010fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <udp_receive_callback+0xfc>)
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	2300      	movs	r3, #0
 8001104:	2202      	movs	r2, #2
 8001106:	2100      	movs	r1, #0
 8001108:	f010 fbaa 	bl	8011860 <xTaskGenericNotify>
 800110c:	e019      	b.n	8001142 <udp_receive_callback+0xca>
	            }
            }
            else{
            	result_pro_t response={NULL, TEST_ERR};
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
 8001112:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001116:	853b      	strh	r3, [r7, #40]	@ 0x28
            	send_response(response);
 8001118:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800111c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001120:	f000 f82c 	bl	800117c <send_response>
                printf("Failed to allocate memory for test_command_t!\n\r"); // Debug printf
 8001124:	4814      	ldr	r0, [pc, #80]	@ (8001178 <udp_receive_callback+0x100>)
 8001126:	f01c ffd5 	bl	801e0d4 <iprintf>
 800112a:	e00a      	b.n	8001142 <udp_receive_callback+0xca>
            }
        } else {
        	result_pro_t response={NULL, TEST_ERR};
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001134:	843b      	strh	r3, [r7, #32]
        	send_response(response);
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800113e:	f000 f81d 	bl	800117c <send_response>
        }
        pbuf_free(p);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f013 f9ca 	bl	80144dc <pbuf_free>
    }
    else{
    	result_pro_t response={NULL, TEST_ERR};
    	send_response(response);
    }
}
 8001148:	e00a      	b.n	8001160 <udp_receive_callback+0xe8>
    	result_pro_t response={NULL, TEST_ERR};
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001152:	833b      	strh	r3, [r7, #24]
    	send_response(response);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	e893 0003 	ldmia.w	r3, {r0, r1}
 800115c:	f000 f80e 	bl	800117c <send_response>
}
 8001160:	bf00      	nop
 8001162:	3738      	adds	r7, #56	@ 0x38
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000dd8 	.word	0x20000dd8
 800116c:	20000ddc 	.word	0x20000ddc
 8001170:	20000dac 	.word	0x20000dac
 8001174:	20000da8 	.word	0x20000da8
 8001178:	0801f190 	.word	0x0801f190

0800117c <send_response>:

int send_response(result_pro_t result)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	463b      	mov	r3, r7
 8001184:	e883 0003 	stmia.w	r3, {r0, r1}
    // Check if we have a valid sender address
    if (ip_addr_isany(&g_server_addr) == 0)
 8001188:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <send_response+0x74>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d029      	beq.n	80011e4 <send_response+0x68>
    {
        // Create a new pbuf for the response data
        struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, sizeof(result_pro_t), PBUF_RAM);
 8001190:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8001194:	2106      	movs	r1, #6
 8001196:	2036      	movs	r0, #54	@ 0x36
 8001198:	f012 febc 	bl	8013f14 <pbuf_alloc>
 800119c:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d01c      	beq.n	80011de <send_response+0x62>
        {
            // Copy the result struct into the pbuf payload
            memcpy(p->payload, &result, sizeof(result_pro_t));
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	461a      	mov	r2, r3
 80011aa:	463b      	mov	r3, r7
 80011ac:	6818      	ldr	r0, [r3, #0]
 80011ae:	6010      	str	r0, [r2, #0]
 80011b0:	889b      	ldrh	r3, [r3, #4]
 80011b2:	8093      	strh	r3, [r2, #4]

            // Send the response to the stored address and port
            if(udp_sendto(udp_pcb_handle, p, &g_server_addr, g_server_port) != ERR_OK)
 80011b4:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <send_response+0x78>)
 80011b6:	6818      	ldr	r0, [r3, #0]
 80011b8:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <send_response+0x7c>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	4a0c      	ldr	r2, [pc, #48]	@ (80011f0 <send_response+0x74>)
 80011be:	68f9      	ldr	r1, [r7, #12]
 80011c0:	f019 f8ca 	bl	801a358 <udp_sendto>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d005      	beq.n	80011d6 <send_response+0x5a>
            {
                pbuf_free(p);
 80011ca:	68f8      	ldr	r0, [r7, #12]
 80011cc:	f013 f986 	bl	80144dc <pbuf_free>
            	return -1;
 80011d0:	f04f 33ff 	mov.w	r3, #4294967295
 80011d4:	e008      	b.n	80011e8 <send_response+0x6c>
            }
            // Free the pbuf
            pbuf_free(p);
 80011d6:	68f8      	ldr	r0, [r7, #12]
 80011d8:	f013 f980 	bl	80144dc <pbuf_free>
        }
    }
    else{
    	return -1;
    }
}
 80011dc:	e004      	b.n	80011e8 <send_response+0x6c>
        	return -1;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	e001      	b.n	80011e8 <send_response+0x6c>
    	return -1;
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000dd8 	.word	0x20000dd8
 80011f4:	20000dd4 	.word	0x20000dd4
 80011f8:	20000ddc 	.word	0x20000ddc

080011fc <calculate_crc>:


uint32_t calculate_crc(uint8_t *data, size_t length) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
    // HAL_CRC_Calculate expects 32-bit words, so convert length
    uint32_t word_count = (length + 3) / 4; // Round up
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	3303      	adds	r3, #3
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	60fb      	str	r3, [r7, #12]
    return HAL_CRC_Calculate(&hcrc, (uint32_t *)data, word_count);
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	4804      	ldr	r0, [pc, #16]	@ (8001224 <calculate_crc+0x28>)
 8001214:	f002 f98e 	bl	8003534 <HAL_CRC_Calculate>
 8001218:	4603      	mov	r3, r0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000230 	.word	0x20000230

08001228 <lwip_initiation>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_lwip_initiation */
void lwip_initiation(void *argument)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001230:	f00c fc8a 	bl	800db48 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001234:	2001      	movs	r0, #1
 8001236:	f00d fc1f 	bl	800ea78 <osDelay>
 800123a:	e7fb      	b.n	8001234 <lwip_initiation+0xc>

0800123c <blinking_blue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blinking_blue */
void blinking_blue(void *argument)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinking_blue */
  /* Infinite loop */
  for(;;)
  {
	/* visual heartbeat */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001244:	2180      	movs	r1, #128	@ 0x80
 8001246:	4804      	ldr	r0, [pc, #16]	@ (8001258 <blinking_blue+0x1c>)
 8001248:	f004 fe49 	bl	8005ede <HAL_GPIO_TogglePin>
    osDelay(1000);
 800124c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001250:	f00d fc12 	bl	800ea78 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8001254:	bf00      	nop
 8001256:	e7f5      	b.n	8001244 <blinking_blue+0x8>
 8001258:	40020400 	.word	0x40020400

0800125c <__io_putchar>:
  /* USER CODE END blinking_blue */
}

/* USER CODE BEGIN Header_udp_function */
int __io_putchar(int ch)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001264:	1d39      	adds	r1, r7, #4
 8001266:	f04f 33ff 	mov.w	r3, #4294967295
 800126a:	2201      	movs	r2, #1
 800126c:	4803      	ldr	r0, [pc, #12]	@ (800127c <__io_putchar+0x20>)
 800126e:	f00a f99f 	bl	800b5b0 <HAL_UART_Transmit>
    return ch;
 8001272:	687b      	ldr	r3, [r7, #4]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000774 	.word	0x20000774

08001280 <udp_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_udp_function */
void udp_function(void *argument)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN udp_function */
	udp_receive_init();
 8001288:	f7ff febe 	bl	8001008 <udp_receive_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800128c:	2001      	movs	r0, #1
 800128e:	f00d fbf3 	bl	800ea78 <osDelay>
 8001292:	e7fb      	b.n	800128c <udp_function+0xc>

08001294 <perform_tests>:
* @param argument: Not used (using queue instead)
* @retval None
*/
/* USER CODE END Header_perform_tests */
void perform_tests(void *argument)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	test_command_t *cmd;

  /* Infinite loop */
  for(;;)
  {
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // waiting for a notification
 800129c:	f04f 31ff 	mov.w	r1, #4294967295
 80012a0:	2001      	movs	r0, #1
 80012a2:	f010 fa91 	bl	80117c8 <ulTaskNotifyTake>

	if (xQueueReceive(testsQHandle, &cmd, 0) != pdPASS)
 80012a6:	4b40      	ldr	r3, [pc, #256]	@ (80013a8 <perform_tests+0x114>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f107 0114 	add.w	r1, r7, #20
 80012ae:	2200      	movs	r2, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f00e fdd7 	bl	800fe64 <xQueueReceive>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d003      	beq.n	80012c4 <perform_tests+0x30>
	{
		printf("perform_tests: No test command received\n\r");
 80012bc:	483b      	ldr	r0, [pc, #236]	@ (80013ac <perform_tests+0x118>)
 80012be:	f01c ff09 	bl	801e0d4 <iprintf>
 80012c2:	e7eb      	b.n	800129c <perform_tests+0x8>
		continue;
	}
	result_pro_t response;

	if(cmd->bit_pattern_length > MAX_BIT_PATTERN_LENGTH || cmd->test_id == NULL || cmd->iterations < 1){
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <perform_tests+0x40>
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	795b      	ldrb	r3, [r3, #5]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d108      	bne.n	80012e6 <perform_tests+0x52>
		response.test_result =TEST_ERR;
 80012d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012d8:	823b      	strh	r3, [r7, #16]
		send_response(response);
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012e2:	f7ff ff4b 	bl	800117c <send_response>
	}
	response.test_id = cmd->test_id;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	60fb      	str	r3, [r7, #12]

	switch (cmd->peripheral){
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	791b      	ldrb	r3, [r3, #4]
 80012f0:	3b01      	subs	r3, #1
 80012f2:	2b0f      	cmp	r3, #15
 80012f4:	d845      	bhi.n	8001382 <perform_tests+0xee>
 80012f6:	a201      	add	r2, pc, #4	@ (adr r2, 80012fc <perform_tests+0x68>)
 80012f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fc:	0800133d 	.word	0x0800133d
 8001300:	0800134b 	.word	0x0800134b
 8001304:	08001383 	.word	0x08001383
 8001308:	08001359 	.word	0x08001359
 800130c:	08001383 	.word	0x08001383
 8001310:	08001383 	.word	0x08001383
 8001314:	08001383 	.word	0x08001383
 8001318:	08001367 	.word	0x08001367
 800131c:	08001383 	.word	0x08001383
 8001320:	08001383 	.word	0x08001383
 8001324:	08001383 	.word	0x08001383
 8001328:	08001383 	.word	0x08001383
 800132c:	08001383 	.word	0x08001383
 8001330:	08001383 	.word	0x08001383
 8001334:	08001383 	.word	0x08001383
 8001338:	08001375 	.word	0x08001375
	case TIMER:
		response.test_result = timer_testing(cmd);
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	4618      	mov	r0, r3
 8001340:	f01c fbce 	bl	801dae0 <timer_testing>
 8001344:	4603      	mov	r3, r0
 8001346:	823b      	strh	r3, [r7, #16]
		break;
 8001348:	e01f      	b.n	800138a <perform_tests+0xf6>
	case UART:
		response.test_result = uart_testing(cmd);
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	4618      	mov	r0, r3
 800134e:	f01c fbfd 	bl	801db4c <uart_testing>
 8001352:	4603      	mov	r3, r0
 8001354:	823b      	strh	r3, [r7, #16]
		break;
 8001356:	e018      	b.n	800138a <perform_tests+0xf6>
	case SPI:
		response.test_result = spi_testing(cmd);
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	4618      	mov	r0, r3
 800135c:	f01c f956 	bl	801d60c <spi_testing>
 8001360:	4603      	mov	r3, r0
 8001362:	823b      	strh	r3, [r7, #16]
		break;
 8001364:	e011      	b.n	800138a <perform_tests+0xf6>
	case I2C:
		response.test_result = i2c_testing(cmd);
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	4618      	mov	r0, r3
 800136a:	f01b ff13 	bl	801d194 <i2c_testing>
 800136e:	4603      	mov	r3, r0
 8001370:	823b      	strh	r3, [r7, #16]
		break;
 8001372:	e00a      	b.n	800138a <perform_tests+0xf6>
	case ADC_P:
		response.test_result = adc_testing(cmd);
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	4618      	mov	r0, r3
 8001378:	f01b fe4c 	bl	801d014 <adc_testing>
 800137c:	4603      	mov	r3, r0
 800137e:	823b      	strh	r3, [r7, #16]
		break;
 8001380:	e003      	b.n	800138a <perform_tests+0xf6>
	default:
		response.test_result = TEST_ERR;
 8001382:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001386:	823b      	strh	r3, [r7, #16]
        break;
 8001388:	bf00      	nop
	}
    vPortFree(cmd);
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	4618      	mov	r0, r3
 800138e:	f011 f9f9 	bl	8012784 <vPortFree>
    osDelay(1);
 8001392:	2001      	movs	r0, #1
 8001394:	f00d fb70 	bl	800ea78 <osDelay>
    send_response(response);
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013a0:	f7ff feec 	bl	800117c <send_response>
  {
 80013a4:	e77a      	b.n	800129c <perform_tests+0x8>
 80013a6:	bf00      	nop
 80013a8:	20000dac 	.word	0x20000dac
 80013ac:	0801f1c0 	.word	0x0801f1c0

080013b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a11      	ldr	r2, [pc, #68]	@ (8001404 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80013c2:	f001 fa1b 	bl	80027fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d114      	bne.n	80013fa <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]

	    // Use the ISR-safe function to give the semaphore
	    xSemaphoreGiveFromISR(TimSemHandle, &xHigherPriorityTaskWoken);
 80013d4:	4b0d      	ldr	r3, [pc, #52]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f107 020c 	add.w	r2, r7, #12
 80013dc:	4611      	mov	r1, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	f00e fca7 	bl	800fd32 <xQueueGiveFromISR>

	    // Call this if a higher priority task was unblocked
	    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d007      	beq.n	80013fa <HAL_TIM_PeriodElapsedCallback+0x4a>
 80013ea:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80013ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	f3bf 8f4f 	dsb	sy
 80013f6:	f3bf 8f6f 	isb	sy
  }
  /* USER CODE END Callback 1 */
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40001000 	.word	0x40001000
 8001408:	40001400 	.word	0x40001400
 800140c:	20000dc8 	.word	0x20000dc8
 8001410:	e000ed04 	.word	0xe000ed04

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <Error_Handler+0x8>

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	4b19      	ldr	r3, [pc, #100]	@ (800148c <HAL_MspInit+0x6c>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142a:	4a18      	ldr	r2, [pc, #96]	@ (800148c <HAL_MspInit+0x6c>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001430:	6413      	str	r3, [r2, #64]	@ 0x40
 8001432:	4b16      	ldr	r3, [pc, #88]	@ (800148c <HAL_MspInit+0x6c>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	4b13      	ldr	r3, [pc, #76]	@ (800148c <HAL_MspInit+0x6c>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001442:	4a12      	ldr	r2, [pc, #72]	@ (800148c <HAL_MspInit+0x6c>)
 8001444:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001448:	6453      	str	r3, [r2, #68]	@ 0x44
 800144a:	4b10      	ldr	r3, [pc, #64]	@ (800148c <HAL_MspInit+0x6c>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	210f      	movs	r1, #15
 800145a:	f06f 0001 	mvn.w	r0, #1
 800145e:	f001 ffcd 	bl	80033fc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2105      	movs	r1, #5
 8001466:	2005      	movs	r0, #5
 8001468:	f001 ffc8 	bl	80033fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800146c:	2005      	movs	r0, #5
 800146e:	f001 ffe1 	bl	8003434 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2105      	movs	r1, #5
 8001476:	2051      	movs	r0, #81	@ 0x51
 8001478:	f001 ffc0 	bl	80033fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 800147c:	2051      	movs	r0, #81	@ 0x51
 800147e:	f001 ffd9 	bl	8003434 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800

08001490 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	@ 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a19      	ldr	r2, [pc, #100]	@ (8001514 <HAL_ADC_MspInit+0x84>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d12b      	bne.n	800150a <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014b2:	4b19      	ldr	r3, [pc, #100]	@ (8001518 <HAL_ADC_MspInit+0x88>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b6:	4a18      	ldr	r2, [pc, #96]	@ (8001518 <HAL_ADC_MspInit+0x88>)
 80014b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014be:	4b16      	ldr	r3, [pc, #88]	@ (8001518 <HAL_ADC_MspInit+0x88>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ca:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <HAL_ADC_MspInit+0x88>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a12      	ldr	r2, [pc, #72]	@ (8001518 <HAL_ADC_MspInit+0x88>)
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <HAL_ADC_MspInit+0x88>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f003 0304 	and.w	r3, r3, #4
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014e2:	2301      	movs	r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e6:	2303      	movs	r3, #3
 80014e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	4809      	ldr	r0, [pc, #36]	@ (800151c <HAL_ADC_MspInit+0x8c>)
 80014f6:	f004 fa21 	bl	800593c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2105      	movs	r1, #5
 80014fe:	2012      	movs	r0, #18
 8001500:	f001 ff7c 	bl	80033fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001504:	2012      	movs	r0, #18
 8001506:	f001 ff95 	bl	8003434 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800150a:	bf00      	nop
 800150c:	3728      	adds	r7, #40	@ 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40012000 	.word	0x40012000
 8001518:	40023800 	.word	0x40023800
 800151c:	40020800 	.word	0x40020800

08001520 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0a      	ldr	r2, [pc, #40]	@ (8001558 <HAL_CRC_MspInit+0x38>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d10b      	bne.n	800154a <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001532:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <HAL_CRC_MspInit+0x3c>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	4a09      	ldr	r2, [pc, #36]	@ (800155c <HAL_CRC_MspInit+0x3c>)
 8001538:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800153c:	6313      	str	r3, [r2, #48]	@ 0x30
 800153e:	4b07      	ldr	r3, [pc, #28]	@ (800155c <HAL_CRC_MspInit+0x3c>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40023000 	.word	0x40023000
 800155c:	40023800 	.word	0x40023800

08001560 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	@ 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a19      	ldr	r2, [pc, #100]	@ (80015e4 <HAL_DAC_MspInit+0x84>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d12b      	bne.n	80015da <HAL_DAC_MspInit+0x7a>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001582:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <HAL_DAC_MspInit+0x88>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	4a18      	ldr	r2, [pc, #96]	@ (80015e8 <HAL_DAC_MspInit+0x88>)
 8001588:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800158c:	6413      	str	r3, [r2, #64]	@ 0x40
 800158e:	4b16      	ldr	r3, [pc, #88]	@ (80015e8 <HAL_DAC_MspInit+0x88>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001592:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <HAL_DAC_MspInit+0x88>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a12      	ldr	r2, [pc, #72]	@ (80015e8 <HAL_DAC_MspInit+0x88>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <HAL_DAC_MspInit+0x88>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015b2:	2310      	movs	r3, #16
 80015b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b6:	2303      	movs	r3, #3
 80015b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4809      	ldr	r0, [pc, #36]	@ (80015ec <HAL_DAC_MspInit+0x8c>)
 80015c6:	f004 f9b9 	bl	800593c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2105      	movs	r1, #5
 80015ce:	2036      	movs	r0, #54	@ 0x36
 80015d0:	f001 ff14 	bl	80033fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015d4:	2036      	movs	r0, #54	@ 0x36
 80015d6:	f001 ff2d 	bl	8003434 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 80015da:	bf00      	nop
 80015dc:	3728      	adds	r7, #40	@ 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40007400 	.word	0x40007400
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020000 	.word	0x40020000

080015f0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b0ac      	sub	sp, #176	@ 0xb0
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001608:	f107 0318 	add.w	r3, r7, #24
 800160c:	2284      	movs	r2, #132	@ 0x84
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f01c feb7 	bl	801e384 <memset>
  if(hi2c->Instance==I2C1)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a82      	ldr	r2, [pc, #520]	@ (8001824 <HAL_I2C_MspInit+0x234>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d17b      	bne.n	8001718 <HAL_I2C_MspInit+0x128>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001620:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001624:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001626:	2300      	movs	r3, #0
 8001628:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800162a:	f107 0318 	add.w	r3, r7, #24
 800162e:	4618      	mov	r0, r3
 8001630:	f007 fbec 	bl	8008e0c <HAL_RCCEx_PeriphCLKConfig>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800163a:	f7ff feeb 	bl	8001414 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	4b7a      	ldr	r3, [pc, #488]	@ (8001828 <HAL_I2C_MspInit+0x238>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a79      	ldr	r2, [pc, #484]	@ (8001828 <HAL_I2C_MspInit+0x238>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b77      	ldr	r3, [pc, #476]	@ (8001828 <HAL_I2C_MspInit+0x238>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001656:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800165a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165e:	2312      	movs	r3, #18
 8001660:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001664:	2301      	movs	r3, #1
 8001666:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001670:	2304      	movs	r3, #4
 8001672:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001676:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800167a:	4619      	mov	r1, r3
 800167c:	486b      	ldr	r0, [pc, #428]	@ (800182c <HAL_I2C_MspInit+0x23c>)
 800167e:	f004 f95d 	bl	800593c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001682:	4b69      	ldr	r3, [pc, #420]	@ (8001828 <HAL_I2C_MspInit+0x238>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	4a68      	ldr	r2, [pc, #416]	@ (8001828 <HAL_I2C_MspInit+0x238>)
 8001688:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800168c:	6413      	str	r3, [r2, #64]	@ 0x40
 800168e:	4b66      	ldr	r3, [pc, #408]	@ (8001828 <HAL_I2C_MspInit+0x238>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800169a:	4b65      	ldr	r3, [pc, #404]	@ (8001830 <HAL_I2C_MspInit+0x240>)
 800169c:	4a65      	ldr	r2, [pc, #404]	@ (8001834 <HAL_I2C_MspInit+0x244>)
 800169e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80016a0:	4b63      	ldr	r3, [pc, #396]	@ (8001830 <HAL_I2C_MspInit+0x240>)
 80016a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016a6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016a8:	4b61      	ldr	r3, [pc, #388]	@ (8001830 <HAL_I2C_MspInit+0x240>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ae:	4b60      	ldr	r3, [pc, #384]	@ (8001830 <HAL_I2C_MspInit+0x240>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016b4:	4b5e      	ldr	r3, [pc, #376]	@ (8001830 <HAL_I2C_MspInit+0x240>)
 80016b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016ba:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016bc:	4b5c      	ldr	r3, [pc, #368]	@ (8001830 <HAL_I2C_MspInit+0x240>)
 80016be:	2200      	movs	r2, #0
 80016c0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016c2:	4b5b      	ldr	r3, [pc, #364]	@ (8001830 <HAL_I2C_MspInit+0x240>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80016c8:	4b59      	ldr	r3, [pc, #356]	@ (8001830 <HAL_I2C_MspInit+0x240>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016ce:	4b58      	ldr	r3, [pc, #352]	@ (8001830 <HAL_I2C_MspInit+0x240>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016d4:	4b56      	ldr	r3, [pc, #344]	@ (8001830 <HAL_I2C_MspInit+0x240>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80016da:	4855      	ldr	r0, [pc, #340]	@ (8001830 <HAL_I2C_MspInit+0x240>)
 80016dc:	f002 fa36 	bl	8003b4c <HAL_DMA_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 80016e6:	f7ff fe95 	bl	8001414 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a50      	ldr	r2, [pc, #320]	@ (8001830 <HAL_I2C_MspInit+0x240>)
 80016ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016f0:	4a4f      	ldr	r2, [pc, #316]	@ (8001830 <HAL_I2C_MspInit+0x240>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2105      	movs	r1, #5
 80016fa:	201f      	movs	r0, #31
 80016fc:	f001 fe7e 	bl	80033fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001700:	201f      	movs	r0, #31
 8001702:	f001 fe97 	bl	8003434 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2105      	movs	r1, #5
 800170a:	2020      	movs	r0, #32
 800170c:	f001 fe76 	bl	80033fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001710:	2020      	movs	r0, #32
 8001712:	f001 fe8f 	bl	8003434 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C4_MspInit 1 */

    /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001716:	e080      	b.n	800181a <HAL_I2C_MspInit+0x22a>
  else if(hi2c->Instance==I2C4)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a46      	ldr	r2, [pc, #280]	@ (8001838 <HAL_I2C_MspInit+0x248>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d17b      	bne.n	800181a <HAL_I2C_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001722:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001726:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800172e:	f107 0318 	add.w	r3, r7, #24
 8001732:	4618      	mov	r0, r3
 8001734:	f007 fb6a 	bl	8008e0c <HAL_RCCEx_PeriphCLKConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_I2C_MspInit+0x152>
      Error_Handler();
 800173e:	f7ff fe69 	bl	8001414 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001742:	4b39      	ldr	r3, [pc, #228]	@ (8001828 <HAL_I2C_MspInit+0x238>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	4a38      	ldr	r2, [pc, #224]	@ (8001828 <HAL_I2C_MspInit+0x238>)
 8001748:	f043 0320 	orr.w	r3, r3, #32
 800174c:	6313      	str	r3, [r2, #48]	@ 0x30
 800174e:	4b36      	ldr	r3, [pc, #216]	@ (8001828 <HAL_I2C_MspInit+0x238>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	f003 0320 	and.w	r3, r3, #32
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800175a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800175e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001762:	2312      	movs	r3, #18
 8001764:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001768:	2301      	movs	r3, #1
 800176a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176e:	2303      	movs	r3, #3
 8001770:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001774:	2304      	movs	r3, #4
 8001776:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800177a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800177e:	4619      	mov	r1, r3
 8001780:	482e      	ldr	r0, [pc, #184]	@ (800183c <HAL_I2C_MspInit+0x24c>)
 8001782:	f004 f8db 	bl	800593c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001786:	4b28      	ldr	r3, [pc, #160]	@ (8001828 <HAL_I2C_MspInit+0x238>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	4a27      	ldr	r2, [pc, #156]	@ (8001828 <HAL_I2C_MspInit+0x238>)
 800178c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001790:	6413      	str	r3, [r2, #64]	@ 0x40
 8001792:	4b25      	ldr	r3, [pc, #148]	@ (8001828 <HAL_I2C_MspInit+0x238>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c4_tx.Instance = DMA1_Stream5;
 800179e:	4b28      	ldr	r3, [pc, #160]	@ (8001840 <HAL_I2C_MspInit+0x250>)
 80017a0:	4a28      	ldr	r2, [pc, #160]	@ (8001844 <HAL_I2C_MspInit+0x254>)
 80017a2:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Channel = DMA_CHANNEL_2;
 80017a4:	4b26      	ldr	r3, [pc, #152]	@ (8001840 <HAL_I2C_MspInit+0x250>)
 80017a6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80017aa:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017ac:	4b24      	ldr	r3, [pc, #144]	@ (8001840 <HAL_I2C_MspInit+0x250>)
 80017ae:	2240      	movs	r2, #64	@ 0x40
 80017b0:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b2:	4b23      	ldr	r3, [pc, #140]	@ (8001840 <HAL_I2C_MspInit+0x250>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017b8:	4b21      	ldr	r3, [pc, #132]	@ (8001840 <HAL_I2C_MspInit+0x250>)
 80017ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017be:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001840 <HAL_I2C_MspInit+0x250>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001840 <HAL_I2C_MspInit+0x250>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 80017cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001840 <HAL_I2C_MspInit+0x250>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001840 <HAL_I2C_MspInit+0x250>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	621a      	str	r2, [r3, #32]
    hdma_i2c4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017d8:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <HAL_I2C_MspInit+0x250>)
 80017da:	2200      	movs	r2, #0
 80017dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 80017de:	4818      	ldr	r0, [pc, #96]	@ (8001840 <HAL_I2C_MspInit+0x250>)
 80017e0:	f002 f9b4 	bl	8003b4c <HAL_DMA_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_I2C_MspInit+0x1fe>
      Error_Handler();
 80017ea:	f7ff fe13 	bl	8001414 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c4_tx);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a13      	ldr	r2, [pc, #76]	@ (8001840 <HAL_I2C_MspInit+0x250>)
 80017f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80017f4:	4a12      	ldr	r2, [pc, #72]	@ (8001840 <HAL_I2C_MspInit+0x250>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2105      	movs	r1, #5
 80017fe:	205f      	movs	r0, #95	@ 0x5f
 8001800:	f001 fdfc 	bl	80033fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8001804:	205f      	movs	r0, #95	@ 0x5f
 8001806:	f001 fe15 	bl	8003434 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 5, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2105      	movs	r1, #5
 800180e:	2060      	movs	r0, #96	@ 0x60
 8001810:	f001 fdf4 	bl	80033fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8001814:	2060      	movs	r0, #96	@ 0x60
 8001816:	f001 fe0d 	bl	8003434 <HAL_NVIC_EnableIRQ>
}
 800181a:	bf00      	nop
 800181c:	37b0      	adds	r7, #176	@ 0xb0
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40005400 	.word	0x40005400
 8001828:	40023800 	.word	0x40023800
 800182c:	40020400 	.word	0x40020400
 8001830:	20000310 	.word	0x20000310
 8001834:	40026010 	.word	0x40026010
 8001838:	40006000 	.word	0x40006000
 800183c:	40021400 	.word	0x40021400
 8001840:	20000370 	.word	0x20000370
 8001844:	40026088 	.word	0x40026088

08001848 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a21      	ldr	r2, [pc, #132]	@ (80018dc <HAL_I2C_MspDeInit+0x94>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d11b      	bne.n	8001892 <HAL_I2C_MspDeInit+0x4a>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800185a:	4b21      	ldr	r3, [pc, #132]	@ (80018e0 <HAL_I2C_MspDeInit+0x98>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	4a20      	ldr	r2, [pc, #128]	@ (80018e0 <HAL_I2C_MspDeInit+0x98>)
 8001860:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001864:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001866:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800186a:	481e      	ldr	r0, [pc, #120]	@ (80018e4 <HAL_I2C_MspDeInit+0x9c>)
 800186c:	f004 fa12 	bl	8005c94 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001870:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001874:	481b      	ldr	r0, [pc, #108]	@ (80018e4 <HAL_I2C_MspDeInit+0x9c>)
 8001876:	f004 fa0d 	bl	8005c94 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800187e:	4618      	mov	r0, r3
 8001880:	f002 fa12 	bl	8003ca8 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001884:	201f      	movs	r0, #31
 8001886:	f001 fde3 	bl	8003450 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800188a:	2020      	movs	r0, #32
 800188c:	f001 fde0 	bl	8003450 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C4_MspDeInit 1 */

    /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8001890:	e01f      	b.n	80018d2 <HAL_I2C_MspDeInit+0x8a>
  else if(hi2c->Instance==I2C4)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a14      	ldr	r2, [pc, #80]	@ (80018e8 <HAL_I2C_MspDeInit+0xa0>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d11a      	bne.n	80018d2 <HAL_I2C_MspDeInit+0x8a>
    __HAL_RCC_I2C4_CLK_DISABLE();
 800189c:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <HAL_I2C_MspDeInit+0x98>)
 800189e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a0:	4a0f      	ldr	r2, [pc, #60]	@ (80018e0 <HAL_I2C_MspDeInit+0x98>)
 80018a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018a6:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_14);
 80018a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018ac:	480f      	ldr	r0, [pc, #60]	@ (80018ec <HAL_I2C_MspDeInit+0xa4>)
 80018ae:	f004 f9f1 	bl	8005c94 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_15);
 80018b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018b6:	480d      	ldr	r0, [pc, #52]	@ (80018ec <HAL_I2C_MspDeInit+0xa4>)
 80018b8:	f004 f9ec 	bl	8005c94 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018c0:	4618      	mov	r0, r3
 80018c2:	f002 f9f1 	bl	8003ca8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 80018c6:	205f      	movs	r0, #95	@ 0x5f
 80018c8:	f001 fdc2 	bl	8003450 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C4_ER_IRQn);
 80018cc:	2060      	movs	r0, #96	@ 0x60
 80018ce:	f001 fdbf 	bl	8003450 <HAL_NVIC_DisableIRQ>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40005400 	.word	0x40005400
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40020400 	.word	0x40020400
 80018e8:	40006000 	.word	0x40006000
 80018ec:	40021400 	.word	0x40021400

080018f0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08e      	sub	sp, #56	@ 0x38
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a56      	ldr	r2, [pc, #344]	@ (8001a68 <HAL_SPI_MspInit+0x178>)
 800190e:	4293      	cmp	r3, r2
 8001910:	f040 80ba 	bne.w	8001a88 <HAL_SPI_MspInit+0x198>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001914:	4b55      	ldr	r3, [pc, #340]	@ (8001a6c <HAL_SPI_MspInit+0x17c>)
 8001916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001918:	4a54      	ldr	r2, [pc, #336]	@ (8001a6c <HAL_SPI_MspInit+0x17c>)
 800191a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800191e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001920:	4b52      	ldr	r3, [pc, #328]	@ (8001a6c <HAL_SPI_MspInit+0x17c>)
 8001922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001924:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001928:	623b      	str	r3, [r7, #32]
 800192a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192c:	4b4f      	ldr	r3, [pc, #316]	@ (8001a6c <HAL_SPI_MspInit+0x17c>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001930:	4a4e      	ldr	r2, [pc, #312]	@ (8001a6c <HAL_SPI_MspInit+0x17c>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6313      	str	r3, [r2, #48]	@ 0x30
 8001938:	4b4c      	ldr	r3, [pc, #304]	@ (8001a6c <HAL_SPI_MspInit+0x17c>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	61fb      	str	r3, [r7, #28]
 8001942:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001944:	4b49      	ldr	r3, [pc, #292]	@ (8001a6c <HAL_SPI_MspInit+0x17c>)
 8001946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001948:	4a48      	ldr	r2, [pc, #288]	@ (8001a6c <HAL_SPI_MspInit+0x17c>)
 800194a:	f043 0302 	orr.w	r3, r3, #2
 800194e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001950:	4b46      	ldr	r3, [pc, #280]	@ (8001a6c <HAL_SPI_MspInit+0x17c>)
 8001952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800195c:	2360      	movs	r3, #96	@ 0x60
 800195e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800196c:	2305      	movs	r3, #5
 800196e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001970:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001974:	4619      	mov	r1, r3
 8001976:	483e      	ldr	r0, [pc, #248]	@ (8001a70 <HAL_SPI_MspInit+0x180>)
 8001978:	f003 ffe0 	bl	800593c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800197c:	2320      	movs	r3, #32
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001988:	2303      	movs	r3, #3
 800198a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800198c:	2305      	movs	r3, #5
 800198e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001990:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001994:	4619      	mov	r1, r3
 8001996:	4837      	ldr	r0, [pc, #220]	@ (8001a74 <HAL_SPI_MspInit+0x184>)
 8001998:	f003 ffd0 	bl	800593c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800199c:	4b36      	ldr	r3, [pc, #216]	@ (8001a78 <HAL_SPI_MspInit+0x188>)
 800199e:	4a37      	ldr	r2, [pc, #220]	@ (8001a7c <HAL_SPI_MspInit+0x18c>)
 80019a0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80019a2:	4b35      	ldr	r3, [pc, #212]	@ (8001a78 <HAL_SPI_MspInit+0x188>)
 80019a4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80019a8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019aa:	4b33      	ldr	r3, [pc, #204]	@ (8001a78 <HAL_SPI_MspInit+0x188>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b0:	4b31      	ldr	r3, [pc, #196]	@ (8001a78 <HAL_SPI_MspInit+0x188>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019b6:	4b30      	ldr	r3, [pc, #192]	@ (8001a78 <HAL_SPI_MspInit+0x188>)
 80019b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019bc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019be:	4b2e      	ldr	r3, [pc, #184]	@ (8001a78 <HAL_SPI_MspInit+0x188>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a78 <HAL_SPI_MspInit+0x188>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80019ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001a78 <HAL_SPI_MspInit+0x188>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019d0:	4b29      	ldr	r3, [pc, #164]	@ (8001a78 <HAL_SPI_MspInit+0x188>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019d6:	4b28      	ldr	r3, [pc, #160]	@ (8001a78 <HAL_SPI_MspInit+0x188>)
 80019d8:	2200      	movs	r2, #0
 80019da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80019dc:	4826      	ldr	r0, [pc, #152]	@ (8001a78 <HAL_SPI_MspInit+0x188>)
 80019de:	f002 f8b5 	bl	8003b4c <HAL_DMA_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 80019e8:	f7ff fd14 	bl	8001414 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a22      	ldr	r2, [pc, #136]	@ (8001a78 <HAL_SPI_MspInit+0x188>)
 80019f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80019f2:	4a21      	ldr	r2, [pc, #132]	@ (8001a78 <HAL_SPI_MspInit+0x188>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80019f8:	4b21      	ldr	r3, [pc, #132]	@ (8001a80 <HAL_SPI_MspInit+0x190>)
 80019fa:	4a22      	ldr	r2, [pc, #136]	@ (8001a84 <HAL_SPI_MspInit+0x194>)
 80019fc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80019fe:	4b20      	ldr	r3, [pc, #128]	@ (8001a80 <HAL_SPI_MspInit+0x190>)
 8001a00:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001a04:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a06:	4b1e      	ldr	r3, [pc, #120]	@ (8001a80 <HAL_SPI_MspInit+0x190>)
 8001a08:	2240      	movs	r2, #64	@ 0x40
 8001a0a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001a80 <HAL_SPI_MspInit+0x190>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a12:	4b1b      	ldr	r3, [pc, #108]	@ (8001a80 <HAL_SPI_MspInit+0x190>)
 8001a14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a18:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a1a:	4b19      	ldr	r3, [pc, #100]	@ (8001a80 <HAL_SPI_MspInit+0x190>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a20:	4b17      	ldr	r3, [pc, #92]	@ (8001a80 <HAL_SPI_MspInit+0x190>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001a26:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <HAL_SPI_MspInit+0x190>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a2c:	4b14      	ldr	r3, [pc, #80]	@ (8001a80 <HAL_SPI_MspInit+0x190>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a32:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <HAL_SPI_MspInit+0x190>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001a38:	4811      	ldr	r0, [pc, #68]	@ (8001a80 <HAL_SPI_MspInit+0x190>)
 8001a3a:	f002 f887 	bl	8003b4c <HAL_DMA_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8001a44:	f7ff fce6 	bl	8001414 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8001a80 <HAL_SPI_MspInit+0x190>)
 8001a4c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a80 <HAL_SPI_MspInit+0x190>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 6, 0);
 8001a54:	2200      	movs	r2, #0
 8001a56:	2106      	movs	r1, #6
 8001a58:	2023      	movs	r0, #35	@ 0x23
 8001a5a:	f001 fccf 	bl	80033fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001a5e:	2023      	movs	r0, #35	@ 0x23
 8001a60:	f001 fce8 	bl	8003434 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001a64:	e0bd      	b.n	8001be2 <HAL_SPI_MspInit+0x2f2>
 8001a66:	bf00      	nop
 8001a68:	40013000 	.word	0x40013000
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020000 	.word	0x40020000
 8001a74:	40020400 	.word	0x40020400
 8001a78:	20000498 	.word	0x20000498
 8001a7c:	40026410 	.word	0x40026410
 8001a80:	200004f8 	.word	0x200004f8
 8001a84:	40026458 	.word	0x40026458
  else if(hspi->Instance==SPI2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a57      	ldr	r2, [pc, #348]	@ (8001bec <HAL_SPI_MspInit+0x2fc>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	f040 80a7 	bne.w	8001be2 <HAL_SPI_MspInit+0x2f2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a94:	4b56      	ldr	r3, [pc, #344]	@ (8001bf0 <HAL_SPI_MspInit+0x300>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	4a55      	ldr	r2, [pc, #340]	@ (8001bf0 <HAL_SPI_MspInit+0x300>)
 8001a9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa0:	4b53      	ldr	r3, [pc, #332]	@ (8001bf0 <HAL_SPI_MspInit+0x300>)
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aac:	4b50      	ldr	r3, [pc, #320]	@ (8001bf0 <HAL_SPI_MspInit+0x300>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab0:	4a4f      	ldr	r2, [pc, #316]	@ (8001bf0 <HAL_SPI_MspInit+0x300>)
 8001ab2:	f043 0304 	orr.w	r3, r3, #4
 8001ab6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab8:	4b4d      	ldr	r3, [pc, #308]	@ (8001bf0 <HAL_SPI_MspInit+0x300>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abc:	f003 0304 	and.w	r3, r3, #4
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac4:	4b4a      	ldr	r3, [pc, #296]	@ (8001bf0 <HAL_SPI_MspInit+0x300>)
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac8:	4a49      	ldr	r2, [pc, #292]	@ (8001bf0 <HAL_SPI_MspInit+0x300>)
 8001aca:	f043 0302 	orr.w	r3, r3, #2
 8001ace:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad0:	4b47      	ldr	r3, [pc, #284]	@ (8001bf0 <HAL_SPI_MspInit+0x300>)
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001adc:	230c      	movs	r3, #12
 8001ade:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aec:	2305      	movs	r3, #5
 8001aee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001af4:	4619      	mov	r1, r3
 8001af6:	483f      	ldr	r0, [pc, #252]	@ (8001bf4 <HAL_SPI_MspInit+0x304>)
 8001af8:	f003 ff20 	bl	800593c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001afc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b0e:	2305      	movs	r3, #5
 8001b10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b16:	4619      	mov	r1, r3
 8001b18:	4837      	ldr	r0, [pc, #220]	@ (8001bf8 <HAL_SPI_MspInit+0x308>)
 8001b1a:	f003 ff0f 	bl	800593c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001b1e:	4b37      	ldr	r3, [pc, #220]	@ (8001bfc <HAL_SPI_MspInit+0x30c>)
 8001b20:	4a37      	ldr	r2, [pc, #220]	@ (8001c00 <HAL_SPI_MspInit+0x310>)
 8001b22:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001b24:	4b35      	ldr	r3, [pc, #212]	@ (8001bfc <HAL_SPI_MspInit+0x30c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b2a:	4b34      	ldr	r3, [pc, #208]	@ (8001bfc <HAL_SPI_MspInit+0x30c>)
 8001b2c:	2240      	movs	r2, #64	@ 0x40
 8001b2e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b30:	4b32      	ldr	r3, [pc, #200]	@ (8001bfc <HAL_SPI_MspInit+0x30c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b36:	4b31      	ldr	r3, [pc, #196]	@ (8001bfc <HAL_SPI_MspInit+0x30c>)
 8001b38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b3c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001bfc <HAL_SPI_MspInit+0x30c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b44:	4b2d      	ldr	r3, [pc, #180]	@ (8001bfc <HAL_SPI_MspInit+0x30c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001bfc <HAL_SPI_MspInit+0x30c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b50:	4b2a      	ldr	r3, [pc, #168]	@ (8001bfc <HAL_SPI_MspInit+0x30c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b56:	4b29      	ldr	r3, [pc, #164]	@ (8001bfc <HAL_SPI_MspInit+0x30c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001b5c:	4827      	ldr	r0, [pc, #156]	@ (8001bfc <HAL_SPI_MspInit+0x30c>)
 8001b5e:	f001 fff5 	bl	8003b4c <HAL_DMA_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_SPI_MspInit+0x27c>
      Error_Handler();
 8001b68:	f7ff fc54 	bl	8001414 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a23      	ldr	r2, [pc, #140]	@ (8001bfc <HAL_SPI_MspInit+0x30c>)
 8001b70:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b72:	4a22      	ldr	r2, [pc, #136]	@ (8001bfc <HAL_SPI_MspInit+0x30c>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001b78:	4b22      	ldr	r3, [pc, #136]	@ (8001c04 <HAL_SPI_MspInit+0x314>)
 8001b7a:	4a23      	ldr	r2, [pc, #140]	@ (8001c08 <HAL_SPI_MspInit+0x318>)
 8001b7c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001b7e:	4b21      	ldr	r3, [pc, #132]	@ (8001c04 <HAL_SPI_MspInit+0x314>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b84:	4b1f      	ldr	r3, [pc, #124]	@ (8001c04 <HAL_SPI_MspInit+0x314>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c04 <HAL_SPI_MspInit+0x314>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b90:	4b1c      	ldr	r3, [pc, #112]	@ (8001c04 <HAL_SPI_MspInit+0x314>)
 8001b92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b96:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b98:	4b1a      	ldr	r3, [pc, #104]	@ (8001c04 <HAL_SPI_MspInit+0x314>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b9e:	4b19      	ldr	r3, [pc, #100]	@ (8001c04 <HAL_SPI_MspInit+0x314>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001ba4:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <HAL_SPI_MspInit+0x314>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001baa:	4b16      	ldr	r3, [pc, #88]	@ (8001c04 <HAL_SPI_MspInit+0x314>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bb0:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <HAL_SPI_MspInit+0x314>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001bb6:	4813      	ldr	r0, [pc, #76]	@ (8001c04 <HAL_SPI_MspInit+0x314>)
 8001bb8:	f001 ffc8 	bl	8003b4c <HAL_DMA_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_SPI_MspInit+0x2d6>
      Error_Handler();
 8001bc2:	f7ff fc27 	bl	8001414 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a0e      	ldr	r2, [pc, #56]	@ (8001c04 <HAL_SPI_MspInit+0x314>)
 8001bca:	659a      	str	r2, [r3, #88]	@ 0x58
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c04 <HAL_SPI_MspInit+0x314>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 6, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2106      	movs	r1, #6
 8001bd6:	2024      	movs	r0, #36	@ 0x24
 8001bd8:	f001 fc10 	bl	80033fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001bdc:	2024      	movs	r0, #36	@ 0x24
 8001bde:	f001 fc29 	bl	8003434 <HAL_NVIC_EnableIRQ>
}
 8001be2:	bf00      	nop
 8001be4:	3738      	adds	r7, #56	@ 0x38
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40003800 	.word	0x40003800
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020800 	.word	0x40020800
 8001bf8:	40020400 	.word	0x40020400
 8001bfc:	20000558 	.word	0x20000558
 8001c00:	40026070 	.word	0x40026070
 8001c04:	200005b8 	.word	0x200005b8
 8001c08:	40026058 	.word	0x40026058

08001c0c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0d      	ldr	r2, [pc, #52]	@ (8001c50 <HAL_TIM_Base_MspInit+0x44>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d113      	bne.n	8001c46 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c54 <HAL_TIM_Base_MspInit+0x48>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	4a0c      	ldr	r2, [pc, #48]	@ (8001c54 <HAL_TIM_Base_MspInit+0x48>)
 8001c24:	f043 0320 	orr.w	r3, r3, #32
 8001c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <HAL_TIM_Base_MspInit+0x48>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	f003 0320 	and.w	r3, r3, #32
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2105      	movs	r1, #5
 8001c3a:	2037      	movs	r0, #55	@ 0x37
 8001c3c:	f001 fbde 	bl	80033fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c40:	2037      	movs	r0, #55	@ 0x37
 8001c42:	f001 fbf7 	bl	8003434 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM7_MspInit 1 */

  }

}
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40001400 	.word	0x40001400
 8001c54:	40023800 	.word	0x40023800

08001c58 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b0b0      	sub	sp, #192	@ 0xc0
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c60:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c74:	2284      	movs	r2, #132	@ 0x84
 8001c76:	2100      	movs	r1, #0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f01c fb83 	bl	801e384 <memset>
  if(huart->Instance==UART4)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4aaf      	ldr	r2, [pc, #700]	@ (8001f40 <HAL_UART_MspInit+0x2e8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	f040 8095 	bne.w	8001db4 <HAL_UART_MspInit+0x15c>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001c8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8001c90:	2340      	movs	r3, #64	@ 0x40
 8001c92:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c94:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f007 f8b7 	bl	8008e0c <HAL_RCCEx_PeriphCLKConfig>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001ca4:	f7ff fbb6 	bl	8001414 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ca8:	4ba6      	ldr	r3, [pc, #664]	@ (8001f44 <HAL_UART_MspInit+0x2ec>)
 8001caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cac:	4aa5      	ldr	r2, [pc, #660]	@ (8001f44 <HAL_UART_MspInit+0x2ec>)
 8001cae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001cb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cb4:	4ba3      	ldr	r3, [pc, #652]	@ (8001f44 <HAL_UART_MspInit+0x2ec>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc0:	4ba0      	ldr	r3, [pc, #640]	@ (8001f44 <HAL_UART_MspInit+0x2ec>)
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc4:	4a9f      	ldr	r2, [pc, #636]	@ (8001f44 <HAL_UART_MspInit+0x2ec>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ccc:	4b9d      	ldr	r3, [pc, #628]	@ (8001f44 <HAL_UART_MspInit+0x2ec>)
 8001cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	623b      	str	r3, [r7, #32]
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd8:	4b9a      	ldr	r3, [pc, #616]	@ (8001f44 <HAL_UART_MspInit+0x2ec>)
 8001cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cdc:	4a99      	ldr	r2, [pc, #612]	@ (8001f44 <HAL_UART_MspInit+0x2ec>)
 8001cde:	f043 0304 	orr.w	r3, r3, #4
 8001ce2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce4:	4b97      	ldr	r3, [pc, #604]	@ (8001f44 <HAL_UART_MspInit+0x2ec>)
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	61fb      	str	r3, [r7, #28]
 8001cee:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d02:	2303      	movs	r3, #3
 8001d04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d08:	2308      	movs	r3, #8
 8001d0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001d12:	4619      	mov	r1, r3
 8001d14:	488c      	ldr	r0, [pc, #560]	@ (8001f48 <HAL_UART_MspInit+0x2f0>)
 8001d16:	f003 fe11 	bl	800593c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d34:	2308      	movs	r3, #8
 8001d36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d3a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4882      	ldr	r0, [pc, #520]	@ (8001f4c <HAL_UART_MspInit+0x2f4>)
 8001d42:	f003 fdfb 	bl	800593c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001d46:	4b82      	ldr	r3, [pc, #520]	@ (8001f50 <HAL_UART_MspInit+0x2f8>)
 8001d48:	4a82      	ldr	r2, [pc, #520]	@ (8001f54 <HAL_UART_MspInit+0x2fc>)
 8001d4a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001d4c:	4b80      	ldr	r3, [pc, #512]	@ (8001f50 <HAL_UART_MspInit+0x2f8>)
 8001d4e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d52:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d54:	4b7e      	ldr	r3, [pc, #504]	@ (8001f50 <HAL_UART_MspInit+0x2f8>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d5a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f50 <HAL_UART_MspInit+0x2f8>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d60:	4b7b      	ldr	r3, [pc, #492]	@ (8001f50 <HAL_UART_MspInit+0x2f8>)
 8001d62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d66:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d68:	4b79      	ldr	r3, [pc, #484]	@ (8001f50 <HAL_UART_MspInit+0x2f8>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d6e:	4b78      	ldr	r3, [pc, #480]	@ (8001f50 <HAL_UART_MspInit+0x2f8>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001d74:	4b76      	ldr	r3, [pc, #472]	@ (8001f50 <HAL_UART_MspInit+0x2f8>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d7a:	4b75      	ldr	r3, [pc, #468]	@ (8001f50 <HAL_UART_MspInit+0x2f8>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d80:	4b73      	ldr	r3, [pc, #460]	@ (8001f50 <HAL_UART_MspInit+0x2f8>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001d86:	4872      	ldr	r0, [pc, #456]	@ (8001f50 <HAL_UART_MspInit+0x2f8>)
 8001d88:	f001 fee0 	bl	8003b4c <HAL_DMA_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8001d92:	f7ff fb3f 	bl	8001414 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a6d      	ldr	r2, [pc, #436]	@ (8001f50 <HAL_UART_MspInit+0x2f8>)
 8001d9a:	675a      	str	r2, [r3, #116]	@ 0x74
 8001d9c:	4a6c      	ldr	r2, [pc, #432]	@ (8001f50 <HAL_UART_MspInit+0x2f8>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2106      	movs	r1, #6
 8001da6:	2034      	movs	r0, #52	@ 0x34
 8001da8:	f001 fb28 	bl	80033fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001dac:	2034      	movs	r0, #52	@ 0x34
 8001dae:	f001 fb41 	bl	8003434 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001db2:	e0c0      	b.n	8001f36 <HAL_UART_MspInit+0x2de>
  else if(huart->Instance==USART2)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a67      	ldr	r2, [pc, #412]	@ (8001f58 <HAL_UART_MspInit+0x300>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d171      	bne.n	8001ea2 <HAL_UART_MspInit+0x24a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001dbe:	2380      	movs	r3, #128	@ 0x80
 8001dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f007 f81e 	bl	8008e0c <HAL_RCCEx_PeriphCLKConfig>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <HAL_UART_MspInit+0x182>
      Error_Handler();
 8001dd6:	f7ff fb1d 	bl	8001414 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dda:	4b5a      	ldr	r3, [pc, #360]	@ (8001f44 <HAL_UART_MspInit+0x2ec>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	4a59      	ldr	r2, [pc, #356]	@ (8001f44 <HAL_UART_MspInit+0x2ec>)
 8001de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de6:	4b57      	ldr	r3, [pc, #348]	@ (8001f44 <HAL_UART_MspInit+0x2ec>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dee:	61bb      	str	r3, [r7, #24]
 8001df0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001df2:	4b54      	ldr	r3, [pc, #336]	@ (8001f44 <HAL_UART_MspInit+0x2ec>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	4a53      	ldr	r2, [pc, #332]	@ (8001f44 <HAL_UART_MspInit+0x2ec>)
 8001df8:	f043 0308 	orr.w	r3, r3, #8
 8001dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfe:	4b51      	ldr	r3, [pc, #324]	@ (8001f44 <HAL_UART_MspInit+0x2ec>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	f003 0308 	and.w	r3, r3, #8
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e0a:	2360      	movs	r3, #96	@ 0x60
 8001e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e22:	2307      	movs	r3, #7
 8001e24:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e28:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	484b      	ldr	r0, [pc, #300]	@ (8001f5c <HAL_UART_MspInit+0x304>)
 8001e30:	f003 fd84 	bl	800593c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001e34:	4b4a      	ldr	r3, [pc, #296]	@ (8001f60 <HAL_UART_MspInit+0x308>)
 8001e36:	4a4b      	ldr	r2, [pc, #300]	@ (8001f64 <HAL_UART_MspInit+0x30c>)
 8001e38:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001e3a:	4b49      	ldr	r3, [pc, #292]	@ (8001f60 <HAL_UART_MspInit+0x308>)
 8001e3c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e40:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e42:	4b47      	ldr	r3, [pc, #284]	@ (8001f60 <HAL_UART_MspInit+0x308>)
 8001e44:	2240      	movs	r2, #64	@ 0x40
 8001e46:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e48:	4b45      	ldr	r3, [pc, #276]	@ (8001f60 <HAL_UART_MspInit+0x308>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e4e:	4b44      	ldr	r3, [pc, #272]	@ (8001f60 <HAL_UART_MspInit+0x308>)
 8001e50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e54:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e56:	4b42      	ldr	r3, [pc, #264]	@ (8001f60 <HAL_UART_MspInit+0x308>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e5c:	4b40      	ldr	r3, [pc, #256]	@ (8001f60 <HAL_UART_MspInit+0x308>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001e62:	4b3f      	ldr	r3, [pc, #252]	@ (8001f60 <HAL_UART_MspInit+0x308>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e68:	4b3d      	ldr	r3, [pc, #244]	@ (8001f60 <HAL_UART_MspInit+0x308>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e6e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f60 <HAL_UART_MspInit+0x308>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e74:	483a      	ldr	r0, [pc, #232]	@ (8001f60 <HAL_UART_MspInit+0x308>)
 8001e76:	f001 fe69 	bl	8003b4c <HAL_DMA_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_UART_MspInit+0x22c>
      Error_Handler();
 8001e80:	f7ff fac8 	bl	8001414 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a36      	ldr	r2, [pc, #216]	@ (8001f60 <HAL_UART_MspInit+0x308>)
 8001e88:	671a      	str	r2, [r3, #112]	@ 0x70
 8001e8a:	4a35      	ldr	r2, [pc, #212]	@ (8001f60 <HAL_UART_MspInit+0x308>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2106      	movs	r1, #6
 8001e94:	2026      	movs	r0, #38	@ 0x26
 8001e96:	f001 fab1 	bl	80033fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e9a:	2026      	movs	r0, #38	@ 0x26
 8001e9c:	f001 faca 	bl	8003434 <HAL_NVIC_EnableIRQ>
}
 8001ea0:	e049      	b.n	8001f36 <HAL_UART_MspInit+0x2de>
  else if(huart->Instance==USART3)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a30      	ldr	r2, [pc, #192]	@ (8001f68 <HAL_UART_MspInit+0x310>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d144      	bne.n	8001f36 <HAL_UART_MspInit+0x2de>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001eac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f006 ffa6 	bl	8008e0c <HAL_RCCEx_PeriphCLKConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_UART_MspInit+0x272>
      Error_Handler();
 8001ec6:	f7ff faa5 	bl	8001414 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001eca:	4b1e      	ldr	r3, [pc, #120]	@ (8001f44 <HAL_UART_MspInit+0x2ec>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	4a1d      	ldr	r2, [pc, #116]	@ (8001f44 <HAL_UART_MspInit+0x2ec>)
 8001ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f44 <HAL_UART_MspInit+0x2ec>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ee2:	4b18      	ldr	r3, [pc, #96]	@ (8001f44 <HAL_UART_MspInit+0x2ec>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	4a17      	ldr	r2, [pc, #92]	@ (8001f44 <HAL_UART_MspInit+0x2ec>)
 8001ee8:	f043 0308 	orr.w	r3, r3, #8
 8001eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eee:	4b15      	ldr	r3, [pc, #84]	@ (8001f44 <HAL_UART_MspInit+0x2ec>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001efa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001efe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f14:	2307      	movs	r3, #7
 8001f16:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f1a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f1e:	4619      	mov	r1, r3
 8001f20:	480e      	ldr	r0, [pc, #56]	@ (8001f5c <HAL_UART_MspInit+0x304>)
 8001f22:	f003 fd0b 	bl	800593c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2105      	movs	r1, #5
 8001f2a:	2027      	movs	r0, #39	@ 0x27
 8001f2c:	f001 fa66 	bl	80033fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f30:	2027      	movs	r0, #39	@ 0x27
 8001f32:	f001 fa7f 	bl	8003434 <HAL_NVIC_EnableIRQ>
}
 8001f36:	bf00      	nop
 8001f38:	37c0      	adds	r7, #192	@ 0xc0
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40004c00 	.word	0x40004c00
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40020000 	.word	0x40020000
 8001f4c:	40020800 	.word	0x40020800
 8001f50:	200007fc 	.word	0x200007fc
 8001f54:	40026040 	.word	0x40026040
 8001f58:	40004400 	.word	0x40004400
 8001f5c:	40020c00 	.word	0x40020c00
 8001f60:	2000085c 	.word	0x2000085c
 8001f64:	400260a0 	.word	0x400260a0
 8001f68:	40004800 	.word	0x40004800

08001f6c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b0ac      	sub	sp, #176	@ 0xb0
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f84:	f107 0318 	add.w	r3, r7, #24
 8001f88:	2284      	movs	r2, #132	@ 0x84
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f01c f9f9 	bl	801e384 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f9a:	d159      	bne.n	8002050 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001f9c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001fa0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fa8:	f107 0318 	add.w	r3, r7, #24
 8001fac:	4618      	mov	r0, r3
 8001fae:	f006 ff2d 	bl	8008e0c <HAL_RCCEx_PeriphCLKConfig>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001fb8:	f7ff fa2c 	bl	8001414 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbc:	4b26      	ldr	r3, [pc, #152]	@ (8002058 <HAL_PCD_MspInit+0xec>)
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc0:	4a25      	ldr	r2, [pc, #148]	@ (8002058 <HAL_PCD_MspInit+0xec>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc8:	4b23      	ldr	r3, [pc, #140]	@ (8002058 <HAL_PCD_MspInit+0xec>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001fd4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001fd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001fee:	230a      	movs	r3, #10
 8001ff0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4818      	ldr	r0, [pc, #96]	@ (800205c <HAL_PCD_MspInit+0xf0>)
 8001ffc:	f003 fc9e 	bl	800593c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002000:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002004:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002008:	2300      	movs	r3, #0
 800200a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002014:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002018:	4619      	mov	r1, r3
 800201a:	4810      	ldr	r0, [pc, #64]	@ (800205c <HAL_PCD_MspInit+0xf0>)
 800201c:	f003 fc8e 	bl	800593c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002020:	4b0d      	ldr	r3, [pc, #52]	@ (8002058 <HAL_PCD_MspInit+0xec>)
 8002022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002024:	4a0c      	ldr	r2, [pc, #48]	@ (8002058 <HAL_PCD_MspInit+0xec>)
 8002026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800202a:	6353      	str	r3, [r2, #52]	@ 0x34
 800202c:	4b0a      	ldr	r3, [pc, #40]	@ (8002058 <HAL_PCD_MspInit+0xec>)
 800202e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4b07      	ldr	r3, [pc, #28]	@ (8002058 <HAL_PCD_MspInit+0xec>)
 800203a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203c:	4a06      	ldr	r2, [pc, #24]	@ (8002058 <HAL_PCD_MspInit+0xec>)
 800203e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002042:	6453      	str	r3, [r2, #68]	@ 0x44
 8002044:	4b04      	ldr	r3, [pc, #16]	@ (8002058 <HAL_PCD_MspInit+0xec>)
 8002046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002048:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002050:	bf00      	nop
 8002052:	37b0      	adds	r7, #176	@ 0xb0
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40023800 	.word	0x40023800
 800205c:	40020000 	.word	0x40020000

08002060 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08e      	sub	sp, #56	@ 0x38
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002070:	4b33      	ldr	r3, [pc, #204]	@ (8002140 <HAL_InitTick+0xe0>)
 8002072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002074:	4a32      	ldr	r2, [pc, #200]	@ (8002140 <HAL_InitTick+0xe0>)
 8002076:	f043 0310 	orr.w	r3, r3, #16
 800207a:	6413      	str	r3, [r2, #64]	@ 0x40
 800207c:	4b30      	ldr	r3, [pc, #192]	@ (8002140 <HAL_InitTick+0xe0>)
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002088:	f107 0210 	add.w	r2, r7, #16
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	4611      	mov	r1, r2
 8002092:	4618      	mov	r0, r3
 8002094:	f006 fe88 	bl	8008da8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800209c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d103      	bne.n	80020aa <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020a2:	f006 fe59 	bl	8008d58 <HAL_RCC_GetPCLK1Freq>
 80020a6:	6378      	str	r0, [r7, #52]	@ 0x34
 80020a8:	e004      	b.n	80020b4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80020aa:	f006 fe55 	bl	8008d58 <HAL_RCC_GetPCLK1Freq>
 80020ae:	4603      	mov	r3, r0
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020b6:	4a23      	ldr	r2, [pc, #140]	@ (8002144 <HAL_InitTick+0xe4>)
 80020b8:	fba2 2303 	umull	r2, r3, r2, r3
 80020bc:	0c9b      	lsrs	r3, r3, #18
 80020be:	3b01      	subs	r3, #1
 80020c0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020c2:	4b21      	ldr	r3, [pc, #132]	@ (8002148 <HAL_InitTick+0xe8>)
 80020c4:	4a21      	ldr	r2, [pc, #132]	@ (800214c <HAL_InitTick+0xec>)
 80020c6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80020c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002148 <HAL_InitTick+0xe8>)
 80020ca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020ce:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80020d0:	4a1d      	ldr	r2, [pc, #116]	@ (8002148 <HAL_InitTick+0xe8>)
 80020d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80020d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002148 <HAL_InitTick+0xe8>)
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002148 <HAL_InitTick+0xe8>)
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e2:	4b19      	ldr	r3, [pc, #100]	@ (8002148 <HAL_InitTick+0xe8>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80020e8:	4817      	ldr	r0, [pc, #92]	@ (8002148 <HAL_InitTick+0xe8>)
 80020ea:	f008 fe91 	bl	800ae10 <HAL_TIM_Base_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80020f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d11b      	bne.n	8002134 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80020fc:	4812      	ldr	r0, [pc, #72]	@ (8002148 <HAL_InitTick+0xe8>)
 80020fe:	f008 fedf 	bl	800aec0 <HAL_TIM_Base_Start_IT>
 8002102:	4603      	mov	r3, r0
 8002104:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002108:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800210c:	2b00      	cmp	r3, #0
 800210e:	d111      	bne.n	8002134 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002110:	2036      	movs	r0, #54	@ 0x36
 8002112:	f001 f98f 	bl	8003434 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b0f      	cmp	r3, #15
 800211a:	d808      	bhi.n	800212e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800211c:	2200      	movs	r2, #0
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	2036      	movs	r0, #54	@ 0x36
 8002122:	f001 f96b 	bl	80033fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002126:	4a0a      	ldr	r2, [pc, #40]	@ (8002150 <HAL_InitTick+0xf0>)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	e002      	b.n	8002134 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002134:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002138:	4618      	mov	r0, r3
 800213a:	3738      	adds	r7, #56	@ 0x38
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40023800 	.word	0x40023800
 8002144:	431bde83 	.word	0x431bde83
 8002148:	20000de0 	.word	0x20000de0
 800214c:	40001000 	.word	0x40001000
 8002150:	20000004 	.word	0x20000004

08002154 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <NMI_Handler+0x4>

0800215c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("!!! HARD FAULT HANDLER !!!\n\r");
 8002162:	4809      	ldr	r0, [pc, #36]	@ (8002188 <HardFault_Handler+0x2c>)
 8002164:	f01b ffb6 	bl	801e0d4 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    // RED LED toggle for visual indication
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002168:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800216c:	4807      	ldr	r0, [pc, #28]	@ (800218c <HardFault_Handler+0x30>)
 800216e:	f003 feb6 	bl	8005ede <HAL_GPIO_TogglePin>
  	for(volatile int i=0; i<1000000; i++);
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	e002      	b.n	800217e <HardFault_Handler+0x22>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3301      	adds	r3, #1
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a03      	ldr	r2, [pc, #12]	@ (8002190 <HardFault_Handler+0x34>)
 8002182:	4293      	cmp	r3, r2
 8002184:	ddf8      	ble.n	8002178 <HardFault_Handler+0x1c>
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002186:	e7ef      	b.n	8002168 <HardFault_Handler+0xc>
 8002188:	0801f1ec 	.word	0x0801f1ec
 800218c:	40020400 	.word	0x40020400
 8002190:	000f423f 	.word	0x000f423f

08002194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	  printf("!!! HARD FAULT HANDLER !!!\n\r");
 8002198:	4802      	ldr	r0, [pc, #8]	@ (80021a4 <MemManage_Handler+0x10>)
 800219a:	f01b ff9b 	bl	801e0d4 <iprintf>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800219e:	bf00      	nop
 80021a0:	e7fd      	b.n	800219e <MemManage_Handler+0xa>
 80021a2:	bf00      	nop
 80021a4:	0801f1ec 	.word	0x0801f1ec

080021a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	  printf("!!! HARD FAULT HANDLER !!!\n\r");
 80021ac:	4802      	ldr	r0, [pc, #8]	@ (80021b8 <BusFault_Handler+0x10>)
 80021ae:	f01b ff91 	bl	801e0d4 <iprintf>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021b2:	bf00      	nop
 80021b4:	e7fd      	b.n	80021b2 <BusFault_Handler+0xa>
 80021b6:	bf00      	nop
 80021b8:	0801f1ec 	.word	0x0801f1ec

080021bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <UsageFault_Handler+0x4>

080021c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80021e4:	4802      	ldr	r0, [pc, #8]	@ (80021f0 <DMA1_Stream0_IRQHandler+0x10>)
 80021e6:	f001 feaf 	bl	8003f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000310 	.word	0x20000310

080021f4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80021f8:	4802      	ldr	r0, [pc, #8]	@ (8002204 <DMA1_Stream2_IRQHandler+0x10>)
 80021fa:	f001 fea5 	bl	8003f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200007fc 	.word	0x200007fc

08002208 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800220c:	4802      	ldr	r0, [pc, #8]	@ (8002218 <DMA1_Stream3_IRQHandler+0x10>)
 800220e:	f001 fe9b 	bl	8003f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200005b8 	.word	0x200005b8

0800221c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002220:	4802      	ldr	r0, [pc, #8]	@ (800222c <DMA1_Stream4_IRQHandler+0x10>)
 8002222:	f001 fe91 	bl	8003f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000558 	.word	0x20000558

08002230 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 8002234:	4802      	ldr	r0, [pc, #8]	@ (8002240 <DMA1_Stream5_IRQHandler+0x10>)
 8002236:	f001 fe87 	bl	8003f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000370 	.word	0x20000370

08002244 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002248:	4802      	ldr	r0, [pc, #8]	@ (8002254 <DMA1_Stream6_IRQHandler+0x10>)
 800224a:	f001 fe7d 	bl	8003f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	2000085c 	.word	0x2000085c

08002258 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800225c:	4802      	ldr	r0, [pc, #8]	@ (8002268 <ADC_IRQHandler+0x10>)
 800225e:	f000 fc61 	bl	8002b24 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200001e8 	.word	0x200001e8

0800226c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002270:	4802      	ldr	r0, [pc, #8]	@ (800227c <I2C1_EV_IRQHandler+0x10>)
 8002272:	f004 f9e7 	bl	8006644 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000268 	.word	0x20000268

08002280 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002284:	4802      	ldr	r0, [pc, #8]	@ (8002290 <I2C1_ER_IRQHandler+0x10>)
 8002286:	f004 f9f7 	bl	8006678 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000268 	.word	0x20000268

08002294 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002298:	4802      	ldr	r0, [pc, #8]	@ (80022a4 <SPI1_IRQHandler+0x10>)
 800229a:	f007 ff6d 	bl	800a178 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200003d0 	.word	0x200003d0

080022a8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80022ac:	4802      	ldr	r0, [pc, #8]	@ (80022b8 <SPI2_IRQHandler+0x10>)
 80022ae:	f007 ff63 	bl	800a178 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000434 	.word	0x20000434

080022bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022c0:	4802      	ldr	r0, [pc, #8]	@ (80022cc <USART2_IRQHandler+0x10>)
 80022c2:	f009 fc5b 	bl	800bb7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200006ec 	.word	0x200006ec

080022d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022d4:	4802      	ldr	r0, [pc, #8]	@ (80022e0 <USART3_IRQHandler+0x10>)
 80022d6:	f009 fc51 	bl	800bb7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000774 	.word	0x20000774

080022e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80022e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80022ec:	f003 fe12 	bl	8005f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80022f8:	4802      	ldr	r0, [pc, #8]	@ (8002304 <UART4_IRQHandler+0x10>)
 80022fa:	f009 fc3f 	bl	800bb7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000664 	.word	0x20000664

08002308 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 800230c:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <TIM6_DAC_IRQHandler+0x20>)
 800230e:	791b      	ldrb	r3, [r3, #4]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8002316:	4804      	ldr	r0, [pc, #16]	@ (8002328 <TIM6_DAC_IRQHandler+0x20>)
 8002318:	f001 fb2b 	bl	8003972 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 800231c:	4803      	ldr	r0, [pc, #12]	@ (800232c <TIM6_DAC_IRQHandler+0x24>)
 800231e:	f008 fe77 	bl	800b010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000254 	.word	0x20000254
 800232c:	20000de0 	.word	0x20000de0

08002330 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002334:	4802      	ldr	r0, [pc, #8]	@ (8002340 <TIM7_IRQHandler+0x10>)
 8002336:	f008 fe6b 	bl	800b010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000618 	.word	0x20000618

08002344 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002348:	4802      	ldr	r0, [pc, #8]	@ (8002354 <DMA2_Stream0_IRQHandler+0x10>)
 800234a:	f001 fdfd 	bl	8003f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000498 	.word	0x20000498

08002358 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800235c:	4802      	ldr	r0, [pc, #8]	@ (8002368 <DMA2_Stream3_IRQHandler+0x10>)
 800235e:	f001 fdf3 	bl	8003f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200004f8 	.word	0x200004f8

0800236c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */
//	printf("ETH_IRQHandler was called\n\r");
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002370:	4802      	ldr	r0, [pc, #8]	@ (800237c <ETH_IRQHandler+0x10>)
 8002372:	f002 fbfb 	bl	8004b6c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	2000a1b8 	.word	0x2000a1b8

08002380 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002384:	4802      	ldr	r0, [pc, #8]	@ (8002390 <ETH_WKUP_IRQHandler+0x10>)
 8002386:	f002 fbf1 	bl	8004b6c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	2000a1b8 	.word	0x2000a1b8

08002394 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80023a8:	4802      	ldr	r0, [pc, #8]	@ (80023b4 <I2C4_EV_IRQHandler+0x10>)
 80023aa:	f004 f94b 	bl	8006644 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200002bc 	.word	0x200002bc

080023b8 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 80023bc:	4802      	ldr	r0, [pc, #8]	@ (80023c8 <I2C4_ER_IRQHandler+0x10>)
 80023be:	f004 f95b 	bl	8006678 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200002bc 	.word	0x200002bc

080023cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return 1;
 80023d0:	2301      	movs	r3, #1
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <_kill>:

int _kill(int pid, int sig)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023e6:	4b05      	ldr	r3, [pc, #20]	@ (80023fc <_kill+0x20>)
 80023e8:	2216      	movs	r2, #22
 80023ea:	601a      	str	r2, [r3, #0]
  return -1;
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	20027e4c 	.word	0x20027e4c

08002400 <_exit>:

void _exit (int status)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002408:	f04f 31ff 	mov.w	r1, #4294967295
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff ffe5 	bl	80023dc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002412:	bf00      	nop
 8002414:	e7fd      	b.n	8002412 <_exit+0x12>

08002416 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	e00a      	b.n	800243e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002428:	f3af 8000 	nop.w
 800242c:	4601      	mov	r1, r0
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	60ba      	str	r2, [r7, #8]
 8002434:	b2ca      	uxtb	r2, r1
 8002436:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	3301      	adds	r3, #1
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	429a      	cmp	r2, r3
 8002444:	dbf0      	blt.n	8002428 <_read+0x12>
  }

  return len;
 8002446:	687b      	ldr	r3, [r7, #4]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	e009      	b.n	8002476 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	60ba      	str	r2, [r7, #8]
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe fef6 	bl	800125c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	3301      	adds	r3, #1
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	429a      	cmp	r2, r3
 800247c:	dbf1      	blt.n	8002462 <_write+0x12>
  }
  return len;
 800247e:	687b      	ldr	r3, [r7, #4]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <_close>:

int _close(int file)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002490:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024b0:	605a      	str	r2, [r3, #4]
  return 0;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <_isatty>:

int _isatty(int file)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024c8:	2301      	movs	r3, #1
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3714      	adds	r7, #20
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024f8:	4a14      	ldr	r2, [pc, #80]	@ (800254c <_sbrk+0x5c>)
 80024fa:	4b15      	ldr	r3, [pc, #84]	@ (8002550 <_sbrk+0x60>)
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002504:	4b13      	ldr	r3, [pc, #76]	@ (8002554 <_sbrk+0x64>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d102      	bne.n	8002512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800250c:	4b11      	ldr	r3, [pc, #68]	@ (8002554 <_sbrk+0x64>)
 800250e:	4a12      	ldr	r2, [pc, #72]	@ (8002558 <_sbrk+0x68>)
 8002510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002512:	4b10      	ldr	r3, [pc, #64]	@ (8002554 <_sbrk+0x64>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	429a      	cmp	r2, r3
 800251e:	d205      	bcs.n	800252c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002520:	4b0e      	ldr	r3, [pc, #56]	@ (800255c <_sbrk+0x6c>)
 8002522:	220c      	movs	r2, #12
 8002524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002526:	f04f 33ff 	mov.w	r3, #4294967295
 800252a:	e009      	b.n	8002540 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800252c:	4b09      	ldr	r3, [pc, #36]	@ (8002554 <_sbrk+0x64>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002532:	4b08      	ldr	r3, [pc, #32]	@ (8002554 <_sbrk+0x64>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	4a06      	ldr	r2, [pc, #24]	@ (8002554 <_sbrk+0x64>)
 800253c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800253e:	68fb      	ldr	r3, [r7, #12]
}
 8002540:	4618      	mov	r0, r3
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	20050000 	.word	0x20050000
 8002550:	00000400 	.word	0x00000400
 8002554:	20000e2c 	.word	0x20000e2c
 8002558:	20027e60 	.word	0x20027e60
 800255c:	20027e4c 	.word	0x20027e4c

08002560 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002564:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <SystemInit+0x20>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800256a:	4a05      	ldr	r2, [pc, #20]	@ (8002580 <SystemInit+0x20>)
 800256c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002570:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8002584:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002588:	f7ff ffea 	bl	8002560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800258c:	480c      	ldr	r0, [pc, #48]	@ (80025c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800258e:	490d      	ldr	r1, [pc, #52]	@ (80025c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002590:	4a0d      	ldr	r2, [pc, #52]	@ (80025c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002594:	e002      	b.n	800259c <LoopCopyDataInit>

08002596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800259a:	3304      	adds	r3, #4

0800259c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800259c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800259e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025a0:	d3f9      	bcc.n	8002596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025a2:	4a0a      	ldr	r2, [pc, #40]	@ (80025cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025a4:	4c0a      	ldr	r4, [pc, #40]	@ (80025d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025a8:	e001      	b.n	80025ae <LoopFillZerobss>

080025aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025ac:	3204      	adds	r2, #4

080025ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025b0:	d3fb      	bcc.n	80025aa <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80025b2:	f01b ff93 	bl	801e4dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025b6:	f7fe f811 	bl	80005dc <main>
  bx  lr    
 80025ba:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 80025bc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80025c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025c4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80025c8:	08022430 	.word	0x08022430
  ldr r2, =_sbss
 80025cc:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80025d0:	20027e5c 	.word	0x20027e5c

080025d4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025d4:	e7fe      	b.n	80025d4 <CAN1_RX0_IRQHandler>

080025d6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00b      	beq.n	80025fe <LAN8742_RegisterBusIO+0x28>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <LAN8742_RegisterBusIO+0x28>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <LAN8742_RegisterBusIO+0x28>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d102      	bne.n	8002604 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80025fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002602:	e014      	b.n	800262e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800263a:	b580      	push	{r7, lr}
 800263c:	b086      	sub	sp, #24
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	60fb      	str	r3, [r7, #12]
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d139      	bne.n	80026ca <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2220      	movs	r2, #32
 8002668:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	e01c      	b.n	80026aa <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	f107 020c 	add.w	r2, r7, #12
 8002678:	2112      	movs	r1, #18
 800267a:	6978      	ldr	r0, [r7, #20]
 800267c:	4798      	blx	r3
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	da03      	bge.n	800268c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8002684:	f06f 0304 	mvn.w	r3, #4
 8002688:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800268a:	e00b      	b.n	80026a4 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	429a      	cmp	r2, r3
 8002696:	d105      	bne.n	80026a4 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
         break;
 80026a2:	e005      	b.n	80026b0 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	3301      	adds	r3, #1
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	2b1f      	cmp	r3, #31
 80026ae:	d9df      	bls.n	8002670 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b1f      	cmp	r3, #31
 80026b6:	d902      	bls.n	80026be <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80026b8:	f06f 0302 	mvn.w	r3, #2
 80026bc:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80026ca:	693b      	ldr	r3, [r7, #16]
 }
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6810      	ldr	r0, [r2, #0]
 80026e8:	f107 020c 	add.w	r2, r7, #12
 80026ec:	2101      	movs	r1, #1
 80026ee:	4798      	blx	r3
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	da02      	bge.n	80026fc <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80026f6:	f06f 0304 	mvn.w	r3, #4
 80026fa:	e06e      	b.n	80027da <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6810      	ldr	r0, [r2, #0]
 8002704:	f107 020c 	add.w	r2, r7, #12
 8002708:	2101      	movs	r1, #1
 800270a:	4798      	blx	r3
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	da02      	bge.n	8002718 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002712:	f06f 0304 	mvn.w	r3, #4
 8002716:	e060      	b.n	80027da <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8002722:	2301      	movs	r3, #1
 8002724:	e059      	b.n	80027da <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6810      	ldr	r0, [r2, #0]
 800272e:	f107 020c 	add.w	r2, r7, #12
 8002732:	2100      	movs	r1, #0
 8002734:	4798      	blx	r3
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	da02      	bge.n	8002742 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800273c:	f06f 0304 	mvn.w	r3, #4
 8002740:	e04b      	b.n	80027da <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d11b      	bne.n	8002784 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d006      	beq.n	8002764 <LAN8742_GetLinkState+0x90>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002760:	2302      	movs	r3, #2
 8002762:	e03a      	b.n	80027da <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800276e:	2303      	movs	r3, #3
 8002770:	e033      	b.n	80027da <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800277c:	2304      	movs	r3, #4
 800277e:	e02c      	b.n	80027da <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002780:	2305      	movs	r3, #5
 8002782:	e02a      	b.n	80027da <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6810      	ldr	r0, [r2, #0]
 800278c:	f107 020c 	add.w	r2, r7, #12
 8002790:	211f      	movs	r1, #31
 8002792:	4798      	blx	r3
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	da02      	bge.n	80027a0 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800279a:	f06f 0304 	mvn.w	r3, #4
 800279e:	e01c      	b.n	80027da <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80027aa:	2306      	movs	r3, #6
 80027ac:	e015      	b.n	80027da <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f003 031c 	and.w	r3, r3, #28
 80027b4:	2b18      	cmp	r3, #24
 80027b6:	d101      	bne.n	80027bc <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80027b8:	2302      	movs	r3, #2
 80027ba:	e00e      	b.n	80027da <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 031c 	and.w	r3, r3, #28
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d101      	bne.n	80027ca <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e007      	b.n	80027da <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f003 031c 	and.w	r3, r3, #28
 80027d0:	2b14      	cmp	r3, #20
 80027d2:	d101      	bne.n	80027d8 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80027d4:	2304      	movs	r3, #4
 80027d6:	e000      	b.n	80027da <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80027d8:	2305      	movs	r3, #5
    }
  }
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027e6:	2003      	movs	r0, #3
 80027e8:	f000 fdfd 	bl	80033e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ec:	2005      	movs	r0, #5
 80027ee:	f7ff fc37 	bl	8002060 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027f2:	f7fe fe15 	bl	8001420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002800:	4b06      	ldr	r3, [pc, #24]	@ (800281c <HAL_IncTick+0x20>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	4b06      	ldr	r3, [pc, #24]	@ (8002820 <HAL_IncTick+0x24>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4413      	add	r3, r2
 800280c:	4a04      	ldr	r2, [pc, #16]	@ (8002820 <HAL_IncTick+0x24>)
 800280e:	6013      	str	r3, [r2, #0]
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	20000008 	.word	0x20000008
 8002820:	20000e30 	.word	0x20000e30

08002824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return uwTick;
 8002828:	4b03      	ldr	r3, [pc, #12]	@ (8002838 <HAL_GetTick+0x14>)
 800282a:	681b      	ldr	r3, [r3, #0]
}
 800282c:	4618      	mov	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	20000e30 	.word	0x20000e30

0800283c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002844:	f7ff ffee 	bl	8002824 <HAL_GetTick>
 8002848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002854:	d005      	beq.n	8002862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002856:	4b0a      	ldr	r3, [pc, #40]	@ (8002880 <HAL_Delay+0x44>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4413      	add	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002862:	bf00      	nop
 8002864:	f7ff ffde 	bl	8002824 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	429a      	cmp	r2, r3
 8002872:	d8f7      	bhi.n	8002864 <HAL_Delay+0x28>
  {
  }
}
 8002874:	bf00      	nop
 8002876:	bf00      	nop
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000008 	.word	0x20000008

08002884 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e031      	b.n	80028fe <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d109      	bne.n	80028b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fe fdf4 	bl	8001490 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d116      	bne.n	80028f0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028c6:	4b10      	ldr	r3, [pc, #64]	@ (8002908 <HAL_ADC_Init+0x84>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	f043 0202 	orr.w	r2, r3, #2
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 fbb2 	bl	800303c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e2:	f023 0303 	bic.w	r3, r3, #3
 80028e6:	f043 0201 	orr.w	r2, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80028ee:	e001      	b.n	80028f4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	ffffeefd 	.word	0xffffeefd

0800290c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_ADC_Stop+0x16>
 800291e:	2302      	movs	r3, #2
 8002920:	e01f      	b.n	8002962 <HAL_ADC_Stop+0x56>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0201 	bic.w	r2, r2, #1
 8002938:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d107      	bne.n	8002958 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800294c:	4b08      	ldr	r3, [pc, #32]	@ (8002970 <HAL_ADC_Stop+0x64>)
 800294e:	4013      	ands	r3, r2
 8002950:	f043 0201 	orr.w	r2, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	ffffeefe 	.word	0xffffeefe

08002974 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_ADC_Start_IT+0x1a>
 800298a:	2302      	movs	r3, #2
 800298c:	e0b5      	b.n	8002afa <HAL_ADC_Start_IT+0x186>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d018      	beq.n	80029d6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689a      	ldr	r2, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80029b4:	4b54      	ldr	r3, [pc, #336]	@ (8002b08 <HAL_ADC_Start_IT+0x194>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a54      	ldr	r2, [pc, #336]	@ (8002b0c <HAL_ADC_Start_IT+0x198>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	0c9a      	lsrs	r2, r3, #18
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80029c8:	e002      	b.n	80029d0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f9      	bne.n	80029ca <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d17d      	bne.n	8002ae0 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029e8:	4b49      	ldr	r3, [pc, #292]	@ (8002b10 <HAL_ADC_Start_IT+0x19c>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d007      	beq.n	8002a12 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a06:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a0a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a1e:	d106      	bne.n	8002a2e <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a24:	f023 0206 	bic.w	r2, r3, #6
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a2c:	e002      	b.n	8002a34 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002a44:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4b30      	ldr	r3, [pc, #192]	@ (8002b14 <HAL_ADC_Start_IT+0x1a0>)
 8002a52:	430b      	orrs	r3, r1
 8002a54:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002a56:	4b30      	ldr	r3, [pc, #192]	@ (8002b18 <HAL_ADC_Start_IT+0x1a4>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f003 031f 	and.w	r3, r3, #31
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10f      	bne.n	8002a82 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d143      	bne.n	8002af8 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a7e:	609a      	str	r2, [r3, #8]
 8002a80:	e03a      	b.n	8002af8 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a25      	ldr	r2, [pc, #148]	@ (8002b1c <HAL_ADC_Start_IT+0x1a8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d10e      	bne.n	8002aaa <HAL_ADC_Start_IT+0x136>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d107      	bne.n	8002aaa <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002aa8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8002b18 <HAL_ADC_Start_IT+0x1a4>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d120      	bne.n	8002af8 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a19      	ldr	r2, [pc, #100]	@ (8002b20 <HAL_ADC_Start_IT+0x1ac>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d11b      	bne.n	8002af8 <HAL_ADC_Start_IT+0x184>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d114      	bne.n	8002af8 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002adc:	609a      	str	r2, [r3, #8]
 8002ade:	e00b      	b.n	8002af8 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	f043 0210 	orr.w	r2, r3, #16
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af0:	f043 0201 	orr.w	r2, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	431bde83 	.word	0x431bde83
 8002b10:	fffff8fe 	.word	0xfffff8fe
 8002b14:	04000020 	.word	0x04000020
 8002b18:	40012300 	.word	0x40012300
 8002b1c:	40012000 	.word	0x40012000
 8002b20:	40012200 	.word	0x40012200

08002b24 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	2300      	movs	r3, #0
 8002b32:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d049      	beq.n	8002bee <HAL_ADC_IRQHandler+0xca>
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d046      	beq.n	8002bee <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d105      	bne.n	8002b78 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d12b      	bne.n	8002bde <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d127      	bne.n	8002bde <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b94:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d006      	beq.n	8002baa <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d119      	bne.n	8002bde <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0220 	bic.w	r2, r2, #32
 8002bb8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d105      	bne.n	8002bde <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd6:	f043 0201 	orr.w	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f01a fab6 	bl	801d150 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 0212 	mvn.w	r2, #18
 8002bec:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bfc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d057      	beq.n	8002cb4 <HAL_ADC_IRQHandler+0x190>
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d054      	beq.n	8002cb4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d105      	bne.n	8002c22 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d139      	bne.n	8002ca4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c36:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d006      	beq.n	8002c4c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d12b      	bne.n	8002ca4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d124      	bne.n	8002ca4 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d11d      	bne.n	8002ca4 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d119      	bne.n	8002ca4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c7e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9c:	f043 0201 	orr.w	r2, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 fac3 	bl	8003230 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f06f 020c 	mvn.w	r2, #12
 8002cb2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cc2:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d017      	beq.n	8002cfa <HAL_ADC_IRQHandler+0x1d6>
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d014      	beq.n	8002cfa <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d10d      	bne.n	8002cfa <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f837 	bl	8002d5e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0201 	mvn.w	r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d08:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d015      	beq.n	8002d3c <HAL_ADC_IRQHandler+0x218>
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d012      	beq.n	8002d3c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1a:	f043 0202 	orr.w	r2, r3, #2
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f06f 0220 	mvn.w	r2, #32
 8002d2a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f820 	bl	8002d72 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f06f 0220 	mvn.w	r2, #32
 8002d3a:	601a      	str	r2, [r3, #0]
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	b083      	sub	sp, #12
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x1c>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e13a      	b.n	800301a <HAL_ADC_ConfigChannel+0x292>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b09      	cmp	r3, #9
 8002db2:	d93a      	bls.n	8002e2a <HAL_ADC_ConfigChannel+0xa2>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dbc:	d035      	beq.n	8002e2a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68d9      	ldr	r1, [r3, #12]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4613      	mov	r3, r2
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3b1e      	subs	r3, #30
 8002dd4:	2207      	movs	r2, #7
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43da      	mvns	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	400a      	ands	r2, r1
 8002de2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a8f      	ldr	r2, [pc, #572]	@ (8003028 <HAL_ADC_ConfigChannel+0x2a0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d10a      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68d9      	ldr	r1, [r3, #12]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	061a      	lsls	r2, r3, #24
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e02:	e039      	b.n	8002e78 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68d9      	ldr	r1, [r3, #12]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	4618      	mov	r0, r3
 8002e16:	4603      	mov	r3, r0
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4403      	add	r3, r0
 8002e1c:	3b1e      	subs	r3, #30
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e28:	e026      	b.n	8002e78 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6919      	ldr	r1, [r3, #16]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	4613      	mov	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4413      	add	r3, r2
 8002e3e:	f003 031f 	and.w	r3, r3, #31
 8002e42:	2207      	movs	r2, #7
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	43da      	mvns	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	400a      	ands	r2, r1
 8002e50:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6919      	ldr	r1, [r3, #16]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	4618      	mov	r0, r3
 8002e64:	4603      	mov	r3, r0
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	4403      	add	r3, r0
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b06      	cmp	r3, #6
 8002e7e:	d824      	bhi.n	8002eca <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	3b05      	subs	r3, #5
 8002e92:	221f      	movs	r2, #31
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43da      	mvns	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	400a      	ands	r2, r1
 8002ea0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	4618      	mov	r0, r3
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	3b05      	subs	r3, #5
 8002ebc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ec8:	e04c      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b0c      	cmp	r3, #12
 8002ed0:	d824      	bhi.n	8002f1c <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3b23      	subs	r3, #35	@ 0x23
 8002ee4:	221f      	movs	r2, #31
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	43da      	mvns	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	400a      	ands	r2, r1
 8002ef2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	4618      	mov	r0, r3
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3b23      	subs	r3, #35	@ 0x23
 8002f0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f1a:	e023      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3b41      	subs	r3, #65	@ 0x41
 8002f2e:	221f      	movs	r2, #31
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43da      	mvns	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	400a      	ands	r2, r1
 8002f3c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	3b41      	subs	r3, #65	@ 0x41
 8002f58:	fa00 f203 	lsl.w	r2, r0, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a30      	ldr	r2, [pc, #192]	@ (800302c <HAL_ADC_ConfigChannel+0x2a4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10a      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x1fc>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f76:	d105      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002f78:	4b2d      	ldr	r3, [pc, #180]	@ (8003030 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4a2c      	ldr	r2, [pc, #176]	@ (8003030 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f7e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002f82:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a28      	ldr	r2, [pc, #160]	@ (800302c <HAL_ADC_ConfigChannel+0x2a4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d10f      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x226>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b12      	cmp	r3, #18
 8002f94:	d10b      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002f96:	4b26      	ldr	r3, [pc, #152]	@ (8003030 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4a25      	ldr	r2, [pc, #148]	@ (8003030 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f9c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002fa0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002fa2:	4b23      	ldr	r3, [pc, #140]	@ (8003030 <HAL_ADC_ConfigChannel+0x2a8>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4a22      	ldr	r2, [pc, #136]	@ (8003030 <HAL_ADC_ConfigChannel+0x2a8>)
 8002fa8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fac:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a1e      	ldr	r2, [pc, #120]	@ (800302c <HAL_ADC_ConfigChannel+0x2a4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d12b      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x288>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1a      	ldr	r2, [pc, #104]	@ (8003028 <HAL_ADC_ConfigChannel+0x2a0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d003      	beq.n	8002fca <HAL_ADC_ConfigChannel+0x242>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b11      	cmp	r3, #17
 8002fc8:	d122      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002fca:	4b19      	ldr	r3, [pc, #100]	@ (8003030 <HAL_ADC_ConfigChannel+0x2a8>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4a18      	ldr	r2, [pc, #96]	@ (8003030 <HAL_ADC_ConfigChannel+0x2a8>)
 8002fd0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002fd4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002fd6:	4b16      	ldr	r3, [pc, #88]	@ (8003030 <HAL_ADC_ConfigChannel+0x2a8>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4a15      	ldr	r2, [pc, #84]	@ (8003030 <HAL_ADC_ConfigChannel+0x2a8>)
 8002fdc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fe0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a10      	ldr	r2, [pc, #64]	@ (8003028 <HAL_ADC_ConfigChannel+0x2a0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d111      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002fec:	4b11      	ldr	r3, [pc, #68]	@ (8003034 <HAL_ADC_ConfigChannel+0x2ac>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a11      	ldr	r2, [pc, #68]	@ (8003038 <HAL_ADC_ConfigChannel+0x2b0>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	0c9a      	lsrs	r2, r3, #18
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003002:	e002      	b.n	800300a <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3b01      	subs	r3, #1
 8003008:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1f9      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3714      	adds	r7, #20
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	10000012 	.word	0x10000012
 800302c:	40012000 	.word	0x40012000
 8003030:	40012300 	.word	0x40012300
 8003034:	20000000 	.word	0x20000000
 8003038:	431bde83 	.word	0x431bde83

0800303c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003044:	4b78      	ldr	r3, [pc, #480]	@ (8003228 <ADC_Init+0x1ec>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	4a77      	ldr	r2, [pc, #476]	@ (8003228 <ADC_Init+0x1ec>)
 800304a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800304e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003050:	4b75      	ldr	r3, [pc, #468]	@ (8003228 <ADC_Init+0x1ec>)
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4973      	ldr	r1, [pc, #460]	@ (8003228 <ADC_Init+0x1ec>)
 800305a:	4313      	orrs	r3, r2
 800305c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800306c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	021a      	lsls	r2, r3, #8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003090:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6859      	ldr	r1, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6899      	ldr	r1, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ca:	4a58      	ldr	r2, [pc, #352]	@ (800322c <ADC_Init+0x1f0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d022      	beq.n	8003116 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6899      	ldr	r1, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003100:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6899      	ldr	r1, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	430a      	orrs	r2, r1
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	e00f      	b.n	8003136 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003124:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003134:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0202 	bic.w	r2, r2, #2
 8003144:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6899      	ldr	r1, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	005a      	lsls	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01b      	beq.n	800319c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003172:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003182:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6859      	ldr	r1, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318e:	3b01      	subs	r3, #1
 8003190:	035a      	lsls	r2, r3, #13
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	e007      	b.n	80031ac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80031ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	051a      	lsls	r2, r3, #20
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80031e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6899      	ldr	r1, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80031ee:	025a      	lsls	r2, r3, #9
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003206:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6899      	ldr	r1, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	029a      	lsls	r2, r3, #10
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	609a      	str	r2, [r3, #8]
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	40012300 	.word	0x40012300
 800322c:	0f000001 	.word	0x0f000001

08003230 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003254:	4b0b      	ldr	r3, [pc, #44]	@ (8003284 <__NVIC_SetPriorityGrouping+0x40>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003260:	4013      	ands	r3, r2
 8003262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800326c:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <__NVIC_SetPriorityGrouping+0x44>)
 800326e:	4313      	orrs	r3, r2
 8003270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003272:	4a04      	ldr	r2, [pc, #16]	@ (8003284 <__NVIC_SetPriorityGrouping+0x40>)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	60d3      	str	r3, [r2, #12]
}
 8003278:	bf00      	nop
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	e000ed00 	.word	0xe000ed00
 8003288:	05fa0000 	.word	0x05fa0000

0800328c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003290:	4b04      	ldr	r3, [pc, #16]	@ (80032a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	0a1b      	lsrs	r3, r3, #8
 8003296:	f003 0307 	and.w	r3, r3, #7
}
 800329a:	4618      	mov	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	e000ed00 	.word	0xe000ed00

080032a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	db0b      	blt.n	80032d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	f003 021f 	and.w	r2, r3, #31
 80032c0:	4907      	ldr	r1, [pc, #28]	@ (80032e0 <__NVIC_EnableIRQ+0x38>)
 80032c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	2001      	movs	r0, #1
 80032ca:	fa00 f202 	lsl.w	r2, r0, r2
 80032ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	e000e100 	.word	0xe000e100

080032e4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	db12      	blt.n	800331c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	f003 021f 	and.w	r2, r3, #31
 80032fc:	490a      	ldr	r1, [pc, #40]	@ (8003328 <__NVIC_DisableIRQ+0x44>)
 80032fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	2001      	movs	r0, #1
 8003306:	fa00 f202 	lsl.w	r2, r0, r2
 800330a:	3320      	adds	r3, #32
 800330c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003310:	f3bf 8f4f 	dsb	sy
}
 8003314:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003316:	f3bf 8f6f 	isb	sy
}
 800331a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	e000e100 	.word	0xe000e100

0800332c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	6039      	str	r1, [r7, #0]
 8003336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333c:	2b00      	cmp	r3, #0
 800333e:	db0a      	blt.n	8003356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	b2da      	uxtb	r2, r3
 8003344:	490c      	ldr	r1, [pc, #48]	@ (8003378 <__NVIC_SetPriority+0x4c>)
 8003346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800334a:	0112      	lsls	r2, r2, #4
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	440b      	add	r3, r1
 8003350:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003354:	e00a      	b.n	800336c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	b2da      	uxtb	r2, r3
 800335a:	4908      	ldr	r1, [pc, #32]	@ (800337c <__NVIC_SetPriority+0x50>)
 800335c:	79fb      	ldrb	r3, [r7, #7]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	3b04      	subs	r3, #4
 8003364:	0112      	lsls	r2, r2, #4
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	440b      	add	r3, r1
 800336a:	761a      	strb	r2, [r3, #24]
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	e000e100 	.word	0xe000e100
 800337c:	e000ed00 	.word	0xe000ed00

08003380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003380:	b480      	push	{r7}
 8003382:	b089      	sub	sp, #36	@ 0x24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	f1c3 0307 	rsb	r3, r3, #7
 800339a:	2b04      	cmp	r3, #4
 800339c:	bf28      	it	cs
 800339e:	2304      	movcs	r3, #4
 80033a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3304      	adds	r3, #4
 80033a6:	2b06      	cmp	r3, #6
 80033a8:	d902      	bls.n	80033b0 <NVIC_EncodePriority+0x30>
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	3b03      	subs	r3, #3
 80033ae:	e000      	b.n	80033b2 <NVIC_EncodePriority+0x32>
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b4:	f04f 32ff 	mov.w	r2, #4294967295
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43da      	mvns	r2, r3
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	401a      	ands	r2, r3
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033c8:	f04f 31ff 	mov.w	r1, #4294967295
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	fa01 f303 	lsl.w	r3, r1, r3
 80033d2:	43d9      	mvns	r1, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d8:	4313      	orrs	r3, r2
         );
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3724      	adds	r7, #36	@ 0x24
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7ff ff28 	bl	8003244 <__NVIC_SetPriorityGrouping>
}
 80033f4:	bf00      	nop
 80033f6:	3708      	adds	r7, #8
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800340e:	f7ff ff3d 	bl	800328c <__NVIC_GetPriorityGrouping>
 8003412:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	68b9      	ldr	r1, [r7, #8]
 8003418:	6978      	ldr	r0, [r7, #20]
 800341a:	f7ff ffb1 	bl	8003380 <NVIC_EncodePriority>
 800341e:	4602      	mov	r2, r0
 8003420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003424:	4611      	mov	r1, r2
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff ff80 	bl	800332c <__NVIC_SetPriority>
}
 800342c:	bf00      	nop
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff ff30 	bl	80032a8 <__NVIC_EnableIRQ>
}
 8003448:	bf00      	nop
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff ff40 	bl	80032e4 <__NVIC_DisableIRQ>
}
 8003464:	bf00      	nop
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e054      	b.n	8003528 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	7f5b      	ldrb	r3, [r3, #29]
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d105      	bne.n	8003494 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fe f846 	bl	8001520 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	791b      	ldrb	r3, [r3, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10c      	bne.n	80034bc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a22      	ldr	r2, [pc, #136]	@ (8003530 <HAL_CRC_Init+0xc4>)
 80034a8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0218 	bic.w	r2, r2, #24
 80034b8:	609a      	str	r2, [r3, #8]
 80034ba:	e00c      	b.n	80034d6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6899      	ldr	r1, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	461a      	mov	r2, r3
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f94c 	bl	8003764 <HAL_CRCEx_Polynomial_Set>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e028      	b.n	8003528 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	795b      	ldrb	r3, [r3, #5]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d105      	bne.n	80034ea <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f04f 32ff 	mov.w	r2, #4294967295
 80034e6:	611a      	str	r2, [r3, #16]
 80034e8:	e004      	b.n	80034f4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6912      	ldr	r2, [r2, #16]
 80034f2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699a      	ldr	r2, [r3, #24]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	04c11db7 	.word	0x04c11db7

08003534 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003540:	2300      	movs	r3, #0
 8003542:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2202      	movs	r2, #2
 8003548:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 0201 	orr.w	r2, r2, #1
 8003558:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	2b03      	cmp	r3, #3
 8003560:	d006      	beq.n	8003570 <HAL_CRC_Calculate+0x3c>
 8003562:	2b03      	cmp	r3, #3
 8003564:	d829      	bhi.n	80035ba <HAL_CRC_Calculate+0x86>
 8003566:	2b01      	cmp	r3, #1
 8003568:	d019      	beq.n	800359e <HAL_CRC_Calculate+0x6a>
 800356a:	2b02      	cmp	r3, #2
 800356c:	d01e      	beq.n	80035ac <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800356e:	e024      	b.n	80035ba <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	e00a      	b.n	800358c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	441a      	add	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	3301      	adds	r3, #1
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	429a      	cmp	r2, r3
 8003592:	d3f0      	bcc.n	8003576 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	613b      	str	r3, [r7, #16]
      break;
 800359c:	e00e      	b.n	80035bc <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f812 	bl	80035cc <CRC_Handle_8>
 80035a8:	6138      	str	r0, [r7, #16]
      break;
 80035aa:	e007      	b.n	80035bc <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	68b9      	ldr	r1, [r7, #8]
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 f89d 	bl	80036f0 <CRC_Handle_16>
 80035b6:	6138      	str	r0, [r7, #16]
      break;
 80035b8:	e000      	b.n	80035bc <HAL_CRC_Calculate+0x88>
      break;
 80035ba:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2201      	movs	r2, #1
 80035c0:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80035c2:	693b      	ldr	r3, [r7, #16]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3718      	adds	r7, #24
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b089      	sub	sp, #36	@ 0x24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80035d8:	2300      	movs	r3, #0
 80035da:	61fb      	str	r3, [r7, #28]
 80035dc:	e023      	b.n	8003626 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	4413      	add	r3, r2
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	3301      	adds	r3, #1
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	440b      	add	r3, r1
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80035f8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	3302      	adds	r3, #2
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	440b      	add	r3, r1
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003608:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	3303      	adds	r3, #3
 8003610:	68b9      	ldr	r1, [r7, #8]
 8003612:	440b      	add	r3, r1
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800361c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800361e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	3301      	adds	r3, #1
 8003624:	61fb      	str	r3, [r7, #28]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	089b      	lsrs	r3, r3, #2
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	429a      	cmp	r2, r3
 800362e:	d3d6      	bcc.n	80035de <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d051      	beq.n	80036de <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	2b01      	cmp	r3, #1
 8003642:	d108      	bne.n	8003656 <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	4413      	add	r3, r2
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	6812      	ldr	r2, [r2, #0]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	7013      	strb	r3, [r2, #0]
 8003654:	e043      	b.n	80036de <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f003 0303 	and.w	r3, r3, #3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d118      	bne.n	8003692 <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	4413      	add	r3, r2
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	b21b      	sxth	r3, r3
 800366c:	021b      	lsls	r3, r3, #8
 800366e:	b21a      	sxth	r2, r3
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	3301      	adds	r3, #1
 8003676:	68b9      	ldr	r1, [r7, #8]
 8003678:	440b      	add	r3, r1
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	b21b      	sxth	r3, r3
 800367e:	4313      	orrs	r3, r2
 8003680:	b21b      	sxth	r3, r3
 8003682:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	8b7a      	ldrh	r2, [r7, #26]
 800368e:	801a      	strh	r2, [r3, #0]
 8003690:	e025      	b.n	80036de <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	2b03      	cmp	r3, #3
 800369a:	d120      	bne.n	80036de <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	4413      	add	r3, r2
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	b21b      	sxth	r3, r3
 80036a8:	021b      	lsls	r3, r3, #8
 80036aa:	b21a      	sxth	r2, r3
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	3301      	adds	r3, #1
 80036b2:	68b9      	ldr	r1, [r7, #8]
 80036b4:	440b      	add	r3, r1
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	b21b      	sxth	r3, r3
 80036ba:	4313      	orrs	r3, r2
 80036bc:	b21b      	sxth	r3, r3
 80036be:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	8b7a      	ldrh	r2, [r7, #26]
 80036ca:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	3302      	adds	r3, #2
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	4413      	add	r3, r2
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3724      	adds	r7, #36	@ 0x24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b087      	sub	sp, #28
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	e013      	b.n	800372a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	4413      	add	r3, r2
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	041a      	lsls	r2, r3, #16
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	3302      	adds	r3, #2
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	440b      	add	r3, r1
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	4619      	mov	r1, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	3301      	adds	r3, #1
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	085b      	lsrs	r3, r3, #1
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	429a      	cmp	r2, r3
 8003732:	d3e6      	bcc.n	8003702 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d009      	beq.n	8003752 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	4413      	add	r3, r2
 800374c:	881a      	ldrh	r2, [r3, #0]
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
}
 8003758:	4618      	mov	r0, r3
 800375a:	371c      	adds	r7, #28
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003774:	231f      	movs	r3, #31
 8003776:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d102      	bne.n	8003788 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	75fb      	strb	r3, [r7, #23]
 8003786:	e063      	b.n	8003850 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003788:	bf00      	nop
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1e5a      	subs	r2, r3, #1
 800378e:	613a      	str	r2, [r7, #16]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d009      	beq.n	80037a8 <HAL_CRCEx_Polynomial_Set+0x44>
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f003 031f 	and.w	r3, r3, #31
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f0      	beq.n	800378a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b18      	cmp	r3, #24
 80037ac:	d846      	bhi.n	800383c <HAL_CRCEx_Polynomial_Set+0xd8>
 80037ae:	a201      	add	r2, pc, #4	@ (adr r2, 80037b4 <HAL_CRCEx_Polynomial_Set+0x50>)
 80037b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b4:	08003843 	.word	0x08003843
 80037b8:	0800383d 	.word	0x0800383d
 80037bc:	0800383d 	.word	0x0800383d
 80037c0:	0800383d 	.word	0x0800383d
 80037c4:	0800383d 	.word	0x0800383d
 80037c8:	0800383d 	.word	0x0800383d
 80037cc:	0800383d 	.word	0x0800383d
 80037d0:	0800383d 	.word	0x0800383d
 80037d4:	08003831 	.word	0x08003831
 80037d8:	0800383d 	.word	0x0800383d
 80037dc:	0800383d 	.word	0x0800383d
 80037e0:	0800383d 	.word	0x0800383d
 80037e4:	0800383d 	.word	0x0800383d
 80037e8:	0800383d 	.word	0x0800383d
 80037ec:	0800383d 	.word	0x0800383d
 80037f0:	0800383d 	.word	0x0800383d
 80037f4:	08003825 	.word	0x08003825
 80037f8:	0800383d 	.word	0x0800383d
 80037fc:	0800383d 	.word	0x0800383d
 8003800:	0800383d 	.word	0x0800383d
 8003804:	0800383d 	.word	0x0800383d
 8003808:	0800383d 	.word	0x0800383d
 800380c:	0800383d 	.word	0x0800383d
 8003810:	0800383d 	.word	0x0800383d
 8003814:	08003819 	.word	0x08003819
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	2b06      	cmp	r3, #6
 800381c:	d913      	bls.n	8003846 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003822:	e010      	b.n	8003846 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	2b07      	cmp	r3, #7
 8003828:	d90f      	bls.n	800384a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800382e:	e00c      	b.n	800384a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	2b0f      	cmp	r3, #15
 8003834:	d90b      	bls.n	800384e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800383a:	e008      	b.n	800384e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	75fb      	strb	r3, [r7, #23]
        break;
 8003840:	e006      	b.n	8003850 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003842:	bf00      	nop
 8003844:	e004      	b.n	8003850 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003846:	bf00      	nop
 8003848:	e002      	b.n	8003850 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800384a:	bf00      	nop
 800384c:	e000      	b.n	8003850 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800384e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003850:	7dfb      	ldrb	r3, [r7, #23]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10d      	bne.n	8003872 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f023 0118 	bic.w	r1, r3, #24
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	430a      	orrs	r2, r1
 8003870:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003872:	7dfb      	ldrb	r3, [r7, #23]
}
 8003874:	4618      	mov	r0, r3
 8003876:	371c      	adds	r7, #28
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e014      	b.n	80038bc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	791b      	ldrb	r3, [r3, #4]
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d105      	bne.n	80038a8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fd fe5c 	bl	8001560 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d101      	bne.n	80038d8 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e046      	b.n	8003966 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	795b      	ldrb	r3, [r3, #5]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_DAC_Start+0x20>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e040      	b.n	8003966 <HAL_DAC_Start+0xa2>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2202      	movs	r2, #2
 80038ee:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6819      	ldr	r1, [r3, #0]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	2201      	movs	r2, #1
 80038fe:	409a      	lsls	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10f      	bne.n	800392e <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8003918:	2b3c      	cmp	r3, #60	@ 0x3c
 800391a:	d11d      	bne.n	8003958 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	605a      	str	r2, [r3, #4]
 800392c:	e014      	b.n	8003958 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	f003 0310 	and.w	r3, r3, #16
 800393e:	213c      	movs	r1, #60	@ 0x3c
 8003940:	fa01 f303 	lsl.w	r3, r1, r3
 8003944:	429a      	cmp	r2, r3
 8003946:	d107      	bne.n	8003958 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0202 	orr.w	r2, r2, #2
 8003956:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003988:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d01d      	beq.n	80039d0 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d018      	beq.n	80039d0 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2204      	movs	r2, #4
 80039a2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	f043 0201 	orr.w	r2, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039b8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039c8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f851 	bl	8003a72 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d01d      	beq.n	8003a16 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d018      	beq.n	8003a16 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2204      	movs	r2, #4
 80039e8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f043 0202 	orr.w	r2, r3, #2
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80039fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003a0e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 f891 	bl	8003b38 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003a16:	bf00      	nop
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b087      	sub	sp, #28
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	607a      	str	r2, [r7, #4]
 8003a2a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e015      	b.n	8003a66 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d105      	bne.n	8003a52 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	3308      	adds	r3, #8
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	e004      	b.n	8003a5c <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4413      	add	r3, r2
 8003a58:	3314      	adds	r3, #20
 8003a5a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b089      	sub	sp, #36	@ 0x24
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	60f8      	str	r0, [r7, #12]
 8003a8e:	60b9      	str	r1, [r7, #8]
 8003a90:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <HAL_DAC_ConfigChannel+0x1c>
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e042      	b.n	8003b2c <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	795b      	ldrb	r3, [r3, #5]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_DAC_ConfigChannel+0x2c>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e03c      	b.n	8003b2c <HAL_DAC_ConfigChannel+0xa6>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2202      	movs	r2, #2
 8003abc:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6819      	ldr	r1, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	22c0      	movs	r2, #192	@ 0xc0
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	43da      	mvns	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	400a      	ands	r2, r1
 8003b1c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2201      	movs	r2, #1
 8003b22:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003b2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3724      	adds	r7, #36	@ 0x24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b58:	f7fe fe64 	bl	8002824 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e099      	b.n	8003c9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0201 	bic.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b88:	e00f      	b.n	8003baa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b8a:	f7fe fe4b 	bl	8002824 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b05      	cmp	r3, #5
 8003b96:	d908      	bls.n	8003baa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2220      	movs	r2, #32
 8003b9c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e078      	b.n	8003c9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e8      	bne.n	8003b8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4b38      	ldr	r3, [pc, #224]	@ (8003ca4 <HAL_DMA_Init+0x158>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685a      	ldr	r2, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003be2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c00:	2b04      	cmp	r3, #4
 8003c02:	d107      	bne.n	8003c14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f023 0307 	bic.w	r3, r3, #7
 8003c2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d117      	bne.n	8003c6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00e      	beq.n	8003c6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 fb81 	bl	8004358 <DMA_CheckFifoParam>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d008      	beq.n	8003c6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2240      	movs	r2, #64	@ 0x40
 8003c60:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e016      	b.n	8003c9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fb38 	bl	80042ec <DMA_CalcBaseAndBitshift>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c84:	223f      	movs	r2, #63	@ 0x3f
 8003c86:	409a      	lsls	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	f010803f 	.word	0xf010803f

08003ca8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e050      	b.n	8003d5c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d101      	bne.n	8003cca <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e048      	b.n	8003d5c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0201 	bic.w	r2, r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2221      	movs	r2, #33	@ 0x21
 8003d08:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 faee 	bl	80042ec <DMA_CalcBaseAndBitshift>
 8003d10:	4603      	mov	r3, r0
 8003d12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d18:	223f      	movs	r2, #63	@ 0x3f
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d72:	2300      	movs	r3, #0
 8003d74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_DMA_Start_IT+0x26>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e048      	b.n	8003e1c <HAL_DMA_Start_IT+0xb8>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d137      	bne.n	8003e0e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2202      	movs	r2, #2
 8003da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	68b9      	ldr	r1, [r7, #8]
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 fa6c 	bl	8004290 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dbc:	223f      	movs	r2, #63	@ 0x3f
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0216 	orr.w	r2, r2, #22
 8003dd2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695a      	ldr	r2, [r3, #20]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003de2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0208 	orr.w	r2, r2, #8
 8003dfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]
 8003e0c:	e005      	b.n	8003e1a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e16:	2302      	movs	r3, #2
 8003e18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e30:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e32:	f7fe fcf7 	bl	8002824 <HAL_GetTick>
 8003e36:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d008      	beq.n	8003e56 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2280      	movs	r2, #128	@ 0x80
 8003e48:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e052      	b.n	8003efc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0216 	bic.w	r2, r2, #22
 8003e64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695a      	ldr	r2, [r3, #20]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e74:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d103      	bne.n	8003e86 <HAL_DMA_Abort+0x62>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d007      	beq.n	8003e96 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0208 	bic.w	r2, r2, #8
 8003e94:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0201 	bic.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ea6:	e013      	b.n	8003ed0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ea8:	f7fe fcbc 	bl	8002824 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b05      	cmp	r3, #5
 8003eb4:	d90c      	bls.n	8003ed0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e015      	b.n	8003efc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1e4      	bne.n	8003ea8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee2:	223f      	movs	r2, #63	@ 0x3f
 8003ee4:	409a      	lsls	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d004      	beq.n	8003f22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2280      	movs	r2, #128	@ 0x80
 8003f1c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e00c      	b.n	8003f3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2205      	movs	r2, #5
 8003f26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0201 	bic.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003f50:	2300      	movs	r3, #0
 8003f52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003f54:	4b8e      	ldr	r3, [pc, #568]	@ (8004190 <HAL_DMA_IRQHandler+0x248>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a8e      	ldr	r2, [pc, #568]	@ (8004194 <HAL_DMA_IRQHandler+0x24c>)
 8003f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5e:	0a9b      	lsrs	r3, r3, #10
 8003f60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f72:	2208      	movs	r2, #8
 8003f74:	409a      	lsls	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d01a      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d013      	beq.n	8003fb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0204 	bic.w	r2, r2, #4
 8003f9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	409a      	lsls	r2, r3
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fac:	f043 0201 	orr.w	r2, r3, #1
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb8:	2201      	movs	r2, #1
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d012      	beq.n	8003fea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00b      	beq.n	8003fea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	409a      	lsls	r2, r3
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe2:	f043 0202 	orr.w	r2, r3, #2
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fee:	2204      	movs	r2, #4
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d012      	beq.n	8004020 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00b      	beq.n	8004020 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400c:	2204      	movs	r2, #4
 800400e:	409a      	lsls	r2, r3
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004018:	f043 0204 	orr.w	r2, r3, #4
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004024:	2210      	movs	r2, #16
 8004026:	409a      	lsls	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4013      	ands	r3, r2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d043      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b00      	cmp	r3, #0
 800403c:	d03c      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004042:	2210      	movs	r2, #16
 8004044:	409a      	lsls	r2, r3
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d018      	beq.n	800408a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d108      	bne.n	8004078 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	d024      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	4798      	blx	r3
 8004076:	e01f      	b.n	80040b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800407c:	2b00      	cmp	r3, #0
 800407e:	d01b      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	4798      	blx	r3
 8004088:	e016      	b.n	80040b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004094:	2b00      	cmp	r3, #0
 8004096:	d107      	bne.n	80040a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0208 	bic.w	r2, r2, #8
 80040a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040bc:	2220      	movs	r2, #32
 80040be:	409a      	lsls	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4013      	ands	r3, r2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 808f 	beq.w	80041e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 8087 	beq.w	80041e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040de:	2220      	movs	r2, #32
 80040e0:	409a      	lsls	r2, r3
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b05      	cmp	r3, #5
 80040f0:	d136      	bne.n	8004160 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0216 	bic.w	r2, r2, #22
 8004100:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	695a      	ldr	r2, [r3, #20]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004110:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004116:	2b00      	cmp	r3, #0
 8004118:	d103      	bne.n	8004122 <HAL_DMA_IRQHandler+0x1da>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800411e:	2b00      	cmp	r3, #0
 8004120:	d007      	beq.n	8004132 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0208 	bic.w	r2, r2, #8
 8004130:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004136:	223f      	movs	r2, #63	@ 0x3f
 8004138:	409a      	lsls	r2, r3
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004152:	2b00      	cmp	r3, #0
 8004154:	d07e      	beq.n	8004254 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	4798      	blx	r3
        }
        return;
 800415e:	e079      	b.n	8004254 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d01d      	beq.n	80041aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10d      	bne.n	8004198 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004180:	2b00      	cmp	r3, #0
 8004182:	d031      	beq.n	80041e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	4798      	blx	r3
 800418c:	e02c      	b.n	80041e8 <HAL_DMA_IRQHandler+0x2a0>
 800418e:	bf00      	nop
 8004190:	20000000 	.word	0x20000000
 8004194:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800419c:	2b00      	cmp	r3, #0
 800419e:	d023      	beq.n	80041e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	4798      	blx	r3
 80041a8:	e01e      	b.n	80041e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10f      	bne.n	80041d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0210 	bic.w	r2, r2, #16
 80041c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d032      	beq.n	8004256 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d022      	beq.n	8004242 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2205      	movs	r2, #5
 8004200:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0201 	bic.w	r2, r2, #1
 8004212:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	3301      	adds	r3, #1
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	429a      	cmp	r2, r3
 800421e:	d307      	bcc.n	8004230 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f2      	bne.n	8004214 <HAL_DMA_IRQHandler+0x2cc>
 800422e:	e000      	b.n	8004232 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004230:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004246:	2b00      	cmp	r3, #0
 8004248:	d005      	beq.n	8004256 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	4798      	blx	r3
 8004252:	e000      	b.n	8004256 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004254:	bf00      	nop
    }
  }
}
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800426a:	b2db      	uxtb	r3, r3
}
 800426c:	4618      	mov	r0, r3
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004284:	4618      	mov	r0, r3
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
 800429c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80042ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	2b40      	cmp	r3, #64	@ 0x40
 80042bc:	d108      	bne.n	80042d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80042ce:	e007      	b.n	80042e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68ba      	ldr	r2, [r7, #8]
 80042d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	60da      	str	r2, [r3, #12]
}
 80042e0:	bf00      	nop
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	3b10      	subs	r3, #16
 80042fc:	4a13      	ldr	r2, [pc, #76]	@ (800434c <DMA_CalcBaseAndBitshift+0x60>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	091b      	lsrs	r3, r3, #4
 8004304:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004306:	4a12      	ldr	r2, [pc, #72]	@ (8004350 <DMA_CalcBaseAndBitshift+0x64>)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4413      	add	r3, r2
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b03      	cmp	r3, #3
 8004318:	d908      	bls.n	800432c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	4b0c      	ldr	r3, [pc, #48]	@ (8004354 <DMA_CalcBaseAndBitshift+0x68>)
 8004322:	4013      	ands	r3, r2
 8004324:	1d1a      	adds	r2, r3, #4
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	659a      	str	r2, [r3, #88]	@ 0x58
 800432a:	e006      	b.n	800433a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	4b08      	ldr	r3, [pc, #32]	@ (8004354 <DMA_CalcBaseAndBitshift+0x68>)
 8004334:	4013      	ands	r3, r2
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	aaaaaaab 	.word	0xaaaaaaab
 8004350:	0802220c 	.word	0x0802220c
 8004354:	fffffc00 	.word	0xfffffc00

08004358 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004360:	2300      	movs	r3, #0
 8004362:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004368:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d11f      	bne.n	80043b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b03      	cmp	r3, #3
 8004376:	d856      	bhi.n	8004426 <DMA_CheckFifoParam+0xce>
 8004378:	a201      	add	r2, pc, #4	@ (adr r2, 8004380 <DMA_CheckFifoParam+0x28>)
 800437a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437e:	bf00      	nop
 8004380:	08004391 	.word	0x08004391
 8004384:	080043a3 	.word	0x080043a3
 8004388:	08004391 	.word	0x08004391
 800438c:	08004427 	.word	0x08004427
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004394:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d046      	beq.n	800442a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043a0:	e043      	b.n	800442a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043aa:	d140      	bne.n	800442e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043b0:	e03d      	b.n	800442e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043ba:	d121      	bne.n	8004400 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b03      	cmp	r3, #3
 80043c0:	d837      	bhi.n	8004432 <DMA_CheckFifoParam+0xda>
 80043c2:	a201      	add	r2, pc, #4	@ (adr r2, 80043c8 <DMA_CheckFifoParam+0x70>)
 80043c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c8:	080043d9 	.word	0x080043d9
 80043cc:	080043df 	.word	0x080043df
 80043d0:	080043d9 	.word	0x080043d9
 80043d4:	080043f1 	.word	0x080043f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	73fb      	strb	r3, [r7, #15]
      break;
 80043dc:	e030      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d025      	beq.n	8004436 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ee:	e022      	b.n	8004436 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043f8:	d11f      	bne.n	800443a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043fe:	e01c      	b.n	800443a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b02      	cmp	r3, #2
 8004404:	d903      	bls.n	800440e <DMA_CheckFifoParam+0xb6>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b03      	cmp	r3, #3
 800440a:	d003      	beq.n	8004414 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800440c:	e018      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	73fb      	strb	r3, [r7, #15]
      break;
 8004412:	e015      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004418:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00e      	beq.n	800443e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	73fb      	strb	r3, [r7, #15]
      break;
 8004424:	e00b      	b.n	800443e <DMA_CheckFifoParam+0xe6>
      break;
 8004426:	bf00      	nop
 8004428:	e00a      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
      break;
 800442a:	bf00      	nop
 800442c:	e008      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
      break;
 800442e:	bf00      	nop
 8004430:	e006      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
      break;
 8004432:	bf00      	nop
 8004434:	e004      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
      break;
 8004436:	bf00      	nop
 8004438:	e002      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
      break;   
 800443a:	bf00      	nop
 800443c:	e000      	b.n	8004440 <DMA_CheckFifoParam+0xe8>
      break;
 800443e:	bf00      	nop
    }
  } 
  
  return status; 
 8004440:	7bfb      	ldrb	r3, [r7, #15]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3714      	adds	r7, #20
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop

08004450 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e086      	b.n	8004570 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004468:	2b00      	cmp	r3, #0
 800446a:	d106      	bne.n	800447a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2220      	movs	r2, #32
 8004470:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f009 ff9f 	bl	800e3b8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800447a:	4b3f      	ldr	r3, [pc, #252]	@ (8004578 <HAL_ETH_Init+0x128>)
 800447c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800447e:	4a3e      	ldr	r2, [pc, #248]	@ (8004578 <HAL_ETH_Init+0x128>)
 8004480:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004484:	6453      	str	r3, [r2, #68]	@ 0x44
 8004486:	4b3c      	ldr	r3, [pc, #240]	@ (8004578 <HAL_ETH_Init+0x128>)
 8004488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800448e:	60bb      	str	r3, [r7, #8]
 8004490:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004492:	4b3a      	ldr	r3, [pc, #232]	@ (800457c <HAL_ETH_Init+0x12c>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	4a39      	ldr	r2, [pc, #228]	@ (800457c <HAL_ETH_Init+0x12c>)
 8004498:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800449c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800449e:	4b37      	ldr	r3, [pc, #220]	@ (800457c <HAL_ETH_Init+0x12c>)
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	4935      	ldr	r1, [pc, #212]	@ (800457c <HAL_ETH_Init+0x12c>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80044ac:	4b33      	ldr	r3, [pc, #204]	@ (800457c <HAL_ETH_Init+0x12c>)
 80044ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6812      	ldr	r2, [r2, #0]
 80044be:	f043 0301 	orr.w	r3, r3, #1
 80044c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80044c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044c8:	f7fe f9ac 	bl	8002824 <HAL_GetTick>
 80044cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80044ce:	e011      	b.n	80044f4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80044d0:	f7fe f9a8 	bl	8002824 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80044de:	d909      	bls.n	80044f4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2204      	movs	r2, #4
 80044e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	22e0      	movs	r2, #224	@ 0xe0
 80044ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e03d      	b.n	8004570 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1e4      	bne.n	80044d0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 ff5c 	bl	80053c4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f001 f807 	bl	8005520 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f001 f85d 	bl	80055d2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	461a      	mov	r2, r3
 800451e:	2100      	movs	r1, #0
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 ffc5 	bl	80054b0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8004534:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	4b0f      	ldr	r3, [pc, #60]	@ (8004580 <HAL_ETH_Init+0x130>)
 8004544:	430b      	orrs	r3, r1
 8004546:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800455a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2210      	movs	r2, #16
 800456a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40023800 	.word	0x40023800
 800457c:	40013800 	.word	0x40013800
 8004580:	00020060 	.word	0x00020060

08004584 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004592:	2b10      	cmp	r3, #16
 8004594:	d15f      	bne.n	8004656 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2220      	movs	r2, #32
 800459a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2204      	movs	r2, #4
 80045a8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f9f6 	bl	800499c <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80045b8:	2001      	movs	r0, #1
 80045ba:	f7fe f93f 	bl	800283c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80045d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80045dc:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6812      	ldr	r2, [r2, #0]
 80045ec:	f043 0302 	orr.w	r3, r3, #2
 80045f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80045f4:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fd80 	bl	80050fc <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0208 	orr.w	r2, r2, #8
 800460a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004614:	2001      	movs	r0, #1
 8004616:	f7fe f911 	bl	800283c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f042 0204 	orr.w	r2, r2, #4
 8004630:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800463a:	69d9      	ldr	r1, [r3, #28]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	4b07      	ldr	r3, [pc, #28]	@ (8004660 <HAL_ETH_Start_IT+0xdc>)
 8004642:	430b      	orrs	r3, r1
 8004644:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004648:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2240      	movs	r2, #64	@ 0x40
 800464e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	e000      	b.n	8004658 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
  }
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	0001a0c1 	.word	0x0001a0c1

08004664 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004672:	2b40      	cmp	r3, #64	@ 0x40
 8004674:	d16e      	bne.n	8004754 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2220      	movs	r2, #32
 800467a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004686:	69d9      	ldr	r1, [r3, #28]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	4b34      	ldr	r3, [pc, #208]	@ (8004760 <HAL_ETH_Stop_IT+0xfc>)
 800468e:	400b      	ands	r3, r1
 8004690:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004694:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6812      	ldr	r2, [r2, #0]
 80046a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80046ac:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6812      	ldr	r2, [r2, #0]
 80046bc:	f023 0302 	bic.w	r3, r3, #2
 80046c0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80046c4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0204 	bic.w	r2, r2, #4
 80046d4:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80046de:	2001      	movs	r0, #1
 80046e0:	f7fe f8ac 	bl	800283c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 fd05 	bl	80050fc <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0208 	bic.w	r2, r2, #8
 8004700:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800470a:	2001      	movs	r0, #1
 800470c:	f7fe f896 	bl	800283c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004718:	2300      	movs	r3, #0
 800471a:	617b      	str	r3, [r7, #20]
 800471c:	e00e      	b.n	800473c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	3212      	adds	r2, #18
 8004724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004728:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	3301      	adds	r3, #1
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2b03      	cmp	r3, #3
 8004740:	d9ed      	bls.n	800471e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2210      	movs	r2, #16
 800474c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	e000      	b.n	8004756 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
  }
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	fffe5f3e 	.word	0xfffe5f3e

08004764 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d109      	bne.n	8004788 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800477a:	f043 0201 	orr.w	r2, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e045      	b.n	8004814 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800478e:	2b40      	cmp	r3, #64	@ 0x40
 8004790:	d13f      	bne.n	8004812 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800479a:	2201      	movs	r2, #1
 800479c:	6839      	ldr	r1, [r7, #0]
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 ff86 	bl	80056b0 <ETH_Prepare_Tx_Descriptors>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d009      	beq.n	80047be <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b0:	f043 0202 	orr.w	r2, r3, #2
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e02a      	b.n	8004814 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80047be:	f3bf 8f4f 	dsb	sy
}
 80047c2:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d904      	bls.n	80047e0 <HAL_ETH_Transmit_IT+0x7c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047da:	1f1a      	subs	r2, r3, #4
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00d      	beq.n	800480e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047fa:	461a      	mov	r2, r3
 80047fc:	2304      	movs	r3, #4
 80047fe:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004808:	461a      	mov	r2, r3
 800480a:	2300      	movs	r3, #0
 800480c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	e000      	b.n	8004814 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
  }
}
 8004814:	4618      	mov	r0, r3
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d109      	bne.n	8004848 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800483a:	f043 0201 	orr.w	r2, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e0a4      	b.n	8004992 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800484e:	2b40      	cmp	r3, #64	@ 0x40
 8004850:	d001      	beq.n	8004856 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e09d      	b.n	8004992 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800485a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	3212      	adds	r2, #18
 8004862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004866:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800486c:	f1c3 0304 	rsb	r3, r3, #4
 8004870:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004872:	e066      	b.n	8004942 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800487c:	2b00      	cmp	r3, #0
 800487e:	d007      	beq.n	8004890 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	69da      	ldr	r2, [r3, #28]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	699a      	ldr	r2, [r3, #24]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004898:	2b00      	cmp	r3, #0
 800489a:	d103      	bne.n	80048a4 <HAL_ETH_ReadData+0x88>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d03c      	beq.n	800491e <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	0c1b      	lsrs	r3, r3, #16
 80048c2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80048c6:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80048dc:	2301      	movs	r3, #1
 80048de:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80048f4:	69bb      	ldr	r3, [r7, #24]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80048f8:	461a      	mov	r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	f009 ff2f 	bl	800e760 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	441a      	add	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	2200      	movs	r2, #0
 800491c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	3301      	adds	r3, #1
 8004922:	61fb      	str	r3, [r7, #28]
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	2b03      	cmp	r3, #3
 8004928:	d902      	bls.n	8004930 <HAL_ETH_ReadData+0x114>
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	3b04      	subs	r3, #4
 800492e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	69fa      	ldr	r2, [r7, #28]
 8004934:	3212      	adds	r2, #18
 8004936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800493a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	3301      	adds	r3, #1
 8004940:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8004946:	2b00      	cmp	r3, #0
 8004948:	db06      	blt.n	8004958 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	429a      	cmp	r2, r3
 8004950:	d202      	bcs.n	8004958 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8004952:	7cfb      	ldrb	r3, [r7, #19]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d08d      	beq.n	8004874 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	441a      	add	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 f815 	bl	800499c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	69fa      	ldr	r2, [r7, #28]
 8004976:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8004978:	7cfb      	ldrb	r3, [r7, #19]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d108      	bne.n	8004990 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	e000      	b.n	8004992 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
}
 8004992:	4618      	mov	r0, r3
 8004994:	3720      	adds	r7, #32
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b088      	sub	sp, #32
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80049a4:	2300      	movs	r3, #0
 80049a6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80049a8:	2301      	movs	r3, #1
 80049aa:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049b0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69fa      	ldr	r2, [r7, #28]
 80049b6:	3212      	adds	r2, #18
 80049b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049bc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049c2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80049c4:	e042      	b.n	8004a4c <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d112      	bne.n	80049f4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80049ce:	f107 0308 	add.w	r3, r7, #8
 80049d2:	4618      	mov	r0, r3
 80049d4:	f009 fe94 	bl	800e700 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d102      	bne.n	80049e4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	74fb      	strb	r3, [r7, #19]
 80049e2:	e007      	b.n	80049f4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	461a      	mov	r2, r3
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	461a      	mov	r2, r3
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80049f4:	7cfb      	ldrb	r3, [r7, #19]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d028      	beq.n	8004a4c <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695a      	ldr	r2, [r3, #20]
 8004a06:	4b26      	ldr	r3, [pc, #152]	@ (8004aa0 <ETH_UpdateDescriptor+0x104>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	6053      	str	r3, [r2, #4]
 8004a0e:	e005      	b.n	8004a1c <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	61fb      	str	r3, [r7, #28]
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d902      	bls.n	8004a3a <ETH_UpdateDescriptor+0x9e>
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	3b04      	subs	r3, #4
 8004a38:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	69fa      	ldr	r2, [r7, #28]
 8004a3e:	3212      	adds	r2, #18
 8004a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a44:	617b      	str	r3, [r7, #20]
      desccount--;
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <ETH_UpdateDescriptor+0xbc>
 8004a52:	7cfb      	ldrb	r3, [r7, #19]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1b6      	bne.n	80049c6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d01a      	beq.n	8004a98 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	3303      	adds	r3, #3
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004a6c:	f3bf 8f5f 	dmb	sy
}
 8004a70:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6919      	ldr	r1, [r3, #16]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	18ca      	adds	r2, r1, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a8a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69fa      	ldr	r2, [r7, #28]
 8004a90:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8004a98:	bf00      	nop
 8004a9a:	3720      	adds	r7, #32
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	80004000 	.word	0x80004000

08004aa4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3318      	adds	r3, #24
 8004ab0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abc:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004ac2:	e047      	b.n	8004b54 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10a      	bne.n	8004af4 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d902      	bls.n	8004af0 <HAL_ETH_ReleaseTxPacket+0x4c>
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	3b04      	subs	r3, #4
 8004aee:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004af4:	7bbb      	ldrb	r3, [r7, #14]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d02c      	beq.n	8004b54 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68d9      	ldr	r1, [r3, #12]
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	4613      	mov	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	440b      	add	r3, r1
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	db1f      	blt.n	8004b50 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	3304      	adds	r3, #4
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f009 fe61 	bl	800e7e4 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	3304      	adds	r3, #4
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	3301      	adds	r3, #1
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d902      	bls.n	8004b42 <HAL_ETH_ReleaseTxPacket+0x9e>
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	3b04      	subs	r3, #4
 8004b40:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004b4e:	e001      	b.n	8004b54 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <HAL_ETH_ReleaseTxPacket+0xbc>
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1b1      	bne.n	8004ac4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7a:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8004b94:	4b4b      	ldr	r3, [pc, #300]	@ (8004cc4 <HAL_ETH_IRQHandler+0x158>)
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00e      	beq.n	8004bc2 <HAL_ETH_IRQHandler+0x56>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d009      	beq.n	8004bc2 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	4b43      	ldr	r3, [pc, #268]	@ (8004cc8 <HAL_ETH_IRQHandler+0x15c>)
 8004bba:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f009 f93b 	bl	800de38 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00f      	beq.n	8004bec <HAL_ETH_IRQHandler+0x80>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bde:	461a      	mov	r2, r3
 8004be0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8004be4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f009 f936 	bl	800de58 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d042      	beq.n	8004c7c <HAL_ETH_IRQHandler+0x110>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d03d      	beq.n	8004c7c <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c06:	f043 0208 	orr.w	r2, r3, #8
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d01a      	beq.n	8004c50 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c22:	695a      	ldr	r2, [r3, #20]
 8004c24:	4b29      	ldr	r3, [pc, #164]	@ (8004ccc <HAL_ETH_IRQHandler+0x160>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6812      	ldr	r2, [r2, #0]
 8004c3c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8004c40:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004c44:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	22e0      	movs	r2, #224	@ 0xe0
 8004c4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004c4e:	e012      	b.n	8004c76 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c58:	695a      	ldr	r2, [r3, #20]
 8004c5a:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004c5e:	4013      	ands	r3, r2
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004c74:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f009 f8fe 	bl	800de78 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00e      	beq.n	8004ca4 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f81a 	bl	8004cd0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d006      	beq.n	8004cbc <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004cae:	4b05      	ldr	r3, [pc, #20]	@ (8004cc4 <HAL_ETH_IRQHandler+0x158>)
 8004cb0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004cb4:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f814 	bl	8004ce4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004cbc:	bf00      	nop
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40013c00 	.word	0x40013c00
 8004cc8:	00010040 	.word	0x00010040
 8004ccc:	007e2000 	.word	0x007e2000

08004cd0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f003 031c 	and.w	r3, r3, #28
 8004d14:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	02db      	lsls	r3, r3, #11
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	019b      	lsls	r3, r3, #6
 8004d26:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f023 0302 	bic.w	r3, r3, #2
 8004d36:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f043 0301 	orr.w	r3, r3, #1
 8004d3e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004d48:	f7fd fd6c 	bl	8002824 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004d4e:	e00d      	b.n	8004d6c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004d50:	f7fd fd68 	bl	8002824 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d5e:	d301      	bcc.n	8004d64 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e010      	b.n	8004d86 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1ec      	bne.n	8004d50 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	461a      	mov	r2, r3
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b086      	sub	sp, #24
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	60b9      	str	r1, [r7, #8]
 8004d98:	607a      	str	r2, [r7, #4]
 8004d9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f003 031c 	and.w	r3, r3, #28
 8004daa:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	02db      	lsls	r3, r3, #11
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	019b      	lsls	r3, r3, #6
 8004dbc:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f043 0302 	orr.w	r3, r3, #2
 8004dcc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f043 0301 	orr.w	r3, r3, #1
 8004dd4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004de8:	f7fd fd1c 	bl	8002824 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004dee:	e00d      	b.n	8004e0c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004df0:	f7fd fd18 	bl	8002824 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dfe:	d301      	bcc.n	8004e04 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e009      	b.n	8004e18 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1ec      	bne.n	8004df0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d101      	bne.n	8004e34 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e0e6      	b.n	8005002 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0310 	and.w	r3, r3, #16
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	bf14      	ite	ne
 8004e42:	2301      	movne	r3, #1
 8004e44:	2300      	moveq	r3, #0
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	461a      	mov	r2, r3
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	bf0c      	ite	eq
 8004e6c:	2301      	moveq	r3, #1
 8004e6e:	2300      	movne	r3, #0
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	461a      	mov	r2, r3
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	bf14      	ite	ne
 8004e88:	2301      	movne	r3, #1
 8004e8a:	2300      	moveq	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	bf0c      	ite	eq
 8004ea2:	2301      	moveq	r3, #1
 8004ea4:	2300      	movne	r3, #0
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	bf14      	ite	ne
 8004ebc:	2301      	movne	r3, #1
 8004ebe:	2300      	moveq	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	bf0c      	ite	eq
 8004ef2:	2301      	moveq	r3, #1
 8004ef4:	2300      	movne	r3, #0
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	461a      	mov	r2, r3
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	bf0c      	ite	eq
 8004f0c:	2301      	moveq	r3, #1
 8004f0e:	2300      	movne	r3, #0
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	461a      	mov	r2, r3
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	bf14      	ite	ne
 8004f26:	2301      	movne	r3, #1
 8004f28:	2300      	moveq	r3, #0
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	bf14      	ite	ne
 8004f4e:	2301      	movne	r3, #1
 8004f50:	2300      	moveq	r3, #0
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	461a      	mov	r2, r3
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	bf14      	ite	ne
 8004f68:	2301      	movne	r3, #1
 8004f6a:	2300      	moveq	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	461a      	mov	r2, r3
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	bf14      	ite	ne
 8004f82:	2301      	movne	r3, #1
 8004f84:	2300      	moveq	r3, #0
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	461a      	mov	r2, r3
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	bf0c      	ite	eq
 8004f9e:	2301      	moveq	r3, #1
 8004fa0:	2300      	movne	r3, #0
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	0c1b      	lsrs	r3, r3, #16
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	f003 0304 	and.w	r3, r3, #4
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	bf14      	ite	ne
 8004fd6:	2301      	movne	r3, #1
 8004fd8:	2300      	moveq	r3, #0
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	461a      	mov	r2, r3
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	bf14      	ite	ne
 8004ff2:	2301      	movne	r3, #1
 8004ff4:	2300      	moveq	r3, #0
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b082      	sub	sp, #8
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e00b      	b.n	800503a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005028:	2b10      	cmp	r3, #16
 800502a:	d105      	bne.n	8005038 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800502c:	6839      	ldr	r1, [r7, #0]
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f88a 	bl	8005148 <ETH_SetMACConfig>

    return HAL_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	e000      	b.n	800503a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
  }
}
 800503a:	4618      	mov	r0, r3
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 031c 	bic.w	r3, r3, #28
 800505a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800505c:	f003 fe70 	bl	8008d40 <HAL_RCC_GetHCLKFreq>
 8005060:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	4a14      	ldr	r2, [pc, #80]	@ (80050b8 <HAL_ETH_SetMDIOClockRange+0x74>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d804      	bhi.n	8005074 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f043 0308 	orr.w	r3, r3, #8
 8005070:	60fb      	str	r3, [r7, #12]
 8005072:	e019      	b.n	80050a8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	4a11      	ldr	r2, [pc, #68]	@ (80050bc <HAL_ETH_SetMDIOClockRange+0x78>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d204      	bcs.n	8005086 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f043 030c 	orr.w	r3, r3, #12
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	e010      	b.n	80050a8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	4a0d      	ldr	r2, [pc, #52]	@ (80050c0 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d90c      	bls.n	80050a8 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	4a0c      	ldr	r2, [pc, #48]	@ (80050c4 <HAL_ETH_SetMDIOClockRange+0x80>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d804      	bhi.n	80050a0 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f043 0304 	orr.w	r3, r3, #4
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	e003      	b.n	80050a8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f043 0310 	orr.w	r3, r3, #16
 80050a6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	611a      	str	r2, [r3, #16]
}
 80050b0:	bf00      	nop
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	02160ebf 	.word	0x02160ebf
 80050bc:	03938700 	.word	0x03938700
 80050c0:	05f5e0ff 	.word	0x05f5e0ff
 80050c4:	08f0d17f 	.word	0x08f0d17f

080050c8 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005104:	2300      	movs	r3, #0
 8005106:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6812      	ldr	r2, [r2, #0]
 8005116:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800511a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800511e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800512c:	2001      	movs	r0, #1
 800512e:	f7fd fb85 	bl	800283c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800513c:	6193      	str	r3, [r2, #24]
}
 800513e:	bf00      	nop
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	4b53      	ldr	r3, [pc, #332]	@ (80052ac <ETH_SetMACConfig+0x164>)
 800515e:	4013      	ands	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	7b9b      	ldrb	r3, [r3, #14]
 8005166:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	7c12      	ldrb	r2, [r2, #16]
 800516c:	2a00      	cmp	r2, #0
 800516e:	d102      	bne.n	8005176 <ETH_SetMACConfig+0x2e>
 8005170:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005174:	e000      	b.n	8005178 <ETH_SetMACConfig+0x30>
 8005176:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005178:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	7c52      	ldrb	r2, [r2, #17]
 800517e:	2a00      	cmp	r2, #0
 8005180:	d102      	bne.n	8005188 <ETH_SetMACConfig+0x40>
 8005182:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8005186:	e000      	b.n	800518a <ETH_SetMACConfig+0x42>
 8005188:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800518a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005190:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	7fdb      	ldrb	r3, [r3, #31]
 8005196:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005198:	431a      	orrs	r2, r3
                        macconf->Speed |
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800519e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	7f92      	ldrb	r2, [r2, #30]
 80051a4:	2a00      	cmp	r2, #0
 80051a6:	d102      	bne.n	80051ae <ETH_SetMACConfig+0x66>
 80051a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80051ac:	e000      	b.n	80051b0 <ETH_SetMACConfig+0x68>
 80051ae:	2200      	movs	r2, #0
                        macconf->Speed |
 80051b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	7f1b      	ldrb	r3, [r3, #28]
 80051b6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80051b8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80051be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	791b      	ldrb	r3, [r3, #4]
 80051c4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80051c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	f892 2020 	ldrb.w	r2, [r2, #32]
 80051ce:	2a00      	cmp	r2, #0
 80051d0:	d102      	bne.n	80051d8 <ETH_SetMACConfig+0x90>
 80051d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051d6:	e000      	b.n	80051da <ETH_SetMACConfig+0x92>
 80051d8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80051da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	7bdb      	ldrb	r3, [r3, #15]
 80051e0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80051e2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80051e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051f0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80051f2:	4313      	orrs	r3, r2
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800520a:	2001      	movs	r0, #1
 800520c:	f7fd fb16 	bl	800283c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8005226:	4013      	ands	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800522e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8005236:	2a00      	cmp	r2, #0
 8005238:	d101      	bne.n	800523e <ETH_SetMACConfig+0xf6>
 800523a:	2280      	movs	r2, #128	@ 0x80
 800523c:	e000      	b.n	8005240 <ETH_SetMACConfig+0xf8>
 800523e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005240:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005246:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800524e:	2a01      	cmp	r2, #1
 8005250:	d101      	bne.n	8005256 <ETH_SetMACConfig+0x10e>
 8005252:	2208      	movs	r2, #8
 8005254:	e000      	b.n	8005258 <ETH_SetMACConfig+0x110>
 8005256:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005258:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8005260:	2a01      	cmp	r2, #1
 8005262:	d101      	bne.n	8005268 <ETH_SetMACConfig+0x120>
 8005264:	2204      	movs	r2, #4
 8005266:	e000      	b.n	800526a <ETH_SetMACConfig+0x122>
 8005268:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800526a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8005272:	2a01      	cmp	r2, #1
 8005274:	d101      	bne.n	800527a <ETH_SetMACConfig+0x132>
 8005276:	2202      	movs	r2, #2
 8005278:	e000      	b.n	800527c <ETH_SetMACConfig+0x134>
 800527a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800527c:	4313      	orrs	r3, r2
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	4313      	orrs	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005294:	2001      	movs	r0, #1
 8005296:	f7fd fad1 	bl	800283c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	619a      	str	r2, [r3, #24]
}
 80052a2:	bf00      	nop
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	fd20810f 	.word	0xfd20810f

080052b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	4b3d      	ldr	r3, [pc, #244]	@ (80053c0 <ETH_SetDMAConfig+0x110>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	7b1b      	ldrb	r3, [r3, #12]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d102      	bne.n	80052dc <ETH_SetDMAConfig+0x2c>
 80052d6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80052da:	e000      	b.n	80052de <ETH_SetDMAConfig+0x2e>
 80052dc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	7b5b      	ldrb	r3, [r3, #13]
 80052e2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80052e4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	7f52      	ldrb	r2, [r2, #29]
 80052ea:	2a00      	cmp	r2, #0
 80052ec:	d102      	bne.n	80052f4 <ETH_SetDMAConfig+0x44>
 80052ee:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80052f2:	e000      	b.n	80052f6 <ETH_SetDMAConfig+0x46>
 80052f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80052f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	7b9b      	ldrb	r3, [r3, #14]
 80052fc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80052fe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005304:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	7f1b      	ldrb	r3, [r3, #28]
 800530a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800530c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	7f9b      	ldrb	r3, [r3, #30]
 8005312:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005314:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800531a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005322:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005324:	4313      	orrs	r3, r2
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005334:	461a      	mov	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005346:	2001      	movs	r0, #1
 8005348:	f7fd fa78 	bl	800283c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005354:	461a      	mov	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	791b      	ldrb	r3, [r3, #4]
 800535e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005364:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800536a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005370:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005378:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800537a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005380:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005382:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005388:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6812      	ldr	r2, [r2, #0]
 800538e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005392:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005396:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80053a4:	2001      	movs	r0, #1
 80053a6:	f7fd fa49 	bl	800283c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053b2:	461a      	mov	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6013      	str	r3, [r2, #0]
}
 80053b8:	bf00      	nop
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	f8de3f23 	.word	0xf8de3f23

080053c4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b0a6      	sub	sp, #152	@ 0x98
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80053cc:	2301      	movs	r3, #1
 80053ce:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80053d2:	2301      	movs	r3, #1
 80053d4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80053d8:	2300      	movs	r3, #0
 80053da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80053dc:	2300      	movs	r3, #0
 80053de:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80053e2:	2301      	movs	r3, #1
 80053e4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80053e8:	2300      	movs	r3, #0
 80053ea:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80053ee:	2301      	movs	r3, #1
 80053f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80053f4:	2301      	movs	r3, #1
 80053f6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80053fa:	2300      	movs	r3, #0
 80053fc:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005400:	2300      	movs	r3, #0
 8005402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005406:	2300      	movs	r3, #0
 8005408:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800540a:	2300      	movs	r3, #0
 800540c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005410:	2300      	movs	r3, #0
 8005412:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005414:	2300      	movs	r3, #0
 8005416:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800541a:	2300      	movs	r3, #0
 800541c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005420:	2300      	movs	r3, #0
 8005422:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005426:	2300      	movs	r3, #0
 8005428:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800542c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005430:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005432:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005436:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005438:	2300      	movs	r3, #0
 800543a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800543e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005442:	4619      	mov	r1, r3
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7ff fe7f 	bl	8005148 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800544a:	2301      	movs	r3, #1
 800544c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800544e:	2301      	movs	r3, #1
 8005450:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005452:	2301      	movs	r3, #1
 8005454:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005458:	2301      	movs	r3, #1
 800545a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800545c:	2300      	movs	r3, #0
 800545e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005460:	2300      	movs	r3, #0
 8005462:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005466:	2300      	movs	r3, #0
 8005468:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800546c:	2300      	movs	r3, #0
 800546e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005470:	2301      	movs	r3, #1
 8005472:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005476:	2301      	movs	r3, #1
 8005478:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800547a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800547e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005480:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005484:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005486:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800548a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800548c:	2301      	movs	r3, #1
 800548e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005492:	2300      	movs	r3, #0
 8005494:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005496:	2300      	movs	r3, #0
 8005498:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800549a:	f107 0308 	add.w	r3, r7, #8
 800549e:	4619      	mov	r1, r3
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7ff ff05 	bl	80052b0 <ETH_SetDMAConfig>
}
 80054a6:	bf00      	nop
 80054a8:	3798      	adds	r7, #152	@ 0x98
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
	...

080054b0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3305      	adds	r3, #5
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	021b      	lsls	r3, r3, #8
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	3204      	adds	r2, #4
 80054c8:	7812      	ldrb	r2, [r2, #0]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	4b11      	ldr	r3, [pc, #68]	@ (8005518 <ETH_MACAddressConfig+0x68>)
 80054d2:	4413      	add	r3, r2
 80054d4:	461a      	mov	r2, r3
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3303      	adds	r3, #3
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	061a      	lsls	r2, r3, #24
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	3302      	adds	r3, #2
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	041b      	lsls	r3, r3, #16
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3301      	adds	r3, #1
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	021b      	lsls	r3, r3, #8
 80054f4:	4313      	orrs	r3, r2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	7812      	ldrb	r2, [r2, #0]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	4b06      	ldr	r3, [pc, #24]	@ (800551c <ETH_MACAddressConfig+0x6c>)
 8005502:	4413      	add	r3, r2
 8005504:	461a      	mov	r2, r3
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	6013      	str	r3, [r2, #0]
}
 800550a:	bf00      	nop
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40028040 	.word	0x40028040
 800551c:	40028044 	.word	0x40028044

08005520 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005528:	2300      	movs	r3, #0
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	e03e      	b.n	80055ac <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68d9      	ldr	r1, [r3, #12]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4613      	mov	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	440b      	add	r3, r1
 800553e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	2200      	movs	r2, #0
 800554a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2200      	movs	r2, #0
 8005550:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2200      	movs	r2, #0
 8005556:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	3206      	adds	r2, #6
 8005560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b02      	cmp	r3, #2
 8005574:	d80c      	bhi.n	8005590 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68d9      	ldr	r1, [r3, #12]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	4613      	mov	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	440b      	add	r3, r1
 8005588:	461a      	mov	r2, r3
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	60da      	str	r2, [r3, #12]
 800558e:	e004      	b.n	800559a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	461a      	mov	r2, r3
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	3301      	adds	r3, #1
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d9bd      	bls.n	800552e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055c4:	611a      	str	r2, [r3, #16]
}
 80055c6:	bf00      	nop
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b085      	sub	sp, #20
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80055da:	2300      	movs	r3, #0
 80055dc:	60fb      	str	r3, [r7, #12]
 80055de:	e048      	b.n	8005672 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6919      	ldr	r1, [r3, #16]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	4613      	mov	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	440b      	add	r3, r1
 80055f0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2200      	movs	r2, #0
 80055fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2200      	movs	r2, #0
 8005602:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2200      	movs	r2, #0
 8005608:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2200      	movs	r2, #0
 800560e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2200      	movs	r2, #0
 8005614:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800561c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	3212      	adds	r2, #18
 800563e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b02      	cmp	r3, #2
 8005646:	d80c      	bhi.n	8005662 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6919      	ldr	r1, [r3, #16]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	4613      	mov	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	440b      	add	r3, r1
 800565a:	461a      	mov	r2, r3
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	60da      	str	r2, [r3, #12]
 8005660:	e004      	b.n	800566c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	461a      	mov	r2, r3
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3301      	adds	r3, #1
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2b03      	cmp	r3, #3
 8005676:	d9b3      	bls.n	80055e0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	691a      	ldr	r2, [r3, #16]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056a2:	60da      	str	r2, [r3, #12]
}
 80056a4:	bf00      	nop
 80056a6:	3714      	adds	r7, #20
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b091      	sub	sp, #68	@ 0x44
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	3318      	adds	r3, #24
 80056c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80056c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80056ce:	2300      	movs	r3, #0
 80056d0:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80056d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056da:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80056e2:	2300      	movs	r3, #0
 80056e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80056e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056f2:	d007      	beq.n	8005704 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80056f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056f8:	3304      	adds	r3, #4
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005704:	2302      	movs	r3, #2
 8005706:	e111      	b.n	800592c <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8005708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800570a:	3301      	adds	r3, #1
 800570c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800570e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005716:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	4b86      	ldr	r3, [pc, #536]	@ (8005938 <ETH_Prepare_Tx_Descriptors+0x288>)
 800571e:	4013      	ands	r3, r2
 8005720:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005722:	6852      	ldr	r2, [r2, #4]
 8005724:	431a      	orrs	r2, r3
 8005726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005728:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d008      	beq.n	8005748 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8005736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	431a      	orrs	r2, r3
 8005744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005746:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0320 	and.w	r3, r3, #32
 8005750:	2b00      	cmp	r3, #0
 8005752:	d008      	beq.n	8005766 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8005754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	431a      	orrs	r2, r3
 8005762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005764:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0304 	and.w	r3, r3, #4
 800576e:	2b00      	cmp	r3, #0
 8005770:	d005      	beq.n	800577e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8005772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800577a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800577e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005788:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800578a:	e082      	b.n	8005892 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005796:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d006      	beq.n	80057ac <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800579e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80057a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	e005      	b.n	80057b8 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80057ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80057b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b6:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80057b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ba:	3301      	adds	r3, #1
 80057bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c0:	2b03      	cmp	r3, #3
 80057c2:	d902      	bls.n	80057ca <ETH_Prepare_Tx_Descriptors+0x11a>
 80057c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c6:	3b04      	subs	r3, #4
 80057c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80057d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057e0:	d007      	beq.n	80057f2 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80057e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057e6:	3304      	adds	r3, #4
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	4413      	add	r3, r2
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d029      	beq.n	8005846 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057fe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005800:	2300      	movs	r3, #0
 8005802:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005804:	e019      	b.n	800583a <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8005806:	f3bf 8f5f 	dmb	sy
}
 800580a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800580c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005816:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800581a:	3301      	adds	r3, #1
 800581c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800581e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005820:	2b03      	cmp	r3, #3
 8005822:	d902      	bls.n	800582a <ETH_Prepare_Tx_Descriptors+0x17a>
 8005824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005826:	3b04      	subs	r3, #4
 8005828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800582e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005832:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8005834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005836:	3301      	adds	r3, #1
 8005838:	63bb      	str	r3, [r7, #56]	@ 0x38
 800583a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800583c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800583e:	429a      	cmp	r2, r3
 8005840:	d3e1      	bcc.n	8005806 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8005842:	2302      	movs	r3, #2
 8005844:	e072      	b.n	800592c <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800584e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005850:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8005852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005854:	3301      	adds	r3, #1
 8005856:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800585e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005866:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	4b32      	ldr	r3, [pc, #200]	@ (8005938 <ETH_Prepare_Tx_Descriptors+0x288>)
 800586e:	4013      	ands	r3, r2
 8005870:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005872:	6852      	ldr	r2, [r2, #4]
 8005874:	431a      	orrs	r2, r3
 8005876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005878:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800587a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800587c:	3301      	adds	r3, #1
 800587e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8005880:	f3bf 8f5f 	dmb	sy
}
 8005884:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800588e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005890:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	f47f af78 	bne.w	800578c <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d006      	beq.n	80058b0 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80058a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80058aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	e005      	b.n	80058bc <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80058b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80058b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ba:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80058bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80058c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c6:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80058c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ca:	6a3a      	ldr	r2, [r7, #32]
 80058cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d0:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80058d2:	f3bf 8f5f 	dmb	sy
}
 80058d6:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80058d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80058e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e2:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80058e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058ec:	3304      	adds	r3, #4
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	440b      	add	r3, r1
 80058f2:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80058f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80058f8:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058fa:	f3ef 8310 	mrs	r3, PRIMASK
 80058fe:	613b      	str	r3, [r7, #16]
  return(result);
 8005900:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005902:	61fb      	str	r3, [r7, #28]
 8005904:	2301      	movs	r3, #1
 8005906:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	f383 8810 	msr	PRIMASK, r3
}
 800590e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005912:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005916:	4413      	add	r3, r2
 8005918:	1c5a      	adds	r2, r3, #1
 800591a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591c:	629a      	str	r2, [r3, #40]	@ 0x28
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	f383 8810 	msr	PRIMASK, r3
}
 8005928:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3744      	adds	r7, #68	@ 0x44
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	ffffe000 	.word	0xffffe000

0800593c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800593c:	b480      	push	{r7}
 800593e:	b089      	sub	sp, #36	@ 0x24
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005946:	2300      	movs	r3, #0
 8005948:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800594a:	2300      	movs	r3, #0
 800594c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800594e:	2300      	movs	r3, #0
 8005950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005952:	2300      	movs	r3, #0
 8005954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005956:	2300      	movs	r3, #0
 8005958:	61fb      	str	r3, [r7, #28]
 800595a:	e175      	b.n	8005c48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800595c:	2201      	movs	r2, #1
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	fa02 f303 	lsl.w	r3, r2, r3
 8005964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	4013      	ands	r3, r2
 800596e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	429a      	cmp	r2, r3
 8005976:	f040 8164 	bne.w	8005c42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	2b01      	cmp	r3, #1
 8005984:	d005      	beq.n	8005992 <HAL_GPIO_Init+0x56>
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f003 0303 	and.w	r3, r3, #3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d130      	bne.n	80059f4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	2203      	movs	r2, #3
 800599e:	fa02 f303 	lsl.w	r3, r2, r3
 80059a2:	43db      	mvns	r3, r3
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	4013      	ands	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	fa02 f303 	lsl.w	r3, r2, r3
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059c8:	2201      	movs	r2, #1
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	43db      	mvns	r3, r3
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	4013      	ands	r3, r2
 80059d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	091b      	lsrs	r3, r3, #4
 80059de:	f003 0201 	and.w	r2, r3, #1
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	fa02 f303 	lsl.w	r3, r2, r3
 80059e8:	69ba      	ldr	r2, [r7, #24]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f003 0303 	and.w	r3, r3, #3
 80059fc:	2b03      	cmp	r3, #3
 80059fe:	d017      	beq.n	8005a30 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	005b      	lsls	r3, r3, #1
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a10:	43db      	mvns	r3, r3
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	4013      	ands	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	69ba      	ldr	r2, [r7, #24]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69ba      	ldr	r2, [r7, #24]
 8005a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f003 0303 	and.w	r3, r3, #3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d123      	bne.n	8005a84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	08da      	lsrs	r2, r3, #3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3208      	adds	r2, #8
 8005a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	220f      	movs	r2, #15
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	08da      	lsrs	r2, r3, #3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3208      	adds	r2, #8
 8005a7e:	69b9      	ldr	r1, [r7, #24]
 8005a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	2203      	movs	r2, #3
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	43db      	mvns	r3, r3
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f003 0203 	and.w	r2, r3, #3
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 80be 	beq.w	8005c42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ac6:	4b66      	ldr	r3, [pc, #408]	@ (8005c60 <HAL_GPIO_Init+0x324>)
 8005ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aca:	4a65      	ldr	r2, [pc, #404]	@ (8005c60 <HAL_GPIO_Init+0x324>)
 8005acc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8005ad2:	4b63      	ldr	r3, [pc, #396]	@ (8005c60 <HAL_GPIO_Init+0x324>)
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ad6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005ade:	4a61      	ldr	r2, [pc, #388]	@ (8005c64 <HAL_GPIO_Init+0x328>)
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	089b      	lsrs	r3, r3, #2
 8005ae4:	3302      	adds	r3, #2
 8005ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	220f      	movs	r2, #15
 8005af6:	fa02 f303 	lsl.w	r3, r2, r3
 8005afa:	43db      	mvns	r3, r3
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	4013      	ands	r3, r2
 8005b00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a58      	ldr	r2, [pc, #352]	@ (8005c68 <HAL_GPIO_Init+0x32c>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d037      	beq.n	8005b7a <HAL_GPIO_Init+0x23e>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a57      	ldr	r2, [pc, #348]	@ (8005c6c <HAL_GPIO_Init+0x330>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d031      	beq.n	8005b76 <HAL_GPIO_Init+0x23a>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a56      	ldr	r2, [pc, #344]	@ (8005c70 <HAL_GPIO_Init+0x334>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d02b      	beq.n	8005b72 <HAL_GPIO_Init+0x236>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a55      	ldr	r2, [pc, #340]	@ (8005c74 <HAL_GPIO_Init+0x338>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d025      	beq.n	8005b6e <HAL_GPIO_Init+0x232>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a54      	ldr	r2, [pc, #336]	@ (8005c78 <HAL_GPIO_Init+0x33c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d01f      	beq.n	8005b6a <HAL_GPIO_Init+0x22e>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a53      	ldr	r2, [pc, #332]	@ (8005c7c <HAL_GPIO_Init+0x340>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d019      	beq.n	8005b66 <HAL_GPIO_Init+0x22a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a52      	ldr	r2, [pc, #328]	@ (8005c80 <HAL_GPIO_Init+0x344>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d013      	beq.n	8005b62 <HAL_GPIO_Init+0x226>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a51      	ldr	r2, [pc, #324]	@ (8005c84 <HAL_GPIO_Init+0x348>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d00d      	beq.n	8005b5e <HAL_GPIO_Init+0x222>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a50      	ldr	r2, [pc, #320]	@ (8005c88 <HAL_GPIO_Init+0x34c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d007      	beq.n	8005b5a <HAL_GPIO_Init+0x21e>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a4f      	ldr	r2, [pc, #316]	@ (8005c8c <HAL_GPIO_Init+0x350>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d101      	bne.n	8005b56 <HAL_GPIO_Init+0x21a>
 8005b52:	2309      	movs	r3, #9
 8005b54:	e012      	b.n	8005b7c <HAL_GPIO_Init+0x240>
 8005b56:	230a      	movs	r3, #10
 8005b58:	e010      	b.n	8005b7c <HAL_GPIO_Init+0x240>
 8005b5a:	2308      	movs	r3, #8
 8005b5c:	e00e      	b.n	8005b7c <HAL_GPIO_Init+0x240>
 8005b5e:	2307      	movs	r3, #7
 8005b60:	e00c      	b.n	8005b7c <HAL_GPIO_Init+0x240>
 8005b62:	2306      	movs	r3, #6
 8005b64:	e00a      	b.n	8005b7c <HAL_GPIO_Init+0x240>
 8005b66:	2305      	movs	r3, #5
 8005b68:	e008      	b.n	8005b7c <HAL_GPIO_Init+0x240>
 8005b6a:	2304      	movs	r3, #4
 8005b6c:	e006      	b.n	8005b7c <HAL_GPIO_Init+0x240>
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e004      	b.n	8005b7c <HAL_GPIO_Init+0x240>
 8005b72:	2302      	movs	r3, #2
 8005b74:	e002      	b.n	8005b7c <HAL_GPIO_Init+0x240>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <HAL_GPIO_Init+0x240>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	69fa      	ldr	r2, [r7, #28]
 8005b7e:	f002 0203 	and.w	r2, r2, #3
 8005b82:	0092      	lsls	r2, r2, #2
 8005b84:	4093      	lsls	r3, r2
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005b8c:	4935      	ldr	r1, [pc, #212]	@ (8005c64 <HAL_GPIO_Init+0x328>)
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	089b      	lsrs	r3, r3, #2
 8005b92:	3302      	adds	r3, #2
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b9a:	4b3d      	ldr	r3, [pc, #244]	@ (8005c90 <HAL_GPIO_Init+0x354>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bbe:	4a34      	ldr	r2, [pc, #208]	@ (8005c90 <HAL_GPIO_Init+0x354>)
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005bc4:	4b32      	ldr	r3, [pc, #200]	@ (8005c90 <HAL_GPIO_Init+0x354>)
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	43db      	mvns	r3, r3
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005be8:	4a29      	ldr	r2, [pc, #164]	@ (8005c90 <HAL_GPIO_Init+0x354>)
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005bee:	4b28      	ldr	r3, [pc, #160]	@ (8005c90 <HAL_GPIO_Init+0x354>)
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	43db      	mvns	r3, r3
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c0a:	69ba      	ldr	r2, [r7, #24]
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c12:	4a1f      	ldr	r2, [pc, #124]	@ (8005c90 <HAL_GPIO_Init+0x354>)
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c18:	4b1d      	ldr	r3, [pc, #116]	@ (8005c90 <HAL_GPIO_Init+0x354>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	43db      	mvns	r3, r3
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	4013      	ands	r3, r2
 8005c26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c3c:	4a14      	ldr	r2, [pc, #80]	@ (8005c90 <HAL_GPIO_Init+0x354>)
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	3301      	adds	r3, #1
 8005c46:	61fb      	str	r3, [r7, #28]
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	2b0f      	cmp	r3, #15
 8005c4c:	f67f ae86 	bls.w	800595c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005c50:	bf00      	nop
 8005c52:	bf00      	nop
 8005c54:	3724      	adds	r7, #36	@ 0x24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40023800 	.word	0x40023800
 8005c64:	40013800 	.word	0x40013800
 8005c68:	40020000 	.word	0x40020000
 8005c6c:	40020400 	.word	0x40020400
 8005c70:	40020800 	.word	0x40020800
 8005c74:	40020c00 	.word	0x40020c00
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	40021400 	.word	0x40021400
 8005c80:	40021800 	.word	0x40021800
 8005c84:	40021c00 	.word	0x40021c00
 8005c88:	40022000 	.word	0x40022000
 8005c8c:	40022400 	.word	0x40022400
 8005c90:	40013c00 	.word	0x40013c00

08005c94 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005caa:	2300      	movs	r3, #0
 8005cac:	617b      	str	r3, [r7, #20]
 8005cae:	e0d9      	b.n	8005e64 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	f040 80c9 	bne.w	8005e5e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005ccc:	4a6b      	ldr	r2, [pc, #428]	@ (8005e7c <HAL_GPIO_DeInit+0x1e8>)
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	089b      	lsrs	r3, r3, #2
 8005cd2:	3302      	adds	r3, #2
 8005cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cd8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f003 0303 	and.w	r3, r3, #3
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	220f      	movs	r2, #15
 8005ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	4013      	ands	r3, r2
 8005cec:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a63      	ldr	r2, [pc, #396]	@ (8005e80 <HAL_GPIO_DeInit+0x1ec>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d037      	beq.n	8005d66 <HAL_GPIO_DeInit+0xd2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a62      	ldr	r2, [pc, #392]	@ (8005e84 <HAL_GPIO_DeInit+0x1f0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d031      	beq.n	8005d62 <HAL_GPIO_DeInit+0xce>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a61      	ldr	r2, [pc, #388]	@ (8005e88 <HAL_GPIO_DeInit+0x1f4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d02b      	beq.n	8005d5e <HAL_GPIO_DeInit+0xca>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a60      	ldr	r2, [pc, #384]	@ (8005e8c <HAL_GPIO_DeInit+0x1f8>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d025      	beq.n	8005d5a <HAL_GPIO_DeInit+0xc6>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a5f      	ldr	r2, [pc, #380]	@ (8005e90 <HAL_GPIO_DeInit+0x1fc>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d01f      	beq.n	8005d56 <HAL_GPIO_DeInit+0xc2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a5e      	ldr	r2, [pc, #376]	@ (8005e94 <HAL_GPIO_DeInit+0x200>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d019      	beq.n	8005d52 <HAL_GPIO_DeInit+0xbe>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a5d      	ldr	r2, [pc, #372]	@ (8005e98 <HAL_GPIO_DeInit+0x204>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d013      	beq.n	8005d4e <HAL_GPIO_DeInit+0xba>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a5c      	ldr	r2, [pc, #368]	@ (8005e9c <HAL_GPIO_DeInit+0x208>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00d      	beq.n	8005d4a <HAL_GPIO_DeInit+0xb6>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a5b      	ldr	r2, [pc, #364]	@ (8005ea0 <HAL_GPIO_DeInit+0x20c>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d007      	beq.n	8005d46 <HAL_GPIO_DeInit+0xb2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a5a      	ldr	r2, [pc, #360]	@ (8005ea4 <HAL_GPIO_DeInit+0x210>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d101      	bne.n	8005d42 <HAL_GPIO_DeInit+0xae>
 8005d3e:	2309      	movs	r3, #9
 8005d40:	e012      	b.n	8005d68 <HAL_GPIO_DeInit+0xd4>
 8005d42:	230a      	movs	r3, #10
 8005d44:	e010      	b.n	8005d68 <HAL_GPIO_DeInit+0xd4>
 8005d46:	2308      	movs	r3, #8
 8005d48:	e00e      	b.n	8005d68 <HAL_GPIO_DeInit+0xd4>
 8005d4a:	2307      	movs	r3, #7
 8005d4c:	e00c      	b.n	8005d68 <HAL_GPIO_DeInit+0xd4>
 8005d4e:	2306      	movs	r3, #6
 8005d50:	e00a      	b.n	8005d68 <HAL_GPIO_DeInit+0xd4>
 8005d52:	2305      	movs	r3, #5
 8005d54:	e008      	b.n	8005d68 <HAL_GPIO_DeInit+0xd4>
 8005d56:	2304      	movs	r3, #4
 8005d58:	e006      	b.n	8005d68 <HAL_GPIO_DeInit+0xd4>
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e004      	b.n	8005d68 <HAL_GPIO_DeInit+0xd4>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	e002      	b.n	8005d68 <HAL_GPIO_DeInit+0xd4>
 8005d62:	2301      	movs	r3, #1
 8005d64:	e000      	b.n	8005d68 <HAL_GPIO_DeInit+0xd4>
 8005d66:	2300      	movs	r3, #0
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	f002 0203 	and.w	r2, r2, #3
 8005d6e:	0092      	lsls	r2, r2, #2
 8005d70:	4093      	lsls	r3, r2
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d132      	bne.n	8005dde <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005d78:	4b4b      	ldr	r3, [pc, #300]	@ (8005ea8 <HAL_GPIO_DeInit+0x214>)
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	43db      	mvns	r3, r3
 8005d80:	4949      	ldr	r1, [pc, #292]	@ (8005ea8 <HAL_GPIO_DeInit+0x214>)
 8005d82:	4013      	ands	r3, r2
 8005d84:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005d86:	4b48      	ldr	r3, [pc, #288]	@ (8005ea8 <HAL_GPIO_DeInit+0x214>)
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	43db      	mvns	r3, r3
 8005d8e:	4946      	ldr	r1, [pc, #280]	@ (8005ea8 <HAL_GPIO_DeInit+0x214>)
 8005d90:	4013      	ands	r3, r2
 8005d92:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005d94:	4b44      	ldr	r3, [pc, #272]	@ (8005ea8 <HAL_GPIO_DeInit+0x214>)
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	43db      	mvns	r3, r3
 8005d9c:	4942      	ldr	r1, [pc, #264]	@ (8005ea8 <HAL_GPIO_DeInit+0x214>)
 8005d9e:	4013      	ands	r3, r2
 8005da0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005da2:	4b41      	ldr	r3, [pc, #260]	@ (8005ea8 <HAL_GPIO_DeInit+0x214>)
 8005da4:	689a      	ldr	r2, [r3, #8]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	43db      	mvns	r3, r3
 8005daa:	493f      	ldr	r1, [pc, #252]	@ (8005ea8 <HAL_GPIO_DeInit+0x214>)
 8005dac:	4013      	ands	r3, r2
 8005dae:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f003 0303 	and.w	r3, r3, #3
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	220f      	movs	r2, #15
 8005dba:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbe:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005dc0:	4a2e      	ldr	r2, [pc, #184]	@ (8005e7c <HAL_GPIO_DeInit+0x1e8>)
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	089b      	lsrs	r3, r3, #2
 8005dc6:	3302      	adds	r3, #2
 8005dc8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	43da      	mvns	r2, r3
 8005dd0:	482a      	ldr	r0, [pc, #168]	@ (8005e7c <HAL_GPIO_DeInit+0x1e8>)
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	089b      	lsrs	r3, r3, #2
 8005dd6:	400a      	ands	r2, r1
 8005dd8:	3302      	adds	r3, #2
 8005dda:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	2103      	movs	r1, #3
 8005de8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dec:	43db      	mvns	r3, r3
 8005dee:	401a      	ands	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	08da      	lsrs	r2, r3, #3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3208      	adds	r2, #8
 8005dfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f003 0307 	and.w	r3, r3, #7
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	220f      	movs	r2, #15
 8005e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0e:	43db      	mvns	r3, r3
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	08d2      	lsrs	r2, r2, #3
 8005e14:	4019      	ands	r1, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	3208      	adds	r2, #8
 8005e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68da      	ldr	r2, [r3, #12]
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	005b      	lsls	r3, r3, #1
 8005e26:	2103      	movs	r1, #3
 8005e28:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2c:	43db      	mvns	r3, r3
 8005e2e:	401a      	ands	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	2101      	movs	r1, #1
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e40:	43db      	mvns	r3, r3
 8005e42:	401a      	ands	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	2103      	movs	r1, #3
 8005e52:	fa01 f303 	lsl.w	r3, r1, r3
 8005e56:	43db      	mvns	r3, r3
 8005e58:	401a      	ands	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	3301      	adds	r3, #1
 8005e62:	617b      	str	r3, [r7, #20]
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2b0f      	cmp	r3, #15
 8005e68:	f67f af22 	bls.w	8005cb0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005e6c:	bf00      	nop
 8005e6e:	bf00      	nop
 8005e70:	371c      	adds	r7, #28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	40013800 	.word	0x40013800
 8005e80:	40020000 	.word	0x40020000
 8005e84:	40020400 	.word	0x40020400
 8005e88:	40020800 	.word	0x40020800
 8005e8c:	40020c00 	.word	0x40020c00
 8005e90:	40021000 	.word	0x40021000
 8005e94:	40021400 	.word	0x40021400
 8005e98:	40021800 	.word	0x40021800
 8005e9c:	40021c00 	.word	0x40021c00
 8005ea0:	40022000 	.word	0x40022000
 8005ea4:	40022400 	.word	0x40022400
 8005ea8:	40013c00 	.word	0x40013c00

08005eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	807b      	strh	r3, [r7, #2]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ebc:	787b      	ldrb	r3, [r7, #1]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ec2:	887a      	ldrh	r2, [r7, #2]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005ec8:	e003      	b.n	8005ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005eca:	887b      	ldrh	r3, [r7, #2]
 8005ecc:	041a      	lsls	r2, r3, #16
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	619a      	str	r2, [r3, #24]
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b085      	sub	sp, #20
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ef0:	887a      	ldrh	r2, [r7, #2]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	041a      	lsls	r2, r3, #16
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	43d9      	mvns	r1, r3
 8005efc:	887b      	ldrh	r3, [r7, #2]
 8005efe:	400b      	ands	r3, r1
 8005f00:	431a      	orrs	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	619a      	str	r2, [r3, #24]
}
 8005f06:	bf00      	nop
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
	...

08005f14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005f1e:	4b08      	ldr	r3, [pc, #32]	@ (8005f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f20:	695a      	ldr	r2, [r3, #20]
 8005f22:	88fb      	ldrh	r3, [r7, #6]
 8005f24:	4013      	ands	r3, r2
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d006      	beq.n	8005f38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f2a:	4a05      	ldr	r2, [pc, #20]	@ (8005f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f2c:	88fb      	ldrh	r3, [r7, #6]
 8005f2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f30:	88fb      	ldrh	r3, [r7, #6]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 f806 	bl	8005f44 <HAL_GPIO_EXTI_Callback>
  }
}
 8005f38:	bf00      	nop
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	40013c00 	.word	0x40013c00

08005f44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005f4e:	bf00      	nop
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
	...

08005f5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e08b      	b.n	8006086 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d106      	bne.n	8005f88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7fb fb34 	bl	80015f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2224      	movs	r2, #36	@ 0x24
 8005f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 0201 	bic.w	r2, r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005fac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005fbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d107      	bne.n	8005fd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fd2:	609a      	str	r2, [r3, #8]
 8005fd4:	e006      	b.n	8005fe4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689a      	ldr	r2, [r3, #8]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005fe2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d108      	bne.n	8005ffe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ffa:	605a      	str	r2, [r3, #4]
 8005ffc:	e007      	b.n	800600e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800600c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6859      	ldr	r1, [r3, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	4b1d      	ldr	r3, [pc, #116]	@ (8006090 <HAL_I2C_Init+0x134>)
 800601a:	430b      	orrs	r3, r1
 800601c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68da      	ldr	r2, [r3, #12]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800602c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	691a      	ldr	r2, [r3, #16]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	69d9      	ldr	r1, [r3, #28]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a1a      	ldr	r2, [r3, #32]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f042 0201 	orr.w	r2, r2, #1
 8006066:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2220      	movs	r2, #32
 8006072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	02008000 	.word	0x02008000

08006094 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e021      	b.n	80060ea <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2224      	movs	r2, #36	@ 0x24
 80060aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0201 	bic.w	r2, r2, #1
 80060bc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7fb fbc2 	bl	8001848 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3708      	adds	r7, #8
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
	...

080060f4 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af02      	add	r7, sp, #8
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	607a      	str	r2, [r7, #4]
 80060fe:	461a      	mov	r2, r3
 8006100:	460b      	mov	r3, r1
 8006102:	817b      	strh	r3, [r7, #10]
 8006104:	4613      	mov	r3, r2
 8006106:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b20      	cmp	r3, #32
 8006112:	d153      	bne.n	80061bc <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800611e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006122:	d101      	bne.n	8006128 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8006124:	2302      	movs	r3, #2
 8006126:	e04a      	b.n	80061be <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800612e:	2b01      	cmp	r3, #1
 8006130:	d101      	bne.n	8006136 <HAL_I2C_Master_Receive_IT+0x42>
 8006132:	2302      	movs	r3, #2
 8006134:	e043      	b.n	80061be <HAL_I2C_Master_Receive_IT+0xca>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2222      	movs	r2, #34	@ 0x22
 8006142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2210      	movs	r2, #16
 800614a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	893a      	ldrh	r2, [r7, #8]
 800615e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4a19      	ldr	r2, [pc, #100]	@ (80061c8 <HAL_I2C_Master_Receive_IT+0xd4>)
 8006164:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4a18      	ldr	r2, [pc, #96]	@ (80061cc <HAL_I2C_Master_Receive_IT+0xd8>)
 800616a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006170:	b29b      	uxth	r3, r3
 8006172:	2bff      	cmp	r3, #255	@ 0xff
 8006174:	d906      	bls.n	8006184 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = 1U;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2201      	movs	r2, #1
 800617a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800617c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006180:	617b      	str	r3, [r7, #20]
 8006182:	e007      	b.n	8006194 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006188:	b29a      	uxth	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800618e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006192:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006198:	b2da      	uxtb	r2, r3
 800619a:	8979      	ldrh	r1, [r7, #10]
 800619c:	4b0c      	ldr	r3, [pc, #48]	@ (80061d0 <HAL_I2C_Master_Receive_IT+0xdc>)
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f001 fe40 	bl	8007e28 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80061b0:	2102      	movs	r1, #2
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f001 fe6a 	bl	8007e8c <I2C_Enable_IRQ>

    return HAL_OK;
 80061b8:	2300      	movs	r3, #0
 80061ba:	e000      	b.n	80061be <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80061bc:	2302      	movs	r3, #2
  }
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3718      	adds	r7, #24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	ffff0000 	.word	0xffff0000
 80061cc:	080067e3 	.word	0x080067e3
 80061d0:	80002400 	.word	0x80002400

080061d4 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	4613      	mov	r3, r2
 80061e0:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b20      	cmp	r3, #32
 80061ec:	d156      	bne.n	800629c <HAL_I2C_Slave_Transmit_IT+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d101      	bne.n	80061fc <HAL_I2C_Slave_Transmit_IT+0x28>
 80061f8:	2302      	movs	r3, #2
 80061fa:	e050      	b.n	800629e <HAL_I2C_Slave_Transmit_IT+0xca>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2221      	movs	r2, #33	@ 0x21
 8006208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2220      	movs	r2, #32
 8006210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006228:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	88fa      	ldrh	r2, [r7, #6]
 8006234:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4a19      	ldr	r2, [pc, #100]	@ (80062a8 <HAL_I2C_Slave_Transmit_IT+0xd4>)
 8006244:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4a18      	ldr	r2, [pc, #96]	@ (80062ac <HAL_I2C_Slave_Transmit_IT+0xd8>)
 800624a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006254:	d117      	bne.n	8006286 <HAL_I2C_Slave_Transmit_IT+0xb2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625a:	781a      	ldrb	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006270:	b29b      	uxth	r3, r3
 8006272:	3b01      	subs	r3, #1
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800627e:	3b01      	subs	r3, #1
 8006280:	b29a      	uxth	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 800628e:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f001 fdfa 	bl	8007e8c <I2C_Enable_IRQ>

    return HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	e000      	b.n	800629e <HAL_I2C_Slave_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 800629c:	2302      	movs	r3, #2
  }
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	ffff0000 	.word	0xffff0000
 80062ac:	08006a67 	.word	0x08006a67

080062b0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b08a      	sub	sp, #40	@ 0x28
 80062b4:	af02      	add	r7, sp, #8
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	607a      	str	r2, [r7, #4]
 80062ba:	461a      	mov	r2, r3
 80062bc:	460b      	mov	r3, r1
 80062be:	817b      	strh	r3, [r7, #10]
 80062c0:	4613      	mov	r3, r2
 80062c2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b20      	cmp	r3, #32
 80062d2:	f040 80ef 	bne.w	80064b4 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062e4:	d101      	bne.n	80062ea <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 80062e6:	2302      	movs	r3, #2
 80062e8:	e0e5      	b.n	80064b6 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <HAL_I2C_Master_Transmit_DMA+0x48>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e0de      	b.n	80064b6 <HAL_I2C_Master_Transmit_DMA+0x206>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2221      	movs	r2, #33	@ 0x21
 8006304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2210      	movs	r2, #16
 800630c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	893a      	ldrh	r2, [r7, #8]
 8006320:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	4a66      	ldr	r2, [pc, #408]	@ (80064c0 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8006326:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4a66      	ldr	r2, [pc, #408]	@ (80064c4 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800632c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006332:	b29b      	uxth	r3, r3
 8006334:	2bff      	cmp	r3, #255	@ 0xff
 8006336:	d906      	bls.n	8006346 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	22ff      	movs	r2, #255	@ 0xff
 800633c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800633e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006342:	61fb      	str	r3, [r7, #28]
 8006344:	e007      	b.n	8006356 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800634a:	b29a      	uxth	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006350:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006354:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800635a:	2b00      	cmp	r3, #0
 800635c:	d01a      	beq.n	8006394 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006362:	781a      	ldrb	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006378:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800637e:	b29b      	uxth	r3, r3
 8006380:	3b01      	subs	r3, #1
 8006382:	b29a      	uxth	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800638c:	3b01      	subs	r3, #1
 800638e:	b29a      	uxth	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006398:	2b00      	cmp	r3, #0
 800639a:	d074      	beq.n	8006486 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d022      	beq.n	80063ea <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a8:	4a47      	ldr	r2, [pc, #284]	@ (80064c8 <HAL_I2C_Master_Transmit_DMA+0x218>)
 80063aa:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b0:	4a46      	ldr	r2, [pc, #280]	@ (80064cc <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80063b2:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b8:	2200      	movs	r2, #0
 80063ba:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c0:	2200      	movs	r2, #0
 80063c2:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063cc:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80063d4:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80063da:	f7fd fcc3 	bl	8003d64 <HAL_DMA_Start_IT>
 80063de:	4603      	mov	r3, r0
 80063e0:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80063e2:	7dfb      	ldrb	r3, [r7, #23]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d13a      	bne.n	800645e <HAL_I2C_Master_Transmit_DMA+0x1ae>
 80063e8:	e013      	b.n	8006412 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2220      	movs	r2, #32
 80063ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063fe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e051      	b.n	80064b6 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006416:	b2db      	uxtb	r3, r3
 8006418:	3301      	adds	r3, #1
 800641a:	b2da      	uxtb	r2, r3
 800641c:	8979      	ldrh	r1, [r7, #10]
 800641e:	4b2c      	ldr	r3, [pc, #176]	@ (80064d0 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f001 fcff 	bl	8007e28 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800642e:	b29a      	uxth	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	b29a      	uxth	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006444:	2110      	movs	r1, #16
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f001 fd20 	bl	8007e8c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	e028      	b.n	80064b0 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2220      	movs	r2, #32
 8006462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006472:	f043 0210 	orr.w	r2, r3, #16
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e017      	b.n	80064b6 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	4a12      	ldr	r2, [pc, #72]	@ (80064d4 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800648a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	b2da      	uxtb	r2, r3
 8006490:	8979      	ldrh	r1, [r7, #10]
 8006492:	4b0f      	ldr	r3, [pc, #60]	@ (80064d0 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f001 fcc4 	bl	8007e28 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80064a8:	2101      	movs	r1, #1
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f001 fcee 	bl	8007e8c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80064b0:	2300      	movs	r3, #0
 80064b2:	e000      	b.n	80064b6 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80064b4:	2302      	movs	r3, #2
  }
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3720      	adds	r7, #32
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	ffff0000 	.word	0xffff0000
 80064c4:	08006c6f 	.word	0x08006c6f
 80064c8:	08007c9b 	.word	0x08007c9b
 80064cc:	08007d77 	.word	0x08007d77
 80064d0:	80002000 	.word	0x80002000
 80064d4:	080067e3 	.word	0x080067e3

080064d8 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	4613      	mov	r3, r2
 80064e4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b20      	cmp	r3, #32
 80064f0:	f040 809b 	bne.w	800662a <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d002      	beq.n	8006500 <HAL_I2C_Slave_Receive_DMA+0x28>
 80064fa:	88fb      	ldrh	r3, [r7, #6]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d105      	bne.n	800650c <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006506:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e08f      	b.n	800662c <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006512:	2b01      	cmp	r3, #1
 8006514:	d101      	bne.n	800651a <HAL_I2C_Slave_Receive_DMA+0x42>
 8006516:	2302      	movs	r3, #2
 8006518:	e088      	b.n	800662c <HAL_I2C_Slave_Receive_DMA+0x154>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2222      	movs	r2, #34	@ 0x22
 8006526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2220      	movs	r2, #32
 800652e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	88fa      	ldrh	r2, [r7, #6]
 8006542:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4a38      	ldr	r2, [pc, #224]	@ (8006634 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8006552:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4a38      	ldr	r2, [pc, #224]	@ (8006638 <HAL_I2C_Slave_Receive_DMA+0x160>)
 8006558:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800655e:	2b00      	cmp	r3, #0
 8006560:	d020      	beq.n	80065a4 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006566:	4a35      	ldr	r2, [pc, #212]	@ (800663c <HAL_I2C_Slave_Receive_DMA+0x164>)
 8006568:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800656e:	4a34      	ldr	r2, [pc, #208]	@ (8006640 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8006570:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006576:	2200      	movs	r2, #0
 8006578:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800657e:	2200      	movs	r2, #0
 8006580:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3324      	adds	r3, #36	@ 0x24
 800658c:	4619      	mov	r1, r3
 800658e:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8006594:	f7fd fbe6 	bl	8003d64 <HAL_DMA_Start_IT>
 8006598:	4603      	mov	r3, r0
 800659a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800659c:	7dfb      	ldrb	r3, [r7, #23]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d12f      	bne.n	8006602 <HAL_I2C_Slave_Receive_DMA+0x12a>
 80065a2:	e013      	b.n	80065cc <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2228      	movs	r2, #40	@ 0x28
 80065a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e02f      	b.n	800662c <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065da:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80065e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f001 fc4f 	bl	8007e8c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065fc:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	e014      	b.n	800662c <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2228      	movs	r2, #40	@ 0x28
 8006606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006616:	f043 0210 	orr.w	r2, r3, #16
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e000      	b.n	800662c <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 800662a:	2302      	movs	r3, #2
  }
}
 800662c:	4618      	mov	r0, r3
 800662e:	3718      	adds	r7, #24
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	ffff0000 	.word	0xffff0000
 8006638:	08007111 	.word	0x08007111
 800663c:	08007d31 	.word	0x08007d31
 8006640:	08007d77 	.word	0x08007d77

08006644 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006660:	2b00      	cmp	r3, #0
 8006662:	d005      	beq.n	8006670 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	68f9      	ldr	r1, [r7, #12]
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	4798      	blx	r3
  }
}
 8006670:	bf00      	nop
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	0a1b      	lsrs	r3, r3, #8
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b00      	cmp	r3, #0
 800669a:	d010      	beq.n	80066be <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	09db      	lsrs	r3, r3, #7
 80066a0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00a      	beq.n	80066be <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ac:	f043 0201 	orr.w	r2, r3, #1
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80066bc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	0a9b      	lsrs	r3, r3, #10
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d010      	beq.n	80066ec <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	09db      	lsrs	r3, r3, #7
 80066ce:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00a      	beq.n	80066ec <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066da:	f043 0208 	orr.w	r2, r3, #8
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80066ea:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	0a5b      	lsrs	r3, r3, #9
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d010      	beq.n	800671a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	09db      	lsrs	r3, r3, #7
 80066fc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00a      	beq.n	800671a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006708:	f043 0202 	orr.w	r2, r3, #2
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006718:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800671e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f003 030b 	and.w	r3, r3, #11
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800672a:	68f9      	ldr	r1, [r7, #12]
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 f979 	bl	8007a24 <I2C_ITError>
  }
}
 8006732:	bf00      	nop
 8006734:	3718      	adds	r7, #24
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006756:	bf00      	nop
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	460b      	mov	r3, r1
 800676c:	70fb      	strb	r3, [r7, #3]
 800676e:	4613      	mov	r3, r2
 8006770:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006772:	bf00      	nop
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800679a:	bf00      	nop
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80067ae:	bf00      	nop
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b083      	sub	sp, #12
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80067c2:	bf00      	nop
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067ce:	b480      	push	{r7}
 80067d0:	b083      	sub	sp, #12
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80067d6:	bf00      	nop
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b088      	sub	sp, #32
 80067e6:	af02      	add	r7, sp, #8
 80067e8:	60f8      	str	r0, [r7, #12]
 80067ea:	60b9      	str	r1, [r7, #8]
 80067ec:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d101      	bne.n	8006800 <I2C_Master_ISR_IT+0x1e>
 80067fc:	2302      	movs	r3, #2
 80067fe:	e12e      	b.n	8006a5e <I2C_Master_ISR_IT+0x27c>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	091b      	lsrs	r3, r3, #4
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b00      	cmp	r3, #0
 8006812:	d013      	beq.n	800683c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	091b      	lsrs	r3, r3, #4
 8006818:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00d      	beq.n	800683c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2210      	movs	r2, #16
 8006826:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800682c:	f043 0204 	orr.w	r2, r3, #4
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f001 fa0c 	bl	8007c52 <I2C_Flush_TXDR>
 800683a:	e0fb      	b.n	8006a34 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	089b      	lsrs	r3, r3, #2
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b00      	cmp	r3, #0
 8006846:	d023      	beq.n	8006890 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	089b      	lsrs	r3, r3, #2
 800684c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006850:	2b00      	cmp	r3, #0
 8006852:	d01d      	beq.n	8006890 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f023 0304 	bic.w	r3, r3, #4
 800685a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006866:	b2d2      	uxtb	r2, r2
 8006868:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686e:	1c5a      	adds	r2, r3, #1
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006878:	3b01      	subs	r3, #1
 800687a:	b29a      	uxth	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006884:	b29b      	uxth	r3, r3
 8006886:	3b01      	subs	r3, #1
 8006888:	b29a      	uxth	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800688e:	e0d1      	b.n	8006a34 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	099b      	lsrs	r3, r3, #6
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	2b00      	cmp	r3, #0
 800689a:	d12a      	bne.n	80068f2 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	085b      	lsrs	r3, r3, #1
 80068a0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d024      	beq.n	80068f2 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	085b      	lsrs	r3, r3, #1
 80068ac:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01e      	beq.n	80068f2 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 80ba 	beq.w	8006a34 <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c4:	781a      	ldrb	r2, [r3, #0]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d0:	1c5a      	adds	r2, r3, #1
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068da:	3b01      	subs	r3, #1
 80068dc:	b29a      	uxth	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	3b01      	subs	r3, #1
 80068ea:	b29a      	uxth	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80068f0:	e0a0      	b.n	8006a34 <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	09db      	lsrs	r3, r3, #7
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d06b      	beq.n	80069d6 <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	099b      	lsrs	r3, r3, #6
 8006902:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006906:	2b00      	cmp	r3, #0
 8006908:	d065      	beq.n	80069d6 <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800690e:	b29b      	uxth	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	d04e      	beq.n	80069b2 <I2C_Master_ISR_IT+0x1d0>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006918:	2b00      	cmp	r3, #0
 800691a:	d14a      	bne.n	80069b2 <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	b29b      	uxth	r3, r3
 8006924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006928:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800692e:	b29b      	uxth	r3, r3
 8006930:	2bff      	cmp	r3, #255	@ 0xff
 8006932:	d91c      	bls.n	800696e <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	0c1b      	lsrs	r3, r3, #16
 800693c:	b2db      	uxtb	r3, r3
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b01      	cmp	r3, #1
 8006946:	d103      	bne.n	8006950 <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2201      	movs	r2, #1
 800694c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800694e:	e002      	b.n	8006956 <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	22ff      	movs	r2, #255	@ 0xff
 8006954:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800695a:	b2da      	uxtb	r2, r3
 800695c:	8a79      	ldrh	r1, [r7, #18]
 800695e:	2300      	movs	r3, #0
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f001 fa5e 	bl	8007e28 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800696c:	e032      	b.n	80069d4 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006972:	b29a      	uxth	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006980:	d00b      	beq.n	800699a <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006986:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800698c:	8a79      	ldrh	r1, [r7, #18]
 800698e:	2000      	movs	r0, #0
 8006990:	9000      	str	r0, [sp, #0]
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f001 fa48 	bl	8007e28 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006998:	e01c      	b.n	80069d4 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	8a79      	ldrh	r1, [r7, #18]
 80069a2:	2300      	movs	r3, #0
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f001 fa3c 	bl	8007e28 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069b0:	e010      	b.n	80069d4 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069c0:	d003      	beq.n	80069ca <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 fd09 	bl	80073da <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069c8:	e034      	b.n	8006a34 <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80069ca:	2140      	movs	r1, #64	@ 0x40
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f001 f829 	bl	8007a24 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069d2:	e02f      	b.n	8006a34 <I2C_Master_ISR_IT+0x252>
 80069d4:	e02e      	b.n	8006a34 <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	099b      	lsrs	r3, r3, #6
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d028      	beq.n	8006a34 <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	099b      	lsrs	r3, r3, #6
 80069e6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d022      	beq.n	8006a34 <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d119      	bne.n	8006a2c <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a06:	d015      	beq.n	8006a34 <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a10:	d108      	bne.n	8006a24 <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a20:	605a      	str	r2, [r3, #4]
 8006a22:	e007      	b.n	8006a34 <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 fcd8 	bl	80073da <I2C_ITMasterSeqCplt>
 8006a2a:	e003      	b.n	8006a34 <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a2c:	2140      	movs	r1, #64	@ 0x40
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 fff8 	bl	8007a24 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	095b      	lsrs	r3, r3, #5
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d009      	beq.n	8006a54 <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	095b      	lsrs	r3, r3, #5
 8006a44:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006a4c:	6979      	ldr	r1, [r7, #20]
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f000 fd5e 	bl	8007510 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b086      	sub	sp, #24
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	60f8      	str	r0, [r7, #12]
 8006a6e:	60b9      	str	r1, [r7, #8]
 8006a70:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a76:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d101      	bne.n	8006a8a <I2C_Slave_ISR_IT+0x24>
 8006a86:	2302      	movs	r3, #2
 8006a88:	e0ed      	b.n	8006c66 <I2C_Slave_ISR_IT+0x200>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	095b      	lsrs	r3, r3, #5
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d00a      	beq.n	8006ab4 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	095b      	lsrs	r3, r3, #5
 8006aa2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d004      	beq.n	8006ab4 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006aaa:	6939      	ldr	r1, [r7, #16]
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 fdf9 	bl	80076a4 <I2C_ITSlaveCplt>
 8006ab2:	e0d3      	b.n	8006c5c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	091b      	lsrs	r3, r3, #4
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d04d      	beq.n	8006b5c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	091b      	lsrs	r3, r3, #4
 8006ac4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d047      	beq.n	8006b5c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d128      	bne.n	8006b28 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b28      	cmp	r3, #40	@ 0x28
 8006ae0:	d108      	bne.n	8006af4 <I2C_Slave_ISR_IT+0x8e>
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ae8:	d104      	bne.n	8006af4 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006aea:	6939      	ldr	r1, [r7, #16]
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 ff43 	bl	8007978 <I2C_ITListenCplt>
 8006af2:	e032      	b.n	8006b5a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b29      	cmp	r3, #41	@ 0x29
 8006afe:	d10e      	bne.n	8006b1e <I2C_Slave_ISR_IT+0xb8>
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b06:	d00a      	beq.n	8006b1e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2210      	movs	r2, #16
 8006b0e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f001 f89e 	bl	8007c52 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f000 fc9c 	bl	8007454 <I2C_ITSlaveSeqCplt>
 8006b1c:	e01d      	b.n	8006b5a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2210      	movs	r2, #16
 8006b24:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006b26:	e096      	b.n	8006c56 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2210      	movs	r2, #16
 8006b2e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b34:	f043 0204 	orr.w	r2, r3, #4
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d004      	beq.n	8006b4c <I2C_Slave_ISR_IT+0xe6>
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b48:	f040 8085 	bne.w	8006c56 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b50:	4619      	mov	r1, r3
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f000 ff66 	bl	8007a24 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006b58:	e07d      	b.n	8006c56 <I2C_Slave_ISR_IT+0x1f0>
 8006b5a:	e07c      	b.n	8006c56 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	089b      	lsrs	r3, r3, #2
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d030      	beq.n	8006bca <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	089b      	lsrs	r3, r3, #2
 8006b6c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d02a      	beq.n	8006bca <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d018      	beq.n	8006bb0 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b88:	b2d2      	uxtb	r2, r2
 8006b8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d14f      	bne.n	8006c5a <I2C_Slave_ISR_IT+0x1f4>
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006bc0:	d04b      	beq.n	8006c5a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f000 fc46 	bl	8007454 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006bc8:	e047      	b.n	8006c5a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	08db      	lsrs	r3, r3, #3
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00a      	beq.n	8006bec <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	08db      	lsrs	r3, r3, #3
 8006bda:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d004      	beq.n	8006bec <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006be2:	6939      	ldr	r1, [r7, #16]
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f000 fb74 	bl	80072d2 <I2C_ITAddrCplt>
 8006bea:	e037      	b.n	8006c5c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	085b      	lsrs	r3, r3, #1
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d031      	beq.n	8006c5c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	085b      	lsrs	r3, r3, #1
 8006bfc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d02b      	beq.n	8006c5c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d018      	beq.n	8006c40 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c12:	781a      	ldrb	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c36:	3b01      	subs	r3, #1
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006c3e:	e00d      	b.n	8006c5c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c46:	d002      	beq.n	8006c4e <I2C_Slave_ISR_IT+0x1e8>
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d106      	bne.n	8006c5c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f000 fc00 	bl	8007454 <I2C_ITSlaveSeqCplt>
 8006c54:	e002      	b.n	8006c5c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8006c56:	bf00      	nop
 8006c58:	e000      	b.n	8006c5c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8006c5a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3718      	adds	r7, #24
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b088      	sub	sp, #32
 8006c72:	af02      	add	r7, sp, #8
 8006c74:	60f8      	str	r0, [r7, #12]
 8006c76:	60b9      	str	r1, [r7, #8]
 8006c78:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d101      	bne.n	8006c88 <I2C_Master_ISR_DMA+0x1a>
 8006c84:	2302      	movs	r3, #2
 8006c86:	e0f0      	b.n	8006e6a <I2C_Master_ISR_DMA+0x1fc>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	091b      	lsrs	r3, r3, #4
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d017      	beq.n	8006ccc <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	091b      	lsrs	r3, r3, #4
 8006ca0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d011      	beq.n	8006ccc <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2210      	movs	r2, #16
 8006cae:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cb4:	f043 0204 	orr.w	r2, r3, #4
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006cbc:	2120      	movs	r1, #32
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f001 f8e4 	bl	8007e8c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f000 ffc4 	bl	8007c52 <I2C_Flush_TXDR>
 8006cca:	e0c9      	b.n	8006e60 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	09db      	lsrs	r3, r3, #7
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 8081 	beq.w	8006ddc <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	099b      	lsrs	r3, r3, #6
 8006cde:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d07a      	beq.n	8006ddc <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cf4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d05c      	beq.n	8006dba <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d0c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	2bff      	cmp	r3, #255	@ 0xff
 8006d16:	d914      	bls.n	8006d42 <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	0c1b      	lsrs	r3, r3, #16
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d103      	bne.n	8006d34 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006d32:	e002      	b.n	8006d3a <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	22ff      	movs	r2, #255	@ 0xff
 8006d38:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8006d3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d3e:	617b      	str	r3, [r7, #20]
 8006d40:	e010      	b.n	8006d64 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d50:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006d54:	d003      	beq.n	8006d5e <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	e002      	b.n	8006d64 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006d5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d62:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d68:	b2da      	uxtb	r2, r3
 8006d6a:	8a79      	ldrh	r1, [r7, #18]
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	9300      	str	r3, [sp, #0]
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f001 f858 	bl	8007e28 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b22      	cmp	r3, #34	@ 0x22
 8006d94:	d108      	bne.n	8006da8 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006da4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006da6:	e05b      	b.n	8006e60 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006db6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006db8:	e052      	b.n	8006e60 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dc4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006dc8:	d003      	beq.n	8006dd2 <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 fb05 	bl	80073da <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006dd0:	e046      	b.n	8006e60 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006dd2:	2140      	movs	r1, #64	@ 0x40
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 fe25 	bl	8007a24 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006dda:	e041      	b.n	8006e60 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	099b      	lsrs	r3, r3, #6
 8006de0:	f003 0301 	and.w	r3, r3, #1
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d029      	beq.n	8006e3c <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	099b      	lsrs	r3, r3, #6
 8006dec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d023      	beq.n	8006e3c <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d119      	bne.n	8006e32 <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e0c:	d027      	beq.n	8006e5e <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e12:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e16:	d108      	bne.n	8006e2a <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e26:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006e28:	e019      	b.n	8006e5e <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f000 fad5 	bl	80073da <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006e30:	e015      	b.n	8006e5e <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006e32:	2140      	movs	r1, #64	@ 0x40
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 fdf5 	bl	8007a24 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006e3a:	e010      	b.n	8006e5e <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	095b      	lsrs	r3, r3, #5
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00b      	beq.n	8006e60 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	095b      	lsrs	r3, r3, #5
 8006e4c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d005      	beq.n	8006e60 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006e54:	68b9      	ldr	r1, [r7, #8]
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 fb5a 	bl	8007510 <I2C_ITMasterCplt>
 8006e5c:	e000      	b.n	8006e60 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 8006e5e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
	...

08006e74 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b088      	sub	sp, #32
 8006e78:	af02      	add	r7, sp, #8
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006e80:	4b94      	ldr	r3, [pc, #592]	@ (80070d4 <I2C_Mem_ISR_DMA+0x260>)
 8006e82:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d101      	bne.n	8006e92 <I2C_Mem_ISR_DMA+0x1e>
 8006e8e:	2302      	movs	r3, #2
 8006e90:	e139      	b.n	8007106 <I2C_Mem_ISR_DMA+0x292>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	091b      	lsrs	r3, r3, #4
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d017      	beq.n	8006ed6 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	091b      	lsrs	r3, r3, #4
 8006eaa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d011      	beq.n	8006ed6 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2210      	movs	r2, #16
 8006eb8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ebe:	f043 0204 	orr.w	r2, r3, #4
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006ec6:	2120      	movs	r1, #32
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 ffdf 	bl	8007e8c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 febf 	bl	8007c52 <I2C_Flush_TXDR>
 8006ed4:	e112      	b.n	80070fc <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	085b      	lsrs	r3, r3, #1
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00f      	beq.n	8006f02 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	085b      	lsrs	r3, r3, #1
 8006ee6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d009      	beq.n	8006f02 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006ef6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f04f 32ff 	mov.w	r2, #4294967295
 8006efe:	651a      	str	r2, [r3, #80]	@ 0x50
 8006f00:	e0fc      	b.n	80070fc <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	09db      	lsrs	r3, r3, #7
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d06e      	beq.n	8006fec <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	099b      	lsrs	r3, r3, #6
 8006f12:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d068      	beq.n	8006fec <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f001 f839 	bl	8007f94 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006f22:	2110      	movs	r1, #16
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f000 ffb1 	bl	8007e8c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d056      	beq.n	8006fe2 <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	2bff      	cmp	r3, #255	@ 0xff
 8006f3c:	d91e      	bls.n	8006f7c <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	0c1b      	lsrs	r3, r3, #16
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d103      	bne.n	8006f5a <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2201      	movs	r2, #1
 8006f56:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006f58:	e002      	b.n	8006f60 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	22ff      	movs	r2, #255	@ 0xff
 8006f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f64:	b299      	uxth	r1, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f000 ff57 	bl	8007e28 <I2C_TransferConfig>
 8006f7a:	e011      	b.n	8006fa0 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f8a:	b299      	uxth	r1, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	2300      	movs	r3, #0
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f000 ff44 	bl	8007e28 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b22      	cmp	r3, #34	@ 0x22
 8006fbc:	d108      	bne.n	8006fd0 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006fcc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006fce:	e095      	b.n	80070fc <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fde:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006fe0:	e08c      	b.n	80070fc <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006fe2:	2140      	movs	r1, #64	@ 0x40
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 fd1d 	bl	8007a24 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006fea:	e087      	b.n	80070fc <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	099b      	lsrs	r3, r3, #6
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d071      	beq.n	80070dc <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	099b      	lsrs	r3, r3, #6
 8006ffc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007000:	2b00      	cmp	r3, #0
 8007002:	d06b      	beq.n	80070dc <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007004:	2101      	movs	r1, #1
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 ffc4 	bl	8007f94 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800700c:	2110      	movs	r1, #16
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 ff3c 	bl	8007e8c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b22      	cmp	r3, #34	@ 0x22
 800701e:	d101      	bne.n	8007024 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8007020:	4b2d      	ldr	r3, [pc, #180]	@ (80070d8 <I2C_Mem_ISR_DMA+0x264>)
 8007022:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007028:	b29b      	uxth	r3, r3
 800702a:	2bff      	cmp	r3, #255	@ 0xff
 800702c:	d91e      	bls.n	800706c <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	0c1b      	lsrs	r3, r3, #16
 8007036:	b2db      	uxtb	r3, r3
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b01      	cmp	r3, #1
 8007040:	d103      	bne.n	800704a <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2201      	movs	r2, #1
 8007046:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007048:	e002      	b.n	8007050 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	22ff      	movs	r2, #255	@ 0xff
 800704e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007054:	b299      	uxth	r1, r3
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800705a:	b2da      	uxtb	r2, r3
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 fedf 	bl	8007e28 <I2C_TransferConfig>
 800706a:	e011      	b.n	8007090 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007070:	b29a      	uxth	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800707a:	b299      	uxth	r1, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007080:	b2da      	uxtb	r2, r3
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f000 fecc 	bl	8007e28 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007094:	b29a      	uxth	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	b29a      	uxth	r2, r3
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b22      	cmp	r3, #34	@ 0x22
 80070ac:	d108      	bne.n	80070c0 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070bc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80070be:	e01d      	b.n	80070fc <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070ce:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80070d0:	e014      	b.n	80070fc <I2C_Mem_ISR_DMA+0x288>
 80070d2:	bf00      	nop
 80070d4:	80002000 	.word	0x80002000
 80070d8:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	095b      	lsrs	r3, r3, #5
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d009      	beq.n	80070fc <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	095b      	lsrs	r3, r3, #5
 80070ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d003      	beq.n	80070fc <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80070f4:	68b9      	ldr	r1, [r7, #8]
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 fa0a 	bl	8007510 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop

08007110 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b088      	sub	sp, #32
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007120:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007122:	2300      	movs	r3, #0
 8007124:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800712c:	2b01      	cmp	r3, #1
 800712e:	d101      	bne.n	8007134 <I2C_Slave_ISR_DMA+0x24>
 8007130:	2302      	movs	r3, #2
 8007132:	e0ca      	b.n	80072ca <I2C_Slave_ISR_DMA+0x1ba>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	095b      	lsrs	r3, r3, #5
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00a      	beq.n	800715e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	095b      	lsrs	r3, r3, #5
 800714c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007150:	2b00      	cmp	r3, #0
 8007152:	d004      	beq.n	800715e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007154:	68b9      	ldr	r1, [r7, #8]
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 faa4 	bl	80076a4 <I2C_ITSlaveCplt>
 800715c:	e0b0      	b.n	80072c0 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	091b      	lsrs	r3, r3, #4
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 809a 	beq.w	80072a0 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	091b      	lsrs	r3, r3, #4
 8007170:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 8093 	beq.w	80072a0 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	0b9b      	lsrs	r3, r3, #14
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	d105      	bne.n	8007192 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	0bdb      	lsrs	r3, r3, #15
 800718a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800718e:	2b00      	cmp	r3, #0
 8007190:	d07f      	beq.n	8007292 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00d      	beq.n	80071b6 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	0bdb      	lsrs	r3, r3, #15
 800719e:	f003 0301 	and.w	r3, r3, #1
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d007      	beq.n	80071b6 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d101      	bne.n	80071b6 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 80071b2:	2301      	movs	r3, #1
 80071b4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00d      	beq.n	80071da <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	0b9b      	lsrs	r3, r3, #14
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d007      	beq.n	80071da <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d101      	bne.n	80071da <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 80071d6:	2301      	movs	r3, #1
 80071d8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d128      	bne.n	8007232 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	2b28      	cmp	r3, #40	@ 0x28
 80071ea:	d108      	bne.n	80071fe <I2C_Slave_ISR_DMA+0xee>
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071f2:	d104      	bne.n	80071fe <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80071f4:	68b9      	ldr	r1, [r7, #8]
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 fbbe 	bl	8007978 <I2C_ITListenCplt>
 80071fc:	e048      	b.n	8007290 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b29      	cmp	r3, #41	@ 0x29
 8007208:	d10e      	bne.n	8007228 <I2C_Slave_ISR_DMA+0x118>
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007210:	d00a      	beq.n	8007228 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2210      	movs	r2, #16
 8007218:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f000 fd19 	bl	8007c52 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 f917 	bl	8007454 <I2C_ITSlaveSeqCplt>
 8007226:	e033      	b.n	8007290 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2210      	movs	r2, #16
 800722e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007230:	e034      	b.n	800729c <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2210      	movs	r2, #16
 8007238:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800723e:	f043 0204 	orr.w	r2, r3, #4
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800724c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <I2C_Slave_ISR_DMA+0x14c>
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800725a:	d11f      	bne.n	800729c <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800725c:	7dfb      	ldrb	r3, [r7, #23]
 800725e:	2b21      	cmp	r3, #33	@ 0x21
 8007260:	d002      	beq.n	8007268 <I2C_Slave_ISR_DMA+0x158>
 8007262:	7dfb      	ldrb	r3, [r7, #23]
 8007264:	2b29      	cmp	r3, #41	@ 0x29
 8007266:	d103      	bne.n	8007270 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2221      	movs	r2, #33	@ 0x21
 800726c:	631a      	str	r2, [r3, #48]	@ 0x30
 800726e:	e008      	b.n	8007282 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007270:	7dfb      	ldrb	r3, [r7, #23]
 8007272:	2b22      	cmp	r3, #34	@ 0x22
 8007274:	d002      	beq.n	800727c <I2C_Slave_ISR_DMA+0x16c>
 8007276:	7dfb      	ldrb	r3, [r7, #23]
 8007278:	2b2a      	cmp	r3, #42	@ 0x2a
 800727a:	d102      	bne.n	8007282 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2222      	movs	r2, #34	@ 0x22
 8007280:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007286:	4619      	mov	r1, r3
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 fbcb 	bl	8007a24 <I2C_ITError>
      if (treatdmanack == 1U)
 800728e:	e005      	b.n	800729c <I2C_Slave_ISR_DMA+0x18c>
 8007290:	e004      	b.n	800729c <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2210      	movs	r2, #16
 8007298:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800729a:	e011      	b.n	80072c0 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 800729c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800729e:	e00f      	b.n	80072c0 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	08db      	lsrs	r3, r3, #3
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d009      	beq.n	80072c0 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	08db      	lsrs	r3, r3, #3
 80072b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d003      	beq.n	80072c0 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80072b8:	68b9      	ldr	r1, [r7, #8]
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f000 f809 	bl	80072d2 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3720      	adds	r7, #32
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b084      	sub	sp, #16
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80072e8:	2b28      	cmp	r3, #40	@ 0x28
 80072ea:	d16a      	bne.n	80073c2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	0c1b      	lsrs	r3, r3, #16
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	0c1b      	lsrs	r3, r3, #16
 8007304:	b29b      	uxth	r3, r3
 8007306:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800730a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	b29b      	uxth	r3, r3
 8007314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007318:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	b29b      	uxth	r3, r3
 8007322:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007326:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	2b02      	cmp	r3, #2
 800732e:	d138      	bne.n	80073a2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007330:	897b      	ldrh	r3, [r7, #10]
 8007332:	09db      	lsrs	r3, r3, #7
 8007334:	b29a      	uxth	r2, r3
 8007336:	89bb      	ldrh	r3, [r7, #12]
 8007338:	4053      	eors	r3, r2
 800733a:	b29b      	uxth	r3, r3
 800733c:	f003 0306 	and.w	r3, r3, #6
 8007340:	2b00      	cmp	r3, #0
 8007342:	d11c      	bne.n	800737e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007344:	897b      	ldrh	r3, [r7, #10]
 8007346:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007356:	2b02      	cmp	r3, #2
 8007358:	d13b      	bne.n	80073d2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2208      	movs	r2, #8
 8007366:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007370:	89ba      	ldrh	r2, [r7, #12]
 8007372:	7bfb      	ldrb	r3, [r7, #15]
 8007374:	4619      	mov	r1, r3
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7ff f9f3 	bl	8006762 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800737c:	e029      	b.n	80073d2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800737e:	893b      	ldrh	r3, [r7, #8]
 8007380:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007382:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fe04 	bl	8007f94 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007394:	89ba      	ldrh	r2, [r7, #12]
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	4619      	mov	r1, r3
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7ff f9e1 	bl	8006762 <HAL_I2C_AddrCallback>
}
 80073a0:	e017      	b.n	80073d2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80073a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fdf4 	bl	8007f94 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80073b4:	89ba      	ldrh	r2, [r7, #12]
 80073b6:	7bfb      	ldrb	r3, [r7, #15]
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7ff f9d1 	bl	8006762 <HAL_I2C_AddrCallback>
}
 80073c0:	e007      	b.n	80073d2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2208      	movs	r2, #8
 80073c8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80073d2:	bf00      	nop
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b082      	sub	sp, #8
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b21      	cmp	r3, #33	@ 0x21
 80073f4:	d115      	bne.n	8007422 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2220      	movs	r2, #32
 80073fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2211      	movs	r2, #17
 8007402:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800740a:	2101      	movs	r1, #1
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fdc1 	bl	8007f94 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f016 f832 	bl	801d484 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007420:	e014      	b.n	800744c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2220      	movs	r2, #32
 8007426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2212      	movs	r2, #18
 800742e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007436:	2102      	movs	r1, #2
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 fdab 	bl	8007f94 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f016 f846 	bl	801d4d8 <HAL_I2C_MasterRxCpltCallback>
}
 800744c:	bf00      	nop
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	0b9b      	lsrs	r3, r3, #14
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	d008      	beq.n	800748a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007486:	601a      	str	r2, [r3, #0]
 8007488:	e00d      	b.n	80074a6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	0bdb      	lsrs	r3, r3, #15
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b00      	cmp	r3, #0
 8007494:	d007      	beq.n	80074a6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80074a4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	2b29      	cmp	r3, #41	@ 0x29
 80074b0:	d112      	bne.n	80074d8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2228      	movs	r2, #40	@ 0x28
 80074b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2221      	movs	r2, #33	@ 0x21
 80074be:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80074c0:	2101      	movs	r1, #1
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fd66 	bl	8007f94 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f7ff f932 	bl	800673a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80074d6:	e017      	b.n	8007508 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80074e2:	d111      	bne.n	8007508 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2228      	movs	r2, #40	@ 0x28
 80074e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2222      	movs	r2, #34	@ 0x22
 80074f0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80074f2:	2102      	movs	r1, #2
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fd4d 	bl	8007f94 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7ff f923 	bl	800674e <HAL_I2C_SlaveRxCpltCallback>
}
 8007508:	bf00      	nop
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2220      	movs	r2, #32
 8007524:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b21      	cmp	r3, #33	@ 0x21
 8007530:	d107      	bne.n	8007542 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007532:	2101      	movs	r1, #1
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f000 fd2d 	bl	8007f94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2211      	movs	r2, #17
 800753e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007540:	e00c      	b.n	800755c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b22      	cmp	r3, #34	@ 0x22
 800754c:	d106      	bne.n	800755c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800754e:	2102      	movs	r1, #2
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fd1f 	bl	8007f94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2212      	movs	r2, #18
 800755a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6859      	ldr	r1, [r3, #4]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	4b4d      	ldr	r3, [pc, #308]	@ (800769c <I2C_ITMasterCplt+0x18c>)
 8007568:	400b      	ands	r3, r1
 800756a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a4a      	ldr	r2, [pc, #296]	@ (80076a0 <I2C_ITMasterCplt+0x190>)
 8007576:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	091b      	lsrs	r3, r3, #4
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	2b00      	cmp	r3, #0
 8007582:	d009      	beq.n	8007598 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2210      	movs	r2, #16
 800758a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007590:	f043 0204 	orr.w	r2, r3, #4
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b60      	cmp	r3, #96	@ 0x60
 80075a2:	d10b      	bne.n	80075bc <I2C_ITMasterCplt+0xac>
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	089b      	lsrs	r3, r3, #2
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d005      	beq.n	80075bc <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80075ba:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f000 fb48 	bl	8007c52 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075c6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b60      	cmp	r3, #96	@ 0x60
 80075d2:	d002      	beq.n	80075da <I2C_ITMasterCplt+0xca>
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d006      	beq.n	80075e8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075de:	4619      	mov	r1, r3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fa1f 	bl	8007a24 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80075e6:	e054      	b.n	8007692 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b21      	cmp	r3, #33	@ 0x21
 80075f2:	d124      	bne.n	800763e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2220      	movs	r2, #32
 80075f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b40      	cmp	r3, #64	@ 0x40
 800760c:	d10b      	bne.n	8007626 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7ff f8b7 	bl	8006792 <HAL_I2C_MemTxCpltCallback>
}
 8007624:	e035      	b.n	8007692 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f015 ff24 	bl	801d484 <HAL_I2C_MasterTxCpltCallback>
}
 800763c:	e029      	b.n	8007692 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b22      	cmp	r3, #34	@ 0x22
 8007648:	d123      	bne.n	8007692 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2220      	movs	r2, #32
 800764e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800765e:	b2db      	uxtb	r3, r3
 8007660:	2b40      	cmp	r3, #64	@ 0x40
 8007662:	d10b      	bne.n	800767c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7ff f896 	bl	80067a6 <HAL_I2C_MemRxCpltCallback>
}
 800767a:	e00a      	b.n	8007692 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f015 ff23 	bl	801d4d8 <HAL_I2C_MasterRxCpltCallback>
}
 8007692:	bf00      	nop
 8007694:	3718      	adds	r7, #24
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	fe00e800 	.word	0xfe00e800
 80076a0:	ffff0000 	.word	0xffff0000

080076a4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b086      	sub	sp, #24
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076be:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076c6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2220      	movs	r2, #32
 80076ce:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80076d0:	7afb      	ldrb	r3, [r7, #11]
 80076d2:	2b21      	cmp	r3, #33	@ 0x21
 80076d4:	d002      	beq.n	80076dc <I2C_ITSlaveCplt+0x38>
 80076d6:	7afb      	ldrb	r3, [r7, #11]
 80076d8:	2b29      	cmp	r3, #41	@ 0x29
 80076da:	d108      	bne.n	80076ee <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80076dc:	f248 0101 	movw	r1, #32769	@ 0x8001
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fc57 	bl	8007f94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2221      	movs	r2, #33	@ 0x21
 80076ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80076ec:	e019      	b.n	8007722 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80076ee:	7afb      	ldrb	r3, [r7, #11]
 80076f0:	2b22      	cmp	r3, #34	@ 0x22
 80076f2:	d002      	beq.n	80076fa <I2C_ITSlaveCplt+0x56>
 80076f4:	7afb      	ldrb	r3, [r7, #11]
 80076f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80076f8:	d108      	bne.n	800770c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80076fa:	f248 0102 	movw	r1, #32770	@ 0x8002
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fc48 	bl	8007f94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2222      	movs	r2, #34	@ 0x22
 8007708:	631a      	str	r2, [r3, #48]	@ 0x30
 800770a:	e00a      	b.n	8007722 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800770c:	7afb      	ldrb	r3, [r7, #11]
 800770e:	2b28      	cmp	r3, #40	@ 0x28
 8007710:	d107      	bne.n	8007722 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007712:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fc3c 	bl	8007f94 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	685a      	ldr	r2, [r3, #4]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007730:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6859      	ldr	r1, [r3, #4]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	4b8c      	ldr	r3, [pc, #560]	@ (8007970 <I2C_ITSlaveCplt+0x2cc>)
 800773e:	400b      	ands	r3, r1
 8007740:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fa85 	bl	8007c52 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	0b9b      	lsrs	r3, r3, #14
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b00      	cmp	r3, #0
 8007752:	d013      	beq.n	800777c <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007762:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007768:	2b00      	cmp	r3, #0
 800776a:	d020      	beq.n	80077ae <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	b29a      	uxth	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800777a:	e018      	b.n	80077ae <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	0bdb      	lsrs	r3, r3, #15
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	2b00      	cmp	r3, #0
 8007786:	d012      	beq.n	80077ae <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007796:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800779c:	2b00      	cmp	r3, #0
 800779e:	d006      	beq.n	80077ae <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	089b      	lsrs	r3, r3, #2
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d020      	beq.n	80077fc <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f023 0304 	bic.w	r3, r3, #4
 80077c0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077cc:	b2d2      	uxtb	r2, r2
 80077ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d4:	1c5a      	adds	r2, r3, #1
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00c      	beq.n	80077fc <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077e6:	3b01      	subs	r3, #1
 80077e8:	b29a      	uxth	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	3b01      	subs	r3, #1
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007800:	b29b      	uxth	r3, r3
 8007802:	2b00      	cmp	r3, #0
 8007804:	d005      	beq.n	8007812 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800780a:	f043 0204 	orr.w	r2, r3, #4
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	091b      	lsrs	r3, r3, #4
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	2b00      	cmp	r3, #0
 800781c:	d04a      	beq.n	80078b4 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	091b      	lsrs	r3, r3, #4
 8007822:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007826:	2b00      	cmp	r3, #0
 8007828:	d044      	beq.n	80078b4 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800782e:	b29b      	uxth	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	d128      	bne.n	8007886 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b28      	cmp	r3, #40	@ 0x28
 800783e:	d108      	bne.n	8007852 <I2C_ITSlaveCplt+0x1ae>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007846:	d104      	bne.n	8007852 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007848:	6979      	ldr	r1, [r7, #20]
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f894 	bl	8007978 <I2C_ITListenCplt>
 8007850:	e030      	b.n	80078b4 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b29      	cmp	r3, #41	@ 0x29
 800785c:	d10e      	bne.n	800787c <I2C_ITSlaveCplt+0x1d8>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007864:	d00a      	beq.n	800787c <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2210      	movs	r2, #16
 800786c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f9ef 	bl	8007c52 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7ff fded 	bl	8007454 <I2C_ITSlaveSeqCplt>
 800787a:	e01b      	b.n	80078b4 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	2210      	movs	r2, #16
 8007882:	61da      	str	r2, [r3, #28]
 8007884:	e016      	b.n	80078b4 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2210      	movs	r2, #16
 800788c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007892:	f043 0204 	orr.w	r2, r3, #4
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d003      	beq.n	80078a8 <I2C_ITSlaveCplt+0x204>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80078a6:	d105      	bne.n	80078b4 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ac:	4619      	mov	r1, r3
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f8b8 	bl	8007a24 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d010      	beq.n	80078ec <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f8a7 	bl	8007a24 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b28      	cmp	r3, #40	@ 0x28
 80078e0:	d141      	bne.n	8007966 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80078e2:	6979      	ldr	r1, [r7, #20]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f847 	bl	8007978 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80078ea:	e03c      	b.n	8007966 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80078f4:	d014      	beq.n	8007920 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7ff fdac 	bl	8007454 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a1d      	ldr	r2, [pc, #116]	@ (8007974 <I2C_ITSlaveCplt+0x2d0>)
 8007900:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2220      	movs	r2, #32
 8007906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7fe ff30 	bl	800677e <HAL_I2C_ListenCpltCallback>
}
 800791e:	e022      	b.n	8007966 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007926:	b2db      	uxtb	r3, r3
 8007928:	2b22      	cmp	r3, #34	@ 0x22
 800792a:	d10e      	bne.n	800794a <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2220      	movs	r2, #32
 8007930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7fe ff03 	bl	800674e <HAL_I2C_SlaveRxCpltCallback>
}
 8007948:	e00d      	b.n	8007966 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2220      	movs	r2, #32
 800794e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f7fe feea 	bl	800673a <HAL_I2C_SlaveTxCpltCallback>
}
 8007966:	bf00      	nop
 8007968:	3718      	adds	r7, #24
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	fe00e800 	.word	0xfe00e800
 8007974:	ffff0000 	.word	0xffff0000

08007978 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a26      	ldr	r2, [pc, #152]	@ (8007a20 <I2C_ITListenCplt+0xa8>)
 8007986:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2220      	movs	r2, #32
 8007992:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	089b      	lsrs	r3, r3, #2
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d022      	beq.n	80079f6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ba:	b2d2      	uxtb	r2, r2
 80079bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079c2:	1c5a      	adds	r2, r3, #1
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d012      	beq.n	80079f6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079d4:	3b01      	subs	r3, #1
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	3b01      	subs	r3, #1
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ee:	f043 0204 	orr.w	r2, r3, #4
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80079f6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 faca 	bl	8007f94 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2210      	movs	r2, #16
 8007a06:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7fe feb4 	bl	800677e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007a16:	bf00      	nop
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	ffff0000 	.word	0xffff0000

08007a24 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a34:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4a6d      	ldr	r2, [pc, #436]	@ (8007bf8 <I2C_ITError+0x1d4>)
 8007a42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	431a      	orrs	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
 8007a58:	2b28      	cmp	r3, #40	@ 0x28
 8007a5a:	d005      	beq.n	8007a68 <I2C_ITError+0x44>
 8007a5c:	7bfb      	ldrb	r3, [r7, #15]
 8007a5e:	2b29      	cmp	r3, #41	@ 0x29
 8007a60:	d002      	beq.n	8007a68 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
 8007a64:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a66:	d10b      	bne.n	8007a80 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007a68:	2103      	movs	r1, #3
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fa92 	bl	8007f94 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2228      	movs	r2, #40	@ 0x28
 8007a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a60      	ldr	r2, [pc, #384]	@ (8007bfc <I2C_ITError+0x1d8>)
 8007a7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8007a7e:	e030      	b.n	8007ae2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007a80:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fa85 	bl	8007f94 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f8e1 	bl	8007c52 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b60      	cmp	r3, #96	@ 0x60
 8007a9a:	d01f      	beq.n	8007adc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	f003 0320 	and.w	r3, r3, #32
 8007aae:	2b20      	cmp	r3, #32
 8007ab0:	d114      	bne.n	8007adc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	f003 0310 	and.w	r3, r3, #16
 8007abc:	2b10      	cmp	r3, #16
 8007abe:	d109      	bne.n	8007ad4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2210      	movs	r2, #16
 8007ac6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007acc:	f043 0204 	orr.w	r2, r3, #4
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ae6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d039      	beq.n	8007b64 <I2C_ITError+0x140>
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	2b11      	cmp	r3, #17
 8007af4:	d002      	beq.n	8007afc <I2C_ITError+0xd8>
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	2b21      	cmp	r3, #33	@ 0x21
 8007afa:	d133      	bne.n	8007b64 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b0a:	d107      	bne.n	8007b1c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007b1a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fc fb9b 	bl	800425c <HAL_DMA_GetState>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d017      	beq.n	8007b5c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b30:	4a33      	ldr	r2, [pc, #204]	@ (8007c00 <I2C_ITError+0x1dc>)
 8007b32:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fc f9df 	bl	8003f04 <HAL_DMA_Abort_IT>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d04d      	beq.n	8007be8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007b56:	4610      	mov	r0, r2
 8007b58:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007b5a:	e045      	b.n	8007be8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f851 	bl	8007c04 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007b62:	e041      	b.n	8007be8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d039      	beq.n	8007be0 <I2C_ITError+0x1bc>
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2b12      	cmp	r3, #18
 8007b70:	d002      	beq.n	8007b78 <I2C_ITError+0x154>
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2b22      	cmp	r3, #34	@ 0x22
 8007b76:	d133      	bne.n	8007be0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b86:	d107      	bne.n	8007b98 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b96:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fc fb5d 	bl	800425c <HAL_DMA_GetState>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d017      	beq.n	8007bd8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bac:	4a14      	ldr	r2, [pc, #80]	@ (8007c00 <I2C_ITError+0x1dc>)
 8007bae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7fc f9a1 	bl	8003f04 <HAL_DMA_Abort_IT>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d011      	beq.n	8007bec <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007bd6:	e009      	b.n	8007bec <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f813 	bl	8007c04 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007bde:	e005      	b.n	8007bec <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f80f 	bl	8007c04 <I2C_TreatErrorCallback>
  }
}
 8007be6:	e002      	b.n	8007bee <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007be8:	bf00      	nop
 8007bea:	e000      	b.n	8007bee <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007bec:	bf00      	nop
}
 8007bee:	bf00      	nop
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	ffff0000 	.word	0xffff0000
 8007bfc:	08006a67 	.word	0x08006a67
 8007c00:	08007deb 	.word	0x08007deb

08007c04 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	2b60      	cmp	r3, #96	@ 0x60
 8007c16:	d10e      	bne.n	8007c36 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f7fe fdcd 	bl	80067ce <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007c34:	e009      	b.n	8007c4a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7fe fdb8 	bl	80067ba <HAL_I2C_ErrorCallback>
}
 8007c4a:	bf00      	nop
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b083      	sub	sp, #12
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	f003 0302 	and.w	r3, r3, #2
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d103      	bne.n	8007c70 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d007      	beq.n	8007c8e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	699a      	ldr	r2, [r3, #24]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f042 0201 	orr.w	r2, r2, #1
 8007c8c:	619a      	str	r2, [r3, #24]
  }
}
 8007c8e:	bf00      	nop
 8007c90:	370c      	adds	r7, #12
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b084      	sub	sp, #16
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007cb6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d104      	bne.n	8007ccc <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007cc2:	2120      	movs	r1, #32
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f000 f8e1 	bl	8007e8c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007cca:	e02d      	b.n	8007d28 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007cd4:	441a      	add	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	2bff      	cmp	r3, #255	@ 0xff
 8007ce2:	d903      	bls.n	8007cec <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	22ff      	movs	r2, #255	@ 0xff
 8007ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007cea:	e004      	b.n	8007cf6 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cf0:	b29a      	uxth	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cfe:	4619      	mov	r1, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3328      	adds	r3, #40	@ 0x28
 8007d06:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007d0c:	f7fc f82a 	bl	8003d64 <HAL_DMA_Start_IT>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d004      	beq.n	8007d20 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007d16:	2110      	movs	r1, #16
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f7ff fe83 	bl	8007a24 <I2C_ITError>
}
 8007d1e:	e003      	b.n	8007d28 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007d20:	2140      	movs	r1, #64	@ 0x40
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f000 f8b2 	bl	8007e8c <I2C_Enable_IRQ>
}
 8007d28:	bf00      	nop
 8007d2a:	3710      	adds	r7, #16
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d42:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10e      	bne.n	8007d6e <I2C_DMASlaveReceiveCplt+0x3e>
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007d56:	d00a      	beq.n	8007d6e <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d66:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f7ff fb73 	bl	8007454 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8007d6e:	bf00      	nop
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b084      	sub	sp, #16
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d86:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d007      	beq.n	8007da0 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d101      	bne.n	8007da0 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d007      	beq.n	8007db8 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d101      	bne.n	8007db8 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8007db4:	2301      	movs	r3, #1
 8007db6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7fc fa5d 	bl	8004278 <HAL_DMA_GetError>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d00e      	beq.n	8007de2 <I2C_DMAError+0x6c>
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00b      	beq.n	8007de2 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007dd8:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007dda:	2110      	movs	r1, #16
 8007ddc:	68b8      	ldr	r0, [r7, #8]
 8007dde:	f7ff fe21 	bl	8007a24 <I2C_ITError>
  }
}
 8007de2:	bf00      	nop
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d003      	beq.n	8007e08 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e04:	2200      	movs	r2, #0
 8007e06:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d003      	beq.n	8007e18 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e14:	2200      	movs	r2, #0
 8007e16:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f7ff fef3 	bl	8007c04 <I2C_TreatErrorCallback>
}
 8007e1e:	bf00      	nop
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
	...

08007e28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	607b      	str	r3, [r7, #4]
 8007e32:	460b      	mov	r3, r1
 8007e34:	817b      	strh	r3, [r7, #10]
 8007e36:	4613      	mov	r3, r2
 8007e38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e3a:	897b      	ldrh	r3, [r7, #10]
 8007e3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e40:	7a7b      	ldrb	r3, [r7, #9]
 8007e42:	041b      	lsls	r3, r3, #16
 8007e44:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e48:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e4e:	6a3b      	ldr	r3, [r7, #32]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e56:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	685a      	ldr	r2, [r3, #4]
 8007e5e:	6a3b      	ldr	r3, [r7, #32]
 8007e60:	0d5b      	lsrs	r3, r3, #21
 8007e62:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007e66:	4b08      	ldr	r3, [pc, #32]	@ (8007e88 <I2C_TransferConfig+0x60>)
 8007e68:	430b      	orrs	r3, r1
 8007e6a:	43db      	mvns	r3, r3
 8007e6c:	ea02 0103 	and.w	r1, r2, r3
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007e7a:	bf00      	nop
 8007e7c:	371c      	adds	r7, #28
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	03ff63ff 	.word	0x03ff63ff

08007e8c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ea0:	4a39      	ldr	r2, [pc, #228]	@ (8007f88 <I2C_Enable_IRQ+0xfc>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d032      	beq.n	8007f0c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007eaa:	4a38      	ldr	r2, [pc, #224]	@ (8007f8c <I2C_Enable_IRQ+0x100>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d02d      	beq.n	8007f0c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007eb4:	4a36      	ldr	r2, [pc, #216]	@ (8007f90 <I2C_Enable_IRQ+0x104>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d028      	beq.n	8007f0c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007eba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	da03      	bge.n	8007eca <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007ec8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007eca:	887b      	ldrh	r3, [r7, #2]
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d003      	beq.n	8007edc <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007eda:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007edc:	887b      	ldrh	r3, [r7, #2]
 8007ede:	f003 0302 	and.w	r3, r3, #2
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d003      	beq.n	8007eee <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007eec:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007eee:	887b      	ldrh	r3, [r7, #2]
 8007ef0:	2b10      	cmp	r3, #16
 8007ef2:	d103      	bne.n	8007efc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007efa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007efc:	887b      	ldrh	r3, [r7, #2]
 8007efe:	2b20      	cmp	r3, #32
 8007f00:	d133      	bne.n	8007f6a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f043 0320 	orr.w	r3, r3, #32
 8007f08:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007f0a:	e02e      	b.n	8007f6a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007f0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	da03      	bge.n	8007f1c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007f1a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007f1c:	887b      	ldrh	r3, [r7, #2]
 8007f1e:	f003 0301 	and.w	r3, r3, #1
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d003      	beq.n	8007f2e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007f2c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007f2e:	887b      	ldrh	r3, [r7, #2]
 8007f30:	f003 0302 	and.w	r3, r3, #2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d003      	beq.n	8007f40 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007f3e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007f40:	887b      	ldrh	r3, [r7, #2]
 8007f42:	2b10      	cmp	r3, #16
 8007f44:	d103      	bne.n	8007f4e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007f4c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007f4e:	887b      	ldrh	r3, [r7, #2]
 8007f50:	2b20      	cmp	r3, #32
 8007f52:	d103      	bne.n	8007f5c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007f5a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007f5c:	887b      	ldrh	r3, [r7, #2]
 8007f5e:	2b40      	cmp	r3, #64	@ 0x40
 8007f60:	d103      	bne.n	8007f6a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f68:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	6819      	ldr	r1, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	601a      	str	r2, [r3, #0]
}
 8007f7a:	bf00      	nop
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
 8007f86:	bf00      	nop
 8007f88:	08006c6f 	.word	0x08006c6f
 8007f8c:	08007111 	.word	0x08007111
 8007f90:	08006e75 	.word	0x08006e75

08007f94 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007fa4:	887b      	ldrh	r3, [r7, #2]
 8007fa6:	f003 0301 	and.w	r3, r3, #1
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d00f      	beq.n	8007fce <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007fb4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007fc2:	2b28      	cmp	r3, #40	@ 0x28
 8007fc4:	d003      	beq.n	8007fce <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007fcc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007fce:	887b      	ldrh	r3, [r7, #2]
 8007fd0:	f003 0302 	and.w	r3, r3, #2
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00f      	beq.n	8007ff8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007fde:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007fec:	2b28      	cmp	r3, #40	@ 0x28
 8007fee:	d003      	beq.n	8007ff8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007ff6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007ff8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	da03      	bge.n	8008008 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008006:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008008:	887b      	ldrh	r3, [r7, #2]
 800800a:	2b10      	cmp	r3, #16
 800800c:	d103      	bne.n	8008016 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008014:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008016:	887b      	ldrh	r3, [r7, #2]
 8008018:	2b20      	cmp	r3, #32
 800801a:	d103      	bne.n	8008024 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f043 0320 	orr.w	r3, r3, #32
 8008022:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008024:	887b      	ldrh	r3, [r7, #2]
 8008026:	2b40      	cmp	r3, #64	@ 0x40
 8008028:	d103      	bne.n	8008032 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008030:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	6819      	ldr	r1, [r3, #0]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	43da      	mvns	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	400a      	ands	r2, r1
 8008042:	601a      	str	r2, [r3, #0]
}
 8008044:	bf00      	nop
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008060:	b2db      	uxtb	r3, r3
 8008062:	2b20      	cmp	r3, #32
 8008064:	d138      	bne.n	80080d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800806c:	2b01      	cmp	r3, #1
 800806e:	d101      	bne.n	8008074 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008070:	2302      	movs	r3, #2
 8008072:	e032      	b.n	80080da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2224      	movs	r2, #36	@ 0x24
 8008080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f022 0201 	bic.w	r2, r2, #1
 8008092:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80080a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6819      	ldr	r1, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f042 0201 	orr.w	r2, r2, #1
 80080c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2220      	movs	r2, #32
 80080c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80080d4:	2300      	movs	r3, #0
 80080d6:	e000      	b.n	80080da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80080d8:	2302      	movs	r3, #2
  }
}
 80080da:	4618      	mov	r0, r3
 80080dc:	370c      	adds	r7, #12
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr

080080e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b085      	sub	sp, #20
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	2b20      	cmp	r3, #32
 80080fa:	d139      	bne.n	8008170 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008102:	2b01      	cmp	r3, #1
 8008104:	d101      	bne.n	800810a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008106:	2302      	movs	r3, #2
 8008108:	e033      	b.n	8008172 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2224      	movs	r2, #36	@ 0x24
 8008116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f022 0201 	bic.w	r2, r2, #1
 8008128:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008138:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	021b      	lsls	r3, r3, #8
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	4313      	orrs	r3, r2
 8008142:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f042 0201 	orr.w	r2, r2, #1
 800815a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2220      	movs	r2, #32
 8008160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	e000      	b.n	8008172 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008170:	2302      	movs	r3, #2
  }
}
 8008172:	4618      	mov	r0, r3
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr

0800817e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b086      	sub	sp, #24
 8008182:	af02      	add	r7, sp, #8
 8008184:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d101      	bne.n	8008190 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e108      	b.n	80083a2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d106      	bne.n	80081b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7f9 fede 	bl	8001f6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2203      	movs	r2, #3
 80081b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80081be:	d102      	bne.n	80081c6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f005 fa20 	bl	800d610 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6818      	ldr	r0, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	7c1a      	ldrb	r2, [r3, #16]
 80081d8:	f88d 2000 	strb.w	r2, [sp]
 80081dc:	3304      	adds	r3, #4
 80081de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081e0:	f005 f9bc 	bl	800d55c <USB_CoreInit>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d005      	beq.n	80081f6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2202      	movs	r2, #2
 80081ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e0d5      	b.n	80083a2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2100      	movs	r1, #0
 80081fc:	4618      	mov	r0, r3
 80081fe:	f005 fa18 	bl	800d632 <USB_SetCurrentMode>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d005      	beq.n	8008214 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2202      	movs	r2, #2
 800820c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e0c6      	b.n	80083a2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008214:	2300      	movs	r3, #0
 8008216:	73fb      	strb	r3, [r7, #15]
 8008218:	e04a      	b.n	80082b0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800821a:	7bfa      	ldrb	r2, [r7, #15]
 800821c:	6879      	ldr	r1, [r7, #4]
 800821e:	4613      	mov	r3, r2
 8008220:	00db      	lsls	r3, r3, #3
 8008222:	4413      	add	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	440b      	add	r3, r1
 8008228:	3315      	adds	r3, #21
 800822a:	2201      	movs	r2, #1
 800822c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800822e:	7bfa      	ldrb	r2, [r7, #15]
 8008230:	6879      	ldr	r1, [r7, #4]
 8008232:	4613      	mov	r3, r2
 8008234:	00db      	lsls	r3, r3, #3
 8008236:	4413      	add	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	440b      	add	r3, r1
 800823c:	3314      	adds	r3, #20
 800823e:	7bfa      	ldrb	r2, [r7, #15]
 8008240:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008242:	7bfa      	ldrb	r2, [r7, #15]
 8008244:	7bfb      	ldrb	r3, [r7, #15]
 8008246:	b298      	uxth	r0, r3
 8008248:	6879      	ldr	r1, [r7, #4]
 800824a:	4613      	mov	r3, r2
 800824c:	00db      	lsls	r3, r3, #3
 800824e:	4413      	add	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	440b      	add	r3, r1
 8008254:	332e      	adds	r3, #46	@ 0x2e
 8008256:	4602      	mov	r2, r0
 8008258:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800825a:	7bfa      	ldrb	r2, [r7, #15]
 800825c:	6879      	ldr	r1, [r7, #4]
 800825e:	4613      	mov	r3, r2
 8008260:	00db      	lsls	r3, r3, #3
 8008262:	4413      	add	r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	440b      	add	r3, r1
 8008268:	3318      	adds	r3, #24
 800826a:	2200      	movs	r2, #0
 800826c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800826e:	7bfa      	ldrb	r2, [r7, #15]
 8008270:	6879      	ldr	r1, [r7, #4]
 8008272:	4613      	mov	r3, r2
 8008274:	00db      	lsls	r3, r3, #3
 8008276:	4413      	add	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	440b      	add	r3, r1
 800827c:	331c      	adds	r3, #28
 800827e:	2200      	movs	r2, #0
 8008280:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008282:	7bfa      	ldrb	r2, [r7, #15]
 8008284:	6879      	ldr	r1, [r7, #4]
 8008286:	4613      	mov	r3, r2
 8008288:	00db      	lsls	r3, r3, #3
 800828a:	4413      	add	r3, r2
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	440b      	add	r3, r1
 8008290:	3320      	adds	r3, #32
 8008292:	2200      	movs	r2, #0
 8008294:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008296:	7bfa      	ldrb	r2, [r7, #15]
 8008298:	6879      	ldr	r1, [r7, #4]
 800829a:	4613      	mov	r3, r2
 800829c:	00db      	lsls	r3, r3, #3
 800829e:	4413      	add	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	440b      	add	r3, r1
 80082a4:	3324      	adds	r3, #36	@ 0x24
 80082a6:	2200      	movs	r2, #0
 80082a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082aa:	7bfb      	ldrb	r3, [r7, #15]
 80082ac:	3301      	adds	r3, #1
 80082ae:	73fb      	strb	r3, [r7, #15]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	791b      	ldrb	r3, [r3, #4]
 80082b4:	7bfa      	ldrb	r2, [r7, #15]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d3af      	bcc.n	800821a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082ba:	2300      	movs	r3, #0
 80082bc:	73fb      	strb	r3, [r7, #15]
 80082be:	e044      	b.n	800834a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80082c0:	7bfa      	ldrb	r2, [r7, #15]
 80082c2:	6879      	ldr	r1, [r7, #4]
 80082c4:	4613      	mov	r3, r2
 80082c6:	00db      	lsls	r3, r3, #3
 80082c8:	4413      	add	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	440b      	add	r3, r1
 80082ce:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80082d2:	2200      	movs	r2, #0
 80082d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80082d6:	7bfa      	ldrb	r2, [r7, #15]
 80082d8:	6879      	ldr	r1, [r7, #4]
 80082da:	4613      	mov	r3, r2
 80082dc:	00db      	lsls	r3, r3, #3
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	440b      	add	r3, r1
 80082e4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80082e8:	7bfa      	ldrb	r2, [r7, #15]
 80082ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80082ec:	7bfa      	ldrb	r2, [r7, #15]
 80082ee:	6879      	ldr	r1, [r7, #4]
 80082f0:	4613      	mov	r3, r2
 80082f2:	00db      	lsls	r3, r3, #3
 80082f4:	4413      	add	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	440b      	add	r3, r1
 80082fa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80082fe:	2200      	movs	r2, #0
 8008300:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008302:	7bfa      	ldrb	r2, [r7, #15]
 8008304:	6879      	ldr	r1, [r7, #4]
 8008306:	4613      	mov	r3, r2
 8008308:	00db      	lsls	r3, r3, #3
 800830a:	4413      	add	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	440b      	add	r3, r1
 8008310:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008314:	2200      	movs	r2, #0
 8008316:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008318:	7bfa      	ldrb	r2, [r7, #15]
 800831a:	6879      	ldr	r1, [r7, #4]
 800831c:	4613      	mov	r3, r2
 800831e:	00db      	lsls	r3, r3, #3
 8008320:	4413      	add	r3, r2
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	440b      	add	r3, r1
 8008326:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800832a:	2200      	movs	r2, #0
 800832c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800832e:	7bfa      	ldrb	r2, [r7, #15]
 8008330:	6879      	ldr	r1, [r7, #4]
 8008332:	4613      	mov	r3, r2
 8008334:	00db      	lsls	r3, r3, #3
 8008336:	4413      	add	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	440b      	add	r3, r1
 800833c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008340:	2200      	movs	r2, #0
 8008342:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008344:	7bfb      	ldrb	r3, [r7, #15]
 8008346:	3301      	adds	r3, #1
 8008348:	73fb      	strb	r3, [r7, #15]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	791b      	ldrb	r3, [r3, #4]
 800834e:	7bfa      	ldrb	r2, [r7, #15]
 8008350:	429a      	cmp	r2, r3
 8008352:	d3b5      	bcc.n	80082c0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6818      	ldr	r0, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	7c1a      	ldrb	r2, [r3, #16]
 800835c:	f88d 2000 	strb.w	r2, [sp]
 8008360:	3304      	adds	r3, #4
 8008362:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008364:	f005 f9b2 	bl	800d6cc <USB_DevInit>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d005      	beq.n	800837a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2202      	movs	r2, #2
 8008372:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e013      	b.n	80083a2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	7b1b      	ldrb	r3, [r3, #12]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d102      	bne.n	8008396 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f80b 	bl	80083ac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4618      	mov	r0, r3
 800839c:	f005 fb6d 	bl	800da7a <USB_DevDisconnect>

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
	...

080083ac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2201      	movs	r2, #1
 80083be:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083da:	4b05      	ldr	r3, [pc, #20]	@ (80083f0 <HAL_PCDEx_ActivateLPM+0x44>)
 80083dc:	4313      	orrs	r3, r2
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3714      	adds	r7, #20
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	10000003 	.word	0x10000003

080083f4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80083f4:	b480      	push	{r7}
 80083f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083f8:	4b05      	ldr	r3, [pc, #20]	@ (8008410 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a04      	ldr	r2, [pc, #16]	@ (8008410 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80083fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008402:	6013      	str	r3, [r2, #0]
}
 8008404:	bf00      	nop
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	40007000 	.word	0x40007000

08008414 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800841c:	2300      	movs	r3, #0
 800841e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e291      	b.n	800894e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	2b00      	cmp	r3, #0
 8008434:	f000 8087 	beq.w	8008546 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008438:	4b96      	ldr	r3, [pc, #600]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	f003 030c 	and.w	r3, r3, #12
 8008440:	2b04      	cmp	r3, #4
 8008442:	d00c      	beq.n	800845e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008444:	4b93      	ldr	r3, [pc, #588]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f003 030c 	and.w	r3, r3, #12
 800844c:	2b08      	cmp	r3, #8
 800844e:	d112      	bne.n	8008476 <HAL_RCC_OscConfig+0x62>
 8008450:	4b90      	ldr	r3, [pc, #576]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008458:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800845c:	d10b      	bne.n	8008476 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800845e:	4b8d      	ldr	r3, [pc, #564]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d06c      	beq.n	8008544 <HAL_RCC_OscConfig+0x130>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d168      	bne.n	8008544 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e26b      	b.n	800894e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800847e:	d106      	bne.n	800848e <HAL_RCC_OscConfig+0x7a>
 8008480:	4b84      	ldr	r3, [pc, #528]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a83      	ldr	r2, [pc, #524]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 8008486:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800848a:	6013      	str	r3, [r2, #0]
 800848c:	e02e      	b.n	80084ec <HAL_RCC_OscConfig+0xd8>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10c      	bne.n	80084b0 <HAL_RCC_OscConfig+0x9c>
 8008496:	4b7f      	ldr	r3, [pc, #508]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a7e      	ldr	r2, [pc, #504]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 800849c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084a0:	6013      	str	r3, [r2, #0]
 80084a2:	4b7c      	ldr	r3, [pc, #496]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a7b      	ldr	r2, [pc, #492]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 80084a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80084ac:	6013      	str	r3, [r2, #0]
 80084ae:	e01d      	b.n	80084ec <HAL_RCC_OscConfig+0xd8>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80084b8:	d10c      	bne.n	80084d4 <HAL_RCC_OscConfig+0xc0>
 80084ba:	4b76      	ldr	r3, [pc, #472]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a75      	ldr	r2, [pc, #468]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 80084c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80084c4:	6013      	str	r3, [r2, #0]
 80084c6:	4b73      	ldr	r3, [pc, #460]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a72      	ldr	r2, [pc, #456]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 80084cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084d0:	6013      	str	r3, [r2, #0]
 80084d2:	e00b      	b.n	80084ec <HAL_RCC_OscConfig+0xd8>
 80084d4:	4b6f      	ldr	r3, [pc, #444]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a6e      	ldr	r2, [pc, #440]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 80084da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084de:	6013      	str	r3, [r2, #0]
 80084e0:	4b6c      	ldr	r3, [pc, #432]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a6b      	ldr	r2, [pc, #428]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 80084e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80084ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d013      	beq.n	800851c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084f4:	f7fa f996 	bl	8002824 <HAL_GetTick>
 80084f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084fa:	e008      	b.n	800850e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084fc:	f7fa f992 	bl	8002824 <HAL_GetTick>
 8008500:	4602      	mov	r2, r0
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	2b64      	cmp	r3, #100	@ 0x64
 8008508:	d901      	bls.n	800850e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	e21f      	b.n	800894e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800850e:	4b61      	ldr	r3, [pc, #388]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d0f0      	beq.n	80084fc <HAL_RCC_OscConfig+0xe8>
 800851a:	e014      	b.n	8008546 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800851c:	f7fa f982 	bl	8002824 <HAL_GetTick>
 8008520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008522:	e008      	b.n	8008536 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008524:	f7fa f97e 	bl	8002824 <HAL_GetTick>
 8008528:	4602      	mov	r2, r0
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	2b64      	cmp	r3, #100	@ 0x64
 8008530:	d901      	bls.n	8008536 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e20b      	b.n	800894e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008536:	4b57      	ldr	r3, [pc, #348]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1f0      	bne.n	8008524 <HAL_RCC_OscConfig+0x110>
 8008542:	e000      	b.n	8008546 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 0302 	and.w	r3, r3, #2
 800854e:	2b00      	cmp	r3, #0
 8008550:	d069      	beq.n	8008626 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008552:	4b50      	ldr	r3, [pc, #320]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	f003 030c 	and.w	r3, r3, #12
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00b      	beq.n	8008576 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800855e:	4b4d      	ldr	r3, [pc, #308]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f003 030c 	and.w	r3, r3, #12
 8008566:	2b08      	cmp	r3, #8
 8008568:	d11c      	bne.n	80085a4 <HAL_RCC_OscConfig+0x190>
 800856a:	4b4a      	ldr	r3, [pc, #296]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d116      	bne.n	80085a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008576:	4b47      	ldr	r3, [pc, #284]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0302 	and.w	r3, r3, #2
 800857e:	2b00      	cmp	r3, #0
 8008580:	d005      	beq.n	800858e <HAL_RCC_OscConfig+0x17a>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	2b01      	cmp	r3, #1
 8008588:	d001      	beq.n	800858e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e1df      	b.n	800894e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800858e:	4b41      	ldr	r3, [pc, #260]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	00db      	lsls	r3, r3, #3
 800859c:	493d      	ldr	r1, [pc, #244]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80085a2:	e040      	b.n	8008626 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d023      	beq.n	80085f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80085ac:	4b39      	ldr	r3, [pc, #228]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a38      	ldr	r2, [pc, #224]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 80085b2:	f043 0301 	orr.w	r3, r3, #1
 80085b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085b8:	f7fa f934 	bl	8002824 <HAL_GetTick>
 80085bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085be:	e008      	b.n	80085d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085c0:	f7fa f930 	bl	8002824 <HAL_GetTick>
 80085c4:	4602      	mov	r2, r0
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d901      	bls.n	80085d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e1bd      	b.n	800894e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085d2:	4b30      	ldr	r3, [pc, #192]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0302 	and.w	r3, r3, #2
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d0f0      	beq.n	80085c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085de:	4b2d      	ldr	r3, [pc, #180]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	00db      	lsls	r3, r3, #3
 80085ec:	4929      	ldr	r1, [pc, #164]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	600b      	str	r3, [r1, #0]
 80085f2:	e018      	b.n	8008626 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085f4:	4b27      	ldr	r3, [pc, #156]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a26      	ldr	r2, [pc, #152]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 80085fa:	f023 0301 	bic.w	r3, r3, #1
 80085fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008600:	f7fa f910 	bl	8002824 <HAL_GetTick>
 8008604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008606:	e008      	b.n	800861a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008608:	f7fa f90c 	bl	8002824 <HAL_GetTick>
 800860c:	4602      	mov	r2, r0
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	2b02      	cmp	r3, #2
 8008614:	d901      	bls.n	800861a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e199      	b.n	800894e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800861a:	4b1e      	ldr	r3, [pc, #120]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f003 0302 	and.w	r3, r3, #2
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1f0      	bne.n	8008608 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 0308 	and.w	r3, r3, #8
 800862e:	2b00      	cmp	r3, #0
 8008630:	d038      	beq.n	80086a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d019      	beq.n	800866e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800863a:	4b16      	ldr	r3, [pc, #88]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 800863c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800863e:	4a15      	ldr	r2, [pc, #84]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 8008640:	f043 0301 	orr.w	r3, r3, #1
 8008644:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008646:	f7fa f8ed 	bl	8002824 <HAL_GetTick>
 800864a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800864c:	e008      	b.n	8008660 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800864e:	f7fa f8e9 	bl	8002824 <HAL_GetTick>
 8008652:	4602      	mov	r2, r0
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	2b02      	cmp	r3, #2
 800865a:	d901      	bls.n	8008660 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	e176      	b.n	800894e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008660:	4b0c      	ldr	r3, [pc, #48]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 8008662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008664:	f003 0302 	and.w	r3, r3, #2
 8008668:	2b00      	cmp	r3, #0
 800866a:	d0f0      	beq.n	800864e <HAL_RCC_OscConfig+0x23a>
 800866c:	e01a      	b.n	80086a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800866e:	4b09      	ldr	r3, [pc, #36]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 8008670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008672:	4a08      	ldr	r2, [pc, #32]	@ (8008694 <HAL_RCC_OscConfig+0x280>)
 8008674:	f023 0301 	bic.w	r3, r3, #1
 8008678:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800867a:	f7fa f8d3 	bl	8002824 <HAL_GetTick>
 800867e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008680:	e00a      	b.n	8008698 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008682:	f7fa f8cf 	bl	8002824 <HAL_GetTick>
 8008686:	4602      	mov	r2, r0
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	2b02      	cmp	r3, #2
 800868e:	d903      	bls.n	8008698 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	e15c      	b.n	800894e <HAL_RCC_OscConfig+0x53a>
 8008694:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008698:	4b91      	ldr	r3, [pc, #580]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 800869a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800869c:	f003 0302 	and.w	r3, r3, #2
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1ee      	bne.n	8008682 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 0304 	and.w	r3, r3, #4
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 80a4 	beq.w	80087fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086b2:	4b8b      	ldr	r3, [pc, #556]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 80086b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10d      	bne.n	80086da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80086be:	4b88      	ldr	r3, [pc, #544]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 80086c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086c2:	4a87      	ldr	r2, [pc, #540]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 80086c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80086ca:	4b85      	ldr	r3, [pc, #532]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 80086cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086d2:	60bb      	str	r3, [r7, #8]
 80086d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086d6:	2301      	movs	r3, #1
 80086d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80086da:	4b82      	ldr	r3, [pc, #520]	@ (80088e4 <HAL_RCC_OscConfig+0x4d0>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d118      	bne.n	8008718 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80086e6:	4b7f      	ldr	r3, [pc, #508]	@ (80088e4 <HAL_RCC_OscConfig+0x4d0>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a7e      	ldr	r2, [pc, #504]	@ (80088e4 <HAL_RCC_OscConfig+0x4d0>)
 80086ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80086f2:	f7fa f897 	bl	8002824 <HAL_GetTick>
 80086f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80086f8:	e008      	b.n	800870c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086fa:	f7fa f893 	bl	8002824 <HAL_GetTick>
 80086fe:	4602      	mov	r2, r0
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	2b64      	cmp	r3, #100	@ 0x64
 8008706:	d901      	bls.n	800870c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008708:	2303      	movs	r3, #3
 800870a:	e120      	b.n	800894e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800870c:	4b75      	ldr	r3, [pc, #468]	@ (80088e4 <HAL_RCC_OscConfig+0x4d0>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008714:	2b00      	cmp	r3, #0
 8008716:	d0f0      	beq.n	80086fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d106      	bne.n	800872e <HAL_RCC_OscConfig+0x31a>
 8008720:	4b6f      	ldr	r3, [pc, #444]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 8008722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008724:	4a6e      	ldr	r2, [pc, #440]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 8008726:	f043 0301 	orr.w	r3, r3, #1
 800872a:	6713      	str	r3, [r2, #112]	@ 0x70
 800872c:	e02d      	b.n	800878a <HAL_RCC_OscConfig+0x376>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10c      	bne.n	8008750 <HAL_RCC_OscConfig+0x33c>
 8008736:	4b6a      	ldr	r3, [pc, #424]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 8008738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800873a:	4a69      	ldr	r2, [pc, #420]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 800873c:	f023 0301 	bic.w	r3, r3, #1
 8008740:	6713      	str	r3, [r2, #112]	@ 0x70
 8008742:	4b67      	ldr	r3, [pc, #412]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 8008744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008746:	4a66      	ldr	r2, [pc, #408]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 8008748:	f023 0304 	bic.w	r3, r3, #4
 800874c:	6713      	str	r3, [r2, #112]	@ 0x70
 800874e:	e01c      	b.n	800878a <HAL_RCC_OscConfig+0x376>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	2b05      	cmp	r3, #5
 8008756:	d10c      	bne.n	8008772 <HAL_RCC_OscConfig+0x35e>
 8008758:	4b61      	ldr	r3, [pc, #388]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 800875a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800875c:	4a60      	ldr	r2, [pc, #384]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 800875e:	f043 0304 	orr.w	r3, r3, #4
 8008762:	6713      	str	r3, [r2, #112]	@ 0x70
 8008764:	4b5e      	ldr	r3, [pc, #376]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 8008766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008768:	4a5d      	ldr	r2, [pc, #372]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 800876a:	f043 0301 	orr.w	r3, r3, #1
 800876e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008770:	e00b      	b.n	800878a <HAL_RCC_OscConfig+0x376>
 8008772:	4b5b      	ldr	r3, [pc, #364]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 8008774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008776:	4a5a      	ldr	r2, [pc, #360]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 8008778:	f023 0301 	bic.w	r3, r3, #1
 800877c:	6713      	str	r3, [r2, #112]	@ 0x70
 800877e:	4b58      	ldr	r3, [pc, #352]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 8008780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008782:	4a57      	ldr	r2, [pc, #348]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 8008784:	f023 0304 	bic.w	r3, r3, #4
 8008788:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d015      	beq.n	80087be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008792:	f7fa f847 	bl	8002824 <HAL_GetTick>
 8008796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008798:	e00a      	b.n	80087b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800879a:	f7fa f843 	bl	8002824 <HAL_GetTick>
 800879e:	4602      	mov	r2, r0
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d901      	bls.n	80087b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e0ce      	b.n	800894e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80087b0:	4b4b      	ldr	r3, [pc, #300]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 80087b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087b4:	f003 0302 	and.w	r3, r3, #2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d0ee      	beq.n	800879a <HAL_RCC_OscConfig+0x386>
 80087bc:	e014      	b.n	80087e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087be:	f7fa f831 	bl	8002824 <HAL_GetTick>
 80087c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087c4:	e00a      	b.n	80087dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087c6:	f7fa f82d 	bl	8002824 <HAL_GetTick>
 80087ca:	4602      	mov	r2, r0
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d901      	bls.n	80087dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80087d8:	2303      	movs	r3, #3
 80087da:	e0b8      	b.n	800894e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087dc:	4b40      	ldr	r3, [pc, #256]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 80087de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087e0:	f003 0302 	and.w	r3, r3, #2
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d1ee      	bne.n	80087c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80087e8:	7dfb      	ldrb	r3, [r7, #23]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d105      	bne.n	80087fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087ee:	4b3c      	ldr	r3, [pc, #240]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 80087f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087f2:	4a3b      	ldr	r2, [pc, #236]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 80087f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087f8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f000 80a4 	beq.w	800894c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008804:	4b36      	ldr	r3, [pc, #216]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	f003 030c 	and.w	r3, r3, #12
 800880c:	2b08      	cmp	r3, #8
 800880e:	d06b      	beq.n	80088e8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	2b02      	cmp	r3, #2
 8008816:	d149      	bne.n	80088ac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008818:	4b31      	ldr	r3, [pc, #196]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a30      	ldr	r2, [pc, #192]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 800881e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008824:	f7f9 fffe 	bl	8002824 <HAL_GetTick>
 8008828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800882a:	e008      	b.n	800883e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800882c:	f7f9 fffa 	bl	8002824 <HAL_GetTick>
 8008830:	4602      	mov	r2, r0
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	2b02      	cmp	r3, #2
 8008838:	d901      	bls.n	800883e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e087      	b.n	800894e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800883e:	4b28      	ldr	r3, [pc, #160]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1f0      	bne.n	800882c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	69da      	ldr	r2, [r3, #28]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	431a      	orrs	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008858:	019b      	lsls	r3, r3, #6
 800885a:	431a      	orrs	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008860:	085b      	lsrs	r3, r3, #1
 8008862:	3b01      	subs	r3, #1
 8008864:	041b      	lsls	r3, r3, #16
 8008866:	431a      	orrs	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800886c:	061b      	lsls	r3, r3, #24
 800886e:	4313      	orrs	r3, r2
 8008870:	4a1b      	ldr	r2, [pc, #108]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 8008872:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008876:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008878:	4b19      	ldr	r3, [pc, #100]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a18      	ldr	r2, [pc, #96]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 800887e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008884:	f7f9 ffce 	bl	8002824 <HAL_GetTick>
 8008888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800888a:	e008      	b.n	800889e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800888c:	f7f9 ffca 	bl	8002824 <HAL_GetTick>
 8008890:	4602      	mov	r2, r0
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	2b02      	cmp	r3, #2
 8008898:	d901      	bls.n	800889e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	e057      	b.n	800894e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800889e:	4b10      	ldr	r3, [pc, #64]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d0f0      	beq.n	800888c <HAL_RCC_OscConfig+0x478>
 80088aa:	e04f      	b.n	800894c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088ac:	4b0c      	ldr	r3, [pc, #48]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a0b      	ldr	r2, [pc, #44]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 80088b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80088b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088b8:	f7f9 ffb4 	bl	8002824 <HAL_GetTick>
 80088bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088be:	e008      	b.n	80088d2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088c0:	f7f9 ffb0 	bl	8002824 <HAL_GetTick>
 80088c4:	4602      	mov	r2, r0
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d901      	bls.n	80088d2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80088ce:	2303      	movs	r3, #3
 80088d0:	e03d      	b.n	800894e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088d2:	4b03      	ldr	r3, [pc, #12]	@ (80088e0 <HAL_RCC_OscConfig+0x4cc>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1f0      	bne.n	80088c0 <HAL_RCC_OscConfig+0x4ac>
 80088de:	e035      	b.n	800894c <HAL_RCC_OscConfig+0x538>
 80088e0:	40023800 	.word	0x40023800
 80088e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80088e8:	4b1b      	ldr	r3, [pc, #108]	@ (8008958 <HAL_RCC_OscConfig+0x544>)
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d028      	beq.n	8008948 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008900:	429a      	cmp	r2, r3
 8008902:	d121      	bne.n	8008948 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800890e:	429a      	cmp	r2, r3
 8008910:	d11a      	bne.n	8008948 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008918:	4013      	ands	r3, r2
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800891e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008920:	4293      	cmp	r3, r2
 8008922:	d111      	bne.n	8008948 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800892e:	085b      	lsrs	r3, r3, #1
 8008930:	3b01      	subs	r3, #1
 8008932:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008934:	429a      	cmp	r2, r3
 8008936:	d107      	bne.n	8008948 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008942:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008944:	429a      	cmp	r2, r3
 8008946:	d001      	beq.n	800894c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	e000      	b.n	800894e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3718      	adds	r7, #24
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	40023800 	.word	0x40023800

0800895c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008966:	2300      	movs	r3, #0
 8008968:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d101      	bne.n	8008974 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	e0d0      	b.n	8008b16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008974:	4b6a      	ldr	r3, [pc, #424]	@ (8008b20 <HAL_RCC_ClockConfig+0x1c4>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 030f 	and.w	r3, r3, #15
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	429a      	cmp	r2, r3
 8008980:	d910      	bls.n	80089a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008982:	4b67      	ldr	r3, [pc, #412]	@ (8008b20 <HAL_RCC_ClockConfig+0x1c4>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f023 020f 	bic.w	r2, r3, #15
 800898a:	4965      	ldr	r1, [pc, #404]	@ (8008b20 <HAL_RCC_ClockConfig+0x1c4>)
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	4313      	orrs	r3, r2
 8008990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008992:	4b63      	ldr	r3, [pc, #396]	@ (8008b20 <HAL_RCC_ClockConfig+0x1c4>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 030f 	and.w	r3, r3, #15
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	429a      	cmp	r2, r3
 800899e:	d001      	beq.n	80089a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e0b8      	b.n	8008b16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d020      	beq.n	80089f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0304 	and.w	r3, r3, #4
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d005      	beq.n	80089c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80089bc:	4b59      	ldr	r3, [pc, #356]	@ (8008b24 <HAL_RCC_ClockConfig+0x1c8>)
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	4a58      	ldr	r2, [pc, #352]	@ (8008b24 <HAL_RCC_ClockConfig+0x1c8>)
 80089c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80089c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 0308 	and.w	r3, r3, #8
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d005      	beq.n	80089e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80089d4:	4b53      	ldr	r3, [pc, #332]	@ (8008b24 <HAL_RCC_ClockConfig+0x1c8>)
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	4a52      	ldr	r2, [pc, #328]	@ (8008b24 <HAL_RCC_ClockConfig+0x1c8>)
 80089da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80089de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089e0:	4b50      	ldr	r3, [pc, #320]	@ (8008b24 <HAL_RCC_ClockConfig+0x1c8>)
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	494d      	ldr	r1, [pc, #308]	@ (8008b24 <HAL_RCC_ClockConfig+0x1c8>)
 80089ee:	4313      	orrs	r3, r2
 80089f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d040      	beq.n	8008a80 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d107      	bne.n	8008a16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a06:	4b47      	ldr	r3, [pc, #284]	@ (8008b24 <HAL_RCC_ClockConfig+0x1c8>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d115      	bne.n	8008a3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e07f      	b.n	8008b16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d107      	bne.n	8008a2e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a1e:	4b41      	ldr	r3, [pc, #260]	@ (8008b24 <HAL_RCC_ClockConfig+0x1c8>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d109      	bne.n	8008a3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e073      	b.n	8008b16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8008b24 <HAL_RCC_ClockConfig+0x1c8>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0302 	and.w	r3, r3, #2
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d101      	bne.n	8008a3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e06b      	b.n	8008b16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a3e:	4b39      	ldr	r3, [pc, #228]	@ (8008b24 <HAL_RCC_ClockConfig+0x1c8>)
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f023 0203 	bic.w	r2, r3, #3
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	4936      	ldr	r1, [pc, #216]	@ (8008b24 <HAL_RCC_ClockConfig+0x1c8>)
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a50:	f7f9 fee8 	bl	8002824 <HAL_GetTick>
 8008a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a56:	e00a      	b.n	8008a6e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a58:	f7f9 fee4 	bl	8002824 <HAL_GetTick>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d901      	bls.n	8008a6e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	e053      	b.n	8008b16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8008b24 <HAL_RCC_ClockConfig+0x1c8>)
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f003 020c 	and.w	r2, r3, #12
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d1eb      	bne.n	8008a58 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a80:	4b27      	ldr	r3, [pc, #156]	@ (8008b20 <HAL_RCC_ClockConfig+0x1c4>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 030f 	and.w	r3, r3, #15
 8008a88:	683a      	ldr	r2, [r7, #0]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d210      	bcs.n	8008ab0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a8e:	4b24      	ldr	r3, [pc, #144]	@ (8008b20 <HAL_RCC_ClockConfig+0x1c4>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f023 020f 	bic.w	r2, r3, #15
 8008a96:	4922      	ldr	r1, [pc, #136]	@ (8008b20 <HAL_RCC_ClockConfig+0x1c4>)
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a9e:	4b20      	ldr	r3, [pc, #128]	@ (8008b20 <HAL_RCC_ClockConfig+0x1c4>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 030f 	and.w	r3, r3, #15
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d001      	beq.n	8008ab0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e032      	b.n	8008b16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 0304 	and.w	r3, r3, #4
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d008      	beq.n	8008ace <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008abc:	4b19      	ldr	r3, [pc, #100]	@ (8008b24 <HAL_RCC_ClockConfig+0x1c8>)
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	4916      	ldr	r1, [pc, #88]	@ (8008b24 <HAL_RCC_ClockConfig+0x1c8>)
 8008aca:	4313      	orrs	r3, r2
 8008acc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0308 	and.w	r3, r3, #8
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d009      	beq.n	8008aee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008ada:	4b12      	ldr	r3, [pc, #72]	@ (8008b24 <HAL_RCC_ClockConfig+0x1c8>)
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	00db      	lsls	r3, r3, #3
 8008ae8:	490e      	ldr	r1, [pc, #56]	@ (8008b24 <HAL_RCC_ClockConfig+0x1c8>)
 8008aea:	4313      	orrs	r3, r2
 8008aec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008aee:	f000 f821 	bl	8008b34 <HAL_RCC_GetSysClockFreq>
 8008af2:	4602      	mov	r2, r0
 8008af4:	4b0b      	ldr	r3, [pc, #44]	@ (8008b24 <HAL_RCC_ClockConfig+0x1c8>)
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	091b      	lsrs	r3, r3, #4
 8008afa:	f003 030f 	and.w	r3, r3, #15
 8008afe:	490a      	ldr	r1, [pc, #40]	@ (8008b28 <HAL_RCC_ClockConfig+0x1cc>)
 8008b00:	5ccb      	ldrb	r3, [r1, r3]
 8008b02:	fa22 f303 	lsr.w	r3, r2, r3
 8008b06:	4a09      	ldr	r2, [pc, #36]	@ (8008b2c <HAL_RCC_ClockConfig+0x1d0>)
 8008b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008b0a:	4b09      	ldr	r3, [pc, #36]	@ (8008b30 <HAL_RCC_ClockConfig+0x1d4>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7f9 faa6 	bl	8002060 <HAL_InitTick>

  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	40023c00 	.word	0x40023c00
 8008b24:	40023800 	.word	0x40023800
 8008b28:	080221f4 	.word	0x080221f4
 8008b2c:	20000000 	.word	0x20000000
 8008b30:	20000004 	.word	0x20000004

08008b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b38:	b094      	sub	sp, #80	@ 0x50
 8008b3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b40:	2300      	movs	r3, #0
 8008b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b44:	2300      	movs	r3, #0
 8008b46:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b4c:	4b79      	ldr	r3, [pc, #484]	@ (8008d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	f003 030c 	and.w	r3, r3, #12
 8008b54:	2b08      	cmp	r3, #8
 8008b56:	d00d      	beq.n	8008b74 <HAL_RCC_GetSysClockFreq+0x40>
 8008b58:	2b08      	cmp	r3, #8
 8008b5a:	f200 80e1 	bhi.w	8008d20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d002      	beq.n	8008b68 <HAL_RCC_GetSysClockFreq+0x34>
 8008b62:	2b04      	cmp	r3, #4
 8008b64:	d003      	beq.n	8008b6e <HAL_RCC_GetSysClockFreq+0x3a>
 8008b66:	e0db      	b.n	8008d20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b68:	4b73      	ldr	r3, [pc, #460]	@ (8008d38 <HAL_RCC_GetSysClockFreq+0x204>)
 8008b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008b6c:	e0db      	b.n	8008d26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008b6e:	4b73      	ldr	r3, [pc, #460]	@ (8008d3c <HAL_RCC_GetSysClockFreq+0x208>)
 8008b70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008b72:	e0d8      	b.n	8008d26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b74:	4b6f      	ldr	r3, [pc, #444]	@ (8008d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b7c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008b7e:	4b6d      	ldr	r3, [pc, #436]	@ (8008d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d063      	beq.n	8008c52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b8a:	4b6a      	ldr	r3, [pc, #424]	@ (8008d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	099b      	lsrs	r3, r3, #6
 8008b90:	2200      	movs	r2, #0
 8008b92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b94:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ba2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008ba6:	4622      	mov	r2, r4
 8008ba8:	462b      	mov	r3, r5
 8008baa:	f04f 0000 	mov.w	r0, #0
 8008bae:	f04f 0100 	mov.w	r1, #0
 8008bb2:	0159      	lsls	r1, r3, #5
 8008bb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008bb8:	0150      	lsls	r0, r2, #5
 8008bba:	4602      	mov	r2, r0
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	1a51      	subs	r1, r2, r1
 8008bc2:	6139      	str	r1, [r7, #16]
 8008bc4:	4629      	mov	r1, r5
 8008bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8008bca:	617b      	str	r3, [r7, #20]
 8008bcc:	f04f 0200 	mov.w	r2, #0
 8008bd0:	f04f 0300 	mov.w	r3, #0
 8008bd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008bd8:	4659      	mov	r1, fp
 8008bda:	018b      	lsls	r3, r1, #6
 8008bdc:	4651      	mov	r1, sl
 8008bde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008be2:	4651      	mov	r1, sl
 8008be4:	018a      	lsls	r2, r1, #6
 8008be6:	4651      	mov	r1, sl
 8008be8:	ebb2 0801 	subs.w	r8, r2, r1
 8008bec:	4659      	mov	r1, fp
 8008bee:	eb63 0901 	sbc.w	r9, r3, r1
 8008bf2:	f04f 0200 	mov.w	r2, #0
 8008bf6:	f04f 0300 	mov.w	r3, #0
 8008bfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008bfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c06:	4690      	mov	r8, r2
 8008c08:	4699      	mov	r9, r3
 8008c0a:	4623      	mov	r3, r4
 8008c0c:	eb18 0303 	adds.w	r3, r8, r3
 8008c10:	60bb      	str	r3, [r7, #8]
 8008c12:	462b      	mov	r3, r5
 8008c14:	eb49 0303 	adc.w	r3, r9, r3
 8008c18:	60fb      	str	r3, [r7, #12]
 8008c1a:	f04f 0200 	mov.w	r2, #0
 8008c1e:	f04f 0300 	mov.w	r3, #0
 8008c22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008c26:	4629      	mov	r1, r5
 8008c28:	024b      	lsls	r3, r1, #9
 8008c2a:	4621      	mov	r1, r4
 8008c2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008c30:	4621      	mov	r1, r4
 8008c32:	024a      	lsls	r2, r1, #9
 8008c34:	4610      	mov	r0, r2
 8008c36:	4619      	mov	r1, r3
 8008c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008c44:	f7f7 fb34 	bl	80002b0 <__aeabi_uldivmod>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c50:	e058      	b.n	8008d04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c52:	4b38      	ldr	r3, [pc, #224]	@ (8008d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	099b      	lsrs	r3, r3, #6
 8008c58:	2200      	movs	r2, #0
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008c62:	623b      	str	r3, [r7, #32]
 8008c64:	2300      	movs	r3, #0
 8008c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008c6c:	4642      	mov	r2, r8
 8008c6e:	464b      	mov	r3, r9
 8008c70:	f04f 0000 	mov.w	r0, #0
 8008c74:	f04f 0100 	mov.w	r1, #0
 8008c78:	0159      	lsls	r1, r3, #5
 8008c7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c7e:	0150      	lsls	r0, r2, #5
 8008c80:	4602      	mov	r2, r0
 8008c82:	460b      	mov	r3, r1
 8008c84:	4641      	mov	r1, r8
 8008c86:	ebb2 0a01 	subs.w	sl, r2, r1
 8008c8a:	4649      	mov	r1, r9
 8008c8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008c90:	f04f 0200 	mov.w	r2, #0
 8008c94:	f04f 0300 	mov.w	r3, #0
 8008c98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008c9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008ca0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008ca4:	ebb2 040a 	subs.w	r4, r2, sl
 8008ca8:	eb63 050b 	sbc.w	r5, r3, fp
 8008cac:	f04f 0200 	mov.w	r2, #0
 8008cb0:	f04f 0300 	mov.w	r3, #0
 8008cb4:	00eb      	lsls	r3, r5, #3
 8008cb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008cba:	00e2      	lsls	r2, r4, #3
 8008cbc:	4614      	mov	r4, r2
 8008cbe:	461d      	mov	r5, r3
 8008cc0:	4643      	mov	r3, r8
 8008cc2:	18e3      	adds	r3, r4, r3
 8008cc4:	603b      	str	r3, [r7, #0]
 8008cc6:	464b      	mov	r3, r9
 8008cc8:	eb45 0303 	adc.w	r3, r5, r3
 8008ccc:	607b      	str	r3, [r7, #4]
 8008cce:	f04f 0200 	mov.w	r2, #0
 8008cd2:	f04f 0300 	mov.w	r3, #0
 8008cd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008cda:	4629      	mov	r1, r5
 8008cdc:	028b      	lsls	r3, r1, #10
 8008cde:	4621      	mov	r1, r4
 8008ce0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ce4:	4621      	mov	r1, r4
 8008ce6:	028a      	lsls	r2, r1, #10
 8008ce8:	4610      	mov	r0, r2
 8008cea:	4619      	mov	r1, r3
 8008cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cee:	2200      	movs	r2, #0
 8008cf0:	61bb      	str	r3, [r7, #24]
 8008cf2:	61fa      	str	r2, [r7, #28]
 8008cf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008cf8:	f7f7 fada 	bl	80002b0 <__aeabi_uldivmod>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	460b      	mov	r3, r1
 8008d00:	4613      	mov	r3, r2
 8008d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008d04:	4b0b      	ldr	r3, [pc, #44]	@ (8008d34 <HAL_RCC_GetSysClockFreq+0x200>)
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	0c1b      	lsrs	r3, r3, #16
 8008d0a:	f003 0303 	and.w	r3, r3, #3
 8008d0e:	3301      	adds	r3, #1
 8008d10:	005b      	lsls	r3, r3, #1
 8008d12:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008d14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008d1e:	e002      	b.n	8008d26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d20:	4b05      	ldr	r3, [pc, #20]	@ (8008d38 <HAL_RCC_GetSysClockFreq+0x204>)
 8008d22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3750      	adds	r7, #80	@ 0x50
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d32:	bf00      	nop
 8008d34:	40023800 	.word	0x40023800
 8008d38:	00f42400 	.word	0x00f42400
 8008d3c:	007a1200 	.word	0x007a1200

08008d40 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d40:	b480      	push	{r7}
 8008d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d44:	4b03      	ldr	r3, [pc, #12]	@ (8008d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8008d46:	681b      	ldr	r3, [r3, #0]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	20000000 	.word	0x20000000

08008d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008d5c:	f7ff fff0 	bl	8008d40 <HAL_RCC_GetHCLKFreq>
 8008d60:	4602      	mov	r2, r0
 8008d62:	4b05      	ldr	r3, [pc, #20]	@ (8008d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	0a9b      	lsrs	r3, r3, #10
 8008d68:	f003 0307 	and.w	r3, r3, #7
 8008d6c:	4903      	ldr	r1, [pc, #12]	@ (8008d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d6e:	5ccb      	ldrb	r3, [r1, r3]
 8008d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	40023800 	.word	0x40023800
 8008d7c:	08022204 	.word	0x08022204

08008d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008d84:	f7ff ffdc 	bl	8008d40 <HAL_RCC_GetHCLKFreq>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	4b05      	ldr	r3, [pc, #20]	@ (8008da0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d8c:	689b      	ldr	r3, [r3, #8]
 8008d8e:	0b5b      	lsrs	r3, r3, #13
 8008d90:	f003 0307 	and.w	r3, r3, #7
 8008d94:	4903      	ldr	r1, [pc, #12]	@ (8008da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d96:	5ccb      	ldrb	r3, [r1, r3]
 8008d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	40023800 	.word	0x40023800
 8008da4:	08022204 	.word	0x08022204

08008da8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	220f      	movs	r2, #15
 8008db6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008db8:	4b12      	ldr	r3, [pc, #72]	@ (8008e04 <HAL_RCC_GetClockConfig+0x5c>)
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f003 0203 	and.w	r2, r3, #3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8008e04 <HAL_RCC_GetClockConfig+0x5c>)
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8008e04 <HAL_RCC_GetClockConfig+0x5c>)
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008ddc:	4b09      	ldr	r3, [pc, #36]	@ (8008e04 <HAL_RCC_GetClockConfig+0x5c>)
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	08db      	lsrs	r3, r3, #3
 8008de2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008dea:	4b07      	ldr	r3, [pc, #28]	@ (8008e08 <HAL_RCC_GetClockConfig+0x60>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 020f 	and.w	r2, r3, #15
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	601a      	str	r2, [r3, #0]
}
 8008df6:	bf00      	nop
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	40023800 	.word	0x40023800
 8008e08:	40023c00 	.word	0x40023c00

08008e0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b088      	sub	sp, #32
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008e14:	2300      	movs	r3, #0
 8008e16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008e20:	2300      	movs	r3, #0
 8008e22:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008e24:	2300      	movs	r3, #0
 8008e26:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f003 0301 	and.w	r3, r3, #1
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d012      	beq.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008e34:	4b69      	ldr	r3, [pc, #420]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	4a68      	ldr	r2, [pc, #416]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e3a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008e3e:	6093      	str	r3, [r2, #8]
 8008e40:	4b66      	ldr	r3, [pc, #408]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e42:	689a      	ldr	r2, [r3, #8]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e48:	4964      	ldr	r1, [pc, #400]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d101      	bne.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008e56:	2301      	movs	r3, #1
 8008e58:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d017      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e66:	4b5d      	ldr	r3, [pc, #372]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e6c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e74:	4959      	ldr	r1, [pc, #356]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e84:	d101      	bne.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008e86:	2301      	movs	r3, #1
 8008e88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d101      	bne.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008e92:	2301      	movs	r3, #1
 8008e94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d017      	beq.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008ea2:	4b4e      	ldr	r3, [pc, #312]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ea8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eb0:	494a      	ldr	r1, [pc, #296]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ebc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008ec0:	d101      	bne.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d101      	bne.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d001      	beq.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 0320 	and.w	r3, r3, #32
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f000 808b 	beq.w	8009006 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008ef0:	4b3a      	ldr	r3, [pc, #232]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef4:	4a39      	ldr	r2, [pc, #228]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008efa:	6413      	str	r3, [r2, #64]	@ 0x40
 8008efc:	4b37      	ldr	r3, [pc, #220]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f04:	60bb      	str	r3, [r7, #8]
 8008f06:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008f08:	4b35      	ldr	r3, [pc, #212]	@ (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a34      	ldr	r2, [pc, #208]	@ (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008f0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f14:	f7f9 fc86 	bl	8002824 <HAL_GetTick>
 8008f18:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008f1a:	e008      	b.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f1c:	f7f9 fc82 	bl	8002824 <HAL_GetTick>
 8008f20:	4602      	mov	r2, r0
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	2b64      	cmp	r3, #100	@ 0x64
 8008f28:	d901      	bls.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	e357      	b.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d0f0      	beq.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008f3a:	4b28      	ldr	r3, [pc, #160]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f42:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d035      	beq.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f52:	693a      	ldr	r2, [r7, #16]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d02e      	beq.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f58:	4b20      	ldr	r3, [pc, #128]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f60:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008f62:	4b1e      	ldr	r3, [pc, #120]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f66:	4a1d      	ldr	r2, [pc, #116]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f6c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f72:	4a1a      	ldr	r2, [pc, #104]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f78:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008f7a:	4a18      	ldr	r2, [pc, #96]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008f80:	4b16      	ldr	r3, [pc, #88]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d114      	bne.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f8c:	f7f9 fc4a 	bl	8002824 <HAL_GetTick>
 8008f90:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f92:	e00a      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f94:	f7f9 fc46 	bl	8002824 <HAL_GetTick>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d901      	bls.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	e319      	b.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008faa:	4b0c      	ldr	r3, [pc, #48]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fae:	f003 0302 	and.w	r3, r3, #2
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d0ee      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fc2:	d111      	bne.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008fc4:	4b05      	ldr	r3, [pc, #20]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008fd0:	4b04      	ldr	r3, [pc, #16]	@ (8008fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008fd2:	400b      	ands	r3, r1
 8008fd4:	4901      	ldr	r1, [pc, #4]	@ (8008fdc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	608b      	str	r3, [r1, #8]
 8008fda:	e00b      	b.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008fdc:	40023800 	.word	0x40023800
 8008fe0:	40007000 	.word	0x40007000
 8008fe4:	0ffffcff 	.word	0x0ffffcff
 8008fe8:	4baa      	ldr	r3, [pc, #680]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	4aa9      	ldr	r2, [pc, #676]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fee:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008ff2:	6093      	str	r3, [r2, #8]
 8008ff4:	4ba7      	ldr	r3, [pc, #668]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ff6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009000:	49a4      	ldr	r1, [pc, #656]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009002:	4313      	orrs	r3, r2
 8009004:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f003 0310 	and.w	r3, r3, #16
 800900e:	2b00      	cmp	r3, #0
 8009010:	d010      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009012:	4ba0      	ldr	r3, [pc, #640]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009018:	4a9e      	ldr	r2, [pc, #632]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800901a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800901e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8009022:	4b9c      	ldr	r3, [pc, #624]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009024:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800902c:	4999      	ldr	r1, [pc, #612]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800902e:	4313      	orrs	r3, r2
 8009030:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00a      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009040:	4b94      	ldr	r3, [pc, #592]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009046:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800904e:	4991      	ldr	r1, [pc, #580]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009050:	4313      	orrs	r3, r2
 8009052:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00a      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009062:	4b8c      	ldr	r3, [pc, #560]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009068:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009070:	4988      	ldr	r1, [pc, #544]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009072:	4313      	orrs	r3, r2
 8009074:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00a      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009084:	4b83      	ldr	r3, [pc, #524]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800908a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009092:	4980      	ldr	r1, [pc, #512]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009094:	4313      	orrs	r3, r2
 8009096:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00a      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80090a6:	4b7b      	ldr	r3, [pc, #492]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090ac:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090b4:	4977      	ldr	r1, [pc, #476]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00a      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80090c8:	4b72      	ldr	r3, [pc, #456]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090ce:	f023 0203 	bic.w	r2, r3, #3
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090d6:	496f      	ldr	r1, [pc, #444]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090d8:	4313      	orrs	r3, r2
 80090da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00a      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80090ea:	4b6a      	ldr	r3, [pc, #424]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090f0:	f023 020c 	bic.w	r2, r3, #12
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090f8:	4966      	ldr	r1, [pc, #408]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090fa:	4313      	orrs	r3, r2
 80090fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00a      	beq.n	8009122 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800910c:	4b61      	ldr	r3, [pc, #388]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800910e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009112:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800911a:	495e      	ldr	r1, [pc, #376]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800911c:	4313      	orrs	r3, r2
 800911e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00a      	beq.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800912e:	4b59      	ldr	r3, [pc, #356]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009134:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800913c:	4955      	ldr	r1, [pc, #340]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800913e:	4313      	orrs	r3, r2
 8009140:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00a      	beq.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009150:	4b50      	ldr	r3, [pc, #320]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009156:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800915e:	494d      	ldr	r1, [pc, #308]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009160:	4313      	orrs	r3, r2
 8009162:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00a      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009172:	4b48      	ldr	r3, [pc, #288]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009178:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009180:	4944      	ldr	r1, [pc, #272]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009182:	4313      	orrs	r3, r2
 8009184:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00a      	beq.n	80091aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009194:	4b3f      	ldr	r3, [pc, #252]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800919a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091a2:	493c      	ldr	r1, [pc, #240]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091a4:	4313      	orrs	r3, r2
 80091a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00a      	beq.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80091b6:	4b37      	ldr	r3, [pc, #220]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091bc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091c4:	4933      	ldr	r1, [pc, #204]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091c6:	4313      	orrs	r3, r2
 80091c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00a      	beq.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80091d8:	4b2e      	ldr	r3, [pc, #184]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091de:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80091e6:	492b      	ldr	r1, [pc, #172]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091e8:	4313      	orrs	r3, r2
 80091ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d011      	beq.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80091fa:	4b26      	ldr	r3, [pc, #152]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009200:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009208:	4922      	ldr	r1, [pc, #136]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800920a:	4313      	orrs	r3, r2
 800920c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009214:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009218:	d101      	bne.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800921a:	2301      	movs	r3, #1
 800921c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f003 0308 	and.w	r3, r3, #8
 8009226:	2b00      	cmp	r3, #0
 8009228:	d001      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800922a:	2301      	movs	r3, #1
 800922c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00a      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800923a:	4b16      	ldr	r3, [pc, #88]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800923c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009240:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009248:	4912      	ldr	r1, [pc, #72]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800924a:	4313      	orrs	r3, r2
 800924c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009258:	2b00      	cmp	r3, #0
 800925a:	d00b      	beq.n	8009274 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800925c:	4b0d      	ldr	r3, [pc, #52]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800925e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009262:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800926c:	4909      	ldr	r1, [pc, #36]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800926e:	4313      	orrs	r3, r2
 8009270:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d006      	beq.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009282:	2b00      	cmp	r3, #0
 8009284:	f000 80d9 	beq.w	800943a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009288:	4b02      	ldr	r3, [pc, #8]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a01      	ldr	r2, [pc, #4]	@ (8009294 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800928e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009292:	e001      	b.n	8009298 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009294:	40023800 	.word	0x40023800
 8009298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800929a:	f7f9 fac3 	bl	8002824 <HAL_GetTick>
 800929e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80092a0:	e008      	b.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80092a2:	f7f9 fabf 	bl	8002824 <HAL_GetTick>
 80092a6:	4602      	mov	r2, r0
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	2b64      	cmp	r3, #100	@ 0x64
 80092ae:	d901      	bls.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80092b0:	2303      	movs	r3, #3
 80092b2:	e194      	b.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80092b4:	4b6c      	ldr	r3, [pc, #432]	@ (8009468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1f0      	bne.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f003 0301 	and.w	r3, r3, #1
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d021      	beq.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d11d      	bne.n	8009310 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80092d4:	4b64      	ldr	r3, [pc, #400]	@ (8009468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092da:	0c1b      	lsrs	r3, r3, #16
 80092dc:	f003 0303 	and.w	r3, r3, #3
 80092e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80092e2:	4b61      	ldr	r3, [pc, #388]	@ (8009468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092e8:	0e1b      	lsrs	r3, r3, #24
 80092ea:	f003 030f 	and.w	r3, r3, #15
 80092ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	019a      	lsls	r2, r3, #6
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	041b      	lsls	r3, r3, #16
 80092fa:	431a      	orrs	r2, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	061b      	lsls	r3, r3, #24
 8009300:	431a      	orrs	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	071b      	lsls	r3, r3, #28
 8009308:	4957      	ldr	r1, [pc, #348]	@ (8009468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800930a:	4313      	orrs	r3, r2
 800930c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009318:	2b00      	cmp	r3, #0
 800931a:	d004      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009320:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009324:	d00a      	beq.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800932e:	2b00      	cmp	r3, #0
 8009330:	d02e      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009336:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800933a:	d129      	bne.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800933c:	4b4a      	ldr	r3, [pc, #296]	@ (8009468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800933e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009342:	0c1b      	lsrs	r3, r3, #16
 8009344:	f003 0303 	and.w	r3, r3, #3
 8009348:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800934a:	4b47      	ldr	r3, [pc, #284]	@ (8009468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800934c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009350:	0f1b      	lsrs	r3, r3, #28
 8009352:	f003 0307 	and.w	r3, r3, #7
 8009356:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	019a      	lsls	r2, r3, #6
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	041b      	lsls	r3, r3, #16
 8009362:	431a      	orrs	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	061b      	lsls	r3, r3, #24
 800936a:	431a      	orrs	r2, r3
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	071b      	lsls	r3, r3, #28
 8009370:	493d      	ldr	r1, [pc, #244]	@ (8009468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009372:	4313      	orrs	r3, r2
 8009374:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009378:	4b3b      	ldr	r3, [pc, #236]	@ (8009468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800937a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800937e:	f023 021f 	bic.w	r2, r3, #31
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009386:	3b01      	subs	r3, #1
 8009388:	4937      	ldr	r1, [pc, #220]	@ (8009468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800938a:	4313      	orrs	r3, r2
 800938c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009398:	2b00      	cmp	r3, #0
 800939a:	d01d      	beq.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800939c:	4b32      	ldr	r3, [pc, #200]	@ (8009468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800939e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093a2:	0e1b      	lsrs	r3, r3, #24
 80093a4:	f003 030f 	and.w	r3, r3, #15
 80093a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80093aa:	4b2f      	ldr	r3, [pc, #188]	@ (8009468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80093b0:	0f1b      	lsrs	r3, r3, #28
 80093b2:	f003 0307 	and.w	r3, r3, #7
 80093b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	019a      	lsls	r2, r3, #6
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	041b      	lsls	r3, r3, #16
 80093c4:	431a      	orrs	r2, r3
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	061b      	lsls	r3, r3, #24
 80093ca:	431a      	orrs	r2, r3
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	071b      	lsls	r3, r3, #28
 80093d0:	4925      	ldr	r1, [pc, #148]	@ (8009468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093d2:	4313      	orrs	r3, r2
 80093d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d011      	beq.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	019a      	lsls	r2, r3, #6
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	041b      	lsls	r3, r3, #16
 80093f0:	431a      	orrs	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	061b      	lsls	r3, r3, #24
 80093f8:	431a      	orrs	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	071b      	lsls	r3, r3, #28
 8009400:	4919      	ldr	r1, [pc, #100]	@ (8009468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009402:	4313      	orrs	r3, r2
 8009404:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009408:	4b17      	ldr	r3, [pc, #92]	@ (8009468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a16      	ldr	r2, [pc, #88]	@ (8009468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800940e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009412:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009414:	f7f9 fa06 	bl	8002824 <HAL_GetTick>
 8009418:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800941a:	e008      	b.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800941c:	f7f9 fa02 	bl	8002824 <HAL_GetTick>
 8009420:	4602      	mov	r2, r0
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	2b64      	cmp	r3, #100	@ 0x64
 8009428:	d901      	bls.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800942a:	2303      	movs	r3, #3
 800942c:	e0d7      	b.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800942e:	4b0e      	ldr	r3, [pc, #56]	@ (8009468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009436:	2b00      	cmp	r3, #0
 8009438:	d0f0      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	2b01      	cmp	r3, #1
 800943e:	f040 80cd 	bne.w	80095dc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009442:	4b09      	ldr	r3, [pc, #36]	@ (8009468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a08      	ldr	r2, [pc, #32]	@ (8009468 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009448:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800944c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800944e:	f7f9 f9e9 	bl	8002824 <HAL_GetTick>
 8009452:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009454:	e00a      	b.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009456:	f7f9 f9e5 	bl	8002824 <HAL_GetTick>
 800945a:	4602      	mov	r2, r0
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	2b64      	cmp	r3, #100	@ 0x64
 8009462:	d903      	bls.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009464:	2303      	movs	r3, #3
 8009466:	e0ba      	b.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009468:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800946c:	4b5e      	ldr	r3, [pc, #376]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009474:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009478:	d0ed      	beq.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009482:	2b00      	cmp	r3, #0
 8009484:	d003      	beq.n	800948e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800948a:	2b00      	cmp	r3, #0
 800948c:	d009      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009496:	2b00      	cmp	r3, #0
 8009498:	d02e      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d12a      	bne.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80094a2:	4b51      	ldr	r3, [pc, #324]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094a8:	0c1b      	lsrs	r3, r3, #16
 80094aa:	f003 0303 	and.w	r3, r3, #3
 80094ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80094b0:	4b4d      	ldr	r3, [pc, #308]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094b6:	0f1b      	lsrs	r3, r3, #28
 80094b8:	f003 0307 	and.w	r3, r3, #7
 80094bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	695b      	ldr	r3, [r3, #20]
 80094c2:	019a      	lsls	r2, r3, #6
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	041b      	lsls	r3, r3, #16
 80094c8:	431a      	orrs	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	699b      	ldr	r3, [r3, #24]
 80094ce:	061b      	lsls	r3, r3, #24
 80094d0:	431a      	orrs	r2, r3
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	071b      	lsls	r3, r3, #28
 80094d6:	4944      	ldr	r1, [pc, #272]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094d8:	4313      	orrs	r3, r2
 80094da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80094de:	4b42      	ldr	r3, [pc, #264]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094e4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ec:	3b01      	subs	r3, #1
 80094ee:	021b      	lsls	r3, r3, #8
 80094f0:	493d      	ldr	r1, [pc, #244]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094f2:	4313      	orrs	r3, r2
 80094f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009500:	2b00      	cmp	r3, #0
 8009502:	d022      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009508:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800950c:	d11d      	bne.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800950e:	4b36      	ldr	r3, [pc, #216]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009514:	0e1b      	lsrs	r3, r3, #24
 8009516:	f003 030f 	and.w	r3, r3, #15
 800951a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800951c:	4b32      	ldr	r3, [pc, #200]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800951e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009522:	0f1b      	lsrs	r3, r3, #28
 8009524:	f003 0307 	and.w	r3, r3, #7
 8009528:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	019a      	lsls	r2, r3, #6
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6a1b      	ldr	r3, [r3, #32]
 8009534:	041b      	lsls	r3, r3, #16
 8009536:	431a      	orrs	r2, r3
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	061b      	lsls	r3, r3, #24
 800953c:	431a      	orrs	r2, r3
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	071b      	lsls	r3, r3, #28
 8009542:	4929      	ldr	r1, [pc, #164]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009544:	4313      	orrs	r3, r2
 8009546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 0308 	and.w	r3, r3, #8
 8009552:	2b00      	cmp	r3, #0
 8009554:	d028      	beq.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009556:	4b24      	ldr	r3, [pc, #144]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800955c:	0e1b      	lsrs	r3, r3, #24
 800955e:	f003 030f 	and.w	r3, r3, #15
 8009562:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009564:	4b20      	ldr	r3, [pc, #128]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800956a:	0c1b      	lsrs	r3, r3, #16
 800956c:	f003 0303 	and.w	r3, r3, #3
 8009570:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	019a      	lsls	r2, r3, #6
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	041b      	lsls	r3, r3, #16
 800957c:	431a      	orrs	r2, r3
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	061b      	lsls	r3, r3, #24
 8009582:	431a      	orrs	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	69db      	ldr	r3, [r3, #28]
 8009588:	071b      	lsls	r3, r3, #28
 800958a:	4917      	ldr	r1, [pc, #92]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800958c:	4313      	orrs	r3, r2
 800958e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009592:	4b15      	ldr	r3, [pc, #84]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009598:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a0:	4911      	ldr	r1, [pc, #68]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095a2:	4313      	orrs	r3, r2
 80095a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80095a8:	4b0f      	ldr	r3, [pc, #60]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a0e      	ldr	r2, [pc, #56]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095b4:	f7f9 f936 	bl	8002824 <HAL_GetTick>
 80095b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80095ba:	e008      	b.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80095bc:	f7f9 f932 	bl	8002824 <HAL_GetTick>
 80095c0:	4602      	mov	r2, r0
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	2b64      	cmp	r3, #100	@ 0x64
 80095c8:	d901      	bls.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80095ca:	2303      	movs	r3, #3
 80095cc:	e007      	b.n	80095de <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80095ce:	4b06      	ldr	r3, [pc, #24]	@ (80095e8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095da:	d1ef      	bne.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3720      	adds	r7, #32
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	40023800 	.word	0x40023800

080095ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d101      	bne.n	80095fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e0c6      	b.n	800978c <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009602:	2b00      	cmp	r3, #0
 8009604:	d108      	bne.n	8009618 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800960e:	d009      	beq.n	8009624 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	61da      	str	r2, [r3, #28]
 8009616:	e005      	b.n	8009624 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800962a:	b2db      	uxtb	r3, r3
 800962c:	2b00      	cmp	r3, #0
 800962e:	d106      	bne.n	800963e <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f7f8 f959 	bl	80018f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2202      	movs	r2, #2
 8009642:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009654:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800965e:	d902      	bls.n	8009666 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009660:	2300      	movs	r3, #0
 8009662:	60fb      	str	r3, [r7, #12]
 8009664:	e002      	b.n	800966c <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009666:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800966a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009674:	d007      	beq.n	8009686 <HAL_SPI_Init+0x9a>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800967e:	d002      	beq.n	8009686 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009696:	431a      	orrs	r2, r3
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	f003 0302 	and.w	r3, r3, #2
 80096a0:	431a      	orrs	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	f003 0301 	and.w	r3, r3, #1
 80096aa:	431a      	orrs	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	699b      	ldr	r3, [r3, #24]
 80096b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096b4:	431a      	orrs	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	69db      	ldr	r3, [r3, #28]
 80096ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096be:	431a      	orrs	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a1b      	ldr	r3, [r3, #32]
 80096c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096c8:	ea42 0103 	orr.w	r1, r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	430a      	orrs	r2, r1
 80096da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096e4:	d11b      	bne.n	800971e <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10b      	bne.n	8009706 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80096f6:	d903      	bls.n	8009700 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2202      	movs	r2, #2
 80096fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80096fe:	e002      	b.n	8009706 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800970a:	2b02      	cmp	r3, #2
 800970c:	d107      	bne.n	800971e <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800971c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	699b      	ldr	r3, [r3, #24]
 8009722:	0c1b      	lsrs	r3, r3, #16
 8009724:	f003 0204 	and.w	r2, r3, #4
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800972c:	f003 0310 	and.w	r3, r3, #16
 8009730:	431a      	orrs	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009736:	f003 0308 	and.w	r3, r3, #8
 800973a:	431a      	orrs	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009744:	ea42 0103 	orr.w	r1, r2, r3
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	430a      	orrs	r2, r1
 8009754:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800975a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800975e:	d105      	bne.n	800976c <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	b292      	uxth	r2, r2
 800976a:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	69da      	ldr	r2, [r3, #28]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800977a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2201      	movs	r2, #1
 8009786:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800978a:	2300      	movs	r3, #0
}
 800978c:	4618      	mov	r0, r3
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	4613      	mov	r3, r2
 80097a0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d001      	beq.n	80097b2 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 80097ae:	2302      	movs	r3, #2
 80097b0:	e0e9      	b.n	8009986 <HAL_SPI_Transmit_DMA+0x1f2>
  }

  if ((pData == NULL) || (Size == 0U))
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d002      	beq.n	80097be <HAL_SPI_Transmit_DMA+0x2a>
 80097b8:	88fb      	ldrh	r3, [r7, #6]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d101      	bne.n	80097c2 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e0e1      	b.n	8009986 <HAL_SPI_Transmit_DMA+0x1f2>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d101      	bne.n	80097d0 <HAL_SPI_Transmit_DMA+0x3c>
 80097cc:	2302      	movs	r3, #2
 80097ce:	e0da      	b.n	8009986 <HAL_SPI_Transmit_DMA+0x1f2>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2203      	movs	r2, #3
 80097dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2200      	movs	r2, #0
 80097e4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	68ba      	ldr	r2, [r7, #8]
 80097ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	88fa      	ldrh	r2, [r7, #6]
 80097f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	88fa      	ldrh	r2, [r7, #6]
 80097f6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2200      	movs	r2, #0
 80097fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2200      	movs	r2, #0
 8009802:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2200      	movs	r2, #0
 8009808:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009822:	d10f      	bne.n	8009844 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009832:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009842:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009848:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800984c:	d10f      	bne.n	800986e <HAL_SPI_Transmit_DMA+0xda>
  {
    SPI_RESET_CRC(hspi);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800985c:	601a      	str	r2, [r3, #0]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800986c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009872:	4a47      	ldr	r2, [pc, #284]	@ (8009990 <HAL_SPI_Transmit_DMA+0x1fc>)
 8009874:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800987a:	4a46      	ldr	r2, [pc, #280]	@ (8009994 <HAL_SPI_Transmit_DMA+0x200>)
 800987c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009882:	4a45      	ldr	r2, [pc, #276]	@ (8009998 <HAL_SPI_Transmit_DMA+0x204>)
 8009884:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800988a:	2200      	movs	r2, #0
 800988c:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800989c:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80098a6:	d82d      	bhi.n	8009904 <HAL_SPI_Transmit_DMA+0x170>
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ac:	699b      	ldr	r3, [r3, #24]
 80098ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098b2:	d127      	bne.n	8009904 <HAL_SPI_Transmit_DMA+0x170>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	f003 0301 	and.w	r3, r3, #1
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d10f      	bne.n	80098e2 <HAL_SPI_Transmit_DMA+0x14e>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	685a      	ldr	r2, [r3, #4]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80098d0:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	085b      	lsrs	r3, r3, #1
 80098da:	b29a      	uxth	r2, r3
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80098e0:	e010      	b.n	8009904 <HAL_SPI_Transmit_DMA+0x170>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	685a      	ldr	r2, [r3, #4]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80098f0:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	085b      	lsrs	r3, r3, #1
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	3301      	adds	r3, #1
 80098fe:	b29a      	uxth	r2, r3
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800990c:	4619      	mov	r1, r3
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	330c      	adds	r3, #12
 8009914:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800991a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800991c:	f7fa fa22 	bl	8003d64 <HAL_DMA_Start_IT>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d00b      	beq.n	800993e <HAL_SPI_Transmit_DMA+0x1aa>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800992a:	f043 0210 	orr.w	r2, r3, #16
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e023      	b.n	8009986 <HAL_SPI_Transmit_DMA+0x1f2>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009948:	2b40      	cmp	r3, #64	@ 0x40
 800994a:	d007      	beq.n	800995c <HAL_SPI_Transmit_DMA+0x1c8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800995a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	685a      	ldr	r2, [r3, #4]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f042 0220 	orr.w	r2, r2, #32
 8009972:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	685a      	ldr	r2, [r3, #4]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f042 0202 	orr.w	r2, r2, #2
 8009982:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	0800a703 	.word	0x0800a703
 8009994:	0800a3b5 	.word	0x0800a3b5
 8009998:	0800a757 	.word	0x0800a757

0800999c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	4613      	mov	r3, r2
 80099a8:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d001      	beq.n	80099ba <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 80099b6:	2302      	movs	r3, #2
 80099b8:	e11a      	b.n	8009bf0 <HAL_SPI_Receive_DMA+0x254>
  }

  if ((pData == NULL) || (Size == 0U))
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d002      	beq.n	80099c6 <HAL_SPI_Receive_DMA+0x2a>
 80099c0:	88fb      	ldrh	r3, [r7, #6]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d101      	bne.n	80099ca <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	e112      	b.n	8009bf0 <HAL_SPI_Receive_DMA+0x254>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d110      	bne.n	80099f4 <HAL_SPI_Receive_DMA+0x58>
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80099da:	d10b      	bne.n	80099f4 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2204      	movs	r2, #4
 80099e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80099e4:	88fb      	ldrh	r3, [r7, #6]
 80099e6:	68ba      	ldr	r2, [r7, #8]
 80099e8:	68b9      	ldr	r1, [r7, #8]
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f000 f90a 	bl	8009c04 <HAL_SPI_TransmitReceive_DMA>
 80099f0:	4603      	mov	r3, r0
 80099f2:	e0fd      	b.n	8009bf0 <HAL_SPI_Receive_DMA+0x254>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d101      	bne.n	8009a02 <HAL_SPI_Receive_DMA+0x66>
 80099fe:	2302      	movs	r3, #2
 8009a00:	e0f6      	b.n	8009bf0 <HAL_SPI_Receive_DMA+0x254>
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	2204      	movs	r2, #4
 8009a0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2200      	movs	r2, #0
 8009a16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	88fa      	ldrh	r2, [r7, #6]
 8009a22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	88fa      	ldrh	r2, [r7, #6]
 8009a2a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2200      	movs	r2, #0
 8009a32:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2200      	movs	r2, #0
 8009a38:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2200      	movs	r2, #0
 8009a44:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a4e:	d10f      	bne.n	8009a70 <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009a6e:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a78:	d10f      	bne.n	8009a9a <HAL_SPI_Receive_DMA+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009a88:	601a      	str	r2, [r3, #0]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009a98:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	685a      	ldr	r2, [r3, #4]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009aa8:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009ab2:	d908      	bls.n	8009ac6 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	685a      	ldr	r2, [r3, #4]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009ac2:	605a      	str	r2, [r3, #4]
 8009ac4:	e042      	b.n	8009b4c <HAL_SPI_Receive_DMA+0x1b0>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009ad4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ae0:	d134      	bne.n	8009b4c <HAL_SPI_Receive_DMA+0x1b0>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	685a      	ldr	r2, [r3, #4]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009af0:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	f003 0301 	and.w	r3, r3, #1
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d111      	bne.n	8009b26 <HAL_SPI_Receive_DMA+0x18a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	685a      	ldr	r2, [r3, #4]
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009b10:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	085b      	lsrs	r3, r3, #1
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009b24:	e012      	b.n	8009b4c <HAL_SPI_Receive_DMA+0x1b0>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	685a      	ldr	r2, [r3, #4]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009b34:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	085b      	lsrs	r3, r3, #1
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	3301      	adds	r3, #1
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b50:	4a29      	ldr	r2, [pc, #164]	@ (8009bf8 <HAL_SPI_Receive_DMA+0x25c>)
 8009b52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b58:	4a28      	ldr	r2, [pc, #160]	@ (8009bfc <HAL_SPI_Receive_DMA+0x260>)
 8009b5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b60:	4a27      	ldr	r2, [pc, #156]	@ (8009c00 <HAL_SPI_Receive_DMA+0x264>)
 8009b62:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b68:	2200      	movs	r2, #0
 8009b6a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	330c      	adds	r3, #12
 8009b76:	4619      	mov	r1, r3
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b7c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009b84:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009b86:	f7fa f8ed 	bl	8003d64 <HAL_DMA_Start_IT>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00b      	beq.n	8009ba8 <HAL_SPI_Receive_DMA+0x20c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b94:	f043 0210 	orr.w	r2, r3, #16
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e023      	b.n	8009bf0 <HAL_SPI_Receive_DMA+0x254>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bb2:	2b40      	cmp	r3, #64	@ 0x40
 8009bb4:	d007      	beq.n	8009bc6 <HAL_SPI_Receive_DMA+0x22a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009bc4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	685a      	ldr	r2, [r3, #4]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f042 0220 	orr.w	r2, r2, #32
 8009bdc:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	685a      	ldr	r2, [r3, #4]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f042 0201 	orr.w	r2, r2, #1
 8009bec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3710      	adds	r7, #16
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	0800a71f 	.word	0x0800a71f
 8009bfc:	0800a45d 	.word	0x0800a45d
 8009c00:	0800a757 	.word	0x0800a757

08009c04 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b086      	sub	sp, #24
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	607a      	str	r2, [r7, #4]
 8009c10:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009c18:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8009c20:	7dfb      	ldrb	r3, [r7, #23]
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d00c      	beq.n	8009c40 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c2c:	d106      	bne.n	8009c3c <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d102      	bne.n	8009c3c <HAL_SPI_TransmitReceive_DMA+0x38>
 8009c36:	7dfb      	ldrb	r3, [r7, #23]
 8009c38:	2b04      	cmp	r3, #4
 8009c3a:	d001      	beq.n	8009c40 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	e16d      	b.n	8009f1c <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d005      	beq.n	8009c52 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d002      	beq.n	8009c52 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8009c4c:	887b      	ldrh	r3, [r7, #2]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d101      	bne.n	8009c56 <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	e162      	b.n	8009f1c <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d101      	bne.n	8009c64 <HAL_SPI_TransmitReceive_DMA+0x60>
 8009c60:	2302      	movs	r3, #2
 8009c62:	e15b      	b.n	8009f1c <HAL_SPI_TransmitReceive_DMA+0x318>
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	2b04      	cmp	r3, #4
 8009c76:	d003      	beq.n	8009c80 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2205      	movs	r2, #5
 8009c7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2200      	movs	r2, #0
 8009c84:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	68ba      	ldr	r2, [r7, #8]
 8009c8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	887a      	ldrh	r2, [r7, #2]
 8009c90:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	887a      	ldrh	r2, [r7, #2]
 8009c96:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	887a      	ldrh	r2, [r7, #2]
 8009ca2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	887a      	ldrh	r2, [r7, #2]
 8009caa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009cc2:	d10f      	bne.n	8009ce4 <HAL_SPI_TransmitReceive_DMA+0xe0>
  {
    SPI_RESET_CRC(hspi);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009cd2:	601a      	str	r2, [r3, #0]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009ce2:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	685a      	ldr	r2, [r3, #4]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8009cf2:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009cfc:	d908      	bls.n	8009d10 <HAL_SPI_TransmitReceive_DMA+0x10c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	685a      	ldr	r2, [r3, #4]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009d0c:	605a      	str	r2, [r3, #4]
 8009d0e:	e06f      	b.n	8009df0 <HAL_SPI_TransmitReceive_DMA+0x1ec>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	685a      	ldr	r2, [r3, #4]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009d1e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d24:	699b      	ldr	r3, [r3, #24]
 8009d26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d2a:	d126      	bne.n	8009d7a <HAL_SPI_TransmitReceive_DMA+0x176>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8009d30:	f003 0301 	and.w	r3, r3, #1
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10f      	bne.n	8009d58 <HAL_SPI_TransmitReceive_DMA+0x154>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	685a      	ldr	r2, [r3, #4]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009d46:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	085b      	lsrs	r3, r3, #1
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009d56:	e010      	b.n	8009d7a <HAL_SPI_TransmitReceive_DMA+0x176>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	685a      	ldr	r2, [r3, #4]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d66:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	085b      	lsrs	r3, r3, #1
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	3301      	adds	r3, #1
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d7e:	699b      	ldr	r3, [r3, #24]
 8009d80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d84:	d134      	bne.n	8009df0 <HAL_SPI_TransmitReceive_DMA+0x1ec>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	685a      	ldr	r2, [r3, #4]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009d94:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	f003 0301 	and.w	r3, r3, #1
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d111      	bne.n	8009dca <HAL_SPI_TransmitReceive_DMA+0x1c6>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	685a      	ldr	r2, [r3, #4]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009db4:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	085b      	lsrs	r3, r3, #1
 8009dc0:	b29a      	uxth	r2, r3
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009dc8:	e012      	b.n	8009df0 <HAL_SPI_TransmitReceive_DMA+0x1ec>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	685a      	ldr	r2, [r3, #4]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009dd8:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	085b      	lsrs	r3, r3, #1
 8009de4:	b29b      	uxth	r3, r3
 8009de6:	3301      	adds	r3, #1
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009df6:	b2db      	uxtb	r3, r3
 8009df8:	2b04      	cmp	r3, #4
 8009dfa:	d108      	bne.n	8009e0e <HAL_SPI_TransmitReceive_DMA+0x20a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e00:	4a48      	ldr	r2, [pc, #288]	@ (8009f24 <HAL_SPI_TransmitReceive_DMA+0x320>)
 8009e02:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e08:	4a47      	ldr	r2, [pc, #284]	@ (8009f28 <HAL_SPI_TransmitReceive_DMA+0x324>)
 8009e0a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009e0c:	e007      	b.n	8009e1e <HAL_SPI_TransmitReceive_DMA+0x21a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e12:	4a46      	ldr	r2, [pc, #280]	@ (8009f2c <HAL_SPI_TransmitReceive_DMA+0x328>)
 8009e14:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e1a:	4a45      	ldr	r2, [pc, #276]	@ (8009f30 <HAL_SPI_TransmitReceive_DMA+0x32c>)
 8009e1c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e22:	4a44      	ldr	r2, [pc, #272]	@ (8009f34 <HAL_SPI_TransmitReceive_DMA+0x330>)
 8009e24:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	330c      	adds	r3, #12
 8009e38:	4619      	mov	r1, r3
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e3e:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009e46:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009e48:	f7f9 ff8c 	bl	8003d64 <HAL_DMA_Start_IT>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00b      	beq.n	8009e6a <HAL_SPI_TransmitReceive_DMA+0x266>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e56:	f043 0210 	orr.w	r2, r3, #16
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2200      	movs	r2, #0
 8009e62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	e058      	b.n	8009f1c <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	685a      	ldr	r2, [r3, #4]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f042 0201 	orr.w	r2, r2, #1
 8009e78:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e7e:	2200      	movs	r2, #0
 8009e80:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e86:	2200      	movs	r2, #0
 8009e88:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e8e:	2200      	movs	r2, #0
 8009e90:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e96:	2200      	movs	r2, #0
 8009e98:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	330c      	adds	r3, #12
 8009eaa:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009eb0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009eb2:	f7f9 ff57 	bl	8003d64 <HAL_DMA_Start_IT>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00b      	beq.n	8009ed4 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ec0:	f043 0210 	orr.w	r2, r3, #16
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e023      	b.n	8009f1c <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ede:	2b40      	cmp	r3, #64	@ 0x40
 8009ee0:	d007      	beq.n	8009ef2 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ef0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	685a      	ldr	r2, [r3, #4]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f042 0220 	orr.w	r2, r2, #32
 8009f08:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	685a      	ldr	r2, [r3, #4]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f042 0202 	orr.w	r2, r2, #2
 8009f18:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009f1a:	2300      	movs	r3, #0
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3718      	adds	r7, #24
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	0800a71f 	.word	0x0800a71f
 8009f28:	0800a45d 	.word	0x0800a45d
 8009f2c:	0800a73b 	.word	0x0800a73b
 8009f30:	0800a5bd 	.word	0x0800a5bd
 8009f34:	0800a757 	.word	0x0800a757

08009f38 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b08a      	sub	sp, #40	@ 0x28
 8009f3c:	af02      	add	r7, sp, #8
 8009f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8009f40:	2300      	movs	r3, #0
 8009f42:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8009f44:	4b88      	ldr	r3, [pc, #544]	@ (800a168 <HAL_SPI_Abort+0x230>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a88      	ldr	r2, [pc, #544]	@ (800a16c <HAL_SPI_Abort+0x234>)
 8009f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f4e:	0a5b      	lsrs	r3, r3, #9
 8009f50:	2264      	movs	r2, #100	@ 0x64
 8009f52:	fb02 f303 	mul.w	r3, r2, r3
 8009f56:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	685a      	ldr	r2, [r3, #4]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f022 0220 	bic.w	r2, r2, #32
 8009f6a:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f76:	2b80      	cmp	r3, #128	@ 0x80
 8009f78:	d117      	bne.n	8009faa <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	4a7c      	ldr	r2, [pc, #496]	@ (800a170 <HAL_SPI_Abort+0x238>)
 8009f7e:	651a      	str	r2, [r3, #80]	@ 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d106      	bne.n	8009f94 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009f92:	e008      	b.n	8009fa6 <HAL_SPI_Abort+0x6e>
      }
      count--;
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	3b01      	subs	r3, #1
 8009f98:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	2b07      	cmp	r3, #7
 8009fa4:	d1ec      	bne.n	8009f80 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fb4:	2b40      	cmp	r3, #64	@ 0x40
 8009fb6:	d117      	bne.n	8009fe8 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a6e      	ldr	r2, [pc, #440]	@ (800a174 <HAL_SPI_Abort+0x23c>)
 8009fbc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d106      	bne.n	8009fd2 <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fc8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009fd0:	e008      	b.n	8009fe4 <HAL_SPI_Abort+0xac>
      }
      count--;
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	2b07      	cmp	r3, #7
 8009fe2:	d1ec      	bne.n	8009fbe <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	f003 0302 	and.w	r3, r3, #2
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	d141      	bne.n	800a07a <HAL_SPI_Abort+0x142>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d03d      	beq.n	800a07a <HAL_SPI_Abort+0x142>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a002:	2200      	movs	r2, #0
 800a004:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7f9 ff0a 	bl	8003e24 <HAL_DMA_Abort>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d002      	beq.n	800a01c <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2240      	movs	r2, #64	@ 0x40
 800a01a:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	685a      	ldr	r2, [r3, #4]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f022 0202 	bic.w	r2, r2, #2
 800a02a:	605a      	str	r2, [r3, #4]

      if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a02c:	f7f8 fbfa 	bl	8002824 <HAL_GetTick>
 800a030:	4603      	mov	r3, r0
 800a032:	461a      	mov	r2, r3
 800a034:	2164      	movs	r1, #100	@ 0x64
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 fd5c 	bl	800aaf4 <SPI_EndRxTxTransaction>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d002      	beq.n	800a048 <HAL_SPI_Abort+0x110>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2240      	movs	r2, #64	@ 0x40
 800a046:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable SPI Peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a056:	601a      	str	r2, [r3, #0]

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800a058:	f7f8 fbe4 	bl	8002824 <HAL_GetTick>
 800a05c:	4603      	mov	r3, r0
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	2364      	movs	r3, #100	@ 0x64
 800a062:	2200      	movs	r2, #0
 800a064:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 fc31 	bl	800a8d0 <SPI_WaitFifoStateUntilTimeout>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d002      	beq.n	800a07a <HAL_SPI_Abort+0x142>
                                        HAL_GetTick()) != HAL_OK)
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2240      	movs	r2, #64	@ 0x40
 800a078:	661a      	str	r2, [r3, #96]	@ 0x60
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	f003 0301 	and.w	r3, r3, #1
 800a084:	2b01      	cmp	r3, #1
 800a086:	d143      	bne.n	800a110 <HAL_SPI_Abort+0x1d8>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d03f      	beq.n	800a110 <HAL_SPI_Abort+0x1d8>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a094:	2200      	movs	r2, #0
 800a096:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7f9 fec1 	bl	8003e24 <HAL_DMA_Abort>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <HAL_SPI_Abort+0x176>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2240      	movs	r2, #64	@ 0x40
 800a0ac:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0bc:	601a      	str	r2, [r3, #0]

      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a0be:	f7f8 fbb1 	bl	8002824 <HAL_GetTick>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	9300      	str	r3, [sp, #0]
 800a0c6:	2364      	movs	r3, #100	@ 0x64
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	2180      	movs	r1, #128	@ 0x80
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 fb77 	bl	800a7c0 <SPI_WaitFlagStateUntilTimeout>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d002      	beq.n	800a0de <HAL_SPI_Abort+0x1a6>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2240      	movs	r2, #64	@ 0x40
 800a0dc:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800a0de:	f7f8 fba1 	bl	8002824 <HAL_GetTick>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	2364      	movs	r3, #100	@ 0x64
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 fbee 	bl	800a8d0 <SPI_WaitFifoStateUntilTimeout>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d002      	beq.n	800a100 <HAL_SPI_Abort+0x1c8>
                                        HAL_GetTick()) != HAL_OK)
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2240      	movs	r2, #64	@ 0x40
 800a0fe:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	685a      	ldr	r2, [r3, #4]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f022 0201 	bic.w	r2, r2, #1
 800a10e:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a122:	2b40      	cmp	r3, #64	@ 0x40
 800a124:	d102      	bne.n	800a12c <HAL_SPI_Abort+0x1f4>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	77fb      	strb	r3, [r7, #31]
 800a12a:	e002      	b.n	800a132 <HAL_SPI_Abort+0x1fa>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a132:	2300      	movs	r3, #0
 800a134:	613b      	str	r3, [r7, #16]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	613b      	str	r3, [r7, #16]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	613b      	str	r3, [r7, #16]
 800a146:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a148:	2300      	movs	r3, #0
 800a14a:	60fb      	str	r3, [r7, #12]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	60fb      	str	r3, [r7, #12]
 800a154:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2201      	movs	r2, #1
 800a15a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return errorcode;
 800a15e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3720      	adds	r7, #32
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	20000000 	.word	0x20000000
 800a16c:	057619f1 	.word	0x057619f1
 800a170:	0800ac89 	.word	0x0800ac89
 800a174:	0800abc9 	.word	0x0800abc9

0800a178 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b088      	sub	sp, #32
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	099b      	lsrs	r3, r3, #6
 800a194:	f003 0301 	and.w	r3, r3, #1
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d10f      	bne.n	800a1bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00a      	beq.n	800a1bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a1a6:	69fb      	ldr	r3, [r7, #28]
 800a1a8:	099b      	lsrs	r3, r3, #6
 800a1aa:	f003 0301 	and.w	r3, r3, #1
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d004      	beq.n	800a1bc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	4798      	blx	r3
    return;
 800a1ba:	e0d7      	b.n	800a36c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	085b      	lsrs	r3, r3, #1
 800a1c0:	f003 0301 	and.w	r3, r3, #1
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00a      	beq.n	800a1de <HAL_SPI_IRQHandler+0x66>
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	09db      	lsrs	r3, r3, #7
 800a1cc:	f003 0301 	and.w	r3, r3, #1
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d004      	beq.n	800a1de <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	4798      	blx	r3
    return;
 800a1dc:	e0c6      	b.n	800a36c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	095b      	lsrs	r3, r3, #5
 800a1e2:	f003 0301 	and.w	r3, r3, #1
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d10c      	bne.n	800a204 <HAL_SPI_IRQHandler+0x8c>
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	099b      	lsrs	r3, r3, #6
 800a1ee:	f003 0301 	and.w	r3, r3, #1
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d106      	bne.n	800a204 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	0a1b      	lsrs	r3, r3, #8
 800a1fa:	f003 0301 	and.w	r3, r3, #1
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	f000 80b4 	beq.w	800a36c <HAL_SPI_IRQHandler+0x1f4>
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	095b      	lsrs	r3, r3, #5
 800a208:	f003 0301 	and.w	r3, r3, #1
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	f000 80ad 	beq.w	800a36c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	099b      	lsrs	r3, r3, #6
 800a216:	f003 0301 	and.w	r3, r3, #1
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d023      	beq.n	800a266 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a224:	b2db      	uxtb	r3, r3
 800a226:	2b03      	cmp	r3, #3
 800a228:	d011      	beq.n	800a24e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a22e:	f043 0204 	orr.w	r2, r3, #4
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a236:	2300      	movs	r3, #0
 800a238:	617b      	str	r3, [r7, #20]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	617b      	str	r3, [r7, #20]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	617b      	str	r3, [r7, #20]
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	e00b      	b.n	800a266 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a24e:	2300      	movs	r3, #0
 800a250:	613b      	str	r3, [r7, #16]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	613b      	str	r3, [r7, #16]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	613b      	str	r3, [r7, #16]
 800a262:	693b      	ldr	r3, [r7, #16]
        return;
 800a264:	e082      	b.n	800a36c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	095b      	lsrs	r3, r3, #5
 800a26a:	f003 0301 	and.w	r3, r3, #1
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d014      	beq.n	800a29c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a276:	f043 0201 	orr.w	r2, r3, #1
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a27e:	2300      	movs	r3, #0
 800a280:	60fb      	str	r3, [r7, #12]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	60fb      	str	r3, [r7, #12]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a298:	601a      	str	r2, [r3, #0]
 800a29a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a29c:	69bb      	ldr	r3, [r7, #24]
 800a29e:	0a1b      	lsrs	r3, r3, #8
 800a2a0:	f003 0301 	and.w	r3, r3, #1
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00c      	beq.n	800a2c2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2ac:	f043 0208 	orr.w	r2, r3, #8
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	60bb      	str	r3, [r7, #8]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	60bb      	str	r3, [r7, #8]
 800a2c0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d04f      	beq.n	800a36a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	685a      	ldr	r2, [r3, #4]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a2d8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	f003 0302 	and.w	r3, r3, #2
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d104      	bne.n	800a2f6 <HAL_SPI_IRQHandler+0x17e>
 800a2ec:	69fb      	ldr	r3, [r7, #28]
 800a2ee:	f003 0301 	and.w	r3, r3, #1
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d034      	beq.n	800a360 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	685a      	ldr	r2, [r3, #4]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f022 0203 	bic.w	r2, r2, #3
 800a304:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d011      	beq.n	800a332 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a312:	4a18      	ldr	r2, [pc, #96]	@ (800a374 <HAL_SPI_IRQHandler+0x1fc>)
 800a314:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7f9 fdf2 	bl	8003f04 <HAL_DMA_Abort_IT>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d005      	beq.n	800a332 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a32a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a336:	2b00      	cmp	r3, #0
 800a338:	d016      	beq.n	800a368 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a33e:	4a0d      	ldr	r2, [pc, #52]	@ (800a374 <HAL_SPI_IRQHandler+0x1fc>)
 800a340:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a346:	4618      	mov	r0, r3
 800a348:	f7f9 fddc 	bl	8003f04 <HAL_DMA_Abort_IT>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00a      	beq.n	800a368 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a356:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800a35e:	e003      	b.n	800a368 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f013 fb97 	bl	801da94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a366:	e000      	b.n	800a36a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a368:	bf00      	nop
    return;
 800a36a:	bf00      	nop
  }
}
 800a36c:	3720      	adds	r7, #32
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	0800a797 	.word	0x0800a797

0800a378 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a3a8:	bf00      	nop
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b086      	sub	sp, #24
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3c2:	f7f8 fa2f 	bl	8002824 <HAL_GetTick>
 800a3c6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3d6:	d03b      	beq.n	800a450 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	685a      	ldr	r2, [r3, #4]
 800a3de:	697b      	ldr	r3, [r7, #20]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f022 0220 	bic.w	r2, r2, #32
 800a3e6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	685a      	ldr	r2, [r3, #4]
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f022 0202 	bic.w	r2, r2, #2
 800a3f6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	2164      	movs	r1, #100	@ 0x64
 800a3fc:	6978      	ldr	r0, [r7, #20]
 800a3fe:	f000 fb79 	bl	800aaf4 <SPI_EndRxTxTransaction>
 800a402:	4603      	mov	r3, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	d005      	beq.n	800a414 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a40c:	f043 0220 	orr.w	r2, r3, #32
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d10a      	bne.n	800a432 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a41c:	2300      	movs	r3, #0
 800a41e:	60fb      	str	r3, [r7, #12]
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	68db      	ldr	r3, [r3, #12]
 800a426:	60fb      	str	r3, [r7, #12]
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	60fb      	str	r3, [r7, #12]
 800a430:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	2200      	movs	r2, #0
 800a436:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	2201      	movs	r2, #1
 800a43c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a444:	2b00      	cmp	r3, #0
 800a446:	d003      	beq.n	800a450 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a448:	6978      	ldr	r0, [r7, #20]
 800a44a:	f013 fb23 	bl	801da94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a44e:	e002      	b.n	800a456 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800a450:	6978      	ldr	r0, [r7, #20]
 800a452:	f013 fa3b 	bl	801d8cc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a456:	3718      	adds	r7, #24
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b08a      	sub	sp, #40	@ 0x28
 800a460:	af02      	add	r7, sp, #8
 800a462:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a468:	61fb      	str	r3, [r7, #28]
  uint32_t tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800a46a:	2300      	movs	r3, #0
 800a46c:	613b      	str	r3, [r7, #16]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a46e:	2300      	movs	r3, #0
 800a470:	73fb      	strb	r3, [r7, #15]
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a472:	f7f8 f9d7 	bl	8002824 <HAL_GetTick>
 800a476:	61b8      	str	r0, [r7, #24]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a486:	f000 8093 	beq.w	800a5b0 <SPI_DMAReceiveCplt+0x154>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	685a      	ldr	r2, [r3, #4]
 800a490:	69fb      	ldr	r3, [r7, #28]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f022 0220 	bic.w	r2, r2, #32
 800a498:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
    /* CRC handling */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a49a:	69fb      	ldr	r3, [r7, #28]
 800a49c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a49e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a4a2:	d13e      	bne.n	800a522 <SPI_DMAReceiveCplt+0xc6>
    {
      /* Wait until RXNE flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a4a4:	69bb      	ldr	r3, [r7, #24]
 800a4a6:	9300      	str	r3, [sp, #0]
 800a4a8:	2364      	movs	r3, #100	@ 0x64
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	2101      	movs	r1, #1
 800a4ae:	69f8      	ldr	r0, [r7, #28]
 800a4b0:	f000 f986 	bl	800a7c0 <SPI_WaitFlagStateUntilTimeout>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d005      	beq.n	800a4c6 <SPI_DMAReceiveCplt+0x6a>
      {
        /* Error on the CRC reception */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4be:	f043 0202 	orr.w	r2, r3, #2
 800a4c2:	69fb      	ldr	r3, [r7, #28]
 800a4c4:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      /* Read CRC */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a4ce:	d905      	bls.n	800a4dc <SPI_DMAReceiveCplt+0x80>
      {
        /* Read 16bit CRC */
        tmpreg = READ_REG(hspi->Instance->DR);
 800a4d0:	69fb      	ldr	r3, [r7, #28]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	613b      	str	r3, [r7, #16]
        /* To avoid GCC warning */
        UNUSED(tmpreg);
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	e022      	b.n	800a522 <SPI_DMAReceiveCplt+0xc6>
      }
      else
      {
        /* Initialize the 8bit temporary pointer */
        ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	330c      	adds	r3, #12
 800a4e2:	617b      	str	r3, [r7, #20]
        /* Read 8bit CRC */
        tmpreg8 = *ptmpreg8;
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	73fb      	strb	r3, [r7, #15]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 800a4ec:	7bfb      	ldrb	r3, [r7, #15]

        if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800a4ee:	69fb      	ldr	r3, [r7, #28]
 800a4f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	d115      	bne.n	800a522 <SPI_DMAReceiveCplt+0xc6>
        {
          if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	2364      	movs	r3, #100	@ 0x64
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	2101      	movs	r1, #1
 800a500:	69f8      	ldr	r0, [r7, #28]
 800a502:	f000 f95d 	bl	800a7c0 <SPI_WaitFlagStateUntilTimeout>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d005      	beq.n	800a518 <SPI_DMAReceiveCplt+0xbc>
          {
            /* Error on the CRC reception */
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a510:	f043 0202 	orr.w	r2, r3, #2
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
          tmpreg8 = *ptmpreg8;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	73fb      	strb	r3, [r7, #15]
          /* To avoid GCC warning */
          UNUSED(tmpreg8);
 800a520:	7bfb      	ldrb	r3, [r7, #15]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d10d      	bne.n	800a546 <SPI_DMAReceiveCplt+0xea>
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a532:	d108      	bne.n	800a546 <SPI_DMAReceiveCplt+0xea>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	685a      	ldr	r2, [r3, #4]
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f022 0203 	bic.w	r2, r2, #3
 800a542:	605a      	str	r2, [r3, #4]
 800a544:	e007      	b.n	800a556 <SPI_DMAReceiveCplt+0xfa>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f022 0201 	bic.w	r2, r2, #1
 800a554:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a556:	69ba      	ldr	r2, [r7, #24]
 800a558:	2164      	movs	r1, #100	@ 0x64
 800a55a:	69f8      	ldr	r0, [r7, #28]
 800a55c:	f000 fa4e 	bl	800a9fc <SPI_EndRxTransaction>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d002      	beq.n	800a56c <SPI_DMAReceiveCplt+0x110>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	2220      	movs	r2, #32
 800a56a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	2200      	movs	r2, #0
 800a570:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	2201      	movs	r2, #1
 800a578:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800a57c:	69fb      	ldr	r3, [r7, #28]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	f003 0310 	and.w	r3, r3, #16
 800a586:	2b10      	cmp	r3, #16
 800a588:	d10a      	bne.n	800a5a0 <SPI_DMAReceiveCplt+0x144>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a58e:	f043 0202 	orr.w	r2, r3, #2
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800a596:	69fb      	ldr	r3, [r7, #28]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800a59e:	609a      	str	r2, [r3, #8]
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d003      	beq.n	800a5b0 <SPI_DMAReceiveCplt+0x154>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a5a8:	69f8      	ldr	r0, [r7, #28]
 800a5aa:	f013 fa73 	bl	801da94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a5ae:	e002      	b.n	800a5b6 <SPI_DMAReceiveCplt+0x15a>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800a5b0:	69f8      	ldr	r0, [r7, #28]
 800a5b2:	f013 f9ab 	bl	801d90c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a5b6:	3720      	adds	r7, #32
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b08a      	sub	sp, #40	@ 0x28
 800a5c0:	af02      	add	r7, sp, #8
 800a5c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5c8:	61fb      	str	r3, [r7, #28]
  uint32_t tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	613b      	str	r3, [r7, #16]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	73fb      	strb	r3, [r7, #15]
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a5d2:	f7f8 f927 	bl	8002824 <HAL_GetTick>
 800a5d6:	61b8      	str	r0, [r7, #24]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5e6:	f000 8086 	beq.w	800a6f6 <SPI_DMATransmitReceiveCplt+0x13a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a5ea:	69fb      	ldr	r3, [r7, #28]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	685a      	ldr	r2, [r3, #4]
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f022 0220 	bic.w	r2, r2, #32
 800a5f8:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
    /* CRC handling */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a602:	d13d      	bne.n	800a680 <SPI_DMATransmitReceiveCplt+0xc4>
    {
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_8BIT))
 800a604:	69fb      	ldr	r3, [r7, #28]
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a60c:	d120      	bne.n	800a650 <SPI_DMATransmitReceiveCplt+0x94>
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a612:	2b01      	cmp	r3, #1
 800a614:	d11c      	bne.n	800a650 <SPI_DMATransmitReceiveCplt+0x94>
      {
        if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_QUARTER_FULL, SPI_DEFAULT_TIMEOUT,
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	2364      	movs	r3, #100	@ 0x64
 800a61c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a620:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a624:	69f8      	ldr	r0, [r7, #28]
 800a626:	f000 f953 	bl	800a8d0 <SPI_WaitFifoStateUntilTimeout>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d005      	beq.n	800a63c <SPI_DMATransmitReceiveCplt+0x80>
                                          tickstart) != HAL_OK)
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a634:	f043 0202 	orr.w	r2, r3, #2
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	661a      	str	r2, [r3, #96]	@ 0x60
        }
        /* Initialize the 8bit temporary pointer */
        ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a63c:	69fb      	ldr	r3, [r7, #28]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	330c      	adds	r3, #12
 800a642:	617b      	str	r3, [r7, #20]
        /* Read 8bit CRC */
        tmpreg8 = *ptmpreg8;
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	73fb      	strb	r3, [r7, #15]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 800a64c:	7bfb      	ldrb	r3, [r7, #15]
 800a64e:	e017      	b.n	800a680 <SPI_DMATransmitReceiveCplt+0xc4>
      }
      else
      {
        if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_HALF_FULL, SPI_DEFAULT_TIMEOUT,
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	2364      	movs	r3, #100	@ 0x64
 800a656:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a65a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a65e:	69f8      	ldr	r0, [r7, #28]
 800a660:	f000 f936 	bl	800a8d0 <SPI_WaitFifoStateUntilTimeout>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d005      	beq.n	800a676 <SPI_DMATransmitReceiveCplt+0xba>
                                          tickstart) != HAL_OK)
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a66a:	69fb      	ldr	r3, [r7, #28]
 800a66c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a66e:	f043 0202 	orr.w	r2, r3, #2
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	661a      	str	r2, [r3, #96]	@ 0x60
        }
        /* Read CRC to Flush DR and RXNE flag */
        tmpreg = READ_REG(hspi->Instance->DR);
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	613b      	str	r3, [r7, #16]
        /* To avoid GCC warning */
        UNUSED(tmpreg);
 800a67e:	693b      	ldr	r3, [r7, #16]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a680:	69ba      	ldr	r2, [r7, #24]
 800a682:	2164      	movs	r1, #100	@ 0x64
 800a684:	69f8      	ldr	r0, [r7, #28]
 800a686:	f000 fa35 	bl	800aaf4 <SPI_EndRxTxTransaction>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d005      	beq.n	800a69c <SPI_DMATransmitReceiveCplt+0xe0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a694:	f043 0220 	orr.w	r2, r3, #32
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	685a      	ldr	r2, [r3, #4]
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f022 0203 	bic.w	r2, r2, #3
 800a6aa:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	f003 0310 	and.w	r3, r3, #16
 800a6cc:	2b10      	cmp	r3, #16
 800a6ce:	d10a      	bne.n	800a6e6 <SPI_DMATransmitReceiveCplt+0x12a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6d4:	f043 0202 	orr.w	r2, r3, #2
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800a6e4:	609a      	str	r2, [r3, #8]
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a6e6:	69fb      	ldr	r3, [r7, #28]
 800a6e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d003      	beq.n	800a6f6 <SPI_DMATransmitReceiveCplt+0x13a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a6ee:	69f8      	ldr	r0, [r7, #28]
 800a6f0:	f013 f9d0 	bl	801da94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a6f4:	e002      	b.n	800a6fc <SPI_DMATransmitReceiveCplt+0x140>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800a6f6:	69f8      	ldr	r0, [r7, #28]
 800a6f8:	f013 f944 	bl	801d984 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a6fc:	3720      	adds	r7, #32
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b084      	sub	sp, #16
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a70e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f7ff fe31 	bl	800a378 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a716:	bf00      	nop
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b084      	sub	sp, #16
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a72a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f7ff fe2d 	bl	800a38c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a732:	bf00      	nop
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b084      	sub	sp, #16
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a746:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	f7ff fe29 	bl	800a3a0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a74e:	bf00      	nop
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b084      	sub	sp, #16
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a762:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	685a      	ldr	r2, [r3, #4]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f022 0203 	bic.w	r2, r2, #3
 800a772:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a778:	f043 0210 	orr.w	r2, r3, #16
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f013 f983 	bl	801da94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a78e:	bf00      	nop
 800a790:	3710      	adds	r7, #16
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}

0800a796 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a796:	b580      	push	{r7, lr}
 800a798:	b084      	sub	sp, #16
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7a2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	f013 f96e 	bl	801da94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a7b8:	bf00      	nop
 800a7ba:	3710      	adds	r7, #16
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b088      	sub	sp, #32
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	603b      	str	r3, [r7, #0]
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a7d0:	f7f8 f828 	bl	8002824 <HAL_GetTick>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d8:	1a9b      	subs	r3, r3, r2
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	4413      	add	r3, r2
 800a7de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a7e0:	f7f8 f820 	bl	8002824 <HAL_GetTick>
 800a7e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a7e6:	4b39      	ldr	r3, [pc, #228]	@ (800a8cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	015b      	lsls	r3, r3, #5
 800a7ec:	0d1b      	lsrs	r3, r3, #20
 800a7ee:	69fa      	ldr	r2, [r7, #28]
 800a7f0:	fb02 f303 	mul.w	r3, r2, r3
 800a7f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a7f6:	e055      	b.n	800a8a4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7fe:	d051      	beq.n	800a8a4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a800:	f7f8 f810 	bl	8002824 <HAL_GetTick>
 800a804:	4602      	mov	r2, r0
 800a806:	69bb      	ldr	r3, [r7, #24]
 800a808:	1ad3      	subs	r3, r2, r3
 800a80a:	69fa      	ldr	r2, [r7, #28]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d902      	bls.n	800a816 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d13d      	bne.n	800a892 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	685a      	ldr	r2, [r3, #4]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a824:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a82e:	d111      	bne.n	800a854 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a838:	d004      	beq.n	800a844 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a842:	d107      	bne.n	800a854 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a852:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a858:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a85c:	d10f      	bne.n	800a87e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a86c:	601a      	str	r2, [r3, #0]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a87c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2201      	movs	r2, #1
 800a882:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2200      	movs	r2, #0
 800a88a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a88e:	2303      	movs	r3, #3
 800a890:	e018      	b.n	800a8c4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d102      	bne.n	800a89e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800a898:	2300      	movs	r3, #0
 800a89a:	61fb      	str	r3, [r7, #28]
 800a89c:	e002      	b.n	800a8a4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	689a      	ldr	r2, [r3, #8]
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	68ba      	ldr	r2, [r7, #8]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	bf0c      	ite	eq
 800a8b4:	2301      	moveq	r3, #1
 800a8b6:	2300      	movne	r3, #0
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	79fb      	ldrb	r3, [r7, #7]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d19a      	bne.n	800a7f8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3720      	adds	r7, #32
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	20000000 	.word	0x20000000

0800a8d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b08a      	sub	sp, #40	@ 0x28
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	607a      	str	r2, [r7, #4]
 800a8dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a8e2:	f7f7 ff9f 	bl	8002824 <HAL_GetTick>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ea:	1a9b      	subs	r3, r3, r2
 800a8ec:	683a      	ldr	r2, [r7, #0]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a8f2:	f7f7 ff97 	bl	8002824 <HAL_GetTick>
 800a8f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	330c      	adds	r3, #12
 800a8fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a900:	4b3d      	ldr	r3, [pc, #244]	@ (800a9f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	4613      	mov	r3, r2
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	4413      	add	r3, r2
 800a90a:	00da      	lsls	r2, r3, #3
 800a90c:	1ad3      	subs	r3, r2, r3
 800a90e:	0d1b      	lsrs	r3, r3, #20
 800a910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a912:	fb02 f303 	mul.w	r3, r2, r3
 800a916:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a918:	e061      	b.n	800a9de <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a920:	d107      	bne.n	800a932 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d104      	bne.n	800a932 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a928:	69fb      	ldr	r3, [r7, #28]
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a930:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a938:	d051      	beq.n	800a9de <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a93a:	f7f7 ff73 	bl	8002824 <HAL_GetTick>
 800a93e:	4602      	mov	r2, r0
 800a940:	6a3b      	ldr	r3, [r7, #32]
 800a942:	1ad3      	subs	r3, r2, r3
 800a944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a946:	429a      	cmp	r2, r3
 800a948:	d902      	bls.n	800a950 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d13d      	bne.n	800a9cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	685a      	ldr	r2, [r3, #4]
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a95e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a968:	d111      	bne.n	800a98e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a972:	d004      	beq.n	800a97e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a97c:	d107      	bne.n	800a98e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a98c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a992:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a996:	d10f      	bne.n	800a9b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a9a6:	601a      	str	r2, [r3, #0]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a9b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a9c8:	2303      	movs	r3, #3
 800a9ca:	e011      	b.n	800a9f0 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d102      	bne.n	800a9d8 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9d6:	e002      	b.n	800a9de <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	689a      	ldr	r2, [r3, #8]
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	4013      	ands	r3, r2
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d195      	bne.n	800a91a <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3728      	adds	r7, #40	@ 0x28
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	20000000 	.word	0x20000000

0800a9fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b088      	sub	sp, #32
 800aa00:	af02      	add	r7, sp, #8
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	60b9      	str	r1, [r7, #8]
 800aa06:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aa10:	d111      	bne.n	800aa36 <SPI_EndRxTransaction+0x3a>
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa1a:	d004      	beq.n	800aa26 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa24:	d107      	bne.n	800aa36 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aa34:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aa3e:	d112      	bne.n	800aa66 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	9300      	str	r3, [sp, #0]
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	2200      	movs	r2, #0
 800aa48:	2180      	movs	r1, #128	@ 0x80
 800aa4a:	68f8      	ldr	r0, [r7, #12]
 800aa4c:	f7ff feb8 	bl	800a7c0 <SPI_WaitFlagStateUntilTimeout>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d021      	beq.n	800aa9a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa5a:	f043 0220 	orr.w	r2, r3, #32
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800aa62:	2303      	movs	r3, #3
 800aa64:	e03d      	b.n	800aae2 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800aa66:	4b21      	ldr	r3, [pc, #132]	@ (800aaec <SPI_EndRxTransaction+0xf0>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a21      	ldr	r2, [pc, #132]	@ (800aaf0 <SPI_EndRxTransaction+0xf4>)
 800aa6c:	fba2 2303 	umull	r2, r3, r2, r3
 800aa70:	0d5b      	lsrs	r3, r3, #21
 800aa72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800aa76:	fb02 f303 	mul.w	r3, r2, r3
 800aa7a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00a      	beq.n	800aa98 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	3b01      	subs	r3, #1
 800aa86:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa92:	2b80      	cmp	r3, #128	@ 0x80
 800aa94:	d0f2      	beq.n	800aa7c <SPI_EndRxTransaction+0x80>
 800aa96:	e000      	b.n	800aa9a <SPI_EndRxTransaction+0x9e>
        break;
 800aa98:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aaa2:	d11d      	bne.n	800aae0 <SPI_EndRxTransaction+0xe4>
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aaac:	d004      	beq.n	800aab8 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	689b      	ldr	r3, [r3, #8]
 800aab2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aab6:	d113      	bne.n	800aae0 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f7ff ff03 	bl	800a8d0 <SPI_WaitFifoStateUntilTimeout>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d007      	beq.n	800aae0 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aad4:	f043 0220 	orr.w	r2, r3, #32
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800aadc:	2303      	movs	r3, #3
 800aade:	e000      	b.n	800aae2 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800aae0:	2300      	movs	r3, #0
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3718      	adds	r7, #24
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop
 800aaec:	20000000 	.word	0x20000000
 800aaf0:	165e9f81 	.word	0x165e9f81

0800aaf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b088      	sub	sp, #32
 800aaf8:	af02      	add	r7, sp, #8
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f7ff fedf 	bl	800a8d0 <SPI_WaitFifoStateUntilTimeout>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d007      	beq.n	800ab28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab1c:	f043 0220 	orr.w	r2, r3, #32
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ab24:	2303      	movs	r3, #3
 800ab26:	e046      	b.n	800abb6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ab28:	4b25      	ldr	r3, [pc, #148]	@ (800abc0 <SPI_EndRxTxTransaction+0xcc>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a25      	ldr	r2, [pc, #148]	@ (800abc4 <SPI_EndRxTxTransaction+0xd0>)
 800ab2e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab32:	0d5b      	lsrs	r3, r3, #21
 800ab34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ab38:	fb02 f303 	mul.w	r3, r2, r3
 800ab3c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ab46:	d112      	bne.n	800ab6e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	9300      	str	r3, [sp, #0]
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	2180      	movs	r1, #128	@ 0x80
 800ab52:	68f8      	ldr	r0, [r7, #12]
 800ab54:	f7ff fe34 	bl	800a7c0 <SPI_WaitFlagStateUntilTimeout>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d016      	beq.n	800ab8c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab62:	f043 0220 	orr.w	r2, r3, #32
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800ab6a:	2303      	movs	r3, #3
 800ab6c:	e023      	b.n	800abb6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00a      	beq.n	800ab8a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	3b01      	subs	r3, #1
 800ab78:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab84:	2b80      	cmp	r3, #128	@ 0x80
 800ab86:	d0f2      	beq.n	800ab6e <SPI_EndRxTxTransaction+0x7a>
 800ab88:	e000      	b.n	800ab8c <SPI_EndRxTxTransaction+0x98>
        break;
 800ab8a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	9300      	str	r3, [sp, #0]
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	f7ff fe99 	bl	800a8d0 <SPI_WaitFifoStateUntilTimeout>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d007      	beq.n	800abb4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aba8:	f043 0220 	orr.w	r2, r3, #32
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800abb0:	2303      	movs	r3, #3
 800abb2:	e000      	b.n	800abb6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3718      	adds	r7, #24
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	20000000 	.word	0x20000000
 800abc4:	165e9f81 	.word	0x165e9f81

0800abc8 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b086      	sub	sp, #24
 800abcc:	af02      	add	r7, sp, #8
 800abce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800abde:	601a      	str	r2, [r3, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800abe0:	4b27      	ldr	r3, [pc, #156]	@ (800ac80 <SPI_AbortRx_ISR+0xb8>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a27      	ldr	r2, [pc, #156]	@ (800ac84 <SPI_AbortRx_ISR+0xbc>)
 800abe6:	fba2 2303 	umull	r2, r3, r2, r3
 800abea:	0a5b      	lsrs	r3, r3, #9
 800abec:	2264      	movs	r2, #100	@ 0x64
 800abee:	fb02 f303 	mul.w	r3, r2, r3
 800abf2:	60fb      	str	r3, [r7, #12]

  /* Disable RXNEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	685a      	ldr	r2, [r3, #4]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ac02:	605a      	str	r2, [r3, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count == 0U)
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d106      	bne.n	800ac18 <SPI_AbortRx_ISR+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800ac16:	e009      	b.n	800ac2c <SPI_AbortRx_ISR+0x64>
    }
    count--;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac28:	2b40      	cmp	r3, #64	@ 0x40
 800ac2a:	d0eb      	beq.n	800ac04 <SPI_AbortRx_ISR+0x3c>

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800ac2c:	f7f7 fdfa 	bl	8002824 <HAL_GetTick>
 800ac30:	4603      	mov	r3, r0
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	2364      	movs	r3, #100	@ 0x64
 800ac36:	2200      	movs	r2, #0
 800ac38:	2180      	movs	r1, #128	@ 0x80
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7ff fdc0 	bl	800a7c0 <SPI_WaitFlagStateUntilTimeout>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d002      	beq.n	800ac4c <SPI_AbortRx_ISR+0x84>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2240      	movs	r2, #64	@ 0x40
 800ac4a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800ac4c:	f7f7 fdea 	bl	8002824 <HAL_GetTick>
 800ac50:	4603      	mov	r3, r0
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	2364      	movs	r3, #100	@ 0x64
 800ac56:	2200      	movs	r2, #0
 800ac58:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f7ff fe37 	bl	800a8d0 <SPI_WaitFifoStateUntilTimeout>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d002      	beq.n	800ac6e <SPI_AbortRx_ISR+0xa6>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2240      	movs	r2, #64	@ 0x40
 800ac6c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2207      	movs	r2, #7
 800ac72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 800ac76:	bf00      	nop
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	20000000 	.word	0x20000000
 800ac84:	057619f1 	.word	0x057619f1

0800ac88 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b086      	sub	sp, #24
 800ac8c:	af02      	add	r7, sp, #8
 800ac8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800ac90:	4b4c      	ldr	r3, [pc, #304]	@ (800adc4 <SPI_AbortTx_ISR+0x13c>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4a4c      	ldr	r2, [pc, #304]	@ (800adc8 <SPI_AbortTx_ISR+0x140>)
 800ac96:	fba2 2303 	umull	r2, r3, r2, r3
 800ac9a:	0a5b      	lsrs	r3, r3, #9
 800ac9c:	2264      	movs	r2, #100	@ 0x64
 800ac9e:	fb02 f303 	mul.w	r3, r2, r3
 800aca2:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	685a      	ldr	r2, [r3, #4]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800acb2:	605a      	str	r2, [r3, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count == 0U)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d106      	bne.n	800acc8 <SPI_AbortTx_ISR+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acbe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800acc6:	e009      	b.n	800acdc <SPI_AbortTx_ISR+0x54>
    }
    count--;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	3b01      	subs	r3, #1
 800accc:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acd8:	2b80      	cmp	r3, #128	@ 0x80
 800acda:	d0eb      	beq.n	800acb4 <SPI_AbortTx_ISR+0x2c>

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800acdc:	f7f7 fda2 	bl	8002824 <HAL_GetTick>
 800ace0:	4603      	mov	r3, r0
 800ace2:	461a      	mov	r2, r3
 800ace4:	2164      	movs	r1, #100	@ 0x64
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f7ff ff04 	bl	800aaf4 <SPI_EndRxTxTransaction>
 800acec:	4603      	mov	r3, r0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d002      	beq.n	800acf8 <SPI_AbortTx_ISR+0x70>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2240      	movs	r2, #64	@ 0x40
 800acf6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	681a      	ldr	r2, [r3, #0]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ad06:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800ad08:	f7f7 fd8c 	bl	8002824 <HAL_GetTick>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	9300      	str	r3, [sp, #0]
 800ad10:	2364      	movs	r3, #100	@ 0x64
 800ad12:	2200      	movs	r2, #0
 800ad14:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f7ff fdd9 	bl	800a8d0 <SPI_WaitFifoStateUntilTimeout>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d002      	beq.n	800ad2a <SPI_AbortTx_ISR+0xa2>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2240      	movs	r2, #64	@ 0x40
 800ad28:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Check case of Full-Duplex Mode and disable directly RXNEIE interrupt */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad34:	2b40      	cmp	r3, #64	@ 0x40
 800ad36:	d13c      	bne.n	800adb2 <SPI_AbortTx_ISR+0x12a>
  {
    /* Disable RXNEIE interrupt */
    CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	685a      	ldr	r2, [r3, #4]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ad46:	605a      	str	r2, [r3, #4]

    /* Check RXNEIE is disabled */
    do
    {
      if (count == 0U)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d106      	bne.n	800ad5c <SPI_AbortTx_ISR+0xd4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad52:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800ad5a:	e009      	b.n	800ad70 <SPI_AbortTx_ISR+0xe8>
      }
      count--;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	3b01      	subs	r3, #1
 800ad60:	60fb      	str	r3, [r7, #12]
    } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad6c:	2b40      	cmp	r3, #64	@ 0x40
 800ad6e:	d0eb      	beq.n	800ad48 <SPI_AbortTx_ISR+0xc0>

    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800ad70:	f7f7 fd58 	bl	8002824 <HAL_GetTick>
 800ad74:	4603      	mov	r3, r0
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	2364      	movs	r3, #100	@ 0x64
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	2180      	movs	r1, #128	@ 0x80
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f7ff fd1e 	bl	800a7c0 <SPI_WaitFlagStateUntilTimeout>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d002      	beq.n	800ad90 <SPI_AbortTx_ISR+0x108>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2240      	movs	r2, #64	@ 0x40
 800ad8e:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800ad90:	f7f7 fd48 	bl	8002824 <HAL_GetTick>
 800ad94:	4603      	mov	r3, r0
 800ad96:	9300      	str	r3, [sp, #0]
 800ad98:	2364      	movs	r3, #100	@ 0x64
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f7ff fd95 	bl	800a8d0 <SPI_WaitFifoStateUntilTimeout>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d002      	beq.n	800adb2 <SPI_AbortTx_ISR+0x12a>
                                      HAL_GetTick()) != HAL_OK)
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2240      	movs	r2, #64	@ 0x40
 800adb0:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }
  hspi->State = HAL_SPI_STATE_ABORT;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2207      	movs	r2, #7
 800adb6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 800adba:	bf00      	nop
 800adbc:	3710      	adds	r7, #16
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}
 800adc2:	bf00      	nop
 800adc4:	20000000 	.word	0x20000000
 800adc8:	057619f1 	.word	0x057619f1

0800adcc <HAL_SPIEx_FlushRxFifo>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(const SPI_HandleTypeDef *hspi)
{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
 800add4:	2300      	movs	r3, #0
 800add6:	73fb      	strb	r3, [r7, #15]
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800add8:	e00c      	b.n	800adf4 <HAL_SPIEx_FlushRxFifo+0x28>
  {
    count++;
 800adda:	7bfb      	ldrb	r3, [r7, #15]
 800addc:	3301      	adds	r3, #1
 800adde:	73fb      	strb	r3, [r7, #15]
    tmpreg = hspi->Instance->DR;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	60bb      	str	r3, [r7, #8]
    UNUSED(tmpreg); /* To avoid GCC warning */
 800ade8:	68bb      	ldr	r3, [r7, #8]
    if (count == SPI_FIFO_SIZE)
 800adea:	7bfb      	ldrb	r3, [r7, #15]
 800adec:	2b04      	cmp	r3, #4
 800adee:	d101      	bne.n	800adf4 <HAL_SPIEx_FlushRxFifo+0x28>
    {
      return HAL_TIMEOUT;
 800adf0:	2303      	movs	r3, #3
 800adf2:	e007      	b.n	800ae04 <HAL_SPIEx_FlushRxFifo+0x38>
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	689b      	ldr	r3, [r3, #8]
 800adfa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d1eb      	bne.n	800adda <HAL_SPIEx_FlushRxFifo+0xe>
    }
  }
  return HAL_OK;
 800ae02:	2300      	movs	r3, #0
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3714      	adds	r7, #20
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d101      	bne.n	800ae22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e049      	b.n	800aeb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d106      	bne.n	800ae3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f7f6 fee8 	bl	8001c0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2202      	movs	r2, #2
 800ae40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	3304      	adds	r3, #4
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	4610      	mov	r0, r2
 800ae50:	f000 fa0e 	bl	800b270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2201      	movs	r2, #1
 800ae58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2201      	movs	r2, #1
 800ae68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2201      	movs	r2, #1
 800ae78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2201      	movs	r2, #1
 800ae88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2201      	movs	r2, #1
 800aea0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2201      	movs	r2, #1
 800aea8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
	...

0800aec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b085      	sub	sp, #20
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aece:	b2db      	uxtb	r3, r3
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d001      	beq.n	800aed8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aed4:	2301      	movs	r3, #1
 800aed6:	e054      	b.n	800af82 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2202      	movs	r2, #2
 800aedc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	68da      	ldr	r2, [r3, #12]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f042 0201 	orr.w	r2, r2, #1
 800aeee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a26      	ldr	r2, [pc, #152]	@ (800af90 <HAL_TIM_Base_Start_IT+0xd0>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d022      	beq.n	800af40 <HAL_TIM_Base_Start_IT+0x80>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af02:	d01d      	beq.n	800af40 <HAL_TIM_Base_Start_IT+0x80>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a22      	ldr	r2, [pc, #136]	@ (800af94 <HAL_TIM_Base_Start_IT+0xd4>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d018      	beq.n	800af40 <HAL_TIM_Base_Start_IT+0x80>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4a21      	ldr	r2, [pc, #132]	@ (800af98 <HAL_TIM_Base_Start_IT+0xd8>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d013      	beq.n	800af40 <HAL_TIM_Base_Start_IT+0x80>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a1f      	ldr	r2, [pc, #124]	@ (800af9c <HAL_TIM_Base_Start_IT+0xdc>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d00e      	beq.n	800af40 <HAL_TIM_Base_Start_IT+0x80>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4a1e      	ldr	r2, [pc, #120]	@ (800afa0 <HAL_TIM_Base_Start_IT+0xe0>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d009      	beq.n	800af40 <HAL_TIM_Base_Start_IT+0x80>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a1c      	ldr	r2, [pc, #112]	@ (800afa4 <HAL_TIM_Base_Start_IT+0xe4>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d004      	beq.n	800af40 <HAL_TIM_Base_Start_IT+0x80>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a1b      	ldr	r2, [pc, #108]	@ (800afa8 <HAL_TIM_Base_Start_IT+0xe8>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d115      	bne.n	800af6c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	689a      	ldr	r2, [r3, #8]
 800af46:	4b19      	ldr	r3, [pc, #100]	@ (800afac <HAL_TIM_Base_Start_IT+0xec>)
 800af48:	4013      	ands	r3, r2
 800af4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2b06      	cmp	r3, #6
 800af50:	d015      	beq.n	800af7e <HAL_TIM_Base_Start_IT+0xbe>
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af58:	d011      	beq.n	800af7e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f042 0201 	orr.w	r2, r2, #1
 800af68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af6a:	e008      	b.n	800af7e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f042 0201 	orr.w	r2, r2, #1
 800af7a:	601a      	str	r2, [r3, #0]
 800af7c:	e000      	b.n	800af80 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3714      	adds	r7, #20
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	40010000 	.word	0x40010000
 800af94:	40000400 	.word	0x40000400
 800af98:	40000800 	.word	0x40000800
 800af9c:	40000c00 	.word	0x40000c00
 800afa0:	40010400 	.word	0x40010400
 800afa4:	40014000 	.word	0x40014000
 800afa8:	40001800 	.word	0x40001800
 800afac:	00010007 	.word	0x00010007

0800afb0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b083      	sub	sp, #12
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	68da      	ldr	r2, [r3, #12]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f022 0201 	bic.w	r2, r2, #1
 800afc6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	6a1a      	ldr	r2, [r3, #32]
 800afce:	4b0f      	ldr	r3, [pc, #60]	@ (800b00c <HAL_TIM_Base_Stop_IT+0x5c>)
 800afd0:	4013      	ands	r3, r2
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d10f      	bne.n	800aff6 <HAL_TIM_Base_Stop_IT+0x46>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	6a1a      	ldr	r2, [r3, #32]
 800afdc:	f240 4344 	movw	r3, #1092	@ 0x444
 800afe0:	4013      	ands	r3, r2
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d107      	bne.n	800aff6 <HAL_TIM_Base_Stop_IT+0x46>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f022 0201 	bic.w	r2, r2, #1
 800aff4:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2201      	movs	r2, #1
 800affa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800affe:	2300      	movs	r3, #0
}
 800b000:	4618      	mov	r0, r3
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr
 800b00c:	00111111 	.word	0x00111111

0800b010 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	691b      	ldr	r3, [r3, #16]
 800b026:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	f003 0302 	and.w	r3, r3, #2
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d020      	beq.n	800b074 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f003 0302 	and.w	r3, r3, #2
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d01b      	beq.n	800b074 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f06f 0202 	mvn.w	r2, #2
 800b044:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2201      	movs	r2, #1
 800b04a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	699b      	ldr	r3, [r3, #24]
 800b052:	f003 0303 	and.w	r3, r3, #3
 800b056:	2b00      	cmp	r3, #0
 800b058:	d003      	beq.n	800b062 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 f8e9 	bl	800b232 <HAL_TIM_IC_CaptureCallback>
 800b060:	e005      	b.n	800b06e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 f8db 	bl	800b21e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 f8ec 	bl	800b246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2200      	movs	r2, #0
 800b072:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	f003 0304 	and.w	r3, r3, #4
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d020      	beq.n	800b0c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f003 0304 	and.w	r3, r3, #4
 800b084:	2b00      	cmp	r3, #0
 800b086:	d01b      	beq.n	800b0c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f06f 0204 	mvn.w	r2, #4
 800b090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2202      	movs	r2, #2
 800b096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	699b      	ldr	r3, [r3, #24]
 800b09e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d003      	beq.n	800b0ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 f8c3 	bl	800b232 <HAL_TIM_IC_CaptureCallback>
 800b0ac:	e005      	b.n	800b0ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f000 f8b5 	bl	800b21e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f000 f8c6 	bl	800b246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	f003 0308 	and.w	r3, r3, #8
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d020      	beq.n	800b10c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f003 0308 	and.w	r3, r3, #8
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d01b      	beq.n	800b10c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f06f 0208 	mvn.w	r2, #8
 800b0dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2204      	movs	r2, #4
 800b0e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	69db      	ldr	r3, [r3, #28]
 800b0ea:	f003 0303 	and.w	r3, r3, #3
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d003      	beq.n	800b0fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 f89d 	bl	800b232 <HAL_TIM_IC_CaptureCallback>
 800b0f8:	e005      	b.n	800b106 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 f88f 	bl	800b21e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 f8a0 	bl	800b246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	f003 0310 	and.w	r3, r3, #16
 800b112:	2b00      	cmp	r3, #0
 800b114:	d020      	beq.n	800b158 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f003 0310 	and.w	r3, r3, #16
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d01b      	beq.n	800b158 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f06f 0210 	mvn.w	r2, #16
 800b128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2208      	movs	r2, #8
 800b12e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	69db      	ldr	r3, [r3, #28]
 800b136:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d003      	beq.n	800b146 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 f877 	bl	800b232 <HAL_TIM_IC_CaptureCallback>
 800b144:	e005      	b.n	800b152 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 f869 	bl	800b21e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 f87a 	bl	800b246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2200      	movs	r2, #0
 800b156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	f003 0301 	and.w	r3, r3, #1
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00c      	beq.n	800b17c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f003 0301 	and.w	r3, r3, #1
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d007      	beq.n	800b17c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f06f 0201 	mvn.w	r2, #1
 800b174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f7f6 f91a 	bl	80013b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b182:	2b00      	cmp	r3, #0
 800b184:	d104      	bne.n	800b190 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d00c      	beq.n	800b1aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b196:	2b00      	cmp	r3, #0
 800b198:	d007      	beq.n	800b1aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b1a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 f9a1 	bl	800b4ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d00c      	beq.n	800b1ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d007      	beq.n	800b1ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b1c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f999 	bl	800b500 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d00c      	beq.n	800b1f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d007      	beq.n	800b1f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b1ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 f834 	bl	800b25a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	f003 0320 	and.w	r3, r3, #32
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d00c      	beq.n	800b216 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f003 0320 	and.w	r3, r3, #32
 800b202:	2b00      	cmp	r3, #0
 800b204:	d007      	beq.n	800b216 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f06f 0220 	mvn.w	r2, #32
 800b20e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 f961 	bl	800b4d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b216:	bf00      	nop
 800b218:	3710      	adds	r7, #16
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b21e:	b480      	push	{r7}
 800b220:	b083      	sub	sp, #12
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b226:	bf00      	nop
 800b228:	370c      	adds	r7, #12
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr

0800b232 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b232:	b480      	push	{r7}
 800b234:	b083      	sub	sp, #12
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b23a:	bf00      	nop
 800b23c:	370c      	adds	r7, #12
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr

0800b246 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b246:	b480      	push	{r7}
 800b248:	b083      	sub	sp, #12
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b24e:	bf00      	nop
 800b250:	370c      	adds	r7, #12
 800b252:	46bd      	mov	sp, r7
 800b254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b258:	4770      	bx	lr

0800b25a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b25a:	b480      	push	{r7}
 800b25c:	b083      	sub	sp, #12
 800b25e:	af00      	add	r7, sp, #0
 800b260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b262:	bf00      	nop
 800b264:	370c      	adds	r7, #12
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr
	...

0800b270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	4a43      	ldr	r2, [pc, #268]	@ (800b390 <TIM_Base_SetConfig+0x120>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d013      	beq.n	800b2b0 <TIM_Base_SetConfig+0x40>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b28e:	d00f      	beq.n	800b2b0 <TIM_Base_SetConfig+0x40>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4a40      	ldr	r2, [pc, #256]	@ (800b394 <TIM_Base_SetConfig+0x124>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d00b      	beq.n	800b2b0 <TIM_Base_SetConfig+0x40>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	4a3f      	ldr	r2, [pc, #252]	@ (800b398 <TIM_Base_SetConfig+0x128>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d007      	beq.n	800b2b0 <TIM_Base_SetConfig+0x40>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4a3e      	ldr	r2, [pc, #248]	@ (800b39c <TIM_Base_SetConfig+0x12c>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d003      	beq.n	800b2b0 <TIM_Base_SetConfig+0x40>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4a3d      	ldr	r2, [pc, #244]	@ (800b3a0 <TIM_Base_SetConfig+0x130>)
 800b2ac:	4293      	cmp	r3, r2
 800b2ae:	d108      	bne.n	800b2c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4a32      	ldr	r2, [pc, #200]	@ (800b390 <TIM_Base_SetConfig+0x120>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d02b      	beq.n	800b322 <TIM_Base_SetConfig+0xb2>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2d0:	d027      	beq.n	800b322 <TIM_Base_SetConfig+0xb2>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4a2f      	ldr	r2, [pc, #188]	@ (800b394 <TIM_Base_SetConfig+0x124>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d023      	beq.n	800b322 <TIM_Base_SetConfig+0xb2>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4a2e      	ldr	r2, [pc, #184]	@ (800b398 <TIM_Base_SetConfig+0x128>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d01f      	beq.n	800b322 <TIM_Base_SetConfig+0xb2>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	4a2d      	ldr	r2, [pc, #180]	@ (800b39c <TIM_Base_SetConfig+0x12c>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d01b      	beq.n	800b322 <TIM_Base_SetConfig+0xb2>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	4a2c      	ldr	r2, [pc, #176]	@ (800b3a0 <TIM_Base_SetConfig+0x130>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d017      	beq.n	800b322 <TIM_Base_SetConfig+0xb2>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	4a2b      	ldr	r2, [pc, #172]	@ (800b3a4 <TIM_Base_SetConfig+0x134>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d013      	beq.n	800b322 <TIM_Base_SetConfig+0xb2>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	4a2a      	ldr	r2, [pc, #168]	@ (800b3a8 <TIM_Base_SetConfig+0x138>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d00f      	beq.n	800b322 <TIM_Base_SetConfig+0xb2>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	4a29      	ldr	r2, [pc, #164]	@ (800b3ac <TIM_Base_SetConfig+0x13c>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d00b      	beq.n	800b322 <TIM_Base_SetConfig+0xb2>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	4a28      	ldr	r2, [pc, #160]	@ (800b3b0 <TIM_Base_SetConfig+0x140>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d007      	beq.n	800b322 <TIM_Base_SetConfig+0xb2>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	4a27      	ldr	r2, [pc, #156]	@ (800b3b4 <TIM_Base_SetConfig+0x144>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d003      	beq.n	800b322 <TIM_Base_SetConfig+0xb2>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4a26      	ldr	r2, [pc, #152]	@ (800b3b8 <TIM_Base_SetConfig+0x148>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d108      	bne.n	800b334 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b328:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	68fa      	ldr	r2, [r7, #12]
 800b330:	4313      	orrs	r3, r2
 800b332:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	695b      	ldr	r3, [r3, #20]
 800b33e:	4313      	orrs	r3, r2
 800b340:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	689a      	ldr	r2, [r3, #8]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a0e      	ldr	r2, [pc, #56]	@ (800b390 <TIM_Base_SetConfig+0x120>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d003      	beq.n	800b362 <TIM_Base_SetConfig+0xf2>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	4a10      	ldr	r2, [pc, #64]	@ (800b3a0 <TIM_Base_SetConfig+0x130>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d103      	bne.n	800b36a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	691a      	ldr	r2, [r3, #16]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f043 0204 	orr.w	r2, r3, #4
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2201      	movs	r2, #1
 800b37a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	601a      	str	r2, [r3, #0]
}
 800b382:	bf00      	nop
 800b384:	3714      	adds	r7, #20
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	40010000 	.word	0x40010000
 800b394:	40000400 	.word	0x40000400
 800b398:	40000800 	.word	0x40000800
 800b39c:	40000c00 	.word	0x40000c00
 800b3a0:	40010400 	.word	0x40010400
 800b3a4:	40014000 	.word	0x40014000
 800b3a8:	40014400 	.word	0x40014400
 800b3ac:	40014800 	.word	0x40014800
 800b3b0:	40001800 	.word	0x40001800
 800b3b4:	40001c00 	.word	0x40001c00
 800b3b8:	40002000 	.word	0x40002000

0800b3bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b085      	sub	sp, #20
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d101      	bne.n	800b3d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b3d0:	2302      	movs	r3, #2
 800b3d2:	e06d      	b.n	800b4b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2202      	movs	r2, #2
 800b3e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	689b      	ldr	r3, [r3, #8]
 800b3f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a30      	ldr	r2, [pc, #192]	@ (800b4bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d004      	beq.n	800b408 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4a2f      	ldr	r2, [pc, #188]	@ (800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d108      	bne.n	800b41a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b40e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	4313      	orrs	r3, r2
 800b418:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b420:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	68fa      	ldr	r2, [r7, #12]
 800b428:	4313      	orrs	r3, r2
 800b42a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a20      	ldr	r2, [pc, #128]	@ (800b4bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d022      	beq.n	800b484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b446:	d01d      	beq.n	800b484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4a1d      	ldr	r2, [pc, #116]	@ (800b4c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d018      	beq.n	800b484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a1c      	ldr	r2, [pc, #112]	@ (800b4c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d013      	beq.n	800b484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a1a      	ldr	r2, [pc, #104]	@ (800b4cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d00e      	beq.n	800b484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a15      	ldr	r2, [pc, #84]	@ (800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d009      	beq.n	800b484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a16      	ldr	r2, [pc, #88]	@ (800b4d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d004      	beq.n	800b484 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a15      	ldr	r2, [pc, #84]	@ (800b4d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d10c      	bne.n	800b49e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b48a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	68ba      	ldr	r2, [r7, #8]
 800b492:	4313      	orrs	r3, r2
 800b494:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b4ae:	2300      	movs	r3, #0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3714      	adds	r7, #20
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr
 800b4bc:	40010000 	.word	0x40010000
 800b4c0:	40010400 	.word	0x40010400
 800b4c4:	40000400 	.word	0x40000400
 800b4c8:	40000800 	.word	0x40000800
 800b4cc:	40000c00 	.word	0x40000c00
 800b4d0:	40014000 	.word	0x40014000
 800b4d4:	40001800 	.word	0x40001800

0800b4d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b4e0:	bf00      	nop
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b4f4:	bf00      	nop
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b500:	b480      	push	{r7}
 800b502:	b083      	sub	sp, #12
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b508:	bf00      	nop
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr

0800b514 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d101      	bne.n	800b526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	e040      	b.n	800b5a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d106      	bne.n	800b53c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f7f6 fb8e 	bl	8001c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2224      	movs	r2, #36	@ 0x24
 800b540:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f022 0201 	bic.w	r2, r2, #1
 800b550:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b556:	2b00      	cmp	r3, #0
 800b558:	d002      	beq.n	800b560 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f001 f888 	bl	800c670 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 fe21 	bl	800c1a8 <UART_SetConfig>
 800b566:	4603      	mov	r3, r0
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d101      	bne.n	800b570 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800b56c:	2301      	movs	r3, #1
 800b56e:	e01b      	b.n	800b5a8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	685a      	ldr	r2, [r3, #4]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b57e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	689a      	ldr	r2, [r3, #8]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b58e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	681a      	ldr	r2, [r3, #0]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f042 0201 	orr.w	r2, r2, #1
 800b59e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f001 f907 	bl	800c7b4 <UART_CheckIdleState>
 800b5a6:	4603      	mov	r3, r0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3708      	adds	r7, #8
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b08a      	sub	sp, #40	@ 0x28
 800b5b4:	af02      	add	r7, sp, #8
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	603b      	str	r3, [r7, #0]
 800b5bc:	4613      	mov	r3, r2
 800b5be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b5c4:	2b20      	cmp	r3, #32
 800b5c6:	d177      	bne.n	800b6b8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d002      	beq.n	800b5d4 <HAL_UART_Transmit+0x24>
 800b5ce:	88fb      	ldrh	r3, [r7, #6]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d101      	bne.n	800b5d8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e070      	b.n	800b6ba <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2221      	movs	r2, #33	@ 0x21
 800b5e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b5e6:	f7f7 f91d 	bl	8002824 <HAL_GetTick>
 800b5ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	88fa      	ldrh	r2, [r7, #6]
 800b5f0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	88fa      	ldrh	r2, [r7, #6]
 800b5f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	689b      	ldr	r3, [r3, #8]
 800b600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b604:	d108      	bne.n	800b618 <HAL_UART_Transmit+0x68>
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	691b      	ldr	r3, [r3, #16]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d104      	bne.n	800b618 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800b60e:	2300      	movs	r3, #0
 800b610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	61bb      	str	r3, [r7, #24]
 800b616:	e003      	b.n	800b620 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b61c:	2300      	movs	r3, #0
 800b61e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b620:	e02f      	b.n	800b682 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	2200      	movs	r2, #0
 800b62a:	2180      	movs	r1, #128	@ 0x80
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	f001 f918 	bl	800c862 <UART_WaitOnFlagUntilTimeout>
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d004      	beq.n	800b642 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2220      	movs	r2, #32
 800b63c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800b63e:	2303      	movs	r3, #3
 800b640:	e03b      	b.n	800b6ba <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d10b      	bne.n	800b660 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b648:	69bb      	ldr	r3, [r7, #24]
 800b64a:	881b      	ldrh	r3, [r3, #0]
 800b64c:	461a      	mov	r2, r3
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b656:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b658:	69bb      	ldr	r3, [r7, #24]
 800b65a:	3302      	adds	r3, #2
 800b65c:	61bb      	str	r3, [r7, #24]
 800b65e:	e007      	b.n	800b670 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	781a      	ldrb	r2, [r3, #0]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b66a:	69fb      	ldr	r3, [r7, #28]
 800b66c:	3301      	adds	r3, #1
 800b66e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b676:	b29b      	uxth	r3, r3
 800b678:	3b01      	subs	r3, #1
 800b67a:	b29a      	uxth	r2, r3
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b688:	b29b      	uxth	r3, r3
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d1c9      	bne.n	800b622 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	9300      	str	r3, [sp, #0]
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	2200      	movs	r2, #0
 800b696:	2140      	movs	r1, #64	@ 0x40
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f001 f8e2 	bl	800c862 <UART_WaitOnFlagUntilTimeout>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d004      	beq.n	800b6ae <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2220      	movs	r2, #32
 800b6a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800b6aa:	2303      	movs	r3, #3
 800b6ac:	e005      	b.n	800b6ba <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2220      	movs	r2, #32
 800b6b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	e000      	b.n	800b6ba <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800b6b8:	2302      	movs	r3, #2
  }
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3720      	adds	r7, #32
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
	...

0800b6c4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b08b      	sub	sp, #44	@ 0x2c
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	60f8      	str	r0, [r7, #12]
 800b6cc:	60b9      	str	r1, [r7, #8]
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b6d6:	2b20      	cmp	r3, #32
 800b6d8:	d147      	bne.n	800b76a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d002      	beq.n	800b6e6 <HAL_UART_Transmit_IT+0x22>
 800b6e0:	88fb      	ldrh	r3, [r7, #6]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d101      	bne.n	800b6ea <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e040      	b.n	800b76c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	68ba      	ldr	r2, [r7, #8]
 800b6ee:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	88fa      	ldrh	r2, [r7, #6]
 800b6f4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	88fa      	ldrh	r2, [r7, #6]
 800b6fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2200      	movs	r2, #0
 800b704:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2200      	movs	r2, #0
 800b70a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	2221      	movs	r2, #33	@ 0x21
 800b712:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	689b      	ldr	r3, [r3, #8]
 800b718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b71c:	d107      	bne.n	800b72e <HAL_UART_Transmit_IT+0x6a>
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	691b      	ldr	r3, [r3, #16]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d103      	bne.n	800b72e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	4a13      	ldr	r2, [pc, #76]	@ (800b778 <HAL_UART_Transmit_IT+0xb4>)
 800b72a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b72c:	e002      	b.n	800b734 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	4a12      	ldr	r2, [pc, #72]	@ (800b77c <HAL_UART_Transmit_IT+0xb8>)
 800b732:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	e853 3f00 	ldrex	r3, [r3]
 800b740:	613b      	str	r3, [r7, #16]
   return(result);
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b748:	627b      	str	r3, [r7, #36]	@ 0x24
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	461a      	mov	r2, r3
 800b750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b752:	623b      	str	r3, [r7, #32]
 800b754:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b756:	69f9      	ldr	r1, [r7, #28]
 800b758:	6a3a      	ldr	r2, [r7, #32]
 800b75a:	e841 2300 	strex	r3, r2, [r1]
 800b75e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b760:	69bb      	ldr	r3, [r7, #24]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1e6      	bne.n	800b734 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800b766:	2300      	movs	r3, #0
 800b768:	e000      	b.n	800b76c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800b76a:	2302      	movs	r3, #2
  }
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	372c      	adds	r7, #44	@ 0x2c
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr
 800b778:	0800d0f7 	.word	0x0800d0f7
 800b77c:	0800d041 	.word	0x0800d041

0800b780 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b08a      	sub	sp, #40	@ 0x28
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	4613      	mov	r3, r2
 800b78c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b794:	2b20      	cmp	r3, #32
 800b796:	d132      	bne.n	800b7fe <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d002      	beq.n	800b7a4 <HAL_UART_Receive_IT+0x24>
 800b79e:	88fb      	ldrh	r3, [r7, #6]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d101      	bne.n	800b7a8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e02b      	b.n	800b800 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d018      	beq.n	800b7ee <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	e853 3f00 	ldrex	r3, [r3]
 800b7c8:	613b      	str	r3, [r7, #16]
   return(result);
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b7d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7da:	623b      	str	r3, [r7, #32]
 800b7dc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7de:	69f9      	ldr	r1, [r7, #28]
 800b7e0:	6a3a      	ldr	r2, [r7, #32]
 800b7e2:	e841 2300 	strex	r3, r2, [r1]
 800b7e6:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d1e6      	bne.n	800b7bc <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b7ee:	88fb      	ldrh	r3, [r7, #6]
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	68b9      	ldr	r1, [r7, #8]
 800b7f4:	68f8      	ldr	r0, [r7, #12]
 800b7f6:	f001 f8a1 	bl	800c93c <UART_Start_Receive_IT>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	e000      	b.n	800b800 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800b7fe:	2302      	movs	r3, #2
  }
}
 800b800:	4618      	mov	r0, r3
 800b802:	3728      	adds	r7, #40	@ 0x28
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b08a      	sub	sp, #40	@ 0x28
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	4613      	mov	r3, r2
 800b814:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b81a:	2b20      	cmp	r3, #32
 800b81c:	d165      	bne.n	800b8ea <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d002      	beq.n	800b82a <HAL_UART_Transmit_DMA+0x22>
 800b824:	88fb      	ldrh	r3, [r7, #6]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d101      	bne.n	800b82e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	e05e      	b.n	800b8ec <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	68ba      	ldr	r2, [r7, #8]
 800b832:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	88fa      	ldrh	r2, [r7, #6]
 800b838:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	88fa      	ldrh	r2, [r7, #6]
 800b840:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2200      	movs	r2, #0
 800b848:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2221      	movs	r2, #33	@ 0x21
 800b850:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b856:	2b00      	cmp	r3, #0
 800b858:	d027      	beq.n	800b8aa <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b85e:	4a25      	ldr	r2, [pc, #148]	@ (800b8f4 <HAL_UART_Transmit_DMA+0xec>)
 800b860:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b866:	4a24      	ldr	r2, [pc, #144]	@ (800b8f8 <HAL_UART_Transmit_DMA+0xf0>)
 800b868:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b86e:	4a23      	ldr	r2, [pc, #140]	@ (800b8fc <HAL_UART_Transmit_DMA+0xf4>)
 800b870:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b876:	2200      	movs	r2, #0
 800b878:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b882:	4619      	mov	r1, r3
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	3328      	adds	r3, #40	@ 0x28
 800b88a:	461a      	mov	r2, r3
 800b88c:	88fb      	ldrh	r3, [r7, #6]
 800b88e:	f7f8 fa69 	bl	8003d64 <HAL_DMA_Start_IT>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d008      	beq.n	800b8aa <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2210      	movs	r2, #16
 800b89c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2220      	movs	r2, #32
 800b8a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	e020      	b.n	800b8ec <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	2240      	movs	r2, #64	@ 0x40
 800b8b0:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	3308      	adds	r3, #8
 800b8b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	e853 3f00 	ldrex	r3, [r3]
 800b8c0:	613b      	str	r3, [r7, #16]
   return(result);
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	3308      	adds	r3, #8
 800b8d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8d2:	623a      	str	r2, [r7, #32]
 800b8d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d6:	69f9      	ldr	r1, [r7, #28]
 800b8d8:	6a3a      	ldr	r2, [r7, #32]
 800b8da:	e841 2300 	strex	r3, r2, [r1]
 800b8de:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8e0:	69bb      	ldr	r3, [r7, #24]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d1e5      	bne.n	800b8b2 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	e000      	b.n	800b8ec <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800b8ea:	2302      	movs	r3, #2
  }
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	3728      	adds	r7, #40	@ 0x28
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd80      	pop	{r7, pc}
 800b8f4:	0800cd1d 	.word	0x0800cd1d
 800b8f8:	0800cdb3 	.word	0x0800cdb3
 800b8fc:	0800cf9f 	.word	0x0800cf9f

0800b900 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b08a      	sub	sp, #40	@ 0x28
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	4613      	mov	r3, r2
 800b90c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b914:	2b20      	cmp	r3, #32
 800b916:	d132      	bne.n	800b97e <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d002      	beq.n	800b924 <HAL_UART_Receive_DMA+0x24>
 800b91e:	88fb      	ldrh	r3, [r7, #6]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d101      	bne.n	800b928 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b924:	2301      	movs	r3, #1
 800b926:	e02b      	b.n	800b980 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2200      	movs	r2, #0
 800b92c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d018      	beq.n	800b96e <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	e853 3f00 	ldrex	r3, [r3]
 800b948:	613b      	str	r3, [r7, #16]
   return(result);
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b950:	627b      	str	r3, [r7, #36]	@ 0x24
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	461a      	mov	r2, r3
 800b958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95a:	623b      	str	r3, [r7, #32]
 800b95c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b95e:	69f9      	ldr	r1, [r7, #28]
 800b960:	6a3a      	ldr	r2, [r7, #32]
 800b962:	e841 2300 	strex	r3, r2, [r1]
 800b966:	61bb      	str	r3, [r7, #24]
   return(result);
 800b968:	69bb      	ldr	r3, [r7, #24]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d1e6      	bne.n	800b93c <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b96e:	88fb      	ldrh	r3, [r7, #6]
 800b970:	461a      	mov	r2, r3
 800b972:	68b9      	ldr	r1, [r7, #8]
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f001 f8a7 	bl	800cac8 <UART_Start_Receive_DMA>
 800b97a:	4603      	mov	r3, r0
 800b97c:	e000      	b.n	800b980 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800b97e:	2302      	movs	r3, #2
  }
}
 800b980:	4618      	mov	r0, r3
 800b982:	3728      	adds	r7, #40	@ 0x28
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b0a0      	sub	sp, #128	@ 0x80
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b996:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b998:	e853 3f00 	ldrex	r3, [r3]
 800b99c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b99e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b9a0:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800b9a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	461a      	mov	r2, r3
 800b9ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b9ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b9b0:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b9b4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b9b6:	e841 2300 	strex	r3, r2, [r1]
 800b9ba:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b9bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1e6      	bne.n	800b990 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	3308      	adds	r3, #8
 800b9c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9cc:	e853 3f00 	ldrex	r3, [r3]
 800b9d0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b9d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9d4:	f023 0301 	bic.w	r3, r3, #1
 800b9d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	3308      	adds	r3, #8
 800b9e0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800b9e2:	657a      	str	r2, [r7, #84]	@ 0x54
 800b9e4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b9e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b9ea:	e841 2300 	strex	r3, r2, [r1]
 800b9ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b9f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1e5      	bne.n	800b9c2 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d118      	bne.n	800ba30 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba06:	e853 3f00 	ldrex	r3, [r3]
 800ba0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ba0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba0e:	f023 0310 	bic.w	r3, r3, #16
 800ba12:	677b      	str	r3, [r7, #116]	@ 0x74
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	461a      	mov	r2, r3
 800ba1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba1c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba1e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba24:	e841 2300 	strex	r3, r2, [r1]
 800ba28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d1e6      	bne.n	800b9fe <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba3a:	2b80      	cmp	r3, #128	@ 0x80
 800ba3c:	d137      	bne.n	800baae <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	3308      	adds	r3, #8
 800ba44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba46:	6a3b      	ldr	r3, [r7, #32]
 800ba48:	e853 3f00 	ldrex	r3, [r3]
 800ba4c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba4e:	69fb      	ldr	r3, [r7, #28]
 800ba50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba54:	673b      	str	r3, [r7, #112]	@ 0x70
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	3308      	adds	r3, #8
 800ba5c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ba5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba66:	e841 2300 	strex	r3, r2, [r1]
 800ba6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d1e5      	bne.n	800ba3e <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d019      	beq.n	800baae <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba7e:	2200      	movs	r2, #0
 800ba80:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7f8 f9cc 	bl	8003e24 <HAL_DMA_Abort>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d00d      	beq.n	800baae <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7f8 fbee 	bl	8004278 <HAL_DMA_GetError>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b20      	cmp	r3, #32
 800baa0:	d105      	bne.n	800baae <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2210      	movs	r2, #16
 800baa6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800baaa:	2303      	movs	r3, #3
 800baac:	e061      	b.n	800bb72 <HAL_UART_Abort+0x1ea>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bab8:	2b40      	cmp	r3, #64	@ 0x40
 800baba:	d137      	bne.n	800bb2c <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	3308      	adds	r3, #8
 800bac2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	e853 3f00 	ldrex	r3, [r3]
 800baca:	60bb      	str	r3, [r7, #8]
   return(result);
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bad2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	3308      	adds	r3, #8
 800bada:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800badc:	61ba      	str	r2, [r7, #24]
 800bade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae0:	6979      	ldr	r1, [r7, #20]
 800bae2:	69ba      	ldr	r2, [r7, #24]
 800bae4:	e841 2300 	strex	r3, r2, [r1]
 800bae8:	613b      	str	r3, [r7, #16]
   return(result);
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d1e5      	bne.n	800babc <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d019      	beq.n	800bb2c <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bafc:	2200      	movs	r2, #0
 800bafe:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7f8 f98d 	bl	8003e24 <HAL_DMA_Abort>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d00d      	beq.n	800bb2c <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7f8 fbaf 	bl	8004278 <HAL_DMA_GetError>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b20      	cmp	r3, #32
 800bb1e:	d105      	bne.n	800bb2c <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2210      	movs	r2, #16
 800bb24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bb28:	2303      	movs	r3, #3
 800bb2a:	e022      	b.n	800bb72 <HAL_UART_Abort+0x1ea>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  huart->RxXferCount = 0U;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2200      	movs	r2, #0
 800bb38:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	220f      	movs	r2, #15
 800bb42:	621a      	str	r2, [r3, #32]


  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	699a      	ldr	r2, [r3, #24]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f042 0208 	orr.w	r2, r2, #8
 800bb52:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2220      	movs	r2, #32
 800bb58:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2220      	movs	r2, #32
 800bb5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	661a      	str	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb70:	2300      	movs	r3, #0
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3780      	adds	r7, #128	@ 0x80
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
	...

0800bb7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b0ba      	sub	sp, #232	@ 0xe8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	69db      	ldr	r3, [r3, #28]
 800bb8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	689b      	ldr	r3, [r3, #8]
 800bb9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bba2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800bba6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800bbaa:	4013      	ands	r3, r2
 800bbac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800bbb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d115      	bne.n	800bbe4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800bbb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bbbc:	f003 0320 	and.w	r3, r3, #32
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00f      	beq.n	800bbe4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bbc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bbc8:	f003 0320 	and.w	r3, r3, #32
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d009      	beq.n	800bbe4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f000 82b1 	beq.w	800c13c <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	4798      	blx	r3
      }
      return;
 800bbe2:	e2ab      	b.n	800c13c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bbe4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f000 8117 	beq.w	800be1c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800bbee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bbf2:	f003 0301 	and.w	r3, r3, #1
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d106      	bne.n	800bc08 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800bbfa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800bbfe:	4b85      	ldr	r3, [pc, #532]	@ (800be14 <HAL_UART_IRQHandler+0x298>)
 800bc00:	4013      	ands	r3, r2
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	f000 810a 	beq.w	800be1c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bc08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc0c:	f003 0301 	and.w	r3, r3, #1
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d011      	beq.n	800bc38 <HAL_UART_IRQHandler+0xbc>
 800bc14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bc18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00b      	beq.n	800bc38 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2201      	movs	r2, #1
 800bc26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc2e:	f043 0201 	orr.w	r2, r3, #1
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc3c:	f003 0302 	and.w	r3, r3, #2
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d011      	beq.n	800bc68 <HAL_UART_IRQHandler+0xec>
 800bc44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bc48:	f003 0301 	and.w	r3, r3, #1
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d00b      	beq.n	800bc68 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	2202      	movs	r2, #2
 800bc56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc5e:	f043 0204 	orr.w	r2, r3, #4
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc6c:	f003 0304 	and.w	r3, r3, #4
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d011      	beq.n	800bc98 <HAL_UART_IRQHandler+0x11c>
 800bc74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bc78:	f003 0301 	and.w	r3, r3, #1
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d00b      	beq.n	800bc98 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2204      	movs	r2, #4
 800bc86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc8e:	f043 0202 	orr.w	r2, r3, #2
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bc98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc9c:	f003 0308 	and.w	r3, r3, #8
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d017      	beq.n	800bcd4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bca8:	f003 0320 	and.w	r3, r3, #32
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d105      	bne.n	800bcbc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800bcb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bcb4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d00b      	beq.n	800bcd4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2208      	movs	r2, #8
 800bcc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bcca:	f043 0208 	orr.w	r2, r3, #8
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bcd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d012      	beq.n	800bd06 <HAL_UART_IRQHandler+0x18a>
 800bce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bce4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00c      	beq.n	800bd06 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bcf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bcfc:	f043 0220 	orr.w	r2, r3, #32
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	f000 8217 	beq.w	800c140 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800bd12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd16:	f003 0320 	and.w	r3, r3, #32
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d00d      	beq.n	800bd3a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bd1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd22:	f003 0320 	and.w	r3, r3, #32
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d007      	beq.n	800bd3a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d003      	beq.n	800bd3a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd4e:	2b40      	cmp	r3, #64	@ 0x40
 800bd50:	d005      	beq.n	800bd5e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bd52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bd56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d04f      	beq.n	800bdfe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 ff78 	bl	800cc54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd6e:	2b40      	cmp	r3, #64	@ 0x40
 800bd70:	d141      	bne.n	800bdf6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	3308      	adds	r3, #8
 800bd78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bd80:	e853 3f00 	ldrex	r3, [r3]
 800bd84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bd88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bd8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	3308      	adds	r3, #8
 800bd9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bd9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bda2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bdaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bdae:	e841 2300 	strex	r3, r2, [r1]
 800bdb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bdb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d1d9      	bne.n	800bd72 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d013      	beq.n	800bdee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdca:	4a13      	ldr	r2, [pc, #76]	@ (800be18 <HAL_UART_IRQHandler+0x29c>)
 800bdcc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7f8 f896 	bl	8003f04 <HAL_DMA_Abort_IT>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d017      	beq.n	800be0e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bde2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800bde8:	4610      	mov	r0, r2
 800bdea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdec:	e00f      	b.n	800be0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 f9c4 	bl	800c17c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdf4:	e00b      	b.n	800be0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 f9c0 	bl	800c17c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdfc:	e007      	b.n	800be0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 f9bc 	bl	800c17c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800be0c:	e198      	b.n	800c140 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be0e:	bf00      	nop
    return;
 800be10:	e196      	b.n	800c140 <HAL_UART_IRQHandler+0x5c4>
 800be12:	bf00      	nop
 800be14:	04000120 	.word	0x04000120
 800be18:	0800d01d 	.word	0x0800d01d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be20:	2b01      	cmp	r3, #1
 800be22:	f040 8166 	bne.w	800c0f2 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800be26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be2a:	f003 0310 	and.w	r3, r3, #16
 800be2e:	2b00      	cmp	r3, #0
 800be30:	f000 815f 	beq.w	800c0f2 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800be34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be38:	f003 0310 	and.w	r3, r3, #16
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	f000 8158 	beq.w	800c0f2 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	2210      	movs	r2, #16
 800be48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be54:	2b40      	cmp	r3, #64	@ 0x40
 800be56:	f040 80d0 	bne.w	800bffa <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800be66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	f000 80ab 	beq.w	800bfc6 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800be76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800be7a:	429a      	cmp	r2, r3
 800be7c:	f080 80a3 	bcs.w	800bfc6 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800be86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be8e:	69db      	ldr	r3, [r3, #28]
 800be90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be94:	f000 8086 	beq.w	800bfa4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bea4:	e853 3f00 	ldrex	r3, [r3]
 800bea8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800beac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800beb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800beb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	461a      	mov	r2, r3
 800bebe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bec2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bec6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800bece:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bed2:	e841 2300 	strex	r3, r2, [r1]
 800bed6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800beda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d1da      	bne.n	800be98 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	3308      	adds	r3, #8
 800bee8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800beec:	e853 3f00 	ldrex	r3, [r3]
 800bef0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bef2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bef4:	f023 0301 	bic.w	r3, r3, #1
 800bef8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	3308      	adds	r3, #8
 800bf02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bf06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bf0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bf0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bf12:	e841 2300 	strex	r3, r2, [r1]
 800bf16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bf18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d1e1      	bne.n	800bee2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	3308      	adds	r3, #8
 800bf24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bf28:	e853 3f00 	ldrex	r3, [r3]
 800bf2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bf2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	3308      	adds	r3, #8
 800bf3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bf42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bf44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bf48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bf4a:	e841 2300 	strex	r3, r2, [r1]
 800bf4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bf50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d1e3      	bne.n	800bf1e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2220      	movs	r2, #32
 800bf5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf6c:	e853 3f00 	ldrex	r3, [r3]
 800bf70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bf72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf74:	f023 0310 	bic.w	r3, r3, #16
 800bf78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	461a      	mov	r2, r3
 800bf82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf86:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bf8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf8e:	e841 2300 	strex	r3, r2, [r1]
 800bf92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bf94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d1e4      	bne.n	800bf64 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7f7 ff40 	bl	8003e24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2202      	movs	r2, #2
 800bfa8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	1ad3      	subs	r3, r2, r3
 800bfba:	b29b      	uxth	r3, r3
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 f8e6 	bl	800c190 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800bfc4:	e0be      	b.n	800c144 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bfcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	f040 80b7 	bne.w	800c144 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bfda:	69db      	ldr	r3, [r3, #28]
 800bfdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bfe0:	f040 80b0 	bne.w	800c144 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2202      	movs	r2, #2
 800bfe8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bff0:	4619      	mov	r1, r3
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 f8cc 	bl	800c190 <HAL_UARTEx_RxEventCallback>
      return;
 800bff8:	e0a4      	b.n	800c144 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c006:	b29b      	uxth	r3, r3
 800c008:	1ad3      	subs	r3, r2, r3
 800c00a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c014:	b29b      	uxth	r3, r3
 800c016:	2b00      	cmp	r3, #0
 800c018:	f000 8096 	beq.w	800c148 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800c01c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c020:	2b00      	cmp	r3, #0
 800c022:	f000 8091 	beq.w	800c148 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c02e:	e853 3f00 	ldrex	r3, [r3]
 800c032:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c036:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c03a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	461a      	mov	r2, r3
 800c044:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c048:	647b      	str	r3, [r7, #68]	@ 0x44
 800c04a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c04e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c050:	e841 2300 	strex	r3, r2, [r1]
 800c054:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d1e4      	bne.n	800c026 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	3308      	adds	r3, #8
 800c062:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c066:	e853 3f00 	ldrex	r3, [r3]
 800c06a:	623b      	str	r3, [r7, #32]
   return(result);
 800c06c:	6a3b      	ldr	r3, [r7, #32]
 800c06e:	f023 0301 	bic.w	r3, r3, #1
 800c072:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	3308      	adds	r3, #8
 800c07c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c080:	633a      	str	r2, [r7, #48]	@ 0x30
 800c082:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c084:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c088:	e841 2300 	strex	r3, r2, [r1]
 800c08c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c090:	2b00      	cmp	r3, #0
 800c092:	d1e3      	bne.n	800c05c <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2220      	movs	r2, #32
 800c098:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	e853 3f00 	ldrex	r3, [r3]
 800c0b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f023 0310 	bic.w	r3, r3, #16
 800c0bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c0ca:	61fb      	str	r3, [r7, #28]
 800c0cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ce:	69b9      	ldr	r1, [r7, #24]
 800c0d0:	69fa      	ldr	r2, [r7, #28]
 800c0d2:	e841 2300 	strex	r3, r2, [r1]
 800c0d6:	617b      	str	r3, [r7, #20]
   return(result);
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d1e4      	bne.n	800c0a8 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2202      	movs	r2, #2
 800c0e2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c0e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f000 f850 	bl	800c190 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c0f0:	e02a      	b.n	800c148 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c0f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d00e      	beq.n	800c11c <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c0fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c106:	2b00      	cmp	r3, #0
 800c108:	d008      	beq.n	800c11c <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d01c      	beq.n	800c14c <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	4798      	blx	r3
    }
    return;
 800c11a:	e017      	b.n	800c14c <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c11c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c124:	2b00      	cmp	r3, #0
 800c126:	d012      	beq.n	800c14e <HAL_UART_IRQHandler+0x5d2>
 800c128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c12c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c130:	2b00      	cmp	r3, #0
 800c132:	d00c      	beq.n	800c14e <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f001 f83e 	bl	800d1b6 <UART_EndTransmit_IT>
    return;
 800c13a:	e008      	b.n	800c14e <HAL_UART_IRQHandler+0x5d2>
      return;
 800c13c:	bf00      	nop
 800c13e:	e006      	b.n	800c14e <HAL_UART_IRQHandler+0x5d2>
    return;
 800c140:	bf00      	nop
 800c142:	e004      	b.n	800c14e <HAL_UART_IRQHandler+0x5d2>
      return;
 800c144:	bf00      	nop
 800c146:	e002      	b.n	800c14e <HAL_UART_IRQHandler+0x5d2>
      return;
 800c148:	bf00      	nop
 800c14a:	e000      	b.n	800c14e <HAL_UART_IRQHandler+0x5d2>
    return;
 800c14c:	bf00      	nop
  }

}
 800c14e:	37e8      	adds	r7, #232	@ 0xe8
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}

0800c154 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c154:	b480      	push	{r7}
 800c156:	b083      	sub	sp, #12
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c15c:	bf00      	nop
 800c15e:	370c      	adds	r7, #12
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr

0800c168 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c168:	b480      	push	{r7}
 800c16a:	b083      	sub	sp, #12
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c170:	bf00      	nop
 800c172:	370c      	adds	r7, #12
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c184:	bf00      	nop
 800c186:	370c      	adds	r7, #12
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr

0800c190 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c190:	b480      	push	{r7}
 800c192:	b083      	sub	sp, #12
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	460b      	mov	r3, r1
 800c19a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c19c:	bf00      	nop
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b088      	sub	sp, #32
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	689a      	ldr	r2, [r3, #8]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	691b      	ldr	r3, [r3, #16]
 800c1bc:	431a      	orrs	r2, r3
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	695b      	ldr	r3, [r3, #20]
 800c1c2:	431a      	orrs	r2, r3
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	69db      	ldr	r3, [r3, #28]
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	681a      	ldr	r2, [r3, #0]
 800c1d2:	4ba6      	ldr	r3, [pc, #664]	@ (800c46c <UART_SetConfig+0x2c4>)
 800c1d4:	4013      	ands	r3, r2
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	6812      	ldr	r2, [r2, #0]
 800c1da:	6979      	ldr	r1, [r7, #20]
 800c1dc:	430b      	orrs	r3, r1
 800c1de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	685b      	ldr	r3, [r3, #4]
 800c1e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	68da      	ldr	r2, [r3, #12]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	430a      	orrs	r2, r1
 800c1f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	699b      	ldr	r3, [r3, #24]
 800c1fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6a1b      	ldr	r3, [r3, #32]
 800c200:	697a      	ldr	r2, [r7, #20]
 800c202:	4313      	orrs	r3, r2
 800c204:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	689b      	ldr	r3, [r3, #8]
 800c20c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	697a      	ldr	r2, [r7, #20]
 800c216:	430a      	orrs	r2, r1
 800c218:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4a94      	ldr	r2, [pc, #592]	@ (800c470 <UART_SetConfig+0x2c8>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d120      	bne.n	800c266 <UART_SetConfig+0xbe>
 800c224:	4b93      	ldr	r3, [pc, #588]	@ (800c474 <UART_SetConfig+0x2cc>)
 800c226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c22a:	f003 0303 	and.w	r3, r3, #3
 800c22e:	2b03      	cmp	r3, #3
 800c230:	d816      	bhi.n	800c260 <UART_SetConfig+0xb8>
 800c232:	a201      	add	r2, pc, #4	@ (adr r2, 800c238 <UART_SetConfig+0x90>)
 800c234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c238:	0800c249 	.word	0x0800c249
 800c23c:	0800c255 	.word	0x0800c255
 800c240:	0800c24f 	.word	0x0800c24f
 800c244:	0800c25b 	.word	0x0800c25b
 800c248:	2301      	movs	r3, #1
 800c24a:	77fb      	strb	r3, [r7, #31]
 800c24c:	e150      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c24e:	2302      	movs	r3, #2
 800c250:	77fb      	strb	r3, [r7, #31]
 800c252:	e14d      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c254:	2304      	movs	r3, #4
 800c256:	77fb      	strb	r3, [r7, #31]
 800c258:	e14a      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c25a:	2308      	movs	r3, #8
 800c25c:	77fb      	strb	r3, [r7, #31]
 800c25e:	e147      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c260:	2310      	movs	r3, #16
 800c262:	77fb      	strb	r3, [r7, #31]
 800c264:	e144      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a83      	ldr	r2, [pc, #524]	@ (800c478 <UART_SetConfig+0x2d0>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d132      	bne.n	800c2d6 <UART_SetConfig+0x12e>
 800c270:	4b80      	ldr	r3, [pc, #512]	@ (800c474 <UART_SetConfig+0x2cc>)
 800c272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c276:	f003 030c 	and.w	r3, r3, #12
 800c27a:	2b0c      	cmp	r3, #12
 800c27c:	d828      	bhi.n	800c2d0 <UART_SetConfig+0x128>
 800c27e:	a201      	add	r2, pc, #4	@ (adr r2, 800c284 <UART_SetConfig+0xdc>)
 800c280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c284:	0800c2b9 	.word	0x0800c2b9
 800c288:	0800c2d1 	.word	0x0800c2d1
 800c28c:	0800c2d1 	.word	0x0800c2d1
 800c290:	0800c2d1 	.word	0x0800c2d1
 800c294:	0800c2c5 	.word	0x0800c2c5
 800c298:	0800c2d1 	.word	0x0800c2d1
 800c29c:	0800c2d1 	.word	0x0800c2d1
 800c2a0:	0800c2d1 	.word	0x0800c2d1
 800c2a4:	0800c2bf 	.word	0x0800c2bf
 800c2a8:	0800c2d1 	.word	0x0800c2d1
 800c2ac:	0800c2d1 	.word	0x0800c2d1
 800c2b0:	0800c2d1 	.word	0x0800c2d1
 800c2b4:	0800c2cb 	.word	0x0800c2cb
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	77fb      	strb	r3, [r7, #31]
 800c2bc:	e118      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c2be:	2302      	movs	r3, #2
 800c2c0:	77fb      	strb	r3, [r7, #31]
 800c2c2:	e115      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c2c4:	2304      	movs	r3, #4
 800c2c6:	77fb      	strb	r3, [r7, #31]
 800c2c8:	e112      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c2ca:	2308      	movs	r3, #8
 800c2cc:	77fb      	strb	r3, [r7, #31]
 800c2ce:	e10f      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c2d0:	2310      	movs	r3, #16
 800c2d2:	77fb      	strb	r3, [r7, #31]
 800c2d4:	e10c      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a68      	ldr	r2, [pc, #416]	@ (800c47c <UART_SetConfig+0x2d4>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d120      	bne.n	800c322 <UART_SetConfig+0x17a>
 800c2e0:	4b64      	ldr	r3, [pc, #400]	@ (800c474 <UART_SetConfig+0x2cc>)
 800c2e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2e6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c2ea:	2b30      	cmp	r3, #48	@ 0x30
 800c2ec:	d013      	beq.n	800c316 <UART_SetConfig+0x16e>
 800c2ee:	2b30      	cmp	r3, #48	@ 0x30
 800c2f0:	d814      	bhi.n	800c31c <UART_SetConfig+0x174>
 800c2f2:	2b20      	cmp	r3, #32
 800c2f4:	d009      	beq.n	800c30a <UART_SetConfig+0x162>
 800c2f6:	2b20      	cmp	r3, #32
 800c2f8:	d810      	bhi.n	800c31c <UART_SetConfig+0x174>
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d002      	beq.n	800c304 <UART_SetConfig+0x15c>
 800c2fe:	2b10      	cmp	r3, #16
 800c300:	d006      	beq.n	800c310 <UART_SetConfig+0x168>
 800c302:	e00b      	b.n	800c31c <UART_SetConfig+0x174>
 800c304:	2300      	movs	r3, #0
 800c306:	77fb      	strb	r3, [r7, #31]
 800c308:	e0f2      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c30a:	2302      	movs	r3, #2
 800c30c:	77fb      	strb	r3, [r7, #31]
 800c30e:	e0ef      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c310:	2304      	movs	r3, #4
 800c312:	77fb      	strb	r3, [r7, #31]
 800c314:	e0ec      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c316:	2308      	movs	r3, #8
 800c318:	77fb      	strb	r3, [r7, #31]
 800c31a:	e0e9      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c31c:	2310      	movs	r3, #16
 800c31e:	77fb      	strb	r3, [r7, #31]
 800c320:	e0e6      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4a56      	ldr	r2, [pc, #344]	@ (800c480 <UART_SetConfig+0x2d8>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d120      	bne.n	800c36e <UART_SetConfig+0x1c6>
 800c32c:	4b51      	ldr	r3, [pc, #324]	@ (800c474 <UART_SetConfig+0x2cc>)
 800c32e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c332:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c336:	2bc0      	cmp	r3, #192	@ 0xc0
 800c338:	d013      	beq.n	800c362 <UART_SetConfig+0x1ba>
 800c33a:	2bc0      	cmp	r3, #192	@ 0xc0
 800c33c:	d814      	bhi.n	800c368 <UART_SetConfig+0x1c0>
 800c33e:	2b80      	cmp	r3, #128	@ 0x80
 800c340:	d009      	beq.n	800c356 <UART_SetConfig+0x1ae>
 800c342:	2b80      	cmp	r3, #128	@ 0x80
 800c344:	d810      	bhi.n	800c368 <UART_SetConfig+0x1c0>
 800c346:	2b00      	cmp	r3, #0
 800c348:	d002      	beq.n	800c350 <UART_SetConfig+0x1a8>
 800c34a:	2b40      	cmp	r3, #64	@ 0x40
 800c34c:	d006      	beq.n	800c35c <UART_SetConfig+0x1b4>
 800c34e:	e00b      	b.n	800c368 <UART_SetConfig+0x1c0>
 800c350:	2300      	movs	r3, #0
 800c352:	77fb      	strb	r3, [r7, #31]
 800c354:	e0cc      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c356:	2302      	movs	r3, #2
 800c358:	77fb      	strb	r3, [r7, #31]
 800c35a:	e0c9      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c35c:	2304      	movs	r3, #4
 800c35e:	77fb      	strb	r3, [r7, #31]
 800c360:	e0c6      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c362:	2308      	movs	r3, #8
 800c364:	77fb      	strb	r3, [r7, #31]
 800c366:	e0c3      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c368:	2310      	movs	r3, #16
 800c36a:	77fb      	strb	r3, [r7, #31]
 800c36c:	e0c0      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	4a44      	ldr	r2, [pc, #272]	@ (800c484 <UART_SetConfig+0x2dc>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d125      	bne.n	800c3c4 <UART_SetConfig+0x21c>
 800c378:	4b3e      	ldr	r3, [pc, #248]	@ (800c474 <UART_SetConfig+0x2cc>)
 800c37a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c37e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c382:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c386:	d017      	beq.n	800c3b8 <UART_SetConfig+0x210>
 800c388:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c38c:	d817      	bhi.n	800c3be <UART_SetConfig+0x216>
 800c38e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c392:	d00b      	beq.n	800c3ac <UART_SetConfig+0x204>
 800c394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c398:	d811      	bhi.n	800c3be <UART_SetConfig+0x216>
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d003      	beq.n	800c3a6 <UART_SetConfig+0x1fe>
 800c39e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3a2:	d006      	beq.n	800c3b2 <UART_SetConfig+0x20a>
 800c3a4:	e00b      	b.n	800c3be <UART_SetConfig+0x216>
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	77fb      	strb	r3, [r7, #31]
 800c3aa:	e0a1      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c3ac:	2302      	movs	r3, #2
 800c3ae:	77fb      	strb	r3, [r7, #31]
 800c3b0:	e09e      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c3b2:	2304      	movs	r3, #4
 800c3b4:	77fb      	strb	r3, [r7, #31]
 800c3b6:	e09b      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c3b8:	2308      	movs	r3, #8
 800c3ba:	77fb      	strb	r3, [r7, #31]
 800c3bc:	e098      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c3be:	2310      	movs	r3, #16
 800c3c0:	77fb      	strb	r3, [r7, #31]
 800c3c2:	e095      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a2f      	ldr	r2, [pc, #188]	@ (800c488 <UART_SetConfig+0x2e0>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d125      	bne.n	800c41a <UART_SetConfig+0x272>
 800c3ce:	4b29      	ldr	r3, [pc, #164]	@ (800c474 <UART_SetConfig+0x2cc>)
 800c3d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c3d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c3dc:	d017      	beq.n	800c40e <UART_SetConfig+0x266>
 800c3de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c3e2:	d817      	bhi.n	800c414 <UART_SetConfig+0x26c>
 800c3e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c3e8:	d00b      	beq.n	800c402 <UART_SetConfig+0x25a>
 800c3ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c3ee:	d811      	bhi.n	800c414 <UART_SetConfig+0x26c>
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d003      	beq.n	800c3fc <UART_SetConfig+0x254>
 800c3f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3f8:	d006      	beq.n	800c408 <UART_SetConfig+0x260>
 800c3fa:	e00b      	b.n	800c414 <UART_SetConfig+0x26c>
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	77fb      	strb	r3, [r7, #31]
 800c400:	e076      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c402:	2302      	movs	r3, #2
 800c404:	77fb      	strb	r3, [r7, #31]
 800c406:	e073      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c408:	2304      	movs	r3, #4
 800c40a:	77fb      	strb	r3, [r7, #31]
 800c40c:	e070      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c40e:	2308      	movs	r3, #8
 800c410:	77fb      	strb	r3, [r7, #31]
 800c412:	e06d      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c414:	2310      	movs	r3, #16
 800c416:	77fb      	strb	r3, [r7, #31]
 800c418:	e06a      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a1b      	ldr	r2, [pc, #108]	@ (800c48c <UART_SetConfig+0x2e4>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d138      	bne.n	800c496 <UART_SetConfig+0x2ee>
 800c424:	4b13      	ldr	r3, [pc, #76]	@ (800c474 <UART_SetConfig+0x2cc>)
 800c426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c42a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800c42e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c432:	d017      	beq.n	800c464 <UART_SetConfig+0x2bc>
 800c434:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c438:	d82a      	bhi.n	800c490 <UART_SetConfig+0x2e8>
 800c43a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c43e:	d00b      	beq.n	800c458 <UART_SetConfig+0x2b0>
 800c440:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c444:	d824      	bhi.n	800c490 <UART_SetConfig+0x2e8>
 800c446:	2b00      	cmp	r3, #0
 800c448:	d003      	beq.n	800c452 <UART_SetConfig+0x2aa>
 800c44a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c44e:	d006      	beq.n	800c45e <UART_SetConfig+0x2b6>
 800c450:	e01e      	b.n	800c490 <UART_SetConfig+0x2e8>
 800c452:	2300      	movs	r3, #0
 800c454:	77fb      	strb	r3, [r7, #31]
 800c456:	e04b      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c458:	2302      	movs	r3, #2
 800c45a:	77fb      	strb	r3, [r7, #31]
 800c45c:	e048      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c45e:	2304      	movs	r3, #4
 800c460:	77fb      	strb	r3, [r7, #31]
 800c462:	e045      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c464:	2308      	movs	r3, #8
 800c466:	77fb      	strb	r3, [r7, #31]
 800c468:	e042      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c46a:	bf00      	nop
 800c46c:	efff69f3 	.word	0xefff69f3
 800c470:	40011000 	.word	0x40011000
 800c474:	40023800 	.word	0x40023800
 800c478:	40004400 	.word	0x40004400
 800c47c:	40004800 	.word	0x40004800
 800c480:	40004c00 	.word	0x40004c00
 800c484:	40005000 	.word	0x40005000
 800c488:	40011400 	.word	0x40011400
 800c48c:	40007800 	.word	0x40007800
 800c490:	2310      	movs	r3, #16
 800c492:	77fb      	strb	r3, [r7, #31]
 800c494:	e02c      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a72      	ldr	r2, [pc, #456]	@ (800c664 <UART_SetConfig+0x4bc>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d125      	bne.n	800c4ec <UART_SetConfig+0x344>
 800c4a0:	4b71      	ldr	r3, [pc, #452]	@ (800c668 <UART_SetConfig+0x4c0>)
 800c4a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4a6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c4aa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c4ae:	d017      	beq.n	800c4e0 <UART_SetConfig+0x338>
 800c4b0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c4b4:	d817      	bhi.n	800c4e6 <UART_SetConfig+0x33e>
 800c4b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c4ba:	d00b      	beq.n	800c4d4 <UART_SetConfig+0x32c>
 800c4bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c4c0:	d811      	bhi.n	800c4e6 <UART_SetConfig+0x33e>
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d003      	beq.n	800c4ce <UART_SetConfig+0x326>
 800c4c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c4ca:	d006      	beq.n	800c4da <UART_SetConfig+0x332>
 800c4cc:	e00b      	b.n	800c4e6 <UART_SetConfig+0x33e>
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	77fb      	strb	r3, [r7, #31]
 800c4d2:	e00d      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c4d4:	2302      	movs	r3, #2
 800c4d6:	77fb      	strb	r3, [r7, #31]
 800c4d8:	e00a      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c4da:	2304      	movs	r3, #4
 800c4dc:	77fb      	strb	r3, [r7, #31]
 800c4de:	e007      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c4e0:	2308      	movs	r3, #8
 800c4e2:	77fb      	strb	r3, [r7, #31]
 800c4e4:	e004      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c4e6:	2310      	movs	r3, #16
 800c4e8:	77fb      	strb	r3, [r7, #31]
 800c4ea:	e001      	b.n	800c4f0 <UART_SetConfig+0x348>
 800c4ec:	2310      	movs	r3, #16
 800c4ee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	69db      	ldr	r3, [r3, #28]
 800c4f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c4f8:	d15b      	bne.n	800c5b2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800c4fa:	7ffb      	ldrb	r3, [r7, #31]
 800c4fc:	2b08      	cmp	r3, #8
 800c4fe:	d828      	bhi.n	800c552 <UART_SetConfig+0x3aa>
 800c500:	a201      	add	r2, pc, #4	@ (adr r2, 800c508 <UART_SetConfig+0x360>)
 800c502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c506:	bf00      	nop
 800c508:	0800c52d 	.word	0x0800c52d
 800c50c:	0800c535 	.word	0x0800c535
 800c510:	0800c53d 	.word	0x0800c53d
 800c514:	0800c553 	.word	0x0800c553
 800c518:	0800c543 	.word	0x0800c543
 800c51c:	0800c553 	.word	0x0800c553
 800c520:	0800c553 	.word	0x0800c553
 800c524:	0800c553 	.word	0x0800c553
 800c528:	0800c54b 	.word	0x0800c54b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c52c:	f7fc fc14 	bl	8008d58 <HAL_RCC_GetPCLK1Freq>
 800c530:	61b8      	str	r0, [r7, #24]
        break;
 800c532:	e013      	b.n	800c55c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c534:	f7fc fc24 	bl	8008d80 <HAL_RCC_GetPCLK2Freq>
 800c538:	61b8      	str	r0, [r7, #24]
        break;
 800c53a:	e00f      	b.n	800c55c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c53c:	4b4b      	ldr	r3, [pc, #300]	@ (800c66c <UART_SetConfig+0x4c4>)
 800c53e:	61bb      	str	r3, [r7, #24]
        break;
 800c540:	e00c      	b.n	800c55c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c542:	f7fc faf7 	bl	8008b34 <HAL_RCC_GetSysClockFreq>
 800c546:	61b8      	str	r0, [r7, #24]
        break;
 800c548:	e008      	b.n	800c55c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c54a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c54e:	61bb      	str	r3, [r7, #24]
        break;
 800c550:	e004      	b.n	800c55c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c552:	2300      	movs	r3, #0
 800c554:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c556:	2301      	movs	r3, #1
 800c558:	77bb      	strb	r3, [r7, #30]
        break;
 800c55a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c55c:	69bb      	ldr	r3, [r7, #24]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d074      	beq.n	800c64c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c562:	69bb      	ldr	r3, [r7, #24]
 800c564:	005a      	lsls	r2, r3, #1
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	085b      	lsrs	r3, r3, #1
 800c56c:	441a      	add	r2, r3
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	fbb2 f3f3 	udiv	r3, r2, r3
 800c576:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	2b0f      	cmp	r3, #15
 800c57c:	d916      	bls.n	800c5ac <UART_SetConfig+0x404>
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c584:	d212      	bcs.n	800c5ac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	b29b      	uxth	r3, r3
 800c58a:	f023 030f 	bic.w	r3, r3, #15
 800c58e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	085b      	lsrs	r3, r3, #1
 800c594:	b29b      	uxth	r3, r3
 800c596:	f003 0307 	and.w	r3, r3, #7
 800c59a:	b29a      	uxth	r2, r3
 800c59c:	89fb      	ldrh	r3, [r7, #14]
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	89fa      	ldrh	r2, [r7, #14]
 800c5a8:	60da      	str	r2, [r3, #12]
 800c5aa:	e04f      	b.n	800c64c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	77bb      	strb	r3, [r7, #30]
 800c5b0:	e04c      	b.n	800c64c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c5b2:	7ffb      	ldrb	r3, [r7, #31]
 800c5b4:	2b08      	cmp	r3, #8
 800c5b6:	d828      	bhi.n	800c60a <UART_SetConfig+0x462>
 800c5b8:	a201      	add	r2, pc, #4	@ (adr r2, 800c5c0 <UART_SetConfig+0x418>)
 800c5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5be:	bf00      	nop
 800c5c0:	0800c5e5 	.word	0x0800c5e5
 800c5c4:	0800c5ed 	.word	0x0800c5ed
 800c5c8:	0800c5f5 	.word	0x0800c5f5
 800c5cc:	0800c60b 	.word	0x0800c60b
 800c5d0:	0800c5fb 	.word	0x0800c5fb
 800c5d4:	0800c60b 	.word	0x0800c60b
 800c5d8:	0800c60b 	.word	0x0800c60b
 800c5dc:	0800c60b 	.word	0x0800c60b
 800c5e0:	0800c603 	.word	0x0800c603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c5e4:	f7fc fbb8 	bl	8008d58 <HAL_RCC_GetPCLK1Freq>
 800c5e8:	61b8      	str	r0, [r7, #24]
        break;
 800c5ea:	e013      	b.n	800c614 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c5ec:	f7fc fbc8 	bl	8008d80 <HAL_RCC_GetPCLK2Freq>
 800c5f0:	61b8      	str	r0, [r7, #24]
        break;
 800c5f2:	e00f      	b.n	800c614 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c5f4:	4b1d      	ldr	r3, [pc, #116]	@ (800c66c <UART_SetConfig+0x4c4>)
 800c5f6:	61bb      	str	r3, [r7, #24]
        break;
 800c5f8:	e00c      	b.n	800c614 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c5fa:	f7fc fa9b 	bl	8008b34 <HAL_RCC_GetSysClockFreq>
 800c5fe:	61b8      	str	r0, [r7, #24]
        break;
 800c600:	e008      	b.n	800c614 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c606:	61bb      	str	r3, [r7, #24]
        break;
 800c608:	e004      	b.n	800c614 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c60a:	2300      	movs	r3, #0
 800c60c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c60e:	2301      	movs	r3, #1
 800c610:	77bb      	strb	r3, [r7, #30]
        break;
 800c612:	bf00      	nop
    }

    if (pclk != 0U)
 800c614:	69bb      	ldr	r3, [r7, #24]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d018      	beq.n	800c64c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	685b      	ldr	r3, [r3, #4]
 800c61e:	085a      	lsrs	r2, r3, #1
 800c620:	69bb      	ldr	r3, [r7, #24]
 800c622:	441a      	add	r2, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	fbb2 f3f3 	udiv	r3, r2, r3
 800c62c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	2b0f      	cmp	r3, #15
 800c632:	d909      	bls.n	800c648 <UART_SetConfig+0x4a0>
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c63a:	d205      	bcs.n	800c648 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	b29a      	uxth	r2, r3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	60da      	str	r2, [r3, #12]
 800c646:	e001      	b.n	800c64c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c648:	2301      	movs	r3, #1
 800c64a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2200      	movs	r2, #0
 800c650:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2200      	movs	r2, #0
 800c656:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800c658:	7fbb      	ldrb	r3, [r7, #30]
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3720      	adds	r7, #32
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop
 800c664:	40007c00 	.word	0x40007c00
 800c668:	40023800 	.word	0x40023800
 800c66c:	00f42400 	.word	0x00f42400

0800c670 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c670:	b480      	push	{r7}
 800c672:	b083      	sub	sp, #12
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c67c:	f003 0308 	and.w	r3, r3, #8
 800c680:	2b00      	cmp	r3, #0
 800c682:	d00a      	beq.n	800c69a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	685b      	ldr	r3, [r3, #4]
 800c68a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	430a      	orrs	r2, r1
 800c698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c69e:	f003 0301 	and.w	r3, r3, #1
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d00a      	beq.n	800c6bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	685b      	ldr	r3, [r3, #4]
 800c6ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	430a      	orrs	r2, r1
 800c6ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6c0:	f003 0302 	and.w	r3, r3, #2
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d00a      	beq.n	800c6de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	430a      	orrs	r2, r1
 800c6dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6e2:	f003 0304 	and.w	r3, r3, #4
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00a      	beq.n	800c700 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	430a      	orrs	r2, r1
 800c6fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c704:	f003 0310 	and.w	r3, r3, #16
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d00a      	beq.n	800c722 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	689b      	ldr	r3, [r3, #8]
 800c712:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	430a      	orrs	r2, r1
 800c720:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c726:	f003 0320 	and.w	r3, r3, #32
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d00a      	beq.n	800c744 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	689b      	ldr	r3, [r3, #8]
 800c734:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	430a      	orrs	r2, r1
 800c742:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d01a      	beq.n	800c786 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	430a      	orrs	r2, r1
 800c764:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c76a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c76e:	d10a      	bne.n	800c786 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	430a      	orrs	r2, r1
 800c784:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c78a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d00a      	beq.n	800c7a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	430a      	orrs	r2, r1
 800c7a6:	605a      	str	r2, [r3, #4]
  }
}
 800c7a8:	bf00      	nop
 800c7aa:	370c      	adds	r7, #12
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b2:	4770      	bx	lr

0800c7b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b08c      	sub	sp, #48	@ 0x30
 800c7b8:	af02      	add	r7, sp, #8
 800c7ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c7c4:	f7f6 f82e 	bl	8002824 <HAL_GetTick>
 800c7c8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f003 0308 	and.w	r3, r3, #8
 800c7d4:	2b08      	cmp	r3, #8
 800c7d6:	d12e      	bne.n	800c836 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c7d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c7dc:	9300      	str	r3, [sp, #0]
 800c7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 f83b 	bl	800c862 <UART_WaitOnFlagUntilTimeout>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d021      	beq.n	800c836 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	e853 3f00 	ldrex	r3, [r3]
 800c7fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c806:	623b      	str	r3, [r7, #32]
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	461a      	mov	r2, r3
 800c80e:	6a3b      	ldr	r3, [r7, #32]
 800c810:	61fb      	str	r3, [r7, #28]
 800c812:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c814:	69b9      	ldr	r1, [r7, #24]
 800c816:	69fa      	ldr	r2, [r7, #28]
 800c818:	e841 2300 	strex	r3, r2, [r1]
 800c81c:	617b      	str	r3, [r7, #20]
   return(result);
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d1e6      	bne.n	800c7f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2220      	movs	r2, #32
 800c828:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c832:	2303      	movs	r3, #3
 800c834:	e011      	b.n	800c85a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2220      	movs	r2, #32
 800c83a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2220      	movs	r2, #32
 800c840:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2200      	movs	r2, #0
 800c848:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2200      	movs	r2, #0
 800c84e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2200      	movs	r2, #0
 800c854:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800c858:	2300      	movs	r3, #0
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3728      	adds	r7, #40	@ 0x28
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}

0800c862 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c862:	b580      	push	{r7, lr}
 800c864:	b084      	sub	sp, #16
 800c866:	af00      	add	r7, sp, #0
 800c868:	60f8      	str	r0, [r7, #12]
 800c86a:	60b9      	str	r1, [r7, #8]
 800c86c:	603b      	str	r3, [r7, #0]
 800c86e:	4613      	mov	r3, r2
 800c870:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c872:	e04f      	b.n	800c914 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c874:	69bb      	ldr	r3, [r7, #24]
 800c876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c87a:	d04b      	beq.n	800c914 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c87c:	f7f5 ffd2 	bl	8002824 <HAL_GetTick>
 800c880:	4602      	mov	r2, r0
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	1ad3      	subs	r3, r2, r3
 800c886:	69ba      	ldr	r2, [r7, #24]
 800c888:	429a      	cmp	r2, r3
 800c88a:	d302      	bcc.n	800c892 <UART_WaitOnFlagUntilTimeout+0x30>
 800c88c:	69bb      	ldr	r3, [r7, #24]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d101      	bne.n	800c896 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c892:	2303      	movs	r3, #3
 800c894:	e04e      	b.n	800c934 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f003 0304 	and.w	r3, r3, #4
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d037      	beq.n	800c914 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	2b80      	cmp	r3, #128	@ 0x80
 800c8a8:	d034      	beq.n	800c914 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	2b40      	cmp	r3, #64	@ 0x40
 800c8ae:	d031      	beq.n	800c914 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	69db      	ldr	r3, [r3, #28]
 800c8b6:	f003 0308 	and.w	r3, r3, #8
 800c8ba:	2b08      	cmp	r3, #8
 800c8bc:	d110      	bne.n	800c8e0 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2208      	movs	r2, #8
 800c8c4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c8c6:	68f8      	ldr	r0, [r7, #12]
 800c8c8:	f000 f9c4 	bl	800cc54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2208      	movs	r2, #8
 800c8d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	e029      	b.n	800c934 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	69db      	ldr	r3, [r3, #28]
 800c8e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c8ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c8ee:	d111      	bne.n	800c914 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c8f8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c8fa:	68f8      	ldr	r0, [r7, #12]
 800c8fc:	f000 f9aa 	bl	800cc54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	2220      	movs	r2, #32
 800c904:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2200      	movs	r2, #0
 800c90c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800c910:	2303      	movs	r3, #3
 800c912:	e00f      	b.n	800c934 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	69da      	ldr	r2, [r3, #28]
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	4013      	ands	r3, r2
 800c91e:	68ba      	ldr	r2, [r7, #8]
 800c920:	429a      	cmp	r2, r3
 800c922:	bf0c      	ite	eq
 800c924:	2301      	moveq	r3, #1
 800c926:	2300      	movne	r3, #0
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	461a      	mov	r2, r3
 800c92c:	79fb      	ldrb	r3, [r7, #7]
 800c92e:	429a      	cmp	r2, r3
 800c930:	d0a0      	beq.n	800c874 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c932:	2300      	movs	r3, #0
}
 800c934:	4618      	mov	r0, r3
 800c936:	3710      	adds	r7, #16
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b097      	sub	sp, #92	@ 0x5c
 800c940:	af00      	add	r7, sp, #0
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	4613      	mov	r3, r2
 800c948:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	68ba      	ldr	r2, [r7, #8]
 800c94e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	88fa      	ldrh	r2, [r7, #6]
 800c954:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	88fa      	ldrh	r2, [r7, #6]
 800c95c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2200      	movs	r2, #0
 800c964:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c96e:	d10e      	bne.n	800c98e <UART_Start_Receive_IT+0x52>
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	691b      	ldr	r3, [r3, #16]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d105      	bne.n	800c984 <UART_Start_Receive_IT+0x48>
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c97e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c982:	e02d      	b.n	800c9e0 <UART_Start_Receive_IT+0xa4>
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	22ff      	movs	r2, #255	@ 0xff
 800c988:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c98c:	e028      	b.n	800c9e0 <UART_Start_Receive_IT+0xa4>
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	689b      	ldr	r3, [r3, #8]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d10d      	bne.n	800c9b2 <UART_Start_Receive_IT+0x76>
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	691b      	ldr	r3, [r3, #16]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d104      	bne.n	800c9a8 <UART_Start_Receive_IT+0x6c>
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	22ff      	movs	r2, #255	@ 0xff
 800c9a2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c9a6:	e01b      	b.n	800c9e0 <UART_Start_Receive_IT+0xa4>
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	227f      	movs	r2, #127	@ 0x7f
 800c9ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c9b0:	e016      	b.n	800c9e0 <UART_Start_Receive_IT+0xa4>
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	689b      	ldr	r3, [r3, #8]
 800c9b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c9ba:	d10d      	bne.n	800c9d8 <UART_Start_Receive_IT+0x9c>
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	691b      	ldr	r3, [r3, #16]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d104      	bne.n	800c9ce <UART_Start_Receive_IT+0x92>
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	227f      	movs	r2, #127	@ 0x7f
 800c9c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c9cc:	e008      	b.n	800c9e0 <UART_Start_Receive_IT+0xa4>
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	223f      	movs	r2, #63	@ 0x3f
 800c9d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c9d6:	e003      	b.n	800c9e0 <UART_Start_Receive_IT+0xa4>
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2222      	movs	r2, #34	@ 0x22
 800c9ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	3308      	adds	r3, #8
 800c9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9fa:	e853 3f00 	ldrex	r3, [r3]
 800c9fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ca00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca02:	f043 0301 	orr.w	r3, r3, #1
 800ca06:	657b      	str	r3, [r7, #84]	@ 0x54
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	3308      	adds	r3, #8
 800ca0e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ca10:	64ba      	str	r2, [r7, #72]	@ 0x48
 800ca12:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca14:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ca16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca18:	e841 2300 	strex	r3, r2, [r1]
 800ca1c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ca1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d1e5      	bne.n	800c9f0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	689b      	ldr	r3, [r3, #8]
 800ca28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca2c:	d107      	bne.n	800ca3e <UART_Start_Receive_IT+0x102>
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	691b      	ldr	r3, [r3, #16]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d103      	bne.n	800ca3e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	4a21      	ldr	r2, [pc, #132]	@ (800cac0 <UART_Start_Receive_IT+0x184>)
 800ca3a:	669a      	str	r2, [r3, #104]	@ 0x68
 800ca3c:	e002      	b.n	800ca44 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	4a20      	ldr	r2, [pc, #128]	@ (800cac4 <UART_Start_Receive_IT+0x188>)
 800ca42:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	691b      	ldr	r3, [r3, #16]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d019      	beq.n	800ca80 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca54:	e853 3f00 	ldrex	r3, [r3]
 800ca58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ca5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca5c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ca60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	461a      	mov	r2, r3
 800ca68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca6c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ca70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca72:	e841 2300 	strex	r3, r2, [r1]
 800ca76:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ca78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d1e6      	bne.n	800ca4c <UART_Start_Receive_IT+0x110>
 800ca7e:	e018      	b.n	800cab2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	e853 3f00 	ldrex	r3, [r3]
 800ca8c:	613b      	str	r3, [r7, #16]
   return(result);
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	f043 0320 	orr.w	r3, r3, #32
 800ca94:	653b      	str	r3, [r7, #80]	@ 0x50
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca9e:	623b      	str	r3, [r7, #32]
 800caa0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caa2:	69f9      	ldr	r1, [r7, #28]
 800caa4:	6a3a      	ldr	r2, [r7, #32]
 800caa6:	e841 2300 	strex	r3, r2, [r1]
 800caaa:	61bb      	str	r3, [r7, #24]
   return(result);
 800caac:	69bb      	ldr	r3, [r7, #24]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d1e6      	bne.n	800ca80 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800cab2:	2300      	movs	r3, #0
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	375c      	adds	r7, #92	@ 0x5c
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr
 800cac0:	0800d3b3 	.word	0x0800d3b3
 800cac4:	0800d20b 	.word	0x0800d20b

0800cac8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b096      	sub	sp, #88	@ 0x58
 800cacc:	af00      	add	r7, sp, #0
 800cace:	60f8      	str	r0, [r7, #12]
 800cad0:	60b9      	str	r1, [r7, #8]
 800cad2:	4613      	mov	r3, r2
 800cad4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	68ba      	ldr	r2, [r7, #8]
 800cada:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	88fa      	ldrh	r2, [r7, #6]
 800cae0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2200      	movs	r2, #0
 800cae8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	2222      	movs	r2, #34	@ 0x22
 800caf0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d028      	beq.n	800cb4e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb00:	4a3e      	ldr	r2, [pc, #248]	@ (800cbfc <UART_Start_Receive_DMA+0x134>)
 800cb02:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb08:	4a3d      	ldr	r2, [pc, #244]	@ (800cc00 <UART_Start_Receive_DMA+0x138>)
 800cb0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb10:	4a3c      	ldr	r2, [pc, #240]	@ (800cc04 <UART_Start_Receive_DMA+0x13c>)
 800cb12:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb18:	2200      	movs	r2, #0
 800cb1a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	3324      	adds	r3, #36	@ 0x24
 800cb26:	4619      	mov	r1, r3
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	88fb      	ldrh	r3, [r7, #6]
 800cb30:	f7f7 f918 	bl	8003d64 <HAL_DMA_Start_IT>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d009      	beq.n	800cb4e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2210      	movs	r2, #16
 800cb3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2220      	movs	r2, #32
 800cb46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	e051      	b.n	800cbf2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	691b      	ldr	r3, [r3, #16]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d018      	beq.n	800cb88 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb5e:	e853 3f00 	ldrex	r3, [r3]
 800cb62:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cb64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cb6a:	657b      	str	r3, [r7, #84]	@ 0x54
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	461a      	mov	r2, r3
 800cb72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb74:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb76:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb78:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cb7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb7c:	e841 2300 	strex	r3, r2, [r1]
 800cb80:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800cb82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d1e6      	bne.n	800cb56 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	3308      	adds	r3, #8
 800cb8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb92:	e853 3f00 	ldrex	r3, [r3]
 800cb96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb9a:	f043 0301 	orr.w	r3, r3, #1
 800cb9e:	653b      	str	r3, [r7, #80]	@ 0x50
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	3308      	adds	r3, #8
 800cba6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cba8:	637a      	str	r2, [r7, #52]	@ 0x34
 800cbaa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cbae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cbb0:	e841 2300 	strex	r3, r2, [r1]
 800cbb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800cbb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d1e5      	bne.n	800cb88 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	3308      	adds	r3, #8
 800cbc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	e853 3f00 	ldrex	r3, [r3]
 800cbca:	613b      	str	r3, [r7, #16]
   return(result);
 800cbcc:	693b      	ldr	r3, [r7, #16]
 800cbce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	3308      	adds	r3, #8
 800cbda:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cbdc:	623a      	str	r2, [r7, #32]
 800cbde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbe0:	69f9      	ldr	r1, [r7, #28]
 800cbe2:	6a3a      	ldr	r2, [r7, #32]
 800cbe4:	e841 2300 	strex	r3, r2, [r1]
 800cbe8:	61bb      	str	r3, [r7, #24]
   return(result);
 800cbea:	69bb      	ldr	r3, [r7, #24]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d1e5      	bne.n	800cbbc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800cbf0:	2300      	movs	r3, #0
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3758      	adds	r7, #88	@ 0x58
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	0800cdcf 	.word	0x0800cdcf
 800cc00:	0800cf2d 	.word	0x0800cf2d
 800cc04:	0800cf9f 	.word	0x0800cf9f

0800cc08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b089      	sub	sp, #36	@ 0x24
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	e853 3f00 	ldrex	r3, [r3]
 800cc1c:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cc24:	61fb      	str	r3, [r7, #28]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	61bb      	str	r3, [r7, #24]
 800cc30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc32:	6979      	ldr	r1, [r7, #20]
 800cc34:	69ba      	ldr	r2, [r7, #24]
 800cc36:	e841 2300 	strex	r3, r2, [r1]
 800cc3a:	613b      	str	r3, [r7, #16]
   return(result);
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d1e6      	bne.n	800cc10 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2220      	movs	r2, #32
 800cc46:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800cc48:	bf00      	nop
 800cc4a:	3724      	adds	r7, #36	@ 0x24
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc52:	4770      	bx	lr

0800cc54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b095      	sub	sp, #84	@ 0x54
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc64:	e853 3f00 	ldrex	r3, [r3]
 800cc68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cc6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cc70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	461a      	mov	r2, r3
 800cc78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc7a:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cc80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc82:	e841 2300 	strex	r3, r2, [r1]
 800cc86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cc88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d1e6      	bne.n	800cc5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	3308      	adds	r3, #8
 800cc94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc96:	6a3b      	ldr	r3, [r7, #32]
 800cc98:	e853 3f00 	ldrex	r3, [r3]
 800cc9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	f023 0301 	bic.w	r3, r3, #1
 800cca4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	3308      	adds	r3, #8
 800ccac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ccae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ccb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ccb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ccb6:	e841 2300 	strex	r3, r2, [r1]
 800ccba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d1e5      	bne.n	800cc8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ccc6:	2b01      	cmp	r3, #1
 800ccc8:	d118      	bne.n	800ccfc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	e853 3f00 	ldrex	r3, [r3]
 800ccd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	f023 0310 	bic.w	r3, r3, #16
 800ccde:	647b      	str	r3, [r7, #68]	@ 0x44
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	461a      	mov	r2, r3
 800cce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cce8:	61bb      	str	r3, [r7, #24]
 800ccea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccec:	6979      	ldr	r1, [r7, #20]
 800ccee:	69ba      	ldr	r2, [r7, #24]
 800ccf0:	e841 2300 	strex	r3, r2, [r1]
 800ccf4:	613b      	str	r3, [r7, #16]
   return(result);
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d1e6      	bne.n	800ccca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2220      	movs	r2, #32
 800cd00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2200      	movs	r2, #0
 800cd08:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800cd10:	bf00      	nop
 800cd12:	3754      	adds	r7, #84	@ 0x54
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr

0800cd1c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b090      	sub	sp, #64	@ 0x40
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd28:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	69db      	ldr	r3, [r3, #28]
 800cd2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd32:	d037      	beq.n	800cda4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800cd34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd36:	2200      	movs	r2, #0
 800cd38:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cd3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	3308      	adds	r3, #8
 800cd42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd46:	e853 3f00 	ldrex	r3, [r3]
 800cd4a:	623b      	str	r3, [r7, #32]
   return(result);
 800cd4c:	6a3b      	ldr	r3, [r7, #32]
 800cd4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd52:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	3308      	adds	r3, #8
 800cd5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd5c:	633a      	str	r2, [r7, #48]	@ 0x30
 800cd5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd64:	e841 2300 	strex	r3, r2, [r1]
 800cd68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d1e5      	bne.n	800cd3c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cd70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	e853 3f00 	ldrex	r3, [r3]
 800cd7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd84:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd8e:	61fb      	str	r3, [r7, #28]
 800cd90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd92:	69b9      	ldr	r1, [r7, #24]
 800cd94:	69fa      	ldr	r2, [r7, #28]
 800cd96:	e841 2300 	strex	r3, r2, [r1]
 800cd9a:	617b      	str	r3, [r7, #20]
   return(result);
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1e6      	bne.n	800cd70 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cda2:	e002      	b.n	800cdaa <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800cda4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cda6:	f011 f839 	bl	801de1c <HAL_UART_TxCpltCallback>
}
 800cdaa:	bf00      	nop
 800cdac:	3740      	adds	r7, #64	@ 0x40
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}

0800cdb2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cdb2:	b580      	push	{r7, lr}
 800cdb4:	b084      	sub	sp, #16
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdbe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cdc0:	68f8      	ldr	r0, [r7, #12]
 800cdc2:	f7ff f9c7 	bl	800c154 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cdc6:	bf00      	nop
 800cdc8:	3710      	adds	r7, #16
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cdce:	b580      	push	{r7, lr}
 800cdd0:	b09c      	sub	sp, #112	@ 0x70
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdda:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	69db      	ldr	r3, [r3, #28]
 800cde0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cde4:	d071      	beq.n	800ceca <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800cde6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cde8:	2200      	movs	r2, #0
 800cdea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cdee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdf6:	e853 3f00 	ldrex	r3, [r3]
 800cdfa:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cdfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdfe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ce02:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ce04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	461a      	mov	r2, r3
 800ce0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ce0c:	657b      	str	r3, [r7, #84]	@ 0x54
 800ce0e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce10:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ce12:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ce14:	e841 2300 	strex	r3, r2, [r1]
 800ce18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ce1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d1e6      	bne.n	800cdee <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	3308      	adds	r3, #8
 800ce26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce2a:	e853 3f00 	ldrex	r3, [r3]
 800ce2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ce30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce32:	f023 0301 	bic.w	r3, r3, #1
 800ce36:	667b      	str	r3, [r7, #100]	@ 0x64
 800ce38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	3308      	adds	r3, #8
 800ce3e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ce40:	643a      	str	r2, [r7, #64]	@ 0x40
 800ce42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce48:	e841 2300 	strex	r3, r2, [r1]
 800ce4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ce4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d1e5      	bne.n	800ce20 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	3308      	adds	r3, #8
 800ce5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce5c:	6a3b      	ldr	r3, [r7, #32]
 800ce5e:	e853 3f00 	ldrex	r3, [r3]
 800ce62:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ce6a:	663b      	str	r3, [r7, #96]	@ 0x60
 800ce6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	3308      	adds	r3, #8
 800ce72:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ce74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ce76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce7c:	e841 2300 	strex	r3, r2, [r1]
 800ce80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ce82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d1e5      	bne.n	800ce54 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ce88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce8a:	2220      	movs	r2, #32
 800ce8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d118      	bne.n	800ceca <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	e853 3f00 	ldrex	r3, [r3]
 800cea4:	60bb      	str	r3, [r7, #8]
   return(result);
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	f023 0310 	bic.w	r3, r3, #16
 800ceac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ceae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ceb6:	61bb      	str	r3, [r7, #24]
 800ceb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceba:	6979      	ldr	r1, [r7, #20]
 800cebc:	69ba      	ldr	r2, [r7, #24]
 800cebe:	e841 2300 	strex	r3, r2, [r1]
 800cec2:	613b      	str	r3, [r7, #16]
   return(result);
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d1e6      	bne.n	800ce98 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ceca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cecc:	2200      	movs	r2, #0
 800cece:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ced0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ced2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	d122      	bne.n	800cf1e <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800ced8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ceda:	2200      	movs	r2, #0
 800cedc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800ceea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ceec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cef0:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d204      	bcs.n	800cf02 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800cef8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cefa:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800cefe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cf02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf04:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800cf08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	1ad3      	subs	r3, r2, r3
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	4619      	mov	r1, r3
 800cf16:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cf18:	f7ff f93a 	bl	800c190 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cf1c:	e002      	b.n	800cf24 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800cf1e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cf20:	f010 ff9c 	bl	801de5c <HAL_UART_RxCpltCallback>
}
 800cf24:	bf00      	nop
 800cf26:	3770      	adds	r7, #112	@ 0x70
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf38:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	2201      	movs	r2, #1
 800cf3e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d123      	bne.n	800cf90 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cf4e:	085b      	lsrs	r3, r3, #1
 800cf50:	b29a      	uxth	r2, r3
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cf66:	897a      	ldrh	r2, [r7, #10]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d803      	bhi.n	800cf74 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	897a      	ldrh	r2, [r7, #10]
 800cf70:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cf80:	b29b      	uxth	r3, r3
 800cf82:	1ad3      	subs	r3, r2, r3
 800cf84:	b29b      	uxth	r3, r3
 800cf86:	4619      	mov	r1, r3
 800cf88:	68f8      	ldr	r0, [r7, #12]
 800cf8a:	f7ff f901 	bl	800c190 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cf8e:	e002      	b.n	800cf96 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800cf90:	68f8      	ldr	r0, [r7, #12]
 800cf92:	f7ff f8e9 	bl	800c168 <HAL_UART_RxHalfCpltCallback>
}
 800cf96:	bf00      	nop
 800cf98:	3710      	adds	r7, #16
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}

0800cf9e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cf9e:	b580      	push	{r7, lr}
 800cfa0:	b086      	sub	sp, #24
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfaa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cfb0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfb8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	689b      	ldr	r3, [r3, #8]
 800cfc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfc4:	2b80      	cmp	r3, #128	@ 0x80
 800cfc6:	d109      	bne.n	800cfdc <UART_DMAError+0x3e>
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	2b21      	cmp	r3, #33	@ 0x21
 800cfcc:	d106      	bne.n	800cfdc <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800cfd6:	6978      	ldr	r0, [r7, #20]
 800cfd8:	f7ff fe16 	bl	800cc08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	689b      	ldr	r3, [r3, #8]
 800cfe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfe6:	2b40      	cmp	r3, #64	@ 0x40
 800cfe8:	d109      	bne.n	800cffe <UART_DMAError+0x60>
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2b22      	cmp	r3, #34	@ 0x22
 800cfee:	d106      	bne.n	800cffe <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	2200      	movs	r2, #0
 800cff4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800cff8:	6978      	ldr	r0, [r7, #20]
 800cffa:	f7ff fe2b 	bl	800cc54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d004:	f043 0210 	orr.w	r2, r3, #16
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d00e:	6978      	ldr	r0, [r7, #20]
 800d010:	f7ff f8b4 	bl	800c17c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d014:	bf00      	nop
 800d016:	3718      	adds	r7, #24
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d028:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2200      	movs	r2, #0
 800d02e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d032:	68f8      	ldr	r0, [r7, #12]
 800d034:	f7ff f8a2 	bl	800c17c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d038:	bf00      	nop
 800d03a:	3710      	adds	r7, #16
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d040:	b480      	push	{r7}
 800d042:	b08f      	sub	sp, #60	@ 0x3c
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d04c:	2b21      	cmp	r3, #33	@ 0x21
 800d04e:	d14c      	bne.n	800d0ea <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d056:	b29b      	uxth	r3, r3
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d132      	bne.n	800d0c2 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d062:	6a3b      	ldr	r3, [r7, #32]
 800d064:	e853 3f00 	ldrex	r3, [r3]
 800d068:	61fb      	str	r3, [r7, #28]
   return(result);
 800d06a:	69fb      	ldr	r3, [r7, #28]
 800d06c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d070:	637b      	str	r3, [r7, #52]	@ 0x34
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	461a      	mov	r2, r3
 800d078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d07a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d07c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d07e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d080:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d082:	e841 2300 	strex	r3, r2, [r1]
 800d086:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d1e6      	bne.n	800d05c <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	e853 3f00 	ldrex	r3, [r3]
 800d09a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ac:	61bb      	str	r3, [r7, #24]
 800d0ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0b0:	6979      	ldr	r1, [r7, #20]
 800d0b2:	69ba      	ldr	r2, [r7, #24]
 800d0b4:	e841 2300 	strex	r3, r2, [r1]
 800d0b8:	613b      	str	r3, [r7, #16]
   return(result);
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d1e6      	bne.n	800d08e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d0c0:	e013      	b.n	800d0ea <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d0c6:	781a      	ldrb	r2, [r3, #0]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d0d2:	1c5a      	adds	r2, r3, #1
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	3b01      	subs	r3, #1
 800d0e2:	b29a      	uxth	r2, r3
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800d0ea:	bf00      	nop
 800d0ec:	373c      	adds	r7, #60	@ 0x3c
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr

0800d0f6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d0f6:	b480      	push	{r7}
 800d0f8:	b091      	sub	sp, #68	@ 0x44
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d102:	2b21      	cmp	r3, #33	@ 0x21
 800d104:	d151      	bne.n	800d1aa <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d132      	bne.n	800d178 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11a:	e853 3f00 	ldrex	r3, [r3]
 800d11e:	623b      	str	r3, [r7, #32]
   return(result);
 800d120:	6a3b      	ldr	r3, [r7, #32]
 800d122:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d126:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	461a      	mov	r2, r3
 800d12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d130:	633b      	str	r3, [r7, #48]	@ 0x30
 800d132:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d134:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d138:	e841 2300 	strex	r3, r2, [r1]
 800d13c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d13e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d140:	2b00      	cmp	r3, #0
 800d142:	d1e6      	bne.n	800d112 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	e853 3f00 	ldrex	r3, [r3]
 800d150:	60fb      	str	r3, [r7, #12]
   return(result);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d158:	637b      	str	r3, [r7, #52]	@ 0x34
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	461a      	mov	r2, r3
 800d160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d162:	61fb      	str	r3, [r7, #28]
 800d164:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d166:	69b9      	ldr	r1, [r7, #24]
 800d168:	69fa      	ldr	r2, [r7, #28]
 800d16a:	e841 2300 	strex	r3, r2, [r1]
 800d16e:	617b      	str	r3, [r7, #20]
   return(result);
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d1e6      	bne.n	800d144 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d176:	e018      	b.n	800d1aa <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d17c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d17e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d180:	881b      	ldrh	r3, [r3, #0]
 800d182:	461a      	mov	r2, r3
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d18c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d192:	1c9a      	adds	r2, r3, #2
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d19e:	b29b      	uxth	r3, r3
 800d1a0:	3b01      	subs	r3, #1
 800d1a2:	b29a      	uxth	r2, r3
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800d1aa:	bf00      	nop
 800d1ac:	3744      	adds	r7, #68	@ 0x44
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b4:	4770      	bx	lr

0800d1b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d1b6:	b580      	push	{r7, lr}
 800d1b8:	b088      	sub	sp, #32
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	e853 3f00 	ldrex	r3, [r3]
 800d1ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1d2:	61fb      	str	r3, [r7, #28]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	461a      	mov	r2, r3
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	61bb      	str	r3, [r7, #24]
 800d1de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e0:	6979      	ldr	r1, [r7, #20]
 800d1e2:	69ba      	ldr	r2, [r7, #24]
 800d1e4:	e841 2300 	strex	r3, r2, [r1]
 800d1e8:	613b      	str	r3, [r7, #16]
   return(result);
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d1e6      	bne.n	800d1be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2220      	movs	r2, #32
 800d1f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f010 fe0d 	bl	801de1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d202:	bf00      	nop
 800d204:	3720      	adds	r7, #32
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}

0800d20a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d20a:	b580      	push	{r7, lr}
 800d20c:	b09c      	sub	sp, #112	@ 0x70
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d218:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d222:	2b22      	cmp	r3, #34	@ 0x22
 800d224:	f040 80b9 	bne.w	800d39a <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d22e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d232:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d236:	b2d9      	uxtb	r1, r3
 800d238:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d23c:	b2da      	uxtb	r2, r3
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d242:	400a      	ands	r2, r1
 800d244:	b2d2      	uxtb	r2, r2
 800d246:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d24c:	1c5a      	adds	r2, r3, #1
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d258:	b29b      	uxth	r3, r3
 800d25a:	3b01      	subs	r3, #1
 800d25c:	b29a      	uxth	r2, r3
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d26a:	b29b      	uxth	r3, r3
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	f040 809c 	bne.w	800d3aa <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d278:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d27a:	e853 3f00 	ldrex	r3, [r3]
 800d27e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d280:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d282:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d286:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	461a      	mov	r2, r3
 800d28e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d290:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d292:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d294:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d296:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d298:	e841 2300 	strex	r3, r2, [r1]
 800d29c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d29e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d1e6      	bne.n	800d272 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	3308      	adds	r3, #8
 800d2aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ae:	e853 3f00 	ldrex	r3, [r3]
 800d2b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d2b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2b6:	f023 0301 	bic.w	r3, r3, #1
 800d2ba:	667b      	str	r3, [r7, #100]	@ 0x64
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	3308      	adds	r3, #8
 800d2c2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d2c4:	647a      	str	r2, [r7, #68]	@ 0x44
 800d2c6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d2ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d2cc:	e841 2300 	strex	r3, r2, [r1]
 800d2d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d2d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d1e5      	bne.n	800d2a4 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2220      	movs	r2, #32
 800d2dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d018      	beq.n	800d32c <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d302:	e853 3f00 	ldrex	r3, [r3]
 800d306:	623b      	str	r3, [r7, #32]
   return(result);
 800d308:	6a3b      	ldr	r3, [r7, #32]
 800d30a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d30e:	663b      	str	r3, [r7, #96]	@ 0x60
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	461a      	mov	r2, r3
 800d316:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d318:	633b      	str	r3, [r7, #48]	@ 0x30
 800d31a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d31c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d31e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d320:	e841 2300 	strex	r3, r2, [r1]
 800d324:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d1e6      	bne.n	800d2fa <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d330:	2b01      	cmp	r3, #1
 800d332:	d12e      	bne.n	800d392 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2200      	movs	r2, #0
 800d338:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	e853 3f00 	ldrex	r3, [r3]
 800d346:	60fb      	str	r3, [r7, #12]
   return(result);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	f023 0310 	bic.w	r3, r3, #16
 800d34e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	461a      	mov	r2, r3
 800d356:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d358:	61fb      	str	r3, [r7, #28]
 800d35a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d35c:	69b9      	ldr	r1, [r7, #24]
 800d35e:	69fa      	ldr	r2, [r7, #28]
 800d360:	e841 2300 	strex	r3, r2, [r1]
 800d364:	617b      	str	r3, [r7, #20]
   return(result);
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d1e6      	bne.n	800d33a <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	69db      	ldr	r3, [r3, #28]
 800d372:	f003 0310 	and.w	r3, r3, #16
 800d376:	2b10      	cmp	r3, #16
 800d378:	d103      	bne.n	800d382 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	2210      	movs	r2, #16
 800d380:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d388:	4619      	mov	r1, r3
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f7fe ff00 	bl	800c190 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d390:	e00b      	b.n	800d3aa <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f010 fd62 	bl	801de5c <HAL_UART_RxCpltCallback>
}
 800d398:	e007      	b.n	800d3aa <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	699a      	ldr	r2, [r3, #24]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f042 0208 	orr.w	r2, r2, #8
 800d3a8:	619a      	str	r2, [r3, #24]
}
 800d3aa:	bf00      	nop
 800d3ac:	3770      	adds	r7, #112	@ 0x70
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}

0800d3b2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b09c      	sub	sp, #112	@ 0x70
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d3c0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3ca:	2b22      	cmp	r3, #34	@ 0x22
 800d3cc:	f040 80b9 	bne.w	800d542 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3d6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3de:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d3e0:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800d3e4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d3e8:	4013      	ands	r3, r2
 800d3ea:	b29a      	uxth	r2, r3
 800d3ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3ee:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3f4:	1c9a      	adds	r2, r3, #2
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d400:	b29b      	uxth	r3, r3
 800d402:	3b01      	subs	r3, #1
 800d404:	b29a      	uxth	r2, r3
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d412:	b29b      	uxth	r3, r3
 800d414:	2b00      	cmp	r3, #0
 800d416:	f040 809c 	bne.w	800d552 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d420:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d422:	e853 3f00 	ldrex	r3, [r3]
 800d426:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d428:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d42a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d42e:	667b      	str	r3, [r7, #100]	@ 0x64
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	461a      	mov	r2, r3
 800d436:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d438:	657b      	str	r3, [r7, #84]	@ 0x54
 800d43a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d43c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d43e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d440:	e841 2300 	strex	r3, r2, [r1]
 800d444:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d1e6      	bne.n	800d41a <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	3308      	adds	r3, #8
 800d452:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d456:	e853 3f00 	ldrex	r3, [r3]
 800d45a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d45e:	f023 0301 	bic.w	r3, r3, #1
 800d462:	663b      	str	r3, [r7, #96]	@ 0x60
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	3308      	adds	r3, #8
 800d46a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d46c:	643a      	str	r2, [r7, #64]	@ 0x40
 800d46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d470:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d472:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d474:	e841 2300 	strex	r3, r2, [r1]
 800d478:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d47a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d1e5      	bne.n	800d44c <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2220      	movs	r2, #32
 800d484:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2200      	movs	r2, #0
 800d48c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2200      	movs	r2, #0
 800d492:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	685b      	ldr	r3, [r3, #4]
 800d49a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d018      	beq.n	800d4d4 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4a8:	6a3b      	ldr	r3, [r7, #32]
 800d4aa:	e853 3f00 	ldrex	r3, [r3]
 800d4ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800d4b0:	69fb      	ldr	r3, [r7, #28]
 800d4b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d4b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	461a      	mov	r2, r3
 800d4be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4c2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d4c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4c8:	e841 2300 	strex	r3, r2, [r1]
 800d4cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d4ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d1e6      	bne.n	800d4a2 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d12e      	bne.n	800d53a <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	e853 3f00 	ldrex	r3, [r3]
 800d4ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	f023 0310 	bic.w	r3, r3, #16
 800d4f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	461a      	mov	r2, r3
 800d4fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d500:	61bb      	str	r3, [r7, #24]
 800d502:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d504:	6979      	ldr	r1, [r7, #20]
 800d506:	69ba      	ldr	r2, [r7, #24]
 800d508:	e841 2300 	strex	r3, r2, [r1]
 800d50c:	613b      	str	r3, [r7, #16]
   return(result);
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d1e6      	bne.n	800d4e2 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	69db      	ldr	r3, [r3, #28]
 800d51a:	f003 0310 	and.w	r3, r3, #16
 800d51e:	2b10      	cmp	r3, #16
 800d520:	d103      	bne.n	800d52a <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2210      	movs	r2, #16
 800d528:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d530:	4619      	mov	r1, r3
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f7fe fe2c 	bl	800c190 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d538:	e00b      	b.n	800d552 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f010 fc8e 	bl	801de5c <HAL_UART_RxCpltCallback>
}
 800d540:	e007      	b.n	800d552 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	699a      	ldr	r2, [r3, #24]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	f042 0208 	orr.w	r2, r2, #8
 800d550:	619a      	str	r2, [r3, #24]
}
 800d552:	bf00      	nop
 800d554:	3770      	adds	r7, #112	@ 0x70
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
	...

0800d55c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d55c:	b084      	sub	sp, #16
 800d55e:	b580      	push	{r7, lr}
 800d560:	b084      	sub	sp, #16
 800d562:	af00      	add	r7, sp, #0
 800d564:	6078      	str	r0, [r7, #4]
 800d566:	f107 001c 	add.w	r0, r7, #28
 800d56a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d56e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d572:	2b01      	cmp	r3, #1
 800d574:	d121      	bne.n	800d5ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d57a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	68da      	ldr	r2, [r3, #12]
 800d586:	4b21      	ldr	r3, [pc, #132]	@ (800d60c <USB_CoreInit+0xb0>)
 800d588:	4013      	ands	r3, r2
 800d58a:	687a      	ldr	r2, [r7, #4]
 800d58c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d59a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d59e:	2b01      	cmp	r3, #1
 800d5a0:	d105      	bne.n	800d5ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	68db      	ldr	r3, [r3, #12]
 800d5a6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 fa92 	bl	800dad8 <USB_CoreReset>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	73fb      	strb	r3, [r7, #15]
 800d5b8:	e010      	b.n	800d5dc <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	68db      	ldr	r3, [r3, #12]
 800d5be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 fa86 	bl	800dad8 <USB_CoreReset>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5d4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800d5dc:	7fbb      	ldrb	r3, [r7, #30]
 800d5de:	2b01      	cmp	r3, #1
 800d5e0:	d10b      	bne.n	800d5fa <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	689b      	ldr	r3, [r3, #8]
 800d5e6:	f043 0206 	orr.w	r2, r3, #6
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	689b      	ldr	r3, [r3, #8]
 800d5f2:	f043 0220 	orr.w	r2, r3, #32
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3710      	adds	r7, #16
 800d600:	46bd      	mov	sp, r7
 800d602:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d606:	b004      	add	sp, #16
 800d608:	4770      	bx	lr
 800d60a:	bf00      	nop
 800d60c:	ffbdffbf 	.word	0xffbdffbf

0800d610 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d610:	b480      	push	{r7}
 800d612:	b083      	sub	sp, #12
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	689b      	ldr	r3, [r3, #8]
 800d61c:	f023 0201 	bic.w	r2, r3, #1
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d624:	2300      	movs	r3, #0
}
 800d626:	4618      	mov	r0, r3
 800d628:	370c      	adds	r7, #12
 800d62a:	46bd      	mov	sp, r7
 800d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d630:	4770      	bx	lr

0800d632 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d632:	b580      	push	{r7, lr}
 800d634:	b084      	sub	sp, #16
 800d636:	af00      	add	r7, sp, #0
 800d638:	6078      	str	r0, [r7, #4]
 800d63a:	460b      	mov	r3, r1
 800d63c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d63e:	2300      	movs	r3, #0
 800d640:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	68db      	ldr	r3, [r3, #12]
 800d646:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d64e:	78fb      	ldrb	r3, [r7, #3]
 800d650:	2b01      	cmp	r3, #1
 800d652:	d115      	bne.n	800d680 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	68db      	ldr	r3, [r3, #12]
 800d658:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d660:	200a      	movs	r0, #10
 800d662:	f7f5 f8eb 	bl	800283c <HAL_Delay>
      ms += 10U;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	330a      	adds	r3, #10
 800d66a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f000 fa25 	bl	800dabc <USB_GetMode>
 800d672:	4603      	mov	r3, r0
 800d674:	2b01      	cmp	r3, #1
 800d676:	d01e      	beq.n	800d6b6 <USB_SetCurrentMode+0x84>
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2bc7      	cmp	r3, #199	@ 0xc7
 800d67c:	d9f0      	bls.n	800d660 <USB_SetCurrentMode+0x2e>
 800d67e:	e01a      	b.n	800d6b6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d680:	78fb      	ldrb	r3, [r7, #3]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d115      	bne.n	800d6b2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	68db      	ldr	r3, [r3, #12]
 800d68a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d692:	200a      	movs	r0, #10
 800d694:	f7f5 f8d2 	bl	800283c <HAL_Delay>
      ms += 10U;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	330a      	adds	r3, #10
 800d69c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f000 fa0c 	bl	800dabc <USB_GetMode>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d005      	beq.n	800d6b6 <USB_SetCurrentMode+0x84>
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2bc7      	cmp	r3, #199	@ 0xc7
 800d6ae:	d9f0      	bls.n	800d692 <USB_SetCurrentMode+0x60>
 800d6b0:	e001      	b.n	800d6b6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	e005      	b.n	800d6c2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2bc8      	cmp	r3, #200	@ 0xc8
 800d6ba:	d101      	bne.n	800d6c0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e000      	b.n	800d6c2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d6c0:	2300      	movs	r3, #0
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3710      	adds	r7, #16
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
	...

0800d6cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d6cc:	b084      	sub	sp, #16
 800d6ce:	b580      	push	{r7, lr}
 800d6d0:	b086      	sub	sp, #24
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	6078      	str	r0, [r7, #4]
 800d6d6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d6da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	613b      	str	r3, [r7, #16]
 800d6ea:	e009      	b.n	800d700 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d6ec:	687a      	ldr	r2, [r7, #4]
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	3340      	adds	r3, #64	@ 0x40
 800d6f2:	009b      	lsls	r3, r3, #2
 800d6f4:	4413      	add	r3, r2
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	613b      	str	r3, [r7, #16]
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	2b0e      	cmp	r3, #14
 800d704:	d9f2      	bls.n	800d6ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d706:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d11c      	bne.n	800d748 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d714:	685b      	ldr	r3, [r3, #4]
 800d716:	68fa      	ldr	r2, [r7, #12]
 800d718:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d71c:	f043 0302 	orr.w	r3, r3, #2
 800d720:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d726:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	601a      	str	r2, [r3, #0]
 800d746:	e005      	b.n	800d754 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d74c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d75a:	461a      	mov	r2, r3
 800d75c:	2300      	movs	r3, #0
 800d75e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d760:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d764:	2b01      	cmp	r3, #1
 800d766:	d10d      	bne.n	800d784 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d768:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d104      	bne.n	800d77a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d770:	2100      	movs	r1, #0
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f000 f968 	bl	800da48 <USB_SetDevSpeed>
 800d778:	e008      	b.n	800d78c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d77a:	2101      	movs	r1, #1
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f000 f963 	bl	800da48 <USB_SetDevSpeed>
 800d782:	e003      	b.n	800d78c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d784:	2103      	movs	r1, #3
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f000 f95e 	bl	800da48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d78c:	2110      	movs	r1, #16
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f000 f8fa 	bl	800d988 <USB_FlushTxFifo>
 800d794:	4603      	mov	r3, r0
 800d796:	2b00      	cmp	r3, #0
 800d798:	d001      	beq.n	800d79e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800d79a:	2301      	movs	r3, #1
 800d79c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f000 f924 	bl	800d9ec <USB_FlushRxFifo>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d001      	beq.n	800d7ae <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d7b4:	461a      	mov	r2, r3
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d7c0:	461a      	mov	r2, r3
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	613b      	str	r3, [r7, #16]
 800d7d6:	e043      	b.n	800d860 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	015a      	lsls	r2, r3, #5
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	4413      	add	r3, r2
 800d7e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d7ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d7ee:	d118      	bne.n	800d822 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d10a      	bne.n	800d80c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	015a      	lsls	r2, r3, #5
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	4413      	add	r3, r2
 800d7fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d802:	461a      	mov	r2, r3
 800d804:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d808:	6013      	str	r3, [r2, #0]
 800d80a:	e013      	b.n	800d834 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	015a      	lsls	r2, r3, #5
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	4413      	add	r3, r2
 800d814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d818:	461a      	mov	r2, r3
 800d81a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d81e:	6013      	str	r3, [r2, #0]
 800d820:	e008      	b.n	800d834 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d822:	693b      	ldr	r3, [r7, #16]
 800d824:	015a      	lsls	r2, r3, #5
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	4413      	add	r3, r2
 800d82a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d82e:	461a      	mov	r2, r3
 800d830:	2300      	movs	r3, #0
 800d832:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	015a      	lsls	r2, r3, #5
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	4413      	add	r3, r2
 800d83c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d840:	461a      	mov	r2, r3
 800d842:	2300      	movs	r3, #0
 800d844:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	015a      	lsls	r2, r3, #5
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	4413      	add	r3, r2
 800d84e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d852:	461a      	mov	r2, r3
 800d854:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d858:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	3301      	adds	r3, #1
 800d85e:	613b      	str	r3, [r7, #16]
 800d860:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d864:	461a      	mov	r2, r3
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	4293      	cmp	r3, r2
 800d86a:	d3b5      	bcc.n	800d7d8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d86c:	2300      	movs	r3, #0
 800d86e:	613b      	str	r3, [r7, #16]
 800d870:	e043      	b.n	800d8fa <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	015a      	lsls	r2, r3, #5
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	4413      	add	r3, r2
 800d87a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d884:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d888:	d118      	bne.n	800d8bc <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d10a      	bne.n	800d8a6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	015a      	lsls	r2, r3, #5
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	4413      	add	r3, r2
 800d898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d89c:	461a      	mov	r2, r3
 800d89e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d8a2:	6013      	str	r3, [r2, #0]
 800d8a4:	e013      	b.n	800d8ce <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	015a      	lsls	r2, r3, #5
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	4413      	add	r3, r2
 800d8ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d8b8:	6013      	str	r3, [r2, #0]
 800d8ba:	e008      	b.n	800d8ce <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	015a      	lsls	r2, r3, #5
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	4413      	add	r3, r2
 800d8c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d8ce:	693b      	ldr	r3, [r7, #16]
 800d8d0:	015a      	lsls	r2, r3, #5
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8da:	461a      	mov	r2, r3
 800d8dc:	2300      	movs	r3, #0
 800d8de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	015a      	lsls	r2, r3, #5
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	4413      	add	r3, r2
 800d8e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d8f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	613b      	str	r3, [r7, #16]
 800d8fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d8fe:	461a      	mov	r2, r3
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	4293      	cmp	r3, r2
 800d904:	d3b5      	bcc.n	800d872 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d90c:	691b      	ldr	r3, [r3, #16]
 800d90e:	68fa      	ldr	r2, [r7, #12]
 800d910:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d914:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d918:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2200      	movs	r2, #0
 800d91e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d926:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d928:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d105      	bne.n	800d93c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	699b      	ldr	r3, [r3, #24]
 800d934:	f043 0210 	orr.w	r2, r3, #16
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	699a      	ldr	r2, [r3, #24]
 800d940:	4b0f      	ldr	r3, [pc, #60]	@ (800d980 <USB_DevInit+0x2b4>)
 800d942:	4313      	orrs	r3, r2
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d948:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d005      	beq.n	800d95c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	699b      	ldr	r3, [r3, #24]
 800d954:	f043 0208 	orr.w	r2, r3, #8
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d95c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d960:	2b01      	cmp	r3, #1
 800d962:	d105      	bne.n	800d970 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	699a      	ldr	r2, [r3, #24]
 800d968:	4b06      	ldr	r3, [pc, #24]	@ (800d984 <USB_DevInit+0x2b8>)
 800d96a:	4313      	orrs	r3, r2
 800d96c:	687a      	ldr	r2, [r7, #4]
 800d96e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d970:	7dfb      	ldrb	r3, [r7, #23]
}
 800d972:	4618      	mov	r0, r3
 800d974:	3718      	adds	r7, #24
 800d976:	46bd      	mov	sp, r7
 800d978:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d97c:	b004      	add	sp, #16
 800d97e:	4770      	bx	lr
 800d980:	803c3800 	.word	0x803c3800
 800d984:	40000004 	.word	0x40000004

0800d988 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d988:	b480      	push	{r7}
 800d98a:	b085      	sub	sp, #20
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d992:	2300      	movs	r3, #0
 800d994:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	3301      	adds	r3, #1
 800d99a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d9a2:	d901      	bls.n	800d9a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d9a4:	2303      	movs	r3, #3
 800d9a6:	e01b      	b.n	800d9e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	691b      	ldr	r3, [r3, #16]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	daf2      	bge.n	800d996 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d9b0:	2300      	movs	r3, #0
 800d9b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	019b      	lsls	r3, r3, #6
 800d9b8:	f043 0220 	orr.w	r2, r3, #32
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d9cc:	d901      	bls.n	800d9d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d9ce:	2303      	movs	r3, #3
 800d9d0:	e006      	b.n	800d9e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	691b      	ldr	r3, [r3, #16]
 800d9d6:	f003 0320 	and.w	r3, r3, #32
 800d9da:	2b20      	cmp	r3, #32
 800d9dc:	d0f0      	beq.n	800d9c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d9de:	2300      	movs	r3, #0
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3714      	adds	r7, #20
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b085      	sub	sp, #20
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	3301      	adds	r3, #1
 800d9fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800da04:	d901      	bls.n	800da0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800da06:	2303      	movs	r3, #3
 800da08:	e018      	b.n	800da3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	691b      	ldr	r3, [r3, #16]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	daf2      	bge.n	800d9f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800da12:	2300      	movs	r3, #0
 800da14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2210      	movs	r2, #16
 800da1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	3301      	adds	r3, #1
 800da20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800da28:	d901      	bls.n	800da2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800da2a:	2303      	movs	r3, #3
 800da2c:	e006      	b.n	800da3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	691b      	ldr	r3, [r3, #16]
 800da32:	f003 0310 	and.w	r3, r3, #16
 800da36:	2b10      	cmp	r3, #16
 800da38:	d0f0      	beq.n	800da1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800da3a:	2300      	movs	r3, #0
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3714      	adds	r7, #20
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr

0800da48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800da48:	b480      	push	{r7}
 800da4a:	b085      	sub	sp, #20
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	460b      	mov	r3, r1
 800da52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da5e:	681a      	ldr	r2, [r3, #0]
 800da60:	78fb      	ldrb	r3, [r7, #3]
 800da62:	68f9      	ldr	r1, [r7, #12]
 800da64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800da68:	4313      	orrs	r3, r2
 800da6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800da6c:	2300      	movs	r3, #0
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3714      	adds	r7, #20
 800da72:	46bd      	mov	sp, r7
 800da74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da78:	4770      	bx	lr

0800da7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800da7a:	b480      	push	{r7}
 800da7c:	b085      	sub	sp, #20
 800da7e:	af00      	add	r7, sp, #0
 800da80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	68fa      	ldr	r2, [r7, #12]
 800da90:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800da94:	f023 0303 	bic.w	r3, r3, #3
 800da98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800daa0:	685b      	ldr	r3, [r3, #4]
 800daa2:	68fa      	ldr	r2, [r7, #12]
 800daa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800daa8:	f043 0302 	orr.w	r3, r3, #2
 800daac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800daae:	2300      	movs	r3, #0
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3714      	adds	r7, #20
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr

0800dabc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b083      	sub	sp, #12
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	695b      	ldr	r3, [r3, #20]
 800dac8:	f003 0301 	and.w	r3, r3, #1
}
 800dacc:	4618      	mov	r0, r3
 800dace:	370c      	adds	r7, #12
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr

0800dad8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dad8:	b480      	push	{r7}
 800dada:	b085      	sub	sp, #20
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dae0:	2300      	movs	r3, #0
 800dae2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	3301      	adds	r3, #1
 800dae8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800daf0:	d901      	bls.n	800daf6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800daf2:	2303      	movs	r3, #3
 800daf4:	e022      	b.n	800db3c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	691b      	ldr	r3, [r3, #16]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	daf2      	bge.n	800dae4 <USB_CoreReset+0xc>

  count = 10U;
 800dafe:	230a      	movs	r3, #10
 800db00:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800db02:	e002      	b.n	800db0a <USB_CoreReset+0x32>
  {
    count--;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	3b01      	subs	r3, #1
 800db08:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d1f9      	bne.n	800db04 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	691b      	ldr	r3, [r3, #16]
 800db14:	f043 0201 	orr.w	r2, r3, #1
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	3301      	adds	r3, #1
 800db20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800db28:	d901      	bls.n	800db2e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800db2a:	2303      	movs	r3, #3
 800db2c:	e006      	b.n	800db3c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	691b      	ldr	r3, [r3, #16]
 800db32:	f003 0301 	and.w	r3, r3, #1
 800db36:	2b01      	cmp	r3, #1
 800db38:	d0f0      	beq.n	800db1c <USB_CoreReset+0x44>

  return HAL_OK;
 800db3a:	2300      	movs	r3, #0
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3714      	adds	r7, #20
 800db40:	46bd      	mov	sp, r7
 800db42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db46:	4770      	bx	lr

0800db48 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b084      	sub	sp, #16
 800db4c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800db4e:	4b92      	ldr	r3, [pc, #584]	@ (800dd98 <MX_LWIP_Init+0x250>)
 800db50:	22c0      	movs	r2, #192	@ 0xc0
 800db52:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800db54:	4b90      	ldr	r3, [pc, #576]	@ (800dd98 <MX_LWIP_Init+0x250>)
 800db56:	22a8      	movs	r2, #168	@ 0xa8
 800db58:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800db5a:	4b8f      	ldr	r3, [pc, #572]	@ (800dd98 <MX_LWIP_Init+0x250>)
 800db5c:	2201      	movs	r2, #1
 800db5e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 168;
 800db60:	4b8d      	ldr	r3, [pc, #564]	@ (800dd98 <MX_LWIP_Init+0x250>)
 800db62:	22a8      	movs	r2, #168	@ 0xa8
 800db64:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800db66:	4b8d      	ldr	r3, [pc, #564]	@ (800dd9c <MX_LWIP_Init+0x254>)
 800db68:	22ff      	movs	r2, #255	@ 0xff
 800db6a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800db6c:	4b8b      	ldr	r3, [pc, #556]	@ (800dd9c <MX_LWIP_Init+0x254>)
 800db6e:	22ff      	movs	r2, #255	@ 0xff
 800db70:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800db72:	4b8a      	ldr	r3, [pc, #552]	@ (800dd9c <MX_LWIP_Init+0x254>)
 800db74:	22ff      	movs	r2, #255	@ 0xff
 800db76:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800db78:	4b88      	ldr	r3, [pc, #544]	@ (800dd9c <MX_LWIP_Init+0x254>)
 800db7a:	2200      	movs	r2, #0
 800db7c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800db7e:	4b88      	ldr	r3, [pc, #544]	@ (800dda0 <MX_LWIP_Init+0x258>)
 800db80:	2200      	movs	r2, #0
 800db82:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800db84:	4b86      	ldr	r3, [pc, #536]	@ (800dda0 <MX_LWIP_Init+0x258>)
 800db86:	2200      	movs	r2, #0
 800db88:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800db8a:	4b85      	ldr	r3, [pc, #532]	@ (800dda0 <MX_LWIP_Init+0x258>)
 800db8c:	2200      	movs	r2, #0
 800db8e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800db90:	4b83      	ldr	r3, [pc, #524]	@ (800dda0 <MX_LWIP_Init+0x258>)
 800db92:	2200      	movs	r2, #0
 800db94:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800db96:	2100      	movs	r1, #0
 800db98:	2000      	movs	r0, #0
 800db9a:	f005 f867 	bl	8012c6c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800db9e:	4b7e      	ldr	r3, [pc, #504]	@ (800dd98 <MX_LWIP_Init+0x250>)
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	061a      	lsls	r2, r3, #24
 800dba4:	4b7c      	ldr	r3, [pc, #496]	@ (800dd98 <MX_LWIP_Init+0x250>)
 800dba6:	785b      	ldrb	r3, [r3, #1]
 800dba8:	041b      	lsls	r3, r3, #16
 800dbaa:	431a      	orrs	r2, r3
 800dbac:	4b7a      	ldr	r3, [pc, #488]	@ (800dd98 <MX_LWIP_Init+0x250>)
 800dbae:	789b      	ldrb	r3, [r3, #2]
 800dbb0:	021b      	lsls	r3, r3, #8
 800dbb2:	4313      	orrs	r3, r2
 800dbb4:	4a78      	ldr	r2, [pc, #480]	@ (800dd98 <MX_LWIP_Init+0x250>)
 800dbb6:	78d2      	ldrb	r2, [r2, #3]
 800dbb8:	4313      	orrs	r3, r2
 800dbba:	061a      	lsls	r2, r3, #24
 800dbbc:	4b76      	ldr	r3, [pc, #472]	@ (800dd98 <MX_LWIP_Init+0x250>)
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	0619      	lsls	r1, r3, #24
 800dbc2:	4b75      	ldr	r3, [pc, #468]	@ (800dd98 <MX_LWIP_Init+0x250>)
 800dbc4:	785b      	ldrb	r3, [r3, #1]
 800dbc6:	041b      	lsls	r3, r3, #16
 800dbc8:	4319      	orrs	r1, r3
 800dbca:	4b73      	ldr	r3, [pc, #460]	@ (800dd98 <MX_LWIP_Init+0x250>)
 800dbcc:	789b      	ldrb	r3, [r3, #2]
 800dbce:	021b      	lsls	r3, r3, #8
 800dbd0:	430b      	orrs	r3, r1
 800dbd2:	4971      	ldr	r1, [pc, #452]	@ (800dd98 <MX_LWIP_Init+0x250>)
 800dbd4:	78c9      	ldrb	r1, [r1, #3]
 800dbd6:	430b      	orrs	r3, r1
 800dbd8:	021b      	lsls	r3, r3, #8
 800dbda:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dbde:	431a      	orrs	r2, r3
 800dbe0:	4b6d      	ldr	r3, [pc, #436]	@ (800dd98 <MX_LWIP_Init+0x250>)
 800dbe2:	781b      	ldrb	r3, [r3, #0]
 800dbe4:	0619      	lsls	r1, r3, #24
 800dbe6:	4b6c      	ldr	r3, [pc, #432]	@ (800dd98 <MX_LWIP_Init+0x250>)
 800dbe8:	785b      	ldrb	r3, [r3, #1]
 800dbea:	041b      	lsls	r3, r3, #16
 800dbec:	4319      	orrs	r1, r3
 800dbee:	4b6a      	ldr	r3, [pc, #424]	@ (800dd98 <MX_LWIP_Init+0x250>)
 800dbf0:	789b      	ldrb	r3, [r3, #2]
 800dbf2:	021b      	lsls	r3, r3, #8
 800dbf4:	430b      	orrs	r3, r1
 800dbf6:	4968      	ldr	r1, [pc, #416]	@ (800dd98 <MX_LWIP_Init+0x250>)
 800dbf8:	78c9      	ldrb	r1, [r1, #3]
 800dbfa:	430b      	orrs	r3, r1
 800dbfc:	0a1b      	lsrs	r3, r3, #8
 800dbfe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dc02:	431a      	orrs	r2, r3
 800dc04:	4b64      	ldr	r3, [pc, #400]	@ (800dd98 <MX_LWIP_Init+0x250>)
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	0619      	lsls	r1, r3, #24
 800dc0a:	4b63      	ldr	r3, [pc, #396]	@ (800dd98 <MX_LWIP_Init+0x250>)
 800dc0c:	785b      	ldrb	r3, [r3, #1]
 800dc0e:	041b      	lsls	r3, r3, #16
 800dc10:	4319      	orrs	r1, r3
 800dc12:	4b61      	ldr	r3, [pc, #388]	@ (800dd98 <MX_LWIP_Init+0x250>)
 800dc14:	789b      	ldrb	r3, [r3, #2]
 800dc16:	021b      	lsls	r3, r3, #8
 800dc18:	430b      	orrs	r3, r1
 800dc1a:	495f      	ldr	r1, [pc, #380]	@ (800dd98 <MX_LWIP_Init+0x250>)
 800dc1c:	78c9      	ldrb	r1, [r1, #3]
 800dc1e:	430b      	orrs	r3, r1
 800dc20:	0e1b      	lsrs	r3, r3, #24
 800dc22:	4313      	orrs	r3, r2
 800dc24:	4a5f      	ldr	r2, [pc, #380]	@ (800dda4 <MX_LWIP_Init+0x25c>)
 800dc26:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800dc28:	4b5c      	ldr	r3, [pc, #368]	@ (800dd9c <MX_LWIP_Init+0x254>)
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	061a      	lsls	r2, r3, #24
 800dc2e:	4b5b      	ldr	r3, [pc, #364]	@ (800dd9c <MX_LWIP_Init+0x254>)
 800dc30:	785b      	ldrb	r3, [r3, #1]
 800dc32:	041b      	lsls	r3, r3, #16
 800dc34:	431a      	orrs	r2, r3
 800dc36:	4b59      	ldr	r3, [pc, #356]	@ (800dd9c <MX_LWIP_Init+0x254>)
 800dc38:	789b      	ldrb	r3, [r3, #2]
 800dc3a:	021b      	lsls	r3, r3, #8
 800dc3c:	4313      	orrs	r3, r2
 800dc3e:	4a57      	ldr	r2, [pc, #348]	@ (800dd9c <MX_LWIP_Init+0x254>)
 800dc40:	78d2      	ldrb	r2, [r2, #3]
 800dc42:	4313      	orrs	r3, r2
 800dc44:	061a      	lsls	r2, r3, #24
 800dc46:	4b55      	ldr	r3, [pc, #340]	@ (800dd9c <MX_LWIP_Init+0x254>)
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	0619      	lsls	r1, r3, #24
 800dc4c:	4b53      	ldr	r3, [pc, #332]	@ (800dd9c <MX_LWIP_Init+0x254>)
 800dc4e:	785b      	ldrb	r3, [r3, #1]
 800dc50:	041b      	lsls	r3, r3, #16
 800dc52:	4319      	orrs	r1, r3
 800dc54:	4b51      	ldr	r3, [pc, #324]	@ (800dd9c <MX_LWIP_Init+0x254>)
 800dc56:	789b      	ldrb	r3, [r3, #2]
 800dc58:	021b      	lsls	r3, r3, #8
 800dc5a:	430b      	orrs	r3, r1
 800dc5c:	494f      	ldr	r1, [pc, #316]	@ (800dd9c <MX_LWIP_Init+0x254>)
 800dc5e:	78c9      	ldrb	r1, [r1, #3]
 800dc60:	430b      	orrs	r3, r1
 800dc62:	021b      	lsls	r3, r3, #8
 800dc64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dc68:	431a      	orrs	r2, r3
 800dc6a:	4b4c      	ldr	r3, [pc, #304]	@ (800dd9c <MX_LWIP_Init+0x254>)
 800dc6c:	781b      	ldrb	r3, [r3, #0]
 800dc6e:	0619      	lsls	r1, r3, #24
 800dc70:	4b4a      	ldr	r3, [pc, #296]	@ (800dd9c <MX_LWIP_Init+0x254>)
 800dc72:	785b      	ldrb	r3, [r3, #1]
 800dc74:	041b      	lsls	r3, r3, #16
 800dc76:	4319      	orrs	r1, r3
 800dc78:	4b48      	ldr	r3, [pc, #288]	@ (800dd9c <MX_LWIP_Init+0x254>)
 800dc7a:	789b      	ldrb	r3, [r3, #2]
 800dc7c:	021b      	lsls	r3, r3, #8
 800dc7e:	430b      	orrs	r3, r1
 800dc80:	4946      	ldr	r1, [pc, #280]	@ (800dd9c <MX_LWIP_Init+0x254>)
 800dc82:	78c9      	ldrb	r1, [r1, #3]
 800dc84:	430b      	orrs	r3, r1
 800dc86:	0a1b      	lsrs	r3, r3, #8
 800dc88:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dc8c:	431a      	orrs	r2, r3
 800dc8e:	4b43      	ldr	r3, [pc, #268]	@ (800dd9c <MX_LWIP_Init+0x254>)
 800dc90:	781b      	ldrb	r3, [r3, #0]
 800dc92:	0619      	lsls	r1, r3, #24
 800dc94:	4b41      	ldr	r3, [pc, #260]	@ (800dd9c <MX_LWIP_Init+0x254>)
 800dc96:	785b      	ldrb	r3, [r3, #1]
 800dc98:	041b      	lsls	r3, r3, #16
 800dc9a:	4319      	orrs	r1, r3
 800dc9c:	4b3f      	ldr	r3, [pc, #252]	@ (800dd9c <MX_LWIP_Init+0x254>)
 800dc9e:	789b      	ldrb	r3, [r3, #2]
 800dca0:	021b      	lsls	r3, r3, #8
 800dca2:	430b      	orrs	r3, r1
 800dca4:	493d      	ldr	r1, [pc, #244]	@ (800dd9c <MX_LWIP_Init+0x254>)
 800dca6:	78c9      	ldrb	r1, [r1, #3]
 800dca8:	430b      	orrs	r3, r1
 800dcaa:	0e1b      	lsrs	r3, r3, #24
 800dcac:	4313      	orrs	r3, r2
 800dcae:	4a3e      	ldr	r2, [pc, #248]	@ (800dda8 <MX_LWIP_Init+0x260>)
 800dcb0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800dcb2:	4b3b      	ldr	r3, [pc, #236]	@ (800dda0 <MX_LWIP_Init+0x258>)
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	061a      	lsls	r2, r3, #24
 800dcb8:	4b39      	ldr	r3, [pc, #228]	@ (800dda0 <MX_LWIP_Init+0x258>)
 800dcba:	785b      	ldrb	r3, [r3, #1]
 800dcbc:	041b      	lsls	r3, r3, #16
 800dcbe:	431a      	orrs	r2, r3
 800dcc0:	4b37      	ldr	r3, [pc, #220]	@ (800dda0 <MX_LWIP_Init+0x258>)
 800dcc2:	789b      	ldrb	r3, [r3, #2]
 800dcc4:	021b      	lsls	r3, r3, #8
 800dcc6:	4313      	orrs	r3, r2
 800dcc8:	4a35      	ldr	r2, [pc, #212]	@ (800dda0 <MX_LWIP_Init+0x258>)
 800dcca:	78d2      	ldrb	r2, [r2, #3]
 800dccc:	4313      	orrs	r3, r2
 800dcce:	061a      	lsls	r2, r3, #24
 800dcd0:	4b33      	ldr	r3, [pc, #204]	@ (800dda0 <MX_LWIP_Init+0x258>)
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	0619      	lsls	r1, r3, #24
 800dcd6:	4b32      	ldr	r3, [pc, #200]	@ (800dda0 <MX_LWIP_Init+0x258>)
 800dcd8:	785b      	ldrb	r3, [r3, #1]
 800dcda:	041b      	lsls	r3, r3, #16
 800dcdc:	4319      	orrs	r1, r3
 800dcde:	4b30      	ldr	r3, [pc, #192]	@ (800dda0 <MX_LWIP_Init+0x258>)
 800dce0:	789b      	ldrb	r3, [r3, #2]
 800dce2:	021b      	lsls	r3, r3, #8
 800dce4:	430b      	orrs	r3, r1
 800dce6:	492e      	ldr	r1, [pc, #184]	@ (800dda0 <MX_LWIP_Init+0x258>)
 800dce8:	78c9      	ldrb	r1, [r1, #3]
 800dcea:	430b      	orrs	r3, r1
 800dcec:	021b      	lsls	r3, r3, #8
 800dcee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dcf2:	431a      	orrs	r2, r3
 800dcf4:	4b2a      	ldr	r3, [pc, #168]	@ (800dda0 <MX_LWIP_Init+0x258>)
 800dcf6:	781b      	ldrb	r3, [r3, #0]
 800dcf8:	0619      	lsls	r1, r3, #24
 800dcfa:	4b29      	ldr	r3, [pc, #164]	@ (800dda0 <MX_LWIP_Init+0x258>)
 800dcfc:	785b      	ldrb	r3, [r3, #1]
 800dcfe:	041b      	lsls	r3, r3, #16
 800dd00:	4319      	orrs	r1, r3
 800dd02:	4b27      	ldr	r3, [pc, #156]	@ (800dda0 <MX_LWIP_Init+0x258>)
 800dd04:	789b      	ldrb	r3, [r3, #2]
 800dd06:	021b      	lsls	r3, r3, #8
 800dd08:	430b      	orrs	r3, r1
 800dd0a:	4925      	ldr	r1, [pc, #148]	@ (800dda0 <MX_LWIP_Init+0x258>)
 800dd0c:	78c9      	ldrb	r1, [r1, #3]
 800dd0e:	430b      	orrs	r3, r1
 800dd10:	0a1b      	lsrs	r3, r3, #8
 800dd12:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dd16:	431a      	orrs	r2, r3
 800dd18:	4b21      	ldr	r3, [pc, #132]	@ (800dda0 <MX_LWIP_Init+0x258>)
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	0619      	lsls	r1, r3, #24
 800dd1e:	4b20      	ldr	r3, [pc, #128]	@ (800dda0 <MX_LWIP_Init+0x258>)
 800dd20:	785b      	ldrb	r3, [r3, #1]
 800dd22:	041b      	lsls	r3, r3, #16
 800dd24:	4319      	orrs	r1, r3
 800dd26:	4b1e      	ldr	r3, [pc, #120]	@ (800dda0 <MX_LWIP_Init+0x258>)
 800dd28:	789b      	ldrb	r3, [r3, #2]
 800dd2a:	021b      	lsls	r3, r3, #8
 800dd2c:	430b      	orrs	r3, r1
 800dd2e:	491c      	ldr	r1, [pc, #112]	@ (800dda0 <MX_LWIP_Init+0x258>)
 800dd30:	78c9      	ldrb	r1, [r1, #3]
 800dd32:	430b      	orrs	r3, r1
 800dd34:	0e1b      	lsrs	r3, r3, #24
 800dd36:	4313      	orrs	r3, r2
 800dd38:	4a1c      	ldr	r2, [pc, #112]	@ (800ddac <MX_LWIP_Init+0x264>)
 800dd3a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800dd3c:	4b1c      	ldr	r3, [pc, #112]	@ (800ddb0 <MX_LWIP_Init+0x268>)
 800dd3e:	9302      	str	r3, [sp, #8]
 800dd40:	4b1c      	ldr	r3, [pc, #112]	@ (800ddb4 <MX_LWIP_Init+0x26c>)
 800dd42:	9301      	str	r3, [sp, #4]
 800dd44:	2300      	movs	r3, #0
 800dd46:	9300      	str	r3, [sp, #0]
 800dd48:	4b18      	ldr	r3, [pc, #96]	@ (800ddac <MX_LWIP_Init+0x264>)
 800dd4a:	4a17      	ldr	r2, [pc, #92]	@ (800dda8 <MX_LWIP_Init+0x260>)
 800dd4c:	4915      	ldr	r1, [pc, #84]	@ (800dda4 <MX_LWIP_Init+0x25c>)
 800dd4e:	481a      	ldr	r0, [pc, #104]	@ (800ddb8 <MX_LWIP_Init+0x270>)
 800dd50:	f005 fd52 	bl	80137f8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800dd54:	4818      	ldr	r0, [pc, #96]	@ (800ddb8 <MX_LWIP_Init+0x270>)
 800dd56:	f005 ff01 	bl	8013b5c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800dd5a:	4817      	ldr	r0, [pc, #92]	@ (800ddb8 <MX_LWIP_Init+0x270>)
 800dd5c:	f005 ff0e 	bl	8013b7c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800dd60:	4916      	ldr	r1, [pc, #88]	@ (800ddbc <MX_LWIP_Init+0x274>)
 800dd62:	4815      	ldr	r0, [pc, #84]	@ (800ddb8 <MX_LWIP_Init+0x270>)
 800dd64:	f006 f80c 	bl	8013d80 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800dd68:	2224      	movs	r2, #36	@ 0x24
 800dd6a:	2100      	movs	r1, #0
 800dd6c:	4814      	ldr	r0, [pc, #80]	@ (800ddc0 <MX_LWIP_Init+0x278>)
 800dd6e:	f010 fb09 	bl	801e384 <memset>
  attributes.name = "EthLink";
 800dd72:	4b13      	ldr	r3, [pc, #76]	@ (800ddc0 <MX_LWIP_Init+0x278>)
 800dd74:	4a13      	ldr	r2, [pc, #76]	@ (800ddc4 <MX_LWIP_Init+0x27c>)
 800dd76:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800dd78:	4b11      	ldr	r3, [pc, #68]	@ (800ddc0 <MX_LWIP_Init+0x278>)
 800dd7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800dd7e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800dd80:	4b0f      	ldr	r3, [pc, #60]	@ (800ddc0 <MX_LWIP_Init+0x278>)
 800dd82:	2210      	movs	r2, #16
 800dd84:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800dd86:	4a0e      	ldr	r2, [pc, #56]	@ (800ddc0 <MX_LWIP_Init+0x278>)
 800dd88:	490b      	ldr	r1, [pc, #44]	@ (800ddb8 <MX_LWIP_Init+0x270>)
 800dd8a:	480f      	ldr	r0, [pc, #60]	@ (800ddc8 <MX_LWIP_Init+0x280>)
 800dd8c:	f000 fdce 	bl	800e92c <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */
  // printf("IP: %s\n\r", ipaddr_ntoa(&gnetif.ip_addr));
/* USER CODE END 3 */
}
 800dd90:	bf00      	nop
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	20000e74 	.word	0x20000e74
 800dd9c:	20000e78 	.word	0x20000e78
 800dda0:	20000e7c 	.word	0x20000e7c
 800dda4:	20000e68 	.word	0x20000e68
 800dda8:	20000e6c 	.word	0x20000e6c
 800ddac:	20000e70 	.word	0x20000e70
 800ddb0:	08012ba9 	.word	0x08012ba9
 800ddb4:	0800e30d 	.word	0x0800e30d
 800ddb8:	20000e34 	.word	0x20000e34
 800ddbc:	0800ddcd 	.word	0x0800ddcd
 800ddc0:	20000e80 	.word	0x20000e80
 800ddc4:	0801f20c 	.word	0x0801f20c
 800ddc8:	0800e5e5 	.word	0x0800e5e5

0800ddcc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b083      	sub	sp, #12
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800ddd4:	bf00      	nop
 800ddd6:	370c      	adds	r7, #12
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddde:	4770      	bx	lr

0800dde0 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b087      	sub	sp, #28
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800ddf2:	2320      	movs	r3, #32
 800ddf4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800ddf6:	f3bf 8f4f 	dsb	sy
}
 800ddfa:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800ddfc:	e00b      	b.n	800de16 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800ddfe:	4a0d      	ldr	r2, [pc, #52]	@ (800de34 <SCB_InvalidateDCache_by_Addr+0x54>)
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	693a      	ldr	r2, [r7, #16]
 800de0a:	4413      	add	r3, r2
 800de0c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800de0e:	697a      	ldr	r2, [r7, #20]
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	1ad3      	subs	r3, r2, r3
 800de14:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	dcf0      	bgt.n	800ddfe <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800de1c:	f3bf 8f4f 	dsb	sy
}
 800de20:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800de22:	f3bf 8f6f 	isb	sy
}
 800de26:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800de28:	bf00      	nop
 800de2a:	371c      	adds	r7, #28
 800de2c:	46bd      	mov	sp, r7
 800de2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de32:	4770      	bx	lr
 800de34:	e000ed00 	.word	0xe000ed00

0800de38 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b082      	sub	sp, #8
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800de40:	4b04      	ldr	r3, [pc, #16]	@ (800de54 <HAL_ETH_RxCpltCallback+0x1c>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	4618      	mov	r0, r3
 800de46:	f001 f88f 	bl	800ef68 <osSemaphoreRelease>
}
 800de4a:	bf00      	nop
 800de4c:	3708      	adds	r7, #8
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	2000a1b0 	.word	0x2000a1b0

0800de58 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800de60:	4b04      	ldr	r3, [pc, #16]	@ (800de74 <HAL_ETH_TxCpltCallback+0x1c>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4618      	mov	r0, r3
 800de66:	f001 f87f 	bl	800ef68 <osSemaphoreRelease>
}
 800de6a:	bf00      	nop
 800de6c:	3708      	adds	r7, #8
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	2000a1b4 	.word	0x2000a1b4

0800de78 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b082      	sub	sp, #8
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f7f7 f92e 	bl	80050e2 <HAL_ETH_GetDMAError>
 800de86:	4603      	mov	r3, r0
 800de88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de8c:	2b80      	cmp	r3, #128	@ 0x80
 800de8e:	d104      	bne.n	800de9a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800de90:	4b04      	ldr	r3, [pc, #16]	@ (800dea4 <HAL_ETH_ErrorCallback+0x2c>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	4618      	mov	r0, r3
 800de96:	f001 f867 	bl	800ef68 <osSemaphoreRelease>
  }
}
 800de9a:	bf00      	nop
 800de9c:	3708      	adds	r7, #8
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}
 800dea2:	bf00      	nop
 800dea4:	2000a1b0 	.word	0x2000a1b0

0800dea8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b0aa      	sub	sp, #168	@ 0xa8
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800deb0:	2300      	movs	r3, #0
 800deb2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800deb6:	2300      	movs	r3, #0
 800deb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800debc:	2300      	movs	r3, #0
 800debe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800dec2:	f107 0310 	add.w	r3, r7, #16
 800dec6:	2264      	movs	r2, #100	@ 0x64
 800dec8:	2100      	movs	r1, #0
 800deca:	4618      	mov	r0, r3
 800decc:	f010 fa5a 	bl	801e384 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800ded0:	4b89      	ldr	r3, [pc, #548]	@ (800e0f8 <low_level_init+0x250>)
 800ded2:	4a8a      	ldr	r2, [pc, #552]	@ (800e0fc <low_level_init+0x254>)
 800ded4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800ded6:	2300      	movs	r3, #0
 800ded8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800deda:	2380      	movs	r3, #128	@ 0x80
 800dedc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800dede:	23e1      	movs	r3, #225	@ 0xe1
 800dee0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800dee2:	2300      	movs	r3, #0
 800dee4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800dee6:	2300      	movs	r3, #0
 800dee8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800deea:	2300      	movs	r3, #0
 800deec:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800deee:	4a82      	ldr	r2, [pc, #520]	@ (800e0f8 <low_level_init+0x250>)
 800def0:	f107 0308 	add.w	r3, r7, #8
 800def4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800def6:	4b80      	ldr	r3, [pc, #512]	@ (800e0f8 <low_level_init+0x250>)
 800def8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800defc:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800defe:	4b7e      	ldr	r3, [pc, #504]	@ (800e0f8 <low_level_init+0x250>)
 800df00:	4a7f      	ldr	r2, [pc, #508]	@ (800e100 <low_level_init+0x258>)
 800df02:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800df04:	4b7c      	ldr	r3, [pc, #496]	@ (800e0f8 <low_level_init+0x250>)
 800df06:	4a7f      	ldr	r2, [pc, #508]	@ (800e104 <low_level_init+0x25c>)
 800df08:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800df0a:	4b7b      	ldr	r3, [pc, #492]	@ (800e0f8 <low_level_init+0x250>)
 800df0c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800df10:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800df12:	4879      	ldr	r0, [pc, #484]	@ (800e0f8 <low_level_init+0x250>)
 800df14:	f7f6 fa9c 	bl	8004450 <HAL_ETH_Init>
 800df18:	4603      	mov	r3, r0
 800df1a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800df1e:	2238      	movs	r2, #56	@ 0x38
 800df20:	2100      	movs	r1, #0
 800df22:	4879      	ldr	r0, [pc, #484]	@ (800e108 <low_level_init+0x260>)
 800df24:	f010 fa2e 	bl	801e384 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800df28:	4b77      	ldr	r3, [pc, #476]	@ (800e108 <low_level_init+0x260>)
 800df2a:	2221      	movs	r2, #33	@ 0x21
 800df2c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800df2e:	4b76      	ldr	r3, [pc, #472]	@ (800e108 <low_level_init+0x260>)
 800df30:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800df34:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800df36:	4b74      	ldr	r3, [pc, #464]	@ (800e108 <low_level_init+0x260>)
 800df38:	2200      	movs	r2, #0
 800df3a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800df3c:	4873      	ldr	r0, [pc, #460]	@ (800e10c <low_level_init+0x264>)
 800df3e:	f005 fb15 	bl	801356c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2206      	movs	r2, #6
 800df46:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800df4a:	4b6b      	ldr	r3, [pc, #428]	@ (800e0f8 <low_level_init+0x250>)
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	781a      	ldrb	r2, [r3, #0]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800df56:	4b68      	ldr	r3, [pc, #416]	@ (800e0f8 <low_level_init+0x250>)
 800df58:	685b      	ldr	r3, [r3, #4]
 800df5a:	785a      	ldrb	r2, [r3, #1]
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800df62:	4b65      	ldr	r3, [pc, #404]	@ (800e0f8 <low_level_init+0x250>)
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	789a      	ldrb	r2, [r3, #2]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800df6e:	4b62      	ldr	r3, [pc, #392]	@ (800e0f8 <low_level_init+0x250>)
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	78da      	ldrb	r2, [r3, #3]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800df7a:	4b5f      	ldr	r3, [pc, #380]	@ (800e0f8 <low_level_init+0x250>)
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	791a      	ldrb	r2, [r3, #4]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800df86:	4b5c      	ldr	r3, [pc, #368]	@ (800e0f8 <low_level_init+0x250>)
 800df88:	685b      	ldr	r3, [r3, #4]
 800df8a:	795a      	ldrb	r2, [r3, #5]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800df98:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800dfa0:	f043 030a 	orr.w	r3, r3, #10
 800dfa4:	b2da      	uxtb	r2, r3
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800dfac:	2200      	movs	r2, #0
 800dfae:	2100      	movs	r1, #0
 800dfb0:	2001      	movs	r0, #1
 800dfb2:	f000 fed7 	bl	800ed64 <osSemaphoreNew>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	4a55      	ldr	r2, [pc, #340]	@ (800e110 <low_level_init+0x268>)
 800dfba:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	2100      	movs	r1, #0
 800dfc0:	2001      	movs	r0, #1
 800dfc2:	f000 fecf 	bl	800ed64 <osSemaphoreNew>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	4a52      	ldr	r2, [pc, #328]	@ (800e114 <low_level_init+0x26c>)
 800dfca:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800dfcc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800dfd0:	2224      	movs	r2, #36	@ 0x24
 800dfd2:	2100      	movs	r1, #0
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f010 f9d5 	bl	801e384 <memset>
  attributes.name = "EthIf";
 800dfda:	4b4f      	ldr	r3, [pc, #316]	@ (800e118 <low_level_init+0x270>)
 800dfdc:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800dfde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dfe2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800dfe6:	2330      	movs	r3, #48	@ 0x30
 800dfe8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800dfec:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800dff0:	461a      	mov	r2, r3
 800dff2:	6879      	ldr	r1, [r7, #4]
 800dff4:	4849      	ldr	r0, [pc, #292]	@ (800e11c <low_level_init+0x274>)
 800dff6:	f000 fc99 	bl	800e92c <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800dffa:	4949      	ldr	r1, [pc, #292]	@ (800e120 <low_level_init+0x278>)
 800dffc:	4849      	ldr	r0, [pc, #292]	@ (800e124 <low_level_init+0x27c>)
 800dffe:	f7f4 faea 	bl	80025d6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800e002:	4848      	ldr	r0, [pc, #288]	@ (800e124 <low_level_init+0x27c>)
 800e004:	f7f4 fb19 	bl	800263a <LAN8742_Init>
 800e008:	4603      	mov	r3, r0
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d006      	beq.n	800e01c <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f005 fe86 	bl	8013d20 <netif_set_link_down>
    netif_set_down(netif);
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f005 fe1d 	bl	8013c54 <netif_set_down>
 800e01a:	e06a      	b.n	800e0f2 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800e01c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800e020:	2b00      	cmp	r3, #0
 800e022:	d164      	bne.n	800e0ee <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e024:	483f      	ldr	r0, [pc, #252]	@ (800e124 <low_level_init+0x27c>)
 800e026:	f7f4 fb55 	bl	80026d4 <LAN8742_GetLinkState>
 800e02a:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800e02e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e032:	2b01      	cmp	r3, #1
 800e034:	dc06      	bgt.n	800e044 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f005 fe72 	bl	8013d20 <netif_set_link_down>
      netif_set_down(netif);
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f005 fe09 	bl	8013c54 <netif_set_down>
 800e042:	e056      	b.n	800e0f2 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800e044:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e048:	3b02      	subs	r3, #2
 800e04a:	2b03      	cmp	r3, #3
 800e04c:	d82a      	bhi.n	800e0a4 <low_level_init+0x1fc>
 800e04e:	a201      	add	r2, pc, #4	@ (adr r2, 800e054 <low_level_init+0x1ac>)
 800e050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e054:	0800e065 	.word	0x0800e065
 800e058:	0800e077 	.word	0x0800e077
 800e05c:	0800e087 	.word	0x0800e087
 800e060:	0800e097 	.word	0x0800e097
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800e064:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e068:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800e06c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e070:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800e074:	e01f      	b.n	800e0b6 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800e076:	2300      	movs	r3, #0
 800e078:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800e07c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e080:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800e084:	e017      	b.n	800e0b6 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800e086:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e08a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800e08e:	2300      	movs	r3, #0
 800e090:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800e094:	e00f      	b.n	800e0b6 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800e096:	2300      	movs	r3, #0
 800e098:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800e09c:	2300      	movs	r3, #0
 800e09e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800e0a2:	e008      	b.n	800e0b6 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800e0a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e0a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800e0ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e0b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800e0b4:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800e0b6:	f107 0310 	add.w	r3, r7, #16
 800e0ba:	4619      	mov	r1, r3
 800e0bc:	480e      	ldr	r0, [pc, #56]	@ (800e0f8 <low_level_init+0x250>)
 800e0be:	f7f6 feaf 	bl	8004e20 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800e0c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e0c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800e0c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e0cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800e0ce:	f107 0310 	add.w	r3, r7, #16
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	4808      	ldr	r0, [pc, #32]	@ (800e0f8 <low_level_init+0x250>)
 800e0d6:	f7f6 ff9a 	bl	800500e <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800e0da:	4807      	ldr	r0, [pc, #28]	@ (800e0f8 <low_level_init+0x250>)
 800e0dc:	f7f6 fa52 	bl	8004584 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f005 fd4b 	bl	8013b7c <netif_set_up>
    netif_set_link_up(netif);
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f005 fde6 	bl	8013cb8 <netif_set_link_up>
 800e0ec:	e001      	b.n	800e0f2 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800e0ee:	f7f3 f991 	bl	8001414 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800e0f2:	37a8      	adds	r7, #168	@ 0xa8
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}
 800e0f8:	2000a1b8 	.word	0x2000a1b8
 800e0fc:	40028000 	.word	0x40028000
 800e100:	2000012c 	.word	0x2000012c
 800e104:	2000008c 	.word	0x2000008c
 800e108:	2000a268 	.word	0x2000a268
 800e10c:	08022214 	.word	0x08022214
 800e110:	2000a1b0 	.word	0x2000a1b0
 800e114:	2000a1b4 	.word	0x2000a1b4
 800e118:	0801f214 	.word	0x0801f214
 800e11c:	0800e2b9 	.word	0x0800e2b9
 800e120:	2000000c 	.word	0x2000000c
 800e124:	2000a2a0 	.word	0x2000a2a0

0800e128 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b092      	sub	sp, #72	@ 0x48
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800e132:	2300      	movs	r3, #0
 800e134:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800e136:	2300      	movs	r3, #0
 800e138:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800e13a:	2300      	movs	r3, #0
 800e13c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800e140:	f107 030c 	add.w	r3, r7, #12
 800e144:	2230      	movs	r2, #48	@ 0x30
 800e146:	2100      	movs	r1, #0
 800e148:	4618      	mov	r0, r3
 800e14a:	f010 f91b 	bl	801e384 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800e14e:	f107 030c 	add.w	r3, r7, #12
 800e152:	2230      	movs	r2, #48	@ 0x30
 800e154:	2100      	movs	r1, #0
 800e156:	4618      	mov	r0, r3
 800e158:	f010 f914 	bl	801e384 <memset>

  for(q = p; q != NULL; q = q->next)
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e160:	e045      	b.n	800e1ee <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800e162:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e164:	2b03      	cmp	r3, #3
 800e166:	d902      	bls.n	800e16e <low_level_output+0x46>
      return ERR_IF;
 800e168:	f06f 030b 	mvn.w	r3, #11
 800e16c:	e07f      	b.n	800e26e <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800e16e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e170:	6859      	ldr	r1, [r3, #4]
 800e172:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e174:	4613      	mov	r3, r2
 800e176:	005b      	lsls	r3, r3, #1
 800e178:	4413      	add	r3, r2
 800e17a:	009b      	lsls	r3, r3, #2
 800e17c:	3348      	adds	r3, #72	@ 0x48
 800e17e:	443b      	add	r3, r7
 800e180:	3b3c      	subs	r3, #60	@ 0x3c
 800e182:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800e184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e186:	895b      	ldrh	r3, [r3, #10]
 800e188:	4619      	mov	r1, r3
 800e18a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e18c:	4613      	mov	r3, r2
 800e18e:	005b      	lsls	r3, r3, #1
 800e190:	4413      	add	r3, r2
 800e192:	009b      	lsls	r3, r3, #2
 800e194:	3348      	adds	r3, #72	@ 0x48
 800e196:	443b      	add	r3, r7
 800e198:	3b38      	subs	r3, #56	@ 0x38
 800e19a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800e19c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d011      	beq.n	800e1c6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800e1a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1a4:	1e5a      	subs	r2, r3, #1
 800e1a6:	f107 000c 	add.w	r0, r7, #12
 800e1aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e1ac:	460b      	mov	r3, r1
 800e1ae:	005b      	lsls	r3, r3, #1
 800e1b0:	440b      	add	r3, r1
 800e1b2:	009b      	lsls	r3, r3, #2
 800e1b4:	18c1      	adds	r1, r0, r3
 800e1b6:	4613      	mov	r3, r2
 800e1b8:	005b      	lsls	r3, r3, #1
 800e1ba:	4413      	add	r3, r2
 800e1bc:	009b      	lsls	r3, r3, #2
 800e1be:	3348      	adds	r3, #72	@ 0x48
 800e1c0:	443b      	add	r3, r7
 800e1c2:	3b34      	subs	r3, #52	@ 0x34
 800e1c4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800e1c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d109      	bne.n	800e1e2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800e1ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e1d0:	4613      	mov	r3, r2
 800e1d2:	005b      	lsls	r3, r3, #1
 800e1d4:	4413      	add	r3, r2
 800e1d6:	009b      	lsls	r3, r3, #2
 800e1d8:	3348      	adds	r3, #72	@ 0x48
 800e1da:	443b      	add	r3, r7
 800e1dc:	3b34      	subs	r3, #52	@ 0x34
 800e1de:	2200      	movs	r2, #0
 800e1e0:	601a      	str	r2, [r3, #0]
    }

    i++;
 800e1e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1e4:	3301      	adds	r3, #1
 800e1e6:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800e1e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	643b      	str	r3, [r7, #64]	@ 0x40
 800e1ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d1b6      	bne.n	800e162 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	891b      	ldrh	r3, [r3, #8]
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	4b1f      	ldr	r3, [pc, #124]	@ (800e278 <low_level_output+0x150>)
 800e1fc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800e1fe:	4a1e      	ldr	r2, [pc, #120]	@ (800e278 <low_level_output+0x150>)
 800e200:	f107 030c 	add.w	r3, r7, #12
 800e204:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800e206:	4a1c      	ldr	r2, [pc, #112]	@ (800e278 <low_level_output+0x150>)
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800e20c:	6838      	ldr	r0, [r7, #0]
 800e20e:	f006 fa0b 	bl	8014628 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800e212:	4919      	ldr	r1, [pc, #100]	@ (800e278 <low_level_output+0x150>)
 800e214:	4819      	ldr	r0, [pc, #100]	@ (800e27c <low_level_output+0x154>)
 800e216:	f7f6 faa5 	bl	8004764 <HAL_ETH_Transmit_IT>
 800e21a:	4603      	mov	r3, r0
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d103      	bne.n	800e228 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800e220:	2300      	movs	r3, #0
 800e222:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e226:	e01b      	b.n	800e260 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800e228:	4814      	ldr	r0, [pc, #80]	@ (800e27c <low_level_output+0x154>)
 800e22a:	f7f6 ff4d 	bl	80050c8 <HAL_ETH_GetError>
 800e22e:	4603      	mov	r3, r0
 800e230:	f003 0302 	and.w	r3, r3, #2
 800e234:	2b00      	cmp	r3, #0
 800e236:	d00d      	beq.n	800e254 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800e238:	4b11      	ldr	r3, [pc, #68]	@ (800e280 <low_level_output+0x158>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800e240:	4618      	mov	r0, r3
 800e242:	f000 fe2b 	bl	800ee9c <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800e246:	480d      	ldr	r0, [pc, #52]	@ (800e27c <low_level_output+0x154>)
 800e248:	f7f6 fc2c 	bl	8004aa4 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800e24c:	23fe      	movs	r3, #254	@ 0xfe
 800e24e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e252:	e005      	b.n	800e260 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800e254:	6838      	ldr	r0, [r7, #0]
 800e256:	f006 f941 	bl	80144dc <pbuf_free>
        errval =  ERR_IF;
 800e25a:	23f4      	movs	r3, #244	@ 0xf4
 800e25c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800e260:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e264:	f113 0f02 	cmn.w	r3, #2
 800e268:	d0d3      	beq.n	800e212 <low_level_output+0xea>

  return errval;
 800e26a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3748      	adds	r7, #72	@ 0x48
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	2000a268 	.word	0x2000a268
 800e27c:	2000a1b8 	.word	0x2000a1b8
 800e280:	2000a1b4 	.word	0x2000a1b4

0800e284 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b084      	sub	sp, #16
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800e28c:	2300      	movs	r3, #0
 800e28e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800e290:	4b07      	ldr	r3, [pc, #28]	@ (800e2b0 <low_level_input+0x2c>)
 800e292:	781b      	ldrb	r3, [r3, #0]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d105      	bne.n	800e2a4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800e298:	f107 030c 	add.w	r3, r7, #12
 800e29c:	4619      	mov	r1, r3
 800e29e:	4805      	ldr	r0, [pc, #20]	@ (800e2b4 <low_level_input+0x30>)
 800e2a0:	f7f6 fabc 	bl	800481c <HAL_ETH_ReadData>
  }

  return p;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3710      	adds	r7, #16
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
 800e2ae:	bf00      	nop
 800e2b0:	2000a1ac 	.word	0x2000a1ac
 800e2b4:	2000a1b8 	.word	0x2000a1b8

0800e2b8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b084      	sub	sp, #16
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800e2c8:	4b0f      	ldr	r3, [pc, #60]	@ (800e308 <ethernetif_input+0x50>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	f04f 31ff 	mov.w	r1, #4294967295
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f000 fde3 	bl	800ee9c <osSemaphoreAcquire>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d1f5      	bne.n	800e2c8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800e2dc:	68b8      	ldr	r0, [r7, #8]
 800e2de:	f7ff ffd1 	bl	800e284 <low_level_input>
 800e2e2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d00a      	beq.n	800e300 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	691b      	ldr	r3, [r3, #16]
 800e2ee:	68b9      	ldr	r1, [r7, #8]
 800e2f0:	68f8      	ldr	r0, [r7, #12]
 800e2f2:	4798      	blx	r3
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d002      	beq.n	800e300 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800e2fa:	68f8      	ldr	r0, [r7, #12]
 800e2fc:	f006 f8ee 	bl	80144dc <pbuf_free>
          }
        }
      } while(p!=NULL);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d1ea      	bne.n	800e2dc <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800e306:	e7df      	b.n	800e2c8 <ethernetif_input+0x10>
 800e308:	2000a1b0 	.word	0x2000a1b0

0800e30c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d106      	bne.n	800e328 <ethernetif_init+0x1c>
 800e31a:	4b0e      	ldr	r3, [pc, #56]	@ (800e354 <ethernetif_init+0x48>)
 800e31c:	f240 220d 	movw	r2, #525	@ 0x20d
 800e320:	490d      	ldr	r1, [pc, #52]	@ (800e358 <ethernetif_init+0x4c>)
 800e322:	480e      	ldr	r0, [pc, #56]	@ (800e35c <ethernetif_init+0x50>)
 800e324:	f00f fed6 	bl	801e0d4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2273      	movs	r2, #115	@ 0x73
 800e32c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2274      	movs	r2, #116	@ 0x74
 800e334:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	4a09      	ldr	r2, [pc, #36]	@ (800e360 <ethernetif_init+0x54>)
 800e33c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	4a08      	ldr	r2, [pc, #32]	@ (800e364 <ethernetif_init+0x58>)
 800e342:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f7ff fdaf 	bl	800dea8 <low_level_init>

  return ERR_OK;
 800e34a:	2300      	movs	r3, #0
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3708      	adds	r7, #8
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}
 800e354:	0801f21c 	.word	0x0801f21c
 800e358:	0801f238 	.word	0x0801f238
 800e35c:	0801f248 	.word	0x0801f248
 800e360:	0801b13d 	.word	0x0801b13d
 800e364:	0800e129 	.word	0x0800e129

0800e368 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b084      	sub	sp, #16
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800e374:	68f9      	ldr	r1, [r7, #12]
 800e376:	4809      	ldr	r0, [pc, #36]	@ (800e39c <pbuf_free_custom+0x34>)
 800e378:	f005 f9e8 	bl	801374c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800e37c:	4b08      	ldr	r3, [pc, #32]	@ (800e3a0 <pbuf_free_custom+0x38>)
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	2b01      	cmp	r3, #1
 800e382:	d107      	bne.n	800e394 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800e384:	4b06      	ldr	r3, [pc, #24]	@ (800e3a0 <pbuf_free_custom+0x38>)
 800e386:	2200      	movs	r2, #0
 800e388:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800e38a:	4b06      	ldr	r3, [pc, #24]	@ (800e3a4 <pbuf_free_custom+0x3c>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	4618      	mov	r0, r3
 800e390:	f000 fdea 	bl	800ef68 <osSemaphoreRelease>
  }
}
 800e394:	bf00      	nop
 800e396:	3710      	adds	r7, #16
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}
 800e39c:	08022214 	.word	0x08022214
 800e3a0:	2000a1ac 	.word	0x2000a1ac
 800e3a4:	2000a1b0 	.word	0x2000a1b0

0800e3a8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e3ac:	f7f4 fa3a 	bl	8002824 <HAL_GetTick>
 800e3b0:	4603      	mov	r3, r0
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	bd80      	pop	{r7, pc}
	...

0800e3b8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b08e      	sub	sp, #56	@ 0x38
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e3c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	601a      	str	r2, [r3, #0]
 800e3c8:	605a      	str	r2, [r3, #4]
 800e3ca:	609a      	str	r2, [r3, #8]
 800e3cc:	60da      	str	r2, [r3, #12]
 800e3ce:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	4a56      	ldr	r2, [pc, #344]	@ (800e530 <HAL_ETH_MspInit+0x178>)
 800e3d6:	4293      	cmp	r3, r2
 800e3d8:	f040 80a6 	bne.w	800e528 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800e3dc:	4b55      	ldr	r3, [pc, #340]	@ (800e534 <HAL_ETH_MspInit+0x17c>)
 800e3de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3e0:	4a54      	ldr	r2, [pc, #336]	@ (800e534 <HAL_ETH_MspInit+0x17c>)
 800e3e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800e3e6:	6313      	str	r3, [r2, #48]	@ 0x30
 800e3e8:	4b52      	ldr	r3, [pc, #328]	@ (800e534 <HAL_ETH_MspInit+0x17c>)
 800e3ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e3f0:	623b      	str	r3, [r7, #32]
 800e3f2:	6a3b      	ldr	r3, [r7, #32]
 800e3f4:	4b4f      	ldr	r3, [pc, #316]	@ (800e534 <HAL_ETH_MspInit+0x17c>)
 800e3f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3f8:	4a4e      	ldr	r2, [pc, #312]	@ (800e534 <HAL_ETH_MspInit+0x17c>)
 800e3fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e3fe:	6313      	str	r3, [r2, #48]	@ 0x30
 800e400:	4b4c      	ldr	r3, [pc, #304]	@ (800e534 <HAL_ETH_MspInit+0x17c>)
 800e402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e404:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e408:	61fb      	str	r3, [r7, #28]
 800e40a:	69fb      	ldr	r3, [r7, #28]
 800e40c:	4b49      	ldr	r3, [pc, #292]	@ (800e534 <HAL_ETH_MspInit+0x17c>)
 800e40e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e410:	4a48      	ldr	r2, [pc, #288]	@ (800e534 <HAL_ETH_MspInit+0x17c>)
 800e412:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e416:	6313      	str	r3, [r2, #48]	@ 0x30
 800e418:	4b46      	ldr	r3, [pc, #280]	@ (800e534 <HAL_ETH_MspInit+0x17c>)
 800e41a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e41c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e420:	61bb      	str	r3, [r7, #24]
 800e422:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e424:	4b43      	ldr	r3, [pc, #268]	@ (800e534 <HAL_ETH_MspInit+0x17c>)
 800e426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e428:	4a42      	ldr	r2, [pc, #264]	@ (800e534 <HAL_ETH_MspInit+0x17c>)
 800e42a:	f043 0304 	orr.w	r3, r3, #4
 800e42e:	6313      	str	r3, [r2, #48]	@ 0x30
 800e430:	4b40      	ldr	r3, [pc, #256]	@ (800e534 <HAL_ETH_MspInit+0x17c>)
 800e432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e434:	f003 0304 	and.w	r3, r3, #4
 800e438:	617b      	str	r3, [r7, #20]
 800e43a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e43c:	4b3d      	ldr	r3, [pc, #244]	@ (800e534 <HAL_ETH_MspInit+0x17c>)
 800e43e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e440:	4a3c      	ldr	r2, [pc, #240]	@ (800e534 <HAL_ETH_MspInit+0x17c>)
 800e442:	f043 0301 	orr.w	r3, r3, #1
 800e446:	6313      	str	r3, [r2, #48]	@ 0x30
 800e448:	4b3a      	ldr	r3, [pc, #232]	@ (800e534 <HAL_ETH_MspInit+0x17c>)
 800e44a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e44c:	f003 0301 	and.w	r3, r3, #1
 800e450:	613b      	str	r3, [r7, #16]
 800e452:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e454:	4b37      	ldr	r3, [pc, #220]	@ (800e534 <HAL_ETH_MspInit+0x17c>)
 800e456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e458:	4a36      	ldr	r2, [pc, #216]	@ (800e534 <HAL_ETH_MspInit+0x17c>)
 800e45a:	f043 0302 	orr.w	r3, r3, #2
 800e45e:	6313      	str	r3, [r2, #48]	@ 0x30
 800e460:	4b34      	ldr	r3, [pc, #208]	@ (800e534 <HAL_ETH_MspInit+0x17c>)
 800e462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e464:	f003 0302 	and.w	r3, r3, #2
 800e468:	60fb      	str	r3, [r7, #12]
 800e46a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800e46c:	4b31      	ldr	r3, [pc, #196]	@ (800e534 <HAL_ETH_MspInit+0x17c>)
 800e46e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e470:	4a30      	ldr	r2, [pc, #192]	@ (800e534 <HAL_ETH_MspInit+0x17c>)
 800e472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e476:	6313      	str	r3, [r2, #48]	@ 0x30
 800e478:	4b2e      	ldr	r3, [pc, #184]	@ (800e534 <HAL_ETH_MspInit+0x17c>)
 800e47a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e47c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e480:	60bb      	str	r3, [r7, #8]
 800e482:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800e484:	2332      	movs	r3, #50	@ 0x32
 800e486:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e488:	2302      	movs	r3, #2
 800e48a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e48c:	2300      	movs	r3, #0
 800e48e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e490:	2303      	movs	r3, #3
 800e492:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e494:	230b      	movs	r3, #11
 800e496:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e498:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e49c:	4619      	mov	r1, r3
 800e49e:	4826      	ldr	r0, [pc, #152]	@ (800e538 <HAL_ETH_MspInit+0x180>)
 800e4a0:	f7f7 fa4c 	bl	800593c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800e4a4:	2386      	movs	r3, #134	@ 0x86
 800e4a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4a8:	2302      	movs	r3, #2
 800e4aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e4b0:	2303      	movs	r3, #3
 800e4b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e4b4:	230b      	movs	r3, #11
 800e4b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e4b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e4bc:	4619      	mov	r1, r3
 800e4be:	481f      	ldr	r0, [pc, #124]	@ (800e53c <HAL_ETH_MspInit+0x184>)
 800e4c0:	f7f7 fa3c 	bl	800593c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800e4c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e4c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4ca:	2302      	movs	r3, #2
 800e4cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e4d2:	2303      	movs	r3, #3
 800e4d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e4d6:	230b      	movs	r3, #11
 800e4d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800e4da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e4de:	4619      	mov	r1, r3
 800e4e0:	4817      	ldr	r0, [pc, #92]	@ (800e540 <HAL_ETH_MspInit+0x188>)
 800e4e2:	f7f7 fa2b 	bl	800593c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800e4e6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800e4ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4ec:	2302      	movs	r3, #2
 800e4ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e4f4:	2303      	movs	r3, #3
 800e4f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e4f8:	230b      	movs	r3, #11
 800e4fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e4fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e500:	4619      	mov	r1, r3
 800e502:	4810      	ldr	r0, [pc, #64]	@ (800e544 <HAL_ETH_MspInit+0x18c>)
 800e504:	f7f7 fa1a 	bl	800593c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800e508:	2200      	movs	r2, #0
 800e50a:	2105      	movs	r1, #5
 800e50c:	203d      	movs	r0, #61	@ 0x3d
 800e50e:	f7f4 ff75 	bl	80033fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800e512:	203d      	movs	r0, #61	@ 0x3d
 800e514:	f7f4 ff8e 	bl	8003434 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800e518:	2200      	movs	r2, #0
 800e51a:	2105      	movs	r1, #5
 800e51c:	203e      	movs	r0, #62	@ 0x3e
 800e51e:	f7f4 ff6d 	bl	80033fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800e522:	203e      	movs	r0, #62	@ 0x3e
 800e524:	f7f4 ff86 	bl	8003434 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800e528:	bf00      	nop
 800e52a:	3738      	adds	r7, #56	@ 0x38
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	40028000 	.word	0x40028000
 800e534:	40023800 	.word	0x40023800
 800e538:	40020800 	.word	0x40020800
 800e53c:	40020000 	.word	0x40020000
 800e540:	40020400 	.word	0x40020400
 800e544:	40021800 	.word	0x40021800

0800e548 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800e54c:	4802      	ldr	r0, [pc, #8]	@ (800e558 <ETH_PHY_IO_Init+0x10>)
 800e54e:	f7f6 fd79 	bl	8005044 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800e552:	2300      	movs	r3, #0
}
 800e554:	4618      	mov	r0, r3
 800e556:	bd80      	pop	{r7, pc}
 800e558:	2000a1b8 	.word	0x2000a1b8

0800e55c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800e55c:	b480      	push	{r7}
 800e55e:	af00      	add	r7, sp, #0
  return 0;
 800e560:	2300      	movs	r3, #0
}
 800e562:	4618      	mov	r0, r3
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr

0800e56c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	60f8      	str	r0, [r7, #12]
 800e574:	60b9      	str	r1, [r7, #8]
 800e576:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	68ba      	ldr	r2, [r7, #8]
 800e57c:	68f9      	ldr	r1, [r7, #12]
 800e57e:	4807      	ldr	r0, [pc, #28]	@ (800e59c <ETH_PHY_IO_ReadReg+0x30>)
 800e580:	f7f6 fbba 	bl	8004cf8 <HAL_ETH_ReadPHYRegister>
 800e584:	4603      	mov	r3, r0
 800e586:	2b00      	cmp	r3, #0
 800e588:	d002      	beq.n	800e590 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800e58a:	f04f 33ff 	mov.w	r3, #4294967295
 800e58e:	e000      	b.n	800e592 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800e590:	2300      	movs	r3, #0
}
 800e592:	4618      	mov	r0, r3
 800e594:	3710      	adds	r7, #16
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	bf00      	nop
 800e59c:	2000a1b8 	.word	0x2000a1b8

0800e5a0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b084      	sub	sp, #16
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	60b9      	str	r1, [r7, #8]
 800e5aa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	68ba      	ldr	r2, [r7, #8]
 800e5b0:	68f9      	ldr	r1, [r7, #12]
 800e5b2:	4807      	ldr	r0, [pc, #28]	@ (800e5d0 <ETH_PHY_IO_WriteReg+0x30>)
 800e5b4:	f7f6 fbeb 	bl	8004d8e <HAL_ETH_WritePHYRegister>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d002      	beq.n	800e5c4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800e5be:	f04f 33ff 	mov.w	r3, #4294967295
 800e5c2:	e000      	b.n	800e5c6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800e5c4:	2300      	movs	r3, #0
}
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	3710      	adds	r7, #16
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	bd80      	pop	{r7, pc}
 800e5ce:	bf00      	nop
 800e5d0:	2000a1b8 	.word	0x2000a1b8

0800e5d4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e5d8:	f7f4 f924 	bl	8002824 <HAL_GetTick>
 800e5dc:	4603      	mov	r3, r0
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	bd80      	pop	{r7, pc}
	...

0800e5e4 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b0a0      	sub	sp, #128	@ 0x80
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800e5ec:	f107 0308 	add.w	r3, r7, #8
 800e5f0:	2264      	movs	r2, #100	@ 0x64
 800e5f2:	2100      	movs	r1, #0
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f00f fec5 	bl	801e384 <memset>
  int32_t PHYLinkState = 0;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800e5fe:	2300      	movs	r3, #0
 800e600:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e602:	2300      	movs	r3, #0
 800e604:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e606:	2300      	movs	r3, #0
 800e608:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e60e:	483a      	ldr	r0, [pc, #232]	@ (800e6f8 <ethernet_link_thread+0x114>)
 800e610:	f7f4 f860 	bl	80026d4 <LAN8742_GetLinkState>
 800e614:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800e616:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e618:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e61c:	089b      	lsrs	r3, r3, #2
 800e61e:	f003 0301 	and.w	r3, r3, #1
 800e622:	b2db      	uxtb	r3, r3
 800e624:	2b00      	cmp	r3, #0
 800e626:	d00c      	beq.n	800e642 <ethernet_link_thread+0x5e>
 800e628:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e62a:	2b01      	cmp	r3, #1
 800e62c:	dc09      	bgt.n	800e642 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800e62e:	4833      	ldr	r0, [pc, #204]	@ (800e6fc <ethernet_link_thread+0x118>)
 800e630:	f7f6 f818 	bl	8004664 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800e634:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e636:	f005 fb0d 	bl	8013c54 <netif_set_down>
    netif_set_link_down(netif);
 800e63a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e63c:	f005 fb70 	bl	8013d20 <netif_set_link_down>
 800e640:	e055      	b.n	800e6ee <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800e642:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e644:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e648:	f003 0304 	and.w	r3, r3, #4
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d14e      	bne.n	800e6ee <ethernet_link_thread+0x10a>
 800e650:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e652:	2b01      	cmp	r3, #1
 800e654:	dd4b      	ble.n	800e6ee <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800e656:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e658:	3b02      	subs	r3, #2
 800e65a:	2b03      	cmp	r3, #3
 800e65c:	d82a      	bhi.n	800e6b4 <ethernet_link_thread+0xd0>
 800e65e:	a201      	add	r2, pc, #4	@ (adr r2, 800e664 <ethernet_link_thread+0x80>)
 800e660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e664:	0800e675 	.word	0x0800e675
 800e668:	0800e687 	.word	0x0800e687
 800e66c:	0800e697 	.word	0x0800e697
 800e670:	0800e6a7 	.word	0x0800e6a7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800e674:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e678:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800e67a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e67e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800e680:	2301      	movs	r3, #1
 800e682:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800e684:	e017      	b.n	800e6b6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800e686:	2300      	movs	r3, #0
 800e688:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800e68a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e68e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800e690:	2301      	movs	r3, #1
 800e692:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800e694:	e00f      	b.n	800e6b6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800e696:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e69a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800e69c:	2300      	movs	r3, #0
 800e69e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800e6a4:	e007      	b.n	800e6b6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800e6b2:	e000      	b.n	800e6b6 <ethernet_link_thread+0xd2>
    default:
      break;
 800e6b4:	bf00      	nop
    }

    if(linkchanged)
 800e6b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d018      	beq.n	800e6ee <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800e6bc:	f107 0308 	add.w	r3, r7, #8
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	480e      	ldr	r0, [pc, #56]	@ (800e6fc <ethernet_link_thread+0x118>)
 800e6c4:	f7f6 fbac 	bl	8004e20 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800e6c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e6ca:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800e6cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e6ce:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800e6d0:	f107 0308 	add.w	r3, r7, #8
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	4809      	ldr	r0, [pc, #36]	@ (800e6fc <ethernet_link_thread+0x118>)
 800e6d8:	f7f6 fc99 	bl	800500e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800e6dc:	4807      	ldr	r0, [pc, #28]	@ (800e6fc <ethernet_link_thread+0x118>)
 800e6de:	f7f5 ff51 	bl	8004584 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800e6e2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e6e4:	f005 fa4a 	bl	8013b7c <netif_set_up>
      netif_set_link_up(netif);
 800e6e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e6ea:	f005 fae5 	bl	8013cb8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800e6ee:	2064      	movs	r0, #100	@ 0x64
 800e6f0:	f000 f9c2 	bl	800ea78 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e6f4:	e78b      	b.n	800e60e <ethernet_link_thread+0x2a>
 800e6f6:	bf00      	nop
 800e6f8:	2000a2a0 	.word	0x2000a2a0
 800e6fc:	2000a1b8 	.word	0x2000a1b8

0800e700 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b086      	sub	sp, #24
 800e704:	af02      	add	r7, sp, #8
 800e706:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800e708:	4812      	ldr	r0, [pc, #72]	@ (800e754 <HAL_ETH_RxAllocateCallback+0x54>)
 800e70a:	f004 ffab 	bl	8013664 <memp_malloc_pool>
 800e70e:	60f8      	str	r0, [r7, #12]
  if (p)
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d014      	beq.n	800e740 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	f103 0220 	add.w	r2, r3, #32
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	4a0d      	ldr	r2, [pc, #52]	@ (800e758 <HAL_ETH_RxAllocateCallback+0x58>)
 800e724:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800e72e:	9201      	str	r2, [sp, #4]
 800e730:	9300      	str	r3, [sp, #0]
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2241      	movs	r2, #65	@ 0x41
 800e736:	2100      	movs	r1, #0
 800e738:	2000      	movs	r0, #0
 800e73a:	f005 fd15 	bl	8014168 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800e73e:	e005      	b.n	800e74c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800e740:	4b06      	ldr	r3, [pc, #24]	@ (800e75c <HAL_ETH_RxAllocateCallback+0x5c>)
 800e742:	2201      	movs	r2, #1
 800e744:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2200      	movs	r2, #0
 800e74a:	601a      	str	r2, [r3, #0]
}
 800e74c:	bf00      	nop
 800e74e:	3710      	adds	r7, #16
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}
 800e754:	08022214 	.word	0x08022214
 800e758:	0800e369 	.word	0x0800e369
 800e75c:	2000a1ac 	.word	0x2000a1ac

0800e760 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b088      	sub	sp, #32
 800e764:	af00      	add	r7, sp, #0
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	60b9      	str	r1, [r7, #8]
 800e76a:	607a      	str	r2, [r7, #4]
 800e76c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e776:	2300      	movs	r3, #0
 800e778:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	3b20      	subs	r3, #32
 800e77e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800e780:	69fb      	ldr	r3, [r7, #28]
 800e782:	2200      	movs	r2, #0
 800e784:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800e786:	69fb      	ldr	r3, [r7, #28]
 800e788:	2200      	movs	r2, #0
 800e78a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800e78c:	69fb      	ldr	r3, [r7, #28]
 800e78e:	887a      	ldrh	r2, [r7, #2]
 800e790:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800e792:	69bb      	ldr	r3, [r7, #24]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d103      	bne.n	800e7a2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800e79a:	69bb      	ldr	r3, [r7, #24]
 800e79c:	69fa      	ldr	r2, [r7, #28]
 800e79e:	601a      	str	r2, [r3, #0]
 800e7a0:	e003      	b.n	800e7aa <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	69fa      	ldr	r2, [r7, #28]
 800e7a8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	69fa      	ldr	r2, [r7, #28]
 800e7ae:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800e7b0:	69bb      	ldr	r3, [r7, #24]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	61fb      	str	r3, [r7, #28]
 800e7b6:	e009      	b.n	800e7cc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800e7b8:	69fb      	ldr	r3, [r7, #28]
 800e7ba:	891a      	ldrh	r2, [r3, #8]
 800e7bc:	887b      	ldrh	r3, [r7, #2]
 800e7be:	4413      	add	r3, r2
 800e7c0:	b29a      	uxth	r2, r3
 800e7c2:	69fb      	ldr	r3, [r7, #28]
 800e7c4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800e7c6:	69fb      	ldr	r3, [r7, #28]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	61fb      	str	r3, [r7, #28]
 800e7cc:	69fb      	ldr	r3, [r7, #28]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d1f2      	bne.n	800e7b8 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800e7d2:	887b      	ldrh	r3, [r7, #2]
 800e7d4:	4619      	mov	r1, r3
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f7ff fb02 	bl	800dde0 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800e7dc:	bf00      	nop
 800e7de:	3720      	adds	r7, #32
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}

0800e7e4 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b082      	sub	sp, #8
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f005 fe75 	bl	80144dc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800e7f2:	bf00      	nop
 800e7f4:	3708      	adds	r7, #8
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}

0800e7fa <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e7fa:	b480      	push	{r7}
 800e7fc:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800e7fe:	bf00      	nop
 800e800:	46bd      	mov	sp, r7
 800e802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e806:	4770      	bx	lr

0800e808 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e808:	b480      	push	{r7}
 800e80a:	b085      	sub	sp, #20
 800e80c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e80e:	f3ef 8305 	mrs	r3, IPSR
 800e812:	60bb      	str	r3, [r7, #8]
  return(result);
 800e814:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e816:	2b00      	cmp	r3, #0
 800e818:	d10f      	bne.n	800e83a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e81a:	f3ef 8310 	mrs	r3, PRIMASK
 800e81e:	607b      	str	r3, [r7, #4]
  return(result);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d105      	bne.n	800e832 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e826:	f3ef 8311 	mrs	r3, BASEPRI
 800e82a:	603b      	str	r3, [r7, #0]
  return(result);
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d007      	beq.n	800e842 <osKernelInitialize+0x3a>
 800e832:	4b0e      	ldr	r3, [pc, #56]	@ (800e86c <osKernelInitialize+0x64>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	2b02      	cmp	r3, #2
 800e838:	d103      	bne.n	800e842 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e83a:	f06f 0305 	mvn.w	r3, #5
 800e83e:	60fb      	str	r3, [r7, #12]
 800e840:	e00c      	b.n	800e85c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e842:	4b0a      	ldr	r3, [pc, #40]	@ (800e86c <osKernelInitialize+0x64>)
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d105      	bne.n	800e856 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e84a:	4b08      	ldr	r3, [pc, #32]	@ (800e86c <osKernelInitialize+0x64>)
 800e84c:	2201      	movs	r2, #1
 800e84e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e850:	2300      	movs	r3, #0
 800e852:	60fb      	str	r3, [r7, #12]
 800e854:	e002      	b.n	800e85c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e856:	f04f 33ff 	mov.w	r3, #4294967295
 800e85a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e85c:	68fb      	ldr	r3, [r7, #12]
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3714      	adds	r7, #20
 800e862:	46bd      	mov	sp, r7
 800e864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e868:	4770      	bx	lr
 800e86a:	bf00      	nop
 800e86c:	2000a2c0 	.word	0x2000a2c0

0800e870 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e870:	b580      	push	{r7, lr}
 800e872:	b084      	sub	sp, #16
 800e874:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e876:	f3ef 8305 	mrs	r3, IPSR
 800e87a:	60bb      	str	r3, [r7, #8]
  return(result);
 800e87c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d10f      	bne.n	800e8a2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e882:	f3ef 8310 	mrs	r3, PRIMASK
 800e886:	607b      	str	r3, [r7, #4]
  return(result);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d105      	bne.n	800e89a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e88e:	f3ef 8311 	mrs	r3, BASEPRI
 800e892:	603b      	str	r3, [r7, #0]
  return(result);
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d007      	beq.n	800e8aa <osKernelStart+0x3a>
 800e89a:	4b0f      	ldr	r3, [pc, #60]	@ (800e8d8 <osKernelStart+0x68>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	2b02      	cmp	r3, #2
 800e8a0:	d103      	bne.n	800e8aa <osKernelStart+0x3a>
    stat = osErrorISR;
 800e8a2:	f06f 0305 	mvn.w	r3, #5
 800e8a6:	60fb      	str	r3, [r7, #12]
 800e8a8:	e010      	b.n	800e8cc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e8aa:	4b0b      	ldr	r3, [pc, #44]	@ (800e8d8 <osKernelStart+0x68>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	2b01      	cmp	r3, #1
 800e8b0:	d109      	bne.n	800e8c6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e8b2:	f7ff ffa2 	bl	800e7fa <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e8b6:	4b08      	ldr	r3, [pc, #32]	@ (800e8d8 <osKernelStart+0x68>)
 800e8b8:	2202      	movs	r2, #2
 800e8ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e8bc:	f002 f92e 	bl	8010b1c <vTaskStartScheduler>
      stat = osOK;
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	60fb      	str	r3, [r7, #12]
 800e8c4:	e002      	b.n	800e8cc <osKernelStart+0x5c>
    } else {
      stat = osError;
 800e8c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e8ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3710      	adds	r7, #16
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	2000a2c0 	.word	0x2000a2c0

0800e8dc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b084      	sub	sp, #16
 800e8e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8e2:	f3ef 8305 	mrs	r3, IPSR
 800e8e6:	60bb      	str	r3, [r7, #8]
  return(result);
 800e8e8:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d10f      	bne.n	800e90e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8ee:	f3ef 8310 	mrs	r3, PRIMASK
 800e8f2:	607b      	str	r3, [r7, #4]
  return(result);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d105      	bne.n	800e906 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e8fa:	f3ef 8311 	mrs	r3, BASEPRI
 800e8fe:	603b      	str	r3, [r7, #0]
  return(result);
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d007      	beq.n	800e916 <osKernelGetTickCount+0x3a>
 800e906:	4b08      	ldr	r3, [pc, #32]	@ (800e928 <osKernelGetTickCount+0x4c>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	2b02      	cmp	r3, #2
 800e90c:	d103      	bne.n	800e916 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800e90e:	f002 fa37 	bl	8010d80 <xTaskGetTickCountFromISR>
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	e002      	b.n	800e91c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800e916:	f002 fa23 	bl	8010d60 <xTaskGetTickCount>
 800e91a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800e91c:	68fb      	ldr	r3, [r7, #12]
}
 800e91e:	4618      	mov	r0, r3
 800e920:	3710      	adds	r7, #16
 800e922:	46bd      	mov	sp, r7
 800e924:	bd80      	pop	{r7, pc}
 800e926:	bf00      	nop
 800e928:	2000a2c0 	.word	0x2000a2c0

0800e92c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b090      	sub	sp, #64	@ 0x40
 800e930:	af04      	add	r7, sp, #16
 800e932:	60f8      	str	r0, [r7, #12]
 800e934:	60b9      	str	r1, [r7, #8]
 800e936:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e938:	2300      	movs	r3, #0
 800e93a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e93c:	f3ef 8305 	mrs	r3, IPSR
 800e940:	61fb      	str	r3, [r7, #28]
  return(result);
 800e942:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800e944:	2b00      	cmp	r3, #0
 800e946:	f040 8090 	bne.w	800ea6a <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e94a:	f3ef 8310 	mrs	r3, PRIMASK
 800e94e:	61bb      	str	r3, [r7, #24]
  return(result);
 800e950:	69bb      	ldr	r3, [r7, #24]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d105      	bne.n	800e962 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e956:	f3ef 8311 	mrs	r3, BASEPRI
 800e95a:	617b      	str	r3, [r7, #20]
  return(result);
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d003      	beq.n	800e96a <osThreadNew+0x3e>
 800e962:	4b44      	ldr	r3, [pc, #272]	@ (800ea74 <osThreadNew+0x148>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	2b02      	cmp	r3, #2
 800e968:	d07f      	beq.n	800ea6a <osThreadNew+0x13e>
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d07c      	beq.n	800ea6a <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800e970:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e974:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800e976:	2318      	movs	r3, #24
 800e978:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800e97a:	2300      	movs	r3, #0
 800e97c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800e97e:	f04f 33ff 	mov.w	r3, #4294967295
 800e982:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d045      	beq.n	800ea16 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d002      	beq.n	800e998 <osThreadNew+0x6c>
        name = attr->name;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	699b      	ldr	r3, [r3, #24]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d002      	beq.n	800e9a6 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	699b      	ldr	r3, [r3, #24]
 800e9a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d008      	beq.n	800e9be <osThreadNew+0x92>
 800e9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ae:	2b38      	cmp	r3, #56	@ 0x38
 800e9b0:	d805      	bhi.n	800e9be <osThreadNew+0x92>
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	685b      	ldr	r3, [r3, #4]
 800e9b6:	f003 0301 	and.w	r3, r3, #1
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d001      	beq.n	800e9c2 <osThreadNew+0x96>
        return (NULL);
 800e9be:	2300      	movs	r3, #0
 800e9c0:	e054      	b.n	800ea6c <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	695b      	ldr	r3, [r3, #20]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d003      	beq.n	800e9d2 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	695b      	ldr	r3, [r3, #20]
 800e9ce:	089b      	lsrs	r3, r3, #2
 800e9d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	689b      	ldr	r3, [r3, #8]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d00e      	beq.n	800e9f8 <osThreadNew+0xcc>
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	68db      	ldr	r3, [r3, #12]
 800e9de:	2ba7      	cmp	r3, #167	@ 0xa7
 800e9e0:	d90a      	bls.n	800e9f8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d006      	beq.n	800e9f8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	695b      	ldr	r3, [r3, #20]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d002      	beq.n	800e9f8 <osThreadNew+0xcc>
        mem = 1;
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	623b      	str	r3, [r7, #32]
 800e9f6:	e010      	b.n	800ea1a <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	689b      	ldr	r3, [r3, #8]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d10c      	bne.n	800ea1a <osThreadNew+0xee>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	68db      	ldr	r3, [r3, #12]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d108      	bne.n	800ea1a <osThreadNew+0xee>
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	691b      	ldr	r3, [r3, #16]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d104      	bne.n	800ea1a <osThreadNew+0xee>
          mem = 0;
 800ea10:	2300      	movs	r3, #0
 800ea12:	623b      	str	r3, [r7, #32]
 800ea14:	e001      	b.n	800ea1a <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800ea16:	2300      	movs	r3, #0
 800ea18:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ea1a:	6a3b      	ldr	r3, [r7, #32]
 800ea1c:	2b01      	cmp	r3, #1
 800ea1e:	d110      	bne.n	800ea42 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ea28:	9202      	str	r2, [sp, #8]
 800ea2a:	9301      	str	r3, [sp, #4]
 800ea2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea2e:	9300      	str	r3, [sp, #0]
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ea36:	68f8      	ldr	r0, [r7, #12]
 800ea38:	f001 fe72 	bl	8010720 <xTaskCreateStatic>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	613b      	str	r3, [r7, #16]
 800ea40:	e013      	b.n	800ea6a <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800ea42:	6a3b      	ldr	r3, [r7, #32]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d110      	bne.n	800ea6a <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ea48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea4a:	b29a      	uxth	r2, r3
 800ea4c:	f107 0310 	add.w	r3, r7, #16
 800ea50:	9301      	str	r3, [sp, #4]
 800ea52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea54:	9300      	str	r3, [sp, #0]
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ea5a:	68f8      	ldr	r0, [r7, #12]
 800ea5c:	f001 fec6 	bl	80107ec <xTaskCreate>
 800ea60:	4603      	mov	r3, r0
 800ea62:	2b01      	cmp	r3, #1
 800ea64:	d001      	beq.n	800ea6a <osThreadNew+0x13e>
          hTask = NULL;
 800ea66:	2300      	movs	r3, #0
 800ea68:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ea6a:	693b      	ldr	r3, [r7, #16]
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3730      	adds	r7, #48	@ 0x30
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}
 800ea74:	2000a2c0 	.word	0x2000a2c0

0800ea78 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b086      	sub	sp, #24
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea80:	f3ef 8305 	mrs	r3, IPSR
 800ea84:	613b      	str	r3, [r7, #16]
  return(result);
 800ea86:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d10f      	bne.n	800eaac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea8c:	f3ef 8310 	mrs	r3, PRIMASK
 800ea90:	60fb      	str	r3, [r7, #12]
  return(result);
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d105      	bne.n	800eaa4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ea98:	f3ef 8311 	mrs	r3, BASEPRI
 800ea9c:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d007      	beq.n	800eab4 <osDelay+0x3c>
 800eaa4:	4b0a      	ldr	r3, [pc, #40]	@ (800ead0 <osDelay+0x58>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	2b02      	cmp	r3, #2
 800eaaa:	d103      	bne.n	800eab4 <osDelay+0x3c>
    stat = osErrorISR;
 800eaac:	f06f 0305 	mvn.w	r3, #5
 800eab0:	617b      	str	r3, [r7, #20]
 800eab2:	e007      	b.n	800eac4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800eab4:	2300      	movs	r3, #0
 800eab6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d002      	beq.n	800eac4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f001 fff4 	bl	8010aac <vTaskDelay>
    }
  }

  return (stat);
 800eac4:	697b      	ldr	r3, [r7, #20]
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	3718      	adds	r7, #24
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}
 800eace:	bf00      	nop
 800ead0:	2000a2c0 	.word	0x2000a2c0

0800ead4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b08a      	sub	sp, #40	@ 0x28
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800eadc:	2300      	movs	r3, #0
 800eade:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eae0:	f3ef 8305 	mrs	r3, IPSR
 800eae4:	613b      	str	r3, [r7, #16]
  return(result);
 800eae6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	f040 8085 	bne.w	800ebf8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eaee:	f3ef 8310 	mrs	r3, PRIMASK
 800eaf2:	60fb      	str	r3, [r7, #12]
  return(result);
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d105      	bne.n	800eb06 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eafa:	f3ef 8311 	mrs	r3, BASEPRI
 800eafe:	60bb      	str	r3, [r7, #8]
  return(result);
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d003      	beq.n	800eb0e <osMutexNew+0x3a>
 800eb06:	4b3f      	ldr	r3, [pc, #252]	@ (800ec04 <osMutexNew+0x130>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	2b02      	cmp	r3, #2
 800eb0c:	d074      	beq.n	800ebf8 <osMutexNew+0x124>
    if (attr != NULL) {
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d003      	beq.n	800eb1c <osMutexNew+0x48>
      type = attr->attr_bits;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	685b      	ldr	r3, [r3, #4]
 800eb18:	623b      	str	r3, [r7, #32]
 800eb1a:	e001      	b.n	800eb20 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800eb20:	6a3b      	ldr	r3, [r7, #32]
 800eb22:	f003 0301 	and.w	r3, r3, #1
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d002      	beq.n	800eb30 <osMutexNew+0x5c>
      rmtx = 1U;
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	61fb      	str	r3, [r7, #28]
 800eb2e:	e001      	b.n	800eb34 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800eb30:	2300      	movs	r3, #0
 800eb32:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800eb34:	6a3b      	ldr	r3, [r7, #32]
 800eb36:	f003 0308 	and.w	r3, r3, #8
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d15c      	bne.n	800ebf8 <osMutexNew+0x124>
      mem = -1;
 800eb3e:	f04f 33ff 	mov.w	r3, #4294967295
 800eb42:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d015      	beq.n	800eb76 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	689b      	ldr	r3, [r3, #8]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d006      	beq.n	800eb60 <osMutexNew+0x8c>
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	68db      	ldr	r3, [r3, #12]
 800eb56:	2b4f      	cmp	r3, #79	@ 0x4f
 800eb58:	d902      	bls.n	800eb60 <osMutexNew+0x8c>
          mem = 1;
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	61bb      	str	r3, [r7, #24]
 800eb5e:	e00c      	b.n	800eb7a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	689b      	ldr	r3, [r3, #8]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d108      	bne.n	800eb7a <osMutexNew+0xa6>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	68db      	ldr	r3, [r3, #12]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d104      	bne.n	800eb7a <osMutexNew+0xa6>
            mem = 0;
 800eb70:	2300      	movs	r3, #0
 800eb72:	61bb      	str	r3, [r7, #24]
 800eb74:	e001      	b.n	800eb7a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800eb76:	2300      	movs	r3, #0
 800eb78:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800eb7a:	69bb      	ldr	r3, [r7, #24]
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	d112      	bne.n	800eba6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800eb80:	69fb      	ldr	r3, [r7, #28]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d007      	beq.n	800eb96 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	689b      	ldr	r3, [r3, #8]
 800eb8a:	4619      	mov	r1, r3
 800eb8c:	2004      	movs	r0, #4
 800eb8e:	f000 fe22 	bl	800f7d6 <xQueueCreateMutexStatic>
 800eb92:	6278      	str	r0, [r7, #36]	@ 0x24
 800eb94:	e016      	b.n	800ebc4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	689b      	ldr	r3, [r3, #8]
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	2001      	movs	r0, #1
 800eb9e:	f000 fe1a 	bl	800f7d6 <xQueueCreateMutexStatic>
 800eba2:	6278      	str	r0, [r7, #36]	@ 0x24
 800eba4:	e00e      	b.n	800ebc4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800eba6:	69bb      	ldr	r3, [r7, #24]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d10b      	bne.n	800ebc4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800ebac:	69fb      	ldr	r3, [r7, #28]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d004      	beq.n	800ebbc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800ebb2:	2004      	movs	r0, #4
 800ebb4:	f000 fdf7 	bl	800f7a6 <xQueueCreateMutex>
 800ebb8:	6278      	str	r0, [r7, #36]	@ 0x24
 800ebba:	e003      	b.n	800ebc4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800ebbc:	2001      	movs	r0, #1
 800ebbe:	f000 fdf2 	bl	800f7a6 <xQueueCreateMutex>
 800ebc2:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ebc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d00c      	beq.n	800ebe4 <osMutexNew+0x110>
        if (attr != NULL) {
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d003      	beq.n	800ebd8 <osMutexNew+0x104>
          name = attr->name;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	617b      	str	r3, [r7, #20]
 800ebd6:	e001      	b.n	800ebdc <osMutexNew+0x108>
        } else {
          name = NULL;
 800ebd8:	2300      	movs	r3, #0
 800ebda:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800ebdc:	6979      	ldr	r1, [r7, #20]
 800ebde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ebe0:	f001 fd16 	bl	8010610 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ebe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d006      	beq.n	800ebf8 <osMutexNew+0x124>
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d003      	beq.n	800ebf8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ebf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebf2:	f043 0301 	orr.w	r3, r3, #1
 800ebf6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ebf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3728      	adds	r7, #40	@ 0x28
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
 800ec02:	bf00      	nop
 800ec04:	2000a2c0 	.word	0x2000a2c0

0800ec08 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b088      	sub	sp, #32
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f023 0301 	bic.w	r3, r3, #1
 800ec18:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f003 0301 	and.w	r3, r3, #1
 800ec20:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ec22:	2300      	movs	r3, #0
 800ec24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec26:	f3ef 8305 	mrs	r3, IPSR
 800ec2a:	613b      	str	r3, [r7, #16]
  return(result);
 800ec2c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d10f      	bne.n	800ec52 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec32:	f3ef 8310 	mrs	r3, PRIMASK
 800ec36:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d105      	bne.n	800ec4a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ec3e:	f3ef 8311 	mrs	r3, BASEPRI
 800ec42:	60bb      	str	r3, [r7, #8]
  return(result);
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d007      	beq.n	800ec5a <osMutexAcquire+0x52>
 800ec4a:	4b1d      	ldr	r3, [pc, #116]	@ (800ecc0 <osMutexAcquire+0xb8>)
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	2b02      	cmp	r3, #2
 800ec50:	d103      	bne.n	800ec5a <osMutexAcquire+0x52>
    stat = osErrorISR;
 800ec52:	f06f 0305 	mvn.w	r3, #5
 800ec56:	61fb      	str	r3, [r7, #28]
 800ec58:	e02c      	b.n	800ecb4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800ec5a:	69bb      	ldr	r3, [r7, #24]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d103      	bne.n	800ec68 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800ec60:	f06f 0303 	mvn.w	r3, #3
 800ec64:	61fb      	str	r3, [r7, #28]
 800ec66:	e025      	b.n	800ecb4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d011      	beq.n	800ec92 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ec6e:	6839      	ldr	r1, [r7, #0]
 800ec70:	69b8      	ldr	r0, [r7, #24]
 800ec72:	f000 fe02 	bl	800f87a <xQueueTakeMutexRecursive>
 800ec76:	4603      	mov	r3, r0
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d01b      	beq.n	800ecb4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d003      	beq.n	800ec8a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800ec82:	f06f 0301 	mvn.w	r3, #1
 800ec86:	61fb      	str	r3, [r7, #28]
 800ec88:	e014      	b.n	800ecb4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ec8a:	f06f 0302 	mvn.w	r3, #2
 800ec8e:	61fb      	str	r3, [r7, #28]
 800ec90:	e010      	b.n	800ecb4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ec92:	6839      	ldr	r1, [r7, #0]
 800ec94:	69b8      	ldr	r0, [r7, #24]
 800ec96:	f001 f9cd 	bl	8010034 <xQueueSemaphoreTake>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	2b01      	cmp	r3, #1
 800ec9e:	d009      	beq.n	800ecb4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d003      	beq.n	800ecae <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800eca6:	f06f 0301 	mvn.w	r3, #1
 800ecaa:	61fb      	str	r3, [r7, #28]
 800ecac:	e002      	b.n	800ecb4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ecae:	f06f 0302 	mvn.w	r3, #2
 800ecb2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ecb4:	69fb      	ldr	r3, [r7, #28]
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3720      	adds	r7, #32
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
 800ecbe:	bf00      	nop
 800ecc0:	2000a2c0 	.word	0x2000a2c0

0800ecc4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b088      	sub	sp, #32
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f023 0301 	bic.w	r3, r3, #1
 800ecd2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f003 0301 	and.w	r3, r3, #1
 800ecda:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ecdc:	2300      	movs	r3, #0
 800ecde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ece0:	f3ef 8305 	mrs	r3, IPSR
 800ece4:	613b      	str	r3, [r7, #16]
  return(result);
 800ece6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d10f      	bne.n	800ed0c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecec:	f3ef 8310 	mrs	r3, PRIMASK
 800ecf0:	60fb      	str	r3, [r7, #12]
  return(result);
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d105      	bne.n	800ed04 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ecf8:	f3ef 8311 	mrs	r3, BASEPRI
 800ecfc:	60bb      	str	r3, [r7, #8]
  return(result);
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d007      	beq.n	800ed14 <osMutexRelease+0x50>
 800ed04:	4b16      	ldr	r3, [pc, #88]	@ (800ed60 <osMutexRelease+0x9c>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2b02      	cmp	r3, #2
 800ed0a:	d103      	bne.n	800ed14 <osMutexRelease+0x50>
    stat = osErrorISR;
 800ed0c:	f06f 0305 	mvn.w	r3, #5
 800ed10:	61fb      	str	r3, [r7, #28]
 800ed12:	e01f      	b.n	800ed54 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800ed14:	69bb      	ldr	r3, [r7, #24]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d103      	bne.n	800ed22 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800ed1a:	f06f 0303 	mvn.w	r3, #3
 800ed1e:	61fb      	str	r3, [r7, #28]
 800ed20:	e018      	b.n	800ed54 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d009      	beq.n	800ed3c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ed28:	69b8      	ldr	r0, [r7, #24]
 800ed2a:	f000 fd6f 	bl	800f80c <xQueueGiveMutexRecursive>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d00f      	beq.n	800ed54 <osMutexRelease+0x90>
        stat = osErrorResource;
 800ed34:	f06f 0302 	mvn.w	r3, #2
 800ed38:	61fb      	str	r3, [r7, #28]
 800ed3a:	e00b      	b.n	800ed54 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	2200      	movs	r2, #0
 800ed40:	2100      	movs	r1, #0
 800ed42:	69b8      	ldr	r0, [r7, #24]
 800ed44:	f000 fe48 	bl	800f9d8 <xQueueGenericSend>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	2b01      	cmp	r3, #1
 800ed4c:	d002      	beq.n	800ed54 <osMutexRelease+0x90>
        stat = osErrorResource;
 800ed4e:	f06f 0302 	mvn.w	r3, #2
 800ed52:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800ed54:	69fb      	ldr	r3, [r7, #28]
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3720      	adds	r7, #32
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}
 800ed5e:	bf00      	nop
 800ed60:	2000a2c0 	.word	0x2000a2c0

0800ed64 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b08c      	sub	sp, #48	@ 0x30
 800ed68:	af02      	add	r7, sp, #8
 800ed6a:	60f8      	str	r0, [r7, #12]
 800ed6c:	60b9      	str	r1, [r7, #8]
 800ed6e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ed70:	2300      	movs	r3, #0
 800ed72:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed74:	f3ef 8305 	mrs	r3, IPSR
 800ed78:	61bb      	str	r3, [r7, #24]
  return(result);
 800ed7a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	f040 8086 	bne.w	800ee8e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed82:	f3ef 8310 	mrs	r3, PRIMASK
 800ed86:	617b      	str	r3, [r7, #20]
  return(result);
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d105      	bne.n	800ed9a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ed8e:	f3ef 8311 	mrs	r3, BASEPRI
 800ed92:	613b      	str	r3, [r7, #16]
  return(result);
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d003      	beq.n	800eda2 <osSemaphoreNew+0x3e>
 800ed9a:	4b3f      	ldr	r3, [pc, #252]	@ (800ee98 <osSemaphoreNew+0x134>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	2b02      	cmp	r3, #2
 800eda0:	d075      	beq.n	800ee8e <osSemaphoreNew+0x12a>
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d072      	beq.n	800ee8e <osSemaphoreNew+0x12a>
 800eda8:	68ba      	ldr	r2, [r7, #8]
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	429a      	cmp	r2, r3
 800edae:	d86e      	bhi.n	800ee8e <osSemaphoreNew+0x12a>
    mem = -1;
 800edb0:	f04f 33ff 	mov.w	r3, #4294967295
 800edb4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d015      	beq.n	800ede8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	689b      	ldr	r3, [r3, #8]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d006      	beq.n	800edd2 <osSemaphoreNew+0x6e>
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	68db      	ldr	r3, [r3, #12]
 800edc8:	2b4f      	cmp	r3, #79	@ 0x4f
 800edca:	d902      	bls.n	800edd2 <osSemaphoreNew+0x6e>
        mem = 1;
 800edcc:	2301      	movs	r3, #1
 800edce:	623b      	str	r3, [r7, #32]
 800edd0:	e00c      	b.n	800edec <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	689b      	ldr	r3, [r3, #8]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d108      	bne.n	800edec <osSemaphoreNew+0x88>
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	68db      	ldr	r3, [r3, #12]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d104      	bne.n	800edec <osSemaphoreNew+0x88>
          mem = 0;
 800ede2:	2300      	movs	r3, #0
 800ede4:	623b      	str	r3, [r7, #32]
 800ede6:	e001      	b.n	800edec <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800ede8:	2300      	movs	r3, #0
 800edea:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800edec:	6a3b      	ldr	r3, [r7, #32]
 800edee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edf2:	d04c      	beq.n	800ee8e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	2b01      	cmp	r3, #1
 800edf8:	d128      	bne.n	800ee4c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800edfa:	6a3b      	ldr	r3, [r7, #32]
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	d10a      	bne.n	800ee16 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	689b      	ldr	r3, [r3, #8]
 800ee04:	2203      	movs	r2, #3
 800ee06:	9200      	str	r2, [sp, #0]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	2100      	movs	r1, #0
 800ee0c:	2001      	movs	r0, #1
 800ee0e:	f000 fbc3 	bl	800f598 <xQueueGenericCreateStatic>
 800ee12:	6278      	str	r0, [r7, #36]	@ 0x24
 800ee14:	e005      	b.n	800ee22 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800ee16:	2203      	movs	r2, #3
 800ee18:	2100      	movs	r1, #0
 800ee1a:	2001      	movs	r0, #1
 800ee1c:	f000 fc43 	bl	800f6a6 <xQueueGenericCreate>
 800ee20:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ee22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d022      	beq.n	800ee6e <osSemaphoreNew+0x10a>
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d01f      	beq.n	800ee6e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ee2e:	2300      	movs	r3, #0
 800ee30:	2200      	movs	r2, #0
 800ee32:	2100      	movs	r1, #0
 800ee34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ee36:	f000 fdcf 	bl	800f9d8 <xQueueGenericSend>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	2b01      	cmp	r3, #1
 800ee3e:	d016      	beq.n	800ee6e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800ee40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ee42:	f001 fa97 	bl	8010374 <vQueueDelete>
            hSemaphore = NULL;
 800ee46:	2300      	movs	r3, #0
 800ee48:	627b      	str	r3, [r7, #36]	@ 0x24
 800ee4a:	e010      	b.n	800ee6e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800ee4c:	6a3b      	ldr	r3, [r7, #32]
 800ee4e:	2b01      	cmp	r3, #1
 800ee50:	d108      	bne.n	800ee64 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	689b      	ldr	r3, [r3, #8]
 800ee56:	461a      	mov	r2, r3
 800ee58:	68b9      	ldr	r1, [r7, #8]
 800ee5a:	68f8      	ldr	r0, [r7, #12]
 800ee5c:	f000 fd46 	bl	800f8ec <xQueueCreateCountingSemaphoreStatic>
 800ee60:	6278      	str	r0, [r7, #36]	@ 0x24
 800ee62:	e004      	b.n	800ee6e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ee64:	68b9      	ldr	r1, [r7, #8]
 800ee66:	68f8      	ldr	r0, [r7, #12]
 800ee68:	f000 fd7d 	bl	800f966 <xQueueCreateCountingSemaphore>
 800ee6c:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ee6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d00c      	beq.n	800ee8e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d003      	beq.n	800ee82 <osSemaphoreNew+0x11e>
          name = attr->name;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	61fb      	str	r3, [r7, #28]
 800ee80:	e001      	b.n	800ee86 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800ee82:	2300      	movs	r3, #0
 800ee84:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ee86:	69f9      	ldr	r1, [r7, #28]
 800ee88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ee8a:	f001 fbc1 	bl	8010610 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ee8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3728      	adds	r7, #40	@ 0x28
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}
 800ee98:	2000a2c0 	.word	0x2000a2c0

0800ee9c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b088      	sub	sp, #32
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
 800eea4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800eeae:	69bb      	ldr	r3, [r7, #24]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d103      	bne.n	800eebc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800eeb4:	f06f 0303 	mvn.w	r3, #3
 800eeb8:	61fb      	str	r3, [r7, #28]
 800eeba:	e04b      	b.n	800ef54 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eebc:	f3ef 8305 	mrs	r3, IPSR
 800eec0:	617b      	str	r3, [r7, #20]
  return(result);
 800eec2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d10f      	bne.n	800eee8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eec8:	f3ef 8310 	mrs	r3, PRIMASK
 800eecc:	613b      	str	r3, [r7, #16]
  return(result);
 800eece:	693b      	ldr	r3, [r7, #16]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d105      	bne.n	800eee0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eed4:	f3ef 8311 	mrs	r3, BASEPRI
 800eed8:	60fb      	str	r3, [r7, #12]
  return(result);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d026      	beq.n	800ef2e <osSemaphoreAcquire+0x92>
 800eee0:	4b1f      	ldr	r3, [pc, #124]	@ (800ef60 <osSemaphoreAcquire+0xc4>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	2b02      	cmp	r3, #2
 800eee6:	d122      	bne.n	800ef2e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800eee8:	683b      	ldr	r3, [r7, #0]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d003      	beq.n	800eef6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800eeee:	f06f 0303 	mvn.w	r3, #3
 800eef2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800eef4:	e02d      	b.n	800ef52 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800eef6:	2300      	movs	r3, #0
 800eef8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800eefa:	f107 0308 	add.w	r3, r7, #8
 800eefe:	461a      	mov	r2, r3
 800ef00:	2100      	movs	r1, #0
 800ef02:	69b8      	ldr	r0, [r7, #24]
 800ef04:	f001 f9ae 	bl	8010264 <xQueueReceiveFromISR>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	2b01      	cmp	r3, #1
 800ef0c:	d003      	beq.n	800ef16 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800ef0e:	f06f 0302 	mvn.w	r3, #2
 800ef12:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800ef14:	e01d      	b.n	800ef52 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d01a      	beq.n	800ef52 <osSemaphoreAcquire+0xb6>
 800ef1c:	4b11      	ldr	r3, [pc, #68]	@ (800ef64 <osSemaphoreAcquire+0xc8>)
 800ef1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef22:	601a      	str	r2, [r3, #0]
 800ef24:	f3bf 8f4f 	dsb	sy
 800ef28:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800ef2c:	e011      	b.n	800ef52 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ef2e:	6839      	ldr	r1, [r7, #0]
 800ef30:	69b8      	ldr	r0, [r7, #24]
 800ef32:	f001 f87f 	bl	8010034 <xQueueSemaphoreTake>
 800ef36:	4603      	mov	r3, r0
 800ef38:	2b01      	cmp	r3, #1
 800ef3a:	d00b      	beq.n	800ef54 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d003      	beq.n	800ef4a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800ef42:	f06f 0301 	mvn.w	r3, #1
 800ef46:	61fb      	str	r3, [r7, #28]
 800ef48:	e004      	b.n	800ef54 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800ef4a:	f06f 0302 	mvn.w	r3, #2
 800ef4e:	61fb      	str	r3, [r7, #28]
 800ef50:	e000      	b.n	800ef54 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800ef52:	bf00      	nop
      }
    }
  }

  return (stat);
 800ef54:	69fb      	ldr	r3, [r7, #28]
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3720      	adds	r7, #32
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}
 800ef5e:	bf00      	nop
 800ef60:	2000a2c0 	.word	0x2000a2c0
 800ef64:	e000ed04 	.word	0xe000ed04

0800ef68 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b088      	sub	sp, #32
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ef74:	2300      	movs	r3, #0
 800ef76:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800ef78:	69bb      	ldr	r3, [r7, #24]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d103      	bne.n	800ef86 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ef7e:	f06f 0303 	mvn.w	r3, #3
 800ef82:	61fb      	str	r3, [r7, #28]
 800ef84:	e03e      	b.n	800f004 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef86:	f3ef 8305 	mrs	r3, IPSR
 800ef8a:	617b      	str	r3, [r7, #20]
  return(result);
 800ef8c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d10f      	bne.n	800efb2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef92:	f3ef 8310 	mrs	r3, PRIMASK
 800ef96:	613b      	str	r3, [r7, #16]
  return(result);
 800ef98:	693b      	ldr	r3, [r7, #16]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d105      	bne.n	800efaa <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ef9e:	f3ef 8311 	mrs	r3, BASEPRI
 800efa2:	60fb      	str	r3, [r7, #12]
  return(result);
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d01e      	beq.n	800efe8 <osSemaphoreRelease+0x80>
 800efaa:	4b19      	ldr	r3, [pc, #100]	@ (800f010 <osSemaphoreRelease+0xa8>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	2b02      	cmp	r3, #2
 800efb0:	d11a      	bne.n	800efe8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800efb2:	2300      	movs	r3, #0
 800efb4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800efb6:	f107 0308 	add.w	r3, r7, #8
 800efba:	4619      	mov	r1, r3
 800efbc:	69b8      	ldr	r0, [r7, #24]
 800efbe:	f000 feb8 	bl	800fd32 <xQueueGiveFromISR>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b01      	cmp	r3, #1
 800efc6:	d003      	beq.n	800efd0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800efc8:	f06f 0302 	mvn.w	r3, #2
 800efcc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800efce:	e018      	b.n	800f002 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d015      	beq.n	800f002 <osSemaphoreRelease+0x9a>
 800efd6:	4b0f      	ldr	r3, [pc, #60]	@ (800f014 <osSemaphoreRelease+0xac>)
 800efd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efdc:	601a      	str	r2, [r3, #0]
 800efde:	f3bf 8f4f 	dsb	sy
 800efe2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800efe6:	e00c      	b.n	800f002 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800efe8:	2300      	movs	r3, #0
 800efea:	2200      	movs	r2, #0
 800efec:	2100      	movs	r1, #0
 800efee:	69b8      	ldr	r0, [r7, #24]
 800eff0:	f000 fcf2 	bl	800f9d8 <xQueueGenericSend>
 800eff4:	4603      	mov	r3, r0
 800eff6:	2b01      	cmp	r3, #1
 800eff8:	d004      	beq.n	800f004 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800effa:	f06f 0302 	mvn.w	r3, #2
 800effe:	61fb      	str	r3, [r7, #28]
 800f000:	e000      	b.n	800f004 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f002:	bf00      	nop
    }
  }

  return (stat);
 800f004:	69fb      	ldr	r3, [r7, #28]
}
 800f006:	4618      	mov	r0, r3
 800f008:	3720      	adds	r7, #32
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}
 800f00e:	bf00      	nop
 800f010:	2000a2c0 	.word	0x2000a2c0
 800f014:	e000ed04 	.word	0xe000ed04

0800f018 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f018:	b580      	push	{r7, lr}
 800f01a:	b08c      	sub	sp, #48	@ 0x30
 800f01c:	af02      	add	r7, sp, #8
 800f01e:	60f8      	str	r0, [r7, #12]
 800f020:	60b9      	str	r1, [r7, #8]
 800f022:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f024:	2300      	movs	r3, #0
 800f026:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f028:	f3ef 8305 	mrs	r3, IPSR
 800f02c:	61bb      	str	r3, [r7, #24]
  return(result);
 800f02e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f030:	2b00      	cmp	r3, #0
 800f032:	d16f      	bne.n	800f114 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f034:	f3ef 8310 	mrs	r3, PRIMASK
 800f038:	617b      	str	r3, [r7, #20]
  return(result);
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d105      	bne.n	800f04c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f040:	f3ef 8311 	mrs	r3, BASEPRI
 800f044:	613b      	str	r3, [r7, #16]
  return(result);
 800f046:	693b      	ldr	r3, [r7, #16]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d003      	beq.n	800f054 <osMessageQueueNew+0x3c>
 800f04c:	4b34      	ldr	r3, [pc, #208]	@ (800f120 <osMessageQueueNew+0x108>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	2b02      	cmp	r3, #2
 800f052:	d05f      	beq.n	800f114 <osMessageQueueNew+0xfc>
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d05c      	beq.n	800f114 <osMessageQueueNew+0xfc>
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d059      	beq.n	800f114 <osMessageQueueNew+0xfc>
    mem = -1;
 800f060:	f04f 33ff 	mov.w	r3, #4294967295
 800f064:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d029      	beq.n	800f0c0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	689b      	ldr	r3, [r3, #8]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d012      	beq.n	800f09a <osMessageQueueNew+0x82>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	68db      	ldr	r3, [r3, #12]
 800f078:	2b4f      	cmp	r3, #79	@ 0x4f
 800f07a:	d90e      	bls.n	800f09a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f080:	2b00      	cmp	r3, #0
 800f082:	d00a      	beq.n	800f09a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	695a      	ldr	r2, [r3, #20]
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	68b9      	ldr	r1, [r7, #8]
 800f08c:	fb01 f303 	mul.w	r3, r1, r3
 800f090:	429a      	cmp	r2, r3
 800f092:	d302      	bcc.n	800f09a <osMessageQueueNew+0x82>
        mem = 1;
 800f094:	2301      	movs	r3, #1
 800f096:	623b      	str	r3, [r7, #32]
 800f098:	e014      	b.n	800f0c4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	689b      	ldr	r3, [r3, #8]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d110      	bne.n	800f0c4 <osMessageQueueNew+0xac>
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	68db      	ldr	r3, [r3, #12]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d10c      	bne.n	800f0c4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d108      	bne.n	800f0c4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	695b      	ldr	r3, [r3, #20]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d104      	bne.n	800f0c4 <osMessageQueueNew+0xac>
          mem = 0;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	623b      	str	r3, [r7, #32]
 800f0be:	e001      	b.n	800f0c4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f0c4:	6a3b      	ldr	r3, [r7, #32]
 800f0c6:	2b01      	cmp	r3, #1
 800f0c8:	d10b      	bne.n	800f0e2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	691a      	ldr	r2, [r3, #16]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	689b      	ldr	r3, [r3, #8]
 800f0d2:	2100      	movs	r1, #0
 800f0d4:	9100      	str	r1, [sp, #0]
 800f0d6:	68b9      	ldr	r1, [r7, #8]
 800f0d8:	68f8      	ldr	r0, [r7, #12]
 800f0da:	f000 fa5d 	bl	800f598 <xQueueGenericCreateStatic>
 800f0de:	6278      	str	r0, [r7, #36]	@ 0x24
 800f0e0:	e008      	b.n	800f0f4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800f0e2:	6a3b      	ldr	r3, [r7, #32]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d105      	bne.n	800f0f4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	68b9      	ldr	r1, [r7, #8]
 800f0ec:	68f8      	ldr	r0, [r7, #12]
 800f0ee:	f000 fada 	bl	800f6a6 <xQueueGenericCreate>
 800f0f2:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d00c      	beq.n	800f114 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d003      	beq.n	800f108 <osMessageQueueNew+0xf0>
        name = attr->name;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	61fb      	str	r3, [r7, #28]
 800f106:	e001      	b.n	800f10c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800f108:	2300      	movs	r3, #0
 800f10a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800f10c:	69f9      	ldr	r1, [r7, #28]
 800f10e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f110:	f001 fa7e 	bl	8010610 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f116:	4618      	mov	r0, r3
 800f118:	3728      	adds	r7, #40	@ 0x28
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	bf00      	nop
 800f120:	2000a2c0 	.word	0x2000a2c0

0800f124 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f124:	b580      	push	{r7, lr}
 800f126:	b08a      	sub	sp, #40	@ 0x28
 800f128:	af00      	add	r7, sp, #0
 800f12a:	60f8      	str	r0, [r7, #12]
 800f12c:	60b9      	str	r1, [r7, #8]
 800f12e:	603b      	str	r3, [r7, #0]
 800f130:	4613      	mov	r3, r2
 800f132:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f138:	2300      	movs	r3, #0
 800f13a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f13c:	f3ef 8305 	mrs	r3, IPSR
 800f140:	61fb      	str	r3, [r7, #28]
  return(result);
 800f142:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800f144:	2b00      	cmp	r3, #0
 800f146:	d10f      	bne.n	800f168 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f148:	f3ef 8310 	mrs	r3, PRIMASK
 800f14c:	61bb      	str	r3, [r7, #24]
  return(result);
 800f14e:	69bb      	ldr	r3, [r7, #24]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d105      	bne.n	800f160 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f154:	f3ef 8311 	mrs	r3, BASEPRI
 800f158:	617b      	str	r3, [r7, #20]
  return(result);
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d02c      	beq.n	800f1ba <osMessageQueuePut+0x96>
 800f160:	4b28      	ldr	r3, [pc, #160]	@ (800f204 <osMessageQueuePut+0xe0>)
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	2b02      	cmp	r3, #2
 800f166:	d128      	bne.n	800f1ba <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f168:	6a3b      	ldr	r3, [r7, #32]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d005      	beq.n	800f17a <osMessageQueuePut+0x56>
 800f16e:	68bb      	ldr	r3, [r7, #8]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d002      	beq.n	800f17a <osMessageQueuePut+0x56>
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d003      	beq.n	800f182 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800f17a:	f06f 0303 	mvn.w	r3, #3
 800f17e:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f180:	e039      	b.n	800f1f6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800f182:	2300      	movs	r3, #0
 800f184:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f186:	f107 0210 	add.w	r2, r7, #16
 800f18a:	2300      	movs	r3, #0
 800f18c:	68b9      	ldr	r1, [r7, #8]
 800f18e:	6a38      	ldr	r0, [r7, #32]
 800f190:	f000 fd2c 	bl	800fbec <xQueueGenericSendFromISR>
 800f194:	4603      	mov	r3, r0
 800f196:	2b01      	cmp	r3, #1
 800f198:	d003      	beq.n	800f1a2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800f19a:	f06f 0302 	mvn.w	r3, #2
 800f19e:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f1a0:	e029      	b.n	800f1f6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d026      	beq.n	800f1f6 <osMessageQueuePut+0xd2>
 800f1a8:	4b17      	ldr	r3, [pc, #92]	@ (800f208 <osMessageQueuePut+0xe4>)
 800f1aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f1ae:	601a      	str	r2, [r3, #0]
 800f1b0:	f3bf 8f4f 	dsb	sy
 800f1b4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f1b8:	e01d      	b.n	800f1f6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f1ba:	6a3b      	ldr	r3, [r7, #32]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d002      	beq.n	800f1c6 <osMessageQueuePut+0xa2>
 800f1c0:	68bb      	ldr	r3, [r7, #8]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d103      	bne.n	800f1ce <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800f1c6:	f06f 0303 	mvn.w	r3, #3
 800f1ca:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1cc:	e014      	b.n	800f1f8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	683a      	ldr	r2, [r7, #0]
 800f1d2:	68b9      	ldr	r1, [r7, #8]
 800f1d4:	6a38      	ldr	r0, [r7, #32]
 800f1d6:	f000 fbff 	bl	800f9d8 <xQueueGenericSend>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	2b01      	cmp	r3, #1
 800f1de:	d00b      	beq.n	800f1f8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d003      	beq.n	800f1ee <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800f1e6:	f06f 0301 	mvn.w	r3, #1
 800f1ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1ec:	e004      	b.n	800f1f8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800f1ee:	f06f 0302 	mvn.w	r3, #2
 800f1f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1f4:	e000      	b.n	800f1f8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f1f6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	3728      	adds	r7, #40	@ 0x28
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
 800f202:	bf00      	nop
 800f204:	2000a2c0 	.word	0x2000a2c0
 800f208:	e000ed04 	.word	0xe000ed04

0800f20c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b08a      	sub	sp, #40	@ 0x28
 800f210:	af00      	add	r7, sp, #0
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	60b9      	str	r1, [r7, #8]
 800f216:	607a      	str	r2, [r7, #4]
 800f218:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f21e:	2300      	movs	r3, #0
 800f220:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f222:	f3ef 8305 	mrs	r3, IPSR
 800f226:	61fb      	str	r3, [r7, #28]
  return(result);
 800f228:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d10f      	bne.n	800f24e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f22e:	f3ef 8310 	mrs	r3, PRIMASK
 800f232:	61bb      	str	r3, [r7, #24]
  return(result);
 800f234:	69bb      	ldr	r3, [r7, #24]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d105      	bne.n	800f246 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f23a:	f3ef 8311 	mrs	r3, BASEPRI
 800f23e:	617b      	str	r3, [r7, #20]
  return(result);
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d02c      	beq.n	800f2a0 <osMessageQueueGet+0x94>
 800f246:	4b28      	ldr	r3, [pc, #160]	@ (800f2e8 <osMessageQueueGet+0xdc>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	2b02      	cmp	r3, #2
 800f24c:	d128      	bne.n	800f2a0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f24e:	6a3b      	ldr	r3, [r7, #32]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d005      	beq.n	800f260 <osMessageQueueGet+0x54>
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d002      	beq.n	800f260 <osMessageQueueGet+0x54>
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d003      	beq.n	800f268 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800f260:	f06f 0303 	mvn.w	r3, #3
 800f264:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f266:	e038      	b.n	800f2da <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800f268:	2300      	movs	r3, #0
 800f26a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f26c:	f107 0310 	add.w	r3, r7, #16
 800f270:	461a      	mov	r2, r3
 800f272:	68b9      	ldr	r1, [r7, #8]
 800f274:	6a38      	ldr	r0, [r7, #32]
 800f276:	f000 fff5 	bl	8010264 <xQueueReceiveFromISR>
 800f27a:	4603      	mov	r3, r0
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d003      	beq.n	800f288 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800f280:	f06f 0302 	mvn.w	r3, #2
 800f284:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f286:	e028      	b.n	800f2da <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800f288:	693b      	ldr	r3, [r7, #16]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d025      	beq.n	800f2da <osMessageQueueGet+0xce>
 800f28e:	4b17      	ldr	r3, [pc, #92]	@ (800f2ec <osMessageQueueGet+0xe0>)
 800f290:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f294:	601a      	str	r2, [r3, #0]
 800f296:	f3bf 8f4f 	dsb	sy
 800f29a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f29e:	e01c      	b.n	800f2da <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f2a0:	6a3b      	ldr	r3, [r7, #32]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d002      	beq.n	800f2ac <osMessageQueueGet+0xa0>
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d103      	bne.n	800f2b4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800f2ac:	f06f 0303 	mvn.w	r3, #3
 800f2b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800f2b2:	e013      	b.n	800f2dc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f2b4:	683a      	ldr	r2, [r7, #0]
 800f2b6:	68b9      	ldr	r1, [r7, #8]
 800f2b8:	6a38      	ldr	r0, [r7, #32]
 800f2ba:	f000 fdd3 	bl	800fe64 <xQueueReceive>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	d00b      	beq.n	800f2dc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d003      	beq.n	800f2d2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800f2ca:	f06f 0301 	mvn.w	r3, #1
 800f2ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800f2d0:	e004      	b.n	800f2dc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800f2d2:	f06f 0302 	mvn.w	r3, #2
 800f2d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800f2d8:	e000      	b.n	800f2dc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f2da:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3728      	adds	r7, #40	@ 0x28
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
 800f2e6:	bf00      	nop
 800f2e8:	2000a2c0 	.word	0x2000a2c0
 800f2ec:	e000ed04 	.word	0xe000ed04

0800f2f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f2f0:	b480      	push	{r7}
 800f2f2:	b085      	sub	sp, #20
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	60f8      	str	r0, [r7, #12]
 800f2f8:	60b9      	str	r1, [r7, #8]
 800f2fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	4a07      	ldr	r2, [pc, #28]	@ (800f31c <vApplicationGetIdleTaskMemory+0x2c>)
 800f300:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	4a06      	ldr	r2, [pc, #24]	@ (800f320 <vApplicationGetIdleTaskMemory+0x30>)
 800f306:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f30e:	601a      	str	r2, [r3, #0]
}
 800f310:	bf00      	nop
 800f312:	3714      	adds	r7, #20
 800f314:	46bd      	mov	sp, r7
 800f316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31a:	4770      	bx	lr
 800f31c:	2000a2c4 	.word	0x2000a2c4
 800f320:	2000a36c 	.word	0x2000a36c

0800f324 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f324:	b480      	push	{r7}
 800f326:	b085      	sub	sp, #20
 800f328:	af00      	add	r7, sp, #0
 800f32a:	60f8      	str	r0, [r7, #12]
 800f32c:	60b9      	str	r1, [r7, #8]
 800f32e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	4a07      	ldr	r2, [pc, #28]	@ (800f350 <vApplicationGetTimerTaskMemory+0x2c>)
 800f334:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	4a06      	ldr	r2, [pc, #24]	@ (800f354 <vApplicationGetTimerTaskMemory+0x30>)
 800f33a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f342:	601a      	str	r2, [r3, #0]
}
 800f344:	bf00      	nop
 800f346:	3714      	adds	r7, #20
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr
 800f350:	2000a76c 	.word	0x2000a76c
 800f354:	2000a814 	.word	0x2000a814

0800f358 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f358:	b480      	push	{r7}
 800f35a:	b083      	sub	sp, #12
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f103 0208 	add.w	r2, r3, #8
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f04f 32ff 	mov.w	r2, #4294967295
 800f370:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	f103 0208 	add.w	r2, r3, #8
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f103 0208 	add.w	r2, r3, #8
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2200      	movs	r2, #0
 800f38a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f38c:	bf00      	nop
 800f38e:	370c      	adds	r7, #12
 800f390:	46bd      	mov	sp, r7
 800f392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f396:	4770      	bx	lr

0800f398 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f398:	b480      	push	{r7}
 800f39a:	b083      	sub	sp, #12
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f3a6:	bf00      	nop
 800f3a8:	370c      	adds	r7, #12
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b0:	4770      	bx	lr

0800f3b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f3b2:	b480      	push	{r7}
 800f3b4:	b085      	sub	sp, #20
 800f3b6:	af00      	add	r7, sp, #0
 800f3b8:	6078      	str	r0, [r7, #4]
 800f3ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	685b      	ldr	r3, [r3, #4]
 800f3c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	68fa      	ldr	r2, [r7, #12]
 800f3c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	689a      	ldr	r2, [r3, #8]
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	689b      	ldr	r3, [r3, #8]
 800f3d4:	683a      	ldr	r2, [r7, #0]
 800f3d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	683a      	ldr	r2, [r7, #0]
 800f3dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	687a      	ldr	r2, [r7, #4]
 800f3e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	1c5a      	adds	r2, r3, #1
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	601a      	str	r2, [r3, #0]
}
 800f3ee:	bf00      	nop
 800f3f0:	3714      	adds	r7, #20
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f8:	4770      	bx	lr

0800f3fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f3fa:	b480      	push	{r7}
 800f3fc:	b085      	sub	sp, #20
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	6078      	str	r0, [r7, #4]
 800f402:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f410:	d103      	bne.n	800f41a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	691b      	ldr	r3, [r3, #16]
 800f416:	60fb      	str	r3, [r7, #12]
 800f418:	e00c      	b.n	800f434 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	3308      	adds	r3, #8
 800f41e:	60fb      	str	r3, [r7, #12]
 800f420:	e002      	b.n	800f428 <vListInsert+0x2e>
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	685b      	ldr	r3, [r3, #4]
 800f426:	60fb      	str	r3, [r7, #12]
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	685b      	ldr	r3, [r3, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	68ba      	ldr	r2, [r7, #8]
 800f430:	429a      	cmp	r2, r3
 800f432:	d2f6      	bcs.n	800f422 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	685a      	ldr	r2, [r3, #4]
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	683a      	ldr	r2, [r7, #0]
 800f442:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	68fa      	ldr	r2, [r7, #12]
 800f448:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	683a      	ldr	r2, [r7, #0]
 800f44e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	687a      	ldr	r2, [r7, #4]
 800f454:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	1c5a      	adds	r2, r3, #1
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	601a      	str	r2, [r3, #0]
}
 800f460:	bf00      	nop
 800f462:	3714      	adds	r7, #20
 800f464:	46bd      	mov	sp, r7
 800f466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46a:	4770      	bx	lr

0800f46c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f46c:	b480      	push	{r7}
 800f46e:	b085      	sub	sp, #20
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	691b      	ldr	r3, [r3, #16]
 800f478:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	687a      	ldr	r2, [r7, #4]
 800f480:	6892      	ldr	r2, [r2, #8]
 800f482:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	689b      	ldr	r3, [r3, #8]
 800f488:	687a      	ldr	r2, [r7, #4]
 800f48a:	6852      	ldr	r2, [r2, #4]
 800f48c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	685b      	ldr	r3, [r3, #4]
 800f492:	687a      	ldr	r2, [r7, #4]
 800f494:	429a      	cmp	r2, r3
 800f496:	d103      	bne.n	800f4a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	689a      	ldr	r2, [r3, #8]
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	1e5a      	subs	r2, r3, #1
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	681b      	ldr	r3, [r3, #0]
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3714      	adds	r7, #20
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4be:	4770      	bx	lr

0800f4c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b084      	sub	sp, #16
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
 800f4c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d10d      	bne.n	800f4f0 <xQueueGenericReset+0x30>
	__asm volatile
 800f4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4d8:	b672      	cpsid	i
 800f4da:	f383 8811 	msr	BASEPRI, r3
 800f4de:	f3bf 8f6f 	isb	sy
 800f4e2:	f3bf 8f4f 	dsb	sy
 800f4e6:	b662      	cpsie	i
 800f4e8:	60bb      	str	r3, [r7, #8]
}
 800f4ea:	bf00      	nop
 800f4ec:	bf00      	nop
 800f4ee:	e7fd      	b.n	800f4ec <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800f4f0:	f002 ff4c 	bl	801238c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4fc:	68f9      	ldr	r1, [r7, #12]
 800f4fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f500:	fb01 f303 	mul.w	r3, r1, r3
 800f504:	441a      	add	r2, r3
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	2200      	movs	r2, #0
 800f50e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	681a      	ldr	r2, [r3, #0]
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	681a      	ldr	r2, [r3, #0]
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f520:	3b01      	subs	r3, #1
 800f522:	68f9      	ldr	r1, [r7, #12]
 800f524:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f526:	fb01 f303 	mul.w	r3, r1, r3
 800f52a:	441a      	add	r2, r3
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	22ff      	movs	r2, #255	@ 0xff
 800f534:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	22ff      	movs	r2, #255	@ 0xff
 800f53c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d114      	bne.n	800f570 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	691b      	ldr	r3, [r3, #16]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d01a      	beq.n	800f584 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	3310      	adds	r3, #16
 800f552:	4618      	mov	r0, r3
 800f554:	f001 fdc4 	bl	80110e0 <xTaskRemoveFromEventList>
 800f558:	4603      	mov	r3, r0
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d012      	beq.n	800f584 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f55e:	4b0d      	ldr	r3, [pc, #52]	@ (800f594 <xQueueGenericReset+0xd4>)
 800f560:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f564:	601a      	str	r2, [r3, #0]
 800f566:	f3bf 8f4f 	dsb	sy
 800f56a:	f3bf 8f6f 	isb	sy
 800f56e:	e009      	b.n	800f584 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	3310      	adds	r3, #16
 800f574:	4618      	mov	r0, r3
 800f576:	f7ff feef 	bl	800f358 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	3324      	adds	r3, #36	@ 0x24
 800f57e:	4618      	mov	r0, r3
 800f580:	f7ff feea 	bl	800f358 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f584:	f002 ff38 	bl	80123f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f588:	2301      	movs	r3, #1
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3710      	adds	r7, #16
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
 800f592:	bf00      	nop
 800f594:	e000ed04 	.word	0xe000ed04

0800f598 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b08e      	sub	sp, #56	@ 0x38
 800f59c:	af02      	add	r7, sp, #8
 800f59e:	60f8      	str	r0, [r7, #12]
 800f5a0:	60b9      	str	r1, [r7, #8]
 800f5a2:	607a      	str	r2, [r7, #4]
 800f5a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d10d      	bne.n	800f5c8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800f5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5b0:	b672      	cpsid	i
 800f5b2:	f383 8811 	msr	BASEPRI, r3
 800f5b6:	f3bf 8f6f 	isb	sy
 800f5ba:	f3bf 8f4f 	dsb	sy
 800f5be:	b662      	cpsie	i
 800f5c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f5c2:	bf00      	nop
 800f5c4:	bf00      	nop
 800f5c6:	e7fd      	b.n	800f5c4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d10d      	bne.n	800f5ea <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800f5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5d2:	b672      	cpsid	i
 800f5d4:	f383 8811 	msr	BASEPRI, r3
 800f5d8:	f3bf 8f6f 	isb	sy
 800f5dc:	f3bf 8f4f 	dsb	sy
 800f5e0:	b662      	cpsie	i
 800f5e2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f5e4:	bf00      	nop
 800f5e6:	bf00      	nop
 800f5e8:	e7fd      	b.n	800f5e6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d002      	beq.n	800f5f6 <xQueueGenericCreateStatic+0x5e>
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d001      	beq.n	800f5fa <xQueueGenericCreateStatic+0x62>
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	e000      	b.n	800f5fc <xQueueGenericCreateStatic+0x64>
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d10d      	bne.n	800f61c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800f600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f604:	b672      	cpsid	i
 800f606:	f383 8811 	msr	BASEPRI, r3
 800f60a:	f3bf 8f6f 	isb	sy
 800f60e:	f3bf 8f4f 	dsb	sy
 800f612:	b662      	cpsie	i
 800f614:	623b      	str	r3, [r7, #32]
}
 800f616:	bf00      	nop
 800f618:	bf00      	nop
 800f61a:	e7fd      	b.n	800f618 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d102      	bne.n	800f628 <xQueueGenericCreateStatic+0x90>
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d101      	bne.n	800f62c <xQueueGenericCreateStatic+0x94>
 800f628:	2301      	movs	r3, #1
 800f62a:	e000      	b.n	800f62e <xQueueGenericCreateStatic+0x96>
 800f62c:	2300      	movs	r3, #0
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d10d      	bne.n	800f64e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800f632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f636:	b672      	cpsid	i
 800f638:	f383 8811 	msr	BASEPRI, r3
 800f63c:	f3bf 8f6f 	isb	sy
 800f640:	f3bf 8f4f 	dsb	sy
 800f644:	b662      	cpsie	i
 800f646:	61fb      	str	r3, [r7, #28]
}
 800f648:	bf00      	nop
 800f64a:	bf00      	nop
 800f64c:	e7fd      	b.n	800f64a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f64e:	2350      	movs	r3, #80	@ 0x50
 800f650:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	2b50      	cmp	r3, #80	@ 0x50
 800f656:	d00d      	beq.n	800f674 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800f658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f65c:	b672      	cpsid	i
 800f65e:	f383 8811 	msr	BASEPRI, r3
 800f662:	f3bf 8f6f 	isb	sy
 800f666:	f3bf 8f4f 	dsb	sy
 800f66a:	b662      	cpsie	i
 800f66c:	61bb      	str	r3, [r7, #24]
}
 800f66e:	bf00      	nop
 800f670:	bf00      	nop
 800f672:	e7fd      	b.n	800f670 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f674:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f67a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d00d      	beq.n	800f69c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f682:	2201      	movs	r2, #1
 800f684:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f688:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f68c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f68e:	9300      	str	r3, [sp, #0]
 800f690:	4613      	mov	r3, r2
 800f692:	687a      	ldr	r2, [r7, #4]
 800f694:	68b9      	ldr	r1, [r7, #8]
 800f696:	68f8      	ldr	r0, [r7, #12]
 800f698:	f000 f848 	bl	800f72c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	3730      	adds	r7, #48	@ 0x30
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}

0800f6a6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f6a6:	b580      	push	{r7, lr}
 800f6a8:	b08a      	sub	sp, #40	@ 0x28
 800f6aa:	af02      	add	r7, sp, #8
 800f6ac:	60f8      	str	r0, [r7, #12]
 800f6ae:	60b9      	str	r1, [r7, #8]
 800f6b0:	4613      	mov	r3, r2
 800f6b2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d10d      	bne.n	800f6d6 <xQueueGenericCreate+0x30>
	__asm volatile
 800f6ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6be:	b672      	cpsid	i
 800f6c0:	f383 8811 	msr	BASEPRI, r3
 800f6c4:	f3bf 8f6f 	isb	sy
 800f6c8:	f3bf 8f4f 	dsb	sy
 800f6cc:	b662      	cpsie	i
 800f6ce:	613b      	str	r3, [r7, #16]
}
 800f6d0:	bf00      	nop
 800f6d2:	bf00      	nop
 800f6d4:	e7fd      	b.n	800f6d2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f6d6:	68bb      	ldr	r3, [r7, #8]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d102      	bne.n	800f6e2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	61fb      	str	r3, [r7, #28]
 800f6e0:	e004      	b.n	800f6ec <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	68ba      	ldr	r2, [r7, #8]
 800f6e6:	fb02 f303 	mul.w	r3, r2, r3
 800f6ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f6ec:	69fb      	ldr	r3, [r7, #28]
 800f6ee:	3350      	adds	r3, #80	@ 0x50
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	f002 ff79 	bl	80125e8 <pvPortMalloc>
 800f6f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f6f8:	69bb      	ldr	r3, [r7, #24]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d011      	beq.n	800f722 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f6fe:	69bb      	ldr	r3, [r7, #24]
 800f700:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	3350      	adds	r3, #80	@ 0x50
 800f706:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f708:	69bb      	ldr	r3, [r7, #24]
 800f70a:	2200      	movs	r2, #0
 800f70c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f710:	79fa      	ldrb	r2, [r7, #7]
 800f712:	69bb      	ldr	r3, [r7, #24]
 800f714:	9300      	str	r3, [sp, #0]
 800f716:	4613      	mov	r3, r2
 800f718:	697a      	ldr	r2, [r7, #20]
 800f71a:	68b9      	ldr	r1, [r7, #8]
 800f71c:	68f8      	ldr	r0, [r7, #12]
 800f71e:	f000 f805 	bl	800f72c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f722:	69bb      	ldr	r3, [r7, #24]
	}
 800f724:	4618      	mov	r0, r3
 800f726:	3720      	adds	r7, #32
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}

0800f72c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b084      	sub	sp, #16
 800f730:	af00      	add	r7, sp, #0
 800f732:	60f8      	str	r0, [r7, #12]
 800f734:	60b9      	str	r1, [r7, #8]
 800f736:	607a      	str	r2, [r7, #4]
 800f738:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d103      	bne.n	800f748 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f740:	69bb      	ldr	r3, [r7, #24]
 800f742:	69ba      	ldr	r2, [r7, #24]
 800f744:	601a      	str	r2, [r3, #0]
 800f746:	e002      	b.n	800f74e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f748:	69bb      	ldr	r3, [r7, #24]
 800f74a:	687a      	ldr	r2, [r7, #4]
 800f74c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f74e:	69bb      	ldr	r3, [r7, #24]
 800f750:	68fa      	ldr	r2, [r7, #12]
 800f752:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f754:	69bb      	ldr	r3, [r7, #24]
 800f756:	68ba      	ldr	r2, [r7, #8]
 800f758:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f75a:	2101      	movs	r1, #1
 800f75c:	69b8      	ldr	r0, [r7, #24]
 800f75e:	f7ff feaf 	bl	800f4c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f762:	69bb      	ldr	r3, [r7, #24]
 800f764:	78fa      	ldrb	r2, [r7, #3]
 800f766:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f76a:	bf00      	nop
 800f76c:	3710      	adds	r7, #16
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}

0800f772 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f772:	b580      	push	{r7, lr}
 800f774:	b082      	sub	sp, #8
 800f776:	af00      	add	r7, sp, #0
 800f778:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d00e      	beq.n	800f79e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2200      	movs	r2, #0
 800f784:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2200      	movs	r2, #0
 800f78a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	2200      	movs	r2, #0
 800f790:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f792:	2300      	movs	r3, #0
 800f794:	2200      	movs	r2, #0
 800f796:	2100      	movs	r1, #0
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f000 f91d 	bl	800f9d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f79e:	bf00      	nop
 800f7a0:	3708      	adds	r7, #8
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}

0800f7a6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f7a6:	b580      	push	{r7, lr}
 800f7a8:	b086      	sub	sp, #24
 800f7aa:	af00      	add	r7, sp, #0
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	617b      	str	r3, [r7, #20]
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f7b8:	79fb      	ldrb	r3, [r7, #7]
 800f7ba:	461a      	mov	r2, r3
 800f7bc:	6939      	ldr	r1, [r7, #16]
 800f7be:	6978      	ldr	r0, [r7, #20]
 800f7c0:	f7ff ff71 	bl	800f6a6 <xQueueGenericCreate>
 800f7c4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f7c6:	68f8      	ldr	r0, [r7, #12]
 800f7c8:	f7ff ffd3 	bl	800f772 <prvInitialiseMutex>

		return xNewQueue;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
	}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3718      	adds	r7, #24
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}

0800f7d6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f7d6:	b580      	push	{r7, lr}
 800f7d8:	b088      	sub	sp, #32
 800f7da:	af02      	add	r7, sp, #8
 800f7dc:	4603      	mov	r3, r0
 800f7de:	6039      	str	r1, [r7, #0]
 800f7e0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f7e2:	2301      	movs	r3, #1
 800f7e4:	617b      	str	r3, [r7, #20]
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f7ea:	79fb      	ldrb	r3, [r7, #7]
 800f7ec:	9300      	str	r3, [sp, #0]
 800f7ee:	683b      	ldr	r3, [r7, #0]
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	6939      	ldr	r1, [r7, #16]
 800f7f4:	6978      	ldr	r0, [r7, #20]
 800f7f6:	f7ff fecf 	bl	800f598 <xQueueGenericCreateStatic>
 800f7fa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f7fc:	68f8      	ldr	r0, [r7, #12]
 800f7fe:	f7ff ffb8 	bl	800f772 <prvInitialiseMutex>

		return xNewQueue;
 800f802:	68fb      	ldr	r3, [r7, #12]
	}
 800f804:	4618      	mov	r0, r3
 800f806:	3718      	adds	r7, #24
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}

0800f80c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800f80c:	b590      	push	{r4, r7, lr}
 800f80e:	b087      	sub	sp, #28
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d10d      	bne.n	800f83a <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800f81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f822:	b672      	cpsid	i
 800f824:	f383 8811 	msr	BASEPRI, r3
 800f828:	f3bf 8f6f 	isb	sy
 800f82c:	f3bf 8f4f 	dsb	sy
 800f830:	b662      	cpsie	i
 800f832:	60fb      	str	r3, [r7, #12]
}
 800f834:	bf00      	nop
 800f836:	bf00      	nop
 800f838:	e7fd      	b.n	800f836 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	689c      	ldr	r4, [r3, #8]
 800f83e:	f001 fe1d 	bl	801147c <xTaskGetCurrentTaskHandle>
 800f842:	4603      	mov	r3, r0
 800f844:	429c      	cmp	r4, r3
 800f846:	d111      	bne.n	800f86c <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	68db      	ldr	r3, [r3, #12]
 800f84c:	1e5a      	subs	r2, r3, #1
 800f84e:	693b      	ldr	r3, [r7, #16]
 800f850:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	68db      	ldr	r3, [r3, #12]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d105      	bne.n	800f866 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800f85a:	2300      	movs	r3, #0
 800f85c:	2200      	movs	r2, #0
 800f85e:	2100      	movs	r1, #0
 800f860:	6938      	ldr	r0, [r7, #16]
 800f862:	f000 f8b9 	bl	800f9d8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800f866:	2301      	movs	r3, #1
 800f868:	617b      	str	r3, [r7, #20]
 800f86a:	e001      	b.n	800f870 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800f86c:	2300      	movs	r3, #0
 800f86e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800f870:	697b      	ldr	r3, [r7, #20]
	}
 800f872:	4618      	mov	r0, r3
 800f874:	371c      	adds	r7, #28
 800f876:	46bd      	mov	sp, r7
 800f878:	bd90      	pop	{r4, r7, pc}

0800f87a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800f87a:	b590      	push	{r4, r7, lr}
 800f87c:	b087      	sub	sp, #28
 800f87e:	af00      	add	r7, sp, #0
 800f880:	6078      	str	r0, [r7, #4]
 800f882:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f888:	693b      	ldr	r3, [r7, #16]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d10d      	bne.n	800f8aa <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800f88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f892:	b672      	cpsid	i
 800f894:	f383 8811 	msr	BASEPRI, r3
 800f898:	f3bf 8f6f 	isb	sy
 800f89c:	f3bf 8f4f 	dsb	sy
 800f8a0:	b662      	cpsie	i
 800f8a2:	60fb      	str	r3, [r7, #12]
}
 800f8a4:	bf00      	nop
 800f8a6:	bf00      	nop
 800f8a8:	e7fd      	b.n	800f8a6 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	689c      	ldr	r4, [r3, #8]
 800f8ae:	f001 fde5 	bl	801147c <xTaskGetCurrentTaskHandle>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	429c      	cmp	r4, r3
 800f8b6:	d107      	bne.n	800f8c8 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	68db      	ldr	r3, [r3, #12]
 800f8bc:	1c5a      	adds	r2, r3, #1
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800f8c2:	2301      	movs	r3, #1
 800f8c4:	617b      	str	r3, [r7, #20]
 800f8c6:	e00c      	b.n	800f8e2 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800f8c8:	6839      	ldr	r1, [r7, #0]
 800f8ca:	6938      	ldr	r0, [r7, #16]
 800f8cc:	f000 fbb2 	bl	8010034 <xQueueSemaphoreTake>
 800f8d0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800f8d2:	697b      	ldr	r3, [r7, #20]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d004      	beq.n	800f8e2 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f8d8:	693b      	ldr	r3, [r7, #16]
 800f8da:	68db      	ldr	r3, [r3, #12]
 800f8dc:	1c5a      	adds	r2, r3, #1
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800f8e2:	697b      	ldr	r3, [r7, #20]
	}
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	371c      	adds	r7, #28
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd90      	pop	{r4, r7, pc}

0800f8ec <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b08a      	sub	sp, #40	@ 0x28
 800f8f0:	af02      	add	r7, sp, #8
 800f8f2:	60f8      	str	r0, [r7, #12]
 800f8f4:	60b9      	str	r1, [r7, #8]
 800f8f6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d10d      	bne.n	800f91a <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800f8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f902:	b672      	cpsid	i
 800f904:	f383 8811 	msr	BASEPRI, r3
 800f908:	f3bf 8f6f 	isb	sy
 800f90c:	f3bf 8f4f 	dsb	sy
 800f910:	b662      	cpsie	i
 800f912:	61bb      	str	r3, [r7, #24]
}
 800f914:	bf00      	nop
 800f916:	bf00      	nop
 800f918:	e7fd      	b.n	800f916 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f91a:	68ba      	ldr	r2, [r7, #8]
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	429a      	cmp	r2, r3
 800f920:	d90d      	bls.n	800f93e <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800f922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f926:	b672      	cpsid	i
 800f928:	f383 8811 	msr	BASEPRI, r3
 800f92c:	f3bf 8f6f 	isb	sy
 800f930:	f3bf 8f4f 	dsb	sy
 800f934:	b662      	cpsie	i
 800f936:	617b      	str	r3, [r7, #20]
}
 800f938:	bf00      	nop
 800f93a:	bf00      	nop
 800f93c:	e7fd      	b.n	800f93a <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f93e:	2302      	movs	r3, #2
 800f940:	9300      	str	r3, [sp, #0]
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2200      	movs	r2, #0
 800f946:	2100      	movs	r1, #0
 800f948:	68f8      	ldr	r0, [r7, #12]
 800f94a:	f7ff fe25 	bl	800f598 <xQueueGenericCreateStatic>
 800f94e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800f950:	69fb      	ldr	r3, [r7, #28]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d002      	beq.n	800f95c <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f956:	69fb      	ldr	r3, [r7, #28]
 800f958:	68ba      	ldr	r2, [r7, #8]
 800f95a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f95c:	69fb      	ldr	r3, [r7, #28]
	}
 800f95e:	4618      	mov	r0, r3
 800f960:	3720      	adds	r7, #32
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}

0800f966 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800f966:	b580      	push	{r7, lr}
 800f968:	b086      	sub	sp, #24
 800f96a:	af00      	add	r7, sp, #0
 800f96c:	6078      	str	r0, [r7, #4]
 800f96e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d10d      	bne.n	800f992 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800f976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f97a:	b672      	cpsid	i
 800f97c:	f383 8811 	msr	BASEPRI, r3
 800f980:	f3bf 8f6f 	isb	sy
 800f984:	f3bf 8f4f 	dsb	sy
 800f988:	b662      	cpsie	i
 800f98a:	613b      	str	r3, [r7, #16]
}
 800f98c:	bf00      	nop
 800f98e:	bf00      	nop
 800f990:	e7fd      	b.n	800f98e <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f992:	683a      	ldr	r2, [r7, #0]
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	429a      	cmp	r2, r3
 800f998:	d90d      	bls.n	800f9b6 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800f99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f99e:	b672      	cpsid	i
 800f9a0:	f383 8811 	msr	BASEPRI, r3
 800f9a4:	f3bf 8f6f 	isb	sy
 800f9a8:	f3bf 8f4f 	dsb	sy
 800f9ac:	b662      	cpsie	i
 800f9ae:	60fb      	str	r3, [r7, #12]
}
 800f9b0:	bf00      	nop
 800f9b2:	bf00      	nop
 800f9b4:	e7fd      	b.n	800f9b2 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f9b6:	2202      	movs	r2, #2
 800f9b8:	2100      	movs	r1, #0
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f7ff fe73 	bl	800f6a6 <xQueueGenericCreate>
 800f9c0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d002      	beq.n	800f9ce <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	683a      	ldr	r2, [r7, #0]
 800f9cc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f9ce:	697b      	ldr	r3, [r7, #20]
	}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3718      	adds	r7, #24
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b08e      	sub	sp, #56	@ 0x38
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	60f8      	str	r0, [r7, #12]
 800f9e0:	60b9      	str	r1, [r7, #8]
 800f9e2:	607a      	str	r2, [r7, #4]
 800f9e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d10d      	bne.n	800fa10 <xQueueGenericSend+0x38>
	__asm volatile
 800f9f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9f8:	b672      	cpsid	i
 800f9fa:	f383 8811 	msr	BASEPRI, r3
 800f9fe:	f3bf 8f6f 	isb	sy
 800fa02:	f3bf 8f4f 	dsb	sy
 800fa06:	b662      	cpsie	i
 800fa08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800fa0a:	bf00      	nop
 800fa0c:	bf00      	nop
 800fa0e:	e7fd      	b.n	800fa0c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d103      	bne.n	800fa1e <xQueueGenericSend+0x46>
 800fa16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d101      	bne.n	800fa22 <xQueueGenericSend+0x4a>
 800fa1e:	2301      	movs	r3, #1
 800fa20:	e000      	b.n	800fa24 <xQueueGenericSend+0x4c>
 800fa22:	2300      	movs	r3, #0
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d10d      	bne.n	800fa44 <xQueueGenericSend+0x6c>
	__asm volatile
 800fa28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa2c:	b672      	cpsid	i
 800fa2e:	f383 8811 	msr	BASEPRI, r3
 800fa32:	f3bf 8f6f 	isb	sy
 800fa36:	f3bf 8f4f 	dsb	sy
 800fa3a:	b662      	cpsie	i
 800fa3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fa3e:	bf00      	nop
 800fa40:	bf00      	nop
 800fa42:	e7fd      	b.n	800fa40 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	2b02      	cmp	r3, #2
 800fa48:	d103      	bne.n	800fa52 <xQueueGenericSend+0x7a>
 800fa4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa4e:	2b01      	cmp	r3, #1
 800fa50:	d101      	bne.n	800fa56 <xQueueGenericSend+0x7e>
 800fa52:	2301      	movs	r3, #1
 800fa54:	e000      	b.n	800fa58 <xQueueGenericSend+0x80>
 800fa56:	2300      	movs	r3, #0
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d10d      	bne.n	800fa78 <xQueueGenericSend+0xa0>
	__asm volatile
 800fa5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa60:	b672      	cpsid	i
 800fa62:	f383 8811 	msr	BASEPRI, r3
 800fa66:	f3bf 8f6f 	isb	sy
 800fa6a:	f3bf 8f4f 	dsb	sy
 800fa6e:	b662      	cpsie	i
 800fa70:	623b      	str	r3, [r7, #32]
}
 800fa72:	bf00      	nop
 800fa74:	bf00      	nop
 800fa76:	e7fd      	b.n	800fa74 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fa78:	f001 fd10 	bl	801149c <xTaskGetSchedulerState>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d102      	bne.n	800fa88 <xQueueGenericSend+0xb0>
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d101      	bne.n	800fa8c <xQueueGenericSend+0xb4>
 800fa88:	2301      	movs	r3, #1
 800fa8a:	e000      	b.n	800fa8e <xQueueGenericSend+0xb6>
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d10d      	bne.n	800faae <xQueueGenericSend+0xd6>
	__asm volatile
 800fa92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa96:	b672      	cpsid	i
 800fa98:	f383 8811 	msr	BASEPRI, r3
 800fa9c:	f3bf 8f6f 	isb	sy
 800faa0:	f3bf 8f4f 	dsb	sy
 800faa4:	b662      	cpsie	i
 800faa6:	61fb      	str	r3, [r7, #28]
}
 800faa8:	bf00      	nop
 800faaa:	bf00      	nop
 800faac:	e7fd      	b.n	800faaa <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800faae:	f002 fc6d 	bl	801238c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fab4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fab8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800faba:	429a      	cmp	r2, r3
 800fabc:	d302      	bcc.n	800fac4 <xQueueGenericSend+0xec>
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	2b02      	cmp	r3, #2
 800fac2:	d129      	bne.n	800fb18 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fac4:	683a      	ldr	r2, [r7, #0]
 800fac6:	68b9      	ldr	r1, [r7, #8]
 800fac8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800faca:	f000 fc91 	bl	80103f0 <prvCopyDataToQueue>
 800face:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d010      	beq.n	800fafa <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fada:	3324      	adds	r3, #36	@ 0x24
 800fadc:	4618      	mov	r0, r3
 800fade:	f001 faff 	bl	80110e0 <xTaskRemoveFromEventList>
 800fae2:	4603      	mov	r3, r0
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d013      	beq.n	800fb10 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fae8:	4b3f      	ldr	r3, [pc, #252]	@ (800fbe8 <xQueueGenericSend+0x210>)
 800faea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800faee:	601a      	str	r2, [r3, #0]
 800faf0:	f3bf 8f4f 	dsb	sy
 800faf4:	f3bf 8f6f 	isb	sy
 800faf8:	e00a      	b.n	800fb10 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d007      	beq.n	800fb10 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fb00:	4b39      	ldr	r3, [pc, #228]	@ (800fbe8 <xQueueGenericSend+0x210>)
 800fb02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb06:	601a      	str	r2, [r3, #0]
 800fb08:	f3bf 8f4f 	dsb	sy
 800fb0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fb10:	f002 fc72 	bl	80123f8 <vPortExitCritical>
				return pdPASS;
 800fb14:	2301      	movs	r3, #1
 800fb16:	e063      	b.n	800fbe0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d103      	bne.n	800fb26 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fb1e:	f002 fc6b 	bl	80123f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fb22:	2300      	movs	r3, #0
 800fb24:	e05c      	b.n	800fbe0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fb26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d106      	bne.n	800fb3a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb2c:	f107 0314 	add.w	r3, r7, #20
 800fb30:	4618      	mov	r0, r3
 800fb32:	f001 fb3b 	bl	80111ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fb36:	2301      	movs	r3, #1
 800fb38:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fb3a:	f002 fc5d 	bl	80123f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fb3e:	f001 f861 	bl	8010c04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fb42:	f002 fc23 	bl	801238c <vPortEnterCritical>
 800fb46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fb4c:	b25b      	sxtb	r3, r3
 800fb4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb52:	d103      	bne.n	800fb5c <xQueueGenericSend+0x184>
 800fb54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb56:	2200      	movs	r2, #0
 800fb58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fb5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fb62:	b25b      	sxtb	r3, r3
 800fb64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb68:	d103      	bne.n	800fb72 <xQueueGenericSend+0x19a>
 800fb6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fb72:	f002 fc41 	bl	80123f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fb76:	1d3a      	adds	r2, r7, #4
 800fb78:	f107 0314 	add.w	r3, r7, #20
 800fb7c:	4611      	mov	r1, r2
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f001 fb2a 	bl	80111d8 <xTaskCheckForTimeOut>
 800fb84:	4603      	mov	r3, r0
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d124      	bne.n	800fbd4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fb8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fb8c:	f000 fd28 	bl	80105e0 <prvIsQueueFull>
 800fb90:	4603      	mov	r3, r0
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d018      	beq.n	800fbc8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fb96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb98:	3310      	adds	r3, #16
 800fb9a:	687a      	ldr	r2, [r7, #4]
 800fb9c:	4611      	mov	r1, r2
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f001 fa48 	bl	8011034 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fba4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fba6:	f000 fcb3 	bl	8010510 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fbaa:	f001 f839 	bl	8010c20 <xTaskResumeAll>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	f47f af7c 	bne.w	800faae <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800fbb6:	4b0c      	ldr	r3, [pc, #48]	@ (800fbe8 <xQueueGenericSend+0x210>)
 800fbb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fbbc:	601a      	str	r2, [r3, #0]
 800fbbe:	f3bf 8f4f 	dsb	sy
 800fbc2:	f3bf 8f6f 	isb	sy
 800fbc6:	e772      	b.n	800faae <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fbc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fbca:	f000 fca1 	bl	8010510 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fbce:	f001 f827 	bl	8010c20 <xTaskResumeAll>
 800fbd2:	e76c      	b.n	800faae <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fbd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fbd6:	f000 fc9b 	bl	8010510 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fbda:	f001 f821 	bl	8010c20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fbde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	3738      	adds	r7, #56	@ 0x38
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}
 800fbe8:	e000ed04 	.word	0xe000ed04

0800fbec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b08e      	sub	sp, #56	@ 0x38
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	60f8      	str	r0, [r7, #12]
 800fbf4:	60b9      	str	r1, [r7, #8]
 800fbf6:	607a      	str	r2, [r7, #4]
 800fbf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d10d      	bne.n	800fc20 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800fc04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc08:	b672      	cpsid	i
 800fc0a:	f383 8811 	msr	BASEPRI, r3
 800fc0e:	f3bf 8f6f 	isb	sy
 800fc12:	f3bf 8f4f 	dsb	sy
 800fc16:	b662      	cpsie	i
 800fc18:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fc1a:	bf00      	nop
 800fc1c:	bf00      	nop
 800fc1e:	e7fd      	b.n	800fc1c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d103      	bne.n	800fc2e <xQueueGenericSendFromISR+0x42>
 800fc26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d101      	bne.n	800fc32 <xQueueGenericSendFromISR+0x46>
 800fc2e:	2301      	movs	r3, #1
 800fc30:	e000      	b.n	800fc34 <xQueueGenericSendFromISR+0x48>
 800fc32:	2300      	movs	r3, #0
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d10d      	bne.n	800fc54 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800fc38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc3c:	b672      	cpsid	i
 800fc3e:	f383 8811 	msr	BASEPRI, r3
 800fc42:	f3bf 8f6f 	isb	sy
 800fc46:	f3bf 8f4f 	dsb	sy
 800fc4a:	b662      	cpsie	i
 800fc4c:	623b      	str	r3, [r7, #32]
}
 800fc4e:	bf00      	nop
 800fc50:	bf00      	nop
 800fc52:	e7fd      	b.n	800fc50 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	2b02      	cmp	r3, #2
 800fc58:	d103      	bne.n	800fc62 <xQueueGenericSendFromISR+0x76>
 800fc5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc5e:	2b01      	cmp	r3, #1
 800fc60:	d101      	bne.n	800fc66 <xQueueGenericSendFromISR+0x7a>
 800fc62:	2301      	movs	r3, #1
 800fc64:	e000      	b.n	800fc68 <xQueueGenericSendFromISR+0x7c>
 800fc66:	2300      	movs	r3, #0
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d10d      	bne.n	800fc88 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800fc6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc70:	b672      	cpsid	i
 800fc72:	f383 8811 	msr	BASEPRI, r3
 800fc76:	f3bf 8f6f 	isb	sy
 800fc7a:	f3bf 8f4f 	dsb	sy
 800fc7e:	b662      	cpsie	i
 800fc80:	61fb      	str	r3, [r7, #28]
}
 800fc82:	bf00      	nop
 800fc84:	bf00      	nop
 800fc86:	e7fd      	b.n	800fc84 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fc88:	f002 fc68 	bl	801255c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fc8c:	f3ef 8211 	mrs	r2, BASEPRI
 800fc90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc94:	b672      	cpsid	i
 800fc96:	f383 8811 	msr	BASEPRI, r3
 800fc9a:	f3bf 8f6f 	isb	sy
 800fc9e:	f3bf 8f4f 	dsb	sy
 800fca2:	b662      	cpsie	i
 800fca4:	61ba      	str	r2, [r7, #24]
 800fca6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fca8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fcaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fcac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fcb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d302      	bcc.n	800fcbe <xQueueGenericSendFromISR+0xd2>
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	2b02      	cmp	r3, #2
 800fcbc:	d12c      	bne.n	800fd18 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fcbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fcc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fcc8:	683a      	ldr	r2, [r7, #0]
 800fcca:	68b9      	ldr	r1, [r7, #8]
 800fccc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fcce:	f000 fb8f 	bl	80103f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fcd2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800fcd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcda:	d112      	bne.n	800fd02 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fcdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d016      	beq.n	800fd12 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fce6:	3324      	adds	r3, #36	@ 0x24
 800fce8:	4618      	mov	r0, r3
 800fcea:	f001 f9f9 	bl	80110e0 <xTaskRemoveFromEventList>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d00e      	beq.n	800fd12 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d00b      	beq.n	800fd12 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	2201      	movs	r2, #1
 800fcfe:	601a      	str	r2, [r3, #0]
 800fd00:	e007      	b.n	800fd12 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fd02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800fd06:	3301      	adds	r3, #1
 800fd08:	b2db      	uxtb	r3, r3
 800fd0a:	b25a      	sxtb	r2, r3
 800fd0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fd12:	2301      	movs	r3, #1
 800fd14:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800fd16:	e001      	b.n	800fd1c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd1e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fd20:	693b      	ldr	r3, [r7, #16]
 800fd22:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fd26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fd28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3738      	adds	r7, #56	@ 0x38
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}

0800fd32 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fd32:	b580      	push	{r7, lr}
 800fd34:	b08e      	sub	sp, #56	@ 0x38
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	6078      	str	r0, [r7, #4]
 800fd3a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fd40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d10d      	bne.n	800fd62 <xQueueGiveFromISR+0x30>
	__asm volatile
 800fd46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd4a:	b672      	cpsid	i
 800fd4c:	f383 8811 	msr	BASEPRI, r3
 800fd50:	f3bf 8f6f 	isb	sy
 800fd54:	f3bf 8f4f 	dsb	sy
 800fd58:	b662      	cpsie	i
 800fd5a:	623b      	str	r3, [r7, #32]
}
 800fd5c:	bf00      	nop
 800fd5e:	bf00      	nop
 800fd60:	e7fd      	b.n	800fd5e <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fd62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d00d      	beq.n	800fd86 <xQueueGiveFromISR+0x54>
	__asm volatile
 800fd6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd6e:	b672      	cpsid	i
 800fd70:	f383 8811 	msr	BASEPRI, r3
 800fd74:	f3bf 8f6f 	isb	sy
 800fd78:	f3bf 8f4f 	dsb	sy
 800fd7c:	b662      	cpsie	i
 800fd7e:	61fb      	str	r3, [r7, #28]
}
 800fd80:	bf00      	nop
 800fd82:	bf00      	nop
 800fd84:	e7fd      	b.n	800fd82 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fd86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d103      	bne.n	800fd96 <xQueueGiveFromISR+0x64>
 800fd8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd90:	689b      	ldr	r3, [r3, #8]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d101      	bne.n	800fd9a <xQueueGiveFromISR+0x68>
 800fd96:	2301      	movs	r3, #1
 800fd98:	e000      	b.n	800fd9c <xQueueGiveFromISR+0x6a>
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d10d      	bne.n	800fdbc <xQueueGiveFromISR+0x8a>
	__asm volatile
 800fda0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fda4:	b672      	cpsid	i
 800fda6:	f383 8811 	msr	BASEPRI, r3
 800fdaa:	f3bf 8f6f 	isb	sy
 800fdae:	f3bf 8f4f 	dsb	sy
 800fdb2:	b662      	cpsie	i
 800fdb4:	61bb      	str	r3, [r7, #24]
}
 800fdb6:	bf00      	nop
 800fdb8:	bf00      	nop
 800fdba:	e7fd      	b.n	800fdb8 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fdbc:	f002 fbce 	bl	801255c <vPortValidateInterruptPriority>
	__asm volatile
 800fdc0:	f3ef 8211 	mrs	r2, BASEPRI
 800fdc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdc8:	b672      	cpsid	i
 800fdca:	f383 8811 	msr	BASEPRI, r3
 800fdce:	f3bf 8f6f 	isb	sy
 800fdd2:	f3bf 8f4f 	dsb	sy
 800fdd6:	b662      	cpsie	i
 800fdd8:	617a      	str	r2, [r7, #20]
 800fdda:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800fddc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fdde:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fde0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fde2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fde4:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fde6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fde8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fdec:	429a      	cmp	r2, r3
 800fdee:	d22b      	bcs.n	800fe48 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fdf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fdf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fdfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdfc:	1c5a      	adds	r2, r3, #1
 800fdfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe00:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fe02:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fe06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe0a:	d112      	bne.n	800fe32 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d016      	beq.n	800fe42 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe16:	3324      	adds	r3, #36	@ 0x24
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f001 f961 	bl	80110e0 <xTaskRemoveFromEventList>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d00e      	beq.n	800fe42 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d00b      	beq.n	800fe42 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	2201      	movs	r2, #1
 800fe2e:	601a      	str	r2, [r3, #0]
 800fe30:	e007      	b.n	800fe42 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fe32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fe36:	3301      	adds	r3, #1
 800fe38:	b2db      	uxtb	r3, r3
 800fe3a:	b25a      	sxtb	r2, r3
 800fe3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fe42:	2301      	movs	r3, #1
 800fe44:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe46:	e001      	b.n	800fe4c <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fe48:	2300      	movs	r3, #0
 800fe4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe4e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	f383 8811 	msr	BASEPRI, r3
}
 800fe56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fe58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3738      	adds	r7, #56	@ 0x38
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
	...

0800fe64 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b08c      	sub	sp, #48	@ 0x30
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	60f8      	str	r0, [r7, #12]
 800fe6c:	60b9      	str	r1, [r7, #8]
 800fe6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fe70:	2300      	movs	r3, #0
 800fe72:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fe78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d10d      	bne.n	800fe9a <xQueueReceive+0x36>
	__asm volatile
 800fe7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe82:	b672      	cpsid	i
 800fe84:	f383 8811 	msr	BASEPRI, r3
 800fe88:	f3bf 8f6f 	isb	sy
 800fe8c:	f3bf 8f4f 	dsb	sy
 800fe90:	b662      	cpsie	i
 800fe92:	623b      	str	r3, [r7, #32]
}
 800fe94:	bf00      	nop
 800fe96:	bf00      	nop
 800fe98:	e7fd      	b.n	800fe96 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d103      	bne.n	800fea8 <xQueueReceive+0x44>
 800fea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d101      	bne.n	800feac <xQueueReceive+0x48>
 800fea8:	2301      	movs	r3, #1
 800feaa:	e000      	b.n	800feae <xQueueReceive+0x4a>
 800feac:	2300      	movs	r3, #0
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d10d      	bne.n	800fece <xQueueReceive+0x6a>
	__asm volatile
 800feb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feb6:	b672      	cpsid	i
 800feb8:	f383 8811 	msr	BASEPRI, r3
 800febc:	f3bf 8f6f 	isb	sy
 800fec0:	f3bf 8f4f 	dsb	sy
 800fec4:	b662      	cpsie	i
 800fec6:	61fb      	str	r3, [r7, #28]
}
 800fec8:	bf00      	nop
 800feca:	bf00      	nop
 800fecc:	e7fd      	b.n	800feca <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fece:	f001 fae5 	bl	801149c <xTaskGetSchedulerState>
 800fed2:	4603      	mov	r3, r0
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d102      	bne.n	800fede <xQueueReceive+0x7a>
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d101      	bne.n	800fee2 <xQueueReceive+0x7e>
 800fede:	2301      	movs	r3, #1
 800fee0:	e000      	b.n	800fee4 <xQueueReceive+0x80>
 800fee2:	2300      	movs	r3, #0
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d10d      	bne.n	800ff04 <xQueueReceive+0xa0>
	__asm volatile
 800fee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feec:	b672      	cpsid	i
 800feee:	f383 8811 	msr	BASEPRI, r3
 800fef2:	f3bf 8f6f 	isb	sy
 800fef6:	f3bf 8f4f 	dsb	sy
 800fefa:	b662      	cpsie	i
 800fefc:	61bb      	str	r3, [r7, #24]
}
 800fefe:	bf00      	nop
 800ff00:	bf00      	nop
 800ff02:	e7fd      	b.n	800ff00 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ff04:	f002 fa42 	bl	801238c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ff08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ff0c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ff0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d01f      	beq.n	800ff54 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ff14:	68b9      	ldr	r1, [r7, #8]
 800ff16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ff18:	f000 fad4 	bl	80104c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ff1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff1e:	1e5a      	subs	r2, r3, #1
 800ff20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff22:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff26:	691b      	ldr	r3, [r3, #16]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d00f      	beq.n	800ff4c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff2e:	3310      	adds	r3, #16
 800ff30:	4618      	mov	r0, r3
 800ff32:	f001 f8d5 	bl	80110e0 <xTaskRemoveFromEventList>
 800ff36:	4603      	mov	r3, r0
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d007      	beq.n	800ff4c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ff3c:	4b3c      	ldr	r3, [pc, #240]	@ (8010030 <xQueueReceive+0x1cc>)
 800ff3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff42:	601a      	str	r2, [r3, #0]
 800ff44:	f3bf 8f4f 	dsb	sy
 800ff48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ff4c:	f002 fa54 	bl	80123f8 <vPortExitCritical>
				return pdPASS;
 800ff50:	2301      	movs	r3, #1
 800ff52:	e069      	b.n	8010028 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d103      	bne.n	800ff62 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ff5a:	f002 fa4d 	bl	80123f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ff5e:	2300      	movs	r3, #0
 800ff60:	e062      	b.n	8010028 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ff62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d106      	bne.n	800ff76 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ff68:	f107 0310 	add.w	r3, r7, #16
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f001 f91d 	bl	80111ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ff72:	2301      	movs	r3, #1
 800ff74:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ff76:	f002 fa3f 	bl	80123f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ff7a:	f000 fe43 	bl	8010c04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ff7e:	f002 fa05 	bl	801238c <vPortEnterCritical>
 800ff82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ff88:	b25b      	sxtb	r3, r3
 800ff8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff8e:	d103      	bne.n	800ff98 <xQueueReceive+0x134>
 800ff90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff92:	2200      	movs	r2, #0
 800ff94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ff98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ff9e:	b25b      	sxtb	r3, r3
 800ffa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffa4:	d103      	bne.n	800ffae <xQueueReceive+0x14a>
 800ffa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ffae:	f002 fa23 	bl	80123f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ffb2:	1d3a      	adds	r2, r7, #4
 800ffb4:	f107 0310 	add.w	r3, r7, #16
 800ffb8:	4611      	mov	r1, r2
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f001 f90c 	bl	80111d8 <xTaskCheckForTimeOut>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d123      	bne.n	801000e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ffc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ffc8:	f000 faf4 	bl	80105b4 <prvIsQueueEmpty>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d017      	beq.n	8010002 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ffd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffd4:	3324      	adds	r3, #36	@ 0x24
 800ffd6:	687a      	ldr	r2, [r7, #4]
 800ffd8:	4611      	mov	r1, r2
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f001 f82a 	bl	8011034 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ffe0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ffe2:	f000 fa95 	bl	8010510 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ffe6:	f000 fe1b 	bl	8010c20 <xTaskResumeAll>
 800ffea:	4603      	mov	r3, r0
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d189      	bne.n	800ff04 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800fff0:	4b0f      	ldr	r3, [pc, #60]	@ (8010030 <xQueueReceive+0x1cc>)
 800fff2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fff6:	601a      	str	r2, [r3, #0]
 800fff8:	f3bf 8f4f 	dsb	sy
 800fffc:	f3bf 8f6f 	isb	sy
 8010000:	e780      	b.n	800ff04 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010002:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010004:	f000 fa84 	bl	8010510 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010008:	f000 fe0a 	bl	8010c20 <xTaskResumeAll>
 801000c:	e77a      	b.n	800ff04 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801000e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010010:	f000 fa7e 	bl	8010510 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010014:	f000 fe04 	bl	8010c20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010018:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801001a:	f000 facb 	bl	80105b4 <prvIsQueueEmpty>
 801001e:	4603      	mov	r3, r0
 8010020:	2b00      	cmp	r3, #0
 8010022:	f43f af6f 	beq.w	800ff04 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010026:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010028:	4618      	mov	r0, r3
 801002a:	3730      	adds	r7, #48	@ 0x30
 801002c:	46bd      	mov	sp, r7
 801002e:	bd80      	pop	{r7, pc}
 8010030:	e000ed04 	.word	0xe000ed04

08010034 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b08e      	sub	sp, #56	@ 0x38
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]
 801003c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801003e:	2300      	movs	r3, #0
 8010040:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010046:	2300      	movs	r3, #0
 8010048:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801004a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801004c:	2b00      	cmp	r3, #0
 801004e:	d10d      	bne.n	801006c <xQueueSemaphoreTake+0x38>
	__asm volatile
 8010050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010054:	b672      	cpsid	i
 8010056:	f383 8811 	msr	BASEPRI, r3
 801005a:	f3bf 8f6f 	isb	sy
 801005e:	f3bf 8f4f 	dsb	sy
 8010062:	b662      	cpsie	i
 8010064:	623b      	str	r3, [r7, #32]
}
 8010066:	bf00      	nop
 8010068:	bf00      	nop
 801006a:	e7fd      	b.n	8010068 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801006c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801006e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010070:	2b00      	cmp	r3, #0
 8010072:	d00d      	beq.n	8010090 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8010074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010078:	b672      	cpsid	i
 801007a:	f383 8811 	msr	BASEPRI, r3
 801007e:	f3bf 8f6f 	isb	sy
 8010082:	f3bf 8f4f 	dsb	sy
 8010086:	b662      	cpsie	i
 8010088:	61fb      	str	r3, [r7, #28]
}
 801008a:	bf00      	nop
 801008c:	bf00      	nop
 801008e:	e7fd      	b.n	801008c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010090:	f001 fa04 	bl	801149c <xTaskGetSchedulerState>
 8010094:	4603      	mov	r3, r0
 8010096:	2b00      	cmp	r3, #0
 8010098:	d102      	bne.n	80100a0 <xQueueSemaphoreTake+0x6c>
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d101      	bne.n	80100a4 <xQueueSemaphoreTake+0x70>
 80100a0:	2301      	movs	r3, #1
 80100a2:	e000      	b.n	80100a6 <xQueueSemaphoreTake+0x72>
 80100a4:	2300      	movs	r3, #0
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d10d      	bne.n	80100c6 <xQueueSemaphoreTake+0x92>
	__asm volatile
 80100aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100ae:	b672      	cpsid	i
 80100b0:	f383 8811 	msr	BASEPRI, r3
 80100b4:	f3bf 8f6f 	isb	sy
 80100b8:	f3bf 8f4f 	dsb	sy
 80100bc:	b662      	cpsie	i
 80100be:	61bb      	str	r3, [r7, #24]
}
 80100c0:	bf00      	nop
 80100c2:	bf00      	nop
 80100c4:	e7fd      	b.n	80100c2 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80100c6:	f002 f961 	bl	801238c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80100ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100ce:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80100d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d024      	beq.n	8010120 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80100d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100d8:	1e5a      	subs	r2, r3, #1
 80100da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100dc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80100de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d104      	bne.n	80100f0 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80100e6:	f001 fb5b 	bl	80117a0 <pvTaskIncrementMutexHeldCount>
 80100ea:	4602      	mov	r2, r0
 80100ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100ee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80100f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100f2:	691b      	ldr	r3, [r3, #16]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d00f      	beq.n	8010118 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80100f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100fa:	3310      	adds	r3, #16
 80100fc:	4618      	mov	r0, r3
 80100fe:	f000 ffef 	bl	80110e0 <xTaskRemoveFromEventList>
 8010102:	4603      	mov	r3, r0
 8010104:	2b00      	cmp	r3, #0
 8010106:	d007      	beq.n	8010118 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010108:	4b55      	ldr	r3, [pc, #340]	@ (8010260 <xQueueSemaphoreTake+0x22c>)
 801010a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801010e:	601a      	str	r2, [r3, #0]
 8010110:	f3bf 8f4f 	dsb	sy
 8010114:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010118:	f002 f96e 	bl	80123f8 <vPortExitCritical>
				return pdPASS;
 801011c:	2301      	movs	r3, #1
 801011e:	e09a      	b.n	8010256 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010120:	683b      	ldr	r3, [r7, #0]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d114      	bne.n	8010150 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010128:	2b00      	cmp	r3, #0
 801012a:	d00d      	beq.n	8010148 <xQueueSemaphoreTake+0x114>
	__asm volatile
 801012c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010130:	b672      	cpsid	i
 8010132:	f383 8811 	msr	BASEPRI, r3
 8010136:	f3bf 8f6f 	isb	sy
 801013a:	f3bf 8f4f 	dsb	sy
 801013e:	b662      	cpsie	i
 8010140:	617b      	str	r3, [r7, #20]
}
 8010142:	bf00      	nop
 8010144:	bf00      	nop
 8010146:	e7fd      	b.n	8010144 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010148:	f002 f956 	bl	80123f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801014c:	2300      	movs	r3, #0
 801014e:	e082      	b.n	8010256 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010152:	2b00      	cmp	r3, #0
 8010154:	d106      	bne.n	8010164 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010156:	f107 030c 	add.w	r3, r7, #12
 801015a:	4618      	mov	r0, r3
 801015c:	f001 f826 	bl	80111ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010160:	2301      	movs	r3, #1
 8010162:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010164:	f002 f948 	bl	80123f8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010168:	f000 fd4c 	bl	8010c04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801016c:	f002 f90e 	bl	801238c <vPortEnterCritical>
 8010170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010172:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010176:	b25b      	sxtb	r3, r3
 8010178:	f1b3 3fff 	cmp.w	r3, #4294967295
 801017c:	d103      	bne.n	8010186 <xQueueSemaphoreTake+0x152>
 801017e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010180:	2200      	movs	r2, #0
 8010182:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010188:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801018c:	b25b      	sxtb	r3, r3
 801018e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010192:	d103      	bne.n	801019c <xQueueSemaphoreTake+0x168>
 8010194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010196:	2200      	movs	r2, #0
 8010198:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801019c:	f002 f92c 	bl	80123f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80101a0:	463a      	mov	r2, r7
 80101a2:	f107 030c 	add.w	r3, r7, #12
 80101a6:	4611      	mov	r1, r2
 80101a8:	4618      	mov	r0, r3
 80101aa:	f001 f815 	bl	80111d8 <xTaskCheckForTimeOut>
 80101ae:	4603      	mov	r3, r0
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d132      	bne.n	801021a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80101b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80101b6:	f000 f9fd 	bl	80105b4 <prvIsQueueEmpty>
 80101ba:	4603      	mov	r3, r0
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d026      	beq.n	801020e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80101c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d109      	bne.n	80101dc <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80101c8:	f002 f8e0 	bl	801238c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80101cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101ce:	689b      	ldr	r3, [r3, #8]
 80101d0:	4618      	mov	r0, r3
 80101d2:	f001 f981 	bl	80114d8 <xTaskPriorityInherit>
 80101d6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80101d8:	f002 f90e 	bl	80123f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80101dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101de:	3324      	adds	r3, #36	@ 0x24
 80101e0:	683a      	ldr	r2, [r7, #0]
 80101e2:	4611      	mov	r1, r2
 80101e4:	4618      	mov	r0, r3
 80101e6:	f000 ff25 	bl	8011034 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80101ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80101ec:	f000 f990 	bl	8010510 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80101f0:	f000 fd16 	bl	8010c20 <xTaskResumeAll>
 80101f4:	4603      	mov	r3, r0
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	f47f af65 	bne.w	80100c6 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80101fc:	4b18      	ldr	r3, [pc, #96]	@ (8010260 <xQueueSemaphoreTake+0x22c>)
 80101fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010202:	601a      	str	r2, [r3, #0]
 8010204:	f3bf 8f4f 	dsb	sy
 8010208:	f3bf 8f6f 	isb	sy
 801020c:	e75b      	b.n	80100c6 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801020e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010210:	f000 f97e 	bl	8010510 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010214:	f000 fd04 	bl	8010c20 <xTaskResumeAll>
 8010218:	e755      	b.n	80100c6 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801021a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801021c:	f000 f978 	bl	8010510 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010220:	f000 fcfe 	bl	8010c20 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010224:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010226:	f000 f9c5 	bl	80105b4 <prvIsQueueEmpty>
 801022a:	4603      	mov	r3, r0
 801022c:	2b00      	cmp	r3, #0
 801022e:	f43f af4a 	beq.w	80100c6 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010234:	2b00      	cmp	r3, #0
 8010236:	d00d      	beq.n	8010254 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8010238:	f002 f8a8 	bl	801238c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801023c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801023e:	f000 f8bf 	bl	80103c0 <prvGetDisinheritPriorityAfterTimeout>
 8010242:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010246:	689b      	ldr	r3, [r3, #8]
 8010248:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801024a:	4618      	mov	r0, r3
 801024c:	f001 fa20 	bl	8011690 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010250:	f002 f8d2 	bl	80123f8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010254:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010256:	4618      	mov	r0, r3
 8010258:	3738      	adds	r7, #56	@ 0x38
 801025a:	46bd      	mov	sp, r7
 801025c:	bd80      	pop	{r7, pc}
 801025e:	bf00      	nop
 8010260:	e000ed04 	.word	0xe000ed04

08010264 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b08e      	sub	sp, #56	@ 0x38
 8010268:	af00      	add	r7, sp, #0
 801026a:	60f8      	str	r0, [r7, #12]
 801026c:	60b9      	str	r1, [r7, #8]
 801026e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010276:	2b00      	cmp	r3, #0
 8010278:	d10d      	bne.n	8010296 <xQueueReceiveFromISR+0x32>
	__asm volatile
 801027a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801027e:	b672      	cpsid	i
 8010280:	f383 8811 	msr	BASEPRI, r3
 8010284:	f3bf 8f6f 	isb	sy
 8010288:	f3bf 8f4f 	dsb	sy
 801028c:	b662      	cpsie	i
 801028e:	623b      	str	r3, [r7, #32]
}
 8010290:	bf00      	nop
 8010292:	bf00      	nop
 8010294:	e7fd      	b.n	8010292 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d103      	bne.n	80102a4 <xQueueReceiveFromISR+0x40>
 801029c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801029e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d101      	bne.n	80102a8 <xQueueReceiveFromISR+0x44>
 80102a4:	2301      	movs	r3, #1
 80102a6:	e000      	b.n	80102aa <xQueueReceiveFromISR+0x46>
 80102a8:	2300      	movs	r3, #0
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d10d      	bne.n	80102ca <xQueueReceiveFromISR+0x66>
	__asm volatile
 80102ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102b2:	b672      	cpsid	i
 80102b4:	f383 8811 	msr	BASEPRI, r3
 80102b8:	f3bf 8f6f 	isb	sy
 80102bc:	f3bf 8f4f 	dsb	sy
 80102c0:	b662      	cpsie	i
 80102c2:	61fb      	str	r3, [r7, #28]
}
 80102c4:	bf00      	nop
 80102c6:	bf00      	nop
 80102c8:	e7fd      	b.n	80102c6 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80102ca:	f002 f947 	bl	801255c <vPortValidateInterruptPriority>
	__asm volatile
 80102ce:	f3ef 8211 	mrs	r2, BASEPRI
 80102d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102d6:	b672      	cpsid	i
 80102d8:	f383 8811 	msr	BASEPRI, r3
 80102dc:	f3bf 8f6f 	isb	sy
 80102e0:	f3bf 8f4f 	dsb	sy
 80102e4:	b662      	cpsie	i
 80102e6:	61ba      	str	r2, [r7, #24]
 80102e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80102ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80102ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80102ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102f2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80102f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d02f      	beq.n	801035a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80102fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010300:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010304:	68b9      	ldr	r1, [r7, #8]
 8010306:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010308:	f000 f8dc 	bl	80104c4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801030c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801030e:	1e5a      	subs	r2, r3, #1
 8010310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010312:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010314:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010318:	f1b3 3fff 	cmp.w	r3, #4294967295
 801031c:	d112      	bne.n	8010344 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801031e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010320:	691b      	ldr	r3, [r3, #16]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d016      	beq.n	8010354 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010328:	3310      	adds	r3, #16
 801032a:	4618      	mov	r0, r3
 801032c:	f000 fed8 	bl	80110e0 <xTaskRemoveFromEventList>
 8010330:	4603      	mov	r3, r0
 8010332:	2b00      	cmp	r3, #0
 8010334:	d00e      	beq.n	8010354 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d00b      	beq.n	8010354 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2201      	movs	r2, #1
 8010340:	601a      	str	r2, [r3, #0]
 8010342:	e007      	b.n	8010354 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010344:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010348:	3301      	adds	r3, #1
 801034a:	b2db      	uxtb	r3, r3
 801034c:	b25a      	sxtb	r2, r3
 801034e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8010354:	2301      	movs	r3, #1
 8010356:	637b      	str	r3, [r7, #52]	@ 0x34
 8010358:	e001      	b.n	801035e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 801035a:	2300      	movs	r3, #0
 801035c:	637b      	str	r3, [r7, #52]	@ 0x34
 801035e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010360:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010362:	693b      	ldr	r3, [r7, #16]
 8010364:	f383 8811 	msr	BASEPRI, r3
}
 8010368:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801036a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801036c:	4618      	mov	r0, r3
 801036e:	3738      	adds	r7, #56	@ 0x38
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}

08010374 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b084      	sub	sp, #16
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d10d      	bne.n	80103a2 <vQueueDelete+0x2e>
	__asm volatile
 8010386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801038a:	b672      	cpsid	i
 801038c:	f383 8811 	msr	BASEPRI, r3
 8010390:	f3bf 8f6f 	isb	sy
 8010394:	f3bf 8f4f 	dsb	sy
 8010398:	b662      	cpsie	i
 801039a:	60bb      	str	r3, [r7, #8]
}
 801039c:	bf00      	nop
 801039e:	bf00      	nop
 80103a0:	e7fd      	b.n	801039e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80103a2:	68f8      	ldr	r0, [r7, #12]
 80103a4:	f000 f95e 	bl	8010664 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d102      	bne.n	80103b8 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 80103b2:	68f8      	ldr	r0, [r7, #12]
 80103b4:	f002 f9e6 	bl	8012784 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80103b8:	bf00      	nop
 80103ba:	3710      	adds	r7, #16
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80103c0:	b480      	push	{r7}
 80103c2:	b085      	sub	sp, #20
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d006      	beq.n	80103de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80103da:	60fb      	str	r3, [r7, #12]
 80103dc:	e001      	b.n	80103e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80103de:	2300      	movs	r3, #0
 80103e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80103e2:	68fb      	ldr	r3, [r7, #12]
	}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3714      	adds	r7, #20
 80103e8:	46bd      	mov	sp, r7
 80103ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ee:	4770      	bx	lr

080103f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b086      	sub	sp, #24
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	60f8      	str	r0, [r7, #12]
 80103f8:	60b9      	str	r1, [r7, #8]
 80103fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80103fc:	2300      	movs	r3, #0
 80103fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010404:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801040a:	2b00      	cmp	r3, #0
 801040c:	d10d      	bne.n	801042a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d14d      	bne.n	80104b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	689b      	ldr	r3, [r3, #8]
 801041a:	4618      	mov	r0, r3
 801041c:	f001 f8c4 	bl	80115a8 <xTaskPriorityDisinherit>
 8010420:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	2200      	movs	r2, #0
 8010426:	609a      	str	r2, [r3, #8]
 8010428:	e043      	b.n	80104b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d119      	bne.n	8010464 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	6858      	ldr	r0, [r3, #4]
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010438:	461a      	mov	r2, r3
 801043a:	68b9      	ldr	r1, [r7, #8]
 801043c:	f00e f875 	bl	801e52a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	685a      	ldr	r2, [r3, #4]
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010448:	441a      	add	r2, r3
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	685a      	ldr	r2, [r3, #4]
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	689b      	ldr	r3, [r3, #8]
 8010456:	429a      	cmp	r2, r3
 8010458:	d32b      	bcc.n	80104b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	681a      	ldr	r2, [r3, #0]
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	605a      	str	r2, [r3, #4]
 8010462:	e026      	b.n	80104b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	68d8      	ldr	r0, [r3, #12]
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801046c:	461a      	mov	r2, r3
 801046e:	68b9      	ldr	r1, [r7, #8]
 8010470:	f00e f85b 	bl	801e52a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	68da      	ldr	r2, [r3, #12]
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801047c:	425b      	negs	r3, r3
 801047e:	441a      	add	r2, r3
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	68da      	ldr	r2, [r3, #12]
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	429a      	cmp	r2, r3
 801048e:	d207      	bcs.n	80104a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	689a      	ldr	r2, [r3, #8]
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010498:	425b      	negs	r3, r3
 801049a:	441a      	add	r2, r3
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2b02      	cmp	r3, #2
 80104a4:	d105      	bne.n	80104b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d002      	beq.n	80104b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	3b01      	subs	r3, #1
 80104b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	1c5a      	adds	r2, r3, #1
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80104ba:	697b      	ldr	r3, [r7, #20]
}
 80104bc:	4618      	mov	r0, r3
 80104be:	3718      	adds	r7, #24
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}

080104c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b082      	sub	sp, #8
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
 80104cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d018      	beq.n	8010508 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	68da      	ldr	r2, [r3, #12]
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104de:	441a      	add	r2, r3
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	68da      	ldr	r2, [r3, #12]
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	689b      	ldr	r3, [r3, #8]
 80104ec:	429a      	cmp	r2, r3
 80104ee:	d303      	bcc.n	80104f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681a      	ldr	r2, [r3, #0]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	68d9      	ldr	r1, [r3, #12]
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010500:	461a      	mov	r2, r3
 8010502:	6838      	ldr	r0, [r7, #0]
 8010504:	f00e f811 	bl	801e52a <memcpy>
	}
}
 8010508:	bf00      	nop
 801050a:	3708      	adds	r7, #8
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}

08010510 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b084      	sub	sp, #16
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010518:	f001 ff38 	bl	801238c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010522:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010524:	e011      	b.n	801054a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801052a:	2b00      	cmp	r3, #0
 801052c:	d012      	beq.n	8010554 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	3324      	adds	r3, #36	@ 0x24
 8010532:	4618      	mov	r0, r3
 8010534:	f000 fdd4 	bl	80110e0 <xTaskRemoveFromEventList>
 8010538:	4603      	mov	r3, r0
 801053a:	2b00      	cmp	r3, #0
 801053c:	d001      	beq.n	8010542 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801053e:	f000 feb3 	bl	80112a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010542:	7bfb      	ldrb	r3, [r7, #15]
 8010544:	3b01      	subs	r3, #1
 8010546:	b2db      	uxtb	r3, r3
 8010548:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801054a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801054e:	2b00      	cmp	r3, #0
 8010550:	dce9      	bgt.n	8010526 <prvUnlockQueue+0x16>
 8010552:	e000      	b.n	8010556 <prvUnlockQueue+0x46>
					break;
 8010554:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	22ff      	movs	r2, #255	@ 0xff
 801055a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801055e:	f001 ff4b 	bl	80123f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010562:	f001 ff13 	bl	801238c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801056c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801056e:	e011      	b.n	8010594 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	691b      	ldr	r3, [r3, #16]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d012      	beq.n	801059e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	3310      	adds	r3, #16
 801057c:	4618      	mov	r0, r3
 801057e:	f000 fdaf 	bl	80110e0 <xTaskRemoveFromEventList>
 8010582:	4603      	mov	r3, r0
 8010584:	2b00      	cmp	r3, #0
 8010586:	d001      	beq.n	801058c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010588:	f000 fe8e 	bl	80112a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801058c:	7bbb      	ldrb	r3, [r7, #14]
 801058e:	3b01      	subs	r3, #1
 8010590:	b2db      	uxtb	r3, r3
 8010592:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010594:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010598:	2b00      	cmp	r3, #0
 801059a:	dce9      	bgt.n	8010570 <prvUnlockQueue+0x60>
 801059c:	e000      	b.n	80105a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801059e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	22ff      	movs	r2, #255	@ 0xff
 80105a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80105a8:	f001 ff26 	bl	80123f8 <vPortExitCritical>
}
 80105ac:	bf00      	nop
 80105ae:	3710      	adds	r7, #16
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}

080105b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b084      	sub	sp, #16
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80105bc:	f001 fee6 	bl	801238c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d102      	bne.n	80105ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80105c8:	2301      	movs	r3, #1
 80105ca:	60fb      	str	r3, [r7, #12]
 80105cc:	e001      	b.n	80105d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80105ce:	2300      	movs	r3, #0
 80105d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80105d2:	f001 ff11 	bl	80123f8 <vPortExitCritical>

	return xReturn;
 80105d6:	68fb      	ldr	r3, [r7, #12]
}
 80105d8:	4618      	mov	r0, r3
 80105da:	3710      	adds	r7, #16
 80105dc:	46bd      	mov	sp, r7
 80105de:	bd80      	pop	{r7, pc}

080105e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b084      	sub	sp, #16
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80105e8:	f001 fed0 	bl	801238c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105f4:	429a      	cmp	r2, r3
 80105f6:	d102      	bne.n	80105fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80105f8:	2301      	movs	r3, #1
 80105fa:	60fb      	str	r3, [r7, #12]
 80105fc:	e001      	b.n	8010602 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80105fe:	2300      	movs	r3, #0
 8010600:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010602:	f001 fef9 	bl	80123f8 <vPortExitCritical>

	return xReturn;
 8010606:	68fb      	ldr	r3, [r7, #12]
}
 8010608:	4618      	mov	r0, r3
 801060a:	3710      	adds	r7, #16
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}

08010610 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010610:	b480      	push	{r7}
 8010612:	b085      	sub	sp, #20
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
 8010618:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801061a:	2300      	movs	r3, #0
 801061c:	60fb      	str	r3, [r7, #12]
 801061e:	e014      	b.n	801064a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010620:	4a0f      	ldr	r2, [pc, #60]	@ (8010660 <vQueueAddToRegistry+0x50>)
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d10b      	bne.n	8010644 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801062c:	490c      	ldr	r1, [pc, #48]	@ (8010660 <vQueueAddToRegistry+0x50>)
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	683a      	ldr	r2, [r7, #0]
 8010632:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010636:	4a0a      	ldr	r2, [pc, #40]	@ (8010660 <vQueueAddToRegistry+0x50>)
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	00db      	lsls	r3, r3, #3
 801063c:	4413      	add	r3, r2
 801063e:	687a      	ldr	r2, [r7, #4]
 8010640:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010642:	e006      	b.n	8010652 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	3301      	adds	r3, #1
 8010648:	60fb      	str	r3, [r7, #12]
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	2b07      	cmp	r3, #7
 801064e:	d9e7      	bls.n	8010620 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010650:	bf00      	nop
 8010652:	bf00      	nop
 8010654:	3714      	adds	r7, #20
 8010656:	46bd      	mov	sp, r7
 8010658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065c:	4770      	bx	lr
 801065e:	bf00      	nop
 8010660:	2000b014 	.word	0x2000b014

08010664 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010664:	b480      	push	{r7}
 8010666:	b085      	sub	sp, #20
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801066c:	2300      	movs	r3, #0
 801066e:	60fb      	str	r3, [r7, #12]
 8010670:	e016      	b.n	80106a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010672:	4a10      	ldr	r2, [pc, #64]	@ (80106b4 <vQueueUnregisterQueue+0x50>)
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	00db      	lsls	r3, r3, #3
 8010678:	4413      	add	r3, r2
 801067a:	685b      	ldr	r3, [r3, #4]
 801067c:	687a      	ldr	r2, [r7, #4]
 801067e:	429a      	cmp	r2, r3
 8010680:	d10b      	bne.n	801069a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010682:	4a0c      	ldr	r2, [pc, #48]	@ (80106b4 <vQueueUnregisterQueue+0x50>)
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	2100      	movs	r1, #0
 8010688:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801068c:	4a09      	ldr	r2, [pc, #36]	@ (80106b4 <vQueueUnregisterQueue+0x50>)
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	00db      	lsls	r3, r3, #3
 8010692:	4413      	add	r3, r2
 8010694:	2200      	movs	r2, #0
 8010696:	605a      	str	r2, [r3, #4]
				break;
 8010698:	e006      	b.n	80106a8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	3301      	adds	r3, #1
 801069e:	60fb      	str	r3, [r7, #12]
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	2b07      	cmp	r3, #7
 80106a4:	d9e5      	bls.n	8010672 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80106a6:	bf00      	nop
 80106a8:	bf00      	nop
 80106aa:	3714      	adds	r7, #20
 80106ac:	46bd      	mov	sp, r7
 80106ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b2:	4770      	bx	lr
 80106b4:	2000b014 	.word	0x2000b014

080106b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b086      	sub	sp, #24
 80106bc:	af00      	add	r7, sp, #0
 80106be:	60f8      	str	r0, [r7, #12]
 80106c0:	60b9      	str	r1, [r7, #8]
 80106c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80106c8:	f001 fe60 	bl	801238c <vPortEnterCritical>
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80106d2:	b25b      	sxtb	r3, r3
 80106d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106d8:	d103      	bne.n	80106e2 <vQueueWaitForMessageRestricted+0x2a>
 80106da:	697b      	ldr	r3, [r7, #20]
 80106dc:	2200      	movs	r2, #0
 80106de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80106e8:	b25b      	sxtb	r3, r3
 80106ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106ee:	d103      	bne.n	80106f8 <vQueueWaitForMessageRestricted+0x40>
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	2200      	movs	r2, #0
 80106f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80106f8:	f001 fe7e 	bl	80123f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010700:	2b00      	cmp	r3, #0
 8010702:	d106      	bne.n	8010712 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	3324      	adds	r3, #36	@ 0x24
 8010708:	687a      	ldr	r2, [r7, #4]
 801070a:	68b9      	ldr	r1, [r7, #8]
 801070c:	4618      	mov	r0, r3
 801070e:	f000 fcb9 	bl	8011084 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010712:	6978      	ldr	r0, [r7, #20]
 8010714:	f7ff fefc 	bl	8010510 <prvUnlockQueue>
	}
 8010718:	bf00      	nop
 801071a:	3718      	adds	r7, #24
 801071c:	46bd      	mov	sp, r7
 801071e:	bd80      	pop	{r7, pc}

08010720 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010720:	b580      	push	{r7, lr}
 8010722:	b08e      	sub	sp, #56	@ 0x38
 8010724:	af04      	add	r7, sp, #16
 8010726:	60f8      	str	r0, [r7, #12]
 8010728:	60b9      	str	r1, [r7, #8]
 801072a:	607a      	str	r2, [r7, #4]
 801072c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801072e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010730:	2b00      	cmp	r3, #0
 8010732:	d10d      	bne.n	8010750 <xTaskCreateStatic+0x30>
	__asm volatile
 8010734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010738:	b672      	cpsid	i
 801073a:	f383 8811 	msr	BASEPRI, r3
 801073e:	f3bf 8f6f 	isb	sy
 8010742:	f3bf 8f4f 	dsb	sy
 8010746:	b662      	cpsie	i
 8010748:	623b      	str	r3, [r7, #32]
}
 801074a:	bf00      	nop
 801074c:	bf00      	nop
 801074e:	e7fd      	b.n	801074c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8010750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010752:	2b00      	cmp	r3, #0
 8010754:	d10d      	bne.n	8010772 <xTaskCreateStatic+0x52>
	__asm volatile
 8010756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801075a:	b672      	cpsid	i
 801075c:	f383 8811 	msr	BASEPRI, r3
 8010760:	f3bf 8f6f 	isb	sy
 8010764:	f3bf 8f4f 	dsb	sy
 8010768:	b662      	cpsie	i
 801076a:	61fb      	str	r3, [r7, #28]
}
 801076c:	bf00      	nop
 801076e:	bf00      	nop
 8010770:	e7fd      	b.n	801076e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010772:	23a8      	movs	r3, #168	@ 0xa8
 8010774:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	2ba8      	cmp	r3, #168	@ 0xa8
 801077a:	d00d      	beq.n	8010798 <xTaskCreateStatic+0x78>
	__asm volatile
 801077c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010780:	b672      	cpsid	i
 8010782:	f383 8811 	msr	BASEPRI, r3
 8010786:	f3bf 8f6f 	isb	sy
 801078a:	f3bf 8f4f 	dsb	sy
 801078e:	b662      	cpsie	i
 8010790:	61bb      	str	r3, [r7, #24]
}
 8010792:	bf00      	nop
 8010794:	bf00      	nop
 8010796:	e7fd      	b.n	8010794 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010798:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801079a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801079c:	2b00      	cmp	r3, #0
 801079e:	d01e      	beq.n	80107de <xTaskCreateStatic+0xbe>
 80107a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d01b      	beq.n	80107de <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80107a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107a8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80107aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80107ae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80107b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107b2:	2202      	movs	r2, #2
 80107b4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80107b8:	2300      	movs	r3, #0
 80107ba:	9303      	str	r3, [sp, #12]
 80107bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107be:	9302      	str	r3, [sp, #8]
 80107c0:	f107 0314 	add.w	r3, r7, #20
 80107c4:	9301      	str	r3, [sp, #4]
 80107c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107c8:	9300      	str	r3, [sp, #0]
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	687a      	ldr	r2, [r7, #4]
 80107ce:	68b9      	ldr	r1, [r7, #8]
 80107d0:	68f8      	ldr	r0, [r7, #12]
 80107d2:	f000 f851 	bl	8010878 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80107d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80107d8:	f000 f8f8 	bl	80109cc <prvAddNewTaskToReadyList>
 80107dc:	e001      	b.n	80107e2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80107de:	2300      	movs	r3, #0
 80107e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80107e2:	697b      	ldr	r3, [r7, #20]
	}
 80107e4:	4618      	mov	r0, r3
 80107e6:	3728      	adds	r7, #40	@ 0x28
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}

080107ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b08c      	sub	sp, #48	@ 0x30
 80107f0:	af04      	add	r7, sp, #16
 80107f2:	60f8      	str	r0, [r7, #12]
 80107f4:	60b9      	str	r1, [r7, #8]
 80107f6:	603b      	str	r3, [r7, #0]
 80107f8:	4613      	mov	r3, r2
 80107fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80107fc:	88fb      	ldrh	r3, [r7, #6]
 80107fe:	009b      	lsls	r3, r3, #2
 8010800:	4618      	mov	r0, r3
 8010802:	f001 fef1 	bl	80125e8 <pvPortMalloc>
 8010806:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d00e      	beq.n	801082c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801080e:	20a8      	movs	r0, #168	@ 0xa8
 8010810:	f001 feea 	bl	80125e8 <pvPortMalloc>
 8010814:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010816:	69fb      	ldr	r3, [r7, #28]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d003      	beq.n	8010824 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801081c:	69fb      	ldr	r3, [r7, #28]
 801081e:	697a      	ldr	r2, [r7, #20]
 8010820:	631a      	str	r2, [r3, #48]	@ 0x30
 8010822:	e005      	b.n	8010830 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010824:	6978      	ldr	r0, [r7, #20]
 8010826:	f001 ffad 	bl	8012784 <vPortFree>
 801082a:	e001      	b.n	8010830 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801082c:	2300      	movs	r3, #0
 801082e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010830:	69fb      	ldr	r3, [r7, #28]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d017      	beq.n	8010866 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010836:	69fb      	ldr	r3, [r7, #28]
 8010838:	2200      	movs	r2, #0
 801083a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801083e:	88fa      	ldrh	r2, [r7, #6]
 8010840:	2300      	movs	r3, #0
 8010842:	9303      	str	r3, [sp, #12]
 8010844:	69fb      	ldr	r3, [r7, #28]
 8010846:	9302      	str	r3, [sp, #8]
 8010848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801084a:	9301      	str	r3, [sp, #4]
 801084c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801084e:	9300      	str	r3, [sp, #0]
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	68b9      	ldr	r1, [r7, #8]
 8010854:	68f8      	ldr	r0, [r7, #12]
 8010856:	f000 f80f 	bl	8010878 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801085a:	69f8      	ldr	r0, [r7, #28]
 801085c:	f000 f8b6 	bl	80109cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010860:	2301      	movs	r3, #1
 8010862:	61bb      	str	r3, [r7, #24]
 8010864:	e002      	b.n	801086c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010866:	f04f 33ff 	mov.w	r3, #4294967295
 801086a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801086c:	69bb      	ldr	r3, [r7, #24]
	}
 801086e:	4618      	mov	r0, r3
 8010870:	3720      	adds	r7, #32
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}
	...

08010878 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b088      	sub	sp, #32
 801087c:	af00      	add	r7, sp, #0
 801087e:	60f8      	str	r0, [r7, #12]
 8010880:	60b9      	str	r1, [r7, #8]
 8010882:	607a      	str	r2, [r7, #4]
 8010884:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010888:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	009b      	lsls	r3, r3, #2
 801088e:	461a      	mov	r2, r3
 8010890:	21a5      	movs	r1, #165	@ 0xa5
 8010892:	f00d fd77 	bl	801e384 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010898:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801089a:	6879      	ldr	r1, [r7, #4]
 801089c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80108a0:	440b      	add	r3, r1
 80108a2:	009b      	lsls	r3, r3, #2
 80108a4:	4413      	add	r3, r2
 80108a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80108a8:	69bb      	ldr	r3, [r7, #24]
 80108aa:	f023 0307 	bic.w	r3, r3, #7
 80108ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80108b0:	69bb      	ldr	r3, [r7, #24]
 80108b2:	f003 0307 	and.w	r3, r3, #7
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d00d      	beq.n	80108d6 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80108ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108be:	b672      	cpsid	i
 80108c0:	f383 8811 	msr	BASEPRI, r3
 80108c4:	f3bf 8f6f 	isb	sy
 80108c8:	f3bf 8f4f 	dsb	sy
 80108cc:	b662      	cpsie	i
 80108ce:	617b      	str	r3, [r7, #20]
}
 80108d0:	bf00      	nop
 80108d2:	bf00      	nop
 80108d4:	e7fd      	b.n	80108d2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80108d6:	68bb      	ldr	r3, [r7, #8]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d01f      	beq.n	801091c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80108dc:	2300      	movs	r3, #0
 80108de:	61fb      	str	r3, [r7, #28]
 80108e0:	e012      	b.n	8010908 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80108e2:	68ba      	ldr	r2, [r7, #8]
 80108e4:	69fb      	ldr	r3, [r7, #28]
 80108e6:	4413      	add	r3, r2
 80108e8:	7819      	ldrb	r1, [r3, #0]
 80108ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108ec:	69fb      	ldr	r3, [r7, #28]
 80108ee:	4413      	add	r3, r2
 80108f0:	3334      	adds	r3, #52	@ 0x34
 80108f2:	460a      	mov	r2, r1
 80108f4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80108f6:	68ba      	ldr	r2, [r7, #8]
 80108f8:	69fb      	ldr	r3, [r7, #28]
 80108fa:	4413      	add	r3, r2
 80108fc:	781b      	ldrb	r3, [r3, #0]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d006      	beq.n	8010910 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010902:	69fb      	ldr	r3, [r7, #28]
 8010904:	3301      	adds	r3, #1
 8010906:	61fb      	str	r3, [r7, #28]
 8010908:	69fb      	ldr	r3, [r7, #28]
 801090a:	2b0f      	cmp	r3, #15
 801090c:	d9e9      	bls.n	80108e2 <prvInitialiseNewTask+0x6a>
 801090e:	e000      	b.n	8010912 <prvInitialiseNewTask+0x9a>
			{
				break;
 8010910:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010914:	2200      	movs	r2, #0
 8010916:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801091a:	e003      	b.n	8010924 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801091c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801091e:	2200      	movs	r2, #0
 8010920:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010926:	2b37      	cmp	r3, #55	@ 0x37
 8010928:	d901      	bls.n	801092e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801092a:	2337      	movs	r3, #55	@ 0x37
 801092c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801092e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010930:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010932:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010936:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010938:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801093a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801093c:	2200      	movs	r2, #0
 801093e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010942:	3304      	adds	r3, #4
 8010944:	4618      	mov	r0, r3
 8010946:	f7fe fd27 	bl	800f398 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801094a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801094c:	3318      	adds	r3, #24
 801094e:	4618      	mov	r0, r3
 8010950:	f7fe fd22 	bl	800f398 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010958:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801095a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801095c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010962:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010968:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801096a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801096c:	2200      	movs	r2, #0
 801096e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010974:	2200      	movs	r2, #0
 8010976:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801097a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801097c:	3354      	adds	r3, #84	@ 0x54
 801097e:	224c      	movs	r2, #76	@ 0x4c
 8010980:	2100      	movs	r1, #0
 8010982:	4618      	mov	r0, r3
 8010984:	f00d fcfe 	bl	801e384 <memset>
 8010988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801098a:	4a0d      	ldr	r2, [pc, #52]	@ (80109c0 <prvInitialiseNewTask+0x148>)
 801098c:	659a      	str	r2, [r3, #88]	@ 0x58
 801098e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010990:	4a0c      	ldr	r2, [pc, #48]	@ (80109c4 <prvInitialiseNewTask+0x14c>)
 8010992:	65da      	str	r2, [r3, #92]	@ 0x5c
 8010994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010996:	4a0c      	ldr	r2, [pc, #48]	@ (80109c8 <prvInitialiseNewTask+0x150>)
 8010998:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801099a:	683a      	ldr	r2, [r7, #0]
 801099c:	68f9      	ldr	r1, [r7, #12]
 801099e:	69b8      	ldr	r0, [r7, #24]
 80109a0:	f001 fbe2 	bl	8012168 <pxPortInitialiseStack>
 80109a4:	4602      	mov	r2, r0
 80109a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80109aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d002      	beq.n	80109b6 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80109b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80109b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80109b6:	bf00      	nop
 80109b8:	3720      	adds	r7, #32
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}
 80109be:	bf00      	nop
 80109c0:	20027d10 	.word	0x20027d10
 80109c4:	20027d78 	.word	0x20027d78
 80109c8:	20027de0 	.word	0x20027de0

080109cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b082      	sub	sp, #8
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80109d4:	f001 fcda 	bl	801238c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80109d8:	4b2d      	ldr	r3, [pc, #180]	@ (8010a90 <prvAddNewTaskToReadyList+0xc4>)
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	3301      	adds	r3, #1
 80109de:	4a2c      	ldr	r2, [pc, #176]	@ (8010a90 <prvAddNewTaskToReadyList+0xc4>)
 80109e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80109e2:	4b2c      	ldr	r3, [pc, #176]	@ (8010a94 <prvAddNewTaskToReadyList+0xc8>)
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d109      	bne.n	80109fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80109ea:	4a2a      	ldr	r2, [pc, #168]	@ (8010a94 <prvAddNewTaskToReadyList+0xc8>)
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80109f0:	4b27      	ldr	r3, [pc, #156]	@ (8010a90 <prvAddNewTaskToReadyList+0xc4>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	2b01      	cmp	r3, #1
 80109f6:	d110      	bne.n	8010a1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80109f8:	f000 fc7a 	bl	80112f0 <prvInitialiseTaskLists>
 80109fc:	e00d      	b.n	8010a1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80109fe:	4b26      	ldr	r3, [pc, #152]	@ (8010a98 <prvAddNewTaskToReadyList+0xcc>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d109      	bne.n	8010a1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010a06:	4b23      	ldr	r3, [pc, #140]	@ (8010a94 <prvAddNewTaskToReadyList+0xc8>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a10:	429a      	cmp	r2, r3
 8010a12:	d802      	bhi.n	8010a1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010a14:	4a1f      	ldr	r2, [pc, #124]	@ (8010a94 <prvAddNewTaskToReadyList+0xc8>)
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010a1a:	4b20      	ldr	r3, [pc, #128]	@ (8010a9c <prvAddNewTaskToReadyList+0xd0>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	3301      	adds	r3, #1
 8010a20:	4a1e      	ldr	r2, [pc, #120]	@ (8010a9c <prvAddNewTaskToReadyList+0xd0>)
 8010a22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010a24:	4b1d      	ldr	r3, [pc, #116]	@ (8010a9c <prvAddNewTaskToReadyList+0xd0>)
 8010a26:	681a      	ldr	r2, [r3, #0]
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a30:	4b1b      	ldr	r3, [pc, #108]	@ (8010aa0 <prvAddNewTaskToReadyList+0xd4>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	429a      	cmp	r2, r3
 8010a36:	d903      	bls.n	8010a40 <prvAddNewTaskToReadyList+0x74>
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a3c:	4a18      	ldr	r2, [pc, #96]	@ (8010aa0 <prvAddNewTaskToReadyList+0xd4>)
 8010a3e:	6013      	str	r3, [r2, #0]
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a44:	4613      	mov	r3, r2
 8010a46:	009b      	lsls	r3, r3, #2
 8010a48:	4413      	add	r3, r2
 8010a4a:	009b      	lsls	r3, r3, #2
 8010a4c:	4a15      	ldr	r2, [pc, #84]	@ (8010aa4 <prvAddNewTaskToReadyList+0xd8>)
 8010a4e:	441a      	add	r2, r3
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	3304      	adds	r3, #4
 8010a54:	4619      	mov	r1, r3
 8010a56:	4610      	mov	r0, r2
 8010a58:	f7fe fcab 	bl	800f3b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010a5c:	f001 fccc 	bl	80123f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010a60:	4b0d      	ldr	r3, [pc, #52]	@ (8010a98 <prvAddNewTaskToReadyList+0xcc>)
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d00e      	beq.n	8010a86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010a68:	4b0a      	ldr	r3, [pc, #40]	@ (8010a94 <prvAddNewTaskToReadyList+0xc8>)
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d207      	bcs.n	8010a86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010a76:	4b0c      	ldr	r3, [pc, #48]	@ (8010aa8 <prvAddNewTaskToReadyList+0xdc>)
 8010a78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010a7c:	601a      	str	r2, [r3, #0]
 8010a7e:	f3bf 8f4f 	dsb	sy
 8010a82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010a86:	bf00      	nop
 8010a88:	3708      	adds	r7, #8
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}
 8010a8e:	bf00      	nop
 8010a90:	2000b528 	.word	0x2000b528
 8010a94:	2000b054 	.word	0x2000b054
 8010a98:	2000b534 	.word	0x2000b534
 8010a9c:	2000b544 	.word	0x2000b544
 8010aa0:	2000b530 	.word	0x2000b530
 8010aa4:	2000b058 	.word	0x2000b058
 8010aa8:	e000ed04 	.word	0xe000ed04

08010aac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b084      	sub	sp, #16
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d01a      	beq.n	8010af4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010abe:	4b15      	ldr	r3, [pc, #84]	@ (8010b14 <vTaskDelay+0x68>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d00d      	beq.n	8010ae2 <vTaskDelay+0x36>
	__asm volatile
 8010ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010aca:	b672      	cpsid	i
 8010acc:	f383 8811 	msr	BASEPRI, r3
 8010ad0:	f3bf 8f6f 	isb	sy
 8010ad4:	f3bf 8f4f 	dsb	sy
 8010ad8:	b662      	cpsie	i
 8010ada:	60bb      	str	r3, [r7, #8]
}
 8010adc:	bf00      	nop
 8010ade:	bf00      	nop
 8010ae0:	e7fd      	b.n	8010ade <vTaskDelay+0x32>
			vTaskSuspendAll();
 8010ae2:	f000 f88f 	bl	8010c04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010ae6:	2100      	movs	r1, #0
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	f000 ff81 	bl	80119f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010aee:	f000 f897 	bl	8010c20 <xTaskResumeAll>
 8010af2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d107      	bne.n	8010b0a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8010afa:	4b07      	ldr	r3, [pc, #28]	@ (8010b18 <vTaskDelay+0x6c>)
 8010afc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b00:	601a      	str	r2, [r3, #0]
 8010b02:	f3bf 8f4f 	dsb	sy
 8010b06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010b0a:	bf00      	nop
 8010b0c:	3710      	adds	r7, #16
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bd80      	pop	{r7, pc}
 8010b12:	bf00      	nop
 8010b14:	2000b550 	.word	0x2000b550
 8010b18:	e000ed04 	.word	0xe000ed04

08010b1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b08a      	sub	sp, #40	@ 0x28
 8010b20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010b22:	2300      	movs	r3, #0
 8010b24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010b26:	2300      	movs	r3, #0
 8010b28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010b2a:	463a      	mov	r2, r7
 8010b2c:	1d39      	adds	r1, r7, #4
 8010b2e:	f107 0308 	add.w	r3, r7, #8
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7fe fbdc 	bl	800f2f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010b38:	6839      	ldr	r1, [r7, #0]
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	68ba      	ldr	r2, [r7, #8]
 8010b3e:	9202      	str	r2, [sp, #8]
 8010b40:	9301      	str	r3, [sp, #4]
 8010b42:	2300      	movs	r3, #0
 8010b44:	9300      	str	r3, [sp, #0]
 8010b46:	2300      	movs	r3, #0
 8010b48:	460a      	mov	r2, r1
 8010b4a:	4926      	ldr	r1, [pc, #152]	@ (8010be4 <vTaskStartScheduler+0xc8>)
 8010b4c:	4826      	ldr	r0, [pc, #152]	@ (8010be8 <vTaskStartScheduler+0xcc>)
 8010b4e:	f7ff fde7 	bl	8010720 <xTaskCreateStatic>
 8010b52:	4603      	mov	r3, r0
 8010b54:	4a25      	ldr	r2, [pc, #148]	@ (8010bec <vTaskStartScheduler+0xd0>)
 8010b56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010b58:	4b24      	ldr	r3, [pc, #144]	@ (8010bec <vTaskStartScheduler+0xd0>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d002      	beq.n	8010b66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010b60:	2301      	movs	r3, #1
 8010b62:	617b      	str	r3, [r7, #20]
 8010b64:	e001      	b.n	8010b6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010b66:	2300      	movs	r3, #0
 8010b68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	2b01      	cmp	r3, #1
 8010b6e:	d102      	bne.n	8010b76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010b70:	f000 ff92 	bl	8011a98 <xTimerCreateTimerTask>
 8010b74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	2b01      	cmp	r3, #1
 8010b7a:	d11d      	bne.n	8010bb8 <vTaskStartScheduler+0x9c>
	__asm volatile
 8010b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b80:	b672      	cpsid	i
 8010b82:	f383 8811 	msr	BASEPRI, r3
 8010b86:	f3bf 8f6f 	isb	sy
 8010b8a:	f3bf 8f4f 	dsb	sy
 8010b8e:	b662      	cpsie	i
 8010b90:	613b      	str	r3, [r7, #16]
}
 8010b92:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010b94:	4b16      	ldr	r3, [pc, #88]	@ (8010bf0 <vTaskStartScheduler+0xd4>)
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	3354      	adds	r3, #84	@ 0x54
 8010b9a:	4a16      	ldr	r2, [pc, #88]	@ (8010bf4 <vTaskStartScheduler+0xd8>)
 8010b9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010b9e:	4b16      	ldr	r3, [pc, #88]	@ (8010bf8 <vTaskStartScheduler+0xdc>)
 8010ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ba4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010ba6:	4b15      	ldr	r3, [pc, #84]	@ (8010bfc <vTaskStartScheduler+0xe0>)
 8010ba8:	2201      	movs	r2, #1
 8010baa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010bac:	4b14      	ldr	r3, [pc, #80]	@ (8010c00 <vTaskStartScheduler+0xe4>)
 8010bae:	2200      	movs	r2, #0
 8010bb0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010bb2:	f001 fb6d 	bl	8012290 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010bb6:	e011      	b.n	8010bdc <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bbe:	d10d      	bne.n	8010bdc <vTaskStartScheduler+0xc0>
	__asm volatile
 8010bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bc4:	b672      	cpsid	i
 8010bc6:	f383 8811 	msr	BASEPRI, r3
 8010bca:	f3bf 8f6f 	isb	sy
 8010bce:	f3bf 8f4f 	dsb	sy
 8010bd2:	b662      	cpsie	i
 8010bd4:	60fb      	str	r3, [r7, #12]
}
 8010bd6:	bf00      	nop
 8010bd8:	bf00      	nop
 8010bda:	e7fd      	b.n	8010bd8 <vTaskStartScheduler+0xbc>
}
 8010bdc:	bf00      	nop
 8010bde:	3718      	adds	r7, #24
 8010be0:	46bd      	mov	sp, r7
 8010be2:	bd80      	pop	{r7, pc}
 8010be4:	0801f270 	.word	0x0801f270
 8010be8:	080112c1 	.word	0x080112c1
 8010bec:	2000b54c 	.word	0x2000b54c
 8010bf0:	2000b054 	.word	0x2000b054
 8010bf4:	2000003c 	.word	0x2000003c
 8010bf8:	2000b548 	.word	0x2000b548
 8010bfc:	2000b534 	.word	0x2000b534
 8010c00:	2000b52c 	.word	0x2000b52c

08010c04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010c04:	b480      	push	{r7}
 8010c06:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010c08:	4b04      	ldr	r3, [pc, #16]	@ (8010c1c <vTaskSuspendAll+0x18>)
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	3301      	adds	r3, #1
 8010c0e:	4a03      	ldr	r2, [pc, #12]	@ (8010c1c <vTaskSuspendAll+0x18>)
 8010c10:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8010c12:	bf00      	nop
 8010c14:	46bd      	mov	sp, r7
 8010c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1a:	4770      	bx	lr
 8010c1c:	2000b550 	.word	0x2000b550

08010c20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b084      	sub	sp, #16
 8010c24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010c26:	2300      	movs	r3, #0
 8010c28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010c2e:	4b43      	ldr	r3, [pc, #268]	@ (8010d3c <xTaskResumeAll+0x11c>)
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d10d      	bne.n	8010c52 <xTaskResumeAll+0x32>
	__asm volatile
 8010c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c3a:	b672      	cpsid	i
 8010c3c:	f383 8811 	msr	BASEPRI, r3
 8010c40:	f3bf 8f6f 	isb	sy
 8010c44:	f3bf 8f4f 	dsb	sy
 8010c48:	b662      	cpsie	i
 8010c4a:	603b      	str	r3, [r7, #0]
}
 8010c4c:	bf00      	nop
 8010c4e:	bf00      	nop
 8010c50:	e7fd      	b.n	8010c4e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010c52:	f001 fb9b 	bl	801238c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010c56:	4b39      	ldr	r3, [pc, #228]	@ (8010d3c <xTaskResumeAll+0x11c>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	3b01      	subs	r3, #1
 8010c5c:	4a37      	ldr	r2, [pc, #220]	@ (8010d3c <xTaskResumeAll+0x11c>)
 8010c5e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010c60:	4b36      	ldr	r3, [pc, #216]	@ (8010d3c <xTaskResumeAll+0x11c>)
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d162      	bne.n	8010d2e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010c68:	4b35      	ldr	r3, [pc, #212]	@ (8010d40 <xTaskResumeAll+0x120>)
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d05e      	beq.n	8010d2e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010c70:	e02f      	b.n	8010cd2 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c72:	4b34      	ldr	r3, [pc, #208]	@ (8010d44 <xTaskResumeAll+0x124>)
 8010c74:	68db      	ldr	r3, [r3, #12]
 8010c76:	68db      	ldr	r3, [r3, #12]
 8010c78:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	3318      	adds	r3, #24
 8010c7e:	4618      	mov	r0, r3
 8010c80:	f7fe fbf4 	bl	800f46c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	3304      	adds	r3, #4
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f7fe fbef 	bl	800f46c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c92:	4b2d      	ldr	r3, [pc, #180]	@ (8010d48 <xTaskResumeAll+0x128>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	429a      	cmp	r2, r3
 8010c98:	d903      	bls.n	8010ca2 <xTaskResumeAll+0x82>
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c9e:	4a2a      	ldr	r2, [pc, #168]	@ (8010d48 <xTaskResumeAll+0x128>)
 8010ca0:	6013      	str	r3, [r2, #0]
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ca6:	4613      	mov	r3, r2
 8010ca8:	009b      	lsls	r3, r3, #2
 8010caa:	4413      	add	r3, r2
 8010cac:	009b      	lsls	r3, r3, #2
 8010cae:	4a27      	ldr	r2, [pc, #156]	@ (8010d4c <xTaskResumeAll+0x12c>)
 8010cb0:	441a      	add	r2, r3
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	3304      	adds	r3, #4
 8010cb6:	4619      	mov	r1, r3
 8010cb8:	4610      	mov	r0, r2
 8010cba:	f7fe fb7a 	bl	800f3b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cc2:	4b23      	ldr	r3, [pc, #140]	@ (8010d50 <xTaskResumeAll+0x130>)
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d302      	bcc.n	8010cd2 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8010ccc:	4b21      	ldr	r3, [pc, #132]	@ (8010d54 <xTaskResumeAll+0x134>)
 8010cce:	2201      	movs	r2, #1
 8010cd0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8010d44 <xTaskResumeAll+0x124>)
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d1cb      	bne.n	8010c72 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d001      	beq.n	8010ce4 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010ce0:	f000 fbac 	bl	801143c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8010d58 <xTaskResumeAll+0x138>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d010      	beq.n	8010d12 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010cf0:	f000 f858 	bl	8010da4 <xTaskIncrementTick>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d002      	beq.n	8010d00 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8010cfa:	4b16      	ldr	r3, [pc, #88]	@ (8010d54 <xTaskResumeAll+0x134>)
 8010cfc:	2201      	movs	r2, #1
 8010cfe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	3b01      	subs	r3, #1
 8010d04:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d1f1      	bne.n	8010cf0 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8010d0c:	4b12      	ldr	r3, [pc, #72]	@ (8010d58 <xTaskResumeAll+0x138>)
 8010d0e:	2200      	movs	r2, #0
 8010d10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010d12:	4b10      	ldr	r3, [pc, #64]	@ (8010d54 <xTaskResumeAll+0x134>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d009      	beq.n	8010d2e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010d1a:	2301      	movs	r3, #1
 8010d1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8010d5c <xTaskResumeAll+0x13c>)
 8010d20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d24:	601a      	str	r2, [r3, #0]
 8010d26:	f3bf 8f4f 	dsb	sy
 8010d2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010d2e:	f001 fb63 	bl	80123f8 <vPortExitCritical>

	return xAlreadyYielded;
 8010d32:	68bb      	ldr	r3, [r7, #8]
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	3710      	adds	r7, #16
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}
 8010d3c:	2000b550 	.word	0x2000b550
 8010d40:	2000b528 	.word	0x2000b528
 8010d44:	2000b4e8 	.word	0x2000b4e8
 8010d48:	2000b530 	.word	0x2000b530
 8010d4c:	2000b058 	.word	0x2000b058
 8010d50:	2000b054 	.word	0x2000b054
 8010d54:	2000b53c 	.word	0x2000b53c
 8010d58:	2000b538 	.word	0x2000b538
 8010d5c:	e000ed04 	.word	0xe000ed04

08010d60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010d60:	b480      	push	{r7}
 8010d62:	b083      	sub	sp, #12
 8010d64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010d66:	4b05      	ldr	r3, [pc, #20]	@ (8010d7c <xTaskGetTickCount+0x1c>)
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010d6c:	687b      	ldr	r3, [r7, #4]
}
 8010d6e:	4618      	mov	r0, r3
 8010d70:	370c      	adds	r7, #12
 8010d72:	46bd      	mov	sp, r7
 8010d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d78:	4770      	bx	lr
 8010d7a:	bf00      	nop
 8010d7c:	2000b52c 	.word	0x2000b52c

08010d80 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b082      	sub	sp, #8
 8010d84:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010d86:	f001 fbe9 	bl	801255c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8010d8e:	4b04      	ldr	r3, [pc, #16]	@ (8010da0 <xTaskGetTickCountFromISR+0x20>)
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d94:	683b      	ldr	r3, [r7, #0]
}
 8010d96:	4618      	mov	r0, r3
 8010d98:	3708      	adds	r7, #8
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}
 8010d9e:	bf00      	nop
 8010da0:	2000b52c 	.word	0x2000b52c

08010da4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b086      	sub	sp, #24
 8010da8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010daa:	2300      	movs	r3, #0
 8010dac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010dae:	4b50      	ldr	r3, [pc, #320]	@ (8010ef0 <xTaskIncrementTick+0x14c>)
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	f040 808c 	bne.w	8010ed0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010db8:	4b4e      	ldr	r3, [pc, #312]	@ (8010ef4 <xTaskIncrementTick+0x150>)
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	3301      	adds	r3, #1
 8010dbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010dc0:	4a4c      	ldr	r2, [pc, #304]	@ (8010ef4 <xTaskIncrementTick+0x150>)
 8010dc2:	693b      	ldr	r3, [r7, #16]
 8010dc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010dc6:	693b      	ldr	r3, [r7, #16]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d123      	bne.n	8010e14 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8010dcc:	4b4a      	ldr	r3, [pc, #296]	@ (8010ef8 <xTaskIncrementTick+0x154>)
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d00d      	beq.n	8010df2 <xTaskIncrementTick+0x4e>
	__asm volatile
 8010dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dda:	b672      	cpsid	i
 8010ddc:	f383 8811 	msr	BASEPRI, r3
 8010de0:	f3bf 8f6f 	isb	sy
 8010de4:	f3bf 8f4f 	dsb	sy
 8010de8:	b662      	cpsie	i
 8010dea:	603b      	str	r3, [r7, #0]
}
 8010dec:	bf00      	nop
 8010dee:	bf00      	nop
 8010df0:	e7fd      	b.n	8010dee <xTaskIncrementTick+0x4a>
 8010df2:	4b41      	ldr	r3, [pc, #260]	@ (8010ef8 <xTaskIncrementTick+0x154>)
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	60fb      	str	r3, [r7, #12]
 8010df8:	4b40      	ldr	r3, [pc, #256]	@ (8010efc <xTaskIncrementTick+0x158>)
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	4a3e      	ldr	r2, [pc, #248]	@ (8010ef8 <xTaskIncrementTick+0x154>)
 8010dfe:	6013      	str	r3, [r2, #0]
 8010e00:	4a3e      	ldr	r2, [pc, #248]	@ (8010efc <xTaskIncrementTick+0x158>)
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	6013      	str	r3, [r2, #0]
 8010e06:	4b3e      	ldr	r3, [pc, #248]	@ (8010f00 <xTaskIncrementTick+0x15c>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	3301      	adds	r3, #1
 8010e0c:	4a3c      	ldr	r2, [pc, #240]	@ (8010f00 <xTaskIncrementTick+0x15c>)
 8010e0e:	6013      	str	r3, [r2, #0]
 8010e10:	f000 fb14 	bl	801143c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010e14:	4b3b      	ldr	r3, [pc, #236]	@ (8010f04 <xTaskIncrementTick+0x160>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	693a      	ldr	r2, [r7, #16]
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	d349      	bcc.n	8010eb2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e1e:	4b36      	ldr	r3, [pc, #216]	@ (8010ef8 <xTaskIncrementTick+0x154>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d104      	bne.n	8010e32 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e28:	4b36      	ldr	r3, [pc, #216]	@ (8010f04 <xTaskIncrementTick+0x160>)
 8010e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8010e2e:	601a      	str	r2, [r3, #0]
					break;
 8010e30:	e03f      	b.n	8010eb2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e32:	4b31      	ldr	r3, [pc, #196]	@ (8010ef8 <xTaskIncrementTick+0x154>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	68db      	ldr	r3, [r3, #12]
 8010e38:	68db      	ldr	r3, [r3, #12]
 8010e3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	685b      	ldr	r3, [r3, #4]
 8010e40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010e42:	693a      	ldr	r2, [r7, #16]
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d203      	bcs.n	8010e52 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010e4a:	4a2e      	ldr	r2, [pc, #184]	@ (8010f04 <xTaskIncrementTick+0x160>)
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010e50:	e02f      	b.n	8010eb2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e52:	68bb      	ldr	r3, [r7, #8]
 8010e54:	3304      	adds	r3, #4
 8010e56:	4618      	mov	r0, r3
 8010e58:	f7fe fb08 	bl	800f46c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010e5c:	68bb      	ldr	r3, [r7, #8]
 8010e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d004      	beq.n	8010e6e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010e64:	68bb      	ldr	r3, [r7, #8]
 8010e66:	3318      	adds	r3, #24
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f7fe faff 	bl	800f46c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010e6e:	68bb      	ldr	r3, [r7, #8]
 8010e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e72:	4b25      	ldr	r3, [pc, #148]	@ (8010f08 <xTaskIncrementTick+0x164>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	429a      	cmp	r2, r3
 8010e78:	d903      	bls.n	8010e82 <xTaskIncrementTick+0xde>
 8010e7a:	68bb      	ldr	r3, [r7, #8]
 8010e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e7e:	4a22      	ldr	r2, [pc, #136]	@ (8010f08 <xTaskIncrementTick+0x164>)
 8010e80:	6013      	str	r3, [r2, #0]
 8010e82:	68bb      	ldr	r3, [r7, #8]
 8010e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e86:	4613      	mov	r3, r2
 8010e88:	009b      	lsls	r3, r3, #2
 8010e8a:	4413      	add	r3, r2
 8010e8c:	009b      	lsls	r3, r3, #2
 8010e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8010f0c <xTaskIncrementTick+0x168>)
 8010e90:	441a      	add	r2, r3
 8010e92:	68bb      	ldr	r3, [r7, #8]
 8010e94:	3304      	adds	r3, #4
 8010e96:	4619      	mov	r1, r3
 8010e98:	4610      	mov	r0, r2
 8010e9a:	f7fe fa8a 	bl	800f3b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010e9e:	68bb      	ldr	r3, [r7, #8]
 8010ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8010f10 <xTaskIncrementTick+0x16c>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ea8:	429a      	cmp	r2, r3
 8010eaa:	d3b8      	bcc.n	8010e1e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8010eac:	2301      	movs	r3, #1
 8010eae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010eb0:	e7b5      	b.n	8010e1e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010eb2:	4b17      	ldr	r3, [pc, #92]	@ (8010f10 <xTaskIncrementTick+0x16c>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010eb8:	4914      	ldr	r1, [pc, #80]	@ (8010f0c <xTaskIncrementTick+0x168>)
 8010eba:	4613      	mov	r3, r2
 8010ebc:	009b      	lsls	r3, r3, #2
 8010ebe:	4413      	add	r3, r2
 8010ec0:	009b      	lsls	r3, r3, #2
 8010ec2:	440b      	add	r3, r1
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	2b01      	cmp	r3, #1
 8010ec8:	d907      	bls.n	8010eda <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8010eca:	2301      	movs	r3, #1
 8010ecc:	617b      	str	r3, [r7, #20]
 8010ece:	e004      	b.n	8010eda <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010ed0:	4b10      	ldr	r3, [pc, #64]	@ (8010f14 <xTaskIncrementTick+0x170>)
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	3301      	adds	r3, #1
 8010ed6:	4a0f      	ldr	r2, [pc, #60]	@ (8010f14 <xTaskIncrementTick+0x170>)
 8010ed8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010eda:	4b0f      	ldr	r3, [pc, #60]	@ (8010f18 <xTaskIncrementTick+0x174>)
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d001      	beq.n	8010ee6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010ee6:	697b      	ldr	r3, [r7, #20]
}
 8010ee8:	4618      	mov	r0, r3
 8010eea:	3718      	adds	r7, #24
 8010eec:	46bd      	mov	sp, r7
 8010eee:	bd80      	pop	{r7, pc}
 8010ef0:	2000b550 	.word	0x2000b550
 8010ef4:	2000b52c 	.word	0x2000b52c
 8010ef8:	2000b4e0 	.word	0x2000b4e0
 8010efc:	2000b4e4 	.word	0x2000b4e4
 8010f00:	2000b540 	.word	0x2000b540
 8010f04:	2000b548 	.word	0x2000b548
 8010f08:	2000b530 	.word	0x2000b530
 8010f0c:	2000b058 	.word	0x2000b058
 8010f10:	2000b054 	.word	0x2000b054
 8010f14:	2000b538 	.word	0x2000b538
 8010f18:	2000b53c 	.word	0x2000b53c

08010f1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b086      	sub	sp, #24
 8010f20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010f22:	4b3e      	ldr	r3, [pc, #248]	@ (801101c <vTaskSwitchContext+0x100>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d003      	beq.n	8010f32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010f2a:	4b3d      	ldr	r3, [pc, #244]	@ (8011020 <vTaskSwitchContext+0x104>)
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010f30:	e070      	b.n	8011014 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 8010f32:	4b3b      	ldr	r3, [pc, #236]	@ (8011020 <vTaskSwitchContext+0x104>)
 8010f34:	2200      	movs	r2, #0
 8010f36:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8010f38:	4b3a      	ldr	r3, [pc, #232]	@ (8011024 <vTaskSwitchContext+0x108>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f3e:	613b      	str	r3, [r7, #16]
 8010f40:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8010f44:	60fb      	str	r3, [r7, #12]
 8010f46:	693b      	ldr	r3, [r7, #16]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	68fa      	ldr	r2, [r7, #12]
 8010f4c:	429a      	cmp	r2, r3
 8010f4e:	d111      	bne.n	8010f74 <vTaskSwitchContext+0x58>
 8010f50:	693b      	ldr	r3, [r7, #16]
 8010f52:	3304      	adds	r3, #4
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	68fa      	ldr	r2, [r7, #12]
 8010f58:	429a      	cmp	r2, r3
 8010f5a:	d10b      	bne.n	8010f74 <vTaskSwitchContext+0x58>
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	3308      	adds	r3, #8
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	68fa      	ldr	r2, [r7, #12]
 8010f64:	429a      	cmp	r2, r3
 8010f66:	d105      	bne.n	8010f74 <vTaskSwitchContext+0x58>
 8010f68:	693b      	ldr	r3, [r7, #16]
 8010f6a:	330c      	adds	r3, #12
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	68fa      	ldr	r2, [r7, #12]
 8010f70:	429a      	cmp	r2, r3
 8010f72:	d008      	beq.n	8010f86 <vTaskSwitchContext+0x6a>
 8010f74:	4b2b      	ldr	r3, [pc, #172]	@ (8011024 <vTaskSwitchContext+0x108>)
 8010f76:	681a      	ldr	r2, [r3, #0]
 8010f78:	4b2a      	ldr	r3, [pc, #168]	@ (8011024 <vTaskSwitchContext+0x108>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	3334      	adds	r3, #52	@ 0x34
 8010f7e:	4619      	mov	r1, r3
 8010f80:	4610      	mov	r0, r2
 8010f82:	f7f0 f811 	bl	8000fa8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f86:	4b28      	ldr	r3, [pc, #160]	@ (8011028 <vTaskSwitchContext+0x10c>)
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	617b      	str	r3, [r7, #20]
 8010f8c:	e013      	b.n	8010fb6 <vTaskSwitchContext+0x9a>
 8010f8e:	697b      	ldr	r3, [r7, #20]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d10d      	bne.n	8010fb0 <vTaskSwitchContext+0x94>
	__asm volatile
 8010f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f98:	b672      	cpsid	i
 8010f9a:	f383 8811 	msr	BASEPRI, r3
 8010f9e:	f3bf 8f6f 	isb	sy
 8010fa2:	f3bf 8f4f 	dsb	sy
 8010fa6:	b662      	cpsie	i
 8010fa8:	607b      	str	r3, [r7, #4]
}
 8010faa:	bf00      	nop
 8010fac:	bf00      	nop
 8010fae:	e7fd      	b.n	8010fac <vTaskSwitchContext+0x90>
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	3b01      	subs	r3, #1
 8010fb4:	617b      	str	r3, [r7, #20]
 8010fb6:	491d      	ldr	r1, [pc, #116]	@ (801102c <vTaskSwitchContext+0x110>)
 8010fb8:	697a      	ldr	r2, [r7, #20]
 8010fba:	4613      	mov	r3, r2
 8010fbc:	009b      	lsls	r3, r3, #2
 8010fbe:	4413      	add	r3, r2
 8010fc0:	009b      	lsls	r3, r3, #2
 8010fc2:	440b      	add	r3, r1
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d0e1      	beq.n	8010f8e <vTaskSwitchContext+0x72>
 8010fca:	697a      	ldr	r2, [r7, #20]
 8010fcc:	4613      	mov	r3, r2
 8010fce:	009b      	lsls	r3, r3, #2
 8010fd0:	4413      	add	r3, r2
 8010fd2:	009b      	lsls	r3, r3, #2
 8010fd4:	4a15      	ldr	r2, [pc, #84]	@ (801102c <vTaskSwitchContext+0x110>)
 8010fd6:	4413      	add	r3, r2
 8010fd8:	60bb      	str	r3, [r7, #8]
 8010fda:	68bb      	ldr	r3, [r7, #8]
 8010fdc:	685b      	ldr	r3, [r3, #4]
 8010fde:	685a      	ldr	r2, [r3, #4]
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	605a      	str	r2, [r3, #4]
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	685a      	ldr	r2, [r3, #4]
 8010fe8:	68bb      	ldr	r3, [r7, #8]
 8010fea:	3308      	adds	r3, #8
 8010fec:	429a      	cmp	r2, r3
 8010fee:	d104      	bne.n	8010ffa <vTaskSwitchContext+0xde>
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	685b      	ldr	r3, [r3, #4]
 8010ff4:	685a      	ldr	r2, [r3, #4]
 8010ff6:	68bb      	ldr	r3, [r7, #8]
 8010ff8:	605a      	str	r2, [r3, #4]
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	685b      	ldr	r3, [r3, #4]
 8010ffe:	68db      	ldr	r3, [r3, #12]
 8011000:	4a08      	ldr	r2, [pc, #32]	@ (8011024 <vTaskSwitchContext+0x108>)
 8011002:	6013      	str	r3, [r2, #0]
 8011004:	4a08      	ldr	r2, [pc, #32]	@ (8011028 <vTaskSwitchContext+0x10c>)
 8011006:	697b      	ldr	r3, [r7, #20]
 8011008:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801100a:	4b06      	ldr	r3, [pc, #24]	@ (8011024 <vTaskSwitchContext+0x108>)
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	3354      	adds	r3, #84	@ 0x54
 8011010:	4a07      	ldr	r2, [pc, #28]	@ (8011030 <vTaskSwitchContext+0x114>)
 8011012:	6013      	str	r3, [r2, #0]
}
 8011014:	bf00      	nop
 8011016:	3718      	adds	r7, #24
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}
 801101c:	2000b550 	.word	0x2000b550
 8011020:	2000b53c 	.word	0x2000b53c
 8011024:	2000b054 	.word	0x2000b054
 8011028:	2000b530 	.word	0x2000b530
 801102c:	2000b058 	.word	0x2000b058
 8011030:	2000003c 	.word	0x2000003c

08011034 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b084      	sub	sp, #16
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
 801103c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d10d      	bne.n	8011060 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8011044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011048:	b672      	cpsid	i
 801104a:	f383 8811 	msr	BASEPRI, r3
 801104e:	f3bf 8f6f 	isb	sy
 8011052:	f3bf 8f4f 	dsb	sy
 8011056:	b662      	cpsie	i
 8011058:	60fb      	str	r3, [r7, #12]
}
 801105a:	bf00      	nop
 801105c:	bf00      	nop
 801105e:	e7fd      	b.n	801105c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011060:	4b07      	ldr	r3, [pc, #28]	@ (8011080 <vTaskPlaceOnEventList+0x4c>)
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	3318      	adds	r3, #24
 8011066:	4619      	mov	r1, r3
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f7fe f9c6 	bl	800f3fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801106e:	2101      	movs	r1, #1
 8011070:	6838      	ldr	r0, [r7, #0]
 8011072:	f000 fcbd 	bl	80119f0 <prvAddCurrentTaskToDelayedList>
}
 8011076:	bf00      	nop
 8011078:	3710      	adds	r7, #16
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}
 801107e:	bf00      	nop
 8011080:	2000b054 	.word	0x2000b054

08011084 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011084:	b580      	push	{r7, lr}
 8011086:	b086      	sub	sp, #24
 8011088:	af00      	add	r7, sp, #0
 801108a:	60f8      	str	r0, [r7, #12]
 801108c:	60b9      	str	r1, [r7, #8]
 801108e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d10d      	bne.n	80110b2 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8011096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801109a:	b672      	cpsid	i
 801109c:	f383 8811 	msr	BASEPRI, r3
 80110a0:	f3bf 8f6f 	isb	sy
 80110a4:	f3bf 8f4f 	dsb	sy
 80110a8:	b662      	cpsie	i
 80110aa:	617b      	str	r3, [r7, #20]
}
 80110ac:	bf00      	nop
 80110ae:	bf00      	nop
 80110b0:	e7fd      	b.n	80110ae <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80110b2:	4b0a      	ldr	r3, [pc, #40]	@ (80110dc <vTaskPlaceOnEventListRestricted+0x58>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	3318      	adds	r3, #24
 80110b8:	4619      	mov	r1, r3
 80110ba:	68f8      	ldr	r0, [r7, #12]
 80110bc:	f7fe f979 	bl	800f3b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d002      	beq.n	80110cc <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80110c6:	f04f 33ff 	mov.w	r3, #4294967295
 80110ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80110cc:	6879      	ldr	r1, [r7, #4]
 80110ce:	68b8      	ldr	r0, [r7, #8]
 80110d0:	f000 fc8e 	bl	80119f0 <prvAddCurrentTaskToDelayedList>
	}
 80110d4:	bf00      	nop
 80110d6:	3718      	adds	r7, #24
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}
 80110dc:	2000b054 	.word	0x2000b054

080110e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b086      	sub	sp, #24
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	68db      	ldr	r3, [r3, #12]
 80110ec:	68db      	ldr	r3, [r3, #12]
 80110ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80110f0:	693b      	ldr	r3, [r7, #16]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d10d      	bne.n	8011112 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80110f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110fa:	b672      	cpsid	i
 80110fc:	f383 8811 	msr	BASEPRI, r3
 8011100:	f3bf 8f6f 	isb	sy
 8011104:	f3bf 8f4f 	dsb	sy
 8011108:	b662      	cpsie	i
 801110a:	60fb      	str	r3, [r7, #12]
}
 801110c:	bf00      	nop
 801110e:	bf00      	nop
 8011110:	e7fd      	b.n	801110e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011112:	693b      	ldr	r3, [r7, #16]
 8011114:	3318      	adds	r3, #24
 8011116:	4618      	mov	r0, r3
 8011118:	f7fe f9a8 	bl	800f46c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801111c:	4b1d      	ldr	r3, [pc, #116]	@ (8011194 <xTaskRemoveFromEventList+0xb4>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d11d      	bne.n	8011160 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011124:	693b      	ldr	r3, [r7, #16]
 8011126:	3304      	adds	r3, #4
 8011128:	4618      	mov	r0, r3
 801112a:	f7fe f99f 	bl	800f46c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801112e:	693b      	ldr	r3, [r7, #16]
 8011130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011132:	4b19      	ldr	r3, [pc, #100]	@ (8011198 <xTaskRemoveFromEventList+0xb8>)
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	429a      	cmp	r2, r3
 8011138:	d903      	bls.n	8011142 <xTaskRemoveFromEventList+0x62>
 801113a:	693b      	ldr	r3, [r7, #16]
 801113c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801113e:	4a16      	ldr	r2, [pc, #88]	@ (8011198 <xTaskRemoveFromEventList+0xb8>)
 8011140:	6013      	str	r3, [r2, #0]
 8011142:	693b      	ldr	r3, [r7, #16]
 8011144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011146:	4613      	mov	r3, r2
 8011148:	009b      	lsls	r3, r3, #2
 801114a:	4413      	add	r3, r2
 801114c:	009b      	lsls	r3, r3, #2
 801114e:	4a13      	ldr	r2, [pc, #76]	@ (801119c <xTaskRemoveFromEventList+0xbc>)
 8011150:	441a      	add	r2, r3
 8011152:	693b      	ldr	r3, [r7, #16]
 8011154:	3304      	adds	r3, #4
 8011156:	4619      	mov	r1, r3
 8011158:	4610      	mov	r0, r2
 801115a:	f7fe f92a 	bl	800f3b2 <vListInsertEnd>
 801115e:	e005      	b.n	801116c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011160:	693b      	ldr	r3, [r7, #16]
 8011162:	3318      	adds	r3, #24
 8011164:	4619      	mov	r1, r3
 8011166:	480e      	ldr	r0, [pc, #56]	@ (80111a0 <xTaskRemoveFromEventList+0xc0>)
 8011168:	f7fe f923 	bl	800f3b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011170:	4b0c      	ldr	r3, [pc, #48]	@ (80111a4 <xTaskRemoveFromEventList+0xc4>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011176:	429a      	cmp	r2, r3
 8011178:	d905      	bls.n	8011186 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801117a:	2301      	movs	r3, #1
 801117c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801117e:	4b0a      	ldr	r3, [pc, #40]	@ (80111a8 <xTaskRemoveFromEventList+0xc8>)
 8011180:	2201      	movs	r2, #1
 8011182:	601a      	str	r2, [r3, #0]
 8011184:	e001      	b.n	801118a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8011186:	2300      	movs	r3, #0
 8011188:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801118a:	697b      	ldr	r3, [r7, #20]
}
 801118c:	4618      	mov	r0, r3
 801118e:	3718      	adds	r7, #24
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}
 8011194:	2000b550 	.word	0x2000b550
 8011198:	2000b530 	.word	0x2000b530
 801119c:	2000b058 	.word	0x2000b058
 80111a0:	2000b4e8 	.word	0x2000b4e8
 80111a4:	2000b054 	.word	0x2000b054
 80111a8:	2000b53c 	.word	0x2000b53c

080111ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80111ac:	b480      	push	{r7}
 80111ae:	b083      	sub	sp, #12
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80111b4:	4b06      	ldr	r3, [pc, #24]	@ (80111d0 <vTaskInternalSetTimeOutState+0x24>)
 80111b6:	681a      	ldr	r2, [r3, #0]
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80111bc:	4b05      	ldr	r3, [pc, #20]	@ (80111d4 <vTaskInternalSetTimeOutState+0x28>)
 80111be:	681a      	ldr	r2, [r3, #0]
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	605a      	str	r2, [r3, #4]
}
 80111c4:	bf00      	nop
 80111c6:	370c      	adds	r7, #12
 80111c8:	46bd      	mov	sp, r7
 80111ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ce:	4770      	bx	lr
 80111d0:	2000b540 	.word	0x2000b540
 80111d4:	2000b52c 	.word	0x2000b52c

080111d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b088      	sub	sp, #32
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
 80111e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d10d      	bne.n	8011204 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80111e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111ec:	b672      	cpsid	i
 80111ee:	f383 8811 	msr	BASEPRI, r3
 80111f2:	f3bf 8f6f 	isb	sy
 80111f6:	f3bf 8f4f 	dsb	sy
 80111fa:	b662      	cpsie	i
 80111fc:	613b      	str	r3, [r7, #16]
}
 80111fe:	bf00      	nop
 8011200:	bf00      	nop
 8011202:	e7fd      	b.n	8011200 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8011204:	683b      	ldr	r3, [r7, #0]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d10d      	bne.n	8011226 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 801120a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801120e:	b672      	cpsid	i
 8011210:	f383 8811 	msr	BASEPRI, r3
 8011214:	f3bf 8f6f 	isb	sy
 8011218:	f3bf 8f4f 	dsb	sy
 801121c:	b662      	cpsie	i
 801121e:	60fb      	str	r3, [r7, #12]
}
 8011220:	bf00      	nop
 8011222:	bf00      	nop
 8011224:	e7fd      	b.n	8011222 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8011226:	f001 f8b1 	bl	801238c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801122a:	4b1d      	ldr	r3, [pc, #116]	@ (80112a0 <xTaskCheckForTimeOut+0xc8>)
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	685b      	ldr	r3, [r3, #4]
 8011234:	69ba      	ldr	r2, [r7, #24]
 8011236:	1ad3      	subs	r3, r2, r3
 8011238:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011242:	d102      	bne.n	801124a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011244:	2300      	movs	r3, #0
 8011246:	61fb      	str	r3, [r7, #28]
 8011248:	e023      	b.n	8011292 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	681a      	ldr	r2, [r3, #0]
 801124e:	4b15      	ldr	r3, [pc, #84]	@ (80112a4 <xTaskCheckForTimeOut+0xcc>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	429a      	cmp	r2, r3
 8011254:	d007      	beq.n	8011266 <xTaskCheckForTimeOut+0x8e>
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	685b      	ldr	r3, [r3, #4]
 801125a:	69ba      	ldr	r2, [r7, #24]
 801125c:	429a      	cmp	r2, r3
 801125e:	d302      	bcc.n	8011266 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011260:	2301      	movs	r3, #1
 8011262:	61fb      	str	r3, [r7, #28]
 8011264:	e015      	b.n	8011292 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011266:	683b      	ldr	r3, [r7, #0]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	697a      	ldr	r2, [r7, #20]
 801126c:	429a      	cmp	r2, r3
 801126e:	d20b      	bcs.n	8011288 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011270:	683b      	ldr	r3, [r7, #0]
 8011272:	681a      	ldr	r2, [r3, #0]
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	1ad2      	subs	r2, r2, r3
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f7ff ff95 	bl	80111ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011282:	2300      	movs	r3, #0
 8011284:	61fb      	str	r3, [r7, #28]
 8011286:	e004      	b.n	8011292 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	2200      	movs	r2, #0
 801128c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801128e:	2301      	movs	r3, #1
 8011290:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011292:	f001 f8b1 	bl	80123f8 <vPortExitCritical>

	return xReturn;
 8011296:	69fb      	ldr	r3, [r7, #28]
}
 8011298:	4618      	mov	r0, r3
 801129a:	3720      	adds	r7, #32
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}
 80112a0:	2000b52c 	.word	0x2000b52c
 80112a4:	2000b540 	.word	0x2000b540

080112a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80112a8:	b480      	push	{r7}
 80112aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80112ac:	4b03      	ldr	r3, [pc, #12]	@ (80112bc <vTaskMissedYield+0x14>)
 80112ae:	2201      	movs	r2, #1
 80112b0:	601a      	str	r2, [r3, #0]
}
 80112b2:	bf00      	nop
 80112b4:	46bd      	mov	sp, r7
 80112b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ba:	4770      	bx	lr
 80112bc:	2000b53c 	.word	0x2000b53c

080112c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b082      	sub	sp, #8
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80112c8:	f000 f852 	bl	8011370 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80112cc:	4b06      	ldr	r3, [pc, #24]	@ (80112e8 <prvIdleTask+0x28>)
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	2b01      	cmp	r3, #1
 80112d2:	d9f9      	bls.n	80112c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80112d4:	4b05      	ldr	r3, [pc, #20]	@ (80112ec <prvIdleTask+0x2c>)
 80112d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80112da:	601a      	str	r2, [r3, #0]
 80112dc:	f3bf 8f4f 	dsb	sy
 80112e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80112e4:	e7f0      	b.n	80112c8 <prvIdleTask+0x8>
 80112e6:	bf00      	nop
 80112e8:	2000b058 	.word	0x2000b058
 80112ec:	e000ed04 	.word	0xe000ed04

080112f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b082      	sub	sp, #8
 80112f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80112f6:	2300      	movs	r3, #0
 80112f8:	607b      	str	r3, [r7, #4]
 80112fa:	e00c      	b.n	8011316 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80112fc:	687a      	ldr	r2, [r7, #4]
 80112fe:	4613      	mov	r3, r2
 8011300:	009b      	lsls	r3, r3, #2
 8011302:	4413      	add	r3, r2
 8011304:	009b      	lsls	r3, r3, #2
 8011306:	4a12      	ldr	r2, [pc, #72]	@ (8011350 <prvInitialiseTaskLists+0x60>)
 8011308:	4413      	add	r3, r2
 801130a:	4618      	mov	r0, r3
 801130c:	f7fe f824 	bl	800f358 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	3301      	adds	r3, #1
 8011314:	607b      	str	r3, [r7, #4]
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	2b37      	cmp	r3, #55	@ 0x37
 801131a:	d9ef      	bls.n	80112fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801131c:	480d      	ldr	r0, [pc, #52]	@ (8011354 <prvInitialiseTaskLists+0x64>)
 801131e:	f7fe f81b 	bl	800f358 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011322:	480d      	ldr	r0, [pc, #52]	@ (8011358 <prvInitialiseTaskLists+0x68>)
 8011324:	f7fe f818 	bl	800f358 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011328:	480c      	ldr	r0, [pc, #48]	@ (801135c <prvInitialiseTaskLists+0x6c>)
 801132a:	f7fe f815 	bl	800f358 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801132e:	480c      	ldr	r0, [pc, #48]	@ (8011360 <prvInitialiseTaskLists+0x70>)
 8011330:	f7fe f812 	bl	800f358 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011334:	480b      	ldr	r0, [pc, #44]	@ (8011364 <prvInitialiseTaskLists+0x74>)
 8011336:	f7fe f80f 	bl	800f358 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801133a:	4b0b      	ldr	r3, [pc, #44]	@ (8011368 <prvInitialiseTaskLists+0x78>)
 801133c:	4a05      	ldr	r2, [pc, #20]	@ (8011354 <prvInitialiseTaskLists+0x64>)
 801133e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011340:	4b0a      	ldr	r3, [pc, #40]	@ (801136c <prvInitialiseTaskLists+0x7c>)
 8011342:	4a05      	ldr	r2, [pc, #20]	@ (8011358 <prvInitialiseTaskLists+0x68>)
 8011344:	601a      	str	r2, [r3, #0]
}
 8011346:	bf00      	nop
 8011348:	3708      	adds	r7, #8
 801134a:	46bd      	mov	sp, r7
 801134c:	bd80      	pop	{r7, pc}
 801134e:	bf00      	nop
 8011350:	2000b058 	.word	0x2000b058
 8011354:	2000b4b8 	.word	0x2000b4b8
 8011358:	2000b4cc 	.word	0x2000b4cc
 801135c:	2000b4e8 	.word	0x2000b4e8
 8011360:	2000b4fc 	.word	0x2000b4fc
 8011364:	2000b514 	.word	0x2000b514
 8011368:	2000b4e0 	.word	0x2000b4e0
 801136c:	2000b4e4 	.word	0x2000b4e4

08011370 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b082      	sub	sp, #8
 8011374:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011376:	e019      	b.n	80113ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011378:	f001 f808 	bl	801238c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801137c:	4b10      	ldr	r3, [pc, #64]	@ (80113c0 <prvCheckTasksWaitingTermination+0x50>)
 801137e:	68db      	ldr	r3, [r3, #12]
 8011380:	68db      	ldr	r3, [r3, #12]
 8011382:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	3304      	adds	r3, #4
 8011388:	4618      	mov	r0, r3
 801138a:	f7fe f86f 	bl	800f46c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801138e:	4b0d      	ldr	r3, [pc, #52]	@ (80113c4 <prvCheckTasksWaitingTermination+0x54>)
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	3b01      	subs	r3, #1
 8011394:	4a0b      	ldr	r2, [pc, #44]	@ (80113c4 <prvCheckTasksWaitingTermination+0x54>)
 8011396:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011398:	4b0b      	ldr	r3, [pc, #44]	@ (80113c8 <prvCheckTasksWaitingTermination+0x58>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	3b01      	subs	r3, #1
 801139e:	4a0a      	ldr	r2, [pc, #40]	@ (80113c8 <prvCheckTasksWaitingTermination+0x58>)
 80113a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80113a2:	f001 f829 	bl	80123f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80113a6:	6878      	ldr	r0, [r7, #4]
 80113a8:	f000 f810 	bl	80113cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80113ac:	4b06      	ldr	r3, [pc, #24]	@ (80113c8 <prvCheckTasksWaitingTermination+0x58>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d1e1      	bne.n	8011378 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80113b4:	bf00      	nop
 80113b6:	bf00      	nop
 80113b8:	3708      	adds	r7, #8
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd80      	pop	{r7, pc}
 80113be:	bf00      	nop
 80113c0:	2000b4fc 	.word	0x2000b4fc
 80113c4:	2000b528 	.word	0x2000b528
 80113c8:	2000b510 	.word	0x2000b510

080113cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b084      	sub	sp, #16
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	3354      	adds	r3, #84	@ 0x54
 80113d8:	4618      	mov	r0, r3
 80113da:	f00c ffeb 	bl	801e3b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d108      	bne.n	80113fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80113ec:	4618      	mov	r0, r3
 80113ee:	f001 f9c9 	bl	8012784 <vPortFree>
				vPortFree( pxTCB );
 80113f2:	6878      	ldr	r0, [r7, #4]
 80113f4:	f001 f9c6 	bl	8012784 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80113f8:	e01b      	b.n	8011432 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8011400:	2b01      	cmp	r3, #1
 8011402:	d103      	bne.n	801140c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011404:	6878      	ldr	r0, [r7, #4]
 8011406:	f001 f9bd 	bl	8012784 <vPortFree>
	}
 801140a:	e012      	b.n	8011432 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8011412:	2b02      	cmp	r3, #2
 8011414:	d00d      	beq.n	8011432 <prvDeleteTCB+0x66>
	__asm volatile
 8011416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801141a:	b672      	cpsid	i
 801141c:	f383 8811 	msr	BASEPRI, r3
 8011420:	f3bf 8f6f 	isb	sy
 8011424:	f3bf 8f4f 	dsb	sy
 8011428:	b662      	cpsie	i
 801142a:	60fb      	str	r3, [r7, #12]
}
 801142c:	bf00      	nop
 801142e:	bf00      	nop
 8011430:	e7fd      	b.n	801142e <prvDeleteTCB+0x62>
	}
 8011432:	bf00      	nop
 8011434:	3710      	adds	r7, #16
 8011436:	46bd      	mov	sp, r7
 8011438:	bd80      	pop	{r7, pc}
	...

0801143c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801143c:	b480      	push	{r7}
 801143e:	b083      	sub	sp, #12
 8011440:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011442:	4b0c      	ldr	r3, [pc, #48]	@ (8011474 <prvResetNextTaskUnblockTime+0x38>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d104      	bne.n	8011456 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801144c:	4b0a      	ldr	r3, [pc, #40]	@ (8011478 <prvResetNextTaskUnblockTime+0x3c>)
 801144e:	f04f 32ff 	mov.w	r2, #4294967295
 8011452:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011454:	e008      	b.n	8011468 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011456:	4b07      	ldr	r3, [pc, #28]	@ (8011474 <prvResetNextTaskUnblockTime+0x38>)
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	68db      	ldr	r3, [r3, #12]
 801145c:	68db      	ldr	r3, [r3, #12]
 801145e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	685b      	ldr	r3, [r3, #4]
 8011464:	4a04      	ldr	r2, [pc, #16]	@ (8011478 <prvResetNextTaskUnblockTime+0x3c>)
 8011466:	6013      	str	r3, [r2, #0]
}
 8011468:	bf00      	nop
 801146a:	370c      	adds	r7, #12
 801146c:	46bd      	mov	sp, r7
 801146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011472:	4770      	bx	lr
 8011474:	2000b4e0 	.word	0x2000b4e0
 8011478:	2000b548 	.word	0x2000b548

0801147c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801147c:	b480      	push	{r7}
 801147e:	b083      	sub	sp, #12
 8011480:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8011482:	4b05      	ldr	r3, [pc, #20]	@ (8011498 <xTaskGetCurrentTaskHandle+0x1c>)
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	607b      	str	r3, [r7, #4]

		return xReturn;
 8011488:	687b      	ldr	r3, [r7, #4]
	}
 801148a:	4618      	mov	r0, r3
 801148c:	370c      	adds	r7, #12
 801148e:	46bd      	mov	sp, r7
 8011490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011494:	4770      	bx	lr
 8011496:	bf00      	nop
 8011498:	2000b054 	.word	0x2000b054

0801149c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801149c:	b480      	push	{r7}
 801149e:	b083      	sub	sp, #12
 80114a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80114a2:	4b0b      	ldr	r3, [pc, #44]	@ (80114d0 <xTaskGetSchedulerState+0x34>)
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d102      	bne.n	80114b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80114aa:	2301      	movs	r3, #1
 80114ac:	607b      	str	r3, [r7, #4]
 80114ae:	e008      	b.n	80114c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80114b0:	4b08      	ldr	r3, [pc, #32]	@ (80114d4 <xTaskGetSchedulerState+0x38>)
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d102      	bne.n	80114be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80114b8:	2302      	movs	r3, #2
 80114ba:	607b      	str	r3, [r7, #4]
 80114bc:	e001      	b.n	80114c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80114be:	2300      	movs	r3, #0
 80114c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80114c2:	687b      	ldr	r3, [r7, #4]
	}
 80114c4:	4618      	mov	r0, r3
 80114c6:	370c      	adds	r7, #12
 80114c8:	46bd      	mov	sp, r7
 80114ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ce:	4770      	bx	lr
 80114d0:	2000b534 	.word	0x2000b534
 80114d4:	2000b550 	.word	0x2000b550

080114d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b084      	sub	sp, #16
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80114e4:	2300      	movs	r3, #0
 80114e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d051      	beq.n	8011592 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80114ee:	68bb      	ldr	r3, [r7, #8]
 80114f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80114f2:	4b2a      	ldr	r3, [pc, #168]	@ (801159c <xTaskPriorityInherit+0xc4>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114f8:	429a      	cmp	r2, r3
 80114fa:	d241      	bcs.n	8011580 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	699b      	ldr	r3, [r3, #24]
 8011500:	2b00      	cmp	r3, #0
 8011502:	db06      	blt.n	8011512 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011504:	4b25      	ldr	r3, [pc, #148]	@ (801159c <xTaskPriorityInherit+0xc4>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801150a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011512:	68bb      	ldr	r3, [r7, #8]
 8011514:	6959      	ldr	r1, [r3, #20]
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801151a:	4613      	mov	r3, r2
 801151c:	009b      	lsls	r3, r3, #2
 801151e:	4413      	add	r3, r2
 8011520:	009b      	lsls	r3, r3, #2
 8011522:	4a1f      	ldr	r2, [pc, #124]	@ (80115a0 <xTaskPriorityInherit+0xc8>)
 8011524:	4413      	add	r3, r2
 8011526:	4299      	cmp	r1, r3
 8011528:	d122      	bne.n	8011570 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	3304      	adds	r3, #4
 801152e:	4618      	mov	r0, r3
 8011530:	f7fd ff9c 	bl	800f46c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011534:	4b19      	ldr	r3, [pc, #100]	@ (801159c <xTaskPriorityInherit+0xc4>)
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801153a:	68bb      	ldr	r3, [r7, #8]
 801153c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011542:	4b18      	ldr	r3, [pc, #96]	@ (80115a4 <xTaskPriorityInherit+0xcc>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	429a      	cmp	r2, r3
 8011548:	d903      	bls.n	8011552 <xTaskPriorityInherit+0x7a>
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801154e:	4a15      	ldr	r2, [pc, #84]	@ (80115a4 <xTaskPriorityInherit+0xcc>)
 8011550:	6013      	str	r3, [r2, #0]
 8011552:	68bb      	ldr	r3, [r7, #8]
 8011554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011556:	4613      	mov	r3, r2
 8011558:	009b      	lsls	r3, r3, #2
 801155a:	4413      	add	r3, r2
 801155c:	009b      	lsls	r3, r3, #2
 801155e:	4a10      	ldr	r2, [pc, #64]	@ (80115a0 <xTaskPriorityInherit+0xc8>)
 8011560:	441a      	add	r2, r3
 8011562:	68bb      	ldr	r3, [r7, #8]
 8011564:	3304      	adds	r3, #4
 8011566:	4619      	mov	r1, r3
 8011568:	4610      	mov	r0, r2
 801156a:	f7fd ff22 	bl	800f3b2 <vListInsertEnd>
 801156e:	e004      	b.n	801157a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011570:	4b0a      	ldr	r3, [pc, #40]	@ (801159c <xTaskPriorityInherit+0xc4>)
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801157a:	2301      	movs	r3, #1
 801157c:	60fb      	str	r3, [r7, #12]
 801157e:	e008      	b.n	8011592 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011584:	4b05      	ldr	r3, [pc, #20]	@ (801159c <xTaskPriorityInherit+0xc4>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801158a:	429a      	cmp	r2, r3
 801158c:	d201      	bcs.n	8011592 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801158e:	2301      	movs	r3, #1
 8011590:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011592:	68fb      	ldr	r3, [r7, #12]
	}
 8011594:	4618      	mov	r0, r3
 8011596:	3710      	adds	r7, #16
 8011598:	46bd      	mov	sp, r7
 801159a:	bd80      	pop	{r7, pc}
 801159c:	2000b054 	.word	0x2000b054
 80115a0:	2000b058 	.word	0x2000b058
 80115a4:	2000b530 	.word	0x2000b530

080115a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b086      	sub	sp, #24
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80115b4:	2300      	movs	r3, #0
 80115b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d05c      	beq.n	8011678 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80115be:	4b31      	ldr	r3, [pc, #196]	@ (8011684 <xTaskPriorityDisinherit+0xdc>)
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	693a      	ldr	r2, [r7, #16]
 80115c4:	429a      	cmp	r2, r3
 80115c6:	d00d      	beq.n	80115e4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80115c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115cc:	b672      	cpsid	i
 80115ce:	f383 8811 	msr	BASEPRI, r3
 80115d2:	f3bf 8f6f 	isb	sy
 80115d6:	f3bf 8f4f 	dsb	sy
 80115da:	b662      	cpsie	i
 80115dc:	60fb      	str	r3, [r7, #12]
}
 80115de:	bf00      	nop
 80115e0:	bf00      	nop
 80115e2:	e7fd      	b.n	80115e0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80115e4:	693b      	ldr	r3, [r7, #16]
 80115e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d10d      	bne.n	8011608 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80115ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115f0:	b672      	cpsid	i
 80115f2:	f383 8811 	msr	BASEPRI, r3
 80115f6:	f3bf 8f6f 	isb	sy
 80115fa:	f3bf 8f4f 	dsb	sy
 80115fe:	b662      	cpsie	i
 8011600:	60bb      	str	r3, [r7, #8]
}
 8011602:	bf00      	nop
 8011604:	bf00      	nop
 8011606:	e7fd      	b.n	8011604 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8011608:	693b      	ldr	r3, [r7, #16]
 801160a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801160c:	1e5a      	subs	r2, r3, #1
 801160e:	693b      	ldr	r3, [r7, #16]
 8011610:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011612:	693b      	ldr	r3, [r7, #16]
 8011614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011616:	693b      	ldr	r3, [r7, #16]
 8011618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801161a:	429a      	cmp	r2, r3
 801161c:	d02c      	beq.n	8011678 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801161e:	693b      	ldr	r3, [r7, #16]
 8011620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011622:	2b00      	cmp	r3, #0
 8011624:	d128      	bne.n	8011678 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011626:	693b      	ldr	r3, [r7, #16]
 8011628:	3304      	adds	r3, #4
 801162a:	4618      	mov	r0, r3
 801162c:	f7fd ff1e 	bl	800f46c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011630:	693b      	ldr	r3, [r7, #16]
 8011632:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011634:	693b      	ldr	r3, [r7, #16]
 8011636:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011638:	693b      	ldr	r3, [r7, #16]
 801163a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801163c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011640:	693b      	ldr	r3, [r7, #16]
 8011642:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011644:	693b      	ldr	r3, [r7, #16]
 8011646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011648:	4b0f      	ldr	r3, [pc, #60]	@ (8011688 <xTaskPriorityDisinherit+0xe0>)
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	429a      	cmp	r2, r3
 801164e:	d903      	bls.n	8011658 <xTaskPriorityDisinherit+0xb0>
 8011650:	693b      	ldr	r3, [r7, #16]
 8011652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011654:	4a0c      	ldr	r2, [pc, #48]	@ (8011688 <xTaskPriorityDisinherit+0xe0>)
 8011656:	6013      	str	r3, [r2, #0]
 8011658:	693b      	ldr	r3, [r7, #16]
 801165a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801165c:	4613      	mov	r3, r2
 801165e:	009b      	lsls	r3, r3, #2
 8011660:	4413      	add	r3, r2
 8011662:	009b      	lsls	r3, r3, #2
 8011664:	4a09      	ldr	r2, [pc, #36]	@ (801168c <xTaskPriorityDisinherit+0xe4>)
 8011666:	441a      	add	r2, r3
 8011668:	693b      	ldr	r3, [r7, #16]
 801166a:	3304      	adds	r3, #4
 801166c:	4619      	mov	r1, r3
 801166e:	4610      	mov	r0, r2
 8011670:	f7fd fe9f 	bl	800f3b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011674:	2301      	movs	r3, #1
 8011676:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011678:	697b      	ldr	r3, [r7, #20]
	}
 801167a:	4618      	mov	r0, r3
 801167c:	3718      	adds	r7, #24
 801167e:	46bd      	mov	sp, r7
 8011680:	bd80      	pop	{r7, pc}
 8011682:	bf00      	nop
 8011684:	2000b054 	.word	0x2000b054
 8011688:	2000b530 	.word	0x2000b530
 801168c:	2000b058 	.word	0x2000b058

08011690 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011690:	b580      	push	{r7, lr}
 8011692:	b088      	sub	sp, #32
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
 8011698:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801169e:	2301      	movs	r3, #1
 80116a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d070      	beq.n	801178a <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80116a8:	69bb      	ldr	r3, [r7, #24]
 80116aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d10d      	bne.n	80116cc <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 80116b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116b4:	b672      	cpsid	i
 80116b6:	f383 8811 	msr	BASEPRI, r3
 80116ba:	f3bf 8f6f 	isb	sy
 80116be:	f3bf 8f4f 	dsb	sy
 80116c2:	b662      	cpsie	i
 80116c4:	60fb      	str	r3, [r7, #12]
}
 80116c6:	bf00      	nop
 80116c8:	bf00      	nop
 80116ca:	e7fd      	b.n	80116c8 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80116cc:	69bb      	ldr	r3, [r7, #24]
 80116ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80116d0:	683a      	ldr	r2, [r7, #0]
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d902      	bls.n	80116dc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	61fb      	str	r3, [r7, #28]
 80116da:	e002      	b.n	80116e2 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80116dc:	69bb      	ldr	r3, [r7, #24]
 80116de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80116e0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80116e2:	69bb      	ldr	r3, [r7, #24]
 80116e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116e6:	69fa      	ldr	r2, [r7, #28]
 80116e8:	429a      	cmp	r2, r3
 80116ea:	d04e      	beq.n	801178a <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80116ec:	69bb      	ldr	r3, [r7, #24]
 80116ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80116f0:	697a      	ldr	r2, [r7, #20]
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d149      	bne.n	801178a <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80116f6:	4b27      	ldr	r3, [pc, #156]	@ (8011794 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	69ba      	ldr	r2, [r7, #24]
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d10d      	bne.n	801171c <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8011700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011704:	b672      	cpsid	i
 8011706:	f383 8811 	msr	BASEPRI, r3
 801170a:	f3bf 8f6f 	isb	sy
 801170e:	f3bf 8f4f 	dsb	sy
 8011712:	b662      	cpsie	i
 8011714:	60bb      	str	r3, [r7, #8]
}
 8011716:	bf00      	nop
 8011718:	bf00      	nop
 801171a:	e7fd      	b.n	8011718 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801171c:	69bb      	ldr	r3, [r7, #24]
 801171e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011720:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011722:	69bb      	ldr	r3, [r7, #24]
 8011724:	69fa      	ldr	r2, [r7, #28]
 8011726:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011728:	69bb      	ldr	r3, [r7, #24]
 801172a:	699b      	ldr	r3, [r3, #24]
 801172c:	2b00      	cmp	r3, #0
 801172e:	db04      	blt.n	801173a <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011730:	69fb      	ldr	r3, [r7, #28]
 8011732:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011736:	69bb      	ldr	r3, [r7, #24]
 8011738:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801173a:	69bb      	ldr	r3, [r7, #24]
 801173c:	6959      	ldr	r1, [r3, #20]
 801173e:	693a      	ldr	r2, [r7, #16]
 8011740:	4613      	mov	r3, r2
 8011742:	009b      	lsls	r3, r3, #2
 8011744:	4413      	add	r3, r2
 8011746:	009b      	lsls	r3, r3, #2
 8011748:	4a13      	ldr	r2, [pc, #76]	@ (8011798 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 801174a:	4413      	add	r3, r2
 801174c:	4299      	cmp	r1, r3
 801174e:	d11c      	bne.n	801178a <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011750:	69bb      	ldr	r3, [r7, #24]
 8011752:	3304      	adds	r3, #4
 8011754:	4618      	mov	r0, r3
 8011756:	f7fd fe89 	bl	800f46c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801175a:	69bb      	ldr	r3, [r7, #24]
 801175c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801175e:	4b0f      	ldr	r3, [pc, #60]	@ (801179c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	429a      	cmp	r2, r3
 8011764:	d903      	bls.n	801176e <vTaskPriorityDisinheritAfterTimeout+0xde>
 8011766:	69bb      	ldr	r3, [r7, #24]
 8011768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801176a:	4a0c      	ldr	r2, [pc, #48]	@ (801179c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 801176c:	6013      	str	r3, [r2, #0]
 801176e:	69bb      	ldr	r3, [r7, #24]
 8011770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011772:	4613      	mov	r3, r2
 8011774:	009b      	lsls	r3, r3, #2
 8011776:	4413      	add	r3, r2
 8011778:	009b      	lsls	r3, r3, #2
 801177a:	4a07      	ldr	r2, [pc, #28]	@ (8011798 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 801177c:	441a      	add	r2, r3
 801177e:	69bb      	ldr	r3, [r7, #24]
 8011780:	3304      	adds	r3, #4
 8011782:	4619      	mov	r1, r3
 8011784:	4610      	mov	r0, r2
 8011786:	f7fd fe14 	bl	800f3b2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801178a:	bf00      	nop
 801178c:	3720      	adds	r7, #32
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}
 8011792:	bf00      	nop
 8011794:	2000b054 	.word	0x2000b054
 8011798:	2000b058 	.word	0x2000b058
 801179c:	2000b530 	.word	0x2000b530

080117a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80117a0:	b480      	push	{r7}
 80117a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80117a4:	4b07      	ldr	r3, [pc, #28]	@ (80117c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d004      	beq.n	80117b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80117ac:	4b05      	ldr	r3, [pc, #20]	@ (80117c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80117b2:	3201      	adds	r2, #1
 80117b4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80117b6:	4b03      	ldr	r3, [pc, #12]	@ (80117c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80117b8:	681b      	ldr	r3, [r3, #0]
	}
 80117ba:	4618      	mov	r0, r3
 80117bc:	46bd      	mov	sp, r7
 80117be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c2:	4770      	bx	lr
 80117c4:	2000b054 	.word	0x2000b054

080117c8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b084      	sub	sp, #16
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
 80117d0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80117d2:	f000 fddb 	bl	801238c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80117d6:	4b20      	ldr	r3, [pc, #128]	@ (8011858 <ulTaskNotifyTake+0x90>)
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d113      	bne.n	801180a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80117e2:	4b1d      	ldr	r3, [pc, #116]	@ (8011858 <ulTaskNotifyTake+0x90>)
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	2201      	movs	r2, #1
 80117e8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d00b      	beq.n	801180a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80117f2:	2101      	movs	r1, #1
 80117f4:	6838      	ldr	r0, [r7, #0]
 80117f6:	f000 f8fb 	bl	80119f0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80117fa:	4b18      	ldr	r3, [pc, #96]	@ (801185c <ulTaskNotifyTake+0x94>)
 80117fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011800:	601a      	str	r2, [r3, #0]
 8011802:	f3bf 8f4f 	dsb	sy
 8011806:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801180a:	f000 fdf5 	bl	80123f8 <vPortExitCritical>

		taskENTER_CRITICAL();
 801180e:	f000 fdbd 	bl	801238c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8011812:	4b11      	ldr	r3, [pc, #68]	@ (8011858 <ulTaskNotifyTake+0x90>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801181a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d00e      	beq.n	8011840 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d005      	beq.n	8011834 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8011828:	4b0b      	ldr	r3, [pc, #44]	@ (8011858 <ulTaskNotifyTake+0x90>)
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	2200      	movs	r2, #0
 801182e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8011832:	e005      	b.n	8011840 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8011834:	4b08      	ldr	r3, [pc, #32]	@ (8011858 <ulTaskNotifyTake+0x90>)
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	68fa      	ldr	r2, [r7, #12]
 801183a:	3a01      	subs	r2, #1
 801183c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011840:	4b05      	ldr	r3, [pc, #20]	@ (8011858 <ulTaskNotifyTake+0x90>)
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	2200      	movs	r2, #0
 8011846:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 801184a:	f000 fdd5 	bl	80123f8 <vPortExitCritical>

		return ulReturn;
 801184e:	68fb      	ldr	r3, [r7, #12]
	}
 8011850:	4618      	mov	r0, r3
 8011852:	3710      	adds	r7, #16
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}
 8011858:	2000b054 	.word	0x2000b054
 801185c:	e000ed04 	.word	0xe000ed04

08011860 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011860:	b580      	push	{r7, lr}
 8011862:	b08a      	sub	sp, #40	@ 0x28
 8011864:	af00      	add	r7, sp, #0
 8011866:	60f8      	str	r0, [r7, #12]
 8011868:	60b9      	str	r1, [r7, #8]
 801186a:	603b      	str	r3, [r7, #0]
 801186c:	4613      	mov	r3, r2
 801186e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011870:	2301      	movs	r3, #1
 8011872:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d10d      	bne.n	8011896 <xTaskGenericNotify+0x36>
	__asm volatile
 801187a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801187e:	b672      	cpsid	i
 8011880:	f383 8811 	msr	BASEPRI, r3
 8011884:	f3bf 8f6f 	isb	sy
 8011888:	f3bf 8f4f 	dsb	sy
 801188c:	b662      	cpsie	i
 801188e:	61bb      	str	r3, [r7, #24]
}
 8011890:	bf00      	nop
 8011892:	bf00      	nop
 8011894:	e7fd      	b.n	8011892 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801189a:	f000 fd77 	bl	801238c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801189e:	683b      	ldr	r3, [r7, #0]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d004      	beq.n	80118ae <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80118a4:	6a3b      	ldr	r3, [r7, #32]
 80118a6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80118ae:	6a3b      	ldr	r3, [r7, #32]
 80118b0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80118b4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80118b6:	6a3b      	ldr	r3, [r7, #32]
 80118b8:	2202      	movs	r2, #2
 80118ba:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80118be:	79fb      	ldrb	r3, [r7, #7]
 80118c0:	2b04      	cmp	r3, #4
 80118c2:	d82e      	bhi.n	8011922 <xTaskGenericNotify+0xc2>
 80118c4:	a201      	add	r2, pc, #4	@ (adr r2, 80118cc <xTaskGenericNotify+0x6c>)
 80118c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118ca:	bf00      	nop
 80118cc:	0801194b 	.word	0x0801194b
 80118d0:	080118e1 	.word	0x080118e1
 80118d4:	080118f3 	.word	0x080118f3
 80118d8:	08011903 	.word	0x08011903
 80118dc:	0801190d 	.word	0x0801190d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80118e0:	6a3b      	ldr	r3, [r7, #32]
 80118e2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80118e6:	68bb      	ldr	r3, [r7, #8]
 80118e8:	431a      	orrs	r2, r3
 80118ea:	6a3b      	ldr	r3, [r7, #32]
 80118ec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80118f0:	e02e      	b.n	8011950 <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80118f2:	6a3b      	ldr	r3, [r7, #32]
 80118f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80118f8:	1c5a      	adds	r2, r3, #1
 80118fa:	6a3b      	ldr	r3, [r7, #32]
 80118fc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8011900:	e026      	b.n	8011950 <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011902:	6a3b      	ldr	r3, [r7, #32]
 8011904:	68ba      	ldr	r2, [r7, #8]
 8011906:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 801190a:	e021      	b.n	8011950 <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801190c:	7ffb      	ldrb	r3, [r7, #31]
 801190e:	2b02      	cmp	r3, #2
 8011910:	d004      	beq.n	801191c <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011912:	6a3b      	ldr	r3, [r7, #32]
 8011914:	68ba      	ldr	r2, [r7, #8]
 8011916:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801191a:	e019      	b.n	8011950 <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 801191c:	2300      	movs	r3, #0
 801191e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8011920:	e016      	b.n	8011950 <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011922:	6a3b      	ldr	r3, [r7, #32]
 8011924:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011928:	f1b3 3fff 	cmp.w	r3, #4294967295
 801192c:	d00f      	beq.n	801194e <xTaskGenericNotify+0xee>
	__asm volatile
 801192e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011932:	b672      	cpsid	i
 8011934:	f383 8811 	msr	BASEPRI, r3
 8011938:	f3bf 8f6f 	isb	sy
 801193c:	f3bf 8f4f 	dsb	sy
 8011940:	b662      	cpsie	i
 8011942:	617b      	str	r3, [r7, #20]
}
 8011944:	bf00      	nop
 8011946:	bf00      	nop
 8011948:	e7fd      	b.n	8011946 <xTaskGenericNotify+0xe6>
					break;
 801194a:	bf00      	nop
 801194c:	e000      	b.n	8011950 <xTaskGenericNotify+0xf0>

					break;
 801194e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011950:	7ffb      	ldrb	r3, [r7, #31]
 8011952:	2b01      	cmp	r3, #1
 8011954:	d13d      	bne.n	80119d2 <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011956:	6a3b      	ldr	r3, [r7, #32]
 8011958:	3304      	adds	r3, #4
 801195a:	4618      	mov	r0, r3
 801195c:	f7fd fd86 	bl	800f46c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8011960:	6a3b      	ldr	r3, [r7, #32]
 8011962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011964:	4b1e      	ldr	r3, [pc, #120]	@ (80119e0 <xTaskGenericNotify+0x180>)
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	429a      	cmp	r2, r3
 801196a:	d903      	bls.n	8011974 <xTaskGenericNotify+0x114>
 801196c:	6a3b      	ldr	r3, [r7, #32]
 801196e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011970:	4a1b      	ldr	r2, [pc, #108]	@ (80119e0 <xTaskGenericNotify+0x180>)
 8011972:	6013      	str	r3, [r2, #0]
 8011974:	6a3b      	ldr	r3, [r7, #32]
 8011976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011978:	4613      	mov	r3, r2
 801197a:	009b      	lsls	r3, r3, #2
 801197c:	4413      	add	r3, r2
 801197e:	009b      	lsls	r3, r3, #2
 8011980:	4a18      	ldr	r2, [pc, #96]	@ (80119e4 <xTaskGenericNotify+0x184>)
 8011982:	441a      	add	r2, r3
 8011984:	6a3b      	ldr	r3, [r7, #32]
 8011986:	3304      	adds	r3, #4
 8011988:	4619      	mov	r1, r3
 801198a:	4610      	mov	r0, r2
 801198c:	f7fd fd11 	bl	800f3b2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011990:	6a3b      	ldr	r3, [r7, #32]
 8011992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011994:	2b00      	cmp	r3, #0
 8011996:	d00d      	beq.n	80119b4 <xTaskGenericNotify+0x154>
	__asm volatile
 8011998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801199c:	b672      	cpsid	i
 801199e:	f383 8811 	msr	BASEPRI, r3
 80119a2:	f3bf 8f6f 	isb	sy
 80119a6:	f3bf 8f4f 	dsb	sy
 80119aa:	b662      	cpsie	i
 80119ac:	613b      	str	r3, [r7, #16]
}
 80119ae:	bf00      	nop
 80119b0:	bf00      	nop
 80119b2:	e7fd      	b.n	80119b0 <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80119b4:	6a3b      	ldr	r3, [r7, #32]
 80119b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80119b8:	4b0b      	ldr	r3, [pc, #44]	@ (80119e8 <xTaskGenericNotify+0x188>)
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119be:	429a      	cmp	r2, r3
 80119c0:	d907      	bls.n	80119d2 <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80119c2:	4b0a      	ldr	r3, [pc, #40]	@ (80119ec <xTaskGenericNotify+0x18c>)
 80119c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80119c8:	601a      	str	r2, [r3, #0]
 80119ca:	f3bf 8f4f 	dsb	sy
 80119ce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80119d2:	f000 fd11 	bl	80123f8 <vPortExitCritical>

		return xReturn;
 80119d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80119d8:	4618      	mov	r0, r3
 80119da:	3728      	adds	r7, #40	@ 0x28
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}
 80119e0:	2000b530 	.word	0x2000b530
 80119e4:	2000b058 	.word	0x2000b058
 80119e8:	2000b054 	.word	0x2000b054
 80119ec:	e000ed04 	.word	0xe000ed04

080119f0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b084      	sub	sp, #16
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
 80119f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80119fa:	4b21      	ldr	r3, [pc, #132]	@ (8011a80 <prvAddCurrentTaskToDelayedList+0x90>)
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a00:	4b20      	ldr	r3, [pc, #128]	@ (8011a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	3304      	adds	r3, #4
 8011a06:	4618      	mov	r0, r3
 8011a08:	f7fd fd30 	bl	800f46c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a12:	d10a      	bne.n	8011a2a <prvAddCurrentTaskToDelayedList+0x3a>
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d007      	beq.n	8011a2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8011a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	3304      	adds	r3, #4
 8011a20:	4619      	mov	r1, r3
 8011a22:	4819      	ldr	r0, [pc, #100]	@ (8011a88 <prvAddCurrentTaskToDelayedList+0x98>)
 8011a24:	f7fd fcc5 	bl	800f3b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011a28:	e026      	b.n	8011a78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011a2a:	68fa      	ldr	r2, [r7, #12]
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	4413      	add	r3, r2
 8011a30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011a32:	4b14      	ldr	r3, [pc, #80]	@ (8011a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	68ba      	ldr	r2, [r7, #8]
 8011a38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011a3a:	68ba      	ldr	r2, [r7, #8]
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	429a      	cmp	r2, r3
 8011a40:	d209      	bcs.n	8011a56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a42:	4b12      	ldr	r3, [pc, #72]	@ (8011a8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8011a44:	681a      	ldr	r2, [r3, #0]
 8011a46:	4b0f      	ldr	r3, [pc, #60]	@ (8011a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	3304      	adds	r3, #4
 8011a4c:	4619      	mov	r1, r3
 8011a4e:	4610      	mov	r0, r2
 8011a50:	f7fd fcd3 	bl	800f3fa <vListInsert>
}
 8011a54:	e010      	b.n	8011a78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a56:	4b0e      	ldr	r3, [pc, #56]	@ (8011a90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011a58:	681a      	ldr	r2, [r3, #0]
 8011a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8011a84 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	3304      	adds	r3, #4
 8011a60:	4619      	mov	r1, r3
 8011a62:	4610      	mov	r0, r2
 8011a64:	f7fd fcc9 	bl	800f3fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011a68:	4b0a      	ldr	r3, [pc, #40]	@ (8011a94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	68ba      	ldr	r2, [r7, #8]
 8011a6e:	429a      	cmp	r2, r3
 8011a70:	d202      	bcs.n	8011a78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011a72:	4a08      	ldr	r2, [pc, #32]	@ (8011a94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011a74:	68bb      	ldr	r3, [r7, #8]
 8011a76:	6013      	str	r3, [r2, #0]
}
 8011a78:	bf00      	nop
 8011a7a:	3710      	adds	r7, #16
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}
 8011a80:	2000b52c 	.word	0x2000b52c
 8011a84:	2000b054 	.word	0x2000b054
 8011a88:	2000b514 	.word	0x2000b514
 8011a8c:	2000b4e4 	.word	0x2000b4e4
 8011a90:	2000b4e0 	.word	0x2000b4e0
 8011a94:	2000b548 	.word	0x2000b548

08011a98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b08a      	sub	sp, #40	@ 0x28
 8011a9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011aa2:	f000 fb21 	bl	80120e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8011b20 <xTimerCreateTimerTask+0x88>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d021      	beq.n	8011af2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011aae:	2300      	movs	r3, #0
 8011ab0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011ab6:	1d3a      	adds	r2, r7, #4
 8011ab8:	f107 0108 	add.w	r1, r7, #8
 8011abc:	f107 030c 	add.w	r3, r7, #12
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f7fd fc2f 	bl	800f324 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011ac6:	6879      	ldr	r1, [r7, #4]
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	68fa      	ldr	r2, [r7, #12]
 8011acc:	9202      	str	r2, [sp, #8]
 8011ace:	9301      	str	r3, [sp, #4]
 8011ad0:	2302      	movs	r3, #2
 8011ad2:	9300      	str	r3, [sp, #0]
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	460a      	mov	r2, r1
 8011ad8:	4912      	ldr	r1, [pc, #72]	@ (8011b24 <xTimerCreateTimerTask+0x8c>)
 8011ada:	4813      	ldr	r0, [pc, #76]	@ (8011b28 <xTimerCreateTimerTask+0x90>)
 8011adc:	f7fe fe20 	bl	8010720 <xTaskCreateStatic>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	4a12      	ldr	r2, [pc, #72]	@ (8011b2c <xTimerCreateTimerTask+0x94>)
 8011ae4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011ae6:	4b11      	ldr	r3, [pc, #68]	@ (8011b2c <xTimerCreateTimerTask+0x94>)
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d001      	beq.n	8011af2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011aee:	2301      	movs	r3, #1
 8011af0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011af2:	697b      	ldr	r3, [r7, #20]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d10d      	bne.n	8011b14 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8011af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011afc:	b672      	cpsid	i
 8011afe:	f383 8811 	msr	BASEPRI, r3
 8011b02:	f3bf 8f6f 	isb	sy
 8011b06:	f3bf 8f4f 	dsb	sy
 8011b0a:	b662      	cpsie	i
 8011b0c:	613b      	str	r3, [r7, #16]
}
 8011b0e:	bf00      	nop
 8011b10:	bf00      	nop
 8011b12:	e7fd      	b.n	8011b10 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8011b14:	697b      	ldr	r3, [r7, #20]
}
 8011b16:	4618      	mov	r0, r3
 8011b18:	3718      	adds	r7, #24
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}
 8011b1e:	bf00      	nop
 8011b20:	2000b584 	.word	0x2000b584
 8011b24:	0801f278 	.word	0x0801f278
 8011b28:	08011c71 	.word	0x08011c71
 8011b2c:	2000b588 	.word	0x2000b588

08011b30 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b08a      	sub	sp, #40	@ 0x28
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	60f8      	str	r0, [r7, #12]
 8011b38:	60b9      	str	r1, [r7, #8]
 8011b3a:	607a      	str	r2, [r7, #4]
 8011b3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011b3e:	2300      	movs	r3, #0
 8011b40:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d10d      	bne.n	8011b64 <xTimerGenericCommand+0x34>
	__asm volatile
 8011b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b4c:	b672      	cpsid	i
 8011b4e:	f383 8811 	msr	BASEPRI, r3
 8011b52:	f3bf 8f6f 	isb	sy
 8011b56:	f3bf 8f4f 	dsb	sy
 8011b5a:	b662      	cpsie	i
 8011b5c:	623b      	str	r3, [r7, #32]
}
 8011b5e:	bf00      	nop
 8011b60:	bf00      	nop
 8011b62:	e7fd      	b.n	8011b60 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011b64:	4b19      	ldr	r3, [pc, #100]	@ (8011bcc <xTimerGenericCommand+0x9c>)
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d02a      	beq.n	8011bc2 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011b6c:	68bb      	ldr	r3, [r7, #8]
 8011b6e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011b78:	68bb      	ldr	r3, [r7, #8]
 8011b7a:	2b05      	cmp	r3, #5
 8011b7c:	dc18      	bgt.n	8011bb0 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011b7e:	f7ff fc8d 	bl	801149c <xTaskGetSchedulerState>
 8011b82:	4603      	mov	r3, r0
 8011b84:	2b02      	cmp	r3, #2
 8011b86:	d109      	bne.n	8011b9c <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011b88:	4b10      	ldr	r3, [pc, #64]	@ (8011bcc <xTimerGenericCommand+0x9c>)
 8011b8a:	6818      	ldr	r0, [r3, #0]
 8011b8c:	f107 0110 	add.w	r1, r7, #16
 8011b90:	2300      	movs	r3, #0
 8011b92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011b94:	f7fd ff20 	bl	800f9d8 <xQueueGenericSend>
 8011b98:	6278      	str	r0, [r7, #36]	@ 0x24
 8011b9a:	e012      	b.n	8011bc2 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8011bcc <xTimerGenericCommand+0x9c>)
 8011b9e:	6818      	ldr	r0, [r3, #0]
 8011ba0:	f107 0110 	add.w	r1, r7, #16
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	f7fd ff16 	bl	800f9d8 <xQueueGenericSend>
 8011bac:	6278      	str	r0, [r7, #36]	@ 0x24
 8011bae:	e008      	b.n	8011bc2 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011bb0:	4b06      	ldr	r3, [pc, #24]	@ (8011bcc <xTimerGenericCommand+0x9c>)
 8011bb2:	6818      	ldr	r0, [r3, #0]
 8011bb4:	f107 0110 	add.w	r1, r7, #16
 8011bb8:	2300      	movs	r3, #0
 8011bba:	683a      	ldr	r2, [r7, #0]
 8011bbc:	f7fe f816 	bl	800fbec <xQueueGenericSendFromISR>
 8011bc0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	3728      	adds	r7, #40	@ 0x28
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}
 8011bcc:	2000b584 	.word	0x2000b584

08011bd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b088      	sub	sp, #32
 8011bd4:	af02      	add	r7, sp, #8
 8011bd6:	6078      	str	r0, [r7, #4]
 8011bd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011bda:	4b24      	ldr	r3, [pc, #144]	@ (8011c6c <prvProcessExpiredTimer+0x9c>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	68db      	ldr	r3, [r3, #12]
 8011be0:	68db      	ldr	r3, [r3, #12]
 8011be2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011be4:	697b      	ldr	r3, [r7, #20]
 8011be6:	3304      	adds	r3, #4
 8011be8:	4618      	mov	r0, r3
 8011bea:	f7fd fc3f 	bl	800f46c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011bee:	697b      	ldr	r3, [r7, #20]
 8011bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011bf4:	f003 0304 	and.w	r3, r3, #4
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d025      	beq.n	8011c48 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011bfc:	697b      	ldr	r3, [r7, #20]
 8011bfe:	699a      	ldr	r2, [r3, #24]
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	18d1      	adds	r1, r2, r3
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	683a      	ldr	r2, [r7, #0]
 8011c08:	6978      	ldr	r0, [r7, #20]
 8011c0a:	f000 f8d7 	bl	8011dbc <prvInsertTimerInActiveList>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d022      	beq.n	8011c5a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011c14:	2300      	movs	r3, #0
 8011c16:	9300      	str	r3, [sp, #0]
 8011c18:	2300      	movs	r3, #0
 8011c1a:	687a      	ldr	r2, [r7, #4]
 8011c1c:	2100      	movs	r1, #0
 8011c1e:	6978      	ldr	r0, [r7, #20]
 8011c20:	f7ff ff86 	bl	8011b30 <xTimerGenericCommand>
 8011c24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011c26:	693b      	ldr	r3, [r7, #16]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d116      	bne.n	8011c5a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8011c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c30:	b672      	cpsid	i
 8011c32:	f383 8811 	msr	BASEPRI, r3
 8011c36:	f3bf 8f6f 	isb	sy
 8011c3a:	f3bf 8f4f 	dsb	sy
 8011c3e:	b662      	cpsie	i
 8011c40:	60fb      	str	r3, [r7, #12]
}
 8011c42:	bf00      	nop
 8011c44:	bf00      	nop
 8011c46:	e7fd      	b.n	8011c44 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011c4e:	f023 0301 	bic.w	r3, r3, #1
 8011c52:	b2da      	uxtb	r2, r3
 8011c54:	697b      	ldr	r3, [r7, #20]
 8011c56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011c5a:	697b      	ldr	r3, [r7, #20]
 8011c5c:	6a1b      	ldr	r3, [r3, #32]
 8011c5e:	6978      	ldr	r0, [r7, #20]
 8011c60:	4798      	blx	r3
}
 8011c62:	bf00      	nop
 8011c64:	3718      	adds	r7, #24
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}
 8011c6a:	bf00      	nop
 8011c6c:	2000b57c 	.word	0x2000b57c

08011c70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b084      	sub	sp, #16
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011c78:	f107 0308 	add.w	r3, r7, #8
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f000 f859 	bl	8011d34 <prvGetNextExpireTime>
 8011c82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011c84:	68bb      	ldr	r3, [r7, #8]
 8011c86:	4619      	mov	r1, r3
 8011c88:	68f8      	ldr	r0, [r7, #12]
 8011c8a:	f000 f805 	bl	8011c98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011c8e:	f000 f8d7 	bl	8011e40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011c92:	bf00      	nop
 8011c94:	e7f0      	b.n	8011c78 <prvTimerTask+0x8>
	...

08011c98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b084      	sub	sp, #16
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011ca2:	f7fe ffaf 	bl	8010c04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011ca6:	f107 0308 	add.w	r3, r7, #8
 8011caa:	4618      	mov	r0, r3
 8011cac:	f000 f866 	bl	8011d7c <prvSampleTimeNow>
 8011cb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d130      	bne.n	8011d1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d10a      	bne.n	8011cd4 <prvProcessTimerOrBlockTask+0x3c>
 8011cbe:	687a      	ldr	r2, [r7, #4]
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	d806      	bhi.n	8011cd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011cc6:	f7fe ffab 	bl	8010c20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011cca:	68f9      	ldr	r1, [r7, #12]
 8011ccc:	6878      	ldr	r0, [r7, #4]
 8011cce:	f7ff ff7f 	bl	8011bd0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011cd2:	e024      	b.n	8011d1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d008      	beq.n	8011cec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011cda:	4b13      	ldr	r3, [pc, #76]	@ (8011d28 <prvProcessTimerOrBlockTask+0x90>)
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d101      	bne.n	8011ce8 <prvProcessTimerOrBlockTask+0x50>
 8011ce4:	2301      	movs	r3, #1
 8011ce6:	e000      	b.n	8011cea <prvProcessTimerOrBlockTask+0x52>
 8011ce8:	2300      	movs	r3, #0
 8011cea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011cec:	4b0f      	ldr	r3, [pc, #60]	@ (8011d2c <prvProcessTimerOrBlockTask+0x94>)
 8011cee:	6818      	ldr	r0, [r3, #0]
 8011cf0:	687a      	ldr	r2, [r7, #4]
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	1ad3      	subs	r3, r2, r3
 8011cf6:	683a      	ldr	r2, [r7, #0]
 8011cf8:	4619      	mov	r1, r3
 8011cfa:	f7fe fcdd 	bl	80106b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011cfe:	f7fe ff8f 	bl	8010c20 <xTaskResumeAll>
 8011d02:	4603      	mov	r3, r0
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d10a      	bne.n	8011d1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011d08:	4b09      	ldr	r3, [pc, #36]	@ (8011d30 <prvProcessTimerOrBlockTask+0x98>)
 8011d0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011d0e:	601a      	str	r2, [r3, #0]
 8011d10:	f3bf 8f4f 	dsb	sy
 8011d14:	f3bf 8f6f 	isb	sy
}
 8011d18:	e001      	b.n	8011d1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011d1a:	f7fe ff81 	bl	8010c20 <xTaskResumeAll>
}
 8011d1e:	bf00      	nop
 8011d20:	3710      	adds	r7, #16
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bd80      	pop	{r7, pc}
 8011d26:	bf00      	nop
 8011d28:	2000b580 	.word	0x2000b580
 8011d2c:	2000b584 	.word	0x2000b584
 8011d30:	e000ed04 	.word	0xe000ed04

08011d34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011d34:	b480      	push	{r7}
 8011d36:	b085      	sub	sp, #20
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8011d78 <prvGetNextExpireTime+0x44>)
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d101      	bne.n	8011d4a <prvGetNextExpireTime+0x16>
 8011d46:	2201      	movs	r2, #1
 8011d48:	e000      	b.n	8011d4c <prvGetNextExpireTime+0x18>
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d105      	bne.n	8011d64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011d58:	4b07      	ldr	r3, [pc, #28]	@ (8011d78 <prvGetNextExpireTime+0x44>)
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	68db      	ldr	r3, [r3, #12]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	60fb      	str	r3, [r7, #12]
 8011d62:	e001      	b.n	8011d68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011d64:	2300      	movs	r3, #0
 8011d66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011d68:	68fb      	ldr	r3, [r7, #12]
}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3714      	adds	r7, #20
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d74:	4770      	bx	lr
 8011d76:	bf00      	nop
 8011d78:	2000b57c 	.word	0x2000b57c

08011d7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b084      	sub	sp, #16
 8011d80:	af00      	add	r7, sp, #0
 8011d82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011d84:	f7fe ffec 	bl	8010d60 <xTaskGetTickCount>
 8011d88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8011db8 <prvSampleTimeNow+0x3c>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	68fa      	ldr	r2, [r7, #12]
 8011d90:	429a      	cmp	r2, r3
 8011d92:	d205      	bcs.n	8011da0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011d94:	f000 f940 	bl	8012018 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	2201      	movs	r2, #1
 8011d9c:	601a      	str	r2, [r3, #0]
 8011d9e:	e002      	b.n	8011da6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	2200      	movs	r2, #0
 8011da4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011da6:	4a04      	ldr	r2, [pc, #16]	@ (8011db8 <prvSampleTimeNow+0x3c>)
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011dac:	68fb      	ldr	r3, [r7, #12]
}
 8011dae:	4618      	mov	r0, r3
 8011db0:	3710      	adds	r7, #16
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd80      	pop	{r7, pc}
 8011db6:	bf00      	nop
 8011db8:	2000b58c 	.word	0x2000b58c

08011dbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b086      	sub	sp, #24
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	60f8      	str	r0, [r7, #12]
 8011dc4:	60b9      	str	r1, [r7, #8]
 8011dc6:	607a      	str	r2, [r7, #4]
 8011dc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011dca:	2300      	movs	r3, #0
 8011dcc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	68ba      	ldr	r2, [r7, #8]
 8011dd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	68fa      	ldr	r2, [r7, #12]
 8011dd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011dda:	68ba      	ldr	r2, [r7, #8]
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	429a      	cmp	r2, r3
 8011de0:	d812      	bhi.n	8011e08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011de2:	687a      	ldr	r2, [r7, #4]
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	1ad2      	subs	r2, r2, r3
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	699b      	ldr	r3, [r3, #24]
 8011dec:	429a      	cmp	r2, r3
 8011dee:	d302      	bcc.n	8011df6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011df0:	2301      	movs	r3, #1
 8011df2:	617b      	str	r3, [r7, #20]
 8011df4:	e01b      	b.n	8011e2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011df6:	4b10      	ldr	r3, [pc, #64]	@ (8011e38 <prvInsertTimerInActiveList+0x7c>)
 8011df8:	681a      	ldr	r2, [r3, #0]
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	3304      	adds	r3, #4
 8011dfe:	4619      	mov	r1, r3
 8011e00:	4610      	mov	r0, r2
 8011e02:	f7fd fafa 	bl	800f3fa <vListInsert>
 8011e06:	e012      	b.n	8011e2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011e08:	687a      	ldr	r2, [r7, #4]
 8011e0a:	683b      	ldr	r3, [r7, #0]
 8011e0c:	429a      	cmp	r2, r3
 8011e0e:	d206      	bcs.n	8011e1e <prvInsertTimerInActiveList+0x62>
 8011e10:	68ba      	ldr	r2, [r7, #8]
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d302      	bcc.n	8011e1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011e18:	2301      	movs	r3, #1
 8011e1a:	617b      	str	r3, [r7, #20]
 8011e1c:	e007      	b.n	8011e2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011e1e:	4b07      	ldr	r3, [pc, #28]	@ (8011e3c <prvInsertTimerInActiveList+0x80>)
 8011e20:	681a      	ldr	r2, [r3, #0]
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	3304      	adds	r3, #4
 8011e26:	4619      	mov	r1, r3
 8011e28:	4610      	mov	r0, r2
 8011e2a:	f7fd fae6 	bl	800f3fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011e2e:	697b      	ldr	r3, [r7, #20]
}
 8011e30:	4618      	mov	r0, r3
 8011e32:	3718      	adds	r7, #24
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}
 8011e38:	2000b580 	.word	0x2000b580
 8011e3c:	2000b57c 	.word	0x2000b57c

08011e40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b08e      	sub	sp, #56	@ 0x38
 8011e44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011e46:	e0d4      	b.n	8011ff2 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	da1b      	bge.n	8011e86 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011e4e:	1d3b      	adds	r3, r7, #4
 8011e50:	3304      	adds	r3, #4
 8011e52:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d10d      	bne.n	8011e76 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8011e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e5e:	b672      	cpsid	i
 8011e60:	f383 8811 	msr	BASEPRI, r3
 8011e64:	f3bf 8f6f 	isb	sy
 8011e68:	f3bf 8f4f 	dsb	sy
 8011e6c:	b662      	cpsie	i
 8011e6e:	61fb      	str	r3, [r7, #28]
}
 8011e70:	bf00      	nop
 8011e72:	bf00      	nop
 8011e74:	e7fd      	b.n	8011e72 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011e7c:	6850      	ldr	r0, [r2, #4]
 8011e7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011e80:	6892      	ldr	r2, [r2, #8]
 8011e82:	4611      	mov	r1, r2
 8011e84:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	f2c0 80b2 	blt.w	8011ff2 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e94:	695b      	ldr	r3, [r3, #20]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d004      	beq.n	8011ea4 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e9c:	3304      	adds	r3, #4
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f7fd fae4 	bl	800f46c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011ea4:	463b      	mov	r3, r7
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	f7ff ff68 	bl	8011d7c <prvSampleTimeNow>
 8011eac:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	2b09      	cmp	r3, #9
 8011eb2:	f200 809b 	bhi.w	8011fec <prvProcessReceivedCommands+0x1ac>
 8011eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8011ebc <prvProcessReceivedCommands+0x7c>)
 8011eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ebc:	08011ee5 	.word	0x08011ee5
 8011ec0:	08011ee5 	.word	0x08011ee5
 8011ec4:	08011ee5 	.word	0x08011ee5
 8011ec8:	08011f5f 	.word	0x08011f5f
 8011ecc:	08011f73 	.word	0x08011f73
 8011ed0:	08011fc3 	.word	0x08011fc3
 8011ed4:	08011ee5 	.word	0x08011ee5
 8011ed8:	08011ee5 	.word	0x08011ee5
 8011edc:	08011f5f 	.word	0x08011f5f
 8011ee0:	08011f73 	.word	0x08011f73
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ee6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011eea:	f043 0301 	orr.w	r3, r3, #1
 8011eee:	b2da      	uxtb	r2, r3
 8011ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ef2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011ef6:	68ba      	ldr	r2, [r7, #8]
 8011ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011efa:	699b      	ldr	r3, [r3, #24]
 8011efc:	18d1      	adds	r1, r2, r3
 8011efe:	68bb      	ldr	r3, [r7, #8]
 8011f00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f04:	f7ff ff5a 	bl	8011dbc <prvInsertTimerInActiveList>
 8011f08:	4603      	mov	r3, r0
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d070      	beq.n	8011ff0 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f10:	6a1b      	ldr	r3, [r3, #32]
 8011f12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011f1c:	f003 0304 	and.w	r3, r3, #4
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d065      	beq.n	8011ff0 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011f24:	68ba      	ldr	r2, [r7, #8]
 8011f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f28:	699b      	ldr	r3, [r3, #24]
 8011f2a:	441a      	add	r2, r3
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	9300      	str	r3, [sp, #0]
 8011f30:	2300      	movs	r3, #0
 8011f32:	2100      	movs	r1, #0
 8011f34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f36:	f7ff fdfb 	bl	8011b30 <xTimerGenericCommand>
 8011f3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011f3c:	6a3b      	ldr	r3, [r7, #32]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d156      	bne.n	8011ff0 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8011f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f46:	b672      	cpsid	i
 8011f48:	f383 8811 	msr	BASEPRI, r3
 8011f4c:	f3bf 8f6f 	isb	sy
 8011f50:	f3bf 8f4f 	dsb	sy
 8011f54:	b662      	cpsie	i
 8011f56:	61bb      	str	r3, [r7, #24]
}
 8011f58:	bf00      	nop
 8011f5a:	bf00      	nop
 8011f5c:	e7fd      	b.n	8011f5a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011f64:	f023 0301 	bic.w	r3, r3, #1
 8011f68:	b2da      	uxtb	r2, r3
 8011f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011f70:	e03f      	b.n	8011ff2 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011f78:	f043 0301 	orr.w	r3, r3, #1
 8011f7c:	b2da      	uxtb	r2, r3
 8011f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011f84:	68ba      	ldr	r2, [r7, #8]
 8011f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f88:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f8c:	699b      	ldr	r3, [r3, #24]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d10d      	bne.n	8011fae <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8011f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f96:	b672      	cpsid	i
 8011f98:	f383 8811 	msr	BASEPRI, r3
 8011f9c:	f3bf 8f6f 	isb	sy
 8011fa0:	f3bf 8f4f 	dsb	sy
 8011fa4:	b662      	cpsie	i
 8011fa6:	617b      	str	r3, [r7, #20]
}
 8011fa8:	bf00      	nop
 8011faa:	bf00      	nop
 8011fac:	e7fd      	b.n	8011faa <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fb0:	699a      	ldr	r2, [r3, #24]
 8011fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fb4:	18d1      	adds	r1, r2, r3
 8011fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011fba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011fbc:	f7ff fefe 	bl	8011dbc <prvInsertTimerInActiveList>
					break;
 8011fc0:	e017      	b.n	8011ff2 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011fc8:	f003 0302 	and.w	r3, r3, #2
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d103      	bne.n	8011fd8 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8011fd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011fd2:	f000 fbd7 	bl	8012784 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011fd6:	e00c      	b.n	8011ff2 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011fde:	f023 0301 	bic.w	r3, r3, #1
 8011fe2:	b2da      	uxtb	r2, r3
 8011fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fe6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011fea:	e002      	b.n	8011ff2 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8011fec:	bf00      	nop
 8011fee:	e000      	b.n	8011ff2 <prvProcessReceivedCommands+0x1b2>
					break;
 8011ff0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011ff2:	4b08      	ldr	r3, [pc, #32]	@ (8012014 <prvProcessReceivedCommands+0x1d4>)
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	1d39      	adds	r1, r7, #4
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f7fd ff32 	bl	800fe64 <xQueueReceive>
 8012000:	4603      	mov	r3, r0
 8012002:	2b00      	cmp	r3, #0
 8012004:	f47f af20 	bne.w	8011e48 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8012008:	bf00      	nop
 801200a:	bf00      	nop
 801200c:	3730      	adds	r7, #48	@ 0x30
 801200e:	46bd      	mov	sp, r7
 8012010:	bd80      	pop	{r7, pc}
 8012012:	bf00      	nop
 8012014:	2000b584 	.word	0x2000b584

08012018 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b088      	sub	sp, #32
 801201c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801201e:	e04b      	b.n	80120b8 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012020:	4b2f      	ldr	r3, [pc, #188]	@ (80120e0 <prvSwitchTimerLists+0xc8>)
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	68db      	ldr	r3, [r3, #12]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801202a:	4b2d      	ldr	r3, [pc, #180]	@ (80120e0 <prvSwitchTimerLists+0xc8>)
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	68db      	ldr	r3, [r3, #12]
 8012030:	68db      	ldr	r3, [r3, #12]
 8012032:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	3304      	adds	r3, #4
 8012038:	4618      	mov	r0, r3
 801203a:	f7fd fa17 	bl	800f46c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	6a1b      	ldr	r3, [r3, #32]
 8012042:	68f8      	ldr	r0, [r7, #12]
 8012044:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801204c:	f003 0304 	and.w	r3, r3, #4
 8012050:	2b00      	cmp	r3, #0
 8012052:	d031      	beq.n	80120b8 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	699b      	ldr	r3, [r3, #24]
 8012058:	693a      	ldr	r2, [r7, #16]
 801205a:	4413      	add	r3, r2
 801205c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801205e:	68ba      	ldr	r2, [r7, #8]
 8012060:	693b      	ldr	r3, [r7, #16]
 8012062:	429a      	cmp	r2, r3
 8012064:	d90e      	bls.n	8012084 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	68ba      	ldr	r2, [r7, #8]
 801206a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	68fa      	ldr	r2, [r7, #12]
 8012070:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012072:	4b1b      	ldr	r3, [pc, #108]	@ (80120e0 <prvSwitchTimerLists+0xc8>)
 8012074:	681a      	ldr	r2, [r3, #0]
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	3304      	adds	r3, #4
 801207a:	4619      	mov	r1, r3
 801207c:	4610      	mov	r0, r2
 801207e:	f7fd f9bc 	bl	800f3fa <vListInsert>
 8012082:	e019      	b.n	80120b8 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012084:	2300      	movs	r3, #0
 8012086:	9300      	str	r3, [sp, #0]
 8012088:	2300      	movs	r3, #0
 801208a:	693a      	ldr	r2, [r7, #16]
 801208c:	2100      	movs	r1, #0
 801208e:	68f8      	ldr	r0, [r7, #12]
 8012090:	f7ff fd4e 	bl	8011b30 <xTimerGenericCommand>
 8012094:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d10d      	bne.n	80120b8 <prvSwitchTimerLists+0xa0>
	__asm volatile
 801209c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120a0:	b672      	cpsid	i
 80120a2:	f383 8811 	msr	BASEPRI, r3
 80120a6:	f3bf 8f6f 	isb	sy
 80120aa:	f3bf 8f4f 	dsb	sy
 80120ae:	b662      	cpsie	i
 80120b0:	603b      	str	r3, [r7, #0]
}
 80120b2:	bf00      	nop
 80120b4:	bf00      	nop
 80120b6:	e7fd      	b.n	80120b4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80120b8:	4b09      	ldr	r3, [pc, #36]	@ (80120e0 <prvSwitchTimerLists+0xc8>)
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d1ae      	bne.n	8012020 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80120c2:	4b07      	ldr	r3, [pc, #28]	@ (80120e0 <prvSwitchTimerLists+0xc8>)
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80120c8:	4b06      	ldr	r3, [pc, #24]	@ (80120e4 <prvSwitchTimerLists+0xcc>)
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	4a04      	ldr	r2, [pc, #16]	@ (80120e0 <prvSwitchTimerLists+0xc8>)
 80120ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80120d0:	4a04      	ldr	r2, [pc, #16]	@ (80120e4 <prvSwitchTimerLists+0xcc>)
 80120d2:	697b      	ldr	r3, [r7, #20]
 80120d4:	6013      	str	r3, [r2, #0]
}
 80120d6:	bf00      	nop
 80120d8:	3718      	adds	r7, #24
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd80      	pop	{r7, pc}
 80120de:	bf00      	nop
 80120e0:	2000b57c 	.word	0x2000b57c
 80120e4:	2000b580 	.word	0x2000b580

080120e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b082      	sub	sp, #8
 80120ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80120ee:	f000 f94d 	bl	801238c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80120f2:	4b15      	ldr	r3, [pc, #84]	@ (8012148 <prvCheckForValidListAndQueue+0x60>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d120      	bne.n	801213c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80120fa:	4814      	ldr	r0, [pc, #80]	@ (801214c <prvCheckForValidListAndQueue+0x64>)
 80120fc:	f7fd f92c 	bl	800f358 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012100:	4813      	ldr	r0, [pc, #76]	@ (8012150 <prvCheckForValidListAndQueue+0x68>)
 8012102:	f7fd f929 	bl	800f358 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012106:	4b13      	ldr	r3, [pc, #76]	@ (8012154 <prvCheckForValidListAndQueue+0x6c>)
 8012108:	4a10      	ldr	r2, [pc, #64]	@ (801214c <prvCheckForValidListAndQueue+0x64>)
 801210a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801210c:	4b12      	ldr	r3, [pc, #72]	@ (8012158 <prvCheckForValidListAndQueue+0x70>)
 801210e:	4a10      	ldr	r2, [pc, #64]	@ (8012150 <prvCheckForValidListAndQueue+0x68>)
 8012110:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012112:	2300      	movs	r3, #0
 8012114:	9300      	str	r3, [sp, #0]
 8012116:	4b11      	ldr	r3, [pc, #68]	@ (801215c <prvCheckForValidListAndQueue+0x74>)
 8012118:	4a11      	ldr	r2, [pc, #68]	@ (8012160 <prvCheckForValidListAndQueue+0x78>)
 801211a:	2110      	movs	r1, #16
 801211c:	200a      	movs	r0, #10
 801211e:	f7fd fa3b 	bl	800f598 <xQueueGenericCreateStatic>
 8012122:	4603      	mov	r3, r0
 8012124:	4a08      	ldr	r2, [pc, #32]	@ (8012148 <prvCheckForValidListAndQueue+0x60>)
 8012126:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012128:	4b07      	ldr	r3, [pc, #28]	@ (8012148 <prvCheckForValidListAndQueue+0x60>)
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d005      	beq.n	801213c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012130:	4b05      	ldr	r3, [pc, #20]	@ (8012148 <prvCheckForValidListAndQueue+0x60>)
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	490b      	ldr	r1, [pc, #44]	@ (8012164 <prvCheckForValidListAndQueue+0x7c>)
 8012136:	4618      	mov	r0, r3
 8012138:	f7fe fa6a 	bl	8010610 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801213c:	f000 f95c 	bl	80123f8 <vPortExitCritical>
}
 8012140:	bf00      	nop
 8012142:	46bd      	mov	sp, r7
 8012144:	bd80      	pop	{r7, pc}
 8012146:	bf00      	nop
 8012148:	2000b584 	.word	0x2000b584
 801214c:	2000b554 	.word	0x2000b554
 8012150:	2000b568 	.word	0x2000b568
 8012154:	2000b57c 	.word	0x2000b57c
 8012158:	2000b580 	.word	0x2000b580
 801215c:	2000b630 	.word	0x2000b630
 8012160:	2000b590 	.word	0x2000b590
 8012164:	0801f280 	.word	0x0801f280

08012168 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012168:	b480      	push	{r7}
 801216a:	b085      	sub	sp, #20
 801216c:	af00      	add	r7, sp, #0
 801216e:	60f8      	str	r0, [r7, #12]
 8012170:	60b9      	str	r1, [r7, #8]
 8012172:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	3b04      	subs	r3, #4
 8012178:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8012180:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	3b04      	subs	r3, #4
 8012186:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012188:	68bb      	ldr	r3, [r7, #8]
 801218a:	f023 0201 	bic.w	r2, r3, #1
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	3b04      	subs	r3, #4
 8012196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012198:	4a0c      	ldr	r2, [pc, #48]	@ (80121cc <pxPortInitialiseStack+0x64>)
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	3b14      	subs	r3, #20
 80121a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80121a4:	687a      	ldr	r2, [r7, #4]
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	3b04      	subs	r3, #4
 80121ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80121b0:	68fb      	ldr	r3, [r7, #12]
 80121b2:	f06f 0202 	mvn.w	r2, #2
 80121b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	3b20      	subs	r3, #32
 80121bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80121be:	68fb      	ldr	r3, [r7, #12]
}
 80121c0:	4618      	mov	r0, r3
 80121c2:	3714      	adds	r7, #20
 80121c4:	46bd      	mov	sp, r7
 80121c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ca:	4770      	bx	lr
 80121cc:	080121d1 	.word	0x080121d1

080121d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80121d0:	b480      	push	{r7}
 80121d2:	b085      	sub	sp, #20
 80121d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80121d6:	2300      	movs	r3, #0
 80121d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80121da:	4b15      	ldr	r3, [pc, #84]	@ (8012230 <prvTaskExitError+0x60>)
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121e2:	d00d      	beq.n	8012200 <prvTaskExitError+0x30>
	__asm volatile
 80121e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121e8:	b672      	cpsid	i
 80121ea:	f383 8811 	msr	BASEPRI, r3
 80121ee:	f3bf 8f6f 	isb	sy
 80121f2:	f3bf 8f4f 	dsb	sy
 80121f6:	b662      	cpsie	i
 80121f8:	60fb      	str	r3, [r7, #12]
}
 80121fa:	bf00      	nop
 80121fc:	bf00      	nop
 80121fe:	e7fd      	b.n	80121fc <prvTaskExitError+0x2c>
	__asm volatile
 8012200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012204:	b672      	cpsid	i
 8012206:	f383 8811 	msr	BASEPRI, r3
 801220a:	f3bf 8f6f 	isb	sy
 801220e:	f3bf 8f4f 	dsb	sy
 8012212:	b662      	cpsie	i
 8012214:	60bb      	str	r3, [r7, #8]
}
 8012216:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012218:	bf00      	nop
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d0fc      	beq.n	801221a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012220:	bf00      	nop
 8012222:	bf00      	nop
 8012224:	3714      	adds	r7, #20
 8012226:	46bd      	mov	sp, r7
 8012228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801222c:	4770      	bx	lr
 801222e:	bf00      	nop
 8012230:	20000020 	.word	0x20000020
	...

08012240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012240:	4b07      	ldr	r3, [pc, #28]	@ (8012260 <pxCurrentTCBConst2>)
 8012242:	6819      	ldr	r1, [r3, #0]
 8012244:	6808      	ldr	r0, [r1, #0]
 8012246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801224a:	f380 8809 	msr	PSP, r0
 801224e:	f3bf 8f6f 	isb	sy
 8012252:	f04f 0000 	mov.w	r0, #0
 8012256:	f380 8811 	msr	BASEPRI, r0
 801225a:	4770      	bx	lr
 801225c:	f3af 8000 	nop.w

08012260 <pxCurrentTCBConst2>:
 8012260:	2000b054 	.word	0x2000b054
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012264:	bf00      	nop
 8012266:	bf00      	nop

08012268 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012268:	4808      	ldr	r0, [pc, #32]	@ (801228c <prvPortStartFirstTask+0x24>)
 801226a:	6800      	ldr	r0, [r0, #0]
 801226c:	6800      	ldr	r0, [r0, #0]
 801226e:	f380 8808 	msr	MSP, r0
 8012272:	f04f 0000 	mov.w	r0, #0
 8012276:	f380 8814 	msr	CONTROL, r0
 801227a:	b662      	cpsie	i
 801227c:	b661      	cpsie	f
 801227e:	f3bf 8f4f 	dsb	sy
 8012282:	f3bf 8f6f 	isb	sy
 8012286:	df00      	svc	0
 8012288:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801228a:	bf00      	nop
 801228c:	e000ed08 	.word	0xe000ed08

08012290 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b084      	sub	sp, #16
 8012294:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012296:	4b37      	ldr	r3, [pc, #220]	@ (8012374 <xPortStartScheduler+0xe4>)
 8012298:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	781b      	ldrb	r3, [r3, #0]
 801229e:	b2db      	uxtb	r3, r3
 80122a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	22ff      	movs	r2, #255	@ 0xff
 80122a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	781b      	ldrb	r3, [r3, #0]
 80122ac:	b2db      	uxtb	r3, r3
 80122ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80122b0:	78fb      	ldrb	r3, [r7, #3]
 80122b2:	b2db      	uxtb	r3, r3
 80122b4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80122b8:	b2da      	uxtb	r2, r3
 80122ba:	4b2f      	ldr	r3, [pc, #188]	@ (8012378 <xPortStartScheduler+0xe8>)
 80122bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80122be:	4b2f      	ldr	r3, [pc, #188]	@ (801237c <xPortStartScheduler+0xec>)
 80122c0:	2207      	movs	r2, #7
 80122c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80122c4:	e009      	b.n	80122da <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80122c6:	4b2d      	ldr	r3, [pc, #180]	@ (801237c <xPortStartScheduler+0xec>)
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	3b01      	subs	r3, #1
 80122cc:	4a2b      	ldr	r2, [pc, #172]	@ (801237c <xPortStartScheduler+0xec>)
 80122ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80122d0:	78fb      	ldrb	r3, [r7, #3]
 80122d2:	b2db      	uxtb	r3, r3
 80122d4:	005b      	lsls	r3, r3, #1
 80122d6:	b2db      	uxtb	r3, r3
 80122d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80122da:	78fb      	ldrb	r3, [r7, #3]
 80122dc:	b2db      	uxtb	r3, r3
 80122de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80122e2:	2b80      	cmp	r3, #128	@ 0x80
 80122e4:	d0ef      	beq.n	80122c6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80122e6:	4b25      	ldr	r3, [pc, #148]	@ (801237c <xPortStartScheduler+0xec>)
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	f1c3 0307 	rsb	r3, r3, #7
 80122ee:	2b04      	cmp	r3, #4
 80122f0:	d00d      	beq.n	801230e <xPortStartScheduler+0x7e>
	__asm volatile
 80122f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122f6:	b672      	cpsid	i
 80122f8:	f383 8811 	msr	BASEPRI, r3
 80122fc:	f3bf 8f6f 	isb	sy
 8012300:	f3bf 8f4f 	dsb	sy
 8012304:	b662      	cpsie	i
 8012306:	60bb      	str	r3, [r7, #8]
}
 8012308:	bf00      	nop
 801230a:	bf00      	nop
 801230c:	e7fd      	b.n	801230a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801230e:	4b1b      	ldr	r3, [pc, #108]	@ (801237c <xPortStartScheduler+0xec>)
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	021b      	lsls	r3, r3, #8
 8012314:	4a19      	ldr	r2, [pc, #100]	@ (801237c <xPortStartScheduler+0xec>)
 8012316:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012318:	4b18      	ldr	r3, [pc, #96]	@ (801237c <xPortStartScheduler+0xec>)
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012320:	4a16      	ldr	r2, [pc, #88]	@ (801237c <xPortStartScheduler+0xec>)
 8012322:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	b2da      	uxtb	r2, r3
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801232c:	4b14      	ldr	r3, [pc, #80]	@ (8012380 <xPortStartScheduler+0xf0>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	4a13      	ldr	r2, [pc, #76]	@ (8012380 <xPortStartScheduler+0xf0>)
 8012332:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012336:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012338:	4b11      	ldr	r3, [pc, #68]	@ (8012380 <xPortStartScheduler+0xf0>)
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	4a10      	ldr	r2, [pc, #64]	@ (8012380 <xPortStartScheduler+0xf0>)
 801233e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012342:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012344:	f000 f8dc 	bl	8012500 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012348:	4b0e      	ldr	r3, [pc, #56]	@ (8012384 <xPortStartScheduler+0xf4>)
 801234a:	2200      	movs	r2, #0
 801234c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801234e:	f000 f8fb 	bl	8012548 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012352:	4b0d      	ldr	r3, [pc, #52]	@ (8012388 <xPortStartScheduler+0xf8>)
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	4a0c      	ldr	r2, [pc, #48]	@ (8012388 <xPortStartScheduler+0xf8>)
 8012358:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801235c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801235e:	f7ff ff83 	bl	8012268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012362:	f7fe fddb 	bl	8010f1c <vTaskSwitchContext>
	prvTaskExitError();
 8012366:	f7ff ff33 	bl	80121d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801236a:	2300      	movs	r3, #0
}
 801236c:	4618      	mov	r0, r3
 801236e:	3710      	adds	r7, #16
 8012370:	46bd      	mov	sp, r7
 8012372:	bd80      	pop	{r7, pc}
 8012374:	e000e400 	.word	0xe000e400
 8012378:	2000b680 	.word	0x2000b680
 801237c:	2000b684 	.word	0x2000b684
 8012380:	e000ed20 	.word	0xe000ed20
 8012384:	20000020 	.word	0x20000020
 8012388:	e000ef34 	.word	0xe000ef34

0801238c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801238c:	b480      	push	{r7}
 801238e:	b083      	sub	sp, #12
 8012390:	af00      	add	r7, sp, #0
	__asm volatile
 8012392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012396:	b672      	cpsid	i
 8012398:	f383 8811 	msr	BASEPRI, r3
 801239c:	f3bf 8f6f 	isb	sy
 80123a0:	f3bf 8f4f 	dsb	sy
 80123a4:	b662      	cpsie	i
 80123a6:	607b      	str	r3, [r7, #4]
}
 80123a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80123aa:	4b11      	ldr	r3, [pc, #68]	@ (80123f0 <vPortEnterCritical+0x64>)
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	3301      	adds	r3, #1
 80123b0:	4a0f      	ldr	r2, [pc, #60]	@ (80123f0 <vPortEnterCritical+0x64>)
 80123b2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80123b4:	4b0e      	ldr	r3, [pc, #56]	@ (80123f0 <vPortEnterCritical+0x64>)
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	2b01      	cmp	r3, #1
 80123ba:	d112      	bne.n	80123e2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80123bc:	4b0d      	ldr	r3, [pc, #52]	@ (80123f4 <vPortEnterCritical+0x68>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	b2db      	uxtb	r3, r3
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d00d      	beq.n	80123e2 <vPortEnterCritical+0x56>
	__asm volatile
 80123c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123ca:	b672      	cpsid	i
 80123cc:	f383 8811 	msr	BASEPRI, r3
 80123d0:	f3bf 8f6f 	isb	sy
 80123d4:	f3bf 8f4f 	dsb	sy
 80123d8:	b662      	cpsie	i
 80123da:	603b      	str	r3, [r7, #0]
}
 80123dc:	bf00      	nop
 80123de:	bf00      	nop
 80123e0:	e7fd      	b.n	80123de <vPortEnterCritical+0x52>
	}
}
 80123e2:	bf00      	nop
 80123e4:	370c      	adds	r7, #12
 80123e6:	46bd      	mov	sp, r7
 80123e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ec:	4770      	bx	lr
 80123ee:	bf00      	nop
 80123f0:	20000020 	.word	0x20000020
 80123f4:	e000ed04 	.word	0xe000ed04

080123f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80123f8:	b480      	push	{r7}
 80123fa:	b083      	sub	sp, #12
 80123fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80123fe:	4b13      	ldr	r3, [pc, #76]	@ (801244c <vPortExitCritical+0x54>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d10d      	bne.n	8012422 <vPortExitCritical+0x2a>
	__asm volatile
 8012406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801240a:	b672      	cpsid	i
 801240c:	f383 8811 	msr	BASEPRI, r3
 8012410:	f3bf 8f6f 	isb	sy
 8012414:	f3bf 8f4f 	dsb	sy
 8012418:	b662      	cpsie	i
 801241a:	607b      	str	r3, [r7, #4]
}
 801241c:	bf00      	nop
 801241e:	bf00      	nop
 8012420:	e7fd      	b.n	801241e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8012422:	4b0a      	ldr	r3, [pc, #40]	@ (801244c <vPortExitCritical+0x54>)
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	3b01      	subs	r3, #1
 8012428:	4a08      	ldr	r2, [pc, #32]	@ (801244c <vPortExitCritical+0x54>)
 801242a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801242c:	4b07      	ldr	r3, [pc, #28]	@ (801244c <vPortExitCritical+0x54>)
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d105      	bne.n	8012440 <vPortExitCritical+0x48>
 8012434:	2300      	movs	r3, #0
 8012436:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012438:	683b      	ldr	r3, [r7, #0]
 801243a:	f383 8811 	msr	BASEPRI, r3
}
 801243e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012440:	bf00      	nop
 8012442:	370c      	adds	r7, #12
 8012444:	46bd      	mov	sp, r7
 8012446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244a:	4770      	bx	lr
 801244c:	20000020 	.word	0x20000020

08012450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012450:	f3ef 8009 	mrs	r0, PSP
 8012454:	f3bf 8f6f 	isb	sy
 8012458:	4b15      	ldr	r3, [pc, #84]	@ (80124b0 <pxCurrentTCBConst>)
 801245a:	681a      	ldr	r2, [r3, #0]
 801245c:	f01e 0f10 	tst.w	lr, #16
 8012460:	bf08      	it	eq
 8012462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801246a:	6010      	str	r0, [r2, #0]
 801246c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012470:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012474:	b672      	cpsid	i
 8012476:	f380 8811 	msr	BASEPRI, r0
 801247a:	f3bf 8f4f 	dsb	sy
 801247e:	f3bf 8f6f 	isb	sy
 8012482:	b662      	cpsie	i
 8012484:	f7fe fd4a 	bl	8010f1c <vTaskSwitchContext>
 8012488:	f04f 0000 	mov.w	r0, #0
 801248c:	f380 8811 	msr	BASEPRI, r0
 8012490:	bc09      	pop	{r0, r3}
 8012492:	6819      	ldr	r1, [r3, #0]
 8012494:	6808      	ldr	r0, [r1, #0]
 8012496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801249a:	f01e 0f10 	tst.w	lr, #16
 801249e:	bf08      	it	eq
 80124a0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80124a4:	f380 8809 	msr	PSP, r0
 80124a8:	f3bf 8f6f 	isb	sy
 80124ac:	4770      	bx	lr
 80124ae:	bf00      	nop

080124b0 <pxCurrentTCBConst>:
 80124b0:	2000b054 	.word	0x2000b054
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80124b4:	bf00      	nop
 80124b6:	bf00      	nop

080124b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b082      	sub	sp, #8
 80124bc:	af00      	add	r7, sp, #0
	__asm volatile
 80124be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124c2:	b672      	cpsid	i
 80124c4:	f383 8811 	msr	BASEPRI, r3
 80124c8:	f3bf 8f6f 	isb	sy
 80124cc:	f3bf 8f4f 	dsb	sy
 80124d0:	b662      	cpsie	i
 80124d2:	607b      	str	r3, [r7, #4]
}
 80124d4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80124d6:	f7fe fc65 	bl	8010da4 <xTaskIncrementTick>
 80124da:	4603      	mov	r3, r0
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d003      	beq.n	80124e8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80124e0:	4b06      	ldr	r3, [pc, #24]	@ (80124fc <SysTick_Handler+0x44>)
 80124e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80124e6:	601a      	str	r2, [r3, #0]
 80124e8:	2300      	movs	r3, #0
 80124ea:	603b      	str	r3, [r7, #0]
	__asm volatile
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	f383 8811 	msr	BASEPRI, r3
}
 80124f2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80124f4:	bf00      	nop
 80124f6:	3708      	adds	r7, #8
 80124f8:	46bd      	mov	sp, r7
 80124fa:	bd80      	pop	{r7, pc}
 80124fc:	e000ed04 	.word	0xe000ed04

08012500 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012500:	b480      	push	{r7}
 8012502:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012504:	4b0b      	ldr	r3, [pc, #44]	@ (8012534 <vPortSetupTimerInterrupt+0x34>)
 8012506:	2200      	movs	r2, #0
 8012508:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801250a:	4b0b      	ldr	r3, [pc, #44]	@ (8012538 <vPortSetupTimerInterrupt+0x38>)
 801250c:	2200      	movs	r2, #0
 801250e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012510:	4b0a      	ldr	r3, [pc, #40]	@ (801253c <vPortSetupTimerInterrupt+0x3c>)
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	4a0a      	ldr	r2, [pc, #40]	@ (8012540 <vPortSetupTimerInterrupt+0x40>)
 8012516:	fba2 2303 	umull	r2, r3, r2, r3
 801251a:	099b      	lsrs	r3, r3, #6
 801251c:	4a09      	ldr	r2, [pc, #36]	@ (8012544 <vPortSetupTimerInterrupt+0x44>)
 801251e:	3b01      	subs	r3, #1
 8012520:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012522:	4b04      	ldr	r3, [pc, #16]	@ (8012534 <vPortSetupTimerInterrupt+0x34>)
 8012524:	2207      	movs	r2, #7
 8012526:	601a      	str	r2, [r3, #0]
}
 8012528:	bf00      	nop
 801252a:	46bd      	mov	sp, r7
 801252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012530:	4770      	bx	lr
 8012532:	bf00      	nop
 8012534:	e000e010 	.word	0xe000e010
 8012538:	e000e018 	.word	0xe000e018
 801253c:	20000000 	.word	0x20000000
 8012540:	10624dd3 	.word	0x10624dd3
 8012544:	e000e014 	.word	0xe000e014

08012548 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012548:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012558 <vPortEnableVFP+0x10>
 801254c:	6801      	ldr	r1, [r0, #0]
 801254e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8012552:	6001      	str	r1, [r0, #0]
 8012554:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012556:	bf00      	nop
 8012558:	e000ed88 	.word	0xe000ed88

0801255c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801255c:	b480      	push	{r7}
 801255e:	b085      	sub	sp, #20
 8012560:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012562:	f3ef 8305 	mrs	r3, IPSR
 8012566:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	2b0f      	cmp	r3, #15
 801256c:	d917      	bls.n	801259e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801256e:	4a1a      	ldr	r2, [pc, #104]	@ (80125d8 <vPortValidateInterruptPriority+0x7c>)
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	4413      	add	r3, r2
 8012574:	781b      	ldrb	r3, [r3, #0]
 8012576:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012578:	4b18      	ldr	r3, [pc, #96]	@ (80125dc <vPortValidateInterruptPriority+0x80>)
 801257a:	781b      	ldrb	r3, [r3, #0]
 801257c:	7afa      	ldrb	r2, [r7, #11]
 801257e:	429a      	cmp	r2, r3
 8012580:	d20d      	bcs.n	801259e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8012582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012586:	b672      	cpsid	i
 8012588:	f383 8811 	msr	BASEPRI, r3
 801258c:	f3bf 8f6f 	isb	sy
 8012590:	f3bf 8f4f 	dsb	sy
 8012594:	b662      	cpsie	i
 8012596:	607b      	str	r3, [r7, #4]
}
 8012598:	bf00      	nop
 801259a:	bf00      	nop
 801259c:	e7fd      	b.n	801259a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801259e:	4b10      	ldr	r3, [pc, #64]	@ (80125e0 <vPortValidateInterruptPriority+0x84>)
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80125a6:	4b0f      	ldr	r3, [pc, #60]	@ (80125e4 <vPortValidateInterruptPriority+0x88>)
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d90d      	bls.n	80125ca <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80125ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125b2:	b672      	cpsid	i
 80125b4:	f383 8811 	msr	BASEPRI, r3
 80125b8:	f3bf 8f6f 	isb	sy
 80125bc:	f3bf 8f4f 	dsb	sy
 80125c0:	b662      	cpsie	i
 80125c2:	603b      	str	r3, [r7, #0]
}
 80125c4:	bf00      	nop
 80125c6:	bf00      	nop
 80125c8:	e7fd      	b.n	80125c6 <vPortValidateInterruptPriority+0x6a>
	}
 80125ca:	bf00      	nop
 80125cc:	3714      	adds	r7, #20
 80125ce:	46bd      	mov	sp, r7
 80125d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d4:	4770      	bx	lr
 80125d6:	bf00      	nop
 80125d8:	e000e3f0 	.word	0xe000e3f0
 80125dc:	2000b680 	.word	0x2000b680
 80125e0:	e000ed0c 	.word	0xe000ed0c
 80125e4:	2000b684 	.word	0x2000b684

080125e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b08a      	sub	sp, #40	@ 0x28
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80125f0:	2300      	movs	r3, #0
 80125f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80125f4:	f7fe fb06 	bl	8010c04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80125f8:	4b5d      	ldr	r3, [pc, #372]	@ (8012770 <pvPortMalloc+0x188>)
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d101      	bne.n	8012604 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012600:	f000 f920 	bl	8012844 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012604:	4b5b      	ldr	r3, [pc, #364]	@ (8012774 <pvPortMalloc+0x18c>)
 8012606:	681a      	ldr	r2, [r3, #0]
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	4013      	ands	r3, r2
 801260c:	2b00      	cmp	r3, #0
 801260e:	f040 8094 	bne.w	801273a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d020      	beq.n	801265a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8012618:	2208      	movs	r2, #8
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	4413      	add	r3, r2
 801261e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	f003 0307 	and.w	r3, r3, #7
 8012626:	2b00      	cmp	r3, #0
 8012628:	d017      	beq.n	801265a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	f023 0307 	bic.w	r3, r3, #7
 8012630:	3308      	adds	r3, #8
 8012632:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	f003 0307 	and.w	r3, r3, #7
 801263a:	2b00      	cmp	r3, #0
 801263c:	d00d      	beq.n	801265a <pvPortMalloc+0x72>
	__asm volatile
 801263e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012642:	b672      	cpsid	i
 8012644:	f383 8811 	msr	BASEPRI, r3
 8012648:	f3bf 8f6f 	isb	sy
 801264c:	f3bf 8f4f 	dsb	sy
 8012650:	b662      	cpsie	i
 8012652:	617b      	str	r3, [r7, #20]
}
 8012654:	bf00      	nop
 8012656:	bf00      	nop
 8012658:	e7fd      	b.n	8012656 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d06c      	beq.n	801273a <pvPortMalloc+0x152>
 8012660:	4b45      	ldr	r3, [pc, #276]	@ (8012778 <pvPortMalloc+0x190>)
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	687a      	ldr	r2, [r7, #4]
 8012666:	429a      	cmp	r2, r3
 8012668:	d867      	bhi.n	801273a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801266a:	4b44      	ldr	r3, [pc, #272]	@ (801277c <pvPortMalloc+0x194>)
 801266c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801266e:	4b43      	ldr	r3, [pc, #268]	@ (801277c <pvPortMalloc+0x194>)
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012674:	e004      	b.n	8012680 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8012676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012678:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012682:	685b      	ldr	r3, [r3, #4]
 8012684:	687a      	ldr	r2, [r7, #4]
 8012686:	429a      	cmp	r2, r3
 8012688:	d903      	bls.n	8012692 <pvPortMalloc+0xaa>
 801268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d1f1      	bne.n	8012676 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012692:	4b37      	ldr	r3, [pc, #220]	@ (8012770 <pvPortMalloc+0x188>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012698:	429a      	cmp	r2, r3
 801269a:	d04e      	beq.n	801273a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801269c:	6a3b      	ldr	r3, [r7, #32]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	2208      	movs	r2, #8
 80126a2:	4413      	add	r3, r2
 80126a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80126a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126a8:	681a      	ldr	r2, [r3, #0]
 80126aa:	6a3b      	ldr	r3, [r7, #32]
 80126ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80126ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126b0:	685a      	ldr	r2, [r3, #4]
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	1ad2      	subs	r2, r2, r3
 80126b6:	2308      	movs	r3, #8
 80126b8:	005b      	lsls	r3, r3, #1
 80126ba:	429a      	cmp	r2, r3
 80126bc:	d922      	bls.n	8012704 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80126be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	4413      	add	r3, r2
 80126c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80126c6:	69bb      	ldr	r3, [r7, #24]
 80126c8:	f003 0307 	and.w	r3, r3, #7
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d00d      	beq.n	80126ec <pvPortMalloc+0x104>
	__asm volatile
 80126d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126d4:	b672      	cpsid	i
 80126d6:	f383 8811 	msr	BASEPRI, r3
 80126da:	f3bf 8f6f 	isb	sy
 80126de:	f3bf 8f4f 	dsb	sy
 80126e2:	b662      	cpsie	i
 80126e4:	613b      	str	r3, [r7, #16]
}
 80126e6:	bf00      	nop
 80126e8:	bf00      	nop
 80126ea:	e7fd      	b.n	80126e8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80126ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126ee:	685a      	ldr	r2, [r3, #4]
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	1ad2      	subs	r2, r2, r3
 80126f4:	69bb      	ldr	r3, [r7, #24]
 80126f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80126f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126fa:	687a      	ldr	r2, [r7, #4]
 80126fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80126fe:	69b8      	ldr	r0, [r7, #24]
 8012700:	f000 f902 	bl	8012908 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012704:	4b1c      	ldr	r3, [pc, #112]	@ (8012778 <pvPortMalloc+0x190>)
 8012706:	681a      	ldr	r2, [r3, #0]
 8012708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801270a:	685b      	ldr	r3, [r3, #4]
 801270c:	1ad3      	subs	r3, r2, r3
 801270e:	4a1a      	ldr	r2, [pc, #104]	@ (8012778 <pvPortMalloc+0x190>)
 8012710:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012712:	4b19      	ldr	r3, [pc, #100]	@ (8012778 <pvPortMalloc+0x190>)
 8012714:	681a      	ldr	r2, [r3, #0]
 8012716:	4b1a      	ldr	r3, [pc, #104]	@ (8012780 <pvPortMalloc+0x198>)
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	429a      	cmp	r2, r3
 801271c:	d203      	bcs.n	8012726 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801271e:	4b16      	ldr	r3, [pc, #88]	@ (8012778 <pvPortMalloc+0x190>)
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	4a17      	ldr	r2, [pc, #92]	@ (8012780 <pvPortMalloc+0x198>)
 8012724:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012728:	685a      	ldr	r2, [r3, #4]
 801272a:	4b12      	ldr	r3, [pc, #72]	@ (8012774 <pvPortMalloc+0x18c>)
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	431a      	orrs	r2, r3
 8012730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012732:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012736:	2200      	movs	r2, #0
 8012738:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801273a:	f7fe fa71 	bl	8010c20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801273e:	69fb      	ldr	r3, [r7, #28]
 8012740:	f003 0307 	and.w	r3, r3, #7
 8012744:	2b00      	cmp	r3, #0
 8012746:	d00d      	beq.n	8012764 <pvPortMalloc+0x17c>
	__asm volatile
 8012748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801274c:	b672      	cpsid	i
 801274e:	f383 8811 	msr	BASEPRI, r3
 8012752:	f3bf 8f6f 	isb	sy
 8012756:	f3bf 8f4f 	dsb	sy
 801275a:	b662      	cpsie	i
 801275c:	60fb      	str	r3, [r7, #12]
}
 801275e:	bf00      	nop
 8012760:	bf00      	nop
 8012762:	e7fd      	b.n	8012760 <pvPortMalloc+0x178>
	return pvReturn;
 8012764:	69fb      	ldr	r3, [r7, #28]
}
 8012766:	4618      	mov	r0, r3
 8012768:	3728      	adds	r7, #40	@ 0x28
 801276a:	46bd      	mov	sp, r7
 801276c:	bd80      	pop	{r7, pc}
 801276e:	bf00      	nop
 8012770:	20024690 	.word	0x20024690
 8012774:	2002469c 	.word	0x2002469c
 8012778:	20024694 	.word	0x20024694
 801277c:	20024688 	.word	0x20024688
 8012780:	20024698 	.word	0x20024698

08012784 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b086      	sub	sp, #24
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d04e      	beq.n	8012834 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012796:	2308      	movs	r3, #8
 8012798:	425b      	negs	r3, r3
 801279a:	697a      	ldr	r2, [r7, #20]
 801279c:	4413      	add	r3, r2
 801279e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80127a0:	697b      	ldr	r3, [r7, #20]
 80127a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80127a4:	693b      	ldr	r3, [r7, #16]
 80127a6:	685a      	ldr	r2, [r3, #4]
 80127a8:	4b24      	ldr	r3, [pc, #144]	@ (801283c <vPortFree+0xb8>)
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	4013      	ands	r3, r2
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d10d      	bne.n	80127ce <vPortFree+0x4a>
	__asm volatile
 80127b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127b6:	b672      	cpsid	i
 80127b8:	f383 8811 	msr	BASEPRI, r3
 80127bc:	f3bf 8f6f 	isb	sy
 80127c0:	f3bf 8f4f 	dsb	sy
 80127c4:	b662      	cpsie	i
 80127c6:	60fb      	str	r3, [r7, #12]
}
 80127c8:	bf00      	nop
 80127ca:	bf00      	nop
 80127cc:	e7fd      	b.n	80127ca <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80127ce:	693b      	ldr	r3, [r7, #16]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d00d      	beq.n	80127f2 <vPortFree+0x6e>
	__asm volatile
 80127d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127da:	b672      	cpsid	i
 80127dc:	f383 8811 	msr	BASEPRI, r3
 80127e0:	f3bf 8f6f 	isb	sy
 80127e4:	f3bf 8f4f 	dsb	sy
 80127e8:	b662      	cpsie	i
 80127ea:	60bb      	str	r3, [r7, #8]
}
 80127ec:	bf00      	nop
 80127ee:	bf00      	nop
 80127f0:	e7fd      	b.n	80127ee <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80127f2:	693b      	ldr	r3, [r7, #16]
 80127f4:	685a      	ldr	r2, [r3, #4]
 80127f6:	4b11      	ldr	r3, [pc, #68]	@ (801283c <vPortFree+0xb8>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	4013      	ands	r3, r2
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d019      	beq.n	8012834 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012800:	693b      	ldr	r3, [r7, #16]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d115      	bne.n	8012834 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012808:	693b      	ldr	r3, [r7, #16]
 801280a:	685a      	ldr	r2, [r3, #4]
 801280c:	4b0b      	ldr	r3, [pc, #44]	@ (801283c <vPortFree+0xb8>)
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	43db      	mvns	r3, r3
 8012812:	401a      	ands	r2, r3
 8012814:	693b      	ldr	r3, [r7, #16]
 8012816:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012818:	f7fe f9f4 	bl	8010c04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801281c:	693b      	ldr	r3, [r7, #16]
 801281e:	685a      	ldr	r2, [r3, #4]
 8012820:	4b07      	ldr	r3, [pc, #28]	@ (8012840 <vPortFree+0xbc>)
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	4413      	add	r3, r2
 8012826:	4a06      	ldr	r2, [pc, #24]	@ (8012840 <vPortFree+0xbc>)
 8012828:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801282a:	6938      	ldr	r0, [r7, #16]
 801282c:	f000 f86c 	bl	8012908 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012830:	f7fe f9f6 	bl	8010c20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012834:	bf00      	nop
 8012836:	3718      	adds	r7, #24
 8012838:	46bd      	mov	sp, r7
 801283a:	bd80      	pop	{r7, pc}
 801283c:	2002469c 	.word	0x2002469c
 8012840:	20024694 	.word	0x20024694

08012844 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012844:	b480      	push	{r7}
 8012846:	b085      	sub	sp, #20
 8012848:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801284a:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 801284e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012850:	4b27      	ldr	r3, [pc, #156]	@ (80128f0 <prvHeapInit+0xac>)
 8012852:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	f003 0307 	and.w	r3, r3, #7
 801285a:	2b00      	cmp	r3, #0
 801285c:	d00c      	beq.n	8012878 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	3307      	adds	r3, #7
 8012862:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	f023 0307 	bic.w	r3, r3, #7
 801286a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801286c:	68ba      	ldr	r2, [r7, #8]
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	1ad3      	subs	r3, r2, r3
 8012872:	4a1f      	ldr	r2, [pc, #124]	@ (80128f0 <prvHeapInit+0xac>)
 8012874:	4413      	add	r3, r2
 8012876:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801287c:	4a1d      	ldr	r2, [pc, #116]	@ (80128f4 <prvHeapInit+0xb0>)
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012882:	4b1c      	ldr	r3, [pc, #112]	@ (80128f4 <prvHeapInit+0xb0>)
 8012884:	2200      	movs	r2, #0
 8012886:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	68ba      	ldr	r2, [r7, #8]
 801288c:	4413      	add	r3, r2
 801288e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012890:	2208      	movs	r2, #8
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	1a9b      	subs	r3, r3, r2
 8012896:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	f023 0307 	bic.w	r3, r3, #7
 801289e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	4a15      	ldr	r2, [pc, #84]	@ (80128f8 <prvHeapInit+0xb4>)
 80128a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80128a6:	4b14      	ldr	r3, [pc, #80]	@ (80128f8 <prvHeapInit+0xb4>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	2200      	movs	r2, #0
 80128ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80128ae:	4b12      	ldr	r3, [pc, #72]	@ (80128f8 <prvHeapInit+0xb4>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	2200      	movs	r2, #0
 80128b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	68fa      	ldr	r2, [r7, #12]
 80128be:	1ad2      	subs	r2, r2, r3
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80128c4:	4b0c      	ldr	r3, [pc, #48]	@ (80128f8 <prvHeapInit+0xb4>)
 80128c6:	681a      	ldr	r2, [r3, #0]
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	685b      	ldr	r3, [r3, #4]
 80128d0:	4a0a      	ldr	r2, [pc, #40]	@ (80128fc <prvHeapInit+0xb8>)
 80128d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	685b      	ldr	r3, [r3, #4]
 80128d8:	4a09      	ldr	r2, [pc, #36]	@ (8012900 <prvHeapInit+0xbc>)
 80128da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80128dc:	4b09      	ldr	r3, [pc, #36]	@ (8012904 <prvHeapInit+0xc0>)
 80128de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80128e2:	601a      	str	r2, [r3, #0]
}
 80128e4:	bf00      	nop
 80128e6:	3714      	adds	r7, #20
 80128e8:	46bd      	mov	sp, r7
 80128ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ee:	4770      	bx	lr
 80128f0:	2000b688 	.word	0x2000b688
 80128f4:	20024688 	.word	0x20024688
 80128f8:	20024690 	.word	0x20024690
 80128fc:	20024698 	.word	0x20024698
 8012900:	20024694 	.word	0x20024694
 8012904:	2002469c 	.word	0x2002469c

08012908 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012908:	b480      	push	{r7}
 801290a:	b085      	sub	sp, #20
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012910:	4b28      	ldr	r3, [pc, #160]	@ (80129b4 <prvInsertBlockIntoFreeList+0xac>)
 8012912:	60fb      	str	r3, [r7, #12]
 8012914:	e002      	b.n	801291c <prvInsertBlockIntoFreeList+0x14>
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	60fb      	str	r3, [r7, #12]
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	687a      	ldr	r2, [r7, #4]
 8012922:	429a      	cmp	r2, r3
 8012924:	d8f7      	bhi.n	8012916 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	685b      	ldr	r3, [r3, #4]
 801292e:	68ba      	ldr	r2, [r7, #8]
 8012930:	4413      	add	r3, r2
 8012932:	687a      	ldr	r2, [r7, #4]
 8012934:	429a      	cmp	r2, r3
 8012936:	d108      	bne.n	801294a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	685a      	ldr	r2, [r3, #4]
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	685b      	ldr	r3, [r3, #4]
 8012940:	441a      	add	r2, r3
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	685b      	ldr	r3, [r3, #4]
 8012952:	68ba      	ldr	r2, [r7, #8]
 8012954:	441a      	add	r2, r3
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	429a      	cmp	r2, r3
 801295c:	d118      	bne.n	8012990 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	681a      	ldr	r2, [r3, #0]
 8012962:	4b15      	ldr	r3, [pc, #84]	@ (80129b8 <prvInsertBlockIntoFreeList+0xb0>)
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	429a      	cmp	r2, r3
 8012968:	d00d      	beq.n	8012986 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	685a      	ldr	r2, [r3, #4]
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	685b      	ldr	r3, [r3, #4]
 8012974:	441a      	add	r2, r3
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	681a      	ldr	r2, [r3, #0]
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	601a      	str	r2, [r3, #0]
 8012984:	e008      	b.n	8012998 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012986:	4b0c      	ldr	r3, [pc, #48]	@ (80129b8 <prvInsertBlockIntoFreeList+0xb0>)
 8012988:	681a      	ldr	r2, [r3, #0]
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	601a      	str	r2, [r3, #0]
 801298e:	e003      	b.n	8012998 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	681a      	ldr	r2, [r3, #0]
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012998:	68fa      	ldr	r2, [r7, #12]
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	429a      	cmp	r2, r3
 801299e:	d002      	beq.n	80129a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	687a      	ldr	r2, [r7, #4]
 80129a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80129a6:	bf00      	nop
 80129a8:	3714      	adds	r7, #20
 80129aa:	46bd      	mov	sp, r7
 80129ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b0:	4770      	bx	lr
 80129b2:	bf00      	nop
 80129b4:	20024688 	.word	0x20024688
 80129b8:	20024690 	.word	0x20024690

080129bc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80129bc:	b580      	push	{r7, lr}
 80129be:	b084      	sub	sp, #16
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	6078      	str	r0, [r7, #4]
 80129c4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80129c6:	f007 facd 	bl	8019f64 <sys_timeouts_sleeptime>
 80129ca:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129d2:	d10b      	bne.n	80129ec <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80129d4:	4813      	ldr	r0, [pc, #76]	@ (8012a24 <tcpip_timeouts_mbox_fetch+0x68>)
 80129d6:	f00a fad2 	bl	801cf7e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80129da:	2200      	movs	r2, #0
 80129dc:	6839      	ldr	r1, [r7, #0]
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	f00a fa5a 	bl	801ce98 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80129e4:	480f      	ldr	r0, [pc, #60]	@ (8012a24 <tcpip_timeouts_mbox_fetch+0x68>)
 80129e6:	f00a fabb 	bl	801cf60 <sys_mutex_lock>
    return;
 80129ea:	e018      	b.n	8012a1e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d102      	bne.n	80129f8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80129f2:	f007 fa7d 	bl	8019ef0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80129f6:	e7e6      	b.n	80129c6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80129f8:	480a      	ldr	r0, [pc, #40]	@ (8012a24 <tcpip_timeouts_mbox_fetch+0x68>)
 80129fa:	f00a fac0 	bl	801cf7e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80129fe:	68fa      	ldr	r2, [r7, #12]
 8012a00:	6839      	ldr	r1, [r7, #0]
 8012a02:	6878      	ldr	r0, [r7, #4]
 8012a04:	f00a fa48 	bl	801ce98 <sys_arch_mbox_fetch>
 8012a08:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8012a0a:	4806      	ldr	r0, [pc, #24]	@ (8012a24 <tcpip_timeouts_mbox_fetch+0x68>)
 8012a0c:	f00a faa8 	bl	801cf60 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a16:	d102      	bne.n	8012a1e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012a18:	f007 fa6a 	bl	8019ef0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012a1c:	e7d3      	b.n	80129c6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8012a1e:	3710      	adds	r7, #16
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}
 8012a24:	200246ac 	.word	0x200246ac

08012a28 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b084      	sub	sp, #16
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012a30:	4810      	ldr	r0, [pc, #64]	@ (8012a74 <tcpip_thread+0x4c>)
 8012a32:	f00a fa95 	bl	801cf60 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012a36:	4b10      	ldr	r3, [pc, #64]	@ (8012a78 <tcpip_thread+0x50>)
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d005      	beq.n	8012a4a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8012a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8012a78 <tcpip_thread+0x50>)
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	4a0e      	ldr	r2, [pc, #56]	@ (8012a7c <tcpip_thread+0x54>)
 8012a44:	6812      	ldr	r2, [r2, #0]
 8012a46:	4610      	mov	r0, r2
 8012a48:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012a4a:	f107 030c 	add.w	r3, r7, #12
 8012a4e:	4619      	mov	r1, r3
 8012a50:	480b      	ldr	r0, [pc, #44]	@ (8012a80 <tcpip_thread+0x58>)
 8012a52:	f7ff ffb3 	bl	80129bc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d106      	bne.n	8012a6a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012a5c:	4b09      	ldr	r3, [pc, #36]	@ (8012a84 <tcpip_thread+0x5c>)
 8012a5e:	2291      	movs	r2, #145	@ 0x91
 8012a60:	4909      	ldr	r1, [pc, #36]	@ (8012a88 <tcpip_thread+0x60>)
 8012a62:	480a      	ldr	r0, [pc, #40]	@ (8012a8c <tcpip_thread+0x64>)
 8012a64:	f00b fb36 	bl	801e0d4 <iprintf>
      continue;
 8012a68:	e003      	b.n	8012a72 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	f000 f80f 	bl	8012a90 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012a72:	e7ea      	b.n	8012a4a <tcpip_thread+0x22>
 8012a74:	200246ac 	.word	0x200246ac
 8012a78:	200246a0 	.word	0x200246a0
 8012a7c:	200246a4 	.word	0x200246a4
 8012a80:	200246a8 	.word	0x200246a8
 8012a84:	0801f288 	.word	0x0801f288
 8012a88:	0801f2b8 	.word	0x0801f2b8
 8012a8c:	0801f2d8 	.word	0x0801f2d8

08012a90 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b082      	sub	sp, #8
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	781b      	ldrb	r3, [r3, #0]
 8012a9c:	2b02      	cmp	r3, #2
 8012a9e:	d026      	beq.n	8012aee <tcpip_thread_handle_msg+0x5e>
 8012aa0:	2b02      	cmp	r3, #2
 8012aa2:	dc2b      	bgt.n	8012afc <tcpip_thread_handle_msg+0x6c>
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d002      	beq.n	8012aae <tcpip_thread_handle_msg+0x1e>
 8012aa8:	2b01      	cmp	r3, #1
 8012aaa:	d015      	beq.n	8012ad8 <tcpip_thread_handle_msg+0x48>
 8012aac:	e026      	b.n	8012afc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	68db      	ldr	r3, [r3, #12]
 8012ab2:	687a      	ldr	r2, [r7, #4]
 8012ab4:	6850      	ldr	r0, [r2, #4]
 8012ab6:	687a      	ldr	r2, [r7, #4]
 8012ab8:	6892      	ldr	r2, [r2, #8]
 8012aba:	4611      	mov	r1, r2
 8012abc:	4798      	blx	r3
 8012abe:	4603      	mov	r3, r0
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d004      	beq.n	8012ace <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	685b      	ldr	r3, [r3, #4]
 8012ac8:	4618      	mov	r0, r3
 8012aca:	f001 fd07 	bl	80144dc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012ace:	6879      	ldr	r1, [r7, #4]
 8012ad0:	2009      	movs	r0, #9
 8012ad2:	f000 fe5f 	bl	8013794 <memp_free>
      break;
 8012ad6:	e018      	b.n	8012b0a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	685b      	ldr	r3, [r3, #4]
 8012adc:	687a      	ldr	r2, [r7, #4]
 8012ade:	6892      	ldr	r2, [r2, #8]
 8012ae0:	4610      	mov	r0, r2
 8012ae2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012ae4:	6879      	ldr	r1, [r7, #4]
 8012ae6:	2008      	movs	r0, #8
 8012ae8:	f000 fe54 	bl	8013794 <memp_free>
      break;
 8012aec:	e00d      	b.n	8012b0a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	685b      	ldr	r3, [r3, #4]
 8012af2:	687a      	ldr	r2, [r7, #4]
 8012af4:	6892      	ldr	r2, [r2, #8]
 8012af6:	4610      	mov	r0, r2
 8012af8:	4798      	blx	r3
      break;
 8012afa:	e006      	b.n	8012b0a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012afc:	4b05      	ldr	r3, [pc, #20]	@ (8012b14 <tcpip_thread_handle_msg+0x84>)
 8012afe:	22cf      	movs	r2, #207	@ 0xcf
 8012b00:	4905      	ldr	r1, [pc, #20]	@ (8012b18 <tcpip_thread_handle_msg+0x88>)
 8012b02:	4806      	ldr	r0, [pc, #24]	@ (8012b1c <tcpip_thread_handle_msg+0x8c>)
 8012b04:	f00b fae6 	bl	801e0d4 <iprintf>
      break;
 8012b08:	bf00      	nop
  }
}
 8012b0a:	bf00      	nop
 8012b0c:	3708      	adds	r7, #8
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}
 8012b12:	bf00      	nop
 8012b14:	0801f288 	.word	0x0801f288
 8012b18:	0801f2b8 	.word	0x0801f2b8
 8012b1c:	0801f2d8 	.word	0x0801f2d8

08012b20 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b086      	sub	sp, #24
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	60f8      	str	r0, [r7, #12]
 8012b28:	60b9      	str	r1, [r7, #8]
 8012b2a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012b2c:	481a      	ldr	r0, [pc, #104]	@ (8012b98 <tcpip_inpkt+0x78>)
 8012b2e:	f00a f9e4 	bl	801cefa <sys_mbox_valid>
 8012b32:	4603      	mov	r3, r0
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d105      	bne.n	8012b44 <tcpip_inpkt+0x24>
 8012b38:	4b18      	ldr	r3, [pc, #96]	@ (8012b9c <tcpip_inpkt+0x7c>)
 8012b3a:	22fc      	movs	r2, #252	@ 0xfc
 8012b3c:	4918      	ldr	r1, [pc, #96]	@ (8012ba0 <tcpip_inpkt+0x80>)
 8012b3e:	4819      	ldr	r0, [pc, #100]	@ (8012ba4 <tcpip_inpkt+0x84>)
 8012b40:	f00b fac8 	bl	801e0d4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012b44:	2009      	movs	r0, #9
 8012b46:	f000 fdaf 	bl	80136a8 <memp_malloc>
 8012b4a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8012b4c:	697b      	ldr	r3, [r7, #20]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d102      	bne.n	8012b58 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012b52:	f04f 33ff 	mov.w	r3, #4294967295
 8012b56:	e01a      	b.n	8012b8e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012b58:	697b      	ldr	r3, [r7, #20]
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8012b5e:	697b      	ldr	r3, [r7, #20]
 8012b60:	68fa      	ldr	r2, [r7, #12]
 8012b62:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012b64:	697b      	ldr	r3, [r7, #20]
 8012b66:	68ba      	ldr	r2, [r7, #8]
 8012b68:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8012b6a:	697b      	ldr	r3, [r7, #20]
 8012b6c:	687a      	ldr	r2, [r7, #4]
 8012b6e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012b70:	6979      	ldr	r1, [r7, #20]
 8012b72:	4809      	ldr	r0, [pc, #36]	@ (8012b98 <tcpip_inpkt+0x78>)
 8012b74:	f00a f976 	bl	801ce64 <sys_mbox_trypost>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d006      	beq.n	8012b8c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012b7e:	6979      	ldr	r1, [r7, #20]
 8012b80:	2009      	movs	r0, #9
 8012b82:	f000 fe07 	bl	8013794 <memp_free>
    return ERR_MEM;
 8012b86:	f04f 33ff 	mov.w	r3, #4294967295
 8012b8a:	e000      	b.n	8012b8e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8012b8c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8012b8e:	4618      	mov	r0, r3
 8012b90:	3718      	adds	r7, #24
 8012b92:	46bd      	mov	sp, r7
 8012b94:	bd80      	pop	{r7, pc}
 8012b96:	bf00      	nop
 8012b98:	200246a8 	.word	0x200246a8
 8012b9c:	0801f288 	.word	0x0801f288
 8012ba0:	0801f300 	.word	0x0801f300
 8012ba4:	0801f2d8 	.word	0x0801f2d8

08012ba8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b082      	sub	sp, #8
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
 8012bb0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012bb2:	683b      	ldr	r3, [r7, #0]
 8012bb4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012bb8:	f003 0318 	and.w	r3, r3, #24
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d006      	beq.n	8012bce <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012bc0:	4a08      	ldr	r2, [pc, #32]	@ (8012be4 <tcpip_input+0x3c>)
 8012bc2:	6839      	ldr	r1, [r7, #0]
 8012bc4:	6878      	ldr	r0, [r7, #4]
 8012bc6:	f7ff ffab 	bl	8012b20 <tcpip_inpkt>
 8012bca:	4603      	mov	r3, r0
 8012bcc:	e005      	b.n	8012bda <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8012bce:	4a06      	ldr	r2, [pc, #24]	@ (8012be8 <tcpip_input+0x40>)
 8012bd0:	6839      	ldr	r1, [r7, #0]
 8012bd2:	6878      	ldr	r0, [r7, #4]
 8012bd4:	f7ff ffa4 	bl	8012b20 <tcpip_inpkt>
 8012bd8:	4603      	mov	r3, r0
}
 8012bda:	4618      	mov	r0, r3
 8012bdc:	3708      	adds	r7, #8
 8012bde:	46bd      	mov	sp, r7
 8012be0:	bd80      	pop	{r7, pc}
 8012be2:	bf00      	nop
 8012be4:	0801cc85 	.word	0x0801cc85
 8012be8:	0801bb8d 	.word	0x0801bb8d

08012bec <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b084      	sub	sp, #16
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
 8012bf4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012bf6:	4819      	ldr	r0, [pc, #100]	@ (8012c5c <tcpip_try_callback+0x70>)
 8012bf8:	f00a f97f 	bl	801cefa <sys_mbox_valid>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d106      	bne.n	8012c10 <tcpip_try_callback+0x24>
 8012c02:	4b17      	ldr	r3, [pc, #92]	@ (8012c60 <tcpip_try_callback+0x74>)
 8012c04:	f240 125d 	movw	r2, #349	@ 0x15d
 8012c08:	4916      	ldr	r1, [pc, #88]	@ (8012c64 <tcpip_try_callback+0x78>)
 8012c0a:	4817      	ldr	r0, [pc, #92]	@ (8012c68 <tcpip_try_callback+0x7c>)
 8012c0c:	f00b fa62 	bl	801e0d4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012c10:	2008      	movs	r0, #8
 8012c12:	f000 fd49 	bl	80136a8 <memp_malloc>
 8012c16:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d102      	bne.n	8012c24 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8012c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8012c22:	e017      	b.n	8012c54 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	2201      	movs	r2, #1
 8012c28:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	687a      	ldr	r2, [r7, #4]
 8012c2e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	683a      	ldr	r2, [r7, #0]
 8012c34:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012c36:	68f9      	ldr	r1, [r7, #12]
 8012c38:	4808      	ldr	r0, [pc, #32]	@ (8012c5c <tcpip_try_callback+0x70>)
 8012c3a:	f00a f913 	bl	801ce64 <sys_mbox_trypost>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d006      	beq.n	8012c52 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012c44:	68f9      	ldr	r1, [r7, #12]
 8012c46:	2008      	movs	r0, #8
 8012c48:	f000 fda4 	bl	8013794 <memp_free>
    return ERR_MEM;
 8012c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8012c50:	e000      	b.n	8012c54 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012c52:	2300      	movs	r3, #0
}
 8012c54:	4618      	mov	r0, r3
 8012c56:	3710      	adds	r7, #16
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}
 8012c5c:	200246a8 	.word	0x200246a8
 8012c60:	0801f288 	.word	0x0801f288
 8012c64:	0801f300 	.word	0x0801f300
 8012c68:	0801f2d8 	.word	0x0801f2d8

08012c6c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b084      	sub	sp, #16
 8012c70:	af02      	add	r7, sp, #8
 8012c72:	6078      	str	r0, [r7, #4]
 8012c74:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012c76:	f000 f872 	bl	8012d5e <lwip_init>

  tcpip_init_done = initfunc;
 8012c7a:	4a17      	ldr	r2, [pc, #92]	@ (8012cd8 <tcpip_init+0x6c>)
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8012c80:	4a16      	ldr	r2, [pc, #88]	@ (8012cdc <tcpip_init+0x70>)
 8012c82:	683b      	ldr	r3, [r7, #0]
 8012c84:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012c86:	2106      	movs	r1, #6
 8012c88:	4815      	ldr	r0, [pc, #84]	@ (8012ce0 <tcpip_init+0x74>)
 8012c8a:	f00a f8d1 	bl	801ce30 <sys_mbox_new>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d006      	beq.n	8012ca2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012c94:	4b13      	ldr	r3, [pc, #76]	@ (8012ce4 <tcpip_init+0x78>)
 8012c96:	f240 2261 	movw	r2, #609	@ 0x261
 8012c9a:	4913      	ldr	r1, [pc, #76]	@ (8012ce8 <tcpip_init+0x7c>)
 8012c9c:	4813      	ldr	r0, [pc, #76]	@ (8012cec <tcpip_init+0x80>)
 8012c9e:	f00b fa19 	bl	801e0d4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8012ca2:	4813      	ldr	r0, [pc, #76]	@ (8012cf0 <tcpip_init+0x84>)
 8012ca4:	f00a f946 	bl	801cf34 <sys_mutex_new>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d006      	beq.n	8012cbc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8012cae:	4b0d      	ldr	r3, [pc, #52]	@ (8012ce4 <tcpip_init+0x78>)
 8012cb0:	f240 2265 	movw	r2, #613	@ 0x265
 8012cb4:	490f      	ldr	r1, [pc, #60]	@ (8012cf4 <tcpip_init+0x88>)
 8012cb6:	480d      	ldr	r0, [pc, #52]	@ (8012cec <tcpip_init+0x80>)
 8012cb8:	f00b fa0c 	bl	801e0d4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012cbc:	2318      	movs	r3, #24
 8012cbe:	9300      	str	r3, [sp, #0]
 8012cc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	490c      	ldr	r1, [pc, #48]	@ (8012cf8 <tcpip_init+0x8c>)
 8012cc8:	480c      	ldr	r0, [pc, #48]	@ (8012cfc <tcpip_init+0x90>)
 8012cca:	f00a f965 	bl	801cf98 <sys_thread_new>
}
 8012cce:	bf00      	nop
 8012cd0:	3708      	adds	r7, #8
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}
 8012cd6:	bf00      	nop
 8012cd8:	200246a0 	.word	0x200246a0
 8012cdc:	200246a4 	.word	0x200246a4
 8012ce0:	200246a8 	.word	0x200246a8
 8012ce4:	0801f288 	.word	0x0801f288
 8012ce8:	0801f310 	.word	0x0801f310
 8012cec:	0801f2d8 	.word	0x0801f2d8
 8012cf0:	200246ac 	.word	0x200246ac
 8012cf4:	0801f334 	.word	0x0801f334
 8012cf8:	08012a29 	.word	0x08012a29
 8012cfc:	0801f358 	.word	0x0801f358

08012d00 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8012d00:	b480      	push	{r7}
 8012d02:	b083      	sub	sp, #12
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	4603      	mov	r3, r0
 8012d08:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8012d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d0e:	021b      	lsls	r3, r3, #8
 8012d10:	b21a      	sxth	r2, r3
 8012d12:	88fb      	ldrh	r3, [r7, #6]
 8012d14:	0a1b      	lsrs	r3, r3, #8
 8012d16:	b29b      	uxth	r3, r3
 8012d18:	b21b      	sxth	r3, r3
 8012d1a:	4313      	orrs	r3, r2
 8012d1c:	b21b      	sxth	r3, r3
 8012d1e:	b29b      	uxth	r3, r3
}
 8012d20:	4618      	mov	r0, r3
 8012d22:	370c      	adds	r7, #12
 8012d24:	46bd      	mov	sp, r7
 8012d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2a:	4770      	bx	lr

08012d2c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8012d2c:	b480      	push	{r7}
 8012d2e:	b083      	sub	sp, #12
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	061a      	lsls	r2, r3, #24
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	021b      	lsls	r3, r3, #8
 8012d3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012d40:	431a      	orrs	r2, r3
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	0a1b      	lsrs	r3, r3, #8
 8012d46:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012d4a:	431a      	orrs	r2, r3
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	0e1b      	lsrs	r3, r3, #24
 8012d50:	4313      	orrs	r3, r2
}
 8012d52:	4618      	mov	r0, r3
 8012d54:	370c      	adds	r7, #12
 8012d56:	46bd      	mov	sp, r7
 8012d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5c:	4770      	bx	lr

08012d5e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8012d5e:	b580      	push	{r7, lr}
 8012d60:	b082      	sub	sp, #8
 8012d62:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8012d64:	2300      	movs	r3, #0
 8012d66:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8012d68:	f00a f8d8 	bl	801cf1c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8012d6c:	f000 f8d4 	bl	8012f18 <mem_init>
  memp_init();
 8012d70:	f000 fc2c 	bl	80135cc <memp_init>
  pbuf_init();
  netif_init();
 8012d74:	f000 fd38 	bl	80137e8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8012d78:	f007 f92c 	bl	8019fd4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8012d7c:	f001 fe58 	bl	8014a30 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8012d80:	f007 f86e 	bl	8019e60 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8012d84:	bf00      	nop
 8012d86:	3708      	adds	r7, #8
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bd80      	pop	{r7, pc}

08012d8c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8012d8c:	b480      	push	{r7}
 8012d8e:	b083      	sub	sp, #12
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	4603      	mov	r3, r0
 8012d94:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8012d96:	4b05      	ldr	r3, [pc, #20]	@ (8012dac <ptr_to_mem+0x20>)
 8012d98:	681a      	ldr	r2, [r3, #0]
 8012d9a:	88fb      	ldrh	r3, [r7, #6]
 8012d9c:	4413      	add	r3, r2
}
 8012d9e:	4618      	mov	r0, r3
 8012da0:	370c      	adds	r7, #12
 8012da2:	46bd      	mov	sp, r7
 8012da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da8:	4770      	bx	lr
 8012daa:	bf00      	nop
 8012dac:	200246c8 	.word	0x200246c8

08012db0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012db0:	b480      	push	{r7}
 8012db2:	b083      	sub	sp, #12
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8012db8:	4b05      	ldr	r3, [pc, #20]	@ (8012dd0 <mem_to_ptr+0x20>)
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	687a      	ldr	r2, [r7, #4]
 8012dbe:	1ad3      	subs	r3, r2, r3
 8012dc0:	b29b      	uxth	r3, r3
}
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	370c      	adds	r7, #12
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dcc:	4770      	bx	lr
 8012dce:	bf00      	nop
 8012dd0:	200246c8 	.word	0x200246c8

08012dd4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8012dd4:	b590      	push	{r4, r7, lr}
 8012dd6:	b085      	sub	sp, #20
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8012ddc:	4b45      	ldr	r3, [pc, #276]	@ (8012ef4 <plug_holes+0x120>)
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	687a      	ldr	r2, [r7, #4]
 8012de2:	429a      	cmp	r2, r3
 8012de4:	d206      	bcs.n	8012df4 <plug_holes+0x20>
 8012de6:	4b44      	ldr	r3, [pc, #272]	@ (8012ef8 <plug_holes+0x124>)
 8012de8:	f240 12df 	movw	r2, #479	@ 0x1df
 8012dec:	4943      	ldr	r1, [pc, #268]	@ (8012efc <plug_holes+0x128>)
 8012dee:	4844      	ldr	r0, [pc, #272]	@ (8012f00 <plug_holes+0x12c>)
 8012df0:	f00b f970 	bl	801e0d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8012df4:	4b43      	ldr	r3, [pc, #268]	@ (8012f04 <plug_holes+0x130>)
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	687a      	ldr	r2, [r7, #4]
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d306      	bcc.n	8012e0c <plug_holes+0x38>
 8012dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8012ef8 <plug_holes+0x124>)
 8012e00:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8012e04:	4940      	ldr	r1, [pc, #256]	@ (8012f08 <plug_holes+0x134>)
 8012e06:	483e      	ldr	r0, [pc, #248]	@ (8012f00 <plug_holes+0x12c>)
 8012e08:	f00b f964 	bl	801e0d4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	791b      	ldrb	r3, [r3, #4]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d006      	beq.n	8012e22 <plug_holes+0x4e>
 8012e14:	4b38      	ldr	r3, [pc, #224]	@ (8012ef8 <plug_holes+0x124>)
 8012e16:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8012e1a:	493c      	ldr	r1, [pc, #240]	@ (8012f0c <plug_holes+0x138>)
 8012e1c:	4838      	ldr	r0, [pc, #224]	@ (8012f00 <plug_holes+0x12c>)
 8012e1e:	f00b f959 	bl	801e0d4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	881b      	ldrh	r3, [r3, #0]
 8012e26:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012e2a:	d906      	bls.n	8012e3a <plug_holes+0x66>
 8012e2c:	4b32      	ldr	r3, [pc, #200]	@ (8012ef8 <plug_holes+0x124>)
 8012e2e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8012e32:	4937      	ldr	r1, [pc, #220]	@ (8012f10 <plug_holes+0x13c>)
 8012e34:	4832      	ldr	r0, [pc, #200]	@ (8012f00 <plug_holes+0x12c>)
 8012e36:	f00b f94d 	bl	801e0d4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	881b      	ldrh	r3, [r3, #0]
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f7ff ffa4 	bl	8012d8c <ptr_to_mem>
 8012e44:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8012e46:	687a      	ldr	r2, [r7, #4]
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	429a      	cmp	r2, r3
 8012e4c:	d024      	beq.n	8012e98 <plug_holes+0xc4>
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	791b      	ldrb	r3, [r3, #4]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d120      	bne.n	8012e98 <plug_holes+0xc4>
 8012e56:	4b2b      	ldr	r3, [pc, #172]	@ (8012f04 <plug_holes+0x130>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	68fa      	ldr	r2, [r7, #12]
 8012e5c:	429a      	cmp	r2, r3
 8012e5e:	d01b      	beq.n	8012e98 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8012e60:	4b2c      	ldr	r3, [pc, #176]	@ (8012f14 <plug_holes+0x140>)
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	68fa      	ldr	r2, [r7, #12]
 8012e66:	429a      	cmp	r2, r3
 8012e68:	d102      	bne.n	8012e70 <plug_holes+0x9c>
      lfree = mem;
 8012e6a:	4a2a      	ldr	r2, [pc, #168]	@ (8012f14 <plug_holes+0x140>)
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	881a      	ldrh	r2, [r3, #0]
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	881b      	ldrh	r3, [r3, #0]
 8012e7c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012e80:	d00a      	beq.n	8012e98 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	881b      	ldrh	r3, [r3, #0]
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7ff ff80 	bl	8012d8c <ptr_to_mem>
 8012e8c:	4604      	mov	r4, r0
 8012e8e:	6878      	ldr	r0, [r7, #4]
 8012e90:	f7ff ff8e 	bl	8012db0 <mem_to_ptr>
 8012e94:	4603      	mov	r3, r0
 8012e96:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	885b      	ldrh	r3, [r3, #2]
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f7ff ff75 	bl	8012d8c <ptr_to_mem>
 8012ea2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8012ea4:	68ba      	ldr	r2, [r7, #8]
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	429a      	cmp	r2, r3
 8012eaa:	d01f      	beq.n	8012eec <plug_holes+0x118>
 8012eac:	68bb      	ldr	r3, [r7, #8]
 8012eae:	791b      	ldrb	r3, [r3, #4]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d11b      	bne.n	8012eec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012eb4:	4b17      	ldr	r3, [pc, #92]	@ (8012f14 <plug_holes+0x140>)
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	687a      	ldr	r2, [r7, #4]
 8012eba:	429a      	cmp	r2, r3
 8012ebc:	d102      	bne.n	8012ec4 <plug_holes+0xf0>
      lfree = pmem;
 8012ebe:	4a15      	ldr	r2, [pc, #84]	@ (8012f14 <plug_holes+0x140>)
 8012ec0:	68bb      	ldr	r3, [r7, #8]
 8012ec2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	881a      	ldrh	r2, [r3, #0]
 8012ec8:	68bb      	ldr	r3, [r7, #8]
 8012eca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	881b      	ldrh	r3, [r3, #0]
 8012ed0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012ed4:	d00a      	beq.n	8012eec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	881b      	ldrh	r3, [r3, #0]
 8012eda:	4618      	mov	r0, r3
 8012edc:	f7ff ff56 	bl	8012d8c <ptr_to_mem>
 8012ee0:	4604      	mov	r4, r0
 8012ee2:	68b8      	ldr	r0, [r7, #8]
 8012ee4:	f7ff ff64 	bl	8012db0 <mem_to_ptr>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8012eec:	bf00      	nop
 8012eee:	3714      	adds	r7, #20
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	bd90      	pop	{r4, r7, pc}
 8012ef4:	200246c8 	.word	0x200246c8
 8012ef8:	0801f368 	.word	0x0801f368
 8012efc:	0801f398 	.word	0x0801f398
 8012f00:	0801f3b0 	.word	0x0801f3b0
 8012f04:	200246cc 	.word	0x200246cc
 8012f08:	0801f3d8 	.word	0x0801f3d8
 8012f0c:	0801f3f4 	.word	0x0801f3f4
 8012f10:	0801f410 	.word	0x0801f410
 8012f14:	200246d4 	.word	0x200246d4

08012f18 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b082      	sub	sp, #8
 8012f1c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8012f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8012f94 <mem_init+0x7c>)
 8012f20:	4a1d      	ldr	r2, [pc, #116]	@ (8012f98 <mem_init+0x80>)
 8012f22:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012f24:	4b1b      	ldr	r3, [pc, #108]	@ (8012f94 <mem_init+0x7c>)
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8012f30:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	2200      	movs	r2, #0
 8012f36:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8012f3e:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8012f42:	f7ff ff23 	bl	8012d8c <ptr_to_mem>
 8012f46:	4603      	mov	r3, r0
 8012f48:	4a14      	ldr	r2, [pc, #80]	@ (8012f9c <mem_init+0x84>)
 8012f4a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8012f4c:	4b13      	ldr	r3, [pc, #76]	@ (8012f9c <mem_init+0x84>)
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	2201      	movs	r2, #1
 8012f52:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8012f54:	4b11      	ldr	r3, [pc, #68]	@ (8012f9c <mem_init+0x84>)
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8012f5c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8012f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8012f9c <mem_init+0x84>)
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8012f66:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8012f68:	4b0a      	ldr	r3, [pc, #40]	@ (8012f94 <mem_init+0x7c>)
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	4a0c      	ldr	r2, [pc, #48]	@ (8012fa0 <mem_init+0x88>)
 8012f6e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8012f70:	480c      	ldr	r0, [pc, #48]	@ (8012fa4 <mem_init+0x8c>)
 8012f72:	f009 ffdf 	bl	801cf34 <sys_mutex_new>
 8012f76:	4603      	mov	r3, r0
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d006      	beq.n	8012f8a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8012f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8012fa8 <mem_init+0x90>)
 8012f7e:	f240 221f 	movw	r2, #543	@ 0x21f
 8012f82:	490a      	ldr	r1, [pc, #40]	@ (8012fac <mem_init+0x94>)
 8012f84:	480a      	ldr	r0, [pc, #40]	@ (8012fb0 <mem_init+0x98>)
 8012f86:	f00b f8a5 	bl	801e0d4 <iprintf>
  }
}
 8012f8a:	bf00      	nop
 8012f8c:	3708      	adds	r7, #8
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}
 8012f92:	bf00      	nop
 8012f94:	200246c8 	.word	0x200246c8
 8012f98:	20048000 	.word	0x20048000
 8012f9c:	200246cc 	.word	0x200246cc
 8012fa0:	200246d4 	.word	0x200246d4
 8012fa4:	200246d0 	.word	0x200246d0
 8012fa8:	0801f368 	.word	0x0801f368
 8012fac:	0801f43c 	.word	0x0801f43c
 8012fb0:	0801f3b0 	.word	0x0801f3b0

08012fb4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b086      	sub	sp, #24
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8012fbc:	6878      	ldr	r0, [r7, #4]
 8012fbe:	f7ff fef7 	bl	8012db0 <mem_to_ptr>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	881b      	ldrh	r3, [r3, #0]
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f7ff fede 	bl	8012d8c <ptr_to_mem>
 8012fd0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	885b      	ldrh	r3, [r3, #2]
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f7ff fed8 	bl	8012d8c <ptr_to_mem>
 8012fdc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	881b      	ldrh	r3, [r3, #0]
 8012fe2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012fe6:	d818      	bhi.n	801301a <mem_link_valid+0x66>
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	885b      	ldrh	r3, [r3, #2]
 8012fec:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012ff0:	d813      	bhi.n	801301a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012ff6:	8afa      	ldrh	r2, [r7, #22]
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	d004      	beq.n	8013006 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	881b      	ldrh	r3, [r3, #0]
 8013000:	8afa      	ldrh	r2, [r7, #22]
 8013002:	429a      	cmp	r2, r3
 8013004:	d109      	bne.n	801301a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013006:	4b08      	ldr	r3, [pc, #32]	@ (8013028 <mem_link_valid+0x74>)
 8013008:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801300a:	693a      	ldr	r2, [r7, #16]
 801300c:	429a      	cmp	r2, r3
 801300e:	d006      	beq.n	801301e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013010:	693b      	ldr	r3, [r7, #16]
 8013012:	885b      	ldrh	r3, [r3, #2]
 8013014:	8afa      	ldrh	r2, [r7, #22]
 8013016:	429a      	cmp	r2, r3
 8013018:	d001      	beq.n	801301e <mem_link_valid+0x6a>
    return 0;
 801301a:	2300      	movs	r3, #0
 801301c:	e000      	b.n	8013020 <mem_link_valid+0x6c>
  }
  return 1;
 801301e:	2301      	movs	r3, #1
}
 8013020:	4618      	mov	r0, r3
 8013022:	3718      	adds	r7, #24
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}
 8013028:	200246cc 	.word	0x200246cc

0801302c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b088      	sub	sp, #32
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	2b00      	cmp	r3, #0
 8013038:	d070      	beq.n	801311c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	f003 0303 	and.w	r3, r3, #3
 8013040:	2b00      	cmp	r3, #0
 8013042:	d00d      	beq.n	8013060 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8013044:	4b37      	ldr	r3, [pc, #220]	@ (8013124 <mem_free+0xf8>)
 8013046:	f240 2273 	movw	r2, #627	@ 0x273
 801304a:	4937      	ldr	r1, [pc, #220]	@ (8013128 <mem_free+0xfc>)
 801304c:	4837      	ldr	r0, [pc, #220]	@ (801312c <mem_free+0x100>)
 801304e:	f00b f841 	bl	801e0d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013052:	f009 ffc1 	bl	801cfd8 <sys_arch_protect>
 8013056:	60f8      	str	r0, [r7, #12]
 8013058:	68f8      	ldr	r0, [r7, #12]
 801305a:	f009 ffcb 	bl	801cff4 <sys_arch_unprotect>
    return;
 801305e:	e05e      	b.n	801311e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	3b08      	subs	r3, #8
 8013064:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8013066:	4b32      	ldr	r3, [pc, #200]	@ (8013130 <mem_free+0x104>)
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	69fa      	ldr	r2, [r7, #28]
 801306c:	429a      	cmp	r2, r3
 801306e:	d306      	bcc.n	801307e <mem_free+0x52>
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	f103 020c 	add.w	r2, r3, #12
 8013076:	4b2f      	ldr	r3, [pc, #188]	@ (8013134 <mem_free+0x108>)
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	429a      	cmp	r2, r3
 801307c:	d90d      	bls.n	801309a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801307e:	4b29      	ldr	r3, [pc, #164]	@ (8013124 <mem_free+0xf8>)
 8013080:	f240 227f 	movw	r2, #639	@ 0x27f
 8013084:	492c      	ldr	r1, [pc, #176]	@ (8013138 <mem_free+0x10c>)
 8013086:	4829      	ldr	r0, [pc, #164]	@ (801312c <mem_free+0x100>)
 8013088:	f00b f824 	bl	801e0d4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801308c:	f009 ffa4 	bl	801cfd8 <sys_arch_protect>
 8013090:	6138      	str	r0, [r7, #16]
 8013092:	6938      	ldr	r0, [r7, #16]
 8013094:	f009 ffae 	bl	801cff4 <sys_arch_unprotect>
    return;
 8013098:	e041      	b.n	801311e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801309a:	4828      	ldr	r0, [pc, #160]	@ (801313c <mem_free+0x110>)
 801309c:	f009 ff60 	bl	801cf60 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80130a0:	69fb      	ldr	r3, [r7, #28]
 80130a2:	791b      	ldrb	r3, [r3, #4]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d110      	bne.n	80130ca <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80130a8:	4b1e      	ldr	r3, [pc, #120]	@ (8013124 <mem_free+0xf8>)
 80130aa:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80130ae:	4924      	ldr	r1, [pc, #144]	@ (8013140 <mem_free+0x114>)
 80130b0:	481e      	ldr	r0, [pc, #120]	@ (801312c <mem_free+0x100>)
 80130b2:	f00b f80f 	bl	801e0d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80130b6:	4821      	ldr	r0, [pc, #132]	@ (801313c <mem_free+0x110>)
 80130b8:	f009 ff61 	bl	801cf7e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80130bc:	f009 ff8c 	bl	801cfd8 <sys_arch_protect>
 80130c0:	6178      	str	r0, [r7, #20]
 80130c2:	6978      	ldr	r0, [r7, #20]
 80130c4:	f009 ff96 	bl	801cff4 <sys_arch_unprotect>
    return;
 80130c8:	e029      	b.n	801311e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80130ca:	69f8      	ldr	r0, [r7, #28]
 80130cc:	f7ff ff72 	bl	8012fb4 <mem_link_valid>
 80130d0:	4603      	mov	r3, r0
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d110      	bne.n	80130f8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80130d6:	4b13      	ldr	r3, [pc, #76]	@ (8013124 <mem_free+0xf8>)
 80130d8:	f240 2295 	movw	r2, #661	@ 0x295
 80130dc:	4919      	ldr	r1, [pc, #100]	@ (8013144 <mem_free+0x118>)
 80130de:	4813      	ldr	r0, [pc, #76]	@ (801312c <mem_free+0x100>)
 80130e0:	f00a fff8 	bl	801e0d4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80130e4:	4815      	ldr	r0, [pc, #84]	@ (801313c <mem_free+0x110>)
 80130e6:	f009 ff4a 	bl	801cf7e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80130ea:	f009 ff75 	bl	801cfd8 <sys_arch_protect>
 80130ee:	61b8      	str	r0, [r7, #24]
 80130f0:	69b8      	ldr	r0, [r7, #24]
 80130f2:	f009 ff7f 	bl	801cff4 <sys_arch_unprotect>
    return;
 80130f6:	e012      	b.n	801311e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80130f8:	69fb      	ldr	r3, [r7, #28]
 80130fa:	2200      	movs	r2, #0
 80130fc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80130fe:	4b12      	ldr	r3, [pc, #72]	@ (8013148 <mem_free+0x11c>)
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	69fa      	ldr	r2, [r7, #28]
 8013104:	429a      	cmp	r2, r3
 8013106:	d202      	bcs.n	801310e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8013108:	4a0f      	ldr	r2, [pc, #60]	@ (8013148 <mem_free+0x11c>)
 801310a:	69fb      	ldr	r3, [r7, #28]
 801310c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801310e:	69f8      	ldr	r0, [r7, #28]
 8013110:	f7ff fe60 	bl	8012dd4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013114:	4809      	ldr	r0, [pc, #36]	@ (801313c <mem_free+0x110>)
 8013116:	f009 ff32 	bl	801cf7e <sys_mutex_unlock>
 801311a:	e000      	b.n	801311e <mem_free+0xf2>
    return;
 801311c:	bf00      	nop
}
 801311e:	3720      	adds	r7, #32
 8013120:	46bd      	mov	sp, r7
 8013122:	bd80      	pop	{r7, pc}
 8013124:	0801f368 	.word	0x0801f368
 8013128:	0801f458 	.word	0x0801f458
 801312c:	0801f3b0 	.word	0x0801f3b0
 8013130:	200246c8 	.word	0x200246c8
 8013134:	200246cc 	.word	0x200246cc
 8013138:	0801f47c 	.word	0x0801f47c
 801313c:	200246d0 	.word	0x200246d0
 8013140:	0801f498 	.word	0x0801f498
 8013144:	0801f4c0 	.word	0x0801f4c0
 8013148:	200246d4 	.word	0x200246d4

0801314c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b088      	sub	sp, #32
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
 8013154:	460b      	mov	r3, r1
 8013156:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8013158:	887b      	ldrh	r3, [r7, #2]
 801315a:	3303      	adds	r3, #3
 801315c:	b29b      	uxth	r3, r3
 801315e:	f023 0303 	bic.w	r3, r3, #3
 8013162:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8013164:	8bfb      	ldrh	r3, [r7, #30]
 8013166:	2b0b      	cmp	r3, #11
 8013168:	d801      	bhi.n	801316e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801316a:	230c      	movs	r3, #12
 801316c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801316e:	8bfb      	ldrh	r3, [r7, #30]
 8013170:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8013174:	d803      	bhi.n	801317e <mem_trim+0x32>
 8013176:	8bfa      	ldrh	r2, [r7, #30]
 8013178:	887b      	ldrh	r3, [r7, #2]
 801317a:	429a      	cmp	r2, r3
 801317c:	d201      	bcs.n	8013182 <mem_trim+0x36>
    return NULL;
 801317e:	2300      	movs	r3, #0
 8013180:	e0d8      	b.n	8013334 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013182:	4b6e      	ldr	r3, [pc, #440]	@ (801333c <mem_trim+0x1f0>)
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	687a      	ldr	r2, [r7, #4]
 8013188:	429a      	cmp	r2, r3
 801318a:	d304      	bcc.n	8013196 <mem_trim+0x4a>
 801318c:	4b6c      	ldr	r3, [pc, #432]	@ (8013340 <mem_trim+0x1f4>)
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	687a      	ldr	r2, [r7, #4]
 8013192:	429a      	cmp	r2, r3
 8013194:	d306      	bcc.n	80131a4 <mem_trim+0x58>
 8013196:	4b6b      	ldr	r3, [pc, #428]	@ (8013344 <mem_trim+0x1f8>)
 8013198:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801319c:	496a      	ldr	r1, [pc, #424]	@ (8013348 <mem_trim+0x1fc>)
 801319e:	486b      	ldr	r0, [pc, #428]	@ (801334c <mem_trim+0x200>)
 80131a0:	f00a ff98 	bl	801e0d4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80131a4:	4b65      	ldr	r3, [pc, #404]	@ (801333c <mem_trim+0x1f0>)
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	687a      	ldr	r2, [r7, #4]
 80131aa:	429a      	cmp	r2, r3
 80131ac:	d304      	bcc.n	80131b8 <mem_trim+0x6c>
 80131ae:	4b64      	ldr	r3, [pc, #400]	@ (8013340 <mem_trim+0x1f4>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	687a      	ldr	r2, [r7, #4]
 80131b4:	429a      	cmp	r2, r3
 80131b6:	d307      	bcc.n	80131c8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80131b8:	f009 ff0e 	bl	801cfd8 <sys_arch_protect>
 80131bc:	60b8      	str	r0, [r7, #8]
 80131be:	68b8      	ldr	r0, [r7, #8]
 80131c0:	f009 ff18 	bl	801cff4 <sys_arch_unprotect>
    return rmem;
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	e0b5      	b.n	8013334 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	3b08      	subs	r3, #8
 80131cc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80131ce:	69b8      	ldr	r0, [r7, #24]
 80131d0:	f7ff fdee 	bl	8012db0 <mem_to_ptr>
 80131d4:	4603      	mov	r3, r0
 80131d6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80131d8:	69bb      	ldr	r3, [r7, #24]
 80131da:	881a      	ldrh	r2, [r3, #0]
 80131dc:	8afb      	ldrh	r3, [r7, #22]
 80131de:	1ad3      	subs	r3, r2, r3
 80131e0:	b29b      	uxth	r3, r3
 80131e2:	3b08      	subs	r3, #8
 80131e4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80131e6:	8bfa      	ldrh	r2, [r7, #30]
 80131e8:	8abb      	ldrh	r3, [r7, #20]
 80131ea:	429a      	cmp	r2, r3
 80131ec:	d906      	bls.n	80131fc <mem_trim+0xb0>
 80131ee:	4b55      	ldr	r3, [pc, #340]	@ (8013344 <mem_trim+0x1f8>)
 80131f0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80131f4:	4956      	ldr	r1, [pc, #344]	@ (8013350 <mem_trim+0x204>)
 80131f6:	4855      	ldr	r0, [pc, #340]	@ (801334c <mem_trim+0x200>)
 80131f8:	f00a ff6c 	bl	801e0d4 <iprintf>
  if (newsize > size) {
 80131fc:	8bfa      	ldrh	r2, [r7, #30]
 80131fe:	8abb      	ldrh	r3, [r7, #20]
 8013200:	429a      	cmp	r2, r3
 8013202:	d901      	bls.n	8013208 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8013204:	2300      	movs	r3, #0
 8013206:	e095      	b.n	8013334 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8013208:	8bfa      	ldrh	r2, [r7, #30]
 801320a:	8abb      	ldrh	r3, [r7, #20]
 801320c:	429a      	cmp	r2, r3
 801320e:	d101      	bne.n	8013214 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	e08f      	b.n	8013334 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013214:	484f      	ldr	r0, [pc, #316]	@ (8013354 <mem_trim+0x208>)
 8013216:	f009 fea3 	bl	801cf60 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801321a:	69bb      	ldr	r3, [r7, #24]
 801321c:	881b      	ldrh	r3, [r3, #0]
 801321e:	4618      	mov	r0, r3
 8013220:	f7ff fdb4 	bl	8012d8c <ptr_to_mem>
 8013224:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	791b      	ldrb	r3, [r3, #4]
 801322a:	2b00      	cmp	r3, #0
 801322c:	d13f      	bne.n	80132ae <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801322e:	69bb      	ldr	r3, [r7, #24]
 8013230:	881b      	ldrh	r3, [r3, #0]
 8013232:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8013236:	d106      	bne.n	8013246 <mem_trim+0xfa>
 8013238:	4b42      	ldr	r3, [pc, #264]	@ (8013344 <mem_trim+0x1f8>)
 801323a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 801323e:	4946      	ldr	r1, [pc, #280]	@ (8013358 <mem_trim+0x20c>)
 8013240:	4842      	ldr	r0, [pc, #264]	@ (801334c <mem_trim+0x200>)
 8013242:	f00a ff47 	bl	801e0d4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8013246:	693b      	ldr	r3, [r7, #16]
 8013248:	881b      	ldrh	r3, [r3, #0]
 801324a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801324c:	8afa      	ldrh	r2, [r7, #22]
 801324e:	8bfb      	ldrh	r3, [r7, #30]
 8013250:	4413      	add	r3, r2
 8013252:	b29b      	uxth	r3, r3
 8013254:	3308      	adds	r3, #8
 8013256:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8013258:	4b40      	ldr	r3, [pc, #256]	@ (801335c <mem_trim+0x210>)
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	693a      	ldr	r2, [r7, #16]
 801325e:	429a      	cmp	r2, r3
 8013260:	d106      	bne.n	8013270 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8013262:	89fb      	ldrh	r3, [r7, #14]
 8013264:	4618      	mov	r0, r3
 8013266:	f7ff fd91 	bl	8012d8c <ptr_to_mem>
 801326a:	4603      	mov	r3, r0
 801326c:	4a3b      	ldr	r2, [pc, #236]	@ (801335c <mem_trim+0x210>)
 801326e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8013270:	89fb      	ldrh	r3, [r7, #14]
 8013272:	4618      	mov	r0, r3
 8013274:	f7ff fd8a 	bl	8012d8c <ptr_to_mem>
 8013278:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801327a:	693b      	ldr	r3, [r7, #16]
 801327c:	2200      	movs	r2, #0
 801327e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8013280:	693b      	ldr	r3, [r7, #16]
 8013282:	89ba      	ldrh	r2, [r7, #12]
 8013284:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8013286:	693b      	ldr	r3, [r7, #16]
 8013288:	8afa      	ldrh	r2, [r7, #22]
 801328a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801328c:	69bb      	ldr	r3, [r7, #24]
 801328e:	89fa      	ldrh	r2, [r7, #14]
 8013290:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013292:	693b      	ldr	r3, [r7, #16]
 8013294:	881b      	ldrh	r3, [r3, #0]
 8013296:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801329a:	d047      	beq.n	801332c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801329c:	693b      	ldr	r3, [r7, #16]
 801329e:	881b      	ldrh	r3, [r3, #0]
 80132a0:	4618      	mov	r0, r3
 80132a2:	f7ff fd73 	bl	8012d8c <ptr_to_mem>
 80132a6:	4602      	mov	r2, r0
 80132a8:	89fb      	ldrh	r3, [r7, #14]
 80132aa:	8053      	strh	r3, [r2, #2]
 80132ac:	e03e      	b.n	801332c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80132ae:	8bfb      	ldrh	r3, [r7, #30]
 80132b0:	f103 0214 	add.w	r2, r3, #20
 80132b4:	8abb      	ldrh	r3, [r7, #20]
 80132b6:	429a      	cmp	r2, r3
 80132b8:	d838      	bhi.n	801332c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80132ba:	8afa      	ldrh	r2, [r7, #22]
 80132bc:	8bfb      	ldrh	r3, [r7, #30]
 80132be:	4413      	add	r3, r2
 80132c0:	b29b      	uxth	r3, r3
 80132c2:	3308      	adds	r3, #8
 80132c4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80132c6:	69bb      	ldr	r3, [r7, #24]
 80132c8:	881b      	ldrh	r3, [r3, #0]
 80132ca:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80132ce:	d106      	bne.n	80132de <mem_trim+0x192>
 80132d0:	4b1c      	ldr	r3, [pc, #112]	@ (8013344 <mem_trim+0x1f8>)
 80132d2:	f240 3216 	movw	r2, #790	@ 0x316
 80132d6:	4920      	ldr	r1, [pc, #128]	@ (8013358 <mem_trim+0x20c>)
 80132d8:	481c      	ldr	r0, [pc, #112]	@ (801334c <mem_trim+0x200>)
 80132da:	f00a fefb 	bl	801e0d4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80132de:	89fb      	ldrh	r3, [r7, #14]
 80132e0:	4618      	mov	r0, r3
 80132e2:	f7ff fd53 	bl	8012d8c <ptr_to_mem>
 80132e6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80132e8:	4b1c      	ldr	r3, [pc, #112]	@ (801335c <mem_trim+0x210>)
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	693a      	ldr	r2, [r7, #16]
 80132ee:	429a      	cmp	r2, r3
 80132f0:	d202      	bcs.n	80132f8 <mem_trim+0x1ac>
      lfree = mem2;
 80132f2:	4a1a      	ldr	r2, [pc, #104]	@ (801335c <mem_trim+0x210>)
 80132f4:	693b      	ldr	r3, [r7, #16]
 80132f6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80132f8:	693b      	ldr	r3, [r7, #16]
 80132fa:	2200      	movs	r2, #0
 80132fc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80132fe:	69bb      	ldr	r3, [r7, #24]
 8013300:	881a      	ldrh	r2, [r3, #0]
 8013302:	693b      	ldr	r3, [r7, #16]
 8013304:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8013306:	693b      	ldr	r3, [r7, #16]
 8013308:	8afa      	ldrh	r2, [r7, #22]
 801330a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801330c:	69bb      	ldr	r3, [r7, #24]
 801330e:	89fa      	ldrh	r2, [r7, #14]
 8013310:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013312:	693b      	ldr	r3, [r7, #16]
 8013314:	881b      	ldrh	r3, [r3, #0]
 8013316:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801331a:	d007      	beq.n	801332c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801331c:	693b      	ldr	r3, [r7, #16]
 801331e:	881b      	ldrh	r3, [r3, #0]
 8013320:	4618      	mov	r0, r3
 8013322:	f7ff fd33 	bl	8012d8c <ptr_to_mem>
 8013326:	4602      	mov	r2, r0
 8013328:	89fb      	ldrh	r3, [r7, #14]
 801332a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801332c:	4809      	ldr	r0, [pc, #36]	@ (8013354 <mem_trim+0x208>)
 801332e:	f009 fe26 	bl	801cf7e <sys_mutex_unlock>
  return rmem;
 8013332:	687b      	ldr	r3, [r7, #4]
}
 8013334:	4618      	mov	r0, r3
 8013336:	3720      	adds	r7, #32
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}
 801333c:	200246c8 	.word	0x200246c8
 8013340:	200246cc 	.word	0x200246cc
 8013344:	0801f368 	.word	0x0801f368
 8013348:	0801f4f4 	.word	0x0801f4f4
 801334c:	0801f3b0 	.word	0x0801f3b0
 8013350:	0801f50c 	.word	0x0801f50c
 8013354:	200246d0 	.word	0x200246d0
 8013358:	0801f52c 	.word	0x0801f52c
 801335c:	200246d4 	.word	0x200246d4

08013360 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b088      	sub	sp, #32
 8013364:	af00      	add	r7, sp, #0
 8013366:	4603      	mov	r3, r0
 8013368:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801336a:	88fb      	ldrh	r3, [r7, #6]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d101      	bne.n	8013374 <mem_malloc+0x14>
    return NULL;
 8013370:	2300      	movs	r3, #0
 8013372:	e0e2      	b.n	801353a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013374:	88fb      	ldrh	r3, [r7, #6]
 8013376:	3303      	adds	r3, #3
 8013378:	b29b      	uxth	r3, r3
 801337a:	f023 0303 	bic.w	r3, r3, #3
 801337e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8013380:	8bbb      	ldrh	r3, [r7, #28]
 8013382:	2b0b      	cmp	r3, #11
 8013384:	d801      	bhi.n	801338a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8013386:	230c      	movs	r3, #12
 8013388:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801338a:	8bbb      	ldrh	r3, [r7, #28]
 801338c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8013390:	d803      	bhi.n	801339a <mem_malloc+0x3a>
 8013392:	8bba      	ldrh	r2, [r7, #28]
 8013394:	88fb      	ldrh	r3, [r7, #6]
 8013396:	429a      	cmp	r2, r3
 8013398:	d201      	bcs.n	801339e <mem_malloc+0x3e>
    return NULL;
 801339a:	2300      	movs	r3, #0
 801339c:	e0cd      	b.n	801353a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801339e:	4869      	ldr	r0, [pc, #420]	@ (8013544 <mem_malloc+0x1e4>)
 80133a0:	f009 fdde 	bl	801cf60 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80133a4:	4b68      	ldr	r3, [pc, #416]	@ (8013548 <mem_malloc+0x1e8>)
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	4618      	mov	r0, r3
 80133aa:	f7ff fd01 	bl	8012db0 <mem_to_ptr>
 80133ae:	4603      	mov	r3, r0
 80133b0:	83fb      	strh	r3, [r7, #30]
 80133b2:	e0b7      	b.n	8013524 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80133b4:	8bfb      	ldrh	r3, [r7, #30]
 80133b6:	4618      	mov	r0, r3
 80133b8:	f7ff fce8 	bl	8012d8c <ptr_to_mem>
 80133bc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80133be:	697b      	ldr	r3, [r7, #20]
 80133c0:	791b      	ldrb	r3, [r3, #4]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	f040 80a7 	bne.w	8013516 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80133c8:	697b      	ldr	r3, [r7, #20]
 80133ca:	881b      	ldrh	r3, [r3, #0]
 80133cc:	461a      	mov	r2, r3
 80133ce:	8bfb      	ldrh	r3, [r7, #30]
 80133d0:	1ad3      	subs	r3, r2, r3
 80133d2:	f1a3 0208 	sub.w	r2, r3, #8
 80133d6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80133d8:	429a      	cmp	r2, r3
 80133da:	f0c0 809c 	bcc.w	8013516 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80133de:	697b      	ldr	r3, [r7, #20]
 80133e0:	881b      	ldrh	r3, [r3, #0]
 80133e2:	461a      	mov	r2, r3
 80133e4:	8bfb      	ldrh	r3, [r7, #30]
 80133e6:	1ad3      	subs	r3, r2, r3
 80133e8:	f1a3 0208 	sub.w	r2, r3, #8
 80133ec:	8bbb      	ldrh	r3, [r7, #28]
 80133ee:	3314      	adds	r3, #20
 80133f0:	429a      	cmp	r2, r3
 80133f2:	d333      	bcc.n	801345c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80133f4:	8bfa      	ldrh	r2, [r7, #30]
 80133f6:	8bbb      	ldrh	r3, [r7, #28]
 80133f8:	4413      	add	r3, r2
 80133fa:	b29b      	uxth	r3, r3
 80133fc:	3308      	adds	r3, #8
 80133fe:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8013400:	8a7b      	ldrh	r3, [r7, #18]
 8013402:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8013406:	d106      	bne.n	8013416 <mem_malloc+0xb6>
 8013408:	4b50      	ldr	r3, [pc, #320]	@ (801354c <mem_malloc+0x1ec>)
 801340a:	f240 3287 	movw	r2, #903	@ 0x387
 801340e:	4950      	ldr	r1, [pc, #320]	@ (8013550 <mem_malloc+0x1f0>)
 8013410:	4850      	ldr	r0, [pc, #320]	@ (8013554 <mem_malloc+0x1f4>)
 8013412:	f00a fe5f 	bl	801e0d4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013416:	8a7b      	ldrh	r3, [r7, #18]
 8013418:	4618      	mov	r0, r3
 801341a:	f7ff fcb7 	bl	8012d8c <ptr_to_mem>
 801341e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	2200      	movs	r2, #0
 8013424:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013426:	697b      	ldr	r3, [r7, #20]
 8013428:	881a      	ldrh	r2, [r3, #0]
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	8bfa      	ldrh	r2, [r7, #30]
 8013432:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013434:	697b      	ldr	r3, [r7, #20]
 8013436:	8a7a      	ldrh	r2, [r7, #18]
 8013438:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801343a:	697b      	ldr	r3, [r7, #20]
 801343c:	2201      	movs	r2, #1
 801343e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	881b      	ldrh	r3, [r3, #0]
 8013444:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8013448:	d00b      	beq.n	8013462 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	881b      	ldrh	r3, [r3, #0]
 801344e:	4618      	mov	r0, r3
 8013450:	f7ff fc9c 	bl	8012d8c <ptr_to_mem>
 8013454:	4602      	mov	r2, r0
 8013456:	8a7b      	ldrh	r3, [r7, #18]
 8013458:	8053      	strh	r3, [r2, #2]
 801345a:	e002      	b.n	8013462 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801345c:	697b      	ldr	r3, [r7, #20]
 801345e:	2201      	movs	r2, #1
 8013460:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013462:	4b39      	ldr	r3, [pc, #228]	@ (8013548 <mem_malloc+0x1e8>)
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	697a      	ldr	r2, [r7, #20]
 8013468:	429a      	cmp	r2, r3
 801346a:	d127      	bne.n	80134bc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 801346c:	4b36      	ldr	r3, [pc, #216]	@ (8013548 <mem_malloc+0x1e8>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013472:	e005      	b.n	8013480 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013474:	69bb      	ldr	r3, [r7, #24]
 8013476:	881b      	ldrh	r3, [r3, #0]
 8013478:	4618      	mov	r0, r3
 801347a:	f7ff fc87 	bl	8012d8c <ptr_to_mem>
 801347e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013480:	69bb      	ldr	r3, [r7, #24]
 8013482:	791b      	ldrb	r3, [r3, #4]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d004      	beq.n	8013492 <mem_malloc+0x132>
 8013488:	4b33      	ldr	r3, [pc, #204]	@ (8013558 <mem_malloc+0x1f8>)
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	69ba      	ldr	r2, [r7, #24]
 801348e:	429a      	cmp	r2, r3
 8013490:	d1f0      	bne.n	8013474 <mem_malloc+0x114>
          }
          lfree = cur;
 8013492:	4a2d      	ldr	r2, [pc, #180]	@ (8013548 <mem_malloc+0x1e8>)
 8013494:	69bb      	ldr	r3, [r7, #24]
 8013496:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013498:	4b2b      	ldr	r3, [pc, #172]	@ (8013548 <mem_malloc+0x1e8>)
 801349a:	681a      	ldr	r2, [r3, #0]
 801349c:	4b2e      	ldr	r3, [pc, #184]	@ (8013558 <mem_malloc+0x1f8>)
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	429a      	cmp	r2, r3
 80134a2:	d00b      	beq.n	80134bc <mem_malloc+0x15c>
 80134a4:	4b28      	ldr	r3, [pc, #160]	@ (8013548 <mem_malloc+0x1e8>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	791b      	ldrb	r3, [r3, #4]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d006      	beq.n	80134bc <mem_malloc+0x15c>
 80134ae:	4b27      	ldr	r3, [pc, #156]	@ (801354c <mem_malloc+0x1ec>)
 80134b0:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80134b4:	4929      	ldr	r1, [pc, #164]	@ (801355c <mem_malloc+0x1fc>)
 80134b6:	4827      	ldr	r0, [pc, #156]	@ (8013554 <mem_malloc+0x1f4>)
 80134b8:	f00a fe0c 	bl	801e0d4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80134bc:	4821      	ldr	r0, [pc, #132]	@ (8013544 <mem_malloc+0x1e4>)
 80134be:	f009 fd5e 	bl	801cf7e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80134c2:	8bba      	ldrh	r2, [r7, #28]
 80134c4:	697b      	ldr	r3, [r7, #20]
 80134c6:	4413      	add	r3, r2
 80134c8:	3308      	adds	r3, #8
 80134ca:	4a23      	ldr	r2, [pc, #140]	@ (8013558 <mem_malloc+0x1f8>)
 80134cc:	6812      	ldr	r2, [r2, #0]
 80134ce:	4293      	cmp	r3, r2
 80134d0:	d906      	bls.n	80134e0 <mem_malloc+0x180>
 80134d2:	4b1e      	ldr	r3, [pc, #120]	@ (801354c <mem_malloc+0x1ec>)
 80134d4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80134d8:	4921      	ldr	r1, [pc, #132]	@ (8013560 <mem_malloc+0x200>)
 80134da:	481e      	ldr	r0, [pc, #120]	@ (8013554 <mem_malloc+0x1f4>)
 80134dc:	f00a fdfa 	bl	801e0d4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80134e0:	697b      	ldr	r3, [r7, #20]
 80134e2:	f003 0303 	and.w	r3, r3, #3
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d006      	beq.n	80134f8 <mem_malloc+0x198>
 80134ea:	4b18      	ldr	r3, [pc, #96]	@ (801354c <mem_malloc+0x1ec>)
 80134ec:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80134f0:	491c      	ldr	r1, [pc, #112]	@ (8013564 <mem_malloc+0x204>)
 80134f2:	4818      	ldr	r0, [pc, #96]	@ (8013554 <mem_malloc+0x1f4>)
 80134f4:	f00a fdee 	bl	801e0d4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80134f8:	697b      	ldr	r3, [r7, #20]
 80134fa:	f003 0303 	and.w	r3, r3, #3
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d006      	beq.n	8013510 <mem_malloc+0x1b0>
 8013502:	4b12      	ldr	r3, [pc, #72]	@ (801354c <mem_malloc+0x1ec>)
 8013504:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8013508:	4917      	ldr	r1, [pc, #92]	@ (8013568 <mem_malloc+0x208>)
 801350a:	4812      	ldr	r0, [pc, #72]	@ (8013554 <mem_malloc+0x1f4>)
 801350c:	f00a fde2 	bl	801e0d4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8013510:	697b      	ldr	r3, [r7, #20]
 8013512:	3308      	adds	r3, #8
 8013514:	e011      	b.n	801353a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8013516:	8bfb      	ldrh	r3, [r7, #30]
 8013518:	4618      	mov	r0, r3
 801351a:	f7ff fc37 	bl	8012d8c <ptr_to_mem>
 801351e:	4603      	mov	r3, r0
 8013520:	881b      	ldrh	r3, [r3, #0]
 8013522:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013524:	8bfa      	ldrh	r2, [r7, #30]
 8013526:	8bbb      	ldrh	r3, [r7, #28]
 8013528:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 801352c:	429a      	cmp	r2, r3
 801352e:	f4ff af41 	bcc.w	80133b4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8013532:	4804      	ldr	r0, [pc, #16]	@ (8013544 <mem_malloc+0x1e4>)
 8013534:	f009 fd23 	bl	801cf7e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013538:	2300      	movs	r3, #0
}
 801353a:	4618      	mov	r0, r3
 801353c:	3720      	adds	r7, #32
 801353e:	46bd      	mov	sp, r7
 8013540:	bd80      	pop	{r7, pc}
 8013542:	bf00      	nop
 8013544:	200246d0 	.word	0x200246d0
 8013548:	200246d4 	.word	0x200246d4
 801354c:	0801f368 	.word	0x0801f368
 8013550:	0801f52c 	.word	0x0801f52c
 8013554:	0801f3b0 	.word	0x0801f3b0
 8013558:	200246cc 	.word	0x200246cc
 801355c:	0801f540 	.word	0x0801f540
 8013560:	0801f55c 	.word	0x0801f55c
 8013564:	0801f58c 	.word	0x0801f58c
 8013568:	0801f5bc 	.word	0x0801f5bc

0801356c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801356c:	b480      	push	{r7}
 801356e:	b085      	sub	sp, #20
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	689b      	ldr	r3, [r3, #8]
 8013578:	2200      	movs	r2, #0
 801357a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	685b      	ldr	r3, [r3, #4]
 8013580:	3303      	adds	r3, #3
 8013582:	f023 0303 	bic.w	r3, r3, #3
 8013586:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013588:	2300      	movs	r3, #0
 801358a:	60fb      	str	r3, [r7, #12]
 801358c:	e011      	b.n	80135b2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	689b      	ldr	r3, [r3, #8]
 8013592:	681a      	ldr	r2, [r3, #0]
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	689b      	ldr	r3, [r3, #8]
 801359c:	68ba      	ldr	r2, [r7, #8]
 801359e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	881b      	ldrh	r3, [r3, #0]
 80135a4:	461a      	mov	r2, r3
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	4413      	add	r3, r2
 80135aa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	3301      	adds	r3, #1
 80135b0:	60fb      	str	r3, [r7, #12]
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	885b      	ldrh	r3, [r3, #2]
 80135b6:	461a      	mov	r2, r3
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	4293      	cmp	r3, r2
 80135bc:	dbe7      	blt.n	801358e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80135be:	bf00      	nop
 80135c0:	bf00      	nop
 80135c2:	3714      	adds	r7, #20
 80135c4:	46bd      	mov	sp, r7
 80135c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ca:	4770      	bx	lr

080135cc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b082      	sub	sp, #8
 80135d0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80135d2:	2300      	movs	r3, #0
 80135d4:	80fb      	strh	r3, [r7, #6]
 80135d6:	e009      	b.n	80135ec <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80135d8:	88fb      	ldrh	r3, [r7, #6]
 80135da:	4a08      	ldr	r2, [pc, #32]	@ (80135fc <memp_init+0x30>)
 80135dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80135e0:	4618      	mov	r0, r3
 80135e2:	f7ff ffc3 	bl	801356c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80135e6:	88fb      	ldrh	r3, [r7, #6]
 80135e8:	3301      	adds	r3, #1
 80135ea:	80fb      	strh	r3, [r7, #6]
 80135ec:	88fb      	ldrh	r3, [r7, #6]
 80135ee:	2b0c      	cmp	r3, #12
 80135f0:	d9f2      	bls.n	80135d8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80135f2:	bf00      	nop
 80135f4:	bf00      	nop
 80135f6:	3708      	adds	r7, #8
 80135f8:	46bd      	mov	sp, r7
 80135fa:	bd80      	pop	{r7, pc}
 80135fc:	080222bc 	.word	0x080222bc

08013600 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b084      	sub	sp, #16
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8013608:	f009 fce6 	bl	801cfd8 <sys_arch_protect>
 801360c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	689b      	ldr	r3, [r3, #8]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8013616:	68bb      	ldr	r3, [r7, #8]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d015      	beq.n	8013648 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	689b      	ldr	r3, [r3, #8]
 8013620:	68ba      	ldr	r2, [r7, #8]
 8013622:	6812      	ldr	r2, [r2, #0]
 8013624:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013626:	68bb      	ldr	r3, [r7, #8]
 8013628:	f003 0303 	and.w	r3, r3, #3
 801362c:	2b00      	cmp	r3, #0
 801362e:	d006      	beq.n	801363e <do_memp_malloc_pool+0x3e>
 8013630:	4b09      	ldr	r3, [pc, #36]	@ (8013658 <do_memp_malloc_pool+0x58>)
 8013632:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8013636:	4909      	ldr	r1, [pc, #36]	@ (801365c <do_memp_malloc_pool+0x5c>)
 8013638:	4809      	ldr	r0, [pc, #36]	@ (8013660 <do_memp_malloc_pool+0x60>)
 801363a:	f00a fd4b 	bl	801e0d4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801363e:	68f8      	ldr	r0, [r7, #12]
 8013640:	f009 fcd8 	bl	801cff4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013644:	68bb      	ldr	r3, [r7, #8]
 8013646:	e003      	b.n	8013650 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013648:	68f8      	ldr	r0, [r7, #12]
 801364a:	f009 fcd3 	bl	801cff4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801364e:	2300      	movs	r3, #0
}
 8013650:	4618      	mov	r0, r3
 8013652:	3710      	adds	r7, #16
 8013654:	46bd      	mov	sp, r7
 8013656:	bd80      	pop	{r7, pc}
 8013658:	0801f5e0 	.word	0x0801f5e0
 801365c:	0801f610 	.word	0x0801f610
 8013660:	0801f634 	.word	0x0801f634

08013664 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013664:	b580      	push	{r7, lr}
 8013666:	b082      	sub	sp, #8
 8013668:	af00      	add	r7, sp, #0
 801366a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d106      	bne.n	8013680 <memp_malloc_pool+0x1c>
 8013672:	4b0a      	ldr	r3, [pc, #40]	@ (801369c <memp_malloc_pool+0x38>)
 8013674:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8013678:	4909      	ldr	r1, [pc, #36]	@ (80136a0 <memp_malloc_pool+0x3c>)
 801367a:	480a      	ldr	r0, [pc, #40]	@ (80136a4 <memp_malloc_pool+0x40>)
 801367c:	f00a fd2a 	bl	801e0d4 <iprintf>
  if (desc == NULL) {
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d101      	bne.n	801368a <memp_malloc_pool+0x26>
    return NULL;
 8013686:	2300      	movs	r3, #0
 8013688:	e003      	b.n	8013692 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801368a:	6878      	ldr	r0, [r7, #4]
 801368c:	f7ff ffb8 	bl	8013600 <do_memp_malloc_pool>
 8013690:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8013692:	4618      	mov	r0, r3
 8013694:	3708      	adds	r7, #8
 8013696:	46bd      	mov	sp, r7
 8013698:	bd80      	pop	{r7, pc}
 801369a:	bf00      	nop
 801369c:	0801f5e0 	.word	0x0801f5e0
 80136a0:	0801f65c 	.word	0x0801f65c
 80136a4:	0801f634 	.word	0x0801f634

080136a8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b084      	sub	sp, #16
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	4603      	mov	r3, r0
 80136b0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80136b2:	79fb      	ldrb	r3, [r7, #7]
 80136b4:	2b0c      	cmp	r3, #12
 80136b6:	d908      	bls.n	80136ca <memp_malloc+0x22>
 80136b8:	4b0a      	ldr	r3, [pc, #40]	@ (80136e4 <memp_malloc+0x3c>)
 80136ba:	f240 1257 	movw	r2, #343	@ 0x157
 80136be:	490a      	ldr	r1, [pc, #40]	@ (80136e8 <memp_malloc+0x40>)
 80136c0:	480a      	ldr	r0, [pc, #40]	@ (80136ec <memp_malloc+0x44>)
 80136c2:	f00a fd07 	bl	801e0d4 <iprintf>
 80136c6:	2300      	movs	r3, #0
 80136c8:	e008      	b.n	80136dc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80136ca:	79fb      	ldrb	r3, [r7, #7]
 80136cc:	4a08      	ldr	r2, [pc, #32]	@ (80136f0 <memp_malloc+0x48>)
 80136ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136d2:	4618      	mov	r0, r3
 80136d4:	f7ff ff94 	bl	8013600 <do_memp_malloc_pool>
 80136d8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80136da:	68fb      	ldr	r3, [r7, #12]
}
 80136dc:	4618      	mov	r0, r3
 80136de:	3710      	adds	r7, #16
 80136e0:	46bd      	mov	sp, r7
 80136e2:	bd80      	pop	{r7, pc}
 80136e4:	0801f5e0 	.word	0x0801f5e0
 80136e8:	0801f670 	.word	0x0801f670
 80136ec:	0801f634 	.word	0x0801f634
 80136f0:	080222bc 	.word	0x080222bc

080136f4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b084      	sub	sp, #16
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
 80136fc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80136fe:	683b      	ldr	r3, [r7, #0]
 8013700:	f003 0303 	and.w	r3, r3, #3
 8013704:	2b00      	cmp	r3, #0
 8013706:	d006      	beq.n	8013716 <do_memp_free_pool+0x22>
 8013708:	4b0d      	ldr	r3, [pc, #52]	@ (8013740 <do_memp_free_pool+0x4c>)
 801370a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801370e:	490d      	ldr	r1, [pc, #52]	@ (8013744 <do_memp_free_pool+0x50>)
 8013710:	480d      	ldr	r0, [pc, #52]	@ (8013748 <do_memp_free_pool+0x54>)
 8013712:	f00a fcdf 	bl	801e0d4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8013716:	683b      	ldr	r3, [r7, #0]
 8013718:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801371a:	f009 fc5d 	bl	801cfd8 <sys_arch_protect>
 801371e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	689b      	ldr	r3, [r3, #8]
 8013724:	681a      	ldr	r2, [r3, #0]
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	689b      	ldr	r3, [r3, #8]
 801372e:	68fa      	ldr	r2, [r7, #12]
 8013730:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8013732:	68b8      	ldr	r0, [r7, #8]
 8013734:	f009 fc5e 	bl	801cff4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013738:	bf00      	nop
 801373a:	3710      	adds	r7, #16
 801373c:	46bd      	mov	sp, r7
 801373e:	bd80      	pop	{r7, pc}
 8013740:	0801f5e0 	.word	0x0801f5e0
 8013744:	0801f690 	.word	0x0801f690
 8013748:	0801f634 	.word	0x0801f634

0801374c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801374c:	b580      	push	{r7, lr}
 801374e:	b082      	sub	sp, #8
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
 8013754:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d106      	bne.n	801376a <memp_free_pool+0x1e>
 801375c:	4b0a      	ldr	r3, [pc, #40]	@ (8013788 <memp_free_pool+0x3c>)
 801375e:	f240 1295 	movw	r2, #405	@ 0x195
 8013762:	490a      	ldr	r1, [pc, #40]	@ (801378c <memp_free_pool+0x40>)
 8013764:	480a      	ldr	r0, [pc, #40]	@ (8013790 <memp_free_pool+0x44>)
 8013766:	f00a fcb5 	bl	801e0d4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d007      	beq.n	8013780 <memp_free_pool+0x34>
 8013770:	683b      	ldr	r3, [r7, #0]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d004      	beq.n	8013780 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8013776:	6839      	ldr	r1, [r7, #0]
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f7ff ffbb 	bl	80136f4 <do_memp_free_pool>
 801377e:	e000      	b.n	8013782 <memp_free_pool+0x36>
    return;
 8013780:	bf00      	nop
}
 8013782:	3708      	adds	r7, #8
 8013784:	46bd      	mov	sp, r7
 8013786:	bd80      	pop	{r7, pc}
 8013788:	0801f5e0 	.word	0x0801f5e0
 801378c:	0801f65c 	.word	0x0801f65c
 8013790:	0801f634 	.word	0x0801f634

08013794 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b082      	sub	sp, #8
 8013798:	af00      	add	r7, sp, #0
 801379a:	4603      	mov	r3, r0
 801379c:	6039      	str	r1, [r7, #0]
 801379e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80137a0:	79fb      	ldrb	r3, [r7, #7]
 80137a2:	2b0c      	cmp	r3, #12
 80137a4:	d907      	bls.n	80137b6 <memp_free+0x22>
 80137a6:	4b0c      	ldr	r3, [pc, #48]	@ (80137d8 <memp_free+0x44>)
 80137a8:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80137ac:	490b      	ldr	r1, [pc, #44]	@ (80137dc <memp_free+0x48>)
 80137ae:	480c      	ldr	r0, [pc, #48]	@ (80137e0 <memp_free+0x4c>)
 80137b0:	f00a fc90 	bl	801e0d4 <iprintf>
 80137b4:	e00c      	b.n	80137d0 <memp_free+0x3c>

  if (mem == NULL) {
 80137b6:	683b      	ldr	r3, [r7, #0]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d008      	beq.n	80137ce <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80137bc:	79fb      	ldrb	r3, [r7, #7]
 80137be:	4a09      	ldr	r2, [pc, #36]	@ (80137e4 <memp_free+0x50>)
 80137c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80137c4:	6839      	ldr	r1, [r7, #0]
 80137c6:	4618      	mov	r0, r3
 80137c8:	f7ff ff94 	bl	80136f4 <do_memp_free_pool>
 80137cc:	e000      	b.n	80137d0 <memp_free+0x3c>
    return;
 80137ce:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80137d0:	3708      	adds	r7, #8
 80137d2:	46bd      	mov	sp, r7
 80137d4:	bd80      	pop	{r7, pc}
 80137d6:	bf00      	nop
 80137d8:	0801f5e0 	.word	0x0801f5e0
 80137dc:	0801f6b0 	.word	0x0801f6b0
 80137e0:	0801f634 	.word	0x0801f634
 80137e4:	080222bc 	.word	0x080222bc

080137e8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80137e8:	b480      	push	{r7}
 80137ea:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80137ec:	bf00      	nop
 80137ee:	46bd      	mov	sp, r7
 80137f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f4:	4770      	bx	lr
	...

080137f8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b086      	sub	sp, #24
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	60f8      	str	r0, [r7, #12]
 8013800:	60b9      	str	r1, [r7, #8]
 8013802:	607a      	str	r2, [r7, #4]
 8013804:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d108      	bne.n	801381e <netif_add+0x26>
 801380c:	4b57      	ldr	r3, [pc, #348]	@ (801396c <netif_add+0x174>)
 801380e:	f240 1227 	movw	r2, #295	@ 0x127
 8013812:	4957      	ldr	r1, [pc, #348]	@ (8013970 <netif_add+0x178>)
 8013814:	4857      	ldr	r0, [pc, #348]	@ (8013974 <netif_add+0x17c>)
 8013816:	f00a fc5d 	bl	801e0d4 <iprintf>
 801381a:	2300      	movs	r3, #0
 801381c:	e0a2      	b.n	8013964 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801381e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013820:	2b00      	cmp	r3, #0
 8013822:	d108      	bne.n	8013836 <netif_add+0x3e>
 8013824:	4b51      	ldr	r3, [pc, #324]	@ (801396c <netif_add+0x174>)
 8013826:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801382a:	4953      	ldr	r1, [pc, #332]	@ (8013978 <netif_add+0x180>)
 801382c:	4851      	ldr	r0, [pc, #324]	@ (8013974 <netif_add+0x17c>)
 801382e:	f00a fc51 	bl	801e0d4 <iprintf>
 8013832:	2300      	movs	r3, #0
 8013834:	e096      	b.n	8013964 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013836:	68bb      	ldr	r3, [r7, #8]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d101      	bne.n	8013840 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801383c:	4b4f      	ldr	r3, [pc, #316]	@ (801397c <netif_add+0x184>)
 801383e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d101      	bne.n	801384a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013846:	4b4d      	ldr	r3, [pc, #308]	@ (801397c <netif_add+0x184>)
 8013848:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801384a:	683b      	ldr	r3, [r7, #0]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d101      	bne.n	8013854 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013850:	4b4a      	ldr	r3, [pc, #296]	@ (801397c <netif_add+0x184>)
 8013852:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	2200      	movs	r2, #0
 8013858:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	2200      	movs	r2, #0
 801385e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	2200      	movs	r2, #0
 8013864:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	4a45      	ldr	r2, [pc, #276]	@ (8013980 <netif_add+0x188>)
 801386a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	2200      	movs	r2, #0
 8013870:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	2200      	movs	r2, #0
 8013876:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	2200      	movs	r2, #0
 801387e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	6a3a      	ldr	r2, [r7, #32]
 8013884:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8013886:	4b3f      	ldr	r3, [pc, #252]	@ (8013984 <netif_add+0x18c>)
 8013888:	781a      	ldrb	r2, [r3, #0]
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013894:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013896:	683b      	ldr	r3, [r7, #0]
 8013898:	687a      	ldr	r2, [r7, #4]
 801389a:	68b9      	ldr	r1, [r7, #8]
 801389c:	68f8      	ldr	r0, [r7, #12]
 801389e:	f000 f913 	bl	8013ac8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80138a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138a4:	68f8      	ldr	r0, [r7, #12]
 80138a6:	4798      	blx	r3
 80138a8:	4603      	mov	r3, r0
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d001      	beq.n	80138b2 <netif_add+0xba>
    return NULL;
 80138ae:	2300      	movs	r3, #0
 80138b0:	e058      	b.n	8013964 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80138b8:	2bff      	cmp	r3, #255	@ 0xff
 80138ba:	d103      	bne.n	80138c4 <netif_add+0xcc>
        netif->num = 0;
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	2200      	movs	r2, #0
 80138c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80138c4:	2300      	movs	r3, #0
 80138c6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80138c8:	4b2f      	ldr	r3, [pc, #188]	@ (8013988 <netif_add+0x190>)
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	617b      	str	r3, [r7, #20]
 80138ce:	e02b      	b.n	8013928 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80138d0:	697a      	ldr	r2, [r7, #20]
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	429a      	cmp	r2, r3
 80138d6:	d106      	bne.n	80138e6 <netif_add+0xee>
 80138d8:	4b24      	ldr	r3, [pc, #144]	@ (801396c <netif_add+0x174>)
 80138da:	f240 128b 	movw	r2, #395	@ 0x18b
 80138de:	492b      	ldr	r1, [pc, #172]	@ (801398c <netif_add+0x194>)
 80138e0:	4824      	ldr	r0, [pc, #144]	@ (8013974 <netif_add+0x17c>)
 80138e2:	f00a fbf7 	bl	801e0d4 <iprintf>
        num_netifs++;
 80138e6:	693b      	ldr	r3, [r7, #16]
 80138e8:	3301      	adds	r3, #1
 80138ea:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80138ec:	693b      	ldr	r3, [r7, #16]
 80138ee:	2bff      	cmp	r3, #255	@ 0xff
 80138f0:	dd06      	ble.n	8013900 <netif_add+0x108>
 80138f2:	4b1e      	ldr	r3, [pc, #120]	@ (801396c <netif_add+0x174>)
 80138f4:	f240 128d 	movw	r2, #397	@ 0x18d
 80138f8:	4925      	ldr	r1, [pc, #148]	@ (8013990 <netif_add+0x198>)
 80138fa:	481e      	ldr	r0, [pc, #120]	@ (8013974 <netif_add+0x17c>)
 80138fc:	f00a fbea 	bl	801e0d4 <iprintf>
        if (netif2->num == netif->num) {
 8013900:	697b      	ldr	r3, [r7, #20]
 8013902:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801390c:	429a      	cmp	r2, r3
 801390e:	d108      	bne.n	8013922 <netif_add+0x12a>
          netif->num++;
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013916:	3301      	adds	r3, #1
 8013918:	b2da      	uxtb	r2, r3
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8013920:	e005      	b.n	801392e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013922:	697b      	ldr	r3, [r7, #20]
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	617b      	str	r3, [r7, #20]
 8013928:	697b      	ldr	r3, [r7, #20]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d1d0      	bne.n	80138d0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801392e:	697b      	ldr	r3, [r7, #20]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d1be      	bne.n	80138b2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801393a:	2bfe      	cmp	r3, #254	@ 0xfe
 801393c:	d103      	bne.n	8013946 <netif_add+0x14e>
    netif_num = 0;
 801393e:	4b11      	ldr	r3, [pc, #68]	@ (8013984 <netif_add+0x18c>)
 8013940:	2200      	movs	r2, #0
 8013942:	701a      	strb	r2, [r3, #0]
 8013944:	e006      	b.n	8013954 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801394c:	3301      	adds	r3, #1
 801394e:	b2da      	uxtb	r2, r3
 8013950:	4b0c      	ldr	r3, [pc, #48]	@ (8013984 <netif_add+0x18c>)
 8013952:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8013954:	4b0c      	ldr	r3, [pc, #48]	@ (8013988 <netif_add+0x190>)
 8013956:	681a      	ldr	r2, [r3, #0]
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801395c:	4a0a      	ldr	r2, [pc, #40]	@ (8013988 <netif_add+0x190>)
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8013962:	68fb      	ldr	r3, [r7, #12]
}
 8013964:	4618      	mov	r0, r3
 8013966:	3718      	adds	r7, #24
 8013968:	46bd      	mov	sp, r7
 801396a:	bd80      	pop	{r7, pc}
 801396c:	0801f6cc 	.word	0x0801f6cc
 8013970:	0801f760 	.word	0x0801f760
 8013974:	0801f71c 	.word	0x0801f71c
 8013978:	0801f77c 	.word	0x0801f77c
 801397c:	08022330 	.word	0x08022330
 8013980:	08013da3 	.word	0x08013da3
 8013984:	200277ac 	.word	0x200277ac
 8013988:	200277a4 	.word	0x200277a4
 801398c:	0801f7a0 	.word	0x0801f7a0
 8013990:	0801f7b4 	.word	0x0801f7b4

08013994 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013994:	b580      	push	{r7, lr}
 8013996:	b082      	sub	sp, #8
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
 801399c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801399e:	6839      	ldr	r1, [r7, #0]
 80139a0:	6878      	ldr	r0, [r7, #4]
 80139a2:	f002 fb8f 	bl	80160c4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80139a6:	6839      	ldr	r1, [r7, #0]
 80139a8:	6878      	ldr	r0, [r7, #4]
 80139aa:	f006 ff4b 	bl	801a844 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80139ae:	bf00      	nop
 80139b0:	3708      	adds	r7, #8
 80139b2:	46bd      	mov	sp, r7
 80139b4:	bd80      	pop	{r7, pc}
	...

080139b8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b086      	sub	sp, #24
 80139bc:	af00      	add	r7, sp, #0
 80139be:	60f8      	str	r0, [r7, #12]
 80139c0:	60b9      	str	r1, [r7, #8]
 80139c2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80139c4:	68bb      	ldr	r3, [r7, #8]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d106      	bne.n	80139d8 <netif_do_set_ipaddr+0x20>
 80139ca:	4b1d      	ldr	r3, [pc, #116]	@ (8013a40 <netif_do_set_ipaddr+0x88>)
 80139cc:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80139d0:	491c      	ldr	r1, [pc, #112]	@ (8013a44 <netif_do_set_ipaddr+0x8c>)
 80139d2:	481d      	ldr	r0, [pc, #116]	@ (8013a48 <netif_do_set_ipaddr+0x90>)
 80139d4:	f00a fb7e 	bl	801e0d4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d106      	bne.n	80139ec <netif_do_set_ipaddr+0x34>
 80139de:	4b18      	ldr	r3, [pc, #96]	@ (8013a40 <netif_do_set_ipaddr+0x88>)
 80139e0:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80139e4:	4917      	ldr	r1, [pc, #92]	@ (8013a44 <netif_do_set_ipaddr+0x8c>)
 80139e6:	4818      	ldr	r0, [pc, #96]	@ (8013a48 <netif_do_set_ipaddr+0x90>)
 80139e8:	f00a fb74 	bl	801e0d4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80139ec:	68bb      	ldr	r3, [r7, #8]
 80139ee:	681a      	ldr	r2, [r3, #0]
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	3304      	adds	r3, #4
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	429a      	cmp	r2, r3
 80139f8:	d01c      	beq.n	8013a34 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80139fa:	68bb      	ldr	r3, [r7, #8]
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	3304      	adds	r3, #4
 8013a04:	681a      	ldr	r2, [r3, #0]
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8013a0a:	f107 0314 	add.w	r3, r7, #20
 8013a0e:	4619      	mov	r1, r3
 8013a10:	6878      	ldr	r0, [r7, #4]
 8013a12:	f7ff ffbf 	bl	8013994 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8013a16:	68bb      	ldr	r3, [r7, #8]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d002      	beq.n	8013a22 <netif_do_set_ipaddr+0x6a>
 8013a1c:	68bb      	ldr	r3, [r7, #8]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	e000      	b.n	8013a24 <netif_do_set_ipaddr+0x6c>
 8013a22:	2300      	movs	r3, #0
 8013a24:	68fa      	ldr	r2, [r7, #12]
 8013a26:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013a28:	2101      	movs	r1, #1
 8013a2a:	68f8      	ldr	r0, [r7, #12]
 8013a2c:	f000 f8d2 	bl	8013bd4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8013a30:	2301      	movs	r3, #1
 8013a32:	e000      	b.n	8013a36 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8013a34:	2300      	movs	r3, #0
}
 8013a36:	4618      	mov	r0, r3
 8013a38:	3718      	adds	r7, #24
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	bd80      	pop	{r7, pc}
 8013a3e:	bf00      	nop
 8013a40:	0801f6cc 	.word	0x0801f6cc
 8013a44:	0801f7e4 	.word	0x0801f7e4
 8013a48:	0801f71c 	.word	0x0801f71c

08013a4c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8013a4c:	b480      	push	{r7}
 8013a4e:	b085      	sub	sp, #20
 8013a50:	af00      	add	r7, sp, #0
 8013a52:	60f8      	str	r0, [r7, #12]
 8013a54:	60b9      	str	r1, [r7, #8]
 8013a56:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013a58:	68bb      	ldr	r3, [r7, #8]
 8013a5a:	681a      	ldr	r2, [r3, #0]
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	3308      	adds	r3, #8
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	429a      	cmp	r2, r3
 8013a64:	d00a      	beq.n	8013a7c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8013a66:	68bb      	ldr	r3, [r7, #8]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d002      	beq.n	8013a72 <netif_do_set_netmask+0x26>
 8013a6c:	68bb      	ldr	r3, [r7, #8]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	e000      	b.n	8013a74 <netif_do_set_netmask+0x28>
 8013a72:	2300      	movs	r3, #0
 8013a74:	68fa      	ldr	r2, [r7, #12]
 8013a76:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8013a78:	2301      	movs	r3, #1
 8013a7a:	e000      	b.n	8013a7e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8013a7c:	2300      	movs	r3, #0
}
 8013a7e:	4618      	mov	r0, r3
 8013a80:	3714      	adds	r7, #20
 8013a82:	46bd      	mov	sp, r7
 8013a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a88:	4770      	bx	lr

08013a8a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8013a8a:	b480      	push	{r7}
 8013a8c:	b085      	sub	sp, #20
 8013a8e:	af00      	add	r7, sp, #0
 8013a90:	60f8      	str	r0, [r7, #12]
 8013a92:	60b9      	str	r1, [r7, #8]
 8013a94:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8013a96:	68bb      	ldr	r3, [r7, #8]
 8013a98:	681a      	ldr	r2, [r3, #0]
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	330c      	adds	r3, #12
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	429a      	cmp	r2, r3
 8013aa2:	d00a      	beq.n	8013aba <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013aa4:	68bb      	ldr	r3, [r7, #8]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d002      	beq.n	8013ab0 <netif_do_set_gw+0x26>
 8013aaa:	68bb      	ldr	r3, [r7, #8]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	e000      	b.n	8013ab2 <netif_do_set_gw+0x28>
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	68fa      	ldr	r2, [r7, #12]
 8013ab4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8013ab6:	2301      	movs	r3, #1
 8013ab8:	e000      	b.n	8013abc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8013aba:	2300      	movs	r3, #0
}
 8013abc:	4618      	mov	r0, r3
 8013abe:	3714      	adds	r7, #20
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac6:	4770      	bx	lr

08013ac8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b088      	sub	sp, #32
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	60f8      	str	r0, [r7, #12]
 8013ad0:	60b9      	str	r1, [r7, #8]
 8013ad2:	607a      	str	r2, [r7, #4]
 8013ad4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8013ada:	2300      	movs	r3, #0
 8013adc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013ade:	68bb      	ldr	r3, [r7, #8]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d101      	bne.n	8013ae8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8013ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8013b58 <netif_set_addr+0x90>)
 8013ae6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d101      	bne.n	8013af2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8013aee:	4b1a      	ldr	r3, [pc, #104]	@ (8013b58 <netif_set_addr+0x90>)
 8013af0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013af2:	683b      	ldr	r3, [r7, #0]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d101      	bne.n	8013afc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8013af8:	4b17      	ldr	r3, [pc, #92]	@ (8013b58 <netif_set_addr+0x90>)
 8013afa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8013afc:	68bb      	ldr	r3, [r7, #8]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d003      	beq.n	8013b0a <netif_set_addr+0x42>
 8013b02:	68bb      	ldr	r3, [r7, #8]
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d101      	bne.n	8013b0e <netif_set_addr+0x46>
 8013b0a:	2301      	movs	r3, #1
 8013b0c:	e000      	b.n	8013b10 <netif_set_addr+0x48>
 8013b0e:	2300      	movs	r3, #0
 8013b10:	617b      	str	r3, [r7, #20]
  if (remove) {
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d006      	beq.n	8013b26 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013b18:	f107 0310 	add.w	r3, r7, #16
 8013b1c:	461a      	mov	r2, r3
 8013b1e:	68b9      	ldr	r1, [r7, #8]
 8013b20:	68f8      	ldr	r0, [r7, #12]
 8013b22:	f7ff ff49 	bl	80139b8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8013b26:	69fa      	ldr	r2, [r7, #28]
 8013b28:	6879      	ldr	r1, [r7, #4]
 8013b2a:	68f8      	ldr	r0, [r7, #12]
 8013b2c:	f7ff ff8e 	bl	8013a4c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8013b30:	69ba      	ldr	r2, [r7, #24]
 8013b32:	6839      	ldr	r1, [r7, #0]
 8013b34:	68f8      	ldr	r0, [r7, #12]
 8013b36:	f7ff ffa8 	bl	8013a8a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8013b3a:	697b      	ldr	r3, [r7, #20]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d106      	bne.n	8013b4e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013b40:	f107 0310 	add.w	r3, r7, #16
 8013b44:	461a      	mov	r2, r3
 8013b46:	68b9      	ldr	r1, [r7, #8]
 8013b48:	68f8      	ldr	r0, [r7, #12]
 8013b4a:	f7ff ff35 	bl	80139b8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8013b4e:	bf00      	nop
 8013b50:	3720      	adds	r7, #32
 8013b52:	46bd      	mov	sp, r7
 8013b54:	bd80      	pop	{r7, pc}
 8013b56:	bf00      	nop
 8013b58:	08022330 	.word	0x08022330

08013b5c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8013b5c:	b480      	push	{r7}
 8013b5e:	b083      	sub	sp, #12
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013b64:	4a04      	ldr	r2, [pc, #16]	@ (8013b78 <netif_set_default+0x1c>)
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8013b6a:	bf00      	nop
 8013b6c:	370c      	adds	r7, #12
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b74:	4770      	bx	lr
 8013b76:	bf00      	nop
 8013b78:	200277a8 	.word	0x200277a8

08013b7c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b082      	sub	sp, #8
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d107      	bne.n	8013b9a <netif_set_up+0x1e>
 8013b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8013bc8 <netif_set_up+0x4c>)
 8013b8c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8013b90:	490e      	ldr	r1, [pc, #56]	@ (8013bcc <netif_set_up+0x50>)
 8013b92:	480f      	ldr	r0, [pc, #60]	@ (8013bd0 <netif_set_up+0x54>)
 8013b94:	f00a fa9e 	bl	801e0d4 <iprintf>
 8013b98:	e013      	b.n	8013bc2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013ba0:	f003 0301 	and.w	r3, r3, #1
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d10c      	bne.n	8013bc2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013bae:	f043 0301 	orr.w	r3, r3, #1
 8013bb2:	b2da      	uxtb	r2, r3
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013bba:	2103      	movs	r1, #3
 8013bbc:	6878      	ldr	r0, [r7, #4]
 8013bbe:	f000 f809 	bl	8013bd4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8013bc2:	3708      	adds	r7, #8
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	bd80      	pop	{r7, pc}
 8013bc8:	0801f6cc 	.word	0x0801f6cc
 8013bcc:	0801f854 	.word	0x0801f854
 8013bd0:	0801f71c 	.word	0x0801f71c

08013bd4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b082      	sub	sp, #8
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]
 8013bdc:	460b      	mov	r3, r1
 8013bde:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d106      	bne.n	8013bf4 <netif_issue_reports+0x20>
 8013be6:	4b18      	ldr	r3, [pc, #96]	@ (8013c48 <netif_issue_reports+0x74>)
 8013be8:	f240 326d 	movw	r2, #877	@ 0x36d
 8013bec:	4917      	ldr	r1, [pc, #92]	@ (8013c4c <netif_issue_reports+0x78>)
 8013bee:	4818      	ldr	r0, [pc, #96]	@ (8013c50 <netif_issue_reports+0x7c>)
 8013bf0:	f00a fa70 	bl	801e0d4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013bfa:	f003 0304 	and.w	r3, r3, #4
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d01e      	beq.n	8013c40 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013c08:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d017      	beq.n	8013c40 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013c10:	78fb      	ldrb	r3, [r7, #3]
 8013c12:	f003 0301 	and.w	r3, r3, #1
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d013      	beq.n	8013c42 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	3304      	adds	r3, #4
 8013c1e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d00e      	beq.n	8013c42 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013c2a:	f003 0308 	and.w	r3, r3, #8
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d007      	beq.n	8013c42 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	3304      	adds	r3, #4
 8013c36:	4619      	mov	r1, r3
 8013c38:	6878      	ldr	r0, [r7, #4]
 8013c3a:	f007 fd6d 	bl	801b718 <etharp_request>
 8013c3e:	e000      	b.n	8013c42 <netif_issue_reports+0x6e>
    return;
 8013c40:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8013c42:	3708      	adds	r7, #8
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bd80      	pop	{r7, pc}
 8013c48:	0801f6cc 	.word	0x0801f6cc
 8013c4c:	0801f870 	.word	0x0801f870
 8013c50:	0801f71c 	.word	0x0801f71c

08013c54 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b082      	sub	sp, #8
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d107      	bne.n	8013c72 <netif_set_down+0x1e>
 8013c62:	4b12      	ldr	r3, [pc, #72]	@ (8013cac <netif_set_down+0x58>)
 8013c64:	f240 329b 	movw	r2, #923	@ 0x39b
 8013c68:	4911      	ldr	r1, [pc, #68]	@ (8013cb0 <netif_set_down+0x5c>)
 8013c6a:	4812      	ldr	r0, [pc, #72]	@ (8013cb4 <netif_set_down+0x60>)
 8013c6c:	f00a fa32 	bl	801e0d4 <iprintf>
 8013c70:	e019      	b.n	8013ca6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013c78:	f003 0301 	and.w	r3, r3, #1
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d012      	beq.n	8013ca6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013c86:	f023 0301 	bic.w	r3, r3, #1
 8013c8a:	b2da      	uxtb	r2, r3
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013c98:	f003 0308 	and.w	r3, r3, #8
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d002      	beq.n	8013ca6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8013ca0:	6878      	ldr	r0, [r7, #4]
 8013ca2:	f007 f8f7 	bl	801ae94 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8013ca6:	3708      	adds	r7, #8
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}
 8013cac:	0801f6cc 	.word	0x0801f6cc
 8013cb0:	0801f894 	.word	0x0801f894
 8013cb4:	0801f71c 	.word	0x0801f71c

08013cb8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b082      	sub	sp, #8
 8013cbc:	af00      	add	r7, sp, #0
 8013cbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d107      	bne.n	8013cd6 <netif_set_link_up+0x1e>
 8013cc6:	4b13      	ldr	r3, [pc, #76]	@ (8013d14 <netif_set_link_up+0x5c>)
 8013cc8:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8013ccc:	4912      	ldr	r1, [pc, #72]	@ (8013d18 <netif_set_link_up+0x60>)
 8013cce:	4813      	ldr	r0, [pc, #76]	@ (8013d1c <netif_set_link_up+0x64>)
 8013cd0:	f00a fa00 	bl	801e0d4 <iprintf>
 8013cd4:	e01b      	b.n	8013d0e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013cdc:	f003 0304 	and.w	r3, r3, #4
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d114      	bne.n	8013d0e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013cea:	f043 0304 	orr.w	r3, r3, #4
 8013cee:	b2da      	uxtb	r2, r3
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013cf6:	2103      	movs	r1, #3
 8013cf8:	6878      	ldr	r0, [r7, #4]
 8013cfa:	f7ff ff6b 	bl	8013bd4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	69db      	ldr	r3, [r3, #28]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d003      	beq.n	8013d0e <netif_set_link_up+0x56>
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	69db      	ldr	r3, [r3, #28]
 8013d0a:	6878      	ldr	r0, [r7, #4]
 8013d0c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013d0e:	3708      	adds	r7, #8
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}
 8013d14:	0801f6cc 	.word	0x0801f6cc
 8013d18:	0801f8b4 	.word	0x0801f8b4
 8013d1c:	0801f71c 	.word	0x0801f71c

08013d20 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b082      	sub	sp, #8
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d107      	bne.n	8013d3e <netif_set_link_down+0x1e>
 8013d2e:	4b11      	ldr	r3, [pc, #68]	@ (8013d74 <netif_set_link_down+0x54>)
 8013d30:	f240 4206 	movw	r2, #1030	@ 0x406
 8013d34:	4910      	ldr	r1, [pc, #64]	@ (8013d78 <netif_set_link_down+0x58>)
 8013d36:	4811      	ldr	r0, [pc, #68]	@ (8013d7c <netif_set_link_down+0x5c>)
 8013d38:	f00a f9cc 	bl	801e0d4 <iprintf>
 8013d3c:	e017      	b.n	8013d6e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013d44:	f003 0304 	and.w	r3, r3, #4
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d010      	beq.n	8013d6e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013d52:	f023 0304 	bic.w	r3, r3, #4
 8013d56:	b2da      	uxtb	r2, r3
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	69db      	ldr	r3, [r3, #28]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d003      	beq.n	8013d6e <netif_set_link_down+0x4e>
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	69db      	ldr	r3, [r3, #28]
 8013d6a:	6878      	ldr	r0, [r7, #4]
 8013d6c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013d6e:	3708      	adds	r7, #8
 8013d70:	46bd      	mov	sp, r7
 8013d72:	bd80      	pop	{r7, pc}
 8013d74:	0801f6cc 	.word	0x0801f6cc
 8013d78:	0801f8d8 	.word	0x0801f8d8
 8013d7c:	0801f71c 	.word	0x0801f71c

08013d80 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8013d80:	b480      	push	{r7}
 8013d82:	b083      	sub	sp, #12
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
 8013d88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d002      	beq.n	8013d96 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	683a      	ldr	r2, [r7, #0]
 8013d94:	61da      	str	r2, [r3, #28]
  }
}
 8013d96:	bf00      	nop
 8013d98:	370c      	adds	r7, #12
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da0:	4770      	bx	lr

08013da2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8013da2:	b480      	push	{r7}
 8013da4:	b085      	sub	sp, #20
 8013da6:	af00      	add	r7, sp, #0
 8013da8:	60f8      	str	r0, [r7, #12]
 8013daa:	60b9      	str	r1, [r7, #8]
 8013dac:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8013dae:	f06f 030b 	mvn.w	r3, #11
}
 8013db2:	4618      	mov	r0, r3
 8013db4:	3714      	adds	r7, #20
 8013db6:	46bd      	mov	sp, r7
 8013db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbc:	4770      	bx	lr
	...

08013dc0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8013dc0:	b480      	push	{r7}
 8013dc2:	b085      	sub	sp, #20
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8013dca:	79fb      	ldrb	r3, [r7, #7]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d013      	beq.n	8013df8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8013dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8013e08 <netif_get_by_index+0x48>)
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	60fb      	str	r3, [r7, #12]
 8013dd6:	e00c      	b.n	8013df2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013dde:	3301      	adds	r3, #1
 8013de0:	b2db      	uxtb	r3, r3
 8013de2:	79fa      	ldrb	r2, [r7, #7]
 8013de4:	429a      	cmp	r2, r3
 8013de6:	d101      	bne.n	8013dec <netif_get_by_index+0x2c>
        return netif; /* found! */
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	e006      	b.n	8013dfa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	60fb      	str	r3, [r7, #12]
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d1ef      	bne.n	8013dd8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8013df8:	2300      	movs	r3, #0
}
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	3714      	adds	r7, #20
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e04:	4770      	bx	lr
 8013e06:	bf00      	nop
 8013e08:	200277a4 	.word	0x200277a4

08013e0c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b082      	sub	sp, #8
 8013e10:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8013e12:	f009 f8e1 	bl	801cfd8 <sys_arch_protect>
 8013e16:	6038      	str	r0, [r7, #0]
 8013e18:	4b0d      	ldr	r3, [pc, #52]	@ (8013e50 <pbuf_free_ooseq+0x44>)
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	701a      	strb	r2, [r3, #0]
 8013e1e:	6838      	ldr	r0, [r7, #0]
 8013e20:	f009 f8e8 	bl	801cff4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013e24:	4b0b      	ldr	r3, [pc, #44]	@ (8013e54 <pbuf_free_ooseq+0x48>)
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	607b      	str	r3, [r7, #4]
 8013e2a:	e00a      	b.n	8013e42 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d003      	beq.n	8013e3c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013e34:	6878      	ldr	r0, [r7, #4]
 8013e36:	f002 f983 	bl	8016140 <tcp_free_ooseq>
      return;
 8013e3a:	e005      	b.n	8013e48 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	68db      	ldr	r3, [r3, #12]
 8013e40:	607b      	str	r3, [r7, #4]
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d1f1      	bne.n	8013e2c <pbuf_free_ooseq+0x20>
    }
  }
}
 8013e48:	3708      	adds	r7, #8
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd80      	pop	{r7, pc}
 8013e4e:	bf00      	nop
 8013e50:	200277ad 	.word	0x200277ad
 8013e54:	200277bc 	.word	0x200277bc

08013e58 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b082      	sub	sp, #8
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013e60:	f7ff ffd4 	bl	8013e0c <pbuf_free_ooseq>
}
 8013e64:	bf00      	nop
 8013e66:	3708      	adds	r7, #8
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd80      	pop	{r7, pc}

08013e6c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b082      	sub	sp, #8
 8013e70:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8013e72:	f009 f8b1 	bl	801cfd8 <sys_arch_protect>
 8013e76:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013e78:	4b0f      	ldr	r3, [pc, #60]	@ (8013eb8 <pbuf_pool_is_empty+0x4c>)
 8013e7a:	781b      	ldrb	r3, [r3, #0]
 8013e7c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8013e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8013eb8 <pbuf_pool_is_empty+0x4c>)
 8013e80:	2201      	movs	r2, #1
 8013e82:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013e84:	6878      	ldr	r0, [r7, #4]
 8013e86:	f009 f8b5 	bl	801cff4 <sys_arch_unprotect>

  if (!queued) {
 8013e8a:	78fb      	ldrb	r3, [r7, #3]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d10f      	bne.n	8013eb0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8013e90:	2100      	movs	r1, #0
 8013e92:	480a      	ldr	r0, [pc, #40]	@ (8013ebc <pbuf_pool_is_empty+0x50>)
 8013e94:	f7fe feaa 	bl	8012bec <tcpip_try_callback>
 8013e98:	4603      	mov	r3, r0
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d008      	beq.n	8013eb0 <pbuf_pool_is_empty+0x44>
 8013e9e:	f009 f89b 	bl	801cfd8 <sys_arch_protect>
 8013ea2:	6078      	str	r0, [r7, #4]
 8013ea4:	4b04      	ldr	r3, [pc, #16]	@ (8013eb8 <pbuf_pool_is_empty+0x4c>)
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	701a      	strb	r2, [r3, #0]
 8013eaa:	6878      	ldr	r0, [r7, #4]
 8013eac:	f009 f8a2 	bl	801cff4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013eb0:	bf00      	nop
 8013eb2:	3708      	adds	r7, #8
 8013eb4:	46bd      	mov	sp, r7
 8013eb6:	bd80      	pop	{r7, pc}
 8013eb8:	200277ad 	.word	0x200277ad
 8013ebc:	08013e59 	.word	0x08013e59

08013ec0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8013ec0:	b480      	push	{r7}
 8013ec2:	b085      	sub	sp, #20
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	60f8      	str	r0, [r7, #12]
 8013ec8:	60b9      	str	r1, [r7, #8]
 8013eca:	4611      	mov	r1, r2
 8013ecc:	461a      	mov	r2, r3
 8013ece:	460b      	mov	r3, r1
 8013ed0:	80fb      	strh	r3, [r7, #6]
 8013ed2:	4613      	mov	r3, r2
 8013ed4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	2200      	movs	r2, #0
 8013eda:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	68ba      	ldr	r2, [r7, #8]
 8013ee0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	88fa      	ldrh	r2, [r7, #6]
 8013ee6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	88ba      	ldrh	r2, [r7, #4]
 8013eec:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8013eee:	8b3b      	ldrh	r3, [r7, #24]
 8013ef0:	b2da      	uxtb	r2, r3
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	7f3a      	ldrb	r2, [r7, #28]
 8013efa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	2201      	movs	r2, #1
 8013f00:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	2200      	movs	r2, #0
 8013f06:	73da      	strb	r2, [r3, #15]
}
 8013f08:	bf00      	nop
 8013f0a:	3714      	adds	r7, #20
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f12:	4770      	bx	lr

08013f14 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b08c      	sub	sp, #48	@ 0x30
 8013f18:	af02      	add	r7, sp, #8
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	71fb      	strb	r3, [r7, #7]
 8013f1e:	460b      	mov	r3, r1
 8013f20:	80bb      	strh	r3, [r7, #4]
 8013f22:	4613      	mov	r3, r2
 8013f24:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8013f26:	79fb      	ldrb	r3, [r7, #7]
 8013f28:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8013f2a:	887b      	ldrh	r3, [r7, #2]
 8013f2c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013f30:	d07f      	beq.n	8014032 <pbuf_alloc+0x11e>
 8013f32:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013f36:	f300 80c8 	bgt.w	80140ca <pbuf_alloc+0x1b6>
 8013f3a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8013f3e:	d010      	beq.n	8013f62 <pbuf_alloc+0x4e>
 8013f40:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8013f44:	f300 80c1 	bgt.w	80140ca <pbuf_alloc+0x1b6>
 8013f48:	2b01      	cmp	r3, #1
 8013f4a:	d002      	beq.n	8013f52 <pbuf_alloc+0x3e>
 8013f4c:	2b41      	cmp	r3, #65	@ 0x41
 8013f4e:	f040 80bc 	bne.w	80140ca <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8013f52:	887a      	ldrh	r2, [r7, #2]
 8013f54:	88bb      	ldrh	r3, [r7, #4]
 8013f56:	4619      	mov	r1, r3
 8013f58:	2000      	movs	r0, #0
 8013f5a:	f000 f8d1 	bl	8014100 <pbuf_alloc_reference>
 8013f5e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8013f60:	e0bd      	b.n	80140de <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8013f62:	2300      	movs	r3, #0
 8013f64:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8013f66:	2300      	movs	r3, #0
 8013f68:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8013f6a:	88bb      	ldrh	r3, [r7, #4]
 8013f6c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8013f6e:	200c      	movs	r0, #12
 8013f70:	f7ff fb9a 	bl	80136a8 <memp_malloc>
 8013f74:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8013f76:	693b      	ldr	r3, [r7, #16]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d109      	bne.n	8013f90 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8013f7c:	f7ff ff76 	bl	8013e6c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8013f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d002      	beq.n	8013f8c <pbuf_alloc+0x78>
            pbuf_free(p);
 8013f86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013f88:	f000 faa8 	bl	80144dc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	e0a7      	b.n	80140e0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8013f90:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013f92:	3303      	adds	r3, #3
 8013f94:	b29b      	uxth	r3, r3
 8013f96:	f023 0303 	bic.w	r3, r3, #3
 8013f9a:	b29b      	uxth	r3, r3
 8013f9c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8013fa0:	b29b      	uxth	r3, r3
 8013fa2:	8b7a      	ldrh	r2, [r7, #26]
 8013fa4:	4293      	cmp	r3, r2
 8013fa6:	bf28      	it	cs
 8013fa8:	4613      	movcs	r3, r2
 8013faa:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8013fac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013fae:	3310      	adds	r3, #16
 8013fb0:	693a      	ldr	r2, [r7, #16]
 8013fb2:	4413      	add	r3, r2
 8013fb4:	3303      	adds	r3, #3
 8013fb6:	f023 0303 	bic.w	r3, r3, #3
 8013fba:	4618      	mov	r0, r3
 8013fbc:	89f9      	ldrh	r1, [r7, #14]
 8013fbe:	8b7a      	ldrh	r2, [r7, #26]
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	9301      	str	r3, [sp, #4]
 8013fc4:	887b      	ldrh	r3, [r7, #2]
 8013fc6:	9300      	str	r3, [sp, #0]
 8013fc8:	460b      	mov	r3, r1
 8013fca:	4601      	mov	r1, r0
 8013fcc:	6938      	ldr	r0, [r7, #16]
 8013fce:	f7ff ff77 	bl	8013ec0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8013fd2:	693b      	ldr	r3, [r7, #16]
 8013fd4:	685b      	ldr	r3, [r3, #4]
 8013fd6:	f003 0303 	and.w	r3, r3, #3
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d006      	beq.n	8013fec <pbuf_alloc+0xd8>
 8013fde:	4b42      	ldr	r3, [pc, #264]	@ (80140e8 <pbuf_alloc+0x1d4>)
 8013fe0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013fe4:	4941      	ldr	r1, [pc, #260]	@ (80140ec <pbuf_alloc+0x1d8>)
 8013fe6:	4842      	ldr	r0, [pc, #264]	@ (80140f0 <pbuf_alloc+0x1dc>)
 8013fe8:	f00a f874 	bl	801e0d4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8013fec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013fee:	3303      	adds	r3, #3
 8013ff0:	f023 0303 	bic.w	r3, r3, #3
 8013ff4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8013ff8:	d106      	bne.n	8014008 <pbuf_alloc+0xf4>
 8013ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80140e8 <pbuf_alloc+0x1d4>)
 8013ffc:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8014000:	493c      	ldr	r1, [pc, #240]	@ (80140f4 <pbuf_alloc+0x1e0>)
 8014002:	483b      	ldr	r0, [pc, #236]	@ (80140f0 <pbuf_alloc+0x1dc>)
 8014004:	f00a f866 	bl	801e0d4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8014008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801400a:	2b00      	cmp	r3, #0
 801400c:	d102      	bne.n	8014014 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801400e:	693b      	ldr	r3, [r7, #16]
 8014010:	627b      	str	r3, [r7, #36]	@ 0x24
 8014012:	e002      	b.n	801401a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8014014:	69fb      	ldr	r3, [r7, #28]
 8014016:	693a      	ldr	r2, [r7, #16]
 8014018:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801401a:	693b      	ldr	r3, [r7, #16]
 801401c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801401e:	8b7a      	ldrh	r2, [r7, #26]
 8014020:	89fb      	ldrh	r3, [r7, #14]
 8014022:	1ad3      	subs	r3, r2, r3
 8014024:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8014026:	2300      	movs	r3, #0
 8014028:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 801402a:	8b7b      	ldrh	r3, [r7, #26]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d19e      	bne.n	8013f6e <pbuf_alloc+0x5a>
      break;
 8014030:	e055      	b.n	80140de <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8014032:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014034:	3303      	adds	r3, #3
 8014036:	b29b      	uxth	r3, r3
 8014038:	f023 0303 	bic.w	r3, r3, #3
 801403c:	b29a      	uxth	r2, r3
 801403e:	88bb      	ldrh	r3, [r7, #4]
 8014040:	3303      	adds	r3, #3
 8014042:	b29b      	uxth	r3, r3
 8014044:	f023 0303 	bic.w	r3, r3, #3
 8014048:	b29b      	uxth	r3, r3
 801404a:	4413      	add	r3, r2
 801404c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801404e:	8b3b      	ldrh	r3, [r7, #24]
 8014050:	3310      	adds	r3, #16
 8014052:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014054:	8b3a      	ldrh	r2, [r7, #24]
 8014056:	88bb      	ldrh	r3, [r7, #4]
 8014058:	3303      	adds	r3, #3
 801405a:	f023 0303 	bic.w	r3, r3, #3
 801405e:	429a      	cmp	r2, r3
 8014060:	d306      	bcc.n	8014070 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8014062:	8afa      	ldrh	r2, [r7, #22]
 8014064:	88bb      	ldrh	r3, [r7, #4]
 8014066:	3303      	adds	r3, #3
 8014068:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801406c:	429a      	cmp	r2, r3
 801406e:	d201      	bcs.n	8014074 <pbuf_alloc+0x160>
        return NULL;
 8014070:	2300      	movs	r3, #0
 8014072:	e035      	b.n	80140e0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8014074:	8afb      	ldrh	r3, [r7, #22]
 8014076:	4618      	mov	r0, r3
 8014078:	f7ff f972 	bl	8013360 <mem_malloc>
 801407c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 801407e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014080:	2b00      	cmp	r3, #0
 8014082:	d101      	bne.n	8014088 <pbuf_alloc+0x174>
        return NULL;
 8014084:	2300      	movs	r3, #0
 8014086:	e02b      	b.n	80140e0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8014088:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801408a:	3310      	adds	r3, #16
 801408c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801408e:	4413      	add	r3, r2
 8014090:	3303      	adds	r3, #3
 8014092:	f023 0303 	bic.w	r3, r3, #3
 8014096:	4618      	mov	r0, r3
 8014098:	88b9      	ldrh	r1, [r7, #4]
 801409a:	88ba      	ldrh	r2, [r7, #4]
 801409c:	2300      	movs	r3, #0
 801409e:	9301      	str	r3, [sp, #4]
 80140a0:	887b      	ldrh	r3, [r7, #2]
 80140a2:	9300      	str	r3, [sp, #0]
 80140a4:	460b      	mov	r3, r1
 80140a6:	4601      	mov	r1, r0
 80140a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80140aa:	f7ff ff09 	bl	8013ec0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80140ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140b0:	685b      	ldr	r3, [r3, #4]
 80140b2:	f003 0303 	and.w	r3, r3, #3
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d010      	beq.n	80140dc <pbuf_alloc+0x1c8>
 80140ba:	4b0b      	ldr	r3, [pc, #44]	@ (80140e8 <pbuf_alloc+0x1d4>)
 80140bc:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80140c0:	490d      	ldr	r1, [pc, #52]	@ (80140f8 <pbuf_alloc+0x1e4>)
 80140c2:	480b      	ldr	r0, [pc, #44]	@ (80140f0 <pbuf_alloc+0x1dc>)
 80140c4:	f00a f806 	bl	801e0d4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80140c8:	e008      	b.n	80140dc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80140ca:	4b07      	ldr	r3, [pc, #28]	@ (80140e8 <pbuf_alloc+0x1d4>)
 80140cc:	f240 1227 	movw	r2, #295	@ 0x127
 80140d0:	490a      	ldr	r1, [pc, #40]	@ (80140fc <pbuf_alloc+0x1e8>)
 80140d2:	4807      	ldr	r0, [pc, #28]	@ (80140f0 <pbuf_alloc+0x1dc>)
 80140d4:	f009 fffe 	bl	801e0d4 <iprintf>
      return NULL;
 80140d8:	2300      	movs	r3, #0
 80140da:	e001      	b.n	80140e0 <pbuf_alloc+0x1cc>
      break;
 80140dc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80140de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80140e0:	4618      	mov	r0, r3
 80140e2:	3728      	adds	r7, #40	@ 0x28
 80140e4:	46bd      	mov	sp, r7
 80140e6:	bd80      	pop	{r7, pc}
 80140e8:	0801f8fc 	.word	0x0801f8fc
 80140ec:	0801f92c 	.word	0x0801f92c
 80140f0:	0801f95c 	.word	0x0801f95c
 80140f4:	0801f984 	.word	0x0801f984
 80140f8:	0801f9b8 	.word	0x0801f9b8
 80140fc:	0801f9e4 	.word	0x0801f9e4

08014100 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8014100:	b580      	push	{r7, lr}
 8014102:	b086      	sub	sp, #24
 8014104:	af02      	add	r7, sp, #8
 8014106:	6078      	str	r0, [r7, #4]
 8014108:	460b      	mov	r3, r1
 801410a:	807b      	strh	r3, [r7, #2]
 801410c:	4613      	mov	r3, r2
 801410e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8014110:	883b      	ldrh	r3, [r7, #0]
 8014112:	2b41      	cmp	r3, #65	@ 0x41
 8014114:	d009      	beq.n	801412a <pbuf_alloc_reference+0x2a>
 8014116:	883b      	ldrh	r3, [r7, #0]
 8014118:	2b01      	cmp	r3, #1
 801411a:	d006      	beq.n	801412a <pbuf_alloc_reference+0x2a>
 801411c:	4b0f      	ldr	r3, [pc, #60]	@ (801415c <pbuf_alloc_reference+0x5c>)
 801411e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8014122:	490f      	ldr	r1, [pc, #60]	@ (8014160 <pbuf_alloc_reference+0x60>)
 8014124:	480f      	ldr	r0, [pc, #60]	@ (8014164 <pbuf_alloc_reference+0x64>)
 8014126:	f009 ffd5 	bl	801e0d4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801412a:	200b      	movs	r0, #11
 801412c:	f7ff fabc 	bl	80136a8 <memp_malloc>
 8014130:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d101      	bne.n	801413c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8014138:	2300      	movs	r3, #0
 801413a:	e00b      	b.n	8014154 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801413c:	8879      	ldrh	r1, [r7, #2]
 801413e:	887a      	ldrh	r2, [r7, #2]
 8014140:	2300      	movs	r3, #0
 8014142:	9301      	str	r3, [sp, #4]
 8014144:	883b      	ldrh	r3, [r7, #0]
 8014146:	9300      	str	r3, [sp, #0]
 8014148:	460b      	mov	r3, r1
 801414a:	6879      	ldr	r1, [r7, #4]
 801414c:	68f8      	ldr	r0, [r7, #12]
 801414e:	f7ff feb7 	bl	8013ec0 <pbuf_init_alloced_pbuf>
  return p;
 8014152:	68fb      	ldr	r3, [r7, #12]
}
 8014154:	4618      	mov	r0, r3
 8014156:	3710      	adds	r7, #16
 8014158:	46bd      	mov	sp, r7
 801415a:	bd80      	pop	{r7, pc}
 801415c:	0801f8fc 	.word	0x0801f8fc
 8014160:	0801fa00 	.word	0x0801fa00
 8014164:	0801f95c 	.word	0x0801f95c

08014168 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8014168:	b580      	push	{r7, lr}
 801416a:	b088      	sub	sp, #32
 801416c:	af02      	add	r7, sp, #8
 801416e:	607b      	str	r3, [r7, #4]
 8014170:	4603      	mov	r3, r0
 8014172:	73fb      	strb	r3, [r7, #15]
 8014174:	460b      	mov	r3, r1
 8014176:	81bb      	strh	r3, [r7, #12]
 8014178:	4613      	mov	r3, r2
 801417a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801417c:	7bfb      	ldrb	r3, [r7, #15]
 801417e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8014180:	8a7b      	ldrh	r3, [r7, #18]
 8014182:	3303      	adds	r3, #3
 8014184:	f023 0203 	bic.w	r2, r3, #3
 8014188:	89bb      	ldrh	r3, [r7, #12]
 801418a:	441a      	add	r2, r3
 801418c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801418e:	429a      	cmp	r2, r3
 8014190:	d901      	bls.n	8014196 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8014192:	2300      	movs	r3, #0
 8014194:	e018      	b.n	80141c8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8014196:	6a3b      	ldr	r3, [r7, #32]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d007      	beq.n	80141ac <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801419c:	8a7b      	ldrh	r3, [r7, #18]
 801419e:	3303      	adds	r3, #3
 80141a0:	f023 0303 	bic.w	r3, r3, #3
 80141a4:	6a3a      	ldr	r2, [r7, #32]
 80141a6:	4413      	add	r3, r2
 80141a8:	617b      	str	r3, [r7, #20]
 80141aa:	e001      	b.n	80141b0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80141ac:	2300      	movs	r3, #0
 80141ae:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80141b0:	6878      	ldr	r0, [r7, #4]
 80141b2:	89b9      	ldrh	r1, [r7, #12]
 80141b4:	89ba      	ldrh	r2, [r7, #12]
 80141b6:	2302      	movs	r3, #2
 80141b8:	9301      	str	r3, [sp, #4]
 80141ba:	897b      	ldrh	r3, [r7, #10]
 80141bc:	9300      	str	r3, [sp, #0]
 80141be:	460b      	mov	r3, r1
 80141c0:	6979      	ldr	r1, [r7, #20]
 80141c2:	f7ff fe7d 	bl	8013ec0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80141c6:	687b      	ldr	r3, [r7, #4]
}
 80141c8:	4618      	mov	r0, r3
 80141ca:	3718      	adds	r7, #24
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}

080141d0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b084      	sub	sp, #16
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
 80141d8:	460b      	mov	r3, r1
 80141da:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d106      	bne.n	80141f0 <pbuf_realloc+0x20>
 80141e2:	4b3a      	ldr	r3, [pc, #232]	@ (80142cc <pbuf_realloc+0xfc>)
 80141e4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80141e8:	4939      	ldr	r1, [pc, #228]	@ (80142d0 <pbuf_realloc+0x100>)
 80141ea:	483a      	ldr	r0, [pc, #232]	@ (80142d4 <pbuf_realloc+0x104>)
 80141ec:	f009 ff72 	bl	801e0d4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	891b      	ldrh	r3, [r3, #8]
 80141f4:	887a      	ldrh	r2, [r7, #2]
 80141f6:	429a      	cmp	r2, r3
 80141f8:	d263      	bcs.n	80142c2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	891a      	ldrh	r2, [r3, #8]
 80141fe:	887b      	ldrh	r3, [r7, #2]
 8014200:	1ad3      	subs	r3, r2, r3
 8014202:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8014204:	887b      	ldrh	r3, [r7, #2]
 8014206:	817b      	strh	r3, [r7, #10]
  q = p;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801420c:	e018      	b.n	8014240 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	895b      	ldrh	r3, [r3, #10]
 8014212:	897a      	ldrh	r2, [r7, #10]
 8014214:	1ad3      	subs	r3, r2, r3
 8014216:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	891a      	ldrh	r2, [r3, #8]
 801421c:	893b      	ldrh	r3, [r7, #8]
 801421e:	1ad3      	subs	r3, r2, r3
 8014220:	b29a      	uxth	r2, r3
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d106      	bne.n	8014240 <pbuf_realloc+0x70>
 8014232:	4b26      	ldr	r3, [pc, #152]	@ (80142cc <pbuf_realloc+0xfc>)
 8014234:	f240 12af 	movw	r2, #431	@ 0x1af
 8014238:	4927      	ldr	r1, [pc, #156]	@ (80142d8 <pbuf_realloc+0x108>)
 801423a:	4826      	ldr	r0, [pc, #152]	@ (80142d4 <pbuf_realloc+0x104>)
 801423c:	f009 ff4a 	bl	801e0d4 <iprintf>
  while (rem_len > q->len) {
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	895b      	ldrh	r3, [r3, #10]
 8014244:	897a      	ldrh	r2, [r7, #10]
 8014246:	429a      	cmp	r2, r3
 8014248:	d8e1      	bhi.n	801420e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	7b1b      	ldrb	r3, [r3, #12]
 801424e:	f003 030f 	and.w	r3, r3, #15
 8014252:	2b00      	cmp	r3, #0
 8014254:	d121      	bne.n	801429a <pbuf_realloc+0xca>
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	895b      	ldrh	r3, [r3, #10]
 801425a:	897a      	ldrh	r2, [r7, #10]
 801425c:	429a      	cmp	r2, r3
 801425e:	d01c      	beq.n	801429a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	7b5b      	ldrb	r3, [r3, #13]
 8014264:	f003 0302 	and.w	r3, r3, #2
 8014268:	2b00      	cmp	r3, #0
 801426a:	d116      	bne.n	801429a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	685a      	ldr	r2, [r3, #4]
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	1ad3      	subs	r3, r2, r3
 8014274:	b29a      	uxth	r2, r3
 8014276:	897b      	ldrh	r3, [r7, #10]
 8014278:	4413      	add	r3, r2
 801427a:	b29b      	uxth	r3, r3
 801427c:	4619      	mov	r1, r3
 801427e:	68f8      	ldr	r0, [r7, #12]
 8014280:	f7fe ff64 	bl	801314c <mem_trim>
 8014284:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d106      	bne.n	801429a <pbuf_realloc+0xca>
 801428c:	4b0f      	ldr	r3, [pc, #60]	@ (80142cc <pbuf_realloc+0xfc>)
 801428e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8014292:	4912      	ldr	r1, [pc, #72]	@ (80142dc <pbuf_realloc+0x10c>)
 8014294:	480f      	ldr	r0, [pc, #60]	@ (80142d4 <pbuf_realloc+0x104>)
 8014296:	f009 ff1d 	bl	801e0d4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	897a      	ldrh	r2, [r7, #10]
 801429e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	895a      	ldrh	r2, [r3, #10]
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d004      	beq.n	80142ba <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	4618      	mov	r0, r3
 80142b6:	f000 f911 	bl	80144dc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	2200      	movs	r2, #0
 80142be:	601a      	str	r2, [r3, #0]
 80142c0:	e000      	b.n	80142c4 <pbuf_realloc+0xf4>
    return;
 80142c2:	bf00      	nop

}
 80142c4:	3710      	adds	r7, #16
 80142c6:	46bd      	mov	sp, r7
 80142c8:	bd80      	pop	{r7, pc}
 80142ca:	bf00      	nop
 80142cc:	0801f8fc 	.word	0x0801f8fc
 80142d0:	0801fa14 	.word	0x0801fa14
 80142d4:	0801f95c 	.word	0x0801f95c
 80142d8:	0801fa2c 	.word	0x0801fa2c
 80142dc:	0801fa44 	.word	0x0801fa44

080142e0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b086      	sub	sp, #24
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	60f8      	str	r0, [r7, #12]
 80142e8:	60b9      	str	r1, [r7, #8]
 80142ea:	4613      	mov	r3, r2
 80142ec:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d106      	bne.n	8014302 <pbuf_add_header_impl+0x22>
 80142f4:	4b2b      	ldr	r3, [pc, #172]	@ (80143a4 <pbuf_add_header_impl+0xc4>)
 80142f6:	f240 12df 	movw	r2, #479	@ 0x1df
 80142fa:	492b      	ldr	r1, [pc, #172]	@ (80143a8 <pbuf_add_header_impl+0xc8>)
 80142fc:	482b      	ldr	r0, [pc, #172]	@ (80143ac <pbuf_add_header_impl+0xcc>)
 80142fe:	f009 fee9 	bl	801e0d4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d003      	beq.n	8014310 <pbuf_add_header_impl+0x30>
 8014308:	68bb      	ldr	r3, [r7, #8]
 801430a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801430e:	d301      	bcc.n	8014314 <pbuf_add_header_impl+0x34>
    return 1;
 8014310:	2301      	movs	r3, #1
 8014312:	e043      	b.n	801439c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8014314:	68bb      	ldr	r3, [r7, #8]
 8014316:	2b00      	cmp	r3, #0
 8014318:	d101      	bne.n	801431e <pbuf_add_header_impl+0x3e>
    return 0;
 801431a:	2300      	movs	r3, #0
 801431c:	e03e      	b.n	801439c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801431e:	68bb      	ldr	r3, [r7, #8]
 8014320:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	891a      	ldrh	r2, [r3, #8]
 8014326:	8a7b      	ldrh	r3, [r7, #18]
 8014328:	4413      	add	r3, r2
 801432a:	b29b      	uxth	r3, r3
 801432c:	8a7a      	ldrh	r2, [r7, #18]
 801432e:	429a      	cmp	r2, r3
 8014330:	d901      	bls.n	8014336 <pbuf_add_header_impl+0x56>
    return 1;
 8014332:	2301      	movs	r3, #1
 8014334:	e032      	b.n	801439c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	7b1b      	ldrb	r3, [r3, #12]
 801433a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801433c:	8a3b      	ldrh	r3, [r7, #16]
 801433e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014342:	2b00      	cmp	r3, #0
 8014344:	d00c      	beq.n	8014360 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	685a      	ldr	r2, [r3, #4]
 801434a:	68bb      	ldr	r3, [r7, #8]
 801434c:	425b      	negs	r3, r3
 801434e:	4413      	add	r3, r2
 8014350:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	3310      	adds	r3, #16
 8014356:	697a      	ldr	r2, [r7, #20]
 8014358:	429a      	cmp	r2, r3
 801435a:	d20d      	bcs.n	8014378 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801435c:	2301      	movs	r3, #1
 801435e:	e01d      	b.n	801439c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8014360:	79fb      	ldrb	r3, [r7, #7]
 8014362:	2b00      	cmp	r3, #0
 8014364:	d006      	beq.n	8014374 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	685a      	ldr	r2, [r3, #4]
 801436a:	68bb      	ldr	r3, [r7, #8]
 801436c:	425b      	negs	r3, r3
 801436e:	4413      	add	r3, r2
 8014370:	617b      	str	r3, [r7, #20]
 8014372:	e001      	b.n	8014378 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014374:	2301      	movs	r3, #1
 8014376:	e011      	b.n	801439c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	697a      	ldr	r2, [r7, #20]
 801437c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	895a      	ldrh	r2, [r3, #10]
 8014382:	8a7b      	ldrh	r3, [r7, #18]
 8014384:	4413      	add	r3, r2
 8014386:	b29a      	uxth	r2, r3
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	891a      	ldrh	r2, [r3, #8]
 8014390:	8a7b      	ldrh	r3, [r7, #18]
 8014392:	4413      	add	r3, r2
 8014394:	b29a      	uxth	r2, r3
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	811a      	strh	r2, [r3, #8]


  return 0;
 801439a:	2300      	movs	r3, #0
}
 801439c:	4618      	mov	r0, r3
 801439e:	3718      	adds	r7, #24
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}
 80143a4:	0801f8fc 	.word	0x0801f8fc
 80143a8:	0801fa60 	.word	0x0801fa60
 80143ac:	0801f95c 	.word	0x0801f95c

080143b0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b082      	sub	sp, #8
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
 80143b8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80143ba:	2200      	movs	r2, #0
 80143bc:	6839      	ldr	r1, [r7, #0]
 80143be:	6878      	ldr	r0, [r7, #4]
 80143c0:	f7ff ff8e 	bl	80142e0 <pbuf_add_header_impl>
 80143c4:	4603      	mov	r3, r0
}
 80143c6:	4618      	mov	r0, r3
 80143c8:	3708      	adds	r7, #8
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd80      	pop	{r7, pc}
	...

080143d0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b084      	sub	sp, #16
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
 80143d8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d106      	bne.n	80143ee <pbuf_remove_header+0x1e>
 80143e0:	4b20      	ldr	r3, [pc, #128]	@ (8014464 <pbuf_remove_header+0x94>)
 80143e2:	f240 224b 	movw	r2, #587	@ 0x24b
 80143e6:	4920      	ldr	r1, [pc, #128]	@ (8014468 <pbuf_remove_header+0x98>)
 80143e8:	4820      	ldr	r0, [pc, #128]	@ (801446c <pbuf_remove_header+0x9c>)
 80143ea:	f009 fe73 	bl	801e0d4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d003      	beq.n	80143fc <pbuf_remove_header+0x2c>
 80143f4:	683b      	ldr	r3, [r7, #0]
 80143f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80143fa:	d301      	bcc.n	8014400 <pbuf_remove_header+0x30>
    return 1;
 80143fc:	2301      	movs	r3, #1
 80143fe:	e02c      	b.n	801445a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d101      	bne.n	801440a <pbuf_remove_header+0x3a>
    return 0;
 8014406:	2300      	movs	r3, #0
 8014408:	e027      	b.n	801445a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801440a:	683b      	ldr	r3, [r7, #0]
 801440c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	895b      	ldrh	r3, [r3, #10]
 8014412:	89fa      	ldrh	r2, [r7, #14]
 8014414:	429a      	cmp	r2, r3
 8014416:	d908      	bls.n	801442a <pbuf_remove_header+0x5a>
 8014418:	4b12      	ldr	r3, [pc, #72]	@ (8014464 <pbuf_remove_header+0x94>)
 801441a:	f240 2255 	movw	r2, #597	@ 0x255
 801441e:	4914      	ldr	r1, [pc, #80]	@ (8014470 <pbuf_remove_header+0xa0>)
 8014420:	4812      	ldr	r0, [pc, #72]	@ (801446c <pbuf_remove_header+0x9c>)
 8014422:	f009 fe57 	bl	801e0d4 <iprintf>
 8014426:	2301      	movs	r3, #1
 8014428:	e017      	b.n	801445a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	685b      	ldr	r3, [r3, #4]
 801442e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	685a      	ldr	r2, [r3, #4]
 8014434:	683b      	ldr	r3, [r7, #0]
 8014436:	441a      	add	r2, r3
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	895a      	ldrh	r2, [r3, #10]
 8014440:	89fb      	ldrh	r3, [r7, #14]
 8014442:	1ad3      	subs	r3, r2, r3
 8014444:	b29a      	uxth	r2, r3
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	891a      	ldrh	r2, [r3, #8]
 801444e:	89fb      	ldrh	r3, [r7, #14]
 8014450:	1ad3      	subs	r3, r2, r3
 8014452:	b29a      	uxth	r2, r3
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014458:	2300      	movs	r3, #0
}
 801445a:	4618      	mov	r0, r3
 801445c:	3710      	adds	r7, #16
 801445e:	46bd      	mov	sp, r7
 8014460:	bd80      	pop	{r7, pc}
 8014462:	bf00      	nop
 8014464:	0801f8fc 	.word	0x0801f8fc
 8014468:	0801fa60 	.word	0x0801fa60
 801446c:	0801f95c 	.word	0x0801f95c
 8014470:	0801fa6c 	.word	0x0801fa6c

08014474 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014474:	b580      	push	{r7, lr}
 8014476:	b082      	sub	sp, #8
 8014478:	af00      	add	r7, sp, #0
 801447a:	6078      	str	r0, [r7, #4]
 801447c:	460b      	mov	r3, r1
 801447e:	807b      	strh	r3, [r7, #2]
 8014480:	4613      	mov	r3, r2
 8014482:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014484:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014488:	2b00      	cmp	r3, #0
 801448a:	da08      	bge.n	801449e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801448c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014490:	425b      	negs	r3, r3
 8014492:	4619      	mov	r1, r3
 8014494:	6878      	ldr	r0, [r7, #4]
 8014496:	f7ff ff9b 	bl	80143d0 <pbuf_remove_header>
 801449a:	4603      	mov	r3, r0
 801449c:	e007      	b.n	80144ae <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801449e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80144a2:	787a      	ldrb	r2, [r7, #1]
 80144a4:	4619      	mov	r1, r3
 80144a6:	6878      	ldr	r0, [r7, #4]
 80144a8:	f7ff ff1a 	bl	80142e0 <pbuf_add_header_impl>
 80144ac:	4603      	mov	r3, r0
  }
}
 80144ae:	4618      	mov	r0, r3
 80144b0:	3708      	adds	r7, #8
 80144b2:	46bd      	mov	sp, r7
 80144b4:	bd80      	pop	{r7, pc}

080144b6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80144b6:	b580      	push	{r7, lr}
 80144b8:	b082      	sub	sp, #8
 80144ba:	af00      	add	r7, sp, #0
 80144bc:	6078      	str	r0, [r7, #4]
 80144be:	460b      	mov	r3, r1
 80144c0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80144c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80144c6:	2201      	movs	r2, #1
 80144c8:	4619      	mov	r1, r3
 80144ca:	6878      	ldr	r0, [r7, #4]
 80144cc:	f7ff ffd2 	bl	8014474 <pbuf_header_impl>
 80144d0:	4603      	mov	r3, r0
}
 80144d2:	4618      	mov	r0, r3
 80144d4:	3708      	adds	r7, #8
 80144d6:	46bd      	mov	sp, r7
 80144d8:	bd80      	pop	{r7, pc}
	...

080144dc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b088      	sub	sp, #32
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d10b      	bne.n	8014502 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d106      	bne.n	80144fe <pbuf_free+0x22>
 80144f0:	4b3b      	ldr	r3, [pc, #236]	@ (80145e0 <pbuf_free+0x104>)
 80144f2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80144f6:	493b      	ldr	r1, [pc, #236]	@ (80145e4 <pbuf_free+0x108>)
 80144f8:	483b      	ldr	r0, [pc, #236]	@ (80145e8 <pbuf_free+0x10c>)
 80144fa:	f009 fdeb 	bl	801e0d4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80144fe:	2300      	movs	r3, #0
 8014500:	e069      	b.n	80145d6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8014502:	2300      	movs	r3, #0
 8014504:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8014506:	e062      	b.n	80145ce <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014508:	f008 fd66 	bl	801cfd8 <sys_arch_protect>
 801450c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	7b9b      	ldrb	r3, [r3, #14]
 8014512:	2b00      	cmp	r3, #0
 8014514:	d106      	bne.n	8014524 <pbuf_free+0x48>
 8014516:	4b32      	ldr	r3, [pc, #200]	@ (80145e0 <pbuf_free+0x104>)
 8014518:	f240 22f1 	movw	r2, #753	@ 0x2f1
 801451c:	4933      	ldr	r1, [pc, #204]	@ (80145ec <pbuf_free+0x110>)
 801451e:	4832      	ldr	r0, [pc, #200]	@ (80145e8 <pbuf_free+0x10c>)
 8014520:	f009 fdd8 	bl	801e0d4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	7b9b      	ldrb	r3, [r3, #14]
 8014528:	3b01      	subs	r3, #1
 801452a:	b2da      	uxtb	r2, r3
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	739a      	strb	r2, [r3, #14]
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	7b9b      	ldrb	r3, [r3, #14]
 8014534:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8014536:	69b8      	ldr	r0, [r7, #24]
 8014538:	f008 fd5c 	bl	801cff4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801453c:	7dfb      	ldrb	r3, [r7, #23]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d143      	bne.n	80145ca <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	7b1b      	ldrb	r3, [r3, #12]
 801454c:	f003 030f 	and.w	r3, r3, #15
 8014550:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	7b5b      	ldrb	r3, [r3, #13]
 8014556:	f003 0302 	and.w	r3, r3, #2
 801455a:	2b00      	cmp	r3, #0
 801455c:	d011      	beq.n	8014582 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014562:	68bb      	ldr	r3, [r7, #8]
 8014564:	691b      	ldr	r3, [r3, #16]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d106      	bne.n	8014578 <pbuf_free+0x9c>
 801456a:	4b1d      	ldr	r3, [pc, #116]	@ (80145e0 <pbuf_free+0x104>)
 801456c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8014570:	491f      	ldr	r1, [pc, #124]	@ (80145f0 <pbuf_free+0x114>)
 8014572:	481d      	ldr	r0, [pc, #116]	@ (80145e8 <pbuf_free+0x10c>)
 8014574:	f009 fdae 	bl	801e0d4 <iprintf>
        pc->custom_free_function(p);
 8014578:	68bb      	ldr	r3, [r7, #8]
 801457a:	691b      	ldr	r3, [r3, #16]
 801457c:	6878      	ldr	r0, [r7, #4]
 801457e:	4798      	blx	r3
 8014580:	e01d      	b.n	80145be <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8014582:	7bfb      	ldrb	r3, [r7, #15]
 8014584:	2b02      	cmp	r3, #2
 8014586:	d104      	bne.n	8014592 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8014588:	6879      	ldr	r1, [r7, #4]
 801458a:	200c      	movs	r0, #12
 801458c:	f7ff f902 	bl	8013794 <memp_free>
 8014590:	e015      	b.n	80145be <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8014592:	7bfb      	ldrb	r3, [r7, #15]
 8014594:	2b01      	cmp	r3, #1
 8014596:	d104      	bne.n	80145a2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8014598:	6879      	ldr	r1, [r7, #4]
 801459a:	200b      	movs	r0, #11
 801459c:	f7ff f8fa 	bl	8013794 <memp_free>
 80145a0:	e00d      	b.n	80145be <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80145a2:	7bfb      	ldrb	r3, [r7, #15]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d103      	bne.n	80145b0 <pbuf_free+0xd4>
          mem_free(p);
 80145a8:	6878      	ldr	r0, [r7, #4]
 80145aa:	f7fe fd3f 	bl	801302c <mem_free>
 80145ae:	e006      	b.n	80145be <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80145b0:	4b0b      	ldr	r3, [pc, #44]	@ (80145e0 <pbuf_free+0x104>)
 80145b2:	f240 320f 	movw	r2, #783	@ 0x30f
 80145b6:	490f      	ldr	r1, [pc, #60]	@ (80145f4 <pbuf_free+0x118>)
 80145b8:	480b      	ldr	r0, [pc, #44]	@ (80145e8 <pbuf_free+0x10c>)
 80145ba:	f009 fd8b 	bl	801e0d4 <iprintf>
        }
      }
      count++;
 80145be:	7ffb      	ldrb	r3, [r7, #31]
 80145c0:	3301      	adds	r3, #1
 80145c2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80145c4:	693b      	ldr	r3, [r7, #16]
 80145c6:	607b      	str	r3, [r7, #4]
 80145c8:	e001      	b.n	80145ce <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80145ca:	2300      	movs	r3, #0
 80145cc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d199      	bne.n	8014508 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80145d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80145d6:	4618      	mov	r0, r3
 80145d8:	3720      	adds	r7, #32
 80145da:	46bd      	mov	sp, r7
 80145dc:	bd80      	pop	{r7, pc}
 80145de:	bf00      	nop
 80145e0:	0801f8fc 	.word	0x0801f8fc
 80145e4:	0801fa60 	.word	0x0801fa60
 80145e8:	0801f95c 	.word	0x0801f95c
 80145ec:	0801fa8c 	.word	0x0801fa8c
 80145f0:	0801faa4 	.word	0x0801faa4
 80145f4:	0801fac8 	.word	0x0801fac8

080145f8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80145f8:	b480      	push	{r7}
 80145fa:	b085      	sub	sp, #20
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014600:	2300      	movs	r3, #0
 8014602:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014604:	e005      	b.n	8014612 <pbuf_clen+0x1a>
    ++len;
 8014606:	89fb      	ldrh	r3, [r7, #14]
 8014608:	3301      	adds	r3, #1
 801460a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d1f6      	bne.n	8014606 <pbuf_clen+0xe>
  }
  return len;
 8014618:	89fb      	ldrh	r3, [r7, #14]
}
 801461a:	4618      	mov	r0, r3
 801461c:	3714      	adds	r7, #20
 801461e:	46bd      	mov	sp, r7
 8014620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014624:	4770      	bx	lr
	...

08014628 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b084      	sub	sp, #16
 801462c:	af00      	add	r7, sp, #0
 801462e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d016      	beq.n	8014664 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8014636:	f008 fccf 	bl	801cfd8 <sys_arch_protect>
 801463a:	60f8      	str	r0, [r7, #12]
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	7b9b      	ldrb	r3, [r3, #14]
 8014640:	3301      	adds	r3, #1
 8014642:	b2da      	uxtb	r2, r3
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	739a      	strb	r2, [r3, #14]
 8014648:	68f8      	ldr	r0, [r7, #12]
 801464a:	f008 fcd3 	bl	801cff4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	7b9b      	ldrb	r3, [r3, #14]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d106      	bne.n	8014664 <pbuf_ref+0x3c>
 8014656:	4b05      	ldr	r3, [pc, #20]	@ (801466c <pbuf_ref+0x44>)
 8014658:	f240 3242 	movw	r2, #834	@ 0x342
 801465c:	4904      	ldr	r1, [pc, #16]	@ (8014670 <pbuf_ref+0x48>)
 801465e:	4805      	ldr	r0, [pc, #20]	@ (8014674 <pbuf_ref+0x4c>)
 8014660:	f009 fd38 	bl	801e0d4 <iprintf>
  }
}
 8014664:	bf00      	nop
 8014666:	3710      	adds	r7, #16
 8014668:	46bd      	mov	sp, r7
 801466a:	bd80      	pop	{r7, pc}
 801466c:	0801f8fc 	.word	0x0801f8fc
 8014670:	0801fadc 	.word	0x0801fadc
 8014674:	0801f95c 	.word	0x0801f95c

08014678 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014678:	b580      	push	{r7, lr}
 801467a:	b084      	sub	sp, #16
 801467c:	af00      	add	r7, sp, #0
 801467e:	6078      	str	r0, [r7, #4]
 8014680:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d002      	beq.n	801468e <pbuf_cat+0x16>
 8014688:	683b      	ldr	r3, [r7, #0]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d107      	bne.n	801469e <pbuf_cat+0x26>
 801468e:	4b20      	ldr	r3, [pc, #128]	@ (8014710 <pbuf_cat+0x98>)
 8014690:	f240 3259 	movw	r2, #857	@ 0x359
 8014694:	491f      	ldr	r1, [pc, #124]	@ (8014714 <pbuf_cat+0x9c>)
 8014696:	4820      	ldr	r0, [pc, #128]	@ (8014718 <pbuf_cat+0xa0>)
 8014698:	f009 fd1c 	bl	801e0d4 <iprintf>
 801469c:	e034      	b.n	8014708 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	60fb      	str	r3, [r7, #12]
 80146a2:	e00a      	b.n	80146ba <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	891a      	ldrh	r2, [r3, #8]
 80146a8:	683b      	ldr	r3, [r7, #0]
 80146aa:	891b      	ldrh	r3, [r3, #8]
 80146ac:	4413      	add	r3, r2
 80146ae:	b29a      	uxth	r2, r3
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	60fb      	str	r3, [r7, #12]
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d1f0      	bne.n	80146a4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	891a      	ldrh	r2, [r3, #8]
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	895b      	ldrh	r3, [r3, #10]
 80146ca:	429a      	cmp	r2, r3
 80146cc:	d006      	beq.n	80146dc <pbuf_cat+0x64>
 80146ce:	4b10      	ldr	r3, [pc, #64]	@ (8014710 <pbuf_cat+0x98>)
 80146d0:	f240 3262 	movw	r2, #866	@ 0x362
 80146d4:	4911      	ldr	r1, [pc, #68]	@ (801471c <pbuf_cat+0xa4>)
 80146d6:	4810      	ldr	r0, [pc, #64]	@ (8014718 <pbuf_cat+0xa0>)
 80146d8:	f009 fcfc 	bl	801e0d4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d006      	beq.n	80146f2 <pbuf_cat+0x7a>
 80146e4:	4b0a      	ldr	r3, [pc, #40]	@ (8014710 <pbuf_cat+0x98>)
 80146e6:	f240 3263 	movw	r2, #867	@ 0x363
 80146ea:	490d      	ldr	r1, [pc, #52]	@ (8014720 <pbuf_cat+0xa8>)
 80146ec:	480a      	ldr	r0, [pc, #40]	@ (8014718 <pbuf_cat+0xa0>)
 80146ee:	f009 fcf1 	bl	801e0d4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	891a      	ldrh	r2, [r3, #8]
 80146f6:	683b      	ldr	r3, [r7, #0]
 80146f8:	891b      	ldrh	r3, [r3, #8]
 80146fa:	4413      	add	r3, r2
 80146fc:	b29a      	uxth	r2, r3
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	683a      	ldr	r2, [r7, #0]
 8014706:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014708:	3710      	adds	r7, #16
 801470a:	46bd      	mov	sp, r7
 801470c:	bd80      	pop	{r7, pc}
 801470e:	bf00      	nop
 8014710:	0801f8fc 	.word	0x0801f8fc
 8014714:	0801faf0 	.word	0x0801faf0
 8014718:	0801f95c 	.word	0x0801f95c
 801471c:	0801fb28 	.word	0x0801fb28
 8014720:	0801fb58 	.word	0x0801fb58

08014724 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b082      	sub	sp, #8
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
 801472c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801472e:	6839      	ldr	r1, [r7, #0]
 8014730:	6878      	ldr	r0, [r7, #4]
 8014732:	f7ff ffa1 	bl	8014678 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8014736:	6838      	ldr	r0, [r7, #0]
 8014738:	f7ff ff76 	bl	8014628 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801473c:	bf00      	nop
 801473e:	3708      	adds	r7, #8
 8014740:	46bd      	mov	sp, r7
 8014742:	bd80      	pop	{r7, pc}

08014744 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014744:	b580      	push	{r7, lr}
 8014746:	b086      	sub	sp, #24
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
 801474c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801474e:	2300      	movs	r3, #0
 8014750:	617b      	str	r3, [r7, #20]
 8014752:	2300      	movs	r3, #0
 8014754:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d008      	beq.n	801476e <pbuf_copy+0x2a>
 801475c:	683b      	ldr	r3, [r7, #0]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d005      	beq.n	801476e <pbuf_copy+0x2a>
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	891a      	ldrh	r2, [r3, #8]
 8014766:	683b      	ldr	r3, [r7, #0]
 8014768:	891b      	ldrh	r3, [r3, #8]
 801476a:	429a      	cmp	r2, r3
 801476c:	d209      	bcs.n	8014782 <pbuf_copy+0x3e>
 801476e:	4b57      	ldr	r3, [pc, #348]	@ (80148cc <pbuf_copy+0x188>)
 8014770:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8014774:	4956      	ldr	r1, [pc, #344]	@ (80148d0 <pbuf_copy+0x18c>)
 8014776:	4857      	ldr	r0, [pc, #348]	@ (80148d4 <pbuf_copy+0x190>)
 8014778:	f009 fcac 	bl	801e0d4 <iprintf>
 801477c:	f06f 030f 	mvn.w	r3, #15
 8014780:	e09f      	b.n	80148c2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	895b      	ldrh	r3, [r3, #10]
 8014786:	461a      	mov	r2, r3
 8014788:	697b      	ldr	r3, [r7, #20]
 801478a:	1ad2      	subs	r2, r2, r3
 801478c:	683b      	ldr	r3, [r7, #0]
 801478e:	895b      	ldrh	r3, [r3, #10]
 8014790:	4619      	mov	r1, r3
 8014792:	693b      	ldr	r3, [r7, #16]
 8014794:	1acb      	subs	r3, r1, r3
 8014796:	429a      	cmp	r2, r3
 8014798:	d306      	bcc.n	80147a8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801479a:	683b      	ldr	r3, [r7, #0]
 801479c:	895b      	ldrh	r3, [r3, #10]
 801479e:	461a      	mov	r2, r3
 80147a0:	693b      	ldr	r3, [r7, #16]
 80147a2:	1ad3      	subs	r3, r2, r3
 80147a4:	60fb      	str	r3, [r7, #12]
 80147a6:	e005      	b.n	80147b4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	895b      	ldrh	r3, [r3, #10]
 80147ac:	461a      	mov	r2, r3
 80147ae:	697b      	ldr	r3, [r7, #20]
 80147b0:	1ad3      	subs	r3, r2, r3
 80147b2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	685a      	ldr	r2, [r3, #4]
 80147b8:	697b      	ldr	r3, [r7, #20]
 80147ba:	18d0      	adds	r0, r2, r3
 80147bc:	683b      	ldr	r3, [r7, #0]
 80147be:	685a      	ldr	r2, [r3, #4]
 80147c0:	693b      	ldr	r3, [r7, #16]
 80147c2:	4413      	add	r3, r2
 80147c4:	68fa      	ldr	r2, [r7, #12]
 80147c6:	4619      	mov	r1, r3
 80147c8:	f009 feaf 	bl	801e52a <memcpy>
    offset_to += len;
 80147cc:	697a      	ldr	r2, [r7, #20]
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	4413      	add	r3, r2
 80147d2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80147d4:	693a      	ldr	r2, [r7, #16]
 80147d6:	68fb      	ldr	r3, [r7, #12]
 80147d8:	4413      	add	r3, r2
 80147da:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	895b      	ldrh	r3, [r3, #10]
 80147e0:	461a      	mov	r2, r3
 80147e2:	697b      	ldr	r3, [r7, #20]
 80147e4:	4293      	cmp	r3, r2
 80147e6:	d906      	bls.n	80147f6 <pbuf_copy+0xb2>
 80147e8:	4b38      	ldr	r3, [pc, #224]	@ (80148cc <pbuf_copy+0x188>)
 80147ea:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80147ee:	493a      	ldr	r1, [pc, #232]	@ (80148d8 <pbuf_copy+0x194>)
 80147f0:	4838      	ldr	r0, [pc, #224]	@ (80148d4 <pbuf_copy+0x190>)
 80147f2:	f009 fc6f 	bl	801e0d4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80147f6:	683b      	ldr	r3, [r7, #0]
 80147f8:	895b      	ldrh	r3, [r3, #10]
 80147fa:	461a      	mov	r2, r3
 80147fc:	693b      	ldr	r3, [r7, #16]
 80147fe:	4293      	cmp	r3, r2
 8014800:	d906      	bls.n	8014810 <pbuf_copy+0xcc>
 8014802:	4b32      	ldr	r3, [pc, #200]	@ (80148cc <pbuf_copy+0x188>)
 8014804:	f240 32da 	movw	r2, #986	@ 0x3da
 8014808:	4934      	ldr	r1, [pc, #208]	@ (80148dc <pbuf_copy+0x198>)
 801480a:	4832      	ldr	r0, [pc, #200]	@ (80148d4 <pbuf_copy+0x190>)
 801480c:	f009 fc62 	bl	801e0d4 <iprintf>
    if (offset_from >= p_from->len) {
 8014810:	683b      	ldr	r3, [r7, #0]
 8014812:	895b      	ldrh	r3, [r3, #10]
 8014814:	461a      	mov	r2, r3
 8014816:	693b      	ldr	r3, [r7, #16]
 8014818:	4293      	cmp	r3, r2
 801481a:	d304      	bcc.n	8014826 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801481c:	2300      	movs	r3, #0
 801481e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014820:	683b      	ldr	r3, [r7, #0]
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	895b      	ldrh	r3, [r3, #10]
 801482a:	461a      	mov	r2, r3
 801482c:	697b      	ldr	r3, [r7, #20]
 801482e:	4293      	cmp	r3, r2
 8014830:	d114      	bne.n	801485c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014832:	2300      	movs	r3, #0
 8014834:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d10c      	bne.n	801485c <pbuf_copy+0x118>
 8014842:	683b      	ldr	r3, [r7, #0]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d009      	beq.n	801485c <pbuf_copy+0x118>
 8014848:	4b20      	ldr	r3, [pc, #128]	@ (80148cc <pbuf_copy+0x188>)
 801484a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801484e:	4924      	ldr	r1, [pc, #144]	@ (80148e0 <pbuf_copy+0x19c>)
 8014850:	4820      	ldr	r0, [pc, #128]	@ (80148d4 <pbuf_copy+0x190>)
 8014852:	f009 fc3f 	bl	801e0d4 <iprintf>
 8014856:	f06f 030f 	mvn.w	r3, #15
 801485a:	e032      	b.n	80148c2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801485c:	683b      	ldr	r3, [r7, #0]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d013      	beq.n	801488a <pbuf_copy+0x146>
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	895a      	ldrh	r2, [r3, #10]
 8014866:	683b      	ldr	r3, [r7, #0]
 8014868:	891b      	ldrh	r3, [r3, #8]
 801486a:	429a      	cmp	r2, r3
 801486c:	d10d      	bne.n	801488a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801486e:	683b      	ldr	r3, [r7, #0]
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d009      	beq.n	801488a <pbuf_copy+0x146>
 8014876:	4b15      	ldr	r3, [pc, #84]	@ (80148cc <pbuf_copy+0x188>)
 8014878:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 801487c:	4919      	ldr	r1, [pc, #100]	@ (80148e4 <pbuf_copy+0x1a0>)
 801487e:	4815      	ldr	r0, [pc, #84]	@ (80148d4 <pbuf_copy+0x190>)
 8014880:	f009 fc28 	bl	801e0d4 <iprintf>
 8014884:	f06f 0305 	mvn.w	r3, #5
 8014888:	e01b      	b.n	80148c2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	2b00      	cmp	r3, #0
 801488e:	d013      	beq.n	80148b8 <pbuf_copy+0x174>
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	895a      	ldrh	r2, [r3, #10]
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	891b      	ldrh	r3, [r3, #8]
 8014898:	429a      	cmp	r2, r3
 801489a:	d10d      	bne.n	80148b8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d009      	beq.n	80148b8 <pbuf_copy+0x174>
 80148a4:	4b09      	ldr	r3, [pc, #36]	@ (80148cc <pbuf_copy+0x188>)
 80148a6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80148aa:	490e      	ldr	r1, [pc, #56]	@ (80148e4 <pbuf_copy+0x1a0>)
 80148ac:	4809      	ldr	r0, [pc, #36]	@ (80148d4 <pbuf_copy+0x190>)
 80148ae:	f009 fc11 	bl	801e0d4 <iprintf>
 80148b2:	f06f 0305 	mvn.w	r3, #5
 80148b6:	e004      	b.n	80148c2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80148b8:	683b      	ldr	r3, [r7, #0]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	f47f af61 	bne.w	8014782 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80148c0:	2300      	movs	r3, #0
}
 80148c2:	4618      	mov	r0, r3
 80148c4:	3718      	adds	r7, #24
 80148c6:	46bd      	mov	sp, r7
 80148c8:	bd80      	pop	{r7, pc}
 80148ca:	bf00      	nop
 80148cc:	0801f8fc 	.word	0x0801f8fc
 80148d0:	0801fba4 	.word	0x0801fba4
 80148d4:	0801f95c 	.word	0x0801f95c
 80148d8:	0801fbd4 	.word	0x0801fbd4
 80148dc:	0801fbec 	.word	0x0801fbec
 80148e0:	0801fc08 	.word	0x0801fc08
 80148e4:	0801fc18 	.word	0x0801fc18

080148e8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b088      	sub	sp, #32
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	60f8      	str	r0, [r7, #12]
 80148f0:	60b9      	str	r1, [r7, #8]
 80148f2:	4611      	mov	r1, r2
 80148f4:	461a      	mov	r2, r3
 80148f6:	460b      	mov	r3, r1
 80148f8:	80fb      	strh	r3, [r7, #6]
 80148fa:	4613      	mov	r3, r2
 80148fc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80148fe:	2300      	movs	r3, #0
 8014900:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8014902:	2300      	movs	r3, #0
 8014904:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d108      	bne.n	801491e <pbuf_copy_partial+0x36>
 801490c:	4b2b      	ldr	r3, [pc, #172]	@ (80149bc <pbuf_copy_partial+0xd4>)
 801490e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8014912:	492b      	ldr	r1, [pc, #172]	@ (80149c0 <pbuf_copy_partial+0xd8>)
 8014914:	482b      	ldr	r0, [pc, #172]	@ (80149c4 <pbuf_copy_partial+0xdc>)
 8014916:	f009 fbdd 	bl	801e0d4 <iprintf>
 801491a:	2300      	movs	r3, #0
 801491c:	e04a      	b.n	80149b4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801491e:	68bb      	ldr	r3, [r7, #8]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d108      	bne.n	8014936 <pbuf_copy_partial+0x4e>
 8014924:	4b25      	ldr	r3, [pc, #148]	@ (80149bc <pbuf_copy_partial+0xd4>)
 8014926:	f240 420b 	movw	r2, #1035	@ 0x40b
 801492a:	4927      	ldr	r1, [pc, #156]	@ (80149c8 <pbuf_copy_partial+0xe0>)
 801492c:	4825      	ldr	r0, [pc, #148]	@ (80149c4 <pbuf_copy_partial+0xdc>)
 801492e:	f009 fbd1 	bl	801e0d4 <iprintf>
 8014932:	2300      	movs	r3, #0
 8014934:	e03e      	b.n	80149b4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	61fb      	str	r3, [r7, #28]
 801493a:	e034      	b.n	80149a6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801493c:	88bb      	ldrh	r3, [r7, #4]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d00a      	beq.n	8014958 <pbuf_copy_partial+0x70>
 8014942:	69fb      	ldr	r3, [r7, #28]
 8014944:	895b      	ldrh	r3, [r3, #10]
 8014946:	88ba      	ldrh	r2, [r7, #4]
 8014948:	429a      	cmp	r2, r3
 801494a:	d305      	bcc.n	8014958 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801494c:	69fb      	ldr	r3, [r7, #28]
 801494e:	895b      	ldrh	r3, [r3, #10]
 8014950:	88ba      	ldrh	r2, [r7, #4]
 8014952:	1ad3      	subs	r3, r2, r3
 8014954:	80bb      	strh	r3, [r7, #4]
 8014956:	e023      	b.n	80149a0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8014958:	69fb      	ldr	r3, [r7, #28]
 801495a:	895a      	ldrh	r2, [r3, #10]
 801495c:	88bb      	ldrh	r3, [r7, #4]
 801495e:	1ad3      	subs	r3, r2, r3
 8014960:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8014962:	8b3a      	ldrh	r2, [r7, #24]
 8014964:	88fb      	ldrh	r3, [r7, #6]
 8014966:	429a      	cmp	r2, r3
 8014968:	d901      	bls.n	801496e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801496a:	88fb      	ldrh	r3, [r7, #6]
 801496c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801496e:	8b7b      	ldrh	r3, [r7, #26]
 8014970:	68ba      	ldr	r2, [r7, #8]
 8014972:	18d0      	adds	r0, r2, r3
 8014974:	69fb      	ldr	r3, [r7, #28]
 8014976:	685a      	ldr	r2, [r3, #4]
 8014978:	88bb      	ldrh	r3, [r7, #4]
 801497a:	4413      	add	r3, r2
 801497c:	8b3a      	ldrh	r2, [r7, #24]
 801497e:	4619      	mov	r1, r3
 8014980:	f009 fdd3 	bl	801e52a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8014984:	8afa      	ldrh	r2, [r7, #22]
 8014986:	8b3b      	ldrh	r3, [r7, #24]
 8014988:	4413      	add	r3, r2
 801498a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801498c:	8b7a      	ldrh	r2, [r7, #26]
 801498e:	8b3b      	ldrh	r3, [r7, #24]
 8014990:	4413      	add	r3, r2
 8014992:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8014994:	88fa      	ldrh	r2, [r7, #6]
 8014996:	8b3b      	ldrh	r3, [r7, #24]
 8014998:	1ad3      	subs	r3, r2, r3
 801499a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801499c:	2300      	movs	r3, #0
 801499e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80149a0:	69fb      	ldr	r3, [r7, #28]
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	61fb      	str	r3, [r7, #28]
 80149a6:	88fb      	ldrh	r3, [r7, #6]
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d002      	beq.n	80149b2 <pbuf_copy_partial+0xca>
 80149ac:	69fb      	ldr	r3, [r7, #28]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d1c4      	bne.n	801493c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80149b2:	8afb      	ldrh	r3, [r7, #22]
}
 80149b4:	4618      	mov	r0, r3
 80149b6:	3720      	adds	r7, #32
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bd80      	pop	{r7, pc}
 80149bc:	0801f8fc 	.word	0x0801f8fc
 80149c0:	0801fc44 	.word	0x0801fc44
 80149c4:	0801f95c 	.word	0x0801f95c
 80149c8:	0801fc64 	.word	0x0801fc64

080149cc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80149cc:	b580      	push	{r7, lr}
 80149ce:	b084      	sub	sp, #16
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	4603      	mov	r3, r0
 80149d4:	603a      	str	r2, [r7, #0]
 80149d6:	71fb      	strb	r3, [r7, #7]
 80149d8:	460b      	mov	r3, r1
 80149da:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80149dc:	683b      	ldr	r3, [r7, #0]
 80149de:	8919      	ldrh	r1, [r3, #8]
 80149e0:	88ba      	ldrh	r2, [r7, #4]
 80149e2:	79fb      	ldrb	r3, [r7, #7]
 80149e4:	4618      	mov	r0, r3
 80149e6:	f7ff fa95 	bl	8013f14 <pbuf_alloc>
 80149ea:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d101      	bne.n	80149f6 <pbuf_clone+0x2a>
    return NULL;
 80149f2:	2300      	movs	r3, #0
 80149f4:	e011      	b.n	8014a1a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80149f6:	6839      	ldr	r1, [r7, #0]
 80149f8:	68f8      	ldr	r0, [r7, #12]
 80149fa:	f7ff fea3 	bl	8014744 <pbuf_copy>
 80149fe:	4603      	mov	r3, r0
 8014a00:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8014a02:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d006      	beq.n	8014a18 <pbuf_clone+0x4c>
 8014a0a:	4b06      	ldr	r3, [pc, #24]	@ (8014a24 <pbuf_clone+0x58>)
 8014a0c:	f240 5224 	movw	r2, #1316	@ 0x524
 8014a10:	4905      	ldr	r1, [pc, #20]	@ (8014a28 <pbuf_clone+0x5c>)
 8014a12:	4806      	ldr	r0, [pc, #24]	@ (8014a2c <pbuf_clone+0x60>)
 8014a14:	f009 fb5e 	bl	801e0d4 <iprintf>
  return q;
 8014a18:	68fb      	ldr	r3, [r7, #12]
}
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	3710      	adds	r7, #16
 8014a1e:	46bd      	mov	sp, r7
 8014a20:	bd80      	pop	{r7, pc}
 8014a22:	bf00      	nop
 8014a24:	0801f8fc 	.word	0x0801f8fc
 8014a28:	0801fd70 	.word	0x0801fd70
 8014a2c:	0801f95c 	.word	0x0801f95c

08014a30 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014a34:	f009 fa4e 	bl	801ded4 <rand>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	b29b      	uxth	r3, r3
 8014a3c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014a40:	b29b      	uxth	r3, r3
 8014a42:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8014a46:	b29a      	uxth	r2, r3
 8014a48:	4b01      	ldr	r3, [pc, #4]	@ (8014a50 <tcp_init+0x20>)
 8014a4a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014a4c:	bf00      	nop
 8014a4e:	bd80      	pop	{r7, pc}
 8014a50:	20000024 	.word	0x20000024

08014a54 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b082      	sub	sp, #8
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	7d1b      	ldrb	r3, [r3, #20]
 8014a60:	2b01      	cmp	r3, #1
 8014a62:	d105      	bne.n	8014a70 <tcp_free+0x1c>
 8014a64:	4b06      	ldr	r3, [pc, #24]	@ (8014a80 <tcp_free+0x2c>)
 8014a66:	22d4      	movs	r2, #212	@ 0xd4
 8014a68:	4906      	ldr	r1, [pc, #24]	@ (8014a84 <tcp_free+0x30>)
 8014a6a:	4807      	ldr	r0, [pc, #28]	@ (8014a88 <tcp_free+0x34>)
 8014a6c:	f009 fb32 	bl	801e0d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8014a70:	6879      	ldr	r1, [r7, #4]
 8014a72:	2001      	movs	r0, #1
 8014a74:	f7fe fe8e 	bl	8013794 <memp_free>
}
 8014a78:	bf00      	nop
 8014a7a:	3708      	adds	r7, #8
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	bd80      	pop	{r7, pc}
 8014a80:	0801fdfc 	.word	0x0801fdfc
 8014a84:	0801fe2c 	.word	0x0801fe2c
 8014a88:	0801fe40 	.word	0x0801fe40

08014a8c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b082      	sub	sp, #8
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	7d1b      	ldrb	r3, [r3, #20]
 8014a98:	2b01      	cmp	r3, #1
 8014a9a:	d105      	bne.n	8014aa8 <tcp_free_listen+0x1c>
 8014a9c:	4b06      	ldr	r3, [pc, #24]	@ (8014ab8 <tcp_free_listen+0x2c>)
 8014a9e:	22df      	movs	r2, #223	@ 0xdf
 8014aa0:	4906      	ldr	r1, [pc, #24]	@ (8014abc <tcp_free_listen+0x30>)
 8014aa2:	4807      	ldr	r0, [pc, #28]	@ (8014ac0 <tcp_free_listen+0x34>)
 8014aa4:	f009 fb16 	bl	801e0d4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8014aa8:	6879      	ldr	r1, [r7, #4]
 8014aaa:	2002      	movs	r0, #2
 8014aac:	f7fe fe72 	bl	8013794 <memp_free>
}
 8014ab0:	bf00      	nop
 8014ab2:	3708      	adds	r7, #8
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	bd80      	pop	{r7, pc}
 8014ab8:	0801fdfc 	.word	0x0801fdfc
 8014abc:	0801fe68 	.word	0x0801fe68
 8014ac0:	0801fe40 	.word	0x0801fe40

08014ac4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8014ac8:	f000 fea4 	bl	8015814 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8014acc:	4b07      	ldr	r3, [pc, #28]	@ (8014aec <tcp_tmr+0x28>)
 8014ace:	781b      	ldrb	r3, [r3, #0]
 8014ad0:	3301      	adds	r3, #1
 8014ad2:	b2da      	uxtb	r2, r3
 8014ad4:	4b05      	ldr	r3, [pc, #20]	@ (8014aec <tcp_tmr+0x28>)
 8014ad6:	701a      	strb	r2, [r3, #0]
 8014ad8:	4b04      	ldr	r3, [pc, #16]	@ (8014aec <tcp_tmr+0x28>)
 8014ada:	781b      	ldrb	r3, [r3, #0]
 8014adc:	f003 0301 	and.w	r3, r3, #1
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d001      	beq.n	8014ae8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8014ae4:	f000 fb54 	bl	8015190 <tcp_slowtmr>
  }
}
 8014ae8:	bf00      	nop
 8014aea:	bd80      	pop	{r7, pc}
 8014aec:	200277c5 	.word	0x200277c5

08014af0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8014af0:	b580      	push	{r7, lr}
 8014af2:	b084      	sub	sp, #16
 8014af4:	af00      	add	r7, sp, #0
 8014af6:	6078      	str	r0, [r7, #4]
 8014af8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8014afa:	683b      	ldr	r3, [r7, #0]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d105      	bne.n	8014b0c <tcp_remove_listener+0x1c>
 8014b00:	4b0d      	ldr	r3, [pc, #52]	@ (8014b38 <tcp_remove_listener+0x48>)
 8014b02:	22ff      	movs	r2, #255	@ 0xff
 8014b04:	490d      	ldr	r1, [pc, #52]	@ (8014b3c <tcp_remove_listener+0x4c>)
 8014b06:	480e      	ldr	r0, [pc, #56]	@ (8014b40 <tcp_remove_listener+0x50>)
 8014b08:	f009 fae4 	bl	801e0d4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	60fb      	str	r3, [r7, #12]
 8014b10:	e00a      	b.n	8014b28 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014b16:	683a      	ldr	r2, [r7, #0]
 8014b18:	429a      	cmp	r2, r3
 8014b1a:	d102      	bne.n	8014b22 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	2200      	movs	r2, #0
 8014b20:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	68db      	ldr	r3, [r3, #12]
 8014b26:	60fb      	str	r3, [r7, #12]
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d1f1      	bne.n	8014b12 <tcp_remove_listener+0x22>
    }
  }
}
 8014b2e:	bf00      	nop
 8014b30:	bf00      	nop
 8014b32:	3710      	adds	r7, #16
 8014b34:	46bd      	mov	sp, r7
 8014b36:	bd80      	pop	{r7, pc}
 8014b38:	0801fdfc 	.word	0x0801fdfc
 8014b3c:	0801fe84 	.word	0x0801fe84
 8014b40:	0801fe40 	.word	0x0801fe40

08014b44 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b084      	sub	sp, #16
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d106      	bne.n	8014b60 <tcp_listen_closed+0x1c>
 8014b52:	4b14      	ldr	r3, [pc, #80]	@ (8014ba4 <tcp_listen_closed+0x60>)
 8014b54:	f240 1211 	movw	r2, #273	@ 0x111
 8014b58:	4913      	ldr	r1, [pc, #76]	@ (8014ba8 <tcp_listen_closed+0x64>)
 8014b5a:	4814      	ldr	r0, [pc, #80]	@ (8014bac <tcp_listen_closed+0x68>)
 8014b5c:	f009 faba 	bl	801e0d4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	7d1b      	ldrb	r3, [r3, #20]
 8014b64:	2b01      	cmp	r3, #1
 8014b66:	d006      	beq.n	8014b76 <tcp_listen_closed+0x32>
 8014b68:	4b0e      	ldr	r3, [pc, #56]	@ (8014ba4 <tcp_listen_closed+0x60>)
 8014b6a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8014b6e:	4910      	ldr	r1, [pc, #64]	@ (8014bb0 <tcp_listen_closed+0x6c>)
 8014b70:	480e      	ldr	r0, [pc, #56]	@ (8014bac <tcp_listen_closed+0x68>)
 8014b72:	f009 faaf 	bl	801e0d4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014b76:	2301      	movs	r3, #1
 8014b78:	60fb      	str	r3, [r7, #12]
 8014b7a:	e00b      	b.n	8014b94 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8014b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8014bb4 <tcp_listen_closed+0x70>)
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	6879      	ldr	r1, [r7, #4]
 8014b88:	4618      	mov	r0, r3
 8014b8a:	f7ff ffb1 	bl	8014af0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	3301      	adds	r3, #1
 8014b92:	60fb      	str	r3, [r7, #12]
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	2b03      	cmp	r3, #3
 8014b98:	d9f0      	bls.n	8014b7c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8014b9a:	bf00      	nop
 8014b9c:	bf00      	nop
 8014b9e:	3710      	adds	r7, #16
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bd80      	pop	{r7, pc}
 8014ba4:	0801fdfc 	.word	0x0801fdfc
 8014ba8:	0801feac 	.word	0x0801feac
 8014bac:	0801fe40 	.word	0x0801fe40
 8014bb0:	0801feb8 	.word	0x0801feb8
 8014bb4:	08022308 	.word	0x08022308

08014bb8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8014bb8:	b5b0      	push	{r4, r5, r7, lr}
 8014bba:	b088      	sub	sp, #32
 8014bbc:	af04      	add	r7, sp, #16
 8014bbe:	6078      	str	r0, [r7, #4]
 8014bc0:	460b      	mov	r3, r1
 8014bc2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d106      	bne.n	8014bd8 <tcp_close_shutdown+0x20>
 8014bca:	4b63      	ldr	r3, [pc, #396]	@ (8014d58 <tcp_close_shutdown+0x1a0>)
 8014bcc:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8014bd0:	4962      	ldr	r1, [pc, #392]	@ (8014d5c <tcp_close_shutdown+0x1a4>)
 8014bd2:	4863      	ldr	r0, [pc, #396]	@ (8014d60 <tcp_close_shutdown+0x1a8>)
 8014bd4:	f009 fa7e 	bl	801e0d4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8014bd8:	78fb      	ldrb	r3, [r7, #3]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d066      	beq.n	8014cac <tcp_close_shutdown+0xf4>
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	7d1b      	ldrb	r3, [r3, #20]
 8014be2:	2b04      	cmp	r3, #4
 8014be4:	d003      	beq.n	8014bee <tcp_close_shutdown+0x36>
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	7d1b      	ldrb	r3, [r3, #20]
 8014bea:	2b07      	cmp	r3, #7
 8014bec:	d15e      	bne.n	8014cac <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d104      	bne.n	8014c00 <tcp_close_shutdown+0x48>
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014bfa:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014bfe:	d055      	beq.n	8014cac <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	8b5b      	ldrh	r3, [r3, #26]
 8014c04:	f003 0310 	and.w	r3, r3, #16
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d106      	bne.n	8014c1a <tcp_close_shutdown+0x62>
 8014c0c:	4b52      	ldr	r3, [pc, #328]	@ (8014d58 <tcp_close_shutdown+0x1a0>)
 8014c0e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8014c12:	4954      	ldr	r1, [pc, #336]	@ (8014d64 <tcp_close_shutdown+0x1ac>)
 8014c14:	4852      	ldr	r0, [pc, #328]	@ (8014d60 <tcp_close_shutdown+0x1a8>)
 8014c16:	f009 fa5d 	bl	801e0d4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014c22:	687d      	ldr	r5, [r7, #4]
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	3304      	adds	r3, #4
 8014c28:	687a      	ldr	r2, [r7, #4]
 8014c2a:	8ad2      	ldrh	r2, [r2, #22]
 8014c2c:	6879      	ldr	r1, [r7, #4]
 8014c2e:	8b09      	ldrh	r1, [r1, #24]
 8014c30:	9102      	str	r1, [sp, #8]
 8014c32:	9201      	str	r2, [sp, #4]
 8014c34:	9300      	str	r3, [sp, #0]
 8014c36:	462b      	mov	r3, r5
 8014c38:	4622      	mov	r2, r4
 8014c3a:	4601      	mov	r1, r0
 8014c3c:	6878      	ldr	r0, [r7, #4]
 8014c3e:	f004 fe8d 	bl	801995c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8014c42:	6878      	ldr	r0, [r7, #4]
 8014c44:	f001 f8c8 	bl	8015dd8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014c48:	4b47      	ldr	r3, [pc, #284]	@ (8014d68 <tcp_close_shutdown+0x1b0>)
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	687a      	ldr	r2, [r7, #4]
 8014c4e:	429a      	cmp	r2, r3
 8014c50:	d105      	bne.n	8014c5e <tcp_close_shutdown+0xa6>
 8014c52:	4b45      	ldr	r3, [pc, #276]	@ (8014d68 <tcp_close_shutdown+0x1b0>)
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	68db      	ldr	r3, [r3, #12]
 8014c58:	4a43      	ldr	r2, [pc, #268]	@ (8014d68 <tcp_close_shutdown+0x1b0>)
 8014c5a:	6013      	str	r3, [r2, #0]
 8014c5c:	e013      	b.n	8014c86 <tcp_close_shutdown+0xce>
 8014c5e:	4b42      	ldr	r3, [pc, #264]	@ (8014d68 <tcp_close_shutdown+0x1b0>)
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	60fb      	str	r3, [r7, #12]
 8014c64:	e00c      	b.n	8014c80 <tcp_close_shutdown+0xc8>
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	68db      	ldr	r3, [r3, #12]
 8014c6a:	687a      	ldr	r2, [r7, #4]
 8014c6c:	429a      	cmp	r2, r3
 8014c6e:	d104      	bne.n	8014c7a <tcp_close_shutdown+0xc2>
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	68da      	ldr	r2, [r3, #12]
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	60da      	str	r2, [r3, #12]
 8014c78:	e005      	b.n	8014c86 <tcp_close_shutdown+0xce>
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	68db      	ldr	r3, [r3, #12]
 8014c7e:	60fb      	str	r3, [r7, #12]
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d1ef      	bne.n	8014c66 <tcp_close_shutdown+0xae>
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	2200      	movs	r2, #0
 8014c8a:	60da      	str	r2, [r3, #12]
 8014c8c:	4b37      	ldr	r3, [pc, #220]	@ (8014d6c <tcp_close_shutdown+0x1b4>)
 8014c8e:	2201      	movs	r2, #1
 8014c90:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8014c92:	4b37      	ldr	r3, [pc, #220]	@ (8014d70 <tcp_close_shutdown+0x1b8>)
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	687a      	ldr	r2, [r7, #4]
 8014c98:	429a      	cmp	r2, r3
 8014c9a:	d102      	bne.n	8014ca2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8014c9c:	f003 fd5c 	bl	8018758 <tcp_trigger_input_pcb_close>
 8014ca0:	e002      	b.n	8014ca8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8014ca2:	6878      	ldr	r0, [r7, #4]
 8014ca4:	f7ff fed6 	bl	8014a54 <tcp_free>
      }
      return ERR_OK;
 8014ca8:	2300      	movs	r3, #0
 8014caa:	e050      	b.n	8014d4e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	7d1b      	ldrb	r3, [r3, #20]
 8014cb0:	2b02      	cmp	r3, #2
 8014cb2:	d03b      	beq.n	8014d2c <tcp_close_shutdown+0x174>
 8014cb4:	2b02      	cmp	r3, #2
 8014cb6:	dc44      	bgt.n	8014d42 <tcp_close_shutdown+0x18a>
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d002      	beq.n	8014cc2 <tcp_close_shutdown+0x10a>
 8014cbc:	2b01      	cmp	r3, #1
 8014cbe:	d02a      	beq.n	8014d16 <tcp_close_shutdown+0x15e>
 8014cc0:	e03f      	b.n	8014d42 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	8adb      	ldrh	r3, [r3, #22]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d021      	beq.n	8014d0e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014cca:	4b2a      	ldr	r3, [pc, #168]	@ (8014d74 <tcp_close_shutdown+0x1bc>)
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	687a      	ldr	r2, [r7, #4]
 8014cd0:	429a      	cmp	r2, r3
 8014cd2:	d105      	bne.n	8014ce0 <tcp_close_shutdown+0x128>
 8014cd4:	4b27      	ldr	r3, [pc, #156]	@ (8014d74 <tcp_close_shutdown+0x1bc>)
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	68db      	ldr	r3, [r3, #12]
 8014cda:	4a26      	ldr	r2, [pc, #152]	@ (8014d74 <tcp_close_shutdown+0x1bc>)
 8014cdc:	6013      	str	r3, [r2, #0]
 8014cde:	e013      	b.n	8014d08 <tcp_close_shutdown+0x150>
 8014ce0:	4b24      	ldr	r3, [pc, #144]	@ (8014d74 <tcp_close_shutdown+0x1bc>)
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	60bb      	str	r3, [r7, #8]
 8014ce6:	e00c      	b.n	8014d02 <tcp_close_shutdown+0x14a>
 8014ce8:	68bb      	ldr	r3, [r7, #8]
 8014cea:	68db      	ldr	r3, [r3, #12]
 8014cec:	687a      	ldr	r2, [r7, #4]
 8014cee:	429a      	cmp	r2, r3
 8014cf0:	d104      	bne.n	8014cfc <tcp_close_shutdown+0x144>
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	68da      	ldr	r2, [r3, #12]
 8014cf6:	68bb      	ldr	r3, [r7, #8]
 8014cf8:	60da      	str	r2, [r3, #12]
 8014cfa:	e005      	b.n	8014d08 <tcp_close_shutdown+0x150>
 8014cfc:	68bb      	ldr	r3, [r7, #8]
 8014cfe:	68db      	ldr	r3, [r3, #12]
 8014d00:	60bb      	str	r3, [r7, #8]
 8014d02:	68bb      	ldr	r3, [r7, #8]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d1ef      	bne.n	8014ce8 <tcp_close_shutdown+0x130>
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	2200      	movs	r2, #0
 8014d0c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8014d0e:	6878      	ldr	r0, [r7, #4]
 8014d10:	f7ff fea0 	bl	8014a54 <tcp_free>
      break;
 8014d14:	e01a      	b.n	8014d4c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8014d16:	6878      	ldr	r0, [r7, #4]
 8014d18:	f7ff ff14 	bl	8014b44 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8014d1c:	6879      	ldr	r1, [r7, #4]
 8014d1e:	4816      	ldr	r0, [pc, #88]	@ (8014d78 <tcp_close_shutdown+0x1c0>)
 8014d20:	f001 f8aa 	bl	8015e78 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014d24:	6878      	ldr	r0, [r7, #4]
 8014d26:	f7ff feb1 	bl	8014a8c <tcp_free_listen>
      break;
 8014d2a:	e00f      	b.n	8014d4c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014d2c:	6879      	ldr	r1, [r7, #4]
 8014d2e:	480e      	ldr	r0, [pc, #56]	@ (8014d68 <tcp_close_shutdown+0x1b0>)
 8014d30:	f001 f8a2 	bl	8015e78 <tcp_pcb_remove>
 8014d34:	4b0d      	ldr	r3, [pc, #52]	@ (8014d6c <tcp_close_shutdown+0x1b4>)
 8014d36:	2201      	movs	r2, #1
 8014d38:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8014d3a:	6878      	ldr	r0, [r7, #4]
 8014d3c:	f7ff fe8a 	bl	8014a54 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8014d40:	e004      	b.n	8014d4c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8014d42:	6878      	ldr	r0, [r7, #4]
 8014d44:	f000 f81a 	bl	8014d7c <tcp_close_shutdown_fin>
 8014d48:	4603      	mov	r3, r0
 8014d4a:	e000      	b.n	8014d4e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8014d4c:	2300      	movs	r3, #0
}
 8014d4e:	4618      	mov	r0, r3
 8014d50:	3710      	adds	r7, #16
 8014d52:	46bd      	mov	sp, r7
 8014d54:	bdb0      	pop	{r4, r5, r7, pc}
 8014d56:	bf00      	nop
 8014d58:	0801fdfc 	.word	0x0801fdfc
 8014d5c:	0801fed0 	.word	0x0801fed0
 8014d60:	0801fe40 	.word	0x0801fe40
 8014d64:	0801fef0 	.word	0x0801fef0
 8014d68:	200277bc 	.word	0x200277bc
 8014d6c:	200277c4 	.word	0x200277c4
 8014d70:	200277fc 	.word	0x200277fc
 8014d74:	200277b4 	.word	0x200277b4
 8014d78:	200277b8 	.word	0x200277b8

08014d7c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b084      	sub	sp, #16
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d106      	bne.n	8014d98 <tcp_close_shutdown_fin+0x1c>
 8014d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8014e44 <tcp_close_shutdown_fin+0xc8>)
 8014d8c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8014d90:	492d      	ldr	r1, [pc, #180]	@ (8014e48 <tcp_close_shutdown_fin+0xcc>)
 8014d92:	482e      	ldr	r0, [pc, #184]	@ (8014e4c <tcp_close_shutdown_fin+0xd0>)
 8014d94:	f009 f99e 	bl	801e0d4 <iprintf>

  switch (pcb->state) {
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	7d1b      	ldrb	r3, [r3, #20]
 8014d9c:	2b07      	cmp	r3, #7
 8014d9e:	d020      	beq.n	8014de2 <tcp_close_shutdown_fin+0x66>
 8014da0:	2b07      	cmp	r3, #7
 8014da2:	dc2b      	bgt.n	8014dfc <tcp_close_shutdown_fin+0x80>
 8014da4:	2b03      	cmp	r3, #3
 8014da6:	d002      	beq.n	8014dae <tcp_close_shutdown_fin+0x32>
 8014da8:	2b04      	cmp	r3, #4
 8014daa:	d00d      	beq.n	8014dc8 <tcp_close_shutdown_fin+0x4c>
 8014dac:	e026      	b.n	8014dfc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8014dae:	6878      	ldr	r0, [r7, #4]
 8014db0:	f003 fee2 	bl	8018b78 <tcp_send_fin>
 8014db4:	4603      	mov	r3, r0
 8014db6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d11f      	bne.n	8014e00 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	2205      	movs	r2, #5
 8014dc4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014dc6:	e01b      	b.n	8014e00 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8014dc8:	6878      	ldr	r0, [r7, #4]
 8014dca:	f003 fed5 	bl	8018b78 <tcp_send_fin>
 8014dce:	4603      	mov	r3, r0
 8014dd0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d114      	bne.n	8014e04 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	2205      	movs	r2, #5
 8014dde:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014de0:	e010      	b.n	8014e04 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8014de2:	6878      	ldr	r0, [r7, #4]
 8014de4:	f003 fec8 	bl	8018b78 <tcp_send_fin>
 8014de8:	4603      	mov	r3, r0
 8014dea:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d109      	bne.n	8014e08 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	2209      	movs	r2, #9
 8014df8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014dfa:	e005      	b.n	8014e08 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	e01c      	b.n	8014e3a <tcp_close_shutdown_fin+0xbe>
      break;
 8014e00:	bf00      	nop
 8014e02:	e002      	b.n	8014e0a <tcp_close_shutdown_fin+0x8e>
      break;
 8014e04:	bf00      	nop
 8014e06:	e000      	b.n	8014e0a <tcp_close_shutdown_fin+0x8e>
      break;
 8014e08:	bf00      	nop
  }

  if (err == ERR_OK) {
 8014e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d103      	bne.n	8014e1a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8014e12:	6878      	ldr	r0, [r7, #4]
 8014e14:	f003 ffee 	bl	8018df4 <tcp_output>
 8014e18:	e00d      	b.n	8014e36 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8014e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e22:	d108      	bne.n	8014e36 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	8b5b      	ldrh	r3, [r3, #26]
 8014e28:	f043 0308 	orr.w	r3, r3, #8
 8014e2c:	b29a      	uxth	r2, r3
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8014e32:	2300      	movs	r3, #0
 8014e34:	e001      	b.n	8014e3a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8014e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	3710      	adds	r7, #16
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	bd80      	pop	{r7, pc}
 8014e42:	bf00      	nop
 8014e44:	0801fdfc 	.word	0x0801fdfc
 8014e48:	0801feac 	.word	0x0801feac
 8014e4c:	0801fe40 	.word	0x0801fe40

08014e50 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b082      	sub	sp, #8
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d109      	bne.n	8014e72 <tcp_close+0x22>
 8014e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8014e9c <tcp_close+0x4c>)
 8014e60:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8014e64:	490e      	ldr	r1, [pc, #56]	@ (8014ea0 <tcp_close+0x50>)
 8014e66:	480f      	ldr	r0, [pc, #60]	@ (8014ea4 <tcp_close+0x54>)
 8014e68:	f009 f934 	bl	801e0d4 <iprintf>
 8014e6c:	f06f 030f 	mvn.w	r3, #15
 8014e70:	e00f      	b.n	8014e92 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	7d1b      	ldrb	r3, [r3, #20]
 8014e76:	2b01      	cmp	r3, #1
 8014e78:	d006      	beq.n	8014e88 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	8b5b      	ldrh	r3, [r3, #26]
 8014e7e:	f043 0310 	orr.w	r3, r3, #16
 8014e82:	b29a      	uxth	r2, r3
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8014e88:	2101      	movs	r1, #1
 8014e8a:	6878      	ldr	r0, [r7, #4]
 8014e8c:	f7ff fe94 	bl	8014bb8 <tcp_close_shutdown>
 8014e90:	4603      	mov	r3, r0
}
 8014e92:	4618      	mov	r0, r3
 8014e94:	3708      	adds	r7, #8
 8014e96:	46bd      	mov	sp, r7
 8014e98:	bd80      	pop	{r7, pc}
 8014e9a:	bf00      	nop
 8014e9c:	0801fdfc 	.word	0x0801fdfc
 8014ea0:	0801ff0c 	.word	0x0801ff0c
 8014ea4:	0801fe40 	.word	0x0801fe40

08014ea8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b08e      	sub	sp, #56	@ 0x38
 8014eac:	af04      	add	r7, sp, #16
 8014eae:	6078      	str	r0, [r7, #4]
 8014eb0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d107      	bne.n	8014ec8 <tcp_abandon+0x20>
 8014eb8:	4b52      	ldr	r3, [pc, #328]	@ (8015004 <tcp_abandon+0x15c>)
 8014eba:	f240 223d 	movw	r2, #573	@ 0x23d
 8014ebe:	4952      	ldr	r1, [pc, #328]	@ (8015008 <tcp_abandon+0x160>)
 8014ec0:	4852      	ldr	r0, [pc, #328]	@ (801500c <tcp_abandon+0x164>)
 8014ec2:	f009 f907 	bl	801e0d4 <iprintf>
 8014ec6:	e099      	b.n	8014ffc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	7d1b      	ldrb	r3, [r3, #20]
 8014ecc:	2b01      	cmp	r3, #1
 8014ece:	d106      	bne.n	8014ede <tcp_abandon+0x36>
 8014ed0:	4b4c      	ldr	r3, [pc, #304]	@ (8015004 <tcp_abandon+0x15c>)
 8014ed2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8014ed6:	494e      	ldr	r1, [pc, #312]	@ (8015010 <tcp_abandon+0x168>)
 8014ed8:	484c      	ldr	r0, [pc, #304]	@ (801500c <tcp_abandon+0x164>)
 8014eda:	f009 f8fb 	bl	801e0d4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	7d1b      	ldrb	r3, [r3, #20]
 8014ee2:	2b0a      	cmp	r3, #10
 8014ee4:	d107      	bne.n	8014ef6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8014ee6:	6879      	ldr	r1, [r7, #4]
 8014ee8:	484a      	ldr	r0, [pc, #296]	@ (8015014 <tcp_abandon+0x16c>)
 8014eea:	f000 ffc5 	bl	8015e78 <tcp_pcb_remove>
    tcp_free(pcb);
 8014eee:	6878      	ldr	r0, [r7, #4]
 8014ef0:	f7ff fdb0 	bl	8014a54 <tcp_free>
 8014ef4:	e082      	b.n	8014ffc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8014efa:	2300      	movs	r3, #0
 8014efc:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014f02:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f08:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014f10:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	691b      	ldr	r3, [r3, #16]
 8014f16:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	7d1b      	ldrb	r3, [r3, #20]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d126      	bne.n	8014f6e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	8adb      	ldrh	r3, [r3, #22]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d02e      	beq.n	8014f86 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014f28:	4b3b      	ldr	r3, [pc, #236]	@ (8015018 <tcp_abandon+0x170>)
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	687a      	ldr	r2, [r7, #4]
 8014f2e:	429a      	cmp	r2, r3
 8014f30:	d105      	bne.n	8014f3e <tcp_abandon+0x96>
 8014f32:	4b39      	ldr	r3, [pc, #228]	@ (8015018 <tcp_abandon+0x170>)
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	68db      	ldr	r3, [r3, #12]
 8014f38:	4a37      	ldr	r2, [pc, #220]	@ (8015018 <tcp_abandon+0x170>)
 8014f3a:	6013      	str	r3, [r2, #0]
 8014f3c:	e013      	b.n	8014f66 <tcp_abandon+0xbe>
 8014f3e:	4b36      	ldr	r3, [pc, #216]	@ (8015018 <tcp_abandon+0x170>)
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	61fb      	str	r3, [r7, #28]
 8014f44:	e00c      	b.n	8014f60 <tcp_abandon+0xb8>
 8014f46:	69fb      	ldr	r3, [r7, #28]
 8014f48:	68db      	ldr	r3, [r3, #12]
 8014f4a:	687a      	ldr	r2, [r7, #4]
 8014f4c:	429a      	cmp	r2, r3
 8014f4e:	d104      	bne.n	8014f5a <tcp_abandon+0xb2>
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	68da      	ldr	r2, [r3, #12]
 8014f54:	69fb      	ldr	r3, [r7, #28]
 8014f56:	60da      	str	r2, [r3, #12]
 8014f58:	e005      	b.n	8014f66 <tcp_abandon+0xbe>
 8014f5a:	69fb      	ldr	r3, [r7, #28]
 8014f5c:	68db      	ldr	r3, [r3, #12]
 8014f5e:	61fb      	str	r3, [r7, #28]
 8014f60:	69fb      	ldr	r3, [r7, #28]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d1ef      	bne.n	8014f46 <tcp_abandon+0x9e>
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	2200      	movs	r2, #0
 8014f6a:	60da      	str	r2, [r3, #12]
 8014f6c:	e00b      	b.n	8014f86 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8014f6e:	683b      	ldr	r3, [r7, #0]
 8014f70:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	8adb      	ldrh	r3, [r3, #22]
 8014f76:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014f78:	6879      	ldr	r1, [r7, #4]
 8014f7a:	4828      	ldr	r0, [pc, #160]	@ (801501c <tcp_abandon+0x174>)
 8014f7c:	f000 ff7c 	bl	8015e78 <tcp_pcb_remove>
 8014f80:	4b27      	ldr	r3, [pc, #156]	@ (8015020 <tcp_abandon+0x178>)
 8014f82:	2201      	movs	r2, #1
 8014f84:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d004      	beq.n	8014f98 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014f92:	4618      	mov	r0, r3
 8014f94:	f000 fd1e 	bl	80159d4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d004      	beq.n	8014faa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	f000 fd15 	bl	80159d4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d004      	beq.n	8014fbc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	f000 fd0c 	bl	80159d4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8014fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d00e      	beq.n	8014fe0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8014fc2:	6879      	ldr	r1, [r7, #4]
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	3304      	adds	r3, #4
 8014fc8:	687a      	ldr	r2, [r7, #4]
 8014fca:	8b12      	ldrh	r2, [r2, #24]
 8014fcc:	9202      	str	r2, [sp, #8]
 8014fce:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014fd0:	9201      	str	r2, [sp, #4]
 8014fd2:	9300      	str	r3, [sp, #0]
 8014fd4:	460b      	mov	r3, r1
 8014fd6:	697a      	ldr	r2, [r7, #20]
 8014fd8:	69b9      	ldr	r1, [r7, #24]
 8014fda:	6878      	ldr	r0, [r7, #4]
 8014fdc:	f004 fcbe 	bl	801995c <tcp_rst>
    }
    last_state = pcb->state;
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	7d1b      	ldrb	r3, [r3, #20]
 8014fe4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8014fe6:	6878      	ldr	r0, [r7, #4]
 8014fe8:	f7ff fd34 	bl	8014a54 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8014fec:	693b      	ldr	r3, [r7, #16]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d004      	beq.n	8014ffc <tcp_abandon+0x154>
 8014ff2:	693b      	ldr	r3, [r7, #16]
 8014ff4:	f06f 010c 	mvn.w	r1, #12
 8014ff8:	68f8      	ldr	r0, [r7, #12]
 8014ffa:	4798      	blx	r3
  }
}
 8014ffc:	3728      	adds	r7, #40	@ 0x28
 8014ffe:	46bd      	mov	sp, r7
 8015000:	bd80      	pop	{r7, pc}
 8015002:	bf00      	nop
 8015004:	0801fdfc 	.word	0x0801fdfc
 8015008:	0801ff40 	.word	0x0801ff40
 801500c:	0801fe40 	.word	0x0801fe40
 8015010:	0801ff5c 	.word	0x0801ff5c
 8015014:	200277c0 	.word	0x200277c0
 8015018:	200277b4 	.word	0x200277b4
 801501c:	200277bc 	.word	0x200277bc
 8015020:	200277c4 	.word	0x200277c4

08015024 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015024:	b580      	push	{r7, lr}
 8015026:	b082      	sub	sp, #8
 8015028:	af00      	add	r7, sp, #0
 801502a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801502c:	2101      	movs	r1, #1
 801502e:	6878      	ldr	r0, [r7, #4]
 8015030:	f7ff ff3a 	bl	8014ea8 <tcp_abandon>
}
 8015034:	bf00      	nop
 8015036:	3708      	adds	r7, #8
 8015038:	46bd      	mov	sp, r7
 801503a:	bd80      	pop	{r7, pc}

0801503c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801503c:	b580      	push	{r7, lr}
 801503e:	b084      	sub	sp, #16
 8015040:	af00      	add	r7, sp, #0
 8015042:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d106      	bne.n	8015058 <tcp_update_rcv_ann_wnd+0x1c>
 801504a:	4b25      	ldr	r3, [pc, #148]	@ (80150e0 <tcp_update_rcv_ann_wnd+0xa4>)
 801504c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8015050:	4924      	ldr	r1, [pc, #144]	@ (80150e4 <tcp_update_rcv_ann_wnd+0xa8>)
 8015052:	4825      	ldr	r0, [pc, #148]	@ (80150e8 <tcp_update_rcv_ann_wnd+0xac>)
 8015054:	f009 f83e 	bl	801e0d4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801505c:	687a      	ldr	r2, [r7, #4]
 801505e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8015060:	4413      	add	r3, r2
 8015062:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015068:	687a      	ldr	r2, [r7, #4]
 801506a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 801506c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8015070:	bf28      	it	cs
 8015072:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8015076:	b292      	uxth	r2, r2
 8015078:	4413      	add	r3, r2
 801507a:	68fa      	ldr	r2, [r7, #12]
 801507c:	1ad3      	subs	r3, r2, r3
 801507e:	2b00      	cmp	r3, #0
 8015080:	db08      	blt.n	8015094 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801508e:	68fa      	ldr	r2, [r7, #12]
 8015090:	1ad3      	subs	r3, r2, r3
 8015092:	e020      	b.n	80150d6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801509c:	1ad3      	subs	r3, r2, r3
 801509e:	2b00      	cmp	r3, #0
 80150a0:	dd03      	ble.n	80150aa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	2200      	movs	r2, #0
 80150a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80150a8:	e014      	b.n	80150d4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150b2:	1ad3      	subs	r3, r2, r3
 80150b4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80150b6:	68bb      	ldr	r3, [r7, #8]
 80150b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80150bc:	d306      	bcc.n	80150cc <tcp_update_rcv_ann_wnd+0x90>
 80150be:	4b08      	ldr	r3, [pc, #32]	@ (80150e0 <tcp_update_rcv_ann_wnd+0xa4>)
 80150c0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80150c4:	4909      	ldr	r1, [pc, #36]	@ (80150ec <tcp_update_rcv_ann_wnd+0xb0>)
 80150c6:	4808      	ldr	r0, [pc, #32]	@ (80150e8 <tcp_update_rcv_ann_wnd+0xac>)
 80150c8:	f009 f804 	bl	801e0d4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80150cc:	68bb      	ldr	r3, [r7, #8]
 80150ce:	b29a      	uxth	r2, r3
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80150d4:	2300      	movs	r3, #0
  }
}
 80150d6:	4618      	mov	r0, r3
 80150d8:	3710      	adds	r7, #16
 80150da:	46bd      	mov	sp, r7
 80150dc:	bd80      	pop	{r7, pc}
 80150de:	bf00      	nop
 80150e0:	0801fdfc 	.word	0x0801fdfc
 80150e4:	08020058 	.word	0x08020058
 80150e8:	0801fe40 	.word	0x0801fe40
 80150ec:	0802007c 	.word	0x0802007c

080150f0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b084      	sub	sp, #16
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
 80150f8:	460b      	mov	r3, r1
 80150fa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d107      	bne.n	8015112 <tcp_recved+0x22>
 8015102:	4b1f      	ldr	r3, [pc, #124]	@ (8015180 <tcp_recved+0x90>)
 8015104:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8015108:	491e      	ldr	r1, [pc, #120]	@ (8015184 <tcp_recved+0x94>)
 801510a:	481f      	ldr	r0, [pc, #124]	@ (8015188 <tcp_recved+0x98>)
 801510c:	f008 ffe2 	bl	801e0d4 <iprintf>
 8015110:	e032      	b.n	8015178 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	7d1b      	ldrb	r3, [r3, #20]
 8015116:	2b01      	cmp	r3, #1
 8015118:	d106      	bne.n	8015128 <tcp_recved+0x38>
 801511a:	4b19      	ldr	r3, [pc, #100]	@ (8015180 <tcp_recved+0x90>)
 801511c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8015120:	491a      	ldr	r1, [pc, #104]	@ (801518c <tcp_recved+0x9c>)
 8015122:	4819      	ldr	r0, [pc, #100]	@ (8015188 <tcp_recved+0x98>)
 8015124:	f008 ffd6 	bl	801e0d4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801512c:	887b      	ldrh	r3, [r7, #2]
 801512e:	4413      	add	r3, r2
 8015130:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8015132:	89fb      	ldrh	r3, [r7, #14]
 8015134:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8015138:	d804      	bhi.n	8015144 <tcp_recved+0x54>
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801513e:	89fa      	ldrh	r2, [r7, #14]
 8015140:	429a      	cmp	r2, r3
 8015142:	d204      	bcs.n	801514e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801514a:	851a      	strh	r2, [r3, #40]	@ 0x28
 801514c:	e002      	b.n	8015154 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	89fa      	ldrh	r2, [r7, #14]
 8015152:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8015154:	6878      	ldr	r0, [r7, #4]
 8015156:	f7ff ff71 	bl	801503c <tcp_update_rcv_ann_wnd>
 801515a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801515c:	68bb      	ldr	r3, [r7, #8]
 801515e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8015162:	d309      	bcc.n	8015178 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	8b5b      	ldrh	r3, [r3, #26]
 8015168:	f043 0302 	orr.w	r3, r3, #2
 801516c:	b29a      	uxth	r2, r3
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015172:	6878      	ldr	r0, [r7, #4]
 8015174:	f003 fe3e 	bl	8018df4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8015178:	3710      	adds	r7, #16
 801517a:	46bd      	mov	sp, r7
 801517c:	bd80      	pop	{r7, pc}
 801517e:	bf00      	nop
 8015180:	0801fdfc 	.word	0x0801fdfc
 8015184:	08020098 	.word	0x08020098
 8015188:	0801fe40 	.word	0x0801fe40
 801518c:	080200b0 	.word	0x080200b0

08015190 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8015190:	b5b0      	push	{r4, r5, r7, lr}
 8015192:	b090      	sub	sp, #64	@ 0x40
 8015194:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8015196:	2300      	movs	r3, #0
 8015198:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 801519c:	4b95      	ldr	r3, [pc, #596]	@ (80153f4 <tcp_slowtmr+0x264>)
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	3301      	adds	r3, #1
 80151a2:	4a94      	ldr	r2, [pc, #592]	@ (80153f4 <tcp_slowtmr+0x264>)
 80151a4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80151a6:	4b94      	ldr	r3, [pc, #592]	@ (80153f8 <tcp_slowtmr+0x268>)
 80151a8:	781b      	ldrb	r3, [r3, #0]
 80151aa:	3301      	adds	r3, #1
 80151ac:	b2da      	uxtb	r2, r3
 80151ae:	4b92      	ldr	r3, [pc, #584]	@ (80153f8 <tcp_slowtmr+0x268>)
 80151b0:	701a      	strb	r2, [r3, #0]
 80151b2:	e000      	b.n	80151b6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80151b4:	bf00      	nop
  prev = NULL;
 80151b6:	2300      	movs	r3, #0
 80151b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80151ba:	4b90      	ldr	r3, [pc, #576]	@ (80153fc <tcp_slowtmr+0x26c>)
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80151c0:	e29d      	b.n	80156fe <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80151c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151c4:	7d1b      	ldrb	r3, [r3, #20]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d106      	bne.n	80151d8 <tcp_slowtmr+0x48>
 80151ca:	4b8d      	ldr	r3, [pc, #564]	@ (8015400 <tcp_slowtmr+0x270>)
 80151cc:	f240 42be 	movw	r2, #1214	@ 0x4be
 80151d0:	498c      	ldr	r1, [pc, #560]	@ (8015404 <tcp_slowtmr+0x274>)
 80151d2:	488d      	ldr	r0, [pc, #564]	@ (8015408 <tcp_slowtmr+0x278>)
 80151d4:	f008 ff7e 	bl	801e0d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80151d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151da:	7d1b      	ldrb	r3, [r3, #20]
 80151dc:	2b01      	cmp	r3, #1
 80151de:	d106      	bne.n	80151ee <tcp_slowtmr+0x5e>
 80151e0:	4b87      	ldr	r3, [pc, #540]	@ (8015400 <tcp_slowtmr+0x270>)
 80151e2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80151e6:	4989      	ldr	r1, [pc, #548]	@ (801540c <tcp_slowtmr+0x27c>)
 80151e8:	4887      	ldr	r0, [pc, #540]	@ (8015408 <tcp_slowtmr+0x278>)
 80151ea:	f008 ff73 	bl	801e0d4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80151ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151f0:	7d1b      	ldrb	r3, [r3, #20]
 80151f2:	2b0a      	cmp	r3, #10
 80151f4:	d106      	bne.n	8015204 <tcp_slowtmr+0x74>
 80151f6:	4b82      	ldr	r3, [pc, #520]	@ (8015400 <tcp_slowtmr+0x270>)
 80151f8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80151fc:	4984      	ldr	r1, [pc, #528]	@ (8015410 <tcp_slowtmr+0x280>)
 80151fe:	4882      	ldr	r0, [pc, #520]	@ (8015408 <tcp_slowtmr+0x278>)
 8015200:	f008 ff68 	bl	801e0d4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015206:	7f9a      	ldrb	r2, [r3, #30]
 8015208:	4b7b      	ldr	r3, [pc, #492]	@ (80153f8 <tcp_slowtmr+0x268>)
 801520a:	781b      	ldrb	r3, [r3, #0]
 801520c:	429a      	cmp	r2, r3
 801520e:	d105      	bne.n	801521c <tcp_slowtmr+0x8c>
      prev = pcb;
 8015210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015212:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015216:	68db      	ldr	r3, [r3, #12]
 8015218:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801521a:	e270      	b.n	80156fe <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801521c:	4b76      	ldr	r3, [pc, #472]	@ (80153f8 <tcp_slowtmr+0x268>)
 801521e:	781a      	ldrb	r2, [r3, #0]
 8015220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015222:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8015224:	2300      	movs	r3, #0
 8015226:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801522a:	2300      	movs	r3, #0
 801522c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015232:	7d1b      	ldrb	r3, [r3, #20]
 8015234:	2b02      	cmp	r3, #2
 8015236:	d10a      	bne.n	801524e <tcp_slowtmr+0xbe>
 8015238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801523a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801523e:	2b05      	cmp	r3, #5
 8015240:	d905      	bls.n	801524e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8015242:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015246:	3301      	adds	r3, #1
 8015248:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801524c:	e11e      	b.n	801548c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801524e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015250:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015254:	2b0b      	cmp	r3, #11
 8015256:	d905      	bls.n	8015264 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8015258:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801525c:	3301      	adds	r3, #1
 801525e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015262:	e113      	b.n	801548c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8015264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015266:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801526a:	2b00      	cmp	r3, #0
 801526c:	d075      	beq.n	801535a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801526e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015272:	2b00      	cmp	r3, #0
 8015274:	d006      	beq.n	8015284 <tcp_slowtmr+0xf4>
 8015276:	4b62      	ldr	r3, [pc, #392]	@ (8015400 <tcp_slowtmr+0x270>)
 8015278:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 801527c:	4965      	ldr	r1, [pc, #404]	@ (8015414 <tcp_slowtmr+0x284>)
 801527e:	4862      	ldr	r0, [pc, #392]	@ (8015408 <tcp_slowtmr+0x278>)
 8015280:	f008 ff28 	bl	801e0d4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8015284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015286:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015288:	2b00      	cmp	r3, #0
 801528a:	d106      	bne.n	801529a <tcp_slowtmr+0x10a>
 801528c:	4b5c      	ldr	r3, [pc, #368]	@ (8015400 <tcp_slowtmr+0x270>)
 801528e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8015292:	4961      	ldr	r1, [pc, #388]	@ (8015418 <tcp_slowtmr+0x288>)
 8015294:	485c      	ldr	r0, [pc, #368]	@ (8015408 <tcp_slowtmr+0x278>)
 8015296:	f008 ff1d 	bl	801e0d4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801529a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801529c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80152a0:	2b0b      	cmp	r3, #11
 80152a2:	d905      	bls.n	80152b0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80152a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80152a8:	3301      	adds	r3, #1
 80152aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80152ae:	e0ed      	b.n	801548c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80152b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152b2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80152b6:	3b01      	subs	r3, #1
 80152b8:	4a58      	ldr	r2, [pc, #352]	@ (801541c <tcp_slowtmr+0x28c>)
 80152ba:	5cd3      	ldrb	r3, [r2, r3]
 80152bc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80152be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152c0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80152c4:	7c7a      	ldrb	r2, [r7, #17]
 80152c6:	429a      	cmp	r2, r3
 80152c8:	d907      	bls.n	80152da <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80152ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152cc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80152d0:	3301      	adds	r3, #1
 80152d2:	b2da      	uxtb	r2, r3
 80152d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152d6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80152da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152dc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80152e0:	7c7a      	ldrb	r2, [r7, #17]
 80152e2:	429a      	cmp	r2, r3
 80152e4:	f200 80d2 	bhi.w	801548c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80152e8:	2301      	movs	r3, #1
 80152ea:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80152ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d108      	bne.n	8015308 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80152f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80152f8:	f004 fc24 	bl	8019b44 <tcp_zero_window_probe>
 80152fc:	4603      	mov	r3, r0
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d014      	beq.n	801532c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8015302:	2300      	movs	r3, #0
 8015304:	623b      	str	r3, [r7, #32]
 8015306:	e011      	b.n	801532c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8015308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801530a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801530e:	4619      	mov	r1, r3
 8015310:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015312:	f003 fae9 	bl	80188e8 <tcp_split_unsent_seg>
 8015316:	4603      	mov	r3, r0
 8015318:	2b00      	cmp	r3, #0
 801531a:	d107      	bne.n	801532c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801531c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801531e:	f003 fd69 	bl	8018df4 <tcp_output>
 8015322:	4603      	mov	r3, r0
 8015324:	2b00      	cmp	r3, #0
 8015326:	d101      	bne.n	801532c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8015328:	2300      	movs	r3, #0
 801532a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801532c:	6a3b      	ldr	r3, [r7, #32]
 801532e:	2b00      	cmp	r3, #0
 8015330:	f000 80ac 	beq.w	801548c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8015334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015336:	2200      	movs	r2, #0
 8015338:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801533c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801533e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015342:	2b06      	cmp	r3, #6
 8015344:	f200 80a2 	bhi.w	801548c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8015348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801534a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801534e:	3301      	adds	r3, #1
 8015350:	b2da      	uxtb	r2, r3
 8015352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015354:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8015358:	e098      	b.n	801548c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801535a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801535c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015360:	2b00      	cmp	r3, #0
 8015362:	db0f      	blt.n	8015384 <tcp_slowtmr+0x1f4>
 8015364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015366:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801536a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801536e:	4293      	cmp	r3, r2
 8015370:	d008      	beq.n	8015384 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8015372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015374:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015378:	b29b      	uxth	r3, r3
 801537a:	3301      	adds	r3, #1
 801537c:	b29b      	uxth	r3, r3
 801537e:	b21a      	sxth	r2, r3
 8015380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015382:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8015384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015386:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801538a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801538c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8015390:	429a      	cmp	r2, r3
 8015392:	db7b      	blt.n	801548c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8015394:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015396:	f004 f821 	bl	80193dc <tcp_rexmit_rto_prepare>
 801539a:	4603      	mov	r3, r0
 801539c:	2b00      	cmp	r3, #0
 801539e:	d007      	beq.n	80153b0 <tcp_slowtmr+0x220>
 80153a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d171      	bne.n	801548c <tcp_slowtmr+0x2fc>
 80153a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d06d      	beq.n	801548c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80153b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153b2:	7d1b      	ldrb	r3, [r3, #20]
 80153b4:	2b02      	cmp	r3, #2
 80153b6:	d03a      	beq.n	801542e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80153b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80153be:	2b0c      	cmp	r3, #12
 80153c0:	bf28      	it	cs
 80153c2:	230c      	movcs	r3, #12
 80153c4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80153c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80153cc:	10db      	asrs	r3, r3, #3
 80153ce:	b21b      	sxth	r3, r3
 80153d0:	461a      	mov	r2, r3
 80153d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153d4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80153d8:	4413      	add	r3, r2
 80153da:	7efa      	ldrb	r2, [r7, #27]
 80153dc:	4910      	ldr	r1, [pc, #64]	@ (8015420 <tcp_slowtmr+0x290>)
 80153de:	5c8a      	ldrb	r2, [r1, r2]
 80153e0:	4093      	lsls	r3, r2
 80153e2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80153e4:	697b      	ldr	r3, [r7, #20]
 80153e6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80153ea:	4293      	cmp	r3, r2
 80153ec:	dc1a      	bgt.n	8015424 <tcp_slowtmr+0x294>
 80153ee:	697b      	ldr	r3, [r7, #20]
 80153f0:	b21a      	sxth	r2, r3
 80153f2:	e019      	b.n	8015428 <tcp_slowtmr+0x298>
 80153f4:	200277b0 	.word	0x200277b0
 80153f8:	200277c6 	.word	0x200277c6
 80153fc:	200277bc 	.word	0x200277bc
 8015400:	0801fdfc 	.word	0x0801fdfc
 8015404:	08020140 	.word	0x08020140
 8015408:	0801fe40 	.word	0x0801fe40
 801540c:	0802016c 	.word	0x0802016c
 8015410:	08020198 	.word	0x08020198
 8015414:	080201c8 	.word	0x080201c8
 8015418:	080201fc 	.word	0x080201fc
 801541c:	08022300 	.word	0x08022300
 8015420:	080222f0 	.word	0x080222f0
 8015424:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801542a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801542e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015430:	2200      	movs	r2, #0
 8015432:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015436:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801543a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801543c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015440:	4293      	cmp	r3, r2
 8015442:	bf28      	it	cs
 8015444:	4613      	movcs	r3, r2
 8015446:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015448:	8a7b      	ldrh	r3, [r7, #18]
 801544a:	085b      	lsrs	r3, r3, #1
 801544c:	b29a      	uxth	r2, r3
 801544e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015450:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015456:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801545a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801545c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801545e:	005b      	lsls	r3, r3, #1
 8015460:	b29b      	uxth	r3, r3
 8015462:	429a      	cmp	r2, r3
 8015464:	d206      	bcs.n	8015474 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8015466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015468:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801546a:	005b      	lsls	r3, r3, #1
 801546c:	b29a      	uxth	r2, r3
 801546e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015470:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8015474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015476:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8015478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801547a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801547e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015480:	2200      	movs	r2, #0
 8015482:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8015486:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015488:	f004 f818 	bl	80194bc <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 801548c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801548e:	7d1b      	ldrb	r3, [r3, #20]
 8015490:	2b06      	cmp	r3, #6
 8015492:	d111      	bne.n	80154b8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8015494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015496:	8b5b      	ldrh	r3, [r3, #26]
 8015498:	f003 0310 	and.w	r3, r3, #16
 801549c:	2b00      	cmp	r3, #0
 801549e:	d00b      	beq.n	80154b8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80154a0:	4b9c      	ldr	r3, [pc, #624]	@ (8015714 <tcp_slowtmr+0x584>)
 80154a2:	681a      	ldr	r2, [r3, #0]
 80154a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154a6:	6a1b      	ldr	r3, [r3, #32]
 80154a8:	1ad3      	subs	r3, r2, r3
 80154aa:	2b28      	cmp	r3, #40	@ 0x28
 80154ac:	d904      	bls.n	80154b8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80154ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80154b2:	3301      	adds	r3, #1
 80154b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80154b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154ba:	7a5b      	ldrb	r3, [r3, #9]
 80154bc:	f003 0308 	and.w	r3, r3, #8
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d04a      	beq.n	801555a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80154c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154c6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80154c8:	2b04      	cmp	r3, #4
 80154ca:	d003      	beq.n	80154d4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80154cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154ce:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80154d0:	2b07      	cmp	r3, #7
 80154d2:	d142      	bne.n	801555a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80154d4:	4b8f      	ldr	r3, [pc, #572]	@ (8015714 <tcp_slowtmr+0x584>)
 80154d6:	681a      	ldr	r2, [r3, #0]
 80154d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154da:	6a1b      	ldr	r3, [r3, #32]
 80154dc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80154de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154e0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80154e4:	4b8c      	ldr	r3, [pc, #560]	@ (8015718 <tcp_slowtmr+0x588>)
 80154e6:	440b      	add	r3, r1
 80154e8:	498c      	ldr	r1, [pc, #560]	@ (801571c <tcp_slowtmr+0x58c>)
 80154ea:	fba1 1303 	umull	r1, r3, r1, r3
 80154ee:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80154f0:	429a      	cmp	r2, r3
 80154f2:	d90a      	bls.n	801550a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 80154f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80154f8:	3301      	adds	r3, #1
 80154fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80154fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015502:	3301      	adds	r3, #1
 8015504:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8015508:	e027      	b.n	801555a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801550a:	4b82      	ldr	r3, [pc, #520]	@ (8015714 <tcp_slowtmr+0x584>)
 801550c:	681a      	ldr	r2, [r3, #0]
 801550e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015510:	6a1b      	ldr	r3, [r3, #32]
 8015512:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8015514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015516:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801551a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801551c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8015520:	4618      	mov	r0, r3
 8015522:	4b7f      	ldr	r3, [pc, #508]	@ (8015720 <tcp_slowtmr+0x590>)
 8015524:	fb00 f303 	mul.w	r3, r0, r3
 8015528:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801552a:	497c      	ldr	r1, [pc, #496]	@ (801571c <tcp_slowtmr+0x58c>)
 801552c:	fba1 1303 	umull	r1, r3, r1, r3
 8015530:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015532:	429a      	cmp	r2, r3
 8015534:	d911      	bls.n	801555a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8015536:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015538:	f004 fac4 	bl	8019ac4 <tcp_keepalive>
 801553c:	4603      	mov	r3, r0
 801553e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8015542:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8015546:	2b00      	cmp	r3, #0
 8015548:	d107      	bne.n	801555a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801554a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801554c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8015550:	3301      	adds	r3, #1
 8015552:	b2da      	uxtb	r2, r3
 8015554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015556:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801555a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801555c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801555e:	2b00      	cmp	r3, #0
 8015560:	d011      	beq.n	8015586 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8015562:	4b6c      	ldr	r3, [pc, #432]	@ (8015714 <tcp_slowtmr+0x584>)
 8015564:	681a      	ldr	r2, [r3, #0]
 8015566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015568:	6a1b      	ldr	r3, [r3, #32]
 801556a:	1ad2      	subs	r2, r2, r3
 801556c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801556e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8015572:	4619      	mov	r1, r3
 8015574:	460b      	mov	r3, r1
 8015576:	005b      	lsls	r3, r3, #1
 8015578:	440b      	add	r3, r1
 801557a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801557c:	429a      	cmp	r2, r3
 801557e:	d302      	bcc.n	8015586 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8015580:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015582:	f000 fddd 	bl	8016140 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8015586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015588:	7d1b      	ldrb	r3, [r3, #20]
 801558a:	2b03      	cmp	r3, #3
 801558c:	d10b      	bne.n	80155a6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801558e:	4b61      	ldr	r3, [pc, #388]	@ (8015714 <tcp_slowtmr+0x584>)
 8015590:	681a      	ldr	r2, [r3, #0]
 8015592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015594:	6a1b      	ldr	r3, [r3, #32]
 8015596:	1ad3      	subs	r3, r2, r3
 8015598:	2b28      	cmp	r3, #40	@ 0x28
 801559a:	d904      	bls.n	80155a6 <tcp_slowtmr+0x416>
        ++pcb_remove;
 801559c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80155a0:	3301      	adds	r3, #1
 80155a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80155a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155a8:	7d1b      	ldrb	r3, [r3, #20]
 80155aa:	2b09      	cmp	r3, #9
 80155ac:	d10b      	bne.n	80155c6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80155ae:	4b59      	ldr	r3, [pc, #356]	@ (8015714 <tcp_slowtmr+0x584>)
 80155b0:	681a      	ldr	r2, [r3, #0]
 80155b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155b4:	6a1b      	ldr	r3, [r3, #32]
 80155b6:	1ad3      	subs	r3, r2, r3
 80155b8:	2bf0      	cmp	r3, #240	@ 0xf0
 80155ba:	d904      	bls.n	80155c6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80155bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80155c0:	3301      	adds	r3, #1
 80155c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80155c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d060      	beq.n	8015690 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80155ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80155d4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80155d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80155d8:	f000 fbfe 	bl	8015dd8 <tcp_pcb_purge>
      if (prev != NULL) {
 80155dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d010      	beq.n	8015604 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80155e2:	4b50      	ldr	r3, [pc, #320]	@ (8015724 <tcp_slowtmr+0x594>)
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80155e8:	429a      	cmp	r2, r3
 80155ea:	d106      	bne.n	80155fa <tcp_slowtmr+0x46a>
 80155ec:	4b4e      	ldr	r3, [pc, #312]	@ (8015728 <tcp_slowtmr+0x598>)
 80155ee:	f240 526d 	movw	r2, #1389	@ 0x56d
 80155f2:	494e      	ldr	r1, [pc, #312]	@ (801572c <tcp_slowtmr+0x59c>)
 80155f4:	484e      	ldr	r0, [pc, #312]	@ (8015730 <tcp_slowtmr+0x5a0>)
 80155f6:	f008 fd6d 	bl	801e0d4 <iprintf>
        prev->next = pcb->next;
 80155fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155fc:	68da      	ldr	r2, [r3, #12]
 80155fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015600:	60da      	str	r2, [r3, #12]
 8015602:	e00f      	b.n	8015624 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8015604:	4b47      	ldr	r3, [pc, #284]	@ (8015724 <tcp_slowtmr+0x594>)
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801560a:	429a      	cmp	r2, r3
 801560c:	d006      	beq.n	801561c <tcp_slowtmr+0x48c>
 801560e:	4b46      	ldr	r3, [pc, #280]	@ (8015728 <tcp_slowtmr+0x598>)
 8015610:	f240 5271 	movw	r2, #1393	@ 0x571
 8015614:	4947      	ldr	r1, [pc, #284]	@ (8015734 <tcp_slowtmr+0x5a4>)
 8015616:	4846      	ldr	r0, [pc, #280]	@ (8015730 <tcp_slowtmr+0x5a0>)
 8015618:	f008 fd5c 	bl	801e0d4 <iprintf>
        tcp_active_pcbs = pcb->next;
 801561c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801561e:	68db      	ldr	r3, [r3, #12]
 8015620:	4a40      	ldr	r2, [pc, #256]	@ (8015724 <tcp_slowtmr+0x594>)
 8015622:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8015624:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015628:	2b00      	cmp	r3, #0
 801562a:	d013      	beq.n	8015654 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801562c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801562e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8015630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015632:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015634:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8015636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015638:	3304      	adds	r3, #4
 801563a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801563c:	8ad2      	ldrh	r2, [r2, #22]
 801563e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015640:	8b09      	ldrh	r1, [r1, #24]
 8015642:	9102      	str	r1, [sp, #8]
 8015644:	9201      	str	r2, [sp, #4]
 8015646:	9300      	str	r3, [sp, #0]
 8015648:	462b      	mov	r3, r5
 801564a:	4622      	mov	r2, r4
 801564c:	4601      	mov	r1, r0
 801564e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015650:	f004 f984 	bl	801995c <tcp_rst>
      err_arg = pcb->callback_arg;
 8015654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015656:	691b      	ldr	r3, [r3, #16]
 8015658:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801565a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801565c:	7d1b      	ldrb	r3, [r3, #20]
 801565e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8015660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015662:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8015664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015666:	68db      	ldr	r3, [r3, #12]
 8015668:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801566a:	6838      	ldr	r0, [r7, #0]
 801566c:	f7ff f9f2 	bl	8014a54 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8015670:	4b31      	ldr	r3, [pc, #196]	@ (8015738 <tcp_slowtmr+0x5a8>)
 8015672:	2200      	movs	r2, #0
 8015674:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d004      	beq.n	8015686 <tcp_slowtmr+0x4f6>
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	f06f 010c 	mvn.w	r1, #12
 8015682:	68b8      	ldr	r0, [r7, #8]
 8015684:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8015686:	4b2c      	ldr	r3, [pc, #176]	@ (8015738 <tcp_slowtmr+0x5a8>)
 8015688:	781b      	ldrb	r3, [r3, #0]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d037      	beq.n	80156fe <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801568e:	e592      	b.n	80151b6 <tcp_slowtmr+0x26>
      prev = pcb;
 8015690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015692:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015696:	68db      	ldr	r3, [r3, #12]
 8015698:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801569a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801569c:	7f1b      	ldrb	r3, [r3, #28]
 801569e:	3301      	adds	r3, #1
 80156a0:	b2da      	uxtb	r2, r3
 80156a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156a4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80156a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156a8:	7f1a      	ldrb	r2, [r3, #28]
 80156aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156ac:	7f5b      	ldrb	r3, [r3, #29]
 80156ae:	429a      	cmp	r2, r3
 80156b0:	d325      	bcc.n	80156fe <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80156b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156b4:	2200      	movs	r2, #0
 80156b6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80156b8:	4b1f      	ldr	r3, [pc, #124]	@ (8015738 <tcp_slowtmr+0x5a8>)
 80156ba:	2200      	movs	r2, #0
 80156bc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80156be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d00b      	beq.n	80156e0 <tcp_slowtmr+0x550>
 80156c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80156ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80156d0:	6912      	ldr	r2, [r2, #16]
 80156d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80156d4:	4610      	mov	r0, r2
 80156d6:	4798      	blx	r3
 80156d8:	4603      	mov	r3, r0
 80156da:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80156de:	e002      	b.n	80156e6 <tcp_slowtmr+0x556>
 80156e0:	2300      	movs	r3, #0
 80156e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80156e6:	4b14      	ldr	r3, [pc, #80]	@ (8015738 <tcp_slowtmr+0x5a8>)
 80156e8:	781b      	ldrb	r3, [r3, #0]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	f47f ad62 	bne.w	80151b4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80156f0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d102      	bne.n	80156fe <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80156f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80156fa:	f003 fb7b 	bl	8018df4 <tcp_output>
  while (pcb != NULL) {
 80156fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015700:	2b00      	cmp	r3, #0
 8015702:	f47f ad5e 	bne.w	80151c2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8015706:	2300      	movs	r3, #0
 8015708:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801570a:	4b0c      	ldr	r3, [pc, #48]	@ (801573c <tcp_slowtmr+0x5ac>)
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015710:	e069      	b.n	80157e6 <tcp_slowtmr+0x656>
 8015712:	bf00      	nop
 8015714:	200277b0 	.word	0x200277b0
 8015718:	000a4cb8 	.word	0x000a4cb8
 801571c:	10624dd3 	.word	0x10624dd3
 8015720:	000124f8 	.word	0x000124f8
 8015724:	200277bc 	.word	0x200277bc
 8015728:	0801fdfc 	.word	0x0801fdfc
 801572c:	08020234 	.word	0x08020234
 8015730:	0801fe40 	.word	0x0801fe40
 8015734:	08020260 	.word	0x08020260
 8015738:	200277c4 	.word	0x200277c4
 801573c:	200277c0 	.word	0x200277c0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015742:	7d1b      	ldrb	r3, [r3, #20]
 8015744:	2b0a      	cmp	r3, #10
 8015746:	d006      	beq.n	8015756 <tcp_slowtmr+0x5c6>
 8015748:	4b2b      	ldr	r3, [pc, #172]	@ (80157f8 <tcp_slowtmr+0x668>)
 801574a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801574e:	492b      	ldr	r1, [pc, #172]	@ (80157fc <tcp_slowtmr+0x66c>)
 8015750:	482b      	ldr	r0, [pc, #172]	@ (8015800 <tcp_slowtmr+0x670>)
 8015752:	f008 fcbf 	bl	801e0d4 <iprintf>
    pcb_remove = 0;
 8015756:	2300      	movs	r3, #0
 8015758:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801575c:	4b29      	ldr	r3, [pc, #164]	@ (8015804 <tcp_slowtmr+0x674>)
 801575e:	681a      	ldr	r2, [r3, #0]
 8015760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015762:	6a1b      	ldr	r3, [r3, #32]
 8015764:	1ad3      	subs	r3, r2, r3
 8015766:	2bf0      	cmp	r3, #240	@ 0xf0
 8015768:	d904      	bls.n	8015774 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801576a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801576e:	3301      	adds	r3, #1
 8015770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015774:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015778:	2b00      	cmp	r3, #0
 801577a:	d02f      	beq.n	80157dc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801577c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801577e:	f000 fb2b 	bl	8015dd8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8015782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015784:	2b00      	cmp	r3, #0
 8015786:	d010      	beq.n	80157aa <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015788:	4b1f      	ldr	r3, [pc, #124]	@ (8015808 <tcp_slowtmr+0x678>)
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801578e:	429a      	cmp	r2, r3
 8015790:	d106      	bne.n	80157a0 <tcp_slowtmr+0x610>
 8015792:	4b19      	ldr	r3, [pc, #100]	@ (80157f8 <tcp_slowtmr+0x668>)
 8015794:	f240 52af 	movw	r2, #1455	@ 0x5af
 8015798:	491c      	ldr	r1, [pc, #112]	@ (801580c <tcp_slowtmr+0x67c>)
 801579a:	4819      	ldr	r0, [pc, #100]	@ (8015800 <tcp_slowtmr+0x670>)
 801579c:	f008 fc9a 	bl	801e0d4 <iprintf>
        prev->next = pcb->next;
 80157a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157a2:	68da      	ldr	r2, [r3, #12]
 80157a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157a6:	60da      	str	r2, [r3, #12]
 80157a8:	e00f      	b.n	80157ca <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80157aa:	4b17      	ldr	r3, [pc, #92]	@ (8015808 <tcp_slowtmr+0x678>)
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80157b0:	429a      	cmp	r2, r3
 80157b2:	d006      	beq.n	80157c2 <tcp_slowtmr+0x632>
 80157b4:	4b10      	ldr	r3, [pc, #64]	@ (80157f8 <tcp_slowtmr+0x668>)
 80157b6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80157ba:	4915      	ldr	r1, [pc, #84]	@ (8015810 <tcp_slowtmr+0x680>)
 80157bc:	4810      	ldr	r0, [pc, #64]	@ (8015800 <tcp_slowtmr+0x670>)
 80157be:	f008 fc89 	bl	801e0d4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80157c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157c4:	68db      	ldr	r3, [r3, #12]
 80157c6:	4a10      	ldr	r2, [pc, #64]	@ (8015808 <tcp_slowtmr+0x678>)
 80157c8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80157ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157cc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80157ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157d0:	68db      	ldr	r3, [r3, #12]
 80157d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80157d4:	69f8      	ldr	r0, [r7, #28]
 80157d6:	f7ff f93d 	bl	8014a54 <tcp_free>
 80157da:	e004      	b.n	80157e6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80157dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157de:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80157e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157e2:	68db      	ldr	r3, [r3, #12]
 80157e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80157e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d1a9      	bne.n	8015740 <tcp_slowtmr+0x5b0>
    }
  }
}
 80157ec:	bf00      	nop
 80157ee:	bf00      	nop
 80157f0:	3730      	adds	r7, #48	@ 0x30
 80157f2:	46bd      	mov	sp, r7
 80157f4:	bdb0      	pop	{r4, r5, r7, pc}
 80157f6:	bf00      	nop
 80157f8:	0801fdfc 	.word	0x0801fdfc
 80157fc:	0802028c 	.word	0x0802028c
 8015800:	0801fe40 	.word	0x0801fe40
 8015804:	200277b0 	.word	0x200277b0
 8015808:	200277c0 	.word	0x200277c0
 801580c:	080202bc 	.word	0x080202bc
 8015810:	080202e4 	.word	0x080202e4

08015814 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8015814:	b580      	push	{r7, lr}
 8015816:	b082      	sub	sp, #8
 8015818:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801581a:	4b2d      	ldr	r3, [pc, #180]	@ (80158d0 <tcp_fasttmr+0xbc>)
 801581c:	781b      	ldrb	r3, [r3, #0]
 801581e:	3301      	adds	r3, #1
 8015820:	b2da      	uxtb	r2, r3
 8015822:	4b2b      	ldr	r3, [pc, #172]	@ (80158d0 <tcp_fasttmr+0xbc>)
 8015824:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8015826:	4b2b      	ldr	r3, [pc, #172]	@ (80158d4 <tcp_fasttmr+0xc0>)
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801582c:	e048      	b.n	80158c0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	7f9a      	ldrb	r2, [r3, #30]
 8015832:	4b27      	ldr	r3, [pc, #156]	@ (80158d0 <tcp_fasttmr+0xbc>)
 8015834:	781b      	ldrb	r3, [r3, #0]
 8015836:	429a      	cmp	r2, r3
 8015838:	d03f      	beq.n	80158ba <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801583a:	4b25      	ldr	r3, [pc, #148]	@ (80158d0 <tcp_fasttmr+0xbc>)
 801583c:	781a      	ldrb	r2, [r3, #0]
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	8b5b      	ldrh	r3, [r3, #26]
 8015846:	f003 0301 	and.w	r3, r3, #1
 801584a:	2b00      	cmp	r3, #0
 801584c:	d010      	beq.n	8015870 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	8b5b      	ldrh	r3, [r3, #26]
 8015852:	f043 0302 	orr.w	r3, r3, #2
 8015856:	b29a      	uxth	r2, r3
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801585c:	6878      	ldr	r0, [r7, #4]
 801585e:	f003 fac9 	bl	8018df4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	8b5b      	ldrh	r3, [r3, #26]
 8015866:	f023 0303 	bic.w	r3, r3, #3
 801586a:	b29a      	uxth	r2, r3
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	8b5b      	ldrh	r3, [r3, #26]
 8015874:	f003 0308 	and.w	r3, r3, #8
 8015878:	2b00      	cmp	r3, #0
 801587a:	d009      	beq.n	8015890 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	8b5b      	ldrh	r3, [r3, #26]
 8015880:	f023 0308 	bic.w	r3, r3, #8
 8015884:	b29a      	uxth	r2, r3
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801588a:	6878      	ldr	r0, [r7, #4]
 801588c:	f7ff fa76 	bl	8014d7c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	68db      	ldr	r3, [r3, #12]
 8015894:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801589a:	2b00      	cmp	r3, #0
 801589c:	d00a      	beq.n	80158b4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801589e:	4b0e      	ldr	r3, [pc, #56]	@ (80158d8 <tcp_fasttmr+0xc4>)
 80158a0:	2200      	movs	r2, #0
 80158a2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80158a4:	6878      	ldr	r0, [r7, #4]
 80158a6:	f000 f819 	bl	80158dc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80158aa:	4b0b      	ldr	r3, [pc, #44]	@ (80158d8 <tcp_fasttmr+0xc4>)
 80158ac:	781b      	ldrb	r3, [r3, #0]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d000      	beq.n	80158b4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80158b2:	e7b8      	b.n	8015826 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80158b4:	683b      	ldr	r3, [r7, #0]
 80158b6:	607b      	str	r3, [r7, #4]
 80158b8:	e002      	b.n	80158c0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	68db      	ldr	r3, [r3, #12]
 80158be:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d1b3      	bne.n	801582e <tcp_fasttmr+0x1a>
    }
  }
}
 80158c6:	bf00      	nop
 80158c8:	bf00      	nop
 80158ca:	3708      	adds	r7, #8
 80158cc:	46bd      	mov	sp, r7
 80158ce:	bd80      	pop	{r7, pc}
 80158d0:	200277c6 	.word	0x200277c6
 80158d4:	200277bc 	.word	0x200277bc
 80158d8:	200277c4 	.word	0x200277c4

080158dc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80158dc:	b590      	push	{r4, r7, lr}
 80158de:	b085      	sub	sp, #20
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d109      	bne.n	80158fe <tcp_process_refused_data+0x22>
 80158ea:	4b37      	ldr	r3, [pc, #220]	@ (80159c8 <tcp_process_refused_data+0xec>)
 80158ec:	f240 6209 	movw	r2, #1545	@ 0x609
 80158f0:	4936      	ldr	r1, [pc, #216]	@ (80159cc <tcp_process_refused_data+0xf0>)
 80158f2:	4837      	ldr	r0, [pc, #220]	@ (80159d0 <tcp_process_refused_data+0xf4>)
 80158f4:	f008 fbee 	bl	801e0d4 <iprintf>
 80158f8:	f06f 030f 	mvn.w	r3, #15
 80158fc:	e060      	b.n	80159c0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015902:	7b5b      	ldrb	r3, [r3, #13]
 8015904:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801590a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	2200      	movs	r2, #0
 8015910:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015918:	2b00      	cmp	r3, #0
 801591a:	d00b      	beq.n	8015934 <tcp_process_refused_data+0x58>
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	6918      	ldr	r0, [r3, #16]
 8015926:	2300      	movs	r3, #0
 8015928:	68ba      	ldr	r2, [r7, #8]
 801592a:	6879      	ldr	r1, [r7, #4]
 801592c:	47a0      	blx	r4
 801592e:	4603      	mov	r3, r0
 8015930:	73fb      	strb	r3, [r7, #15]
 8015932:	e007      	b.n	8015944 <tcp_process_refused_data+0x68>
 8015934:	2300      	movs	r3, #0
 8015936:	68ba      	ldr	r2, [r7, #8]
 8015938:	6879      	ldr	r1, [r7, #4]
 801593a:	2000      	movs	r0, #0
 801593c:	f000 f8a4 	bl	8015a88 <tcp_recv_null>
 8015940:	4603      	mov	r3, r0
 8015942:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8015944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015948:	2b00      	cmp	r3, #0
 801594a:	d12a      	bne.n	80159a2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801594c:	7bbb      	ldrb	r3, [r7, #14]
 801594e:	f003 0320 	and.w	r3, r3, #32
 8015952:	2b00      	cmp	r3, #0
 8015954:	d033      	beq.n	80159be <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801595a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801595e:	d005      	beq.n	801596c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015964:	3301      	adds	r3, #1
 8015966:	b29a      	uxth	r2, r3
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015972:	2b00      	cmp	r3, #0
 8015974:	d00b      	beq.n	801598e <tcp_process_refused_data+0xb2>
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	6918      	ldr	r0, [r3, #16]
 8015980:	2300      	movs	r3, #0
 8015982:	2200      	movs	r2, #0
 8015984:	6879      	ldr	r1, [r7, #4]
 8015986:	47a0      	blx	r4
 8015988:	4603      	mov	r3, r0
 801598a:	73fb      	strb	r3, [r7, #15]
 801598c:	e001      	b.n	8015992 <tcp_process_refused_data+0xb6>
 801598e:	2300      	movs	r3, #0
 8015990:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8015992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015996:	f113 0f0d 	cmn.w	r3, #13
 801599a:	d110      	bne.n	80159be <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801599c:	f06f 030c 	mvn.w	r3, #12
 80159a0:	e00e      	b.n	80159c0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80159a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80159a6:	f113 0f0d 	cmn.w	r3, #13
 80159aa:	d102      	bne.n	80159b2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80159ac:	f06f 030c 	mvn.w	r3, #12
 80159b0:	e006      	b.n	80159c0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	68ba      	ldr	r2, [r7, #8]
 80159b6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80159b8:	f06f 0304 	mvn.w	r3, #4
 80159bc:	e000      	b.n	80159c0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80159be:	2300      	movs	r3, #0
}
 80159c0:	4618      	mov	r0, r3
 80159c2:	3714      	adds	r7, #20
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd90      	pop	{r4, r7, pc}
 80159c8:	0801fdfc 	.word	0x0801fdfc
 80159cc:	0802030c 	.word	0x0802030c
 80159d0:	0801fe40 	.word	0x0801fe40

080159d4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b084      	sub	sp, #16
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80159dc:	e007      	b.n	80159ee <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80159e4:	6878      	ldr	r0, [r7, #4]
 80159e6:	f000 f80a 	bl	80159fe <tcp_seg_free>
    seg = next;
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d1f4      	bne.n	80159de <tcp_segs_free+0xa>
  }
}
 80159f4:	bf00      	nop
 80159f6:	bf00      	nop
 80159f8:	3710      	adds	r7, #16
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}

080159fe <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80159fe:	b580      	push	{r7, lr}
 8015a00:	b082      	sub	sp, #8
 8015a02:	af00      	add	r7, sp, #0
 8015a04:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d00c      	beq.n	8015a26 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	685b      	ldr	r3, [r3, #4]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d004      	beq.n	8015a1e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	685b      	ldr	r3, [r3, #4]
 8015a18:	4618      	mov	r0, r3
 8015a1a:	f7fe fd5f 	bl	80144dc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8015a1e:	6879      	ldr	r1, [r7, #4]
 8015a20:	2003      	movs	r0, #3
 8015a22:	f7fd feb7 	bl	8013794 <memp_free>
  }
}
 8015a26:	bf00      	nop
 8015a28:	3708      	adds	r7, #8
 8015a2a:	46bd      	mov	sp, r7
 8015a2c:	bd80      	pop	{r7, pc}
	...

08015a30 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b084      	sub	sp, #16
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d106      	bne.n	8015a4c <tcp_seg_copy+0x1c>
 8015a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8015a7c <tcp_seg_copy+0x4c>)
 8015a40:	f240 6282 	movw	r2, #1666	@ 0x682
 8015a44:	490e      	ldr	r1, [pc, #56]	@ (8015a80 <tcp_seg_copy+0x50>)
 8015a46:	480f      	ldr	r0, [pc, #60]	@ (8015a84 <tcp_seg_copy+0x54>)
 8015a48:	f008 fb44 	bl	801e0d4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015a4c:	2003      	movs	r0, #3
 8015a4e:	f7fd fe2b 	bl	80136a8 <memp_malloc>
 8015a52:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d101      	bne.n	8015a5e <tcp_seg_copy+0x2e>
    return NULL;
 8015a5a:	2300      	movs	r3, #0
 8015a5c:	e00a      	b.n	8015a74 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8015a5e:	2210      	movs	r2, #16
 8015a60:	6879      	ldr	r1, [r7, #4]
 8015a62:	68f8      	ldr	r0, [r7, #12]
 8015a64:	f008 fd61 	bl	801e52a <memcpy>
  pbuf_ref(cseg->p);
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	685b      	ldr	r3, [r3, #4]
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	f7fe fddb 	bl	8014628 <pbuf_ref>
  return cseg;
 8015a72:	68fb      	ldr	r3, [r7, #12]
}
 8015a74:	4618      	mov	r0, r3
 8015a76:	3710      	adds	r7, #16
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	bd80      	pop	{r7, pc}
 8015a7c:	0801fdfc 	.word	0x0801fdfc
 8015a80:	08020350 	.word	0x08020350
 8015a84:	0801fe40 	.word	0x0801fe40

08015a88 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b084      	sub	sp, #16
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	60f8      	str	r0, [r7, #12]
 8015a90:	60b9      	str	r1, [r7, #8]
 8015a92:	607a      	str	r2, [r7, #4]
 8015a94:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8015a96:	68bb      	ldr	r3, [r7, #8]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d109      	bne.n	8015ab0 <tcp_recv_null+0x28>
 8015a9c:	4b12      	ldr	r3, [pc, #72]	@ (8015ae8 <tcp_recv_null+0x60>)
 8015a9e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8015aa2:	4912      	ldr	r1, [pc, #72]	@ (8015aec <tcp_recv_null+0x64>)
 8015aa4:	4812      	ldr	r0, [pc, #72]	@ (8015af0 <tcp_recv_null+0x68>)
 8015aa6:	f008 fb15 	bl	801e0d4 <iprintf>
 8015aaa:	f06f 030f 	mvn.w	r3, #15
 8015aae:	e016      	b.n	8015ade <tcp_recv_null+0x56>

  if (p != NULL) {
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d009      	beq.n	8015aca <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	891b      	ldrh	r3, [r3, #8]
 8015aba:	4619      	mov	r1, r3
 8015abc:	68b8      	ldr	r0, [r7, #8]
 8015abe:	f7ff fb17 	bl	80150f0 <tcp_recved>
    pbuf_free(p);
 8015ac2:	6878      	ldr	r0, [r7, #4]
 8015ac4:	f7fe fd0a 	bl	80144dc <pbuf_free>
 8015ac8:	e008      	b.n	8015adc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8015aca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d104      	bne.n	8015adc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8015ad2:	68b8      	ldr	r0, [r7, #8]
 8015ad4:	f7ff f9bc 	bl	8014e50 <tcp_close>
 8015ad8:	4603      	mov	r3, r0
 8015ada:	e000      	b.n	8015ade <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8015adc:	2300      	movs	r3, #0
}
 8015ade:	4618      	mov	r0, r3
 8015ae0:	3710      	adds	r7, #16
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	bd80      	pop	{r7, pc}
 8015ae6:	bf00      	nop
 8015ae8:	0801fdfc 	.word	0x0801fdfc
 8015aec:	0802036c 	.word	0x0802036c
 8015af0:	0801fe40 	.word	0x0801fe40

08015af4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b086      	sub	sp, #24
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	4603      	mov	r3, r0
 8015afc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8015afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	db01      	blt.n	8015b0a <tcp_kill_prio+0x16>
 8015b06:	79fb      	ldrb	r3, [r7, #7]
 8015b08:	e000      	b.n	8015b0c <tcp_kill_prio+0x18>
 8015b0a:	237f      	movs	r3, #127	@ 0x7f
 8015b0c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8015b0e:	7afb      	ldrb	r3, [r7, #11]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d034      	beq.n	8015b7e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8015b14:	7afb      	ldrb	r3, [r7, #11]
 8015b16:	3b01      	subs	r3, #1
 8015b18:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015b1e:	2300      	movs	r3, #0
 8015b20:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015b22:	4b19      	ldr	r3, [pc, #100]	@ (8015b88 <tcp_kill_prio+0x94>)
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	617b      	str	r3, [r7, #20]
 8015b28:	e01f      	b.n	8015b6a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8015b2a:	697b      	ldr	r3, [r7, #20]
 8015b2c:	7d5b      	ldrb	r3, [r3, #21]
 8015b2e:	7afa      	ldrb	r2, [r7, #11]
 8015b30:	429a      	cmp	r2, r3
 8015b32:	d80c      	bhi.n	8015b4e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015b34:	697b      	ldr	r3, [r7, #20]
 8015b36:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8015b38:	7afa      	ldrb	r2, [r7, #11]
 8015b3a:	429a      	cmp	r2, r3
 8015b3c:	d112      	bne.n	8015b64 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015b3e:	4b13      	ldr	r3, [pc, #76]	@ (8015b8c <tcp_kill_prio+0x98>)
 8015b40:	681a      	ldr	r2, [r3, #0]
 8015b42:	697b      	ldr	r3, [r7, #20]
 8015b44:	6a1b      	ldr	r3, [r3, #32]
 8015b46:	1ad3      	subs	r3, r2, r3
 8015b48:	68fa      	ldr	r2, [r7, #12]
 8015b4a:	429a      	cmp	r2, r3
 8015b4c:	d80a      	bhi.n	8015b64 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8015b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8015b8c <tcp_kill_prio+0x98>)
 8015b50:	681a      	ldr	r2, [r3, #0]
 8015b52:	697b      	ldr	r3, [r7, #20]
 8015b54:	6a1b      	ldr	r3, [r3, #32]
 8015b56:	1ad3      	subs	r3, r2, r3
 8015b58:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8015b5a:	697b      	ldr	r3, [r7, #20]
 8015b5c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8015b5e:	697b      	ldr	r3, [r7, #20]
 8015b60:	7d5b      	ldrb	r3, [r3, #21]
 8015b62:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015b64:	697b      	ldr	r3, [r7, #20]
 8015b66:	68db      	ldr	r3, [r3, #12]
 8015b68:	617b      	str	r3, [r7, #20]
 8015b6a:	697b      	ldr	r3, [r7, #20]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d1dc      	bne.n	8015b2a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8015b70:	693b      	ldr	r3, [r7, #16]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d004      	beq.n	8015b80 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015b76:	6938      	ldr	r0, [r7, #16]
 8015b78:	f7ff fa54 	bl	8015024 <tcp_abort>
 8015b7c:	e000      	b.n	8015b80 <tcp_kill_prio+0x8c>
    return;
 8015b7e:	bf00      	nop
  }
}
 8015b80:	3718      	adds	r7, #24
 8015b82:	46bd      	mov	sp, r7
 8015b84:	bd80      	pop	{r7, pc}
 8015b86:	bf00      	nop
 8015b88:	200277bc 	.word	0x200277bc
 8015b8c:	200277b0 	.word	0x200277b0

08015b90 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8015b90:	b580      	push	{r7, lr}
 8015b92:	b086      	sub	sp, #24
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	4603      	mov	r3, r0
 8015b98:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8015b9a:	79fb      	ldrb	r3, [r7, #7]
 8015b9c:	2b08      	cmp	r3, #8
 8015b9e:	d009      	beq.n	8015bb4 <tcp_kill_state+0x24>
 8015ba0:	79fb      	ldrb	r3, [r7, #7]
 8015ba2:	2b09      	cmp	r3, #9
 8015ba4:	d006      	beq.n	8015bb4 <tcp_kill_state+0x24>
 8015ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8015c10 <tcp_kill_state+0x80>)
 8015ba8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8015bac:	4919      	ldr	r1, [pc, #100]	@ (8015c14 <tcp_kill_state+0x84>)
 8015bae:	481a      	ldr	r0, [pc, #104]	@ (8015c18 <tcp_kill_state+0x88>)
 8015bb0:	f008 fa90 	bl	801e0d4 <iprintf>

  inactivity = 0;
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015bb8:	2300      	movs	r3, #0
 8015bba:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015bbc:	4b17      	ldr	r3, [pc, #92]	@ (8015c1c <tcp_kill_state+0x8c>)
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	617b      	str	r3, [r7, #20]
 8015bc2:	e017      	b.n	8015bf4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8015bc4:	697b      	ldr	r3, [r7, #20]
 8015bc6:	7d1b      	ldrb	r3, [r3, #20]
 8015bc8:	79fa      	ldrb	r2, [r7, #7]
 8015bca:	429a      	cmp	r2, r3
 8015bcc:	d10f      	bne.n	8015bee <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015bce:	4b14      	ldr	r3, [pc, #80]	@ (8015c20 <tcp_kill_state+0x90>)
 8015bd0:	681a      	ldr	r2, [r3, #0]
 8015bd2:	697b      	ldr	r3, [r7, #20]
 8015bd4:	6a1b      	ldr	r3, [r3, #32]
 8015bd6:	1ad3      	subs	r3, r2, r3
 8015bd8:	68fa      	ldr	r2, [r7, #12]
 8015bda:	429a      	cmp	r2, r3
 8015bdc:	d807      	bhi.n	8015bee <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8015bde:	4b10      	ldr	r3, [pc, #64]	@ (8015c20 <tcp_kill_state+0x90>)
 8015be0:	681a      	ldr	r2, [r3, #0]
 8015be2:	697b      	ldr	r3, [r7, #20]
 8015be4:	6a1b      	ldr	r3, [r3, #32]
 8015be6:	1ad3      	subs	r3, r2, r3
 8015be8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8015bea:	697b      	ldr	r3, [r7, #20]
 8015bec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015bee:	697b      	ldr	r3, [r7, #20]
 8015bf0:	68db      	ldr	r3, [r3, #12]
 8015bf2:	617b      	str	r3, [r7, #20]
 8015bf4:	697b      	ldr	r3, [r7, #20]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d1e4      	bne.n	8015bc4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8015bfa:	693b      	ldr	r3, [r7, #16]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d003      	beq.n	8015c08 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8015c00:	2100      	movs	r1, #0
 8015c02:	6938      	ldr	r0, [r7, #16]
 8015c04:	f7ff f950 	bl	8014ea8 <tcp_abandon>
  }
}
 8015c08:	bf00      	nop
 8015c0a:	3718      	adds	r7, #24
 8015c0c:	46bd      	mov	sp, r7
 8015c0e:	bd80      	pop	{r7, pc}
 8015c10:	0801fdfc 	.word	0x0801fdfc
 8015c14:	08020388 	.word	0x08020388
 8015c18:	0801fe40 	.word	0x0801fe40
 8015c1c:	200277bc 	.word	0x200277bc
 8015c20:	200277b0 	.word	0x200277b0

08015c24 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8015c24:	b580      	push	{r7, lr}
 8015c26:	b084      	sub	sp, #16
 8015c28:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8015c2e:	2300      	movs	r3, #0
 8015c30:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c32:	4b12      	ldr	r3, [pc, #72]	@ (8015c7c <tcp_kill_timewait+0x58>)
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	60fb      	str	r3, [r7, #12]
 8015c38:	e012      	b.n	8015c60 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015c3a:	4b11      	ldr	r3, [pc, #68]	@ (8015c80 <tcp_kill_timewait+0x5c>)
 8015c3c:	681a      	ldr	r2, [r3, #0]
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	6a1b      	ldr	r3, [r3, #32]
 8015c42:	1ad3      	subs	r3, r2, r3
 8015c44:	687a      	ldr	r2, [r7, #4]
 8015c46:	429a      	cmp	r2, r3
 8015c48:	d807      	bhi.n	8015c5a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8015c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8015c80 <tcp_kill_timewait+0x5c>)
 8015c4c:	681a      	ldr	r2, [r3, #0]
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	6a1b      	ldr	r3, [r3, #32]
 8015c52:	1ad3      	subs	r3, r2, r3
 8015c54:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	68db      	ldr	r3, [r3, #12]
 8015c5e:	60fb      	str	r3, [r7, #12]
 8015c60:	68fb      	ldr	r3, [r7, #12]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d1e9      	bne.n	8015c3a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8015c66:	68bb      	ldr	r3, [r7, #8]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d002      	beq.n	8015c72 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015c6c:	68b8      	ldr	r0, [r7, #8]
 8015c6e:	f7ff f9d9 	bl	8015024 <tcp_abort>
  }
}
 8015c72:	bf00      	nop
 8015c74:	3710      	adds	r7, #16
 8015c76:	46bd      	mov	sp, r7
 8015c78:	bd80      	pop	{r7, pc}
 8015c7a:	bf00      	nop
 8015c7c:	200277c0 	.word	0x200277c0
 8015c80:	200277b0 	.word	0x200277b0

08015c84 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b082      	sub	sp, #8
 8015c88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8015c8a:	4b10      	ldr	r3, [pc, #64]	@ (8015ccc <tcp_handle_closepend+0x48>)
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015c90:	e014      	b.n	8015cbc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	68db      	ldr	r3, [r3, #12]
 8015c96:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	8b5b      	ldrh	r3, [r3, #26]
 8015c9c:	f003 0308 	and.w	r3, r3, #8
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d009      	beq.n	8015cb8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	8b5b      	ldrh	r3, [r3, #26]
 8015ca8:	f023 0308 	bic.w	r3, r3, #8
 8015cac:	b29a      	uxth	r2, r3
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8015cb2:	6878      	ldr	r0, [r7, #4]
 8015cb4:	f7ff f862 	bl	8014d7c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8015cb8:	683b      	ldr	r3, [r7, #0]
 8015cba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d1e7      	bne.n	8015c92 <tcp_handle_closepend+0xe>
  }
}
 8015cc2:	bf00      	nop
 8015cc4:	bf00      	nop
 8015cc6:	3708      	adds	r7, #8
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	bd80      	pop	{r7, pc}
 8015ccc:	200277bc 	.word	0x200277bc

08015cd0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b084      	sub	sp, #16
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	4603      	mov	r3, r0
 8015cd8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015cda:	2001      	movs	r0, #1
 8015cdc:	f7fd fce4 	bl	80136a8 <memp_malloc>
 8015ce0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d126      	bne.n	8015d36 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8015ce8:	f7ff ffcc 	bl	8015c84 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8015cec:	f7ff ff9a 	bl	8015c24 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015cf0:	2001      	movs	r0, #1
 8015cf2:	f7fd fcd9 	bl	80136a8 <memp_malloc>
 8015cf6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d11b      	bne.n	8015d36 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8015cfe:	2009      	movs	r0, #9
 8015d00:	f7ff ff46 	bl	8015b90 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015d04:	2001      	movs	r0, #1
 8015d06:	f7fd fccf 	bl	80136a8 <memp_malloc>
 8015d0a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d111      	bne.n	8015d36 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8015d12:	2008      	movs	r0, #8
 8015d14:	f7ff ff3c 	bl	8015b90 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015d18:	2001      	movs	r0, #1
 8015d1a:	f7fd fcc5 	bl	80136a8 <memp_malloc>
 8015d1e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d107      	bne.n	8015d36 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8015d26:	79fb      	ldrb	r3, [r7, #7]
 8015d28:	4618      	mov	r0, r3
 8015d2a:	f7ff fee3 	bl	8015af4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015d2e:	2001      	movs	r0, #1
 8015d30:	f7fd fcba 	bl	80136a8 <memp_malloc>
 8015d34:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d03f      	beq.n	8015dbc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8015d3c:	229c      	movs	r2, #156	@ 0x9c
 8015d3e:	2100      	movs	r1, #0
 8015d40:	68f8      	ldr	r0, [r7, #12]
 8015d42:	f008 fb1f 	bl	801e384 <memset>
    pcb->prio = prio;
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	79fa      	ldrb	r2, [r7, #7]
 8015d4a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8015d52:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8015d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	22ff      	movs	r2, #255	@ 0xff
 8015d6a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8015d72:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	2206      	movs	r2, #6
 8015d78:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	2206      	movs	r2, #6
 8015d80:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015d88:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	2201      	movs	r2, #1
 8015d8e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8015d92:	4b0d      	ldr	r3, [pc, #52]	@ (8015dc8 <tcp_alloc+0xf8>)
 8015d94:	681a      	ldr	r2, [r3, #0]
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8015d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8015dcc <tcp_alloc+0xfc>)
 8015d9c:	781a      	ldrb	r2, [r3, #0]
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8015da8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	4a08      	ldr	r2, [pc, #32]	@ (8015dd0 <tcp_alloc+0x100>)
 8015db0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	4a07      	ldr	r2, [pc, #28]	@ (8015dd4 <tcp_alloc+0x104>)
 8015db8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8015dbc:	68fb      	ldr	r3, [r7, #12]
}
 8015dbe:	4618      	mov	r0, r3
 8015dc0:	3710      	adds	r7, #16
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	bd80      	pop	{r7, pc}
 8015dc6:	bf00      	nop
 8015dc8:	200277b0 	.word	0x200277b0
 8015dcc:	200277c6 	.word	0x200277c6
 8015dd0:	08015a89 	.word	0x08015a89
 8015dd4:	006ddd00 	.word	0x006ddd00

08015dd8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8015dd8:	b580      	push	{r7, lr}
 8015dda:	b082      	sub	sp, #8
 8015ddc:	af00      	add	r7, sp, #0
 8015dde:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d107      	bne.n	8015df6 <tcp_pcb_purge+0x1e>
 8015de6:	4b21      	ldr	r3, [pc, #132]	@ (8015e6c <tcp_pcb_purge+0x94>)
 8015de8:	f640 0251 	movw	r2, #2129	@ 0x851
 8015dec:	4920      	ldr	r1, [pc, #128]	@ (8015e70 <tcp_pcb_purge+0x98>)
 8015dee:	4821      	ldr	r0, [pc, #132]	@ (8015e74 <tcp_pcb_purge+0x9c>)
 8015df0:	f008 f970 	bl	801e0d4 <iprintf>
 8015df4:	e037      	b.n	8015e66 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	7d1b      	ldrb	r3, [r3, #20]
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d033      	beq.n	8015e66 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8015e02:	2b0a      	cmp	r3, #10
 8015e04:	d02f      	beq.n	8015e66 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8015e0a:	2b01      	cmp	r3, #1
 8015e0c:	d02b      	beq.n	8015e66 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d007      	beq.n	8015e26 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	f7fe fb5e 	bl	80144dc <pbuf_free>
      pcb->refused_data = NULL;
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	2200      	movs	r2, #0
 8015e24:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d002      	beq.n	8015e34 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8015e2e:	6878      	ldr	r0, [r7, #4]
 8015e30:	f000 f986 	bl	8016140 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015e3a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015e40:	4618      	mov	r0, r3
 8015e42:	f7ff fdc7 	bl	80159d4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	f7ff fdc2 	bl	80159d4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	2200      	movs	r2, #0
 8015e54:	66da      	str	r2, [r3, #108]	@ 0x6c
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	2200      	movs	r2, #0
 8015e62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8015e66:	3708      	adds	r7, #8
 8015e68:	46bd      	mov	sp, r7
 8015e6a:	bd80      	pop	{r7, pc}
 8015e6c:	0801fdfc 	.word	0x0801fdfc
 8015e70:	08020448 	.word	0x08020448
 8015e74:	0801fe40 	.word	0x0801fe40

08015e78 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b084      	sub	sp, #16
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	6078      	str	r0, [r7, #4]
 8015e80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8015e82:	683b      	ldr	r3, [r7, #0]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d106      	bne.n	8015e96 <tcp_pcb_remove+0x1e>
 8015e88:	4b3e      	ldr	r3, [pc, #248]	@ (8015f84 <tcp_pcb_remove+0x10c>)
 8015e8a:	f640 0283 	movw	r2, #2179	@ 0x883
 8015e8e:	493e      	ldr	r1, [pc, #248]	@ (8015f88 <tcp_pcb_remove+0x110>)
 8015e90:	483e      	ldr	r0, [pc, #248]	@ (8015f8c <tcp_pcb_remove+0x114>)
 8015e92:	f008 f91f 	bl	801e0d4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d106      	bne.n	8015eaa <tcp_pcb_remove+0x32>
 8015e9c:	4b39      	ldr	r3, [pc, #228]	@ (8015f84 <tcp_pcb_remove+0x10c>)
 8015e9e:	f640 0284 	movw	r2, #2180	@ 0x884
 8015ea2:	493b      	ldr	r1, [pc, #236]	@ (8015f90 <tcp_pcb_remove+0x118>)
 8015ea4:	4839      	ldr	r0, [pc, #228]	@ (8015f8c <tcp_pcb_remove+0x114>)
 8015ea6:	f008 f915 	bl	801e0d4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	683a      	ldr	r2, [r7, #0]
 8015eb0:	429a      	cmp	r2, r3
 8015eb2:	d105      	bne.n	8015ec0 <tcp_pcb_remove+0x48>
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	68da      	ldr	r2, [r3, #12]
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	601a      	str	r2, [r3, #0]
 8015ebe:	e013      	b.n	8015ee8 <tcp_pcb_remove+0x70>
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	60fb      	str	r3, [r7, #12]
 8015ec6:	e00c      	b.n	8015ee2 <tcp_pcb_remove+0x6a>
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	68db      	ldr	r3, [r3, #12]
 8015ecc:	683a      	ldr	r2, [r7, #0]
 8015ece:	429a      	cmp	r2, r3
 8015ed0:	d104      	bne.n	8015edc <tcp_pcb_remove+0x64>
 8015ed2:	683b      	ldr	r3, [r7, #0]
 8015ed4:	68da      	ldr	r2, [r3, #12]
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	60da      	str	r2, [r3, #12]
 8015eda:	e005      	b.n	8015ee8 <tcp_pcb_remove+0x70>
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	68db      	ldr	r3, [r3, #12]
 8015ee0:	60fb      	str	r3, [r7, #12]
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d1ef      	bne.n	8015ec8 <tcp_pcb_remove+0x50>
 8015ee8:	683b      	ldr	r3, [r7, #0]
 8015eea:	2200      	movs	r2, #0
 8015eec:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8015eee:	6838      	ldr	r0, [r7, #0]
 8015ef0:	f7ff ff72 	bl	8015dd8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8015ef4:	683b      	ldr	r3, [r7, #0]
 8015ef6:	7d1b      	ldrb	r3, [r3, #20]
 8015ef8:	2b0a      	cmp	r3, #10
 8015efa:	d013      	beq.n	8015f24 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8015efc:	683b      	ldr	r3, [r7, #0]
 8015efe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8015f00:	2b01      	cmp	r3, #1
 8015f02:	d00f      	beq.n	8015f24 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8015f04:	683b      	ldr	r3, [r7, #0]
 8015f06:	8b5b      	ldrh	r3, [r3, #26]
 8015f08:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d009      	beq.n	8015f24 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8015f10:	683b      	ldr	r3, [r7, #0]
 8015f12:	8b5b      	ldrh	r3, [r3, #26]
 8015f14:	f043 0302 	orr.w	r3, r3, #2
 8015f18:	b29a      	uxth	r2, r3
 8015f1a:	683b      	ldr	r3, [r7, #0]
 8015f1c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015f1e:	6838      	ldr	r0, [r7, #0]
 8015f20:	f002 ff68 	bl	8018df4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8015f24:	683b      	ldr	r3, [r7, #0]
 8015f26:	7d1b      	ldrb	r3, [r3, #20]
 8015f28:	2b01      	cmp	r3, #1
 8015f2a:	d020      	beq.n	8015f6e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8015f2c:	683b      	ldr	r3, [r7, #0]
 8015f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d006      	beq.n	8015f42 <tcp_pcb_remove+0xca>
 8015f34:	4b13      	ldr	r3, [pc, #76]	@ (8015f84 <tcp_pcb_remove+0x10c>)
 8015f36:	f640 0293 	movw	r2, #2195	@ 0x893
 8015f3a:	4916      	ldr	r1, [pc, #88]	@ (8015f94 <tcp_pcb_remove+0x11c>)
 8015f3c:	4813      	ldr	r0, [pc, #76]	@ (8015f8c <tcp_pcb_remove+0x114>)
 8015f3e:	f008 f8c9 	bl	801e0d4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8015f42:	683b      	ldr	r3, [r7, #0]
 8015f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d006      	beq.n	8015f58 <tcp_pcb_remove+0xe0>
 8015f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8015f84 <tcp_pcb_remove+0x10c>)
 8015f4c:	f640 0294 	movw	r2, #2196	@ 0x894
 8015f50:	4911      	ldr	r1, [pc, #68]	@ (8015f98 <tcp_pcb_remove+0x120>)
 8015f52:	480e      	ldr	r0, [pc, #56]	@ (8015f8c <tcp_pcb_remove+0x114>)
 8015f54:	f008 f8be 	bl	801e0d4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8015f58:	683b      	ldr	r3, [r7, #0]
 8015f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d006      	beq.n	8015f6e <tcp_pcb_remove+0xf6>
 8015f60:	4b08      	ldr	r3, [pc, #32]	@ (8015f84 <tcp_pcb_remove+0x10c>)
 8015f62:	f640 0296 	movw	r2, #2198	@ 0x896
 8015f66:	490d      	ldr	r1, [pc, #52]	@ (8015f9c <tcp_pcb_remove+0x124>)
 8015f68:	4808      	ldr	r0, [pc, #32]	@ (8015f8c <tcp_pcb_remove+0x114>)
 8015f6a:	f008 f8b3 	bl	801e0d4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8015f6e:	683b      	ldr	r3, [r7, #0]
 8015f70:	2200      	movs	r2, #0
 8015f72:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8015f74:	683b      	ldr	r3, [r7, #0]
 8015f76:	2200      	movs	r2, #0
 8015f78:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8015f7a:	bf00      	nop
 8015f7c:	3710      	adds	r7, #16
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	bd80      	pop	{r7, pc}
 8015f82:	bf00      	nop
 8015f84:	0801fdfc 	.word	0x0801fdfc
 8015f88:	08020464 	.word	0x08020464
 8015f8c:	0801fe40 	.word	0x0801fe40
 8015f90:	08020480 	.word	0x08020480
 8015f94:	080204a0 	.word	0x080204a0
 8015f98:	080204b8 	.word	0x080204b8
 8015f9c:	080204d4 	.word	0x080204d4

08015fa0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8015fa0:	b580      	push	{r7, lr}
 8015fa2:	b082      	sub	sp, #8
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d106      	bne.n	8015fbc <tcp_next_iss+0x1c>
 8015fae:	4b0a      	ldr	r3, [pc, #40]	@ (8015fd8 <tcp_next_iss+0x38>)
 8015fb0:	f640 02af 	movw	r2, #2223	@ 0x8af
 8015fb4:	4909      	ldr	r1, [pc, #36]	@ (8015fdc <tcp_next_iss+0x3c>)
 8015fb6:	480a      	ldr	r0, [pc, #40]	@ (8015fe0 <tcp_next_iss+0x40>)
 8015fb8:	f008 f88c 	bl	801e0d4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8015fbc:	4b09      	ldr	r3, [pc, #36]	@ (8015fe4 <tcp_next_iss+0x44>)
 8015fbe:	681a      	ldr	r2, [r3, #0]
 8015fc0:	4b09      	ldr	r3, [pc, #36]	@ (8015fe8 <tcp_next_iss+0x48>)
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	4413      	add	r3, r2
 8015fc6:	4a07      	ldr	r2, [pc, #28]	@ (8015fe4 <tcp_next_iss+0x44>)
 8015fc8:	6013      	str	r3, [r2, #0]
  return iss;
 8015fca:	4b06      	ldr	r3, [pc, #24]	@ (8015fe4 <tcp_next_iss+0x44>)
 8015fcc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	3708      	adds	r7, #8
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}
 8015fd6:	bf00      	nop
 8015fd8:	0801fdfc 	.word	0x0801fdfc
 8015fdc:	080204ec 	.word	0x080204ec
 8015fe0:	0801fe40 	.word	0x0801fe40
 8015fe4:	20000028 	.word	0x20000028
 8015fe8:	200277b0 	.word	0x200277b0

08015fec <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8015fec:	b580      	push	{r7, lr}
 8015fee:	b086      	sub	sp, #24
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	60b9      	str	r1, [r7, #8]
 8015ff6:	607a      	str	r2, [r7, #4]
 8015ff8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d106      	bne.n	801600e <tcp_eff_send_mss_netif+0x22>
 8016000:	4b14      	ldr	r3, [pc, #80]	@ (8016054 <tcp_eff_send_mss_netif+0x68>)
 8016002:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8016006:	4914      	ldr	r1, [pc, #80]	@ (8016058 <tcp_eff_send_mss_netif+0x6c>)
 8016008:	4814      	ldr	r0, [pc, #80]	@ (801605c <tcp_eff_send_mss_netif+0x70>)
 801600a:	f008 f863 	bl	801e0d4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801600e:	68bb      	ldr	r3, [r7, #8]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d101      	bne.n	8016018 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8016014:	89fb      	ldrh	r3, [r7, #14]
 8016016:	e019      	b.n	801604c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8016018:	68bb      	ldr	r3, [r7, #8]
 801601a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801601c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801601e:	8afb      	ldrh	r3, [r7, #22]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d012      	beq.n	801604a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016024:	2328      	movs	r3, #40	@ 0x28
 8016026:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8016028:	8afa      	ldrh	r2, [r7, #22]
 801602a:	8abb      	ldrh	r3, [r7, #20]
 801602c:	429a      	cmp	r2, r3
 801602e:	d904      	bls.n	801603a <tcp_eff_send_mss_netif+0x4e>
 8016030:	8afa      	ldrh	r2, [r7, #22]
 8016032:	8abb      	ldrh	r3, [r7, #20]
 8016034:	1ad3      	subs	r3, r2, r3
 8016036:	b29b      	uxth	r3, r3
 8016038:	e000      	b.n	801603c <tcp_eff_send_mss_netif+0x50>
 801603a:	2300      	movs	r3, #0
 801603c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801603e:	8a7a      	ldrh	r2, [r7, #18]
 8016040:	89fb      	ldrh	r3, [r7, #14]
 8016042:	4293      	cmp	r3, r2
 8016044:	bf28      	it	cs
 8016046:	4613      	movcs	r3, r2
 8016048:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801604a:	89fb      	ldrh	r3, [r7, #14]
}
 801604c:	4618      	mov	r0, r3
 801604e:	3718      	adds	r7, #24
 8016050:	46bd      	mov	sp, r7
 8016052:	bd80      	pop	{r7, pc}
 8016054:	0801fdfc 	.word	0x0801fdfc
 8016058:	08020508 	.word	0x08020508
 801605c:	0801fe40 	.word	0x0801fe40

08016060 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8016060:	b580      	push	{r7, lr}
 8016062:	b084      	sub	sp, #16
 8016064:	af00      	add	r7, sp, #0
 8016066:	6078      	str	r0, [r7, #4]
 8016068:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801606a:	683b      	ldr	r3, [r7, #0]
 801606c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d119      	bne.n	80160a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8016074:	4b10      	ldr	r3, [pc, #64]	@ (80160b8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8016076:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801607a:	4910      	ldr	r1, [pc, #64]	@ (80160bc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801607c:	4810      	ldr	r0, [pc, #64]	@ (80160c0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801607e:	f008 f829 	bl	801e0d4 <iprintf>

  while (pcb != NULL) {
 8016082:	e011      	b.n	80160a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	681a      	ldr	r2, [r3, #0]
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	429a      	cmp	r2, r3
 801608e:	d108      	bne.n	80160a2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	68db      	ldr	r3, [r3, #12]
 8016094:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8016096:	68f8      	ldr	r0, [r7, #12]
 8016098:	f7fe ffc4 	bl	8015024 <tcp_abort>
      pcb = next;
 801609c:	68bb      	ldr	r3, [r7, #8]
 801609e:	60fb      	str	r3, [r7, #12]
 80160a0:	e002      	b.n	80160a8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	68db      	ldr	r3, [r3, #12]
 80160a6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d1ea      	bne.n	8016084 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80160ae:	bf00      	nop
 80160b0:	bf00      	nop
 80160b2:	3710      	adds	r7, #16
 80160b4:	46bd      	mov	sp, r7
 80160b6:	bd80      	pop	{r7, pc}
 80160b8:	0801fdfc 	.word	0x0801fdfc
 80160bc:	08020530 	.word	0x08020530
 80160c0:	0801fe40 	.word	0x0801fe40

080160c4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80160c4:	b580      	push	{r7, lr}
 80160c6:	b084      	sub	sp, #16
 80160c8:	af00      	add	r7, sp, #0
 80160ca:	6078      	str	r0, [r7, #4]
 80160cc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d02a      	beq.n	801612a <tcp_netif_ip_addr_changed+0x66>
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d026      	beq.n	801612a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80160dc:	4b15      	ldr	r3, [pc, #84]	@ (8016134 <tcp_netif_ip_addr_changed+0x70>)
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	4619      	mov	r1, r3
 80160e2:	6878      	ldr	r0, [r7, #4]
 80160e4:	f7ff ffbc 	bl	8016060 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80160e8:	4b13      	ldr	r3, [pc, #76]	@ (8016138 <tcp_netif_ip_addr_changed+0x74>)
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	4619      	mov	r1, r3
 80160ee:	6878      	ldr	r0, [r7, #4]
 80160f0:	f7ff ffb6 	bl	8016060 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80160f4:	683b      	ldr	r3, [r7, #0]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d017      	beq.n	801612a <tcp_netif_ip_addr_changed+0x66>
 80160fa:	683b      	ldr	r3, [r7, #0]
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d013      	beq.n	801612a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016102:	4b0e      	ldr	r3, [pc, #56]	@ (801613c <tcp_netif_ip_addr_changed+0x78>)
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	60fb      	str	r3, [r7, #12]
 8016108:	e00c      	b.n	8016124 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	681a      	ldr	r2, [r3, #0]
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	429a      	cmp	r2, r3
 8016114:	d103      	bne.n	801611e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8016116:	683b      	ldr	r3, [r7, #0]
 8016118:	681a      	ldr	r2, [r3, #0]
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	68db      	ldr	r3, [r3, #12]
 8016122:	60fb      	str	r3, [r7, #12]
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	2b00      	cmp	r3, #0
 8016128:	d1ef      	bne.n	801610a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801612a:	bf00      	nop
 801612c:	3710      	adds	r7, #16
 801612e:	46bd      	mov	sp, r7
 8016130:	bd80      	pop	{r7, pc}
 8016132:	bf00      	nop
 8016134:	200277bc 	.word	0x200277bc
 8016138:	200277b4 	.word	0x200277b4
 801613c:	200277b8 	.word	0x200277b8

08016140 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b082      	sub	sp, #8
 8016144:	af00      	add	r7, sp, #0
 8016146:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801614c:	2b00      	cmp	r3, #0
 801614e:	d007      	beq.n	8016160 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016154:	4618      	mov	r0, r3
 8016156:	f7ff fc3d 	bl	80159d4 <tcp_segs_free>
    pcb->ooseq = NULL;
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	2200      	movs	r2, #0
 801615e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8016160:	bf00      	nop
 8016162:	3708      	adds	r7, #8
 8016164:	46bd      	mov	sp, r7
 8016166:	bd80      	pop	{r7, pc}

08016168 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8016168:	b590      	push	{r4, r7, lr}
 801616a:	b08d      	sub	sp, #52	@ 0x34
 801616c:	af04      	add	r7, sp, #16
 801616e:	6078      	str	r0, [r7, #4]
 8016170:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	2b00      	cmp	r3, #0
 8016176:	d105      	bne.n	8016184 <tcp_input+0x1c>
 8016178:	4b9b      	ldr	r3, [pc, #620]	@ (80163e8 <tcp_input+0x280>)
 801617a:	2283      	movs	r2, #131	@ 0x83
 801617c:	499b      	ldr	r1, [pc, #620]	@ (80163ec <tcp_input+0x284>)
 801617e:	489c      	ldr	r0, [pc, #624]	@ (80163f0 <tcp_input+0x288>)
 8016180:	f007 ffa8 	bl	801e0d4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	685b      	ldr	r3, [r3, #4]
 8016188:	4a9a      	ldr	r2, [pc, #616]	@ (80163f4 <tcp_input+0x28c>)
 801618a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	895b      	ldrh	r3, [r3, #10]
 8016190:	2b13      	cmp	r3, #19
 8016192:	f240 83d1 	bls.w	8016938 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016196:	4b98      	ldr	r3, [pc, #608]	@ (80163f8 <tcp_input+0x290>)
 8016198:	695b      	ldr	r3, [r3, #20]
 801619a:	4a97      	ldr	r2, [pc, #604]	@ (80163f8 <tcp_input+0x290>)
 801619c:	6812      	ldr	r2, [r2, #0]
 801619e:	4611      	mov	r1, r2
 80161a0:	4618      	mov	r0, r3
 80161a2:	f005 feef 	bl	801bf84 <ip4_addr_isbroadcast_u32>
 80161a6:	4603      	mov	r3, r0
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	f040 83c7 	bne.w	801693c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80161ae:	4b92      	ldr	r3, [pc, #584]	@ (80163f8 <tcp_input+0x290>)
 80161b0:	695b      	ldr	r3, [r3, #20]
 80161b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80161b6:	2be0      	cmp	r3, #224	@ 0xe0
 80161b8:	f000 83c0 	beq.w	801693c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80161bc:	4b8d      	ldr	r3, [pc, #564]	@ (80163f4 <tcp_input+0x28c>)
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	899b      	ldrh	r3, [r3, #12]
 80161c2:	b29b      	uxth	r3, r3
 80161c4:	4618      	mov	r0, r3
 80161c6:	f7fc fd9b 	bl	8012d00 <lwip_htons>
 80161ca:	4603      	mov	r3, r0
 80161cc:	0b1b      	lsrs	r3, r3, #12
 80161ce:	b29b      	uxth	r3, r3
 80161d0:	b2db      	uxtb	r3, r3
 80161d2:	009b      	lsls	r3, r3, #2
 80161d4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80161d6:	7cbb      	ldrb	r3, [r7, #18]
 80161d8:	2b13      	cmp	r3, #19
 80161da:	f240 83b1 	bls.w	8016940 <tcp_input+0x7d8>
 80161de:	7cbb      	ldrb	r3, [r7, #18]
 80161e0:	b29a      	uxth	r2, r3
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	891b      	ldrh	r3, [r3, #8]
 80161e6:	429a      	cmp	r2, r3
 80161e8:	f200 83aa 	bhi.w	8016940 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80161ec:	7cbb      	ldrb	r3, [r7, #18]
 80161ee:	b29b      	uxth	r3, r3
 80161f0:	3b14      	subs	r3, #20
 80161f2:	b29a      	uxth	r2, r3
 80161f4:	4b81      	ldr	r3, [pc, #516]	@ (80163fc <tcp_input+0x294>)
 80161f6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80161f8:	4b81      	ldr	r3, [pc, #516]	@ (8016400 <tcp_input+0x298>)
 80161fa:	2200      	movs	r2, #0
 80161fc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	895a      	ldrh	r2, [r3, #10]
 8016202:	7cbb      	ldrb	r3, [r7, #18]
 8016204:	b29b      	uxth	r3, r3
 8016206:	429a      	cmp	r2, r3
 8016208:	d309      	bcc.n	801621e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801620a:	4b7c      	ldr	r3, [pc, #496]	@ (80163fc <tcp_input+0x294>)
 801620c:	881a      	ldrh	r2, [r3, #0]
 801620e:	4b7d      	ldr	r3, [pc, #500]	@ (8016404 <tcp_input+0x29c>)
 8016210:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8016212:	7cbb      	ldrb	r3, [r7, #18]
 8016214:	4619      	mov	r1, r3
 8016216:	6878      	ldr	r0, [r7, #4]
 8016218:	f7fe f8da 	bl	80143d0 <pbuf_remove_header>
 801621c:	e04e      	b.n	80162bc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	2b00      	cmp	r3, #0
 8016224:	d105      	bne.n	8016232 <tcp_input+0xca>
 8016226:	4b70      	ldr	r3, [pc, #448]	@ (80163e8 <tcp_input+0x280>)
 8016228:	22c2      	movs	r2, #194	@ 0xc2
 801622a:	4977      	ldr	r1, [pc, #476]	@ (8016408 <tcp_input+0x2a0>)
 801622c:	4870      	ldr	r0, [pc, #448]	@ (80163f0 <tcp_input+0x288>)
 801622e:	f007 ff51 	bl	801e0d4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8016232:	2114      	movs	r1, #20
 8016234:	6878      	ldr	r0, [r7, #4]
 8016236:	f7fe f8cb 	bl	80143d0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	895a      	ldrh	r2, [r3, #10]
 801623e:	4b71      	ldr	r3, [pc, #452]	@ (8016404 <tcp_input+0x29c>)
 8016240:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8016242:	4b6e      	ldr	r3, [pc, #440]	@ (80163fc <tcp_input+0x294>)
 8016244:	881a      	ldrh	r2, [r3, #0]
 8016246:	4b6f      	ldr	r3, [pc, #444]	@ (8016404 <tcp_input+0x29c>)
 8016248:	881b      	ldrh	r3, [r3, #0]
 801624a:	1ad3      	subs	r3, r2, r3
 801624c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801624e:	4b6d      	ldr	r3, [pc, #436]	@ (8016404 <tcp_input+0x29c>)
 8016250:	881b      	ldrh	r3, [r3, #0]
 8016252:	4619      	mov	r1, r3
 8016254:	6878      	ldr	r0, [r7, #4]
 8016256:	f7fe f8bb 	bl	80143d0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	895b      	ldrh	r3, [r3, #10]
 8016260:	8a3a      	ldrh	r2, [r7, #16]
 8016262:	429a      	cmp	r2, r3
 8016264:	f200 836e 	bhi.w	8016944 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	685b      	ldr	r3, [r3, #4]
 801626e:	4a64      	ldr	r2, [pc, #400]	@ (8016400 <tcp_input+0x298>)
 8016270:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	8a3a      	ldrh	r2, [r7, #16]
 8016278:	4611      	mov	r1, r2
 801627a:	4618      	mov	r0, r3
 801627c:	f7fe f8a8 	bl	80143d0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	891a      	ldrh	r2, [r3, #8]
 8016284:	8a3b      	ldrh	r3, [r7, #16]
 8016286:	1ad3      	subs	r3, r2, r3
 8016288:	b29a      	uxth	r2, r3
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	895b      	ldrh	r3, [r3, #10]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d005      	beq.n	80162a2 <tcp_input+0x13a>
 8016296:	4b54      	ldr	r3, [pc, #336]	@ (80163e8 <tcp_input+0x280>)
 8016298:	22df      	movs	r2, #223	@ 0xdf
 801629a:	495c      	ldr	r1, [pc, #368]	@ (801640c <tcp_input+0x2a4>)
 801629c:	4854      	ldr	r0, [pc, #336]	@ (80163f0 <tcp_input+0x288>)
 801629e:	f007 ff19 	bl	801e0d4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	891a      	ldrh	r2, [r3, #8]
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	891b      	ldrh	r3, [r3, #8]
 80162ac:	429a      	cmp	r2, r3
 80162ae:	d005      	beq.n	80162bc <tcp_input+0x154>
 80162b0:	4b4d      	ldr	r3, [pc, #308]	@ (80163e8 <tcp_input+0x280>)
 80162b2:	22e0      	movs	r2, #224	@ 0xe0
 80162b4:	4956      	ldr	r1, [pc, #344]	@ (8016410 <tcp_input+0x2a8>)
 80162b6:	484e      	ldr	r0, [pc, #312]	@ (80163f0 <tcp_input+0x288>)
 80162b8:	f007 ff0c 	bl	801e0d4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80162bc:	4b4d      	ldr	r3, [pc, #308]	@ (80163f4 <tcp_input+0x28c>)
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	881b      	ldrh	r3, [r3, #0]
 80162c2:	b29b      	uxth	r3, r3
 80162c4:	4a4b      	ldr	r2, [pc, #300]	@ (80163f4 <tcp_input+0x28c>)
 80162c6:	6814      	ldr	r4, [r2, #0]
 80162c8:	4618      	mov	r0, r3
 80162ca:	f7fc fd19 	bl	8012d00 <lwip_htons>
 80162ce:	4603      	mov	r3, r0
 80162d0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80162d2:	4b48      	ldr	r3, [pc, #288]	@ (80163f4 <tcp_input+0x28c>)
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	885b      	ldrh	r3, [r3, #2]
 80162d8:	b29b      	uxth	r3, r3
 80162da:	4a46      	ldr	r2, [pc, #280]	@ (80163f4 <tcp_input+0x28c>)
 80162dc:	6814      	ldr	r4, [r2, #0]
 80162de:	4618      	mov	r0, r3
 80162e0:	f7fc fd0e 	bl	8012d00 <lwip_htons>
 80162e4:	4603      	mov	r3, r0
 80162e6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80162e8:	4b42      	ldr	r3, [pc, #264]	@ (80163f4 <tcp_input+0x28c>)
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	685b      	ldr	r3, [r3, #4]
 80162ee:	4a41      	ldr	r2, [pc, #260]	@ (80163f4 <tcp_input+0x28c>)
 80162f0:	6814      	ldr	r4, [r2, #0]
 80162f2:	4618      	mov	r0, r3
 80162f4:	f7fc fd1a 	bl	8012d2c <lwip_htonl>
 80162f8:	4603      	mov	r3, r0
 80162fa:	6063      	str	r3, [r4, #4]
 80162fc:	6863      	ldr	r3, [r4, #4]
 80162fe:	4a45      	ldr	r2, [pc, #276]	@ (8016414 <tcp_input+0x2ac>)
 8016300:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8016302:	4b3c      	ldr	r3, [pc, #240]	@ (80163f4 <tcp_input+0x28c>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	689b      	ldr	r3, [r3, #8]
 8016308:	4a3a      	ldr	r2, [pc, #232]	@ (80163f4 <tcp_input+0x28c>)
 801630a:	6814      	ldr	r4, [r2, #0]
 801630c:	4618      	mov	r0, r3
 801630e:	f7fc fd0d 	bl	8012d2c <lwip_htonl>
 8016312:	4603      	mov	r3, r0
 8016314:	60a3      	str	r3, [r4, #8]
 8016316:	68a3      	ldr	r3, [r4, #8]
 8016318:	4a3f      	ldr	r2, [pc, #252]	@ (8016418 <tcp_input+0x2b0>)
 801631a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801631c:	4b35      	ldr	r3, [pc, #212]	@ (80163f4 <tcp_input+0x28c>)
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	89db      	ldrh	r3, [r3, #14]
 8016322:	b29b      	uxth	r3, r3
 8016324:	4a33      	ldr	r2, [pc, #204]	@ (80163f4 <tcp_input+0x28c>)
 8016326:	6814      	ldr	r4, [r2, #0]
 8016328:	4618      	mov	r0, r3
 801632a:	f7fc fce9 	bl	8012d00 <lwip_htons>
 801632e:	4603      	mov	r3, r0
 8016330:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8016332:	4b30      	ldr	r3, [pc, #192]	@ (80163f4 <tcp_input+0x28c>)
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	899b      	ldrh	r3, [r3, #12]
 8016338:	b29b      	uxth	r3, r3
 801633a:	4618      	mov	r0, r3
 801633c:	f7fc fce0 	bl	8012d00 <lwip_htons>
 8016340:	4603      	mov	r3, r0
 8016342:	b2db      	uxtb	r3, r3
 8016344:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016348:	b2da      	uxtb	r2, r3
 801634a:	4b34      	ldr	r3, [pc, #208]	@ (801641c <tcp_input+0x2b4>)
 801634c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	891a      	ldrh	r2, [r3, #8]
 8016352:	4b33      	ldr	r3, [pc, #204]	@ (8016420 <tcp_input+0x2b8>)
 8016354:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8016356:	4b31      	ldr	r3, [pc, #196]	@ (801641c <tcp_input+0x2b4>)
 8016358:	781b      	ldrb	r3, [r3, #0]
 801635a:	f003 0303 	and.w	r3, r3, #3
 801635e:	2b00      	cmp	r3, #0
 8016360:	d00c      	beq.n	801637c <tcp_input+0x214>
    tcplen++;
 8016362:	4b2f      	ldr	r3, [pc, #188]	@ (8016420 <tcp_input+0x2b8>)
 8016364:	881b      	ldrh	r3, [r3, #0]
 8016366:	3301      	adds	r3, #1
 8016368:	b29a      	uxth	r2, r3
 801636a:	4b2d      	ldr	r3, [pc, #180]	@ (8016420 <tcp_input+0x2b8>)
 801636c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	891a      	ldrh	r2, [r3, #8]
 8016372:	4b2b      	ldr	r3, [pc, #172]	@ (8016420 <tcp_input+0x2b8>)
 8016374:	881b      	ldrh	r3, [r3, #0]
 8016376:	429a      	cmp	r2, r3
 8016378:	f200 82e6 	bhi.w	8016948 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801637c:	2300      	movs	r3, #0
 801637e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016380:	4b28      	ldr	r3, [pc, #160]	@ (8016424 <tcp_input+0x2bc>)
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	61fb      	str	r3, [r7, #28]
 8016386:	e09d      	b.n	80164c4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8016388:	69fb      	ldr	r3, [r7, #28]
 801638a:	7d1b      	ldrb	r3, [r3, #20]
 801638c:	2b00      	cmp	r3, #0
 801638e:	d105      	bne.n	801639c <tcp_input+0x234>
 8016390:	4b15      	ldr	r3, [pc, #84]	@ (80163e8 <tcp_input+0x280>)
 8016392:	22fb      	movs	r2, #251	@ 0xfb
 8016394:	4924      	ldr	r1, [pc, #144]	@ (8016428 <tcp_input+0x2c0>)
 8016396:	4816      	ldr	r0, [pc, #88]	@ (80163f0 <tcp_input+0x288>)
 8016398:	f007 fe9c 	bl	801e0d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801639c:	69fb      	ldr	r3, [r7, #28]
 801639e:	7d1b      	ldrb	r3, [r3, #20]
 80163a0:	2b0a      	cmp	r3, #10
 80163a2:	d105      	bne.n	80163b0 <tcp_input+0x248>
 80163a4:	4b10      	ldr	r3, [pc, #64]	@ (80163e8 <tcp_input+0x280>)
 80163a6:	22fc      	movs	r2, #252	@ 0xfc
 80163a8:	4920      	ldr	r1, [pc, #128]	@ (801642c <tcp_input+0x2c4>)
 80163aa:	4811      	ldr	r0, [pc, #68]	@ (80163f0 <tcp_input+0x288>)
 80163ac:	f007 fe92 	bl	801e0d4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80163b0:	69fb      	ldr	r3, [r7, #28]
 80163b2:	7d1b      	ldrb	r3, [r3, #20]
 80163b4:	2b01      	cmp	r3, #1
 80163b6:	d105      	bne.n	80163c4 <tcp_input+0x25c>
 80163b8:	4b0b      	ldr	r3, [pc, #44]	@ (80163e8 <tcp_input+0x280>)
 80163ba:	22fd      	movs	r2, #253	@ 0xfd
 80163bc:	491c      	ldr	r1, [pc, #112]	@ (8016430 <tcp_input+0x2c8>)
 80163be:	480c      	ldr	r0, [pc, #48]	@ (80163f0 <tcp_input+0x288>)
 80163c0:	f007 fe88 	bl	801e0d4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80163c4:	69fb      	ldr	r3, [r7, #28]
 80163c6:	7a1b      	ldrb	r3, [r3, #8]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d033      	beq.n	8016434 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80163cc:	69fb      	ldr	r3, [r7, #28]
 80163ce:	7a1a      	ldrb	r2, [r3, #8]
 80163d0:	4b09      	ldr	r3, [pc, #36]	@ (80163f8 <tcp_input+0x290>)
 80163d2:	685b      	ldr	r3, [r3, #4]
 80163d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80163d8:	3301      	adds	r3, #1
 80163da:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80163dc:	429a      	cmp	r2, r3
 80163de:	d029      	beq.n	8016434 <tcp_input+0x2cc>
      prev = pcb;
 80163e0:	69fb      	ldr	r3, [r7, #28]
 80163e2:	61bb      	str	r3, [r7, #24]
      continue;
 80163e4:	e06b      	b.n	80164be <tcp_input+0x356>
 80163e6:	bf00      	nop
 80163e8:	08020564 	.word	0x08020564
 80163ec:	08020598 	.word	0x08020598
 80163f0:	080205b0 	.word	0x080205b0
 80163f4:	200277d8 	.word	0x200277d8
 80163f8:	200246b0 	.word	0x200246b0
 80163fc:	200277dc 	.word	0x200277dc
 8016400:	200277e0 	.word	0x200277e0
 8016404:	200277de 	.word	0x200277de
 8016408:	080205d8 	.word	0x080205d8
 801640c:	080205e8 	.word	0x080205e8
 8016410:	080205f4 	.word	0x080205f4
 8016414:	200277e8 	.word	0x200277e8
 8016418:	200277ec 	.word	0x200277ec
 801641c:	200277f4 	.word	0x200277f4
 8016420:	200277f2 	.word	0x200277f2
 8016424:	200277bc 	.word	0x200277bc
 8016428:	08020614 	.word	0x08020614
 801642c:	0802063c 	.word	0x0802063c
 8016430:	08020668 	.word	0x08020668
    }

    if (pcb->remote_port == tcphdr->src &&
 8016434:	69fb      	ldr	r3, [r7, #28]
 8016436:	8b1a      	ldrh	r2, [r3, #24]
 8016438:	4b72      	ldr	r3, [pc, #456]	@ (8016604 <tcp_input+0x49c>)
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	881b      	ldrh	r3, [r3, #0]
 801643e:	b29b      	uxth	r3, r3
 8016440:	429a      	cmp	r2, r3
 8016442:	d13a      	bne.n	80164ba <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8016444:	69fb      	ldr	r3, [r7, #28]
 8016446:	8ada      	ldrh	r2, [r3, #22]
 8016448:	4b6e      	ldr	r3, [pc, #440]	@ (8016604 <tcp_input+0x49c>)
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	885b      	ldrh	r3, [r3, #2]
 801644e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8016450:	429a      	cmp	r2, r3
 8016452:	d132      	bne.n	80164ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016454:	69fb      	ldr	r3, [r7, #28]
 8016456:	685a      	ldr	r2, [r3, #4]
 8016458:	4b6b      	ldr	r3, [pc, #428]	@ (8016608 <tcp_input+0x4a0>)
 801645a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801645c:	429a      	cmp	r2, r3
 801645e:	d12c      	bne.n	80164ba <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016460:	69fb      	ldr	r3, [r7, #28]
 8016462:	681a      	ldr	r2, [r3, #0]
 8016464:	4b68      	ldr	r3, [pc, #416]	@ (8016608 <tcp_input+0x4a0>)
 8016466:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016468:	429a      	cmp	r2, r3
 801646a:	d126      	bne.n	80164ba <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801646c:	69fb      	ldr	r3, [r7, #28]
 801646e:	68db      	ldr	r3, [r3, #12]
 8016470:	69fa      	ldr	r2, [r7, #28]
 8016472:	429a      	cmp	r2, r3
 8016474:	d106      	bne.n	8016484 <tcp_input+0x31c>
 8016476:	4b65      	ldr	r3, [pc, #404]	@ (801660c <tcp_input+0x4a4>)
 8016478:	f240 120d 	movw	r2, #269	@ 0x10d
 801647c:	4964      	ldr	r1, [pc, #400]	@ (8016610 <tcp_input+0x4a8>)
 801647e:	4865      	ldr	r0, [pc, #404]	@ (8016614 <tcp_input+0x4ac>)
 8016480:	f007 fe28 	bl	801e0d4 <iprintf>
      if (prev != NULL) {
 8016484:	69bb      	ldr	r3, [r7, #24]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d00a      	beq.n	80164a0 <tcp_input+0x338>
        prev->next = pcb->next;
 801648a:	69fb      	ldr	r3, [r7, #28]
 801648c:	68da      	ldr	r2, [r3, #12]
 801648e:	69bb      	ldr	r3, [r7, #24]
 8016490:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8016492:	4b61      	ldr	r3, [pc, #388]	@ (8016618 <tcp_input+0x4b0>)
 8016494:	681a      	ldr	r2, [r3, #0]
 8016496:	69fb      	ldr	r3, [r7, #28]
 8016498:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801649a:	4a5f      	ldr	r2, [pc, #380]	@ (8016618 <tcp_input+0x4b0>)
 801649c:	69fb      	ldr	r3, [r7, #28]
 801649e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80164a0:	69fb      	ldr	r3, [r7, #28]
 80164a2:	68db      	ldr	r3, [r3, #12]
 80164a4:	69fa      	ldr	r2, [r7, #28]
 80164a6:	429a      	cmp	r2, r3
 80164a8:	d111      	bne.n	80164ce <tcp_input+0x366>
 80164aa:	4b58      	ldr	r3, [pc, #352]	@ (801660c <tcp_input+0x4a4>)
 80164ac:	f240 1215 	movw	r2, #277	@ 0x115
 80164b0:	495a      	ldr	r1, [pc, #360]	@ (801661c <tcp_input+0x4b4>)
 80164b2:	4858      	ldr	r0, [pc, #352]	@ (8016614 <tcp_input+0x4ac>)
 80164b4:	f007 fe0e 	bl	801e0d4 <iprintf>
      break;
 80164b8:	e009      	b.n	80164ce <tcp_input+0x366>
    }
    prev = pcb;
 80164ba:	69fb      	ldr	r3, [r7, #28]
 80164bc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80164be:	69fb      	ldr	r3, [r7, #28]
 80164c0:	68db      	ldr	r3, [r3, #12]
 80164c2:	61fb      	str	r3, [r7, #28]
 80164c4:	69fb      	ldr	r3, [r7, #28]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	f47f af5e 	bne.w	8016388 <tcp_input+0x220>
 80164cc:	e000      	b.n	80164d0 <tcp_input+0x368>
      break;
 80164ce:	bf00      	nop
  }

  if (pcb == NULL) {
 80164d0:	69fb      	ldr	r3, [r7, #28]
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	f040 80aa 	bne.w	801662c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80164d8:	4b51      	ldr	r3, [pc, #324]	@ (8016620 <tcp_input+0x4b8>)
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	61fb      	str	r3, [r7, #28]
 80164de:	e03f      	b.n	8016560 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80164e0:	69fb      	ldr	r3, [r7, #28]
 80164e2:	7d1b      	ldrb	r3, [r3, #20]
 80164e4:	2b0a      	cmp	r3, #10
 80164e6:	d006      	beq.n	80164f6 <tcp_input+0x38e>
 80164e8:	4b48      	ldr	r3, [pc, #288]	@ (801660c <tcp_input+0x4a4>)
 80164ea:	f240 121f 	movw	r2, #287	@ 0x11f
 80164ee:	494d      	ldr	r1, [pc, #308]	@ (8016624 <tcp_input+0x4bc>)
 80164f0:	4848      	ldr	r0, [pc, #288]	@ (8016614 <tcp_input+0x4ac>)
 80164f2:	f007 fdef 	bl	801e0d4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80164f6:	69fb      	ldr	r3, [r7, #28]
 80164f8:	7a1b      	ldrb	r3, [r3, #8]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d009      	beq.n	8016512 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80164fe:	69fb      	ldr	r3, [r7, #28]
 8016500:	7a1a      	ldrb	r2, [r3, #8]
 8016502:	4b41      	ldr	r3, [pc, #260]	@ (8016608 <tcp_input+0x4a0>)
 8016504:	685b      	ldr	r3, [r3, #4]
 8016506:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801650a:	3301      	adds	r3, #1
 801650c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801650e:	429a      	cmp	r2, r3
 8016510:	d122      	bne.n	8016558 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8016512:	69fb      	ldr	r3, [r7, #28]
 8016514:	8b1a      	ldrh	r2, [r3, #24]
 8016516:	4b3b      	ldr	r3, [pc, #236]	@ (8016604 <tcp_input+0x49c>)
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	881b      	ldrh	r3, [r3, #0]
 801651c:	b29b      	uxth	r3, r3
 801651e:	429a      	cmp	r2, r3
 8016520:	d11b      	bne.n	801655a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8016522:	69fb      	ldr	r3, [r7, #28]
 8016524:	8ada      	ldrh	r2, [r3, #22]
 8016526:	4b37      	ldr	r3, [pc, #220]	@ (8016604 <tcp_input+0x49c>)
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	885b      	ldrh	r3, [r3, #2]
 801652c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801652e:	429a      	cmp	r2, r3
 8016530:	d113      	bne.n	801655a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016532:	69fb      	ldr	r3, [r7, #28]
 8016534:	685a      	ldr	r2, [r3, #4]
 8016536:	4b34      	ldr	r3, [pc, #208]	@ (8016608 <tcp_input+0x4a0>)
 8016538:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801653a:	429a      	cmp	r2, r3
 801653c:	d10d      	bne.n	801655a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801653e:	69fb      	ldr	r3, [r7, #28]
 8016540:	681a      	ldr	r2, [r3, #0]
 8016542:	4b31      	ldr	r3, [pc, #196]	@ (8016608 <tcp_input+0x4a0>)
 8016544:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016546:	429a      	cmp	r2, r3
 8016548:	d107      	bne.n	801655a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801654a:	69f8      	ldr	r0, [r7, #28]
 801654c:	f000 fb56 	bl	8016bfc <tcp_timewait_input>
        }
        pbuf_free(p);
 8016550:	6878      	ldr	r0, [r7, #4]
 8016552:	f7fd ffc3 	bl	80144dc <pbuf_free>
        return;
 8016556:	e1fd      	b.n	8016954 <tcp_input+0x7ec>
        continue;
 8016558:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801655a:	69fb      	ldr	r3, [r7, #28]
 801655c:	68db      	ldr	r3, [r3, #12]
 801655e:	61fb      	str	r3, [r7, #28]
 8016560:	69fb      	ldr	r3, [r7, #28]
 8016562:	2b00      	cmp	r3, #0
 8016564:	d1bc      	bne.n	80164e0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8016566:	2300      	movs	r3, #0
 8016568:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801656a:	4b2f      	ldr	r3, [pc, #188]	@ (8016628 <tcp_input+0x4c0>)
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	617b      	str	r3, [r7, #20]
 8016570:	e02a      	b.n	80165c8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016572:	697b      	ldr	r3, [r7, #20]
 8016574:	7a1b      	ldrb	r3, [r3, #8]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d00c      	beq.n	8016594 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801657a:	697b      	ldr	r3, [r7, #20]
 801657c:	7a1a      	ldrb	r2, [r3, #8]
 801657e:	4b22      	ldr	r3, [pc, #136]	@ (8016608 <tcp_input+0x4a0>)
 8016580:	685b      	ldr	r3, [r3, #4]
 8016582:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016586:	3301      	adds	r3, #1
 8016588:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801658a:	429a      	cmp	r2, r3
 801658c:	d002      	beq.n	8016594 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801658e:	697b      	ldr	r3, [r7, #20]
 8016590:	61bb      	str	r3, [r7, #24]
        continue;
 8016592:	e016      	b.n	80165c2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8016594:	697b      	ldr	r3, [r7, #20]
 8016596:	8ada      	ldrh	r2, [r3, #22]
 8016598:	4b1a      	ldr	r3, [pc, #104]	@ (8016604 <tcp_input+0x49c>)
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	885b      	ldrh	r3, [r3, #2]
 801659e:	b29b      	uxth	r3, r3
 80165a0:	429a      	cmp	r2, r3
 80165a2:	d10c      	bne.n	80165be <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80165a4:	697b      	ldr	r3, [r7, #20]
 80165a6:	681a      	ldr	r2, [r3, #0]
 80165a8:	4b17      	ldr	r3, [pc, #92]	@ (8016608 <tcp_input+0x4a0>)
 80165aa:	695b      	ldr	r3, [r3, #20]
 80165ac:	429a      	cmp	r2, r3
 80165ae:	d00f      	beq.n	80165d0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80165b0:	697b      	ldr	r3, [r7, #20]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d00d      	beq.n	80165d2 <tcp_input+0x46a>
 80165b6:	697b      	ldr	r3, [r7, #20]
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d009      	beq.n	80165d2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80165be:	697b      	ldr	r3, [r7, #20]
 80165c0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80165c2:	697b      	ldr	r3, [r7, #20]
 80165c4:	68db      	ldr	r3, [r3, #12]
 80165c6:	617b      	str	r3, [r7, #20]
 80165c8:	697b      	ldr	r3, [r7, #20]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d1d1      	bne.n	8016572 <tcp_input+0x40a>
 80165ce:	e000      	b.n	80165d2 <tcp_input+0x46a>
            break;
 80165d0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80165d2:	697b      	ldr	r3, [r7, #20]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d029      	beq.n	801662c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80165d8:	69bb      	ldr	r3, [r7, #24]
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d00a      	beq.n	80165f4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80165de:	697b      	ldr	r3, [r7, #20]
 80165e0:	68da      	ldr	r2, [r3, #12]
 80165e2:	69bb      	ldr	r3, [r7, #24]
 80165e4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80165e6:	4b10      	ldr	r3, [pc, #64]	@ (8016628 <tcp_input+0x4c0>)
 80165e8:	681a      	ldr	r2, [r3, #0]
 80165ea:	697b      	ldr	r3, [r7, #20]
 80165ec:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80165ee:	4a0e      	ldr	r2, [pc, #56]	@ (8016628 <tcp_input+0x4c0>)
 80165f0:	697b      	ldr	r3, [r7, #20]
 80165f2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80165f4:	6978      	ldr	r0, [r7, #20]
 80165f6:	f000 fa03 	bl	8016a00 <tcp_listen_input>
      }
      pbuf_free(p);
 80165fa:	6878      	ldr	r0, [r7, #4]
 80165fc:	f7fd ff6e 	bl	80144dc <pbuf_free>
      return;
 8016600:	e1a8      	b.n	8016954 <tcp_input+0x7ec>
 8016602:	bf00      	nop
 8016604:	200277d8 	.word	0x200277d8
 8016608:	200246b0 	.word	0x200246b0
 801660c:	08020564 	.word	0x08020564
 8016610:	08020690 	.word	0x08020690
 8016614:	080205b0 	.word	0x080205b0
 8016618:	200277bc 	.word	0x200277bc
 801661c:	080206bc 	.word	0x080206bc
 8016620:	200277c0 	.word	0x200277c0
 8016624:	080206e8 	.word	0x080206e8
 8016628:	200277b8 	.word	0x200277b8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801662c:	69fb      	ldr	r3, [r7, #28]
 801662e:	2b00      	cmp	r3, #0
 8016630:	f000 8158 	beq.w	80168e4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8016634:	4b95      	ldr	r3, [pc, #596]	@ (801688c <tcp_input+0x724>)
 8016636:	2200      	movs	r2, #0
 8016638:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	891a      	ldrh	r2, [r3, #8]
 801663e:	4b93      	ldr	r3, [pc, #588]	@ (801688c <tcp_input+0x724>)
 8016640:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8016642:	4a92      	ldr	r2, [pc, #584]	@ (801688c <tcp_input+0x724>)
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016648:	4b91      	ldr	r3, [pc, #580]	@ (8016890 <tcp_input+0x728>)
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	4a8f      	ldr	r2, [pc, #572]	@ (801688c <tcp_input+0x724>)
 801664e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8016650:	4b90      	ldr	r3, [pc, #576]	@ (8016894 <tcp_input+0x72c>)
 8016652:	2200      	movs	r2, #0
 8016654:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8016656:	4b90      	ldr	r3, [pc, #576]	@ (8016898 <tcp_input+0x730>)
 8016658:	2200      	movs	r2, #0
 801665a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801665c:	4b8f      	ldr	r3, [pc, #572]	@ (801689c <tcp_input+0x734>)
 801665e:	2200      	movs	r2, #0
 8016660:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8016662:	4b8f      	ldr	r3, [pc, #572]	@ (80168a0 <tcp_input+0x738>)
 8016664:	781b      	ldrb	r3, [r3, #0]
 8016666:	f003 0308 	and.w	r3, r3, #8
 801666a:	2b00      	cmp	r3, #0
 801666c:	d006      	beq.n	801667c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	7b5b      	ldrb	r3, [r3, #13]
 8016672:	f043 0301 	orr.w	r3, r3, #1
 8016676:	b2da      	uxtb	r2, r3
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801667c:	69fb      	ldr	r3, [r7, #28]
 801667e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016680:	2b00      	cmp	r3, #0
 8016682:	d017      	beq.n	80166b4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016684:	69f8      	ldr	r0, [r7, #28]
 8016686:	f7ff f929 	bl	80158dc <tcp_process_refused_data>
 801668a:	4603      	mov	r3, r0
 801668c:	f113 0f0d 	cmn.w	r3, #13
 8016690:	d007      	beq.n	80166a2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016692:	69fb      	ldr	r3, [r7, #28]
 8016694:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016696:	2b00      	cmp	r3, #0
 8016698:	d00c      	beq.n	80166b4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801669a:	4b82      	ldr	r3, [pc, #520]	@ (80168a4 <tcp_input+0x73c>)
 801669c:	881b      	ldrh	r3, [r3, #0]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d008      	beq.n	80166b4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80166a2:	69fb      	ldr	r3, [r7, #28]
 80166a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	f040 80e3 	bne.w	8016872 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80166ac:	69f8      	ldr	r0, [r7, #28]
 80166ae:	f003 f9a7 	bl	8019a00 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80166b2:	e0de      	b.n	8016872 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80166b4:	4a7c      	ldr	r2, [pc, #496]	@ (80168a8 <tcp_input+0x740>)
 80166b6:	69fb      	ldr	r3, [r7, #28]
 80166b8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80166ba:	69f8      	ldr	r0, [r7, #28]
 80166bc:	f000 fb18 	bl	8016cf0 <tcp_process>
 80166c0:	4603      	mov	r3, r0
 80166c2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80166c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80166c8:	f113 0f0d 	cmn.w	r3, #13
 80166cc:	f000 80d3 	beq.w	8016876 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80166d0:	4b71      	ldr	r3, [pc, #452]	@ (8016898 <tcp_input+0x730>)
 80166d2:	781b      	ldrb	r3, [r3, #0]
 80166d4:	f003 0308 	and.w	r3, r3, #8
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d015      	beq.n	8016708 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80166dc:	69fb      	ldr	r3, [r7, #28]
 80166de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d008      	beq.n	80166f8 <tcp_input+0x590>
 80166e6:	69fb      	ldr	r3, [r7, #28]
 80166e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80166ec:	69fa      	ldr	r2, [r7, #28]
 80166ee:	6912      	ldr	r2, [r2, #16]
 80166f0:	f06f 010d 	mvn.w	r1, #13
 80166f4:	4610      	mov	r0, r2
 80166f6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80166f8:	69f9      	ldr	r1, [r7, #28]
 80166fa:	486c      	ldr	r0, [pc, #432]	@ (80168ac <tcp_input+0x744>)
 80166fc:	f7ff fbbc 	bl	8015e78 <tcp_pcb_remove>
        tcp_free(pcb);
 8016700:	69f8      	ldr	r0, [r7, #28]
 8016702:	f7fe f9a7 	bl	8014a54 <tcp_free>
 8016706:	e0da      	b.n	80168be <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8016708:	2300      	movs	r3, #0
 801670a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801670c:	4b63      	ldr	r3, [pc, #396]	@ (801689c <tcp_input+0x734>)
 801670e:	881b      	ldrh	r3, [r3, #0]
 8016710:	2b00      	cmp	r3, #0
 8016712:	d01d      	beq.n	8016750 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8016714:	4b61      	ldr	r3, [pc, #388]	@ (801689c <tcp_input+0x734>)
 8016716:	881b      	ldrh	r3, [r3, #0]
 8016718:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801671a:	69fb      	ldr	r3, [r7, #28]
 801671c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016720:	2b00      	cmp	r3, #0
 8016722:	d00a      	beq.n	801673a <tcp_input+0x5d2>
 8016724:	69fb      	ldr	r3, [r7, #28]
 8016726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801672a:	69fa      	ldr	r2, [r7, #28]
 801672c:	6910      	ldr	r0, [r2, #16]
 801672e:	89fa      	ldrh	r2, [r7, #14]
 8016730:	69f9      	ldr	r1, [r7, #28]
 8016732:	4798      	blx	r3
 8016734:	4603      	mov	r3, r0
 8016736:	74fb      	strb	r3, [r7, #19]
 8016738:	e001      	b.n	801673e <tcp_input+0x5d6>
 801673a:	2300      	movs	r3, #0
 801673c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801673e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016742:	f113 0f0d 	cmn.w	r3, #13
 8016746:	f000 8098 	beq.w	801687a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801674a:	4b54      	ldr	r3, [pc, #336]	@ (801689c <tcp_input+0x734>)
 801674c:	2200      	movs	r2, #0
 801674e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8016750:	69f8      	ldr	r0, [r7, #28]
 8016752:	f000 f915 	bl	8016980 <tcp_input_delayed_close>
 8016756:	4603      	mov	r3, r0
 8016758:	2b00      	cmp	r3, #0
 801675a:	f040 8090 	bne.w	801687e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801675e:	4b4d      	ldr	r3, [pc, #308]	@ (8016894 <tcp_input+0x72c>)
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d041      	beq.n	80167ea <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016766:	69fb      	ldr	r3, [r7, #28]
 8016768:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801676a:	2b00      	cmp	r3, #0
 801676c:	d006      	beq.n	801677c <tcp_input+0x614>
 801676e:	4b50      	ldr	r3, [pc, #320]	@ (80168b0 <tcp_input+0x748>)
 8016770:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8016774:	494f      	ldr	r1, [pc, #316]	@ (80168b4 <tcp_input+0x74c>)
 8016776:	4850      	ldr	r0, [pc, #320]	@ (80168b8 <tcp_input+0x750>)
 8016778:	f007 fcac 	bl	801e0d4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801677c:	69fb      	ldr	r3, [r7, #28]
 801677e:	8b5b      	ldrh	r3, [r3, #26]
 8016780:	f003 0310 	and.w	r3, r3, #16
 8016784:	2b00      	cmp	r3, #0
 8016786:	d008      	beq.n	801679a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8016788:	4b42      	ldr	r3, [pc, #264]	@ (8016894 <tcp_input+0x72c>)
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	4618      	mov	r0, r3
 801678e:	f7fd fea5 	bl	80144dc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8016792:	69f8      	ldr	r0, [r7, #28]
 8016794:	f7fe fc46 	bl	8015024 <tcp_abort>
            goto aborted;
 8016798:	e091      	b.n	80168be <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801679a:	69fb      	ldr	r3, [r7, #28]
 801679c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d00c      	beq.n	80167be <tcp_input+0x656>
 80167a4:	69fb      	ldr	r3, [r7, #28]
 80167a6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80167aa:	69fb      	ldr	r3, [r7, #28]
 80167ac:	6918      	ldr	r0, [r3, #16]
 80167ae:	4b39      	ldr	r3, [pc, #228]	@ (8016894 <tcp_input+0x72c>)
 80167b0:	681a      	ldr	r2, [r3, #0]
 80167b2:	2300      	movs	r3, #0
 80167b4:	69f9      	ldr	r1, [r7, #28]
 80167b6:	47a0      	blx	r4
 80167b8:	4603      	mov	r3, r0
 80167ba:	74fb      	strb	r3, [r7, #19]
 80167bc:	e008      	b.n	80167d0 <tcp_input+0x668>
 80167be:	4b35      	ldr	r3, [pc, #212]	@ (8016894 <tcp_input+0x72c>)
 80167c0:	681a      	ldr	r2, [r3, #0]
 80167c2:	2300      	movs	r3, #0
 80167c4:	69f9      	ldr	r1, [r7, #28]
 80167c6:	2000      	movs	r0, #0
 80167c8:	f7ff f95e 	bl	8015a88 <tcp_recv_null>
 80167cc:	4603      	mov	r3, r0
 80167ce:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80167d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80167d4:	f113 0f0d 	cmn.w	r3, #13
 80167d8:	d053      	beq.n	8016882 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80167da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d003      	beq.n	80167ea <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80167e2:	4b2c      	ldr	r3, [pc, #176]	@ (8016894 <tcp_input+0x72c>)
 80167e4:	681a      	ldr	r2, [r3, #0]
 80167e6:	69fb      	ldr	r3, [r7, #28]
 80167e8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80167ea:	4b2b      	ldr	r3, [pc, #172]	@ (8016898 <tcp_input+0x730>)
 80167ec:	781b      	ldrb	r3, [r3, #0]
 80167ee:	f003 0320 	and.w	r3, r3, #32
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d030      	beq.n	8016858 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80167f6:	69fb      	ldr	r3, [r7, #28]
 80167f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d009      	beq.n	8016812 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80167fe:	69fb      	ldr	r3, [r7, #28]
 8016800:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016802:	7b5a      	ldrb	r2, [r3, #13]
 8016804:	69fb      	ldr	r3, [r7, #28]
 8016806:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016808:	f042 0220 	orr.w	r2, r2, #32
 801680c:	b2d2      	uxtb	r2, r2
 801680e:	735a      	strb	r2, [r3, #13]
 8016810:	e022      	b.n	8016858 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016812:	69fb      	ldr	r3, [r7, #28]
 8016814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016816:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801681a:	d005      	beq.n	8016828 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801681c:	69fb      	ldr	r3, [r7, #28]
 801681e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016820:	3301      	adds	r3, #1
 8016822:	b29a      	uxth	r2, r3
 8016824:	69fb      	ldr	r3, [r7, #28]
 8016826:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016828:	69fb      	ldr	r3, [r7, #28]
 801682a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801682e:	2b00      	cmp	r3, #0
 8016830:	d00b      	beq.n	801684a <tcp_input+0x6e2>
 8016832:	69fb      	ldr	r3, [r7, #28]
 8016834:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016838:	69fb      	ldr	r3, [r7, #28]
 801683a:	6918      	ldr	r0, [r3, #16]
 801683c:	2300      	movs	r3, #0
 801683e:	2200      	movs	r2, #0
 8016840:	69f9      	ldr	r1, [r7, #28]
 8016842:	47a0      	blx	r4
 8016844:	4603      	mov	r3, r0
 8016846:	74fb      	strb	r3, [r7, #19]
 8016848:	e001      	b.n	801684e <tcp_input+0x6e6>
 801684a:	2300      	movs	r3, #0
 801684c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801684e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016852:	f113 0f0d 	cmn.w	r3, #13
 8016856:	d016      	beq.n	8016886 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016858:	4b13      	ldr	r3, [pc, #76]	@ (80168a8 <tcp_input+0x740>)
 801685a:	2200      	movs	r2, #0
 801685c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801685e:	69f8      	ldr	r0, [r7, #28]
 8016860:	f000 f88e 	bl	8016980 <tcp_input_delayed_close>
 8016864:	4603      	mov	r3, r0
 8016866:	2b00      	cmp	r3, #0
 8016868:	d128      	bne.n	80168bc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801686a:	69f8      	ldr	r0, [r7, #28]
 801686c:	f002 fac2 	bl	8018df4 <tcp_output>
 8016870:	e025      	b.n	80168be <tcp_input+0x756>
        goto aborted;
 8016872:	bf00      	nop
 8016874:	e023      	b.n	80168be <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016876:	bf00      	nop
 8016878:	e021      	b.n	80168be <tcp_input+0x756>
              goto aborted;
 801687a:	bf00      	nop
 801687c:	e01f      	b.n	80168be <tcp_input+0x756>
          goto aborted;
 801687e:	bf00      	nop
 8016880:	e01d      	b.n	80168be <tcp_input+0x756>
            goto aborted;
 8016882:	bf00      	nop
 8016884:	e01b      	b.n	80168be <tcp_input+0x756>
              goto aborted;
 8016886:	bf00      	nop
 8016888:	e019      	b.n	80168be <tcp_input+0x756>
 801688a:	bf00      	nop
 801688c:	200277c8 	.word	0x200277c8
 8016890:	200277d8 	.word	0x200277d8
 8016894:	200277f8 	.word	0x200277f8
 8016898:	200277f5 	.word	0x200277f5
 801689c:	200277f0 	.word	0x200277f0
 80168a0:	200277f4 	.word	0x200277f4
 80168a4:	200277f2 	.word	0x200277f2
 80168a8:	200277fc 	.word	0x200277fc
 80168ac:	200277bc 	.word	0x200277bc
 80168b0:	08020564 	.word	0x08020564
 80168b4:	08020718 	.word	0x08020718
 80168b8:	080205b0 	.word	0x080205b0
          goto aborted;
 80168bc:	bf00      	nop
    tcp_input_pcb = NULL;
 80168be:	4b27      	ldr	r3, [pc, #156]	@ (801695c <tcp_input+0x7f4>)
 80168c0:	2200      	movs	r2, #0
 80168c2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80168c4:	4b26      	ldr	r3, [pc, #152]	@ (8016960 <tcp_input+0x7f8>)
 80168c6:	2200      	movs	r2, #0
 80168c8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80168ca:	4b26      	ldr	r3, [pc, #152]	@ (8016964 <tcp_input+0x7fc>)
 80168cc:	685b      	ldr	r3, [r3, #4]
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d03f      	beq.n	8016952 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80168d2:	4b24      	ldr	r3, [pc, #144]	@ (8016964 <tcp_input+0x7fc>)
 80168d4:	685b      	ldr	r3, [r3, #4]
 80168d6:	4618      	mov	r0, r3
 80168d8:	f7fd fe00 	bl	80144dc <pbuf_free>
      inseg.p = NULL;
 80168dc:	4b21      	ldr	r3, [pc, #132]	@ (8016964 <tcp_input+0x7fc>)
 80168de:	2200      	movs	r2, #0
 80168e0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80168e2:	e036      	b.n	8016952 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80168e4:	4b20      	ldr	r3, [pc, #128]	@ (8016968 <tcp_input+0x800>)
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	899b      	ldrh	r3, [r3, #12]
 80168ea:	b29b      	uxth	r3, r3
 80168ec:	4618      	mov	r0, r3
 80168ee:	f7fc fa07 	bl	8012d00 <lwip_htons>
 80168f2:	4603      	mov	r3, r0
 80168f4:	b2db      	uxtb	r3, r3
 80168f6:	f003 0304 	and.w	r3, r3, #4
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d118      	bne.n	8016930 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80168fe:	4b1b      	ldr	r3, [pc, #108]	@ (801696c <tcp_input+0x804>)
 8016900:	6819      	ldr	r1, [r3, #0]
 8016902:	4b1b      	ldr	r3, [pc, #108]	@ (8016970 <tcp_input+0x808>)
 8016904:	881b      	ldrh	r3, [r3, #0]
 8016906:	461a      	mov	r2, r3
 8016908:	4b1a      	ldr	r3, [pc, #104]	@ (8016974 <tcp_input+0x80c>)
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801690e:	4b16      	ldr	r3, [pc, #88]	@ (8016968 <tcp_input+0x800>)
 8016910:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016912:	885b      	ldrh	r3, [r3, #2]
 8016914:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016916:	4a14      	ldr	r2, [pc, #80]	@ (8016968 <tcp_input+0x800>)
 8016918:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801691a:	8812      	ldrh	r2, [r2, #0]
 801691c:	b292      	uxth	r2, r2
 801691e:	9202      	str	r2, [sp, #8]
 8016920:	9301      	str	r3, [sp, #4]
 8016922:	4b15      	ldr	r3, [pc, #84]	@ (8016978 <tcp_input+0x810>)
 8016924:	9300      	str	r3, [sp, #0]
 8016926:	4b15      	ldr	r3, [pc, #84]	@ (801697c <tcp_input+0x814>)
 8016928:	4602      	mov	r2, r0
 801692a:	2000      	movs	r0, #0
 801692c:	f003 f816 	bl	801995c <tcp_rst>
    pbuf_free(p);
 8016930:	6878      	ldr	r0, [r7, #4]
 8016932:	f7fd fdd3 	bl	80144dc <pbuf_free>
  return;
 8016936:	e00c      	b.n	8016952 <tcp_input+0x7ea>
    goto dropped;
 8016938:	bf00      	nop
 801693a:	e006      	b.n	801694a <tcp_input+0x7e2>
    goto dropped;
 801693c:	bf00      	nop
 801693e:	e004      	b.n	801694a <tcp_input+0x7e2>
    goto dropped;
 8016940:	bf00      	nop
 8016942:	e002      	b.n	801694a <tcp_input+0x7e2>
      goto dropped;
 8016944:	bf00      	nop
 8016946:	e000      	b.n	801694a <tcp_input+0x7e2>
      goto dropped;
 8016948:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801694a:	6878      	ldr	r0, [r7, #4]
 801694c:	f7fd fdc6 	bl	80144dc <pbuf_free>
 8016950:	e000      	b.n	8016954 <tcp_input+0x7ec>
  return;
 8016952:	bf00      	nop
}
 8016954:	3724      	adds	r7, #36	@ 0x24
 8016956:	46bd      	mov	sp, r7
 8016958:	bd90      	pop	{r4, r7, pc}
 801695a:	bf00      	nop
 801695c:	200277fc 	.word	0x200277fc
 8016960:	200277f8 	.word	0x200277f8
 8016964:	200277c8 	.word	0x200277c8
 8016968:	200277d8 	.word	0x200277d8
 801696c:	200277ec 	.word	0x200277ec
 8016970:	200277f2 	.word	0x200277f2
 8016974:	200277e8 	.word	0x200277e8
 8016978:	200246c0 	.word	0x200246c0
 801697c:	200246c4 	.word	0x200246c4

08016980 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b082      	sub	sp, #8
 8016984:	af00      	add	r7, sp, #0
 8016986:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	2b00      	cmp	r3, #0
 801698c:	d106      	bne.n	801699c <tcp_input_delayed_close+0x1c>
 801698e:	4b17      	ldr	r3, [pc, #92]	@ (80169ec <tcp_input_delayed_close+0x6c>)
 8016990:	f240 225a 	movw	r2, #602	@ 0x25a
 8016994:	4916      	ldr	r1, [pc, #88]	@ (80169f0 <tcp_input_delayed_close+0x70>)
 8016996:	4817      	ldr	r0, [pc, #92]	@ (80169f4 <tcp_input_delayed_close+0x74>)
 8016998:	f007 fb9c 	bl	801e0d4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801699c:	4b16      	ldr	r3, [pc, #88]	@ (80169f8 <tcp_input_delayed_close+0x78>)
 801699e:	781b      	ldrb	r3, [r3, #0]
 80169a0:	f003 0310 	and.w	r3, r3, #16
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d01c      	beq.n	80169e2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	8b5b      	ldrh	r3, [r3, #26]
 80169ac:	f003 0310 	and.w	r3, r3, #16
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d10d      	bne.n	80169d0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d008      	beq.n	80169d0 <tcp_input_delayed_close+0x50>
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80169c4:	687a      	ldr	r2, [r7, #4]
 80169c6:	6912      	ldr	r2, [r2, #16]
 80169c8:	f06f 010e 	mvn.w	r1, #14
 80169cc:	4610      	mov	r0, r2
 80169ce:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80169d0:	6879      	ldr	r1, [r7, #4]
 80169d2:	480a      	ldr	r0, [pc, #40]	@ (80169fc <tcp_input_delayed_close+0x7c>)
 80169d4:	f7ff fa50 	bl	8015e78 <tcp_pcb_remove>
    tcp_free(pcb);
 80169d8:	6878      	ldr	r0, [r7, #4]
 80169da:	f7fe f83b 	bl	8014a54 <tcp_free>
    return 1;
 80169de:	2301      	movs	r3, #1
 80169e0:	e000      	b.n	80169e4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80169e2:	2300      	movs	r3, #0
}
 80169e4:	4618      	mov	r0, r3
 80169e6:	3708      	adds	r7, #8
 80169e8:	46bd      	mov	sp, r7
 80169ea:	bd80      	pop	{r7, pc}
 80169ec:	08020564 	.word	0x08020564
 80169f0:	08020734 	.word	0x08020734
 80169f4:	080205b0 	.word	0x080205b0
 80169f8:	200277f5 	.word	0x200277f5
 80169fc:	200277bc 	.word	0x200277bc

08016a00 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8016a00:	b590      	push	{r4, r7, lr}
 8016a02:	b08b      	sub	sp, #44	@ 0x2c
 8016a04:	af04      	add	r7, sp, #16
 8016a06:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8016a08:	4b6f      	ldr	r3, [pc, #444]	@ (8016bc8 <tcp_listen_input+0x1c8>)
 8016a0a:	781b      	ldrb	r3, [r3, #0]
 8016a0c:	f003 0304 	and.w	r3, r3, #4
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	f040 80d2 	bne.w	8016bba <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d106      	bne.n	8016a2a <tcp_listen_input+0x2a>
 8016a1c:	4b6b      	ldr	r3, [pc, #428]	@ (8016bcc <tcp_listen_input+0x1cc>)
 8016a1e:	f240 2281 	movw	r2, #641	@ 0x281
 8016a22:	496b      	ldr	r1, [pc, #428]	@ (8016bd0 <tcp_listen_input+0x1d0>)
 8016a24:	486b      	ldr	r0, [pc, #428]	@ (8016bd4 <tcp_listen_input+0x1d4>)
 8016a26:	f007 fb55 	bl	801e0d4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8016a2a:	4b67      	ldr	r3, [pc, #412]	@ (8016bc8 <tcp_listen_input+0x1c8>)
 8016a2c:	781b      	ldrb	r3, [r3, #0]
 8016a2e:	f003 0310 	and.w	r3, r3, #16
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d019      	beq.n	8016a6a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a36:	4b68      	ldr	r3, [pc, #416]	@ (8016bd8 <tcp_listen_input+0x1d8>)
 8016a38:	6819      	ldr	r1, [r3, #0]
 8016a3a:	4b68      	ldr	r3, [pc, #416]	@ (8016bdc <tcp_listen_input+0x1dc>)
 8016a3c:	881b      	ldrh	r3, [r3, #0]
 8016a3e:	461a      	mov	r2, r3
 8016a40:	4b67      	ldr	r3, [pc, #412]	@ (8016be0 <tcp_listen_input+0x1e0>)
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016a46:	4b67      	ldr	r3, [pc, #412]	@ (8016be4 <tcp_listen_input+0x1e4>)
 8016a48:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a4a:	885b      	ldrh	r3, [r3, #2]
 8016a4c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016a4e:	4a65      	ldr	r2, [pc, #404]	@ (8016be4 <tcp_listen_input+0x1e4>)
 8016a50:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a52:	8812      	ldrh	r2, [r2, #0]
 8016a54:	b292      	uxth	r2, r2
 8016a56:	9202      	str	r2, [sp, #8]
 8016a58:	9301      	str	r3, [sp, #4]
 8016a5a:	4b63      	ldr	r3, [pc, #396]	@ (8016be8 <tcp_listen_input+0x1e8>)
 8016a5c:	9300      	str	r3, [sp, #0]
 8016a5e:	4b63      	ldr	r3, [pc, #396]	@ (8016bec <tcp_listen_input+0x1ec>)
 8016a60:	4602      	mov	r2, r0
 8016a62:	6878      	ldr	r0, [r7, #4]
 8016a64:	f002 ff7a 	bl	801995c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8016a68:	e0a9      	b.n	8016bbe <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8016a6a:	4b57      	ldr	r3, [pc, #348]	@ (8016bc8 <tcp_listen_input+0x1c8>)
 8016a6c:	781b      	ldrb	r3, [r3, #0]
 8016a6e:	f003 0302 	and.w	r3, r3, #2
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	f000 80a3 	beq.w	8016bbe <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	7d5b      	ldrb	r3, [r3, #21]
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	f7ff f927 	bl	8015cd0 <tcp_alloc>
 8016a82:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8016a84:	697b      	ldr	r3, [r7, #20]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d111      	bne.n	8016aae <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	699b      	ldr	r3, [r3, #24]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d00a      	beq.n	8016aa8 <tcp_listen_input+0xa8>
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	699b      	ldr	r3, [r3, #24]
 8016a96:	687a      	ldr	r2, [r7, #4]
 8016a98:	6910      	ldr	r0, [r2, #16]
 8016a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8016a9e:	2100      	movs	r1, #0
 8016aa0:	4798      	blx	r3
 8016aa2:	4603      	mov	r3, r0
 8016aa4:	73bb      	strb	r3, [r7, #14]
      return;
 8016aa6:	e08b      	b.n	8016bc0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016aa8:	23f0      	movs	r3, #240	@ 0xf0
 8016aaa:	73bb      	strb	r3, [r7, #14]
      return;
 8016aac:	e088      	b.n	8016bc0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8016aae:	4b50      	ldr	r3, [pc, #320]	@ (8016bf0 <tcp_listen_input+0x1f0>)
 8016ab0:	695a      	ldr	r2, [r3, #20]
 8016ab2:	697b      	ldr	r3, [r7, #20]
 8016ab4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8016ab6:	4b4e      	ldr	r3, [pc, #312]	@ (8016bf0 <tcp_listen_input+0x1f0>)
 8016ab8:	691a      	ldr	r2, [r3, #16]
 8016aba:	697b      	ldr	r3, [r7, #20]
 8016abc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	8ada      	ldrh	r2, [r3, #22]
 8016ac2:	697b      	ldr	r3, [r7, #20]
 8016ac4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8016ac6:	4b47      	ldr	r3, [pc, #284]	@ (8016be4 <tcp_listen_input+0x1e4>)
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	881b      	ldrh	r3, [r3, #0]
 8016acc:	b29a      	uxth	r2, r3
 8016ace:	697b      	ldr	r3, [r7, #20]
 8016ad0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8016ad2:	697b      	ldr	r3, [r7, #20]
 8016ad4:	2203      	movs	r2, #3
 8016ad6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8016ad8:	4b41      	ldr	r3, [pc, #260]	@ (8016be0 <tcp_listen_input+0x1e0>)
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	1c5a      	adds	r2, r3, #1
 8016ade:	697b      	ldr	r3, [r7, #20]
 8016ae0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8016ae2:	697b      	ldr	r3, [r7, #20]
 8016ae4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016ae6:	697b      	ldr	r3, [r7, #20]
 8016ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8016aea:	6978      	ldr	r0, [r7, #20]
 8016aec:	f7ff fa58 	bl	8015fa0 <tcp_next_iss>
 8016af0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8016af2:	697b      	ldr	r3, [r7, #20]
 8016af4:	693a      	ldr	r2, [r7, #16]
 8016af6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8016af8:	697b      	ldr	r3, [r7, #20]
 8016afa:	693a      	ldr	r2, [r7, #16]
 8016afc:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8016afe:	697b      	ldr	r3, [r7, #20]
 8016b00:	693a      	ldr	r2, [r7, #16]
 8016b02:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8016b04:	697b      	ldr	r3, [r7, #20]
 8016b06:	693a      	ldr	r2, [r7, #16]
 8016b08:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8016b0a:	4b35      	ldr	r3, [pc, #212]	@ (8016be0 <tcp_listen_input+0x1e0>)
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	1e5a      	subs	r2, r3, #1
 8016b10:	697b      	ldr	r3, [r7, #20]
 8016b12:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	691a      	ldr	r2, [r3, #16]
 8016b18:	697b      	ldr	r3, [r7, #20]
 8016b1a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8016b1c:	697b      	ldr	r3, [r7, #20]
 8016b1e:	687a      	ldr	r2, [r7, #4]
 8016b20:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	7a5b      	ldrb	r3, [r3, #9]
 8016b26:	f003 030c 	and.w	r3, r3, #12
 8016b2a:	b2da      	uxtb	r2, r3
 8016b2c:	697b      	ldr	r3, [r7, #20]
 8016b2e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	7a1a      	ldrb	r2, [r3, #8]
 8016b34:	697b      	ldr	r3, [r7, #20]
 8016b36:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8016b38:	4b2e      	ldr	r3, [pc, #184]	@ (8016bf4 <tcp_listen_input+0x1f4>)
 8016b3a:	681a      	ldr	r2, [r3, #0]
 8016b3c:	697b      	ldr	r3, [r7, #20]
 8016b3e:	60da      	str	r2, [r3, #12]
 8016b40:	4a2c      	ldr	r2, [pc, #176]	@ (8016bf4 <tcp_listen_input+0x1f4>)
 8016b42:	697b      	ldr	r3, [r7, #20]
 8016b44:	6013      	str	r3, [r2, #0]
 8016b46:	f003 f8cb 	bl	8019ce0 <tcp_timer_needed>
 8016b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8016bf8 <tcp_listen_input+0x1f8>)
 8016b4c:	2201      	movs	r2, #1
 8016b4e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8016b50:	6978      	ldr	r0, [r7, #20]
 8016b52:	f001 fd8b 	bl	801866c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8016b56:	4b23      	ldr	r3, [pc, #140]	@ (8016be4 <tcp_listen_input+0x1e4>)
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	89db      	ldrh	r3, [r3, #14]
 8016b5c:	b29a      	uxth	r2, r3
 8016b5e:	697b      	ldr	r3, [r7, #20]
 8016b60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8016b64:	697b      	ldr	r3, [r7, #20]
 8016b66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016b6a:	697b      	ldr	r3, [r7, #20]
 8016b6c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8016b70:	697b      	ldr	r3, [r7, #20]
 8016b72:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8016b74:	697b      	ldr	r3, [r7, #20]
 8016b76:	3304      	adds	r3, #4
 8016b78:	4618      	mov	r0, r3
 8016b7a:	f004 ff6d 	bl	801ba58 <ip4_route>
 8016b7e:	4601      	mov	r1, r0
 8016b80:	697b      	ldr	r3, [r7, #20]
 8016b82:	3304      	adds	r3, #4
 8016b84:	461a      	mov	r2, r3
 8016b86:	4620      	mov	r0, r4
 8016b88:	f7ff fa30 	bl	8015fec <tcp_eff_send_mss_netif>
 8016b8c:	4603      	mov	r3, r0
 8016b8e:	461a      	mov	r2, r3
 8016b90:	697b      	ldr	r3, [r7, #20]
 8016b92:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8016b94:	2112      	movs	r1, #18
 8016b96:	6978      	ldr	r0, [r7, #20]
 8016b98:	f002 f83e 	bl	8018c18 <tcp_enqueue_flags>
 8016b9c:	4603      	mov	r3, r0
 8016b9e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8016ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d004      	beq.n	8016bb2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8016ba8:	2100      	movs	r1, #0
 8016baa:	6978      	ldr	r0, [r7, #20]
 8016bac:	f7fe f97c 	bl	8014ea8 <tcp_abandon>
      return;
 8016bb0:	e006      	b.n	8016bc0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8016bb2:	6978      	ldr	r0, [r7, #20]
 8016bb4:	f002 f91e 	bl	8018df4 <tcp_output>
  return;
 8016bb8:	e001      	b.n	8016bbe <tcp_listen_input+0x1be>
    return;
 8016bba:	bf00      	nop
 8016bbc:	e000      	b.n	8016bc0 <tcp_listen_input+0x1c0>
  return;
 8016bbe:	bf00      	nop
}
 8016bc0:	371c      	adds	r7, #28
 8016bc2:	46bd      	mov	sp, r7
 8016bc4:	bd90      	pop	{r4, r7, pc}
 8016bc6:	bf00      	nop
 8016bc8:	200277f4 	.word	0x200277f4
 8016bcc:	08020564 	.word	0x08020564
 8016bd0:	0802075c 	.word	0x0802075c
 8016bd4:	080205b0 	.word	0x080205b0
 8016bd8:	200277ec 	.word	0x200277ec
 8016bdc:	200277f2 	.word	0x200277f2
 8016be0:	200277e8 	.word	0x200277e8
 8016be4:	200277d8 	.word	0x200277d8
 8016be8:	200246c0 	.word	0x200246c0
 8016bec:	200246c4 	.word	0x200246c4
 8016bf0:	200246b0 	.word	0x200246b0
 8016bf4:	200277bc 	.word	0x200277bc
 8016bf8:	200277c4 	.word	0x200277c4

08016bfc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b086      	sub	sp, #24
 8016c00:	af04      	add	r7, sp, #16
 8016c02:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8016c04:	4b2f      	ldr	r3, [pc, #188]	@ (8016cc4 <tcp_timewait_input+0xc8>)
 8016c06:	781b      	ldrb	r3, [r3, #0]
 8016c08:	f003 0304 	and.w	r3, r3, #4
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d153      	bne.n	8016cb8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d106      	bne.n	8016c24 <tcp_timewait_input+0x28>
 8016c16:	4b2c      	ldr	r3, [pc, #176]	@ (8016cc8 <tcp_timewait_input+0xcc>)
 8016c18:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8016c1c:	492b      	ldr	r1, [pc, #172]	@ (8016ccc <tcp_timewait_input+0xd0>)
 8016c1e:	482c      	ldr	r0, [pc, #176]	@ (8016cd0 <tcp_timewait_input+0xd4>)
 8016c20:	f007 fa58 	bl	801e0d4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8016c24:	4b27      	ldr	r3, [pc, #156]	@ (8016cc4 <tcp_timewait_input+0xc8>)
 8016c26:	781b      	ldrb	r3, [r3, #0]
 8016c28:	f003 0302 	and.w	r3, r3, #2
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d02a      	beq.n	8016c86 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8016c30:	4b28      	ldr	r3, [pc, #160]	@ (8016cd4 <tcp_timewait_input+0xd8>)
 8016c32:	681a      	ldr	r2, [r3, #0]
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c38:	1ad3      	subs	r3, r2, r3
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	db2d      	blt.n	8016c9a <tcp_timewait_input+0x9e>
 8016c3e:	4b25      	ldr	r3, [pc, #148]	@ (8016cd4 <tcp_timewait_input+0xd8>)
 8016c40:	681a      	ldr	r2, [r3, #0]
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c46:	6879      	ldr	r1, [r7, #4]
 8016c48:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016c4a:	440b      	add	r3, r1
 8016c4c:	1ad3      	subs	r3, r2, r3
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	dc23      	bgt.n	8016c9a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016c52:	4b21      	ldr	r3, [pc, #132]	@ (8016cd8 <tcp_timewait_input+0xdc>)
 8016c54:	6819      	ldr	r1, [r3, #0]
 8016c56:	4b21      	ldr	r3, [pc, #132]	@ (8016cdc <tcp_timewait_input+0xe0>)
 8016c58:	881b      	ldrh	r3, [r3, #0]
 8016c5a:	461a      	mov	r2, r3
 8016c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8016cd4 <tcp_timewait_input+0xd8>)
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016c62:	4b1f      	ldr	r3, [pc, #124]	@ (8016ce0 <tcp_timewait_input+0xe4>)
 8016c64:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016c66:	885b      	ldrh	r3, [r3, #2]
 8016c68:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016c6a:	4a1d      	ldr	r2, [pc, #116]	@ (8016ce0 <tcp_timewait_input+0xe4>)
 8016c6c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016c6e:	8812      	ldrh	r2, [r2, #0]
 8016c70:	b292      	uxth	r2, r2
 8016c72:	9202      	str	r2, [sp, #8]
 8016c74:	9301      	str	r3, [sp, #4]
 8016c76:	4b1b      	ldr	r3, [pc, #108]	@ (8016ce4 <tcp_timewait_input+0xe8>)
 8016c78:	9300      	str	r3, [sp, #0]
 8016c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8016ce8 <tcp_timewait_input+0xec>)
 8016c7c:	4602      	mov	r2, r0
 8016c7e:	6878      	ldr	r0, [r7, #4]
 8016c80:	f002 fe6c 	bl	801995c <tcp_rst>
      return;
 8016c84:	e01b      	b.n	8016cbe <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8016c86:	4b0f      	ldr	r3, [pc, #60]	@ (8016cc4 <tcp_timewait_input+0xc8>)
 8016c88:	781b      	ldrb	r3, [r3, #0]
 8016c8a:	f003 0301 	and.w	r3, r3, #1
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d003      	beq.n	8016c9a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8016c92:	4b16      	ldr	r3, [pc, #88]	@ (8016cec <tcp_timewait_input+0xf0>)
 8016c94:	681a      	ldr	r2, [r3, #0]
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8016c9a:	4b10      	ldr	r3, [pc, #64]	@ (8016cdc <tcp_timewait_input+0xe0>)
 8016c9c:	881b      	ldrh	r3, [r3, #0]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d00c      	beq.n	8016cbc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	8b5b      	ldrh	r3, [r3, #26]
 8016ca6:	f043 0302 	orr.w	r3, r3, #2
 8016caa:	b29a      	uxth	r2, r3
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016cb0:	6878      	ldr	r0, [r7, #4]
 8016cb2:	f002 f89f 	bl	8018df4 <tcp_output>
  }
  return;
 8016cb6:	e001      	b.n	8016cbc <tcp_timewait_input+0xc0>
    return;
 8016cb8:	bf00      	nop
 8016cba:	e000      	b.n	8016cbe <tcp_timewait_input+0xc2>
  return;
 8016cbc:	bf00      	nop
}
 8016cbe:	3708      	adds	r7, #8
 8016cc0:	46bd      	mov	sp, r7
 8016cc2:	bd80      	pop	{r7, pc}
 8016cc4:	200277f4 	.word	0x200277f4
 8016cc8:	08020564 	.word	0x08020564
 8016ccc:	0802077c 	.word	0x0802077c
 8016cd0:	080205b0 	.word	0x080205b0
 8016cd4:	200277e8 	.word	0x200277e8
 8016cd8:	200277ec 	.word	0x200277ec
 8016cdc:	200277f2 	.word	0x200277f2
 8016ce0:	200277d8 	.word	0x200277d8
 8016ce4:	200246c0 	.word	0x200246c0
 8016ce8:	200246c4 	.word	0x200246c4
 8016cec:	200277b0 	.word	0x200277b0

08016cf0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8016cf0:	b590      	push	{r4, r7, lr}
 8016cf2:	b08d      	sub	sp, #52	@ 0x34
 8016cf4:	af04      	add	r7, sp, #16
 8016cf6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d106      	bne.n	8016d14 <tcp_process+0x24>
 8016d06:	4b9d      	ldr	r3, [pc, #628]	@ (8016f7c <tcp_process+0x28c>)
 8016d08:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8016d0c:	499c      	ldr	r1, [pc, #624]	@ (8016f80 <tcp_process+0x290>)
 8016d0e:	489d      	ldr	r0, [pc, #628]	@ (8016f84 <tcp_process+0x294>)
 8016d10:	f007 f9e0 	bl	801e0d4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8016d14:	4b9c      	ldr	r3, [pc, #624]	@ (8016f88 <tcp_process+0x298>)
 8016d16:	781b      	ldrb	r3, [r3, #0]
 8016d18:	f003 0304 	and.w	r3, r3, #4
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d04e      	beq.n	8016dbe <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	7d1b      	ldrb	r3, [r3, #20]
 8016d24:	2b02      	cmp	r3, #2
 8016d26:	d108      	bne.n	8016d3a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016d2c:	4b97      	ldr	r3, [pc, #604]	@ (8016f8c <tcp_process+0x29c>)
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	429a      	cmp	r2, r3
 8016d32:	d123      	bne.n	8016d7c <tcp_process+0x8c>
        acceptable = 1;
 8016d34:	2301      	movs	r3, #1
 8016d36:	76fb      	strb	r3, [r7, #27]
 8016d38:	e020      	b.n	8016d7c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016d3e:	4b94      	ldr	r3, [pc, #592]	@ (8016f90 <tcp_process+0x2a0>)
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	429a      	cmp	r2, r3
 8016d44:	d102      	bne.n	8016d4c <tcp_process+0x5c>
        acceptable = 1;
 8016d46:	2301      	movs	r3, #1
 8016d48:	76fb      	strb	r3, [r7, #27]
 8016d4a:	e017      	b.n	8016d7c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016d4c:	4b90      	ldr	r3, [pc, #576]	@ (8016f90 <tcp_process+0x2a0>)
 8016d4e:	681a      	ldr	r2, [r3, #0]
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d54:	1ad3      	subs	r3, r2, r3
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	db10      	blt.n	8016d7c <tcp_process+0x8c>
 8016d5a:	4b8d      	ldr	r3, [pc, #564]	@ (8016f90 <tcp_process+0x2a0>)
 8016d5c:	681a      	ldr	r2, [r3, #0]
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d62:	6879      	ldr	r1, [r7, #4]
 8016d64:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016d66:	440b      	add	r3, r1
 8016d68:	1ad3      	subs	r3, r2, r3
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	dc06      	bgt.n	8016d7c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	8b5b      	ldrh	r3, [r3, #26]
 8016d72:	f043 0302 	orr.w	r3, r3, #2
 8016d76:	b29a      	uxth	r2, r3
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8016d7c:	7efb      	ldrb	r3, [r7, #27]
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d01b      	beq.n	8016dba <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	7d1b      	ldrb	r3, [r3, #20]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d106      	bne.n	8016d98 <tcp_process+0xa8>
 8016d8a:	4b7c      	ldr	r3, [pc, #496]	@ (8016f7c <tcp_process+0x28c>)
 8016d8c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8016d90:	4980      	ldr	r1, [pc, #512]	@ (8016f94 <tcp_process+0x2a4>)
 8016d92:	487c      	ldr	r0, [pc, #496]	@ (8016f84 <tcp_process+0x294>)
 8016d94:	f007 f99e 	bl	801e0d4 <iprintf>
      recv_flags |= TF_RESET;
 8016d98:	4b7f      	ldr	r3, [pc, #508]	@ (8016f98 <tcp_process+0x2a8>)
 8016d9a:	781b      	ldrb	r3, [r3, #0]
 8016d9c:	f043 0308 	orr.w	r3, r3, #8
 8016da0:	b2da      	uxtb	r2, r3
 8016da2:	4b7d      	ldr	r3, [pc, #500]	@ (8016f98 <tcp_process+0x2a8>)
 8016da4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	8b5b      	ldrh	r3, [r3, #26]
 8016daa:	f023 0301 	bic.w	r3, r3, #1
 8016dae:	b29a      	uxth	r2, r3
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8016db4:	f06f 030d 	mvn.w	r3, #13
 8016db8:	e37a      	b.n	80174b0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8016dba:	2300      	movs	r3, #0
 8016dbc:	e378      	b.n	80174b0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8016dbe:	4b72      	ldr	r3, [pc, #456]	@ (8016f88 <tcp_process+0x298>)
 8016dc0:	781b      	ldrb	r3, [r3, #0]
 8016dc2:	f003 0302 	and.w	r3, r3, #2
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d010      	beq.n	8016dec <tcp_process+0xfc>
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	7d1b      	ldrb	r3, [r3, #20]
 8016dce:	2b02      	cmp	r3, #2
 8016dd0:	d00c      	beq.n	8016dec <tcp_process+0xfc>
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	7d1b      	ldrb	r3, [r3, #20]
 8016dd6:	2b03      	cmp	r3, #3
 8016dd8:	d008      	beq.n	8016dec <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	8b5b      	ldrh	r3, [r3, #26]
 8016dde:	f043 0302 	orr.w	r3, r3, #2
 8016de2:	b29a      	uxth	r2, r3
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8016de8:	2300      	movs	r3, #0
 8016dea:	e361      	b.n	80174b0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	8b5b      	ldrh	r3, [r3, #26]
 8016df0:	f003 0310 	and.w	r3, r3, #16
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d103      	bne.n	8016e00 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8016df8:	4b68      	ldr	r3, [pc, #416]	@ (8016f9c <tcp_process+0x2ac>)
 8016dfa:	681a      	ldr	r2, [r3, #0]
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	2200      	movs	r2, #0
 8016e04:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	2200      	movs	r2, #0
 8016e0c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8016e10:	6878      	ldr	r0, [r7, #4]
 8016e12:	f001 fc2b 	bl	801866c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	7d1b      	ldrb	r3, [r3, #20]
 8016e1a:	3b02      	subs	r3, #2
 8016e1c:	2b07      	cmp	r3, #7
 8016e1e:	f200 8337 	bhi.w	8017490 <tcp_process+0x7a0>
 8016e22:	a201      	add	r2, pc, #4	@ (adr r2, 8016e28 <tcp_process+0x138>)
 8016e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e28:	08016e49 	.word	0x08016e49
 8016e2c:	08017079 	.word	0x08017079
 8016e30:	080171f1 	.word	0x080171f1
 8016e34:	0801721b 	.word	0x0801721b
 8016e38:	0801733f 	.word	0x0801733f
 8016e3c:	080171f1 	.word	0x080171f1
 8016e40:	080173cb 	.word	0x080173cb
 8016e44:	0801745b 	.word	0x0801745b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8016e48:	4b4f      	ldr	r3, [pc, #316]	@ (8016f88 <tcp_process+0x298>)
 8016e4a:	781b      	ldrb	r3, [r3, #0]
 8016e4c:	f003 0310 	and.w	r3, r3, #16
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	f000 80e4 	beq.w	801701e <tcp_process+0x32e>
 8016e56:	4b4c      	ldr	r3, [pc, #304]	@ (8016f88 <tcp_process+0x298>)
 8016e58:	781b      	ldrb	r3, [r3, #0]
 8016e5a:	f003 0302 	and.w	r3, r3, #2
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	f000 80dd 	beq.w	801701e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016e68:	1c5a      	adds	r2, r3, #1
 8016e6a:	4b48      	ldr	r3, [pc, #288]	@ (8016f8c <tcp_process+0x29c>)
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	429a      	cmp	r2, r3
 8016e70:	f040 80d5 	bne.w	801701e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8016e74:	4b46      	ldr	r3, [pc, #280]	@ (8016f90 <tcp_process+0x2a0>)
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	1c5a      	adds	r2, r3, #1
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8016e86:	4b41      	ldr	r3, [pc, #260]	@ (8016f8c <tcp_process+0x29c>)
 8016e88:	681a      	ldr	r2, [r3, #0]
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8016e8e:	4b44      	ldr	r3, [pc, #272]	@ (8016fa0 <tcp_process+0x2b0>)
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	89db      	ldrh	r3, [r3, #14]
 8016e94:	b29a      	uxth	r2, r3
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8016ea8:	4b39      	ldr	r3, [pc, #228]	@ (8016f90 <tcp_process+0x2a0>)
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	1e5a      	subs	r2, r3, #1
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	2204      	movs	r2, #4
 8016eb6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	3304      	adds	r3, #4
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	f004 fdc9 	bl	801ba58 <ip4_route>
 8016ec6:	4601      	mov	r1, r0
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	3304      	adds	r3, #4
 8016ecc:	461a      	mov	r2, r3
 8016ece:	4620      	mov	r0, r4
 8016ed0:	f7ff f88c 	bl	8015fec <tcp_eff_send_mss_netif>
 8016ed4:	4603      	mov	r3, r0
 8016ed6:	461a      	mov	r2, r3
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016ee0:	009a      	lsls	r2, r3, #2
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016ee6:	005b      	lsls	r3, r3, #1
 8016ee8:	f241 111c 	movw	r1, #4380	@ 0x111c
 8016eec:	428b      	cmp	r3, r1
 8016eee:	bf38      	it	cc
 8016ef0:	460b      	movcc	r3, r1
 8016ef2:	429a      	cmp	r2, r3
 8016ef4:	d204      	bcs.n	8016f00 <tcp_process+0x210>
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016efa:	009b      	lsls	r3, r3, #2
 8016efc:	b29b      	uxth	r3, r3
 8016efe:	e00d      	b.n	8016f1c <tcp_process+0x22c>
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016f04:	005b      	lsls	r3, r3, #1
 8016f06:	f241 121c 	movw	r2, #4380	@ 0x111c
 8016f0a:	4293      	cmp	r3, r2
 8016f0c:	d904      	bls.n	8016f18 <tcp_process+0x228>
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016f12:	005b      	lsls	r3, r3, #1
 8016f14:	b29b      	uxth	r3, r3
 8016f16:	e001      	b.n	8016f1c <tcp_process+0x22c>
 8016f18:	f241 131c 	movw	r3, #4380	@ 0x111c
 8016f1c:	687a      	ldr	r2, [r7, #4]
 8016f1e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d106      	bne.n	8016f3a <tcp_process+0x24a>
 8016f2c:	4b13      	ldr	r3, [pc, #76]	@ (8016f7c <tcp_process+0x28c>)
 8016f2e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8016f32:	491c      	ldr	r1, [pc, #112]	@ (8016fa4 <tcp_process+0x2b4>)
 8016f34:	4813      	ldr	r0, [pc, #76]	@ (8016f84 <tcp_process+0x294>)
 8016f36:	f007 f8cd 	bl	801e0d4 <iprintf>
        --pcb->snd_queuelen;
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016f40:	3b01      	subs	r3, #1
 8016f42:	b29a      	uxth	r2, r3
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016f4e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8016f50:	69fb      	ldr	r3, [r7, #28]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d12a      	bne.n	8016fac <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016f5a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8016f5c:	69fb      	ldr	r3, [r7, #28]
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d106      	bne.n	8016f70 <tcp_process+0x280>
 8016f62:	4b06      	ldr	r3, [pc, #24]	@ (8016f7c <tcp_process+0x28c>)
 8016f64:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8016f68:	490f      	ldr	r1, [pc, #60]	@ (8016fa8 <tcp_process+0x2b8>)
 8016f6a:	4806      	ldr	r0, [pc, #24]	@ (8016f84 <tcp_process+0x294>)
 8016f6c:	f007 f8b2 	bl	801e0d4 <iprintf>
          pcb->unsent = rseg->next;
 8016f70:	69fb      	ldr	r3, [r7, #28]
 8016f72:	681a      	ldr	r2, [r3, #0]
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016f78:	e01c      	b.n	8016fb4 <tcp_process+0x2c4>
 8016f7a:	bf00      	nop
 8016f7c:	08020564 	.word	0x08020564
 8016f80:	0802079c 	.word	0x0802079c
 8016f84:	080205b0 	.word	0x080205b0
 8016f88:	200277f4 	.word	0x200277f4
 8016f8c:	200277ec 	.word	0x200277ec
 8016f90:	200277e8 	.word	0x200277e8
 8016f94:	080207b8 	.word	0x080207b8
 8016f98:	200277f5 	.word	0x200277f5
 8016f9c:	200277b0 	.word	0x200277b0
 8016fa0:	200277d8 	.word	0x200277d8
 8016fa4:	080207d8 	.word	0x080207d8
 8016fa8:	080207f0 	.word	0x080207f0
        } else {
          pcb->unacked = rseg->next;
 8016fac:	69fb      	ldr	r3, [r7, #28]
 8016fae:	681a      	ldr	r2, [r3, #0]
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8016fb4:	69f8      	ldr	r0, [r7, #28]
 8016fb6:	f7fe fd22 	bl	80159fe <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d104      	bne.n	8016fcc <tcp_process+0x2dc>
          pcb->rtime = -1;
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016fc8:	861a      	strh	r2, [r3, #48]	@ 0x30
 8016fca:	e006      	b.n	8016fda <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	2200      	movs	r2, #0
 8016fd0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	2200      	movs	r2, #0
 8016fd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d00a      	beq.n	8016ffa <tcp_process+0x30a>
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016fea:	687a      	ldr	r2, [r7, #4]
 8016fec:	6910      	ldr	r0, [r2, #16]
 8016fee:	2200      	movs	r2, #0
 8016ff0:	6879      	ldr	r1, [r7, #4]
 8016ff2:	4798      	blx	r3
 8016ff4:	4603      	mov	r3, r0
 8016ff6:	76bb      	strb	r3, [r7, #26]
 8016ff8:	e001      	b.n	8016ffe <tcp_process+0x30e>
 8016ffa:	2300      	movs	r3, #0
 8016ffc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8016ffe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017002:	f113 0f0d 	cmn.w	r3, #13
 8017006:	d102      	bne.n	801700e <tcp_process+0x31e>
          return ERR_ABRT;
 8017008:	f06f 030c 	mvn.w	r3, #12
 801700c:	e250      	b.n	80174b0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	8b5b      	ldrh	r3, [r3, #26]
 8017012:	f043 0302 	orr.w	r3, r3, #2
 8017016:	b29a      	uxth	r2, r3
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801701c:	e23a      	b.n	8017494 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801701e:	4b98      	ldr	r3, [pc, #608]	@ (8017280 <tcp_process+0x590>)
 8017020:	781b      	ldrb	r3, [r3, #0]
 8017022:	f003 0310 	and.w	r3, r3, #16
 8017026:	2b00      	cmp	r3, #0
 8017028:	f000 8234 	beq.w	8017494 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801702c:	4b95      	ldr	r3, [pc, #596]	@ (8017284 <tcp_process+0x594>)
 801702e:	6819      	ldr	r1, [r3, #0]
 8017030:	4b95      	ldr	r3, [pc, #596]	@ (8017288 <tcp_process+0x598>)
 8017032:	881b      	ldrh	r3, [r3, #0]
 8017034:	461a      	mov	r2, r3
 8017036:	4b95      	ldr	r3, [pc, #596]	@ (801728c <tcp_process+0x59c>)
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801703c:	4b94      	ldr	r3, [pc, #592]	@ (8017290 <tcp_process+0x5a0>)
 801703e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017040:	885b      	ldrh	r3, [r3, #2]
 8017042:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017044:	4a92      	ldr	r2, [pc, #584]	@ (8017290 <tcp_process+0x5a0>)
 8017046:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017048:	8812      	ldrh	r2, [r2, #0]
 801704a:	b292      	uxth	r2, r2
 801704c:	9202      	str	r2, [sp, #8]
 801704e:	9301      	str	r3, [sp, #4]
 8017050:	4b90      	ldr	r3, [pc, #576]	@ (8017294 <tcp_process+0x5a4>)
 8017052:	9300      	str	r3, [sp, #0]
 8017054:	4b90      	ldr	r3, [pc, #576]	@ (8017298 <tcp_process+0x5a8>)
 8017056:	4602      	mov	r2, r0
 8017058:	6878      	ldr	r0, [r7, #4]
 801705a:	f002 fc7f 	bl	801995c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017064:	2b05      	cmp	r3, #5
 8017066:	f200 8215 	bhi.w	8017494 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	2200      	movs	r2, #0
 801706e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8017070:	6878      	ldr	r0, [r7, #4]
 8017072:	f002 fa4b 	bl	801950c <tcp_rexmit_rto>
      break;
 8017076:	e20d      	b.n	8017494 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017078:	4b81      	ldr	r3, [pc, #516]	@ (8017280 <tcp_process+0x590>)
 801707a:	781b      	ldrb	r3, [r3, #0]
 801707c:	f003 0310 	and.w	r3, r3, #16
 8017080:	2b00      	cmp	r3, #0
 8017082:	f000 80a1 	beq.w	80171c8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017086:	4b7f      	ldr	r3, [pc, #508]	@ (8017284 <tcp_process+0x594>)
 8017088:	681a      	ldr	r2, [r3, #0]
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801708e:	1ad3      	subs	r3, r2, r3
 8017090:	3b01      	subs	r3, #1
 8017092:	2b00      	cmp	r3, #0
 8017094:	db7e      	blt.n	8017194 <tcp_process+0x4a4>
 8017096:	4b7b      	ldr	r3, [pc, #492]	@ (8017284 <tcp_process+0x594>)
 8017098:	681a      	ldr	r2, [r3, #0]
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801709e:	1ad3      	subs	r3, r2, r3
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	dc77      	bgt.n	8017194 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	2204      	movs	r2, #4
 80170a8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d102      	bne.n	80170b8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80170b2:	23fa      	movs	r3, #250	@ 0xfa
 80170b4:	76bb      	strb	r3, [r7, #26]
 80170b6:	e01d      	b.n	80170f4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80170bc:	699b      	ldr	r3, [r3, #24]
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d106      	bne.n	80170d0 <tcp_process+0x3e0>
 80170c2:	4b76      	ldr	r3, [pc, #472]	@ (801729c <tcp_process+0x5ac>)
 80170c4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80170c8:	4975      	ldr	r1, [pc, #468]	@ (80172a0 <tcp_process+0x5b0>)
 80170ca:	4876      	ldr	r0, [pc, #472]	@ (80172a4 <tcp_process+0x5b4>)
 80170cc:	f007 f802 	bl	801e0d4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80170d4:	699b      	ldr	r3, [r3, #24]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d00a      	beq.n	80170f0 <tcp_process+0x400>
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80170de:	699b      	ldr	r3, [r3, #24]
 80170e0:	687a      	ldr	r2, [r7, #4]
 80170e2:	6910      	ldr	r0, [r2, #16]
 80170e4:	2200      	movs	r2, #0
 80170e6:	6879      	ldr	r1, [r7, #4]
 80170e8:	4798      	blx	r3
 80170ea:	4603      	mov	r3, r0
 80170ec:	76bb      	strb	r3, [r7, #26]
 80170ee:	e001      	b.n	80170f4 <tcp_process+0x404>
 80170f0:	23f0      	movs	r3, #240	@ 0xf0
 80170f2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80170f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d00a      	beq.n	8017112 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80170fc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017100:	f113 0f0d 	cmn.w	r3, #13
 8017104:	d002      	beq.n	801710c <tcp_process+0x41c>
              tcp_abort(pcb);
 8017106:	6878      	ldr	r0, [r7, #4]
 8017108:	f7fd ff8c 	bl	8015024 <tcp_abort>
            }
            return ERR_ABRT;
 801710c:	f06f 030c 	mvn.w	r3, #12
 8017110:	e1ce      	b.n	80174b0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8017112:	6878      	ldr	r0, [r7, #4]
 8017114:	f000 fae0 	bl	80176d8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8017118:	4b63      	ldr	r3, [pc, #396]	@ (80172a8 <tcp_process+0x5b8>)
 801711a:	881b      	ldrh	r3, [r3, #0]
 801711c:	2b00      	cmp	r3, #0
 801711e:	d005      	beq.n	801712c <tcp_process+0x43c>
            recv_acked--;
 8017120:	4b61      	ldr	r3, [pc, #388]	@ (80172a8 <tcp_process+0x5b8>)
 8017122:	881b      	ldrh	r3, [r3, #0]
 8017124:	3b01      	subs	r3, #1
 8017126:	b29a      	uxth	r2, r3
 8017128:	4b5f      	ldr	r3, [pc, #380]	@ (80172a8 <tcp_process+0x5b8>)
 801712a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017130:	009a      	lsls	r2, r3, #2
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017136:	005b      	lsls	r3, r3, #1
 8017138:	f241 111c 	movw	r1, #4380	@ 0x111c
 801713c:	428b      	cmp	r3, r1
 801713e:	bf38      	it	cc
 8017140:	460b      	movcc	r3, r1
 8017142:	429a      	cmp	r2, r3
 8017144:	d204      	bcs.n	8017150 <tcp_process+0x460>
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801714a:	009b      	lsls	r3, r3, #2
 801714c:	b29b      	uxth	r3, r3
 801714e:	e00d      	b.n	801716c <tcp_process+0x47c>
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017154:	005b      	lsls	r3, r3, #1
 8017156:	f241 121c 	movw	r2, #4380	@ 0x111c
 801715a:	4293      	cmp	r3, r2
 801715c:	d904      	bls.n	8017168 <tcp_process+0x478>
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017162:	005b      	lsls	r3, r3, #1
 8017164:	b29b      	uxth	r3, r3
 8017166:	e001      	b.n	801716c <tcp_process+0x47c>
 8017168:	f241 131c 	movw	r3, #4380	@ 0x111c
 801716c:	687a      	ldr	r2, [r7, #4]
 801716e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8017172:	4b4e      	ldr	r3, [pc, #312]	@ (80172ac <tcp_process+0x5bc>)
 8017174:	781b      	ldrb	r3, [r3, #0]
 8017176:	f003 0320 	and.w	r3, r3, #32
 801717a:	2b00      	cmp	r3, #0
 801717c:	d037      	beq.n	80171ee <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	8b5b      	ldrh	r3, [r3, #26]
 8017182:	f043 0302 	orr.w	r3, r3, #2
 8017186:	b29a      	uxth	r2, r3
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	2207      	movs	r2, #7
 8017190:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8017192:	e02c      	b.n	80171ee <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017194:	4b3b      	ldr	r3, [pc, #236]	@ (8017284 <tcp_process+0x594>)
 8017196:	6819      	ldr	r1, [r3, #0]
 8017198:	4b3b      	ldr	r3, [pc, #236]	@ (8017288 <tcp_process+0x598>)
 801719a:	881b      	ldrh	r3, [r3, #0]
 801719c:	461a      	mov	r2, r3
 801719e:	4b3b      	ldr	r3, [pc, #236]	@ (801728c <tcp_process+0x59c>)
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80171a4:	4b3a      	ldr	r3, [pc, #232]	@ (8017290 <tcp_process+0x5a0>)
 80171a6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80171a8:	885b      	ldrh	r3, [r3, #2]
 80171aa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80171ac:	4a38      	ldr	r2, [pc, #224]	@ (8017290 <tcp_process+0x5a0>)
 80171ae:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80171b0:	8812      	ldrh	r2, [r2, #0]
 80171b2:	b292      	uxth	r2, r2
 80171b4:	9202      	str	r2, [sp, #8]
 80171b6:	9301      	str	r3, [sp, #4]
 80171b8:	4b36      	ldr	r3, [pc, #216]	@ (8017294 <tcp_process+0x5a4>)
 80171ba:	9300      	str	r3, [sp, #0]
 80171bc:	4b36      	ldr	r3, [pc, #216]	@ (8017298 <tcp_process+0x5a8>)
 80171be:	4602      	mov	r2, r0
 80171c0:	6878      	ldr	r0, [r7, #4]
 80171c2:	f002 fbcb 	bl	801995c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80171c6:	e167      	b.n	8017498 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80171c8:	4b2d      	ldr	r3, [pc, #180]	@ (8017280 <tcp_process+0x590>)
 80171ca:	781b      	ldrb	r3, [r3, #0]
 80171cc:	f003 0302 	and.w	r3, r3, #2
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	f000 8161 	beq.w	8017498 <tcp_process+0x7a8>
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171da:	1e5a      	subs	r2, r3, #1
 80171dc:	4b2b      	ldr	r3, [pc, #172]	@ (801728c <tcp_process+0x59c>)
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	429a      	cmp	r2, r3
 80171e2:	f040 8159 	bne.w	8017498 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80171e6:	6878      	ldr	r0, [r7, #4]
 80171e8:	f002 f9b2 	bl	8019550 <tcp_rexmit>
      break;
 80171ec:	e154      	b.n	8017498 <tcp_process+0x7a8>
 80171ee:	e153      	b.n	8017498 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80171f0:	6878      	ldr	r0, [r7, #4]
 80171f2:	f000 fa71 	bl	80176d8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80171f6:	4b2d      	ldr	r3, [pc, #180]	@ (80172ac <tcp_process+0x5bc>)
 80171f8:	781b      	ldrb	r3, [r3, #0]
 80171fa:	f003 0320 	and.w	r3, r3, #32
 80171fe:	2b00      	cmp	r3, #0
 8017200:	f000 814c 	beq.w	801749c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	8b5b      	ldrh	r3, [r3, #26]
 8017208:	f043 0302 	orr.w	r3, r3, #2
 801720c:	b29a      	uxth	r2, r3
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	2207      	movs	r2, #7
 8017216:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017218:	e140      	b.n	801749c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801721a:	6878      	ldr	r0, [r7, #4]
 801721c:	f000 fa5c 	bl	80176d8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017220:	4b22      	ldr	r3, [pc, #136]	@ (80172ac <tcp_process+0x5bc>)
 8017222:	781b      	ldrb	r3, [r3, #0]
 8017224:	f003 0320 	and.w	r3, r3, #32
 8017228:	2b00      	cmp	r3, #0
 801722a:	d071      	beq.n	8017310 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801722c:	4b14      	ldr	r3, [pc, #80]	@ (8017280 <tcp_process+0x590>)
 801722e:	781b      	ldrb	r3, [r3, #0]
 8017230:	f003 0310 	and.w	r3, r3, #16
 8017234:	2b00      	cmp	r3, #0
 8017236:	d060      	beq.n	80172fa <tcp_process+0x60a>
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801723c:	4b11      	ldr	r3, [pc, #68]	@ (8017284 <tcp_process+0x594>)
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	429a      	cmp	r2, r3
 8017242:	d15a      	bne.n	80172fa <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017248:	2b00      	cmp	r3, #0
 801724a:	d156      	bne.n	80172fa <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	8b5b      	ldrh	r3, [r3, #26]
 8017250:	f043 0302 	orr.w	r3, r3, #2
 8017254:	b29a      	uxth	r2, r3
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801725a:	6878      	ldr	r0, [r7, #4]
 801725c:	f7fe fdbc 	bl	8015dd8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8017260:	4b13      	ldr	r3, [pc, #76]	@ (80172b0 <tcp_process+0x5c0>)
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	687a      	ldr	r2, [r7, #4]
 8017266:	429a      	cmp	r2, r3
 8017268:	d105      	bne.n	8017276 <tcp_process+0x586>
 801726a:	4b11      	ldr	r3, [pc, #68]	@ (80172b0 <tcp_process+0x5c0>)
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	68db      	ldr	r3, [r3, #12]
 8017270:	4a0f      	ldr	r2, [pc, #60]	@ (80172b0 <tcp_process+0x5c0>)
 8017272:	6013      	str	r3, [r2, #0]
 8017274:	e02e      	b.n	80172d4 <tcp_process+0x5e4>
 8017276:	4b0e      	ldr	r3, [pc, #56]	@ (80172b0 <tcp_process+0x5c0>)
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	617b      	str	r3, [r7, #20]
 801727c:	e027      	b.n	80172ce <tcp_process+0x5de>
 801727e:	bf00      	nop
 8017280:	200277f4 	.word	0x200277f4
 8017284:	200277ec 	.word	0x200277ec
 8017288:	200277f2 	.word	0x200277f2
 801728c:	200277e8 	.word	0x200277e8
 8017290:	200277d8 	.word	0x200277d8
 8017294:	200246c0 	.word	0x200246c0
 8017298:	200246c4 	.word	0x200246c4
 801729c:	08020564 	.word	0x08020564
 80172a0:	08020804 	.word	0x08020804
 80172a4:	080205b0 	.word	0x080205b0
 80172a8:	200277f0 	.word	0x200277f0
 80172ac:	200277f5 	.word	0x200277f5
 80172b0:	200277bc 	.word	0x200277bc
 80172b4:	697b      	ldr	r3, [r7, #20]
 80172b6:	68db      	ldr	r3, [r3, #12]
 80172b8:	687a      	ldr	r2, [r7, #4]
 80172ba:	429a      	cmp	r2, r3
 80172bc:	d104      	bne.n	80172c8 <tcp_process+0x5d8>
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	68da      	ldr	r2, [r3, #12]
 80172c2:	697b      	ldr	r3, [r7, #20]
 80172c4:	60da      	str	r2, [r3, #12]
 80172c6:	e005      	b.n	80172d4 <tcp_process+0x5e4>
 80172c8:	697b      	ldr	r3, [r7, #20]
 80172ca:	68db      	ldr	r3, [r3, #12]
 80172cc:	617b      	str	r3, [r7, #20]
 80172ce:	697b      	ldr	r3, [r7, #20]
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d1ef      	bne.n	80172b4 <tcp_process+0x5c4>
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	2200      	movs	r2, #0
 80172d8:	60da      	str	r2, [r3, #12]
 80172da:	4b77      	ldr	r3, [pc, #476]	@ (80174b8 <tcp_process+0x7c8>)
 80172dc:	2201      	movs	r2, #1
 80172de:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	220a      	movs	r2, #10
 80172e4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80172e6:	4b75      	ldr	r3, [pc, #468]	@ (80174bc <tcp_process+0x7cc>)
 80172e8:	681a      	ldr	r2, [r3, #0]
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	60da      	str	r2, [r3, #12]
 80172ee:	4a73      	ldr	r2, [pc, #460]	@ (80174bc <tcp_process+0x7cc>)
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	6013      	str	r3, [r2, #0]
 80172f4:	f002 fcf4 	bl	8019ce0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80172f8:	e0d2      	b.n	80174a0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	8b5b      	ldrh	r3, [r3, #26]
 80172fe:	f043 0302 	orr.w	r3, r3, #2
 8017302:	b29a      	uxth	r2, r3
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	2208      	movs	r2, #8
 801730c:	751a      	strb	r2, [r3, #20]
      break;
 801730e:	e0c7      	b.n	80174a0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017310:	4b6b      	ldr	r3, [pc, #428]	@ (80174c0 <tcp_process+0x7d0>)
 8017312:	781b      	ldrb	r3, [r3, #0]
 8017314:	f003 0310 	and.w	r3, r3, #16
 8017318:	2b00      	cmp	r3, #0
 801731a:	f000 80c1 	beq.w	80174a0 <tcp_process+0x7b0>
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017322:	4b68      	ldr	r3, [pc, #416]	@ (80174c4 <tcp_process+0x7d4>)
 8017324:	681b      	ldr	r3, [r3, #0]
 8017326:	429a      	cmp	r2, r3
 8017328:	f040 80ba 	bne.w	80174a0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017330:	2b00      	cmp	r3, #0
 8017332:	f040 80b5 	bne.w	80174a0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	2206      	movs	r2, #6
 801733a:	751a      	strb	r2, [r3, #20]
      break;
 801733c:	e0b0      	b.n	80174a0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801733e:	6878      	ldr	r0, [r7, #4]
 8017340:	f000 f9ca 	bl	80176d8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017344:	4b60      	ldr	r3, [pc, #384]	@ (80174c8 <tcp_process+0x7d8>)
 8017346:	781b      	ldrb	r3, [r3, #0]
 8017348:	f003 0320 	and.w	r3, r3, #32
 801734c:	2b00      	cmp	r3, #0
 801734e:	f000 80a9 	beq.w	80174a4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	8b5b      	ldrh	r3, [r3, #26]
 8017356:	f043 0302 	orr.w	r3, r3, #2
 801735a:	b29a      	uxth	r2, r3
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8017360:	6878      	ldr	r0, [r7, #4]
 8017362:	f7fe fd39 	bl	8015dd8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017366:	4b59      	ldr	r3, [pc, #356]	@ (80174cc <tcp_process+0x7dc>)
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	687a      	ldr	r2, [r7, #4]
 801736c:	429a      	cmp	r2, r3
 801736e:	d105      	bne.n	801737c <tcp_process+0x68c>
 8017370:	4b56      	ldr	r3, [pc, #344]	@ (80174cc <tcp_process+0x7dc>)
 8017372:	681b      	ldr	r3, [r3, #0]
 8017374:	68db      	ldr	r3, [r3, #12]
 8017376:	4a55      	ldr	r2, [pc, #340]	@ (80174cc <tcp_process+0x7dc>)
 8017378:	6013      	str	r3, [r2, #0]
 801737a:	e013      	b.n	80173a4 <tcp_process+0x6b4>
 801737c:	4b53      	ldr	r3, [pc, #332]	@ (80174cc <tcp_process+0x7dc>)
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	613b      	str	r3, [r7, #16]
 8017382:	e00c      	b.n	801739e <tcp_process+0x6ae>
 8017384:	693b      	ldr	r3, [r7, #16]
 8017386:	68db      	ldr	r3, [r3, #12]
 8017388:	687a      	ldr	r2, [r7, #4]
 801738a:	429a      	cmp	r2, r3
 801738c:	d104      	bne.n	8017398 <tcp_process+0x6a8>
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	68da      	ldr	r2, [r3, #12]
 8017392:	693b      	ldr	r3, [r7, #16]
 8017394:	60da      	str	r2, [r3, #12]
 8017396:	e005      	b.n	80173a4 <tcp_process+0x6b4>
 8017398:	693b      	ldr	r3, [r7, #16]
 801739a:	68db      	ldr	r3, [r3, #12]
 801739c:	613b      	str	r3, [r7, #16]
 801739e:	693b      	ldr	r3, [r7, #16]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d1ef      	bne.n	8017384 <tcp_process+0x694>
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	2200      	movs	r2, #0
 80173a8:	60da      	str	r2, [r3, #12]
 80173aa:	4b43      	ldr	r3, [pc, #268]	@ (80174b8 <tcp_process+0x7c8>)
 80173ac:	2201      	movs	r2, #1
 80173ae:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	220a      	movs	r2, #10
 80173b4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80173b6:	4b41      	ldr	r3, [pc, #260]	@ (80174bc <tcp_process+0x7cc>)
 80173b8:	681a      	ldr	r2, [r3, #0]
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	60da      	str	r2, [r3, #12]
 80173be:	4a3f      	ldr	r2, [pc, #252]	@ (80174bc <tcp_process+0x7cc>)
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	6013      	str	r3, [r2, #0]
 80173c4:	f002 fc8c 	bl	8019ce0 <tcp_timer_needed>
      }
      break;
 80173c8:	e06c      	b.n	80174a4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80173ca:	6878      	ldr	r0, [r7, #4]
 80173cc:	f000 f984 	bl	80176d8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80173d0:	4b3b      	ldr	r3, [pc, #236]	@ (80174c0 <tcp_process+0x7d0>)
 80173d2:	781b      	ldrb	r3, [r3, #0]
 80173d4:	f003 0310 	and.w	r3, r3, #16
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d065      	beq.n	80174a8 <tcp_process+0x7b8>
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80173e0:	4b38      	ldr	r3, [pc, #224]	@ (80174c4 <tcp_process+0x7d4>)
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	429a      	cmp	r2, r3
 80173e6:	d15f      	bne.n	80174a8 <tcp_process+0x7b8>
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d15b      	bne.n	80174a8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80173f0:	6878      	ldr	r0, [r7, #4]
 80173f2:	f7fe fcf1 	bl	8015dd8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80173f6:	4b35      	ldr	r3, [pc, #212]	@ (80174cc <tcp_process+0x7dc>)
 80173f8:	681b      	ldr	r3, [r3, #0]
 80173fa:	687a      	ldr	r2, [r7, #4]
 80173fc:	429a      	cmp	r2, r3
 80173fe:	d105      	bne.n	801740c <tcp_process+0x71c>
 8017400:	4b32      	ldr	r3, [pc, #200]	@ (80174cc <tcp_process+0x7dc>)
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	68db      	ldr	r3, [r3, #12]
 8017406:	4a31      	ldr	r2, [pc, #196]	@ (80174cc <tcp_process+0x7dc>)
 8017408:	6013      	str	r3, [r2, #0]
 801740a:	e013      	b.n	8017434 <tcp_process+0x744>
 801740c:	4b2f      	ldr	r3, [pc, #188]	@ (80174cc <tcp_process+0x7dc>)
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	60fb      	str	r3, [r7, #12]
 8017412:	e00c      	b.n	801742e <tcp_process+0x73e>
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	68db      	ldr	r3, [r3, #12]
 8017418:	687a      	ldr	r2, [r7, #4]
 801741a:	429a      	cmp	r2, r3
 801741c:	d104      	bne.n	8017428 <tcp_process+0x738>
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	68da      	ldr	r2, [r3, #12]
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	60da      	str	r2, [r3, #12]
 8017426:	e005      	b.n	8017434 <tcp_process+0x744>
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	68db      	ldr	r3, [r3, #12]
 801742c:	60fb      	str	r3, [r7, #12]
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	2b00      	cmp	r3, #0
 8017432:	d1ef      	bne.n	8017414 <tcp_process+0x724>
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	2200      	movs	r2, #0
 8017438:	60da      	str	r2, [r3, #12]
 801743a:	4b1f      	ldr	r3, [pc, #124]	@ (80174b8 <tcp_process+0x7c8>)
 801743c:	2201      	movs	r2, #1
 801743e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	220a      	movs	r2, #10
 8017444:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017446:	4b1d      	ldr	r3, [pc, #116]	@ (80174bc <tcp_process+0x7cc>)
 8017448:	681a      	ldr	r2, [r3, #0]
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	60da      	str	r2, [r3, #12]
 801744e:	4a1b      	ldr	r2, [pc, #108]	@ (80174bc <tcp_process+0x7cc>)
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	6013      	str	r3, [r2, #0]
 8017454:	f002 fc44 	bl	8019ce0 <tcp_timer_needed>
      }
      break;
 8017458:	e026      	b.n	80174a8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801745a:	6878      	ldr	r0, [r7, #4]
 801745c:	f000 f93c 	bl	80176d8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017460:	4b17      	ldr	r3, [pc, #92]	@ (80174c0 <tcp_process+0x7d0>)
 8017462:	781b      	ldrb	r3, [r3, #0]
 8017464:	f003 0310 	and.w	r3, r3, #16
 8017468:	2b00      	cmp	r3, #0
 801746a:	d01f      	beq.n	80174ac <tcp_process+0x7bc>
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017470:	4b14      	ldr	r3, [pc, #80]	@ (80174c4 <tcp_process+0x7d4>)
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	429a      	cmp	r2, r3
 8017476:	d119      	bne.n	80174ac <tcp_process+0x7bc>
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801747c:	2b00      	cmp	r3, #0
 801747e:	d115      	bne.n	80174ac <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8017480:	4b11      	ldr	r3, [pc, #68]	@ (80174c8 <tcp_process+0x7d8>)
 8017482:	781b      	ldrb	r3, [r3, #0]
 8017484:	f043 0310 	orr.w	r3, r3, #16
 8017488:	b2da      	uxtb	r2, r3
 801748a:	4b0f      	ldr	r3, [pc, #60]	@ (80174c8 <tcp_process+0x7d8>)
 801748c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801748e:	e00d      	b.n	80174ac <tcp_process+0x7bc>
    default:
      break;
 8017490:	bf00      	nop
 8017492:	e00c      	b.n	80174ae <tcp_process+0x7be>
      break;
 8017494:	bf00      	nop
 8017496:	e00a      	b.n	80174ae <tcp_process+0x7be>
      break;
 8017498:	bf00      	nop
 801749a:	e008      	b.n	80174ae <tcp_process+0x7be>
      break;
 801749c:	bf00      	nop
 801749e:	e006      	b.n	80174ae <tcp_process+0x7be>
      break;
 80174a0:	bf00      	nop
 80174a2:	e004      	b.n	80174ae <tcp_process+0x7be>
      break;
 80174a4:	bf00      	nop
 80174a6:	e002      	b.n	80174ae <tcp_process+0x7be>
      break;
 80174a8:	bf00      	nop
 80174aa:	e000      	b.n	80174ae <tcp_process+0x7be>
      break;
 80174ac:	bf00      	nop
  }
  return ERR_OK;
 80174ae:	2300      	movs	r3, #0
}
 80174b0:	4618      	mov	r0, r3
 80174b2:	3724      	adds	r7, #36	@ 0x24
 80174b4:	46bd      	mov	sp, r7
 80174b6:	bd90      	pop	{r4, r7, pc}
 80174b8:	200277c4 	.word	0x200277c4
 80174bc:	200277c0 	.word	0x200277c0
 80174c0:	200277f4 	.word	0x200277f4
 80174c4:	200277ec 	.word	0x200277ec
 80174c8:	200277f5 	.word	0x200277f5
 80174cc:	200277bc 	.word	0x200277bc

080174d0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80174d0:	b590      	push	{r4, r7, lr}
 80174d2:	b085      	sub	sp, #20
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	6078      	str	r0, [r7, #4]
 80174d8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d106      	bne.n	80174ee <tcp_oos_insert_segment+0x1e>
 80174e0:	4b3b      	ldr	r3, [pc, #236]	@ (80175d0 <tcp_oos_insert_segment+0x100>)
 80174e2:	f240 421f 	movw	r2, #1055	@ 0x41f
 80174e6:	493b      	ldr	r1, [pc, #236]	@ (80175d4 <tcp_oos_insert_segment+0x104>)
 80174e8:	483b      	ldr	r0, [pc, #236]	@ (80175d8 <tcp_oos_insert_segment+0x108>)
 80174ea:	f006 fdf3 	bl	801e0d4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	68db      	ldr	r3, [r3, #12]
 80174f2:	899b      	ldrh	r3, [r3, #12]
 80174f4:	b29b      	uxth	r3, r3
 80174f6:	4618      	mov	r0, r3
 80174f8:	f7fb fc02 	bl	8012d00 <lwip_htons>
 80174fc:	4603      	mov	r3, r0
 80174fe:	b2db      	uxtb	r3, r3
 8017500:	f003 0301 	and.w	r3, r3, #1
 8017504:	2b00      	cmp	r3, #0
 8017506:	d028      	beq.n	801755a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8017508:	6838      	ldr	r0, [r7, #0]
 801750a:	f7fe fa63 	bl	80159d4 <tcp_segs_free>
    next = NULL;
 801750e:	2300      	movs	r3, #0
 8017510:	603b      	str	r3, [r7, #0]
 8017512:	e056      	b.n	80175c2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017514:	683b      	ldr	r3, [r7, #0]
 8017516:	68db      	ldr	r3, [r3, #12]
 8017518:	899b      	ldrh	r3, [r3, #12]
 801751a:	b29b      	uxth	r3, r3
 801751c:	4618      	mov	r0, r3
 801751e:	f7fb fbef 	bl	8012d00 <lwip_htons>
 8017522:	4603      	mov	r3, r0
 8017524:	b2db      	uxtb	r3, r3
 8017526:	f003 0301 	and.w	r3, r3, #1
 801752a:	2b00      	cmp	r3, #0
 801752c:	d00d      	beq.n	801754a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	68db      	ldr	r3, [r3, #12]
 8017532:	899b      	ldrh	r3, [r3, #12]
 8017534:	b29c      	uxth	r4, r3
 8017536:	2001      	movs	r0, #1
 8017538:	f7fb fbe2 	bl	8012d00 <lwip_htons>
 801753c:	4603      	mov	r3, r0
 801753e:	461a      	mov	r2, r3
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	68db      	ldr	r3, [r3, #12]
 8017544:	4322      	orrs	r2, r4
 8017546:	b292      	uxth	r2, r2
 8017548:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801754a:	683b      	ldr	r3, [r7, #0]
 801754c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801754e:	683b      	ldr	r3, [r7, #0]
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8017554:	68f8      	ldr	r0, [r7, #12]
 8017556:	f7fe fa52 	bl	80159fe <tcp_seg_free>
    while (next &&
 801755a:	683b      	ldr	r3, [r7, #0]
 801755c:	2b00      	cmp	r3, #0
 801755e:	d00e      	beq.n	801757e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	891b      	ldrh	r3, [r3, #8]
 8017564:	461a      	mov	r2, r3
 8017566:	4b1d      	ldr	r3, [pc, #116]	@ (80175dc <tcp_oos_insert_segment+0x10c>)
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	441a      	add	r2, r3
 801756c:	683b      	ldr	r3, [r7, #0]
 801756e:	68db      	ldr	r3, [r3, #12]
 8017570:	685b      	ldr	r3, [r3, #4]
 8017572:	6839      	ldr	r1, [r7, #0]
 8017574:	8909      	ldrh	r1, [r1, #8]
 8017576:	440b      	add	r3, r1
 8017578:	1ad3      	subs	r3, r2, r3
    while (next &&
 801757a:	2b00      	cmp	r3, #0
 801757c:	daca      	bge.n	8017514 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801757e:	683b      	ldr	r3, [r7, #0]
 8017580:	2b00      	cmp	r3, #0
 8017582:	d01e      	beq.n	80175c2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	891b      	ldrh	r3, [r3, #8]
 8017588:	461a      	mov	r2, r3
 801758a:	4b14      	ldr	r3, [pc, #80]	@ (80175dc <tcp_oos_insert_segment+0x10c>)
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	441a      	add	r2, r3
 8017590:	683b      	ldr	r3, [r7, #0]
 8017592:	68db      	ldr	r3, [r3, #12]
 8017594:	685b      	ldr	r3, [r3, #4]
 8017596:	1ad3      	subs	r3, r2, r3
    if (next &&
 8017598:	2b00      	cmp	r3, #0
 801759a:	dd12      	ble.n	80175c2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801759c:	683b      	ldr	r3, [r7, #0]
 801759e:	68db      	ldr	r3, [r3, #12]
 80175a0:	685b      	ldr	r3, [r3, #4]
 80175a2:	b29a      	uxth	r2, r3
 80175a4:	4b0d      	ldr	r3, [pc, #52]	@ (80175dc <tcp_oos_insert_segment+0x10c>)
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	b29b      	uxth	r3, r3
 80175aa:	1ad3      	subs	r3, r2, r3
 80175ac:	b29a      	uxth	r2, r3
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	685a      	ldr	r2, [r3, #4]
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	891b      	ldrh	r3, [r3, #8]
 80175ba:	4619      	mov	r1, r3
 80175bc:	4610      	mov	r0, r2
 80175be:	f7fc fe07 	bl	80141d0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	683a      	ldr	r2, [r7, #0]
 80175c6:	601a      	str	r2, [r3, #0]
}
 80175c8:	bf00      	nop
 80175ca:	3714      	adds	r7, #20
 80175cc:	46bd      	mov	sp, r7
 80175ce:	bd90      	pop	{r4, r7, pc}
 80175d0:	08020564 	.word	0x08020564
 80175d4:	08020824 	.word	0x08020824
 80175d8:	080205b0 	.word	0x080205b0
 80175dc:	200277e8 	.word	0x200277e8

080175e0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80175e0:	b5b0      	push	{r4, r5, r7, lr}
 80175e2:	b086      	sub	sp, #24
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	60f8      	str	r0, [r7, #12]
 80175e8:	60b9      	str	r1, [r7, #8]
 80175ea:	607a      	str	r2, [r7, #4]
 80175ec:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80175ee:	e03e      	b.n	801766e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80175f0:	68bb      	ldr	r3, [r7, #8]
 80175f2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80175f4:	68bb      	ldr	r3, [r7, #8]
 80175f6:	681b      	ldr	r3, [r3, #0]
 80175f8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80175fa:	697b      	ldr	r3, [r7, #20]
 80175fc:	685b      	ldr	r3, [r3, #4]
 80175fe:	4618      	mov	r0, r3
 8017600:	f7fc fffa 	bl	80145f8 <pbuf_clen>
 8017604:	4603      	mov	r3, r0
 8017606:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801760e:	8a7a      	ldrh	r2, [r7, #18]
 8017610:	429a      	cmp	r2, r3
 8017612:	d906      	bls.n	8017622 <tcp_free_acked_segments+0x42>
 8017614:	4b2a      	ldr	r3, [pc, #168]	@ (80176c0 <tcp_free_acked_segments+0xe0>)
 8017616:	f240 4257 	movw	r2, #1111	@ 0x457
 801761a:	492a      	ldr	r1, [pc, #168]	@ (80176c4 <tcp_free_acked_segments+0xe4>)
 801761c:	482a      	ldr	r0, [pc, #168]	@ (80176c8 <tcp_free_acked_segments+0xe8>)
 801761e:	f006 fd59 	bl	801e0d4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8017622:	68fb      	ldr	r3, [r7, #12]
 8017624:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8017628:	8a7b      	ldrh	r3, [r7, #18]
 801762a:	1ad3      	subs	r3, r2, r3
 801762c:	b29a      	uxth	r2, r3
 801762e:	68fb      	ldr	r3, [r7, #12]
 8017630:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8017634:	697b      	ldr	r3, [r7, #20]
 8017636:	891a      	ldrh	r2, [r3, #8]
 8017638:	4b24      	ldr	r3, [pc, #144]	@ (80176cc <tcp_free_acked_segments+0xec>)
 801763a:	881b      	ldrh	r3, [r3, #0]
 801763c:	4413      	add	r3, r2
 801763e:	b29a      	uxth	r2, r3
 8017640:	4b22      	ldr	r3, [pc, #136]	@ (80176cc <tcp_free_acked_segments+0xec>)
 8017642:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8017644:	6978      	ldr	r0, [r7, #20]
 8017646:	f7fe f9da 	bl	80159fe <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017650:	2b00      	cmp	r3, #0
 8017652:	d00c      	beq.n	801766e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8017654:	68bb      	ldr	r3, [r7, #8]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d109      	bne.n	801766e <tcp_free_acked_segments+0x8e>
 801765a:	683b      	ldr	r3, [r7, #0]
 801765c:	2b00      	cmp	r3, #0
 801765e:	d106      	bne.n	801766e <tcp_free_acked_segments+0x8e>
 8017660:	4b17      	ldr	r3, [pc, #92]	@ (80176c0 <tcp_free_acked_segments+0xe0>)
 8017662:	f240 4261 	movw	r2, #1121	@ 0x461
 8017666:	491a      	ldr	r1, [pc, #104]	@ (80176d0 <tcp_free_acked_segments+0xf0>)
 8017668:	4817      	ldr	r0, [pc, #92]	@ (80176c8 <tcp_free_acked_segments+0xe8>)
 801766a:	f006 fd33 	bl	801e0d4 <iprintf>
  while (seg_list != NULL &&
 801766e:	68bb      	ldr	r3, [r7, #8]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d020      	beq.n	80176b6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8017674:	68bb      	ldr	r3, [r7, #8]
 8017676:	68db      	ldr	r3, [r3, #12]
 8017678:	685b      	ldr	r3, [r3, #4]
 801767a:	4618      	mov	r0, r3
 801767c:	f7fb fb56 	bl	8012d2c <lwip_htonl>
 8017680:	4604      	mov	r4, r0
 8017682:	68bb      	ldr	r3, [r7, #8]
 8017684:	891b      	ldrh	r3, [r3, #8]
 8017686:	461d      	mov	r5, r3
 8017688:	68bb      	ldr	r3, [r7, #8]
 801768a:	68db      	ldr	r3, [r3, #12]
 801768c:	899b      	ldrh	r3, [r3, #12]
 801768e:	b29b      	uxth	r3, r3
 8017690:	4618      	mov	r0, r3
 8017692:	f7fb fb35 	bl	8012d00 <lwip_htons>
 8017696:	4603      	mov	r3, r0
 8017698:	b2db      	uxtb	r3, r3
 801769a:	f003 0303 	and.w	r3, r3, #3
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d001      	beq.n	80176a6 <tcp_free_acked_segments+0xc6>
 80176a2:	2301      	movs	r3, #1
 80176a4:	e000      	b.n	80176a8 <tcp_free_acked_segments+0xc8>
 80176a6:	2300      	movs	r3, #0
 80176a8:	442b      	add	r3, r5
 80176aa:	18e2      	adds	r2, r4, r3
 80176ac:	4b09      	ldr	r3, [pc, #36]	@ (80176d4 <tcp_free_acked_segments+0xf4>)
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	dd9c      	ble.n	80175f0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80176b6:	68bb      	ldr	r3, [r7, #8]
}
 80176b8:	4618      	mov	r0, r3
 80176ba:	3718      	adds	r7, #24
 80176bc:	46bd      	mov	sp, r7
 80176be:	bdb0      	pop	{r4, r5, r7, pc}
 80176c0:	08020564 	.word	0x08020564
 80176c4:	0802084c 	.word	0x0802084c
 80176c8:	080205b0 	.word	0x080205b0
 80176cc:	200277f0 	.word	0x200277f0
 80176d0:	08020874 	.word	0x08020874
 80176d4:	200277ec 	.word	0x200277ec

080176d8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80176d8:	b5b0      	push	{r4, r5, r7, lr}
 80176da:	b094      	sub	sp, #80	@ 0x50
 80176dc:	af00      	add	r7, sp, #0
 80176de:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80176e0:	2300      	movs	r3, #0
 80176e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d106      	bne.n	80176f8 <tcp_receive+0x20>
 80176ea:	4b91      	ldr	r3, [pc, #580]	@ (8017930 <tcp_receive+0x258>)
 80176ec:	f240 427b 	movw	r2, #1147	@ 0x47b
 80176f0:	4990      	ldr	r1, [pc, #576]	@ (8017934 <tcp_receive+0x25c>)
 80176f2:	4891      	ldr	r0, [pc, #580]	@ (8017938 <tcp_receive+0x260>)
 80176f4:	f006 fcee 	bl	801e0d4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	7d1b      	ldrb	r3, [r3, #20]
 80176fc:	2b03      	cmp	r3, #3
 80176fe:	d806      	bhi.n	801770e <tcp_receive+0x36>
 8017700:	4b8b      	ldr	r3, [pc, #556]	@ (8017930 <tcp_receive+0x258>)
 8017702:	f240 427c 	movw	r2, #1148	@ 0x47c
 8017706:	498d      	ldr	r1, [pc, #564]	@ (801793c <tcp_receive+0x264>)
 8017708:	488b      	ldr	r0, [pc, #556]	@ (8017938 <tcp_receive+0x260>)
 801770a:	f006 fce3 	bl	801e0d4 <iprintf>

  if (flags & TCP_ACK) {
 801770e:	4b8c      	ldr	r3, [pc, #560]	@ (8017940 <tcp_receive+0x268>)
 8017710:	781b      	ldrb	r3, [r3, #0]
 8017712:	f003 0310 	and.w	r3, r3, #16
 8017716:	2b00      	cmp	r3, #0
 8017718:	f000 8264 	beq.w	8017be4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017722:	461a      	mov	r2, r3
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017728:	4413      	add	r3, r2
 801772a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8017730:	4b84      	ldr	r3, [pc, #528]	@ (8017944 <tcp_receive+0x26c>)
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	1ad3      	subs	r3, r2, r3
 8017736:	2b00      	cmp	r3, #0
 8017738:	db1b      	blt.n	8017772 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801773e:	4b81      	ldr	r3, [pc, #516]	@ (8017944 <tcp_receive+0x26c>)
 8017740:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017742:	429a      	cmp	r2, r3
 8017744:	d106      	bne.n	8017754 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801774a:	4b7f      	ldr	r3, [pc, #508]	@ (8017948 <tcp_receive+0x270>)
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	1ad3      	subs	r3, r2, r3
 8017750:	2b00      	cmp	r3, #0
 8017752:	db0e      	blt.n	8017772 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017758:	4b7b      	ldr	r3, [pc, #492]	@ (8017948 <tcp_receive+0x270>)
 801775a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801775c:	429a      	cmp	r2, r3
 801775e:	d125      	bne.n	80177ac <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017760:	4b7a      	ldr	r3, [pc, #488]	@ (801794c <tcp_receive+0x274>)
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	89db      	ldrh	r3, [r3, #14]
 8017766:	b29a      	uxth	r2, r3
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801776e:	429a      	cmp	r2, r3
 8017770:	d91c      	bls.n	80177ac <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8017772:	4b76      	ldr	r3, [pc, #472]	@ (801794c <tcp_receive+0x274>)
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	89db      	ldrh	r3, [r3, #14]
 8017778:	b29a      	uxth	r2, r3
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801778c:	429a      	cmp	r2, r3
 801778e:	d205      	bcs.n	801779c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801779c:	4b69      	ldr	r3, [pc, #420]	@ (8017944 <tcp_receive+0x26c>)
 801779e:	681a      	ldr	r2, [r3, #0]
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 80177a4:	4b68      	ldr	r3, [pc, #416]	@ (8017948 <tcp_receive+0x270>)
 80177a6:	681a      	ldr	r2, [r3, #0]
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80177ac:	4b66      	ldr	r3, [pc, #408]	@ (8017948 <tcp_receive+0x270>)
 80177ae:	681a      	ldr	r2, [r3, #0]
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80177b4:	1ad3      	subs	r3, r2, r3
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	dc58      	bgt.n	801786c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80177ba:	4b65      	ldr	r3, [pc, #404]	@ (8017950 <tcp_receive+0x278>)
 80177bc:	881b      	ldrh	r3, [r3, #0]
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d14b      	bne.n	801785a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80177c6:	687a      	ldr	r2, [r7, #4]
 80177c8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80177cc:	4413      	add	r3, r2
 80177ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80177d0:	429a      	cmp	r2, r3
 80177d2:	d142      	bne.n	801785a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80177da:	2b00      	cmp	r3, #0
 80177dc:	db3d      	blt.n	801785a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80177de:	687b      	ldr	r3, [r7, #4]
 80177e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80177e2:	4b59      	ldr	r3, [pc, #356]	@ (8017948 <tcp_receive+0x270>)
 80177e4:	681b      	ldr	r3, [r3, #0]
 80177e6:	429a      	cmp	r2, r3
 80177e8:	d137      	bne.n	801785a <tcp_receive+0x182>
              found_dupack = 1;
 80177ea:	2301      	movs	r3, #1
 80177ec:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80177f4:	2bff      	cmp	r3, #255	@ 0xff
 80177f6:	d007      	beq.n	8017808 <tcp_receive+0x130>
                ++pcb->dupacks;
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80177fe:	3301      	adds	r3, #1
 8017800:	b2da      	uxtb	r2, r3
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801780e:	2b03      	cmp	r3, #3
 8017810:	d91b      	bls.n	801784a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801781c:	4413      	add	r3, r2
 801781e:	b29a      	uxth	r2, r3
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017826:	429a      	cmp	r2, r3
 8017828:	d30a      	bcc.n	8017840 <tcp_receive+0x168>
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017834:	4413      	add	r3, r2
 8017836:	b29a      	uxth	r2, r3
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801783e:	e004      	b.n	801784a <tcp_receive+0x172>
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017846:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017850:	2b02      	cmp	r3, #2
 8017852:	d902      	bls.n	801785a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017854:	6878      	ldr	r0, [r7, #4]
 8017856:	f001 fee7 	bl	8019628 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801785a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801785c:	2b00      	cmp	r3, #0
 801785e:	f040 8161 	bne.w	8017b24 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	2200      	movs	r2, #0
 8017866:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801786a:	e15b      	b.n	8017b24 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801786c:	4b36      	ldr	r3, [pc, #216]	@ (8017948 <tcp_receive+0x270>)
 801786e:	681a      	ldr	r2, [r3, #0]
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017874:	1ad3      	subs	r3, r2, r3
 8017876:	3b01      	subs	r3, #1
 8017878:	2b00      	cmp	r3, #0
 801787a:	f2c0 814e 	blt.w	8017b1a <tcp_receive+0x442>
 801787e:	4b32      	ldr	r3, [pc, #200]	@ (8017948 <tcp_receive+0x270>)
 8017880:	681a      	ldr	r2, [r3, #0]
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017886:	1ad3      	subs	r3, r2, r3
 8017888:	2b00      	cmp	r3, #0
 801788a:	f300 8146 	bgt.w	8017b1a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	8b5b      	ldrh	r3, [r3, #26]
 8017892:	f003 0304 	and.w	r3, r3, #4
 8017896:	2b00      	cmp	r3, #0
 8017898:	d010      	beq.n	80178bc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	8b5b      	ldrh	r3, [r3, #26]
 801789e:	f023 0304 	bic.w	r3, r3, #4
 80178a2:	b29a      	uxth	r2, r3
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	2200      	movs	r2, #0
 80178b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	2200      	movs	r2, #0
 80178c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80178ca:	10db      	asrs	r3, r3, #3
 80178cc:	b21b      	sxth	r3, r3
 80178ce:	b29a      	uxth	r2, r3
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80178d6:	b29b      	uxth	r3, r3
 80178d8:	4413      	add	r3, r2
 80178da:	b29b      	uxth	r3, r3
 80178dc:	b21a      	sxth	r2, r3
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80178e4:	4b18      	ldr	r3, [pc, #96]	@ (8017948 <tcp_receive+0x270>)
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	b29a      	uxth	r2, r3
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80178ee:	b29b      	uxth	r3, r3
 80178f0:	1ad3      	subs	r3, r2, r3
 80178f2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	2200      	movs	r2, #0
 80178f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80178fc:	4b12      	ldr	r3, [pc, #72]	@ (8017948 <tcp_receive+0x270>)
 80178fe:	681a      	ldr	r2, [r3, #0]
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	7d1b      	ldrb	r3, [r3, #20]
 8017908:	2b03      	cmp	r3, #3
 801790a:	f240 8097 	bls.w	8017a3c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801791a:	429a      	cmp	r2, r3
 801791c:	d245      	bcs.n	80179aa <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	8b5b      	ldrh	r3, [r3, #26]
 8017922:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017926:	2b00      	cmp	r3, #0
 8017928:	d014      	beq.n	8017954 <tcp_receive+0x27c>
 801792a:	2301      	movs	r3, #1
 801792c:	e013      	b.n	8017956 <tcp_receive+0x27e>
 801792e:	bf00      	nop
 8017930:	08020564 	.word	0x08020564
 8017934:	08020894 	.word	0x08020894
 8017938:	080205b0 	.word	0x080205b0
 801793c:	080208b0 	.word	0x080208b0
 8017940:	200277f4 	.word	0x200277f4
 8017944:	200277e8 	.word	0x200277e8
 8017948:	200277ec 	.word	0x200277ec
 801794c:	200277d8 	.word	0x200277d8
 8017950:	200277f2 	.word	0x200277f2
 8017954:	2302      	movs	r3, #2
 8017956:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801795a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801795e:	b29a      	uxth	r2, r3
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017964:	fb12 f303 	smulbb	r3, r2, r3
 8017968:	b29b      	uxth	r3, r3
 801796a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801796c:	4293      	cmp	r3, r2
 801796e:	bf28      	it	cs
 8017970:	4613      	movcs	r3, r2
 8017972:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801797a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801797c:	4413      	add	r3, r2
 801797e:	b29a      	uxth	r2, r3
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017986:	429a      	cmp	r2, r3
 8017988:	d309      	bcc.n	801799e <tcp_receive+0x2c6>
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017990:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017992:	4413      	add	r3, r2
 8017994:	b29a      	uxth	r2, r3
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801799c:	e04e      	b.n	8017a3c <tcp_receive+0x364>
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80179a4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80179a8:	e048      	b.n	8017a3c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80179b0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80179b2:	4413      	add	r3, r2
 80179b4:	b29a      	uxth	r2, r3
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80179bc:	429a      	cmp	r2, r3
 80179be:	d309      	bcc.n	80179d4 <tcp_receive+0x2fc>
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80179c6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80179c8:	4413      	add	r3, r2
 80179ca:	b29a      	uxth	r2, r3
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80179d2:	e004      	b.n	80179de <tcp_receive+0x306>
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80179da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80179ea:	429a      	cmp	r2, r3
 80179ec:	d326      	bcc.n	8017a3c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80179fa:	1ad3      	subs	r3, r2, r3
 80179fc:	b29a      	uxth	r2, r3
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017a0e:	4413      	add	r3, r2
 8017a10:	b29a      	uxth	r2, r3
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017a18:	429a      	cmp	r2, r3
 8017a1a:	d30a      	bcc.n	8017a32 <tcp_receive+0x35a>
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017a26:	4413      	add	r3, r2
 8017a28:	b29a      	uxth	r2, r3
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017a30:	e004      	b.n	8017a3c <tcp_receive+0x364>
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017a38:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a44:	4a98      	ldr	r2, [pc, #608]	@ (8017ca8 <tcp_receive+0x5d0>)
 8017a46:	6878      	ldr	r0, [r7, #4]
 8017a48:	f7ff fdca 	bl	80175e0 <tcp_free_acked_segments>
 8017a4c:	4602      	mov	r2, r0
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017a5a:	4a94      	ldr	r2, [pc, #592]	@ (8017cac <tcp_receive+0x5d4>)
 8017a5c:	6878      	ldr	r0, [r7, #4]
 8017a5e:	f7ff fdbf 	bl	80175e0 <tcp_free_acked_segments>
 8017a62:	4602      	mov	r2, r0
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d104      	bne.n	8017a7a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017a76:	861a      	strh	r2, [r3, #48]	@ 0x30
 8017a78:	e002      	b.n	8017a80 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	2200      	movs	r2, #0
 8017a7e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	2200      	movs	r2, #0
 8017a84:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d103      	bne.n	8017a96 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	2200      	movs	r2, #0
 8017a92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8017a9c:	4b84      	ldr	r3, [pc, #528]	@ (8017cb0 <tcp_receive+0x5d8>)
 8017a9e:	881b      	ldrh	r3, [r3, #0]
 8017aa0:	4413      	add	r3, r2
 8017aa2:	b29a      	uxth	r2, r3
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	8b5b      	ldrh	r3, [r3, #26]
 8017aae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d035      	beq.n	8017b22 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d118      	bne.n	8017af0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d00c      	beq.n	8017ae0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017ace:	68db      	ldr	r3, [r3, #12]
 8017ad0:	685b      	ldr	r3, [r3, #4]
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	f7fb f92a 	bl	8012d2c <lwip_htonl>
 8017ad8:	4603      	mov	r3, r0
 8017ada:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	dc20      	bgt.n	8017b22 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	8b5b      	ldrh	r3, [r3, #26]
 8017ae4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017ae8:	b29a      	uxth	r2, r3
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017aee:	e018      	b.n	8017b22 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017af8:	68db      	ldr	r3, [r3, #12]
 8017afa:	685b      	ldr	r3, [r3, #4]
 8017afc:	4618      	mov	r0, r3
 8017afe:	f7fb f915 	bl	8012d2c <lwip_htonl>
 8017b02:	4603      	mov	r3, r0
 8017b04:	1ae3      	subs	r3, r4, r3
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	dc0b      	bgt.n	8017b22 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	8b5b      	ldrh	r3, [r3, #26]
 8017b0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017b12:	b29a      	uxth	r2, r3
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017b18:	e003      	b.n	8017b22 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8017b1a:	6878      	ldr	r0, [r7, #4]
 8017b1c:	f001 ff70 	bl	8019a00 <tcp_send_empty_ack>
 8017b20:	e000      	b.n	8017b24 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017b22:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d05b      	beq.n	8017be4 <tcp_receive+0x50c>
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017b30:	4b60      	ldr	r3, [pc, #384]	@ (8017cb4 <tcp_receive+0x5dc>)
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	1ad3      	subs	r3, r2, r3
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	da54      	bge.n	8017be4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8017b3a:	4b5f      	ldr	r3, [pc, #380]	@ (8017cb8 <tcp_receive+0x5e0>)
 8017b3c:	681b      	ldr	r3, [r3, #0]
 8017b3e:	b29a      	uxth	r2, r3
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017b44:	b29b      	uxth	r3, r3
 8017b46:	1ad3      	subs	r3, r2, r3
 8017b48:	b29b      	uxth	r3, r3
 8017b4a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8017b4e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017b58:	10db      	asrs	r3, r3, #3
 8017b5a:	b21b      	sxth	r3, r3
 8017b5c:	b29b      	uxth	r3, r3
 8017b5e:	1ad3      	subs	r3, r2, r3
 8017b60:	b29b      	uxth	r3, r3
 8017b62:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017b6c:	b29a      	uxth	r2, r3
 8017b6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017b72:	4413      	add	r3, r2
 8017b74:	b29b      	uxth	r3, r3
 8017b76:	b21a      	sxth	r2, r3
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8017b7c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	da05      	bge.n	8017b90 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8017b84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017b88:	425b      	negs	r3, r3
 8017b8a:	b29b      	uxth	r3, r3
 8017b8c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8017b90:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017b9a:	109b      	asrs	r3, r3, #2
 8017b9c:	b21b      	sxth	r3, r3
 8017b9e:	b29b      	uxth	r3, r3
 8017ba0:	1ad3      	subs	r3, r2, r3
 8017ba2:	b29b      	uxth	r3, r3
 8017ba4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017bae:	b29a      	uxth	r2, r3
 8017bb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017bb4:	4413      	add	r3, r2
 8017bb6:	b29b      	uxth	r3, r3
 8017bb8:	b21a      	sxth	r2, r3
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017bc4:	10db      	asrs	r3, r3, #3
 8017bc6:	b21b      	sxth	r3, r3
 8017bc8:	b29a      	uxth	r2, r3
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017bd0:	b29b      	uxth	r3, r3
 8017bd2:	4413      	add	r3, r2
 8017bd4:	b29b      	uxth	r3, r3
 8017bd6:	b21a      	sxth	r2, r3
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	2200      	movs	r2, #0
 8017be2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8017be4:	4b35      	ldr	r3, [pc, #212]	@ (8017cbc <tcp_receive+0x5e4>)
 8017be6:	881b      	ldrh	r3, [r3, #0]
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	f000 84df 	beq.w	80185ac <tcp_receive+0xed4>
 8017bee:	687b      	ldr	r3, [r7, #4]
 8017bf0:	7d1b      	ldrb	r3, [r3, #20]
 8017bf2:	2b06      	cmp	r3, #6
 8017bf4:	f200 84da 	bhi.w	80185ac <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017bfc:	4b30      	ldr	r3, [pc, #192]	@ (8017cc0 <tcp_receive+0x5e8>)
 8017bfe:	681b      	ldr	r3, [r3, #0]
 8017c00:	1ad3      	subs	r3, r2, r3
 8017c02:	3b01      	subs	r3, #1
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	f2c0 808f 	blt.w	8017d28 <tcp_receive+0x650>
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8017cbc <tcp_receive+0x5e4>)
 8017c10:	881b      	ldrh	r3, [r3, #0]
 8017c12:	4619      	mov	r1, r3
 8017c14:	4b2a      	ldr	r3, [pc, #168]	@ (8017cc0 <tcp_receive+0x5e8>)
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	440b      	add	r3, r1
 8017c1a:	1ad3      	subs	r3, r2, r3
 8017c1c:	3301      	adds	r3, #1
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	f300 8082 	bgt.w	8017d28 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8017c24:	4b27      	ldr	r3, [pc, #156]	@ (8017cc4 <tcp_receive+0x5ec>)
 8017c26:	685b      	ldr	r3, [r3, #4]
 8017c28:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017c2e:	4b24      	ldr	r3, [pc, #144]	@ (8017cc0 <tcp_receive+0x5e8>)
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	1ad3      	subs	r3, r2, r3
 8017c34:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8017c36:	4b23      	ldr	r3, [pc, #140]	@ (8017cc4 <tcp_receive+0x5ec>)
 8017c38:	685b      	ldr	r3, [r3, #4]
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d106      	bne.n	8017c4c <tcp_receive+0x574>
 8017c3e:	4b22      	ldr	r3, [pc, #136]	@ (8017cc8 <tcp_receive+0x5f0>)
 8017c40:	f240 5294 	movw	r2, #1428	@ 0x594
 8017c44:	4921      	ldr	r1, [pc, #132]	@ (8017ccc <tcp_receive+0x5f4>)
 8017c46:	4822      	ldr	r0, [pc, #136]	@ (8017cd0 <tcp_receive+0x5f8>)
 8017c48:	f006 fa44 	bl	801e0d4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8017c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c4e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017c52:	4293      	cmp	r3, r2
 8017c54:	d906      	bls.n	8017c64 <tcp_receive+0x58c>
 8017c56:	4b1c      	ldr	r3, [pc, #112]	@ (8017cc8 <tcp_receive+0x5f0>)
 8017c58:	f240 5295 	movw	r2, #1429	@ 0x595
 8017c5c:	491d      	ldr	r1, [pc, #116]	@ (8017cd4 <tcp_receive+0x5fc>)
 8017c5e:	481c      	ldr	r0, [pc, #112]	@ (8017cd0 <tcp_receive+0x5f8>)
 8017c60:	f006 fa38 	bl	801e0d4 <iprintf>
      off = (u16_t)off32;
 8017c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c66:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8017c6a:	4b16      	ldr	r3, [pc, #88]	@ (8017cc4 <tcp_receive+0x5ec>)
 8017c6c:	685b      	ldr	r3, [r3, #4]
 8017c6e:	891b      	ldrh	r3, [r3, #8]
 8017c70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017c74:	429a      	cmp	r2, r3
 8017c76:	d906      	bls.n	8017c86 <tcp_receive+0x5ae>
 8017c78:	4b13      	ldr	r3, [pc, #76]	@ (8017cc8 <tcp_receive+0x5f0>)
 8017c7a:	f240 5297 	movw	r2, #1431	@ 0x597
 8017c7e:	4916      	ldr	r1, [pc, #88]	@ (8017cd8 <tcp_receive+0x600>)
 8017c80:	4813      	ldr	r0, [pc, #76]	@ (8017cd0 <tcp_receive+0x5f8>)
 8017c82:	f006 fa27 	bl	801e0d4 <iprintf>
      inseg.len -= off;
 8017c86:	4b0f      	ldr	r3, [pc, #60]	@ (8017cc4 <tcp_receive+0x5ec>)
 8017c88:	891a      	ldrh	r2, [r3, #8]
 8017c8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017c8e:	1ad3      	subs	r3, r2, r3
 8017c90:	b29a      	uxth	r2, r3
 8017c92:	4b0c      	ldr	r3, [pc, #48]	@ (8017cc4 <tcp_receive+0x5ec>)
 8017c94:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8017c96:	4b0b      	ldr	r3, [pc, #44]	@ (8017cc4 <tcp_receive+0x5ec>)
 8017c98:	685b      	ldr	r3, [r3, #4]
 8017c9a:	891a      	ldrh	r2, [r3, #8]
 8017c9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017ca0:	1ad3      	subs	r3, r2, r3
 8017ca2:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8017ca4:	e02a      	b.n	8017cfc <tcp_receive+0x624>
 8017ca6:	bf00      	nop
 8017ca8:	080208cc 	.word	0x080208cc
 8017cac:	080208d4 	.word	0x080208d4
 8017cb0:	200277f0 	.word	0x200277f0
 8017cb4:	200277ec 	.word	0x200277ec
 8017cb8:	200277b0 	.word	0x200277b0
 8017cbc:	200277f2 	.word	0x200277f2
 8017cc0:	200277e8 	.word	0x200277e8
 8017cc4:	200277c8 	.word	0x200277c8
 8017cc8:	08020564 	.word	0x08020564
 8017ccc:	080208dc 	.word	0x080208dc
 8017cd0:	080205b0 	.word	0x080205b0
 8017cd4:	080208ec 	.word	0x080208ec
 8017cd8:	080208fc 	.word	0x080208fc
        off -= p->len;
 8017cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017cde:	895b      	ldrh	r3, [r3, #10]
 8017ce0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017ce4:	1ad3      	subs	r3, r2, r3
 8017ce6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8017cea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017cec:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017cee:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8017cf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017cf2:	2200      	movs	r2, #0
 8017cf4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8017cf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8017cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017cfe:	895b      	ldrh	r3, [r3, #10]
 8017d00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017d04:	429a      	cmp	r2, r3
 8017d06:	d8e9      	bhi.n	8017cdc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8017d08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017d0c:	4619      	mov	r1, r3
 8017d0e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8017d10:	f7fc fb5e 	bl	80143d0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d18:	4a90      	ldr	r2, [pc, #576]	@ (8017f5c <tcp_receive+0x884>)
 8017d1a:	6013      	str	r3, [r2, #0]
 8017d1c:	4b90      	ldr	r3, [pc, #576]	@ (8017f60 <tcp_receive+0x888>)
 8017d1e:	68db      	ldr	r3, [r3, #12]
 8017d20:	4a8e      	ldr	r2, [pc, #568]	@ (8017f5c <tcp_receive+0x884>)
 8017d22:	6812      	ldr	r2, [r2, #0]
 8017d24:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017d26:	e00d      	b.n	8017d44 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8017d28:	4b8c      	ldr	r3, [pc, #560]	@ (8017f5c <tcp_receive+0x884>)
 8017d2a:	681a      	ldr	r2, [r3, #0]
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d30:	1ad3      	subs	r3, r2, r3
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	da06      	bge.n	8017d44 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	8b5b      	ldrh	r3, [r3, #26]
 8017d3a:	f043 0302 	orr.w	r3, r3, #2
 8017d3e:	b29a      	uxth	r2, r3
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017d44:	4b85      	ldr	r3, [pc, #532]	@ (8017f5c <tcp_receive+0x884>)
 8017d46:	681a      	ldr	r2, [r3, #0]
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d4c:	1ad3      	subs	r3, r2, r3
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	f2c0 8427 	blt.w	80185a2 <tcp_receive+0xeca>
 8017d54:	4b81      	ldr	r3, [pc, #516]	@ (8017f5c <tcp_receive+0x884>)
 8017d56:	681a      	ldr	r2, [r3, #0]
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d5c:	6879      	ldr	r1, [r7, #4]
 8017d5e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017d60:	440b      	add	r3, r1
 8017d62:	1ad3      	subs	r3, r2, r3
 8017d64:	3301      	adds	r3, #1
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	f300 841b 	bgt.w	80185a2 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017d70:	4b7a      	ldr	r3, [pc, #488]	@ (8017f5c <tcp_receive+0x884>)
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	429a      	cmp	r2, r3
 8017d76:	f040 8298 	bne.w	80182aa <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8017d7a:	4b79      	ldr	r3, [pc, #484]	@ (8017f60 <tcp_receive+0x888>)
 8017d7c:	891c      	ldrh	r4, [r3, #8]
 8017d7e:	4b78      	ldr	r3, [pc, #480]	@ (8017f60 <tcp_receive+0x888>)
 8017d80:	68db      	ldr	r3, [r3, #12]
 8017d82:	899b      	ldrh	r3, [r3, #12]
 8017d84:	b29b      	uxth	r3, r3
 8017d86:	4618      	mov	r0, r3
 8017d88:	f7fa ffba 	bl	8012d00 <lwip_htons>
 8017d8c:	4603      	mov	r3, r0
 8017d8e:	b2db      	uxtb	r3, r3
 8017d90:	f003 0303 	and.w	r3, r3, #3
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d001      	beq.n	8017d9c <tcp_receive+0x6c4>
 8017d98:	2301      	movs	r3, #1
 8017d9a:	e000      	b.n	8017d9e <tcp_receive+0x6c6>
 8017d9c:	2300      	movs	r3, #0
 8017d9e:	4423      	add	r3, r4
 8017da0:	b29a      	uxth	r2, r3
 8017da2:	4b70      	ldr	r3, [pc, #448]	@ (8017f64 <tcp_receive+0x88c>)
 8017da4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017daa:	4b6e      	ldr	r3, [pc, #440]	@ (8017f64 <tcp_receive+0x88c>)
 8017dac:	881b      	ldrh	r3, [r3, #0]
 8017dae:	429a      	cmp	r2, r3
 8017db0:	d274      	bcs.n	8017e9c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017db2:	4b6b      	ldr	r3, [pc, #428]	@ (8017f60 <tcp_receive+0x888>)
 8017db4:	68db      	ldr	r3, [r3, #12]
 8017db6:	899b      	ldrh	r3, [r3, #12]
 8017db8:	b29b      	uxth	r3, r3
 8017dba:	4618      	mov	r0, r3
 8017dbc:	f7fa ffa0 	bl	8012d00 <lwip_htons>
 8017dc0:	4603      	mov	r3, r0
 8017dc2:	b2db      	uxtb	r3, r3
 8017dc4:	f003 0301 	and.w	r3, r3, #1
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d01e      	beq.n	8017e0a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8017dcc:	4b64      	ldr	r3, [pc, #400]	@ (8017f60 <tcp_receive+0x888>)
 8017dce:	68db      	ldr	r3, [r3, #12]
 8017dd0:	899b      	ldrh	r3, [r3, #12]
 8017dd2:	b29b      	uxth	r3, r3
 8017dd4:	b21b      	sxth	r3, r3
 8017dd6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017dda:	b21c      	sxth	r4, r3
 8017ddc:	4b60      	ldr	r3, [pc, #384]	@ (8017f60 <tcp_receive+0x888>)
 8017dde:	68db      	ldr	r3, [r3, #12]
 8017de0:	899b      	ldrh	r3, [r3, #12]
 8017de2:	b29b      	uxth	r3, r3
 8017de4:	4618      	mov	r0, r3
 8017de6:	f7fa ff8b 	bl	8012d00 <lwip_htons>
 8017dea:	4603      	mov	r3, r0
 8017dec:	b2db      	uxtb	r3, r3
 8017dee:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8017df2:	b29b      	uxth	r3, r3
 8017df4:	4618      	mov	r0, r3
 8017df6:	f7fa ff83 	bl	8012d00 <lwip_htons>
 8017dfa:	4603      	mov	r3, r0
 8017dfc:	b21b      	sxth	r3, r3
 8017dfe:	4323      	orrs	r3, r4
 8017e00:	b21a      	sxth	r2, r3
 8017e02:	4b57      	ldr	r3, [pc, #348]	@ (8017f60 <tcp_receive+0x888>)
 8017e04:	68db      	ldr	r3, [r3, #12]
 8017e06:	b292      	uxth	r2, r2
 8017e08:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017e0e:	4b54      	ldr	r3, [pc, #336]	@ (8017f60 <tcp_receive+0x888>)
 8017e10:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8017e12:	4b53      	ldr	r3, [pc, #332]	@ (8017f60 <tcp_receive+0x888>)
 8017e14:	68db      	ldr	r3, [r3, #12]
 8017e16:	899b      	ldrh	r3, [r3, #12]
 8017e18:	b29b      	uxth	r3, r3
 8017e1a:	4618      	mov	r0, r3
 8017e1c:	f7fa ff70 	bl	8012d00 <lwip_htons>
 8017e20:	4603      	mov	r3, r0
 8017e22:	b2db      	uxtb	r3, r3
 8017e24:	f003 0302 	and.w	r3, r3, #2
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d005      	beq.n	8017e38 <tcp_receive+0x760>
            inseg.len -= 1;
 8017e2c:	4b4c      	ldr	r3, [pc, #304]	@ (8017f60 <tcp_receive+0x888>)
 8017e2e:	891b      	ldrh	r3, [r3, #8]
 8017e30:	3b01      	subs	r3, #1
 8017e32:	b29a      	uxth	r2, r3
 8017e34:	4b4a      	ldr	r3, [pc, #296]	@ (8017f60 <tcp_receive+0x888>)
 8017e36:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8017e38:	4b49      	ldr	r3, [pc, #292]	@ (8017f60 <tcp_receive+0x888>)
 8017e3a:	685b      	ldr	r3, [r3, #4]
 8017e3c:	4a48      	ldr	r2, [pc, #288]	@ (8017f60 <tcp_receive+0x888>)
 8017e3e:	8912      	ldrh	r2, [r2, #8]
 8017e40:	4611      	mov	r1, r2
 8017e42:	4618      	mov	r0, r3
 8017e44:	f7fc f9c4 	bl	80141d0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8017e48:	4b45      	ldr	r3, [pc, #276]	@ (8017f60 <tcp_receive+0x888>)
 8017e4a:	891c      	ldrh	r4, [r3, #8]
 8017e4c:	4b44      	ldr	r3, [pc, #272]	@ (8017f60 <tcp_receive+0x888>)
 8017e4e:	68db      	ldr	r3, [r3, #12]
 8017e50:	899b      	ldrh	r3, [r3, #12]
 8017e52:	b29b      	uxth	r3, r3
 8017e54:	4618      	mov	r0, r3
 8017e56:	f7fa ff53 	bl	8012d00 <lwip_htons>
 8017e5a:	4603      	mov	r3, r0
 8017e5c:	b2db      	uxtb	r3, r3
 8017e5e:	f003 0303 	and.w	r3, r3, #3
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d001      	beq.n	8017e6a <tcp_receive+0x792>
 8017e66:	2301      	movs	r3, #1
 8017e68:	e000      	b.n	8017e6c <tcp_receive+0x794>
 8017e6a:	2300      	movs	r3, #0
 8017e6c:	4423      	add	r3, r4
 8017e6e:	b29a      	uxth	r2, r3
 8017e70:	4b3c      	ldr	r3, [pc, #240]	@ (8017f64 <tcp_receive+0x88c>)
 8017e72:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017e74:	4b3b      	ldr	r3, [pc, #236]	@ (8017f64 <tcp_receive+0x88c>)
 8017e76:	881b      	ldrh	r3, [r3, #0]
 8017e78:	461a      	mov	r2, r3
 8017e7a:	4b38      	ldr	r3, [pc, #224]	@ (8017f5c <tcp_receive+0x884>)
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	441a      	add	r2, r3
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e84:	6879      	ldr	r1, [r7, #4]
 8017e86:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017e88:	440b      	add	r3, r1
 8017e8a:	429a      	cmp	r2, r3
 8017e8c:	d006      	beq.n	8017e9c <tcp_receive+0x7c4>
 8017e8e:	4b36      	ldr	r3, [pc, #216]	@ (8017f68 <tcp_receive+0x890>)
 8017e90:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8017e94:	4935      	ldr	r1, [pc, #212]	@ (8017f6c <tcp_receive+0x894>)
 8017e96:	4836      	ldr	r0, [pc, #216]	@ (8017f70 <tcp_receive+0x898>)
 8017e98:	f006 f91c 	bl	801e0d4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ea0:	2b00      	cmp	r3, #0
 8017ea2:	f000 80e6 	beq.w	8018072 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017ea6:	4b2e      	ldr	r3, [pc, #184]	@ (8017f60 <tcp_receive+0x888>)
 8017ea8:	68db      	ldr	r3, [r3, #12]
 8017eaa:	899b      	ldrh	r3, [r3, #12]
 8017eac:	b29b      	uxth	r3, r3
 8017eae:	4618      	mov	r0, r3
 8017eb0:	f7fa ff26 	bl	8012d00 <lwip_htons>
 8017eb4:	4603      	mov	r3, r0
 8017eb6:	b2db      	uxtb	r3, r3
 8017eb8:	f003 0301 	and.w	r3, r3, #1
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d010      	beq.n	8017ee2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8017ec0:	e00a      	b.n	8017ed8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ec6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8017ec8:	687b      	ldr	r3, [r7, #4]
 8017eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ecc:	681a      	ldr	r2, [r3, #0]
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8017ed2:	68f8      	ldr	r0, [r7, #12]
 8017ed4:	f7fd fd93 	bl	80159fe <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d1f0      	bne.n	8017ec2 <tcp_receive+0x7ea>
 8017ee0:	e0c7      	b.n	8018072 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8017ee8:	e051      	b.n	8017f8e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017eec:	68db      	ldr	r3, [r3, #12]
 8017eee:	899b      	ldrh	r3, [r3, #12]
 8017ef0:	b29b      	uxth	r3, r3
 8017ef2:	4618      	mov	r0, r3
 8017ef4:	f7fa ff04 	bl	8012d00 <lwip_htons>
 8017ef8:	4603      	mov	r3, r0
 8017efa:	b2db      	uxtb	r3, r3
 8017efc:	f003 0301 	and.w	r3, r3, #1
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d03c      	beq.n	8017f7e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8017f04:	4b16      	ldr	r3, [pc, #88]	@ (8017f60 <tcp_receive+0x888>)
 8017f06:	68db      	ldr	r3, [r3, #12]
 8017f08:	899b      	ldrh	r3, [r3, #12]
 8017f0a:	b29b      	uxth	r3, r3
 8017f0c:	4618      	mov	r0, r3
 8017f0e:	f7fa fef7 	bl	8012d00 <lwip_htons>
 8017f12:	4603      	mov	r3, r0
 8017f14:	b2db      	uxtb	r3, r3
 8017f16:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d12f      	bne.n	8017f7e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8017f1e:	4b10      	ldr	r3, [pc, #64]	@ (8017f60 <tcp_receive+0x888>)
 8017f20:	68db      	ldr	r3, [r3, #12]
 8017f22:	899b      	ldrh	r3, [r3, #12]
 8017f24:	b29c      	uxth	r4, r3
 8017f26:	2001      	movs	r0, #1
 8017f28:	f7fa feea 	bl	8012d00 <lwip_htons>
 8017f2c:	4603      	mov	r3, r0
 8017f2e:	461a      	mov	r2, r3
 8017f30:	4b0b      	ldr	r3, [pc, #44]	@ (8017f60 <tcp_receive+0x888>)
 8017f32:	68db      	ldr	r3, [r3, #12]
 8017f34:	4322      	orrs	r2, r4
 8017f36:	b292      	uxth	r2, r2
 8017f38:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8017f3a:	4b09      	ldr	r3, [pc, #36]	@ (8017f60 <tcp_receive+0x888>)
 8017f3c:	891c      	ldrh	r4, [r3, #8]
 8017f3e:	4b08      	ldr	r3, [pc, #32]	@ (8017f60 <tcp_receive+0x888>)
 8017f40:	68db      	ldr	r3, [r3, #12]
 8017f42:	899b      	ldrh	r3, [r3, #12]
 8017f44:	b29b      	uxth	r3, r3
 8017f46:	4618      	mov	r0, r3
 8017f48:	f7fa feda 	bl	8012d00 <lwip_htons>
 8017f4c:	4603      	mov	r3, r0
 8017f4e:	b2db      	uxtb	r3, r3
 8017f50:	f003 0303 	and.w	r3, r3, #3
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d00d      	beq.n	8017f74 <tcp_receive+0x89c>
 8017f58:	2301      	movs	r3, #1
 8017f5a:	e00c      	b.n	8017f76 <tcp_receive+0x89e>
 8017f5c:	200277e8 	.word	0x200277e8
 8017f60:	200277c8 	.word	0x200277c8
 8017f64:	200277f2 	.word	0x200277f2
 8017f68:	08020564 	.word	0x08020564
 8017f6c:	0802090c 	.word	0x0802090c
 8017f70:	080205b0 	.word	0x080205b0
 8017f74:	2300      	movs	r3, #0
 8017f76:	4423      	add	r3, r4
 8017f78:	b29a      	uxth	r2, r3
 8017f7a:	4b98      	ldr	r3, [pc, #608]	@ (80181dc <tcp_receive+0xb04>)
 8017f7c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8017f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f80:	613b      	str	r3, [r7, #16]
              next = next->next;
 8017f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8017f88:	6938      	ldr	r0, [r7, #16]
 8017f8a:	f7fd fd38 	bl	80159fe <tcp_seg_free>
            while (next &&
 8017f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d00e      	beq.n	8017fb2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8017f94:	4b91      	ldr	r3, [pc, #580]	@ (80181dc <tcp_receive+0xb04>)
 8017f96:	881b      	ldrh	r3, [r3, #0]
 8017f98:	461a      	mov	r2, r3
 8017f9a:	4b91      	ldr	r3, [pc, #580]	@ (80181e0 <tcp_receive+0xb08>)
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	441a      	add	r2, r3
 8017fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017fa2:	68db      	ldr	r3, [r3, #12]
 8017fa4:	685b      	ldr	r3, [r3, #4]
 8017fa6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017fa8:	8909      	ldrh	r1, [r1, #8]
 8017faa:	440b      	add	r3, r1
 8017fac:	1ad3      	subs	r3, r2, r3
            while (next &&
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	da9b      	bge.n	8017eea <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8017fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d059      	beq.n	801806c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8017fb8:	4b88      	ldr	r3, [pc, #544]	@ (80181dc <tcp_receive+0xb04>)
 8017fba:	881b      	ldrh	r3, [r3, #0]
 8017fbc:	461a      	mov	r2, r3
 8017fbe:	4b88      	ldr	r3, [pc, #544]	@ (80181e0 <tcp_receive+0xb08>)
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	441a      	add	r2, r3
 8017fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017fc6:	68db      	ldr	r3, [r3, #12]
 8017fc8:	685b      	ldr	r3, [r3, #4]
 8017fca:	1ad3      	subs	r3, r2, r3
            if (next &&
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	dd4d      	ble.n	801806c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8017fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017fd2:	68db      	ldr	r3, [r3, #12]
 8017fd4:	685b      	ldr	r3, [r3, #4]
 8017fd6:	b29a      	uxth	r2, r3
 8017fd8:	4b81      	ldr	r3, [pc, #516]	@ (80181e0 <tcp_receive+0xb08>)
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	b29b      	uxth	r3, r3
 8017fde:	1ad3      	subs	r3, r2, r3
 8017fe0:	b29a      	uxth	r2, r3
 8017fe2:	4b80      	ldr	r3, [pc, #512]	@ (80181e4 <tcp_receive+0xb0c>)
 8017fe4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8017fe6:	4b7f      	ldr	r3, [pc, #508]	@ (80181e4 <tcp_receive+0xb0c>)
 8017fe8:	68db      	ldr	r3, [r3, #12]
 8017fea:	899b      	ldrh	r3, [r3, #12]
 8017fec:	b29b      	uxth	r3, r3
 8017fee:	4618      	mov	r0, r3
 8017ff0:	f7fa fe86 	bl	8012d00 <lwip_htons>
 8017ff4:	4603      	mov	r3, r0
 8017ff6:	b2db      	uxtb	r3, r3
 8017ff8:	f003 0302 	and.w	r3, r3, #2
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d005      	beq.n	801800c <tcp_receive+0x934>
                inseg.len -= 1;
 8018000:	4b78      	ldr	r3, [pc, #480]	@ (80181e4 <tcp_receive+0xb0c>)
 8018002:	891b      	ldrh	r3, [r3, #8]
 8018004:	3b01      	subs	r3, #1
 8018006:	b29a      	uxth	r2, r3
 8018008:	4b76      	ldr	r3, [pc, #472]	@ (80181e4 <tcp_receive+0xb0c>)
 801800a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801800c:	4b75      	ldr	r3, [pc, #468]	@ (80181e4 <tcp_receive+0xb0c>)
 801800e:	685b      	ldr	r3, [r3, #4]
 8018010:	4a74      	ldr	r2, [pc, #464]	@ (80181e4 <tcp_receive+0xb0c>)
 8018012:	8912      	ldrh	r2, [r2, #8]
 8018014:	4611      	mov	r1, r2
 8018016:	4618      	mov	r0, r3
 8018018:	f7fc f8da 	bl	80141d0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801801c:	4b71      	ldr	r3, [pc, #452]	@ (80181e4 <tcp_receive+0xb0c>)
 801801e:	891c      	ldrh	r4, [r3, #8]
 8018020:	4b70      	ldr	r3, [pc, #448]	@ (80181e4 <tcp_receive+0xb0c>)
 8018022:	68db      	ldr	r3, [r3, #12]
 8018024:	899b      	ldrh	r3, [r3, #12]
 8018026:	b29b      	uxth	r3, r3
 8018028:	4618      	mov	r0, r3
 801802a:	f7fa fe69 	bl	8012d00 <lwip_htons>
 801802e:	4603      	mov	r3, r0
 8018030:	b2db      	uxtb	r3, r3
 8018032:	f003 0303 	and.w	r3, r3, #3
 8018036:	2b00      	cmp	r3, #0
 8018038:	d001      	beq.n	801803e <tcp_receive+0x966>
 801803a:	2301      	movs	r3, #1
 801803c:	e000      	b.n	8018040 <tcp_receive+0x968>
 801803e:	2300      	movs	r3, #0
 8018040:	4423      	add	r3, r4
 8018042:	b29a      	uxth	r2, r3
 8018044:	4b65      	ldr	r3, [pc, #404]	@ (80181dc <tcp_receive+0xb04>)
 8018046:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018048:	4b64      	ldr	r3, [pc, #400]	@ (80181dc <tcp_receive+0xb04>)
 801804a:	881b      	ldrh	r3, [r3, #0]
 801804c:	461a      	mov	r2, r3
 801804e:	4b64      	ldr	r3, [pc, #400]	@ (80181e0 <tcp_receive+0xb08>)
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	441a      	add	r2, r3
 8018054:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018056:	68db      	ldr	r3, [r3, #12]
 8018058:	685b      	ldr	r3, [r3, #4]
 801805a:	429a      	cmp	r2, r3
 801805c:	d006      	beq.n	801806c <tcp_receive+0x994>
 801805e:	4b62      	ldr	r3, [pc, #392]	@ (80181e8 <tcp_receive+0xb10>)
 8018060:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8018064:	4961      	ldr	r1, [pc, #388]	@ (80181ec <tcp_receive+0xb14>)
 8018066:	4862      	ldr	r0, [pc, #392]	@ (80181f0 <tcp_receive+0xb18>)
 8018068:	f006 f834 	bl	801e0d4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8018070:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8018072:	4b5a      	ldr	r3, [pc, #360]	@ (80181dc <tcp_receive+0xb04>)
 8018074:	881b      	ldrh	r3, [r3, #0]
 8018076:	461a      	mov	r2, r3
 8018078:	4b59      	ldr	r3, [pc, #356]	@ (80181e0 <tcp_receive+0xb08>)
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	441a      	add	r2, r3
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018086:	4b55      	ldr	r3, [pc, #340]	@ (80181dc <tcp_receive+0xb04>)
 8018088:	881b      	ldrh	r3, [r3, #0]
 801808a:	429a      	cmp	r2, r3
 801808c:	d206      	bcs.n	801809c <tcp_receive+0x9c4>
 801808e:	4b56      	ldr	r3, [pc, #344]	@ (80181e8 <tcp_receive+0xb10>)
 8018090:	f240 6207 	movw	r2, #1543	@ 0x607
 8018094:	4957      	ldr	r1, [pc, #348]	@ (80181f4 <tcp_receive+0xb1c>)
 8018096:	4856      	ldr	r0, [pc, #344]	@ (80181f0 <tcp_receive+0xb18>)
 8018098:	f006 f81c 	bl	801e0d4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80180a0:	4b4e      	ldr	r3, [pc, #312]	@ (80181dc <tcp_receive+0xb04>)
 80180a2:	881b      	ldrh	r3, [r3, #0]
 80180a4:	1ad3      	subs	r3, r2, r3
 80180a6:	b29a      	uxth	r2, r3
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80180ac:	6878      	ldr	r0, [r7, #4]
 80180ae:	f7fc ffc5 	bl	801503c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80180b2:	4b4c      	ldr	r3, [pc, #304]	@ (80181e4 <tcp_receive+0xb0c>)
 80180b4:	685b      	ldr	r3, [r3, #4]
 80180b6:	891b      	ldrh	r3, [r3, #8]
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d006      	beq.n	80180ca <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80180bc:	4b49      	ldr	r3, [pc, #292]	@ (80181e4 <tcp_receive+0xb0c>)
 80180be:	685b      	ldr	r3, [r3, #4]
 80180c0:	4a4d      	ldr	r2, [pc, #308]	@ (80181f8 <tcp_receive+0xb20>)
 80180c2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80180c4:	4b47      	ldr	r3, [pc, #284]	@ (80181e4 <tcp_receive+0xb0c>)
 80180c6:	2200      	movs	r2, #0
 80180c8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80180ca:	4b46      	ldr	r3, [pc, #280]	@ (80181e4 <tcp_receive+0xb0c>)
 80180cc:	68db      	ldr	r3, [r3, #12]
 80180ce:	899b      	ldrh	r3, [r3, #12]
 80180d0:	b29b      	uxth	r3, r3
 80180d2:	4618      	mov	r0, r3
 80180d4:	f7fa fe14 	bl	8012d00 <lwip_htons>
 80180d8:	4603      	mov	r3, r0
 80180da:	b2db      	uxtb	r3, r3
 80180dc:	f003 0301 	and.w	r3, r3, #1
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	f000 80b8 	beq.w	8018256 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80180e6:	4b45      	ldr	r3, [pc, #276]	@ (80181fc <tcp_receive+0xb24>)
 80180e8:	781b      	ldrb	r3, [r3, #0]
 80180ea:	f043 0320 	orr.w	r3, r3, #32
 80180ee:	b2da      	uxtb	r2, r3
 80180f0:	4b42      	ldr	r3, [pc, #264]	@ (80181fc <tcp_receive+0xb24>)
 80180f2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80180f4:	e0af      	b.n	8018256 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80180fa:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018100:	68db      	ldr	r3, [r3, #12]
 8018102:	685b      	ldr	r3, [r3, #4]
 8018104:	4a36      	ldr	r2, [pc, #216]	@ (80181e0 <tcp_receive+0xb08>)
 8018106:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018108:	68bb      	ldr	r3, [r7, #8]
 801810a:	891b      	ldrh	r3, [r3, #8]
 801810c:	461c      	mov	r4, r3
 801810e:	68bb      	ldr	r3, [r7, #8]
 8018110:	68db      	ldr	r3, [r3, #12]
 8018112:	899b      	ldrh	r3, [r3, #12]
 8018114:	b29b      	uxth	r3, r3
 8018116:	4618      	mov	r0, r3
 8018118:	f7fa fdf2 	bl	8012d00 <lwip_htons>
 801811c:	4603      	mov	r3, r0
 801811e:	b2db      	uxtb	r3, r3
 8018120:	f003 0303 	and.w	r3, r3, #3
 8018124:	2b00      	cmp	r3, #0
 8018126:	d001      	beq.n	801812c <tcp_receive+0xa54>
 8018128:	2301      	movs	r3, #1
 801812a:	e000      	b.n	801812e <tcp_receive+0xa56>
 801812c:	2300      	movs	r3, #0
 801812e:	191a      	adds	r2, r3, r4
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018134:	441a      	add	r2, r3
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801813e:	461c      	mov	r4, r3
 8018140:	68bb      	ldr	r3, [r7, #8]
 8018142:	891b      	ldrh	r3, [r3, #8]
 8018144:	461d      	mov	r5, r3
 8018146:	68bb      	ldr	r3, [r7, #8]
 8018148:	68db      	ldr	r3, [r3, #12]
 801814a:	899b      	ldrh	r3, [r3, #12]
 801814c:	b29b      	uxth	r3, r3
 801814e:	4618      	mov	r0, r3
 8018150:	f7fa fdd6 	bl	8012d00 <lwip_htons>
 8018154:	4603      	mov	r3, r0
 8018156:	b2db      	uxtb	r3, r3
 8018158:	f003 0303 	and.w	r3, r3, #3
 801815c:	2b00      	cmp	r3, #0
 801815e:	d001      	beq.n	8018164 <tcp_receive+0xa8c>
 8018160:	2301      	movs	r3, #1
 8018162:	e000      	b.n	8018166 <tcp_receive+0xa8e>
 8018164:	2300      	movs	r3, #0
 8018166:	442b      	add	r3, r5
 8018168:	429c      	cmp	r4, r3
 801816a:	d206      	bcs.n	801817a <tcp_receive+0xaa2>
 801816c:	4b1e      	ldr	r3, [pc, #120]	@ (80181e8 <tcp_receive+0xb10>)
 801816e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8018172:	4923      	ldr	r1, [pc, #140]	@ (8018200 <tcp_receive+0xb28>)
 8018174:	481e      	ldr	r0, [pc, #120]	@ (80181f0 <tcp_receive+0xb18>)
 8018176:	f005 ffad 	bl	801e0d4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801817a:	68bb      	ldr	r3, [r7, #8]
 801817c:	891b      	ldrh	r3, [r3, #8]
 801817e:	461c      	mov	r4, r3
 8018180:	68bb      	ldr	r3, [r7, #8]
 8018182:	68db      	ldr	r3, [r3, #12]
 8018184:	899b      	ldrh	r3, [r3, #12]
 8018186:	b29b      	uxth	r3, r3
 8018188:	4618      	mov	r0, r3
 801818a:	f7fa fdb9 	bl	8012d00 <lwip_htons>
 801818e:	4603      	mov	r3, r0
 8018190:	b2db      	uxtb	r3, r3
 8018192:	f003 0303 	and.w	r3, r3, #3
 8018196:	2b00      	cmp	r3, #0
 8018198:	d001      	beq.n	801819e <tcp_receive+0xac6>
 801819a:	2301      	movs	r3, #1
 801819c:	e000      	b.n	80181a0 <tcp_receive+0xac8>
 801819e:	2300      	movs	r3, #0
 80181a0:	1919      	adds	r1, r3, r4
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80181a6:	b28b      	uxth	r3, r1
 80181a8:	1ad3      	subs	r3, r2, r3
 80181aa:	b29a      	uxth	r2, r3
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80181b0:	6878      	ldr	r0, [r7, #4]
 80181b2:	f7fc ff43 	bl	801503c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80181b6:	68bb      	ldr	r3, [r7, #8]
 80181b8:	685b      	ldr	r3, [r3, #4]
 80181ba:	891b      	ldrh	r3, [r3, #8]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d028      	beq.n	8018212 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80181c0:	4b0d      	ldr	r3, [pc, #52]	@ (80181f8 <tcp_receive+0xb20>)
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d01d      	beq.n	8018204 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80181c8:	4b0b      	ldr	r3, [pc, #44]	@ (80181f8 <tcp_receive+0xb20>)
 80181ca:	681a      	ldr	r2, [r3, #0]
 80181cc:	68bb      	ldr	r3, [r7, #8]
 80181ce:	685b      	ldr	r3, [r3, #4]
 80181d0:	4619      	mov	r1, r3
 80181d2:	4610      	mov	r0, r2
 80181d4:	f7fc fa50 	bl	8014678 <pbuf_cat>
 80181d8:	e018      	b.n	801820c <tcp_receive+0xb34>
 80181da:	bf00      	nop
 80181dc:	200277f2 	.word	0x200277f2
 80181e0:	200277e8 	.word	0x200277e8
 80181e4:	200277c8 	.word	0x200277c8
 80181e8:	08020564 	.word	0x08020564
 80181ec:	08020944 	.word	0x08020944
 80181f0:	080205b0 	.word	0x080205b0
 80181f4:	08020980 	.word	0x08020980
 80181f8:	200277f8 	.word	0x200277f8
 80181fc:	200277f5 	.word	0x200277f5
 8018200:	080209a0 	.word	0x080209a0
            } else {
              recv_data = cseg->p;
 8018204:	68bb      	ldr	r3, [r7, #8]
 8018206:	685b      	ldr	r3, [r3, #4]
 8018208:	4a70      	ldr	r2, [pc, #448]	@ (80183cc <tcp_receive+0xcf4>)
 801820a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801820c:	68bb      	ldr	r3, [r7, #8]
 801820e:	2200      	movs	r2, #0
 8018210:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018212:	68bb      	ldr	r3, [r7, #8]
 8018214:	68db      	ldr	r3, [r3, #12]
 8018216:	899b      	ldrh	r3, [r3, #12]
 8018218:	b29b      	uxth	r3, r3
 801821a:	4618      	mov	r0, r3
 801821c:	f7fa fd70 	bl	8012d00 <lwip_htons>
 8018220:	4603      	mov	r3, r0
 8018222:	b2db      	uxtb	r3, r3
 8018224:	f003 0301 	and.w	r3, r3, #1
 8018228:	2b00      	cmp	r3, #0
 801822a:	d00d      	beq.n	8018248 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801822c:	4b68      	ldr	r3, [pc, #416]	@ (80183d0 <tcp_receive+0xcf8>)
 801822e:	781b      	ldrb	r3, [r3, #0]
 8018230:	f043 0320 	orr.w	r3, r3, #32
 8018234:	b2da      	uxtb	r2, r3
 8018236:	4b66      	ldr	r3, [pc, #408]	@ (80183d0 <tcp_receive+0xcf8>)
 8018238:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	7d1b      	ldrb	r3, [r3, #20]
 801823e:	2b04      	cmp	r3, #4
 8018240:	d102      	bne.n	8018248 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	2207      	movs	r2, #7
 8018246:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018248:	68bb      	ldr	r3, [r7, #8]
 801824a:	681a      	ldr	r2, [r3, #0]
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8018250:	68b8      	ldr	r0, [r7, #8]
 8018252:	f7fd fbd4 	bl	80159fe <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801825a:	2b00      	cmp	r3, #0
 801825c:	d008      	beq.n	8018270 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018262:	68db      	ldr	r3, [r3, #12]
 8018264:	685a      	ldr	r2, [r3, #4]
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801826a:	429a      	cmp	r2, r3
 801826c:	f43f af43 	beq.w	80180f6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	8b5b      	ldrh	r3, [r3, #26]
 8018274:	f003 0301 	and.w	r3, r3, #1
 8018278:	2b00      	cmp	r3, #0
 801827a:	d00e      	beq.n	801829a <tcp_receive+0xbc2>
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	8b5b      	ldrh	r3, [r3, #26]
 8018280:	f023 0301 	bic.w	r3, r3, #1
 8018284:	b29a      	uxth	r2, r3
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	835a      	strh	r2, [r3, #26]
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	8b5b      	ldrh	r3, [r3, #26]
 801828e:	f043 0302 	orr.w	r3, r3, #2
 8018292:	b29a      	uxth	r2, r3
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018298:	e187      	b.n	80185aa <tcp_receive+0xed2>
        tcp_ack(pcb);
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	8b5b      	ldrh	r3, [r3, #26]
 801829e:	f043 0301 	orr.w	r3, r3, #1
 80182a2:	b29a      	uxth	r2, r3
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80182a8:	e17f      	b.n	80185aa <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d106      	bne.n	80182c0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80182b2:	4848      	ldr	r0, [pc, #288]	@ (80183d4 <tcp_receive+0xcfc>)
 80182b4:	f7fd fbbc 	bl	8015a30 <tcp_seg_copy>
 80182b8:	4602      	mov	r2, r0
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	675a      	str	r2, [r3, #116]	@ 0x74
 80182be:	e16c      	b.n	801859a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80182c0:	2300      	movs	r3, #0
 80182c2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80182c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80182ca:	e156      	b.n	801857a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80182cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182ce:	68db      	ldr	r3, [r3, #12]
 80182d0:	685a      	ldr	r2, [r3, #4]
 80182d2:	4b41      	ldr	r3, [pc, #260]	@ (80183d8 <tcp_receive+0xd00>)
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	429a      	cmp	r2, r3
 80182d8:	d11d      	bne.n	8018316 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80182da:	4b3e      	ldr	r3, [pc, #248]	@ (80183d4 <tcp_receive+0xcfc>)
 80182dc:	891a      	ldrh	r2, [r3, #8]
 80182de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182e0:	891b      	ldrh	r3, [r3, #8]
 80182e2:	429a      	cmp	r2, r3
 80182e4:	f240 814e 	bls.w	8018584 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80182e8:	483a      	ldr	r0, [pc, #232]	@ (80183d4 <tcp_receive+0xcfc>)
 80182ea:	f7fd fba1 	bl	8015a30 <tcp_seg_copy>
 80182ee:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80182f0:	697b      	ldr	r3, [r7, #20]
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	f000 8148 	beq.w	8018588 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80182f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d003      	beq.n	8018306 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80182fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018300:	697a      	ldr	r2, [r7, #20]
 8018302:	601a      	str	r2, [r3, #0]
 8018304:	e002      	b.n	801830c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	697a      	ldr	r2, [r7, #20]
 801830a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801830c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801830e:	6978      	ldr	r0, [r7, #20]
 8018310:	f7ff f8de 	bl	80174d0 <tcp_oos_insert_segment>
                }
                break;
 8018314:	e138      	b.n	8018588 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8018316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018318:	2b00      	cmp	r3, #0
 801831a:	d117      	bne.n	801834c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801831c:	4b2e      	ldr	r3, [pc, #184]	@ (80183d8 <tcp_receive+0xd00>)
 801831e:	681a      	ldr	r2, [r3, #0]
 8018320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018322:	68db      	ldr	r3, [r3, #12]
 8018324:	685b      	ldr	r3, [r3, #4]
 8018326:	1ad3      	subs	r3, r2, r3
 8018328:	2b00      	cmp	r3, #0
 801832a:	da57      	bge.n	80183dc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801832c:	4829      	ldr	r0, [pc, #164]	@ (80183d4 <tcp_receive+0xcfc>)
 801832e:	f7fd fb7f 	bl	8015a30 <tcp_seg_copy>
 8018332:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018334:	69bb      	ldr	r3, [r7, #24]
 8018336:	2b00      	cmp	r3, #0
 8018338:	f000 8128 	beq.w	801858c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	69ba      	ldr	r2, [r7, #24]
 8018340:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8018342:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018344:	69b8      	ldr	r0, [r7, #24]
 8018346:	f7ff f8c3 	bl	80174d0 <tcp_oos_insert_segment>
                  }
                  break;
 801834a:	e11f      	b.n	801858c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801834c:	4b22      	ldr	r3, [pc, #136]	@ (80183d8 <tcp_receive+0xd00>)
 801834e:	681a      	ldr	r2, [r3, #0]
 8018350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018352:	68db      	ldr	r3, [r3, #12]
 8018354:	685b      	ldr	r3, [r3, #4]
 8018356:	1ad3      	subs	r3, r2, r3
 8018358:	3b01      	subs	r3, #1
 801835a:	2b00      	cmp	r3, #0
 801835c:	db3e      	blt.n	80183dc <tcp_receive+0xd04>
 801835e:	4b1e      	ldr	r3, [pc, #120]	@ (80183d8 <tcp_receive+0xd00>)
 8018360:	681a      	ldr	r2, [r3, #0]
 8018362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018364:	68db      	ldr	r3, [r3, #12]
 8018366:	685b      	ldr	r3, [r3, #4]
 8018368:	1ad3      	subs	r3, r2, r3
 801836a:	3301      	adds	r3, #1
 801836c:	2b00      	cmp	r3, #0
 801836e:	dc35      	bgt.n	80183dc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018370:	4818      	ldr	r0, [pc, #96]	@ (80183d4 <tcp_receive+0xcfc>)
 8018372:	f7fd fb5d 	bl	8015a30 <tcp_seg_copy>
 8018376:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8018378:	69fb      	ldr	r3, [r7, #28]
 801837a:	2b00      	cmp	r3, #0
 801837c:	f000 8108 	beq.w	8018590 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8018380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018382:	68db      	ldr	r3, [r3, #12]
 8018384:	685b      	ldr	r3, [r3, #4]
 8018386:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018388:	8912      	ldrh	r2, [r2, #8]
 801838a:	441a      	add	r2, r3
 801838c:	4b12      	ldr	r3, [pc, #72]	@ (80183d8 <tcp_receive+0xd00>)
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	1ad3      	subs	r3, r2, r3
 8018392:	2b00      	cmp	r3, #0
 8018394:	dd12      	ble.n	80183bc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018396:	4b10      	ldr	r3, [pc, #64]	@ (80183d8 <tcp_receive+0xd00>)
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	b29a      	uxth	r2, r3
 801839c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801839e:	68db      	ldr	r3, [r3, #12]
 80183a0:	685b      	ldr	r3, [r3, #4]
 80183a2:	b29b      	uxth	r3, r3
 80183a4:	1ad3      	subs	r3, r2, r3
 80183a6:	b29a      	uxth	r2, r3
 80183a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80183aa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80183ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80183ae:	685a      	ldr	r2, [r3, #4]
 80183b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80183b2:	891b      	ldrh	r3, [r3, #8]
 80183b4:	4619      	mov	r1, r3
 80183b6:	4610      	mov	r0, r2
 80183b8:	f7fb ff0a 	bl	80141d0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80183bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80183be:	69fa      	ldr	r2, [r7, #28]
 80183c0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80183c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80183c4:	69f8      	ldr	r0, [r7, #28]
 80183c6:	f7ff f883 	bl	80174d0 <tcp_oos_insert_segment>
                  }
                  break;
 80183ca:	e0e1      	b.n	8018590 <tcp_receive+0xeb8>
 80183cc:	200277f8 	.word	0x200277f8
 80183d0:	200277f5 	.word	0x200277f5
 80183d4:	200277c8 	.word	0x200277c8
 80183d8:	200277e8 	.word	0x200277e8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80183dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183de:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80183e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	f040 80c5 	bne.w	8018574 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80183ea:	4b7f      	ldr	r3, [pc, #508]	@ (80185e8 <tcp_receive+0xf10>)
 80183ec:	681a      	ldr	r2, [r3, #0]
 80183ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183f0:	68db      	ldr	r3, [r3, #12]
 80183f2:	685b      	ldr	r3, [r3, #4]
 80183f4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	f340 80bc 	ble.w	8018574 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80183fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183fe:	68db      	ldr	r3, [r3, #12]
 8018400:	899b      	ldrh	r3, [r3, #12]
 8018402:	b29b      	uxth	r3, r3
 8018404:	4618      	mov	r0, r3
 8018406:	f7fa fc7b 	bl	8012d00 <lwip_htons>
 801840a:	4603      	mov	r3, r0
 801840c:	b2db      	uxtb	r3, r3
 801840e:	f003 0301 	and.w	r3, r3, #1
 8018412:	2b00      	cmp	r3, #0
 8018414:	f040 80be 	bne.w	8018594 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8018418:	4874      	ldr	r0, [pc, #464]	@ (80185ec <tcp_receive+0xf14>)
 801841a:	f7fd fb09 	bl	8015a30 <tcp_seg_copy>
 801841e:	4602      	mov	r2, r0
 8018420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018422:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8018424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	2b00      	cmp	r3, #0
 801842a:	f000 80b5 	beq.w	8018598 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801842e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018430:	68db      	ldr	r3, [r3, #12]
 8018432:	685b      	ldr	r3, [r3, #4]
 8018434:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018436:	8912      	ldrh	r2, [r2, #8]
 8018438:	441a      	add	r2, r3
 801843a:	4b6b      	ldr	r3, [pc, #428]	@ (80185e8 <tcp_receive+0xf10>)
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	1ad3      	subs	r3, r2, r3
 8018440:	2b00      	cmp	r3, #0
 8018442:	dd12      	ble.n	801846a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018444:	4b68      	ldr	r3, [pc, #416]	@ (80185e8 <tcp_receive+0xf10>)
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	b29a      	uxth	r2, r3
 801844a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801844c:	68db      	ldr	r3, [r3, #12]
 801844e:	685b      	ldr	r3, [r3, #4]
 8018450:	b29b      	uxth	r3, r3
 8018452:	1ad3      	subs	r3, r2, r3
 8018454:	b29a      	uxth	r2, r3
 8018456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018458:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801845a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801845c:	685a      	ldr	r2, [r3, #4]
 801845e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018460:	891b      	ldrh	r3, [r3, #8]
 8018462:	4619      	mov	r1, r3
 8018464:	4610      	mov	r0, r2
 8018466:	f7fb feb3 	bl	80141d0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801846a:	4b61      	ldr	r3, [pc, #388]	@ (80185f0 <tcp_receive+0xf18>)
 801846c:	881b      	ldrh	r3, [r3, #0]
 801846e:	461a      	mov	r2, r3
 8018470:	4b5d      	ldr	r3, [pc, #372]	@ (80185e8 <tcp_receive+0xf10>)
 8018472:	681b      	ldr	r3, [r3, #0]
 8018474:	441a      	add	r2, r3
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801847a:	6879      	ldr	r1, [r7, #4]
 801847c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801847e:	440b      	add	r3, r1
 8018480:	1ad3      	subs	r3, r2, r3
 8018482:	2b00      	cmp	r3, #0
 8018484:	f340 8088 	ble.w	8018598 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	68db      	ldr	r3, [r3, #12]
 801848e:	899b      	ldrh	r3, [r3, #12]
 8018490:	b29b      	uxth	r3, r3
 8018492:	4618      	mov	r0, r3
 8018494:	f7fa fc34 	bl	8012d00 <lwip_htons>
 8018498:	4603      	mov	r3, r0
 801849a:	b2db      	uxtb	r3, r3
 801849c:	f003 0301 	and.w	r3, r3, #1
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d021      	beq.n	80184e8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80184a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184a6:	681b      	ldr	r3, [r3, #0]
 80184a8:	68db      	ldr	r3, [r3, #12]
 80184aa:	899b      	ldrh	r3, [r3, #12]
 80184ac:	b29b      	uxth	r3, r3
 80184ae:	b21b      	sxth	r3, r3
 80184b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80184b4:	b21c      	sxth	r4, r3
 80184b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184b8:	681b      	ldr	r3, [r3, #0]
 80184ba:	68db      	ldr	r3, [r3, #12]
 80184bc:	899b      	ldrh	r3, [r3, #12]
 80184be:	b29b      	uxth	r3, r3
 80184c0:	4618      	mov	r0, r3
 80184c2:	f7fa fc1d 	bl	8012d00 <lwip_htons>
 80184c6:	4603      	mov	r3, r0
 80184c8:	b2db      	uxtb	r3, r3
 80184ca:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80184ce:	b29b      	uxth	r3, r3
 80184d0:	4618      	mov	r0, r3
 80184d2:	f7fa fc15 	bl	8012d00 <lwip_htons>
 80184d6:	4603      	mov	r3, r0
 80184d8:	b21b      	sxth	r3, r3
 80184da:	4323      	orrs	r3, r4
 80184dc:	b21a      	sxth	r2, r3
 80184de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	68db      	ldr	r3, [r3, #12]
 80184e4:	b292      	uxth	r2, r2
 80184e6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80184ec:	b29a      	uxth	r2, r3
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80184f2:	4413      	add	r3, r2
 80184f4:	b299      	uxth	r1, r3
 80184f6:	4b3c      	ldr	r3, [pc, #240]	@ (80185e8 <tcp_receive+0xf10>)
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	b29a      	uxth	r2, r3
 80184fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184fe:	681b      	ldr	r3, [r3, #0]
 8018500:	1a8a      	subs	r2, r1, r2
 8018502:	b292      	uxth	r2, r2
 8018504:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8018506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	685a      	ldr	r2, [r3, #4]
 801850c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	891b      	ldrh	r3, [r3, #8]
 8018512:	4619      	mov	r1, r3
 8018514:	4610      	mov	r0, r2
 8018516:	f7fb fe5b 	bl	80141d0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801851a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801851c:	681b      	ldr	r3, [r3, #0]
 801851e:	891c      	ldrh	r4, [r3, #8]
 8018520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018522:	681b      	ldr	r3, [r3, #0]
 8018524:	68db      	ldr	r3, [r3, #12]
 8018526:	899b      	ldrh	r3, [r3, #12]
 8018528:	b29b      	uxth	r3, r3
 801852a:	4618      	mov	r0, r3
 801852c:	f7fa fbe8 	bl	8012d00 <lwip_htons>
 8018530:	4603      	mov	r3, r0
 8018532:	b2db      	uxtb	r3, r3
 8018534:	f003 0303 	and.w	r3, r3, #3
 8018538:	2b00      	cmp	r3, #0
 801853a:	d001      	beq.n	8018540 <tcp_receive+0xe68>
 801853c:	2301      	movs	r3, #1
 801853e:	e000      	b.n	8018542 <tcp_receive+0xe6a>
 8018540:	2300      	movs	r3, #0
 8018542:	4423      	add	r3, r4
 8018544:	b29a      	uxth	r2, r3
 8018546:	4b2a      	ldr	r3, [pc, #168]	@ (80185f0 <tcp_receive+0xf18>)
 8018548:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801854a:	4b29      	ldr	r3, [pc, #164]	@ (80185f0 <tcp_receive+0xf18>)
 801854c:	881b      	ldrh	r3, [r3, #0]
 801854e:	461a      	mov	r2, r3
 8018550:	4b25      	ldr	r3, [pc, #148]	@ (80185e8 <tcp_receive+0xf10>)
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	441a      	add	r2, r3
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801855a:	6879      	ldr	r1, [r7, #4]
 801855c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801855e:	440b      	add	r3, r1
 8018560:	429a      	cmp	r2, r3
 8018562:	d019      	beq.n	8018598 <tcp_receive+0xec0>
 8018564:	4b23      	ldr	r3, [pc, #140]	@ (80185f4 <tcp_receive+0xf1c>)
 8018566:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801856a:	4923      	ldr	r1, [pc, #140]	@ (80185f8 <tcp_receive+0xf20>)
 801856c:	4823      	ldr	r0, [pc, #140]	@ (80185fc <tcp_receive+0xf24>)
 801856e:	f005 fdb1 	bl	801e0d4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8018572:	e011      	b.n	8018598 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018576:	681b      	ldr	r3, [r3, #0]
 8018578:	63bb      	str	r3, [r7, #56]	@ 0x38
 801857a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801857c:	2b00      	cmp	r3, #0
 801857e:	f47f aea5 	bne.w	80182cc <tcp_receive+0xbf4>
 8018582:	e00a      	b.n	801859a <tcp_receive+0xec2>
                break;
 8018584:	bf00      	nop
 8018586:	e008      	b.n	801859a <tcp_receive+0xec2>
                break;
 8018588:	bf00      	nop
 801858a:	e006      	b.n	801859a <tcp_receive+0xec2>
                  break;
 801858c:	bf00      	nop
 801858e:	e004      	b.n	801859a <tcp_receive+0xec2>
                  break;
 8018590:	bf00      	nop
 8018592:	e002      	b.n	801859a <tcp_receive+0xec2>
                  break;
 8018594:	bf00      	nop
 8018596:	e000      	b.n	801859a <tcp_receive+0xec2>
                break;
 8018598:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801859a:	6878      	ldr	r0, [r7, #4]
 801859c:	f001 fa30 	bl	8019a00 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80185a0:	e003      	b.n	80185aa <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80185a2:	6878      	ldr	r0, [r7, #4]
 80185a4:	f001 fa2c 	bl	8019a00 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80185a8:	e01a      	b.n	80185e0 <tcp_receive+0xf08>
 80185aa:	e019      	b.n	80185e0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80185ac:	4b0e      	ldr	r3, [pc, #56]	@ (80185e8 <tcp_receive+0xf10>)
 80185ae:	681a      	ldr	r2, [r3, #0]
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80185b4:	1ad3      	subs	r3, r2, r3
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	db0a      	blt.n	80185d0 <tcp_receive+0xef8>
 80185ba:	4b0b      	ldr	r3, [pc, #44]	@ (80185e8 <tcp_receive+0xf10>)
 80185bc:	681a      	ldr	r2, [r3, #0]
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80185c2:	6879      	ldr	r1, [r7, #4]
 80185c4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80185c6:	440b      	add	r3, r1
 80185c8:	1ad3      	subs	r3, r2, r3
 80185ca:	3301      	adds	r3, #1
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	dd07      	ble.n	80185e0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	8b5b      	ldrh	r3, [r3, #26]
 80185d4:	f043 0302 	orr.w	r3, r3, #2
 80185d8:	b29a      	uxth	r2, r3
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80185de:	e7ff      	b.n	80185e0 <tcp_receive+0xf08>
 80185e0:	bf00      	nop
 80185e2:	3750      	adds	r7, #80	@ 0x50
 80185e4:	46bd      	mov	sp, r7
 80185e6:	bdb0      	pop	{r4, r5, r7, pc}
 80185e8:	200277e8 	.word	0x200277e8
 80185ec:	200277c8 	.word	0x200277c8
 80185f0:	200277f2 	.word	0x200277f2
 80185f4:	08020564 	.word	0x08020564
 80185f8:	0802090c 	.word	0x0802090c
 80185fc:	080205b0 	.word	0x080205b0

08018600 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8018600:	b480      	push	{r7}
 8018602:	b083      	sub	sp, #12
 8018604:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8018606:	4b15      	ldr	r3, [pc, #84]	@ (801865c <tcp_get_next_optbyte+0x5c>)
 8018608:	881b      	ldrh	r3, [r3, #0]
 801860a:	1c5a      	adds	r2, r3, #1
 801860c:	b291      	uxth	r1, r2
 801860e:	4a13      	ldr	r2, [pc, #76]	@ (801865c <tcp_get_next_optbyte+0x5c>)
 8018610:	8011      	strh	r1, [r2, #0]
 8018612:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018614:	4b12      	ldr	r3, [pc, #72]	@ (8018660 <tcp_get_next_optbyte+0x60>)
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	2b00      	cmp	r3, #0
 801861a:	d004      	beq.n	8018626 <tcp_get_next_optbyte+0x26>
 801861c:	4b11      	ldr	r3, [pc, #68]	@ (8018664 <tcp_get_next_optbyte+0x64>)
 801861e:	881b      	ldrh	r3, [r3, #0]
 8018620:	88fa      	ldrh	r2, [r7, #6]
 8018622:	429a      	cmp	r2, r3
 8018624:	d208      	bcs.n	8018638 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8018626:	4b10      	ldr	r3, [pc, #64]	@ (8018668 <tcp_get_next_optbyte+0x68>)
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	3314      	adds	r3, #20
 801862c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801862e:	88fb      	ldrh	r3, [r7, #6]
 8018630:	683a      	ldr	r2, [r7, #0]
 8018632:	4413      	add	r3, r2
 8018634:	781b      	ldrb	r3, [r3, #0]
 8018636:	e00b      	b.n	8018650 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018638:	88fb      	ldrh	r3, [r7, #6]
 801863a:	b2da      	uxtb	r2, r3
 801863c:	4b09      	ldr	r3, [pc, #36]	@ (8018664 <tcp_get_next_optbyte+0x64>)
 801863e:	881b      	ldrh	r3, [r3, #0]
 8018640:	b2db      	uxtb	r3, r3
 8018642:	1ad3      	subs	r3, r2, r3
 8018644:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8018646:	4b06      	ldr	r3, [pc, #24]	@ (8018660 <tcp_get_next_optbyte+0x60>)
 8018648:	681a      	ldr	r2, [r3, #0]
 801864a:	797b      	ldrb	r3, [r7, #5]
 801864c:	4413      	add	r3, r2
 801864e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018650:	4618      	mov	r0, r3
 8018652:	370c      	adds	r7, #12
 8018654:	46bd      	mov	sp, r7
 8018656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801865a:	4770      	bx	lr
 801865c:	200277e4 	.word	0x200277e4
 8018660:	200277e0 	.word	0x200277e0
 8018664:	200277de 	.word	0x200277de
 8018668:	200277d8 	.word	0x200277d8

0801866c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801866c:	b580      	push	{r7, lr}
 801866e:	b084      	sub	sp, #16
 8018670:	af00      	add	r7, sp, #0
 8018672:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	2b00      	cmp	r3, #0
 8018678:	d106      	bne.n	8018688 <tcp_parseopt+0x1c>
 801867a:	4b32      	ldr	r3, [pc, #200]	@ (8018744 <tcp_parseopt+0xd8>)
 801867c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8018680:	4931      	ldr	r1, [pc, #196]	@ (8018748 <tcp_parseopt+0xdc>)
 8018682:	4832      	ldr	r0, [pc, #200]	@ (801874c <tcp_parseopt+0xe0>)
 8018684:	f005 fd26 	bl	801e0d4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8018688:	4b31      	ldr	r3, [pc, #196]	@ (8018750 <tcp_parseopt+0xe4>)
 801868a:	881b      	ldrh	r3, [r3, #0]
 801868c:	2b00      	cmp	r3, #0
 801868e:	d056      	beq.n	801873e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018690:	4b30      	ldr	r3, [pc, #192]	@ (8018754 <tcp_parseopt+0xe8>)
 8018692:	2200      	movs	r2, #0
 8018694:	801a      	strh	r2, [r3, #0]
 8018696:	e046      	b.n	8018726 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8018698:	f7ff ffb2 	bl	8018600 <tcp_get_next_optbyte>
 801869c:	4603      	mov	r3, r0
 801869e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80186a0:	7bfb      	ldrb	r3, [r7, #15]
 80186a2:	2b02      	cmp	r3, #2
 80186a4:	d006      	beq.n	80186b4 <tcp_parseopt+0x48>
 80186a6:	2b02      	cmp	r3, #2
 80186a8:	dc2a      	bgt.n	8018700 <tcp_parseopt+0x94>
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d042      	beq.n	8018734 <tcp_parseopt+0xc8>
 80186ae:	2b01      	cmp	r3, #1
 80186b0:	d038      	beq.n	8018724 <tcp_parseopt+0xb8>
 80186b2:	e025      	b.n	8018700 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80186b4:	f7ff ffa4 	bl	8018600 <tcp_get_next_optbyte>
 80186b8:	4603      	mov	r3, r0
 80186ba:	2b04      	cmp	r3, #4
 80186bc:	d13c      	bne.n	8018738 <tcp_parseopt+0xcc>
 80186be:	4b25      	ldr	r3, [pc, #148]	@ (8018754 <tcp_parseopt+0xe8>)
 80186c0:	881b      	ldrh	r3, [r3, #0]
 80186c2:	3301      	adds	r3, #1
 80186c4:	4a22      	ldr	r2, [pc, #136]	@ (8018750 <tcp_parseopt+0xe4>)
 80186c6:	8812      	ldrh	r2, [r2, #0]
 80186c8:	4293      	cmp	r3, r2
 80186ca:	da35      	bge.n	8018738 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80186cc:	f7ff ff98 	bl	8018600 <tcp_get_next_optbyte>
 80186d0:	4603      	mov	r3, r0
 80186d2:	021b      	lsls	r3, r3, #8
 80186d4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80186d6:	f7ff ff93 	bl	8018600 <tcp_get_next_optbyte>
 80186da:	4603      	mov	r3, r0
 80186dc:	461a      	mov	r2, r3
 80186de:	89bb      	ldrh	r3, [r7, #12]
 80186e0:	4313      	orrs	r3, r2
 80186e2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80186e4:	89bb      	ldrh	r3, [r7, #12]
 80186e6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80186ea:	d804      	bhi.n	80186f6 <tcp_parseopt+0x8a>
 80186ec:	89bb      	ldrh	r3, [r7, #12]
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d001      	beq.n	80186f6 <tcp_parseopt+0x8a>
 80186f2:	89ba      	ldrh	r2, [r7, #12]
 80186f4:	e001      	b.n	80186fa <tcp_parseopt+0x8e>
 80186f6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80186fe:	e012      	b.n	8018726 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8018700:	f7ff ff7e 	bl	8018600 <tcp_get_next_optbyte>
 8018704:	4603      	mov	r3, r0
 8018706:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8018708:	7afb      	ldrb	r3, [r7, #11]
 801870a:	2b01      	cmp	r3, #1
 801870c:	d916      	bls.n	801873c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801870e:	7afb      	ldrb	r3, [r7, #11]
 8018710:	b29a      	uxth	r2, r3
 8018712:	4b10      	ldr	r3, [pc, #64]	@ (8018754 <tcp_parseopt+0xe8>)
 8018714:	881b      	ldrh	r3, [r3, #0]
 8018716:	4413      	add	r3, r2
 8018718:	b29b      	uxth	r3, r3
 801871a:	3b02      	subs	r3, #2
 801871c:	b29a      	uxth	r2, r3
 801871e:	4b0d      	ldr	r3, [pc, #52]	@ (8018754 <tcp_parseopt+0xe8>)
 8018720:	801a      	strh	r2, [r3, #0]
 8018722:	e000      	b.n	8018726 <tcp_parseopt+0xba>
          break;
 8018724:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018726:	4b0b      	ldr	r3, [pc, #44]	@ (8018754 <tcp_parseopt+0xe8>)
 8018728:	881a      	ldrh	r2, [r3, #0]
 801872a:	4b09      	ldr	r3, [pc, #36]	@ (8018750 <tcp_parseopt+0xe4>)
 801872c:	881b      	ldrh	r3, [r3, #0]
 801872e:	429a      	cmp	r2, r3
 8018730:	d3b2      	bcc.n	8018698 <tcp_parseopt+0x2c>
 8018732:	e004      	b.n	801873e <tcp_parseopt+0xd2>
          return;
 8018734:	bf00      	nop
 8018736:	e002      	b.n	801873e <tcp_parseopt+0xd2>
            return;
 8018738:	bf00      	nop
 801873a:	e000      	b.n	801873e <tcp_parseopt+0xd2>
            return;
 801873c:	bf00      	nop
      }
    }
  }
}
 801873e:	3710      	adds	r7, #16
 8018740:	46bd      	mov	sp, r7
 8018742:	bd80      	pop	{r7, pc}
 8018744:	08020564 	.word	0x08020564
 8018748:	080209c8 	.word	0x080209c8
 801874c:	080205b0 	.word	0x080205b0
 8018750:	200277dc 	.word	0x200277dc
 8018754:	200277e4 	.word	0x200277e4

08018758 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8018758:	b480      	push	{r7}
 801875a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801875c:	4b05      	ldr	r3, [pc, #20]	@ (8018774 <tcp_trigger_input_pcb_close+0x1c>)
 801875e:	781b      	ldrb	r3, [r3, #0]
 8018760:	f043 0310 	orr.w	r3, r3, #16
 8018764:	b2da      	uxtb	r2, r3
 8018766:	4b03      	ldr	r3, [pc, #12]	@ (8018774 <tcp_trigger_input_pcb_close+0x1c>)
 8018768:	701a      	strb	r2, [r3, #0]
}
 801876a:	bf00      	nop
 801876c:	46bd      	mov	sp, r7
 801876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018772:	4770      	bx	lr
 8018774:	200277f5 	.word	0x200277f5

08018778 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8018778:	b580      	push	{r7, lr}
 801877a:	b084      	sub	sp, #16
 801877c:	af00      	add	r7, sp, #0
 801877e:	60f8      	str	r0, [r7, #12]
 8018780:	60b9      	str	r1, [r7, #8]
 8018782:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	2b00      	cmp	r3, #0
 8018788:	d00a      	beq.n	80187a0 <tcp_route+0x28>
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	7a1b      	ldrb	r3, [r3, #8]
 801878e:	2b00      	cmp	r3, #0
 8018790:	d006      	beq.n	80187a0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	7a1b      	ldrb	r3, [r3, #8]
 8018796:	4618      	mov	r0, r3
 8018798:	f7fb fb12 	bl	8013dc0 <netif_get_by_index>
 801879c:	4603      	mov	r3, r0
 801879e:	e003      	b.n	80187a8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80187a0:	6878      	ldr	r0, [r7, #4]
 80187a2:	f003 f959 	bl	801ba58 <ip4_route>
 80187a6:	4603      	mov	r3, r0
  }
}
 80187a8:	4618      	mov	r0, r3
 80187aa:	3710      	adds	r7, #16
 80187ac:	46bd      	mov	sp, r7
 80187ae:	bd80      	pop	{r7, pc}

080187b0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80187b0:	b590      	push	{r4, r7, lr}
 80187b2:	b087      	sub	sp, #28
 80187b4:	af00      	add	r7, sp, #0
 80187b6:	60f8      	str	r0, [r7, #12]
 80187b8:	60b9      	str	r1, [r7, #8]
 80187ba:	603b      	str	r3, [r7, #0]
 80187bc:	4613      	mov	r3, r2
 80187be:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d105      	bne.n	80187d2 <tcp_create_segment+0x22>
 80187c6:	4b43      	ldr	r3, [pc, #268]	@ (80188d4 <tcp_create_segment+0x124>)
 80187c8:	22a3      	movs	r2, #163	@ 0xa3
 80187ca:	4943      	ldr	r1, [pc, #268]	@ (80188d8 <tcp_create_segment+0x128>)
 80187cc:	4843      	ldr	r0, [pc, #268]	@ (80188dc <tcp_create_segment+0x12c>)
 80187ce:	f005 fc81 	bl	801e0d4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80187d2:	68bb      	ldr	r3, [r7, #8]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d105      	bne.n	80187e4 <tcp_create_segment+0x34>
 80187d8:	4b3e      	ldr	r3, [pc, #248]	@ (80188d4 <tcp_create_segment+0x124>)
 80187da:	22a4      	movs	r2, #164	@ 0xa4
 80187dc:	4940      	ldr	r1, [pc, #256]	@ (80188e0 <tcp_create_segment+0x130>)
 80187de:	483f      	ldr	r0, [pc, #252]	@ (80188dc <tcp_create_segment+0x12c>)
 80187e0:	f005 fc78 	bl	801e0d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80187e4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80187e8:	009b      	lsls	r3, r3, #2
 80187ea:	b2db      	uxtb	r3, r3
 80187ec:	f003 0304 	and.w	r3, r3, #4
 80187f0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80187f2:	2003      	movs	r0, #3
 80187f4:	f7fa ff58 	bl	80136a8 <memp_malloc>
 80187f8:	6138      	str	r0, [r7, #16]
 80187fa:	693b      	ldr	r3, [r7, #16]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d104      	bne.n	801880a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8018800:	68b8      	ldr	r0, [r7, #8]
 8018802:	f7fb fe6b 	bl	80144dc <pbuf_free>
    return NULL;
 8018806:	2300      	movs	r3, #0
 8018808:	e060      	b.n	80188cc <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801880a:	693b      	ldr	r3, [r7, #16]
 801880c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8018810:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8018812:	693b      	ldr	r3, [r7, #16]
 8018814:	2200      	movs	r2, #0
 8018816:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8018818:	693b      	ldr	r3, [r7, #16]
 801881a:	68ba      	ldr	r2, [r7, #8]
 801881c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801881e:	68bb      	ldr	r3, [r7, #8]
 8018820:	891a      	ldrh	r2, [r3, #8]
 8018822:	7dfb      	ldrb	r3, [r7, #23]
 8018824:	b29b      	uxth	r3, r3
 8018826:	429a      	cmp	r2, r3
 8018828:	d205      	bcs.n	8018836 <tcp_create_segment+0x86>
 801882a:	4b2a      	ldr	r3, [pc, #168]	@ (80188d4 <tcp_create_segment+0x124>)
 801882c:	22b0      	movs	r2, #176	@ 0xb0
 801882e:	492d      	ldr	r1, [pc, #180]	@ (80188e4 <tcp_create_segment+0x134>)
 8018830:	482a      	ldr	r0, [pc, #168]	@ (80188dc <tcp_create_segment+0x12c>)
 8018832:	f005 fc4f 	bl	801e0d4 <iprintf>
  seg->len = p->tot_len - optlen;
 8018836:	68bb      	ldr	r3, [r7, #8]
 8018838:	891a      	ldrh	r2, [r3, #8]
 801883a:	7dfb      	ldrb	r3, [r7, #23]
 801883c:	b29b      	uxth	r3, r3
 801883e:	1ad3      	subs	r3, r2, r3
 8018840:	b29a      	uxth	r2, r3
 8018842:	693b      	ldr	r3, [r7, #16]
 8018844:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018846:	2114      	movs	r1, #20
 8018848:	68b8      	ldr	r0, [r7, #8]
 801884a:	f7fb fdb1 	bl	80143b0 <pbuf_add_header>
 801884e:	4603      	mov	r3, r0
 8018850:	2b00      	cmp	r3, #0
 8018852:	d004      	beq.n	801885e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018854:	6938      	ldr	r0, [r7, #16]
 8018856:	f7fd f8d2 	bl	80159fe <tcp_seg_free>
    return NULL;
 801885a:	2300      	movs	r3, #0
 801885c:	e036      	b.n	80188cc <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801885e:	693b      	ldr	r3, [r7, #16]
 8018860:	685b      	ldr	r3, [r3, #4]
 8018862:	685a      	ldr	r2, [r3, #4]
 8018864:	693b      	ldr	r3, [r7, #16]
 8018866:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018868:	68fb      	ldr	r3, [r7, #12]
 801886a:	8ada      	ldrh	r2, [r3, #22]
 801886c:	693b      	ldr	r3, [r7, #16]
 801886e:	68dc      	ldr	r4, [r3, #12]
 8018870:	4610      	mov	r0, r2
 8018872:	f7fa fa45 	bl	8012d00 <lwip_htons>
 8018876:	4603      	mov	r3, r0
 8018878:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801887a:	68fb      	ldr	r3, [r7, #12]
 801887c:	8b1a      	ldrh	r2, [r3, #24]
 801887e:	693b      	ldr	r3, [r7, #16]
 8018880:	68dc      	ldr	r4, [r3, #12]
 8018882:	4610      	mov	r0, r2
 8018884:	f7fa fa3c 	bl	8012d00 <lwip_htons>
 8018888:	4603      	mov	r3, r0
 801888a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801888c:	693b      	ldr	r3, [r7, #16]
 801888e:	68dc      	ldr	r4, [r3, #12]
 8018890:	6838      	ldr	r0, [r7, #0]
 8018892:	f7fa fa4b 	bl	8012d2c <lwip_htonl>
 8018896:	4603      	mov	r3, r0
 8018898:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801889a:	7dfb      	ldrb	r3, [r7, #23]
 801889c:	089b      	lsrs	r3, r3, #2
 801889e:	b2db      	uxtb	r3, r3
 80188a0:	3305      	adds	r3, #5
 80188a2:	b29b      	uxth	r3, r3
 80188a4:	031b      	lsls	r3, r3, #12
 80188a6:	b29a      	uxth	r2, r3
 80188a8:	79fb      	ldrb	r3, [r7, #7]
 80188aa:	b29b      	uxth	r3, r3
 80188ac:	4313      	orrs	r3, r2
 80188ae:	b29a      	uxth	r2, r3
 80188b0:	693b      	ldr	r3, [r7, #16]
 80188b2:	68dc      	ldr	r4, [r3, #12]
 80188b4:	4610      	mov	r0, r2
 80188b6:	f7fa fa23 	bl	8012d00 <lwip_htons>
 80188ba:	4603      	mov	r3, r0
 80188bc:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80188be:	693b      	ldr	r3, [r7, #16]
 80188c0:	68db      	ldr	r3, [r3, #12]
 80188c2:	2200      	movs	r2, #0
 80188c4:	749a      	strb	r2, [r3, #18]
 80188c6:	2200      	movs	r2, #0
 80188c8:	74da      	strb	r2, [r3, #19]
  return seg;
 80188ca:	693b      	ldr	r3, [r7, #16]
}
 80188cc:	4618      	mov	r0, r3
 80188ce:	371c      	adds	r7, #28
 80188d0:	46bd      	mov	sp, r7
 80188d2:	bd90      	pop	{r4, r7, pc}
 80188d4:	080209e4 	.word	0x080209e4
 80188d8:	08020a18 	.word	0x08020a18
 80188dc:	08020a38 	.word	0x08020a38
 80188e0:	08020a60 	.word	0x08020a60
 80188e4:	08020a84 	.word	0x08020a84

080188e8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80188e8:	b590      	push	{r4, r7, lr}
 80188ea:	b08b      	sub	sp, #44	@ 0x2c
 80188ec:	af02      	add	r7, sp, #8
 80188ee:	6078      	str	r0, [r7, #4]
 80188f0:	460b      	mov	r3, r1
 80188f2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80188f4:	2300      	movs	r3, #0
 80188f6:	61fb      	str	r3, [r7, #28]
 80188f8:	2300      	movs	r3, #0
 80188fa:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80188fc:	2300      	movs	r3, #0
 80188fe:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	2b00      	cmp	r3, #0
 8018904:	d106      	bne.n	8018914 <tcp_split_unsent_seg+0x2c>
 8018906:	4b95      	ldr	r3, [pc, #596]	@ (8018b5c <tcp_split_unsent_seg+0x274>)
 8018908:	f240 324b 	movw	r2, #843	@ 0x34b
 801890c:	4994      	ldr	r1, [pc, #592]	@ (8018b60 <tcp_split_unsent_seg+0x278>)
 801890e:	4895      	ldr	r0, [pc, #596]	@ (8018b64 <tcp_split_unsent_seg+0x27c>)
 8018910:	f005 fbe0 	bl	801e0d4 <iprintf>

  useg = pcb->unsent;
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018918:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801891a:	697b      	ldr	r3, [r7, #20]
 801891c:	2b00      	cmp	r3, #0
 801891e:	d102      	bne.n	8018926 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8018920:	f04f 33ff 	mov.w	r3, #4294967295
 8018924:	e116      	b.n	8018b54 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8018926:	887b      	ldrh	r3, [r7, #2]
 8018928:	2b00      	cmp	r3, #0
 801892a:	d109      	bne.n	8018940 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801892c:	4b8b      	ldr	r3, [pc, #556]	@ (8018b5c <tcp_split_unsent_seg+0x274>)
 801892e:	f240 3253 	movw	r2, #851	@ 0x353
 8018932:	498d      	ldr	r1, [pc, #564]	@ (8018b68 <tcp_split_unsent_seg+0x280>)
 8018934:	488b      	ldr	r0, [pc, #556]	@ (8018b64 <tcp_split_unsent_seg+0x27c>)
 8018936:	f005 fbcd 	bl	801e0d4 <iprintf>
    return ERR_VAL;
 801893a:	f06f 0305 	mvn.w	r3, #5
 801893e:	e109      	b.n	8018b54 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8018940:	697b      	ldr	r3, [r7, #20]
 8018942:	891b      	ldrh	r3, [r3, #8]
 8018944:	887a      	ldrh	r2, [r7, #2]
 8018946:	429a      	cmp	r2, r3
 8018948:	d301      	bcc.n	801894e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801894a:	2300      	movs	r3, #0
 801894c:	e102      	b.n	8018b54 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018952:	887a      	ldrh	r2, [r7, #2]
 8018954:	429a      	cmp	r2, r3
 8018956:	d906      	bls.n	8018966 <tcp_split_unsent_seg+0x7e>
 8018958:	4b80      	ldr	r3, [pc, #512]	@ (8018b5c <tcp_split_unsent_seg+0x274>)
 801895a:	f240 325b 	movw	r2, #859	@ 0x35b
 801895e:	4983      	ldr	r1, [pc, #524]	@ (8018b6c <tcp_split_unsent_seg+0x284>)
 8018960:	4880      	ldr	r0, [pc, #512]	@ (8018b64 <tcp_split_unsent_seg+0x27c>)
 8018962:	f005 fbb7 	bl	801e0d4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8018966:	697b      	ldr	r3, [r7, #20]
 8018968:	891b      	ldrh	r3, [r3, #8]
 801896a:	2b00      	cmp	r3, #0
 801896c:	d106      	bne.n	801897c <tcp_split_unsent_seg+0x94>
 801896e:	4b7b      	ldr	r3, [pc, #492]	@ (8018b5c <tcp_split_unsent_seg+0x274>)
 8018970:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8018974:	497e      	ldr	r1, [pc, #504]	@ (8018b70 <tcp_split_unsent_seg+0x288>)
 8018976:	487b      	ldr	r0, [pc, #492]	@ (8018b64 <tcp_split_unsent_seg+0x27c>)
 8018978:	f005 fbac 	bl	801e0d4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801897c:	697b      	ldr	r3, [r7, #20]
 801897e:	7a9b      	ldrb	r3, [r3, #10]
 8018980:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8018982:	7bfb      	ldrb	r3, [r7, #15]
 8018984:	009b      	lsls	r3, r3, #2
 8018986:	b2db      	uxtb	r3, r3
 8018988:	f003 0304 	and.w	r3, r3, #4
 801898c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801898e:	697b      	ldr	r3, [r7, #20]
 8018990:	891a      	ldrh	r2, [r3, #8]
 8018992:	887b      	ldrh	r3, [r7, #2]
 8018994:	1ad3      	subs	r3, r2, r3
 8018996:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8018998:	7bbb      	ldrb	r3, [r7, #14]
 801899a:	b29a      	uxth	r2, r3
 801899c:	89bb      	ldrh	r3, [r7, #12]
 801899e:	4413      	add	r3, r2
 80189a0:	b29b      	uxth	r3, r3
 80189a2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80189a6:	4619      	mov	r1, r3
 80189a8:	2036      	movs	r0, #54	@ 0x36
 80189aa:	f7fb fab3 	bl	8013f14 <pbuf_alloc>
 80189ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80189b0:	693b      	ldr	r3, [r7, #16]
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	f000 80b7 	beq.w	8018b26 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80189b8:	697b      	ldr	r3, [r7, #20]
 80189ba:	685b      	ldr	r3, [r3, #4]
 80189bc:	891a      	ldrh	r2, [r3, #8]
 80189be:	697b      	ldr	r3, [r7, #20]
 80189c0:	891b      	ldrh	r3, [r3, #8]
 80189c2:	1ad3      	subs	r3, r2, r3
 80189c4:	b29a      	uxth	r2, r3
 80189c6:	887b      	ldrh	r3, [r7, #2]
 80189c8:	4413      	add	r3, r2
 80189ca:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80189cc:	697b      	ldr	r3, [r7, #20]
 80189ce:	6858      	ldr	r0, [r3, #4]
 80189d0:	693b      	ldr	r3, [r7, #16]
 80189d2:	685a      	ldr	r2, [r3, #4]
 80189d4:	7bbb      	ldrb	r3, [r7, #14]
 80189d6:	18d1      	adds	r1, r2, r3
 80189d8:	897b      	ldrh	r3, [r7, #10]
 80189da:	89ba      	ldrh	r2, [r7, #12]
 80189dc:	f7fb ff84 	bl	80148e8 <pbuf_copy_partial>
 80189e0:	4603      	mov	r3, r0
 80189e2:	461a      	mov	r2, r3
 80189e4:	89bb      	ldrh	r3, [r7, #12]
 80189e6:	4293      	cmp	r3, r2
 80189e8:	f040 809f 	bne.w	8018b2a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80189ec:	697b      	ldr	r3, [r7, #20]
 80189ee:	68db      	ldr	r3, [r3, #12]
 80189f0:	899b      	ldrh	r3, [r3, #12]
 80189f2:	b29b      	uxth	r3, r3
 80189f4:	4618      	mov	r0, r3
 80189f6:	f7fa f983 	bl	8012d00 <lwip_htons>
 80189fa:	4603      	mov	r3, r0
 80189fc:	b2db      	uxtb	r3, r3
 80189fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018a02:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8018a04:	2300      	movs	r3, #0
 8018a06:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8018a08:	7efb      	ldrb	r3, [r7, #27]
 8018a0a:	f003 0308 	and.w	r3, r3, #8
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d007      	beq.n	8018a22 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8018a12:	7efb      	ldrb	r3, [r7, #27]
 8018a14:	f023 0308 	bic.w	r3, r3, #8
 8018a18:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8018a1a:	7ebb      	ldrb	r3, [r7, #26]
 8018a1c:	f043 0308 	orr.w	r3, r3, #8
 8018a20:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8018a22:	7efb      	ldrb	r3, [r7, #27]
 8018a24:	f003 0301 	and.w	r3, r3, #1
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d007      	beq.n	8018a3c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8018a2c:	7efb      	ldrb	r3, [r7, #27]
 8018a2e:	f023 0301 	bic.w	r3, r3, #1
 8018a32:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8018a34:	7ebb      	ldrb	r3, [r7, #26]
 8018a36:	f043 0301 	orr.w	r3, r3, #1
 8018a3a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8018a3c:	697b      	ldr	r3, [r7, #20]
 8018a3e:	68db      	ldr	r3, [r3, #12]
 8018a40:	685b      	ldr	r3, [r3, #4]
 8018a42:	4618      	mov	r0, r3
 8018a44:	f7fa f972 	bl	8012d2c <lwip_htonl>
 8018a48:	4602      	mov	r2, r0
 8018a4a:	887b      	ldrh	r3, [r7, #2]
 8018a4c:	18d1      	adds	r1, r2, r3
 8018a4e:	7eba      	ldrb	r2, [r7, #26]
 8018a50:	7bfb      	ldrb	r3, [r7, #15]
 8018a52:	9300      	str	r3, [sp, #0]
 8018a54:	460b      	mov	r3, r1
 8018a56:	6939      	ldr	r1, [r7, #16]
 8018a58:	6878      	ldr	r0, [r7, #4]
 8018a5a:	f7ff fea9 	bl	80187b0 <tcp_create_segment>
 8018a5e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8018a60:	69fb      	ldr	r3, [r7, #28]
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d063      	beq.n	8018b2e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8018a66:	697b      	ldr	r3, [r7, #20]
 8018a68:	685b      	ldr	r3, [r3, #4]
 8018a6a:	4618      	mov	r0, r3
 8018a6c:	f7fb fdc4 	bl	80145f8 <pbuf_clen>
 8018a70:	4603      	mov	r3, r0
 8018a72:	461a      	mov	r2, r3
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018a7a:	1a9b      	subs	r3, r3, r2
 8018a7c:	b29a      	uxth	r2, r3
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8018a84:	697b      	ldr	r3, [r7, #20]
 8018a86:	6858      	ldr	r0, [r3, #4]
 8018a88:	697b      	ldr	r3, [r7, #20]
 8018a8a:	685b      	ldr	r3, [r3, #4]
 8018a8c:	891a      	ldrh	r2, [r3, #8]
 8018a8e:	89bb      	ldrh	r3, [r7, #12]
 8018a90:	1ad3      	subs	r3, r2, r3
 8018a92:	b29b      	uxth	r3, r3
 8018a94:	4619      	mov	r1, r3
 8018a96:	f7fb fb9b 	bl	80141d0 <pbuf_realloc>
  useg->len -= remainder;
 8018a9a:	697b      	ldr	r3, [r7, #20]
 8018a9c:	891a      	ldrh	r2, [r3, #8]
 8018a9e:	89bb      	ldrh	r3, [r7, #12]
 8018aa0:	1ad3      	subs	r3, r2, r3
 8018aa2:	b29a      	uxth	r2, r3
 8018aa4:	697b      	ldr	r3, [r7, #20]
 8018aa6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8018aa8:	697b      	ldr	r3, [r7, #20]
 8018aaa:	68db      	ldr	r3, [r3, #12]
 8018aac:	899b      	ldrh	r3, [r3, #12]
 8018aae:	b29c      	uxth	r4, r3
 8018ab0:	7efb      	ldrb	r3, [r7, #27]
 8018ab2:	b29b      	uxth	r3, r3
 8018ab4:	4618      	mov	r0, r3
 8018ab6:	f7fa f923 	bl	8012d00 <lwip_htons>
 8018aba:	4603      	mov	r3, r0
 8018abc:	461a      	mov	r2, r3
 8018abe:	697b      	ldr	r3, [r7, #20]
 8018ac0:	68db      	ldr	r3, [r3, #12]
 8018ac2:	4322      	orrs	r2, r4
 8018ac4:	b292      	uxth	r2, r2
 8018ac6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8018ac8:	697b      	ldr	r3, [r7, #20]
 8018aca:	685b      	ldr	r3, [r3, #4]
 8018acc:	4618      	mov	r0, r3
 8018ace:	f7fb fd93 	bl	80145f8 <pbuf_clen>
 8018ad2:	4603      	mov	r3, r0
 8018ad4:	461a      	mov	r2, r3
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018adc:	4413      	add	r3, r2
 8018ade:	b29a      	uxth	r2, r3
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018ae6:	69fb      	ldr	r3, [r7, #28]
 8018ae8:	685b      	ldr	r3, [r3, #4]
 8018aea:	4618      	mov	r0, r3
 8018aec:	f7fb fd84 	bl	80145f8 <pbuf_clen>
 8018af0:	4603      	mov	r3, r0
 8018af2:	461a      	mov	r2, r3
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018afa:	4413      	add	r3, r2
 8018afc:	b29a      	uxth	r2, r3
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8018b04:	697b      	ldr	r3, [r7, #20]
 8018b06:	681a      	ldr	r2, [r3, #0]
 8018b08:	69fb      	ldr	r3, [r7, #28]
 8018b0a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8018b0c:	697b      	ldr	r3, [r7, #20]
 8018b0e:	69fa      	ldr	r2, [r7, #28]
 8018b10:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8018b12:	69fb      	ldr	r3, [r7, #28]
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d103      	bne.n	8018b22 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	2200      	movs	r2, #0
 8018b1e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8018b22:	2300      	movs	r3, #0
 8018b24:	e016      	b.n	8018b54 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8018b26:	bf00      	nop
 8018b28:	e002      	b.n	8018b30 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8018b2a:	bf00      	nop
 8018b2c:	e000      	b.n	8018b30 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8018b2e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8018b30:	69fb      	ldr	r3, [r7, #28]
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d006      	beq.n	8018b44 <tcp_split_unsent_seg+0x25c>
 8018b36:	4b09      	ldr	r3, [pc, #36]	@ (8018b5c <tcp_split_unsent_seg+0x274>)
 8018b38:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8018b3c:	490d      	ldr	r1, [pc, #52]	@ (8018b74 <tcp_split_unsent_seg+0x28c>)
 8018b3e:	4809      	ldr	r0, [pc, #36]	@ (8018b64 <tcp_split_unsent_seg+0x27c>)
 8018b40:	f005 fac8 	bl	801e0d4 <iprintf>
  if (p != NULL) {
 8018b44:	693b      	ldr	r3, [r7, #16]
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d002      	beq.n	8018b50 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8018b4a:	6938      	ldr	r0, [r7, #16]
 8018b4c:	f7fb fcc6 	bl	80144dc <pbuf_free>
  }

  return ERR_MEM;
 8018b50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018b54:	4618      	mov	r0, r3
 8018b56:	3724      	adds	r7, #36	@ 0x24
 8018b58:	46bd      	mov	sp, r7
 8018b5a:	bd90      	pop	{r4, r7, pc}
 8018b5c:	080209e4 	.word	0x080209e4
 8018b60:	08020d78 	.word	0x08020d78
 8018b64:	08020a38 	.word	0x08020a38
 8018b68:	08020d9c 	.word	0x08020d9c
 8018b6c:	08020dc0 	.word	0x08020dc0
 8018b70:	08020dd0 	.word	0x08020dd0
 8018b74:	08020de0 	.word	0x08020de0

08018b78 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8018b78:	b590      	push	{r4, r7, lr}
 8018b7a:	b085      	sub	sp, #20
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d106      	bne.n	8018b94 <tcp_send_fin+0x1c>
 8018b86:	4b21      	ldr	r3, [pc, #132]	@ (8018c0c <tcp_send_fin+0x94>)
 8018b88:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8018b8c:	4920      	ldr	r1, [pc, #128]	@ (8018c10 <tcp_send_fin+0x98>)
 8018b8e:	4821      	ldr	r0, [pc, #132]	@ (8018c14 <tcp_send_fin+0x9c>)
 8018b90:	f005 faa0 	bl	801e0d4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d02e      	beq.n	8018bfa <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018ba0:	60fb      	str	r3, [r7, #12]
 8018ba2:	e002      	b.n	8018baa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8018ba4:	68fb      	ldr	r3, [r7, #12]
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018baa:	68fb      	ldr	r3, [r7, #12]
 8018bac:	681b      	ldr	r3, [r3, #0]
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d1f8      	bne.n	8018ba4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8018bb2:	68fb      	ldr	r3, [r7, #12]
 8018bb4:	68db      	ldr	r3, [r3, #12]
 8018bb6:	899b      	ldrh	r3, [r3, #12]
 8018bb8:	b29b      	uxth	r3, r3
 8018bba:	4618      	mov	r0, r3
 8018bbc:	f7fa f8a0 	bl	8012d00 <lwip_htons>
 8018bc0:	4603      	mov	r3, r0
 8018bc2:	b2db      	uxtb	r3, r3
 8018bc4:	f003 0307 	and.w	r3, r3, #7
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	d116      	bne.n	8018bfa <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8018bcc:	68fb      	ldr	r3, [r7, #12]
 8018bce:	68db      	ldr	r3, [r3, #12]
 8018bd0:	899b      	ldrh	r3, [r3, #12]
 8018bd2:	b29c      	uxth	r4, r3
 8018bd4:	2001      	movs	r0, #1
 8018bd6:	f7fa f893 	bl	8012d00 <lwip_htons>
 8018bda:	4603      	mov	r3, r0
 8018bdc:	461a      	mov	r2, r3
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	68db      	ldr	r3, [r3, #12]
 8018be2:	4322      	orrs	r2, r4
 8018be4:	b292      	uxth	r2, r2
 8018be6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	8b5b      	ldrh	r3, [r3, #26]
 8018bec:	f043 0320 	orr.w	r3, r3, #32
 8018bf0:	b29a      	uxth	r2, r3
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8018bf6:	2300      	movs	r3, #0
 8018bf8:	e004      	b.n	8018c04 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8018bfa:	2101      	movs	r1, #1
 8018bfc:	6878      	ldr	r0, [r7, #4]
 8018bfe:	f000 f80b 	bl	8018c18 <tcp_enqueue_flags>
 8018c02:	4603      	mov	r3, r0
}
 8018c04:	4618      	mov	r0, r3
 8018c06:	3714      	adds	r7, #20
 8018c08:	46bd      	mov	sp, r7
 8018c0a:	bd90      	pop	{r4, r7, pc}
 8018c0c:	080209e4 	.word	0x080209e4
 8018c10:	08020dec 	.word	0x08020dec
 8018c14:	08020a38 	.word	0x08020a38

08018c18 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8018c18:	b580      	push	{r7, lr}
 8018c1a:	b08a      	sub	sp, #40	@ 0x28
 8018c1c:	af02      	add	r7, sp, #8
 8018c1e:	6078      	str	r0, [r7, #4]
 8018c20:	460b      	mov	r3, r1
 8018c22:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8018c24:	2300      	movs	r3, #0
 8018c26:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8018c28:	2300      	movs	r3, #0
 8018c2a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8018c2c:	78fb      	ldrb	r3, [r7, #3]
 8018c2e:	f003 0303 	and.w	r3, r3, #3
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d106      	bne.n	8018c44 <tcp_enqueue_flags+0x2c>
 8018c36:	4b67      	ldr	r3, [pc, #412]	@ (8018dd4 <tcp_enqueue_flags+0x1bc>)
 8018c38:	f240 4211 	movw	r2, #1041	@ 0x411
 8018c3c:	4966      	ldr	r1, [pc, #408]	@ (8018dd8 <tcp_enqueue_flags+0x1c0>)
 8018c3e:	4867      	ldr	r0, [pc, #412]	@ (8018ddc <tcp_enqueue_flags+0x1c4>)
 8018c40:	f005 fa48 	bl	801e0d4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d106      	bne.n	8018c58 <tcp_enqueue_flags+0x40>
 8018c4a:	4b62      	ldr	r3, [pc, #392]	@ (8018dd4 <tcp_enqueue_flags+0x1bc>)
 8018c4c:	f240 4213 	movw	r2, #1043	@ 0x413
 8018c50:	4963      	ldr	r1, [pc, #396]	@ (8018de0 <tcp_enqueue_flags+0x1c8>)
 8018c52:	4862      	ldr	r0, [pc, #392]	@ (8018ddc <tcp_enqueue_flags+0x1c4>)
 8018c54:	f005 fa3e 	bl	801e0d4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8018c58:	78fb      	ldrb	r3, [r7, #3]
 8018c5a:	f003 0302 	and.w	r3, r3, #2
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d001      	beq.n	8018c66 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8018c62:	2301      	movs	r3, #1
 8018c64:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018c66:	7ffb      	ldrb	r3, [r7, #31]
 8018c68:	009b      	lsls	r3, r3, #2
 8018c6a:	b2db      	uxtb	r3, r3
 8018c6c:	f003 0304 	and.w	r3, r3, #4
 8018c70:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018c72:	7dfb      	ldrb	r3, [r7, #23]
 8018c74:	b29b      	uxth	r3, r3
 8018c76:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018c7a:	4619      	mov	r1, r3
 8018c7c:	2036      	movs	r0, #54	@ 0x36
 8018c7e:	f7fb f949 	bl	8013f14 <pbuf_alloc>
 8018c82:	6138      	str	r0, [r7, #16]
 8018c84:	693b      	ldr	r3, [r7, #16]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d109      	bne.n	8018c9e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	8b5b      	ldrh	r3, [r3, #26]
 8018c8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018c92:	b29a      	uxth	r2, r3
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018c98:	f04f 33ff 	mov.w	r3, #4294967295
 8018c9c:	e095      	b.n	8018dca <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8018c9e:	693b      	ldr	r3, [r7, #16]
 8018ca0:	895a      	ldrh	r2, [r3, #10]
 8018ca2:	7dfb      	ldrb	r3, [r7, #23]
 8018ca4:	b29b      	uxth	r3, r3
 8018ca6:	429a      	cmp	r2, r3
 8018ca8:	d206      	bcs.n	8018cb8 <tcp_enqueue_flags+0xa0>
 8018caa:	4b4a      	ldr	r3, [pc, #296]	@ (8018dd4 <tcp_enqueue_flags+0x1bc>)
 8018cac:	f240 4239 	movw	r2, #1081	@ 0x439
 8018cb0:	494c      	ldr	r1, [pc, #304]	@ (8018de4 <tcp_enqueue_flags+0x1cc>)
 8018cb2:	484a      	ldr	r0, [pc, #296]	@ (8018ddc <tcp_enqueue_flags+0x1c4>)
 8018cb4:	f005 fa0e 	bl	801e0d4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8018cbc:	78fa      	ldrb	r2, [r7, #3]
 8018cbe:	7ffb      	ldrb	r3, [r7, #31]
 8018cc0:	9300      	str	r3, [sp, #0]
 8018cc2:	460b      	mov	r3, r1
 8018cc4:	6939      	ldr	r1, [r7, #16]
 8018cc6:	6878      	ldr	r0, [r7, #4]
 8018cc8:	f7ff fd72 	bl	80187b0 <tcp_create_segment>
 8018ccc:	60f8      	str	r0, [r7, #12]
 8018cce:	68fb      	ldr	r3, [r7, #12]
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d109      	bne.n	8018ce8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	8b5b      	ldrh	r3, [r3, #26]
 8018cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018cdc:	b29a      	uxth	r2, r3
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8018ce6:	e070      	b.n	8018dca <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8018ce8:	68fb      	ldr	r3, [r7, #12]
 8018cea:	68db      	ldr	r3, [r3, #12]
 8018cec:	f003 0303 	and.w	r3, r3, #3
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d006      	beq.n	8018d02 <tcp_enqueue_flags+0xea>
 8018cf4:	4b37      	ldr	r3, [pc, #220]	@ (8018dd4 <tcp_enqueue_flags+0x1bc>)
 8018cf6:	f240 4242 	movw	r2, #1090	@ 0x442
 8018cfa:	493b      	ldr	r1, [pc, #236]	@ (8018de8 <tcp_enqueue_flags+0x1d0>)
 8018cfc:	4837      	ldr	r0, [pc, #220]	@ (8018ddc <tcp_enqueue_flags+0x1c4>)
 8018cfe:	f005 f9e9 	bl	801e0d4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8018d02:	68fb      	ldr	r3, [r7, #12]
 8018d04:	891b      	ldrh	r3, [r3, #8]
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d006      	beq.n	8018d18 <tcp_enqueue_flags+0x100>
 8018d0a:	4b32      	ldr	r3, [pc, #200]	@ (8018dd4 <tcp_enqueue_flags+0x1bc>)
 8018d0c:	f240 4243 	movw	r2, #1091	@ 0x443
 8018d10:	4936      	ldr	r1, [pc, #216]	@ (8018dec <tcp_enqueue_flags+0x1d4>)
 8018d12:	4832      	ldr	r0, [pc, #200]	@ (8018ddc <tcp_enqueue_flags+0x1c4>)
 8018d14:	f005 f9de 	bl	801e0d4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	d103      	bne.n	8018d28 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8018d20:	687b      	ldr	r3, [r7, #4]
 8018d22:	68fa      	ldr	r2, [r7, #12]
 8018d24:	66da      	str	r2, [r3, #108]	@ 0x6c
 8018d26:	e00d      	b.n	8018d44 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018d2c:	61bb      	str	r3, [r7, #24]
 8018d2e:	e002      	b.n	8018d36 <tcp_enqueue_flags+0x11e>
 8018d30:	69bb      	ldr	r3, [r7, #24]
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	61bb      	str	r3, [r7, #24]
 8018d36:	69bb      	ldr	r3, [r7, #24]
 8018d38:	681b      	ldr	r3, [r3, #0]
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d1f8      	bne.n	8018d30 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8018d3e:	69bb      	ldr	r3, [r7, #24]
 8018d40:	68fa      	ldr	r2, [r7, #12]
 8018d42:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	2200      	movs	r2, #0
 8018d48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8018d4c:	78fb      	ldrb	r3, [r7, #3]
 8018d4e:	f003 0302 	and.w	r3, r3, #2
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	d104      	bne.n	8018d60 <tcp_enqueue_flags+0x148>
 8018d56:	78fb      	ldrb	r3, [r7, #3]
 8018d58:	f003 0301 	and.w	r3, r3, #1
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d004      	beq.n	8018d6a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018d64:	1c5a      	adds	r2, r3, #1
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8018d6a:	78fb      	ldrb	r3, [r7, #3]
 8018d6c:	f003 0301 	and.w	r3, r3, #1
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d006      	beq.n	8018d82 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	8b5b      	ldrh	r3, [r3, #26]
 8018d78:	f043 0320 	orr.w	r3, r3, #32
 8018d7c:	b29a      	uxth	r2, r3
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018d82:	68fb      	ldr	r3, [r7, #12]
 8018d84:	685b      	ldr	r3, [r3, #4]
 8018d86:	4618      	mov	r0, r3
 8018d88:	f7fb fc36 	bl	80145f8 <pbuf_clen>
 8018d8c:	4603      	mov	r3, r0
 8018d8e:	461a      	mov	r2, r3
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018d96:	4413      	add	r3, r2
 8018d98:	b29a      	uxth	r2, r3
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d00e      	beq.n	8018dc8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d10a      	bne.n	8018dc8 <tcp_enqueue_flags+0x1b0>
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d106      	bne.n	8018dc8 <tcp_enqueue_flags+0x1b0>
 8018dba:	4b06      	ldr	r3, [pc, #24]	@ (8018dd4 <tcp_enqueue_flags+0x1bc>)
 8018dbc:	f240 4265 	movw	r2, #1125	@ 0x465
 8018dc0:	490b      	ldr	r1, [pc, #44]	@ (8018df0 <tcp_enqueue_flags+0x1d8>)
 8018dc2:	4806      	ldr	r0, [pc, #24]	@ (8018ddc <tcp_enqueue_flags+0x1c4>)
 8018dc4:	f005 f986 	bl	801e0d4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8018dc8:	2300      	movs	r3, #0
}
 8018dca:	4618      	mov	r0, r3
 8018dcc:	3720      	adds	r7, #32
 8018dce:	46bd      	mov	sp, r7
 8018dd0:	bd80      	pop	{r7, pc}
 8018dd2:	bf00      	nop
 8018dd4:	080209e4 	.word	0x080209e4
 8018dd8:	08020e08 	.word	0x08020e08
 8018ddc:	08020a38 	.word	0x08020a38
 8018de0:	08020e60 	.word	0x08020e60
 8018de4:	08020e80 	.word	0x08020e80
 8018de8:	08020ebc 	.word	0x08020ebc
 8018dec:	08020ed4 	.word	0x08020ed4
 8018df0:	08020f00 	.word	0x08020f00

08018df4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8018df4:	b5b0      	push	{r4, r5, r7, lr}
 8018df6:	b08a      	sub	sp, #40	@ 0x28
 8018df8:	af00      	add	r7, sp, #0
 8018dfa:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	2b00      	cmp	r3, #0
 8018e00:	d106      	bne.n	8018e10 <tcp_output+0x1c>
 8018e02:	4b8a      	ldr	r3, [pc, #552]	@ (801902c <tcp_output+0x238>)
 8018e04:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8018e08:	4989      	ldr	r1, [pc, #548]	@ (8019030 <tcp_output+0x23c>)
 8018e0a:	488a      	ldr	r0, [pc, #552]	@ (8019034 <tcp_output+0x240>)
 8018e0c:	f005 f962 	bl	801e0d4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	7d1b      	ldrb	r3, [r3, #20]
 8018e14:	2b01      	cmp	r3, #1
 8018e16:	d106      	bne.n	8018e26 <tcp_output+0x32>
 8018e18:	4b84      	ldr	r3, [pc, #528]	@ (801902c <tcp_output+0x238>)
 8018e1a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8018e1e:	4986      	ldr	r1, [pc, #536]	@ (8019038 <tcp_output+0x244>)
 8018e20:	4884      	ldr	r0, [pc, #528]	@ (8019034 <tcp_output+0x240>)
 8018e22:	f005 f957 	bl	801e0d4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8018e26:	4b85      	ldr	r3, [pc, #532]	@ (801903c <tcp_output+0x248>)
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	687a      	ldr	r2, [r7, #4]
 8018e2c:	429a      	cmp	r2, r3
 8018e2e:	d101      	bne.n	8018e34 <tcp_output+0x40>
    return ERR_OK;
 8018e30:	2300      	movs	r3, #0
 8018e32:	e1ce      	b.n	80191d2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018e40:	4293      	cmp	r3, r2
 8018e42:	bf28      	it	cs
 8018e44:	4613      	movcs	r3, r2
 8018e46:	b29b      	uxth	r3, r3
 8018e48:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8018e4a:	687b      	ldr	r3, [r7, #4]
 8018e4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018e4e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8018e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d10b      	bne.n	8018e6e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8018e56:	687b      	ldr	r3, [r7, #4]
 8018e58:	8b5b      	ldrh	r3, [r3, #26]
 8018e5a:	f003 0302 	and.w	r3, r3, #2
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	f000 81aa 	beq.w	80191b8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8018e64:	6878      	ldr	r0, [r7, #4]
 8018e66:	f000 fdcb 	bl	8019a00 <tcp_send_empty_ack>
 8018e6a:	4603      	mov	r3, r0
 8018e6c:	e1b1      	b.n	80191d2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8018e6e:	6879      	ldr	r1, [r7, #4]
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	3304      	adds	r3, #4
 8018e74:	461a      	mov	r2, r3
 8018e76:	6878      	ldr	r0, [r7, #4]
 8018e78:	f7ff fc7e 	bl	8018778 <tcp_route>
 8018e7c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8018e7e:	697b      	ldr	r3, [r7, #20]
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	d102      	bne.n	8018e8a <tcp_output+0x96>
    return ERR_RTE;
 8018e84:	f06f 0303 	mvn.w	r3, #3
 8018e88:	e1a3      	b.n	80191d2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d003      	beq.n	8018e98 <tcp_output+0xa4>
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d111      	bne.n	8018ebc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8018e98:	697b      	ldr	r3, [r7, #20]
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d002      	beq.n	8018ea4 <tcp_output+0xb0>
 8018e9e:	697b      	ldr	r3, [r7, #20]
 8018ea0:	3304      	adds	r3, #4
 8018ea2:	e000      	b.n	8018ea6 <tcp_output+0xb2>
 8018ea4:	2300      	movs	r3, #0
 8018ea6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8018ea8:	693b      	ldr	r3, [r7, #16]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d102      	bne.n	8018eb4 <tcp_output+0xc0>
      return ERR_RTE;
 8018eae:	f06f 0303 	mvn.w	r3, #3
 8018eb2:	e18e      	b.n	80191d2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8018eb4:	693b      	ldr	r3, [r7, #16]
 8018eb6:	681a      	ldr	r2, [r3, #0]
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8018ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ebe:	68db      	ldr	r3, [r3, #12]
 8018ec0:	685b      	ldr	r3, [r3, #4]
 8018ec2:	4618      	mov	r0, r3
 8018ec4:	f7f9 ff32 	bl	8012d2c <lwip_htonl>
 8018ec8:	4602      	mov	r2, r0
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018ece:	1ad3      	subs	r3, r2, r3
 8018ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018ed2:	8912      	ldrh	r2, [r2, #8]
 8018ed4:	4413      	add	r3, r2
 8018ed6:	69ba      	ldr	r2, [r7, #24]
 8018ed8:	429a      	cmp	r2, r3
 8018eda:	d227      	bcs.n	8018f2c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018ee2:	461a      	mov	r2, r3
 8018ee4:	69bb      	ldr	r3, [r7, #24]
 8018ee6:	4293      	cmp	r3, r2
 8018ee8:	d114      	bne.n	8018f14 <tcp_output+0x120>
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d110      	bne.n	8018f14 <tcp_output+0x120>
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d10b      	bne.n	8018f14 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	2200      	movs	r2, #0
 8018f00:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	2201      	movs	r2, #1
 8018f08:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	2200      	movs	r2, #0
 8018f10:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	8b5b      	ldrh	r3, [r3, #26]
 8018f18:	f003 0302 	and.w	r3, r3, #2
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	f000 814d 	beq.w	80191bc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8018f22:	6878      	ldr	r0, [r7, #4]
 8018f24:	f000 fd6c 	bl	8019a00 <tcp_send_empty_ack>
 8018f28:	4603      	mov	r3, r0
 8018f2a:	e152      	b.n	80191d2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	2200      	movs	r2, #0
 8018f30:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018f38:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8018f3a:	6a3b      	ldr	r3, [r7, #32]
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	f000 811c 	beq.w	801917a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8018f42:	e002      	b.n	8018f4a <tcp_output+0x156>
 8018f44:	6a3b      	ldr	r3, [r7, #32]
 8018f46:	681b      	ldr	r3, [r3, #0]
 8018f48:	623b      	str	r3, [r7, #32]
 8018f4a:	6a3b      	ldr	r3, [r7, #32]
 8018f4c:	681b      	ldr	r3, [r3, #0]
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d1f8      	bne.n	8018f44 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8018f52:	e112      	b.n	801917a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8018f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f56:	68db      	ldr	r3, [r3, #12]
 8018f58:	899b      	ldrh	r3, [r3, #12]
 8018f5a:	b29b      	uxth	r3, r3
 8018f5c:	4618      	mov	r0, r3
 8018f5e:	f7f9 fecf 	bl	8012d00 <lwip_htons>
 8018f62:	4603      	mov	r3, r0
 8018f64:	b2db      	uxtb	r3, r3
 8018f66:	f003 0304 	and.w	r3, r3, #4
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d006      	beq.n	8018f7c <tcp_output+0x188>
 8018f6e:	4b2f      	ldr	r3, [pc, #188]	@ (801902c <tcp_output+0x238>)
 8018f70:	f240 5236 	movw	r2, #1334	@ 0x536
 8018f74:	4932      	ldr	r1, [pc, #200]	@ (8019040 <tcp_output+0x24c>)
 8018f76:	482f      	ldr	r0, [pc, #188]	@ (8019034 <tcp_output+0x240>)
 8018f78:	f005 f8ac 	bl	801e0d4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d01f      	beq.n	8018fc4 <tcp_output+0x1d0>
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	8b5b      	ldrh	r3, [r3, #26]
 8018f88:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d119      	bne.n	8018fc4 <tcp_output+0x1d0>
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d00b      	beq.n	8018fb0 <tcp_output+0x1bc>
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d110      	bne.n	8018fc4 <tcp_output+0x1d0>
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018fa6:	891a      	ldrh	r2, [r3, #8]
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018fac:	429a      	cmp	r2, r3
 8018fae:	d209      	bcs.n	8018fc4 <tcp_output+0x1d0>
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d004      	beq.n	8018fc4 <tcp_output+0x1d0>
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018fc0:	2b08      	cmp	r3, #8
 8018fc2:	d901      	bls.n	8018fc8 <tcp_output+0x1d4>
 8018fc4:	2301      	movs	r3, #1
 8018fc6:	e000      	b.n	8018fca <tcp_output+0x1d6>
 8018fc8:	2300      	movs	r3, #0
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d106      	bne.n	8018fdc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	8b5b      	ldrh	r3, [r3, #26]
 8018fd2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	f000 80e4 	beq.w	80191a4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	7d1b      	ldrb	r3, [r3, #20]
 8018fe0:	2b02      	cmp	r3, #2
 8018fe2:	d00d      	beq.n	8019000 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8018fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fe6:	68db      	ldr	r3, [r3, #12]
 8018fe8:	899b      	ldrh	r3, [r3, #12]
 8018fea:	b29c      	uxth	r4, r3
 8018fec:	2010      	movs	r0, #16
 8018fee:	f7f9 fe87 	bl	8012d00 <lwip_htons>
 8018ff2:	4603      	mov	r3, r0
 8018ff4:	461a      	mov	r2, r3
 8018ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018ff8:	68db      	ldr	r3, [r3, #12]
 8018ffa:	4322      	orrs	r2, r4
 8018ffc:	b292      	uxth	r2, r2
 8018ffe:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8019000:	697a      	ldr	r2, [r7, #20]
 8019002:	6879      	ldr	r1, [r7, #4]
 8019004:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019006:	f000 f909 	bl	801921c <tcp_output_segment>
 801900a:	4603      	mov	r3, r0
 801900c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801900e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019012:	2b00      	cmp	r3, #0
 8019014:	d016      	beq.n	8019044 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	8b5b      	ldrh	r3, [r3, #26]
 801901a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801901e:	b29a      	uxth	r2, r3
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	835a      	strh	r2, [r3, #26]
      return err;
 8019024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019028:	e0d3      	b.n	80191d2 <tcp_output+0x3de>
 801902a:	bf00      	nop
 801902c:	080209e4 	.word	0x080209e4
 8019030:	08020f28 	.word	0x08020f28
 8019034:	08020a38 	.word	0x08020a38
 8019038:	08020f40 	.word	0x08020f40
 801903c:	200277fc 	.word	0x200277fc
 8019040:	08020f68 	.word	0x08020f68
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8019044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019046:	681a      	ldr	r2, [r3, #0]
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	7d1b      	ldrb	r3, [r3, #20]
 8019050:	2b02      	cmp	r3, #2
 8019052:	d006      	beq.n	8019062 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	8b5b      	ldrh	r3, [r3, #26]
 8019058:	f023 0303 	bic.w	r3, r3, #3
 801905c:	b29a      	uxth	r2, r3
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019064:	68db      	ldr	r3, [r3, #12]
 8019066:	685b      	ldr	r3, [r3, #4]
 8019068:	4618      	mov	r0, r3
 801906a:	f7f9 fe5f 	bl	8012d2c <lwip_htonl>
 801906e:	4604      	mov	r4, r0
 8019070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019072:	891b      	ldrh	r3, [r3, #8]
 8019074:	461d      	mov	r5, r3
 8019076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019078:	68db      	ldr	r3, [r3, #12]
 801907a:	899b      	ldrh	r3, [r3, #12]
 801907c:	b29b      	uxth	r3, r3
 801907e:	4618      	mov	r0, r3
 8019080:	f7f9 fe3e 	bl	8012d00 <lwip_htons>
 8019084:	4603      	mov	r3, r0
 8019086:	b2db      	uxtb	r3, r3
 8019088:	f003 0303 	and.w	r3, r3, #3
 801908c:	2b00      	cmp	r3, #0
 801908e:	d001      	beq.n	8019094 <tcp_output+0x2a0>
 8019090:	2301      	movs	r3, #1
 8019092:	e000      	b.n	8019096 <tcp_output+0x2a2>
 8019094:	2300      	movs	r3, #0
 8019096:	442b      	add	r3, r5
 8019098:	4423      	add	r3, r4
 801909a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80190a0:	68bb      	ldr	r3, [r7, #8]
 80190a2:	1ad3      	subs	r3, r2, r3
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	da02      	bge.n	80190ae <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80190a8:	687b      	ldr	r3, [r7, #4]
 80190aa:	68ba      	ldr	r2, [r7, #8]
 80190ac:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80190ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80190b0:	891b      	ldrh	r3, [r3, #8]
 80190b2:	461c      	mov	r4, r3
 80190b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80190b6:	68db      	ldr	r3, [r3, #12]
 80190b8:	899b      	ldrh	r3, [r3, #12]
 80190ba:	b29b      	uxth	r3, r3
 80190bc:	4618      	mov	r0, r3
 80190be:	f7f9 fe1f 	bl	8012d00 <lwip_htons>
 80190c2:	4603      	mov	r3, r0
 80190c4:	b2db      	uxtb	r3, r3
 80190c6:	f003 0303 	and.w	r3, r3, #3
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d001      	beq.n	80190d2 <tcp_output+0x2de>
 80190ce:	2301      	movs	r3, #1
 80190d0:	e000      	b.n	80190d4 <tcp_output+0x2e0>
 80190d2:	2300      	movs	r3, #0
 80190d4:	4423      	add	r3, r4
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	d049      	beq.n	801916e <tcp_output+0x37a>
      seg->next = NULL;
 80190da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80190dc:	2200      	movs	r2, #0
 80190de:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d105      	bne.n	80190f4 <tcp_output+0x300>
        pcb->unacked = seg;
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80190ec:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80190ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80190f0:	623b      	str	r3, [r7, #32]
 80190f2:	e03f      	b.n	8019174 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80190f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80190f6:	68db      	ldr	r3, [r3, #12]
 80190f8:	685b      	ldr	r3, [r3, #4]
 80190fa:	4618      	mov	r0, r3
 80190fc:	f7f9 fe16 	bl	8012d2c <lwip_htonl>
 8019100:	4604      	mov	r4, r0
 8019102:	6a3b      	ldr	r3, [r7, #32]
 8019104:	68db      	ldr	r3, [r3, #12]
 8019106:	685b      	ldr	r3, [r3, #4]
 8019108:	4618      	mov	r0, r3
 801910a:	f7f9 fe0f 	bl	8012d2c <lwip_htonl>
 801910e:	4603      	mov	r3, r0
 8019110:	1ae3      	subs	r3, r4, r3
 8019112:	2b00      	cmp	r3, #0
 8019114:	da24      	bge.n	8019160 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	3370      	adds	r3, #112	@ 0x70
 801911a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801911c:	e002      	b.n	8019124 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801911e:	69fb      	ldr	r3, [r7, #28]
 8019120:	681b      	ldr	r3, [r3, #0]
 8019122:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019124:	69fb      	ldr	r3, [r7, #28]
 8019126:	681b      	ldr	r3, [r3, #0]
 8019128:	2b00      	cmp	r3, #0
 801912a:	d011      	beq.n	8019150 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801912c:	69fb      	ldr	r3, [r7, #28]
 801912e:	681b      	ldr	r3, [r3, #0]
 8019130:	68db      	ldr	r3, [r3, #12]
 8019132:	685b      	ldr	r3, [r3, #4]
 8019134:	4618      	mov	r0, r3
 8019136:	f7f9 fdf9 	bl	8012d2c <lwip_htonl>
 801913a:	4604      	mov	r4, r0
 801913c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801913e:	68db      	ldr	r3, [r3, #12]
 8019140:	685b      	ldr	r3, [r3, #4]
 8019142:	4618      	mov	r0, r3
 8019144:	f7f9 fdf2 	bl	8012d2c <lwip_htonl>
 8019148:	4603      	mov	r3, r0
 801914a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801914c:	2b00      	cmp	r3, #0
 801914e:	dbe6      	blt.n	801911e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8019150:	69fb      	ldr	r3, [r7, #28]
 8019152:	681a      	ldr	r2, [r3, #0]
 8019154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019156:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8019158:	69fb      	ldr	r3, [r7, #28]
 801915a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801915c:	601a      	str	r2, [r3, #0]
 801915e:	e009      	b.n	8019174 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8019160:	6a3b      	ldr	r3, [r7, #32]
 8019162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019164:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8019166:	6a3b      	ldr	r3, [r7, #32]
 8019168:	681b      	ldr	r3, [r3, #0]
 801916a:	623b      	str	r3, [r7, #32]
 801916c:	e002      	b.n	8019174 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801916e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019170:	f7fc fc45 	bl	80159fe <tcp_seg_free>
    }
    seg = pcb->unsent;
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019178:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801917a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801917c:	2b00      	cmp	r3, #0
 801917e:	d012      	beq.n	80191a6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8019180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019182:	68db      	ldr	r3, [r3, #12]
 8019184:	685b      	ldr	r3, [r3, #4]
 8019186:	4618      	mov	r0, r3
 8019188:	f7f9 fdd0 	bl	8012d2c <lwip_htonl>
 801918c:	4602      	mov	r2, r0
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019192:	1ad3      	subs	r3, r2, r3
 8019194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019196:	8912      	ldrh	r2, [r2, #8]
 8019198:	4413      	add	r3, r2
  while (seg != NULL &&
 801919a:	69ba      	ldr	r2, [r7, #24]
 801919c:	429a      	cmp	r2, r3
 801919e:	f4bf aed9 	bcs.w	8018f54 <tcp_output+0x160>
 80191a2:	e000      	b.n	80191a6 <tcp_output+0x3b2>
      break;
 80191a4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	d108      	bne.n	80191c0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	2200      	movs	r2, #0
 80191b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80191b6:	e004      	b.n	80191c2 <tcp_output+0x3ce>
    goto output_done;
 80191b8:	bf00      	nop
 80191ba:	e002      	b.n	80191c2 <tcp_output+0x3ce>
    goto output_done;
 80191bc:	bf00      	nop
 80191be:	e000      	b.n	80191c2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80191c0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	8b5b      	ldrh	r3, [r3, #26]
 80191c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80191ca:	b29a      	uxth	r2, r3
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80191d0:	2300      	movs	r3, #0
}
 80191d2:	4618      	mov	r0, r3
 80191d4:	3728      	adds	r7, #40	@ 0x28
 80191d6:	46bd      	mov	sp, r7
 80191d8:	bdb0      	pop	{r4, r5, r7, pc}
 80191da:	bf00      	nop

080191dc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	b082      	sub	sp, #8
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	d106      	bne.n	80191f8 <tcp_output_segment_busy+0x1c>
 80191ea:	4b09      	ldr	r3, [pc, #36]	@ (8019210 <tcp_output_segment_busy+0x34>)
 80191ec:	f240 529a 	movw	r2, #1434	@ 0x59a
 80191f0:	4908      	ldr	r1, [pc, #32]	@ (8019214 <tcp_output_segment_busy+0x38>)
 80191f2:	4809      	ldr	r0, [pc, #36]	@ (8019218 <tcp_output_segment_busy+0x3c>)
 80191f4:	f004 ff6e 	bl	801e0d4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	685b      	ldr	r3, [r3, #4]
 80191fc:	7b9b      	ldrb	r3, [r3, #14]
 80191fe:	2b01      	cmp	r3, #1
 8019200:	d001      	beq.n	8019206 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8019202:	2301      	movs	r3, #1
 8019204:	e000      	b.n	8019208 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8019206:	2300      	movs	r3, #0
}
 8019208:	4618      	mov	r0, r3
 801920a:	3708      	adds	r7, #8
 801920c:	46bd      	mov	sp, r7
 801920e:	bd80      	pop	{r7, pc}
 8019210:	080209e4 	.word	0x080209e4
 8019214:	08020f80 	.word	0x08020f80
 8019218:	08020a38 	.word	0x08020a38

0801921c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801921c:	b5b0      	push	{r4, r5, r7, lr}
 801921e:	b08c      	sub	sp, #48	@ 0x30
 8019220:	af04      	add	r7, sp, #16
 8019222:	60f8      	str	r0, [r7, #12]
 8019224:	60b9      	str	r1, [r7, #8]
 8019226:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8019228:	68fb      	ldr	r3, [r7, #12]
 801922a:	2b00      	cmp	r3, #0
 801922c:	d106      	bne.n	801923c <tcp_output_segment+0x20>
 801922e:	4b64      	ldr	r3, [pc, #400]	@ (80193c0 <tcp_output_segment+0x1a4>)
 8019230:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8019234:	4963      	ldr	r1, [pc, #396]	@ (80193c4 <tcp_output_segment+0x1a8>)
 8019236:	4864      	ldr	r0, [pc, #400]	@ (80193c8 <tcp_output_segment+0x1ac>)
 8019238:	f004 ff4c 	bl	801e0d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801923c:	68bb      	ldr	r3, [r7, #8]
 801923e:	2b00      	cmp	r3, #0
 8019240:	d106      	bne.n	8019250 <tcp_output_segment+0x34>
 8019242:	4b5f      	ldr	r3, [pc, #380]	@ (80193c0 <tcp_output_segment+0x1a4>)
 8019244:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8019248:	4960      	ldr	r1, [pc, #384]	@ (80193cc <tcp_output_segment+0x1b0>)
 801924a:	485f      	ldr	r0, [pc, #380]	@ (80193c8 <tcp_output_segment+0x1ac>)
 801924c:	f004 ff42 	bl	801e0d4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	2b00      	cmp	r3, #0
 8019254:	d106      	bne.n	8019264 <tcp_output_segment+0x48>
 8019256:	4b5a      	ldr	r3, [pc, #360]	@ (80193c0 <tcp_output_segment+0x1a4>)
 8019258:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801925c:	495c      	ldr	r1, [pc, #368]	@ (80193d0 <tcp_output_segment+0x1b4>)
 801925e:	485a      	ldr	r0, [pc, #360]	@ (80193c8 <tcp_output_segment+0x1ac>)
 8019260:	f004 ff38 	bl	801e0d4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8019264:	68f8      	ldr	r0, [r7, #12]
 8019266:	f7ff ffb9 	bl	80191dc <tcp_output_segment_busy>
 801926a:	4603      	mov	r3, r0
 801926c:	2b00      	cmp	r3, #0
 801926e:	d001      	beq.n	8019274 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8019270:	2300      	movs	r3, #0
 8019272:	e0a1      	b.n	80193b8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8019274:	68bb      	ldr	r3, [r7, #8]
 8019276:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019278:	68fb      	ldr	r3, [r7, #12]
 801927a:	68dc      	ldr	r4, [r3, #12]
 801927c:	4610      	mov	r0, r2
 801927e:	f7f9 fd55 	bl	8012d2c <lwip_htonl>
 8019282:	4603      	mov	r3, r0
 8019284:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8019286:	68bb      	ldr	r3, [r7, #8]
 8019288:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801928a:	68fb      	ldr	r3, [r7, #12]
 801928c:	68dc      	ldr	r4, [r3, #12]
 801928e:	4610      	mov	r0, r2
 8019290:	f7f9 fd36 	bl	8012d00 <lwip_htons>
 8019294:	4603      	mov	r3, r0
 8019296:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019298:	68bb      	ldr	r3, [r7, #8]
 801929a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801929c:	68ba      	ldr	r2, [r7, #8]
 801929e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80192a0:	441a      	add	r2, r3
 80192a2:	68bb      	ldr	r3, [r7, #8]
 80192a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80192a6:	68fb      	ldr	r3, [r7, #12]
 80192a8:	68db      	ldr	r3, [r3, #12]
 80192aa:	3314      	adds	r3, #20
 80192ac:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80192ae:	68fb      	ldr	r3, [r7, #12]
 80192b0:	7a9b      	ldrb	r3, [r3, #10]
 80192b2:	f003 0301 	and.w	r3, r3, #1
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	d015      	beq.n	80192e6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80192ba:	68bb      	ldr	r3, [r7, #8]
 80192bc:	3304      	adds	r3, #4
 80192be:	461a      	mov	r2, r3
 80192c0:	6879      	ldr	r1, [r7, #4]
 80192c2:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80192c6:	f7fc fe91 	bl	8015fec <tcp_eff_send_mss_netif>
 80192ca:	4603      	mov	r3, r0
 80192cc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80192ce:	8b7b      	ldrh	r3, [r7, #26]
 80192d0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80192d4:	4618      	mov	r0, r3
 80192d6:	f7f9 fd29 	bl	8012d2c <lwip_htonl>
 80192da:	4602      	mov	r2, r0
 80192dc:	69fb      	ldr	r3, [r7, #28]
 80192de:	601a      	str	r2, [r3, #0]
    opts += 1;
 80192e0:	69fb      	ldr	r3, [r7, #28]
 80192e2:	3304      	adds	r3, #4
 80192e4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80192e6:	68bb      	ldr	r3, [r7, #8]
 80192e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	da02      	bge.n	80192f6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80192f0:	68bb      	ldr	r3, [r7, #8]
 80192f2:	2200      	movs	r2, #0
 80192f4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80192f6:	68bb      	ldr	r3, [r7, #8]
 80192f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	d10c      	bne.n	8019318 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80192fe:	4b35      	ldr	r3, [pc, #212]	@ (80193d4 <tcp_output_segment+0x1b8>)
 8019300:	681a      	ldr	r2, [r3, #0]
 8019302:	68bb      	ldr	r3, [r7, #8]
 8019304:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8019306:	68fb      	ldr	r3, [r7, #12]
 8019308:	68db      	ldr	r3, [r3, #12]
 801930a:	685b      	ldr	r3, [r3, #4]
 801930c:	4618      	mov	r0, r3
 801930e:	f7f9 fd0d 	bl	8012d2c <lwip_htonl>
 8019312:	4602      	mov	r2, r0
 8019314:	68bb      	ldr	r3, [r7, #8]
 8019316:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8019318:	68fb      	ldr	r3, [r7, #12]
 801931a:	68da      	ldr	r2, [r3, #12]
 801931c:	68fb      	ldr	r3, [r7, #12]
 801931e:	685b      	ldr	r3, [r3, #4]
 8019320:	685b      	ldr	r3, [r3, #4]
 8019322:	1ad3      	subs	r3, r2, r3
 8019324:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8019326:	68fb      	ldr	r3, [r7, #12]
 8019328:	685b      	ldr	r3, [r3, #4]
 801932a:	8959      	ldrh	r1, [r3, #10]
 801932c:	68fb      	ldr	r3, [r7, #12]
 801932e:	685b      	ldr	r3, [r3, #4]
 8019330:	8b3a      	ldrh	r2, [r7, #24]
 8019332:	1a8a      	subs	r2, r1, r2
 8019334:	b292      	uxth	r2, r2
 8019336:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	685b      	ldr	r3, [r3, #4]
 801933c:	8919      	ldrh	r1, [r3, #8]
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	685b      	ldr	r3, [r3, #4]
 8019342:	8b3a      	ldrh	r2, [r7, #24]
 8019344:	1a8a      	subs	r2, r1, r2
 8019346:	b292      	uxth	r2, r2
 8019348:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	685b      	ldr	r3, [r3, #4]
 801934e:	68fa      	ldr	r2, [r7, #12]
 8019350:	68d2      	ldr	r2, [r2, #12]
 8019352:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8019354:	68fb      	ldr	r3, [r7, #12]
 8019356:	68db      	ldr	r3, [r3, #12]
 8019358:	2200      	movs	r2, #0
 801935a:	741a      	strb	r2, [r3, #16]
 801935c:	2200      	movs	r2, #0
 801935e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8019360:	68fb      	ldr	r3, [r7, #12]
 8019362:	68da      	ldr	r2, [r3, #12]
 8019364:	68fb      	ldr	r3, [r7, #12]
 8019366:	7a9b      	ldrb	r3, [r3, #10]
 8019368:	f003 0301 	and.w	r3, r3, #1
 801936c:	2b00      	cmp	r3, #0
 801936e:	d001      	beq.n	8019374 <tcp_output_segment+0x158>
 8019370:	2318      	movs	r3, #24
 8019372:	e000      	b.n	8019376 <tcp_output_segment+0x15a>
 8019374:	2314      	movs	r3, #20
 8019376:	4413      	add	r3, r2
 8019378:	69fa      	ldr	r2, [r7, #28]
 801937a:	429a      	cmp	r2, r3
 801937c:	d006      	beq.n	801938c <tcp_output_segment+0x170>
 801937e:	4b10      	ldr	r3, [pc, #64]	@ (80193c0 <tcp_output_segment+0x1a4>)
 8019380:	f240 621c 	movw	r2, #1564	@ 0x61c
 8019384:	4914      	ldr	r1, [pc, #80]	@ (80193d8 <tcp_output_segment+0x1bc>)
 8019386:	4810      	ldr	r0, [pc, #64]	@ (80193c8 <tcp_output_segment+0x1ac>)
 8019388:	f004 fea4 	bl	801e0d4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801938c:	68fb      	ldr	r3, [r7, #12]
 801938e:	6858      	ldr	r0, [r3, #4]
 8019390:	68b9      	ldr	r1, [r7, #8]
 8019392:	68bb      	ldr	r3, [r7, #8]
 8019394:	1d1c      	adds	r4, r3, #4
 8019396:	68bb      	ldr	r3, [r7, #8]
 8019398:	7add      	ldrb	r5, [r3, #11]
 801939a:	68bb      	ldr	r3, [r7, #8]
 801939c:	7a9b      	ldrb	r3, [r3, #10]
 801939e:	687a      	ldr	r2, [r7, #4]
 80193a0:	9202      	str	r2, [sp, #8]
 80193a2:	2206      	movs	r2, #6
 80193a4:	9201      	str	r2, [sp, #4]
 80193a6:	9300      	str	r3, [sp, #0]
 80193a8:	462b      	mov	r3, r5
 80193aa:	4622      	mov	r2, r4
 80193ac:	f002 fd12 	bl	801bdd4 <ip4_output_if>
 80193b0:	4603      	mov	r3, r0
 80193b2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80193b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80193b8:	4618      	mov	r0, r3
 80193ba:	3720      	adds	r7, #32
 80193bc:	46bd      	mov	sp, r7
 80193be:	bdb0      	pop	{r4, r5, r7, pc}
 80193c0:	080209e4 	.word	0x080209e4
 80193c4:	08020fa8 	.word	0x08020fa8
 80193c8:	08020a38 	.word	0x08020a38
 80193cc:	08020fc8 	.word	0x08020fc8
 80193d0:	08020fe8 	.word	0x08020fe8
 80193d4:	200277b0 	.word	0x200277b0
 80193d8:	0802100c 	.word	0x0802100c

080193dc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80193dc:	b5b0      	push	{r4, r5, r7, lr}
 80193de:	b084      	sub	sp, #16
 80193e0:	af00      	add	r7, sp, #0
 80193e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d106      	bne.n	80193f8 <tcp_rexmit_rto_prepare+0x1c>
 80193ea:	4b31      	ldr	r3, [pc, #196]	@ (80194b0 <tcp_rexmit_rto_prepare+0xd4>)
 80193ec:	f240 6263 	movw	r2, #1635	@ 0x663
 80193f0:	4930      	ldr	r1, [pc, #192]	@ (80194b4 <tcp_rexmit_rto_prepare+0xd8>)
 80193f2:	4831      	ldr	r0, [pc, #196]	@ (80194b8 <tcp_rexmit_rto_prepare+0xdc>)
 80193f4:	f004 fe6e 	bl	801e0d4 <iprintf>

  if (pcb->unacked == NULL) {
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	d102      	bne.n	8019406 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8019400:	f06f 0305 	mvn.w	r3, #5
 8019404:	e050      	b.n	80194a8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801940a:	60fb      	str	r3, [r7, #12]
 801940c:	e00b      	b.n	8019426 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801940e:	68f8      	ldr	r0, [r7, #12]
 8019410:	f7ff fee4 	bl	80191dc <tcp_output_segment_busy>
 8019414:	4603      	mov	r3, r0
 8019416:	2b00      	cmp	r3, #0
 8019418:	d002      	beq.n	8019420 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801941a:	f06f 0305 	mvn.w	r3, #5
 801941e:	e043      	b.n	80194a8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019420:	68fb      	ldr	r3, [r7, #12]
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	60fb      	str	r3, [r7, #12]
 8019426:	68fb      	ldr	r3, [r7, #12]
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	2b00      	cmp	r3, #0
 801942c:	d1ef      	bne.n	801940e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801942e:	68f8      	ldr	r0, [r7, #12]
 8019430:	f7ff fed4 	bl	80191dc <tcp_output_segment_busy>
 8019434:	4603      	mov	r3, r0
 8019436:	2b00      	cmp	r3, #0
 8019438:	d002      	beq.n	8019440 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801943a:	f06f 0305 	mvn.w	r3, #5
 801943e:	e033      	b.n	80194a8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8019444:	68fb      	ldr	r3, [r7, #12]
 8019446:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	2200      	movs	r2, #0
 8019454:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	8b5b      	ldrh	r3, [r3, #26]
 801945a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801945e:	b29a      	uxth	r2, r3
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019464:	68fb      	ldr	r3, [r7, #12]
 8019466:	68db      	ldr	r3, [r3, #12]
 8019468:	685b      	ldr	r3, [r3, #4]
 801946a:	4618      	mov	r0, r3
 801946c:	f7f9 fc5e 	bl	8012d2c <lwip_htonl>
 8019470:	4604      	mov	r4, r0
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	891b      	ldrh	r3, [r3, #8]
 8019476:	461d      	mov	r5, r3
 8019478:	68fb      	ldr	r3, [r7, #12]
 801947a:	68db      	ldr	r3, [r3, #12]
 801947c:	899b      	ldrh	r3, [r3, #12]
 801947e:	b29b      	uxth	r3, r3
 8019480:	4618      	mov	r0, r3
 8019482:	f7f9 fc3d 	bl	8012d00 <lwip_htons>
 8019486:	4603      	mov	r3, r0
 8019488:	b2db      	uxtb	r3, r3
 801948a:	f003 0303 	and.w	r3, r3, #3
 801948e:	2b00      	cmp	r3, #0
 8019490:	d001      	beq.n	8019496 <tcp_rexmit_rto_prepare+0xba>
 8019492:	2301      	movs	r3, #1
 8019494:	e000      	b.n	8019498 <tcp_rexmit_rto_prepare+0xbc>
 8019496:	2300      	movs	r3, #0
 8019498:	442b      	add	r3, r5
 801949a:	18e2      	adds	r2, r4, r3
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	2200      	movs	r2, #0
 80194a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80194a6:	2300      	movs	r3, #0
}
 80194a8:	4618      	mov	r0, r3
 80194aa:	3710      	adds	r7, #16
 80194ac:	46bd      	mov	sp, r7
 80194ae:	bdb0      	pop	{r4, r5, r7, pc}
 80194b0:	080209e4 	.word	0x080209e4
 80194b4:	08021020 	.word	0x08021020
 80194b8:	08020a38 	.word	0x08020a38

080194bc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80194bc:	b580      	push	{r7, lr}
 80194be:	b082      	sub	sp, #8
 80194c0:	af00      	add	r7, sp, #0
 80194c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d106      	bne.n	80194d8 <tcp_rexmit_rto_commit+0x1c>
 80194ca:	4b0d      	ldr	r3, [pc, #52]	@ (8019500 <tcp_rexmit_rto_commit+0x44>)
 80194cc:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80194d0:	490c      	ldr	r1, [pc, #48]	@ (8019504 <tcp_rexmit_rto_commit+0x48>)
 80194d2:	480d      	ldr	r0, [pc, #52]	@ (8019508 <tcp_rexmit_rto_commit+0x4c>)
 80194d4:	f004 fdfe 	bl	801e0d4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80194de:	2bff      	cmp	r3, #255	@ 0xff
 80194e0:	d007      	beq.n	80194f2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80194e8:	3301      	adds	r3, #1
 80194ea:	b2da      	uxtb	r2, r3
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80194f2:	6878      	ldr	r0, [r7, #4]
 80194f4:	f7ff fc7e 	bl	8018df4 <tcp_output>
}
 80194f8:	bf00      	nop
 80194fa:	3708      	adds	r7, #8
 80194fc:	46bd      	mov	sp, r7
 80194fe:	bd80      	pop	{r7, pc}
 8019500:	080209e4 	.word	0x080209e4
 8019504:	08021044 	.word	0x08021044
 8019508:	08020a38 	.word	0x08020a38

0801950c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801950c:	b580      	push	{r7, lr}
 801950e:	b082      	sub	sp, #8
 8019510:	af00      	add	r7, sp, #0
 8019512:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	2b00      	cmp	r3, #0
 8019518:	d106      	bne.n	8019528 <tcp_rexmit_rto+0x1c>
 801951a:	4b0a      	ldr	r3, [pc, #40]	@ (8019544 <tcp_rexmit_rto+0x38>)
 801951c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8019520:	4909      	ldr	r1, [pc, #36]	@ (8019548 <tcp_rexmit_rto+0x3c>)
 8019522:	480a      	ldr	r0, [pc, #40]	@ (801954c <tcp_rexmit_rto+0x40>)
 8019524:	f004 fdd6 	bl	801e0d4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8019528:	6878      	ldr	r0, [r7, #4]
 801952a:	f7ff ff57 	bl	80193dc <tcp_rexmit_rto_prepare>
 801952e:	4603      	mov	r3, r0
 8019530:	2b00      	cmp	r3, #0
 8019532:	d102      	bne.n	801953a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8019534:	6878      	ldr	r0, [r7, #4]
 8019536:	f7ff ffc1 	bl	80194bc <tcp_rexmit_rto_commit>
  }
}
 801953a:	bf00      	nop
 801953c:	3708      	adds	r7, #8
 801953e:	46bd      	mov	sp, r7
 8019540:	bd80      	pop	{r7, pc}
 8019542:	bf00      	nop
 8019544:	080209e4 	.word	0x080209e4
 8019548:	08021068 	.word	0x08021068
 801954c:	08020a38 	.word	0x08020a38

08019550 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8019550:	b590      	push	{r4, r7, lr}
 8019552:	b085      	sub	sp, #20
 8019554:	af00      	add	r7, sp, #0
 8019556:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	2b00      	cmp	r3, #0
 801955c:	d106      	bne.n	801956c <tcp_rexmit+0x1c>
 801955e:	4b2f      	ldr	r3, [pc, #188]	@ (801961c <tcp_rexmit+0xcc>)
 8019560:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8019564:	492e      	ldr	r1, [pc, #184]	@ (8019620 <tcp_rexmit+0xd0>)
 8019566:	482f      	ldr	r0, [pc, #188]	@ (8019624 <tcp_rexmit+0xd4>)
 8019568:	f004 fdb4 	bl	801e0d4 <iprintf>

  if (pcb->unacked == NULL) {
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019570:	2b00      	cmp	r3, #0
 8019572:	d102      	bne.n	801957a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8019574:	f06f 0305 	mvn.w	r3, #5
 8019578:	e04c      	b.n	8019614 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801957e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8019580:	68b8      	ldr	r0, [r7, #8]
 8019582:	f7ff fe2b 	bl	80191dc <tcp_output_segment_busy>
 8019586:	4603      	mov	r3, r0
 8019588:	2b00      	cmp	r3, #0
 801958a:	d002      	beq.n	8019592 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801958c:	f06f 0305 	mvn.w	r3, #5
 8019590:	e040      	b.n	8019614 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8019592:	68bb      	ldr	r3, [r7, #8]
 8019594:	681a      	ldr	r2, [r3, #0]
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	336c      	adds	r3, #108	@ 0x6c
 801959e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80195a0:	e002      	b.n	80195a8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80195a2:	68fb      	ldr	r3, [r7, #12]
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80195a8:	68fb      	ldr	r3, [r7, #12]
 80195aa:	681b      	ldr	r3, [r3, #0]
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d011      	beq.n	80195d4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80195b0:	68fb      	ldr	r3, [r7, #12]
 80195b2:	681b      	ldr	r3, [r3, #0]
 80195b4:	68db      	ldr	r3, [r3, #12]
 80195b6:	685b      	ldr	r3, [r3, #4]
 80195b8:	4618      	mov	r0, r3
 80195ba:	f7f9 fbb7 	bl	8012d2c <lwip_htonl>
 80195be:	4604      	mov	r4, r0
 80195c0:	68bb      	ldr	r3, [r7, #8]
 80195c2:	68db      	ldr	r3, [r3, #12]
 80195c4:	685b      	ldr	r3, [r3, #4]
 80195c6:	4618      	mov	r0, r3
 80195c8:	f7f9 fbb0 	bl	8012d2c <lwip_htonl>
 80195cc:	4603      	mov	r3, r0
 80195ce:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	dbe6      	blt.n	80195a2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80195d4:	68fb      	ldr	r3, [r7, #12]
 80195d6:	681a      	ldr	r2, [r3, #0]
 80195d8:	68bb      	ldr	r3, [r7, #8]
 80195da:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80195dc:	68fb      	ldr	r3, [r7, #12]
 80195de:	68ba      	ldr	r2, [r7, #8]
 80195e0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80195e2:	68bb      	ldr	r3, [r7, #8]
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d103      	bne.n	80195f2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	2200      	movs	r2, #0
 80195ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80195f8:	2bff      	cmp	r3, #255	@ 0xff
 80195fa:	d007      	beq.n	801960c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8019602:	3301      	adds	r3, #1
 8019604:	b2da      	uxtb	r2, r3
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	2200      	movs	r2, #0
 8019610:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8019612:	2300      	movs	r3, #0
}
 8019614:	4618      	mov	r0, r3
 8019616:	3714      	adds	r7, #20
 8019618:	46bd      	mov	sp, r7
 801961a:	bd90      	pop	{r4, r7, pc}
 801961c:	080209e4 	.word	0x080209e4
 8019620:	08021084 	.word	0x08021084
 8019624:	08020a38 	.word	0x08020a38

08019628 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8019628:	b580      	push	{r7, lr}
 801962a:	b082      	sub	sp, #8
 801962c:	af00      	add	r7, sp, #0
 801962e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	2b00      	cmp	r3, #0
 8019634:	d106      	bne.n	8019644 <tcp_rexmit_fast+0x1c>
 8019636:	4b2a      	ldr	r3, [pc, #168]	@ (80196e0 <tcp_rexmit_fast+0xb8>)
 8019638:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801963c:	4929      	ldr	r1, [pc, #164]	@ (80196e4 <tcp_rexmit_fast+0xbc>)
 801963e:	482a      	ldr	r0, [pc, #168]	@ (80196e8 <tcp_rexmit_fast+0xc0>)
 8019640:	f004 fd48 	bl	801e0d4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019648:	2b00      	cmp	r3, #0
 801964a:	d045      	beq.n	80196d8 <tcp_rexmit_fast+0xb0>
 801964c:	687b      	ldr	r3, [r7, #4]
 801964e:	8b5b      	ldrh	r3, [r3, #26]
 8019650:	f003 0304 	and.w	r3, r3, #4
 8019654:	2b00      	cmp	r3, #0
 8019656:	d13f      	bne.n	80196d8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8019658:	6878      	ldr	r0, [r7, #4]
 801965a:	f7ff ff79 	bl	8019550 <tcp_rexmit>
 801965e:	4603      	mov	r3, r0
 8019660:	2b00      	cmp	r3, #0
 8019662:	d139      	bne.n	80196d8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8019664:	687b      	ldr	r3, [r7, #4]
 8019666:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8019670:	4293      	cmp	r3, r2
 8019672:	bf28      	it	cs
 8019674:	4613      	movcs	r3, r2
 8019676:	b29b      	uxth	r3, r3
 8019678:	2b00      	cmp	r3, #0
 801967a:	da00      	bge.n	801967e <tcp_rexmit_fast+0x56>
 801967c:	3301      	adds	r3, #1
 801967e:	105b      	asrs	r3, r3, #1
 8019680:	b29a      	uxth	r2, r3
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801968e:	461a      	mov	r2, r3
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019694:	005b      	lsls	r3, r3, #1
 8019696:	429a      	cmp	r2, r3
 8019698:	d206      	bcs.n	80196a8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801969e:	005b      	lsls	r3, r3, #1
 80196a0:	b29a      	uxth	r2, r3
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80196b2:	4619      	mov	r1, r3
 80196b4:	0049      	lsls	r1, r1, #1
 80196b6:	440b      	add	r3, r1
 80196b8:	b29b      	uxth	r3, r3
 80196ba:	4413      	add	r3, r2
 80196bc:	b29a      	uxth	r2, r3
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	8b5b      	ldrh	r3, [r3, #26]
 80196c8:	f043 0304 	orr.w	r3, r3, #4
 80196cc:	b29a      	uxth	r2, r3
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	2200      	movs	r2, #0
 80196d6:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80196d8:	bf00      	nop
 80196da:	3708      	adds	r7, #8
 80196dc:	46bd      	mov	sp, r7
 80196de:	bd80      	pop	{r7, pc}
 80196e0:	080209e4 	.word	0x080209e4
 80196e4:	0802109c 	.word	0x0802109c
 80196e8:	08020a38 	.word	0x08020a38

080196ec <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80196ec:	b580      	push	{r7, lr}
 80196ee:	b086      	sub	sp, #24
 80196f0:	af00      	add	r7, sp, #0
 80196f2:	60f8      	str	r0, [r7, #12]
 80196f4:	607b      	str	r3, [r7, #4]
 80196f6:	460b      	mov	r3, r1
 80196f8:	817b      	strh	r3, [r7, #10]
 80196fa:	4613      	mov	r3, r2
 80196fc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80196fe:	897a      	ldrh	r2, [r7, #10]
 8019700:	893b      	ldrh	r3, [r7, #8]
 8019702:	4413      	add	r3, r2
 8019704:	b29b      	uxth	r3, r3
 8019706:	3314      	adds	r3, #20
 8019708:	b29b      	uxth	r3, r3
 801970a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801970e:	4619      	mov	r1, r3
 8019710:	2022      	movs	r0, #34	@ 0x22
 8019712:	f7fa fbff 	bl	8013f14 <pbuf_alloc>
 8019716:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8019718:	697b      	ldr	r3, [r7, #20]
 801971a:	2b00      	cmp	r3, #0
 801971c:	d04d      	beq.n	80197ba <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801971e:	897b      	ldrh	r3, [r7, #10]
 8019720:	3313      	adds	r3, #19
 8019722:	697a      	ldr	r2, [r7, #20]
 8019724:	8952      	ldrh	r2, [r2, #10]
 8019726:	4293      	cmp	r3, r2
 8019728:	db06      	blt.n	8019738 <tcp_output_alloc_header_common+0x4c>
 801972a:	4b26      	ldr	r3, [pc, #152]	@ (80197c4 <tcp_output_alloc_header_common+0xd8>)
 801972c:	f240 7223 	movw	r2, #1827	@ 0x723
 8019730:	4925      	ldr	r1, [pc, #148]	@ (80197c8 <tcp_output_alloc_header_common+0xdc>)
 8019732:	4826      	ldr	r0, [pc, #152]	@ (80197cc <tcp_output_alloc_header_common+0xe0>)
 8019734:	f004 fcce 	bl	801e0d4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8019738:	697b      	ldr	r3, [r7, #20]
 801973a:	685b      	ldr	r3, [r3, #4]
 801973c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801973e:	8c3b      	ldrh	r3, [r7, #32]
 8019740:	4618      	mov	r0, r3
 8019742:	f7f9 fadd 	bl	8012d00 <lwip_htons>
 8019746:	4603      	mov	r3, r0
 8019748:	461a      	mov	r2, r3
 801974a:	693b      	ldr	r3, [r7, #16]
 801974c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801974e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019750:	4618      	mov	r0, r3
 8019752:	f7f9 fad5 	bl	8012d00 <lwip_htons>
 8019756:	4603      	mov	r3, r0
 8019758:	461a      	mov	r2, r3
 801975a:	693b      	ldr	r3, [r7, #16]
 801975c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801975e:	693b      	ldr	r3, [r7, #16]
 8019760:	687a      	ldr	r2, [r7, #4]
 8019762:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8019764:	68f8      	ldr	r0, [r7, #12]
 8019766:	f7f9 fae1 	bl	8012d2c <lwip_htonl>
 801976a:	4602      	mov	r2, r0
 801976c:	693b      	ldr	r3, [r7, #16]
 801976e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8019770:	897b      	ldrh	r3, [r7, #10]
 8019772:	089b      	lsrs	r3, r3, #2
 8019774:	b29b      	uxth	r3, r3
 8019776:	3305      	adds	r3, #5
 8019778:	b29b      	uxth	r3, r3
 801977a:	031b      	lsls	r3, r3, #12
 801977c:	b29a      	uxth	r2, r3
 801977e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019782:	b29b      	uxth	r3, r3
 8019784:	4313      	orrs	r3, r2
 8019786:	b29b      	uxth	r3, r3
 8019788:	4618      	mov	r0, r3
 801978a:	f7f9 fab9 	bl	8012d00 <lwip_htons>
 801978e:	4603      	mov	r3, r0
 8019790:	461a      	mov	r2, r3
 8019792:	693b      	ldr	r3, [r7, #16]
 8019794:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8019796:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019798:	4618      	mov	r0, r3
 801979a:	f7f9 fab1 	bl	8012d00 <lwip_htons>
 801979e:	4603      	mov	r3, r0
 80197a0:	461a      	mov	r2, r3
 80197a2:	693b      	ldr	r3, [r7, #16]
 80197a4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80197a6:	693b      	ldr	r3, [r7, #16]
 80197a8:	2200      	movs	r2, #0
 80197aa:	741a      	strb	r2, [r3, #16]
 80197ac:	2200      	movs	r2, #0
 80197ae:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80197b0:	693b      	ldr	r3, [r7, #16]
 80197b2:	2200      	movs	r2, #0
 80197b4:	749a      	strb	r2, [r3, #18]
 80197b6:	2200      	movs	r2, #0
 80197b8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80197ba:	697b      	ldr	r3, [r7, #20]
}
 80197bc:	4618      	mov	r0, r3
 80197be:	3718      	adds	r7, #24
 80197c0:	46bd      	mov	sp, r7
 80197c2:	bd80      	pop	{r7, pc}
 80197c4:	080209e4 	.word	0x080209e4
 80197c8:	080210bc 	.word	0x080210bc
 80197cc:	08020a38 	.word	0x08020a38

080197d0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80197d0:	b5b0      	push	{r4, r5, r7, lr}
 80197d2:	b08a      	sub	sp, #40	@ 0x28
 80197d4:	af04      	add	r7, sp, #16
 80197d6:	60f8      	str	r0, [r7, #12]
 80197d8:	607b      	str	r3, [r7, #4]
 80197da:	460b      	mov	r3, r1
 80197dc:	817b      	strh	r3, [r7, #10]
 80197de:	4613      	mov	r3, r2
 80197e0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80197e2:	68fb      	ldr	r3, [r7, #12]
 80197e4:	2b00      	cmp	r3, #0
 80197e6:	d106      	bne.n	80197f6 <tcp_output_alloc_header+0x26>
 80197e8:	4b15      	ldr	r3, [pc, #84]	@ (8019840 <tcp_output_alloc_header+0x70>)
 80197ea:	f240 7242 	movw	r2, #1858	@ 0x742
 80197ee:	4915      	ldr	r1, [pc, #84]	@ (8019844 <tcp_output_alloc_header+0x74>)
 80197f0:	4815      	ldr	r0, [pc, #84]	@ (8019848 <tcp_output_alloc_header+0x78>)
 80197f2:	f004 fc6f 	bl	801e0d4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80197f6:	68fb      	ldr	r3, [r7, #12]
 80197f8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80197fa:	68fb      	ldr	r3, [r7, #12]
 80197fc:	8adb      	ldrh	r3, [r3, #22]
 80197fe:	68fa      	ldr	r2, [r7, #12]
 8019800:	8b12      	ldrh	r2, [r2, #24]
 8019802:	68f9      	ldr	r1, [r7, #12]
 8019804:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8019806:	893d      	ldrh	r5, [r7, #8]
 8019808:	897c      	ldrh	r4, [r7, #10]
 801980a:	9103      	str	r1, [sp, #12]
 801980c:	2110      	movs	r1, #16
 801980e:	9102      	str	r1, [sp, #8]
 8019810:	9201      	str	r2, [sp, #4]
 8019812:	9300      	str	r3, [sp, #0]
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	462a      	mov	r2, r5
 8019818:	4621      	mov	r1, r4
 801981a:	f7ff ff67 	bl	80196ec <tcp_output_alloc_header_common>
 801981e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8019820:	697b      	ldr	r3, [r7, #20]
 8019822:	2b00      	cmp	r3, #0
 8019824:	d006      	beq.n	8019834 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019826:	68fb      	ldr	r3, [r7, #12]
 8019828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801982a:	68fa      	ldr	r2, [r7, #12]
 801982c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801982e:	441a      	add	r2, r3
 8019830:	68fb      	ldr	r3, [r7, #12]
 8019832:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8019834:	697b      	ldr	r3, [r7, #20]
}
 8019836:	4618      	mov	r0, r3
 8019838:	3718      	adds	r7, #24
 801983a:	46bd      	mov	sp, r7
 801983c:	bdb0      	pop	{r4, r5, r7, pc}
 801983e:	bf00      	nop
 8019840:	080209e4 	.word	0x080209e4
 8019844:	080210ec 	.word	0x080210ec
 8019848:	08020a38 	.word	0x08020a38

0801984c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801984c:	b580      	push	{r7, lr}
 801984e:	b088      	sub	sp, #32
 8019850:	af00      	add	r7, sp, #0
 8019852:	60f8      	str	r0, [r7, #12]
 8019854:	60b9      	str	r1, [r7, #8]
 8019856:	4611      	mov	r1, r2
 8019858:	461a      	mov	r2, r3
 801985a:	460b      	mov	r3, r1
 801985c:	71fb      	strb	r3, [r7, #7]
 801985e:	4613      	mov	r3, r2
 8019860:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8019862:	2300      	movs	r3, #0
 8019864:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8019866:	68bb      	ldr	r3, [r7, #8]
 8019868:	2b00      	cmp	r3, #0
 801986a:	d106      	bne.n	801987a <tcp_output_fill_options+0x2e>
 801986c:	4b12      	ldr	r3, [pc, #72]	@ (80198b8 <tcp_output_fill_options+0x6c>)
 801986e:	f240 7256 	movw	r2, #1878	@ 0x756
 8019872:	4912      	ldr	r1, [pc, #72]	@ (80198bc <tcp_output_fill_options+0x70>)
 8019874:	4812      	ldr	r0, [pc, #72]	@ (80198c0 <tcp_output_fill_options+0x74>)
 8019876:	f004 fc2d 	bl	801e0d4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801987a:	68bb      	ldr	r3, [r7, #8]
 801987c:	685b      	ldr	r3, [r3, #4]
 801987e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8019880:	69bb      	ldr	r3, [r7, #24]
 8019882:	3314      	adds	r3, #20
 8019884:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8019886:	8bfb      	ldrh	r3, [r7, #30]
 8019888:	009b      	lsls	r3, r3, #2
 801988a:	461a      	mov	r2, r3
 801988c:	79fb      	ldrb	r3, [r7, #7]
 801988e:	009b      	lsls	r3, r3, #2
 8019890:	f003 0304 	and.w	r3, r3, #4
 8019894:	4413      	add	r3, r2
 8019896:	3314      	adds	r3, #20
 8019898:	69ba      	ldr	r2, [r7, #24]
 801989a:	4413      	add	r3, r2
 801989c:	697a      	ldr	r2, [r7, #20]
 801989e:	429a      	cmp	r2, r3
 80198a0:	d006      	beq.n	80198b0 <tcp_output_fill_options+0x64>
 80198a2:	4b05      	ldr	r3, [pc, #20]	@ (80198b8 <tcp_output_fill_options+0x6c>)
 80198a4:	f240 7275 	movw	r2, #1909	@ 0x775
 80198a8:	4906      	ldr	r1, [pc, #24]	@ (80198c4 <tcp_output_fill_options+0x78>)
 80198aa:	4805      	ldr	r0, [pc, #20]	@ (80198c0 <tcp_output_fill_options+0x74>)
 80198ac:	f004 fc12 	bl	801e0d4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80198b0:	bf00      	nop
 80198b2:	3720      	adds	r7, #32
 80198b4:	46bd      	mov	sp, r7
 80198b6:	bd80      	pop	{r7, pc}
 80198b8:	080209e4 	.word	0x080209e4
 80198bc:	08021114 	.word	0x08021114
 80198c0:	08020a38 	.word	0x08020a38
 80198c4:	0802100c 	.word	0x0802100c

080198c8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80198c8:	b580      	push	{r7, lr}
 80198ca:	b08a      	sub	sp, #40	@ 0x28
 80198cc:	af04      	add	r7, sp, #16
 80198ce:	60f8      	str	r0, [r7, #12]
 80198d0:	60b9      	str	r1, [r7, #8]
 80198d2:	607a      	str	r2, [r7, #4]
 80198d4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80198d6:	68bb      	ldr	r3, [r7, #8]
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d106      	bne.n	80198ea <tcp_output_control_segment+0x22>
 80198dc:	4b1c      	ldr	r3, [pc, #112]	@ (8019950 <tcp_output_control_segment+0x88>)
 80198de:	f240 7287 	movw	r2, #1927	@ 0x787
 80198e2:	491c      	ldr	r1, [pc, #112]	@ (8019954 <tcp_output_control_segment+0x8c>)
 80198e4:	481c      	ldr	r0, [pc, #112]	@ (8019958 <tcp_output_control_segment+0x90>)
 80198e6:	f004 fbf5 	bl	801e0d4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80198ea:	683a      	ldr	r2, [r7, #0]
 80198ec:	6879      	ldr	r1, [r7, #4]
 80198ee:	68f8      	ldr	r0, [r7, #12]
 80198f0:	f7fe ff42 	bl	8018778 <tcp_route>
 80198f4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80198f6:	693b      	ldr	r3, [r7, #16]
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d102      	bne.n	8019902 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80198fc:	23fc      	movs	r3, #252	@ 0xfc
 80198fe:	75fb      	strb	r3, [r7, #23]
 8019900:	e01c      	b.n	801993c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8019902:	68fb      	ldr	r3, [r7, #12]
 8019904:	2b00      	cmp	r3, #0
 8019906:	d006      	beq.n	8019916 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8019908:	68fb      	ldr	r3, [r7, #12]
 801990a:	7adb      	ldrb	r3, [r3, #11]
 801990c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801990e:	68fb      	ldr	r3, [r7, #12]
 8019910:	7a9b      	ldrb	r3, [r3, #10]
 8019912:	757b      	strb	r3, [r7, #21]
 8019914:	e003      	b.n	801991e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8019916:	23ff      	movs	r3, #255	@ 0xff
 8019918:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801991a:	2300      	movs	r3, #0
 801991c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801991e:	7dba      	ldrb	r2, [r7, #22]
 8019920:	693b      	ldr	r3, [r7, #16]
 8019922:	9302      	str	r3, [sp, #8]
 8019924:	2306      	movs	r3, #6
 8019926:	9301      	str	r3, [sp, #4]
 8019928:	7d7b      	ldrb	r3, [r7, #21]
 801992a:	9300      	str	r3, [sp, #0]
 801992c:	4613      	mov	r3, r2
 801992e:	683a      	ldr	r2, [r7, #0]
 8019930:	6879      	ldr	r1, [r7, #4]
 8019932:	68b8      	ldr	r0, [r7, #8]
 8019934:	f002 fa4e 	bl	801bdd4 <ip4_output_if>
 8019938:	4603      	mov	r3, r0
 801993a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801993c:	68b8      	ldr	r0, [r7, #8]
 801993e:	f7fa fdcd 	bl	80144dc <pbuf_free>
  return err;
 8019942:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019946:	4618      	mov	r0, r3
 8019948:	3718      	adds	r7, #24
 801994a:	46bd      	mov	sp, r7
 801994c:	bd80      	pop	{r7, pc}
 801994e:	bf00      	nop
 8019950:	080209e4 	.word	0x080209e4
 8019954:	0802113c 	.word	0x0802113c
 8019958:	08020a38 	.word	0x08020a38

0801995c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801995c:	b590      	push	{r4, r7, lr}
 801995e:	b08b      	sub	sp, #44	@ 0x2c
 8019960:	af04      	add	r7, sp, #16
 8019962:	60f8      	str	r0, [r7, #12]
 8019964:	60b9      	str	r1, [r7, #8]
 8019966:	607a      	str	r2, [r7, #4]
 8019968:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801996a:	683b      	ldr	r3, [r7, #0]
 801996c:	2b00      	cmp	r3, #0
 801996e:	d106      	bne.n	801997e <tcp_rst+0x22>
 8019970:	4b1f      	ldr	r3, [pc, #124]	@ (80199f0 <tcp_rst+0x94>)
 8019972:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8019976:	491f      	ldr	r1, [pc, #124]	@ (80199f4 <tcp_rst+0x98>)
 8019978:	481f      	ldr	r0, [pc, #124]	@ (80199f8 <tcp_rst+0x9c>)
 801997a:	f004 fbab 	bl	801e0d4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801997e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019980:	2b00      	cmp	r3, #0
 8019982:	d106      	bne.n	8019992 <tcp_rst+0x36>
 8019984:	4b1a      	ldr	r3, [pc, #104]	@ (80199f0 <tcp_rst+0x94>)
 8019986:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801998a:	491c      	ldr	r1, [pc, #112]	@ (80199fc <tcp_rst+0xa0>)
 801998c:	481a      	ldr	r0, [pc, #104]	@ (80199f8 <tcp_rst+0x9c>)
 801998e:	f004 fba1 	bl	801e0d4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019992:	2300      	movs	r3, #0
 8019994:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8019996:	f246 0308 	movw	r3, #24584	@ 0x6008
 801999a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801999c:	7dfb      	ldrb	r3, [r7, #23]
 801999e:	b29c      	uxth	r4, r3
 80199a0:	68b8      	ldr	r0, [r7, #8]
 80199a2:	f7f9 f9c3 	bl	8012d2c <lwip_htonl>
 80199a6:	4602      	mov	r2, r0
 80199a8:	8abb      	ldrh	r3, [r7, #20]
 80199aa:	9303      	str	r3, [sp, #12]
 80199ac:	2314      	movs	r3, #20
 80199ae:	9302      	str	r3, [sp, #8]
 80199b0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80199b2:	9301      	str	r3, [sp, #4]
 80199b4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80199b6:	9300      	str	r3, [sp, #0]
 80199b8:	4613      	mov	r3, r2
 80199ba:	2200      	movs	r2, #0
 80199bc:	4621      	mov	r1, r4
 80199be:	6878      	ldr	r0, [r7, #4]
 80199c0:	f7ff fe94 	bl	80196ec <tcp_output_alloc_header_common>
 80199c4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80199c6:	693b      	ldr	r3, [r7, #16]
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	d00c      	beq.n	80199e6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80199cc:	7dfb      	ldrb	r3, [r7, #23]
 80199ce:	2200      	movs	r2, #0
 80199d0:	6939      	ldr	r1, [r7, #16]
 80199d2:	68f8      	ldr	r0, [r7, #12]
 80199d4:	f7ff ff3a 	bl	801984c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80199d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80199da:	683a      	ldr	r2, [r7, #0]
 80199dc:	6939      	ldr	r1, [r7, #16]
 80199de:	68f8      	ldr	r0, [r7, #12]
 80199e0:	f7ff ff72 	bl	80198c8 <tcp_output_control_segment>
 80199e4:	e000      	b.n	80199e8 <tcp_rst+0x8c>
    return;
 80199e6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80199e8:	371c      	adds	r7, #28
 80199ea:	46bd      	mov	sp, r7
 80199ec:	bd90      	pop	{r4, r7, pc}
 80199ee:	bf00      	nop
 80199f0:	080209e4 	.word	0x080209e4
 80199f4:	08021168 	.word	0x08021168
 80199f8:	08020a38 	.word	0x08020a38
 80199fc:	08021184 	.word	0x08021184

08019a00 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8019a00:	b590      	push	{r4, r7, lr}
 8019a02:	b087      	sub	sp, #28
 8019a04:	af00      	add	r7, sp, #0
 8019a06:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8019a08:	2300      	movs	r3, #0
 8019a0a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8019a0c:	2300      	movs	r3, #0
 8019a0e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d106      	bne.n	8019a24 <tcp_send_empty_ack+0x24>
 8019a16:	4b28      	ldr	r3, [pc, #160]	@ (8019ab8 <tcp_send_empty_ack+0xb8>)
 8019a18:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8019a1c:	4927      	ldr	r1, [pc, #156]	@ (8019abc <tcp_send_empty_ack+0xbc>)
 8019a1e:	4828      	ldr	r0, [pc, #160]	@ (8019ac0 <tcp_send_empty_ack+0xc0>)
 8019a20:	f004 fb58 	bl	801e0d4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019a24:	7dfb      	ldrb	r3, [r7, #23]
 8019a26:	009b      	lsls	r3, r3, #2
 8019a28:	b2db      	uxtb	r3, r3
 8019a2a:	f003 0304 	and.w	r3, r3, #4
 8019a2e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8019a30:	7d7b      	ldrb	r3, [r7, #21]
 8019a32:	b29c      	uxth	r4, r3
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019a38:	4618      	mov	r0, r3
 8019a3a:	f7f9 f977 	bl	8012d2c <lwip_htonl>
 8019a3e:	4603      	mov	r3, r0
 8019a40:	2200      	movs	r2, #0
 8019a42:	4621      	mov	r1, r4
 8019a44:	6878      	ldr	r0, [r7, #4]
 8019a46:	f7ff fec3 	bl	80197d0 <tcp_output_alloc_header>
 8019a4a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019a4c:	693b      	ldr	r3, [r7, #16]
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d109      	bne.n	8019a66 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	8b5b      	ldrh	r3, [r3, #26]
 8019a56:	f043 0303 	orr.w	r3, r3, #3
 8019a5a:	b29a      	uxth	r2, r3
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8019a60:	f06f 0301 	mvn.w	r3, #1
 8019a64:	e023      	b.n	8019aae <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8019a66:	7dbb      	ldrb	r3, [r7, #22]
 8019a68:	7dfa      	ldrb	r2, [r7, #23]
 8019a6a:	6939      	ldr	r1, [r7, #16]
 8019a6c:	6878      	ldr	r0, [r7, #4]
 8019a6e:	f7ff feed 	bl	801984c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019a72:	687a      	ldr	r2, [r7, #4]
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	3304      	adds	r3, #4
 8019a78:	6939      	ldr	r1, [r7, #16]
 8019a7a:	6878      	ldr	r0, [r7, #4]
 8019a7c:	f7ff ff24 	bl	80198c8 <tcp_output_control_segment>
 8019a80:	4603      	mov	r3, r0
 8019a82:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8019a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d007      	beq.n	8019a9c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	8b5b      	ldrh	r3, [r3, #26]
 8019a90:	f043 0303 	orr.w	r3, r3, #3
 8019a94:	b29a      	uxth	r2, r3
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	835a      	strh	r2, [r3, #26]
 8019a9a:	e006      	b.n	8019aaa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	8b5b      	ldrh	r3, [r3, #26]
 8019aa0:	f023 0303 	bic.w	r3, r3, #3
 8019aa4:	b29a      	uxth	r2, r3
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8019aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019aae:	4618      	mov	r0, r3
 8019ab0:	371c      	adds	r7, #28
 8019ab2:	46bd      	mov	sp, r7
 8019ab4:	bd90      	pop	{r4, r7, pc}
 8019ab6:	bf00      	nop
 8019ab8:	080209e4 	.word	0x080209e4
 8019abc:	080211a0 	.word	0x080211a0
 8019ac0:	08020a38 	.word	0x08020a38

08019ac4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8019ac4:	b590      	push	{r4, r7, lr}
 8019ac6:	b087      	sub	sp, #28
 8019ac8:	af00      	add	r7, sp, #0
 8019aca:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019acc:	2300      	movs	r3, #0
 8019ace:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d106      	bne.n	8019ae4 <tcp_keepalive+0x20>
 8019ad6:	4b18      	ldr	r3, [pc, #96]	@ (8019b38 <tcp_keepalive+0x74>)
 8019ad8:	f640 0224 	movw	r2, #2084	@ 0x824
 8019adc:	4917      	ldr	r1, [pc, #92]	@ (8019b3c <tcp_keepalive+0x78>)
 8019ade:	4818      	ldr	r0, [pc, #96]	@ (8019b40 <tcp_keepalive+0x7c>)
 8019ae0:	f004 faf8 	bl	801e0d4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8019ae4:	7dfb      	ldrb	r3, [r7, #23]
 8019ae6:	b29c      	uxth	r4, r3
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019aec:	3b01      	subs	r3, #1
 8019aee:	4618      	mov	r0, r3
 8019af0:	f7f9 f91c 	bl	8012d2c <lwip_htonl>
 8019af4:	4603      	mov	r3, r0
 8019af6:	2200      	movs	r2, #0
 8019af8:	4621      	mov	r1, r4
 8019afa:	6878      	ldr	r0, [r7, #4]
 8019afc:	f7ff fe68 	bl	80197d0 <tcp_output_alloc_header>
 8019b00:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019b02:	693b      	ldr	r3, [r7, #16]
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d102      	bne.n	8019b0e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8019b08:	f04f 33ff 	mov.w	r3, #4294967295
 8019b0c:	e010      	b.n	8019b30 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019b0e:	7dfb      	ldrb	r3, [r7, #23]
 8019b10:	2200      	movs	r2, #0
 8019b12:	6939      	ldr	r1, [r7, #16]
 8019b14:	6878      	ldr	r0, [r7, #4]
 8019b16:	f7ff fe99 	bl	801984c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019b1a:	687a      	ldr	r2, [r7, #4]
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	3304      	adds	r3, #4
 8019b20:	6939      	ldr	r1, [r7, #16]
 8019b22:	6878      	ldr	r0, [r7, #4]
 8019b24:	f7ff fed0 	bl	80198c8 <tcp_output_control_segment>
 8019b28:	4603      	mov	r3, r0
 8019b2a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019b2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019b30:	4618      	mov	r0, r3
 8019b32:	371c      	adds	r7, #28
 8019b34:	46bd      	mov	sp, r7
 8019b36:	bd90      	pop	{r4, r7, pc}
 8019b38:	080209e4 	.word	0x080209e4
 8019b3c:	080211c0 	.word	0x080211c0
 8019b40:	08020a38 	.word	0x08020a38

08019b44 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8019b44:	b590      	push	{r4, r7, lr}
 8019b46:	b08b      	sub	sp, #44	@ 0x2c
 8019b48:	af00      	add	r7, sp, #0
 8019b4a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019b4c:	2300      	movs	r3, #0
 8019b4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d106      	bne.n	8019b66 <tcp_zero_window_probe+0x22>
 8019b58:	4b4c      	ldr	r3, [pc, #304]	@ (8019c8c <tcp_zero_window_probe+0x148>)
 8019b5a:	f640 024f 	movw	r2, #2127	@ 0x84f
 8019b5e:	494c      	ldr	r1, [pc, #304]	@ (8019c90 <tcp_zero_window_probe+0x14c>)
 8019b60:	484c      	ldr	r0, [pc, #304]	@ (8019c94 <tcp_zero_window_probe+0x150>)
 8019b62:	f004 fab7 	bl	801e0d4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019b6a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8019b6c:	6a3b      	ldr	r3, [r7, #32]
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	d101      	bne.n	8019b76 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8019b72:	2300      	movs	r3, #0
 8019b74:	e086      	b.n	8019c84 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8019b7c:	2bff      	cmp	r3, #255	@ 0xff
 8019b7e:	d007      	beq.n	8019b90 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8019b86:	3301      	adds	r3, #1
 8019b88:	b2da      	uxtb	r2, r3
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8019b90:	6a3b      	ldr	r3, [r7, #32]
 8019b92:	68db      	ldr	r3, [r3, #12]
 8019b94:	899b      	ldrh	r3, [r3, #12]
 8019b96:	b29b      	uxth	r3, r3
 8019b98:	4618      	mov	r0, r3
 8019b9a:	f7f9 f8b1 	bl	8012d00 <lwip_htons>
 8019b9e:	4603      	mov	r3, r0
 8019ba0:	b2db      	uxtb	r3, r3
 8019ba2:	f003 0301 	and.w	r3, r3, #1
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d005      	beq.n	8019bb6 <tcp_zero_window_probe+0x72>
 8019baa:	6a3b      	ldr	r3, [r7, #32]
 8019bac:	891b      	ldrh	r3, [r3, #8]
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d101      	bne.n	8019bb6 <tcp_zero_window_probe+0x72>
 8019bb2:	2301      	movs	r3, #1
 8019bb4:	e000      	b.n	8019bb8 <tcp_zero_window_probe+0x74>
 8019bb6:	2300      	movs	r3, #0
 8019bb8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8019bba:	7ffb      	ldrb	r3, [r7, #31]
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	bf0c      	ite	eq
 8019bc0:	2301      	moveq	r3, #1
 8019bc2:	2300      	movne	r3, #0
 8019bc4:	b2db      	uxtb	r3, r3
 8019bc6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8019bc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019bcc:	b299      	uxth	r1, r3
 8019bce:	6a3b      	ldr	r3, [r7, #32]
 8019bd0:	68db      	ldr	r3, [r3, #12]
 8019bd2:	685b      	ldr	r3, [r3, #4]
 8019bd4:	8bba      	ldrh	r2, [r7, #28]
 8019bd6:	6878      	ldr	r0, [r7, #4]
 8019bd8:	f7ff fdfa 	bl	80197d0 <tcp_output_alloc_header>
 8019bdc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8019bde:	69bb      	ldr	r3, [r7, #24]
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d102      	bne.n	8019bea <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8019be4:	f04f 33ff 	mov.w	r3, #4294967295
 8019be8:	e04c      	b.n	8019c84 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8019bea:	69bb      	ldr	r3, [r7, #24]
 8019bec:	685b      	ldr	r3, [r3, #4]
 8019bee:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8019bf0:	7ffb      	ldrb	r3, [r7, #31]
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	d011      	beq.n	8019c1a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8019bf6:	697b      	ldr	r3, [r7, #20]
 8019bf8:	899b      	ldrh	r3, [r3, #12]
 8019bfa:	b29b      	uxth	r3, r3
 8019bfc:	b21b      	sxth	r3, r3
 8019bfe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8019c02:	b21c      	sxth	r4, r3
 8019c04:	2011      	movs	r0, #17
 8019c06:	f7f9 f87b 	bl	8012d00 <lwip_htons>
 8019c0a:	4603      	mov	r3, r0
 8019c0c:	b21b      	sxth	r3, r3
 8019c0e:	4323      	orrs	r3, r4
 8019c10:	b21b      	sxth	r3, r3
 8019c12:	b29a      	uxth	r2, r3
 8019c14:	697b      	ldr	r3, [r7, #20]
 8019c16:	819a      	strh	r2, [r3, #12]
 8019c18:	e010      	b.n	8019c3c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8019c1a:	69bb      	ldr	r3, [r7, #24]
 8019c1c:	685b      	ldr	r3, [r3, #4]
 8019c1e:	3314      	adds	r3, #20
 8019c20:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8019c22:	6a3b      	ldr	r3, [r7, #32]
 8019c24:	6858      	ldr	r0, [r3, #4]
 8019c26:	6a3b      	ldr	r3, [r7, #32]
 8019c28:	685b      	ldr	r3, [r3, #4]
 8019c2a:	891a      	ldrh	r2, [r3, #8]
 8019c2c:	6a3b      	ldr	r3, [r7, #32]
 8019c2e:	891b      	ldrh	r3, [r3, #8]
 8019c30:	1ad3      	subs	r3, r2, r3
 8019c32:	b29b      	uxth	r3, r3
 8019c34:	2201      	movs	r2, #1
 8019c36:	6939      	ldr	r1, [r7, #16]
 8019c38:	f7fa fe56 	bl	80148e8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8019c3c:	6a3b      	ldr	r3, [r7, #32]
 8019c3e:	68db      	ldr	r3, [r3, #12]
 8019c40:	685b      	ldr	r3, [r3, #4]
 8019c42:	4618      	mov	r0, r3
 8019c44:	f7f9 f872 	bl	8012d2c <lwip_htonl>
 8019c48:	4603      	mov	r3, r0
 8019c4a:	3301      	adds	r3, #1
 8019c4c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019c52:	68fb      	ldr	r3, [r7, #12]
 8019c54:	1ad3      	subs	r3, r2, r3
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	da02      	bge.n	8019c60 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	68fa      	ldr	r2, [r7, #12]
 8019c5e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019c60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019c64:	2200      	movs	r2, #0
 8019c66:	69b9      	ldr	r1, [r7, #24]
 8019c68:	6878      	ldr	r0, [r7, #4]
 8019c6a:	f7ff fdef 	bl	801984c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019c6e:	687a      	ldr	r2, [r7, #4]
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	3304      	adds	r3, #4
 8019c74:	69b9      	ldr	r1, [r7, #24]
 8019c76:	6878      	ldr	r0, [r7, #4]
 8019c78:	f7ff fe26 	bl	80198c8 <tcp_output_control_segment>
 8019c7c:	4603      	mov	r3, r0
 8019c7e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019c80:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019c84:	4618      	mov	r0, r3
 8019c86:	372c      	adds	r7, #44	@ 0x2c
 8019c88:	46bd      	mov	sp, r7
 8019c8a:	bd90      	pop	{r4, r7, pc}
 8019c8c:	080209e4 	.word	0x080209e4
 8019c90:	080211dc 	.word	0x080211dc
 8019c94:	08020a38 	.word	0x08020a38

08019c98 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8019c98:	b580      	push	{r7, lr}
 8019c9a:	b082      	sub	sp, #8
 8019c9c:	af00      	add	r7, sp, #0
 8019c9e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8019ca0:	f7fa ff10 	bl	8014ac4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8019ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8019cd0 <tcpip_tcp_timer+0x38>)
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d103      	bne.n	8019cb4 <tcpip_tcp_timer+0x1c>
 8019cac:	4b09      	ldr	r3, [pc, #36]	@ (8019cd4 <tcpip_tcp_timer+0x3c>)
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d005      	beq.n	8019cc0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019cb4:	2200      	movs	r2, #0
 8019cb6:	4908      	ldr	r1, [pc, #32]	@ (8019cd8 <tcpip_tcp_timer+0x40>)
 8019cb8:	20fa      	movs	r0, #250	@ 0xfa
 8019cba:	f000 f8f3 	bl	8019ea4 <sys_timeout>
 8019cbe:	e003      	b.n	8019cc8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8019cc0:	4b06      	ldr	r3, [pc, #24]	@ (8019cdc <tcpip_tcp_timer+0x44>)
 8019cc2:	2200      	movs	r2, #0
 8019cc4:	601a      	str	r2, [r3, #0]
  }
}
 8019cc6:	bf00      	nop
 8019cc8:	bf00      	nop
 8019cca:	3708      	adds	r7, #8
 8019ccc:	46bd      	mov	sp, r7
 8019cce:	bd80      	pop	{r7, pc}
 8019cd0:	200277bc 	.word	0x200277bc
 8019cd4:	200277c0 	.word	0x200277c0
 8019cd8:	08019c99 	.word	0x08019c99
 8019cdc:	20027808 	.word	0x20027808

08019ce0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8019ce0:	b580      	push	{r7, lr}
 8019ce2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8019ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8019d10 <tcp_timer_needed+0x30>)
 8019ce6:	681b      	ldr	r3, [r3, #0]
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d10f      	bne.n	8019d0c <tcp_timer_needed+0x2c>
 8019cec:	4b09      	ldr	r3, [pc, #36]	@ (8019d14 <tcp_timer_needed+0x34>)
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	2b00      	cmp	r3, #0
 8019cf2:	d103      	bne.n	8019cfc <tcp_timer_needed+0x1c>
 8019cf4:	4b08      	ldr	r3, [pc, #32]	@ (8019d18 <tcp_timer_needed+0x38>)
 8019cf6:	681b      	ldr	r3, [r3, #0]
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d007      	beq.n	8019d0c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8019cfc:	4b04      	ldr	r3, [pc, #16]	@ (8019d10 <tcp_timer_needed+0x30>)
 8019cfe:	2201      	movs	r2, #1
 8019d00:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019d02:	2200      	movs	r2, #0
 8019d04:	4905      	ldr	r1, [pc, #20]	@ (8019d1c <tcp_timer_needed+0x3c>)
 8019d06:	20fa      	movs	r0, #250	@ 0xfa
 8019d08:	f000 f8cc 	bl	8019ea4 <sys_timeout>
  }
}
 8019d0c:	bf00      	nop
 8019d0e:	bd80      	pop	{r7, pc}
 8019d10:	20027808 	.word	0x20027808
 8019d14:	200277bc 	.word	0x200277bc
 8019d18:	200277c0 	.word	0x200277c0
 8019d1c:	08019c99 	.word	0x08019c99

08019d20 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8019d20:	b580      	push	{r7, lr}
 8019d22:	b086      	sub	sp, #24
 8019d24:	af00      	add	r7, sp, #0
 8019d26:	60f8      	str	r0, [r7, #12]
 8019d28:	60b9      	str	r1, [r7, #8]
 8019d2a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8019d2c:	200a      	movs	r0, #10
 8019d2e:	f7f9 fcbb 	bl	80136a8 <memp_malloc>
 8019d32:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8019d34:	693b      	ldr	r3, [r7, #16]
 8019d36:	2b00      	cmp	r3, #0
 8019d38:	d109      	bne.n	8019d4e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8019d3a:	693b      	ldr	r3, [r7, #16]
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	d151      	bne.n	8019de4 <sys_timeout_abs+0xc4>
 8019d40:	4b2a      	ldr	r3, [pc, #168]	@ (8019dec <sys_timeout_abs+0xcc>)
 8019d42:	22be      	movs	r2, #190	@ 0xbe
 8019d44:	492a      	ldr	r1, [pc, #168]	@ (8019df0 <sys_timeout_abs+0xd0>)
 8019d46:	482b      	ldr	r0, [pc, #172]	@ (8019df4 <sys_timeout_abs+0xd4>)
 8019d48:	f004 f9c4 	bl	801e0d4 <iprintf>
    return;
 8019d4c:	e04a      	b.n	8019de4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8019d4e:	693b      	ldr	r3, [r7, #16]
 8019d50:	2200      	movs	r2, #0
 8019d52:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8019d54:	693b      	ldr	r3, [r7, #16]
 8019d56:	68ba      	ldr	r2, [r7, #8]
 8019d58:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8019d5a:	693b      	ldr	r3, [r7, #16]
 8019d5c:	687a      	ldr	r2, [r7, #4]
 8019d5e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8019d60:	693b      	ldr	r3, [r7, #16]
 8019d62:	68fa      	ldr	r2, [r7, #12]
 8019d64:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8019d66:	4b24      	ldr	r3, [pc, #144]	@ (8019df8 <sys_timeout_abs+0xd8>)
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	d103      	bne.n	8019d76 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8019d6e:	4a22      	ldr	r2, [pc, #136]	@ (8019df8 <sys_timeout_abs+0xd8>)
 8019d70:	693b      	ldr	r3, [r7, #16]
 8019d72:	6013      	str	r3, [r2, #0]
    return;
 8019d74:	e037      	b.n	8019de6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8019d76:	693b      	ldr	r3, [r7, #16]
 8019d78:	685a      	ldr	r2, [r3, #4]
 8019d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8019df8 <sys_timeout_abs+0xd8>)
 8019d7c:	681b      	ldr	r3, [r3, #0]
 8019d7e:	685b      	ldr	r3, [r3, #4]
 8019d80:	1ad3      	subs	r3, r2, r3
 8019d82:	0fdb      	lsrs	r3, r3, #31
 8019d84:	f003 0301 	and.w	r3, r3, #1
 8019d88:	b2db      	uxtb	r3, r3
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	d007      	beq.n	8019d9e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8019d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8019df8 <sys_timeout_abs+0xd8>)
 8019d90:	681a      	ldr	r2, [r3, #0]
 8019d92:	693b      	ldr	r3, [r7, #16]
 8019d94:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8019d96:	4a18      	ldr	r2, [pc, #96]	@ (8019df8 <sys_timeout_abs+0xd8>)
 8019d98:	693b      	ldr	r3, [r7, #16]
 8019d9a:	6013      	str	r3, [r2, #0]
 8019d9c:	e023      	b.n	8019de6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8019d9e:	4b16      	ldr	r3, [pc, #88]	@ (8019df8 <sys_timeout_abs+0xd8>)
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	617b      	str	r3, [r7, #20]
 8019da4:	e01a      	b.n	8019ddc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8019da6:	697b      	ldr	r3, [r7, #20]
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d00b      	beq.n	8019dc6 <sys_timeout_abs+0xa6>
 8019dae:	693b      	ldr	r3, [r7, #16]
 8019db0:	685a      	ldr	r2, [r3, #4]
 8019db2:	697b      	ldr	r3, [r7, #20]
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	685b      	ldr	r3, [r3, #4]
 8019db8:	1ad3      	subs	r3, r2, r3
 8019dba:	0fdb      	lsrs	r3, r3, #31
 8019dbc:	f003 0301 	and.w	r3, r3, #1
 8019dc0:	b2db      	uxtb	r3, r3
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d007      	beq.n	8019dd6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8019dc6:	697b      	ldr	r3, [r7, #20]
 8019dc8:	681a      	ldr	r2, [r3, #0]
 8019dca:	693b      	ldr	r3, [r7, #16]
 8019dcc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8019dce:	697b      	ldr	r3, [r7, #20]
 8019dd0:	693a      	ldr	r2, [r7, #16]
 8019dd2:	601a      	str	r2, [r3, #0]
        break;
 8019dd4:	e007      	b.n	8019de6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8019dd6:	697b      	ldr	r3, [r7, #20]
 8019dd8:	681b      	ldr	r3, [r3, #0]
 8019dda:	617b      	str	r3, [r7, #20]
 8019ddc:	697b      	ldr	r3, [r7, #20]
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	d1e1      	bne.n	8019da6 <sys_timeout_abs+0x86>
 8019de2:	e000      	b.n	8019de6 <sys_timeout_abs+0xc6>
    return;
 8019de4:	bf00      	nop
      }
    }
  }
}
 8019de6:	3718      	adds	r7, #24
 8019de8:	46bd      	mov	sp, r7
 8019dea:	bd80      	pop	{r7, pc}
 8019dec:	08021200 	.word	0x08021200
 8019df0:	08021234 	.word	0x08021234
 8019df4:	08021274 	.word	0x08021274
 8019df8:	20027800 	.word	0x20027800

08019dfc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8019dfc:	b580      	push	{r7, lr}
 8019dfe:	b086      	sub	sp, #24
 8019e00:	af00      	add	r7, sp, #0
 8019e02:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8019e08:	697b      	ldr	r3, [r7, #20]
 8019e0a:	685b      	ldr	r3, [r3, #4]
 8019e0c:	4798      	blx	r3

  now = sys_now();
 8019e0e:	f7f4 facb 	bl	800e3a8 <sys_now>
 8019e12:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8019e14:	697b      	ldr	r3, [r7, #20]
 8019e16:	681a      	ldr	r2, [r3, #0]
 8019e18:	4b0f      	ldr	r3, [pc, #60]	@ (8019e58 <lwip_cyclic_timer+0x5c>)
 8019e1a:	681b      	ldr	r3, [r3, #0]
 8019e1c:	4413      	add	r3, r2
 8019e1e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8019e20:	68fa      	ldr	r2, [r7, #12]
 8019e22:	693b      	ldr	r3, [r7, #16]
 8019e24:	1ad3      	subs	r3, r2, r3
 8019e26:	0fdb      	lsrs	r3, r3, #31
 8019e28:	f003 0301 	and.w	r3, r3, #1
 8019e2c:	b2db      	uxtb	r3, r3
 8019e2e:	2b00      	cmp	r3, #0
 8019e30:	d009      	beq.n	8019e46 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8019e32:	697b      	ldr	r3, [r7, #20]
 8019e34:	681a      	ldr	r2, [r3, #0]
 8019e36:	693b      	ldr	r3, [r7, #16]
 8019e38:	4413      	add	r3, r2
 8019e3a:	687a      	ldr	r2, [r7, #4]
 8019e3c:	4907      	ldr	r1, [pc, #28]	@ (8019e5c <lwip_cyclic_timer+0x60>)
 8019e3e:	4618      	mov	r0, r3
 8019e40:	f7ff ff6e 	bl	8019d20 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8019e44:	e004      	b.n	8019e50 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8019e46:	687a      	ldr	r2, [r7, #4]
 8019e48:	4904      	ldr	r1, [pc, #16]	@ (8019e5c <lwip_cyclic_timer+0x60>)
 8019e4a:	68f8      	ldr	r0, [r7, #12]
 8019e4c:	f7ff ff68 	bl	8019d20 <sys_timeout_abs>
}
 8019e50:	bf00      	nop
 8019e52:	3718      	adds	r7, #24
 8019e54:	46bd      	mov	sp, r7
 8019e56:	bd80      	pop	{r7, pc}
 8019e58:	20027804 	.word	0x20027804
 8019e5c:	08019dfd 	.word	0x08019dfd

08019e60 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8019e60:	b580      	push	{r7, lr}
 8019e62:	b082      	sub	sp, #8
 8019e64:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019e66:	2301      	movs	r3, #1
 8019e68:	607b      	str	r3, [r7, #4]
 8019e6a:	e00e      	b.n	8019e8a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8019e6c:	4a0b      	ldr	r2, [pc, #44]	@ (8019e9c <sys_timeouts_init+0x3c>)
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	00db      	lsls	r3, r3, #3
 8019e78:	4a08      	ldr	r2, [pc, #32]	@ (8019e9c <sys_timeouts_init+0x3c>)
 8019e7a:	4413      	add	r3, r2
 8019e7c:	461a      	mov	r2, r3
 8019e7e:	4908      	ldr	r1, [pc, #32]	@ (8019ea0 <sys_timeouts_init+0x40>)
 8019e80:	f000 f810 	bl	8019ea4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	3301      	adds	r3, #1
 8019e88:	607b      	str	r3, [r7, #4]
 8019e8a:	687b      	ldr	r3, [r7, #4]
 8019e8c:	2b02      	cmp	r3, #2
 8019e8e:	d9ed      	bls.n	8019e6c <sys_timeouts_init+0xc>
  }
}
 8019e90:	bf00      	nop
 8019e92:	bf00      	nop
 8019e94:	3708      	adds	r7, #8
 8019e96:	46bd      	mov	sp, r7
 8019e98:	bd80      	pop	{r7, pc}
 8019e9a:	bf00      	nop
 8019e9c:	08022318 	.word	0x08022318
 8019ea0:	08019dfd 	.word	0x08019dfd

08019ea4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8019ea4:	b580      	push	{r7, lr}
 8019ea6:	b086      	sub	sp, #24
 8019ea8:	af00      	add	r7, sp, #0
 8019eaa:	60f8      	str	r0, [r7, #12]
 8019eac:	60b9      	str	r1, [r7, #8]
 8019eae:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8019eb0:	68fb      	ldr	r3, [r7, #12]
 8019eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019eb6:	d306      	bcc.n	8019ec6 <sys_timeout+0x22>
 8019eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8019ee4 <sys_timeout+0x40>)
 8019eba:	f240 1229 	movw	r2, #297	@ 0x129
 8019ebe:	490a      	ldr	r1, [pc, #40]	@ (8019ee8 <sys_timeout+0x44>)
 8019ec0:	480a      	ldr	r0, [pc, #40]	@ (8019eec <sys_timeout+0x48>)
 8019ec2:	f004 f907 	bl	801e0d4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8019ec6:	f7f4 fa6f 	bl	800e3a8 <sys_now>
 8019eca:	4602      	mov	r2, r0
 8019ecc:	68fb      	ldr	r3, [r7, #12]
 8019ece:	4413      	add	r3, r2
 8019ed0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8019ed2:	687a      	ldr	r2, [r7, #4]
 8019ed4:	68b9      	ldr	r1, [r7, #8]
 8019ed6:	6978      	ldr	r0, [r7, #20]
 8019ed8:	f7ff ff22 	bl	8019d20 <sys_timeout_abs>
#endif
}
 8019edc:	bf00      	nop
 8019ede:	3718      	adds	r7, #24
 8019ee0:	46bd      	mov	sp, r7
 8019ee2:	bd80      	pop	{r7, pc}
 8019ee4:	08021200 	.word	0x08021200
 8019ee8:	0802129c 	.word	0x0802129c
 8019eec:	08021274 	.word	0x08021274

08019ef0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8019ef0:	b580      	push	{r7, lr}
 8019ef2:	b084      	sub	sp, #16
 8019ef4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8019ef6:	f7f4 fa57 	bl	800e3a8 <sys_now>
 8019efa:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8019efc:	4b17      	ldr	r3, [pc, #92]	@ (8019f5c <sys_check_timeouts+0x6c>)
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8019f02:	68bb      	ldr	r3, [r7, #8]
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d022      	beq.n	8019f4e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8019f08:	68bb      	ldr	r3, [r7, #8]
 8019f0a:	685b      	ldr	r3, [r3, #4]
 8019f0c:	68fa      	ldr	r2, [r7, #12]
 8019f0e:	1ad3      	subs	r3, r2, r3
 8019f10:	0fdb      	lsrs	r3, r3, #31
 8019f12:	f003 0301 	and.w	r3, r3, #1
 8019f16:	b2db      	uxtb	r3, r3
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d11a      	bne.n	8019f52 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8019f1c:	68bb      	ldr	r3, [r7, #8]
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	4a0e      	ldr	r2, [pc, #56]	@ (8019f5c <sys_check_timeouts+0x6c>)
 8019f22:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8019f24:	68bb      	ldr	r3, [r7, #8]
 8019f26:	689b      	ldr	r3, [r3, #8]
 8019f28:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8019f2a:	68bb      	ldr	r3, [r7, #8]
 8019f2c:	68db      	ldr	r3, [r3, #12]
 8019f2e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8019f30:	68bb      	ldr	r3, [r7, #8]
 8019f32:	685b      	ldr	r3, [r3, #4]
 8019f34:	4a0a      	ldr	r2, [pc, #40]	@ (8019f60 <sys_check_timeouts+0x70>)
 8019f36:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019f38:	68b9      	ldr	r1, [r7, #8]
 8019f3a:	200a      	movs	r0, #10
 8019f3c:	f7f9 fc2a 	bl	8013794 <memp_free>
    if (handler != NULL) {
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d0da      	beq.n	8019efc <sys_check_timeouts+0xc>
      handler(arg);
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	6838      	ldr	r0, [r7, #0]
 8019f4a:	4798      	blx	r3
  do {
 8019f4c:	e7d6      	b.n	8019efc <sys_check_timeouts+0xc>
      return;
 8019f4e:	bf00      	nop
 8019f50:	e000      	b.n	8019f54 <sys_check_timeouts+0x64>
      return;
 8019f52:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8019f54:	3710      	adds	r7, #16
 8019f56:	46bd      	mov	sp, r7
 8019f58:	bd80      	pop	{r7, pc}
 8019f5a:	bf00      	nop
 8019f5c:	20027800 	.word	0x20027800
 8019f60:	20027804 	.word	0x20027804

08019f64 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8019f64:	b580      	push	{r7, lr}
 8019f66:	b082      	sub	sp, #8
 8019f68:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8019f6a:	4b16      	ldr	r3, [pc, #88]	@ (8019fc4 <sys_timeouts_sleeptime+0x60>)
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d102      	bne.n	8019f78 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8019f72:	f04f 33ff 	mov.w	r3, #4294967295
 8019f76:	e020      	b.n	8019fba <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8019f78:	f7f4 fa16 	bl	800e3a8 <sys_now>
 8019f7c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8019f7e:	4b11      	ldr	r3, [pc, #68]	@ (8019fc4 <sys_timeouts_sleeptime+0x60>)
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	685a      	ldr	r2, [r3, #4]
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	1ad3      	subs	r3, r2, r3
 8019f88:	0fdb      	lsrs	r3, r3, #31
 8019f8a:	f003 0301 	and.w	r3, r3, #1
 8019f8e:	b2db      	uxtb	r3, r3
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d001      	beq.n	8019f98 <sys_timeouts_sleeptime+0x34>
    return 0;
 8019f94:	2300      	movs	r3, #0
 8019f96:	e010      	b.n	8019fba <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8019f98:	4b0a      	ldr	r3, [pc, #40]	@ (8019fc4 <sys_timeouts_sleeptime+0x60>)
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	685a      	ldr	r2, [r3, #4]
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	1ad3      	subs	r3, r2, r3
 8019fa2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8019fa4:	683b      	ldr	r3, [r7, #0]
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	da06      	bge.n	8019fb8 <sys_timeouts_sleeptime+0x54>
 8019faa:	4b07      	ldr	r3, [pc, #28]	@ (8019fc8 <sys_timeouts_sleeptime+0x64>)
 8019fac:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8019fb0:	4906      	ldr	r1, [pc, #24]	@ (8019fcc <sys_timeouts_sleeptime+0x68>)
 8019fb2:	4807      	ldr	r0, [pc, #28]	@ (8019fd0 <sys_timeouts_sleeptime+0x6c>)
 8019fb4:	f004 f88e 	bl	801e0d4 <iprintf>
    return ret;
 8019fb8:	683b      	ldr	r3, [r7, #0]
  }
}
 8019fba:	4618      	mov	r0, r3
 8019fbc:	3708      	adds	r7, #8
 8019fbe:	46bd      	mov	sp, r7
 8019fc0:	bd80      	pop	{r7, pc}
 8019fc2:	bf00      	nop
 8019fc4:	20027800 	.word	0x20027800
 8019fc8:	08021200 	.word	0x08021200
 8019fcc:	080212d4 	.word	0x080212d4
 8019fd0:	08021274 	.word	0x08021274

08019fd4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8019fd4:	b580      	push	{r7, lr}
 8019fd6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019fd8:	f003 ff7c 	bl	801ded4 <rand>
 8019fdc:	4603      	mov	r3, r0
 8019fde:	b29b      	uxth	r3, r3
 8019fe0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019fe4:	b29b      	uxth	r3, r3
 8019fe6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8019fea:	b29a      	uxth	r2, r3
 8019fec:	4b01      	ldr	r3, [pc, #4]	@ (8019ff4 <udp_init+0x20>)
 8019fee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019ff0:	bf00      	nop
 8019ff2:	bd80      	pop	{r7, pc}
 8019ff4:	2000002c 	.word	0x2000002c

08019ff8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8019ff8:	b480      	push	{r7}
 8019ffa:	b083      	sub	sp, #12
 8019ffc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8019ffe:	2300      	movs	r3, #0
 801a000:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801a002:	4b17      	ldr	r3, [pc, #92]	@ (801a060 <udp_new_port+0x68>)
 801a004:	881b      	ldrh	r3, [r3, #0]
 801a006:	1c5a      	adds	r2, r3, #1
 801a008:	b291      	uxth	r1, r2
 801a00a:	4a15      	ldr	r2, [pc, #84]	@ (801a060 <udp_new_port+0x68>)
 801a00c:	8011      	strh	r1, [r2, #0]
 801a00e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a012:	4293      	cmp	r3, r2
 801a014:	d103      	bne.n	801a01e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801a016:	4b12      	ldr	r3, [pc, #72]	@ (801a060 <udp_new_port+0x68>)
 801a018:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801a01c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a01e:	4b11      	ldr	r3, [pc, #68]	@ (801a064 <udp_new_port+0x6c>)
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	603b      	str	r3, [r7, #0]
 801a024:	e011      	b.n	801a04a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801a026:	683b      	ldr	r3, [r7, #0]
 801a028:	8a5a      	ldrh	r2, [r3, #18]
 801a02a:	4b0d      	ldr	r3, [pc, #52]	@ (801a060 <udp_new_port+0x68>)
 801a02c:	881b      	ldrh	r3, [r3, #0]
 801a02e:	429a      	cmp	r2, r3
 801a030:	d108      	bne.n	801a044 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801a032:	88fb      	ldrh	r3, [r7, #6]
 801a034:	3301      	adds	r3, #1
 801a036:	80fb      	strh	r3, [r7, #6]
 801a038:	88fb      	ldrh	r3, [r7, #6]
 801a03a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801a03e:	d3e0      	bcc.n	801a002 <udp_new_port+0xa>
        return 0;
 801a040:	2300      	movs	r3, #0
 801a042:	e007      	b.n	801a054 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a044:	683b      	ldr	r3, [r7, #0]
 801a046:	68db      	ldr	r3, [r3, #12]
 801a048:	603b      	str	r3, [r7, #0]
 801a04a:	683b      	ldr	r3, [r7, #0]
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	d1ea      	bne.n	801a026 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801a050:	4b03      	ldr	r3, [pc, #12]	@ (801a060 <udp_new_port+0x68>)
 801a052:	881b      	ldrh	r3, [r3, #0]
}
 801a054:	4618      	mov	r0, r3
 801a056:	370c      	adds	r7, #12
 801a058:	46bd      	mov	sp, r7
 801a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a05e:	4770      	bx	lr
 801a060:	2000002c 	.word	0x2000002c
 801a064:	2002780c 	.word	0x2002780c

0801a068 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801a068:	b580      	push	{r7, lr}
 801a06a:	b084      	sub	sp, #16
 801a06c:	af00      	add	r7, sp, #0
 801a06e:	60f8      	str	r0, [r7, #12]
 801a070:	60b9      	str	r1, [r7, #8]
 801a072:	4613      	mov	r3, r2
 801a074:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	2b00      	cmp	r3, #0
 801a07a:	d105      	bne.n	801a088 <udp_input_local_match+0x20>
 801a07c:	4b27      	ldr	r3, [pc, #156]	@ (801a11c <udp_input_local_match+0xb4>)
 801a07e:	2287      	movs	r2, #135	@ 0x87
 801a080:	4927      	ldr	r1, [pc, #156]	@ (801a120 <udp_input_local_match+0xb8>)
 801a082:	4828      	ldr	r0, [pc, #160]	@ (801a124 <udp_input_local_match+0xbc>)
 801a084:	f004 f826 	bl	801e0d4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801a088:	68bb      	ldr	r3, [r7, #8]
 801a08a:	2b00      	cmp	r3, #0
 801a08c:	d105      	bne.n	801a09a <udp_input_local_match+0x32>
 801a08e:	4b23      	ldr	r3, [pc, #140]	@ (801a11c <udp_input_local_match+0xb4>)
 801a090:	2288      	movs	r2, #136	@ 0x88
 801a092:	4925      	ldr	r1, [pc, #148]	@ (801a128 <udp_input_local_match+0xc0>)
 801a094:	4823      	ldr	r0, [pc, #140]	@ (801a124 <udp_input_local_match+0xbc>)
 801a096:	f004 f81d 	bl	801e0d4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a09a:	68fb      	ldr	r3, [r7, #12]
 801a09c:	7a1b      	ldrb	r3, [r3, #8]
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d00b      	beq.n	801a0ba <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a0a2:	68fb      	ldr	r3, [r7, #12]
 801a0a4:	7a1a      	ldrb	r2, [r3, #8]
 801a0a6:	4b21      	ldr	r3, [pc, #132]	@ (801a12c <udp_input_local_match+0xc4>)
 801a0a8:	685b      	ldr	r3, [r3, #4]
 801a0aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a0ae:	3301      	adds	r3, #1
 801a0b0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a0b2:	429a      	cmp	r2, r3
 801a0b4:	d001      	beq.n	801a0ba <udp_input_local_match+0x52>
    return 0;
 801a0b6:	2300      	movs	r3, #0
 801a0b8:	e02b      	b.n	801a112 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801a0ba:	79fb      	ldrb	r3, [r7, #7]
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d018      	beq.n	801a0f2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a0c0:	68fb      	ldr	r3, [r7, #12]
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d013      	beq.n	801a0ee <udp_input_local_match+0x86>
 801a0c6:	68fb      	ldr	r3, [r7, #12]
 801a0c8:	681b      	ldr	r3, [r3, #0]
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d00f      	beq.n	801a0ee <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a0ce:	4b17      	ldr	r3, [pc, #92]	@ (801a12c <udp_input_local_match+0xc4>)
 801a0d0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0d6:	d00a      	beq.n	801a0ee <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801a0d8:	68fb      	ldr	r3, [r7, #12]
 801a0da:	681a      	ldr	r2, [r3, #0]
 801a0dc:	4b13      	ldr	r3, [pc, #76]	@ (801a12c <udp_input_local_match+0xc4>)
 801a0de:	695b      	ldr	r3, [r3, #20]
 801a0e0:	405a      	eors	r2, r3
 801a0e2:	68bb      	ldr	r3, [r7, #8]
 801a0e4:	3308      	adds	r3, #8
 801a0e6:	681b      	ldr	r3, [r3, #0]
 801a0e8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d110      	bne.n	801a110 <udp_input_local_match+0xa8>
          return 1;
 801a0ee:	2301      	movs	r3, #1
 801a0f0:	e00f      	b.n	801a112 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a0f2:	68fb      	ldr	r3, [r7, #12]
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	d009      	beq.n	801a10c <udp_input_local_match+0xa4>
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	681b      	ldr	r3, [r3, #0]
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	d005      	beq.n	801a10c <udp_input_local_match+0xa4>
 801a100:	68fb      	ldr	r3, [r7, #12]
 801a102:	681a      	ldr	r2, [r3, #0]
 801a104:	4b09      	ldr	r3, [pc, #36]	@ (801a12c <udp_input_local_match+0xc4>)
 801a106:	695b      	ldr	r3, [r3, #20]
 801a108:	429a      	cmp	r2, r3
 801a10a:	d101      	bne.n	801a110 <udp_input_local_match+0xa8>
        return 1;
 801a10c:	2301      	movs	r3, #1
 801a10e:	e000      	b.n	801a112 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801a110:	2300      	movs	r3, #0
}
 801a112:	4618      	mov	r0, r3
 801a114:	3710      	adds	r7, #16
 801a116:	46bd      	mov	sp, r7
 801a118:	bd80      	pop	{r7, pc}
 801a11a:	bf00      	nop
 801a11c:	080212e8 	.word	0x080212e8
 801a120:	08021318 	.word	0x08021318
 801a124:	0802133c 	.word	0x0802133c
 801a128:	08021364 	.word	0x08021364
 801a12c:	200246b0 	.word	0x200246b0

0801a130 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801a130:	b590      	push	{r4, r7, lr}
 801a132:	b08d      	sub	sp, #52	@ 0x34
 801a134:	af02      	add	r7, sp, #8
 801a136:	6078      	str	r0, [r7, #4]
 801a138:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801a13a:	2300      	movs	r3, #0
 801a13c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	2b00      	cmp	r3, #0
 801a142:	d105      	bne.n	801a150 <udp_input+0x20>
 801a144:	4b7c      	ldr	r3, [pc, #496]	@ (801a338 <udp_input+0x208>)
 801a146:	22cf      	movs	r2, #207	@ 0xcf
 801a148:	497c      	ldr	r1, [pc, #496]	@ (801a33c <udp_input+0x20c>)
 801a14a:	487d      	ldr	r0, [pc, #500]	@ (801a340 <udp_input+0x210>)
 801a14c:	f003 ffc2 	bl	801e0d4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801a150:	683b      	ldr	r3, [r7, #0]
 801a152:	2b00      	cmp	r3, #0
 801a154:	d105      	bne.n	801a162 <udp_input+0x32>
 801a156:	4b78      	ldr	r3, [pc, #480]	@ (801a338 <udp_input+0x208>)
 801a158:	22d0      	movs	r2, #208	@ 0xd0
 801a15a:	497a      	ldr	r1, [pc, #488]	@ (801a344 <udp_input+0x214>)
 801a15c:	4878      	ldr	r0, [pc, #480]	@ (801a340 <udp_input+0x210>)
 801a15e:	f003 ffb9 	bl	801e0d4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	895b      	ldrh	r3, [r3, #10]
 801a166:	2b07      	cmp	r3, #7
 801a168:	d803      	bhi.n	801a172 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801a16a:	6878      	ldr	r0, [r7, #4]
 801a16c:	f7fa f9b6 	bl	80144dc <pbuf_free>
    goto end;
 801a170:	e0de      	b.n	801a330 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	685b      	ldr	r3, [r3, #4]
 801a176:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801a178:	4b73      	ldr	r3, [pc, #460]	@ (801a348 <udp_input+0x218>)
 801a17a:	695b      	ldr	r3, [r3, #20]
 801a17c:	4a72      	ldr	r2, [pc, #456]	@ (801a348 <udp_input+0x218>)
 801a17e:	6812      	ldr	r2, [r2, #0]
 801a180:	4611      	mov	r1, r2
 801a182:	4618      	mov	r0, r3
 801a184:	f001 fefe 	bl	801bf84 <ip4_addr_isbroadcast_u32>
 801a188:	4603      	mov	r3, r0
 801a18a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801a18c:	697b      	ldr	r3, [r7, #20]
 801a18e:	881b      	ldrh	r3, [r3, #0]
 801a190:	b29b      	uxth	r3, r3
 801a192:	4618      	mov	r0, r3
 801a194:	f7f8 fdb4 	bl	8012d00 <lwip_htons>
 801a198:	4603      	mov	r3, r0
 801a19a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801a19c:	697b      	ldr	r3, [r7, #20]
 801a19e:	885b      	ldrh	r3, [r3, #2]
 801a1a0:	b29b      	uxth	r3, r3
 801a1a2:	4618      	mov	r0, r3
 801a1a4:	f7f8 fdac 	bl	8012d00 <lwip_htons>
 801a1a8:	4603      	mov	r3, r0
 801a1aa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801a1ac:	2300      	movs	r3, #0
 801a1ae:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801a1b0:	2300      	movs	r3, #0
 801a1b2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801a1b4:	2300      	movs	r3, #0
 801a1b6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a1b8:	4b64      	ldr	r3, [pc, #400]	@ (801a34c <udp_input+0x21c>)
 801a1ba:	681b      	ldr	r3, [r3, #0]
 801a1bc:	627b      	str	r3, [r7, #36]	@ 0x24
 801a1be:	e054      	b.n	801a26a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801a1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1c2:	8a5b      	ldrh	r3, [r3, #18]
 801a1c4:	89fa      	ldrh	r2, [r7, #14]
 801a1c6:	429a      	cmp	r2, r3
 801a1c8:	d14a      	bne.n	801a260 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801a1ca:	7cfb      	ldrb	r3, [r7, #19]
 801a1cc:	461a      	mov	r2, r3
 801a1ce:	6839      	ldr	r1, [r7, #0]
 801a1d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a1d2:	f7ff ff49 	bl	801a068 <udp_input_local_match>
 801a1d6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	d041      	beq.n	801a260 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801a1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1de:	7c1b      	ldrb	r3, [r3, #16]
 801a1e0:	f003 0304 	and.w	r3, r3, #4
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	d11d      	bne.n	801a224 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801a1e8:	69fb      	ldr	r3, [r7, #28]
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d102      	bne.n	801a1f4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801a1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1f0:	61fb      	str	r3, [r7, #28]
 801a1f2:	e017      	b.n	801a224 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801a1f4:	7cfb      	ldrb	r3, [r7, #19]
 801a1f6:	2b00      	cmp	r3, #0
 801a1f8:	d014      	beq.n	801a224 <udp_input+0xf4>
 801a1fa:	4b53      	ldr	r3, [pc, #332]	@ (801a348 <udp_input+0x218>)
 801a1fc:	695b      	ldr	r3, [r3, #20]
 801a1fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a202:	d10f      	bne.n	801a224 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801a204:	69fb      	ldr	r3, [r7, #28]
 801a206:	681a      	ldr	r2, [r3, #0]
 801a208:	683b      	ldr	r3, [r7, #0]
 801a20a:	3304      	adds	r3, #4
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	429a      	cmp	r2, r3
 801a210:	d008      	beq.n	801a224 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801a212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a214:	681a      	ldr	r2, [r3, #0]
 801a216:	683b      	ldr	r3, [r7, #0]
 801a218:	3304      	adds	r3, #4
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	429a      	cmp	r2, r3
 801a21e:	d101      	bne.n	801a224 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801a220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a222:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801a224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a226:	8a9b      	ldrh	r3, [r3, #20]
 801a228:	8a3a      	ldrh	r2, [r7, #16]
 801a22a:	429a      	cmp	r2, r3
 801a22c:	d118      	bne.n	801a260 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a230:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801a232:	2b00      	cmp	r3, #0
 801a234:	d005      	beq.n	801a242 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801a236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a238:	685a      	ldr	r2, [r3, #4]
 801a23a:	4b43      	ldr	r3, [pc, #268]	@ (801a348 <udp_input+0x218>)
 801a23c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a23e:	429a      	cmp	r2, r3
 801a240:	d10e      	bne.n	801a260 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801a242:	6a3b      	ldr	r3, [r7, #32]
 801a244:	2b00      	cmp	r3, #0
 801a246:	d014      	beq.n	801a272 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801a248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a24a:	68da      	ldr	r2, [r3, #12]
 801a24c:	6a3b      	ldr	r3, [r7, #32]
 801a24e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801a250:	4b3e      	ldr	r3, [pc, #248]	@ (801a34c <udp_input+0x21c>)
 801a252:	681a      	ldr	r2, [r3, #0]
 801a254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a256:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801a258:	4a3c      	ldr	r2, [pc, #240]	@ (801a34c <udp_input+0x21c>)
 801a25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a25c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801a25e:	e008      	b.n	801a272 <udp_input+0x142>
      }
    }

    prev = pcb;
 801a260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a262:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a266:	68db      	ldr	r3, [r3, #12]
 801a268:	627b      	str	r3, [r7, #36]	@ 0x24
 801a26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	d1a7      	bne.n	801a1c0 <udp_input+0x90>
 801a270:	e000      	b.n	801a274 <udp_input+0x144>
        break;
 801a272:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801a274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a276:	2b00      	cmp	r3, #0
 801a278:	d101      	bne.n	801a27e <udp_input+0x14e>
    pcb = uncon_pcb;
 801a27a:	69fb      	ldr	r3, [r7, #28]
 801a27c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801a27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a280:	2b00      	cmp	r3, #0
 801a282:	d002      	beq.n	801a28a <udp_input+0x15a>
    for_us = 1;
 801a284:	2301      	movs	r3, #1
 801a286:	76fb      	strb	r3, [r7, #27]
 801a288:	e00a      	b.n	801a2a0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801a28a:	683b      	ldr	r3, [r7, #0]
 801a28c:	3304      	adds	r3, #4
 801a28e:	681a      	ldr	r2, [r3, #0]
 801a290:	4b2d      	ldr	r3, [pc, #180]	@ (801a348 <udp_input+0x218>)
 801a292:	695b      	ldr	r3, [r3, #20]
 801a294:	429a      	cmp	r2, r3
 801a296:	bf0c      	ite	eq
 801a298:	2301      	moveq	r3, #1
 801a29a:	2300      	movne	r3, #0
 801a29c:	b2db      	uxtb	r3, r3
 801a29e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801a2a0:	7efb      	ldrb	r3, [r7, #27]
 801a2a2:	2b00      	cmp	r3, #0
 801a2a4:	d041      	beq.n	801a32a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801a2a6:	2108      	movs	r1, #8
 801a2a8:	6878      	ldr	r0, [r7, #4]
 801a2aa:	f7fa f891 	bl	80143d0 <pbuf_remove_header>
 801a2ae:	4603      	mov	r3, r0
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d00a      	beq.n	801a2ca <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801a2b4:	4b20      	ldr	r3, [pc, #128]	@ (801a338 <udp_input+0x208>)
 801a2b6:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801a2ba:	4925      	ldr	r1, [pc, #148]	@ (801a350 <udp_input+0x220>)
 801a2bc:	4820      	ldr	r0, [pc, #128]	@ (801a340 <udp_input+0x210>)
 801a2be:	f003 ff09 	bl	801e0d4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801a2c2:	6878      	ldr	r0, [r7, #4]
 801a2c4:	f7fa f90a 	bl	80144dc <pbuf_free>
      goto end;
 801a2c8:	e032      	b.n	801a330 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801a2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d012      	beq.n	801a2f6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801a2d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2d2:	699b      	ldr	r3, [r3, #24]
 801a2d4:	2b00      	cmp	r3, #0
 801a2d6:	d00a      	beq.n	801a2ee <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801a2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2da:	699c      	ldr	r4, [r3, #24]
 801a2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2de:	69d8      	ldr	r0, [r3, #28]
 801a2e0:	8a3b      	ldrh	r3, [r7, #16]
 801a2e2:	9300      	str	r3, [sp, #0]
 801a2e4:	4b1b      	ldr	r3, [pc, #108]	@ (801a354 <udp_input+0x224>)
 801a2e6:	687a      	ldr	r2, [r7, #4]
 801a2e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a2ea:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801a2ec:	e021      	b.n	801a332 <udp_input+0x202>
        pbuf_free(p);
 801a2ee:	6878      	ldr	r0, [r7, #4]
 801a2f0:	f7fa f8f4 	bl	80144dc <pbuf_free>
        goto end;
 801a2f4:	e01c      	b.n	801a330 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801a2f6:	7cfb      	ldrb	r3, [r7, #19]
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d112      	bne.n	801a322 <udp_input+0x1f2>
 801a2fc:	4b12      	ldr	r3, [pc, #72]	@ (801a348 <udp_input+0x218>)
 801a2fe:	695b      	ldr	r3, [r3, #20]
 801a300:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a304:	2be0      	cmp	r3, #224	@ 0xe0
 801a306:	d00c      	beq.n	801a322 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801a308:	4b0f      	ldr	r3, [pc, #60]	@ (801a348 <udp_input+0x218>)
 801a30a:	899b      	ldrh	r3, [r3, #12]
 801a30c:	3308      	adds	r3, #8
 801a30e:	b29b      	uxth	r3, r3
 801a310:	b21b      	sxth	r3, r3
 801a312:	4619      	mov	r1, r3
 801a314:	6878      	ldr	r0, [r7, #4]
 801a316:	f7fa f8ce 	bl	80144b6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801a31a:	2103      	movs	r1, #3
 801a31c:	6878      	ldr	r0, [r7, #4]
 801a31e:	f001 fb11 	bl	801b944 <icmp_dest_unreach>
      pbuf_free(p);
 801a322:	6878      	ldr	r0, [r7, #4]
 801a324:	f7fa f8da 	bl	80144dc <pbuf_free>
  return;
 801a328:	e003      	b.n	801a332 <udp_input+0x202>
    pbuf_free(p);
 801a32a:	6878      	ldr	r0, [r7, #4]
 801a32c:	f7fa f8d6 	bl	80144dc <pbuf_free>
  return;
 801a330:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801a332:	372c      	adds	r7, #44	@ 0x2c
 801a334:	46bd      	mov	sp, r7
 801a336:	bd90      	pop	{r4, r7, pc}
 801a338:	080212e8 	.word	0x080212e8
 801a33c:	0802138c 	.word	0x0802138c
 801a340:	0802133c 	.word	0x0802133c
 801a344:	080213a4 	.word	0x080213a4
 801a348:	200246b0 	.word	0x200246b0
 801a34c:	2002780c 	.word	0x2002780c
 801a350:	080213c0 	.word	0x080213c0
 801a354:	200246c0 	.word	0x200246c0

0801a358 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801a358:	b580      	push	{r7, lr}
 801a35a:	b088      	sub	sp, #32
 801a35c:	af02      	add	r7, sp, #8
 801a35e:	60f8      	str	r0, [r7, #12]
 801a360:	60b9      	str	r1, [r7, #8]
 801a362:	607a      	str	r2, [r7, #4]
 801a364:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801a366:	68fb      	ldr	r3, [r7, #12]
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d109      	bne.n	801a380 <udp_sendto+0x28>
 801a36c:	4b23      	ldr	r3, [pc, #140]	@ (801a3fc <udp_sendto+0xa4>)
 801a36e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801a372:	4923      	ldr	r1, [pc, #140]	@ (801a400 <udp_sendto+0xa8>)
 801a374:	4823      	ldr	r0, [pc, #140]	@ (801a404 <udp_sendto+0xac>)
 801a376:	f003 fead 	bl	801e0d4 <iprintf>
 801a37a:	f06f 030f 	mvn.w	r3, #15
 801a37e:	e038      	b.n	801a3f2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801a380:	68bb      	ldr	r3, [r7, #8]
 801a382:	2b00      	cmp	r3, #0
 801a384:	d109      	bne.n	801a39a <udp_sendto+0x42>
 801a386:	4b1d      	ldr	r3, [pc, #116]	@ (801a3fc <udp_sendto+0xa4>)
 801a388:	f240 2219 	movw	r2, #537	@ 0x219
 801a38c:	491e      	ldr	r1, [pc, #120]	@ (801a408 <udp_sendto+0xb0>)
 801a38e:	481d      	ldr	r0, [pc, #116]	@ (801a404 <udp_sendto+0xac>)
 801a390:	f003 fea0 	bl	801e0d4 <iprintf>
 801a394:	f06f 030f 	mvn.w	r3, #15
 801a398:	e02b      	b.n	801a3f2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	d109      	bne.n	801a3b4 <udp_sendto+0x5c>
 801a3a0:	4b16      	ldr	r3, [pc, #88]	@ (801a3fc <udp_sendto+0xa4>)
 801a3a2:	f240 221a 	movw	r2, #538	@ 0x21a
 801a3a6:	4919      	ldr	r1, [pc, #100]	@ (801a40c <udp_sendto+0xb4>)
 801a3a8:	4816      	ldr	r0, [pc, #88]	@ (801a404 <udp_sendto+0xac>)
 801a3aa:	f003 fe93 	bl	801e0d4 <iprintf>
 801a3ae:	f06f 030f 	mvn.w	r3, #15
 801a3b2:	e01e      	b.n	801a3f2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801a3b4:	68fb      	ldr	r3, [r7, #12]
 801a3b6:	7a1b      	ldrb	r3, [r3, #8]
 801a3b8:	2b00      	cmp	r3, #0
 801a3ba:	d006      	beq.n	801a3ca <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801a3bc:	68fb      	ldr	r3, [r7, #12]
 801a3be:	7a1b      	ldrb	r3, [r3, #8]
 801a3c0:	4618      	mov	r0, r3
 801a3c2:	f7f9 fcfd 	bl	8013dc0 <netif_get_by_index>
 801a3c6:	6178      	str	r0, [r7, #20]
 801a3c8:	e003      	b.n	801a3d2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801a3ca:	6878      	ldr	r0, [r7, #4]
 801a3cc:	f001 fb44 	bl	801ba58 <ip4_route>
 801a3d0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801a3d2:	697b      	ldr	r3, [r7, #20]
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	d102      	bne.n	801a3de <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801a3d8:	f06f 0303 	mvn.w	r3, #3
 801a3dc:	e009      	b.n	801a3f2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801a3de:	887a      	ldrh	r2, [r7, #2]
 801a3e0:	697b      	ldr	r3, [r7, #20]
 801a3e2:	9300      	str	r3, [sp, #0]
 801a3e4:	4613      	mov	r3, r2
 801a3e6:	687a      	ldr	r2, [r7, #4]
 801a3e8:	68b9      	ldr	r1, [r7, #8]
 801a3ea:	68f8      	ldr	r0, [r7, #12]
 801a3ec:	f000 f810 	bl	801a410 <udp_sendto_if>
 801a3f0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801a3f2:	4618      	mov	r0, r3
 801a3f4:	3718      	adds	r7, #24
 801a3f6:	46bd      	mov	sp, r7
 801a3f8:	bd80      	pop	{r7, pc}
 801a3fa:	bf00      	nop
 801a3fc:	080212e8 	.word	0x080212e8
 801a400:	0802140c 	.word	0x0802140c
 801a404:	0802133c 	.word	0x0802133c
 801a408:	08021424 	.word	0x08021424
 801a40c:	08021440 	.word	0x08021440

0801a410 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801a410:	b580      	push	{r7, lr}
 801a412:	b088      	sub	sp, #32
 801a414:	af02      	add	r7, sp, #8
 801a416:	60f8      	str	r0, [r7, #12]
 801a418:	60b9      	str	r1, [r7, #8]
 801a41a:	607a      	str	r2, [r7, #4]
 801a41c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801a41e:	68fb      	ldr	r3, [r7, #12]
 801a420:	2b00      	cmp	r3, #0
 801a422:	d109      	bne.n	801a438 <udp_sendto_if+0x28>
 801a424:	4b2e      	ldr	r3, [pc, #184]	@ (801a4e0 <udp_sendto_if+0xd0>)
 801a426:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a42a:	492e      	ldr	r1, [pc, #184]	@ (801a4e4 <udp_sendto_if+0xd4>)
 801a42c:	482e      	ldr	r0, [pc, #184]	@ (801a4e8 <udp_sendto_if+0xd8>)
 801a42e:	f003 fe51 	bl	801e0d4 <iprintf>
 801a432:	f06f 030f 	mvn.w	r3, #15
 801a436:	e04f      	b.n	801a4d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801a438:	68bb      	ldr	r3, [r7, #8]
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d109      	bne.n	801a452 <udp_sendto_if+0x42>
 801a43e:	4b28      	ldr	r3, [pc, #160]	@ (801a4e0 <udp_sendto_if+0xd0>)
 801a440:	f240 2281 	movw	r2, #641	@ 0x281
 801a444:	4929      	ldr	r1, [pc, #164]	@ (801a4ec <udp_sendto_if+0xdc>)
 801a446:	4828      	ldr	r0, [pc, #160]	@ (801a4e8 <udp_sendto_if+0xd8>)
 801a448:	f003 fe44 	bl	801e0d4 <iprintf>
 801a44c:	f06f 030f 	mvn.w	r3, #15
 801a450:	e042      	b.n	801a4d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	2b00      	cmp	r3, #0
 801a456:	d109      	bne.n	801a46c <udp_sendto_if+0x5c>
 801a458:	4b21      	ldr	r3, [pc, #132]	@ (801a4e0 <udp_sendto_if+0xd0>)
 801a45a:	f240 2282 	movw	r2, #642	@ 0x282
 801a45e:	4924      	ldr	r1, [pc, #144]	@ (801a4f0 <udp_sendto_if+0xe0>)
 801a460:	4821      	ldr	r0, [pc, #132]	@ (801a4e8 <udp_sendto_if+0xd8>)
 801a462:	f003 fe37 	bl	801e0d4 <iprintf>
 801a466:	f06f 030f 	mvn.w	r3, #15
 801a46a:	e035      	b.n	801a4d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801a46c:	6a3b      	ldr	r3, [r7, #32]
 801a46e:	2b00      	cmp	r3, #0
 801a470:	d109      	bne.n	801a486 <udp_sendto_if+0x76>
 801a472:	4b1b      	ldr	r3, [pc, #108]	@ (801a4e0 <udp_sendto_if+0xd0>)
 801a474:	f240 2283 	movw	r2, #643	@ 0x283
 801a478:	491e      	ldr	r1, [pc, #120]	@ (801a4f4 <udp_sendto_if+0xe4>)
 801a47a:	481b      	ldr	r0, [pc, #108]	@ (801a4e8 <udp_sendto_if+0xd8>)
 801a47c:	f003 fe2a 	bl	801e0d4 <iprintf>
 801a480:	f06f 030f 	mvn.w	r3, #15
 801a484:	e028      	b.n	801a4d8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a486:	68fb      	ldr	r3, [r7, #12]
 801a488:	2b00      	cmp	r3, #0
 801a48a:	d009      	beq.n	801a4a0 <udp_sendto_if+0x90>
 801a48c:	68fb      	ldr	r3, [r7, #12]
 801a48e:	681b      	ldr	r3, [r3, #0]
 801a490:	2b00      	cmp	r3, #0
 801a492:	d005      	beq.n	801a4a0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801a494:	68fb      	ldr	r3, [r7, #12]
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a49c:	2be0      	cmp	r3, #224	@ 0xe0
 801a49e:	d103      	bne.n	801a4a8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801a4a0:	6a3b      	ldr	r3, [r7, #32]
 801a4a2:	3304      	adds	r3, #4
 801a4a4:	617b      	str	r3, [r7, #20]
 801a4a6:	e00b      	b.n	801a4c0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801a4a8:	68fb      	ldr	r3, [r7, #12]
 801a4aa:	681a      	ldr	r2, [r3, #0]
 801a4ac:	6a3b      	ldr	r3, [r7, #32]
 801a4ae:	3304      	adds	r3, #4
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	429a      	cmp	r2, r3
 801a4b4:	d002      	beq.n	801a4bc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801a4b6:	f06f 0303 	mvn.w	r3, #3
 801a4ba:	e00d      	b.n	801a4d8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801a4bc:	68fb      	ldr	r3, [r7, #12]
 801a4be:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801a4c0:	887a      	ldrh	r2, [r7, #2]
 801a4c2:	697b      	ldr	r3, [r7, #20]
 801a4c4:	9301      	str	r3, [sp, #4]
 801a4c6:	6a3b      	ldr	r3, [r7, #32]
 801a4c8:	9300      	str	r3, [sp, #0]
 801a4ca:	4613      	mov	r3, r2
 801a4cc:	687a      	ldr	r2, [r7, #4]
 801a4ce:	68b9      	ldr	r1, [r7, #8]
 801a4d0:	68f8      	ldr	r0, [r7, #12]
 801a4d2:	f000 f811 	bl	801a4f8 <udp_sendto_if_src>
 801a4d6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801a4d8:	4618      	mov	r0, r3
 801a4da:	3718      	adds	r7, #24
 801a4dc:	46bd      	mov	sp, r7
 801a4de:	bd80      	pop	{r7, pc}
 801a4e0:	080212e8 	.word	0x080212e8
 801a4e4:	0802145c 	.word	0x0802145c
 801a4e8:	0802133c 	.word	0x0802133c
 801a4ec:	08021478 	.word	0x08021478
 801a4f0:	08021494 	.word	0x08021494
 801a4f4:	080214b4 	.word	0x080214b4

0801a4f8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801a4f8:	b580      	push	{r7, lr}
 801a4fa:	b08c      	sub	sp, #48	@ 0x30
 801a4fc:	af04      	add	r7, sp, #16
 801a4fe:	60f8      	str	r0, [r7, #12]
 801a500:	60b9      	str	r1, [r7, #8]
 801a502:	607a      	str	r2, [r7, #4]
 801a504:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801a506:	68fb      	ldr	r3, [r7, #12]
 801a508:	2b00      	cmp	r3, #0
 801a50a:	d109      	bne.n	801a520 <udp_sendto_if_src+0x28>
 801a50c:	4b65      	ldr	r3, [pc, #404]	@ (801a6a4 <udp_sendto_if_src+0x1ac>)
 801a50e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801a512:	4965      	ldr	r1, [pc, #404]	@ (801a6a8 <udp_sendto_if_src+0x1b0>)
 801a514:	4865      	ldr	r0, [pc, #404]	@ (801a6ac <udp_sendto_if_src+0x1b4>)
 801a516:	f003 fddd 	bl	801e0d4 <iprintf>
 801a51a:	f06f 030f 	mvn.w	r3, #15
 801a51e:	e0bc      	b.n	801a69a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801a520:	68bb      	ldr	r3, [r7, #8]
 801a522:	2b00      	cmp	r3, #0
 801a524:	d109      	bne.n	801a53a <udp_sendto_if_src+0x42>
 801a526:	4b5f      	ldr	r3, [pc, #380]	@ (801a6a4 <udp_sendto_if_src+0x1ac>)
 801a528:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801a52c:	4960      	ldr	r1, [pc, #384]	@ (801a6b0 <udp_sendto_if_src+0x1b8>)
 801a52e:	485f      	ldr	r0, [pc, #380]	@ (801a6ac <udp_sendto_if_src+0x1b4>)
 801a530:	f003 fdd0 	bl	801e0d4 <iprintf>
 801a534:	f06f 030f 	mvn.w	r3, #15
 801a538:	e0af      	b.n	801a69a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	d109      	bne.n	801a554 <udp_sendto_if_src+0x5c>
 801a540:	4b58      	ldr	r3, [pc, #352]	@ (801a6a4 <udp_sendto_if_src+0x1ac>)
 801a542:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801a546:	495b      	ldr	r1, [pc, #364]	@ (801a6b4 <udp_sendto_if_src+0x1bc>)
 801a548:	4858      	ldr	r0, [pc, #352]	@ (801a6ac <udp_sendto_if_src+0x1b4>)
 801a54a:	f003 fdc3 	bl	801e0d4 <iprintf>
 801a54e:	f06f 030f 	mvn.w	r3, #15
 801a552:	e0a2      	b.n	801a69a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801a554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a556:	2b00      	cmp	r3, #0
 801a558:	d109      	bne.n	801a56e <udp_sendto_if_src+0x76>
 801a55a:	4b52      	ldr	r3, [pc, #328]	@ (801a6a4 <udp_sendto_if_src+0x1ac>)
 801a55c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801a560:	4955      	ldr	r1, [pc, #340]	@ (801a6b8 <udp_sendto_if_src+0x1c0>)
 801a562:	4852      	ldr	r0, [pc, #328]	@ (801a6ac <udp_sendto_if_src+0x1b4>)
 801a564:	f003 fdb6 	bl	801e0d4 <iprintf>
 801a568:	f06f 030f 	mvn.w	r3, #15
 801a56c:	e095      	b.n	801a69a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801a56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a570:	2b00      	cmp	r3, #0
 801a572:	d109      	bne.n	801a588 <udp_sendto_if_src+0x90>
 801a574:	4b4b      	ldr	r3, [pc, #300]	@ (801a6a4 <udp_sendto_if_src+0x1ac>)
 801a576:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801a57a:	4950      	ldr	r1, [pc, #320]	@ (801a6bc <udp_sendto_if_src+0x1c4>)
 801a57c:	484b      	ldr	r0, [pc, #300]	@ (801a6ac <udp_sendto_if_src+0x1b4>)
 801a57e:	f003 fda9 	bl	801e0d4 <iprintf>
 801a582:	f06f 030f 	mvn.w	r3, #15
 801a586:	e088      	b.n	801a69a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801a588:	68fb      	ldr	r3, [r7, #12]
 801a58a:	8a5b      	ldrh	r3, [r3, #18]
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	d10f      	bne.n	801a5b0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801a590:	68f9      	ldr	r1, [r7, #12]
 801a592:	68fb      	ldr	r3, [r7, #12]
 801a594:	8a5b      	ldrh	r3, [r3, #18]
 801a596:	461a      	mov	r2, r3
 801a598:	68f8      	ldr	r0, [r7, #12]
 801a59a:	f000 f893 	bl	801a6c4 <udp_bind>
 801a59e:	4603      	mov	r3, r0
 801a5a0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801a5a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d002      	beq.n	801a5b0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801a5aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801a5ae:	e074      	b.n	801a69a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801a5b0:	68bb      	ldr	r3, [r7, #8]
 801a5b2:	891b      	ldrh	r3, [r3, #8]
 801a5b4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801a5b8:	4293      	cmp	r3, r2
 801a5ba:	d902      	bls.n	801a5c2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801a5bc:	f04f 33ff 	mov.w	r3, #4294967295
 801a5c0:	e06b      	b.n	801a69a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801a5c2:	2108      	movs	r1, #8
 801a5c4:	68b8      	ldr	r0, [r7, #8]
 801a5c6:	f7f9 fef3 	bl	80143b0 <pbuf_add_header>
 801a5ca:	4603      	mov	r3, r0
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d015      	beq.n	801a5fc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801a5d0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a5d4:	2108      	movs	r1, #8
 801a5d6:	2022      	movs	r0, #34	@ 0x22
 801a5d8:	f7f9 fc9c 	bl	8013f14 <pbuf_alloc>
 801a5dc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801a5de:	69fb      	ldr	r3, [r7, #28]
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	d102      	bne.n	801a5ea <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801a5e4:	f04f 33ff 	mov.w	r3, #4294967295
 801a5e8:	e057      	b.n	801a69a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801a5ea:	68bb      	ldr	r3, [r7, #8]
 801a5ec:	891b      	ldrh	r3, [r3, #8]
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d006      	beq.n	801a600 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801a5f2:	68b9      	ldr	r1, [r7, #8]
 801a5f4:	69f8      	ldr	r0, [r7, #28]
 801a5f6:	f7fa f895 	bl	8014724 <pbuf_chain>
 801a5fa:	e001      	b.n	801a600 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801a5fc:	68bb      	ldr	r3, [r7, #8]
 801a5fe:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801a600:	69fb      	ldr	r3, [r7, #28]
 801a602:	895b      	ldrh	r3, [r3, #10]
 801a604:	2b07      	cmp	r3, #7
 801a606:	d806      	bhi.n	801a616 <udp_sendto_if_src+0x11e>
 801a608:	4b26      	ldr	r3, [pc, #152]	@ (801a6a4 <udp_sendto_if_src+0x1ac>)
 801a60a:	f240 320d 	movw	r2, #781	@ 0x30d
 801a60e:	492c      	ldr	r1, [pc, #176]	@ (801a6c0 <udp_sendto_if_src+0x1c8>)
 801a610:	4826      	ldr	r0, [pc, #152]	@ (801a6ac <udp_sendto_if_src+0x1b4>)
 801a612:	f003 fd5f 	bl	801e0d4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801a616:	69fb      	ldr	r3, [r7, #28]
 801a618:	685b      	ldr	r3, [r3, #4]
 801a61a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801a61c:	68fb      	ldr	r3, [r7, #12]
 801a61e:	8a5b      	ldrh	r3, [r3, #18]
 801a620:	4618      	mov	r0, r3
 801a622:	f7f8 fb6d 	bl	8012d00 <lwip_htons>
 801a626:	4603      	mov	r3, r0
 801a628:	461a      	mov	r2, r3
 801a62a:	697b      	ldr	r3, [r7, #20]
 801a62c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801a62e:	887b      	ldrh	r3, [r7, #2]
 801a630:	4618      	mov	r0, r3
 801a632:	f7f8 fb65 	bl	8012d00 <lwip_htons>
 801a636:	4603      	mov	r3, r0
 801a638:	461a      	mov	r2, r3
 801a63a:	697b      	ldr	r3, [r7, #20]
 801a63c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801a63e:	697b      	ldr	r3, [r7, #20]
 801a640:	2200      	movs	r2, #0
 801a642:	719a      	strb	r2, [r3, #6]
 801a644:	2200      	movs	r2, #0
 801a646:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801a648:	69fb      	ldr	r3, [r7, #28]
 801a64a:	891b      	ldrh	r3, [r3, #8]
 801a64c:	4618      	mov	r0, r3
 801a64e:	f7f8 fb57 	bl	8012d00 <lwip_htons>
 801a652:	4603      	mov	r3, r0
 801a654:	461a      	mov	r2, r3
 801a656:	697b      	ldr	r3, [r7, #20]
 801a658:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801a65a:	2311      	movs	r3, #17
 801a65c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801a65e:	68fb      	ldr	r3, [r7, #12]
 801a660:	7adb      	ldrb	r3, [r3, #11]
 801a662:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801a664:	68fb      	ldr	r3, [r7, #12]
 801a666:	7a9b      	ldrb	r3, [r3, #10]
 801a668:	7cb9      	ldrb	r1, [r7, #18]
 801a66a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a66c:	9202      	str	r2, [sp, #8]
 801a66e:	7cfa      	ldrb	r2, [r7, #19]
 801a670:	9201      	str	r2, [sp, #4]
 801a672:	9300      	str	r3, [sp, #0]
 801a674:	460b      	mov	r3, r1
 801a676:	687a      	ldr	r2, [r7, #4]
 801a678:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a67a:	69f8      	ldr	r0, [r7, #28]
 801a67c:	f001 fbd4 	bl	801be28 <ip4_output_if_src>
 801a680:	4603      	mov	r3, r0
 801a682:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801a684:	69fa      	ldr	r2, [r7, #28]
 801a686:	68bb      	ldr	r3, [r7, #8]
 801a688:	429a      	cmp	r2, r3
 801a68a:	d004      	beq.n	801a696 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801a68c:	69f8      	ldr	r0, [r7, #28]
 801a68e:	f7f9 ff25 	bl	80144dc <pbuf_free>
    q = NULL;
 801a692:	2300      	movs	r3, #0
 801a694:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801a696:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801a69a:	4618      	mov	r0, r3
 801a69c:	3720      	adds	r7, #32
 801a69e:	46bd      	mov	sp, r7
 801a6a0:	bd80      	pop	{r7, pc}
 801a6a2:	bf00      	nop
 801a6a4:	080212e8 	.word	0x080212e8
 801a6a8:	080214d4 	.word	0x080214d4
 801a6ac:	0802133c 	.word	0x0802133c
 801a6b0:	080214f4 	.word	0x080214f4
 801a6b4:	08021514 	.word	0x08021514
 801a6b8:	08021538 	.word	0x08021538
 801a6bc:	0802155c 	.word	0x0802155c
 801a6c0:	08021580 	.word	0x08021580

0801a6c4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801a6c4:	b580      	push	{r7, lr}
 801a6c6:	b086      	sub	sp, #24
 801a6c8:	af00      	add	r7, sp, #0
 801a6ca:	60f8      	str	r0, [r7, #12]
 801a6cc:	60b9      	str	r1, [r7, #8]
 801a6ce:	4613      	mov	r3, r2
 801a6d0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801a6d2:	68bb      	ldr	r3, [r7, #8]
 801a6d4:	2b00      	cmp	r3, #0
 801a6d6:	d101      	bne.n	801a6dc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801a6d8:	4b39      	ldr	r3, [pc, #228]	@ (801a7c0 <udp_bind+0xfc>)
 801a6da:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801a6dc:	68fb      	ldr	r3, [r7, #12]
 801a6de:	2b00      	cmp	r3, #0
 801a6e0:	d109      	bne.n	801a6f6 <udp_bind+0x32>
 801a6e2:	4b38      	ldr	r3, [pc, #224]	@ (801a7c4 <udp_bind+0x100>)
 801a6e4:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801a6e8:	4937      	ldr	r1, [pc, #220]	@ (801a7c8 <udp_bind+0x104>)
 801a6ea:	4838      	ldr	r0, [pc, #224]	@ (801a7cc <udp_bind+0x108>)
 801a6ec:	f003 fcf2 	bl	801e0d4 <iprintf>
 801a6f0:	f06f 030f 	mvn.w	r3, #15
 801a6f4:	e060      	b.n	801a7b8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801a6f6:	2300      	movs	r3, #0
 801a6f8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a6fa:	4b35      	ldr	r3, [pc, #212]	@ (801a7d0 <udp_bind+0x10c>)
 801a6fc:	681b      	ldr	r3, [r3, #0]
 801a6fe:	617b      	str	r3, [r7, #20]
 801a700:	e009      	b.n	801a716 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801a702:	68fa      	ldr	r2, [r7, #12]
 801a704:	697b      	ldr	r3, [r7, #20]
 801a706:	429a      	cmp	r2, r3
 801a708:	d102      	bne.n	801a710 <udp_bind+0x4c>
      rebind = 1;
 801a70a:	2301      	movs	r3, #1
 801a70c:	74fb      	strb	r3, [r7, #19]
      break;
 801a70e:	e005      	b.n	801a71c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a710:	697b      	ldr	r3, [r7, #20]
 801a712:	68db      	ldr	r3, [r3, #12]
 801a714:	617b      	str	r3, [r7, #20]
 801a716:	697b      	ldr	r3, [r7, #20]
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d1f2      	bne.n	801a702 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801a71c:	88fb      	ldrh	r3, [r7, #6]
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d109      	bne.n	801a736 <udp_bind+0x72>
    port = udp_new_port();
 801a722:	f7ff fc69 	bl	8019ff8 <udp_new_port>
 801a726:	4603      	mov	r3, r0
 801a728:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801a72a:	88fb      	ldrh	r3, [r7, #6]
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d12c      	bne.n	801a78a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801a730:	f06f 0307 	mvn.w	r3, #7
 801a734:	e040      	b.n	801a7b8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a736:	4b26      	ldr	r3, [pc, #152]	@ (801a7d0 <udp_bind+0x10c>)
 801a738:	681b      	ldr	r3, [r3, #0]
 801a73a:	617b      	str	r3, [r7, #20]
 801a73c:	e022      	b.n	801a784 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801a73e:	68fa      	ldr	r2, [r7, #12]
 801a740:	697b      	ldr	r3, [r7, #20]
 801a742:	429a      	cmp	r2, r3
 801a744:	d01b      	beq.n	801a77e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801a746:	697b      	ldr	r3, [r7, #20]
 801a748:	8a5b      	ldrh	r3, [r3, #18]
 801a74a:	88fa      	ldrh	r2, [r7, #6]
 801a74c:	429a      	cmp	r2, r3
 801a74e:	d116      	bne.n	801a77e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a750:	697b      	ldr	r3, [r7, #20]
 801a752:	681a      	ldr	r2, [r3, #0]
 801a754:	68bb      	ldr	r3, [r7, #8]
 801a756:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801a758:	429a      	cmp	r2, r3
 801a75a:	d00d      	beq.n	801a778 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a75c:	68bb      	ldr	r3, [r7, #8]
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d00a      	beq.n	801a778 <udp_bind+0xb4>
 801a762:	68bb      	ldr	r3, [r7, #8]
 801a764:	681b      	ldr	r3, [r3, #0]
 801a766:	2b00      	cmp	r3, #0
 801a768:	d006      	beq.n	801a778 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801a76a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	d003      	beq.n	801a778 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801a770:	697b      	ldr	r3, [r7, #20]
 801a772:	681b      	ldr	r3, [r3, #0]
 801a774:	2b00      	cmp	r3, #0
 801a776:	d102      	bne.n	801a77e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801a778:	f06f 0307 	mvn.w	r3, #7
 801a77c:	e01c      	b.n	801a7b8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a77e:	697b      	ldr	r3, [r7, #20]
 801a780:	68db      	ldr	r3, [r3, #12]
 801a782:	617b      	str	r3, [r7, #20]
 801a784:	697b      	ldr	r3, [r7, #20]
 801a786:	2b00      	cmp	r3, #0
 801a788:	d1d9      	bne.n	801a73e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801a78a:	68bb      	ldr	r3, [r7, #8]
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	d002      	beq.n	801a796 <udp_bind+0xd2>
 801a790:	68bb      	ldr	r3, [r7, #8]
 801a792:	681b      	ldr	r3, [r3, #0]
 801a794:	e000      	b.n	801a798 <udp_bind+0xd4>
 801a796:	2300      	movs	r3, #0
 801a798:	68fa      	ldr	r2, [r7, #12]
 801a79a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801a79c:	68fb      	ldr	r3, [r7, #12]
 801a79e:	88fa      	ldrh	r2, [r7, #6]
 801a7a0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801a7a2:	7cfb      	ldrb	r3, [r7, #19]
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d106      	bne.n	801a7b6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801a7a8:	4b09      	ldr	r3, [pc, #36]	@ (801a7d0 <udp_bind+0x10c>)
 801a7aa:	681a      	ldr	r2, [r3, #0]
 801a7ac:	68fb      	ldr	r3, [r7, #12]
 801a7ae:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801a7b0:	4a07      	ldr	r2, [pc, #28]	@ (801a7d0 <udp_bind+0x10c>)
 801a7b2:	68fb      	ldr	r3, [r7, #12]
 801a7b4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801a7b6:	2300      	movs	r3, #0
}
 801a7b8:	4618      	mov	r0, r3
 801a7ba:	3718      	adds	r7, #24
 801a7bc:	46bd      	mov	sp, r7
 801a7be:	bd80      	pop	{r7, pc}
 801a7c0:	08022330 	.word	0x08022330
 801a7c4:	080212e8 	.word	0x080212e8
 801a7c8:	080215b0 	.word	0x080215b0
 801a7cc:	0802133c 	.word	0x0802133c
 801a7d0:	2002780c 	.word	0x2002780c

0801a7d4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801a7d4:	b580      	push	{r7, lr}
 801a7d6:	b084      	sub	sp, #16
 801a7d8:	af00      	add	r7, sp, #0
 801a7da:	60f8      	str	r0, [r7, #12]
 801a7dc:	60b9      	str	r1, [r7, #8]
 801a7de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801a7e0:	68fb      	ldr	r3, [r7, #12]
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d107      	bne.n	801a7f6 <udp_recv+0x22>
 801a7e6:	4b08      	ldr	r3, [pc, #32]	@ (801a808 <udp_recv+0x34>)
 801a7e8:	f240 428a 	movw	r2, #1162	@ 0x48a
 801a7ec:	4907      	ldr	r1, [pc, #28]	@ (801a80c <udp_recv+0x38>)
 801a7ee:	4808      	ldr	r0, [pc, #32]	@ (801a810 <udp_recv+0x3c>)
 801a7f0:	f003 fc70 	bl	801e0d4 <iprintf>
 801a7f4:	e005      	b.n	801a802 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801a7f6:	68fb      	ldr	r3, [r7, #12]
 801a7f8:	68ba      	ldr	r2, [r7, #8]
 801a7fa:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801a7fc:	68fb      	ldr	r3, [r7, #12]
 801a7fe:	687a      	ldr	r2, [r7, #4]
 801a800:	61da      	str	r2, [r3, #28]
}
 801a802:	3710      	adds	r7, #16
 801a804:	46bd      	mov	sp, r7
 801a806:	bd80      	pop	{r7, pc}
 801a808:	080212e8 	.word	0x080212e8
 801a80c:	0802161c 	.word	0x0802161c
 801a810:	0802133c 	.word	0x0802133c

0801a814 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801a814:	b580      	push	{r7, lr}
 801a816:	b082      	sub	sp, #8
 801a818:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801a81a:	2000      	movs	r0, #0
 801a81c:	f7f8 ff44 	bl	80136a8 <memp_malloc>
 801a820:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	2b00      	cmp	r3, #0
 801a826:	d007      	beq.n	801a838 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801a828:	2220      	movs	r2, #32
 801a82a:	2100      	movs	r1, #0
 801a82c:	6878      	ldr	r0, [r7, #4]
 801a82e:	f003 fda9 	bl	801e384 <memset>
    pcb->ttl = UDP_TTL;
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	22ff      	movs	r2, #255	@ 0xff
 801a836:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801a838:	687b      	ldr	r3, [r7, #4]
}
 801a83a:	4618      	mov	r0, r3
 801a83c:	3708      	adds	r7, #8
 801a83e:	46bd      	mov	sp, r7
 801a840:	bd80      	pop	{r7, pc}
	...

0801a844 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801a844:	b480      	push	{r7}
 801a846:	b085      	sub	sp, #20
 801a848:	af00      	add	r7, sp, #0
 801a84a:	6078      	str	r0, [r7, #4]
 801a84c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	2b00      	cmp	r3, #0
 801a852:	d01e      	beq.n	801a892 <udp_netif_ip_addr_changed+0x4e>
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	2b00      	cmp	r3, #0
 801a85a:	d01a      	beq.n	801a892 <udp_netif_ip_addr_changed+0x4e>
 801a85c:	683b      	ldr	r3, [r7, #0]
 801a85e:	2b00      	cmp	r3, #0
 801a860:	d017      	beq.n	801a892 <udp_netif_ip_addr_changed+0x4e>
 801a862:	683b      	ldr	r3, [r7, #0]
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	2b00      	cmp	r3, #0
 801a868:	d013      	beq.n	801a892 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a86a:	4b0d      	ldr	r3, [pc, #52]	@ (801a8a0 <udp_netif_ip_addr_changed+0x5c>)
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	60fb      	str	r3, [r7, #12]
 801a870:	e00c      	b.n	801a88c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801a872:	68fb      	ldr	r3, [r7, #12]
 801a874:	681a      	ldr	r2, [r3, #0]
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	681b      	ldr	r3, [r3, #0]
 801a87a:	429a      	cmp	r2, r3
 801a87c:	d103      	bne.n	801a886 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801a87e:	683b      	ldr	r3, [r7, #0]
 801a880:	681a      	ldr	r2, [r3, #0]
 801a882:	68fb      	ldr	r3, [r7, #12]
 801a884:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a886:	68fb      	ldr	r3, [r7, #12]
 801a888:	68db      	ldr	r3, [r3, #12]
 801a88a:	60fb      	str	r3, [r7, #12]
 801a88c:	68fb      	ldr	r3, [r7, #12]
 801a88e:	2b00      	cmp	r3, #0
 801a890:	d1ef      	bne.n	801a872 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801a892:	bf00      	nop
 801a894:	3714      	adds	r7, #20
 801a896:	46bd      	mov	sp, r7
 801a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a89c:	4770      	bx	lr
 801a89e:	bf00      	nop
 801a8a0:	2002780c 	.word	0x2002780c

0801a8a4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801a8a4:	b580      	push	{r7, lr}
 801a8a6:	b082      	sub	sp, #8
 801a8a8:	af00      	add	r7, sp, #0
 801a8aa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801a8ac:	4915      	ldr	r1, [pc, #84]	@ (801a904 <etharp_free_entry+0x60>)
 801a8ae:	687a      	ldr	r2, [r7, #4]
 801a8b0:	4613      	mov	r3, r2
 801a8b2:	005b      	lsls	r3, r3, #1
 801a8b4:	4413      	add	r3, r2
 801a8b6:	00db      	lsls	r3, r3, #3
 801a8b8:	440b      	add	r3, r1
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	d013      	beq.n	801a8e8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801a8c0:	4910      	ldr	r1, [pc, #64]	@ (801a904 <etharp_free_entry+0x60>)
 801a8c2:	687a      	ldr	r2, [r7, #4]
 801a8c4:	4613      	mov	r3, r2
 801a8c6:	005b      	lsls	r3, r3, #1
 801a8c8:	4413      	add	r3, r2
 801a8ca:	00db      	lsls	r3, r3, #3
 801a8cc:	440b      	add	r3, r1
 801a8ce:	681b      	ldr	r3, [r3, #0]
 801a8d0:	4618      	mov	r0, r3
 801a8d2:	f7f9 fe03 	bl	80144dc <pbuf_free>
    arp_table[i].q = NULL;
 801a8d6:	490b      	ldr	r1, [pc, #44]	@ (801a904 <etharp_free_entry+0x60>)
 801a8d8:	687a      	ldr	r2, [r7, #4]
 801a8da:	4613      	mov	r3, r2
 801a8dc:	005b      	lsls	r3, r3, #1
 801a8de:	4413      	add	r3, r2
 801a8e0:	00db      	lsls	r3, r3, #3
 801a8e2:	440b      	add	r3, r1
 801a8e4:	2200      	movs	r2, #0
 801a8e6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801a8e8:	4906      	ldr	r1, [pc, #24]	@ (801a904 <etharp_free_entry+0x60>)
 801a8ea:	687a      	ldr	r2, [r7, #4]
 801a8ec:	4613      	mov	r3, r2
 801a8ee:	005b      	lsls	r3, r3, #1
 801a8f0:	4413      	add	r3, r2
 801a8f2:	00db      	lsls	r3, r3, #3
 801a8f4:	440b      	add	r3, r1
 801a8f6:	3314      	adds	r3, #20
 801a8f8:	2200      	movs	r2, #0
 801a8fa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801a8fc:	bf00      	nop
 801a8fe:	3708      	adds	r7, #8
 801a900:	46bd      	mov	sp, r7
 801a902:	bd80      	pop	{r7, pc}
 801a904:	20027810 	.word	0x20027810

0801a908 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801a908:	b580      	push	{r7, lr}
 801a90a:	b082      	sub	sp, #8
 801a90c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a90e:	2300      	movs	r3, #0
 801a910:	607b      	str	r3, [r7, #4]
 801a912:	e096      	b.n	801aa42 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801a914:	494f      	ldr	r1, [pc, #316]	@ (801aa54 <etharp_tmr+0x14c>)
 801a916:	687a      	ldr	r2, [r7, #4]
 801a918:	4613      	mov	r3, r2
 801a91a:	005b      	lsls	r3, r3, #1
 801a91c:	4413      	add	r3, r2
 801a91e:	00db      	lsls	r3, r3, #3
 801a920:	440b      	add	r3, r1
 801a922:	3314      	adds	r3, #20
 801a924:	781b      	ldrb	r3, [r3, #0]
 801a926:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801a928:	78fb      	ldrb	r3, [r7, #3]
 801a92a:	2b00      	cmp	r3, #0
 801a92c:	f000 8086 	beq.w	801aa3c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801a930:	4948      	ldr	r1, [pc, #288]	@ (801aa54 <etharp_tmr+0x14c>)
 801a932:	687a      	ldr	r2, [r7, #4]
 801a934:	4613      	mov	r3, r2
 801a936:	005b      	lsls	r3, r3, #1
 801a938:	4413      	add	r3, r2
 801a93a:	00db      	lsls	r3, r3, #3
 801a93c:	440b      	add	r3, r1
 801a93e:	3312      	adds	r3, #18
 801a940:	881b      	ldrh	r3, [r3, #0]
 801a942:	3301      	adds	r3, #1
 801a944:	b298      	uxth	r0, r3
 801a946:	4943      	ldr	r1, [pc, #268]	@ (801aa54 <etharp_tmr+0x14c>)
 801a948:	687a      	ldr	r2, [r7, #4]
 801a94a:	4613      	mov	r3, r2
 801a94c:	005b      	lsls	r3, r3, #1
 801a94e:	4413      	add	r3, r2
 801a950:	00db      	lsls	r3, r3, #3
 801a952:	440b      	add	r3, r1
 801a954:	3312      	adds	r3, #18
 801a956:	4602      	mov	r2, r0
 801a958:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a95a:	493e      	ldr	r1, [pc, #248]	@ (801aa54 <etharp_tmr+0x14c>)
 801a95c:	687a      	ldr	r2, [r7, #4]
 801a95e:	4613      	mov	r3, r2
 801a960:	005b      	lsls	r3, r3, #1
 801a962:	4413      	add	r3, r2
 801a964:	00db      	lsls	r3, r3, #3
 801a966:	440b      	add	r3, r1
 801a968:	3312      	adds	r3, #18
 801a96a:	881b      	ldrh	r3, [r3, #0]
 801a96c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801a970:	d215      	bcs.n	801a99e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a972:	4938      	ldr	r1, [pc, #224]	@ (801aa54 <etharp_tmr+0x14c>)
 801a974:	687a      	ldr	r2, [r7, #4]
 801a976:	4613      	mov	r3, r2
 801a978:	005b      	lsls	r3, r3, #1
 801a97a:	4413      	add	r3, r2
 801a97c:	00db      	lsls	r3, r3, #3
 801a97e:	440b      	add	r3, r1
 801a980:	3314      	adds	r3, #20
 801a982:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a984:	2b01      	cmp	r3, #1
 801a986:	d10e      	bne.n	801a9a6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801a988:	4932      	ldr	r1, [pc, #200]	@ (801aa54 <etharp_tmr+0x14c>)
 801a98a:	687a      	ldr	r2, [r7, #4]
 801a98c:	4613      	mov	r3, r2
 801a98e:	005b      	lsls	r3, r3, #1
 801a990:	4413      	add	r3, r2
 801a992:	00db      	lsls	r3, r3, #3
 801a994:	440b      	add	r3, r1
 801a996:	3312      	adds	r3, #18
 801a998:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a99a:	2b04      	cmp	r3, #4
 801a99c:	d903      	bls.n	801a9a6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801a99e:	6878      	ldr	r0, [r7, #4]
 801a9a0:	f7ff ff80 	bl	801a8a4 <etharp_free_entry>
 801a9a4:	e04a      	b.n	801aa3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801a9a6:	492b      	ldr	r1, [pc, #172]	@ (801aa54 <etharp_tmr+0x14c>)
 801a9a8:	687a      	ldr	r2, [r7, #4]
 801a9aa:	4613      	mov	r3, r2
 801a9ac:	005b      	lsls	r3, r3, #1
 801a9ae:	4413      	add	r3, r2
 801a9b0:	00db      	lsls	r3, r3, #3
 801a9b2:	440b      	add	r3, r1
 801a9b4:	3314      	adds	r3, #20
 801a9b6:	781b      	ldrb	r3, [r3, #0]
 801a9b8:	2b03      	cmp	r3, #3
 801a9ba:	d10a      	bne.n	801a9d2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801a9bc:	4925      	ldr	r1, [pc, #148]	@ (801aa54 <etharp_tmr+0x14c>)
 801a9be:	687a      	ldr	r2, [r7, #4]
 801a9c0:	4613      	mov	r3, r2
 801a9c2:	005b      	lsls	r3, r3, #1
 801a9c4:	4413      	add	r3, r2
 801a9c6:	00db      	lsls	r3, r3, #3
 801a9c8:	440b      	add	r3, r1
 801a9ca:	3314      	adds	r3, #20
 801a9cc:	2204      	movs	r2, #4
 801a9ce:	701a      	strb	r2, [r3, #0]
 801a9d0:	e034      	b.n	801aa3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801a9d2:	4920      	ldr	r1, [pc, #128]	@ (801aa54 <etharp_tmr+0x14c>)
 801a9d4:	687a      	ldr	r2, [r7, #4]
 801a9d6:	4613      	mov	r3, r2
 801a9d8:	005b      	lsls	r3, r3, #1
 801a9da:	4413      	add	r3, r2
 801a9dc:	00db      	lsls	r3, r3, #3
 801a9de:	440b      	add	r3, r1
 801a9e0:	3314      	adds	r3, #20
 801a9e2:	781b      	ldrb	r3, [r3, #0]
 801a9e4:	2b04      	cmp	r3, #4
 801a9e6:	d10a      	bne.n	801a9fe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801a9e8:	491a      	ldr	r1, [pc, #104]	@ (801aa54 <etharp_tmr+0x14c>)
 801a9ea:	687a      	ldr	r2, [r7, #4]
 801a9ec:	4613      	mov	r3, r2
 801a9ee:	005b      	lsls	r3, r3, #1
 801a9f0:	4413      	add	r3, r2
 801a9f2:	00db      	lsls	r3, r3, #3
 801a9f4:	440b      	add	r3, r1
 801a9f6:	3314      	adds	r3, #20
 801a9f8:	2202      	movs	r2, #2
 801a9fa:	701a      	strb	r2, [r3, #0]
 801a9fc:	e01e      	b.n	801aa3c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a9fe:	4915      	ldr	r1, [pc, #84]	@ (801aa54 <etharp_tmr+0x14c>)
 801aa00:	687a      	ldr	r2, [r7, #4]
 801aa02:	4613      	mov	r3, r2
 801aa04:	005b      	lsls	r3, r3, #1
 801aa06:	4413      	add	r3, r2
 801aa08:	00db      	lsls	r3, r3, #3
 801aa0a:	440b      	add	r3, r1
 801aa0c:	3314      	adds	r3, #20
 801aa0e:	781b      	ldrb	r3, [r3, #0]
 801aa10:	2b01      	cmp	r3, #1
 801aa12:	d113      	bne.n	801aa3c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801aa14:	490f      	ldr	r1, [pc, #60]	@ (801aa54 <etharp_tmr+0x14c>)
 801aa16:	687a      	ldr	r2, [r7, #4]
 801aa18:	4613      	mov	r3, r2
 801aa1a:	005b      	lsls	r3, r3, #1
 801aa1c:	4413      	add	r3, r2
 801aa1e:	00db      	lsls	r3, r3, #3
 801aa20:	440b      	add	r3, r1
 801aa22:	3308      	adds	r3, #8
 801aa24:	6818      	ldr	r0, [r3, #0]
 801aa26:	687a      	ldr	r2, [r7, #4]
 801aa28:	4613      	mov	r3, r2
 801aa2a:	005b      	lsls	r3, r3, #1
 801aa2c:	4413      	add	r3, r2
 801aa2e:	00db      	lsls	r3, r3, #3
 801aa30:	4a08      	ldr	r2, [pc, #32]	@ (801aa54 <etharp_tmr+0x14c>)
 801aa32:	4413      	add	r3, r2
 801aa34:	3304      	adds	r3, #4
 801aa36:	4619      	mov	r1, r3
 801aa38:	f000 fe6e 	bl	801b718 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	3301      	adds	r3, #1
 801aa40:	607b      	str	r3, [r7, #4]
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	2b09      	cmp	r3, #9
 801aa46:	f77f af65 	ble.w	801a914 <etharp_tmr+0xc>
      }
    }
  }
}
 801aa4a:	bf00      	nop
 801aa4c:	bf00      	nop
 801aa4e:	3708      	adds	r7, #8
 801aa50:	46bd      	mov	sp, r7
 801aa52:	bd80      	pop	{r7, pc}
 801aa54:	20027810 	.word	0x20027810

0801aa58 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801aa58:	b580      	push	{r7, lr}
 801aa5a:	b08a      	sub	sp, #40	@ 0x28
 801aa5c:	af00      	add	r7, sp, #0
 801aa5e:	60f8      	str	r0, [r7, #12]
 801aa60:	460b      	mov	r3, r1
 801aa62:	607a      	str	r2, [r7, #4]
 801aa64:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801aa66:	230a      	movs	r3, #10
 801aa68:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801aa6a:	230a      	movs	r3, #10
 801aa6c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801aa6e:	230a      	movs	r3, #10
 801aa70:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801aa72:	2300      	movs	r3, #0
 801aa74:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801aa76:	230a      	movs	r3, #10
 801aa78:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801aa7a:	2300      	movs	r3, #0
 801aa7c:	83bb      	strh	r3, [r7, #28]
 801aa7e:	2300      	movs	r3, #0
 801aa80:	837b      	strh	r3, [r7, #26]
 801aa82:	2300      	movs	r3, #0
 801aa84:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801aa86:	2300      	movs	r3, #0
 801aa88:	843b      	strh	r3, [r7, #32]
 801aa8a:	e0ae      	b.n	801abea <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801aa8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aa90:	49a6      	ldr	r1, [pc, #664]	@ (801ad2c <etharp_find_entry+0x2d4>)
 801aa92:	4613      	mov	r3, r2
 801aa94:	005b      	lsls	r3, r3, #1
 801aa96:	4413      	add	r3, r2
 801aa98:	00db      	lsls	r3, r3, #3
 801aa9a:	440b      	add	r3, r1
 801aa9c:	3314      	adds	r3, #20
 801aa9e:	781b      	ldrb	r3, [r3, #0]
 801aaa0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801aaa2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801aaa6:	2b0a      	cmp	r3, #10
 801aaa8:	d105      	bne.n	801aab6 <etharp_find_entry+0x5e>
 801aaaa:	7dfb      	ldrb	r3, [r7, #23]
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d102      	bne.n	801aab6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801aab0:	8c3b      	ldrh	r3, [r7, #32]
 801aab2:	847b      	strh	r3, [r7, #34]	@ 0x22
 801aab4:	e095      	b.n	801abe2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801aab6:	7dfb      	ldrb	r3, [r7, #23]
 801aab8:	2b00      	cmp	r3, #0
 801aaba:	f000 8092 	beq.w	801abe2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801aabe:	7dfb      	ldrb	r3, [r7, #23]
 801aac0:	2b01      	cmp	r3, #1
 801aac2:	d009      	beq.n	801aad8 <etharp_find_entry+0x80>
 801aac4:	7dfb      	ldrb	r3, [r7, #23]
 801aac6:	2b01      	cmp	r3, #1
 801aac8:	d806      	bhi.n	801aad8 <etharp_find_entry+0x80>
 801aaca:	4b99      	ldr	r3, [pc, #612]	@ (801ad30 <etharp_find_entry+0x2d8>)
 801aacc:	f240 1223 	movw	r2, #291	@ 0x123
 801aad0:	4998      	ldr	r1, [pc, #608]	@ (801ad34 <etharp_find_entry+0x2dc>)
 801aad2:	4899      	ldr	r0, [pc, #612]	@ (801ad38 <etharp_find_entry+0x2e0>)
 801aad4:	f003 fafe 	bl	801e0d4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801aad8:	68fb      	ldr	r3, [r7, #12]
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d020      	beq.n	801ab20 <etharp_find_entry+0xc8>
 801aade:	68fb      	ldr	r3, [r7, #12]
 801aae0:	6819      	ldr	r1, [r3, #0]
 801aae2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aae6:	4891      	ldr	r0, [pc, #580]	@ (801ad2c <etharp_find_entry+0x2d4>)
 801aae8:	4613      	mov	r3, r2
 801aaea:	005b      	lsls	r3, r3, #1
 801aaec:	4413      	add	r3, r2
 801aaee:	00db      	lsls	r3, r3, #3
 801aaf0:	4403      	add	r3, r0
 801aaf2:	3304      	adds	r3, #4
 801aaf4:	681b      	ldr	r3, [r3, #0]
 801aaf6:	4299      	cmp	r1, r3
 801aaf8:	d112      	bne.n	801ab20 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d00c      	beq.n	801ab1a <etharp_find_entry+0xc2>
 801ab00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ab04:	4989      	ldr	r1, [pc, #548]	@ (801ad2c <etharp_find_entry+0x2d4>)
 801ab06:	4613      	mov	r3, r2
 801ab08:	005b      	lsls	r3, r3, #1
 801ab0a:	4413      	add	r3, r2
 801ab0c:	00db      	lsls	r3, r3, #3
 801ab0e:	440b      	add	r3, r1
 801ab10:	3308      	adds	r3, #8
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	687a      	ldr	r2, [r7, #4]
 801ab16:	429a      	cmp	r2, r3
 801ab18:	d102      	bne.n	801ab20 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801ab1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ab1e:	e100      	b.n	801ad22 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801ab20:	7dfb      	ldrb	r3, [r7, #23]
 801ab22:	2b01      	cmp	r3, #1
 801ab24:	d140      	bne.n	801aba8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801ab26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ab2a:	4980      	ldr	r1, [pc, #512]	@ (801ad2c <etharp_find_entry+0x2d4>)
 801ab2c:	4613      	mov	r3, r2
 801ab2e:	005b      	lsls	r3, r3, #1
 801ab30:	4413      	add	r3, r2
 801ab32:	00db      	lsls	r3, r3, #3
 801ab34:	440b      	add	r3, r1
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d01a      	beq.n	801ab72 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801ab3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ab40:	497a      	ldr	r1, [pc, #488]	@ (801ad2c <etharp_find_entry+0x2d4>)
 801ab42:	4613      	mov	r3, r2
 801ab44:	005b      	lsls	r3, r3, #1
 801ab46:	4413      	add	r3, r2
 801ab48:	00db      	lsls	r3, r3, #3
 801ab4a:	440b      	add	r3, r1
 801ab4c:	3312      	adds	r3, #18
 801ab4e:	881b      	ldrh	r3, [r3, #0]
 801ab50:	8bba      	ldrh	r2, [r7, #28]
 801ab52:	429a      	cmp	r2, r3
 801ab54:	d845      	bhi.n	801abe2 <etharp_find_entry+0x18a>
            old_queue = i;
 801ab56:	8c3b      	ldrh	r3, [r7, #32]
 801ab58:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801ab5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ab5e:	4973      	ldr	r1, [pc, #460]	@ (801ad2c <etharp_find_entry+0x2d4>)
 801ab60:	4613      	mov	r3, r2
 801ab62:	005b      	lsls	r3, r3, #1
 801ab64:	4413      	add	r3, r2
 801ab66:	00db      	lsls	r3, r3, #3
 801ab68:	440b      	add	r3, r1
 801ab6a:	3312      	adds	r3, #18
 801ab6c:	881b      	ldrh	r3, [r3, #0]
 801ab6e:	83bb      	strh	r3, [r7, #28]
 801ab70:	e037      	b.n	801abe2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801ab72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ab76:	496d      	ldr	r1, [pc, #436]	@ (801ad2c <etharp_find_entry+0x2d4>)
 801ab78:	4613      	mov	r3, r2
 801ab7a:	005b      	lsls	r3, r3, #1
 801ab7c:	4413      	add	r3, r2
 801ab7e:	00db      	lsls	r3, r3, #3
 801ab80:	440b      	add	r3, r1
 801ab82:	3312      	adds	r3, #18
 801ab84:	881b      	ldrh	r3, [r3, #0]
 801ab86:	8b7a      	ldrh	r2, [r7, #26]
 801ab88:	429a      	cmp	r2, r3
 801ab8a:	d82a      	bhi.n	801abe2 <etharp_find_entry+0x18a>
            old_pending = i;
 801ab8c:	8c3b      	ldrh	r3, [r7, #32]
 801ab8e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801ab90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ab94:	4965      	ldr	r1, [pc, #404]	@ (801ad2c <etharp_find_entry+0x2d4>)
 801ab96:	4613      	mov	r3, r2
 801ab98:	005b      	lsls	r3, r3, #1
 801ab9a:	4413      	add	r3, r2
 801ab9c:	00db      	lsls	r3, r3, #3
 801ab9e:	440b      	add	r3, r1
 801aba0:	3312      	adds	r3, #18
 801aba2:	881b      	ldrh	r3, [r3, #0]
 801aba4:	837b      	strh	r3, [r7, #26]
 801aba6:	e01c      	b.n	801abe2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801aba8:	7dfb      	ldrb	r3, [r7, #23]
 801abaa:	2b01      	cmp	r3, #1
 801abac:	d919      	bls.n	801abe2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801abae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801abb2:	495e      	ldr	r1, [pc, #376]	@ (801ad2c <etharp_find_entry+0x2d4>)
 801abb4:	4613      	mov	r3, r2
 801abb6:	005b      	lsls	r3, r3, #1
 801abb8:	4413      	add	r3, r2
 801abba:	00db      	lsls	r3, r3, #3
 801abbc:	440b      	add	r3, r1
 801abbe:	3312      	adds	r3, #18
 801abc0:	881b      	ldrh	r3, [r3, #0]
 801abc2:	8b3a      	ldrh	r2, [r7, #24]
 801abc4:	429a      	cmp	r2, r3
 801abc6:	d80c      	bhi.n	801abe2 <etharp_find_entry+0x18a>
            old_stable = i;
 801abc8:	8c3b      	ldrh	r3, [r7, #32]
 801abca:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801abcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801abd0:	4956      	ldr	r1, [pc, #344]	@ (801ad2c <etharp_find_entry+0x2d4>)
 801abd2:	4613      	mov	r3, r2
 801abd4:	005b      	lsls	r3, r3, #1
 801abd6:	4413      	add	r3, r2
 801abd8:	00db      	lsls	r3, r3, #3
 801abda:	440b      	add	r3, r1
 801abdc:	3312      	adds	r3, #18
 801abde:	881b      	ldrh	r3, [r3, #0]
 801abe0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801abe2:	8c3b      	ldrh	r3, [r7, #32]
 801abe4:	3301      	adds	r3, #1
 801abe6:	b29b      	uxth	r3, r3
 801abe8:	843b      	strh	r3, [r7, #32]
 801abea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801abee:	2b09      	cmp	r3, #9
 801abf0:	f77f af4c 	ble.w	801aa8c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801abf4:	7afb      	ldrb	r3, [r7, #11]
 801abf6:	f003 0302 	and.w	r3, r3, #2
 801abfa:	2b00      	cmp	r3, #0
 801abfc:	d108      	bne.n	801ac10 <etharp_find_entry+0x1b8>
 801abfe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801ac02:	2b0a      	cmp	r3, #10
 801ac04:	d107      	bne.n	801ac16 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801ac06:	7afb      	ldrb	r3, [r7, #11]
 801ac08:	f003 0301 	and.w	r3, r3, #1
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	d102      	bne.n	801ac16 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801ac10:	f04f 33ff 	mov.w	r3, #4294967295
 801ac14:	e085      	b.n	801ad22 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801ac16:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801ac1a:	2b09      	cmp	r3, #9
 801ac1c:	dc02      	bgt.n	801ac24 <etharp_find_entry+0x1cc>
    i = empty;
 801ac1e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ac20:	843b      	strh	r3, [r7, #32]
 801ac22:	e039      	b.n	801ac98 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801ac24:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801ac28:	2b09      	cmp	r3, #9
 801ac2a:	dc14      	bgt.n	801ac56 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801ac2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac2e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801ac30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ac34:	493d      	ldr	r1, [pc, #244]	@ (801ad2c <etharp_find_entry+0x2d4>)
 801ac36:	4613      	mov	r3, r2
 801ac38:	005b      	lsls	r3, r3, #1
 801ac3a:	4413      	add	r3, r2
 801ac3c:	00db      	lsls	r3, r3, #3
 801ac3e:	440b      	add	r3, r1
 801ac40:	681b      	ldr	r3, [r3, #0]
 801ac42:	2b00      	cmp	r3, #0
 801ac44:	d018      	beq.n	801ac78 <etharp_find_entry+0x220>
 801ac46:	4b3a      	ldr	r3, [pc, #232]	@ (801ad30 <etharp_find_entry+0x2d8>)
 801ac48:	f240 126d 	movw	r2, #365	@ 0x16d
 801ac4c:	493b      	ldr	r1, [pc, #236]	@ (801ad3c <etharp_find_entry+0x2e4>)
 801ac4e:	483a      	ldr	r0, [pc, #232]	@ (801ad38 <etharp_find_entry+0x2e0>)
 801ac50:	f003 fa40 	bl	801e0d4 <iprintf>
 801ac54:	e010      	b.n	801ac78 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801ac56:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801ac5a:	2b09      	cmp	r3, #9
 801ac5c:	dc02      	bgt.n	801ac64 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801ac5e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801ac60:	843b      	strh	r3, [r7, #32]
 801ac62:	e009      	b.n	801ac78 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801ac64:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801ac68:	2b09      	cmp	r3, #9
 801ac6a:	dc02      	bgt.n	801ac72 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801ac6c:	8bfb      	ldrh	r3, [r7, #30]
 801ac6e:	843b      	strh	r3, [r7, #32]
 801ac70:	e002      	b.n	801ac78 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801ac72:	f04f 33ff 	mov.w	r3, #4294967295
 801ac76:	e054      	b.n	801ad22 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801ac78:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ac7c:	2b09      	cmp	r3, #9
 801ac7e:	dd06      	ble.n	801ac8e <etharp_find_entry+0x236>
 801ac80:	4b2b      	ldr	r3, [pc, #172]	@ (801ad30 <etharp_find_entry+0x2d8>)
 801ac82:	f240 127f 	movw	r2, #383	@ 0x17f
 801ac86:	492e      	ldr	r1, [pc, #184]	@ (801ad40 <etharp_find_entry+0x2e8>)
 801ac88:	482b      	ldr	r0, [pc, #172]	@ (801ad38 <etharp_find_entry+0x2e0>)
 801ac8a:	f003 fa23 	bl	801e0d4 <iprintf>
    etharp_free_entry(i);
 801ac8e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ac92:	4618      	mov	r0, r3
 801ac94:	f7ff fe06 	bl	801a8a4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801ac98:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ac9c:	2b09      	cmp	r3, #9
 801ac9e:	dd06      	ble.n	801acae <etharp_find_entry+0x256>
 801aca0:	4b23      	ldr	r3, [pc, #140]	@ (801ad30 <etharp_find_entry+0x2d8>)
 801aca2:	f240 1283 	movw	r2, #387	@ 0x183
 801aca6:	4926      	ldr	r1, [pc, #152]	@ (801ad40 <etharp_find_entry+0x2e8>)
 801aca8:	4823      	ldr	r0, [pc, #140]	@ (801ad38 <etharp_find_entry+0x2e0>)
 801acaa:	f003 fa13 	bl	801e0d4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801acae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801acb2:	491e      	ldr	r1, [pc, #120]	@ (801ad2c <etharp_find_entry+0x2d4>)
 801acb4:	4613      	mov	r3, r2
 801acb6:	005b      	lsls	r3, r3, #1
 801acb8:	4413      	add	r3, r2
 801acba:	00db      	lsls	r3, r3, #3
 801acbc:	440b      	add	r3, r1
 801acbe:	3314      	adds	r3, #20
 801acc0:	781b      	ldrb	r3, [r3, #0]
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	d006      	beq.n	801acd4 <etharp_find_entry+0x27c>
 801acc6:	4b1a      	ldr	r3, [pc, #104]	@ (801ad30 <etharp_find_entry+0x2d8>)
 801acc8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801accc:	491d      	ldr	r1, [pc, #116]	@ (801ad44 <etharp_find_entry+0x2ec>)
 801acce:	481a      	ldr	r0, [pc, #104]	@ (801ad38 <etharp_find_entry+0x2e0>)
 801acd0:	f003 fa00 	bl	801e0d4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801acd4:	68fb      	ldr	r3, [r7, #12]
 801acd6:	2b00      	cmp	r3, #0
 801acd8:	d00b      	beq.n	801acf2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801acda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801acde:	68fb      	ldr	r3, [r7, #12]
 801ace0:	6819      	ldr	r1, [r3, #0]
 801ace2:	4812      	ldr	r0, [pc, #72]	@ (801ad2c <etharp_find_entry+0x2d4>)
 801ace4:	4613      	mov	r3, r2
 801ace6:	005b      	lsls	r3, r3, #1
 801ace8:	4413      	add	r3, r2
 801acea:	00db      	lsls	r3, r3, #3
 801acec:	4403      	add	r3, r0
 801acee:	3304      	adds	r3, #4
 801acf0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801acf2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801acf6:	490d      	ldr	r1, [pc, #52]	@ (801ad2c <etharp_find_entry+0x2d4>)
 801acf8:	4613      	mov	r3, r2
 801acfa:	005b      	lsls	r3, r3, #1
 801acfc:	4413      	add	r3, r2
 801acfe:	00db      	lsls	r3, r3, #3
 801ad00:	440b      	add	r3, r1
 801ad02:	3312      	adds	r3, #18
 801ad04:	2200      	movs	r2, #0
 801ad06:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801ad08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad0c:	4907      	ldr	r1, [pc, #28]	@ (801ad2c <etharp_find_entry+0x2d4>)
 801ad0e:	4613      	mov	r3, r2
 801ad10:	005b      	lsls	r3, r3, #1
 801ad12:	4413      	add	r3, r2
 801ad14:	00db      	lsls	r3, r3, #3
 801ad16:	440b      	add	r3, r1
 801ad18:	3308      	adds	r3, #8
 801ad1a:	687a      	ldr	r2, [r7, #4]
 801ad1c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801ad1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801ad22:	4618      	mov	r0, r3
 801ad24:	3728      	adds	r7, #40	@ 0x28
 801ad26:	46bd      	mov	sp, r7
 801ad28:	bd80      	pop	{r7, pc}
 801ad2a:	bf00      	nop
 801ad2c:	20027810 	.word	0x20027810
 801ad30:	0802164c 	.word	0x0802164c
 801ad34:	08021684 	.word	0x08021684
 801ad38:	080216c4 	.word	0x080216c4
 801ad3c:	080216ec 	.word	0x080216ec
 801ad40:	08021704 	.word	0x08021704
 801ad44:	08021718 	.word	0x08021718

0801ad48 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801ad48:	b580      	push	{r7, lr}
 801ad4a:	b088      	sub	sp, #32
 801ad4c:	af02      	add	r7, sp, #8
 801ad4e:	60f8      	str	r0, [r7, #12]
 801ad50:	60b9      	str	r1, [r7, #8]
 801ad52:	607a      	str	r2, [r7, #4]
 801ad54:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801ad56:	68fb      	ldr	r3, [r7, #12]
 801ad58:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801ad5c:	2b06      	cmp	r3, #6
 801ad5e:	d006      	beq.n	801ad6e <etharp_update_arp_entry+0x26>
 801ad60:	4b48      	ldr	r3, [pc, #288]	@ (801ae84 <etharp_update_arp_entry+0x13c>)
 801ad62:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801ad66:	4948      	ldr	r1, [pc, #288]	@ (801ae88 <etharp_update_arp_entry+0x140>)
 801ad68:	4848      	ldr	r0, [pc, #288]	@ (801ae8c <etharp_update_arp_entry+0x144>)
 801ad6a:	f003 f9b3 	bl	801e0d4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801ad6e:	68bb      	ldr	r3, [r7, #8]
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	d012      	beq.n	801ad9a <etharp_update_arp_entry+0x52>
 801ad74:	68bb      	ldr	r3, [r7, #8]
 801ad76:	681b      	ldr	r3, [r3, #0]
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	d00e      	beq.n	801ad9a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801ad7c:	68bb      	ldr	r3, [r7, #8]
 801ad7e:	681b      	ldr	r3, [r3, #0]
 801ad80:	68f9      	ldr	r1, [r7, #12]
 801ad82:	4618      	mov	r0, r3
 801ad84:	f001 f8fe 	bl	801bf84 <ip4_addr_isbroadcast_u32>
 801ad88:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	d105      	bne.n	801ad9a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801ad8e:	68bb      	ldr	r3, [r7, #8]
 801ad90:	681b      	ldr	r3, [r3, #0]
 801ad92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801ad96:	2be0      	cmp	r3, #224	@ 0xe0
 801ad98:	d102      	bne.n	801ada0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ad9a:	f06f 030f 	mvn.w	r3, #15
 801ad9e:	e06c      	b.n	801ae7a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801ada0:	78fb      	ldrb	r3, [r7, #3]
 801ada2:	68fa      	ldr	r2, [r7, #12]
 801ada4:	4619      	mov	r1, r3
 801ada6:	68b8      	ldr	r0, [r7, #8]
 801ada8:	f7ff fe56 	bl	801aa58 <etharp_find_entry>
 801adac:	4603      	mov	r3, r0
 801adae:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801adb0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	da02      	bge.n	801adbe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801adb8:	8afb      	ldrh	r3, [r7, #22]
 801adba:	b25b      	sxtb	r3, r3
 801adbc:	e05d      	b.n	801ae7a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801adbe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801adc2:	4933      	ldr	r1, [pc, #204]	@ (801ae90 <etharp_update_arp_entry+0x148>)
 801adc4:	4613      	mov	r3, r2
 801adc6:	005b      	lsls	r3, r3, #1
 801adc8:	4413      	add	r3, r2
 801adca:	00db      	lsls	r3, r3, #3
 801adcc:	440b      	add	r3, r1
 801adce:	3314      	adds	r3, #20
 801add0:	2202      	movs	r2, #2
 801add2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801add4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801add8:	492d      	ldr	r1, [pc, #180]	@ (801ae90 <etharp_update_arp_entry+0x148>)
 801adda:	4613      	mov	r3, r2
 801addc:	005b      	lsls	r3, r3, #1
 801adde:	4413      	add	r3, r2
 801ade0:	00db      	lsls	r3, r3, #3
 801ade2:	440b      	add	r3, r1
 801ade4:	3308      	adds	r3, #8
 801ade6:	68fa      	ldr	r2, [r7, #12]
 801ade8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801adea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801adee:	4613      	mov	r3, r2
 801adf0:	005b      	lsls	r3, r3, #1
 801adf2:	4413      	add	r3, r2
 801adf4:	00db      	lsls	r3, r3, #3
 801adf6:	3308      	adds	r3, #8
 801adf8:	4a25      	ldr	r2, [pc, #148]	@ (801ae90 <etharp_update_arp_entry+0x148>)
 801adfa:	4413      	add	r3, r2
 801adfc:	3304      	adds	r3, #4
 801adfe:	2206      	movs	r2, #6
 801ae00:	6879      	ldr	r1, [r7, #4]
 801ae02:	4618      	mov	r0, r3
 801ae04:	f003 fb91 	bl	801e52a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801ae08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ae0c:	4920      	ldr	r1, [pc, #128]	@ (801ae90 <etharp_update_arp_entry+0x148>)
 801ae0e:	4613      	mov	r3, r2
 801ae10:	005b      	lsls	r3, r3, #1
 801ae12:	4413      	add	r3, r2
 801ae14:	00db      	lsls	r3, r3, #3
 801ae16:	440b      	add	r3, r1
 801ae18:	3312      	adds	r3, #18
 801ae1a:	2200      	movs	r2, #0
 801ae1c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801ae1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ae22:	491b      	ldr	r1, [pc, #108]	@ (801ae90 <etharp_update_arp_entry+0x148>)
 801ae24:	4613      	mov	r3, r2
 801ae26:	005b      	lsls	r3, r3, #1
 801ae28:	4413      	add	r3, r2
 801ae2a:	00db      	lsls	r3, r3, #3
 801ae2c:	440b      	add	r3, r1
 801ae2e:	681b      	ldr	r3, [r3, #0]
 801ae30:	2b00      	cmp	r3, #0
 801ae32:	d021      	beq.n	801ae78 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801ae34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ae38:	4915      	ldr	r1, [pc, #84]	@ (801ae90 <etharp_update_arp_entry+0x148>)
 801ae3a:	4613      	mov	r3, r2
 801ae3c:	005b      	lsls	r3, r3, #1
 801ae3e:	4413      	add	r3, r2
 801ae40:	00db      	lsls	r3, r3, #3
 801ae42:	440b      	add	r3, r1
 801ae44:	681b      	ldr	r3, [r3, #0]
 801ae46:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801ae48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ae4c:	4910      	ldr	r1, [pc, #64]	@ (801ae90 <etharp_update_arp_entry+0x148>)
 801ae4e:	4613      	mov	r3, r2
 801ae50:	005b      	lsls	r3, r3, #1
 801ae52:	4413      	add	r3, r2
 801ae54:	00db      	lsls	r3, r3, #3
 801ae56:	440b      	add	r3, r1
 801ae58:	2200      	movs	r2, #0
 801ae5a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801ae5c:	68fb      	ldr	r3, [r7, #12]
 801ae5e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801ae62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801ae66:	9300      	str	r3, [sp, #0]
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	6939      	ldr	r1, [r7, #16]
 801ae6c:	68f8      	ldr	r0, [r7, #12]
 801ae6e:	f001 ff97 	bl	801cda0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801ae72:	6938      	ldr	r0, [r7, #16]
 801ae74:	f7f9 fb32 	bl	80144dc <pbuf_free>
  }
  return ERR_OK;
 801ae78:	2300      	movs	r3, #0
}
 801ae7a:	4618      	mov	r0, r3
 801ae7c:	3718      	adds	r7, #24
 801ae7e:	46bd      	mov	sp, r7
 801ae80:	bd80      	pop	{r7, pc}
 801ae82:	bf00      	nop
 801ae84:	0802164c 	.word	0x0802164c
 801ae88:	08021744 	.word	0x08021744
 801ae8c:	080216c4 	.word	0x080216c4
 801ae90:	20027810 	.word	0x20027810

0801ae94 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801ae94:	b580      	push	{r7, lr}
 801ae96:	b084      	sub	sp, #16
 801ae98:	af00      	add	r7, sp, #0
 801ae9a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ae9c:	2300      	movs	r3, #0
 801ae9e:	60fb      	str	r3, [r7, #12]
 801aea0:	e01e      	b.n	801aee0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801aea2:	4913      	ldr	r1, [pc, #76]	@ (801aef0 <etharp_cleanup_netif+0x5c>)
 801aea4:	68fa      	ldr	r2, [r7, #12]
 801aea6:	4613      	mov	r3, r2
 801aea8:	005b      	lsls	r3, r3, #1
 801aeaa:	4413      	add	r3, r2
 801aeac:	00db      	lsls	r3, r3, #3
 801aeae:	440b      	add	r3, r1
 801aeb0:	3314      	adds	r3, #20
 801aeb2:	781b      	ldrb	r3, [r3, #0]
 801aeb4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801aeb6:	7afb      	ldrb	r3, [r7, #11]
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	d00e      	beq.n	801aeda <etharp_cleanup_netif+0x46>
 801aebc:	490c      	ldr	r1, [pc, #48]	@ (801aef0 <etharp_cleanup_netif+0x5c>)
 801aebe:	68fa      	ldr	r2, [r7, #12]
 801aec0:	4613      	mov	r3, r2
 801aec2:	005b      	lsls	r3, r3, #1
 801aec4:	4413      	add	r3, r2
 801aec6:	00db      	lsls	r3, r3, #3
 801aec8:	440b      	add	r3, r1
 801aeca:	3308      	adds	r3, #8
 801aecc:	681b      	ldr	r3, [r3, #0]
 801aece:	687a      	ldr	r2, [r7, #4]
 801aed0:	429a      	cmp	r2, r3
 801aed2:	d102      	bne.n	801aeda <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801aed4:	68f8      	ldr	r0, [r7, #12]
 801aed6:	f7ff fce5 	bl	801a8a4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801aeda:	68fb      	ldr	r3, [r7, #12]
 801aedc:	3301      	adds	r3, #1
 801aede:	60fb      	str	r3, [r7, #12]
 801aee0:	68fb      	ldr	r3, [r7, #12]
 801aee2:	2b09      	cmp	r3, #9
 801aee4:	dddd      	ble.n	801aea2 <etharp_cleanup_netif+0xe>
    }
  }
}
 801aee6:	bf00      	nop
 801aee8:	bf00      	nop
 801aeea:	3710      	adds	r7, #16
 801aeec:	46bd      	mov	sp, r7
 801aeee:	bd80      	pop	{r7, pc}
 801aef0:	20027810 	.word	0x20027810

0801aef4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801aef4:	b5b0      	push	{r4, r5, r7, lr}
 801aef6:	b08a      	sub	sp, #40	@ 0x28
 801aef8:	af04      	add	r7, sp, #16
 801aefa:	6078      	str	r0, [r7, #4]
 801aefc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801aefe:	683b      	ldr	r3, [r7, #0]
 801af00:	2b00      	cmp	r3, #0
 801af02:	d107      	bne.n	801af14 <etharp_input+0x20>
 801af04:	4b3d      	ldr	r3, [pc, #244]	@ (801affc <etharp_input+0x108>)
 801af06:	f240 228a 	movw	r2, #650	@ 0x28a
 801af0a:	493d      	ldr	r1, [pc, #244]	@ (801b000 <etharp_input+0x10c>)
 801af0c:	483d      	ldr	r0, [pc, #244]	@ (801b004 <etharp_input+0x110>)
 801af0e:	f003 f8e1 	bl	801e0d4 <iprintf>
 801af12:	e06f      	b.n	801aff4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	685b      	ldr	r3, [r3, #4]
 801af18:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801af1a:	693b      	ldr	r3, [r7, #16]
 801af1c:	881b      	ldrh	r3, [r3, #0]
 801af1e:	b29b      	uxth	r3, r3
 801af20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801af24:	d10c      	bne.n	801af40 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801af26:	693b      	ldr	r3, [r7, #16]
 801af28:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801af2a:	2b06      	cmp	r3, #6
 801af2c:	d108      	bne.n	801af40 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801af2e:	693b      	ldr	r3, [r7, #16]
 801af30:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801af32:	2b04      	cmp	r3, #4
 801af34:	d104      	bne.n	801af40 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801af36:	693b      	ldr	r3, [r7, #16]
 801af38:	885b      	ldrh	r3, [r3, #2]
 801af3a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801af3c:	2b08      	cmp	r3, #8
 801af3e:	d003      	beq.n	801af48 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801af40:	6878      	ldr	r0, [r7, #4]
 801af42:	f7f9 facb 	bl	80144dc <pbuf_free>
    return;
 801af46:	e055      	b.n	801aff4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801af48:	693b      	ldr	r3, [r7, #16]
 801af4a:	330e      	adds	r3, #14
 801af4c:	681b      	ldr	r3, [r3, #0]
 801af4e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801af50:	693b      	ldr	r3, [r7, #16]
 801af52:	3318      	adds	r3, #24
 801af54:	681b      	ldr	r3, [r3, #0]
 801af56:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801af58:	683b      	ldr	r3, [r7, #0]
 801af5a:	3304      	adds	r3, #4
 801af5c:	681b      	ldr	r3, [r3, #0]
 801af5e:	2b00      	cmp	r3, #0
 801af60:	d102      	bne.n	801af68 <etharp_input+0x74>
    for_us = 0;
 801af62:	2300      	movs	r3, #0
 801af64:	75fb      	strb	r3, [r7, #23]
 801af66:	e009      	b.n	801af7c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801af68:	68ba      	ldr	r2, [r7, #8]
 801af6a:	683b      	ldr	r3, [r7, #0]
 801af6c:	3304      	adds	r3, #4
 801af6e:	681b      	ldr	r3, [r3, #0]
 801af70:	429a      	cmp	r2, r3
 801af72:	bf0c      	ite	eq
 801af74:	2301      	moveq	r3, #1
 801af76:	2300      	movne	r3, #0
 801af78:	b2db      	uxtb	r3, r3
 801af7a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801af7c:	693b      	ldr	r3, [r7, #16]
 801af7e:	f103 0208 	add.w	r2, r3, #8
 801af82:	7dfb      	ldrb	r3, [r7, #23]
 801af84:	2b00      	cmp	r3, #0
 801af86:	d001      	beq.n	801af8c <etharp_input+0x98>
 801af88:	2301      	movs	r3, #1
 801af8a:	e000      	b.n	801af8e <etharp_input+0x9a>
 801af8c:	2302      	movs	r3, #2
 801af8e:	f107 010c 	add.w	r1, r7, #12
 801af92:	6838      	ldr	r0, [r7, #0]
 801af94:	f7ff fed8 	bl	801ad48 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801af98:	693b      	ldr	r3, [r7, #16]
 801af9a:	88db      	ldrh	r3, [r3, #6]
 801af9c:	b29b      	uxth	r3, r3
 801af9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801afa2:	d003      	beq.n	801afac <etharp_input+0xb8>
 801afa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801afa8:	d01e      	beq.n	801afe8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801afaa:	e020      	b.n	801afee <etharp_input+0xfa>
      if (for_us) {
 801afac:	7dfb      	ldrb	r3, [r7, #23]
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d01c      	beq.n	801afec <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801afb2:	683b      	ldr	r3, [r7, #0]
 801afb4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801afb8:	693b      	ldr	r3, [r7, #16]
 801afba:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801afbe:	683b      	ldr	r3, [r7, #0]
 801afc0:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801afc4:	683b      	ldr	r3, [r7, #0]
 801afc6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801afc8:	693a      	ldr	r2, [r7, #16]
 801afca:	3208      	adds	r2, #8
        etharp_raw(netif,
 801afcc:	2102      	movs	r1, #2
 801afce:	9103      	str	r1, [sp, #12]
 801afd0:	f107 010c 	add.w	r1, r7, #12
 801afd4:	9102      	str	r1, [sp, #8]
 801afd6:	9201      	str	r2, [sp, #4]
 801afd8:	9300      	str	r3, [sp, #0]
 801afda:	462b      	mov	r3, r5
 801afdc:	4622      	mov	r2, r4
 801afde:	4601      	mov	r1, r0
 801afe0:	6838      	ldr	r0, [r7, #0]
 801afe2:	f000 faeb 	bl	801b5bc <etharp_raw>
      break;
 801afe6:	e001      	b.n	801afec <etharp_input+0xf8>
      break;
 801afe8:	bf00      	nop
 801afea:	e000      	b.n	801afee <etharp_input+0xfa>
      break;
 801afec:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801afee:	6878      	ldr	r0, [r7, #4]
 801aff0:	f7f9 fa74 	bl	80144dc <pbuf_free>
}
 801aff4:	3718      	adds	r7, #24
 801aff6:	46bd      	mov	sp, r7
 801aff8:	bdb0      	pop	{r4, r5, r7, pc}
 801affa:	bf00      	nop
 801affc:	0802164c 	.word	0x0802164c
 801b000:	0802179c 	.word	0x0802179c
 801b004:	080216c4 	.word	0x080216c4

0801b008 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801b008:	b580      	push	{r7, lr}
 801b00a:	b086      	sub	sp, #24
 801b00c:	af02      	add	r7, sp, #8
 801b00e:	60f8      	str	r0, [r7, #12]
 801b010:	60b9      	str	r1, [r7, #8]
 801b012:	4613      	mov	r3, r2
 801b014:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801b016:	79fa      	ldrb	r2, [r7, #7]
 801b018:	4944      	ldr	r1, [pc, #272]	@ (801b12c <etharp_output_to_arp_index+0x124>)
 801b01a:	4613      	mov	r3, r2
 801b01c:	005b      	lsls	r3, r3, #1
 801b01e:	4413      	add	r3, r2
 801b020:	00db      	lsls	r3, r3, #3
 801b022:	440b      	add	r3, r1
 801b024:	3314      	adds	r3, #20
 801b026:	781b      	ldrb	r3, [r3, #0]
 801b028:	2b01      	cmp	r3, #1
 801b02a:	d806      	bhi.n	801b03a <etharp_output_to_arp_index+0x32>
 801b02c:	4b40      	ldr	r3, [pc, #256]	@ (801b130 <etharp_output_to_arp_index+0x128>)
 801b02e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801b032:	4940      	ldr	r1, [pc, #256]	@ (801b134 <etharp_output_to_arp_index+0x12c>)
 801b034:	4840      	ldr	r0, [pc, #256]	@ (801b138 <etharp_output_to_arp_index+0x130>)
 801b036:	f003 f84d 	bl	801e0d4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801b03a:	79fa      	ldrb	r2, [r7, #7]
 801b03c:	493b      	ldr	r1, [pc, #236]	@ (801b12c <etharp_output_to_arp_index+0x124>)
 801b03e:	4613      	mov	r3, r2
 801b040:	005b      	lsls	r3, r3, #1
 801b042:	4413      	add	r3, r2
 801b044:	00db      	lsls	r3, r3, #3
 801b046:	440b      	add	r3, r1
 801b048:	3314      	adds	r3, #20
 801b04a:	781b      	ldrb	r3, [r3, #0]
 801b04c:	2b02      	cmp	r3, #2
 801b04e:	d153      	bne.n	801b0f8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801b050:	79fa      	ldrb	r2, [r7, #7]
 801b052:	4936      	ldr	r1, [pc, #216]	@ (801b12c <etharp_output_to_arp_index+0x124>)
 801b054:	4613      	mov	r3, r2
 801b056:	005b      	lsls	r3, r3, #1
 801b058:	4413      	add	r3, r2
 801b05a:	00db      	lsls	r3, r3, #3
 801b05c:	440b      	add	r3, r1
 801b05e:	3312      	adds	r3, #18
 801b060:	881b      	ldrh	r3, [r3, #0]
 801b062:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801b066:	d919      	bls.n	801b09c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801b068:	79fa      	ldrb	r2, [r7, #7]
 801b06a:	4613      	mov	r3, r2
 801b06c:	005b      	lsls	r3, r3, #1
 801b06e:	4413      	add	r3, r2
 801b070:	00db      	lsls	r3, r3, #3
 801b072:	4a2e      	ldr	r2, [pc, #184]	@ (801b12c <etharp_output_to_arp_index+0x124>)
 801b074:	4413      	add	r3, r2
 801b076:	3304      	adds	r3, #4
 801b078:	4619      	mov	r1, r3
 801b07a:	68f8      	ldr	r0, [r7, #12]
 801b07c:	f000 fb4c 	bl	801b718 <etharp_request>
 801b080:	4603      	mov	r3, r0
 801b082:	2b00      	cmp	r3, #0
 801b084:	d138      	bne.n	801b0f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b086:	79fa      	ldrb	r2, [r7, #7]
 801b088:	4928      	ldr	r1, [pc, #160]	@ (801b12c <etharp_output_to_arp_index+0x124>)
 801b08a:	4613      	mov	r3, r2
 801b08c:	005b      	lsls	r3, r3, #1
 801b08e:	4413      	add	r3, r2
 801b090:	00db      	lsls	r3, r3, #3
 801b092:	440b      	add	r3, r1
 801b094:	3314      	adds	r3, #20
 801b096:	2203      	movs	r2, #3
 801b098:	701a      	strb	r2, [r3, #0]
 801b09a:	e02d      	b.n	801b0f8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801b09c:	79fa      	ldrb	r2, [r7, #7]
 801b09e:	4923      	ldr	r1, [pc, #140]	@ (801b12c <etharp_output_to_arp_index+0x124>)
 801b0a0:	4613      	mov	r3, r2
 801b0a2:	005b      	lsls	r3, r3, #1
 801b0a4:	4413      	add	r3, r2
 801b0a6:	00db      	lsls	r3, r3, #3
 801b0a8:	440b      	add	r3, r1
 801b0aa:	3312      	adds	r3, #18
 801b0ac:	881b      	ldrh	r3, [r3, #0]
 801b0ae:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801b0b2:	d321      	bcc.n	801b0f8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801b0b4:	79fa      	ldrb	r2, [r7, #7]
 801b0b6:	4613      	mov	r3, r2
 801b0b8:	005b      	lsls	r3, r3, #1
 801b0ba:	4413      	add	r3, r2
 801b0bc:	00db      	lsls	r3, r3, #3
 801b0be:	4a1b      	ldr	r2, [pc, #108]	@ (801b12c <etharp_output_to_arp_index+0x124>)
 801b0c0:	4413      	add	r3, r2
 801b0c2:	1d19      	adds	r1, r3, #4
 801b0c4:	79fa      	ldrb	r2, [r7, #7]
 801b0c6:	4613      	mov	r3, r2
 801b0c8:	005b      	lsls	r3, r3, #1
 801b0ca:	4413      	add	r3, r2
 801b0cc:	00db      	lsls	r3, r3, #3
 801b0ce:	3308      	adds	r3, #8
 801b0d0:	4a16      	ldr	r2, [pc, #88]	@ (801b12c <etharp_output_to_arp_index+0x124>)
 801b0d2:	4413      	add	r3, r2
 801b0d4:	3304      	adds	r3, #4
 801b0d6:	461a      	mov	r2, r3
 801b0d8:	68f8      	ldr	r0, [r7, #12]
 801b0da:	f000 fafb 	bl	801b6d4 <etharp_request_dst>
 801b0de:	4603      	mov	r3, r0
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	d109      	bne.n	801b0f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b0e4:	79fa      	ldrb	r2, [r7, #7]
 801b0e6:	4911      	ldr	r1, [pc, #68]	@ (801b12c <etharp_output_to_arp_index+0x124>)
 801b0e8:	4613      	mov	r3, r2
 801b0ea:	005b      	lsls	r3, r3, #1
 801b0ec:	4413      	add	r3, r2
 801b0ee:	00db      	lsls	r3, r3, #3
 801b0f0:	440b      	add	r3, r1
 801b0f2:	3314      	adds	r3, #20
 801b0f4:	2203      	movs	r2, #3
 801b0f6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801b0f8:	68fb      	ldr	r3, [r7, #12]
 801b0fa:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801b0fe:	79fa      	ldrb	r2, [r7, #7]
 801b100:	4613      	mov	r3, r2
 801b102:	005b      	lsls	r3, r3, #1
 801b104:	4413      	add	r3, r2
 801b106:	00db      	lsls	r3, r3, #3
 801b108:	3308      	adds	r3, #8
 801b10a:	4a08      	ldr	r2, [pc, #32]	@ (801b12c <etharp_output_to_arp_index+0x124>)
 801b10c:	4413      	add	r3, r2
 801b10e:	3304      	adds	r3, #4
 801b110:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b114:	9200      	str	r2, [sp, #0]
 801b116:	460a      	mov	r2, r1
 801b118:	68b9      	ldr	r1, [r7, #8]
 801b11a:	68f8      	ldr	r0, [r7, #12]
 801b11c:	f001 fe40 	bl	801cda0 <ethernet_output>
 801b120:	4603      	mov	r3, r0
}
 801b122:	4618      	mov	r0, r3
 801b124:	3710      	adds	r7, #16
 801b126:	46bd      	mov	sp, r7
 801b128:	bd80      	pop	{r7, pc}
 801b12a:	bf00      	nop
 801b12c:	20027810 	.word	0x20027810
 801b130:	0802164c 	.word	0x0802164c
 801b134:	080217bc 	.word	0x080217bc
 801b138:	080216c4 	.word	0x080216c4

0801b13c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801b13c:	b580      	push	{r7, lr}
 801b13e:	b08a      	sub	sp, #40	@ 0x28
 801b140:	af02      	add	r7, sp, #8
 801b142:	60f8      	str	r0, [r7, #12]
 801b144:	60b9      	str	r1, [r7, #8]
 801b146:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b14c:	68fb      	ldr	r3, [r7, #12]
 801b14e:	2b00      	cmp	r3, #0
 801b150:	d106      	bne.n	801b160 <etharp_output+0x24>
 801b152:	4b73      	ldr	r3, [pc, #460]	@ (801b320 <etharp_output+0x1e4>)
 801b154:	f240 321e 	movw	r2, #798	@ 0x31e
 801b158:	4972      	ldr	r1, [pc, #456]	@ (801b324 <etharp_output+0x1e8>)
 801b15a:	4873      	ldr	r0, [pc, #460]	@ (801b328 <etharp_output+0x1ec>)
 801b15c:	f002 ffba 	bl	801e0d4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801b160:	68bb      	ldr	r3, [r7, #8]
 801b162:	2b00      	cmp	r3, #0
 801b164:	d106      	bne.n	801b174 <etharp_output+0x38>
 801b166:	4b6e      	ldr	r3, [pc, #440]	@ (801b320 <etharp_output+0x1e4>)
 801b168:	f240 321f 	movw	r2, #799	@ 0x31f
 801b16c:	496f      	ldr	r1, [pc, #444]	@ (801b32c <etharp_output+0x1f0>)
 801b16e:	486e      	ldr	r0, [pc, #440]	@ (801b328 <etharp_output+0x1ec>)
 801b170:	f002 ffb0 	bl	801e0d4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	2b00      	cmp	r3, #0
 801b178:	d106      	bne.n	801b188 <etharp_output+0x4c>
 801b17a:	4b69      	ldr	r3, [pc, #420]	@ (801b320 <etharp_output+0x1e4>)
 801b17c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801b180:	496b      	ldr	r1, [pc, #428]	@ (801b330 <etharp_output+0x1f4>)
 801b182:	4869      	ldr	r0, [pc, #420]	@ (801b328 <etharp_output+0x1ec>)
 801b184:	f002 ffa6 	bl	801e0d4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	681b      	ldr	r3, [r3, #0]
 801b18c:	68f9      	ldr	r1, [r7, #12]
 801b18e:	4618      	mov	r0, r3
 801b190:	f000 fef8 	bl	801bf84 <ip4_addr_isbroadcast_u32>
 801b194:	4603      	mov	r3, r0
 801b196:	2b00      	cmp	r3, #0
 801b198:	d002      	beq.n	801b1a0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801b19a:	4b66      	ldr	r3, [pc, #408]	@ (801b334 <etharp_output+0x1f8>)
 801b19c:	61fb      	str	r3, [r7, #28]
 801b19e:	e0af      	b.n	801b300 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	681b      	ldr	r3, [r3, #0]
 801b1a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b1a8:	2be0      	cmp	r3, #224	@ 0xe0
 801b1aa:	d118      	bne.n	801b1de <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801b1ac:	2301      	movs	r3, #1
 801b1ae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801b1b0:	2300      	movs	r3, #0
 801b1b2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801b1b4:	235e      	movs	r3, #94	@ 0x5e
 801b1b6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	3301      	adds	r3, #1
 801b1bc:	781b      	ldrb	r3, [r3, #0]
 801b1be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b1c2:	b2db      	uxtb	r3, r3
 801b1c4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	3302      	adds	r3, #2
 801b1ca:	781b      	ldrb	r3, [r3, #0]
 801b1cc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	3303      	adds	r3, #3
 801b1d2:	781b      	ldrb	r3, [r3, #0]
 801b1d4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801b1d6:	f107 0310 	add.w	r3, r7, #16
 801b1da:	61fb      	str	r3, [r7, #28]
 801b1dc:	e090      	b.n	801b300 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	681a      	ldr	r2, [r3, #0]
 801b1e2:	68fb      	ldr	r3, [r7, #12]
 801b1e4:	3304      	adds	r3, #4
 801b1e6:	681b      	ldr	r3, [r3, #0]
 801b1e8:	405a      	eors	r2, r3
 801b1ea:	68fb      	ldr	r3, [r7, #12]
 801b1ec:	3308      	adds	r3, #8
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	4013      	ands	r3, r2
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	d012      	beq.n	801b21c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	681b      	ldr	r3, [r3, #0]
 801b1fa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b1fc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801b200:	4293      	cmp	r3, r2
 801b202:	d00b      	beq.n	801b21c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801b204:	68fb      	ldr	r3, [r7, #12]
 801b206:	330c      	adds	r3, #12
 801b208:	681b      	ldr	r3, [r3, #0]
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	d003      	beq.n	801b216 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801b20e:	68fb      	ldr	r3, [r7, #12]
 801b210:	330c      	adds	r3, #12
 801b212:	61bb      	str	r3, [r7, #24]
 801b214:	e002      	b.n	801b21c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801b216:	f06f 0303 	mvn.w	r3, #3
 801b21a:	e07d      	b.n	801b318 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b21c:	4b46      	ldr	r3, [pc, #280]	@ (801b338 <etharp_output+0x1fc>)
 801b21e:	781b      	ldrb	r3, [r3, #0]
 801b220:	4619      	mov	r1, r3
 801b222:	4a46      	ldr	r2, [pc, #280]	@ (801b33c <etharp_output+0x200>)
 801b224:	460b      	mov	r3, r1
 801b226:	005b      	lsls	r3, r3, #1
 801b228:	440b      	add	r3, r1
 801b22a:	00db      	lsls	r3, r3, #3
 801b22c:	4413      	add	r3, r2
 801b22e:	3314      	adds	r3, #20
 801b230:	781b      	ldrb	r3, [r3, #0]
 801b232:	2b01      	cmp	r3, #1
 801b234:	d925      	bls.n	801b282 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b236:	4b40      	ldr	r3, [pc, #256]	@ (801b338 <etharp_output+0x1fc>)
 801b238:	781b      	ldrb	r3, [r3, #0]
 801b23a:	4619      	mov	r1, r3
 801b23c:	4a3f      	ldr	r2, [pc, #252]	@ (801b33c <etharp_output+0x200>)
 801b23e:	460b      	mov	r3, r1
 801b240:	005b      	lsls	r3, r3, #1
 801b242:	440b      	add	r3, r1
 801b244:	00db      	lsls	r3, r3, #3
 801b246:	4413      	add	r3, r2
 801b248:	3308      	adds	r3, #8
 801b24a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b24c:	68fa      	ldr	r2, [r7, #12]
 801b24e:	429a      	cmp	r2, r3
 801b250:	d117      	bne.n	801b282 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801b252:	69bb      	ldr	r3, [r7, #24]
 801b254:	681a      	ldr	r2, [r3, #0]
 801b256:	4b38      	ldr	r3, [pc, #224]	@ (801b338 <etharp_output+0x1fc>)
 801b258:	781b      	ldrb	r3, [r3, #0]
 801b25a:	4618      	mov	r0, r3
 801b25c:	4937      	ldr	r1, [pc, #220]	@ (801b33c <etharp_output+0x200>)
 801b25e:	4603      	mov	r3, r0
 801b260:	005b      	lsls	r3, r3, #1
 801b262:	4403      	add	r3, r0
 801b264:	00db      	lsls	r3, r3, #3
 801b266:	440b      	add	r3, r1
 801b268:	3304      	adds	r3, #4
 801b26a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b26c:	429a      	cmp	r2, r3
 801b26e:	d108      	bne.n	801b282 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801b270:	4b31      	ldr	r3, [pc, #196]	@ (801b338 <etharp_output+0x1fc>)
 801b272:	781b      	ldrb	r3, [r3, #0]
 801b274:	461a      	mov	r2, r3
 801b276:	68b9      	ldr	r1, [r7, #8]
 801b278:	68f8      	ldr	r0, [r7, #12]
 801b27a:	f7ff fec5 	bl	801b008 <etharp_output_to_arp_index>
 801b27e:	4603      	mov	r3, r0
 801b280:	e04a      	b.n	801b318 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b282:	2300      	movs	r3, #0
 801b284:	75fb      	strb	r3, [r7, #23]
 801b286:	e031      	b.n	801b2ec <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b288:	7dfa      	ldrb	r2, [r7, #23]
 801b28a:	492c      	ldr	r1, [pc, #176]	@ (801b33c <etharp_output+0x200>)
 801b28c:	4613      	mov	r3, r2
 801b28e:	005b      	lsls	r3, r3, #1
 801b290:	4413      	add	r3, r2
 801b292:	00db      	lsls	r3, r3, #3
 801b294:	440b      	add	r3, r1
 801b296:	3314      	adds	r3, #20
 801b298:	781b      	ldrb	r3, [r3, #0]
 801b29a:	2b01      	cmp	r3, #1
 801b29c:	d923      	bls.n	801b2e6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801b29e:	7dfa      	ldrb	r2, [r7, #23]
 801b2a0:	4926      	ldr	r1, [pc, #152]	@ (801b33c <etharp_output+0x200>)
 801b2a2:	4613      	mov	r3, r2
 801b2a4:	005b      	lsls	r3, r3, #1
 801b2a6:	4413      	add	r3, r2
 801b2a8:	00db      	lsls	r3, r3, #3
 801b2aa:	440b      	add	r3, r1
 801b2ac:	3308      	adds	r3, #8
 801b2ae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b2b0:	68fa      	ldr	r2, [r7, #12]
 801b2b2:	429a      	cmp	r2, r3
 801b2b4:	d117      	bne.n	801b2e6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801b2b6:	69bb      	ldr	r3, [r7, #24]
 801b2b8:	6819      	ldr	r1, [r3, #0]
 801b2ba:	7dfa      	ldrb	r2, [r7, #23]
 801b2bc:	481f      	ldr	r0, [pc, #124]	@ (801b33c <etharp_output+0x200>)
 801b2be:	4613      	mov	r3, r2
 801b2c0:	005b      	lsls	r3, r3, #1
 801b2c2:	4413      	add	r3, r2
 801b2c4:	00db      	lsls	r3, r3, #3
 801b2c6:	4403      	add	r3, r0
 801b2c8:	3304      	adds	r3, #4
 801b2ca:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801b2cc:	4299      	cmp	r1, r3
 801b2ce:	d10a      	bne.n	801b2e6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801b2d0:	4a19      	ldr	r2, [pc, #100]	@ (801b338 <etharp_output+0x1fc>)
 801b2d2:	7dfb      	ldrb	r3, [r7, #23]
 801b2d4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801b2d6:	7dfb      	ldrb	r3, [r7, #23]
 801b2d8:	461a      	mov	r2, r3
 801b2da:	68b9      	ldr	r1, [r7, #8]
 801b2dc:	68f8      	ldr	r0, [r7, #12]
 801b2de:	f7ff fe93 	bl	801b008 <etharp_output_to_arp_index>
 801b2e2:	4603      	mov	r3, r0
 801b2e4:	e018      	b.n	801b318 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b2e6:	7dfb      	ldrb	r3, [r7, #23]
 801b2e8:	3301      	adds	r3, #1
 801b2ea:	75fb      	strb	r3, [r7, #23]
 801b2ec:	7dfb      	ldrb	r3, [r7, #23]
 801b2ee:	2b09      	cmp	r3, #9
 801b2f0:	d9ca      	bls.n	801b288 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801b2f2:	68ba      	ldr	r2, [r7, #8]
 801b2f4:	69b9      	ldr	r1, [r7, #24]
 801b2f6:	68f8      	ldr	r0, [r7, #12]
 801b2f8:	f000 f822 	bl	801b340 <etharp_query>
 801b2fc:	4603      	mov	r3, r0
 801b2fe:	e00b      	b.n	801b318 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801b300:	68fb      	ldr	r3, [r7, #12]
 801b302:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801b306:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b30a:	9300      	str	r3, [sp, #0]
 801b30c:	69fb      	ldr	r3, [r7, #28]
 801b30e:	68b9      	ldr	r1, [r7, #8]
 801b310:	68f8      	ldr	r0, [r7, #12]
 801b312:	f001 fd45 	bl	801cda0 <ethernet_output>
 801b316:	4603      	mov	r3, r0
}
 801b318:	4618      	mov	r0, r3
 801b31a:	3720      	adds	r7, #32
 801b31c:	46bd      	mov	sp, r7
 801b31e:	bd80      	pop	{r7, pc}
 801b320:	0802164c 	.word	0x0802164c
 801b324:	0802179c 	.word	0x0802179c
 801b328:	080216c4 	.word	0x080216c4
 801b32c:	080217ec 	.word	0x080217ec
 801b330:	0802178c 	.word	0x0802178c
 801b334:	08022334 	.word	0x08022334
 801b338:	20027900 	.word	0x20027900
 801b33c:	20027810 	.word	0x20027810

0801b340 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801b340:	b580      	push	{r7, lr}
 801b342:	b08c      	sub	sp, #48	@ 0x30
 801b344:	af02      	add	r7, sp, #8
 801b346:	60f8      	str	r0, [r7, #12]
 801b348:	60b9      	str	r1, [r7, #8]
 801b34a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801b34c:	68fb      	ldr	r3, [r7, #12]
 801b34e:	3326      	adds	r3, #38	@ 0x26
 801b350:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801b352:	23ff      	movs	r3, #255	@ 0xff
 801b354:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801b358:	2300      	movs	r3, #0
 801b35a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b35c:	68bb      	ldr	r3, [r7, #8]
 801b35e:	681b      	ldr	r3, [r3, #0]
 801b360:	68f9      	ldr	r1, [r7, #12]
 801b362:	4618      	mov	r0, r3
 801b364:	f000 fe0e 	bl	801bf84 <ip4_addr_isbroadcast_u32>
 801b368:	4603      	mov	r3, r0
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d10c      	bne.n	801b388 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b36e:	68bb      	ldr	r3, [r7, #8]
 801b370:	681b      	ldr	r3, [r3, #0]
 801b372:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b376:	2be0      	cmp	r3, #224	@ 0xe0
 801b378:	d006      	beq.n	801b388 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b37a:	68bb      	ldr	r3, [r7, #8]
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	d003      	beq.n	801b388 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801b380:	68bb      	ldr	r3, [r7, #8]
 801b382:	681b      	ldr	r3, [r3, #0]
 801b384:	2b00      	cmp	r3, #0
 801b386:	d102      	bne.n	801b38e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b388:	f06f 030f 	mvn.w	r3, #15
 801b38c:	e101      	b.n	801b592 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801b38e:	68fa      	ldr	r2, [r7, #12]
 801b390:	2101      	movs	r1, #1
 801b392:	68b8      	ldr	r0, [r7, #8]
 801b394:	f7ff fb60 	bl	801aa58 <etharp_find_entry>
 801b398:	4603      	mov	r3, r0
 801b39a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801b39c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	da02      	bge.n	801b3aa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801b3a4:	8a7b      	ldrh	r3, [r7, #18]
 801b3a6:	b25b      	sxtb	r3, r3
 801b3a8:	e0f3      	b.n	801b592 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801b3aa:	8a7b      	ldrh	r3, [r7, #18]
 801b3ac:	2b7e      	cmp	r3, #126	@ 0x7e
 801b3ae:	d906      	bls.n	801b3be <etharp_query+0x7e>
 801b3b0:	4b7a      	ldr	r3, [pc, #488]	@ (801b59c <etharp_query+0x25c>)
 801b3b2:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801b3b6:	497a      	ldr	r1, [pc, #488]	@ (801b5a0 <etharp_query+0x260>)
 801b3b8:	487a      	ldr	r0, [pc, #488]	@ (801b5a4 <etharp_query+0x264>)
 801b3ba:	f002 fe8b 	bl	801e0d4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801b3be:	8a7b      	ldrh	r3, [r7, #18]
 801b3c0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801b3c2:	7c7a      	ldrb	r2, [r7, #17]
 801b3c4:	4978      	ldr	r1, [pc, #480]	@ (801b5a8 <etharp_query+0x268>)
 801b3c6:	4613      	mov	r3, r2
 801b3c8:	005b      	lsls	r3, r3, #1
 801b3ca:	4413      	add	r3, r2
 801b3cc:	00db      	lsls	r3, r3, #3
 801b3ce:	440b      	add	r3, r1
 801b3d0:	3314      	adds	r3, #20
 801b3d2:	781b      	ldrb	r3, [r3, #0]
 801b3d4:	2b00      	cmp	r3, #0
 801b3d6:	d115      	bne.n	801b404 <etharp_query+0xc4>
    is_new_entry = 1;
 801b3d8:	2301      	movs	r3, #1
 801b3da:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801b3dc:	7c7a      	ldrb	r2, [r7, #17]
 801b3de:	4972      	ldr	r1, [pc, #456]	@ (801b5a8 <etharp_query+0x268>)
 801b3e0:	4613      	mov	r3, r2
 801b3e2:	005b      	lsls	r3, r3, #1
 801b3e4:	4413      	add	r3, r2
 801b3e6:	00db      	lsls	r3, r3, #3
 801b3e8:	440b      	add	r3, r1
 801b3ea:	3314      	adds	r3, #20
 801b3ec:	2201      	movs	r2, #1
 801b3ee:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801b3f0:	7c7a      	ldrb	r2, [r7, #17]
 801b3f2:	496d      	ldr	r1, [pc, #436]	@ (801b5a8 <etharp_query+0x268>)
 801b3f4:	4613      	mov	r3, r2
 801b3f6:	005b      	lsls	r3, r3, #1
 801b3f8:	4413      	add	r3, r2
 801b3fa:	00db      	lsls	r3, r3, #3
 801b3fc:	440b      	add	r3, r1
 801b3fe:	3308      	adds	r3, #8
 801b400:	68fa      	ldr	r2, [r7, #12]
 801b402:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801b404:	7c7a      	ldrb	r2, [r7, #17]
 801b406:	4968      	ldr	r1, [pc, #416]	@ (801b5a8 <etharp_query+0x268>)
 801b408:	4613      	mov	r3, r2
 801b40a:	005b      	lsls	r3, r3, #1
 801b40c:	4413      	add	r3, r2
 801b40e:	00db      	lsls	r3, r3, #3
 801b410:	440b      	add	r3, r1
 801b412:	3314      	adds	r3, #20
 801b414:	781b      	ldrb	r3, [r3, #0]
 801b416:	2b01      	cmp	r3, #1
 801b418:	d011      	beq.n	801b43e <etharp_query+0xfe>
 801b41a:	7c7a      	ldrb	r2, [r7, #17]
 801b41c:	4962      	ldr	r1, [pc, #392]	@ (801b5a8 <etharp_query+0x268>)
 801b41e:	4613      	mov	r3, r2
 801b420:	005b      	lsls	r3, r3, #1
 801b422:	4413      	add	r3, r2
 801b424:	00db      	lsls	r3, r3, #3
 801b426:	440b      	add	r3, r1
 801b428:	3314      	adds	r3, #20
 801b42a:	781b      	ldrb	r3, [r3, #0]
 801b42c:	2b01      	cmp	r3, #1
 801b42e:	d806      	bhi.n	801b43e <etharp_query+0xfe>
 801b430:	4b5a      	ldr	r3, [pc, #360]	@ (801b59c <etharp_query+0x25c>)
 801b432:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801b436:	495d      	ldr	r1, [pc, #372]	@ (801b5ac <etharp_query+0x26c>)
 801b438:	485a      	ldr	r0, [pc, #360]	@ (801b5a4 <etharp_query+0x264>)
 801b43a:	f002 fe4b 	bl	801e0d4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801b43e:	6a3b      	ldr	r3, [r7, #32]
 801b440:	2b00      	cmp	r3, #0
 801b442:	d102      	bne.n	801b44a <etharp_query+0x10a>
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	2b00      	cmp	r3, #0
 801b448:	d10c      	bne.n	801b464 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801b44a:	68b9      	ldr	r1, [r7, #8]
 801b44c:	68f8      	ldr	r0, [r7, #12]
 801b44e:	f000 f963 	bl	801b718 <etharp_request>
 801b452:	4603      	mov	r3, r0
 801b454:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	2b00      	cmp	r3, #0
 801b45c:	d102      	bne.n	801b464 <etharp_query+0x124>
      return result;
 801b45e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801b462:	e096      	b.n	801b592 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	2b00      	cmp	r3, #0
 801b468:	d106      	bne.n	801b478 <etharp_query+0x138>
 801b46a:	4b4c      	ldr	r3, [pc, #304]	@ (801b59c <etharp_query+0x25c>)
 801b46c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801b470:	494f      	ldr	r1, [pc, #316]	@ (801b5b0 <etharp_query+0x270>)
 801b472:	484c      	ldr	r0, [pc, #304]	@ (801b5a4 <etharp_query+0x264>)
 801b474:	f002 fe2e 	bl	801e0d4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801b478:	7c7a      	ldrb	r2, [r7, #17]
 801b47a:	494b      	ldr	r1, [pc, #300]	@ (801b5a8 <etharp_query+0x268>)
 801b47c:	4613      	mov	r3, r2
 801b47e:	005b      	lsls	r3, r3, #1
 801b480:	4413      	add	r3, r2
 801b482:	00db      	lsls	r3, r3, #3
 801b484:	440b      	add	r3, r1
 801b486:	3314      	adds	r3, #20
 801b488:	781b      	ldrb	r3, [r3, #0]
 801b48a:	2b01      	cmp	r3, #1
 801b48c:	d917      	bls.n	801b4be <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801b48e:	4a49      	ldr	r2, [pc, #292]	@ (801b5b4 <etharp_query+0x274>)
 801b490:	7c7b      	ldrb	r3, [r7, #17]
 801b492:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801b494:	7c7a      	ldrb	r2, [r7, #17]
 801b496:	4613      	mov	r3, r2
 801b498:	005b      	lsls	r3, r3, #1
 801b49a:	4413      	add	r3, r2
 801b49c:	00db      	lsls	r3, r3, #3
 801b49e:	3308      	adds	r3, #8
 801b4a0:	4a41      	ldr	r2, [pc, #260]	@ (801b5a8 <etharp_query+0x268>)
 801b4a2:	4413      	add	r3, r2
 801b4a4:	3304      	adds	r3, #4
 801b4a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b4aa:	9200      	str	r2, [sp, #0]
 801b4ac:	697a      	ldr	r2, [r7, #20]
 801b4ae:	6879      	ldr	r1, [r7, #4]
 801b4b0:	68f8      	ldr	r0, [r7, #12]
 801b4b2:	f001 fc75 	bl	801cda0 <ethernet_output>
 801b4b6:	4603      	mov	r3, r0
 801b4b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b4bc:	e067      	b.n	801b58e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b4be:	7c7a      	ldrb	r2, [r7, #17]
 801b4c0:	4939      	ldr	r1, [pc, #228]	@ (801b5a8 <etharp_query+0x268>)
 801b4c2:	4613      	mov	r3, r2
 801b4c4:	005b      	lsls	r3, r3, #1
 801b4c6:	4413      	add	r3, r2
 801b4c8:	00db      	lsls	r3, r3, #3
 801b4ca:	440b      	add	r3, r1
 801b4cc:	3314      	adds	r3, #20
 801b4ce:	781b      	ldrb	r3, [r3, #0]
 801b4d0:	2b01      	cmp	r3, #1
 801b4d2:	d15c      	bne.n	801b58e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801b4d4:	2300      	movs	r3, #0
 801b4d6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b4dc:	e01c      	b.n	801b518 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801b4de:	69fb      	ldr	r3, [r7, #28]
 801b4e0:	895a      	ldrh	r2, [r3, #10]
 801b4e2:	69fb      	ldr	r3, [r7, #28]
 801b4e4:	891b      	ldrh	r3, [r3, #8]
 801b4e6:	429a      	cmp	r2, r3
 801b4e8:	d10a      	bne.n	801b500 <etharp_query+0x1c0>
 801b4ea:	69fb      	ldr	r3, [r7, #28]
 801b4ec:	681b      	ldr	r3, [r3, #0]
 801b4ee:	2b00      	cmp	r3, #0
 801b4f0:	d006      	beq.n	801b500 <etharp_query+0x1c0>
 801b4f2:	4b2a      	ldr	r3, [pc, #168]	@ (801b59c <etharp_query+0x25c>)
 801b4f4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801b4f8:	492f      	ldr	r1, [pc, #188]	@ (801b5b8 <etharp_query+0x278>)
 801b4fa:	482a      	ldr	r0, [pc, #168]	@ (801b5a4 <etharp_query+0x264>)
 801b4fc:	f002 fdea 	bl	801e0d4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801b500:	69fb      	ldr	r3, [r7, #28]
 801b502:	7b1b      	ldrb	r3, [r3, #12]
 801b504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b508:	2b00      	cmp	r3, #0
 801b50a:	d002      	beq.n	801b512 <etharp_query+0x1d2>
        copy_needed = 1;
 801b50c:	2301      	movs	r3, #1
 801b50e:	61bb      	str	r3, [r7, #24]
        break;
 801b510:	e005      	b.n	801b51e <etharp_query+0x1de>
      }
      p = p->next;
 801b512:	69fb      	ldr	r3, [r7, #28]
 801b514:	681b      	ldr	r3, [r3, #0]
 801b516:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b518:	69fb      	ldr	r3, [r7, #28]
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	d1df      	bne.n	801b4de <etharp_query+0x19e>
    }
    if (copy_needed) {
 801b51e:	69bb      	ldr	r3, [r7, #24]
 801b520:	2b00      	cmp	r3, #0
 801b522:	d007      	beq.n	801b534 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801b524:	687a      	ldr	r2, [r7, #4]
 801b526:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801b52a:	200e      	movs	r0, #14
 801b52c:	f7f9 fa4e 	bl	80149cc <pbuf_clone>
 801b530:	61f8      	str	r0, [r7, #28]
 801b532:	e004      	b.n	801b53e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801b538:	69f8      	ldr	r0, [r7, #28]
 801b53a:	f7f9 f875 	bl	8014628 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801b53e:	69fb      	ldr	r3, [r7, #28]
 801b540:	2b00      	cmp	r3, #0
 801b542:	d021      	beq.n	801b588 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801b544:	7c7a      	ldrb	r2, [r7, #17]
 801b546:	4918      	ldr	r1, [pc, #96]	@ (801b5a8 <etharp_query+0x268>)
 801b548:	4613      	mov	r3, r2
 801b54a:	005b      	lsls	r3, r3, #1
 801b54c:	4413      	add	r3, r2
 801b54e:	00db      	lsls	r3, r3, #3
 801b550:	440b      	add	r3, r1
 801b552:	681b      	ldr	r3, [r3, #0]
 801b554:	2b00      	cmp	r3, #0
 801b556:	d00a      	beq.n	801b56e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801b558:	7c7a      	ldrb	r2, [r7, #17]
 801b55a:	4913      	ldr	r1, [pc, #76]	@ (801b5a8 <etharp_query+0x268>)
 801b55c:	4613      	mov	r3, r2
 801b55e:	005b      	lsls	r3, r3, #1
 801b560:	4413      	add	r3, r2
 801b562:	00db      	lsls	r3, r3, #3
 801b564:	440b      	add	r3, r1
 801b566:	681b      	ldr	r3, [r3, #0]
 801b568:	4618      	mov	r0, r3
 801b56a:	f7f8 ffb7 	bl	80144dc <pbuf_free>
      }
      arp_table[i].q = p;
 801b56e:	7c7a      	ldrb	r2, [r7, #17]
 801b570:	490d      	ldr	r1, [pc, #52]	@ (801b5a8 <etharp_query+0x268>)
 801b572:	4613      	mov	r3, r2
 801b574:	005b      	lsls	r3, r3, #1
 801b576:	4413      	add	r3, r2
 801b578:	00db      	lsls	r3, r3, #3
 801b57a:	440b      	add	r3, r1
 801b57c:	69fa      	ldr	r2, [r7, #28]
 801b57e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801b580:	2300      	movs	r3, #0
 801b582:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b586:	e002      	b.n	801b58e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801b588:	23ff      	movs	r3, #255	@ 0xff
 801b58a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801b58e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801b592:	4618      	mov	r0, r3
 801b594:	3728      	adds	r7, #40	@ 0x28
 801b596:	46bd      	mov	sp, r7
 801b598:	bd80      	pop	{r7, pc}
 801b59a:	bf00      	nop
 801b59c:	0802164c 	.word	0x0802164c
 801b5a0:	080217f8 	.word	0x080217f8
 801b5a4:	080216c4 	.word	0x080216c4
 801b5a8:	20027810 	.word	0x20027810
 801b5ac:	08021808 	.word	0x08021808
 801b5b0:	080217ec 	.word	0x080217ec
 801b5b4:	20027900 	.word	0x20027900
 801b5b8:	08021830 	.word	0x08021830

0801b5bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801b5bc:	b580      	push	{r7, lr}
 801b5be:	b08a      	sub	sp, #40	@ 0x28
 801b5c0:	af02      	add	r7, sp, #8
 801b5c2:	60f8      	str	r0, [r7, #12]
 801b5c4:	60b9      	str	r1, [r7, #8]
 801b5c6:	607a      	str	r2, [r7, #4]
 801b5c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801b5ca:	2300      	movs	r3, #0
 801b5cc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b5ce:	68fb      	ldr	r3, [r7, #12]
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d106      	bne.n	801b5e2 <etharp_raw+0x26>
 801b5d4:	4b3a      	ldr	r3, [pc, #232]	@ (801b6c0 <etharp_raw+0x104>)
 801b5d6:	f240 4257 	movw	r2, #1111	@ 0x457
 801b5da:	493a      	ldr	r1, [pc, #232]	@ (801b6c4 <etharp_raw+0x108>)
 801b5dc:	483a      	ldr	r0, [pc, #232]	@ (801b6c8 <etharp_raw+0x10c>)
 801b5de:	f002 fd79 	bl	801e0d4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801b5e2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b5e6:	211c      	movs	r1, #28
 801b5e8:	200e      	movs	r0, #14
 801b5ea:	f7f8 fc93 	bl	8013f14 <pbuf_alloc>
 801b5ee:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801b5f0:	69bb      	ldr	r3, [r7, #24]
 801b5f2:	2b00      	cmp	r3, #0
 801b5f4:	d102      	bne.n	801b5fc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801b5f6:	f04f 33ff 	mov.w	r3, #4294967295
 801b5fa:	e05d      	b.n	801b6b8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801b5fc:	69bb      	ldr	r3, [r7, #24]
 801b5fe:	895b      	ldrh	r3, [r3, #10]
 801b600:	2b1b      	cmp	r3, #27
 801b602:	d806      	bhi.n	801b612 <etharp_raw+0x56>
 801b604:	4b2e      	ldr	r3, [pc, #184]	@ (801b6c0 <etharp_raw+0x104>)
 801b606:	f240 4262 	movw	r2, #1122	@ 0x462
 801b60a:	4930      	ldr	r1, [pc, #192]	@ (801b6cc <etharp_raw+0x110>)
 801b60c:	482e      	ldr	r0, [pc, #184]	@ (801b6c8 <etharp_raw+0x10c>)
 801b60e:	f002 fd61 	bl	801e0d4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801b612:	69bb      	ldr	r3, [r7, #24]
 801b614:	685b      	ldr	r3, [r3, #4]
 801b616:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801b618:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801b61a:	4618      	mov	r0, r3
 801b61c:	f7f7 fb70 	bl	8012d00 <lwip_htons>
 801b620:	4603      	mov	r3, r0
 801b622:	461a      	mov	r2, r3
 801b624:	697b      	ldr	r3, [r7, #20]
 801b626:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801b628:	68fb      	ldr	r3, [r7, #12]
 801b62a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801b62e:	2b06      	cmp	r3, #6
 801b630:	d006      	beq.n	801b640 <etharp_raw+0x84>
 801b632:	4b23      	ldr	r3, [pc, #140]	@ (801b6c0 <etharp_raw+0x104>)
 801b634:	f240 4269 	movw	r2, #1129	@ 0x469
 801b638:	4925      	ldr	r1, [pc, #148]	@ (801b6d0 <etharp_raw+0x114>)
 801b63a:	4823      	ldr	r0, [pc, #140]	@ (801b6c8 <etharp_raw+0x10c>)
 801b63c:	f002 fd4a 	bl	801e0d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801b640:	697b      	ldr	r3, [r7, #20]
 801b642:	3308      	adds	r3, #8
 801b644:	2206      	movs	r2, #6
 801b646:	6839      	ldr	r1, [r7, #0]
 801b648:	4618      	mov	r0, r3
 801b64a:	f002 ff6e 	bl	801e52a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801b64e:	697b      	ldr	r3, [r7, #20]
 801b650:	3312      	adds	r3, #18
 801b652:	2206      	movs	r2, #6
 801b654:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b656:	4618      	mov	r0, r3
 801b658:	f002 ff67 	bl	801e52a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801b65c:	697b      	ldr	r3, [r7, #20]
 801b65e:	330e      	adds	r3, #14
 801b660:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b662:	6812      	ldr	r2, [r2, #0]
 801b664:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801b666:	697b      	ldr	r3, [r7, #20]
 801b668:	3318      	adds	r3, #24
 801b66a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b66c:	6812      	ldr	r2, [r2, #0]
 801b66e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801b670:	697b      	ldr	r3, [r7, #20]
 801b672:	2200      	movs	r2, #0
 801b674:	701a      	strb	r2, [r3, #0]
 801b676:	2200      	movs	r2, #0
 801b678:	f042 0201 	orr.w	r2, r2, #1
 801b67c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801b67e:	697b      	ldr	r3, [r7, #20]
 801b680:	2200      	movs	r2, #0
 801b682:	f042 0208 	orr.w	r2, r2, #8
 801b686:	709a      	strb	r2, [r3, #2]
 801b688:	2200      	movs	r2, #0
 801b68a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801b68c:	697b      	ldr	r3, [r7, #20]
 801b68e:	2206      	movs	r2, #6
 801b690:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801b692:	697b      	ldr	r3, [r7, #20]
 801b694:	2204      	movs	r2, #4
 801b696:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801b698:	f640 0306 	movw	r3, #2054	@ 0x806
 801b69c:	9300      	str	r3, [sp, #0]
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	68ba      	ldr	r2, [r7, #8]
 801b6a2:	69b9      	ldr	r1, [r7, #24]
 801b6a4:	68f8      	ldr	r0, [r7, #12]
 801b6a6:	f001 fb7b 	bl	801cda0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801b6aa:	69b8      	ldr	r0, [r7, #24]
 801b6ac:	f7f8 ff16 	bl	80144dc <pbuf_free>
  p = NULL;
 801b6b0:	2300      	movs	r3, #0
 801b6b2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801b6b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b6b8:	4618      	mov	r0, r3
 801b6ba:	3720      	adds	r7, #32
 801b6bc:	46bd      	mov	sp, r7
 801b6be:	bd80      	pop	{r7, pc}
 801b6c0:	0802164c 	.word	0x0802164c
 801b6c4:	0802179c 	.word	0x0802179c
 801b6c8:	080216c4 	.word	0x080216c4
 801b6cc:	0802184c 	.word	0x0802184c
 801b6d0:	08021880 	.word	0x08021880

0801b6d4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801b6d4:	b580      	push	{r7, lr}
 801b6d6:	b088      	sub	sp, #32
 801b6d8:	af04      	add	r7, sp, #16
 801b6da:	60f8      	str	r0, [r7, #12]
 801b6dc:	60b9      	str	r1, [r7, #8]
 801b6de:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b6e0:	68fb      	ldr	r3, [r7, #12]
 801b6e2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b6e6:	68fb      	ldr	r3, [r7, #12]
 801b6e8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801b6ec:	68fb      	ldr	r3, [r7, #12]
 801b6ee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b6f0:	2201      	movs	r2, #1
 801b6f2:	9203      	str	r2, [sp, #12]
 801b6f4:	68ba      	ldr	r2, [r7, #8]
 801b6f6:	9202      	str	r2, [sp, #8]
 801b6f8:	4a06      	ldr	r2, [pc, #24]	@ (801b714 <etharp_request_dst+0x40>)
 801b6fa:	9201      	str	r2, [sp, #4]
 801b6fc:	9300      	str	r3, [sp, #0]
 801b6fe:	4603      	mov	r3, r0
 801b700:	687a      	ldr	r2, [r7, #4]
 801b702:	68f8      	ldr	r0, [r7, #12]
 801b704:	f7ff ff5a 	bl	801b5bc <etharp_raw>
 801b708:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801b70a:	4618      	mov	r0, r3
 801b70c:	3710      	adds	r7, #16
 801b70e:	46bd      	mov	sp, r7
 801b710:	bd80      	pop	{r7, pc}
 801b712:	bf00      	nop
 801b714:	0802233c 	.word	0x0802233c

0801b718 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801b718:	b580      	push	{r7, lr}
 801b71a:	b082      	sub	sp, #8
 801b71c:	af00      	add	r7, sp, #0
 801b71e:	6078      	str	r0, [r7, #4]
 801b720:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801b722:	4a05      	ldr	r2, [pc, #20]	@ (801b738 <etharp_request+0x20>)
 801b724:	6839      	ldr	r1, [r7, #0]
 801b726:	6878      	ldr	r0, [r7, #4]
 801b728:	f7ff ffd4 	bl	801b6d4 <etharp_request_dst>
 801b72c:	4603      	mov	r3, r0
}
 801b72e:	4618      	mov	r0, r3
 801b730:	3708      	adds	r7, #8
 801b732:	46bd      	mov	sp, r7
 801b734:	bd80      	pop	{r7, pc}
 801b736:	bf00      	nop
 801b738:	08022334 	.word	0x08022334

0801b73c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801b73c:	b580      	push	{r7, lr}
 801b73e:	b08e      	sub	sp, #56	@ 0x38
 801b740:	af04      	add	r7, sp, #16
 801b742:	6078      	str	r0, [r7, #4]
 801b744:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801b746:	4b79      	ldr	r3, [pc, #484]	@ (801b92c <icmp_input+0x1f0>)
 801b748:	689b      	ldr	r3, [r3, #8]
 801b74a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801b74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b74e:	781b      	ldrb	r3, [r3, #0]
 801b750:	f003 030f 	and.w	r3, r3, #15
 801b754:	b2db      	uxtb	r3, r3
 801b756:	009b      	lsls	r3, r3, #2
 801b758:	b2db      	uxtb	r3, r3
 801b75a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801b75c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b75e:	2b13      	cmp	r3, #19
 801b760:	f240 80cd 	bls.w	801b8fe <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801b764:	687b      	ldr	r3, [r7, #4]
 801b766:	895b      	ldrh	r3, [r3, #10]
 801b768:	2b03      	cmp	r3, #3
 801b76a:	f240 80ca 	bls.w	801b902 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	685b      	ldr	r3, [r3, #4]
 801b772:	781b      	ldrb	r3, [r3, #0]
 801b774:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801b778:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	f000 80b7 	beq.w	801b8f0 <icmp_input+0x1b4>
 801b782:	2b08      	cmp	r3, #8
 801b784:	f040 80b7 	bne.w	801b8f6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801b788:	4b69      	ldr	r3, [pc, #420]	@ (801b930 <icmp_input+0x1f4>)
 801b78a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b78c:	4b67      	ldr	r3, [pc, #412]	@ (801b92c <icmp_input+0x1f0>)
 801b78e:	695b      	ldr	r3, [r3, #20]
 801b790:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b794:	2be0      	cmp	r3, #224	@ 0xe0
 801b796:	f000 80bb 	beq.w	801b910 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801b79a:	4b64      	ldr	r3, [pc, #400]	@ (801b92c <icmp_input+0x1f0>)
 801b79c:	695b      	ldr	r3, [r3, #20]
 801b79e:	4a63      	ldr	r2, [pc, #396]	@ (801b92c <icmp_input+0x1f0>)
 801b7a0:	6812      	ldr	r2, [r2, #0]
 801b7a2:	4611      	mov	r1, r2
 801b7a4:	4618      	mov	r0, r3
 801b7a6:	f000 fbed 	bl	801bf84 <ip4_addr_isbroadcast_u32>
 801b7aa:	4603      	mov	r3, r0
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	f040 80b1 	bne.w	801b914 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	891b      	ldrh	r3, [r3, #8]
 801b7b6:	2b07      	cmp	r3, #7
 801b7b8:	f240 80a5 	bls.w	801b906 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b7bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b7be:	330e      	adds	r3, #14
 801b7c0:	4619      	mov	r1, r3
 801b7c2:	6878      	ldr	r0, [r7, #4]
 801b7c4:	f7f8 fdf4 	bl	80143b0 <pbuf_add_header>
 801b7c8:	4603      	mov	r3, r0
 801b7ca:	2b00      	cmp	r3, #0
 801b7cc:	d04b      	beq.n	801b866 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	891a      	ldrh	r2, [r3, #8]
 801b7d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b7d4:	4413      	add	r3, r2
 801b7d6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	891b      	ldrh	r3, [r3, #8]
 801b7dc:	8b7a      	ldrh	r2, [r7, #26]
 801b7de:	429a      	cmp	r2, r3
 801b7e0:	f0c0 809a 	bcc.w	801b918 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801b7e4:	8b7b      	ldrh	r3, [r7, #26]
 801b7e6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b7ea:	4619      	mov	r1, r3
 801b7ec:	200e      	movs	r0, #14
 801b7ee:	f7f8 fb91 	bl	8013f14 <pbuf_alloc>
 801b7f2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801b7f4:	697b      	ldr	r3, [r7, #20]
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	f000 8090 	beq.w	801b91c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801b7fc:	697b      	ldr	r3, [r7, #20]
 801b7fe:	895b      	ldrh	r3, [r3, #10]
 801b800:	461a      	mov	r2, r3
 801b802:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b804:	3308      	adds	r3, #8
 801b806:	429a      	cmp	r2, r3
 801b808:	d203      	bcs.n	801b812 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801b80a:	6978      	ldr	r0, [r7, #20]
 801b80c:	f7f8 fe66 	bl	80144dc <pbuf_free>
          goto icmperr;
 801b810:	e085      	b.n	801b91e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801b812:	697b      	ldr	r3, [r7, #20]
 801b814:	685b      	ldr	r3, [r3, #4]
 801b816:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801b818:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b81a:	4618      	mov	r0, r3
 801b81c:	f002 fe85 	bl	801e52a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801b820:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b822:	4619      	mov	r1, r3
 801b824:	6978      	ldr	r0, [r7, #20]
 801b826:	f7f8 fdd3 	bl	80143d0 <pbuf_remove_header>
 801b82a:	4603      	mov	r3, r0
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	d009      	beq.n	801b844 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801b830:	4b40      	ldr	r3, [pc, #256]	@ (801b934 <icmp_input+0x1f8>)
 801b832:	22b6      	movs	r2, #182	@ 0xb6
 801b834:	4940      	ldr	r1, [pc, #256]	@ (801b938 <icmp_input+0x1fc>)
 801b836:	4841      	ldr	r0, [pc, #260]	@ (801b93c <icmp_input+0x200>)
 801b838:	f002 fc4c 	bl	801e0d4 <iprintf>
          pbuf_free(r);
 801b83c:	6978      	ldr	r0, [r7, #20]
 801b83e:	f7f8 fe4d 	bl	80144dc <pbuf_free>
          goto icmperr;
 801b842:	e06c      	b.n	801b91e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801b844:	6879      	ldr	r1, [r7, #4]
 801b846:	6978      	ldr	r0, [r7, #20]
 801b848:	f7f8 ff7c 	bl	8014744 <pbuf_copy>
 801b84c:	4603      	mov	r3, r0
 801b84e:	2b00      	cmp	r3, #0
 801b850:	d003      	beq.n	801b85a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801b852:	6978      	ldr	r0, [r7, #20]
 801b854:	f7f8 fe42 	bl	80144dc <pbuf_free>
          goto icmperr;
 801b858:	e061      	b.n	801b91e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801b85a:	6878      	ldr	r0, [r7, #4]
 801b85c:	f7f8 fe3e 	bl	80144dc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801b860:	697b      	ldr	r3, [r7, #20]
 801b862:	607b      	str	r3, [r7, #4]
 801b864:	e00f      	b.n	801b886 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b866:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b868:	330e      	adds	r3, #14
 801b86a:	4619      	mov	r1, r3
 801b86c:	6878      	ldr	r0, [r7, #4]
 801b86e:	f7f8 fdaf 	bl	80143d0 <pbuf_remove_header>
 801b872:	4603      	mov	r3, r0
 801b874:	2b00      	cmp	r3, #0
 801b876:	d006      	beq.n	801b886 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801b878:	4b2e      	ldr	r3, [pc, #184]	@ (801b934 <icmp_input+0x1f8>)
 801b87a:	22c7      	movs	r2, #199	@ 0xc7
 801b87c:	4930      	ldr	r1, [pc, #192]	@ (801b940 <icmp_input+0x204>)
 801b87e:	482f      	ldr	r0, [pc, #188]	@ (801b93c <icmp_input+0x200>)
 801b880:	f002 fc28 	bl	801e0d4 <iprintf>
          goto icmperr;
 801b884:	e04b      	b.n	801b91e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801b886:	687b      	ldr	r3, [r7, #4]
 801b888:	685b      	ldr	r3, [r3, #4]
 801b88a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801b88c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b88e:	4619      	mov	r1, r3
 801b890:	6878      	ldr	r0, [r7, #4]
 801b892:	f7f8 fd8d 	bl	80143b0 <pbuf_add_header>
 801b896:	4603      	mov	r3, r0
 801b898:	2b00      	cmp	r3, #0
 801b89a:	d12b      	bne.n	801b8f4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801b89c:	687b      	ldr	r3, [r7, #4]
 801b89e:	685b      	ldr	r3, [r3, #4]
 801b8a0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801b8a2:	69fb      	ldr	r3, [r7, #28]
 801b8a4:	681a      	ldr	r2, [r3, #0]
 801b8a6:	68fb      	ldr	r3, [r7, #12]
 801b8a8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801b8aa:	4b20      	ldr	r3, [pc, #128]	@ (801b92c <icmp_input+0x1f0>)
 801b8ac:	691a      	ldr	r2, [r3, #16]
 801b8ae:	68fb      	ldr	r3, [r7, #12]
 801b8b0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801b8b2:	693b      	ldr	r3, [r7, #16]
 801b8b4:	2200      	movs	r2, #0
 801b8b6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801b8b8:	693b      	ldr	r3, [r7, #16]
 801b8ba:	2200      	movs	r2, #0
 801b8bc:	709a      	strb	r2, [r3, #2]
 801b8be:	2200      	movs	r2, #0
 801b8c0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801b8c2:	68fb      	ldr	r3, [r7, #12]
 801b8c4:	22ff      	movs	r2, #255	@ 0xff
 801b8c6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801b8c8:	68fb      	ldr	r3, [r7, #12]
 801b8ca:	2200      	movs	r2, #0
 801b8cc:	729a      	strb	r2, [r3, #10]
 801b8ce:	2200      	movs	r2, #0
 801b8d0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b8d2:	683b      	ldr	r3, [r7, #0]
 801b8d4:	9302      	str	r3, [sp, #8]
 801b8d6:	2301      	movs	r3, #1
 801b8d8:	9301      	str	r3, [sp, #4]
 801b8da:	2300      	movs	r3, #0
 801b8dc:	9300      	str	r3, [sp, #0]
 801b8de:	23ff      	movs	r3, #255	@ 0xff
 801b8e0:	2200      	movs	r2, #0
 801b8e2:	69f9      	ldr	r1, [r7, #28]
 801b8e4:	6878      	ldr	r0, [r7, #4]
 801b8e6:	f000 fa75 	bl	801bdd4 <ip4_output_if>
 801b8ea:	4603      	mov	r3, r0
 801b8ec:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801b8ee:	e001      	b.n	801b8f4 <icmp_input+0x1b8>
      break;
 801b8f0:	bf00      	nop
 801b8f2:	e000      	b.n	801b8f6 <icmp_input+0x1ba>
      break;
 801b8f4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801b8f6:	6878      	ldr	r0, [r7, #4]
 801b8f8:	f7f8 fdf0 	bl	80144dc <pbuf_free>
  return;
 801b8fc:	e013      	b.n	801b926 <icmp_input+0x1ea>
    goto lenerr;
 801b8fe:	bf00      	nop
 801b900:	e002      	b.n	801b908 <icmp_input+0x1cc>
    goto lenerr;
 801b902:	bf00      	nop
 801b904:	e000      	b.n	801b908 <icmp_input+0x1cc>
        goto lenerr;
 801b906:	bf00      	nop
lenerr:
  pbuf_free(p);
 801b908:	6878      	ldr	r0, [r7, #4]
 801b90a:	f7f8 fde7 	bl	80144dc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b90e:	e00a      	b.n	801b926 <icmp_input+0x1ea>
        goto icmperr;
 801b910:	bf00      	nop
 801b912:	e004      	b.n	801b91e <icmp_input+0x1e2>
        goto icmperr;
 801b914:	bf00      	nop
 801b916:	e002      	b.n	801b91e <icmp_input+0x1e2>
          goto icmperr;
 801b918:	bf00      	nop
 801b91a:	e000      	b.n	801b91e <icmp_input+0x1e2>
          goto icmperr;
 801b91c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801b91e:	6878      	ldr	r0, [r7, #4]
 801b920:	f7f8 fddc 	bl	80144dc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b924:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801b926:	3728      	adds	r7, #40	@ 0x28
 801b928:	46bd      	mov	sp, r7
 801b92a:	bd80      	pop	{r7, pc}
 801b92c:	200246b0 	.word	0x200246b0
 801b930:	200246c4 	.word	0x200246c4
 801b934:	080218c4 	.word	0x080218c4
 801b938:	080218fc 	.word	0x080218fc
 801b93c:	08021934 	.word	0x08021934
 801b940:	0802195c 	.word	0x0802195c

0801b944 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801b944:	b580      	push	{r7, lr}
 801b946:	b082      	sub	sp, #8
 801b948:	af00      	add	r7, sp, #0
 801b94a:	6078      	str	r0, [r7, #4]
 801b94c:	460b      	mov	r3, r1
 801b94e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801b950:	78fb      	ldrb	r3, [r7, #3]
 801b952:	461a      	mov	r2, r3
 801b954:	2103      	movs	r1, #3
 801b956:	6878      	ldr	r0, [r7, #4]
 801b958:	f000 f814 	bl	801b984 <icmp_send_response>
}
 801b95c:	bf00      	nop
 801b95e:	3708      	adds	r7, #8
 801b960:	46bd      	mov	sp, r7
 801b962:	bd80      	pop	{r7, pc}

0801b964 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801b964:	b580      	push	{r7, lr}
 801b966:	b082      	sub	sp, #8
 801b968:	af00      	add	r7, sp, #0
 801b96a:	6078      	str	r0, [r7, #4]
 801b96c:	460b      	mov	r3, r1
 801b96e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801b970:	78fb      	ldrb	r3, [r7, #3]
 801b972:	461a      	mov	r2, r3
 801b974:	210b      	movs	r1, #11
 801b976:	6878      	ldr	r0, [r7, #4]
 801b978:	f000 f804 	bl	801b984 <icmp_send_response>
}
 801b97c:	bf00      	nop
 801b97e:	3708      	adds	r7, #8
 801b980:	46bd      	mov	sp, r7
 801b982:	bd80      	pop	{r7, pc}

0801b984 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801b984:	b580      	push	{r7, lr}
 801b986:	b08c      	sub	sp, #48	@ 0x30
 801b988:	af04      	add	r7, sp, #16
 801b98a:	6078      	str	r0, [r7, #4]
 801b98c:	460b      	mov	r3, r1
 801b98e:	70fb      	strb	r3, [r7, #3]
 801b990:	4613      	mov	r3, r2
 801b992:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801b994:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b998:	2124      	movs	r1, #36	@ 0x24
 801b99a:	2022      	movs	r0, #34	@ 0x22
 801b99c:	f7f8 faba 	bl	8013f14 <pbuf_alloc>
 801b9a0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801b9a2:	69fb      	ldr	r3, [r7, #28]
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	d04c      	beq.n	801ba42 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801b9a8:	69fb      	ldr	r3, [r7, #28]
 801b9aa:	895b      	ldrh	r3, [r3, #10]
 801b9ac:	2b23      	cmp	r3, #35	@ 0x23
 801b9ae:	d806      	bhi.n	801b9be <icmp_send_response+0x3a>
 801b9b0:	4b26      	ldr	r3, [pc, #152]	@ (801ba4c <icmp_send_response+0xc8>)
 801b9b2:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801b9b6:	4926      	ldr	r1, [pc, #152]	@ (801ba50 <icmp_send_response+0xcc>)
 801b9b8:	4826      	ldr	r0, [pc, #152]	@ (801ba54 <icmp_send_response+0xd0>)
 801b9ba:	f002 fb8b 	bl	801e0d4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801b9be:	687b      	ldr	r3, [r7, #4]
 801b9c0:	685b      	ldr	r3, [r3, #4]
 801b9c2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801b9c4:	69fb      	ldr	r3, [r7, #28]
 801b9c6:	685b      	ldr	r3, [r3, #4]
 801b9c8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801b9ca:	697b      	ldr	r3, [r7, #20]
 801b9cc:	78fa      	ldrb	r2, [r7, #3]
 801b9ce:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801b9d0:	697b      	ldr	r3, [r7, #20]
 801b9d2:	78ba      	ldrb	r2, [r7, #2]
 801b9d4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801b9d6:	697b      	ldr	r3, [r7, #20]
 801b9d8:	2200      	movs	r2, #0
 801b9da:	711a      	strb	r2, [r3, #4]
 801b9dc:	2200      	movs	r2, #0
 801b9de:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801b9e0:	697b      	ldr	r3, [r7, #20]
 801b9e2:	2200      	movs	r2, #0
 801b9e4:	719a      	strb	r2, [r3, #6]
 801b9e6:	2200      	movs	r2, #0
 801b9e8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801b9ea:	69fb      	ldr	r3, [r7, #28]
 801b9ec:	685b      	ldr	r3, [r3, #4]
 801b9ee:	f103 0008 	add.w	r0, r3, #8
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	685b      	ldr	r3, [r3, #4]
 801b9f6:	221c      	movs	r2, #28
 801b9f8:	4619      	mov	r1, r3
 801b9fa:	f002 fd96 	bl	801e52a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801b9fe:	69bb      	ldr	r3, [r7, #24]
 801ba00:	68db      	ldr	r3, [r3, #12]
 801ba02:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801ba04:	f107 030c 	add.w	r3, r7, #12
 801ba08:	4618      	mov	r0, r3
 801ba0a:	f000 f825 	bl	801ba58 <ip4_route>
 801ba0e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801ba10:	693b      	ldr	r3, [r7, #16]
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	d011      	beq.n	801ba3a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801ba16:	697b      	ldr	r3, [r7, #20]
 801ba18:	2200      	movs	r2, #0
 801ba1a:	709a      	strb	r2, [r3, #2]
 801ba1c:	2200      	movs	r2, #0
 801ba1e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801ba20:	f107 020c 	add.w	r2, r7, #12
 801ba24:	693b      	ldr	r3, [r7, #16]
 801ba26:	9302      	str	r3, [sp, #8]
 801ba28:	2301      	movs	r3, #1
 801ba2a:	9301      	str	r3, [sp, #4]
 801ba2c:	2300      	movs	r3, #0
 801ba2e:	9300      	str	r3, [sp, #0]
 801ba30:	23ff      	movs	r3, #255	@ 0xff
 801ba32:	2100      	movs	r1, #0
 801ba34:	69f8      	ldr	r0, [r7, #28]
 801ba36:	f000 f9cd 	bl	801bdd4 <ip4_output_if>
  }
  pbuf_free(q);
 801ba3a:	69f8      	ldr	r0, [r7, #28]
 801ba3c:	f7f8 fd4e 	bl	80144dc <pbuf_free>
 801ba40:	e000      	b.n	801ba44 <icmp_send_response+0xc0>
    return;
 801ba42:	bf00      	nop
}
 801ba44:	3720      	adds	r7, #32
 801ba46:	46bd      	mov	sp, r7
 801ba48:	bd80      	pop	{r7, pc}
 801ba4a:	bf00      	nop
 801ba4c:	080218c4 	.word	0x080218c4
 801ba50:	08021990 	.word	0x08021990
 801ba54:	08021934 	.word	0x08021934

0801ba58 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801ba58:	b480      	push	{r7}
 801ba5a:	b085      	sub	sp, #20
 801ba5c:	af00      	add	r7, sp, #0
 801ba5e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801ba60:	4b33      	ldr	r3, [pc, #204]	@ (801bb30 <ip4_route+0xd8>)
 801ba62:	681b      	ldr	r3, [r3, #0]
 801ba64:	60fb      	str	r3, [r7, #12]
 801ba66:	e036      	b.n	801bad6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801ba68:	68fb      	ldr	r3, [r7, #12]
 801ba6a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ba6e:	f003 0301 	and.w	r3, r3, #1
 801ba72:	b2db      	uxtb	r3, r3
 801ba74:	2b00      	cmp	r3, #0
 801ba76:	d02b      	beq.n	801bad0 <ip4_route+0x78>
 801ba78:	68fb      	ldr	r3, [r7, #12]
 801ba7a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ba7e:	089b      	lsrs	r3, r3, #2
 801ba80:	f003 0301 	and.w	r3, r3, #1
 801ba84:	b2db      	uxtb	r3, r3
 801ba86:	2b00      	cmp	r3, #0
 801ba88:	d022      	beq.n	801bad0 <ip4_route+0x78>
 801ba8a:	68fb      	ldr	r3, [r7, #12]
 801ba8c:	3304      	adds	r3, #4
 801ba8e:	681b      	ldr	r3, [r3, #0]
 801ba90:	2b00      	cmp	r3, #0
 801ba92:	d01d      	beq.n	801bad0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801ba94:	687b      	ldr	r3, [r7, #4]
 801ba96:	681a      	ldr	r2, [r3, #0]
 801ba98:	68fb      	ldr	r3, [r7, #12]
 801ba9a:	3304      	adds	r3, #4
 801ba9c:	681b      	ldr	r3, [r3, #0]
 801ba9e:	405a      	eors	r2, r3
 801baa0:	68fb      	ldr	r3, [r7, #12]
 801baa2:	3308      	adds	r3, #8
 801baa4:	681b      	ldr	r3, [r3, #0]
 801baa6:	4013      	ands	r3, r2
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	d101      	bne.n	801bab0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801baac:	68fb      	ldr	r3, [r7, #12]
 801baae:	e038      	b.n	801bb22 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801bab0:	68fb      	ldr	r3, [r7, #12]
 801bab2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bab6:	f003 0302 	and.w	r3, r3, #2
 801baba:	2b00      	cmp	r3, #0
 801babc:	d108      	bne.n	801bad0 <ip4_route+0x78>
 801babe:	687b      	ldr	r3, [r7, #4]
 801bac0:	681a      	ldr	r2, [r3, #0]
 801bac2:	68fb      	ldr	r3, [r7, #12]
 801bac4:	330c      	adds	r3, #12
 801bac6:	681b      	ldr	r3, [r3, #0]
 801bac8:	429a      	cmp	r2, r3
 801baca:	d101      	bne.n	801bad0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801bacc:	68fb      	ldr	r3, [r7, #12]
 801bace:	e028      	b.n	801bb22 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801bad0:	68fb      	ldr	r3, [r7, #12]
 801bad2:	681b      	ldr	r3, [r3, #0]
 801bad4:	60fb      	str	r3, [r7, #12]
 801bad6:	68fb      	ldr	r3, [r7, #12]
 801bad8:	2b00      	cmp	r3, #0
 801bada:	d1c5      	bne.n	801ba68 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801badc:	4b15      	ldr	r3, [pc, #84]	@ (801bb34 <ip4_route+0xdc>)
 801bade:	681b      	ldr	r3, [r3, #0]
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	d01a      	beq.n	801bb1a <ip4_route+0xc2>
 801bae4:	4b13      	ldr	r3, [pc, #76]	@ (801bb34 <ip4_route+0xdc>)
 801bae6:	681b      	ldr	r3, [r3, #0]
 801bae8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801baec:	f003 0301 	and.w	r3, r3, #1
 801baf0:	2b00      	cmp	r3, #0
 801baf2:	d012      	beq.n	801bb1a <ip4_route+0xc2>
 801baf4:	4b0f      	ldr	r3, [pc, #60]	@ (801bb34 <ip4_route+0xdc>)
 801baf6:	681b      	ldr	r3, [r3, #0]
 801baf8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bafc:	f003 0304 	and.w	r3, r3, #4
 801bb00:	2b00      	cmp	r3, #0
 801bb02:	d00a      	beq.n	801bb1a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801bb04:	4b0b      	ldr	r3, [pc, #44]	@ (801bb34 <ip4_route+0xdc>)
 801bb06:	681b      	ldr	r3, [r3, #0]
 801bb08:	3304      	adds	r3, #4
 801bb0a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801bb0c:	2b00      	cmp	r3, #0
 801bb0e:	d004      	beq.n	801bb1a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	681b      	ldr	r3, [r3, #0]
 801bb14:	b2db      	uxtb	r3, r3
 801bb16:	2b7f      	cmp	r3, #127	@ 0x7f
 801bb18:	d101      	bne.n	801bb1e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801bb1a:	2300      	movs	r3, #0
 801bb1c:	e001      	b.n	801bb22 <ip4_route+0xca>
  }

  return netif_default;
 801bb1e:	4b05      	ldr	r3, [pc, #20]	@ (801bb34 <ip4_route+0xdc>)
 801bb20:	681b      	ldr	r3, [r3, #0]
}
 801bb22:	4618      	mov	r0, r3
 801bb24:	3714      	adds	r7, #20
 801bb26:	46bd      	mov	sp, r7
 801bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb2c:	4770      	bx	lr
 801bb2e:	bf00      	nop
 801bb30:	200277a4 	.word	0x200277a4
 801bb34:	200277a8 	.word	0x200277a8

0801bb38 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801bb38:	b580      	push	{r7, lr}
 801bb3a:	b082      	sub	sp, #8
 801bb3c:	af00      	add	r7, sp, #0
 801bb3e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bb46:	f003 0301 	and.w	r3, r3, #1
 801bb4a:	b2db      	uxtb	r3, r3
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	d016      	beq.n	801bb7e <ip4_input_accept+0x46>
 801bb50:	687b      	ldr	r3, [r7, #4]
 801bb52:	3304      	adds	r3, #4
 801bb54:	681b      	ldr	r3, [r3, #0]
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	d011      	beq.n	801bb7e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801bb5a:	4b0b      	ldr	r3, [pc, #44]	@ (801bb88 <ip4_input_accept+0x50>)
 801bb5c:	695a      	ldr	r2, [r3, #20]
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	3304      	adds	r3, #4
 801bb62:	681b      	ldr	r3, [r3, #0]
 801bb64:	429a      	cmp	r2, r3
 801bb66:	d008      	beq.n	801bb7a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801bb68:	4b07      	ldr	r3, [pc, #28]	@ (801bb88 <ip4_input_accept+0x50>)
 801bb6a:	695b      	ldr	r3, [r3, #20]
 801bb6c:	6879      	ldr	r1, [r7, #4]
 801bb6e:	4618      	mov	r0, r3
 801bb70:	f000 fa08 	bl	801bf84 <ip4_addr_isbroadcast_u32>
 801bb74:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801bb76:	2b00      	cmp	r3, #0
 801bb78:	d001      	beq.n	801bb7e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801bb7a:	2301      	movs	r3, #1
 801bb7c:	e000      	b.n	801bb80 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801bb7e:	2300      	movs	r3, #0
}
 801bb80:	4618      	mov	r0, r3
 801bb82:	3708      	adds	r7, #8
 801bb84:	46bd      	mov	sp, r7
 801bb86:	bd80      	pop	{r7, pc}
 801bb88:	200246b0 	.word	0x200246b0

0801bb8c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801bb8c:	b580      	push	{r7, lr}
 801bb8e:	b086      	sub	sp, #24
 801bb90:	af00      	add	r7, sp, #0
 801bb92:	6078      	str	r0, [r7, #4]
 801bb94:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	685b      	ldr	r3, [r3, #4]
 801bb9a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801bb9c:	697b      	ldr	r3, [r7, #20]
 801bb9e:	781b      	ldrb	r3, [r3, #0]
 801bba0:	091b      	lsrs	r3, r3, #4
 801bba2:	b2db      	uxtb	r3, r3
 801bba4:	2b04      	cmp	r3, #4
 801bba6:	d004      	beq.n	801bbb2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801bba8:	6878      	ldr	r0, [r7, #4]
 801bbaa:	f7f8 fc97 	bl	80144dc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801bbae:	2300      	movs	r3, #0
 801bbb0:	e107      	b.n	801bdc2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801bbb2:	697b      	ldr	r3, [r7, #20]
 801bbb4:	781b      	ldrb	r3, [r3, #0]
 801bbb6:	f003 030f 	and.w	r3, r3, #15
 801bbba:	b2db      	uxtb	r3, r3
 801bbbc:	009b      	lsls	r3, r3, #2
 801bbbe:	b2db      	uxtb	r3, r3
 801bbc0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801bbc2:	697b      	ldr	r3, [r7, #20]
 801bbc4:	885b      	ldrh	r3, [r3, #2]
 801bbc6:	b29b      	uxth	r3, r3
 801bbc8:	4618      	mov	r0, r3
 801bbca:	f7f7 f899 	bl	8012d00 <lwip_htons>
 801bbce:	4603      	mov	r3, r0
 801bbd0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	891b      	ldrh	r3, [r3, #8]
 801bbd6:	89ba      	ldrh	r2, [r7, #12]
 801bbd8:	429a      	cmp	r2, r3
 801bbda:	d204      	bcs.n	801bbe6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801bbdc:	89bb      	ldrh	r3, [r7, #12]
 801bbde:	4619      	mov	r1, r3
 801bbe0:	6878      	ldr	r0, [r7, #4]
 801bbe2:	f7f8 faf5 	bl	80141d0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	895b      	ldrh	r3, [r3, #10]
 801bbea:	89fa      	ldrh	r2, [r7, #14]
 801bbec:	429a      	cmp	r2, r3
 801bbee:	d807      	bhi.n	801bc00 <ip4_input+0x74>
 801bbf0:	687b      	ldr	r3, [r7, #4]
 801bbf2:	891b      	ldrh	r3, [r3, #8]
 801bbf4:	89ba      	ldrh	r2, [r7, #12]
 801bbf6:	429a      	cmp	r2, r3
 801bbf8:	d802      	bhi.n	801bc00 <ip4_input+0x74>
 801bbfa:	89fb      	ldrh	r3, [r7, #14]
 801bbfc:	2b13      	cmp	r3, #19
 801bbfe:	d804      	bhi.n	801bc0a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801bc00:	6878      	ldr	r0, [r7, #4]
 801bc02:	f7f8 fc6b 	bl	80144dc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801bc06:	2300      	movs	r3, #0
 801bc08:	e0db      	b.n	801bdc2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801bc0a:	697b      	ldr	r3, [r7, #20]
 801bc0c:	691b      	ldr	r3, [r3, #16]
 801bc0e:	4a6f      	ldr	r2, [pc, #444]	@ (801bdcc <ip4_input+0x240>)
 801bc10:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801bc12:	697b      	ldr	r3, [r7, #20]
 801bc14:	68db      	ldr	r3, [r3, #12]
 801bc16:	4a6d      	ldr	r2, [pc, #436]	@ (801bdcc <ip4_input+0x240>)
 801bc18:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bc1a:	4b6c      	ldr	r3, [pc, #432]	@ (801bdcc <ip4_input+0x240>)
 801bc1c:	695b      	ldr	r3, [r3, #20]
 801bc1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801bc22:	2be0      	cmp	r3, #224	@ 0xe0
 801bc24:	d112      	bne.n	801bc4c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801bc26:	683b      	ldr	r3, [r7, #0]
 801bc28:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bc2c:	f003 0301 	and.w	r3, r3, #1
 801bc30:	b2db      	uxtb	r3, r3
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d007      	beq.n	801bc46 <ip4_input+0xba>
 801bc36:	683b      	ldr	r3, [r7, #0]
 801bc38:	3304      	adds	r3, #4
 801bc3a:	681b      	ldr	r3, [r3, #0]
 801bc3c:	2b00      	cmp	r3, #0
 801bc3e:	d002      	beq.n	801bc46 <ip4_input+0xba>
      netif = inp;
 801bc40:	683b      	ldr	r3, [r7, #0]
 801bc42:	613b      	str	r3, [r7, #16]
 801bc44:	e02a      	b.n	801bc9c <ip4_input+0x110>
    } else {
      netif = NULL;
 801bc46:	2300      	movs	r3, #0
 801bc48:	613b      	str	r3, [r7, #16]
 801bc4a:	e027      	b.n	801bc9c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801bc4c:	6838      	ldr	r0, [r7, #0]
 801bc4e:	f7ff ff73 	bl	801bb38 <ip4_input_accept>
 801bc52:	4603      	mov	r3, r0
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	d002      	beq.n	801bc5e <ip4_input+0xd2>
      netif = inp;
 801bc58:	683b      	ldr	r3, [r7, #0]
 801bc5a:	613b      	str	r3, [r7, #16]
 801bc5c:	e01e      	b.n	801bc9c <ip4_input+0x110>
    } else {
      netif = NULL;
 801bc5e:	2300      	movs	r3, #0
 801bc60:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801bc62:	4b5a      	ldr	r3, [pc, #360]	@ (801bdcc <ip4_input+0x240>)
 801bc64:	695b      	ldr	r3, [r3, #20]
 801bc66:	b2db      	uxtb	r3, r3
 801bc68:	2b7f      	cmp	r3, #127	@ 0x7f
 801bc6a:	d017      	beq.n	801bc9c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801bc6c:	4b58      	ldr	r3, [pc, #352]	@ (801bdd0 <ip4_input+0x244>)
 801bc6e:	681b      	ldr	r3, [r3, #0]
 801bc70:	613b      	str	r3, [r7, #16]
 801bc72:	e00e      	b.n	801bc92 <ip4_input+0x106>
          if (netif == inp) {
 801bc74:	693a      	ldr	r2, [r7, #16]
 801bc76:	683b      	ldr	r3, [r7, #0]
 801bc78:	429a      	cmp	r2, r3
 801bc7a:	d006      	beq.n	801bc8a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801bc7c:	6938      	ldr	r0, [r7, #16]
 801bc7e:	f7ff ff5b 	bl	801bb38 <ip4_input_accept>
 801bc82:	4603      	mov	r3, r0
 801bc84:	2b00      	cmp	r3, #0
 801bc86:	d108      	bne.n	801bc9a <ip4_input+0x10e>
 801bc88:	e000      	b.n	801bc8c <ip4_input+0x100>
            continue;
 801bc8a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801bc8c:	693b      	ldr	r3, [r7, #16]
 801bc8e:	681b      	ldr	r3, [r3, #0]
 801bc90:	613b      	str	r3, [r7, #16]
 801bc92:	693b      	ldr	r3, [r7, #16]
 801bc94:	2b00      	cmp	r3, #0
 801bc96:	d1ed      	bne.n	801bc74 <ip4_input+0xe8>
 801bc98:	e000      	b.n	801bc9c <ip4_input+0x110>
            break;
 801bc9a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801bc9c:	4b4b      	ldr	r3, [pc, #300]	@ (801bdcc <ip4_input+0x240>)
 801bc9e:	691b      	ldr	r3, [r3, #16]
 801bca0:	6839      	ldr	r1, [r7, #0]
 801bca2:	4618      	mov	r0, r3
 801bca4:	f000 f96e 	bl	801bf84 <ip4_addr_isbroadcast_u32>
 801bca8:	4603      	mov	r3, r0
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	d105      	bne.n	801bcba <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801bcae:	4b47      	ldr	r3, [pc, #284]	@ (801bdcc <ip4_input+0x240>)
 801bcb0:	691b      	ldr	r3, [r3, #16]
 801bcb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801bcb6:	2be0      	cmp	r3, #224	@ 0xe0
 801bcb8:	d104      	bne.n	801bcc4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801bcba:	6878      	ldr	r0, [r7, #4]
 801bcbc:	f7f8 fc0e 	bl	80144dc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801bcc0:	2300      	movs	r3, #0
 801bcc2:	e07e      	b.n	801bdc2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801bcc4:	693b      	ldr	r3, [r7, #16]
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	d104      	bne.n	801bcd4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801bcca:	6878      	ldr	r0, [r7, #4]
 801bccc:	f7f8 fc06 	bl	80144dc <pbuf_free>
    return ERR_OK;
 801bcd0:	2300      	movs	r3, #0
 801bcd2:	e076      	b.n	801bdc2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801bcd4:	697b      	ldr	r3, [r7, #20]
 801bcd6:	88db      	ldrh	r3, [r3, #6]
 801bcd8:	b29b      	uxth	r3, r3
 801bcda:	461a      	mov	r2, r3
 801bcdc:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801bce0:	4013      	ands	r3, r2
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	d00b      	beq.n	801bcfe <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801bce6:	6878      	ldr	r0, [r7, #4]
 801bce8:	f000 fc92 	bl	801c610 <ip4_reass>
 801bcec:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801bcee:	687b      	ldr	r3, [r7, #4]
 801bcf0:	2b00      	cmp	r3, #0
 801bcf2:	d101      	bne.n	801bcf8 <ip4_input+0x16c>
      return ERR_OK;
 801bcf4:	2300      	movs	r3, #0
 801bcf6:	e064      	b.n	801bdc2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	685b      	ldr	r3, [r3, #4]
 801bcfc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801bcfe:	4a33      	ldr	r2, [pc, #204]	@ (801bdcc <ip4_input+0x240>)
 801bd00:	693b      	ldr	r3, [r7, #16]
 801bd02:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801bd04:	4a31      	ldr	r2, [pc, #196]	@ (801bdcc <ip4_input+0x240>)
 801bd06:	683b      	ldr	r3, [r7, #0]
 801bd08:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801bd0a:	4a30      	ldr	r2, [pc, #192]	@ (801bdcc <ip4_input+0x240>)
 801bd0c:	697b      	ldr	r3, [r7, #20]
 801bd0e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801bd10:	697b      	ldr	r3, [r7, #20]
 801bd12:	781b      	ldrb	r3, [r3, #0]
 801bd14:	f003 030f 	and.w	r3, r3, #15
 801bd18:	b2db      	uxtb	r3, r3
 801bd1a:	009b      	lsls	r3, r3, #2
 801bd1c:	b2db      	uxtb	r3, r3
 801bd1e:	461a      	mov	r2, r3
 801bd20:	4b2a      	ldr	r3, [pc, #168]	@ (801bdcc <ip4_input+0x240>)
 801bd22:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801bd24:	89fb      	ldrh	r3, [r7, #14]
 801bd26:	4619      	mov	r1, r3
 801bd28:	6878      	ldr	r0, [r7, #4]
 801bd2a:	f7f8 fb51 	bl	80143d0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801bd2e:	697b      	ldr	r3, [r7, #20]
 801bd30:	7a5b      	ldrb	r3, [r3, #9]
 801bd32:	2b11      	cmp	r3, #17
 801bd34:	d006      	beq.n	801bd44 <ip4_input+0x1b8>
 801bd36:	2b11      	cmp	r3, #17
 801bd38:	dc13      	bgt.n	801bd62 <ip4_input+0x1d6>
 801bd3a:	2b01      	cmp	r3, #1
 801bd3c:	d00c      	beq.n	801bd58 <ip4_input+0x1cc>
 801bd3e:	2b06      	cmp	r3, #6
 801bd40:	d005      	beq.n	801bd4e <ip4_input+0x1c2>
 801bd42:	e00e      	b.n	801bd62 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801bd44:	6839      	ldr	r1, [r7, #0]
 801bd46:	6878      	ldr	r0, [r7, #4]
 801bd48:	f7fe f9f2 	bl	801a130 <udp_input>
        break;
 801bd4c:	e026      	b.n	801bd9c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801bd4e:	6839      	ldr	r1, [r7, #0]
 801bd50:	6878      	ldr	r0, [r7, #4]
 801bd52:	f7fa fa09 	bl	8016168 <tcp_input>
        break;
 801bd56:	e021      	b.n	801bd9c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801bd58:	6839      	ldr	r1, [r7, #0]
 801bd5a:	6878      	ldr	r0, [r7, #4]
 801bd5c:	f7ff fcee 	bl	801b73c <icmp_input>
        break;
 801bd60:	e01c      	b.n	801bd9c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801bd62:	4b1a      	ldr	r3, [pc, #104]	@ (801bdcc <ip4_input+0x240>)
 801bd64:	695b      	ldr	r3, [r3, #20]
 801bd66:	6939      	ldr	r1, [r7, #16]
 801bd68:	4618      	mov	r0, r3
 801bd6a:	f000 f90b 	bl	801bf84 <ip4_addr_isbroadcast_u32>
 801bd6e:	4603      	mov	r3, r0
 801bd70:	2b00      	cmp	r3, #0
 801bd72:	d10f      	bne.n	801bd94 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bd74:	4b15      	ldr	r3, [pc, #84]	@ (801bdcc <ip4_input+0x240>)
 801bd76:	695b      	ldr	r3, [r3, #20]
 801bd78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801bd7c:	2be0      	cmp	r3, #224	@ 0xe0
 801bd7e:	d009      	beq.n	801bd94 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801bd80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801bd84:	4619      	mov	r1, r3
 801bd86:	6878      	ldr	r0, [r7, #4]
 801bd88:	f7f8 fb95 	bl	80144b6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801bd8c:	2102      	movs	r1, #2
 801bd8e:	6878      	ldr	r0, [r7, #4]
 801bd90:	f7ff fdd8 	bl	801b944 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801bd94:	6878      	ldr	r0, [r7, #4]
 801bd96:	f7f8 fba1 	bl	80144dc <pbuf_free>
        break;
 801bd9a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801bd9c:	4b0b      	ldr	r3, [pc, #44]	@ (801bdcc <ip4_input+0x240>)
 801bd9e:	2200      	movs	r2, #0
 801bda0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801bda2:	4b0a      	ldr	r3, [pc, #40]	@ (801bdcc <ip4_input+0x240>)
 801bda4:	2200      	movs	r2, #0
 801bda6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801bda8:	4b08      	ldr	r3, [pc, #32]	@ (801bdcc <ip4_input+0x240>)
 801bdaa:	2200      	movs	r2, #0
 801bdac:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801bdae:	4b07      	ldr	r3, [pc, #28]	@ (801bdcc <ip4_input+0x240>)
 801bdb0:	2200      	movs	r2, #0
 801bdb2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801bdb4:	4b05      	ldr	r3, [pc, #20]	@ (801bdcc <ip4_input+0x240>)
 801bdb6:	2200      	movs	r2, #0
 801bdb8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801bdba:	4b04      	ldr	r3, [pc, #16]	@ (801bdcc <ip4_input+0x240>)
 801bdbc:	2200      	movs	r2, #0
 801bdbe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801bdc0:	2300      	movs	r3, #0
}
 801bdc2:	4618      	mov	r0, r3
 801bdc4:	3718      	adds	r7, #24
 801bdc6:	46bd      	mov	sp, r7
 801bdc8:	bd80      	pop	{r7, pc}
 801bdca:	bf00      	nop
 801bdcc:	200246b0 	.word	0x200246b0
 801bdd0:	200277a4 	.word	0x200277a4

0801bdd4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801bdd4:	b580      	push	{r7, lr}
 801bdd6:	b08a      	sub	sp, #40	@ 0x28
 801bdd8:	af04      	add	r7, sp, #16
 801bdda:	60f8      	str	r0, [r7, #12]
 801bddc:	60b9      	str	r1, [r7, #8]
 801bdde:	607a      	str	r2, [r7, #4]
 801bde0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801bde2:	68bb      	ldr	r3, [r7, #8]
 801bde4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801bde6:	687b      	ldr	r3, [r7, #4]
 801bde8:	2b00      	cmp	r3, #0
 801bdea:	d009      	beq.n	801be00 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801bdec:	68bb      	ldr	r3, [r7, #8]
 801bdee:	2b00      	cmp	r3, #0
 801bdf0:	d003      	beq.n	801bdfa <ip4_output_if+0x26>
 801bdf2:	68bb      	ldr	r3, [r7, #8]
 801bdf4:	681b      	ldr	r3, [r3, #0]
 801bdf6:	2b00      	cmp	r3, #0
 801bdf8:	d102      	bne.n	801be00 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801bdfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bdfc:	3304      	adds	r3, #4
 801bdfe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801be00:	78fa      	ldrb	r2, [r7, #3]
 801be02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801be04:	9302      	str	r3, [sp, #8]
 801be06:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801be0a:	9301      	str	r3, [sp, #4]
 801be0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 801be10:	9300      	str	r3, [sp, #0]
 801be12:	4613      	mov	r3, r2
 801be14:	687a      	ldr	r2, [r7, #4]
 801be16:	6979      	ldr	r1, [r7, #20]
 801be18:	68f8      	ldr	r0, [r7, #12]
 801be1a:	f000 f805 	bl	801be28 <ip4_output_if_src>
 801be1e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801be20:	4618      	mov	r0, r3
 801be22:	3718      	adds	r7, #24
 801be24:	46bd      	mov	sp, r7
 801be26:	bd80      	pop	{r7, pc}

0801be28 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801be28:	b580      	push	{r7, lr}
 801be2a:	b088      	sub	sp, #32
 801be2c:	af00      	add	r7, sp, #0
 801be2e:	60f8      	str	r0, [r7, #12]
 801be30:	60b9      	str	r1, [r7, #8]
 801be32:	607a      	str	r2, [r7, #4]
 801be34:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801be36:	68fb      	ldr	r3, [r7, #12]
 801be38:	7b9b      	ldrb	r3, [r3, #14]
 801be3a:	2b01      	cmp	r3, #1
 801be3c:	d006      	beq.n	801be4c <ip4_output_if_src+0x24>
 801be3e:	4b4b      	ldr	r3, [pc, #300]	@ (801bf6c <ip4_output_if_src+0x144>)
 801be40:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801be44:	494a      	ldr	r1, [pc, #296]	@ (801bf70 <ip4_output_if_src+0x148>)
 801be46:	484b      	ldr	r0, [pc, #300]	@ (801bf74 <ip4_output_if_src+0x14c>)
 801be48:	f002 f944 	bl	801e0d4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801be4c:	687b      	ldr	r3, [r7, #4]
 801be4e:	2b00      	cmp	r3, #0
 801be50:	d060      	beq.n	801bf14 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801be52:	2314      	movs	r3, #20
 801be54:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801be56:	2114      	movs	r1, #20
 801be58:	68f8      	ldr	r0, [r7, #12]
 801be5a:	f7f8 faa9 	bl	80143b0 <pbuf_add_header>
 801be5e:	4603      	mov	r3, r0
 801be60:	2b00      	cmp	r3, #0
 801be62:	d002      	beq.n	801be6a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801be64:	f06f 0301 	mvn.w	r3, #1
 801be68:	e07c      	b.n	801bf64 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801be6a:	68fb      	ldr	r3, [r7, #12]
 801be6c:	685b      	ldr	r3, [r3, #4]
 801be6e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801be70:	68fb      	ldr	r3, [r7, #12]
 801be72:	895b      	ldrh	r3, [r3, #10]
 801be74:	2b13      	cmp	r3, #19
 801be76:	d806      	bhi.n	801be86 <ip4_output_if_src+0x5e>
 801be78:	4b3c      	ldr	r3, [pc, #240]	@ (801bf6c <ip4_output_if_src+0x144>)
 801be7a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801be7e:	493e      	ldr	r1, [pc, #248]	@ (801bf78 <ip4_output_if_src+0x150>)
 801be80:	483c      	ldr	r0, [pc, #240]	@ (801bf74 <ip4_output_if_src+0x14c>)
 801be82:	f002 f927 	bl	801e0d4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801be86:	69fb      	ldr	r3, [r7, #28]
 801be88:	78fa      	ldrb	r2, [r7, #3]
 801be8a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801be8c:	69fb      	ldr	r3, [r7, #28]
 801be8e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801be92:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	681a      	ldr	r2, [r3, #0]
 801be98:	69fb      	ldr	r3, [r7, #28]
 801be9a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801be9c:	8b7b      	ldrh	r3, [r7, #26]
 801be9e:	089b      	lsrs	r3, r3, #2
 801bea0:	b29b      	uxth	r3, r3
 801bea2:	b2db      	uxtb	r3, r3
 801bea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bea8:	b2da      	uxtb	r2, r3
 801beaa:	69fb      	ldr	r3, [r7, #28]
 801beac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801beae:	69fb      	ldr	r3, [r7, #28]
 801beb0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801beb4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801beb6:	68fb      	ldr	r3, [r7, #12]
 801beb8:	891b      	ldrh	r3, [r3, #8]
 801beba:	4618      	mov	r0, r3
 801bebc:	f7f6 ff20 	bl	8012d00 <lwip_htons>
 801bec0:	4603      	mov	r3, r0
 801bec2:	461a      	mov	r2, r3
 801bec4:	69fb      	ldr	r3, [r7, #28]
 801bec6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801bec8:	69fb      	ldr	r3, [r7, #28]
 801beca:	2200      	movs	r2, #0
 801becc:	719a      	strb	r2, [r3, #6]
 801bece:	2200      	movs	r2, #0
 801bed0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801bed2:	4b2a      	ldr	r3, [pc, #168]	@ (801bf7c <ip4_output_if_src+0x154>)
 801bed4:	881b      	ldrh	r3, [r3, #0]
 801bed6:	4618      	mov	r0, r3
 801bed8:	f7f6 ff12 	bl	8012d00 <lwip_htons>
 801bedc:	4603      	mov	r3, r0
 801bede:	461a      	mov	r2, r3
 801bee0:	69fb      	ldr	r3, [r7, #28]
 801bee2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801bee4:	4b25      	ldr	r3, [pc, #148]	@ (801bf7c <ip4_output_if_src+0x154>)
 801bee6:	881b      	ldrh	r3, [r3, #0]
 801bee8:	3301      	adds	r3, #1
 801beea:	b29a      	uxth	r2, r3
 801beec:	4b23      	ldr	r3, [pc, #140]	@ (801bf7c <ip4_output_if_src+0x154>)
 801beee:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801bef0:	68bb      	ldr	r3, [r7, #8]
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	d104      	bne.n	801bf00 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801bef6:	4b22      	ldr	r3, [pc, #136]	@ (801bf80 <ip4_output_if_src+0x158>)
 801bef8:	681a      	ldr	r2, [r3, #0]
 801befa:	69fb      	ldr	r3, [r7, #28]
 801befc:	60da      	str	r2, [r3, #12]
 801befe:	e003      	b.n	801bf08 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801bf00:	68bb      	ldr	r3, [r7, #8]
 801bf02:	681a      	ldr	r2, [r3, #0]
 801bf04:	69fb      	ldr	r3, [r7, #28]
 801bf06:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801bf08:	69fb      	ldr	r3, [r7, #28]
 801bf0a:	2200      	movs	r2, #0
 801bf0c:	729a      	strb	r2, [r3, #10]
 801bf0e:	2200      	movs	r2, #0
 801bf10:	72da      	strb	r2, [r3, #11]
 801bf12:	e00f      	b.n	801bf34 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801bf14:	68fb      	ldr	r3, [r7, #12]
 801bf16:	895b      	ldrh	r3, [r3, #10]
 801bf18:	2b13      	cmp	r3, #19
 801bf1a:	d802      	bhi.n	801bf22 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801bf1c:	f06f 0301 	mvn.w	r3, #1
 801bf20:	e020      	b.n	801bf64 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801bf22:	68fb      	ldr	r3, [r7, #12]
 801bf24:	685b      	ldr	r3, [r3, #4]
 801bf26:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801bf28:	69fb      	ldr	r3, [r7, #28]
 801bf2a:	691b      	ldr	r3, [r3, #16]
 801bf2c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801bf2e:	f107 0314 	add.w	r3, r7, #20
 801bf32:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801bf34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf36:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	d00c      	beq.n	801bf56 <ip4_output_if_src+0x12e>
 801bf3c:	68fb      	ldr	r3, [r7, #12]
 801bf3e:	891a      	ldrh	r2, [r3, #8]
 801bf40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf42:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801bf44:	429a      	cmp	r2, r3
 801bf46:	d906      	bls.n	801bf56 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801bf48:	687a      	ldr	r2, [r7, #4]
 801bf4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801bf4c:	68f8      	ldr	r0, [r7, #12]
 801bf4e:	f000 fd53 	bl	801c9f8 <ip4_frag>
 801bf52:	4603      	mov	r3, r0
 801bf54:	e006      	b.n	801bf64 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801bf56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf58:	695b      	ldr	r3, [r3, #20]
 801bf5a:	687a      	ldr	r2, [r7, #4]
 801bf5c:	68f9      	ldr	r1, [r7, #12]
 801bf5e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801bf60:	4798      	blx	r3
 801bf62:	4603      	mov	r3, r0
}
 801bf64:	4618      	mov	r0, r3
 801bf66:	3720      	adds	r7, #32
 801bf68:	46bd      	mov	sp, r7
 801bf6a:	bd80      	pop	{r7, pc}
 801bf6c:	080219bc 	.word	0x080219bc
 801bf70:	080219f0 	.word	0x080219f0
 801bf74:	080219fc 	.word	0x080219fc
 801bf78:	08021a24 	.word	0x08021a24
 801bf7c:	20027902 	.word	0x20027902
 801bf80:	08022330 	.word	0x08022330

0801bf84 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801bf84:	b480      	push	{r7}
 801bf86:	b085      	sub	sp, #20
 801bf88:	af00      	add	r7, sp, #0
 801bf8a:	6078      	str	r0, [r7, #4]
 801bf8c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bf98:	d002      	beq.n	801bfa0 <ip4_addr_isbroadcast_u32+0x1c>
 801bf9a:	687b      	ldr	r3, [r7, #4]
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d101      	bne.n	801bfa4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801bfa0:	2301      	movs	r3, #1
 801bfa2:	e02a      	b.n	801bffa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801bfa4:	683b      	ldr	r3, [r7, #0]
 801bfa6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bfaa:	f003 0302 	and.w	r3, r3, #2
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	d101      	bne.n	801bfb6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801bfb2:	2300      	movs	r3, #0
 801bfb4:	e021      	b.n	801bffa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801bfb6:	683b      	ldr	r3, [r7, #0]
 801bfb8:	3304      	adds	r3, #4
 801bfba:	681b      	ldr	r3, [r3, #0]
 801bfbc:	687a      	ldr	r2, [r7, #4]
 801bfbe:	429a      	cmp	r2, r3
 801bfc0:	d101      	bne.n	801bfc6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801bfc2:	2300      	movs	r3, #0
 801bfc4:	e019      	b.n	801bffa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801bfc6:	68fa      	ldr	r2, [r7, #12]
 801bfc8:	683b      	ldr	r3, [r7, #0]
 801bfca:	3304      	adds	r3, #4
 801bfcc:	681b      	ldr	r3, [r3, #0]
 801bfce:	405a      	eors	r2, r3
 801bfd0:	683b      	ldr	r3, [r7, #0]
 801bfd2:	3308      	adds	r3, #8
 801bfd4:	681b      	ldr	r3, [r3, #0]
 801bfd6:	4013      	ands	r3, r2
 801bfd8:	2b00      	cmp	r3, #0
 801bfda:	d10d      	bne.n	801bff8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801bfdc:	683b      	ldr	r3, [r7, #0]
 801bfde:	3308      	adds	r3, #8
 801bfe0:	681b      	ldr	r3, [r3, #0]
 801bfe2:	43da      	mvns	r2, r3
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801bfe8:	683b      	ldr	r3, [r7, #0]
 801bfea:	3308      	adds	r3, #8
 801bfec:	681b      	ldr	r3, [r3, #0]
 801bfee:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801bff0:	429a      	cmp	r2, r3
 801bff2:	d101      	bne.n	801bff8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801bff4:	2301      	movs	r3, #1
 801bff6:	e000      	b.n	801bffa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801bff8:	2300      	movs	r3, #0
  }
}
 801bffa:	4618      	mov	r0, r3
 801bffc:	3714      	adds	r7, #20
 801bffe:	46bd      	mov	sp, r7
 801c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c004:	4770      	bx	lr
	...

0801c008 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801c008:	b580      	push	{r7, lr}
 801c00a:	b084      	sub	sp, #16
 801c00c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801c00e:	2300      	movs	r3, #0
 801c010:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801c012:	4b12      	ldr	r3, [pc, #72]	@ (801c05c <ip_reass_tmr+0x54>)
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801c018:	e018      	b.n	801c04c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801c01a:	68fb      	ldr	r3, [r7, #12]
 801c01c:	7fdb      	ldrb	r3, [r3, #31]
 801c01e:	2b00      	cmp	r3, #0
 801c020:	d00b      	beq.n	801c03a <ip_reass_tmr+0x32>
      r->timer--;
 801c022:	68fb      	ldr	r3, [r7, #12]
 801c024:	7fdb      	ldrb	r3, [r3, #31]
 801c026:	3b01      	subs	r3, #1
 801c028:	b2da      	uxtb	r2, r3
 801c02a:	68fb      	ldr	r3, [r7, #12]
 801c02c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801c02e:	68fb      	ldr	r3, [r7, #12]
 801c030:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801c032:	68fb      	ldr	r3, [r7, #12]
 801c034:	681b      	ldr	r3, [r3, #0]
 801c036:	60fb      	str	r3, [r7, #12]
 801c038:	e008      	b.n	801c04c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801c03a:	68fb      	ldr	r3, [r7, #12]
 801c03c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801c044:	68b9      	ldr	r1, [r7, #8]
 801c046:	6878      	ldr	r0, [r7, #4]
 801c048:	f000 f80a 	bl	801c060 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801c04c:	68fb      	ldr	r3, [r7, #12]
 801c04e:	2b00      	cmp	r3, #0
 801c050:	d1e3      	bne.n	801c01a <ip_reass_tmr+0x12>
    }
  }
}
 801c052:	bf00      	nop
 801c054:	bf00      	nop
 801c056:	3710      	adds	r7, #16
 801c058:	46bd      	mov	sp, r7
 801c05a:	bd80      	pop	{r7, pc}
 801c05c:	20027904 	.word	0x20027904

0801c060 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c060:	b580      	push	{r7, lr}
 801c062:	b088      	sub	sp, #32
 801c064:	af00      	add	r7, sp, #0
 801c066:	6078      	str	r0, [r7, #4]
 801c068:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801c06a:	2300      	movs	r3, #0
 801c06c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801c06e:	683a      	ldr	r2, [r7, #0]
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	429a      	cmp	r2, r3
 801c074:	d105      	bne.n	801c082 <ip_reass_free_complete_datagram+0x22>
 801c076:	4b45      	ldr	r3, [pc, #276]	@ (801c18c <ip_reass_free_complete_datagram+0x12c>)
 801c078:	22ab      	movs	r2, #171	@ 0xab
 801c07a:	4945      	ldr	r1, [pc, #276]	@ (801c190 <ip_reass_free_complete_datagram+0x130>)
 801c07c:	4845      	ldr	r0, [pc, #276]	@ (801c194 <ip_reass_free_complete_datagram+0x134>)
 801c07e:	f002 f829 	bl	801e0d4 <iprintf>
  if (prev != NULL) {
 801c082:	683b      	ldr	r3, [r7, #0]
 801c084:	2b00      	cmp	r3, #0
 801c086:	d00a      	beq.n	801c09e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801c088:	683b      	ldr	r3, [r7, #0]
 801c08a:	681b      	ldr	r3, [r3, #0]
 801c08c:	687a      	ldr	r2, [r7, #4]
 801c08e:	429a      	cmp	r2, r3
 801c090:	d005      	beq.n	801c09e <ip_reass_free_complete_datagram+0x3e>
 801c092:	4b3e      	ldr	r3, [pc, #248]	@ (801c18c <ip_reass_free_complete_datagram+0x12c>)
 801c094:	22ad      	movs	r2, #173	@ 0xad
 801c096:	4940      	ldr	r1, [pc, #256]	@ (801c198 <ip_reass_free_complete_datagram+0x138>)
 801c098:	483e      	ldr	r0, [pc, #248]	@ (801c194 <ip_reass_free_complete_datagram+0x134>)
 801c09a:	f002 f81b 	bl	801e0d4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	685b      	ldr	r3, [r3, #4]
 801c0a2:	685b      	ldr	r3, [r3, #4]
 801c0a4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801c0a6:	697b      	ldr	r3, [r7, #20]
 801c0a8:	889b      	ldrh	r3, [r3, #4]
 801c0aa:	b29b      	uxth	r3, r3
 801c0ac:	2b00      	cmp	r3, #0
 801c0ae:	d12a      	bne.n	801c106 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	685b      	ldr	r3, [r3, #4]
 801c0b4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801c0b6:	697b      	ldr	r3, [r7, #20]
 801c0b8:	681a      	ldr	r2, [r3, #0]
 801c0ba:	687b      	ldr	r3, [r7, #4]
 801c0bc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801c0be:	69bb      	ldr	r3, [r7, #24]
 801c0c0:	6858      	ldr	r0, [r3, #4]
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	3308      	adds	r3, #8
 801c0c6:	2214      	movs	r2, #20
 801c0c8:	4619      	mov	r1, r3
 801c0ca:	f002 fa2e 	bl	801e52a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801c0ce:	2101      	movs	r1, #1
 801c0d0:	69b8      	ldr	r0, [r7, #24]
 801c0d2:	f7ff fc47 	bl	801b964 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801c0d6:	69b8      	ldr	r0, [r7, #24]
 801c0d8:	f7f8 fa8e 	bl	80145f8 <pbuf_clen>
 801c0dc:	4603      	mov	r3, r0
 801c0de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c0e0:	8bfa      	ldrh	r2, [r7, #30]
 801c0e2:	8a7b      	ldrh	r3, [r7, #18]
 801c0e4:	4413      	add	r3, r2
 801c0e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c0ea:	db05      	blt.n	801c0f8 <ip_reass_free_complete_datagram+0x98>
 801c0ec:	4b27      	ldr	r3, [pc, #156]	@ (801c18c <ip_reass_free_complete_datagram+0x12c>)
 801c0ee:	22bc      	movs	r2, #188	@ 0xbc
 801c0f0:	492a      	ldr	r1, [pc, #168]	@ (801c19c <ip_reass_free_complete_datagram+0x13c>)
 801c0f2:	4828      	ldr	r0, [pc, #160]	@ (801c194 <ip_reass_free_complete_datagram+0x134>)
 801c0f4:	f001 ffee 	bl	801e0d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c0f8:	8bfa      	ldrh	r2, [r7, #30]
 801c0fa:	8a7b      	ldrh	r3, [r7, #18]
 801c0fc:	4413      	add	r3, r2
 801c0fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801c100:	69b8      	ldr	r0, [r7, #24]
 801c102:	f7f8 f9eb 	bl	80144dc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	685b      	ldr	r3, [r3, #4]
 801c10a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801c10c:	e01f      	b.n	801c14e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801c10e:	69bb      	ldr	r3, [r7, #24]
 801c110:	685b      	ldr	r3, [r3, #4]
 801c112:	617b      	str	r3, [r7, #20]
    pcur = p;
 801c114:	69bb      	ldr	r3, [r7, #24]
 801c116:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801c118:	697b      	ldr	r3, [r7, #20]
 801c11a:	681b      	ldr	r3, [r3, #0]
 801c11c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801c11e:	68f8      	ldr	r0, [r7, #12]
 801c120:	f7f8 fa6a 	bl	80145f8 <pbuf_clen>
 801c124:	4603      	mov	r3, r0
 801c126:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c128:	8bfa      	ldrh	r2, [r7, #30]
 801c12a:	8a7b      	ldrh	r3, [r7, #18]
 801c12c:	4413      	add	r3, r2
 801c12e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c132:	db05      	blt.n	801c140 <ip_reass_free_complete_datagram+0xe0>
 801c134:	4b15      	ldr	r3, [pc, #84]	@ (801c18c <ip_reass_free_complete_datagram+0x12c>)
 801c136:	22cc      	movs	r2, #204	@ 0xcc
 801c138:	4918      	ldr	r1, [pc, #96]	@ (801c19c <ip_reass_free_complete_datagram+0x13c>)
 801c13a:	4816      	ldr	r0, [pc, #88]	@ (801c194 <ip_reass_free_complete_datagram+0x134>)
 801c13c:	f001 ffca 	bl	801e0d4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c140:	8bfa      	ldrh	r2, [r7, #30]
 801c142:	8a7b      	ldrh	r3, [r7, #18]
 801c144:	4413      	add	r3, r2
 801c146:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801c148:	68f8      	ldr	r0, [r7, #12]
 801c14a:	f7f8 f9c7 	bl	80144dc <pbuf_free>
  while (p != NULL) {
 801c14e:	69bb      	ldr	r3, [r7, #24]
 801c150:	2b00      	cmp	r3, #0
 801c152:	d1dc      	bne.n	801c10e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801c154:	6839      	ldr	r1, [r7, #0]
 801c156:	6878      	ldr	r0, [r7, #4]
 801c158:	f000 f8c2 	bl	801c2e0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801c15c:	4b10      	ldr	r3, [pc, #64]	@ (801c1a0 <ip_reass_free_complete_datagram+0x140>)
 801c15e:	881b      	ldrh	r3, [r3, #0]
 801c160:	8bfa      	ldrh	r2, [r7, #30]
 801c162:	429a      	cmp	r2, r3
 801c164:	d905      	bls.n	801c172 <ip_reass_free_complete_datagram+0x112>
 801c166:	4b09      	ldr	r3, [pc, #36]	@ (801c18c <ip_reass_free_complete_datagram+0x12c>)
 801c168:	22d2      	movs	r2, #210	@ 0xd2
 801c16a:	490e      	ldr	r1, [pc, #56]	@ (801c1a4 <ip_reass_free_complete_datagram+0x144>)
 801c16c:	4809      	ldr	r0, [pc, #36]	@ (801c194 <ip_reass_free_complete_datagram+0x134>)
 801c16e:	f001 ffb1 	bl	801e0d4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801c172:	4b0b      	ldr	r3, [pc, #44]	@ (801c1a0 <ip_reass_free_complete_datagram+0x140>)
 801c174:	881a      	ldrh	r2, [r3, #0]
 801c176:	8bfb      	ldrh	r3, [r7, #30]
 801c178:	1ad3      	subs	r3, r2, r3
 801c17a:	b29a      	uxth	r2, r3
 801c17c:	4b08      	ldr	r3, [pc, #32]	@ (801c1a0 <ip_reass_free_complete_datagram+0x140>)
 801c17e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801c180:	8bfb      	ldrh	r3, [r7, #30]
}
 801c182:	4618      	mov	r0, r3
 801c184:	3720      	adds	r7, #32
 801c186:	46bd      	mov	sp, r7
 801c188:	bd80      	pop	{r7, pc}
 801c18a:	bf00      	nop
 801c18c:	08021a54 	.word	0x08021a54
 801c190:	08021a90 	.word	0x08021a90
 801c194:	08021a9c 	.word	0x08021a9c
 801c198:	08021ac4 	.word	0x08021ac4
 801c19c:	08021ad8 	.word	0x08021ad8
 801c1a0:	20027908 	.word	0x20027908
 801c1a4:	08021af8 	.word	0x08021af8

0801c1a8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801c1a8:	b580      	push	{r7, lr}
 801c1aa:	b08a      	sub	sp, #40	@ 0x28
 801c1ac:	af00      	add	r7, sp, #0
 801c1ae:	6078      	str	r0, [r7, #4]
 801c1b0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801c1b2:	2300      	movs	r3, #0
 801c1b4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801c1b6:	2300      	movs	r3, #0
 801c1b8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801c1ba:	2300      	movs	r3, #0
 801c1bc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801c1be:	2300      	movs	r3, #0
 801c1c0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801c1c2:	2300      	movs	r3, #0
 801c1c4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801c1c6:	4b28      	ldr	r3, [pc, #160]	@ (801c268 <ip_reass_remove_oldest_datagram+0xc0>)
 801c1c8:	681b      	ldr	r3, [r3, #0]
 801c1ca:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c1cc:	e030      	b.n	801c230 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801c1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1d0:	695a      	ldr	r2, [r3, #20]
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	68db      	ldr	r3, [r3, #12]
 801c1d6:	429a      	cmp	r2, r3
 801c1d8:	d10c      	bne.n	801c1f4 <ip_reass_remove_oldest_datagram+0x4c>
 801c1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1dc:	699a      	ldr	r2, [r3, #24]
 801c1de:	687b      	ldr	r3, [r7, #4]
 801c1e0:	691b      	ldr	r3, [r3, #16]
 801c1e2:	429a      	cmp	r2, r3
 801c1e4:	d106      	bne.n	801c1f4 <ip_reass_remove_oldest_datagram+0x4c>
 801c1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1e8:	899a      	ldrh	r2, [r3, #12]
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	889b      	ldrh	r3, [r3, #4]
 801c1ee:	b29b      	uxth	r3, r3
 801c1f0:	429a      	cmp	r2, r3
 801c1f2:	d014      	beq.n	801c21e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801c1f4:	693b      	ldr	r3, [r7, #16]
 801c1f6:	3301      	adds	r3, #1
 801c1f8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801c1fa:	6a3b      	ldr	r3, [r7, #32]
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	d104      	bne.n	801c20a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801c200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c202:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c204:	69fb      	ldr	r3, [r7, #28]
 801c206:	61bb      	str	r3, [r7, #24]
 801c208:	e009      	b.n	801c21e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801c20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c20c:	7fda      	ldrb	r2, [r3, #31]
 801c20e:	6a3b      	ldr	r3, [r7, #32]
 801c210:	7fdb      	ldrb	r3, [r3, #31]
 801c212:	429a      	cmp	r2, r3
 801c214:	d803      	bhi.n	801c21e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801c216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c218:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c21a:	69fb      	ldr	r3, [r7, #28]
 801c21c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801c21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c220:	681b      	ldr	r3, [r3, #0]
 801c222:	2b00      	cmp	r3, #0
 801c224:	d001      	beq.n	801c22a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801c226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c228:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801c22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c22c:	681b      	ldr	r3, [r3, #0]
 801c22e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c232:	2b00      	cmp	r3, #0
 801c234:	d1cb      	bne.n	801c1ce <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801c236:	6a3b      	ldr	r3, [r7, #32]
 801c238:	2b00      	cmp	r3, #0
 801c23a:	d008      	beq.n	801c24e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801c23c:	69b9      	ldr	r1, [r7, #24]
 801c23e:	6a38      	ldr	r0, [r7, #32]
 801c240:	f7ff ff0e 	bl	801c060 <ip_reass_free_complete_datagram>
 801c244:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801c246:	697a      	ldr	r2, [r7, #20]
 801c248:	68fb      	ldr	r3, [r7, #12]
 801c24a:	4413      	add	r3, r2
 801c24c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801c24e:	697a      	ldr	r2, [r7, #20]
 801c250:	683b      	ldr	r3, [r7, #0]
 801c252:	429a      	cmp	r2, r3
 801c254:	da02      	bge.n	801c25c <ip_reass_remove_oldest_datagram+0xb4>
 801c256:	693b      	ldr	r3, [r7, #16]
 801c258:	2b01      	cmp	r3, #1
 801c25a:	dcac      	bgt.n	801c1b6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801c25c:	697b      	ldr	r3, [r7, #20]
}
 801c25e:	4618      	mov	r0, r3
 801c260:	3728      	adds	r7, #40	@ 0x28
 801c262:	46bd      	mov	sp, r7
 801c264:	bd80      	pop	{r7, pc}
 801c266:	bf00      	nop
 801c268:	20027904 	.word	0x20027904

0801c26c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801c26c:	b580      	push	{r7, lr}
 801c26e:	b084      	sub	sp, #16
 801c270:	af00      	add	r7, sp, #0
 801c272:	6078      	str	r0, [r7, #4]
 801c274:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c276:	2004      	movs	r0, #4
 801c278:	f7f7 fa16 	bl	80136a8 <memp_malloc>
 801c27c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801c27e:	68fb      	ldr	r3, [r7, #12]
 801c280:	2b00      	cmp	r3, #0
 801c282:	d110      	bne.n	801c2a6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801c284:	6839      	ldr	r1, [r7, #0]
 801c286:	6878      	ldr	r0, [r7, #4]
 801c288:	f7ff ff8e 	bl	801c1a8 <ip_reass_remove_oldest_datagram>
 801c28c:	4602      	mov	r2, r0
 801c28e:	683b      	ldr	r3, [r7, #0]
 801c290:	4293      	cmp	r3, r2
 801c292:	dc03      	bgt.n	801c29c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c294:	2004      	movs	r0, #4
 801c296:	f7f7 fa07 	bl	80136a8 <memp_malloc>
 801c29a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801c29c:	68fb      	ldr	r3, [r7, #12]
 801c29e:	2b00      	cmp	r3, #0
 801c2a0:	d101      	bne.n	801c2a6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801c2a2:	2300      	movs	r3, #0
 801c2a4:	e016      	b.n	801c2d4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801c2a6:	2220      	movs	r2, #32
 801c2a8:	2100      	movs	r1, #0
 801c2aa:	68f8      	ldr	r0, [r7, #12]
 801c2ac:	f002 f86a 	bl	801e384 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801c2b0:	68fb      	ldr	r3, [r7, #12]
 801c2b2:	220f      	movs	r2, #15
 801c2b4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801c2b6:	4b09      	ldr	r3, [pc, #36]	@ (801c2dc <ip_reass_enqueue_new_datagram+0x70>)
 801c2b8:	681a      	ldr	r2, [r3, #0]
 801c2ba:	68fb      	ldr	r3, [r7, #12]
 801c2bc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801c2be:	4a07      	ldr	r2, [pc, #28]	@ (801c2dc <ip_reass_enqueue_new_datagram+0x70>)
 801c2c0:	68fb      	ldr	r3, [r7, #12]
 801c2c2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801c2c4:	68fb      	ldr	r3, [r7, #12]
 801c2c6:	3308      	adds	r3, #8
 801c2c8:	2214      	movs	r2, #20
 801c2ca:	6879      	ldr	r1, [r7, #4]
 801c2cc:	4618      	mov	r0, r3
 801c2ce:	f002 f92c 	bl	801e52a <memcpy>
  return ipr;
 801c2d2:	68fb      	ldr	r3, [r7, #12]
}
 801c2d4:	4618      	mov	r0, r3
 801c2d6:	3710      	adds	r7, #16
 801c2d8:	46bd      	mov	sp, r7
 801c2da:	bd80      	pop	{r7, pc}
 801c2dc:	20027904 	.word	0x20027904

0801c2e0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c2e0:	b580      	push	{r7, lr}
 801c2e2:	b082      	sub	sp, #8
 801c2e4:	af00      	add	r7, sp, #0
 801c2e6:	6078      	str	r0, [r7, #4]
 801c2e8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801c2ea:	4b10      	ldr	r3, [pc, #64]	@ (801c32c <ip_reass_dequeue_datagram+0x4c>)
 801c2ec:	681b      	ldr	r3, [r3, #0]
 801c2ee:	687a      	ldr	r2, [r7, #4]
 801c2f0:	429a      	cmp	r2, r3
 801c2f2:	d104      	bne.n	801c2fe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	681b      	ldr	r3, [r3, #0]
 801c2f8:	4a0c      	ldr	r2, [pc, #48]	@ (801c32c <ip_reass_dequeue_datagram+0x4c>)
 801c2fa:	6013      	str	r3, [r2, #0]
 801c2fc:	e00d      	b.n	801c31a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801c2fe:	683b      	ldr	r3, [r7, #0]
 801c300:	2b00      	cmp	r3, #0
 801c302:	d106      	bne.n	801c312 <ip_reass_dequeue_datagram+0x32>
 801c304:	4b0a      	ldr	r3, [pc, #40]	@ (801c330 <ip_reass_dequeue_datagram+0x50>)
 801c306:	f240 1245 	movw	r2, #325	@ 0x145
 801c30a:	490a      	ldr	r1, [pc, #40]	@ (801c334 <ip_reass_dequeue_datagram+0x54>)
 801c30c:	480a      	ldr	r0, [pc, #40]	@ (801c338 <ip_reass_dequeue_datagram+0x58>)
 801c30e:	f001 fee1 	bl	801e0d4 <iprintf>
    prev->next = ipr->next;
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	681a      	ldr	r2, [r3, #0]
 801c316:	683b      	ldr	r3, [r7, #0]
 801c318:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801c31a:	6879      	ldr	r1, [r7, #4]
 801c31c:	2004      	movs	r0, #4
 801c31e:	f7f7 fa39 	bl	8013794 <memp_free>
}
 801c322:	bf00      	nop
 801c324:	3708      	adds	r7, #8
 801c326:	46bd      	mov	sp, r7
 801c328:	bd80      	pop	{r7, pc}
 801c32a:	bf00      	nop
 801c32c:	20027904 	.word	0x20027904
 801c330:	08021a54 	.word	0x08021a54
 801c334:	08021b1c 	.word	0x08021b1c
 801c338:	08021a9c 	.word	0x08021a9c

0801c33c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801c33c:	b580      	push	{r7, lr}
 801c33e:	b08c      	sub	sp, #48	@ 0x30
 801c340:	af00      	add	r7, sp, #0
 801c342:	60f8      	str	r0, [r7, #12]
 801c344:	60b9      	str	r1, [r7, #8]
 801c346:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801c348:	2300      	movs	r3, #0
 801c34a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801c34c:	2301      	movs	r3, #1
 801c34e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801c350:	68bb      	ldr	r3, [r7, #8]
 801c352:	685b      	ldr	r3, [r3, #4]
 801c354:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c356:	69fb      	ldr	r3, [r7, #28]
 801c358:	885b      	ldrh	r3, [r3, #2]
 801c35a:	b29b      	uxth	r3, r3
 801c35c:	4618      	mov	r0, r3
 801c35e:	f7f6 fccf 	bl	8012d00 <lwip_htons>
 801c362:	4603      	mov	r3, r0
 801c364:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801c366:	69fb      	ldr	r3, [r7, #28]
 801c368:	781b      	ldrb	r3, [r3, #0]
 801c36a:	f003 030f 	and.w	r3, r3, #15
 801c36e:	b2db      	uxtb	r3, r3
 801c370:	009b      	lsls	r3, r3, #2
 801c372:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801c374:	7e7b      	ldrb	r3, [r7, #25]
 801c376:	b29b      	uxth	r3, r3
 801c378:	8b7a      	ldrh	r2, [r7, #26]
 801c37a:	429a      	cmp	r2, r3
 801c37c:	d202      	bcs.n	801c384 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c37e:	f04f 33ff 	mov.w	r3, #4294967295
 801c382:	e135      	b.n	801c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801c384:	7e7b      	ldrb	r3, [r7, #25]
 801c386:	b29b      	uxth	r3, r3
 801c388:	8b7a      	ldrh	r2, [r7, #26]
 801c38a:	1ad3      	subs	r3, r2, r3
 801c38c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801c38e:	69fb      	ldr	r3, [r7, #28]
 801c390:	88db      	ldrh	r3, [r3, #6]
 801c392:	b29b      	uxth	r3, r3
 801c394:	4618      	mov	r0, r3
 801c396:	f7f6 fcb3 	bl	8012d00 <lwip_htons>
 801c39a:	4603      	mov	r3, r0
 801c39c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c3a0:	b29b      	uxth	r3, r3
 801c3a2:	00db      	lsls	r3, r3, #3
 801c3a4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801c3a6:	68bb      	ldr	r3, [r7, #8]
 801c3a8:	685b      	ldr	r3, [r3, #4]
 801c3aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801c3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3ae:	2200      	movs	r2, #0
 801c3b0:	701a      	strb	r2, [r3, #0]
 801c3b2:	2200      	movs	r2, #0
 801c3b4:	705a      	strb	r2, [r3, #1]
 801c3b6:	2200      	movs	r2, #0
 801c3b8:	709a      	strb	r2, [r3, #2]
 801c3ba:	2200      	movs	r2, #0
 801c3bc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801c3be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3c0:	8afa      	ldrh	r2, [r7, #22]
 801c3c2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801c3c4:	8afa      	ldrh	r2, [r7, #22]
 801c3c6:	8b7b      	ldrh	r3, [r7, #26]
 801c3c8:	4413      	add	r3, r2
 801c3ca:	b29a      	uxth	r2, r3
 801c3cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3ce:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801c3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3d2:	88db      	ldrh	r3, [r3, #6]
 801c3d4:	b29b      	uxth	r3, r3
 801c3d6:	8afa      	ldrh	r2, [r7, #22]
 801c3d8:	429a      	cmp	r2, r3
 801c3da:	d902      	bls.n	801c3e2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c3dc:	f04f 33ff 	mov.w	r3, #4294967295
 801c3e0:	e106      	b.n	801c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801c3e2:	68fb      	ldr	r3, [r7, #12]
 801c3e4:	685b      	ldr	r3, [r3, #4]
 801c3e6:	627b      	str	r3, [r7, #36]	@ 0x24
 801c3e8:	e068      	b.n	801c4bc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801c3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3ec:	685b      	ldr	r3, [r3, #4]
 801c3ee:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801c3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3f2:	889b      	ldrh	r3, [r3, #4]
 801c3f4:	b29a      	uxth	r2, r3
 801c3f6:	693b      	ldr	r3, [r7, #16]
 801c3f8:	889b      	ldrh	r3, [r3, #4]
 801c3fa:	b29b      	uxth	r3, r3
 801c3fc:	429a      	cmp	r2, r3
 801c3fe:	d235      	bcs.n	801c46c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801c400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c404:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801c406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d020      	beq.n	801c44e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801c40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c40e:	889b      	ldrh	r3, [r3, #4]
 801c410:	b29a      	uxth	r2, r3
 801c412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c414:	88db      	ldrh	r3, [r3, #6]
 801c416:	b29b      	uxth	r3, r3
 801c418:	429a      	cmp	r2, r3
 801c41a:	d307      	bcc.n	801c42c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801c41c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c41e:	88db      	ldrh	r3, [r3, #6]
 801c420:	b29a      	uxth	r2, r3
 801c422:	693b      	ldr	r3, [r7, #16]
 801c424:	889b      	ldrh	r3, [r3, #4]
 801c426:	b29b      	uxth	r3, r3
 801c428:	429a      	cmp	r2, r3
 801c42a:	d902      	bls.n	801c432 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c42c:	f04f 33ff 	mov.w	r3, #4294967295
 801c430:	e0de      	b.n	801c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801c432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c434:	68ba      	ldr	r2, [r7, #8]
 801c436:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801c438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c43a:	88db      	ldrh	r3, [r3, #6]
 801c43c:	b29a      	uxth	r2, r3
 801c43e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c440:	889b      	ldrh	r3, [r3, #4]
 801c442:	b29b      	uxth	r3, r3
 801c444:	429a      	cmp	r2, r3
 801c446:	d03d      	beq.n	801c4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c448:	2300      	movs	r3, #0
 801c44a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801c44c:	e03a      	b.n	801c4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801c44e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c450:	88db      	ldrh	r3, [r3, #6]
 801c452:	b29a      	uxth	r2, r3
 801c454:	693b      	ldr	r3, [r7, #16]
 801c456:	889b      	ldrh	r3, [r3, #4]
 801c458:	b29b      	uxth	r3, r3
 801c45a:	429a      	cmp	r2, r3
 801c45c:	d902      	bls.n	801c464 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c45e:	f04f 33ff 	mov.w	r3, #4294967295
 801c462:	e0c5      	b.n	801c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801c464:	68fb      	ldr	r3, [r7, #12]
 801c466:	68ba      	ldr	r2, [r7, #8]
 801c468:	605a      	str	r2, [r3, #4]
      break;
 801c46a:	e02b      	b.n	801c4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801c46c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c46e:	889b      	ldrh	r3, [r3, #4]
 801c470:	b29a      	uxth	r2, r3
 801c472:	693b      	ldr	r3, [r7, #16]
 801c474:	889b      	ldrh	r3, [r3, #4]
 801c476:	b29b      	uxth	r3, r3
 801c478:	429a      	cmp	r2, r3
 801c47a:	d102      	bne.n	801c482 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c47c:	f04f 33ff 	mov.w	r3, #4294967295
 801c480:	e0b6      	b.n	801c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801c482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c484:	889b      	ldrh	r3, [r3, #4]
 801c486:	b29a      	uxth	r2, r3
 801c488:	693b      	ldr	r3, [r7, #16]
 801c48a:	88db      	ldrh	r3, [r3, #6]
 801c48c:	b29b      	uxth	r3, r3
 801c48e:	429a      	cmp	r2, r3
 801c490:	d202      	bcs.n	801c498 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c492:	f04f 33ff 	mov.w	r3, #4294967295
 801c496:	e0ab      	b.n	801c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801c498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c49a:	2b00      	cmp	r3, #0
 801c49c:	d009      	beq.n	801c4b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801c49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4a0:	88db      	ldrh	r3, [r3, #6]
 801c4a2:	b29a      	uxth	r2, r3
 801c4a4:	693b      	ldr	r3, [r7, #16]
 801c4a6:	889b      	ldrh	r3, [r3, #4]
 801c4a8:	b29b      	uxth	r3, r3
 801c4aa:	429a      	cmp	r2, r3
 801c4ac:	d001      	beq.n	801c4b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c4ae:	2300      	movs	r3, #0
 801c4b0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801c4b2:	693b      	ldr	r3, [r7, #16]
 801c4b4:	681b      	ldr	r3, [r3, #0]
 801c4b6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801c4b8:	693b      	ldr	r3, [r7, #16]
 801c4ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801c4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	d193      	bne.n	801c3ea <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801c4c2:	e000      	b.n	801c4c6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801c4c4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801c4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4c8:	2b00      	cmp	r3, #0
 801c4ca:	d12d      	bne.n	801c528 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801c4cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4ce:	2b00      	cmp	r3, #0
 801c4d0:	d01c      	beq.n	801c50c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801c4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4d4:	88db      	ldrh	r3, [r3, #6]
 801c4d6:	b29a      	uxth	r2, r3
 801c4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4da:	889b      	ldrh	r3, [r3, #4]
 801c4dc:	b29b      	uxth	r3, r3
 801c4de:	429a      	cmp	r2, r3
 801c4e0:	d906      	bls.n	801c4f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801c4e2:	4b45      	ldr	r3, [pc, #276]	@ (801c5f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c4e4:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801c4e8:	4944      	ldr	r1, [pc, #272]	@ (801c5fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801c4ea:	4845      	ldr	r0, [pc, #276]	@ (801c600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c4ec:	f001 fdf2 	bl	801e0d4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801c4f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4f2:	68ba      	ldr	r2, [r7, #8]
 801c4f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801c4f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4f8:	88db      	ldrh	r3, [r3, #6]
 801c4fa:	b29a      	uxth	r2, r3
 801c4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4fe:	889b      	ldrh	r3, [r3, #4]
 801c500:	b29b      	uxth	r3, r3
 801c502:	429a      	cmp	r2, r3
 801c504:	d010      	beq.n	801c528 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801c506:	2300      	movs	r3, #0
 801c508:	623b      	str	r3, [r7, #32]
 801c50a:	e00d      	b.n	801c528 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801c50c:	68fb      	ldr	r3, [r7, #12]
 801c50e:	685b      	ldr	r3, [r3, #4]
 801c510:	2b00      	cmp	r3, #0
 801c512:	d006      	beq.n	801c522 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801c514:	4b38      	ldr	r3, [pc, #224]	@ (801c5f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c516:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801c51a:	493a      	ldr	r1, [pc, #232]	@ (801c604 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801c51c:	4838      	ldr	r0, [pc, #224]	@ (801c600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c51e:	f001 fdd9 	bl	801e0d4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801c522:	68fb      	ldr	r3, [r7, #12]
 801c524:	68ba      	ldr	r2, [r7, #8]
 801c526:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	d105      	bne.n	801c53a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801c52e:	68fb      	ldr	r3, [r7, #12]
 801c530:	7f9b      	ldrb	r3, [r3, #30]
 801c532:	f003 0301 	and.w	r3, r3, #1
 801c536:	2b00      	cmp	r3, #0
 801c538:	d059      	beq.n	801c5ee <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801c53a:	6a3b      	ldr	r3, [r7, #32]
 801c53c:	2b00      	cmp	r3, #0
 801c53e:	d04f      	beq.n	801c5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801c540:	68fb      	ldr	r3, [r7, #12]
 801c542:	685b      	ldr	r3, [r3, #4]
 801c544:	2b00      	cmp	r3, #0
 801c546:	d006      	beq.n	801c556 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801c548:	68fb      	ldr	r3, [r7, #12]
 801c54a:	685b      	ldr	r3, [r3, #4]
 801c54c:	685b      	ldr	r3, [r3, #4]
 801c54e:	889b      	ldrh	r3, [r3, #4]
 801c550:	b29b      	uxth	r3, r3
 801c552:	2b00      	cmp	r3, #0
 801c554:	d002      	beq.n	801c55c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801c556:	2300      	movs	r3, #0
 801c558:	623b      	str	r3, [r7, #32]
 801c55a:	e041      	b.n	801c5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801c55c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c55e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801c560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c562:	681b      	ldr	r3, [r3, #0]
 801c564:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c566:	e012      	b.n	801c58e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801c568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c56a:	685b      	ldr	r3, [r3, #4]
 801c56c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801c56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c570:	88db      	ldrh	r3, [r3, #6]
 801c572:	b29a      	uxth	r2, r3
 801c574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c576:	889b      	ldrh	r3, [r3, #4]
 801c578:	b29b      	uxth	r3, r3
 801c57a:	429a      	cmp	r2, r3
 801c57c:	d002      	beq.n	801c584 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801c57e:	2300      	movs	r3, #0
 801c580:	623b      	str	r3, [r7, #32]
            break;
 801c582:	e007      	b.n	801c594 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801c584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c586:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801c588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c58a:	681b      	ldr	r3, [r3, #0]
 801c58c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c590:	2b00      	cmp	r3, #0
 801c592:	d1e9      	bne.n	801c568 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801c594:	6a3b      	ldr	r3, [r7, #32]
 801c596:	2b00      	cmp	r3, #0
 801c598:	d022      	beq.n	801c5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801c59a:	68fb      	ldr	r3, [r7, #12]
 801c59c:	685b      	ldr	r3, [r3, #4]
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	d106      	bne.n	801c5b0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801c5a2:	4b15      	ldr	r3, [pc, #84]	@ (801c5f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c5a4:	f240 12df 	movw	r2, #479	@ 0x1df
 801c5a8:	4917      	ldr	r1, [pc, #92]	@ (801c608 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c5aa:	4815      	ldr	r0, [pc, #84]	@ (801c600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c5ac:	f001 fd92 	bl	801e0d4 <iprintf>
          LWIP_ASSERT("sanity check",
 801c5b0:	68fb      	ldr	r3, [r7, #12]
 801c5b2:	685b      	ldr	r3, [r3, #4]
 801c5b4:	685b      	ldr	r3, [r3, #4]
 801c5b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c5b8:	429a      	cmp	r2, r3
 801c5ba:	d106      	bne.n	801c5ca <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801c5bc:	4b0e      	ldr	r3, [pc, #56]	@ (801c5f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c5be:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801c5c2:	4911      	ldr	r1, [pc, #68]	@ (801c608 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c5c4:	480e      	ldr	r0, [pc, #56]	@ (801c600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c5c6:	f001 fd85 	bl	801e0d4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801c5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5cc:	681b      	ldr	r3, [r3, #0]
 801c5ce:	2b00      	cmp	r3, #0
 801c5d0:	d006      	beq.n	801c5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801c5d2:	4b09      	ldr	r3, [pc, #36]	@ (801c5f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c5d4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801c5d8:	490c      	ldr	r1, [pc, #48]	@ (801c60c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801c5da:	4809      	ldr	r0, [pc, #36]	@ (801c600 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c5dc:	f001 fd7a 	bl	801e0d4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801c5e0:	6a3b      	ldr	r3, [r7, #32]
 801c5e2:	2b00      	cmp	r3, #0
 801c5e4:	bf14      	ite	ne
 801c5e6:	2301      	movne	r3, #1
 801c5e8:	2300      	moveq	r3, #0
 801c5ea:	b2db      	uxtb	r3, r3
 801c5ec:	e000      	b.n	801c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801c5ee:	2300      	movs	r3, #0
}
 801c5f0:	4618      	mov	r0, r3
 801c5f2:	3730      	adds	r7, #48	@ 0x30
 801c5f4:	46bd      	mov	sp, r7
 801c5f6:	bd80      	pop	{r7, pc}
 801c5f8:	08021a54 	.word	0x08021a54
 801c5fc:	08021b38 	.word	0x08021b38
 801c600:	08021a9c 	.word	0x08021a9c
 801c604:	08021b58 	.word	0x08021b58
 801c608:	08021b90 	.word	0x08021b90
 801c60c:	08021ba0 	.word	0x08021ba0

0801c610 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801c610:	b580      	push	{r7, lr}
 801c612:	b08e      	sub	sp, #56	@ 0x38
 801c614:	af00      	add	r7, sp, #0
 801c616:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801c618:	687b      	ldr	r3, [r7, #4]
 801c61a:	685b      	ldr	r3, [r3, #4]
 801c61c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801c61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c620:	781b      	ldrb	r3, [r3, #0]
 801c622:	f003 030f 	and.w	r3, r3, #15
 801c626:	b2db      	uxtb	r3, r3
 801c628:	009b      	lsls	r3, r3, #2
 801c62a:	b2db      	uxtb	r3, r3
 801c62c:	2b14      	cmp	r3, #20
 801c62e:	f040 8171 	bne.w	801c914 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801c632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c634:	88db      	ldrh	r3, [r3, #6]
 801c636:	b29b      	uxth	r3, r3
 801c638:	4618      	mov	r0, r3
 801c63a:	f7f6 fb61 	bl	8012d00 <lwip_htons>
 801c63e:	4603      	mov	r3, r0
 801c640:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c644:	b29b      	uxth	r3, r3
 801c646:	00db      	lsls	r3, r3, #3
 801c648:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c64c:	885b      	ldrh	r3, [r3, #2]
 801c64e:	b29b      	uxth	r3, r3
 801c650:	4618      	mov	r0, r3
 801c652:	f7f6 fb55 	bl	8012d00 <lwip_htons>
 801c656:	4603      	mov	r3, r0
 801c658:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801c65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c65c:	781b      	ldrb	r3, [r3, #0]
 801c65e:	f003 030f 	and.w	r3, r3, #15
 801c662:	b2db      	uxtb	r3, r3
 801c664:	009b      	lsls	r3, r3, #2
 801c666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801c66a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c66e:	b29b      	uxth	r3, r3
 801c670:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c672:	429a      	cmp	r2, r3
 801c674:	f0c0 8150 	bcc.w	801c918 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801c678:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c67c:	b29b      	uxth	r3, r3
 801c67e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c680:	1ad3      	subs	r3, r2, r3
 801c682:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801c684:	6878      	ldr	r0, [r7, #4]
 801c686:	f7f7 ffb7 	bl	80145f8 <pbuf_clen>
 801c68a:	4603      	mov	r3, r0
 801c68c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801c68e:	4b8c      	ldr	r3, [pc, #560]	@ (801c8c0 <ip4_reass+0x2b0>)
 801c690:	881b      	ldrh	r3, [r3, #0]
 801c692:	461a      	mov	r2, r3
 801c694:	8c3b      	ldrh	r3, [r7, #32]
 801c696:	4413      	add	r3, r2
 801c698:	2b0a      	cmp	r3, #10
 801c69a:	dd10      	ble.n	801c6be <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c69c:	8c3b      	ldrh	r3, [r7, #32]
 801c69e:	4619      	mov	r1, r3
 801c6a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c6a2:	f7ff fd81 	bl	801c1a8 <ip_reass_remove_oldest_datagram>
 801c6a6:	4603      	mov	r3, r0
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	f000 8137 	beq.w	801c91c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801c6ae:	4b84      	ldr	r3, [pc, #528]	@ (801c8c0 <ip4_reass+0x2b0>)
 801c6b0:	881b      	ldrh	r3, [r3, #0]
 801c6b2:	461a      	mov	r2, r3
 801c6b4:	8c3b      	ldrh	r3, [r7, #32]
 801c6b6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c6b8:	2b0a      	cmp	r3, #10
 801c6ba:	f300 812f 	bgt.w	801c91c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c6be:	4b81      	ldr	r3, [pc, #516]	@ (801c8c4 <ip4_reass+0x2b4>)
 801c6c0:	681b      	ldr	r3, [r3, #0]
 801c6c2:	633b      	str	r3, [r7, #48]	@ 0x30
 801c6c4:	e015      	b.n	801c6f2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801c6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6c8:	695a      	ldr	r2, [r3, #20]
 801c6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6cc:	68db      	ldr	r3, [r3, #12]
 801c6ce:	429a      	cmp	r2, r3
 801c6d0:	d10c      	bne.n	801c6ec <ip4_reass+0xdc>
 801c6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6d4:	699a      	ldr	r2, [r3, #24]
 801c6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6d8:	691b      	ldr	r3, [r3, #16]
 801c6da:	429a      	cmp	r2, r3
 801c6dc:	d106      	bne.n	801c6ec <ip4_reass+0xdc>
 801c6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6e0:	899a      	ldrh	r2, [r3, #12]
 801c6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6e4:	889b      	ldrh	r3, [r3, #4]
 801c6e6:	b29b      	uxth	r3, r3
 801c6e8:	429a      	cmp	r2, r3
 801c6ea:	d006      	beq.n	801c6fa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6ee:	681b      	ldr	r3, [r3, #0]
 801c6f0:	633b      	str	r3, [r7, #48]	@ 0x30
 801c6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6f4:	2b00      	cmp	r3, #0
 801c6f6:	d1e6      	bne.n	801c6c6 <ip4_reass+0xb6>
 801c6f8:	e000      	b.n	801c6fc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801c6fa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801c6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6fe:	2b00      	cmp	r3, #0
 801c700:	d109      	bne.n	801c716 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801c702:	8c3b      	ldrh	r3, [r7, #32]
 801c704:	4619      	mov	r1, r3
 801c706:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c708:	f7ff fdb0 	bl	801c26c <ip_reass_enqueue_new_datagram>
 801c70c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801c70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c710:	2b00      	cmp	r3, #0
 801c712:	d11c      	bne.n	801c74e <ip4_reass+0x13e>
      goto nullreturn;
 801c714:	e105      	b.n	801c922 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c718:	88db      	ldrh	r3, [r3, #6]
 801c71a:	b29b      	uxth	r3, r3
 801c71c:	4618      	mov	r0, r3
 801c71e:	f7f6 faef 	bl	8012d00 <lwip_htons>
 801c722:	4603      	mov	r3, r0
 801c724:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c728:	2b00      	cmp	r3, #0
 801c72a:	d110      	bne.n	801c74e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801c72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c72e:	89db      	ldrh	r3, [r3, #14]
 801c730:	4618      	mov	r0, r3
 801c732:	f7f6 fae5 	bl	8012d00 <lwip_htons>
 801c736:	4603      	mov	r3, r0
 801c738:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d006      	beq.n	801c74e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801c740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c742:	3308      	adds	r3, #8
 801c744:	2214      	movs	r2, #20
 801c746:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801c748:	4618      	mov	r0, r3
 801c74a:	f001 feee 	bl	801e52a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801c74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c750:	88db      	ldrh	r3, [r3, #6]
 801c752:	b29b      	uxth	r3, r3
 801c754:	f003 0320 	and.w	r3, r3, #32
 801c758:	2b00      	cmp	r3, #0
 801c75a:	bf0c      	ite	eq
 801c75c:	2301      	moveq	r3, #1
 801c75e:	2300      	movne	r3, #0
 801c760:	b2db      	uxtb	r3, r3
 801c762:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801c764:	69fb      	ldr	r3, [r7, #28]
 801c766:	2b00      	cmp	r3, #0
 801c768:	d00e      	beq.n	801c788 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801c76a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c76c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c76e:	4413      	add	r3, r2
 801c770:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801c772:	8b7a      	ldrh	r2, [r7, #26]
 801c774:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c776:	429a      	cmp	r2, r3
 801c778:	f0c0 80a0 	bcc.w	801c8bc <ip4_reass+0x2ac>
 801c77c:	8b7b      	ldrh	r3, [r7, #26]
 801c77e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801c782:	4293      	cmp	r3, r2
 801c784:	f200 809a 	bhi.w	801c8bc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801c788:	69fa      	ldr	r2, [r7, #28]
 801c78a:	6879      	ldr	r1, [r7, #4]
 801c78c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c78e:	f7ff fdd5 	bl	801c33c <ip_reass_chain_frag_into_datagram_and_validate>
 801c792:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801c794:	697b      	ldr	r3, [r7, #20]
 801c796:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c79a:	f000 809b 	beq.w	801c8d4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c79e:	4b48      	ldr	r3, [pc, #288]	@ (801c8c0 <ip4_reass+0x2b0>)
 801c7a0:	881a      	ldrh	r2, [r3, #0]
 801c7a2:	8c3b      	ldrh	r3, [r7, #32]
 801c7a4:	4413      	add	r3, r2
 801c7a6:	b29a      	uxth	r2, r3
 801c7a8:	4b45      	ldr	r3, [pc, #276]	@ (801c8c0 <ip4_reass+0x2b0>)
 801c7aa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801c7ac:	69fb      	ldr	r3, [r7, #28]
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	d00d      	beq.n	801c7ce <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801c7b2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c7b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c7b6:	4413      	add	r3, r2
 801c7b8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801c7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7bc:	8a7a      	ldrh	r2, [r7, #18]
 801c7be:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7c2:	7f9b      	ldrb	r3, [r3, #30]
 801c7c4:	f043 0301 	orr.w	r3, r3, #1
 801c7c8:	b2da      	uxtb	r2, r3
 801c7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7cc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801c7ce:	697b      	ldr	r3, [r7, #20]
 801c7d0:	2b01      	cmp	r3, #1
 801c7d2:	d171      	bne.n	801c8b8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801c7d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7d6:	8b9b      	ldrh	r3, [r3, #28]
 801c7d8:	3314      	adds	r3, #20
 801c7da:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801c7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7de:	685b      	ldr	r3, [r3, #4]
 801c7e0:	685b      	ldr	r3, [r3, #4]
 801c7e2:	681b      	ldr	r3, [r3, #0]
 801c7e4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801c7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7e8:	685b      	ldr	r3, [r3, #4]
 801c7ea:	685b      	ldr	r3, [r3, #4]
 801c7ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7f0:	3308      	adds	r3, #8
 801c7f2:	2214      	movs	r2, #20
 801c7f4:	4619      	mov	r1, r3
 801c7f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c7f8:	f001 fe97 	bl	801e52a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801c7fc:	8a3b      	ldrh	r3, [r7, #16]
 801c7fe:	4618      	mov	r0, r3
 801c800:	f7f6 fa7e 	bl	8012d00 <lwip_htons>
 801c804:	4603      	mov	r3, r0
 801c806:	461a      	mov	r2, r3
 801c808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c80a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801c80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c80e:	2200      	movs	r2, #0
 801c810:	719a      	strb	r2, [r3, #6]
 801c812:	2200      	movs	r2, #0
 801c814:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801c816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c818:	2200      	movs	r2, #0
 801c81a:	729a      	strb	r2, [r3, #10]
 801c81c:	2200      	movs	r2, #0
 801c81e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801c820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c822:	685b      	ldr	r3, [r3, #4]
 801c824:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801c826:	e00d      	b.n	801c844 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801c828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c82a:	685b      	ldr	r3, [r3, #4]
 801c82c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801c82e:	2114      	movs	r1, #20
 801c830:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801c832:	f7f7 fdcd 	bl	80143d0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801c836:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c838:	6878      	ldr	r0, [r7, #4]
 801c83a:	f7f7 ff1d 	bl	8014678 <pbuf_cat>
      r = iprh->next_pbuf;
 801c83e:	68fb      	ldr	r3, [r7, #12]
 801c840:	681b      	ldr	r3, [r3, #0]
 801c842:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801c844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c846:	2b00      	cmp	r3, #0
 801c848:	d1ee      	bne.n	801c828 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801c84a:	4b1e      	ldr	r3, [pc, #120]	@ (801c8c4 <ip4_reass+0x2b4>)
 801c84c:	681b      	ldr	r3, [r3, #0]
 801c84e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c850:	429a      	cmp	r2, r3
 801c852:	d102      	bne.n	801c85a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801c854:	2300      	movs	r3, #0
 801c856:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c858:	e010      	b.n	801c87c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c85a:	4b1a      	ldr	r3, [pc, #104]	@ (801c8c4 <ip4_reass+0x2b4>)
 801c85c:	681b      	ldr	r3, [r3, #0]
 801c85e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c860:	e007      	b.n	801c872 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801c862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c864:	681b      	ldr	r3, [r3, #0]
 801c866:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c868:	429a      	cmp	r2, r3
 801c86a:	d006      	beq.n	801c87a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c86e:	681b      	ldr	r3, [r3, #0]
 801c870:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c874:	2b00      	cmp	r3, #0
 801c876:	d1f4      	bne.n	801c862 <ip4_reass+0x252>
 801c878:	e000      	b.n	801c87c <ip4_reass+0x26c>
          break;
 801c87a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801c87c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c87e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c880:	f7ff fd2e 	bl	801c2e0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801c884:	6878      	ldr	r0, [r7, #4]
 801c886:	f7f7 feb7 	bl	80145f8 <pbuf_clen>
 801c88a:	4603      	mov	r3, r0
 801c88c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801c88e:	4b0c      	ldr	r3, [pc, #48]	@ (801c8c0 <ip4_reass+0x2b0>)
 801c890:	881b      	ldrh	r3, [r3, #0]
 801c892:	8c3a      	ldrh	r2, [r7, #32]
 801c894:	429a      	cmp	r2, r3
 801c896:	d906      	bls.n	801c8a6 <ip4_reass+0x296>
 801c898:	4b0b      	ldr	r3, [pc, #44]	@ (801c8c8 <ip4_reass+0x2b8>)
 801c89a:	f240 229b 	movw	r2, #667	@ 0x29b
 801c89e:	490b      	ldr	r1, [pc, #44]	@ (801c8cc <ip4_reass+0x2bc>)
 801c8a0:	480b      	ldr	r0, [pc, #44]	@ (801c8d0 <ip4_reass+0x2c0>)
 801c8a2:	f001 fc17 	bl	801e0d4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801c8a6:	4b06      	ldr	r3, [pc, #24]	@ (801c8c0 <ip4_reass+0x2b0>)
 801c8a8:	881a      	ldrh	r2, [r3, #0]
 801c8aa:	8c3b      	ldrh	r3, [r7, #32]
 801c8ac:	1ad3      	subs	r3, r2, r3
 801c8ae:	b29a      	uxth	r2, r3
 801c8b0:	4b03      	ldr	r3, [pc, #12]	@ (801c8c0 <ip4_reass+0x2b0>)
 801c8b2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	e038      	b.n	801c92a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801c8b8:	2300      	movs	r3, #0
 801c8ba:	e036      	b.n	801c92a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801c8bc:	bf00      	nop
 801c8be:	e00a      	b.n	801c8d6 <ip4_reass+0x2c6>
 801c8c0:	20027908 	.word	0x20027908
 801c8c4:	20027904 	.word	0x20027904
 801c8c8:	08021a54 	.word	0x08021a54
 801c8cc:	08021bc4 	.word	0x08021bc4
 801c8d0:	08021a9c 	.word	0x08021a9c
    goto nullreturn_ipr;
 801c8d4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801c8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	d106      	bne.n	801c8ea <ip4_reass+0x2da>
 801c8dc:	4b15      	ldr	r3, [pc, #84]	@ (801c934 <ip4_reass+0x324>)
 801c8de:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801c8e2:	4915      	ldr	r1, [pc, #84]	@ (801c938 <ip4_reass+0x328>)
 801c8e4:	4815      	ldr	r0, [pc, #84]	@ (801c93c <ip4_reass+0x32c>)
 801c8e6:	f001 fbf5 	bl	801e0d4 <iprintf>
  if (ipr->p == NULL) {
 801c8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c8ec:	685b      	ldr	r3, [r3, #4]
 801c8ee:	2b00      	cmp	r3, #0
 801c8f0:	d116      	bne.n	801c920 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801c8f2:	4b13      	ldr	r3, [pc, #76]	@ (801c940 <ip4_reass+0x330>)
 801c8f4:	681b      	ldr	r3, [r3, #0]
 801c8f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c8f8:	429a      	cmp	r2, r3
 801c8fa:	d006      	beq.n	801c90a <ip4_reass+0x2fa>
 801c8fc:	4b0d      	ldr	r3, [pc, #52]	@ (801c934 <ip4_reass+0x324>)
 801c8fe:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801c902:	4910      	ldr	r1, [pc, #64]	@ (801c944 <ip4_reass+0x334>)
 801c904:	480d      	ldr	r0, [pc, #52]	@ (801c93c <ip4_reass+0x32c>)
 801c906:	f001 fbe5 	bl	801e0d4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801c90a:	2100      	movs	r1, #0
 801c90c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c90e:	f7ff fce7 	bl	801c2e0 <ip_reass_dequeue_datagram>
 801c912:	e006      	b.n	801c922 <ip4_reass+0x312>
    goto nullreturn;
 801c914:	bf00      	nop
 801c916:	e004      	b.n	801c922 <ip4_reass+0x312>
    goto nullreturn;
 801c918:	bf00      	nop
 801c91a:	e002      	b.n	801c922 <ip4_reass+0x312>
      goto nullreturn;
 801c91c:	bf00      	nop
 801c91e:	e000      	b.n	801c922 <ip4_reass+0x312>
  }

nullreturn:
 801c920:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801c922:	6878      	ldr	r0, [r7, #4]
 801c924:	f7f7 fdda 	bl	80144dc <pbuf_free>
  return NULL;
 801c928:	2300      	movs	r3, #0
}
 801c92a:	4618      	mov	r0, r3
 801c92c:	3738      	adds	r7, #56	@ 0x38
 801c92e:	46bd      	mov	sp, r7
 801c930:	bd80      	pop	{r7, pc}
 801c932:	bf00      	nop
 801c934:	08021a54 	.word	0x08021a54
 801c938:	08021be0 	.word	0x08021be0
 801c93c:	08021a9c 	.word	0x08021a9c
 801c940:	20027904 	.word	0x20027904
 801c944:	08021bec 	.word	0x08021bec

0801c948 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801c948:	b580      	push	{r7, lr}
 801c94a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801c94c:	2005      	movs	r0, #5
 801c94e:	f7f6 feab 	bl	80136a8 <memp_malloc>
 801c952:	4603      	mov	r3, r0
}
 801c954:	4618      	mov	r0, r3
 801c956:	bd80      	pop	{r7, pc}

0801c958 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801c958:	b580      	push	{r7, lr}
 801c95a:	b082      	sub	sp, #8
 801c95c:	af00      	add	r7, sp, #0
 801c95e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801c960:	687b      	ldr	r3, [r7, #4]
 801c962:	2b00      	cmp	r3, #0
 801c964:	d106      	bne.n	801c974 <ip_frag_free_pbuf_custom_ref+0x1c>
 801c966:	4b07      	ldr	r3, [pc, #28]	@ (801c984 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c968:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801c96c:	4906      	ldr	r1, [pc, #24]	@ (801c988 <ip_frag_free_pbuf_custom_ref+0x30>)
 801c96e:	4807      	ldr	r0, [pc, #28]	@ (801c98c <ip_frag_free_pbuf_custom_ref+0x34>)
 801c970:	f001 fbb0 	bl	801e0d4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801c974:	6879      	ldr	r1, [r7, #4]
 801c976:	2005      	movs	r0, #5
 801c978:	f7f6 ff0c 	bl	8013794 <memp_free>
}
 801c97c:	bf00      	nop
 801c97e:	3708      	adds	r7, #8
 801c980:	46bd      	mov	sp, r7
 801c982:	bd80      	pop	{r7, pc}
 801c984:	08021a54 	.word	0x08021a54
 801c988:	08021c0c 	.word	0x08021c0c
 801c98c:	08021a9c 	.word	0x08021a9c

0801c990 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801c990:	b580      	push	{r7, lr}
 801c992:	b084      	sub	sp, #16
 801c994:	af00      	add	r7, sp, #0
 801c996:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801c998:	687b      	ldr	r3, [r7, #4]
 801c99a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c99c:	68fb      	ldr	r3, [r7, #12]
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	d106      	bne.n	801c9b0 <ipfrag_free_pbuf_custom+0x20>
 801c9a2:	4b11      	ldr	r3, [pc, #68]	@ (801c9e8 <ipfrag_free_pbuf_custom+0x58>)
 801c9a4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801c9a8:	4910      	ldr	r1, [pc, #64]	@ (801c9ec <ipfrag_free_pbuf_custom+0x5c>)
 801c9aa:	4811      	ldr	r0, [pc, #68]	@ (801c9f0 <ipfrag_free_pbuf_custom+0x60>)
 801c9ac:	f001 fb92 	bl	801e0d4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801c9b0:	68fa      	ldr	r2, [r7, #12]
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	429a      	cmp	r2, r3
 801c9b6:	d006      	beq.n	801c9c6 <ipfrag_free_pbuf_custom+0x36>
 801c9b8:	4b0b      	ldr	r3, [pc, #44]	@ (801c9e8 <ipfrag_free_pbuf_custom+0x58>)
 801c9ba:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801c9be:	490d      	ldr	r1, [pc, #52]	@ (801c9f4 <ipfrag_free_pbuf_custom+0x64>)
 801c9c0:	480b      	ldr	r0, [pc, #44]	@ (801c9f0 <ipfrag_free_pbuf_custom+0x60>)
 801c9c2:	f001 fb87 	bl	801e0d4 <iprintf>
  if (pcr->original != NULL) {
 801c9c6:	68fb      	ldr	r3, [r7, #12]
 801c9c8:	695b      	ldr	r3, [r3, #20]
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	d004      	beq.n	801c9d8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801c9ce:	68fb      	ldr	r3, [r7, #12]
 801c9d0:	695b      	ldr	r3, [r3, #20]
 801c9d2:	4618      	mov	r0, r3
 801c9d4:	f7f7 fd82 	bl	80144dc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801c9d8:	68f8      	ldr	r0, [r7, #12]
 801c9da:	f7ff ffbd 	bl	801c958 <ip_frag_free_pbuf_custom_ref>
}
 801c9de:	bf00      	nop
 801c9e0:	3710      	adds	r7, #16
 801c9e2:	46bd      	mov	sp, r7
 801c9e4:	bd80      	pop	{r7, pc}
 801c9e6:	bf00      	nop
 801c9e8:	08021a54 	.word	0x08021a54
 801c9ec:	08021c18 	.word	0x08021c18
 801c9f0:	08021a9c 	.word	0x08021a9c
 801c9f4:	08021c24 	.word	0x08021c24

0801c9f8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801c9f8:	b580      	push	{r7, lr}
 801c9fa:	b094      	sub	sp, #80	@ 0x50
 801c9fc:	af02      	add	r7, sp, #8
 801c9fe:	60f8      	str	r0, [r7, #12]
 801ca00:	60b9      	str	r1, [r7, #8]
 801ca02:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801ca04:	2300      	movs	r3, #0
 801ca06:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801ca0a:	68bb      	ldr	r3, [r7, #8]
 801ca0c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801ca0e:	3b14      	subs	r3, #20
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	da00      	bge.n	801ca16 <ip4_frag+0x1e>
 801ca14:	3307      	adds	r3, #7
 801ca16:	10db      	asrs	r3, r3, #3
 801ca18:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801ca1a:	2314      	movs	r3, #20
 801ca1c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801ca1e:	68fb      	ldr	r3, [r7, #12]
 801ca20:	685b      	ldr	r3, [r3, #4]
 801ca22:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801ca24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ca26:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801ca28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca2a:	781b      	ldrb	r3, [r3, #0]
 801ca2c:	f003 030f 	and.w	r3, r3, #15
 801ca30:	b2db      	uxtb	r3, r3
 801ca32:	009b      	lsls	r3, r3, #2
 801ca34:	b2db      	uxtb	r3, r3
 801ca36:	2b14      	cmp	r3, #20
 801ca38:	d002      	beq.n	801ca40 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801ca3a:	f06f 0305 	mvn.w	r3, #5
 801ca3e:	e110      	b.n	801cc62 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801ca40:	68fb      	ldr	r3, [r7, #12]
 801ca42:	895b      	ldrh	r3, [r3, #10]
 801ca44:	2b13      	cmp	r3, #19
 801ca46:	d809      	bhi.n	801ca5c <ip4_frag+0x64>
 801ca48:	4b88      	ldr	r3, [pc, #544]	@ (801cc6c <ip4_frag+0x274>)
 801ca4a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801ca4e:	4988      	ldr	r1, [pc, #544]	@ (801cc70 <ip4_frag+0x278>)
 801ca50:	4888      	ldr	r0, [pc, #544]	@ (801cc74 <ip4_frag+0x27c>)
 801ca52:	f001 fb3f 	bl	801e0d4 <iprintf>
 801ca56:	f06f 0305 	mvn.w	r3, #5
 801ca5a:	e102      	b.n	801cc62 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801ca5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca5e:	88db      	ldrh	r3, [r3, #6]
 801ca60:	b29b      	uxth	r3, r3
 801ca62:	4618      	mov	r0, r3
 801ca64:	f7f6 f94c 	bl	8012d00 <lwip_htons>
 801ca68:	4603      	mov	r3, r0
 801ca6a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801ca6c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ca6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ca72:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801ca76:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ca78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801ca7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801ca7e:	68fb      	ldr	r3, [r7, #12]
 801ca80:	891b      	ldrh	r3, [r3, #8]
 801ca82:	3b14      	subs	r3, #20
 801ca84:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801ca88:	e0e1      	b.n	801cc4e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ca8a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ca8c:	00db      	lsls	r3, r3, #3
 801ca8e:	b29b      	uxth	r3, r3
 801ca90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ca94:	4293      	cmp	r3, r2
 801ca96:	bf28      	it	cs
 801ca98:	4613      	movcs	r3, r2
 801ca9a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ca9c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801caa0:	2114      	movs	r1, #20
 801caa2:	200e      	movs	r0, #14
 801caa4:	f7f7 fa36 	bl	8013f14 <pbuf_alloc>
 801caa8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801caaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801caac:	2b00      	cmp	r3, #0
 801caae:	f000 80d5 	beq.w	801cc5c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801cab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cab4:	895b      	ldrh	r3, [r3, #10]
 801cab6:	2b13      	cmp	r3, #19
 801cab8:	d806      	bhi.n	801cac8 <ip4_frag+0xd0>
 801caba:	4b6c      	ldr	r3, [pc, #432]	@ (801cc6c <ip4_frag+0x274>)
 801cabc:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801cac0:	496d      	ldr	r1, [pc, #436]	@ (801cc78 <ip4_frag+0x280>)
 801cac2:	486c      	ldr	r0, [pc, #432]	@ (801cc74 <ip4_frag+0x27c>)
 801cac4:	f001 fb06 	bl	801e0d4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801cac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801caca:	685b      	ldr	r3, [r3, #4]
 801cacc:	2214      	movs	r2, #20
 801cace:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801cad0:	4618      	mov	r0, r3
 801cad2:	f001 fd2a 	bl	801e52a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801cad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cad8:	685b      	ldr	r3, [r3, #4]
 801cada:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801cadc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cade:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801cae2:	e064      	b.n	801cbae <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801cae4:	68fb      	ldr	r3, [r7, #12]
 801cae6:	895a      	ldrh	r2, [r3, #10]
 801cae8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801caea:	1ad3      	subs	r3, r2, r3
 801caec:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801caee:	68fb      	ldr	r3, [r7, #12]
 801caf0:	895b      	ldrh	r3, [r3, #10]
 801caf2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801caf4:	429a      	cmp	r2, r3
 801caf6:	d906      	bls.n	801cb06 <ip4_frag+0x10e>
 801caf8:	4b5c      	ldr	r3, [pc, #368]	@ (801cc6c <ip4_frag+0x274>)
 801cafa:	f240 322d 	movw	r2, #813	@ 0x32d
 801cafe:	495f      	ldr	r1, [pc, #380]	@ (801cc7c <ip4_frag+0x284>)
 801cb00:	485c      	ldr	r0, [pc, #368]	@ (801cc74 <ip4_frag+0x27c>)
 801cb02:	f001 fae7 	bl	801e0d4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801cb06:	8bfa      	ldrh	r2, [r7, #30]
 801cb08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cb0c:	4293      	cmp	r3, r2
 801cb0e:	bf28      	it	cs
 801cb10:	4613      	movcs	r3, r2
 801cb12:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801cb16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cb1a:	2b00      	cmp	r3, #0
 801cb1c:	d105      	bne.n	801cb2a <ip4_frag+0x132>
        poff = 0;
 801cb1e:	2300      	movs	r3, #0
 801cb20:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801cb22:	68fb      	ldr	r3, [r7, #12]
 801cb24:	681b      	ldr	r3, [r3, #0]
 801cb26:	60fb      	str	r3, [r7, #12]
        continue;
 801cb28:	e041      	b.n	801cbae <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801cb2a:	f7ff ff0d 	bl	801c948 <ip_frag_alloc_pbuf_custom_ref>
 801cb2e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801cb30:	69bb      	ldr	r3, [r7, #24]
 801cb32:	2b00      	cmp	r3, #0
 801cb34:	d103      	bne.n	801cb3e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801cb36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cb38:	f7f7 fcd0 	bl	80144dc <pbuf_free>
        goto memerr;
 801cb3c:	e08f      	b.n	801cc5e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801cb3e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801cb40:	68fb      	ldr	r3, [r7, #12]
 801cb42:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801cb44:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801cb46:	4413      	add	r3, r2
 801cb48:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801cb4c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801cb50:	9201      	str	r2, [sp, #4]
 801cb52:	9300      	str	r3, [sp, #0]
 801cb54:	4603      	mov	r3, r0
 801cb56:	2241      	movs	r2, #65	@ 0x41
 801cb58:	2000      	movs	r0, #0
 801cb5a:	f7f7 fb05 	bl	8014168 <pbuf_alloced_custom>
 801cb5e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801cb60:	697b      	ldr	r3, [r7, #20]
 801cb62:	2b00      	cmp	r3, #0
 801cb64:	d106      	bne.n	801cb74 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801cb66:	69b8      	ldr	r0, [r7, #24]
 801cb68:	f7ff fef6 	bl	801c958 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801cb6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cb6e:	f7f7 fcb5 	bl	80144dc <pbuf_free>
        goto memerr;
 801cb72:	e074      	b.n	801cc5e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801cb74:	68f8      	ldr	r0, [r7, #12]
 801cb76:	f7f7 fd57 	bl	8014628 <pbuf_ref>
      pcr->original = p;
 801cb7a:	69bb      	ldr	r3, [r7, #24]
 801cb7c:	68fa      	ldr	r2, [r7, #12]
 801cb7e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801cb80:	69bb      	ldr	r3, [r7, #24]
 801cb82:	4a3f      	ldr	r2, [pc, #252]	@ (801cc80 <ip4_frag+0x288>)
 801cb84:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801cb86:	6979      	ldr	r1, [r7, #20]
 801cb88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cb8a:	f7f7 fd75 	bl	8014678 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801cb8e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801cb92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cb96:	1ad3      	subs	r3, r2, r3
 801cb98:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801cb9c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	d004      	beq.n	801cbae <ip4_frag+0x1b6>
        poff = 0;
 801cba4:	2300      	movs	r3, #0
 801cba6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801cba8:	68fb      	ldr	r3, [r7, #12]
 801cbaa:	681b      	ldr	r3, [r3, #0]
 801cbac:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801cbae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	d196      	bne.n	801cae4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801cbb6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801cbb8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cbbc:	4413      	add	r3, r2
 801cbbe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801cbc0:	68bb      	ldr	r3, [r7, #8]
 801cbc2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801cbc4:	f1a3 0213 	sub.w	r2, r3, #19
 801cbc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801cbcc:	429a      	cmp	r2, r3
 801cbce:	bfcc      	ite	gt
 801cbd0:	2301      	movgt	r3, #1
 801cbd2:	2300      	movle	r3, #0
 801cbd4:	b2db      	uxtb	r3, r3
 801cbd6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801cbd8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801cbdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cbe0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801cbe2:	6a3b      	ldr	r3, [r7, #32]
 801cbe4:	2b00      	cmp	r3, #0
 801cbe6:	d002      	beq.n	801cbee <ip4_frag+0x1f6>
 801cbe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	d003      	beq.n	801cbf6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801cbee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cbf0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801cbf4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801cbf6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cbf8:	4618      	mov	r0, r3
 801cbfa:	f7f6 f881 	bl	8012d00 <lwip_htons>
 801cbfe:	4603      	mov	r3, r0
 801cc00:	461a      	mov	r2, r3
 801cc02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc04:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801cc06:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cc08:	3314      	adds	r3, #20
 801cc0a:	b29b      	uxth	r3, r3
 801cc0c:	4618      	mov	r0, r3
 801cc0e:	f7f6 f877 	bl	8012d00 <lwip_htons>
 801cc12:	4603      	mov	r3, r0
 801cc14:	461a      	mov	r2, r3
 801cc16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc18:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801cc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc1c:	2200      	movs	r2, #0
 801cc1e:	729a      	strb	r2, [r3, #10]
 801cc20:	2200      	movs	r2, #0
 801cc22:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801cc24:	68bb      	ldr	r3, [r7, #8]
 801cc26:	695b      	ldr	r3, [r3, #20]
 801cc28:	687a      	ldr	r2, [r7, #4]
 801cc2a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801cc2c:	68b8      	ldr	r0, [r7, #8]
 801cc2e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801cc30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cc32:	f7f7 fc53 	bl	80144dc <pbuf_free>
    left = (u16_t)(left - fragsize);
 801cc36:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801cc3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cc3c:	1ad3      	subs	r3, r2, r3
 801cc3e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801cc42:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801cc46:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801cc48:	4413      	add	r3, r2
 801cc4a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801cc4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801cc52:	2b00      	cmp	r3, #0
 801cc54:	f47f af19 	bne.w	801ca8a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801cc58:	2300      	movs	r3, #0
 801cc5a:	e002      	b.n	801cc62 <ip4_frag+0x26a>
      goto memerr;
 801cc5c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801cc5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801cc62:	4618      	mov	r0, r3
 801cc64:	3748      	adds	r7, #72	@ 0x48
 801cc66:	46bd      	mov	sp, r7
 801cc68:	bd80      	pop	{r7, pc}
 801cc6a:	bf00      	nop
 801cc6c:	08021a54 	.word	0x08021a54
 801cc70:	08021c30 	.word	0x08021c30
 801cc74:	08021a9c 	.word	0x08021a9c
 801cc78:	08021c4c 	.word	0x08021c4c
 801cc7c:	08021c6c 	.word	0x08021c6c
 801cc80:	0801c991 	.word	0x0801c991

0801cc84 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801cc84:	b580      	push	{r7, lr}
 801cc86:	b086      	sub	sp, #24
 801cc88:	af00      	add	r7, sp, #0
 801cc8a:	6078      	str	r0, [r7, #4]
 801cc8c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801cc8e:	230e      	movs	r3, #14
 801cc90:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	895b      	ldrh	r3, [r3, #10]
 801cc96:	2b0e      	cmp	r3, #14
 801cc98:	d96e      	bls.n	801cd78 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801cc9a:	687b      	ldr	r3, [r7, #4]
 801cc9c:	7bdb      	ldrb	r3, [r3, #15]
 801cc9e:	2b00      	cmp	r3, #0
 801cca0:	d106      	bne.n	801ccb0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801cca2:	683b      	ldr	r3, [r7, #0]
 801cca4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801cca8:	3301      	adds	r3, #1
 801ccaa:	b2da      	uxtb	r2, r3
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801ccb0:	687b      	ldr	r3, [r7, #4]
 801ccb2:	685b      	ldr	r3, [r3, #4]
 801ccb4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801ccb6:	693b      	ldr	r3, [r7, #16]
 801ccb8:	7b1a      	ldrb	r2, [r3, #12]
 801ccba:	7b5b      	ldrb	r3, [r3, #13]
 801ccbc:	021b      	lsls	r3, r3, #8
 801ccbe:	4313      	orrs	r3, r2
 801ccc0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801ccc2:	693b      	ldr	r3, [r7, #16]
 801ccc4:	781b      	ldrb	r3, [r3, #0]
 801ccc6:	f003 0301 	and.w	r3, r3, #1
 801ccca:	2b00      	cmp	r3, #0
 801cccc:	d023      	beq.n	801cd16 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801ccce:	693b      	ldr	r3, [r7, #16]
 801ccd0:	781b      	ldrb	r3, [r3, #0]
 801ccd2:	2b01      	cmp	r3, #1
 801ccd4:	d10f      	bne.n	801ccf6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ccd6:	693b      	ldr	r3, [r7, #16]
 801ccd8:	785b      	ldrb	r3, [r3, #1]
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	d11b      	bne.n	801cd16 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801ccde:	693b      	ldr	r3, [r7, #16]
 801cce0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801cce2:	2b5e      	cmp	r3, #94	@ 0x5e
 801cce4:	d117      	bne.n	801cd16 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	7b5b      	ldrb	r3, [r3, #13]
 801ccea:	f043 0310 	orr.w	r3, r3, #16
 801ccee:	b2da      	uxtb	r2, r3
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	735a      	strb	r2, [r3, #13]
 801ccf4:	e00f      	b.n	801cd16 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801ccf6:	693b      	ldr	r3, [r7, #16]
 801ccf8:	2206      	movs	r2, #6
 801ccfa:	4928      	ldr	r1, [pc, #160]	@ (801cd9c <ethernet_input+0x118>)
 801ccfc:	4618      	mov	r0, r3
 801ccfe:	f001 fb31 	bl	801e364 <memcmp>
 801cd02:	4603      	mov	r3, r0
 801cd04:	2b00      	cmp	r3, #0
 801cd06:	d106      	bne.n	801cd16 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	7b5b      	ldrb	r3, [r3, #13]
 801cd0c:	f043 0308 	orr.w	r3, r3, #8
 801cd10:	b2da      	uxtb	r2, r3
 801cd12:	687b      	ldr	r3, [r7, #4]
 801cd14:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801cd16:	89fb      	ldrh	r3, [r7, #14]
 801cd18:	2b08      	cmp	r3, #8
 801cd1a:	d003      	beq.n	801cd24 <ethernet_input+0xa0>
 801cd1c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801cd20:	d014      	beq.n	801cd4c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801cd22:	e032      	b.n	801cd8a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801cd24:	683b      	ldr	r3, [r7, #0]
 801cd26:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801cd2a:	f003 0308 	and.w	r3, r3, #8
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	d024      	beq.n	801cd7c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801cd32:	8afb      	ldrh	r3, [r7, #22]
 801cd34:	4619      	mov	r1, r3
 801cd36:	6878      	ldr	r0, [r7, #4]
 801cd38:	f7f7 fb4a 	bl	80143d0 <pbuf_remove_header>
 801cd3c:	4603      	mov	r3, r0
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	d11e      	bne.n	801cd80 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801cd42:	6839      	ldr	r1, [r7, #0]
 801cd44:	6878      	ldr	r0, [r7, #4]
 801cd46:	f7fe ff21 	bl	801bb8c <ip4_input>
      break;
 801cd4a:	e013      	b.n	801cd74 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801cd4c:	683b      	ldr	r3, [r7, #0]
 801cd4e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801cd52:	f003 0308 	and.w	r3, r3, #8
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	d014      	beq.n	801cd84 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801cd5a:	8afb      	ldrh	r3, [r7, #22]
 801cd5c:	4619      	mov	r1, r3
 801cd5e:	6878      	ldr	r0, [r7, #4]
 801cd60:	f7f7 fb36 	bl	80143d0 <pbuf_remove_header>
 801cd64:	4603      	mov	r3, r0
 801cd66:	2b00      	cmp	r3, #0
 801cd68:	d10e      	bne.n	801cd88 <ethernet_input+0x104>
        etharp_input(p, netif);
 801cd6a:	6839      	ldr	r1, [r7, #0]
 801cd6c:	6878      	ldr	r0, [r7, #4]
 801cd6e:	f7fe f8c1 	bl	801aef4 <etharp_input>
      break;
 801cd72:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801cd74:	2300      	movs	r3, #0
 801cd76:	e00c      	b.n	801cd92 <ethernet_input+0x10e>
    goto free_and_return;
 801cd78:	bf00      	nop
 801cd7a:	e006      	b.n	801cd8a <ethernet_input+0x106>
        goto free_and_return;
 801cd7c:	bf00      	nop
 801cd7e:	e004      	b.n	801cd8a <ethernet_input+0x106>
        goto free_and_return;
 801cd80:	bf00      	nop
 801cd82:	e002      	b.n	801cd8a <ethernet_input+0x106>
        goto free_and_return;
 801cd84:	bf00      	nop
 801cd86:	e000      	b.n	801cd8a <ethernet_input+0x106>
        goto free_and_return;
 801cd88:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801cd8a:	6878      	ldr	r0, [r7, #4]
 801cd8c:	f7f7 fba6 	bl	80144dc <pbuf_free>
  return ERR_OK;
 801cd90:	2300      	movs	r3, #0
}
 801cd92:	4618      	mov	r0, r3
 801cd94:	3718      	adds	r7, #24
 801cd96:	46bd      	mov	sp, r7
 801cd98:	bd80      	pop	{r7, pc}
 801cd9a:	bf00      	nop
 801cd9c:	08022334 	.word	0x08022334

0801cda0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801cda0:	b580      	push	{r7, lr}
 801cda2:	b086      	sub	sp, #24
 801cda4:	af00      	add	r7, sp, #0
 801cda6:	60f8      	str	r0, [r7, #12]
 801cda8:	60b9      	str	r1, [r7, #8]
 801cdaa:	607a      	str	r2, [r7, #4]
 801cdac:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801cdae:	8c3b      	ldrh	r3, [r7, #32]
 801cdb0:	4618      	mov	r0, r3
 801cdb2:	f7f5 ffa5 	bl	8012d00 <lwip_htons>
 801cdb6:	4603      	mov	r3, r0
 801cdb8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801cdba:	210e      	movs	r1, #14
 801cdbc:	68b8      	ldr	r0, [r7, #8]
 801cdbe:	f7f7 faf7 	bl	80143b0 <pbuf_add_header>
 801cdc2:	4603      	mov	r3, r0
 801cdc4:	2b00      	cmp	r3, #0
 801cdc6:	d125      	bne.n	801ce14 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801cdc8:	68bb      	ldr	r3, [r7, #8]
 801cdca:	685b      	ldr	r3, [r3, #4]
 801cdcc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801cdce:	693b      	ldr	r3, [r7, #16]
 801cdd0:	8afa      	ldrh	r2, [r7, #22]
 801cdd2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801cdd4:	693b      	ldr	r3, [r7, #16]
 801cdd6:	2206      	movs	r2, #6
 801cdd8:	6839      	ldr	r1, [r7, #0]
 801cdda:	4618      	mov	r0, r3
 801cddc:	f001 fba5 	bl	801e52a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801cde0:	693b      	ldr	r3, [r7, #16]
 801cde2:	3306      	adds	r3, #6
 801cde4:	2206      	movs	r2, #6
 801cde6:	6879      	ldr	r1, [r7, #4]
 801cde8:	4618      	mov	r0, r3
 801cdea:	f001 fb9e 	bl	801e52a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801cdee:	68fb      	ldr	r3, [r7, #12]
 801cdf0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801cdf4:	2b06      	cmp	r3, #6
 801cdf6:	d006      	beq.n	801ce06 <ethernet_output+0x66>
 801cdf8:	4b0a      	ldr	r3, [pc, #40]	@ (801ce24 <ethernet_output+0x84>)
 801cdfa:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801cdfe:	490a      	ldr	r1, [pc, #40]	@ (801ce28 <ethernet_output+0x88>)
 801ce00:	480a      	ldr	r0, [pc, #40]	@ (801ce2c <ethernet_output+0x8c>)
 801ce02:	f001 f967 	bl	801e0d4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801ce06:	68fb      	ldr	r3, [r7, #12]
 801ce08:	699b      	ldr	r3, [r3, #24]
 801ce0a:	68b9      	ldr	r1, [r7, #8]
 801ce0c:	68f8      	ldr	r0, [r7, #12]
 801ce0e:	4798      	blx	r3
 801ce10:	4603      	mov	r3, r0
 801ce12:	e002      	b.n	801ce1a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801ce14:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801ce16:	f06f 0301 	mvn.w	r3, #1
}
 801ce1a:	4618      	mov	r0, r3
 801ce1c:	3718      	adds	r7, #24
 801ce1e:	46bd      	mov	sp, r7
 801ce20:	bd80      	pop	{r7, pc}
 801ce22:	bf00      	nop
 801ce24:	08021c7c 	.word	0x08021c7c
 801ce28:	08021cb4 	.word	0x08021cb4
 801ce2c:	08021ce8 	.word	0x08021ce8

0801ce30 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801ce30:	b580      	push	{r7, lr}
 801ce32:	b082      	sub	sp, #8
 801ce34:	af00      	add	r7, sp, #0
 801ce36:	6078      	str	r0, [r7, #4]
 801ce38:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801ce3a:	683b      	ldr	r3, [r7, #0]
 801ce3c:	2200      	movs	r2, #0
 801ce3e:	2104      	movs	r1, #4
 801ce40:	4618      	mov	r0, r3
 801ce42:	f7f2 f8e9 	bl	800f018 <osMessageQueueNew>
 801ce46:	4602      	mov	r2, r0
 801ce48:	687b      	ldr	r3, [r7, #4]
 801ce4a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	681b      	ldr	r3, [r3, #0]
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	d102      	bne.n	801ce5a <sys_mbox_new+0x2a>
    return ERR_MEM;
 801ce54:	f04f 33ff 	mov.w	r3, #4294967295
 801ce58:	e000      	b.n	801ce5c <sys_mbox_new+0x2c>

  return ERR_OK;
 801ce5a:	2300      	movs	r3, #0
}
 801ce5c:	4618      	mov	r0, r3
 801ce5e:	3708      	adds	r7, #8
 801ce60:	46bd      	mov	sp, r7
 801ce62:	bd80      	pop	{r7, pc}

0801ce64 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801ce64:	b580      	push	{r7, lr}
 801ce66:	b084      	sub	sp, #16
 801ce68:	af00      	add	r7, sp, #0
 801ce6a:	6078      	str	r0, [r7, #4]
 801ce6c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801ce6e:	687b      	ldr	r3, [r7, #4]
 801ce70:	6818      	ldr	r0, [r3, #0]
 801ce72:	4639      	mov	r1, r7
 801ce74:	2300      	movs	r3, #0
 801ce76:	2200      	movs	r2, #0
 801ce78:	f7f2 f954 	bl	800f124 <osMessageQueuePut>
 801ce7c:	4603      	mov	r3, r0
 801ce7e:	2b00      	cmp	r3, #0
 801ce80:	d102      	bne.n	801ce88 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801ce82:	2300      	movs	r3, #0
 801ce84:	73fb      	strb	r3, [r7, #15]
 801ce86:	e001      	b.n	801ce8c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801ce88:	23ff      	movs	r3, #255	@ 0xff
 801ce8a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801ce8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ce90:	4618      	mov	r0, r3
 801ce92:	3710      	adds	r7, #16
 801ce94:	46bd      	mov	sp, r7
 801ce96:	bd80      	pop	{r7, pc}

0801ce98 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801ce98:	b580      	push	{r7, lr}
 801ce9a:	b086      	sub	sp, #24
 801ce9c:	af00      	add	r7, sp, #0
 801ce9e:	60f8      	str	r0, [r7, #12]
 801cea0:	60b9      	str	r1, [r7, #8]
 801cea2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801cea4:	f7f1 fd1a 	bl	800e8dc <osKernelGetTickCount>
 801cea8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801ceaa:	687b      	ldr	r3, [r7, #4]
 801ceac:	2b00      	cmp	r3, #0
 801ceae:	d013      	beq.n	801ced8 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801ceb0:	68fb      	ldr	r3, [r7, #12]
 801ceb2:	6818      	ldr	r0, [r3, #0]
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	2200      	movs	r2, #0
 801ceb8:	68b9      	ldr	r1, [r7, #8]
 801ceba:	f7f2 f9a7 	bl	800f20c <osMessageQueueGet>
 801cebe:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801cec0:	693b      	ldr	r3, [r7, #16]
 801cec2:	2b00      	cmp	r3, #0
 801cec4:	d105      	bne.n	801ced2 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801cec6:	f7f1 fd09 	bl	800e8dc <osKernelGetTickCount>
 801ceca:	4602      	mov	r2, r0
 801cecc:	697b      	ldr	r3, [r7, #20]
 801cece:	1ad3      	subs	r3, r2, r3
 801ced0:	e00f      	b.n	801cef2 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ced2:	f04f 33ff 	mov.w	r3, #4294967295
 801ced6:	e00c      	b.n	801cef2 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801ced8:	68fb      	ldr	r3, [r7, #12]
 801ceda:	6818      	ldr	r0, [r3, #0]
 801cedc:	f04f 33ff 	mov.w	r3, #4294967295
 801cee0:	2200      	movs	r2, #0
 801cee2:	68b9      	ldr	r1, [r7, #8]
 801cee4:	f7f2 f992 	bl	800f20c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801cee8:	f7f1 fcf8 	bl	800e8dc <osKernelGetTickCount>
 801ceec:	4602      	mov	r2, r0
 801ceee:	697b      	ldr	r3, [r7, #20]
 801cef0:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801cef2:	4618      	mov	r0, r3
 801cef4:	3718      	adds	r7, #24
 801cef6:	46bd      	mov	sp, r7
 801cef8:	bd80      	pop	{r7, pc}

0801cefa <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801cefa:	b480      	push	{r7}
 801cefc:	b083      	sub	sp, #12
 801cefe:	af00      	add	r7, sp, #0
 801cf00:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801cf02:	687b      	ldr	r3, [r7, #4]
 801cf04:	681b      	ldr	r3, [r3, #0]
 801cf06:	2b00      	cmp	r3, #0
 801cf08:	d101      	bne.n	801cf0e <sys_mbox_valid+0x14>
    return 0;
 801cf0a:	2300      	movs	r3, #0
 801cf0c:	e000      	b.n	801cf10 <sys_mbox_valid+0x16>
  else
    return 1;
 801cf0e:	2301      	movs	r3, #1
}
 801cf10:	4618      	mov	r0, r3
 801cf12:	370c      	adds	r7, #12
 801cf14:	46bd      	mov	sp, r7
 801cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf1a:	4770      	bx	lr

0801cf1c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801cf1c:	b580      	push	{r7, lr}
 801cf1e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801cf20:	2000      	movs	r0, #0
 801cf22:	f7f1 fdd7 	bl	800ead4 <osMutexNew>
 801cf26:	4603      	mov	r3, r0
 801cf28:	4a01      	ldr	r2, [pc, #4]	@ (801cf30 <sys_init+0x14>)
 801cf2a:	6013      	str	r3, [r2, #0]
#endif
}
 801cf2c:	bf00      	nop
 801cf2e:	bd80      	pop	{r7, pc}
 801cf30:	2002790c 	.word	0x2002790c

0801cf34 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801cf34:	b580      	push	{r7, lr}
 801cf36:	b082      	sub	sp, #8
 801cf38:	af00      	add	r7, sp, #0
 801cf3a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801cf3c:	2000      	movs	r0, #0
 801cf3e:	f7f1 fdc9 	bl	800ead4 <osMutexNew>
 801cf42:	4602      	mov	r2, r0
 801cf44:	687b      	ldr	r3, [r7, #4]
 801cf46:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801cf48:	687b      	ldr	r3, [r7, #4]
 801cf4a:	681b      	ldr	r3, [r3, #0]
 801cf4c:	2b00      	cmp	r3, #0
 801cf4e:	d102      	bne.n	801cf56 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801cf50:	f04f 33ff 	mov.w	r3, #4294967295
 801cf54:	e000      	b.n	801cf58 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801cf56:	2300      	movs	r3, #0
}
 801cf58:	4618      	mov	r0, r3
 801cf5a:	3708      	adds	r7, #8
 801cf5c:	46bd      	mov	sp, r7
 801cf5e:	bd80      	pop	{r7, pc}

0801cf60 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801cf60:	b580      	push	{r7, lr}
 801cf62:	b082      	sub	sp, #8
 801cf64:	af00      	add	r7, sp, #0
 801cf66:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	681b      	ldr	r3, [r3, #0]
 801cf6c:	f04f 31ff 	mov.w	r1, #4294967295
 801cf70:	4618      	mov	r0, r3
 801cf72:	f7f1 fe49 	bl	800ec08 <osMutexAcquire>
#endif
}
 801cf76:	bf00      	nop
 801cf78:	3708      	adds	r7, #8
 801cf7a:	46bd      	mov	sp, r7
 801cf7c:	bd80      	pop	{r7, pc}

0801cf7e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801cf7e:	b580      	push	{r7, lr}
 801cf80:	b082      	sub	sp, #8
 801cf82:	af00      	add	r7, sp, #0
 801cf84:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801cf86:	687b      	ldr	r3, [r7, #4]
 801cf88:	681b      	ldr	r3, [r3, #0]
 801cf8a:	4618      	mov	r0, r3
 801cf8c:	f7f1 fe9a 	bl	800ecc4 <osMutexRelease>
}
 801cf90:	bf00      	nop
 801cf92:	3708      	adds	r7, #8
 801cf94:	46bd      	mov	sp, r7
 801cf96:	bd80      	pop	{r7, pc}

0801cf98 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801cf98:	b580      	push	{r7, lr}
 801cf9a:	b08e      	sub	sp, #56	@ 0x38
 801cf9c:	af00      	add	r7, sp, #0
 801cf9e:	60f8      	str	r0, [r7, #12]
 801cfa0:	60b9      	str	r1, [r7, #8]
 801cfa2:	607a      	str	r2, [r7, #4]
 801cfa4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801cfa6:	f107 0314 	add.w	r3, r7, #20
 801cfaa:	2224      	movs	r2, #36	@ 0x24
 801cfac:	2100      	movs	r1, #0
 801cfae:	4618      	mov	r0, r3
 801cfb0:	f001 f9e8 	bl	801e384 <memset>
 801cfb4:	68fb      	ldr	r3, [r7, #12]
 801cfb6:	617b      	str	r3, [r7, #20]
 801cfb8:	683b      	ldr	r3, [r7, #0]
 801cfba:	62bb      	str	r3, [r7, #40]	@ 0x28
 801cfbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cfbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801cfc0:	f107 0314 	add.w	r3, r7, #20
 801cfc4:	461a      	mov	r2, r3
 801cfc6:	6879      	ldr	r1, [r7, #4]
 801cfc8:	68b8      	ldr	r0, [r7, #8]
 801cfca:	f7f1 fcaf 	bl	800e92c <osThreadNew>
 801cfce:	4603      	mov	r3, r0
#endif
}
 801cfd0:	4618      	mov	r0, r3
 801cfd2:	3738      	adds	r7, #56	@ 0x38
 801cfd4:	46bd      	mov	sp, r7
 801cfd6:	bd80      	pop	{r7, pc}

0801cfd8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801cfd8:	b580      	push	{r7, lr}
 801cfda:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801cfdc:	4b04      	ldr	r3, [pc, #16]	@ (801cff0 <sys_arch_protect+0x18>)
 801cfde:	681b      	ldr	r3, [r3, #0]
 801cfe0:	f04f 31ff 	mov.w	r1, #4294967295
 801cfe4:	4618      	mov	r0, r3
 801cfe6:	f7f1 fe0f 	bl	800ec08 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801cfea:	2301      	movs	r3, #1
}
 801cfec:	4618      	mov	r0, r3
 801cfee:	bd80      	pop	{r7, pc}
 801cff0:	2002790c 	.word	0x2002790c

0801cff4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801cff4:	b580      	push	{r7, lr}
 801cff6:	b082      	sub	sp, #8
 801cff8:	af00      	add	r7, sp, #0
 801cffa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801cffc:	4b04      	ldr	r3, [pc, #16]	@ (801d010 <sys_arch_unprotect+0x1c>)
 801cffe:	681b      	ldr	r3, [r3, #0]
 801d000:	4618      	mov	r0, r3
 801d002:	f7f1 fe5f 	bl	800ecc4 <osMutexRelease>
}
 801d006:	bf00      	nop
 801d008:	3708      	adds	r7, #8
 801d00a:	46bd      	mov	sp, r7
 801d00c:	bd80      	pop	{r7, pc}
 801d00e:	bf00      	nop
 801d010:	2002790c 	.word	0x2002790c

0801d014 <adc_testing>:
/*
 * @brief Performs a test on the ADC peripheral using the command protocol.
 * @param command: A pointer to the test_command_t struct.
 * @retval result_t: The result of the test (TEST_PASS or TEST_FAIL).
 */
Result adc_testing(test_command_t* command){
 801d014:	b580      	push	{r7, lr}
 801d016:	b088      	sub	sp, #32
 801d018:	af00      	add	r7, sp, #0
 801d01a:	6078      	str	r0, [r7, #4]
	uint32_t adc_value;
    int32_t difference;
    HAL_StatusTypeDef status;

    // Check for valid command and bit pattern length
	if (command == NULL) {
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	2b00      	cmp	r3, #0
 801d020:	d102      	bne.n	801d028 <adc_testing+0x14>
//        printf("ADC_TEST: Received NULL command pointer. Skipping.\n\r"); // Debug printf
        return TEST_ERR;
 801d022:	f04f 33ff 	mov.w	r3, #4294967295
 801d026:	e087      	b.n	801d138 <adc_testing+0x124>
	}
	uint32_t expected_adc_result = command->bit_pattern[0];
 801d028:	687b      	ldr	r3, [r7, #4]
 801d02a:	79db      	ldrb	r3, [r3, #7]
 801d02c:	61fb      	str	r3, [r7, #28]
	uint32_t adc_tolerance = (uint32_t)(expected_adc_result * TOLERANCE_PERCENT);
 801d02e:	69fb      	ldr	r3, [r7, #28]
 801d030:	ee07 3a90 	vmov	s15, r3
 801d034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d038:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 801d140 <adc_testing+0x12c>
 801d03c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d044:	ee17 3a90 	vmov	r3, s15
 801d048:	61bb      	str	r3, [r7, #24]

    status = HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 801d04a:	2100      	movs	r1, #0
 801d04c:	483d      	ldr	r0, [pc, #244]	@ (801d144 <adc_testing+0x130>)
 801d04e:	f7e6 fc39 	bl	80038c4 <HAL_DAC_Start>
 801d052:	4603      	mov	r3, r0
 801d054:	75bb      	strb	r3, [r7, #22]
    if (status != HAL_OK) {
 801d056:	7dbb      	ldrb	r3, [r7, #22]
 801d058:	2b00      	cmp	r3, #0
 801d05a:	d001      	beq.n	801d060 <adc_testing+0x4c>
//        printf("Error: Failed to start DAC conversion. Status: %d\n\r", status); // Debug printf
        return TEST_FAIL;
 801d05c:	23ff      	movs	r3, #255	@ 0xff
 801d05e:	e06b      	b.n	801d138 <adc_testing+0x124>
    }

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801d060:	2300      	movs	r3, #0
 801d062:	75fb      	strb	r3, [r7, #23]
 801d064:	e062      	b.n	801d12c <adc_testing+0x118>

		if(i < command->bit_pattern_length){
 801d066:	687b      	ldr	r3, [r7, #4]
 801d068:	799b      	ldrb	r3, [r3, #6]
 801d06a:	7dfa      	ldrb	r2, [r7, #23]
 801d06c:	429a      	cmp	r2, r3
 801d06e:	d214      	bcs.n	801d09a <adc_testing+0x86>
			// Extract the 8-bit expected ADC value from the command's bit pattern
		    expected_adc_result = command->bit_pattern[i];
 801d070:	7dfb      	ldrb	r3, [r7, #23]
 801d072:	687a      	ldr	r2, [r7, #4]
 801d074:	4413      	add	r3, r2
 801d076:	79db      	ldrb	r3, [r3, #7]
 801d078:	61fb      	str	r3, [r7, #28]
		    // Define a tolerance based on the expected result.
		    adc_tolerance = (uint8_t)(expected_adc_result * TOLERANCE_PERCENT);
 801d07a:	69fb      	ldr	r3, [r7, #28]
 801d07c:	ee07 3a90 	vmov	s15, r3
 801d080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d084:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 801d140 <adc_testing+0x12c>
 801d088:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d08c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d090:	edc7 7a00 	vstr	s15, [r7]
 801d094:	783b      	ldrb	r3, [r7, #0]
 801d096:	b2db      	uxtb	r3, r3
 801d098:	61bb      	str	r3, [r7, #24]
		}

	    // Set value to DAC and run
	    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, expected_adc_result);
 801d09a:	69fb      	ldr	r3, [r7, #28]
 801d09c:	2208      	movs	r2, #8
 801d09e:	2100      	movs	r1, #0
 801d0a0:	4828      	ldr	r0, [pc, #160]	@ (801d144 <adc_testing+0x130>)
 801d0a2:	f7e6 fcbc 	bl	8003a1e <HAL_DAC_SetValue>
	    HAL_Delay(1); // allow DAC to settle
 801d0a6:	2001      	movs	r0, #1
 801d0a8:	f7e5 fbc8 	bl	800283c <HAL_Delay>

	    // Start ADC conversion
	    status = HAL_ADC_Start_IT(&hadc1);
 801d0ac:	4826      	ldr	r0, [pc, #152]	@ (801d148 <adc_testing+0x134>)
 801d0ae:	f7e5 fc61 	bl	8002974 <HAL_ADC_Start_IT>
 801d0b2:	4603      	mov	r3, r0
 801d0b4:	75bb      	strb	r3, [r7, #22]
	    if (status != HAL_OK) {
 801d0b6:	7dbb      	ldrb	r3, [r7, #22]
 801d0b8:	2b00      	cmp	r3, #0
 801d0ba:	d004      	beq.n	801d0c6 <adc_testing+0xb2>
//	        printf("Error: Failed to start ADC conversion. Status: %d\n\r", status); // Debug printf
	    	HAL_ADC_Stop(&hadc1);
 801d0bc:	4822      	ldr	r0, [pc, #136]	@ (801d148 <adc_testing+0x134>)
 801d0be:	f7e5 fc25 	bl	800290c <HAL_ADC_Stop>
	        return TEST_FAIL;
 801d0c2:	23ff      	movs	r3, #255	@ 0xff
 801d0c4:	e038      	b.n	801d138 <adc_testing+0x124>
	    }

	    // waiting for the ADC conversion to complete and give a semaphore
	    if (xSemaphoreTake(AdcSemHandle, HAL_MAX_DELAY) == pdPASS){
 801d0c6:	4b21      	ldr	r3, [pc, #132]	@ (801d14c <adc_testing+0x138>)
 801d0c8:	681b      	ldr	r3, [r3, #0]
 801d0ca:	f04f 31ff 	mov.w	r1, #4294967295
 801d0ce:	4618      	mov	r0, r3
 801d0d0:	f7f2 ffb0 	bl	8010034 <xQueueSemaphoreTake>
 801d0d4:	4603      	mov	r3, r0
 801d0d6:	2b01      	cmp	r3, #1
 801d0d8:	d111      	bne.n	801d0fe <adc_testing+0xea>
		  // Get the converted value
		  adc_value = HAL_ADC_GetValue(&hadc1);
 801d0da:	481b      	ldr	r0, [pc, #108]	@ (801d148 <adc_testing+0x134>)
 801d0dc:	f7e5 fe32 	bl	8002d44 <HAL_ADC_GetValue>
 801d0e0:	6138      	str	r0, [r7, #16]
	         HAL_ADC_Stop(&hadc1);
	         return TEST_FAIL;
		}

		// Compare the result with the expected value, within a tolerance
		difference = adc_value - expected_adc_result;
 801d0e2:	693a      	ldr	r2, [r7, #16]
 801d0e4:	69fb      	ldr	r3, [r7, #28]
 801d0e6:	1ad3      	subs	r3, r2, r3
 801d0e8:	60fb      	str	r3, [r7, #12]
		difference = (difference < 0) ? -difference : difference; //absolute value of the difference
 801d0ea:	68fb      	ldr	r3, [r7, #12]
 801d0ec:	2b00      	cmp	r3, #0
 801d0ee:	bfb8      	it	lt
 801d0f0:	425b      	neglt	r3, r3
 801d0f2:	60fb      	str	r3, [r7, #12]

		if (difference > adc_tolerance)
 801d0f4:	68fb      	ldr	r3, [r7, #12]
 801d0f6:	69ba      	ldr	r2, [r7, #24]
 801d0f8:	429a      	cmp	r2, r3
 801d0fa:	d20a      	bcs.n	801d112 <adc_testing+0xfe>
 801d0fc:	e004      	b.n	801d108 <adc_testing+0xf4>
	         HAL_ADC_Stop(&hadc1);
 801d0fe:	4812      	ldr	r0, [pc, #72]	@ (801d148 <adc_testing+0x134>)
 801d100:	f7e5 fc04 	bl	800290c <HAL_ADC_Stop>
	         return TEST_FAIL;
 801d104:	23ff      	movs	r3, #255	@ 0xff
 801d106:	e017      	b.n	801d138 <adc_testing+0x124>
		{
//			  printf("Test failed on iteration %u- Expected Value: %u, ADC value: %lu.\n\r",i+1, expected_adc_result, adc_value); // Debug printf
			  HAL_ADC_Stop(&hadc1);
 801d108:	480f      	ldr	r0, [pc, #60]	@ (801d148 <adc_testing+0x134>)
 801d10a:	f7e5 fbff 	bl	800290c <HAL_ADC_Stop>
			  return TEST_FAIL;
 801d10e:	23ff      	movs	r3, #255	@ 0xff
 801d110:	e012      	b.n	801d138 <adc_testing+0x124>
//				// Debug printf
//			  printf("ADC value is within tolerance for iteration %u\n\r", i+1);
//			  printf("Expected value=%d >> ADC value =%ld \n\r", expected_adc_result, adc_value);
		}
		// Stop the ADC conversion
		status = HAL_ADC_Stop(&hadc1);
 801d112:	480d      	ldr	r0, [pc, #52]	@ (801d148 <adc_testing+0x134>)
 801d114:	f7e5 fbfa 	bl	800290c <HAL_ADC_Stop>
 801d118:	4603      	mov	r3, r0
 801d11a:	75bb      	strb	r3, [r7, #22]
		if (status != HAL_OK) {
 801d11c:	7dbb      	ldrb	r3, [r7, #22]
 801d11e:	2b00      	cmp	r3, #0
 801d120:	d001      	beq.n	801d126 <adc_testing+0x112>
//			printf("Warning: Failed to stop ADC conversion. Status: %d\n\r", status); // Debug printf
	         return TEST_FAIL;
 801d122:	23ff      	movs	r3, #255	@ 0xff
 801d124:	e008      	b.n	801d138 <adc_testing+0x124>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 801d126:	7dfb      	ldrb	r3, [r7, #23]
 801d128:	3301      	adds	r3, #1
 801d12a:	75fb      	strb	r3, [r7, #23]
 801d12c:	687b      	ldr	r3, [r7, #4]
 801d12e:	795b      	ldrb	r3, [r3, #5]
 801d130:	7dfa      	ldrb	r2, [r7, #23]
 801d132:	429a      	cmp	r2, r3
 801d134:	d397      	bcc.n	801d066 <adc_testing+0x52>
		}
	} // end of iterations

	return TEST_PASS;
 801d136:	2301      	movs	r3, #1
}
 801d138:	4618      	mov	r0, r3
 801d13a:	3720      	adds	r7, #32
 801d13c:	46bd      	mov	sp, r7
 801d13e:	bd80      	pop	{r7, pc}
 801d140:	3dcccccd 	.word	0x3dcccccd
 801d144:	20000254 	.word	0x20000254
 801d148:	200001e8 	.word	0x200001e8
 801d14c:	20000dc4 	.word	0x20000dc4

0801d150 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801d150:	b580      	push	{r7, lr}
 801d152:	b084      	sub	sp, #16
 801d154:	af00      	add	r7, sp, #0
 801d156:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d158:	2300      	movs	r3, #0
 801d15a:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(AdcSemHandle, &xHigherPriorityTaskWoken);
 801d15c:	4b0b      	ldr	r3, [pc, #44]	@ (801d18c <HAL_ADC_ConvCpltCallback+0x3c>)
 801d15e:	681b      	ldr	r3, [r3, #0]
 801d160:	f107 020c 	add.w	r2, r7, #12
 801d164:	4611      	mov	r1, r2
 801d166:	4618      	mov	r0, r3
 801d168:	f7f2 fde3 	bl	800fd32 <xQueueGiveFromISR>
//	printf("ADC complete callback fired and gave a semaphore\n\r"); // Debug printf
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d16c:	68fb      	ldr	r3, [r7, #12]
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d007      	beq.n	801d182 <HAL_ADC_ConvCpltCallback+0x32>
 801d172:	4b07      	ldr	r3, [pc, #28]	@ (801d190 <HAL_ADC_ConvCpltCallback+0x40>)
 801d174:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d178:	601a      	str	r2, [r3, #0]
 801d17a:	f3bf 8f4f 	dsb	sy
 801d17e:	f3bf 8f6f 	isb	sy
}
 801d182:	bf00      	nop
 801d184:	3710      	adds	r7, #16
 801d186:	46bd      	mov	sp, r7
 801d188:	bd80      	pop	{r7, pc}
 801d18a:	bf00      	nop
 801d18c:	20000dc4 	.word	0x20000dc4
 801d190:	e000ed04 	.word	0xe000ed04

0801d194 <i2c_testing>:
/*
 * @brief Performs a test on the I2C peripheral using the command protocol.
 * @param command: A pointer to the test_command_t struct.
 * @retval result_t: The result of the test (TEST_PASS or TEST_FAIL).
 */
Result i2c_testing(test_command_t* command){
 801d194:	b580      	push	{r7, lr}
 801d196:	f5ad 7d46 	sub.w	sp, sp, #792	@ 0x318
 801d19a:	af00      	add	r7, sp, #0
 801d19c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d1a0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d1a4:	6018      	str	r0, [r3, #0]

	uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801d1a6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d1aa:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801d1ae:	4618      	mov	r0, r3
 801d1b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801d1b4:	461a      	mov	r2, r3
 801d1b6:	2100      	movs	r1, #0
 801d1b8:	f001 f8e4 	bl	801e384 <memset>
	uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801d1bc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d1c0:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801d1c4:	4618      	mov	r0, r3
 801d1c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801d1ca:	461a      	mov	r2, r3
 801d1cc:	2100      	movs	r1, #0
 801d1ce:	f001 f8d9 	bl	801e384 <memset>
	uint8_t echo_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801d1d2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d1d6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 801d1da:	4618      	mov	r0, r3
 801d1dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801d1e0:	461a      	mov	r2, r3
 801d1e2:	2100      	movs	r1, #0
 801d1e4:	f001 f8ce 	bl	801e384 <memset>

	HAL_StatusTypeDef status;

	if (command == NULL) {
 801d1e8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d1ec:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d1f0:	681b      	ldr	r3, [r3, #0]
 801d1f2:	2b00      	cmp	r3, #0
 801d1f4:	d102      	bne.n	801d1fc <i2c_testing+0x68>
//        printf("I2C_TEST: Received NULL command pointer. Skipping.\n\r"); // Debug printf
        return TEST_ERR;
 801d1f6:	f04f 33ff 	mov.w	r3, #4294967295
 801d1fa:	e128      	b.n	801d44e <i2c_testing+0x2ba>
	}

    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 801d1fc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d200:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d204:	681b      	ldr	r3, [r3, #0]
 801d206:	1dd9      	adds	r1, r3, #7
 801d208:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d20c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d210:	681b      	ldr	r3, [r3, #0]
 801d212:	799b      	ldrb	r3, [r3, #6]
 801d214:	461a      	mov	r2, r3
 801d216:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801d21a:	4618      	mov	r0, r3
 801d21c:	f001 f985 	bl	801e52a <memcpy>

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801d220:	2300      	movs	r3, #0
 801d222:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
 801d226:	e106      	b.n	801d436 <i2c_testing+0x2a2>
//	    printf("I2C_TEST: Iteration %u/%u -\n\r", i + 1, command->iterations); // Debug printf
	    memset(rx_buffer, 0, command->bit_pattern_length);
 801d228:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d22c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d230:	681b      	ldr	r3, [r3, #0]
 801d232:	799b      	ldrb	r3, [r3, #6]
 801d234:	461a      	mov	r2, r3
 801d236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801d23a:	2100      	movs	r1, #0
 801d23c:	4618      	mov	r0, r3
 801d23e:	f001 f8a1 	bl	801e384 <memset>

	    // --- 1. START RECEIVE DMA FIRST (SLAVE) ---
	    status = HAL_I2C_Slave_Receive_DMA(I2C_RECEIVER, echo_buffer, command->bit_pattern_length);
 801d242:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d246:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d24a:	681b      	ldr	r3, [r3, #0]
 801d24c:	799b      	ldrb	r3, [r3, #6]
 801d24e:	461a      	mov	r2, r3
 801d250:	f107 0308 	add.w	r3, r7, #8
 801d254:	4619      	mov	r1, r3
 801d256:	4880      	ldr	r0, [pc, #512]	@ (801d458 <i2c_testing+0x2c4>)
 801d258:	f7e9 f93e 	bl	80064d8 <HAL_I2C_Slave_Receive_DMA>
 801d25c:	4603      	mov	r3, r0
 801d25e:	f887 3316 	strb.w	r3, [r7, #790]	@ 0x316
	    if (status != HAL_OK) {
 801d262:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d266:	2b00      	cmp	r3, #0
 801d268:	d007      	beq.n	801d27a <i2c_testing+0xe6>
	        printf("Failed to start slave receive DMA: %d\n\r", status); // Debug printf
 801d26a:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d26e:	4619      	mov	r1, r3
 801d270:	487a      	ldr	r0, [pc, #488]	@ (801d45c <i2c_testing+0x2c8>)
 801d272:	f000 ff2f 	bl	801e0d4 <iprintf>
	        return TEST_FAIL;
 801d276:	23ff      	movs	r3, #255	@ 0xff
 801d278:	e0e9      	b.n	801d44e <i2c_testing+0x2ba>
	    }

	    // --- 2. TRANSMIT a block of data via DMA (MASTER) ---
	    status = HAL_I2C_Master_Transmit_DMA(I2C_SENDER, I2C_SLAVE_ADDR, tx_buffer, command->bit_pattern_length);
 801d27a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d27e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d282:	681b      	ldr	r3, [r3, #0]
 801d284:	799b      	ldrb	r3, [r3, #6]
 801d286:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 801d28a:	21f0      	movs	r1, #240	@ 0xf0
 801d28c:	4874      	ldr	r0, [pc, #464]	@ (801d460 <i2c_testing+0x2cc>)
 801d28e:	f7e9 f80f 	bl	80062b0 <HAL_I2C_Master_Transmit_DMA>
 801d292:	4603      	mov	r3, r0
 801d294:	f887 3316 	strb.w	r3, [r7, #790]	@ 0x316
	    if (status != HAL_OK) {
 801d298:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d29c:	2b00      	cmp	r3, #0
 801d29e:	d00d      	beq.n	801d2bc <i2c_testing+0x128>
	        printf("Failed to send DMA on I2C sender: %d\n\r", status); // Debug printf
 801d2a0:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d2a4:	4619      	mov	r1, r3
 801d2a6:	486f      	ldr	r0, [pc, #444]	@ (801d464 <i2c_testing+0x2d0>)
 801d2a8:	f000 ff14 	bl	801e0d4 <iprintf>
	        i2c_reset(I2C_SENDER); // Reset the Master on error
 801d2ac:	486c      	ldr	r0, [pc, #432]	@ (801d460 <i2c_testing+0x2cc>)
 801d2ae:	f000 f93d 	bl	801d52c <i2c_reset>
	        i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution
 801d2b2:	4869      	ldr	r0, [pc, #420]	@ (801d458 <i2c_testing+0x2c4>)
 801d2b4:	f000 f93a 	bl	801d52c <i2c_reset>
	        return TEST_FAIL;
 801d2b8:	23ff      	movs	r3, #255	@ 0xff
 801d2ba:	e0c8      	b.n	801d44e <i2c_testing+0x2ba>
	    }

	    // --- 3. WAIT FOR BOTH TX DMA COMPLETION ---
	    if (xSemaphoreTake(I2cTxHandle, TIMEOUT) != pdPASS) {
 801d2bc:	4b6a      	ldr	r3, [pc, #424]	@ (801d468 <i2c_testing+0x2d4>)
 801d2be:	681b      	ldr	r3, [r3, #0]
 801d2c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d2c4:	4618      	mov	r0, r3
 801d2c6:	f7f2 feb5 	bl	8010034 <xQueueSemaphoreTake>
 801d2ca:	4603      	mov	r3, r0
 801d2cc:	2b01      	cmp	r3, #1
 801d2ce:	d00a      	beq.n	801d2e6 <i2c_testing+0x152>
	         printf("Master TX timeout\n\r"); // Debug printf
 801d2d0:	4866      	ldr	r0, [pc, #408]	@ (801d46c <i2c_testing+0x2d8>)
 801d2d2:	f000 feff 	bl	801e0d4 <iprintf>
	         i2c_reset(I2C_SENDER); // Reset the Master on timeout
 801d2d6:	4862      	ldr	r0, [pc, #392]	@ (801d460 <i2c_testing+0x2cc>)
 801d2d8:	f000 f928 	bl	801d52c <i2c_reset>
	         i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution
 801d2dc:	485e      	ldr	r0, [pc, #376]	@ (801d458 <i2c_testing+0x2c4>)
 801d2de:	f000 f925 	bl	801d52c <i2c_reset>
	         return TEST_FAIL;
 801d2e2:	23ff      	movs	r3, #255	@ 0xff
 801d2e4:	e0b3      	b.n	801d44e <i2c_testing+0x2ba>
	    }
        else
        {
        	HAL_Delay(1);
 801d2e6:	2001      	movs	r0, #1
 801d2e8:	f7e5 faa8 	bl	800283c <HAL_Delay>

        	status = HAL_I2C_Slave_Transmit_IT(I2C_RECEIVER, echo_buffer, command->bit_pattern_length);
 801d2ec:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d2f0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d2f4:	681b      	ldr	r3, [r3, #0]
 801d2f6:	799b      	ldrb	r3, [r3, #6]
 801d2f8:	461a      	mov	r2, r3
 801d2fa:	f107 0308 	add.w	r3, r7, #8
 801d2fe:	4619      	mov	r1, r3
 801d300:	4855      	ldr	r0, [pc, #340]	@ (801d458 <i2c_testing+0x2c4>)
 801d302:	f7e8 ff67 	bl	80061d4 <HAL_I2C_Slave_Transmit_IT>
 801d306:	4603      	mov	r3, r0
 801d308:	f887 3316 	strb.w	r3, [r7, #790]	@ 0x316
			 if (status != HAL_OK){
 801d30c:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d310:	2b00      	cmp	r3, #0
 801d312:	d00d      	beq.n	801d330 <i2c_testing+0x19c>
				 printf("Failed to echo send on I2C receiver: %d\n\r", status);
 801d314:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d318:	4619      	mov	r1, r3
 801d31a:	4855      	ldr	r0, [pc, #340]	@ (801d470 <i2c_testing+0x2dc>)
 801d31c:	f000 feda 	bl	801e0d4 <iprintf>
				 i2c_reset(I2C_SENDER); // Reset the Master on timeout
 801d320:	484f      	ldr	r0, [pc, #316]	@ (801d460 <i2c_testing+0x2cc>)
 801d322:	f000 f903 	bl	801d52c <i2c_reset>
				 i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution
 801d326:	484c      	ldr	r0, [pc, #304]	@ (801d458 <i2c_testing+0x2c4>)
 801d328:	f000 f900 	bl	801d52c <i2c_reset>
				 return TEST_FAIL;
 801d32c:	23ff      	movs	r3, #255	@ 0xff
 801d32e:	e08e      	b.n	801d44e <i2c_testing+0x2ba>
			 }
        	// Arm sender receive before receiver transmits back
			 status = HAL_I2C_Master_Receive_IT(I2C_SENDER, I2C_SLAVE_ADDR, rx_buffer, command->bit_pattern_length);
 801d330:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d334:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d338:	681b      	ldr	r3, [r3, #0]
 801d33a:	799b      	ldrb	r3, [r3, #6]
 801d33c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801d340:	21f0      	movs	r1, #240	@ 0xf0
 801d342:	4847      	ldr	r0, [pc, #284]	@ (801d460 <i2c_testing+0x2cc>)
 801d344:	f7e8 fed6 	bl	80060f4 <HAL_I2C_Master_Receive_IT>
 801d348:	4603      	mov	r3, r0
 801d34a:	f887 3316 	strb.w	r3, [r7, #790]	@ 0x316
			if (status != HAL_OK) {
 801d34e:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d352:	2b00      	cmp	r3, #0
 801d354:	d007      	beq.n	801d366 <i2c_testing+0x1d2>
				printf("Sender Failed to start receive back: %d\n\r", status);
 801d356:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d35a:	4619      	mov	r1, r3
 801d35c:	4845      	ldr	r0, [pc, #276]	@ (801d474 <i2c_testing+0x2e0>)
 801d35e:	f000 feb9 	bl	801e0d4 <iprintf>
				return TEST_FAIL;
 801d362:	23ff      	movs	r3, #255	@ 0xff
 801d364:	e073      	b.n	801d44e <i2c_testing+0x2ba>
			}

        }
	    //  WAIT FOR BOTH RX DMA COMPLETION
	    if (xSemaphoreTake(I2cRxHandle, TIMEOUT) != pdPASS) {
 801d366:	4b44      	ldr	r3, [pc, #272]	@ (801d478 <i2c_testing+0x2e4>)
 801d368:	681b      	ldr	r3, [r3, #0]
 801d36a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d36e:	4618      	mov	r0, r3
 801d370:	f7f2 fe60 	bl	8010034 <xQueueSemaphoreTake>
 801d374:	4603      	mov	r3, r0
 801d376:	2b01      	cmp	r3, #1
 801d378:	d00a      	beq.n	801d390 <i2c_testing+0x1fc>
	         printf("Slave RX timeout\n\r"); // Debug printf
 801d37a:	4840      	ldr	r0, [pc, #256]	@ (801d47c <i2c_testing+0x2e8>)
 801d37c:	f000 feaa 	bl	801e0d4 <iprintf>
			 i2c_reset(I2C_SENDER); // Reset the Master on timeout
 801d380:	4837      	ldr	r0, [pc, #220]	@ (801d460 <i2c_testing+0x2cc>)
 801d382:	f000 f8d3 	bl	801d52c <i2c_reset>
	         i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution
 801d386:	4834      	ldr	r0, [pc, #208]	@ (801d458 <i2c_testing+0x2c4>)
 801d388:	f000 f8d0 	bl	801d52c <i2c_reset>
	         return TEST_FAIL;
 801d38c:	23ff      	movs	r3, #255	@ 0xff
 801d38e:	e05e      	b.n	801d44e <i2c_testing+0x2ba>
	    }

	    // --- 4. COMPARE SENT vs. RECEIVED data ---
	    if (command->bit_pattern_length > 100) {
 801d390:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d394:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d398:	681b      	ldr	r3, [r3, #0]
 801d39a:	799b      	ldrb	r3, [r3, #6]
 801d39c:	2b64      	cmp	r3, #100	@ 0x64
 801d39e:	d925      	bls.n	801d3ec <i2c_testing+0x258>
	        uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 801d3a0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d3a4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d3a8:	681b      	ldr	r3, [r3, #0]
 801d3aa:	799b      	ldrb	r3, [r3, #6]
 801d3ac:	461a      	mov	r2, r3
 801d3ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801d3b2:	4611      	mov	r1, r2
 801d3b4:	4618      	mov	r0, r3
 801d3b6:	f7e3 ff21 	bl	80011fc <calculate_crc>
 801d3ba:	f8c7 030c 	str.w	r0, [r7, #780]	@ 0x30c
	        uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 801d3be:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d3c2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d3c6:	681b      	ldr	r3, [r3, #0]
 801d3c8:	799b      	ldrb	r3, [r3, #6]
 801d3ca:	461a      	mov	r2, r3
 801d3cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801d3d0:	4611      	mov	r1, r2
 801d3d2:	4618      	mov	r0, r3
 801d3d4:	f7e3 ff12 	bl	80011fc <calculate_crc>
 801d3d8:	f8c7 0308 	str.w	r0, [r7, #776]	@ 0x308
	        if (sent_crc != received_crc) {
 801d3dc:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 801d3e0:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801d3e4:	429a      	cmp	r2, r3
 801d3e6:	d01e      	beq.n	801d426 <i2c_testing+0x292>
//	            printf("I2C_TEST: CRC mismatch on iteration %u.\n\r", i + 1); // Debug printf
	            return TEST_FAIL;
 801d3e8:	23ff      	movs	r3, #255	@ 0xff
 801d3ea:	e030      	b.n	801d44e <i2c_testing+0x2ba>
	        }
	    } else {
	        int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 801d3ec:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d3f0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d3f4:	681b      	ldr	r3, [r3, #0]
 801d3f6:	799b      	ldrb	r3, [r3, #6]
 801d3f8:	461a      	mov	r2, r3
 801d3fa:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 801d3fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801d402:	4618      	mov	r0, r3
 801d404:	f000 ffae 	bl	801e364 <memcmp>
 801d408:	f8c7 0310 	str.w	r0, [r7, #784]	@ 0x310
	        if (comp != 0) {
 801d40c:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 801d410:	2b00      	cmp	r3, #0
 801d412:	d008      	beq.n	801d426 <i2c_testing+0x292>
	            printf("Data mismatch on iteration %u.\n\r", i + 1); // Debug printf
 801d414:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 801d418:	3301      	adds	r3, #1
 801d41a:	4619      	mov	r1, r3
 801d41c:	4818      	ldr	r0, [pc, #96]	@ (801d480 <i2c_testing+0x2ec>)
 801d41e:	f000 fe59 	bl	801e0d4 <iprintf>
	            return TEST_FAIL;
 801d422:	23ff      	movs	r3, #255	@ 0xff
 801d424:	e013      	b.n	801d44e <i2c_testing+0x2ba>
	        }
	    }
//	    printf("Data Match on iteration %u.\n\r", i + 1); // Debug printf

        osDelay(10);
 801d426:	200a      	movs	r0, #10
 801d428:	f7f1 fb26 	bl	800ea78 <osDelay>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 801d42c:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 801d430:	3301      	adds	r3, #1
 801d432:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
 801d436:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d43a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d43e:	681b      	ldr	r3, [r3, #0]
 801d440:	795b      	ldrb	r3, [r3, #5]
 801d442:	f897 2317 	ldrb.w	r2, [r7, #791]	@ 0x317
 801d446:	429a      	cmp	r2, r3
 801d448:	f4ff aeee 	bcc.w	801d228 <i2c_testing+0x94>
	}
    return TEST_PASS;
 801d44c:	2301      	movs	r3, #1
}
 801d44e:	4618      	mov	r0, r3
 801d450:	f507 7746 	add.w	r7, r7, #792	@ 0x318
 801d454:	46bd      	mov	sp, r7
 801d456:	bd80      	pop	{r7, pc}
 801d458:	20000268 	.word	0x20000268
 801d45c:	08021d10 	.word	0x08021d10
 801d460:	200002bc 	.word	0x200002bc
 801d464:	08021d38 	.word	0x08021d38
 801d468:	20000dbc 	.word	0x20000dbc
 801d46c:	08021d60 	.word	0x08021d60
 801d470:	08021d74 	.word	0x08021d74
 801d474:	08021da0 	.word	0x08021da0
 801d478:	20000db8 	.word	0x20000db8
 801d47c:	08021dcc 	.word	0x08021dcc
 801d480:	08021de0 	.word	0x08021de0

0801d484 <HAL_I2C_MasterTxCpltCallback>:


void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801d484:	b580      	push	{r7, lr}
 801d486:	b084      	sub	sp, #16
 801d488:	af00      	add	r7, sp, #0
 801d48a:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d48c:	2300      	movs	r3, #0
 801d48e:	60fb      	str	r3, [r7, #12]

    if (hi2c->Instance == I2C_SENDER->Instance) // Check the instance of your sender UART
 801d490:	687b      	ldr	r3, [r7, #4]
 801d492:	681a      	ldr	r2, [r3, #0]
 801d494:	4b0d      	ldr	r3, [pc, #52]	@ (801d4cc <HAL_I2C_MasterTxCpltCallback+0x48>)
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	429a      	cmp	r2, r3
 801d49a:	d107      	bne.n	801d4ac <HAL_I2C_MasterTxCpltCallback+0x28>
    {
//        printf("Master TX callback fired\n\r"); // Debug printf
        xSemaphoreGiveFromISR(I2cTxHandle, &xHigherPriorityTaskWoken);
 801d49c:	4b0c      	ldr	r3, [pc, #48]	@ (801d4d0 <HAL_I2C_MasterTxCpltCallback+0x4c>)
 801d49e:	681b      	ldr	r3, [r3, #0]
 801d4a0:	f107 020c 	add.w	r2, r7, #12
 801d4a4:	4611      	mov	r1, r2
 801d4a6:	4618      	mov	r0, r3
 801d4a8:	f7f2 fc43 	bl	800fd32 <xQueueGiveFromISR>
    }
    else
    {
    	UNUSED(hi2c);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d4ac:	68fb      	ldr	r3, [r7, #12]
 801d4ae:	2b00      	cmp	r3, #0
 801d4b0:	d007      	beq.n	801d4c2 <HAL_I2C_MasterTxCpltCallback+0x3e>
 801d4b2:	4b08      	ldr	r3, [pc, #32]	@ (801d4d4 <HAL_I2C_MasterTxCpltCallback+0x50>)
 801d4b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d4b8:	601a      	str	r2, [r3, #0]
 801d4ba:	f3bf 8f4f 	dsb	sy
 801d4be:	f3bf 8f6f 	isb	sy
}
 801d4c2:	bf00      	nop
 801d4c4:	3710      	adds	r7, #16
 801d4c6:	46bd      	mov	sp, r7
 801d4c8:	bd80      	pop	{r7, pc}
 801d4ca:	bf00      	nop
 801d4cc:	200002bc 	.word	0x200002bc
 801d4d0:	20000dbc 	.word	0x20000dbc
 801d4d4:	e000ed04 	.word	0xe000ed04

0801d4d8 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801d4d8:	b580      	push	{r7, lr}
 801d4da:	b084      	sub	sp, #16
 801d4dc:	af00      	add	r7, sp, #0
 801d4de:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d4e0:	2300      	movs	r3, #0
 801d4e2:	60fb      	str	r3, [r7, #12]

    if (hi2c->Instance == I2C_SENDER->Instance) // Check the instance of your sender UART
 801d4e4:	687b      	ldr	r3, [r7, #4]
 801d4e6:	681a      	ldr	r2, [r3, #0]
 801d4e8:	4b0d      	ldr	r3, [pc, #52]	@ (801d520 <HAL_I2C_MasterRxCpltCallback+0x48>)
 801d4ea:	681b      	ldr	r3, [r3, #0]
 801d4ec:	429a      	cmp	r2, r3
 801d4ee:	d107      	bne.n	801d500 <HAL_I2C_MasterRxCpltCallback+0x28>
    {
//        printf("Master RX callback fired\n\r"); // Debug printf
        xSemaphoreGiveFromISR(I2cRxHandle, &xHigherPriorityTaskWoken);
 801d4f0:	4b0c      	ldr	r3, [pc, #48]	@ (801d524 <HAL_I2C_MasterRxCpltCallback+0x4c>)
 801d4f2:	681b      	ldr	r3, [r3, #0]
 801d4f4:	f107 020c 	add.w	r2, r7, #12
 801d4f8:	4611      	mov	r1, r2
 801d4fa:	4618      	mov	r0, r3
 801d4fc:	f7f2 fc19 	bl	800fd32 <xQueueGiveFromISR>
    }
    else
    {
    	UNUSED(hi2c);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d500:	68fb      	ldr	r3, [r7, #12]
 801d502:	2b00      	cmp	r3, #0
 801d504:	d007      	beq.n	801d516 <HAL_I2C_MasterRxCpltCallback+0x3e>
 801d506:	4b08      	ldr	r3, [pc, #32]	@ (801d528 <HAL_I2C_MasterRxCpltCallback+0x50>)
 801d508:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d50c:	601a      	str	r2, [r3, #0]
 801d50e:	f3bf 8f4f 	dsb	sy
 801d512:	f3bf 8f6f 	isb	sy
}
 801d516:	bf00      	nop
 801d518:	3710      	adds	r7, #16
 801d51a:	46bd      	mov	sp, r7
 801d51c:	bd80      	pop	{r7, pc}
 801d51e:	bf00      	nop
 801d520:	200002bc 	.word	0x200002bc
 801d524:	20000db8 	.word	0x20000db8
 801d528:	e000ed04 	.word	0xe000ed04

0801d52c <i2c_reset>:
// reset the I2C peripheral
void i2c_reset(I2C_HandleTypeDef *hi2c) {
 801d52c:	b580      	push	{r7, lr}
 801d52e:	b082      	sub	sp, #8
 801d530:	af00      	add	r7, sp, #0
 801d532:	6078      	str	r0, [r7, #4]
    if (HAL_I2C_DeInit(hi2c) != HAL_OK) {
 801d534:	6878      	ldr	r0, [r7, #4]
 801d536:	f7e8 fdad 	bl	8006094 <HAL_I2C_DeInit>
 801d53a:	4603      	mov	r3, r0
 801d53c:	2b00      	cmp	r3, #0
 801d53e:	d001      	beq.n	801d544 <i2c_reset+0x18>
        // Log a fatal error, the peripheral is in an unrecoverable state
        Error_Handler();
 801d540:	f7e3 ff68 	bl	8001414 <Error_Handler>
//        printf("Failed to de-initialize I2C peripheral!\n\r"); // Debug printf
    }
    if (HAL_I2C_Init(hi2c) != HAL_OK) {
 801d544:	6878      	ldr	r0, [r7, #4]
 801d546:	f7e8 fd09 	bl	8005f5c <HAL_I2C_Init>
 801d54a:	4603      	mov	r3, r0
 801d54c:	2b00      	cmp	r3, #0
 801d54e:	d001      	beq.n	801d554 <i2c_reset+0x28>
        // Log a fatal error
        Error_Handler();
 801d550:	f7e3 ff60 	bl	8001414 <Error_Handler>
//        printf("Failed to re-initialize I2C peripheral!\n\r"); // Debug printf
    }
}
 801d554:	bf00      	nop
 801d556:	3708      	adds	r7, #8
 801d558:	46bd      	mov	sp, r7
 801d55a:	bd80      	pop	{r7, pc}

0801d55c <SCB_InvalidateDCache_by_Addr>:
{
 801d55c:	b480      	push	{r7}
 801d55e:	b087      	sub	sp, #28
 801d560:	af00      	add	r7, sp, #0
 801d562:	6078      	str	r0, [r7, #4]
 801d564:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 801d566:	683b      	ldr	r3, [r7, #0]
 801d568:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 801d56a:	687b      	ldr	r3, [r7, #4]
 801d56c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 801d56e:	2320      	movs	r3, #32
 801d570:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801d572:	f3bf 8f4f 	dsb	sy
}
 801d576:	bf00      	nop
    while (op_size > 0) {
 801d578:	e00b      	b.n	801d592 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 801d57a:	4a0d      	ldr	r2, [pc, #52]	@ (801d5b0 <SCB_InvalidateDCache_by_Addr+0x54>)
 801d57c:	693b      	ldr	r3, [r7, #16]
 801d57e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 801d582:	68fb      	ldr	r3, [r7, #12]
 801d584:	693a      	ldr	r2, [r7, #16]
 801d586:	4413      	add	r3, r2
 801d588:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 801d58a:	697a      	ldr	r2, [r7, #20]
 801d58c:	68fb      	ldr	r3, [r7, #12]
 801d58e:	1ad3      	subs	r3, r2, r3
 801d590:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 801d592:	697b      	ldr	r3, [r7, #20]
 801d594:	2b00      	cmp	r3, #0
 801d596:	dcf0      	bgt.n	801d57a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 801d598:	f3bf 8f4f 	dsb	sy
}
 801d59c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801d59e:	f3bf 8f6f 	isb	sy
}
 801d5a2:	bf00      	nop
}
 801d5a4:	bf00      	nop
 801d5a6:	371c      	adds	r7, #28
 801d5a8:	46bd      	mov	sp, r7
 801d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5ae:	4770      	bx	lr
 801d5b0:	e000ed00 	.word	0xe000ed00

0801d5b4 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 801d5b4:	b480      	push	{r7}
 801d5b6:	b087      	sub	sp, #28
 801d5b8:	af00      	add	r7, sp, #0
 801d5ba:	6078      	str	r0, [r7, #4]
 801d5bc:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 801d5be:	683b      	ldr	r3, [r7, #0]
 801d5c0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 801d5c2:	687b      	ldr	r3, [r7, #4]
 801d5c4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 801d5c6:	2320      	movs	r3, #32
 801d5c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801d5ca:	f3bf 8f4f 	dsb	sy
}
 801d5ce:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 801d5d0:	e00b      	b.n	801d5ea <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 801d5d2:	4a0d      	ldr	r2, [pc, #52]	@ (801d608 <SCB_CleanDCache_by_Addr+0x54>)
 801d5d4:	693b      	ldr	r3, [r7, #16]
 801d5d6:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 801d5da:	68fb      	ldr	r3, [r7, #12]
 801d5dc:	693a      	ldr	r2, [r7, #16]
 801d5de:	4413      	add	r3, r2
 801d5e0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 801d5e2:	697a      	ldr	r2, [r7, #20]
 801d5e4:	68fb      	ldr	r3, [r7, #12]
 801d5e6:	1ad3      	subs	r3, r2, r3
 801d5e8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 801d5ea:	697b      	ldr	r3, [r7, #20]
 801d5ec:	2b00      	cmp	r3, #0
 801d5ee:	dcf0      	bgt.n	801d5d2 <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 801d5f0:	f3bf 8f4f 	dsb	sy
}
 801d5f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801d5f6:	f3bf 8f6f 	isb	sy
}
 801d5fa:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 801d5fc:	bf00      	nop
 801d5fe:	371c      	adds	r7, #28
 801d600:	46bd      	mov	sp, r7
 801d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d606:	4770      	bx	lr
 801d608:	e000ed00 	.word	0xe000ed00

0801d60c <spi_testing>:
/*
 * @brief Performs a test on the SPI peripheral using the command protocol.
 * @param command: A pointer to the test_command_t struct.
 * @retval result_t: The result of the test (TEST_PASS or TEST_FAIL).
 */
Result spi_testing(test_command_t* command){
 801d60c:	b580      	push	{r7, lr}
 801d60e:	b086      	sub	sp, #24
 801d610:	af00      	add	r7, sp, #0
 801d612:	6078      	str	r0, [r7, #4]
	static uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
	static uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};

	HAL_StatusTypeDef status;

	if (command == NULL) {
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	2b00      	cmp	r3, #0
 801d618:	d105      	bne.n	801d626 <spi_testing+0x1a>
        printf("SPI_TEST: Received NULL command pointer. Skipping.\n");
 801d61a:	4894      	ldr	r0, [pc, #592]	@ (801d86c <spi_testing+0x260>)
 801d61c:	f000 fdc2 	bl	801e1a4 <puts>
        return TEST_ERR;
 801d620:	f04f 33ff 	mov.w	r3, #4294967295
 801d624:	e11e      	b.n	801d864 <spi_testing+0x258>
	}

    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 801d626:	687b      	ldr	r3, [r7, #4]
 801d628:	1dd9      	adds	r1, r3, #7
 801d62a:	687b      	ldr	r3, [r7, #4]
 801d62c:	799b      	ldrb	r3, [r3, #6]
 801d62e:	461a      	mov	r2, r3
 801d630:	488f      	ldr	r0, [pc, #572]	@ (801d870 <spi_testing+0x264>)
 801d632:	f000 ff7a 	bl	801e52a <memcpy>

	for(uint8_t i = 0; i < command->iterations; i++)
 801d636:	2300      	movs	r3, #0
 801d638:	75fb      	strb	r3, [r7, #23]
 801d63a:	e10c      	b.n	801d856 <spi_testing+0x24a>
	{
	    printf("SPI_TEST: Iteration %u/%u -\n\r", i + 1, command->iterations);
 801d63c:	7dfb      	ldrb	r3, [r7, #23]
 801d63e:	1c59      	adds	r1, r3, #1
 801d640:	687b      	ldr	r3, [r7, #4]
 801d642:	795b      	ldrb	r3, [r3, #5]
 801d644:	461a      	mov	r2, r3
 801d646:	488b      	ldr	r0, [pc, #556]	@ (801d874 <spi_testing+0x268>)
 801d648:	f000 fd44 	bl	801e0d4 <iprintf>
	    memset(rx_buffer, 0, command->bit_pattern_length);
 801d64c:	687b      	ldr	r3, [r7, #4]
 801d64e:	799b      	ldrb	r3, [r3, #6]
 801d650:	461a      	mov	r2, r3
 801d652:	2100      	movs	r1, #0
 801d654:	4888      	ldr	r0, [pc, #544]	@ (801d878 <spi_testing+0x26c>)
 801d656:	f000 fe95 	bl	801e384 <memset>

	    reset_test();
 801d65a:	f000 f9f5 	bl	801da48 <reset_test>
	    clear_flags(SPI_SENDER);
 801d65e:	4887      	ldr	r0, [pc, #540]	@ (801d87c <spi_testing+0x270>)
 801d660:	f000 f9d8 	bl	801da14 <clear_flags>
	    clear_flags(SPI_RECEIVER);
 801d664:	4886      	ldr	r0, [pc, #536]	@ (801d880 <spi_testing+0x274>)
 801d666:	f000 f9d5 	bl	801da14 <clear_flags>

	    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); // CS low → enable slave
 801d66a:	2200      	movs	r2, #0
 801d66c:	2101      	movs	r1, #1
 801d66e:	4885      	ldr	r0, [pc, #532]	@ (801d884 <spi_testing+0x278>)
 801d670:	f7e8 fc1c 	bl	8005eac <HAL_GPIO_WritePin>

	    // 1. Prepare Slave for a Receive Operation
	    status = HAL_SPI_TransmitReceive_DMA(SPI_RECEIVER, echo_tx_buffer, echo_rx_buffer, command->bit_pattern_length);
 801d674:	687b      	ldr	r3, [r7, #4]
 801d676:	799b      	ldrb	r3, [r3, #6]
 801d678:	4a83      	ldr	r2, [pc, #524]	@ (801d888 <spi_testing+0x27c>)
 801d67a:	4984      	ldr	r1, [pc, #528]	@ (801d88c <spi_testing+0x280>)
 801d67c:	4880      	ldr	r0, [pc, #512]	@ (801d880 <spi_testing+0x274>)
 801d67e:	f7ec fac1 	bl	8009c04 <HAL_SPI_TransmitReceive_DMA>
 801d682:	4603      	mov	r3, r0
 801d684:	75bb      	strb	r3, [r7, #22]
	    if (status != HAL_OK) {
 801d686:	7dbb      	ldrb	r3, [r7, #22]
 801d688:	2b00      	cmp	r3, #0
 801d68a:	d006      	beq.n	801d69a <spi_testing+0x8e>
	        printf("Failed to start slave receive: %d\n\r", status);
 801d68c:	7dbb      	ldrb	r3, [r7, #22]
 801d68e:	4619      	mov	r1, r3
 801d690:	487f      	ldr	r0, [pc, #508]	@ (801d890 <spi_testing+0x284>)
 801d692:	f000 fd1f 	bl	801e0d4 <iprintf>
	        return TEST_FAIL;
 801d696:	23ff      	movs	r3, #255	@ 0xff
 801d698:	e0e4      	b.n	801d864 <spi_testing+0x258>
	    }
	    // 2. Master Transmits data
	    status = HAL_SPI_TransmitReceive_DMA(SPI_SENDER, tx_buffer, rx_buffer, command->bit_pattern_length);
 801d69a:	687b      	ldr	r3, [r7, #4]
 801d69c:	799b      	ldrb	r3, [r3, #6]
 801d69e:	4a76      	ldr	r2, [pc, #472]	@ (801d878 <spi_testing+0x26c>)
 801d6a0:	4973      	ldr	r1, [pc, #460]	@ (801d870 <spi_testing+0x264>)
 801d6a2:	4876      	ldr	r0, [pc, #472]	@ (801d87c <spi_testing+0x270>)
 801d6a4:	f7ec faae 	bl	8009c04 <HAL_SPI_TransmitReceive_DMA>
 801d6a8:	4603      	mov	r3, r0
 801d6aa:	75bb      	strb	r3, [r7, #22]
	    if (status != HAL_OK) {
 801d6ac:	7dbb      	ldrb	r3, [r7, #22]
 801d6ae:	2b00      	cmp	r3, #0
 801d6b0:	d008      	beq.n	801d6c4 <spi_testing+0xb8>
	        printf("Failed to start master transmit: %d\n\r", status);
 801d6b2:	7dbb      	ldrb	r3, [r7, #22]
 801d6b4:	4619      	mov	r1, r3
 801d6b6:	4877      	ldr	r0, [pc, #476]	@ (801d894 <spi_testing+0x288>)
 801d6b8:	f000 fd0c 	bl	801e0d4 <iprintf>
	        reset_test();
 801d6bc:	f000 f9c4 	bl	801da48 <reset_test>
	        return TEST_FAIL;
 801d6c0:	23ff      	movs	r3, #255	@ 0xff
 801d6c2:	e0cf      	b.n	801d864 <spi_testing+0x258>
	    }

	    // 3. Wait for the Master's Transmit to complete
	    if (xSemaphoreTake(SpiTxHandle, TIMEOUT) != pdPASS) {
 801d6c4:	4b74      	ldr	r3, [pc, #464]	@ (801d898 <spi_testing+0x28c>)
 801d6c6:	681b      	ldr	r3, [r3, #0]
 801d6c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d6cc:	4618      	mov	r0, r3
 801d6ce:	f7f2 fcb1 	bl	8010034 <xQueueSemaphoreTake>
 801d6d2:	4603      	mov	r3, r0
 801d6d4:	2b01      	cmp	r3, #1
 801d6d6:	d006      	beq.n	801d6e6 <spi_testing+0xda>
	         printf("Master TX timeout\n\r");
 801d6d8:	4870      	ldr	r0, [pc, #448]	@ (801d89c <spi_testing+0x290>)
 801d6da:	f000 fcfb 	bl	801e0d4 <iprintf>
		     reset_test();
 801d6de:	f000 f9b3 	bl	801da48 <reset_test>
		     return TEST_FAIL;
 801d6e2:	23ff      	movs	r3, #255	@ 0xff
 801d6e4:	e0be      	b.n	801d864 <spi_testing+0x258>
	    }
	    // 4. Wait for the Slave's Receive to complete, which triggers its echo back
	    if (xSemaphoreTake(SpiSlaveRxHandle, TIMEOUT) != pdPASS) {
 801d6e6:	4b6e      	ldr	r3, [pc, #440]	@ (801d8a0 <spi_testing+0x294>)
 801d6e8:	681b      	ldr	r3, [r3, #0]
 801d6ea:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d6ee:	4618      	mov	r0, r3
 801d6f0:	f7f2 fca0 	bl	8010034 <xQueueSemaphoreTake>
 801d6f4:	4603      	mov	r3, r0
 801d6f6:	2b01      	cmp	r3, #1
 801d6f8:	d006      	beq.n	801d708 <spi_testing+0xfc>
	         printf("Slave RX timeout\n\r");
 801d6fa:	486a      	ldr	r0, [pc, #424]	@ (801d8a4 <spi_testing+0x298>)
 801d6fc:	f000 fcea 	bl	801e0d4 <iprintf>
		     reset_test();
 801d700:	f000 f9a2 	bl	801da48 <reset_test>
	         return TEST_FAIL;
 801d704:	23ff      	movs	r3, #255	@ 0xff
 801d706:	e0ad      	b.n	801d864 <spi_testing+0x258>
	    }
	    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);   // CS high → disable slave
 801d708:	2201      	movs	r2, #1
 801d70a:	2101      	movs	r1, #1
 801d70c:	485d      	ldr	r0, [pc, #372]	@ (801d884 <spi_testing+0x278>)
 801d70e:	f7e8 fbcd 	bl	8005eac <HAL_GPIO_WritePin>

	    clear_flags(SPI_RECEIVER);
 801d712:	485b      	ldr	r0, [pc, #364]	@ (801d880 <spi_testing+0x274>)
 801d714:	f000 f97e 	bl	801da14 <clear_flags>
	    osDelay(1); // tiny delay 1ms
 801d718:	2001      	movs	r0, #1
 801d71a:	f7f1 f9ad 	bl	800ea78 <osDelay>

		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); // CS low → enable slave
 801d71e:	2200      	movs	r2, #0
 801d720:	2101      	movs	r1, #1
 801d722:	4858      	ldr	r0, [pc, #352]	@ (801d884 <spi_testing+0x278>)
 801d724:	f7e8 fbc2 	bl	8005eac <HAL_GPIO_WritePin>
		SCB_CleanDCache_by_Addr((uint32_t*)echo_tx_buffer, command->bit_pattern_length);
 801d728:	687b      	ldr	r3, [r7, #4]
 801d72a:	799b      	ldrb	r3, [r3, #6]
 801d72c:	4619      	mov	r1, r3
 801d72e:	4857      	ldr	r0, [pc, #348]	@ (801d88c <spi_testing+0x280>)
 801d730:	f7ff ff40 	bl	801d5b4 <SCB_CleanDCache_by_Addr>

		// 5. Now, prepare Master to Receive the Echoed data
		status = HAL_SPI_Receive_DMA(SPI_SENDER, rx_buffer, command->bit_pattern_length);
 801d734:	687b      	ldr	r3, [r7, #4]
 801d736:	799b      	ldrb	r3, [r3, #6]
 801d738:	461a      	mov	r2, r3
 801d73a:	494f      	ldr	r1, [pc, #316]	@ (801d878 <spi_testing+0x26c>)
 801d73c:	484f      	ldr	r0, [pc, #316]	@ (801d87c <spi_testing+0x270>)
 801d73e:	f7ec f92d 	bl	800999c <HAL_SPI_Receive_DMA>
 801d742:	4603      	mov	r3, r0
 801d744:	75bb      	strb	r3, [r7, #22]
		if (status != HAL_OK) {
 801d746:	7dbb      	ldrb	r3, [r7, #22]
 801d748:	2b00      	cmp	r3, #0
 801d74a:	d008      	beq.n	801d75e <spi_testing+0x152>
			printf("Failed to start master Rx: %d\n\r", status);
 801d74c:	7dbb      	ldrb	r3, [r7, #22]
 801d74e:	4619      	mov	r1, r3
 801d750:	4855      	ldr	r0, [pc, #340]	@ (801d8a8 <spi_testing+0x29c>)
 801d752:	f000 fcbf 	bl	801e0d4 <iprintf>
	        reset_test();
 801d756:	f000 f977 	bl	801da48 <reset_test>
			return TEST_FAIL;
 801d75a:	23ff      	movs	r3, #255	@ 0xff
 801d75c:	e082      	b.n	801d864 <spi_testing+0x258>
		}

		status = HAL_SPI_Transmit_DMA(SPI_RECEIVER, echo_tx_buffer, command->bit_pattern_length);
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	799b      	ldrb	r3, [r3, #6]
 801d762:	461a      	mov	r2, r3
 801d764:	4949      	ldr	r1, [pc, #292]	@ (801d88c <spi_testing+0x280>)
 801d766:	4846      	ldr	r0, [pc, #280]	@ (801d880 <spi_testing+0x274>)
 801d768:	f7ec f814 	bl	8009794 <HAL_SPI_Transmit_DMA>
 801d76c:	4603      	mov	r3, r0
 801d76e:	75bb      	strb	r3, [r7, #22]
		if (status != HAL_OK) {
 801d770:	7dbb      	ldrb	r3, [r7, #22]
 801d772:	2b00      	cmp	r3, #0
 801d774:	d008      	beq.n	801d788 <spi_testing+0x17c>
			printf("Failed to start slave transmit: %d\n\r", status);
 801d776:	7dbb      	ldrb	r3, [r7, #22]
 801d778:	4619      	mov	r1, r3
 801d77a:	484c      	ldr	r0, [pc, #304]	@ (801d8ac <spi_testing+0x2a0>)
 801d77c:	f000 fcaa 	bl	801e0d4 <iprintf>
	        reset_test();
 801d780:	f000 f962 	bl	801da48 <reset_test>
			return TEST_FAIL;
 801d784:	23ff      	movs	r3, #255	@ 0xff
 801d786:	e06d      	b.n	801d864 <spi_testing+0x258>
		}

		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);   // CS high → disable slave
 801d788:	2201      	movs	r2, #1
 801d78a:	2101      	movs	r1, #1
 801d78c:	483d      	ldr	r0, [pc, #244]	@ (801d884 <spi_testing+0x278>)
 801d78e:	f7e8 fb8d 	bl	8005eac <HAL_GPIO_WritePin>

	    // 6. Wait for Master's final Receive to complete
	    if (xSemaphoreTake(SpiRxHandle, TIMEOUT) != pdPASS) {
 801d792:	4b47      	ldr	r3, [pc, #284]	@ (801d8b0 <spi_testing+0x2a4>)
 801d794:	681b      	ldr	r3, [r3, #0]
 801d796:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d79a:	4618      	mov	r0, r3
 801d79c:	f7f2 fc4a 	bl	8010034 <xQueueSemaphoreTake>
 801d7a0:	4603      	mov	r3, r0
 801d7a2:	2b01      	cmp	r3, #1
 801d7a4:	d006      	beq.n	801d7b4 <spi_testing+0x1a8>
	         printf("Master RX timeout\n\r");
 801d7a6:	4843      	ldr	r0, [pc, #268]	@ (801d8b4 <spi_testing+0x2a8>)
 801d7a8:	f000 fc94 	bl	801e0d4 <iprintf>
	         reset_test();
 801d7ac:	f000 f94c 	bl	801da48 <reset_test>
	         return TEST_FAIL;
 801d7b0:	23ff      	movs	r3, #255	@ 0xff
 801d7b2:	e057      	b.n	801d864 <spi_testing+0x258>
	    }

    	SCB_InvalidateDCache_by_Addr((uint32_t*)echo_rx_buffer, command->bit_pattern_length);
 801d7b4:	687b      	ldr	r3, [r7, #4]
 801d7b6:	799b      	ldrb	r3, [r3, #6]
 801d7b8:	4619      	mov	r1, r3
 801d7ba:	4833      	ldr	r0, [pc, #204]	@ (801d888 <spi_testing+0x27c>)
 801d7bc:	f7ff fece 	bl	801d55c <SCB_InvalidateDCache_by_Addr>

	    // 7. Compare Sent vs. Received data
	    if (command->bit_pattern_length > 100) {
 801d7c0:	687b      	ldr	r3, [r7, #4]
 801d7c2:	799b      	ldrb	r3, [r3, #6]
 801d7c4:	2b64      	cmp	r3, #100	@ 0x64
 801d7c6:	d919      	bls.n	801d7fc <spi_testing+0x1f0>
	        uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 801d7c8:	687b      	ldr	r3, [r7, #4]
 801d7ca:	799b      	ldrb	r3, [r3, #6]
 801d7cc:	4619      	mov	r1, r3
 801d7ce:	4828      	ldr	r0, [pc, #160]	@ (801d870 <spi_testing+0x264>)
 801d7d0:	f7e3 fd14 	bl	80011fc <calculate_crc>
 801d7d4:	60f8      	str	r0, [r7, #12]
	        uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 801d7d6:	687b      	ldr	r3, [r7, #4]
 801d7d8:	799b      	ldrb	r3, [r3, #6]
 801d7da:	4619      	mov	r1, r3
 801d7dc:	4826      	ldr	r0, [pc, #152]	@ (801d878 <spi_testing+0x26c>)
 801d7de:	f7e3 fd0d 	bl	80011fc <calculate_crc>
 801d7e2:	60b8      	str	r0, [r7, #8]
	        if (sent_crc != received_crc) {
 801d7e4:	68fa      	ldr	r2, [r7, #12]
 801d7e6:	68bb      	ldr	r3, [r7, #8]
 801d7e8:	429a      	cmp	r2, r3
 801d7ea:	d028      	beq.n	801d83e <spi_testing+0x232>
	            printf("SPI_TEST: CRC mismatch on iteration %u.\n", i + 1);
 801d7ec:	7dfb      	ldrb	r3, [r7, #23]
 801d7ee:	3301      	adds	r3, #1
 801d7f0:	4619      	mov	r1, r3
 801d7f2:	4831      	ldr	r0, [pc, #196]	@ (801d8b8 <spi_testing+0x2ac>)
 801d7f4:	f000 fc6e 	bl	801e0d4 <iprintf>
	            return TEST_FAIL;
 801d7f8:	23ff      	movs	r3, #255	@ 0xff
 801d7fa:	e033      	b.n	801d864 <spi_testing+0x258>
	        }
	    }
	    else
	    {
	        int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 801d7fc:	687b      	ldr	r3, [r7, #4]
 801d7fe:	799b      	ldrb	r3, [r3, #6]
 801d800:	461a      	mov	r2, r3
 801d802:	491d      	ldr	r1, [pc, #116]	@ (801d878 <spi_testing+0x26c>)
 801d804:	481a      	ldr	r0, [pc, #104]	@ (801d870 <spi_testing+0x264>)
 801d806:	f000 fdad 	bl	801e364 <memcmp>
 801d80a:	6138      	str	r0, [r7, #16]
	        if (comp != 0) {
 801d80c:	693b      	ldr	r3, [r7, #16]
 801d80e:	2b00      	cmp	r3, #0
 801d810:	d015      	beq.n	801d83e <spi_testing+0x232>
	            printf("Data mismatch on iteration %u.\n", i + 1);
 801d812:	7dfb      	ldrb	r3, [r7, #23]
 801d814:	3301      	adds	r3, #1
 801d816:	4619      	mov	r1, r3
 801d818:	4828      	ldr	r0, [pc, #160]	@ (801d8bc <spi_testing+0x2b0>)
 801d81a:	f000 fc5b 	bl	801e0d4 <iprintf>
				printf("Sent: %.*s\n", command->bit_pattern_length, tx_buffer);
 801d81e:	687b      	ldr	r3, [r7, #4]
 801d820:	799b      	ldrb	r3, [r3, #6]
 801d822:	4a13      	ldr	r2, [pc, #76]	@ (801d870 <spi_testing+0x264>)
 801d824:	4619      	mov	r1, r3
 801d826:	4826      	ldr	r0, [pc, #152]	@ (801d8c0 <spi_testing+0x2b4>)
 801d828:	f000 fc54 	bl	801e0d4 <iprintf>
				printf("Recv: %.*s\n", command->bit_pattern_length, rx_buffer);
 801d82c:	687b      	ldr	r3, [r7, #4]
 801d82e:	799b      	ldrb	r3, [r3, #6]
 801d830:	4a11      	ldr	r2, [pc, #68]	@ (801d878 <spi_testing+0x26c>)
 801d832:	4619      	mov	r1, r3
 801d834:	4823      	ldr	r0, [pc, #140]	@ (801d8c4 <spi_testing+0x2b8>)
 801d836:	f000 fc4d 	bl	801e0d4 <iprintf>
	            return TEST_FAIL;
 801d83a:	23ff      	movs	r3, #255	@ 0xff
 801d83c:	e012      	b.n	801d864 <spi_testing+0x258>
	        }
	    }
	    printf("Data Match on iteration %u.\n", i + 1);
 801d83e:	7dfb      	ldrb	r3, [r7, #23]
 801d840:	3301      	adds	r3, #1
 801d842:	4619      	mov	r1, r3
 801d844:	4820      	ldr	r0, [pc, #128]	@ (801d8c8 <spi_testing+0x2bc>)
 801d846:	f000 fc45 	bl	801e0d4 <iprintf>

        osDelay(10);
 801d84a:	200a      	movs	r0, #10
 801d84c:	f7f1 f914 	bl	800ea78 <osDelay>
	for(uint8_t i = 0; i < command->iterations; i++)
 801d850:	7dfb      	ldrb	r3, [r7, #23]
 801d852:	3301      	adds	r3, #1
 801d854:	75fb      	strb	r3, [r7, #23]
 801d856:	687b      	ldr	r3, [r7, #4]
 801d858:	795b      	ldrb	r3, [r3, #5]
 801d85a:	7dfa      	ldrb	r2, [r7, #23]
 801d85c:	429a      	cmp	r2, r3
 801d85e:	f4ff aeed 	bcc.w	801d63c <spi_testing+0x30>
	}

    return TEST_PASS;
 801d862:	2301      	movs	r3, #1
}
 801d864:	4618      	mov	r0, r3
 801d866:	3718      	adds	r7, #24
 801d868:	46bd      	mov	sp, r7
 801d86a:	bd80      	pop	{r7, pc}
 801d86c:	08021e04 	.word	0x08021e04
 801d870:	20027b10 	.word	0x20027b10
 801d874:	08021e38 	.word	0x08021e38
 801d878:	20027c10 	.word	0x20027c10
 801d87c:	200003d0 	.word	0x200003d0
 801d880:	20000434 	.word	0x20000434
 801d884:	40021800 	.word	0x40021800
 801d888:	20027910 	.word	0x20027910
 801d88c:	20027a10 	.word	0x20027a10
 801d890:	08021e58 	.word	0x08021e58
 801d894:	08021e7c 	.word	0x08021e7c
 801d898:	20000dcc 	.word	0x20000dcc
 801d89c:	08021ea4 	.word	0x08021ea4
 801d8a0:	20000dd0 	.word	0x20000dd0
 801d8a4:	08021eb8 	.word	0x08021eb8
 801d8a8:	08021ecc 	.word	0x08021ecc
 801d8ac:	08021eec 	.word	0x08021eec
 801d8b0:	20000dc0 	.word	0x20000dc0
 801d8b4:	08021f14 	.word	0x08021f14
 801d8b8:	08021f28 	.word	0x08021f28
 801d8bc:	08021f54 	.word	0x08021f54
 801d8c0:	08021f74 	.word	0x08021f74
 801d8c4:	08021f80 	.word	0x08021f80
 801d8c8:	08021f8c 	.word	0x08021f8c

0801d8cc <HAL_SPI_TxCpltCallback>:

// Tx Complete Callback
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801d8cc:	b480      	push	{r7}
 801d8ce:	b085      	sub	sp, #20
 801d8d0:	af00      	add	r7, sp, #0
 801d8d2:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d8d4:	2300      	movs	r3, #0
 801d8d6:	60fb      	str	r3, [r7, #12]
    if (hspi->Instance == SPI_SENDER->Instance)
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	681a      	ldr	r2, [r3, #0]
 801d8dc:	4b09      	ldr	r3, [pc, #36]	@ (801d904 <HAL_SPI_TxCpltCallback+0x38>)
 801d8de:	681b      	ldr	r3, [r3, #0]
 801d8e0:	429a      	cmp	r2, r3
    }
    else
    {
    	UNUSED(hspi);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d8e2:	68fb      	ldr	r3, [r7, #12]
 801d8e4:	2b00      	cmp	r3, #0
 801d8e6:	d007      	beq.n	801d8f8 <HAL_SPI_TxCpltCallback+0x2c>
 801d8e8:	4b07      	ldr	r3, [pc, #28]	@ (801d908 <HAL_SPI_TxCpltCallback+0x3c>)
 801d8ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d8ee:	601a      	str	r2, [r3, #0]
 801d8f0:	f3bf 8f4f 	dsb	sy
 801d8f4:	f3bf 8f6f 	isb	sy
}
 801d8f8:	bf00      	nop
 801d8fa:	3714      	adds	r7, #20
 801d8fc:	46bd      	mov	sp, r7
 801d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d902:	4770      	bx	lr
 801d904:	200003d0 	.word	0x200003d0
 801d908:	e000ed04 	.word	0xe000ed04

0801d90c <HAL_SPI_RxCpltCallback>:

// Rx Complete Callback
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801d90c:	b580      	push	{r7, lr}
 801d90e:	b084      	sub	sp, #16
 801d910:	af00      	add	r7, sp, #0
 801d912:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d914:	2300      	movs	r3, #0
 801d916:	60fb      	str	r3, [r7, #12]
    if (hspi->Instance == SPI_RECEIVER->Instance)
 801d918:	687b      	ldr	r3, [r7, #4]
 801d91a:	681a      	ldr	r2, [r3, #0]
 801d91c:	4b14      	ldr	r3, [pc, #80]	@ (801d970 <HAL_SPI_RxCpltCallback+0x64>)
 801d91e:	681b      	ldr	r3, [r3, #0]
 801d920:	429a      	cmp	r2, r3
 801d922:	d108      	bne.n	801d936 <HAL_SPI_RxCpltCallback+0x2a>
    {
        xSemaphoreGiveFromISR(SpiSlaveRxHandle, &xHigherPriorityTaskWoken);
 801d924:	4b13      	ldr	r3, [pc, #76]	@ (801d974 <HAL_SPI_RxCpltCallback+0x68>)
 801d926:	681b      	ldr	r3, [r3, #0]
 801d928:	f107 020c 	add.w	r2, r7, #12
 801d92c:	4611      	mov	r1, r2
 801d92e:	4618      	mov	r0, r3
 801d930:	f7f2 f9ff 	bl	800fd32 <xQueueGiveFromISR>
 801d934:	e00d      	b.n	801d952 <HAL_SPI_RxCpltCallback+0x46>
//        printf("Slave Rx callback fired, starting echo\n\r");
    }
    else if (hspi->Instance == SPI_SENDER->Instance)
 801d936:	687b      	ldr	r3, [r7, #4]
 801d938:	681a      	ldr	r2, [r3, #0]
 801d93a:	4b0f      	ldr	r3, [pc, #60]	@ (801d978 <HAL_SPI_RxCpltCallback+0x6c>)
 801d93c:	681b      	ldr	r3, [r3, #0]
 801d93e:	429a      	cmp	r2, r3
 801d940:	d107      	bne.n	801d952 <HAL_SPI_RxCpltCallback+0x46>
    {
//        printf("Master Rx callback fired\n\r");
        xSemaphoreGiveFromISR(SpiRxHandle, &xHigherPriorityTaskWoken);
 801d942:	4b0e      	ldr	r3, [pc, #56]	@ (801d97c <HAL_SPI_RxCpltCallback+0x70>)
 801d944:	681b      	ldr	r3, [r3, #0]
 801d946:	f107 020c 	add.w	r2, r7, #12
 801d94a:	4611      	mov	r1, r2
 801d94c:	4618      	mov	r0, r3
 801d94e:	f7f2 f9f0 	bl	800fd32 <xQueueGiveFromISR>
    }
    else
    {
    	UNUSED(hspi);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d952:	68fb      	ldr	r3, [r7, #12]
 801d954:	2b00      	cmp	r3, #0
 801d956:	d007      	beq.n	801d968 <HAL_SPI_RxCpltCallback+0x5c>
 801d958:	4b09      	ldr	r3, [pc, #36]	@ (801d980 <HAL_SPI_RxCpltCallback+0x74>)
 801d95a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d95e:	601a      	str	r2, [r3, #0]
 801d960:	f3bf 8f4f 	dsb	sy
 801d964:	f3bf 8f6f 	isb	sy
}
 801d968:	bf00      	nop
 801d96a:	3710      	adds	r7, #16
 801d96c:	46bd      	mov	sp, r7
 801d96e:	bd80      	pop	{r7, pc}
 801d970:	20000434 	.word	0x20000434
 801d974:	20000dd0 	.word	0x20000dd0
 801d978:	200003d0 	.word	0x200003d0
 801d97c:	20000dc0 	.word	0x20000dc0
 801d980:	e000ed04 	.word	0xe000ed04

0801d984 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801d984:	b580      	push	{r7, lr}
 801d986:	b084      	sub	sp, #16
 801d988:	af00      	add	r7, sp, #0
 801d98a:	6078      	str	r0, [r7, #4]

    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d98c:	2300      	movs	r3, #0
 801d98e:	60fb      	str	r3, [r7, #12]
    if (hspi->Instance == SPI_RECEIVER->Instance)
 801d990:	687b      	ldr	r3, [r7, #4]
 801d992:	681a      	ldr	r2, [r3, #0]
 801d994:	4b18      	ldr	r3, [pc, #96]	@ (801d9f8 <HAL_SPI_TxRxCpltCallback+0x74>)
 801d996:	681b      	ldr	r3, [r3, #0]
 801d998:	429a      	cmp	r2, r3
 801d99a:	d110      	bne.n	801d9be <HAL_SPI_TxRxCpltCallback+0x3a>
    {
        xSemaphoreGiveFromISR(SpiSlaveRxHandle, &xHigherPriorityTaskWoken);
 801d99c:	4b17      	ldr	r3, [pc, #92]	@ (801d9fc <HAL_SPI_TxRxCpltCallback+0x78>)
 801d99e:	681b      	ldr	r3, [r3, #0]
 801d9a0:	f107 020c 	add.w	r2, r7, #12
 801d9a4:	4611      	mov	r1, r2
 801d9a6:	4618      	mov	r0, r3
 801d9a8:	f7f2 f9c3 	bl	800fd32 <xQueueGiveFromISR>
//        printf("Slave TxRx callback fired\n\r");
        memcpy(echo_tx_buffer,echo_rx_buffer, SPI_RECEIVER->RxXferSize);
 801d9ac:	4b12      	ldr	r3, [pc, #72]	@ (801d9f8 <HAL_SPI_TxRxCpltCallback+0x74>)
 801d9ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801d9b2:	461a      	mov	r2, r3
 801d9b4:	4912      	ldr	r1, [pc, #72]	@ (801da00 <HAL_SPI_TxRxCpltCallback+0x7c>)
 801d9b6:	4813      	ldr	r0, [pc, #76]	@ (801da04 <HAL_SPI_TxRxCpltCallback+0x80>)
 801d9b8:	f000 fdb7 	bl	801e52a <memcpy>
 801d9bc:	e00d      	b.n	801d9da <HAL_SPI_TxRxCpltCallback+0x56>
    }
    else if (hspi->Instance == SPI_SENDER->Instance)
 801d9be:	687b      	ldr	r3, [r7, #4]
 801d9c0:	681a      	ldr	r2, [r3, #0]
 801d9c2:	4b11      	ldr	r3, [pc, #68]	@ (801da08 <HAL_SPI_TxRxCpltCallback+0x84>)
 801d9c4:	681b      	ldr	r3, [r3, #0]
 801d9c6:	429a      	cmp	r2, r3
 801d9c8:	d107      	bne.n	801d9da <HAL_SPI_TxRxCpltCallback+0x56>
    {
//        printf("Master TxRx callback fired\n\r");
        xSemaphoreGiveFromISR(SpiTxHandle, &xHigherPriorityTaskWoken);
 801d9ca:	4b10      	ldr	r3, [pc, #64]	@ (801da0c <HAL_SPI_TxRxCpltCallback+0x88>)
 801d9cc:	681b      	ldr	r3, [r3, #0]
 801d9ce:	f107 020c 	add.w	r2, r7, #12
 801d9d2:	4611      	mov	r1, r2
 801d9d4:	4618      	mov	r0, r3
 801d9d6:	f7f2 f9ac 	bl	800fd32 <xQueueGiveFromISR>
    }
    else
    {
    	UNUSED(hspi);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d9da:	68fb      	ldr	r3, [r7, #12]
 801d9dc:	2b00      	cmp	r3, #0
 801d9de:	d007      	beq.n	801d9f0 <HAL_SPI_TxRxCpltCallback+0x6c>
 801d9e0:	4b0b      	ldr	r3, [pc, #44]	@ (801da10 <HAL_SPI_TxRxCpltCallback+0x8c>)
 801d9e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d9e6:	601a      	str	r2, [r3, #0]
 801d9e8:	f3bf 8f4f 	dsb	sy
 801d9ec:	f3bf 8f6f 	isb	sy
}
 801d9f0:	bf00      	nop
 801d9f2:	3710      	adds	r7, #16
 801d9f4:	46bd      	mov	sp, r7
 801d9f6:	bd80      	pop	{r7, pc}
 801d9f8:	20000434 	.word	0x20000434
 801d9fc:	20000dd0 	.word	0x20000dd0
 801da00:	20027910 	.word	0x20027910
 801da04:	20027a10 	.word	0x20027a10
 801da08:	200003d0 	.word	0x200003d0
 801da0c:	20000dcc 	.word	0x20000dcc
 801da10:	e000ed04 	.word	0xe000ed04

0801da14 <clear_flags>:

void clear_flags(SPI_HandleTypeDef *hspi)
{
 801da14:	b580      	push	{r7, lr}
 801da16:	b084      	sub	sp, #16
 801da18:	af00      	add	r7, sp, #0
 801da1a:	6078      	str	r0, [r7, #4]
    HAL_SPI_Abort(hspi);
 801da1c:	6878      	ldr	r0, [r7, #4]
 801da1e:	f7ec fa8b 	bl	8009f38 <HAL_SPI_Abort>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801da22:	2300      	movs	r3, #0
 801da24:	60fb      	str	r3, [r7, #12]
 801da26:	687b      	ldr	r3, [r7, #4]
 801da28:	681b      	ldr	r3, [r3, #0]
 801da2a:	68db      	ldr	r3, [r3, #12]
 801da2c:	60fb      	str	r3, [r7, #12]
 801da2e:	687b      	ldr	r3, [r7, #4]
 801da30:	681b      	ldr	r3, [r3, #0]
 801da32:	689b      	ldr	r3, [r3, #8]
 801da34:	60fb      	str	r3, [r7, #12]
 801da36:	68fb      	ldr	r3, [r7, #12]
    HAL_SPIEx_FlushRxFifo(hspi);
 801da38:	6878      	ldr	r0, [r7, #4]
 801da3a:	f7ed f9c7 	bl	800adcc <HAL_SPIEx_FlushRxFifo>
}
 801da3e:	bf00      	nop
 801da40:	3710      	adds	r7, #16
 801da42:	46bd      	mov	sp, r7
 801da44:	bd80      	pop	{r7, pc}
	...

0801da48 <reset_test>:
void reset_test()
{
 801da48:	b580      	push	{r7, lr}
 801da4a:	af00      	add	r7, sp, #0
	HAL_SPI_Abort(SPI_SENDER);
 801da4c:	480c      	ldr	r0, [pc, #48]	@ (801da80 <reset_test+0x38>)
 801da4e:	f7ec fa73 	bl	8009f38 <HAL_SPI_Abort>
	HAL_SPI_Abort(SPI_RECEIVER);
 801da52:	480c      	ldr	r0, [pc, #48]	@ (801da84 <reset_test+0x3c>)
 801da54:	f7ec fa70 	bl	8009f38 <HAL_SPI_Abort>
	xQueueReset(SpiTxHandle);
 801da58:	4b0b      	ldr	r3, [pc, #44]	@ (801da88 <reset_test+0x40>)
 801da5a:	681b      	ldr	r3, [r3, #0]
 801da5c:	2100      	movs	r1, #0
 801da5e:	4618      	mov	r0, r3
 801da60:	f7f1 fd2e 	bl	800f4c0 <xQueueGenericReset>
	xQueueReset(SpiRxHandle);
 801da64:	4b09      	ldr	r3, [pc, #36]	@ (801da8c <reset_test+0x44>)
 801da66:	681b      	ldr	r3, [r3, #0]
 801da68:	2100      	movs	r1, #0
 801da6a:	4618      	mov	r0, r3
 801da6c:	f7f1 fd28 	bl	800f4c0 <xQueueGenericReset>
	xQueueReset(SpiSlaveRxHandle);
 801da70:	4b07      	ldr	r3, [pc, #28]	@ (801da90 <reset_test+0x48>)
 801da72:	681b      	ldr	r3, [r3, #0]
 801da74:	2100      	movs	r1, #0
 801da76:	4618      	mov	r0, r3
 801da78:	f7f1 fd22 	bl	800f4c0 <xQueueGenericReset>
}
 801da7c:	bf00      	nop
 801da7e:	bd80      	pop	{r7, pc}
 801da80:	200003d0 	.word	0x200003d0
 801da84:	20000434 	.word	0x20000434
 801da88:	20000dcc 	.word	0x20000dcc
 801da8c:	20000dc0 	.word	0x20000dc0
 801da90:	20000dd0 	.word	0x20000dd0

0801da94 <HAL_SPI_ErrorCallback>:


void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 801da94:	b580      	push	{r7, lr}
 801da96:	b084      	sub	sp, #16
 801da98:	af00      	add	r7, sp, #0
 801da9a:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == SPI_RECEIVER->Instance)
 801da9c:	687b      	ldr	r3, [r7, #4]
 801da9e:	681a      	ldr	r2, [r3, #0]
 801daa0:	4b0e      	ldr	r3, [pc, #56]	@ (801dadc <HAL_SPI_ErrorCallback+0x48>)
 801daa2:	681b      	ldr	r3, [r3, #0]
 801daa4:	429a      	cmp	r2, r3
 801daa6:	d114      	bne.n	801dad2 <HAL_SPI_ErrorCallback+0x3e>
  {
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_OVR))
 801daa8:	687b      	ldr	r3, [r7, #4]
 801daaa:	681b      	ldr	r3, [r3, #0]
 801daac:	689b      	ldr	r3, [r3, #8]
 801daae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801dab2:	2b40      	cmp	r3, #64	@ 0x40
 801dab4:	d10d      	bne.n	801dad2 <HAL_SPI_ErrorCallback+0x3e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801dab6:	2300      	movs	r3, #0
 801dab8:	60fb      	str	r3, [r7, #12]
 801daba:	687b      	ldr	r3, [r7, #4]
 801dabc:	681b      	ldr	r3, [r3, #0]
 801dabe:	68db      	ldr	r3, [r3, #12]
 801dac0:	60fb      	str	r3, [r7, #12]
 801dac2:	687b      	ldr	r3, [r7, #4]
 801dac4:	681b      	ldr	r3, [r3, #0]
 801dac6:	689b      	ldr	r3, [r3, #8]
 801dac8:	60fb      	str	r3, [r7, #12]
 801daca:	68fb      	ldr	r3, [r7, #12]
      HAL_SPIEx_FlushRxFifo(hspi);
 801dacc:	6878      	ldr	r0, [r7, #4]
 801dace:	f7ed f97d 	bl	800adcc <HAL_SPIEx_FlushRxFifo>
    }
  }
}
 801dad2:	bf00      	nop
 801dad4:	3710      	adds	r7, #16
 801dad6:	46bd      	mov	sp, r7
 801dad8:	bd80      	pop	{r7, pc}
 801dada:	bf00      	nop
 801dadc:	20000434 	.word	0x20000434

0801dae0 <timer_testing>:
/*
 * @brief Performs a test on the TIMER using the command protocol.
 * @param command: A pointer to the test_command_t struct.
 * @retval result_t: The result of the test (TEST_PASS or TEST_FAIL).
 */
Result timer_testing(test_command_t* command){
 801dae0:	b580      	push	{r7, lr}
 801dae2:	b084      	sub	sp, #16
 801dae4:	af00      	add	r7, sp, #0
 801dae6:	6078      	str	r0, [r7, #4]

	uint16_t start_val ,end_val;

	if (command == NULL) {
 801dae8:	687b      	ldr	r3, [r7, #4]
 801daea:	2b00      	cmp	r3, #0
 801daec:	d102      	bne.n	801daf4 <timer_testing+0x14>
//        printf("Received NULL command pointer. Skipping.\n\r"); // Debug printf
        return TEST_ERR;
 801daee:	f04f 33ff 	mov.w	r3, #4294967295
 801daf2:	e022      	b.n	801db3a <timer_testing+0x5a>
	}

	// Start Timer
	HAL_TIM_Base_Start_IT(&htim7);
 801daf4:	4813      	ldr	r0, [pc, #76]	@ (801db44 <timer_testing+0x64>)
 801daf6:	f7ed f9e3 	bl	800aec0 <HAL_TIM_Base_Start_IT>

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801dafa:	2300      	movs	r3, #0
 801dafc:	73fb      	strb	r3, [r7, #15]
 801dafe:	e013      	b.n	801db28 <timer_testing+0x48>

	    if (xSemaphoreTake(TimSemHandle, pdMS_TO_TICKS(200)) != pdPASS) {
 801db00:	4b11      	ldr	r3, [pc, #68]	@ (801db48 <timer_testing+0x68>)
 801db02:	681b      	ldr	r3, [r3, #0]
 801db04:	21c8      	movs	r1, #200	@ 0xc8
 801db06:	4618      	mov	r0, r3
 801db08:	f7f2 fa94 	bl	8010034 <xQueueSemaphoreTake>
 801db0c:	4603      	mov	r3, r0
 801db0e:	2b01      	cmp	r3, #1
 801db10:	d004      	beq.n	801db1c <timer_testing+0x3c>
//			printf("Fail on iteration %u.\n\r",i+1); // Debug printf
	         vPortFree(command);
 801db12:	6878      	ldr	r0, [r7, #4]
 801db14:	f7f4 fe36 	bl	8012784 <vPortFree>
	         return TEST_FAIL;
 801db18:	23ff      	movs	r3, #255	@ 0xff
 801db1a:	e00e      	b.n	801db3a <timer_testing+0x5a>
	    }

//		printf("success on iteration %u.\n\r", i + 1); // Debug printf
        osDelay(10); // Small delay between iterations to prevent overwhelming the UUT or the system
 801db1c:	200a      	movs	r0, #10
 801db1e:	f7f0 ffab 	bl	800ea78 <osDelay>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 801db22:	7bfb      	ldrb	r3, [r7, #15]
 801db24:	3301      	adds	r3, #1
 801db26:	73fb      	strb	r3, [r7, #15]
 801db28:	687b      	ldr	r3, [r7, #4]
 801db2a:	795b      	ldrb	r3, [r3, #5]
 801db2c:	7bfa      	ldrb	r2, [r7, #15]
 801db2e:	429a      	cmp	r2, r3
 801db30:	d3e6      	bcc.n	801db00 <timer_testing+0x20>
	}// end of iterations

    // Stop Timer after the test is complete
	HAL_TIM_Base_Stop_IT(&htim7);
 801db32:	4804      	ldr	r0, [pc, #16]	@ (801db44 <timer_testing+0x64>)
 801db34:	f7ed fa3c 	bl	800afb0 <HAL_TIM_Base_Stop_IT>

    return TEST_PASS;
 801db38:	2301      	movs	r3, #1
}
 801db3a:	4618      	mov	r0, r3
 801db3c:	3710      	adds	r7, #16
 801db3e:	46bd      	mov	sp, r7
 801db40:	bd80      	pop	{r7, pc}
 801db42:	bf00      	nop
 801db44:	20000618 	.word	0x20000618
 801db48:	20000dc8 	.word	0x20000dc8

0801db4c <uart_testing>:
/*
 * @brief Performs a test on the UART peripheral using the command protocol.
 * @param command: A pointer to the test_command_t struct.
 * @retval result_t: The result of the test (TEST_PASS or TEST_FAIL).
 */
Result uart_testing(test_command_t* command){
 801db4c:	b580      	push	{r7, lr}
 801db4e:	f5ad 7d46 	sub.w	sp, sp, #792	@ 0x318
 801db52:	af00      	add	r7, sp, #0
 801db54:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801db58:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801db5c:	6018      	str	r0, [r3, #0]

	uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801db5e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801db62:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801db66:	4618      	mov	r0, r3
 801db68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801db6c:	461a      	mov	r2, r3
 801db6e:	2100      	movs	r1, #0
 801db70:	f000 fc08 	bl	801e384 <memset>
	uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801db74:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801db78:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801db7c:	4618      	mov	r0, r3
 801db7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801db82:	461a      	mov	r2, r3
 801db84:	2100      	movs	r1, #0
 801db86:	f000 fbfd 	bl	801e384 <memset>
	uint8_t echo_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801db8a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801db8e:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 801db92:	4618      	mov	r0, r3
 801db94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801db98:	461a      	mov	r2, r3
 801db9a:	2100      	movs	r1, #0
 801db9c:	f000 fbf2 	bl	801e384 <memset>

	HAL_StatusTypeDef rx_status, tx_status;

	if (command == NULL) {
 801dba0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dba4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dba8:	681b      	ldr	r3, [r3, #0]
 801dbaa:	2b00      	cmp	r3, #0
 801dbac:	d105      	bne.n	801dbba <uart_testing+0x6e>
        printf("UART_TEST: Received NULL command pointer. Skipping.\n\r"); // Debug printf
 801dbae:	4890      	ldr	r0, [pc, #576]	@ (801ddf0 <uart_testing+0x2a4>)
 801dbb0:	f000 fa90 	bl	801e0d4 <iprintf>
        return TEST_ERR;
 801dbb4:	f04f 33ff 	mov.w	r3, #4294967295
 801dbb8:	e115      	b.n	801dde6 <uart_testing+0x29a>
	}

	// Copy pattern to TX buffer
    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 801dbba:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dbbe:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dbc2:	681b      	ldr	r3, [r3, #0]
 801dbc4:	1dd9      	adds	r1, r3, #7
 801dbc6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dbca:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dbce:	681b      	ldr	r3, [r3, #0]
 801dbd0:	799b      	ldrb	r3, [r3, #6]
 801dbd2:	461a      	mov	r2, r3
 801dbd4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801dbd8:	4618      	mov	r0, r3
 801dbda:	f000 fca6 	bl	801e52a <memcpy>

    for(uint8_t i=0 ; i< command->iterations ; i++){
 801dbde:	2300      	movs	r3, #0
 801dbe0:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
 801dbe4:	e0f3      	b.n	801ddce <uart_testing+0x282>
//        printf("UART_TEST: Iteration %u/%u:\n\r", i + 1, command->iterations); // Debug printf
        memset(rx_buffer, 0, command->bit_pattern_length);
 801dbe6:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dbea:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dbee:	681b      	ldr	r3, [r3, #0]
 801dbf0:	799b      	ldrb	r3, [r3, #6]
 801dbf2:	461a      	mov	r2, r3
 801dbf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801dbf8:	2100      	movs	r1, #0
 801dbfa:	4618      	mov	r0, r3
 801dbfc:	f000 fbc2 	bl	801e384 <memset>

        // RECEIVER start to RECEIVE DMA
        rx_status = HAL_UART_Receive_DMA(UART_RECEIVER, echo_buffer, command->bit_pattern_length);
 801dc00:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dc04:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dc08:	681b      	ldr	r3, [r3, #0]
 801dc0a:	799b      	ldrb	r3, [r3, #6]
 801dc0c:	461a      	mov	r2, r3
 801dc0e:	f107 0308 	add.w	r3, r7, #8
 801dc12:	4619      	mov	r1, r3
 801dc14:	4877      	ldr	r0, [pc, #476]	@ (801ddf4 <uart_testing+0x2a8>)
 801dc16:	f7ed fe73 	bl	800b900 <HAL_UART_Receive_DMA>
 801dc1a:	4603      	mov	r3, r0
 801dc1c:	f887 3316 	strb.w	r3, [r7, #790]	@ 0x316
        if (rx_status != HAL_OK) {
 801dc20:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801dc24:	2b00      	cmp	r3, #0
 801dc26:	d007      	beq.n	801dc38 <uart_testing+0xec>
            printf("Receiver Failed to start receive: %d\n\r", rx_status);
 801dc28:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801dc2c:	4619      	mov	r1, r3
 801dc2e:	4872      	ldr	r0, [pc, #456]	@ (801ddf8 <uart_testing+0x2ac>)
 801dc30:	f000 fa50 	bl	801e0d4 <iprintf>
            return TEST_FAIL;
 801dc34:	23ff      	movs	r3, #255	@ 0xff
 801dc36:	e0d6      	b.n	801dde6 <uart_testing+0x29a>
        }
        // Arm sender receive before receiver transmits back
        if (HAL_UART_Receive_IT(UART_SENDER, rx_buffer, command->bit_pattern_length) != HAL_OK) {
 801dc38:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dc3c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dc40:	681b      	ldr	r3, [r3, #0]
 801dc42:	799b      	ldrb	r3, [r3, #6]
 801dc44:	461a      	mov	r2, r3
 801dc46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801dc4a:	4619      	mov	r1, r3
 801dc4c:	486b      	ldr	r0, [pc, #428]	@ (801ddfc <uart_testing+0x2b0>)
 801dc4e:	f7ed fd97 	bl	800b780 <HAL_UART_Receive_IT>
 801dc52:	4603      	mov	r3, r0
 801dc54:	2b00      	cmp	r3, #0
 801dc56:	d007      	beq.n	801dc68 <uart_testing+0x11c>
            HAL_UART_Abort(UART_RECEIVER);
 801dc58:	4866      	ldr	r0, [pc, #408]	@ (801ddf4 <uart_testing+0x2a8>)
 801dc5a:	f7ed fe95 	bl	800b988 <HAL_UART_Abort>
            printf("Sender Failed to start receive back\n\r");
 801dc5e:	4868      	ldr	r0, [pc, #416]	@ (801de00 <uart_testing+0x2b4>)
 801dc60:	f000 fa38 	bl	801e0d4 <iprintf>
            return TEST_FAIL;
 801dc64:	23ff      	movs	r3, #255	@ 0xff
 801dc66:	e0be      	b.n	801dde6 <uart_testing+0x29a>
        }

        // SENDER TRANSMIT a block of data via DMA
        tx_status = HAL_UART_Transmit_DMA(UART_SENDER, tx_buffer, command->bit_pattern_length);
 801dc68:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dc6c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dc70:	681b      	ldr	r3, [r3, #0]
 801dc72:	799b      	ldrb	r3, [r3, #6]
 801dc74:	461a      	mov	r2, r3
 801dc76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801dc7a:	4619      	mov	r1, r3
 801dc7c:	485f      	ldr	r0, [pc, #380]	@ (801ddfc <uart_testing+0x2b0>)
 801dc7e:	f7ed fdc3 	bl	800b808 <HAL_UART_Transmit_DMA>
 801dc82:	4603      	mov	r3, r0
 801dc84:	f887 3315 	strb.w	r3, [r7, #789]	@ 0x315
        if (tx_status != HAL_OK) {
 801dc88:	f897 3315 	ldrb.w	r3, [r7, #789]	@ 0x315
 801dc8c:	2b00      	cmp	r3, #0
 801dc8e:	d00a      	beq.n	801dca6 <uart_testing+0x15a>
            printf("Failed to send on UART sender: %d\n\r", tx_status);
 801dc90:	f897 3315 	ldrb.w	r3, [r7, #789]	@ 0x315
 801dc94:	4619      	mov	r1, r3
 801dc96:	485b      	ldr	r0, [pc, #364]	@ (801de04 <uart_testing+0x2b8>)
 801dc98:	f000 fa1c 	bl	801e0d4 <iprintf>
            HAL_UART_Abort(UART_RECEIVER);
 801dc9c:	4855      	ldr	r0, [pc, #340]	@ (801ddf4 <uart_testing+0x2a8>)
 801dc9e:	f7ed fe73 	bl	800b988 <HAL_UART_Abort>
            return TEST_FAIL;
 801dca2:	23ff      	movs	r3, #255	@ 0xff
 801dca4:	e09f      	b.n	801dde6 <uart_testing+0x29a>
        }
        // WAIT FOR TX COMPLETION
        if (xSemaphoreTake(UartTxHandle, TIMEOUT) != pdPASS) {
 801dca6:	4b58      	ldr	r3, [pc, #352]	@ (801de08 <uart_testing+0x2bc>)
 801dca8:	681b      	ldr	r3, [r3, #0]
 801dcaa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801dcae:	4618      	mov	r0, r3
 801dcb0:	f7f2 f9c0 	bl	8010034 <xQueueSemaphoreTake>
 801dcb4:	4603      	mov	r3, r0
 801dcb6:	2b01      	cmp	r3, #1
 801dcb8:	d00a      	beq.n	801dcd0 <uart_testing+0x184>
             printf("fail to get TxSemaphore\n\r");
 801dcba:	4854      	ldr	r0, [pc, #336]	@ (801de0c <uart_testing+0x2c0>)
 801dcbc:	f000 fa0a 	bl	801e0d4 <iprintf>
             HAL_UART_Abort(UART_RECEIVER);
 801dcc0:	484c      	ldr	r0, [pc, #304]	@ (801ddf4 <uart_testing+0x2a8>)
 801dcc2:	f7ed fe61 	bl	800b988 <HAL_UART_Abort>
             HAL_UART_Abort(UART_SENDER);
 801dcc6:	484d      	ldr	r0, [pc, #308]	@ (801ddfc <uart_testing+0x2b0>)
 801dcc8:	f7ed fe5e 	bl	800b988 <HAL_UART_Abort>
             return TEST_FAIL;
 801dccc:	23ff      	movs	r3, #255	@ 0xff
 801dcce:	e08a      	b.n	801dde6 <uart_testing+0x29a>
        }
        else
        {
			 if (HAL_UART_Transmit_IT(UART_RECEIVER, echo_buffer, command->bit_pattern_length) != HAL_OK){
 801dcd0:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dcd4:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dcd8:	681b      	ldr	r3, [r3, #0]
 801dcda:	799b      	ldrb	r3, [r3, #6]
 801dcdc:	461a      	mov	r2, r3
 801dcde:	f107 0308 	add.w	r3, r7, #8
 801dce2:	4619      	mov	r1, r3
 801dce4:	4843      	ldr	r0, [pc, #268]	@ (801ddf4 <uart_testing+0x2a8>)
 801dce6:	f7ed fced 	bl	800b6c4 <HAL_UART_Transmit_IT>
 801dcea:	4603      	mov	r3, r0
 801dcec:	2b00      	cmp	r3, #0
 801dcee:	d00d      	beq.n	801dd0c <uart_testing+0x1c0>
				 printf("Failed to echo send on UART receiver: %d\n\r", tx_status);
 801dcf0:	f897 3315 	ldrb.w	r3, [r7, #789]	@ 0x315
 801dcf4:	4619      	mov	r1, r3
 801dcf6:	4846      	ldr	r0, [pc, #280]	@ (801de10 <uart_testing+0x2c4>)
 801dcf8:	f000 f9ec 	bl	801e0d4 <iprintf>
				 HAL_UART_Abort(UART_RECEIVER);
 801dcfc:	483d      	ldr	r0, [pc, #244]	@ (801ddf4 <uart_testing+0x2a8>)
 801dcfe:	f7ed fe43 	bl	800b988 <HAL_UART_Abort>
				 HAL_UART_Abort(UART_SENDER);
 801dd02:	483e      	ldr	r0, [pc, #248]	@ (801ddfc <uart_testing+0x2b0>)
 801dd04:	f7ed fe40 	bl	800b988 <HAL_UART_Abort>
				 return TEST_FAIL;
 801dd08:	23ff      	movs	r3, #255	@ 0xff
 801dd0a:	e06c      	b.n	801dde6 <uart_testing+0x29a>
			 }
        }

        // WAIT FOR RECEIVER RX COMPLETION
        if (xSemaphoreTake(UartRxHandle, TIMEOUT) != pdPASS) {
 801dd0c:	4b41      	ldr	r3, [pc, #260]	@ (801de14 <uart_testing+0x2c8>)
 801dd0e:	681b      	ldr	r3, [r3, #0]
 801dd10:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801dd14:	4618      	mov	r0, r3
 801dd16:	f7f2 f98d 	bl	8010034 <xQueueSemaphoreTake>
 801dd1a:	4603      	mov	r3, r0
 801dd1c:	2b01      	cmp	r3, #1
 801dd1e:	d00a      	beq.n	801dd36 <uart_testing+0x1ea>
            printf("fail to get RxSemaphore\n\r");
 801dd20:	483d      	ldr	r0, [pc, #244]	@ (801de18 <uart_testing+0x2cc>)
 801dd22:	f000 f9d7 	bl	801e0d4 <iprintf>
            HAL_UART_Abort(UART_SENDER);
 801dd26:	4835      	ldr	r0, [pc, #212]	@ (801ddfc <uart_testing+0x2b0>)
 801dd28:	f7ed fe2e 	bl	800b988 <HAL_UART_Abort>
            HAL_UART_Abort(UART_RECEIVER);
 801dd2c:	4831      	ldr	r0, [pc, #196]	@ (801ddf4 <uart_testing+0x2a8>)
 801dd2e:	f7ed fe2b 	bl	800b988 <HAL_UART_Abort>
            return TEST_FAIL;
 801dd32:	23ff      	movs	r3, #255	@ 0xff
 801dd34:	e057      	b.n	801dde6 <uart_testing+0x29a>
        }

	    // COMPARE SENT vs. RECEIVED data
	    if (command->bit_pattern_length > 100) {
 801dd36:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dd3a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dd3e:	681b      	ldr	r3, [r3, #0]
 801dd40:	799b      	ldrb	r3, [r3, #6]
 801dd42:	2b64      	cmp	r3, #100	@ 0x64
 801dd44:	d925      	bls.n	801dd92 <uart_testing+0x246>
//			printf("bit_pattern_length more than 100\n\r"); // Debug printf

			// Use CRC comparison for large data
			uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 801dd46:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dd4a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dd4e:	681b      	ldr	r3, [r3, #0]
 801dd50:	799b      	ldrb	r3, [r3, #6]
 801dd52:	461a      	mov	r2, r3
 801dd54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801dd58:	4611      	mov	r1, r2
 801dd5a:	4618      	mov	r0, r3
 801dd5c:	f7e3 fa4e 	bl	80011fc <calculate_crc>
 801dd60:	f8c7 030c 	str.w	r0, [r7, #780]	@ 0x30c
			uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 801dd64:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dd68:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dd6c:	681b      	ldr	r3, [r3, #0]
 801dd6e:	799b      	ldrb	r3, [r3, #6]
 801dd70:	461a      	mov	r2, r3
 801dd72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801dd76:	4611      	mov	r1, r2
 801dd78:	4618      	mov	r0, r3
 801dd7a:	f7e3 fa3f 	bl	80011fc <calculate_crc>
 801dd7e:	f8c7 0308 	str.w	r0, [r7, #776]	@ 0x308
			if (sent_crc != received_crc) {
 801dd82:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 801dd86:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801dd8a:	429a      	cmp	r2, r3
 801dd8c:	d017      	beq.n	801ddbe <uart_testing+0x272>
				// Debug printf
//				printf("UART_TEST: CRC mismatch on iteration %u. Sent CRC: 0x%lX, Received CRC: 0x%lX\n\r",
//					   i + 1, sent_crc, received_crc);
				return TEST_FAIL;
 801dd8e:	23ff      	movs	r3, #255	@ 0xff
 801dd90:	e029      	b.n	801dde6 <uart_testing+0x29a>
			}
	    }
	    else {
			int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 801dd92:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dd96:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dd9a:	681b      	ldr	r3, [r3, #0]
 801dd9c:	799b      	ldrb	r3, [r3, #6]
 801dd9e:	461a      	mov	r2, r3
 801dda0:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 801dda4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801dda8:	4618      	mov	r0, r3
 801ddaa:	f000 fadb 	bl	801e364 <memcmp>
 801ddae:	f8c7 0310 	str.w	r0, [r7, #784]	@ 0x310
			if (comp != 0) {
 801ddb2:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 801ddb6:	2b00      	cmp	r3, #0
 801ddb8:	d001      	beq.n	801ddbe <uart_testing+0x272>
//				// Debug printf
//				printf("Data mismatch on iteration %u.\n\r", i + 1);
//				printf("Sent: %.*s\n\r", command->bit_pattern_length, tx_buffer);
//				printf("Recv: %.*s\n\r", command->bit_pattern_length, rx_buffer);
				return TEST_FAIL;
 801ddba:	23ff      	movs	r3, #255	@ 0xff
 801ddbc:	e013      	b.n	801dde6 <uart_testing+0x29a>
			}
	    }
//	    printf("Data Match on iteration %u.\n\r", i + 1); // Debug printf

        osDelay(10); // Small delay between iterations to prevent overwhelming the UUT or the system
 801ddbe:	200a      	movs	r0, #10
 801ddc0:	f7f0 fe5a 	bl	800ea78 <osDelay>
    for(uint8_t i=0 ; i< command->iterations ; i++){
 801ddc4:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 801ddc8:	3301      	adds	r3, #1
 801ddca:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
 801ddce:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801ddd2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801ddd6:	681b      	ldr	r3, [r3, #0]
 801ddd8:	795b      	ldrb	r3, [r3, #5]
 801ddda:	f897 2317 	ldrb.w	r2, [r7, #791]	@ 0x317
 801ddde:	429a      	cmp	r2, r3
 801dde0:	f4ff af01 	bcc.w	801dbe6 <uart_testing+0x9a>
	}
    return TEST_PASS;
 801dde4:	2301      	movs	r3, #1
}
 801dde6:	4618      	mov	r0, r3
 801dde8:	f507 7746 	add.w	r7, r7, #792	@ 0x318
 801ddec:	46bd      	mov	sp, r7
 801ddee:	bd80      	pop	{r7, pc}
 801ddf0:	08021fac 	.word	0x08021fac
 801ddf4:	20000664 	.word	0x20000664
 801ddf8:	08021fe4 	.word	0x08021fe4
 801ddfc:	200006ec 	.word	0x200006ec
 801de00:	0802200c 	.word	0x0802200c
 801de04:	08022034 	.word	0x08022034
 801de08:	20000db4 	.word	0x20000db4
 801de0c:	08022058 	.word	0x08022058
 801de10:	08022074 	.word	0x08022074
 801de14:	20000db0 	.word	0x20000db0
 801de18:	080220a0 	.word	0x080220a0

0801de1c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801de1c:	b480      	push	{r7}
 801de1e:	b085      	sub	sp, #20
 801de20:	af00      	add	r7, sp, #0
 801de22:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801de24:	2300      	movs	r3, #0
 801de26:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == UART_RECEIVER->Instance)
 801de28:	687b      	ldr	r3, [r7, #4]
 801de2a:	681a      	ldr	r2, [r3, #0]
 801de2c:	4b09      	ldr	r3, [pc, #36]	@ (801de54 <HAL_UART_TxCpltCallback+0x38>)
 801de2e:	681b      	ldr	r3, [r3, #0]
 801de30:	429a      	cmp	r2, r3
    }
    else
    {
    	UNUSED(huart);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801de32:	68fb      	ldr	r3, [r7, #12]
 801de34:	2b00      	cmp	r3, #0
 801de36:	d007      	beq.n	801de48 <HAL_UART_TxCpltCallback+0x2c>
 801de38:	4b07      	ldr	r3, [pc, #28]	@ (801de58 <HAL_UART_TxCpltCallback+0x3c>)
 801de3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801de3e:	601a      	str	r2, [r3, #0]
 801de40:	f3bf 8f4f 	dsb	sy
 801de44:	f3bf 8f6f 	isb	sy
}
 801de48:	bf00      	nop
 801de4a:	3714      	adds	r7, #20
 801de4c:	46bd      	mov	sp, r7
 801de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de52:	4770      	bx	lr
 801de54:	20000664 	.word	0x20000664
 801de58:	e000ed04 	.word	0xe000ed04

0801de5c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801de5c:	b580      	push	{r7, lr}
 801de5e:	b084      	sub	sp, #16
 801de60:	af00      	add	r7, sp, #0
 801de62:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801de64:	2300      	movs	r3, #0
 801de66:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == UART_RECEIVER->Instance)
 801de68:	687b      	ldr	r3, [r7, #4]
 801de6a:	681a      	ldr	r2, [r3, #0]
 801de6c:	4b14      	ldr	r3, [pc, #80]	@ (801dec0 <HAL_UART_RxCpltCallback+0x64>)
 801de6e:	681b      	ldr	r3, [r3, #0]
 801de70:	429a      	cmp	r2, r3
 801de72:	d108      	bne.n	801de86 <HAL_UART_RxCpltCallback+0x2a>
    {
        xSemaphoreGiveFromISR(UartTxHandle, &xHigherPriorityTaskWoken);
 801de74:	4b13      	ldr	r3, [pc, #76]	@ (801dec4 <HAL_UART_RxCpltCallback+0x68>)
 801de76:	681b      	ldr	r3, [r3, #0]
 801de78:	f107 020c 	add.w	r2, r7, #12
 801de7c:	4611      	mov	r1, r2
 801de7e:	4618      	mov	r0, r3
 801de80:	f7f1 ff57 	bl	800fd32 <xQueueGiveFromISR>
 801de84:	e00d      	b.n	801dea2 <HAL_UART_RxCpltCallback+0x46>
//        printf("Receiver Rx callback fired \n\r"); // Debug printf
    }
    else if (huart->Instance == UART_SENDER->Instance)
 801de86:	687b      	ldr	r3, [r7, #4]
 801de88:	681a      	ldr	r2, [r3, #0]
 801de8a:	4b0f      	ldr	r3, [pc, #60]	@ (801dec8 <HAL_UART_RxCpltCallback+0x6c>)
 801de8c:	681b      	ldr	r3, [r3, #0]
 801de8e:	429a      	cmp	r2, r3
 801de90:	d107      	bne.n	801dea2 <HAL_UART_RxCpltCallback+0x46>
    {
        xSemaphoreGiveFromISR(UartRxHandle, &xHigherPriorityTaskWoken);
 801de92:	4b0e      	ldr	r3, [pc, #56]	@ (801decc <HAL_UART_RxCpltCallback+0x70>)
 801de94:	681b      	ldr	r3, [r3, #0]
 801de96:	f107 020c 	add.w	r2, r7, #12
 801de9a:	4611      	mov	r1, r2
 801de9c:	4618      	mov	r0, r3
 801de9e:	f7f1 ff48 	bl	800fd32 <xQueueGiveFromISR>
    }
    else
    {
    	UNUSED(huart);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801dea2:	68fb      	ldr	r3, [r7, #12]
 801dea4:	2b00      	cmp	r3, #0
 801dea6:	d007      	beq.n	801deb8 <HAL_UART_RxCpltCallback+0x5c>
 801dea8:	4b09      	ldr	r3, [pc, #36]	@ (801ded0 <HAL_UART_RxCpltCallback+0x74>)
 801deaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801deae:	601a      	str	r2, [r3, #0]
 801deb0:	f3bf 8f4f 	dsb	sy
 801deb4:	f3bf 8f6f 	isb	sy
}
 801deb8:	bf00      	nop
 801deba:	3710      	adds	r7, #16
 801debc:	46bd      	mov	sp, r7
 801debe:	bd80      	pop	{r7, pc}
 801dec0:	20000664 	.word	0x20000664
 801dec4:	20000db4 	.word	0x20000db4
 801dec8:	200006ec 	.word	0x200006ec
 801decc:	20000db0 	.word	0x20000db0
 801ded0:	e000ed04 	.word	0xe000ed04

0801ded4 <rand>:
 801ded4:	4b16      	ldr	r3, [pc, #88]	@ (801df30 <rand+0x5c>)
 801ded6:	b510      	push	{r4, lr}
 801ded8:	681c      	ldr	r4, [r3, #0]
 801deda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801dedc:	b9b3      	cbnz	r3, 801df0c <rand+0x38>
 801dede:	2018      	movs	r0, #24
 801dee0:	f000 fb9a 	bl	801e618 <malloc>
 801dee4:	4602      	mov	r2, r0
 801dee6:	6320      	str	r0, [r4, #48]	@ 0x30
 801dee8:	b920      	cbnz	r0, 801def4 <rand+0x20>
 801deea:	4b12      	ldr	r3, [pc, #72]	@ (801df34 <rand+0x60>)
 801deec:	4812      	ldr	r0, [pc, #72]	@ (801df38 <rand+0x64>)
 801deee:	2152      	movs	r1, #82	@ 0x52
 801def0:	f000 fb2a 	bl	801e548 <__assert_func>
 801def4:	4911      	ldr	r1, [pc, #68]	@ (801df3c <rand+0x68>)
 801def6:	4b12      	ldr	r3, [pc, #72]	@ (801df40 <rand+0x6c>)
 801def8:	e9c0 1300 	strd	r1, r3, [r0]
 801defc:	4b11      	ldr	r3, [pc, #68]	@ (801df44 <rand+0x70>)
 801defe:	6083      	str	r3, [r0, #8]
 801df00:	230b      	movs	r3, #11
 801df02:	8183      	strh	r3, [r0, #12]
 801df04:	2100      	movs	r1, #0
 801df06:	2001      	movs	r0, #1
 801df08:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801df0c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801df0e:	480e      	ldr	r0, [pc, #56]	@ (801df48 <rand+0x74>)
 801df10:	690b      	ldr	r3, [r1, #16]
 801df12:	694c      	ldr	r4, [r1, #20]
 801df14:	4a0d      	ldr	r2, [pc, #52]	@ (801df4c <rand+0x78>)
 801df16:	4358      	muls	r0, r3
 801df18:	fb02 0004 	mla	r0, r2, r4, r0
 801df1c:	fba3 3202 	umull	r3, r2, r3, r2
 801df20:	3301      	adds	r3, #1
 801df22:	eb40 0002 	adc.w	r0, r0, r2
 801df26:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801df2a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801df2e:	bd10      	pop	{r4, pc}
 801df30:	2000003c 	.word	0x2000003c
 801df34:	08022342 	.word	0x08022342
 801df38:	08022359 	.word	0x08022359
 801df3c:	abcd330e 	.word	0xabcd330e
 801df40:	e66d1234 	.word	0xe66d1234
 801df44:	0005deec 	.word	0x0005deec
 801df48:	5851f42d 	.word	0x5851f42d
 801df4c:	4c957f2d 	.word	0x4c957f2d

0801df50 <std>:
 801df50:	2300      	movs	r3, #0
 801df52:	b510      	push	{r4, lr}
 801df54:	4604      	mov	r4, r0
 801df56:	e9c0 3300 	strd	r3, r3, [r0]
 801df5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801df5e:	6083      	str	r3, [r0, #8]
 801df60:	8181      	strh	r1, [r0, #12]
 801df62:	6643      	str	r3, [r0, #100]	@ 0x64
 801df64:	81c2      	strh	r2, [r0, #14]
 801df66:	6183      	str	r3, [r0, #24]
 801df68:	4619      	mov	r1, r3
 801df6a:	2208      	movs	r2, #8
 801df6c:	305c      	adds	r0, #92	@ 0x5c
 801df6e:	f000 fa09 	bl	801e384 <memset>
 801df72:	4b0d      	ldr	r3, [pc, #52]	@ (801dfa8 <std+0x58>)
 801df74:	6263      	str	r3, [r4, #36]	@ 0x24
 801df76:	4b0d      	ldr	r3, [pc, #52]	@ (801dfac <std+0x5c>)
 801df78:	62a3      	str	r3, [r4, #40]	@ 0x28
 801df7a:	4b0d      	ldr	r3, [pc, #52]	@ (801dfb0 <std+0x60>)
 801df7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801df7e:	4b0d      	ldr	r3, [pc, #52]	@ (801dfb4 <std+0x64>)
 801df80:	6323      	str	r3, [r4, #48]	@ 0x30
 801df82:	4b0d      	ldr	r3, [pc, #52]	@ (801dfb8 <std+0x68>)
 801df84:	6224      	str	r4, [r4, #32]
 801df86:	429c      	cmp	r4, r3
 801df88:	d006      	beq.n	801df98 <std+0x48>
 801df8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801df8e:	4294      	cmp	r4, r2
 801df90:	d002      	beq.n	801df98 <std+0x48>
 801df92:	33d0      	adds	r3, #208	@ 0xd0
 801df94:	429c      	cmp	r4, r3
 801df96:	d105      	bne.n	801dfa4 <std+0x54>
 801df98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801df9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dfa0:	f000 bac0 	b.w	801e524 <__retarget_lock_init_recursive>
 801dfa4:	bd10      	pop	{r4, pc}
 801dfa6:	bf00      	nop
 801dfa8:	0801e1b5 	.word	0x0801e1b5
 801dfac:	0801e1d7 	.word	0x0801e1d7
 801dfb0:	0801e20f 	.word	0x0801e20f
 801dfb4:	0801e233 	.word	0x0801e233
 801dfb8:	20027d10 	.word	0x20027d10

0801dfbc <stdio_exit_handler>:
 801dfbc:	4a02      	ldr	r2, [pc, #8]	@ (801dfc8 <stdio_exit_handler+0xc>)
 801dfbe:	4903      	ldr	r1, [pc, #12]	@ (801dfcc <stdio_exit_handler+0x10>)
 801dfc0:	4803      	ldr	r0, [pc, #12]	@ (801dfd0 <stdio_exit_handler+0x14>)
 801dfc2:	f000 b869 	b.w	801e098 <_fwalk_sglue>
 801dfc6:	bf00      	nop
 801dfc8:	20000030 	.word	0x20000030
 801dfcc:	0801ee29 	.word	0x0801ee29
 801dfd0:	20000040 	.word	0x20000040

0801dfd4 <cleanup_stdio>:
 801dfd4:	6841      	ldr	r1, [r0, #4]
 801dfd6:	4b0c      	ldr	r3, [pc, #48]	@ (801e008 <cleanup_stdio+0x34>)
 801dfd8:	4299      	cmp	r1, r3
 801dfda:	b510      	push	{r4, lr}
 801dfdc:	4604      	mov	r4, r0
 801dfde:	d001      	beq.n	801dfe4 <cleanup_stdio+0x10>
 801dfe0:	f000 ff22 	bl	801ee28 <_fflush_r>
 801dfe4:	68a1      	ldr	r1, [r4, #8]
 801dfe6:	4b09      	ldr	r3, [pc, #36]	@ (801e00c <cleanup_stdio+0x38>)
 801dfe8:	4299      	cmp	r1, r3
 801dfea:	d002      	beq.n	801dff2 <cleanup_stdio+0x1e>
 801dfec:	4620      	mov	r0, r4
 801dfee:	f000 ff1b 	bl	801ee28 <_fflush_r>
 801dff2:	68e1      	ldr	r1, [r4, #12]
 801dff4:	4b06      	ldr	r3, [pc, #24]	@ (801e010 <cleanup_stdio+0x3c>)
 801dff6:	4299      	cmp	r1, r3
 801dff8:	d004      	beq.n	801e004 <cleanup_stdio+0x30>
 801dffa:	4620      	mov	r0, r4
 801dffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e000:	f000 bf12 	b.w	801ee28 <_fflush_r>
 801e004:	bd10      	pop	{r4, pc}
 801e006:	bf00      	nop
 801e008:	20027d10 	.word	0x20027d10
 801e00c:	20027d78 	.word	0x20027d78
 801e010:	20027de0 	.word	0x20027de0

0801e014 <global_stdio_init.part.0>:
 801e014:	b510      	push	{r4, lr}
 801e016:	4b0b      	ldr	r3, [pc, #44]	@ (801e044 <global_stdio_init.part.0+0x30>)
 801e018:	4c0b      	ldr	r4, [pc, #44]	@ (801e048 <global_stdio_init.part.0+0x34>)
 801e01a:	4a0c      	ldr	r2, [pc, #48]	@ (801e04c <global_stdio_init.part.0+0x38>)
 801e01c:	601a      	str	r2, [r3, #0]
 801e01e:	4620      	mov	r0, r4
 801e020:	2200      	movs	r2, #0
 801e022:	2104      	movs	r1, #4
 801e024:	f7ff ff94 	bl	801df50 <std>
 801e028:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e02c:	2201      	movs	r2, #1
 801e02e:	2109      	movs	r1, #9
 801e030:	f7ff ff8e 	bl	801df50 <std>
 801e034:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e038:	2202      	movs	r2, #2
 801e03a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e03e:	2112      	movs	r1, #18
 801e040:	f7ff bf86 	b.w	801df50 <std>
 801e044:	20027e48 	.word	0x20027e48
 801e048:	20027d10 	.word	0x20027d10
 801e04c:	0801dfbd 	.word	0x0801dfbd

0801e050 <__sfp_lock_acquire>:
 801e050:	4801      	ldr	r0, [pc, #4]	@ (801e058 <__sfp_lock_acquire+0x8>)
 801e052:	f000 ba68 	b.w	801e526 <__retarget_lock_acquire_recursive>
 801e056:	bf00      	nop
 801e058:	20027e51 	.word	0x20027e51

0801e05c <__sfp_lock_release>:
 801e05c:	4801      	ldr	r0, [pc, #4]	@ (801e064 <__sfp_lock_release+0x8>)
 801e05e:	f000 ba63 	b.w	801e528 <__retarget_lock_release_recursive>
 801e062:	bf00      	nop
 801e064:	20027e51 	.word	0x20027e51

0801e068 <__sinit>:
 801e068:	b510      	push	{r4, lr}
 801e06a:	4604      	mov	r4, r0
 801e06c:	f7ff fff0 	bl	801e050 <__sfp_lock_acquire>
 801e070:	6a23      	ldr	r3, [r4, #32]
 801e072:	b11b      	cbz	r3, 801e07c <__sinit+0x14>
 801e074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e078:	f7ff bff0 	b.w	801e05c <__sfp_lock_release>
 801e07c:	4b04      	ldr	r3, [pc, #16]	@ (801e090 <__sinit+0x28>)
 801e07e:	6223      	str	r3, [r4, #32]
 801e080:	4b04      	ldr	r3, [pc, #16]	@ (801e094 <__sinit+0x2c>)
 801e082:	681b      	ldr	r3, [r3, #0]
 801e084:	2b00      	cmp	r3, #0
 801e086:	d1f5      	bne.n	801e074 <__sinit+0xc>
 801e088:	f7ff ffc4 	bl	801e014 <global_stdio_init.part.0>
 801e08c:	e7f2      	b.n	801e074 <__sinit+0xc>
 801e08e:	bf00      	nop
 801e090:	0801dfd5 	.word	0x0801dfd5
 801e094:	20027e48 	.word	0x20027e48

0801e098 <_fwalk_sglue>:
 801e098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e09c:	4607      	mov	r7, r0
 801e09e:	4688      	mov	r8, r1
 801e0a0:	4614      	mov	r4, r2
 801e0a2:	2600      	movs	r6, #0
 801e0a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e0a8:	f1b9 0901 	subs.w	r9, r9, #1
 801e0ac:	d505      	bpl.n	801e0ba <_fwalk_sglue+0x22>
 801e0ae:	6824      	ldr	r4, [r4, #0]
 801e0b0:	2c00      	cmp	r4, #0
 801e0b2:	d1f7      	bne.n	801e0a4 <_fwalk_sglue+0xc>
 801e0b4:	4630      	mov	r0, r6
 801e0b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e0ba:	89ab      	ldrh	r3, [r5, #12]
 801e0bc:	2b01      	cmp	r3, #1
 801e0be:	d907      	bls.n	801e0d0 <_fwalk_sglue+0x38>
 801e0c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e0c4:	3301      	adds	r3, #1
 801e0c6:	d003      	beq.n	801e0d0 <_fwalk_sglue+0x38>
 801e0c8:	4629      	mov	r1, r5
 801e0ca:	4638      	mov	r0, r7
 801e0cc:	47c0      	blx	r8
 801e0ce:	4306      	orrs	r6, r0
 801e0d0:	3568      	adds	r5, #104	@ 0x68
 801e0d2:	e7e9      	b.n	801e0a8 <_fwalk_sglue+0x10>

0801e0d4 <iprintf>:
 801e0d4:	b40f      	push	{r0, r1, r2, r3}
 801e0d6:	b507      	push	{r0, r1, r2, lr}
 801e0d8:	4906      	ldr	r1, [pc, #24]	@ (801e0f4 <iprintf+0x20>)
 801e0da:	ab04      	add	r3, sp, #16
 801e0dc:	6808      	ldr	r0, [r1, #0]
 801e0de:	f853 2b04 	ldr.w	r2, [r3], #4
 801e0e2:	6881      	ldr	r1, [r0, #8]
 801e0e4:	9301      	str	r3, [sp, #4]
 801e0e6:	f000 fb77 	bl	801e7d8 <_vfiprintf_r>
 801e0ea:	b003      	add	sp, #12
 801e0ec:	f85d eb04 	ldr.w	lr, [sp], #4
 801e0f0:	b004      	add	sp, #16
 801e0f2:	4770      	bx	lr
 801e0f4:	2000003c 	.word	0x2000003c

0801e0f8 <_puts_r>:
 801e0f8:	6a03      	ldr	r3, [r0, #32]
 801e0fa:	b570      	push	{r4, r5, r6, lr}
 801e0fc:	6884      	ldr	r4, [r0, #8]
 801e0fe:	4605      	mov	r5, r0
 801e100:	460e      	mov	r6, r1
 801e102:	b90b      	cbnz	r3, 801e108 <_puts_r+0x10>
 801e104:	f7ff ffb0 	bl	801e068 <__sinit>
 801e108:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e10a:	07db      	lsls	r3, r3, #31
 801e10c:	d405      	bmi.n	801e11a <_puts_r+0x22>
 801e10e:	89a3      	ldrh	r3, [r4, #12]
 801e110:	0598      	lsls	r0, r3, #22
 801e112:	d402      	bmi.n	801e11a <_puts_r+0x22>
 801e114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e116:	f000 fa06 	bl	801e526 <__retarget_lock_acquire_recursive>
 801e11a:	89a3      	ldrh	r3, [r4, #12]
 801e11c:	0719      	lsls	r1, r3, #28
 801e11e:	d502      	bpl.n	801e126 <_puts_r+0x2e>
 801e120:	6923      	ldr	r3, [r4, #16]
 801e122:	2b00      	cmp	r3, #0
 801e124:	d135      	bne.n	801e192 <_puts_r+0x9a>
 801e126:	4621      	mov	r1, r4
 801e128:	4628      	mov	r0, r5
 801e12a:	f000 f8c5 	bl	801e2b8 <__swsetup_r>
 801e12e:	b380      	cbz	r0, 801e192 <_puts_r+0x9a>
 801e130:	f04f 35ff 	mov.w	r5, #4294967295
 801e134:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e136:	07da      	lsls	r2, r3, #31
 801e138:	d405      	bmi.n	801e146 <_puts_r+0x4e>
 801e13a:	89a3      	ldrh	r3, [r4, #12]
 801e13c:	059b      	lsls	r3, r3, #22
 801e13e:	d402      	bmi.n	801e146 <_puts_r+0x4e>
 801e140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e142:	f000 f9f1 	bl	801e528 <__retarget_lock_release_recursive>
 801e146:	4628      	mov	r0, r5
 801e148:	bd70      	pop	{r4, r5, r6, pc}
 801e14a:	2b00      	cmp	r3, #0
 801e14c:	da04      	bge.n	801e158 <_puts_r+0x60>
 801e14e:	69a2      	ldr	r2, [r4, #24]
 801e150:	429a      	cmp	r2, r3
 801e152:	dc17      	bgt.n	801e184 <_puts_r+0x8c>
 801e154:	290a      	cmp	r1, #10
 801e156:	d015      	beq.n	801e184 <_puts_r+0x8c>
 801e158:	6823      	ldr	r3, [r4, #0]
 801e15a:	1c5a      	adds	r2, r3, #1
 801e15c:	6022      	str	r2, [r4, #0]
 801e15e:	7019      	strb	r1, [r3, #0]
 801e160:	68a3      	ldr	r3, [r4, #8]
 801e162:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801e166:	3b01      	subs	r3, #1
 801e168:	60a3      	str	r3, [r4, #8]
 801e16a:	2900      	cmp	r1, #0
 801e16c:	d1ed      	bne.n	801e14a <_puts_r+0x52>
 801e16e:	2b00      	cmp	r3, #0
 801e170:	da11      	bge.n	801e196 <_puts_r+0x9e>
 801e172:	4622      	mov	r2, r4
 801e174:	210a      	movs	r1, #10
 801e176:	4628      	mov	r0, r5
 801e178:	f000 f85f 	bl	801e23a <__swbuf_r>
 801e17c:	3001      	adds	r0, #1
 801e17e:	d0d7      	beq.n	801e130 <_puts_r+0x38>
 801e180:	250a      	movs	r5, #10
 801e182:	e7d7      	b.n	801e134 <_puts_r+0x3c>
 801e184:	4622      	mov	r2, r4
 801e186:	4628      	mov	r0, r5
 801e188:	f000 f857 	bl	801e23a <__swbuf_r>
 801e18c:	3001      	adds	r0, #1
 801e18e:	d1e7      	bne.n	801e160 <_puts_r+0x68>
 801e190:	e7ce      	b.n	801e130 <_puts_r+0x38>
 801e192:	3e01      	subs	r6, #1
 801e194:	e7e4      	b.n	801e160 <_puts_r+0x68>
 801e196:	6823      	ldr	r3, [r4, #0]
 801e198:	1c5a      	adds	r2, r3, #1
 801e19a:	6022      	str	r2, [r4, #0]
 801e19c:	220a      	movs	r2, #10
 801e19e:	701a      	strb	r2, [r3, #0]
 801e1a0:	e7ee      	b.n	801e180 <_puts_r+0x88>
	...

0801e1a4 <puts>:
 801e1a4:	4b02      	ldr	r3, [pc, #8]	@ (801e1b0 <puts+0xc>)
 801e1a6:	4601      	mov	r1, r0
 801e1a8:	6818      	ldr	r0, [r3, #0]
 801e1aa:	f7ff bfa5 	b.w	801e0f8 <_puts_r>
 801e1ae:	bf00      	nop
 801e1b0:	2000003c 	.word	0x2000003c

0801e1b4 <__sread>:
 801e1b4:	b510      	push	{r4, lr}
 801e1b6:	460c      	mov	r4, r1
 801e1b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e1bc:	f000 f96a 	bl	801e494 <_read_r>
 801e1c0:	2800      	cmp	r0, #0
 801e1c2:	bfab      	itete	ge
 801e1c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801e1c6:	89a3      	ldrhlt	r3, [r4, #12]
 801e1c8:	181b      	addge	r3, r3, r0
 801e1ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801e1ce:	bfac      	ite	ge
 801e1d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801e1d2:	81a3      	strhlt	r3, [r4, #12]
 801e1d4:	bd10      	pop	{r4, pc}

0801e1d6 <__swrite>:
 801e1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1da:	461f      	mov	r7, r3
 801e1dc:	898b      	ldrh	r3, [r1, #12]
 801e1de:	05db      	lsls	r3, r3, #23
 801e1e0:	4605      	mov	r5, r0
 801e1e2:	460c      	mov	r4, r1
 801e1e4:	4616      	mov	r6, r2
 801e1e6:	d505      	bpl.n	801e1f4 <__swrite+0x1e>
 801e1e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e1ec:	2302      	movs	r3, #2
 801e1ee:	2200      	movs	r2, #0
 801e1f0:	f000 f93e 	bl	801e470 <_lseek_r>
 801e1f4:	89a3      	ldrh	r3, [r4, #12]
 801e1f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e1fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801e1fe:	81a3      	strh	r3, [r4, #12]
 801e200:	4632      	mov	r2, r6
 801e202:	463b      	mov	r3, r7
 801e204:	4628      	mov	r0, r5
 801e206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e20a:	f000 b955 	b.w	801e4b8 <_write_r>

0801e20e <__sseek>:
 801e20e:	b510      	push	{r4, lr}
 801e210:	460c      	mov	r4, r1
 801e212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e216:	f000 f92b 	bl	801e470 <_lseek_r>
 801e21a:	1c43      	adds	r3, r0, #1
 801e21c:	89a3      	ldrh	r3, [r4, #12]
 801e21e:	bf15      	itete	ne
 801e220:	6560      	strne	r0, [r4, #84]	@ 0x54
 801e222:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801e226:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801e22a:	81a3      	strheq	r3, [r4, #12]
 801e22c:	bf18      	it	ne
 801e22e:	81a3      	strhne	r3, [r4, #12]
 801e230:	bd10      	pop	{r4, pc}

0801e232 <__sclose>:
 801e232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e236:	f000 b8ad 	b.w	801e394 <_close_r>

0801e23a <__swbuf_r>:
 801e23a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e23c:	460e      	mov	r6, r1
 801e23e:	4614      	mov	r4, r2
 801e240:	4605      	mov	r5, r0
 801e242:	b118      	cbz	r0, 801e24c <__swbuf_r+0x12>
 801e244:	6a03      	ldr	r3, [r0, #32]
 801e246:	b90b      	cbnz	r3, 801e24c <__swbuf_r+0x12>
 801e248:	f7ff ff0e 	bl	801e068 <__sinit>
 801e24c:	69a3      	ldr	r3, [r4, #24]
 801e24e:	60a3      	str	r3, [r4, #8]
 801e250:	89a3      	ldrh	r3, [r4, #12]
 801e252:	071a      	lsls	r2, r3, #28
 801e254:	d501      	bpl.n	801e25a <__swbuf_r+0x20>
 801e256:	6923      	ldr	r3, [r4, #16]
 801e258:	b943      	cbnz	r3, 801e26c <__swbuf_r+0x32>
 801e25a:	4621      	mov	r1, r4
 801e25c:	4628      	mov	r0, r5
 801e25e:	f000 f82b 	bl	801e2b8 <__swsetup_r>
 801e262:	b118      	cbz	r0, 801e26c <__swbuf_r+0x32>
 801e264:	f04f 37ff 	mov.w	r7, #4294967295
 801e268:	4638      	mov	r0, r7
 801e26a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e26c:	6823      	ldr	r3, [r4, #0]
 801e26e:	6922      	ldr	r2, [r4, #16]
 801e270:	1a98      	subs	r0, r3, r2
 801e272:	6963      	ldr	r3, [r4, #20]
 801e274:	b2f6      	uxtb	r6, r6
 801e276:	4283      	cmp	r3, r0
 801e278:	4637      	mov	r7, r6
 801e27a:	dc05      	bgt.n	801e288 <__swbuf_r+0x4e>
 801e27c:	4621      	mov	r1, r4
 801e27e:	4628      	mov	r0, r5
 801e280:	f000 fdd2 	bl	801ee28 <_fflush_r>
 801e284:	2800      	cmp	r0, #0
 801e286:	d1ed      	bne.n	801e264 <__swbuf_r+0x2a>
 801e288:	68a3      	ldr	r3, [r4, #8]
 801e28a:	3b01      	subs	r3, #1
 801e28c:	60a3      	str	r3, [r4, #8]
 801e28e:	6823      	ldr	r3, [r4, #0]
 801e290:	1c5a      	adds	r2, r3, #1
 801e292:	6022      	str	r2, [r4, #0]
 801e294:	701e      	strb	r6, [r3, #0]
 801e296:	6962      	ldr	r2, [r4, #20]
 801e298:	1c43      	adds	r3, r0, #1
 801e29a:	429a      	cmp	r2, r3
 801e29c:	d004      	beq.n	801e2a8 <__swbuf_r+0x6e>
 801e29e:	89a3      	ldrh	r3, [r4, #12]
 801e2a0:	07db      	lsls	r3, r3, #31
 801e2a2:	d5e1      	bpl.n	801e268 <__swbuf_r+0x2e>
 801e2a4:	2e0a      	cmp	r6, #10
 801e2a6:	d1df      	bne.n	801e268 <__swbuf_r+0x2e>
 801e2a8:	4621      	mov	r1, r4
 801e2aa:	4628      	mov	r0, r5
 801e2ac:	f000 fdbc 	bl	801ee28 <_fflush_r>
 801e2b0:	2800      	cmp	r0, #0
 801e2b2:	d0d9      	beq.n	801e268 <__swbuf_r+0x2e>
 801e2b4:	e7d6      	b.n	801e264 <__swbuf_r+0x2a>
	...

0801e2b8 <__swsetup_r>:
 801e2b8:	b538      	push	{r3, r4, r5, lr}
 801e2ba:	4b29      	ldr	r3, [pc, #164]	@ (801e360 <__swsetup_r+0xa8>)
 801e2bc:	4605      	mov	r5, r0
 801e2be:	6818      	ldr	r0, [r3, #0]
 801e2c0:	460c      	mov	r4, r1
 801e2c2:	b118      	cbz	r0, 801e2cc <__swsetup_r+0x14>
 801e2c4:	6a03      	ldr	r3, [r0, #32]
 801e2c6:	b90b      	cbnz	r3, 801e2cc <__swsetup_r+0x14>
 801e2c8:	f7ff fece 	bl	801e068 <__sinit>
 801e2cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e2d0:	0719      	lsls	r1, r3, #28
 801e2d2:	d422      	bmi.n	801e31a <__swsetup_r+0x62>
 801e2d4:	06da      	lsls	r2, r3, #27
 801e2d6:	d407      	bmi.n	801e2e8 <__swsetup_r+0x30>
 801e2d8:	2209      	movs	r2, #9
 801e2da:	602a      	str	r2, [r5, #0]
 801e2dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e2e0:	81a3      	strh	r3, [r4, #12]
 801e2e2:	f04f 30ff 	mov.w	r0, #4294967295
 801e2e6:	e033      	b.n	801e350 <__swsetup_r+0x98>
 801e2e8:	0758      	lsls	r0, r3, #29
 801e2ea:	d512      	bpl.n	801e312 <__swsetup_r+0x5a>
 801e2ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e2ee:	b141      	cbz	r1, 801e302 <__swsetup_r+0x4a>
 801e2f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e2f4:	4299      	cmp	r1, r3
 801e2f6:	d002      	beq.n	801e2fe <__swsetup_r+0x46>
 801e2f8:	4628      	mov	r0, r5
 801e2fa:	f000 f943 	bl	801e584 <_free_r>
 801e2fe:	2300      	movs	r3, #0
 801e300:	6363      	str	r3, [r4, #52]	@ 0x34
 801e302:	89a3      	ldrh	r3, [r4, #12]
 801e304:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e308:	81a3      	strh	r3, [r4, #12]
 801e30a:	2300      	movs	r3, #0
 801e30c:	6063      	str	r3, [r4, #4]
 801e30e:	6923      	ldr	r3, [r4, #16]
 801e310:	6023      	str	r3, [r4, #0]
 801e312:	89a3      	ldrh	r3, [r4, #12]
 801e314:	f043 0308 	orr.w	r3, r3, #8
 801e318:	81a3      	strh	r3, [r4, #12]
 801e31a:	6923      	ldr	r3, [r4, #16]
 801e31c:	b94b      	cbnz	r3, 801e332 <__swsetup_r+0x7a>
 801e31e:	89a3      	ldrh	r3, [r4, #12]
 801e320:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e328:	d003      	beq.n	801e332 <__swsetup_r+0x7a>
 801e32a:	4621      	mov	r1, r4
 801e32c:	4628      	mov	r0, r5
 801e32e:	f000 fddb 	bl	801eee8 <__smakebuf_r>
 801e332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e336:	f013 0201 	ands.w	r2, r3, #1
 801e33a:	d00a      	beq.n	801e352 <__swsetup_r+0x9a>
 801e33c:	2200      	movs	r2, #0
 801e33e:	60a2      	str	r2, [r4, #8]
 801e340:	6962      	ldr	r2, [r4, #20]
 801e342:	4252      	negs	r2, r2
 801e344:	61a2      	str	r2, [r4, #24]
 801e346:	6922      	ldr	r2, [r4, #16]
 801e348:	b942      	cbnz	r2, 801e35c <__swsetup_r+0xa4>
 801e34a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e34e:	d1c5      	bne.n	801e2dc <__swsetup_r+0x24>
 801e350:	bd38      	pop	{r3, r4, r5, pc}
 801e352:	0799      	lsls	r1, r3, #30
 801e354:	bf58      	it	pl
 801e356:	6962      	ldrpl	r2, [r4, #20]
 801e358:	60a2      	str	r2, [r4, #8]
 801e35a:	e7f4      	b.n	801e346 <__swsetup_r+0x8e>
 801e35c:	2000      	movs	r0, #0
 801e35e:	e7f7      	b.n	801e350 <__swsetup_r+0x98>
 801e360:	2000003c 	.word	0x2000003c

0801e364 <memcmp>:
 801e364:	b510      	push	{r4, lr}
 801e366:	3901      	subs	r1, #1
 801e368:	4402      	add	r2, r0
 801e36a:	4290      	cmp	r0, r2
 801e36c:	d101      	bne.n	801e372 <memcmp+0xe>
 801e36e:	2000      	movs	r0, #0
 801e370:	e005      	b.n	801e37e <memcmp+0x1a>
 801e372:	7803      	ldrb	r3, [r0, #0]
 801e374:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e378:	42a3      	cmp	r3, r4
 801e37a:	d001      	beq.n	801e380 <memcmp+0x1c>
 801e37c:	1b18      	subs	r0, r3, r4
 801e37e:	bd10      	pop	{r4, pc}
 801e380:	3001      	adds	r0, #1
 801e382:	e7f2      	b.n	801e36a <memcmp+0x6>

0801e384 <memset>:
 801e384:	4402      	add	r2, r0
 801e386:	4603      	mov	r3, r0
 801e388:	4293      	cmp	r3, r2
 801e38a:	d100      	bne.n	801e38e <memset+0xa>
 801e38c:	4770      	bx	lr
 801e38e:	f803 1b01 	strb.w	r1, [r3], #1
 801e392:	e7f9      	b.n	801e388 <memset+0x4>

0801e394 <_close_r>:
 801e394:	b538      	push	{r3, r4, r5, lr}
 801e396:	4d06      	ldr	r5, [pc, #24]	@ (801e3b0 <_close_r+0x1c>)
 801e398:	2300      	movs	r3, #0
 801e39a:	4604      	mov	r4, r0
 801e39c:	4608      	mov	r0, r1
 801e39e:	602b      	str	r3, [r5, #0]
 801e3a0:	f7e4 f872 	bl	8002488 <_close>
 801e3a4:	1c43      	adds	r3, r0, #1
 801e3a6:	d102      	bne.n	801e3ae <_close_r+0x1a>
 801e3a8:	682b      	ldr	r3, [r5, #0]
 801e3aa:	b103      	cbz	r3, 801e3ae <_close_r+0x1a>
 801e3ac:	6023      	str	r3, [r4, #0]
 801e3ae:	bd38      	pop	{r3, r4, r5, pc}
 801e3b0:	20027e4c 	.word	0x20027e4c

0801e3b4 <_reclaim_reent>:
 801e3b4:	4b2d      	ldr	r3, [pc, #180]	@ (801e46c <_reclaim_reent+0xb8>)
 801e3b6:	681b      	ldr	r3, [r3, #0]
 801e3b8:	4283      	cmp	r3, r0
 801e3ba:	b570      	push	{r4, r5, r6, lr}
 801e3bc:	4604      	mov	r4, r0
 801e3be:	d053      	beq.n	801e468 <_reclaim_reent+0xb4>
 801e3c0:	69c3      	ldr	r3, [r0, #28]
 801e3c2:	b31b      	cbz	r3, 801e40c <_reclaim_reent+0x58>
 801e3c4:	68db      	ldr	r3, [r3, #12]
 801e3c6:	b163      	cbz	r3, 801e3e2 <_reclaim_reent+0x2e>
 801e3c8:	2500      	movs	r5, #0
 801e3ca:	69e3      	ldr	r3, [r4, #28]
 801e3cc:	68db      	ldr	r3, [r3, #12]
 801e3ce:	5959      	ldr	r1, [r3, r5]
 801e3d0:	b9b1      	cbnz	r1, 801e400 <_reclaim_reent+0x4c>
 801e3d2:	3504      	adds	r5, #4
 801e3d4:	2d80      	cmp	r5, #128	@ 0x80
 801e3d6:	d1f8      	bne.n	801e3ca <_reclaim_reent+0x16>
 801e3d8:	69e3      	ldr	r3, [r4, #28]
 801e3da:	4620      	mov	r0, r4
 801e3dc:	68d9      	ldr	r1, [r3, #12]
 801e3de:	f000 f8d1 	bl	801e584 <_free_r>
 801e3e2:	69e3      	ldr	r3, [r4, #28]
 801e3e4:	6819      	ldr	r1, [r3, #0]
 801e3e6:	b111      	cbz	r1, 801e3ee <_reclaim_reent+0x3a>
 801e3e8:	4620      	mov	r0, r4
 801e3ea:	f000 f8cb 	bl	801e584 <_free_r>
 801e3ee:	69e3      	ldr	r3, [r4, #28]
 801e3f0:	689d      	ldr	r5, [r3, #8]
 801e3f2:	b15d      	cbz	r5, 801e40c <_reclaim_reent+0x58>
 801e3f4:	4629      	mov	r1, r5
 801e3f6:	4620      	mov	r0, r4
 801e3f8:	682d      	ldr	r5, [r5, #0]
 801e3fa:	f000 f8c3 	bl	801e584 <_free_r>
 801e3fe:	e7f8      	b.n	801e3f2 <_reclaim_reent+0x3e>
 801e400:	680e      	ldr	r6, [r1, #0]
 801e402:	4620      	mov	r0, r4
 801e404:	f000 f8be 	bl	801e584 <_free_r>
 801e408:	4631      	mov	r1, r6
 801e40a:	e7e1      	b.n	801e3d0 <_reclaim_reent+0x1c>
 801e40c:	6961      	ldr	r1, [r4, #20]
 801e40e:	b111      	cbz	r1, 801e416 <_reclaim_reent+0x62>
 801e410:	4620      	mov	r0, r4
 801e412:	f000 f8b7 	bl	801e584 <_free_r>
 801e416:	69e1      	ldr	r1, [r4, #28]
 801e418:	b111      	cbz	r1, 801e420 <_reclaim_reent+0x6c>
 801e41a:	4620      	mov	r0, r4
 801e41c:	f000 f8b2 	bl	801e584 <_free_r>
 801e420:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801e422:	b111      	cbz	r1, 801e42a <_reclaim_reent+0x76>
 801e424:	4620      	mov	r0, r4
 801e426:	f000 f8ad 	bl	801e584 <_free_r>
 801e42a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e42c:	b111      	cbz	r1, 801e434 <_reclaim_reent+0x80>
 801e42e:	4620      	mov	r0, r4
 801e430:	f000 f8a8 	bl	801e584 <_free_r>
 801e434:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801e436:	b111      	cbz	r1, 801e43e <_reclaim_reent+0x8a>
 801e438:	4620      	mov	r0, r4
 801e43a:	f000 f8a3 	bl	801e584 <_free_r>
 801e43e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801e440:	b111      	cbz	r1, 801e448 <_reclaim_reent+0x94>
 801e442:	4620      	mov	r0, r4
 801e444:	f000 f89e 	bl	801e584 <_free_r>
 801e448:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801e44a:	b111      	cbz	r1, 801e452 <_reclaim_reent+0x9e>
 801e44c:	4620      	mov	r0, r4
 801e44e:	f000 f899 	bl	801e584 <_free_r>
 801e452:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801e454:	b111      	cbz	r1, 801e45c <_reclaim_reent+0xa8>
 801e456:	4620      	mov	r0, r4
 801e458:	f000 f894 	bl	801e584 <_free_r>
 801e45c:	6a23      	ldr	r3, [r4, #32]
 801e45e:	b11b      	cbz	r3, 801e468 <_reclaim_reent+0xb4>
 801e460:	4620      	mov	r0, r4
 801e462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e466:	4718      	bx	r3
 801e468:	bd70      	pop	{r4, r5, r6, pc}
 801e46a:	bf00      	nop
 801e46c:	2000003c 	.word	0x2000003c

0801e470 <_lseek_r>:
 801e470:	b538      	push	{r3, r4, r5, lr}
 801e472:	4d07      	ldr	r5, [pc, #28]	@ (801e490 <_lseek_r+0x20>)
 801e474:	4604      	mov	r4, r0
 801e476:	4608      	mov	r0, r1
 801e478:	4611      	mov	r1, r2
 801e47a:	2200      	movs	r2, #0
 801e47c:	602a      	str	r2, [r5, #0]
 801e47e:	461a      	mov	r2, r3
 801e480:	f7e4 f829 	bl	80024d6 <_lseek>
 801e484:	1c43      	adds	r3, r0, #1
 801e486:	d102      	bne.n	801e48e <_lseek_r+0x1e>
 801e488:	682b      	ldr	r3, [r5, #0]
 801e48a:	b103      	cbz	r3, 801e48e <_lseek_r+0x1e>
 801e48c:	6023      	str	r3, [r4, #0]
 801e48e:	bd38      	pop	{r3, r4, r5, pc}
 801e490:	20027e4c 	.word	0x20027e4c

0801e494 <_read_r>:
 801e494:	b538      	push	{r3, r4, r5, lr}
 801e496:	4d07      	ldr	r5, [pc, #28]	@ (801e4b4 <_read_r+0x20>)
 801e498:	4604      	mov	r4, r0
 801e49a:	4608      	mov	r0, r1
 801e49c:	4611      	mov	r1, r2
 801e49e:	2200      	movs	r2, #0
 801e4a0:	602a      	str	r2, [r5, #0]
 801e4a2:	461a      	mov	r2, r3
 801e4a4:	f7e3 ffb7 	bl	8002416 <_read>
 801e4a8:	1c43      	adds	r3, r0, #1
 801e4aa:	d102      	bne.n	801e4b2 <_read_r+0x1e>
 801e4ac:	682b      	ldr	r3, [r5, #0]
 801e4ae:	b103      	cbz	r3, 801e4b2 <_read_r+0x1e>
 801e4b0:	6023      	str	r3, [r4, #0]
 801e4b2:	bd38      	pop	{r3, r4, r5, pc}
 801e4b4:	20027e4c 	.word	0x20027e4c

0801e4b8 <_write_r>:
 801e4b8:	b538      	push	{r3, r4, r5, lr}
 801e4ba:	4d07      	ldr	r5, [pc, #28]	@ (801e4d8 <_write_r+0x20>)
 801e4bc:	4604      	mov	r4, r0
 801e4be:	4608      	mov	r0, r1
 801e4c0:	4611      	mov	r1, r2
 801e4c2:	2200      	movs	r2, #0
 801e4c4:	602a      	str	r2, [r5, #0]
 801e4c6:	461a      	mov	r2, r3
 801e4c8:	f7e3 ffc2 	bl	8002450 <_write>
 801e4cc:	1c43      	adds	r3, r0, #1
 801e4ce:	d102      	bne.n	801e4d6 <_write_r+0x1e>
 801e4d0:	682b      	ldr	r3, [r5, #0]
 801e4d2:	b103      	cbz	r3, 801e4d6 <_write_r+0x1e>
 801e4d4:	6023      	str	r3, [r4, #0]
 801e4d6:	bd38      	pop	{r3, r4, r5, pc}
 801e4d8:	20027e4c 	.word	0x20027e4c

0801e4dc <__libc_init_array>:
 801e4dc:	b570      	push	{r4, r5, r6, lr}
 801e4de:	4d0d      	ldr	r5, [pc, #52]	@ (801e514 <__libc_init_array+0x38>)
 801e4e0:	4c0d      	ldr	r4, [pc, #52]	@ (801e518 <__libc_init_array+0x3c>)
 801e4e2:	1b64      	subs	r4, r4, r5
 801e4e4:	10a4      	asrs	r4, r4, #2
 801e4e6:	2600      	movs	r6, #0
 801e4e8:	42a6      	cmp	r6, r4
 801e4ea:	d109      	bne.n	801e500 <__libc_init_array+0x24>
 801e4ec:	4d0b      	ldr	r5, [pc, #44]	@ (801e51c <__libc_init_array+0x40>)
 801e4ee:	4c0c      	ldr	r4, [pc, #48]	@ (801e520 <__libc_init_array+0x44>)
 801e4f0:	f000 fdb4 	bl	801f05c <_init>
 801e4f4:	1b64      	subs	r4, r4, r5
 801e4f6:	10a4      	asrs	r4, r4, #2
 801e4f8:	2600      	movs	r6, #0
 801e4fa:	42a6      	cmp	r6, r4
 801e4fc:	d105      	bne.n	801e50a <__libc_init_array+0x2e>
 801e4fe:	bd70      	pop	{r4, r5, r6, pc}
 801e500:	f855 3b04 	ldr.w	r3, [r5], #4
 801e504:	4798      	blx	r3
 801e506:	3601      	adds	r6, #1
 801e508:	e7ee      	b.n	801e4e8 <__libc_init_array+0xc>
 801e50a:	f855 3b04 	ldr.w	r3, [r5], #4
 801e50e:	4798      	blx	r3
 801e510:	3601      	adds	r6, #1
 801e512:	e7f2      	b.n	801e4fa <__libc_init_array+0x1e>
 801e514:	08022428 	.word	0x08022428
 801e518:	08022428 	.word	0x08022428
 801e51c:	08022428 	.word	0x08022428
 801e520:	0802242c 	.word	0x0802242c

0801e524 <__retarget_lock_init_recursive>:
 801e524:	4770      	bx	lr

0801e526 <__retarget_lock_acquire_recursive>:
 801e526:	4770      	bx	lr

0801e528 <__retarget_lock_release_recursive>:
 801e528:	4770      	bx	lr

0801e52a <memcpy>:
 801e52a:	440a      	add	r2, r1
 801e52c:	4291      	cmp	r1, r2
 801e52e:	f100 33ff 	add.w	r3, r0, #4294967295
 801e532:	d100      	bne.n	801e536 <memcpy+0xc>
 801e534:	4770      	bx	lr
 801e536:	b510      	push	{r4, lr}
 801e538:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e53c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e540:	4291      	cmp	r1, r2
 801e542:	d1f9      	bne.n	801e538 <memcpy+0xe>
 801e544:	bd10      	pop	{r4, pc}
	...

0801e548 <__assert_func>:
 801e548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e54a:	4614      	mov	r4, r2
 801e54c:	461a      	mov	r2, r3
 801e54e:	4b09      	ldr	r3, [pc, #36]	@ (801e574 <__assert_func+0x2c>)
 801e550:	681b      	ldr	r3, [r3, #0]
 801e552:	4605      	mov	r5, r0
 801e554:	68d8      	ldr	r0, [r3, #12]
 801e556:	b14c      	cbz	r4, 801e56c <__assert_func+0x24>
 801e558:	4b07      	ldr	r3, [pc, #28]	@ (801e578 <__assert_func+0x30>)
 801e55a:	9100      	str	r1, [sp, #0]
 801e55c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e560:	4906      	ldr	r1, [pc, #24]	@ (801e57c <__assert_func+0x34>)
 801e562:	462b      	mov	r3, r5
 801e564:	f000 fc88 	bl	801ee78 <fiprintf>
 801e568:	f000 fd2c 	bl	801efc4 <abort>
 801e56c:	4b04      	ldr	r3, [pc, #16]	@ (801e580 <__assert_func+0x38>)
 801e56e:	461c      	mov	r4, r3
 801e570:	e7f3      	b.n	801e55a <__assert_func+0x12>
 801e572:	bf00      	nop
 801e574:	2000003c 	.word	0x2000003c
 801e578:	080223b1 	.word	0x080223b1
 801e57c:	080223be 	.word	0x080223be
 801e580:	080223ec 	.word	0x080223ec

0801e584 <_free_r>:
 801e584:	b538      	push	{r3, r4, r5, lr}
 801e586:	4605      	mov	r5, r0
 801e588:	2900      	cmp	r1, #0
 801e58a:	d041      	beq.n	801e610 <_free_r+0x8c>
 801e58c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e590:	1f0c      	subs	r4, r1, #4
 801e592:	2b00      	cmp	r3, #0
 801e594:	bfb8      	it	lt
 801e596:	18e4      	addlt	r4, r4, r3
 801e598:	f000 f8e8 	bl	801e76c <__malloc_lock>
 801e59c:	4a1d      	ldr	r2, [pc, #116]	@ (801e614 <_free_r+0x90>)
 801e59e:	6813      	ldr	r3, [r2, #0]
 801e5a0:	b933      	cbnz	r3, 801e5b0 <_free_r+0x2c>
 801e5a2:	6063      	str	r3, [r4, #4]
 801e5a4:	6014      	str	r4, [r2, #0]
 801e5a6:	4628      	mov	r0, r5
 801e5a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e5ac:	f000 b8e4 	b.w	801e778 <__malloc_unlock>
 801e5b0:	42a3      	cmp	r3, r4
 801e5b2:	d908      	bls.n	801e5c6 <_free_r+0x42>
 801e5b4:	6820      	ldr	r0, [r4, #0]
 801e5b6:	1821      	adds	r1, r4, r0
 801e5b8:	428b      	cmp	r3, r1
 801e5ba:	bf01      	itttt	eq
 801e5bc:	6819      	ldreq	r1, [r3, #0]
 801e5be:	685b      	ldreq	r3, [r3, #4]
 801e5c0:	1809      	addeq	r1, r1, r0
 801e5c2:	6021      	streq	r1, [r4, #0]
 801e5c4:	e7ed      	b.n	801e5a2 <_free_r+0x1e>
 801e5c6:	461a      	mov	r2, r3
 801e5c8:	685b      	ldr	r3, [r3, #4]
 801e5ca:	b10b      	cbz	r3, 801e5d0 <_free_r+0x4c>
 801e5cc:	42a3      	cmp	r3, r4
 801e5ce:	d9fa      	bls.n	801e5c6 <_free_r+0x42>
 801e5d0:	6811      	ldr	r1, [r2, #0]
 801e5d2:	1850      	adds	r0, r2, r1
 801e5d4:	42a0      	cmp	r0, r4
 801e5d6:	d10b      	bne.n	801e5f0 <_free_r+0x6c>
 801e5d8:	6820      	ldr	r0, [r4, #0]
 801e5da:	4401      	add	r1, r0
 801e5dc:	1850      	adds	r0, r2, r1
 801e5de:	4283      	cmp	r3, r0
 801e5e0:	6011      	str	r1, [r2, #0]
 801e5e2:	d1e0      	bne.n	801e5a6 <_free_r+0x22>
 801e5e4:	6818      	ldr	r0, [r3, #0]
 801e5e6:	685b      	ldr	r3, [r3, #4]
 801e5e8:	6053      	str	r3, [r2, #4]
 801e5ea:	4408      	add	r0, r1
 801e5ec:	6010      	str	r0, [r2, #0]
 801e5ee:	e7da      	b.n	801e5a6 <_free_r+0x22>
 801e5f0:	d902      	bls.n	801e5f8 <_free_r+0x74>
 801e5f2:	230c      	movs	r3, #12
 801e5f4:	602b      	str	r3, [r5, #0]
 801e5f6:	e7d6      	b.n	801e5a6 <_free_r+0x22>
 801e5f8:	6820      	ldr	r0, [r4, #0]
 801e5fa:	1821      	adds	r1, r4, r0
 801e5fc:	428b      	cmp	r3, r1
 801e5fe:	bf04      	itt	eq
 801e600:	6819      	ldreq	r1, [r3, #0]
 801e602:	685b      	ldreq	r3, [r3, #4]
 801e604:	6063      	str	r3, [r4, #4]
 801e606:	bf04      	itt	eq
 801e608:	1809      	addeq	r1, r1, r0
 801e60a:	6021      	streq	r1, [r4, #0]
 801e60c:	6054      	str	r4, [r2, #4]
 801e60e:	e7ca      	b.n	801e5a6 <_free_r+0x22>
 801e610:	bd38      	pop	{r3, r4, r5, pc}
 801e612:	bf00      	nop
 801e614:	20027e58 	.word	0x20027e58

0801e618 <malloc>:
 801e618:	4b02      	ldr	r3, [pc, #8]	@ (801e624 <malloc+0xc>)
 801e61a:	4601      	mov	r1, r0
 801e61c:	6818      	ldr	r0, [r3, #0]
 801e61e:	f000 b825 	b.w	801e66c <_malloc_r>
 801e622:	bf00      	nop
 801e624:	2000003c 	.word	0x2000003c

0801e628 <sbrk_aligned>:
 801e628:	b570      	push	{r4, r5, r6, lr}
 801e62a:	4e0f      	ldr	r6, [pc, #60]	@ (801e668 <sbrk_aligned+0x40>)
 801e62c:	460c      	mov	r4, r1
 801e62e:	6831      	ldr	r1, [r6, #0]
 801e630:	4605      	mov	r5, r0
 801e632:	b911      	cbnz	r1, 801e63a <sbrk_aligned+0x12>
 801e634:	f000 fcb6 	bl	801efa4 <_sbrk_r>
 801e638:	6030      	str	r0, [r6, #0]
 801e63a:	4621      	mov	r1, r4
 801e63c:	4628      	mov	r0, r5
 801e63e:	f000 fcb1 	bl	801efa4 <_sbrk_r>
 801e642:	1c43      	adds	r3, r0, #1
 801e644:	d103      	bne.n	801e64e <sbrk_aligned+0x26>
 801e646:	f04f 34ff 	mov.w	r4, #4294967295
 801e64a:	4620      	mov	r0, r4
 801e64c:	bd70      	pop	{r4, r5, r6, pc}
 801e64e:	1cc4      	adds	r4, r0, #3
 801e650:	f024 0403 	bic.w	r4, r4, #3
 801e654:	42a0      	cmp	r0, r4
 801e656:	d0f8      	beq.n	801e64a <sbrk_aligned+0x22>
 801e658:	1a21      	subs	r1, r4, r0
 801e65a:	4628      	mov	r0, r5
 801e65c:	f000 fca2 	bl	801efa4 <_sbrk_r>
 801e660:	3001      	adds	r0, #1
 801e662:	d1f2      	bne.n	801e64a <sbrk_aligned+0x22>
 801e664:	e7ef      	b.n	801e646 <sbrk_aligned+0x1e>
 801e666:	bf00      	nop
 801e668:	20027e54 	.word	0x20027e54

0801e66c <_malloc_r>:
 801e66c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e670:	1ccd      	adds	r5, r1, #3
 801e672:	f025 0503 	bic.w	r5, r5, #3
 801e676:	3508      	adds	r5, #8
 801e678:	2d0c      	cmp	r5, #12
 801e67a:	bf38      	it	cc
 801e67c:	250c      	movcc	r5, #12
 801e67e:	2d00      	cmp	r5, #0
 801e680:	4606      	mov	r6, r0
 801e682:	db01      	blt.n	801e688 <_malloc_r+0x1c>
 801e684:	42a9      	cmp	r1, r5
 801e686:	d904      	bls.n	801e692 <_malloc_r+0x26>
 801e688:	230c      	movs	r3, #12
 801e68a:	6033      	str	r3, [r6, #0]
 801e68c:	2000      	movs	r0, #0
 801e68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e692:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801e768 <_malloc_r+0xfc>
 801e696:	f000 f869 	bl	801e76c <__malloc_lock>
 801e69a:	f8d8 3000 	ldr.w	r3, [r8]
 801e69e:	461c      	mov	r4, r3
 801e6a0:	bb44      	cbnz	r4, 801e6f4 <_malloc_r+0x88>
 801e6a2:	4629      	mov	r1, r5
 801e6a4:	4630      	mov	r0, r6
 801e6a6:	f7ff ffbf 	bl	801e628 <sbrk_aligned>
 801e6aa:	1c43      	adds	r3, r0, #1
 801e6ac:	4604      	mov	r4, r0
 801e6ae:	d158      	bne.n	801e762 <_malloc_r+0xf6>
 801e6b0:	f8d8 4000 	ldr.w	r4, [r8]
 801e6b4:	4627      	mov	r7, r4
 801e6b6:	2f00      	cmp	r7, #0
 801e6b8:	d143      	bne.n	801e742 <_malloc_r+0xd6>
 801e6ba:	2c00      	cmp	r4, #0
 801e6bc:	d04b      	beq.n	801e756 <_malloc_r+0xea>
 801e6be:	6823      	ldr	r3, [r4, #0]
 801e6c0:	4639      	mov	r1, r7
 801e6c2:	4630      	mov	r0, r6
 801e6c4:	eb04 0903 	add.w	r9, r4, r3
 801e6c8:	f000 fc6c 	bl	801efa4 <_sbrk_r>
 801e6cc:	4581      	cmp	r9, r0
 801e6ce:	d142      	bne.n	801e756 <_malloc_r+0xea>
 801e6d0:	6821      	ldr	r1, [r4, #0]
 801e6d2:	1a6d      	subs	r5, r5, r1
 801e6d4:	4629      	mov	r1, r5
 801e6d6:	4630      	mov	r0, r6
 801e6d8:	f7ff ffa6 	bl	801e628 <sbrk_aligned>
 801e6dc:	3001      	adds	r0, #1
 801e6de:	d03a      	beq.n	801e756 <_malloc_r+0xea>
 801e6e0:	6823      	ldr	r3, [r4, #0]
 801e6e2:	442b      	add	r3, r5
 801e6e4:	6023      	str	r3, [r4, #0]
 801e6e6:	f8d8 3000 	ldr.w	r3, [r8]
 801e6ea:	685a      	ldr	r2, [r3, #4]
 801e6ec:	bb62      	cbnz	r2, 801e748 <_malloc_r+0xdc>
 801e6ee:	f8c8 7000 	str.w	r7, [r8]
 801e6f2:	e00f      	b.n	801e714 <_malloc_r+0xa8>
 801e6f4:	6822      	ldr	r2, [r4, #0]
 801e6f6:	1b52      	subs	r2, r2, r5
 801e6f8:	d420      	bmi.n	801e73c <_malloc_r+0xd0>
 801e6fa:	2a0b      	cmp	r2, #11
 801e6fc:	d917      	bls.n	801e72e <_malloc_r+0xc2>
 801e6fe:	1961      	adds	r1, r4, r5
 801e700:	42a3      	cmp	r3, r4
 801e702:	6025      	str	r5, [r4, #0]
 801e704:	bf18      	it	ne
 801e706:	6059      	strne	r1, [r3, #4]
 801e708:	6863      	ldr	r3, [r4, #4]
 801e70a:	bf08      	it	eq
 801e70c:	f8c8 1000 	streq.w	r1, [r8]
 801e710:	5162      	str	r2, [r4, r5]
 801e712:	604b      	str	r3, [r1, #4]
 801e714:	4630      	mov	r0, r6
 801e716:	f000 f82f 	bl	801e778 <__malloc_unlock>
 801e71a:	f104 000b 	add.w	r0, r4, #11
 801e71e:	1d23      	adds	r3, r4, #4
 801e720:	f020 0007 	bic.w	r0, r0, #7
 801e724:	1ac2      	subs	r2, r0, r3
 801e726:	bf1c      	itt	ne
 801e728:	1a1b      	subne	r3, r3, r0
 801e72a:	50a3      	strne	r3, [r4, r2]
 801e72c:	e7af      	b.n	801e68e <_malloc_r+0x22>
 801e72e:	6862      	ldr	r2, [r4, #4]
 801e730:	42a3      	cmp	r3, r4
 801e732:	bf0c      	ite	eq
 801e734:	f8c8 2000 	streq.w	r2, [r8]
 801e738:	605a      	strne	r2, [r3, #4]
 801e73a:	e7eb      	b.n	801e714 <_malloc_r+0xa8>
 801e73c:	4623      	mov	r3, r4
 801e73e:	6864      	ldr	r4, [r4, #4]
 801e740:	e7ae      	b.n	801e6a0 <_malloc_r+0x34>
 801e742:	463c      	mov	r4, r7
 801e744:	687f      	ldr	r7, [r7, #4]
 801e746:	e7b6      	b.n	801e6b6 <_malloc_r+0x4a>
 801e748:	461a      	mov	r2, r3
 801e74a:	685b      	ldr	r3, [r3, #4]
 801e74c:	42a3      	cmp	r3, r4
 801e74e:	d1fb      	bne.n	801e748 <_malloc_r+0xdc>
 801e750:	2300      	movs	r3, #0
 801e752:	6053      	str	r3, [r2, #4]
 801e754:	e7de      	b.n	801e714 <_malloc_r+0xa8>
 801e756:	230c      	movs	r3, #12
 801e758:	6033      	str	r3, [r6, #0]
 801e75a:	4630      	mov	r0, r6
 801e75c:	f000 f80c 	bl	801e778 <__malloc_unlock>
 801e760:	e794      	b.n	801e68c <_malloc_r+0x20>
 801e762:	6005      	str	r5, [r0, #0]
 801e764:	e7d6      	b.n	801e714 <_malloc_r+0xa8>
 801e766:	bf00      	nop
 801e768:	20027e58 	.word	0x20027e58

0801e76c <__malloc_lock>:
 801e76c:	4801      	ldr	r0, [pc, #4]	@ (801e774 <__malloc_lock+0x8>)
 801e76e:	f7ff beda 	b.w	801e526 <__retarget_lock_acquire_recursive>
 801e772:	bf00      	nop
 801e774:	20027e50 	.word	0x20027e50

0801e778 <__malloc_unlock>:
 801e778:	4801      	ldr	r0, [pc, #4]	@ (801e780 <__malloc_unlock+0x8>)
 801e77a:	f7ff bed5 	b.w	801e528 <__retarget_lock_release_recursive>
 801e77e:	bf00      	nop
 801e780:	20027e50 	.word	0x20027e50

0801e784 <__sfputc_r>:
 801e784:	6893      	ldr	r3, [r2, #8]
 801e786:	3b01      	subs	r3, #1
 801e788:	2b00      	cmp	r3, #0
 801e78a:	b410      	push	{r4}
 801e78c:	6093      	str	r3, [r2, #8]
 801e78e:	da08      	bge.n	801e7a2 <__sfputc_r+0x1e>
 801e790:	6994      	ldr	r4, [r2, #24]
 801e792:	42a3      	cmp	r3, r4
 801e794:	db01      	blt.n	801e79a <__sfputc_r+0x16>
 801e796:	290a      	cmp	r1, #10
 801e798:	d103      	bne.n	801e7a2 <__sfputc_r+0x1e>
 801e79a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e79e:	f7ff bd4c 	b.w	801e23a <__swbuf_r>
 801e7a2:	6813      	ldr	r3, [r2, #0]
 801e7a4:	1c58      	adds	r0, r3, #1
 801e7a6:	6010      	str	r0, [r2, #0]
 801e7a8:	7019      	strb	r1, [r3, #0]
 801e7aa:	4608      	mov	r0, r1
 801e7ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e7b0:	4770      	bx	lr

0801e7b2 <__sfputs_r>:
 801e7b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7b4:	4606      	mov	r6, r0
 801e7b6:	460f      	mov	r7, r1
 801e7b8:	4614      	mov	r4, r2
 801e7ba:	18d5      	adds	r5, r2, r3
 801e7bc:	42ac      	cmp	r4, r5
 801e7be:	d101      	bne.n	801e7c4 <__sfputs_r+0x12>
 801e7c0:	2000      	movs	r0, #0
 801e7c2:	e007      	b.n	801e7d4 <__sfputs_r+0x22>
 801e7c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e7c8:	463a      	mov	r2, r7
 801e7ca:	4630      	mov	r0, r6
 801e7cc:	f7ff ffda 	bl	801e784 <__sfputc_r>
 801e7d0:	1c43      	adds	r3, r0, #1
 801e7d2:	d1f3      	bne.n	801e7bc <__sfputs_r+0xa>
 801e7d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e7d8 <_vfiprintf_r>:
 801e7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7dc:	460d      	mov	r5, r1
 801e7de:	b09d      	sub	sp, #116	@ 0x74
 801e7e0:	4614      	mov	r4, r2
 801e7e2:	4698      	mov	r8, r3
 801e7e4:	4606      	mov	r6, r0
 801e7e6:	b118      	cbz	r0, 801e7f0 <_vfiprintf_r+0x18>
 801e7e8:	6a03      	ldr	r3, [r0, #32]
 801e7ea:	b90b      	cbnz	r3, 801e7f0 <_vfiprintf_r+0x18>
 801e7ec:	f7ff fc3c 	bl	801e068 <__sinit>
 801e7f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e7f2:	07d9      	lsls	r1, r3, #31
 801e7f4:	d405      	bmi.n	801e802 <_vfiprintf_r+0x2a>
 801e7f6:	89ab      	ldrh	r3, [r5, #12]
 801e7f8:	059a      	lsls	r2, r3, #22
 801e7fa:	d402      	bmi.n	801e802 <_vfiprintf_r+0x2a>
 801e7fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e7fe:	f7ff fe92 	bl	801e526 <__retarget_lock_acquire_recursive>
 801e802:	89ab      	ldrh	r3, [r5, #12]
 801e804:	071b      	lsls	r3, r3, #28
 801e806:	d501      	bpl.n	801e80c <_vfiprintf_r+0x34>
 801e808:	692b      	ldr	r3, [r5, #16]
 801e80a:	b99b      	cbnz	r3, 801e834 <_vfiprintf_r+0x5c>
 801e80c:	4629      	mov	r1, r5
 801e80e:	4630      	mov	r0, r6
 801e810:	f7ff fd52 	bl	801e2b8 <__swsetup_r>
 801e814:	b170      	cbz	r0, 801e834 <_vfiprintf_r+0x5c>
 801e816:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e818:	07dc      	lsls	r4, r3, #31
 801e81a:	d504      	bpl.n	801e826 <_vfiprintf_r+0x4e>
 801e81c:	f04f 30ff 	mov.w	r0, #4294967295
 801e820:	b01d      	add	sp, #116	@ 0x74
 801e822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e826:	89ab      	ldrh	r3, [r5, #12]
 801e828:	0598      	lsls	r0, r3, #22
 801e82a:	d4f7      	bmi.n	801e81c <_vfiprintf_r+0x44>
 801e82c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e82e:	f7ff fe7b 	bl	801e528 <__retarget_lock_release_recursive>
 801e832:	e7f3      	b.n	801e81c <_vfiprintf_r+0x44>
 801e834:	2300      	movs	r3, #0
 801e836:	9309      	str	r3, [sp, #36]	@ 0x24
 801e838:	2320      	movs	r3, #32
 801e83a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e83e:	f8cd 800c 	str.w	r8, [sp, #12]
 801e842:	2330      	movs	r3, #48	@ 0x30
 801e844:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e9f4 <_vfiprintf_r+0x21c>
 801e848:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e84c:	f04f 0901 	mov.w	r9, #1
 801e850:	4623      	mov	r3, r4
 801e852:	469a      	mov	sl, r3
 801e854:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e858:	b10a      	cbz	r2, 801e85e <_vfiprintf_r+0x86>
 801e85a:	2a25      	cmp	r2, #37	@ 0x25
 801e85c:	d1f9      	bne.n	801e852 <_vfiprintf_r+0x7a>
 801e85e:	ebba 0b04 	subs.w	fp, sl, r4
 801e862:	d00b      	beq.n	801e87c <_vfiprintf_r+0xa4>
 801e864:	465b      	mov	r3, fp
 801e866:	4622      	mov	r2, r4
 801e868:	4629      	mov	r1, r5
 801e86a:	4630      	mov	r0, r6
 801e86c:	f7ff ffa1 	bl	801e7b2 <__sfputs_r>
 801e870:	3001      	adds	r0, #1
 801e872:	f000 80a7 	beq.w	801e9c4 <_vfiprintf_r+0x1ec>
 801e876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e878:	445a      	add	r2, fp
 801e87a:	9209      	str	r2, [sp, #36]	@ 0x24
 801e87c:	f89a 3000 	ldrb.w	r3, [sl]
 801e880:	2b00      	cmp	r3, #0
 801e882:	f000 809f 	beq.w	801e9c4 <_vfiprintf_r+0x1ec>
 801e886:	2300      	movs	r3, #0
 801e888:	f04f 32ff 	mov.w	r2, #4294967295
 801e88c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e890:	f10a 0a01 	add.w	sl, sl, #1
 801e894:	9304      	str	r3, [sp, #16]
 801e896:	9307      	str	r3, [sp, #28]
 801e898:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e89c:	931a      	str	r3, [sp, #104]	@ 0x68
 801e89e:	4654      	mov	r4, sl
 801e8a0:	2205      	movs	r2, #5
 801e8a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e8a6:	4853      	ldr	r0, [pc, #332]	@ (801e9f4 <_vfiprintf_r+0x21c>)
 801e8a8:	f7e1 fcb2 	bl	8000210 <memchr>
 801e8ac:	9a04      	ldr	r2, [sp, #16]
 801e8ae:	b9d8      	cbnz	r0, 801e8e8 <_vfiprintf_r+0x110>
 801e8b0:	06d1      	lsls	r1, r2, #27
 801e8b2:	bf44      	itt	mi
 801e8b4:	2320      	movmi	r3, #32
 801e8b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e8ba:	0713      	lsls	r3, r2, #28
 801e8bc:	bf44      	itt	mi
 801e8be:	232b      	movmi	r3, #43	@ 0x2b
 801e8c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e8c4:	f89a 3000 	ldrb.w	r3, [sl]
 801e8c8:	2b2a      	cmp	r3, #42	@ 0x2a
 801e8ca:	d015      	beq.n	801e8f8 <_vfiprintf_r+0x120>
 801e8cc:	9a07      	ldr	r2, [sp, #28]
 801e8ce:	4654      	mov	r4, sl
 801e8d0:	2000      	movs	r0, #0
 801e8d2:	f04f 0c0a 	mov.w	ip, #10
 801e8d6:	4621      	mov	r1, r4
 801e8d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e8dc:	3b30      	subs	r3, #48	@ 0x30
 801e8de:	2b09      	cmp	r3, #9
 801e8e0:	d94b      	bls.n	801e97a <_vfiprintf_r+0x1a2>
 801e8e2:	b1b0      	cbz	r0, 801e912 <_vfiprintf_r+0x13a>
 801e8e4:	9207      	str	r2, [sp, #28]
 801e8e6:	e014      	b.n	801e912 <_vfiprintf_r+0x13a>
 801e8e8:	eba0 0308 	sub.w	r3, r0, r8
 801e8ec:	fa09 f303 	lsl.w	r3, r9, r3
 801e8f0:	4313      	orrs	r3, r2
 801e8f2:	9304      	str	r3, [sp, #16]
 801e8f4:	46a2      	mov	sl, r4
 801e8f6:	e7d2      	b.n	801e89e <_vfiprintf_r+0xc6>
 801e8f8:	9b03      	ldr	r3, [sp, #12]
 801e8fa:	1d19      	adds	r1, r3, #4
 801e8fc:	681b      	ldr	r3, [r3, #0]
 801e8fe:	9103      	str	r1, [sp, #12]
 801e900:	2b00      	cmp	r3, #0
 801e902:	bfbb      	ittet	lt
 801e904:	425b      	neglt	r3, r3
 801e906:	f042 0202 	orrlt.w	r2, r2, #2
 801e90a:	9307      	strge	r3, [sp, #28]
 801e90c:	9307      	strlt	r3, [sp, #28]
 801e90e:	bfb8      	it	lt
 801e910:	9204      	strlt	r2, [sp, #16]
 801e912:	7823      	ldrb	r3, [r4, #0]
 801e914:	2b2e      	cmp	r3, #46	@ 0x2e
 801e916:	d10a      	bne.n	801e92e <_vfiprintf_r+0x156>
 801e918:	7863      	ldrb	r3, [r4, #1]
 801e91a:	2b2a      	cmp	r3, #42	@ 0x2a
 801e91c:	d132      	bne.n	801e984 <_vfiprintf_r+0x1ac>
 801e91e:	9b03      	ldr	r3, [sp, #12]
 801e920:	1d1a      	adds	r2, r3, #4
 801e922:	681b      	ldr	r3, [r3, #0]
 801e924:	9203      	str	r2, [sp, #12]
 801e926:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e92a:	3402      	adds	r4, #2
 801e92c:	9305      	str	r3, [sp, #20]
 801e92e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ea04 <_vfiprintf_r+0x22c>
 801e932:	7821      	ldrb	r1, [r4, #0]
 801e934:	2203      	movs	r2, #3
 801e936:	4650      	mov	r0, sl
 801e938:	f7e1 fc6a 	bl	8000210 <memchr>
 801e93c:	b138      	cbz	r0, 801e94e <_vfiprintf_r+0x176>
 801e93e:	9b04      	ldr	r3, [sp, #16]
 801e940:	eba0 000a 	sub.w	r0, r0, sl
 801e944:	2240      	movs	r2, #64	@ 0x40
 801e946:	4082      	lsls	r2, r0
 801e948:	4313      	orrs	r3, r2
 801e94a:	3401      	adds	r4, #1
 801e94c:	9304      	str	r3, [sp, #16]
 801e94e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e952:	4829      	ldr	r0, [pc, #164]	@ (801e9f8 <_vfiprintf_r+0x220>)
 801e954:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e958:	2206      	movs	r2, #6
 801e95a:	f7e1 fc59 	bl	8000210 <memchr>
 801e95e:	2800      	cmp	r0, #0
 801e960:	d03f      	beq.n	801e9e2 <_vfiprintf_r+0x20a>
 801e962:	4b26      	ldr	r3, [pc, #152]	@ (801e9fc <_vfiprintf_r+0x224>)
 801e964:	bb1b      	cbnz	r3, 801e9ae <_vfiprintf_r+0x1d6>
 801e966:	9b03      	ldr	r3, [sp, #12]
 801e968:	3307      	adds	r3, #7
 801e96a:	f023 0307 	bic.w	r3, r3, #7
 801e96e:	3308      	adds	r3, #8
 801e970:	9303      	str	r3, [sp, #12]
 801e972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e974:	443b      	add	r3, r7
 801e976:	9309      	str	r3, [sp, #36]	@ 0x24
 801e978:	e76a      	b.n	801e850 <_vfiprintf_r+0x78>
 801e97a:	fb0c 3202 	mla	r2, ip, r2, r3
 801e97e:	460c      	mov	r4, r1
 801e980:	2001      	movs	r0, #1
 801e982:	e7a8      	b.n	801e8d6 <_vfiprintf_r+0xfe>
 801e984:	2300      	movs	r3, #0
 801e986:	3401      	adds	r4, #1
 801e988:	9305      	str	r3, [sp, #20]
 801e98a:	4619      	mov	r1, r3
 801e98c:	f04f 0c0a 	mov.w	ip, #10
 801e990:	4620      	mov	r0, r4
 801e992:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e996:	3a30      	subs	r2, #48	@ 0x30
 801e998:	2a09      	cmp	r2, #9
 801e99a:	d903      	bls.n	801e9a4 <_vfiprintf_r+0x1cc>
 801e99c:	2b00      	cmp	r3, #0
 801e99e:	d0c6      	beq.n	801e92e <_vfiprintf_r+0x156>
 801e9a0:	9105      	str	r1, [sp, #20]
 801e9a2:	e7c4      	b.n	801e92e <_vfiprintf_r+0x156>
 801e9a4:	fb0c 2101 	mla	r1, ip, r1, r2
 801e9a8:	4604      	mov	r4, r0
 801e9aa:	2301      	movs	r3, #1
 801e9ac:	e7f0      	b.n	801e990 <_vfiprintf_r+0x1b8>
 801e9ae:	ab03      	add	r3, sp, #12
 801e9b0:	9300      	str	r3, [sp, #0]
 801e9b2:	462a      	mov	r2, r5
 801e9b4:	4b12      	ldr	r3, [pc, #72]	@ (801ea00 <_vfiprintf_r+0x228>)
 801e9b6:	a904      	add	r1, sp, #16
 801e9b8:	4630      	mov	r0, r6
 801e9ba:	f3af 8000 	nop.w
 801e9be:	4607      	mov	r7, r0
 801e9c0:	1c78      	adds	r0, r7, #1
 801e9c2:	d1d6      	bne.n	801e972 <_vfiprintf_r+0x19a>
 801e9c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e9c6:	07d9      	lsls	r1, r3, #31
 801e9c8:	d405      	bmi.n	801e9d6 <_vfiprintf_r+0x1fe>
 801e9ca:	89ab      	ldrh	r3, [r5, #12]
 801e9cc:	059a      	lsls	r2, r3, #22
 801e9ce:	d402      	bmi.n	801e9d6 <_vfiprintf_r+0x1fe>
 801e9d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e9d2:	f7ff fda9 	bl	801e528 <__retarget_lock_release_recursive>
 801e9d6:	89ab      	ldrh	r3, [r5, #12]
 801e9d8:	065b      	lsls	r3, r3, #25
 801e9da:	f53f af1f 	bmi.w	801e81c <_vfiprintf_r+0x44>
 801e9de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e9e0:	e71e      	b.n	801e820 <_vfiprintf_r+0x48>
 801e9e2:	ab03      	add	r3, sp, #12
 801e9e4:	9300      	str	r3, [sp, #0]
 801e9e6:	462a      	mov	r2, r5
 801e9e8:	4b05      	ldr	r3, [pc, #20]	@ (801ea00 <_vfiprintf_r+0x228>)
 801e9ea:	a904      	add	r1, sp, #16
 801e9ec:	4630      	mov	r0, r6
 801e9ee:	f000 f879 	bl	801eae4 <_printf_i>
 801e9f2:	e7e4      	b.n	801e9be <_vfiprintf_r+0x1e6>
 801e9f4:	080223ed 	.word	0x080223ed
 801e9f8:	080223f7 	.word	0x080223f7
 801e9fc:	00000000 	.word	0x00000000
 801ea00:	0801e7b3 	.word	0x0801e7b3
 801ea04:	080223f3 	.word	0x080223f3

0801ea08 <_printf_common>:
 801ea08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea0c:	4616      	mov	r6, r2
 801ea0e:	4698      	mov	r8, r3
 801ea10:	688a      	ldr	r2, [r1, #8]
 801ea12:	690b      	ldr	r3, [r1, #16]
 801ea14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ea18:	4293      	cmp	r3, r2
 801ea1a:	bfb8      	it	lt
 801ea1c:	4613      	movlt	r3, r2
 801ea1e:	6033      	str	r3, [r6, #0]
 801ea20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ea24:	4607      	mov	r7, r0
 801ea26:	460c      	mov	r4, r1
 801ea28:	b10a      	cbz	r2, 801ea2e <_printf_common+0x26>
 801ea2a:	3301      	adds	r3, #1
 801ea2c:	6033      	str	r3, [r6, #0]
 801ea2e:	6823      	ldr	r3, [r4, #0]
 801ea30:	0699      	lsls	r1, r3, #26
 801ea32:	bf42      	ittt	mi
 801ea34:	6833      	ldrmi	r3, [r6, #0]
 801ea36:	3302      	addmi	r3, #2
 801ea38:	6033      	strmi	r3, [r6, #0]
 801ea3a:	6825      	ldr	r5, [r4, #0]
 801ea3c:	f015 0506 	ands.w	r5, r5, #6
 801ea40:	d106      	bne.n	801ea50 <_printf_common+0x48>
 801ea42:	f104 0a19 	add.w	sl, r4, #25
 801ea46:	68e3      	ldr	r3, [r4, #12]
 801ea48:	6832      	ldr	r2, [r6, #0]
 801ea4a:	1a9b      	subs	r3, r3, r2
 801ea4c:	42ab      	cmp	r3, r5
 801ea4e:	dc26      	bgt.n	801ea9e <_printf_common+0x96>
 801ea50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801ea54:	6822      	ldr	r2, [r4, #0]
 801ea56:	3b00      	subs	r3, #0
 801ea58:	bf18      	it	ne
 801ea5a:	2301      	movne	r3, #1
 801ea5c:	0692      	lsls	r2, r2, #26
 801ea5e:	d42b      	bmi.n	801eab8 <_printf_common+0xb0>
 801ea60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ea64:	4641      	mov	r1, r8
 801ea66:	4638      	mov	r0, r7
 801ea68:	47c8      	blx	r9
 801ea6a:	3001      	adds	r0, #1
 801ea6c:	d01e      	beq.n	801eaac <_printf_common+0xa4>
 801ea6e:	6823      	ldr	r3, [r4, #0]
 801ea70:	6922      	ldr	r2, [r4, #16]
 801ea72:	f003 0306 	and.w	r3, r3, #6
 801ea76:	2b04      	cmp	r3, #4
 801ea78:	bf02      	ittt	eq
 801ea7a:	68e5      	ldreq	r5, [r4, #12]
 801ea7c:	6833      	ldreq	r3, [r6, #0]
 801ea7e:	1aed      	subeq	r5, r5, r3
 801ea80:	68a3      	ldr	r3, [r4, #8]
 801ea82:	bf0c      	ite	eq
 801ea84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ea88:	2500      	movne	r5, #0
 801ea8a:	4293      	cmp	r3, r2
 801ea8c:	bfc4      	itt	gt
 801ea8e:	1a9b      	subgt	r3, r3, r2
 801ea90:	18ed      	addgt	r5, r5, r3
 801ea92:	2600      	movs	r6, #0
 801ea94:	341a      	adds	r4, #26
 801ea96:	42b5      	cmp	r5, r6
 801ea98:	d11a      	bne.n	801ead0 <_printf_common+0xc8>
 801ea9a:	2000      	movs	r0, #0
 801ea9c:	e008      	b.n	801eab0 <_printf_common+0xa8>
 801ea9e:	2301      	movs	r3, #1
 801eaa0:	4652      	mov	r2, sl
 801eaa2:	4641      	mov	r1, r8
 801eaa4:	4638      	mov	r0, r7
 801eaa6:	47c8      	blx	r9
 801eaa8:	3001      	adds	r0, #1
 801eaaa:	d103      	bne.n	801eab4 <_printf_common+0xac>
 801eaac:	f04f 30ff 	mov.w	r0, #4294967295
 801eab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eab4:	3501      	adds	r5, #1
 801eab6:	e7c6      	b.n	801ea46 <_printf_common+0x3e>
 801eab8:	18e1      	adds	r1, r4, r3
 801eaba:	1c5a      	adds	r2, r3, #1
 801eabc:	2030      	movs	r0, #48	@ 0x30
 801eabe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801eac2:	4422      	add	r2, r4
 801eac4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801eac8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801eacc:	3302      	adds	r3, #2
 801eace:	e7c7      	b.n	801ea60 <_printf_common+0x58>
 801ead0:	2301      	movs	r3, #1
 801ead2:	4622      	mov	r2, r4
 801ead4:	4641      	mov	r1, r8
 801ead6:	4638      	mov	r0, r7
 801ead8:	47c8      	blx	r9
 801eada:	3001      	adds	r0, #1
 801eadc:	d0e6      	beq.n	801eaac <_printf_common+0xa4>
 801eade:	3601      	adds	r6, #1
 801eae0:	e7d9      	b.n	801ea96 <_printf_common+0x8e>
	...

0801eae4 <_printf_i>:
 801eae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801eae8:	7e0f      	ldrb	r7, [r1, #24]
 801eaea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801eaec:	2f78      	cmp	r7, #120	@ 0x78
 801eaee:	4691      	mov	r9, r2
 801eaf0:	4680      	mov	r8, r0
 801eaf2:	460c      	mov	r4, r1
 801eaf4:	469a      	mov	sl, r3
 801eaf6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801eafa:	d807      	bhi.n	801eb0c <_printf_i+0x28>
 801eafc:	2f62      	cmp	r7, #98	@ 0x62
 801eafe:	d80a      	bhi.n	801eb16 <_printf_i+0x32>
 801eb00:	2f00      	cmp	r7, #0
 801eb02:	f000 80d1 	beq.w	801eca8 <_printf_i+0x1c4>
 801eb06:	2f58      	cmp	r7, #88	@ 0x58
 801eb08:	f000 80b8 	beq.w	801ec7c <_printf_i+0x198>
 801eb0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801eb10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801eb14:	e03a      	b.n	801eb8c <_printf_i+0xa8>
 801eb16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801eb1a:	2b15      	cmp	r3, #21
 801eb1c:	d8f6      	bhi.n	801eb0c <_printf_i+0x28>
 801eb1e:	a101      	add	r1, pc, #4	@ (adr r1, 801eb24 <_printf_i+0x40>)
 801eb20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801eb24:	0801eb7d 	.word	0x0801eb7d
 801eb28:	0801eb91 	.word	0x0801eb91
 801eb2c:	0801eb0d 	.word	0x0801eb0d
 801eb30:	0801eb0d 	.word	0x0801eb0d
 801eb34:	0801eb0d 	.word	0x0801eb0d
 801eb38:	0801eb0d 	.word	0x0801eb0d
 801eb3c:	0801eb91 	.word	0x0801eb91
 801eb40:	0801eb0d 	.word	0x0801eb0d
 801eb44:	0801eb0d 	.word	0x0801eb0d
 801eb48:	0801eb0d 	.word	0x0801eb0d
 801eb4c:	0801eb0d 	.word	0x0801eb0d
 801eb50:	0801ec8f 	.word	0x0801ec8f
 801eb54:	0801ebbb 	.word	0x0801ebbb
 801eb58:	0801ec49 	.word	0x0801ec49
 801eb5c:	0801eb0d 	.word	0x0801eb0d
 801eb60:	0801eb0d 	.word	0x0801eb0d
 801eb64:	0801ecb1 	.word	0x0801ecb1
 801eb68:	0801eb0d 	.word	0x0801eb0d
 801eb6c:	0801ebbb 	.word	0x0801ebbb
 801eb70:	0801eb0d 	.word	0x0801eb0d
 801eb74:	0801eb0d 	.word	0x0801eb0d
 801eb78:	0801ec51 	.word	0x0801ec51
 801eb7c:	6833      	ldr	r3, [r6, #0]
 801eb7e:	1d1a      	adds	r2, r3, #4
 801eb80:	681b      	ldr	r3, [r3, #0]
 801eb82:	6032      	str	r2, [r6, #0]
 801eb84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801eb88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801eb8c:	2301      	movs	r3, #1
 801eb8e:	e09c      	b.n	801ecca <_printf_i+0x1e6>
 801eb90:	6833      	ldr	r3, [r6, #0]
 801eb92:	6820      	ldr	r0, [r4, #0]
 801eb94:	1d19      	adds	r1, r3, #4
 801eb96:	6031      	str	r1, [r6, #0]
 801eb98:	0606      	lsls	r6, r0, #24
 801eb9a:	d501      	bpl.n	801eba0 <_printf_i+0xbc>
 801eb9c:	681d      	ldr	r5, [r3, #0]
 801eb9e:	e003      	b.n	801eba8 <_printf_i+0xc4>
 801eba0:	0645      	lsls	r5, r0, #25
 801eba2:	d5fb      	bpl.n	801eb9c <_printf_i+0xb8>
 801eba4:	f9b3 5000 	ldrsh.w	r5, [r3]
 801eba8:	2d00      	cmp	r5, #0
 801ebaa:	da03      	bge.n	801ebb4 <_printf_i+0xd0>
 801ebac:	232d      	movs	r3, #45	@ 0x2d
 801ebae:	426d      	negs	r5, r5
 801ebb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ebb4:	4858      	ldr	r0, [pc, #352]	@ (801ed18 <_printf_i+0x234>)
 801ebb6:	230a      	movs	r3, #10
 801ebb8:	e011      	b.n	801ebde <_printf_i+0xfa>
 801ebba:	6821      	ldr	r1, [r4, #0]
 801ebbc:	6833      	ldr	r3, [r6, #0]
 801ebbe:	0608      	lsls	r0, r1, #24
 801ebc0:	f853 5b04 	ldr.w	r5, [r3], #4
 801ebc4:	d402      	bmi.n	801ebcc <_printf_i+0xe8>
 801ebc6:	0649      	lsls	r1, r1, #25
 801ebc8:	bf48      	it	mi
 801ebca:	b2ad      	uxthmi	r5, r5
 801ebcc:	2f6f      	cmp	r7, #111	@ 0x6f
 801ebce:	4852      	ldr	r0, [pc, #328]	@ (801ed18 <_printf_i+0x234>)
 801ebd0:	6033      	str	r3, [r6, #0]
 801ebd2:	bf14      	ite	ne
 801ebd4:	230a      	movne	r3, #10
 801ebd6:	2308      	moveq	r3, #8
 801ebd8:	2100      	movs	r1, #0
 801ebda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801ebde:	6866      	ldr	r6, [r4, #4]
 801ebe0:	60a6      	str	r6, [r4, #8]
 801ebe2:	2e00      	cmp	r6, #0
 801ebe4:	db05      	blt.n	801ebf2 <_printf_i+0x10e>
 801ebe6:	6821      	ldr	r1, [r4, #0]
 801ebe8:	432e      	orrs	r6, r5
 801ebea:	f021 0104 	bic.w	r1, r1, #4
 801ebee:	6021      	str	r1, [r4, #0]
 801ebf0:	d04b      	beq.n	801ec8a <_printf_i+0x1a6>
 801ebf2:	4616      	mov	r6, r2
 801ebf4:	fbb5 f1f3 	udiv	r1, r5, r3
 801ebf8:	fb03 5711 	mls	r7, r3, r1, r5
 801ebfc:	5dc7      	ldrb	r7, [r0, r7]
 801ebfe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ec02:	462f      	mov	r7, r5
 801ec04:	42bb      	cmp	r3, r7
 801ec06:	460d      	mov	r5, r1
 801ec08:	d9f4      	bls.n	801ebf4 <_printf_i+0x110>
 801ec0a:	2b08      	cmp	r3, #8
 801ec0c:	d10b      	bne.n	801ec26 <_printf_i+0x142>
 801ec0e:	6823      	ldr	r3, [r4, #0]
 801ec10:	07df      	lsls	r7, r3, #31
 801ec12:	d508      	bpl.n	801ec26 <_printf_i+0x142>
 801ec14:	6923      	ldr	r3, [r4, #16]
 801ec16:	6861      	ldr	r1, [r4, #4]
 801ec18:	4299      	cmp	r1, r3
 801ec1a:	bfde      	ittt	le
 801ec1c:	2330      	movle	r3, #48	@ 0x30
 801ec1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ec22:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ec26:	1b92      	subs	r2, r2, r6
 801ec28:	6122      	str	r2, [r4, #16]
 801ec2a:	f8cd a000 	str.w	sl, [sp]
 801ec2e:	464b      	mov	r3, r9
 801ec30:	aa03      	add	r2, sp, #12
 801ec32:	4621      	mov	r1, r4
 801ec34:	4640      	mov	r0, r8
 801ec36:	f7ff fee7 	bl	801ea08 <_printf_common>
 801ec3a:	3001      	adds	r0, #1
 801ec3c:	d14a      	bne.n	801ecd4 <_printf_i+0x1f0>
 801ec3e:	f04f 30ff 	mov.w	r0, #4294967295
 801ec42:	b004      	add	sp, #16
 801ec44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ec48:	6823      	ldr	r3, [r4, #0]
 801ec4a:	f043 0320 	orr.w	r3, r3, #32
 801ec4e:	6023      	str	r3, [r4, #0]
 801ec50:	4832      	ldr	r0, [pc, #200]	@ (801ed1c <_printf_i+0x238>)
 801ec52:	2778      	movs	r7, #120	@ 0x78
 801ec54:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ec58:	6823      	ldr	r3, [r4, #0]
 801ec5a:	6831      	ldr	r1, [r6, #0]
 801ec5c:	061f      	lsls	r7, r3, #24
 801ec5e:	f851 5b04 	ldr.w	r5, [r1], #4
 801ec62:	d402      	bmi.n	801ec6a <_printf_i+0x186>
 801ec64:	065f      	lsls	r7, r3, #25
 801ec66:	bf48      	it	mi
 801ec68:	b2ad      	uxthmi	r5, r5
 801ec6a:	6031      	str	r1, [r6, #0]
 801ec6c:	07d9      	lsls	r1, r3, #31
 801ec6e:	bf44      	itt	mi
 801ec70:	f043 0320 	orrmi.w	r3, r3, #32
 801ec74:	6023      	strmi	r3, [r4, #0]
 801ec76:	b11d      	cbz	r5, 801ec80 <_printf_i+0x19c>
 801ec78:	2310      	movs	r3, #16
 801ec7a:	e7ad      	b.n	801ebd8 <_printf_i+0xf4>
 801ec7c:	4826      	ldr	r0, [pc, #152]	@ (801ed18 <_printf_i+0x234>)
 801ec7e:	e7e9      	b.n	801ec54 <_printf_i+0x170>
 801ec80:	6823      	ldr	r3, [r4, #0]
 801ec82:	f023 0320 	bic.w	r3, r3, #32
 801ec86:	6023      	str	r3, [r4, #0]
 801ec88:	e7f6      	b.n	801ec78 <_printf_i+0x194>
 801ec8a:	4616      	mov	r6, r2
 801ec8c:	e7bd      	b.n	801ec0a <_printf_i+0x126>
 801ec8e:	6833      	ldr	r3, [r6, #0]
 801ec90:	6825      	ldr	r5, [r4, #0]
 801ec92:	6961      	ldr	r1, [r4, #20]
 801ec94:	1d18      	adds	r0, r3, #4
 801ec96:	6030      	str	r0, [r6, #0]
 801ec98:	062e      	lsls	r6, r5, #24
 801ec9a:	681b      	ldr	r3, [r3, #0]
 801ec9c:	d501      	bpl.n	801eca2 <_printf_i+0x1be>
 801ec9e:	6019      	str	r1, [r3, #0]
 801eca0:	e002      	b.n	801eca8 <_printf_i+0x1c4>
 801eca2:	0668      	lsls	r0, r5, #25
 801eca4:	d5fb      	bpl.n	801ec9e <_printf_i+0x1ba>
 801eca6:	8019      	strh	r1, [r3, #0]
 801eca8:	2300      	movs	r3, #0
 801ecaa:	6123      	str	r3, [r4, #16]
 801ecac:	4616      	mov	r6, r2
 801ecae:	e7bc      	b.n	801ec2a <_printf_i+0x146>
 801ecb0:	6833      	ldr	r3, [r6, #0]
 801ecb2:	1d1a      	adds	r2, r3, #4
 801ecb4:	6032      	str	r2, [r6, #0]
 801ecb6:	681e      	ldr	r6, [r3, #0]
 801ecb8:	6862      	ldr	r2, [r4, #4]
 801ecba:	2100      	movs	r1, #0
 801ecbc:	4630      	mov	r0, r6
 801ecbe:	f7e1 faa7 	bl	8000210 <memchr>
 801ecc2:	b108      	cbz	r0, 801ecc8 <_printf_i+0x1e4>
 801ecc4:	1b80      	subs	r0, r0, r6
 801ecc6:	6060      	str	r0, [r4, #4]
 801ecc8:	6863      	ldr	r3, [r4, #4]
 801ecca:	6123      	str	r3, [r4, #16]
 801eccc:	2300      	movs	r3, #0
 801ecce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ecd2:	e7aa      	b.n	801ec2a <_printf_i+0x146>
 801ecd4:	6923      	ldr	r3, [r4, #16]
 801ecd6:	4632      	mov	r2, r6
 801ecd8:	4649      	mov	r1, r9
 801ecda:	4640      	mov	r0, r8
 801ecdc:	47d0      	blx	sl
 801ecde:	3001      	adds	r0, #1
 801ece0:	d0ad      	beq.n	801ec3e <_printf_i+0x15a>
 801ece2:	6823      	ldr	r3, [r4, #0]
 801ece4:	079b      	lsls	r3, r3, #30
 801ece6:	d413      	bmi.n	801ed10 <_printf_i+0x22c>
 801ece8:	68e0      	ldr	r0, [r4, #12]
 801ecea:	9b03      	ldr	r3, [sp, #12]
 801ecec:	4298      	cmp	r0, r3
 801ecee:	bfb8      	it	lt
 801ecf0:	4618      	movlt	r0, r3
 801ecf2:	e7a6      	b.n	801ec42 <_printf_i+0x15e>
 801ecf4:	2301      	movs	r3, #1
 801ecf6:	4632      	mov	r2, r6
 801ecf8:	4649      	mov	r1, r9
 801ecfa:	4640      	mov	r0, r8
 801ecfc:	47d0      	blx	sl
 801ecfe:	3001      	adds	r0, #1
 801ed00:	d09d      	beq.n	801ec3e <_printf_i+0x15a>
 801ed02:	3501      	adds	r5, #1
 801ed04:	68e3      	ldr	r3, [r4, #12]
 801ed06:	9903      	ldr	r1, [sp, #12]
 801ed08:	1a5b      	subs	r3, r3, r1
 801ed0a:	42ab      	cmp	r3, r5
 801ed0c:	dcf2      	bgt.n	801ecf4 <_printf_i+0x210>
 801ed0e:	e7eb      	b.n	801ece8 <_printf_i+0x204>
 801ed10:	2500      	movs	r5, #0
 801ed12:	f104 0619 	add.w	r6, r4, #25
 801ed16:	e7f5      	b.n	801ed04 <_printf_i+0x220>
 801ed18:	080223fe 	.word	0x080223fe
 801ed1c:	0802240f 	.word	0x0802240f

0801ed20 <__sflush_r>:
 801ed20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ed24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ed28:	0716      	lsls	r6, r2, #28
 801ed2a:	4605      	mov	r5, r0
 801ed2c:	460c      	mov	r4, r1
 801ed2e:	d454      	bmi.n	801edda <__sflush_r+0xba>
 801ed30:	684b      	ldr	r3, [r1, #4]
 801ed32:	2b00      	cmp	r3, #0
 801ed34:	dc02      	bgt.n	801ed3c <__sflush_r+0x1c>
 801ed36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ed38:	2b00      	cmp	r3, #0
 801ed3a:	dd48      	ble.n	801edce <__sflush_r+0xae>
 801ed3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ed3e:	2e00      	cmp	r6, #0
 801ed40:	d045      	beq.n	801edce <__sflush_r+0xae>
 801ed42:	2300      	movs	r3, #0
 801ed44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ed48:	682f      	ldr	r7, [r5, #0]
 801ed4a:	6a21      	ldr	r1, [r4, #32]
 801ed4c:	602b      	str	r3, [r5, #0]
 801ed4e:	d030      	beq.n	801edb2 <__sflush_r+0x92>
 801ed50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ed52:	89a3      	ldrh	r3, [r4, #12]
 801ed54:	0759      	lsls	r1, r3, #29
 801ed56:	d505      	bpl.n	801ed64 <__sflush_r+0x44>
 801ed58:	6863      	ldr	r3, [r4, #4]
 801ed5a:	1ad2      	subs	r2, r2, r3
 801ed5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ed5e:	b10b      	cbz	r3, 801ed64 <__sflush_r+0x44>
 801ed60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ed62:	1ad2      	subs	r2, r2, r3
 801ed64:	2300      	movs	r3, #0
 801ed66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ed68:	6a21      	ldr	r1, [r4, #32]
 801ed6a:	4628      	mov	r0, r5
 801ed6c:	47b0      	blx	r6
 801ed6e:	1c43      	adds	r3, r0, #1
 801ed70:	89a3      	ldrh	r3, [r4, #12]
 801ed72:	d106      	bne.n	801ed82 <__sflush_r+0x62>
 801ed74:	6829      	ldr	r1, [r5, #0]
 801ed76:	291d      	cmp	r1, #29
 801ed78:	d82b      	bhi.n	801edd2 <__sflush_r+0xb2>
 801ed7a:	4a2a      	ldr	r2, [pc, #168]	@ (801ee24 <__sflush_r+0x104>)
 801ed7c:	40ca      	lsrs	r2, r1
 801ed7e:	07d6      	lsls	r6, r2, #31
 801ed80:	d527      	bpl.n	801edd2 <__sflush_r+0xb2>
 801ed82:	2200      	movs	r2, #0
 801ed84:	6062      	str	r2, [r4, #4]
 801ed86:	04d9      	lsls	r1, r3, #19
 801ed88:	6922      	ldr	r2, [r4, #16]
 801ed8a:	6022      	str	r2, [r4, #0]
 801ed8c:	d504      	bpl.n	801ed98 <__sflush_r+0x78>
 801ed8e:	1c42      	adds	r2, r0, #1
 801ed90:	d101      	bne.n	801ed96 <__sflush_r+0x76>
 801ed92:	682b      	ldr	r3, [r5, #0]
 801ed94:	b903      	cbnz	r3, 801ed98 <__sflush_r+0x78>
 801ed96:	6560      	str	r0, [r4, #84]	@ 0x54
 801ed98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ed9a:	602f      	str	r7, [r5, #0]
 801ed9c:	b1b9      	cbz	r1, 801edce <__sflush_r+0xae>
 801ed9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801eda2:	4299      	cmp	r1, r3
 801eda4:	d002      	beq.n	801edac <__sflush_r+0x8c>
 801eda6:	4628      	mov	r0, r5
 801eda8:	f7ff fbec 	bl	801e584 <_free_r>
 801edac:	2300      	movs	r3, #0
 801edae:	6363      	str	r3, [r4, #52]	@ 0x34
 801edb0:	e00d      	b.n	801edce <__sflush_r+0xae>
 801edb2:	2301      	movs	r3, #1
 801edb4:	4628      	mov	r0, r5
 801edb6:	47b0      	blx	r6
 801edb8:	4602      	mov	r2, r0
 801edba:	1c50      	adds	r0, r2, #1
 801edbc:	d1c9      	bne.n	801ed52 <__sflush_r+0x32>
 801edbe:	682b      	ldr	r3, [r5, #0]
 801edc0:	2b00      	cmp	r3, #0
 801edc2:	d0c6      	beq.n	801ed52 <__sflush_r+0x32>
 801edc4:	2b1d      	cmp	r3, #29
 801edc6:	d001      	beq.n	801edcc <__sflush_r+0xac>
 801edc8:	2b16      	cmp	r3, #22
 801edca:	d11e      	bne.n	801ee0a <__sflush_r+0xea>
 801edcc:	602f      	str	r7, [r5, #0]
 801edce:	2000      	movs	r0, #0
 801edd0:	e022      	b.n	801ee18 <__sflush_r+0xf8>
 801edd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801edd6:	b21b      	sxth	r3, r3
 801edd8:	e01b      	b.n	801ee12 <__sflush_r+0xf2>
 801edda:	690f      	ldr	r7, [r1, #16]
 801eddc:	2f00      	cmp	r7, #0
 801edde:	d0f6      	beq.n	801edce <__sflush_r+0xae>
 801ede0:	0793      	lsls	r3, r2, #30
 801ede2:	680e      	ldr	r6, [r1, #0]
 801ede4:	bf08      	it	eq
 801ede6:	694b      	ldreq	r3, [r1, #20]
 801ede8:	600f      	str	r7, [r1, #0]
 801edea:	bf18      	it	ne
 801edec:	2300      	movne	r3, #0
 801edee:	eba6 0807 	sub.w	r8, r6, r7
 801edf2:	608b      	str	r3, [r1, #8]
 801edf4:	f1b8 0f00 	cmp.w	r8, #0
 801edf8:	dde9      	ble.n	801edce <__sflush_r+0xae>
 801edfa:	6a21      	ldr	r1, [r4, #32]
 801edfc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801edfe:	4643      	mov	r3, r8
 801ee00:	463a      	mov	r2, r7
 801ee02:	4628      	mov	r0, r5
 801ee04:	47b0      	blx	r6
 801ee06:	2800      	cmp	r0, #0
 801ee08:	dc08      	bgt.n	801ee1c <__sflush_r+0xfc>
 801ee0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ee0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ee12:	81a3      	strh	r3, [r4, #12]
 801ee14:	f04f 30ff 	mov.w	r0, #4294967295
 801ee18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ee1c:	4407      	add	r7, r0
 801ee1e:	eba8 0800 	sub.w	r8, r8, r0
 801ee22:	e7e7      	b.n	801edf4 <__sflush_r+0xd4>
 801ee24:	20400001 	.word	0x20400001

0801ee28 <_fflush_r>:
 801ee28:	b538      	push	{r3, r4, r5, lr}
 801ee2a:	690b      	ldr	r3, [r1, #16]
 801ee2c:	4605      	mov	r5, r0
 801ee2e:	460c      	mov	r4, r1
 801ee30:	b913      	cbnz	r3, 801ee38 <_fflush_r+0x10>
 801ee32:	2500      	movs	r5, #0
 801ee34:	4628      	mov	r0, r5
 801ee36:	bd38      	pop	{r3, r4, r5, pc}
 801ee38:	b118      	cbz	r0, 801ee42 <_fflush_r+0x1a>
 801ee3a:	6a03      	ldr	r3, [r0, #32]
 801ee3c:	b90b      	cbnz	r3, 801ee42 <_fflush_r+0x1a>
 801ee3e:	f7ff f913 	bl	801e068 <__sinit>
 801ee42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ee46:	2b00      	cmp	r3, #0
 801ee48:	d0f3      	beq.n	801ee32 <_fflush_r+0xa>
 801ee4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ee4c:	07d0      	lsls	r0, r2, #31
 801ee4e:	d404      	bmi.n	801ee5a <_fflush_r+0x32>
 801ee50:	0599      	lsls	r1, r3, #22
 801ee52:	d402      	bmi.n	801ee5a <_fflush_r+0x32>
 801ee54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ee56:	f7ff fb66 	bl	801e526 <__retarget_lock_acquire_recursive>
 801ee5a:	4628      	mov	r0, r5
 801ee5c:	4621      	mov	r1, r4
 801ee5e:	f7ff ff5f 	bl	801ed20 <__sflush_r>
 801ee62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ee64:	07da      	lsls	r2, r3, #31
 801ee66:	4605      	mov	r5, r0
 801ee68:	d4e4      	bmi.n	801ee34 <_fflush_r+0xc>
 801ee6a:	89a3      	ldrh	r3, [r4, #12]
 801ee6c:	059b      	lsls	r3, r3, #22
 801ee6e:	d4e1      	bmi.n	801ee34 <_fflush_r+0xc>
 801ee70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ee72:	f7ff fb59 	bl	801e528 <__retarget_lock_release_recursive>
 801ee76:	e7dd      	b.n	801ee34 <_fflush_r+0xc>

0801ee78 <fiprintf>:
 801ee78:	b40e      	push	{r1, r2, r3}
 801ee7a:	b503      	push	{r0, r1, lr}
 801ee7c:	4601      	mov	r1, r0
 801ee7e:	ab03      	add	r3, sp, #12
 801ee80:	4805      	ldr	r0, [pc, #20]	@ (801ee98 <fiprintf+0x20>)
 801ee82:	f853 2b04 	ldr.w	r2, [r3], #4
 801ee86:	6800      	ldr	r0, [r0, #0]
 801ee88:	9301      	str	r3, [sp, #4]
 801ee8a:	f7ff fca5 	bl	801e7d8 <_vfiprintf_r>
 801ee8e:	b002      	add	sp, #8
 801ee90:	f85d eb04 	ldr.w	lr, [sp], #4
 801ee94:	b003      	add	sp, #12
 801ee96:	4770      	bx	lr
 801ee98:	2000003c 	.word	0x2000003c

0801ee9c <__swhatbuf_r>:
 801ee9c:	b570      	push	{r4, r5, r6, lr}
 801ee9e:	460c      	mov	r4, r1
 801eea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eea4:	2900      	cmp	r1, #0
 801eea6:	b096      	sub	sp, #88	@ 0x58
 801eea8:	4615      	mov	r5, r2
 801eeaa:	461e      	mov	r6, r3
 801eeac:	da0d      	bge.n	801eeca <__swhatbuf_r+0x2e>
 801eeae:	89a3      	ldrh	r3, [r4, #12]
 801eeb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801eeb4:	f04f 0100 	mov.w	r1, #0
 801eeb8:	bf14      	ite	ne
 801eeba:	2340      	movne	r3, #64	@ 0x40
 801eebc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801eec0:	2000      	movs	r0, #0
 801eec2:	6031      	str	r1, [r6, #0]
 801eec4:	602b      	str	r3, [r5, #0]
 801eec6:	b016      	add	sp, #88	@ 0x58
 801eec8:	bd70      	pop	{r4, r5, r6, pc}
 801eeca:	466a      	mov	r2, sp
 801eecc:	f000 f848 	bl	801ef60 <_fstat_r>
 801eed0:	2800      	cmp	r0, #0
 801eed2:	dbec      	blt.n	801eeae <__swhatbuf_r+0x12>
 801eed4:	9901      	ldr	r1, [sp, #4]
 801eed6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801eeda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801eede:	4259      	negs	r1, r3
 801eee0:	4159      	adcs	r1, r3
 801eee2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801eee6:	e7eb      	b.n	801eec0 <__swhatbuf_r+0x24>

0801eee8 <__smakebuf_r>:
 801eee8:	898b      	ldrh	r3, [r1, #12]
 801eeea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801eeec:	079d      	lsls	r5, r3, #30
 801eeee:	4606      	mov	r6, r0
 801eef0:	460c      	mov	r4, r1
 801eef2:	d507      	bpl.n	801ef04 <__smakebuf_r+0x1c>
 801eef4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801eef8:	6023      	str	r3, [r4, #0]
 801eefa:	6123      	str	r3, [r4, #16]
 801eefc:	2301      	movs	r3, #1
 801eefe:	6163      	str	r3, [r4, #20]
 801ef00:	b003      	add	sp, #12
 801ef02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef04:	ab01      	add	r3, sp, #4
 801ef06:	466a      	mov	r2, sp
 801ef08:	f7ff ffc8 	bl	801ee9c <__swhatbuf_r>
 801ef0c:	9f00      	ldr	r7, [sp, #0]
 801ef0e:	4605      	mov	r5, r0
 801ef10:	4639      	mov	r1, r7
 801ef12:	4630      	mov	r0, r6
 801ef14:	f7ff fbaa 	bl	801e66c <_malloc_r>
 801ef18:	b948      	cbnz	r0, 801ef2e <__smakebuf_r+0x46>
 801ef1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ef1e:	059a      	lsls	r2, r3, #22
 801ef20:	d4ee      	bmi.n	801ef00 <__smakebuf_r+0x18>
 801ef22:	f023 0303 	bic.w	r3, r3, #3
 801ef26:	f043 0302 	orr.w	r3, r3, #2
 801ef2a:	81a3      	strh	r3, [r4, #12]
 801ef2c:	e7e2      	b.n	801eef4 <__smakebuf_r+0xc>
 801ef2e:	89a3      	ldrh	r3, [r4, #12]
 801ef30:	6020      	str	r0, [r4, #0]
 801ef32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ef36:	81a3      	strh	r3, [r4, #12]
 801ef38:	9b01      	ldr	r3, [sp, #4]
 801ef3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801ef3e:	b15b      	cbz	r3, 801ef58 <__smakebuf_r+0x70>
 801ef40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ef44:	4630      	mov	r0, r6
 801ef46:	f000 f81d 	bl	801ef84 <_isatty_r>
 801ef4a:	b128      	cbz	r0, 801ef58 <__smakebuf_r+0x70>
 801ef4c:	89a3      	ldrh	r3, [r4, #12]
 801ef4e:	f023 0303 	bic.w	r3, r3, #3
 801ef52:	f043 0301 	orr.w	r3, r3, #1
 801ef56:	81a3      	strh	r3, [r4, #12]
 801ef58:	89a3      	ldrh	r3, [r4, #12]
 801ef5a:	431d      	orrs	r5, r3
 801ef5c:	81a5      	strh	r5, [r4, #12]
 801ef5e:	e7cf      	b.n	801ef00 <__smakebuf_r+0x18>

0801ef60 <_fstat_r>:
 801ef60:	b538      	push	{r3, r4, r5, lr}
 801ef62:	4d07      	ldr	r5, [pc, #28]	@ (801ef80 <_fstat_r+0x20>)
 801ef64:	2300      	movs	r3, #0
 801ef66:	4604      	mov	r4, r0
 801ef68:	4608      	mov	r0, r1
 801ef6a:	4611      	mov	r1, r2
 801ef6c:	602b      	str	r3, [r5, #0]
 801ef6e:	f7e3 fa97 	bl	80024a0 <_fstat>
 801ef72:	1c43      	adds	r3, r0, #1
 801ef74:	d102      	bne.n	801ef7c <_fstat_r+0x1c>
 801ef76:	682b      	ldr	r3, [r5, #0]
 801ef78:	b103      	cbz	r3, 801ef7c <_fstat_r+0x1c>
 801ef7a:	6023      	str	r3, [r4, #0]
 801ef7c:	bd38      	pop	{r3, r4, r5, pc}
 801ef7e:	bf00      	nop
 801ef80:	20027e4c 	.word	0x20027e4c

0801ef84 <_isatty_r>:
 801ef84:	b538      	push	{r3, r4, r5, lr}
 801ef86:	4d06      	ldr	r5, [pc, #24]	@ (801efa0 <_isatty_r+0x1c>)
 801ef88:	2300      	movs	r3, #0
 801ef8a:	4604      	mov	r4, r0
 801ef8c:	4608      	mov	r0, r1
 801ef8e:	602b      	str	r3, [r5, #0]
 801ef90:	f7e3 fa96 	bl	80024c0 <_isatty>
 801ef94:	1c43      	adds	r3, r0, #1
 801ef96:	d102      	bne.n	801ef9e <_isatty_r+0x1a>
 801ef98:	682b      	ldr	r3, [r5, #0]
 801ef9a:	b103      	cbz	r3, 801ef9e <_isatty_r+0x1a>
 801ef9c:	6023      	str	r3, [r4, #0]
 801ef9e:	bd38      	pop	{r3, r4, r5, pc}
 801efa0:	20027e4c 	.word	0x20027e4c

0801efa4 <_sbrk_r>:
 801efa4:	b538      	push	{r3, r4, r5, lr}
 801efa6:	4d06      	ldr	r5, [pc, #24]	@ (801efc0 <_sbrk_r+0x1c>)
 801efa8:	2300      	movs	r3, #0
 801efaa:	4604      	mov	r4, r0
 801efac:	4608      	mov	r0, r1
 801efae:	602b      	str	r3, [r5, #0]
 801efb0:	f7e3 fa9e 	bl	80024f0 <_sbrk>
 801efb4:	1c43      	adds	r3, r0, #1
 801efb6:	d102      	bne.n	801efbe <_sbrk_r+0x1a>
 801efb8:	682b      	ldr	r3, [r5, #0]
 801efba:	b103      	cbz	r3, 801efbe <_sbrk_r+0x1a>
 801efbc:	6023      	str	r3, [r4, #0]
 801efbe:	bd38      	pop	{r3, r4, r5, pc}
 801efc0:	20027e4c 	.word	0x20027e4c

0801efc4 <abort>:
 801efc4:	b508      	push	{r3, lr}
 801efc6:	2006      	movs	r0, #6
 801efc8:	f000 f82c 	bl	801f024 <raise>
 801efcc:	2001      	movs	r0, #1
 801efce:	f7e3 fa17 	bl	8002400 <_exit>

0801efd2 <_raise_r>:
 801efd2:	291f      	cmp	r1, #31
 801efd4:	b538      	push	{r3, r4, r5, lr}
 801efd6:	4605      	mov	r5, r0
 801efd8:	460c      	mov	r4, r1
 801efda:	d904      	bls.n	801efe6 <_raise_r+0x14>
 801efdc:	2316      	movs	r3, #22
 801efde:	6003      	str	r3, [r0, #0]
 801efe0:	f04f 30ff 	mov.w	r0, #4294967295
 801efe4:	bd38      	pop	{r3, r4, r5, pc}
 801efe6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801efe8:	b112      	cbz	r2, 801eff0 <_raise_r+0x1e>
 801efea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801efee:	b94b      	cbnz	r3, 801f004 <_raise_r+0x32>
 801eff0:	4628      	mov	r0, r5
 801eff2:	f000 f831 	bl	801f058 <_getpid_r>
 801eff6:	4622      	mov	r2, r4
 801eff8:	4601      	mov	r1, r0
 801effa:	4628      	mov	r0, r5
 801effc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f000:	f000 b818 	b.w	801f034 <_kill_r>
 801f004:	2b01      	cmp	r3, #1
 801f006:	d00a      	beq.n	801f01e <_raise_r+0x4c>
 801f008:	1c59      	adds	r1, r3, #1
 801f00a:	d103      	bne.n	801f014 <_raise_r+0x42>
 801f00c:	2316      	movs	r3, #22
 801f00e:	6003      	str	r3, [r0, #0]
 801f010:	2001      	movs	r0, #1
 801f012:	e7e7      	b.n	801efe4 <_raise_r+0x12>
 801f014:	2100      	movs	r1, #0
 801f016:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801f01a:	4620      	mov	r0, r4
 801f01c:	4798      	blx	r3
 801f01e:	2000      	movs	r0, #0
 801f020:	e7e0      	b.n	801efe4 <_raise_r+0x12>
	...

0801f024 <raise>:
 801f024:	4b02      	ldr	r3, [pc, #8]	@ (801f030 <raise+0xc>)
 801f026:	4601      	mov	r1, r0
 801f028:	6818      	ldr	r0, [r3, #0]
 801f02a:	f7ff bfd2 	b.w	801efd2 <_raise_r>
 801f02e:	bf00      	nop
 801f030:	2000003c 	.word	0x2000003c

0801f034 <_kill_r>:
 801f034:	b538      	push	{r3, r4, r5, lr}
 801f036:	4d07      	ldr	r5, [pc, #28]	@ (801f054 <_kill_r+0x20>)
 801f038:	2300      	movs	r3, #0
 801f03a:	4604      	mov	r4, r0
 801f03c:	4608      	mov	r0, r1
 801f03e:	4611      	mov	r1, r2
 801f040:	602b      	str	r3, [r5, #0]
 801f042:	f7e3 f9cb 	bl	80023dc <_kill>
 801f046:	1c43      	adds	r3, r0, #1
 801f048:	d102      	bne.n	801f050 <_kill_r+0x1c>
 801f04a:	682b      	ldr	r3, [r5, #0]
 801f04c:	b103      	cbz	r3, 801f050 <_kill_r+0x1c>
 801f04e:	6023      	str	r3, [r4, #0]
 801f050:	bd38      	pop	{r3, r4, r5, pc}
 801f052:	bf00      	nop
 801f054:	20027e4c 	.word	0x20027e4c

0801f058 <_getpid_r>:
 801f058:	f7e3 b9b8 	b.w	80023cc <_getpid>

0801f05c <_init>:
 801f05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f05e:	bf00      	nop
 801f060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f062:	bc08      	pop	{r3}
 801f064:	469e      	mov	lr, r3
 801f066:	4770      	bx	lr

0801f068 <_fini>:
 801f068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f06a:	bf00      	nop
 801f06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f06e:	bc08      	pop	{r3}
 801f070:	469e      	mov	lr, r3
 801f072:	4770      	bx	lr
