
Final_ARM_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ee60  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033ac  0801f030  0801f030  00020030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080223dc  080223dc  000241cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080223dc  080223dc  000233dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080223e4  080223e4  000241cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080223e4  080223e4  000233e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080223e8  080223e8  000233e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  080223ec  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  08022478  0002408c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  08022518  0002412c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00027c90  200001cc  080225b8  000241cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20027e5c  080225b8  00024e5c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000241cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   000441d1  00000000  00000000  000241fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009fd8  00000000  00000000  000683cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000031f8  00000000  00000000  000723a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002761  00000000  00000000  000755a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001732c  00000000  00000000  00077d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004f1aa  00000000  00000000  0008f02d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001278ba  00000000  00000000  000de1d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00205a91  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d930  00000000  00000000  00205ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005a  00000000  00000000  00213404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801f018 	.word	0x0801f018

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	0801f018 	.word	0x0801f018

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f002 f8eb 	bl	80027ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f8d2 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 fc24 	bl	8000e34 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ec:	f000 fbc0 	bl	8000d70 <MX_DMA_Init>
  MX_I2C1_Init();
 80005f0:	f000 f9d2 	bl	8000998 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80005f4:	f000 fb5e 	bl	8000cb4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f8:	f000 fb8c 	bl	8000d14 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80005fc:	f000 fb2a 	bl	8000c54 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000600:	f000 f97e 	bl	8000900 <MX_CRC_Init>
  MX_I2C4_Init();
 8000604:	f000 fa08 	bl	8000a18 <MX_I2C4_Init>
  MX_SPI1_Init();
 8000608:	f000 fa46 	bl	8000a98 <MX_SPI1_Init>
  MX_ADC1_Init();
 800060c:	f000 f926 	bl	800085c <MX_ADC1_Init>
  MX_TIM7_Init();
 8000610:	f000 faba 	bl	8000b88 <MX_TIM7_Init>
  MX_UART4_Init();
 8000614:	f000 faee 	bl	8000bf4 <MX_UART4_Init>
  MX_DAC_Init();
 8000618:	f000 f994 	bl	8000944 <MX_DAC_Init>
  MX_SPI4_Init();
 800061c:	f000 fa7a 	bl	8000b14 <MX_SPI4_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000620:	f00e f8e8 	bl	800e7f4 <osKernelInitialize>

  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of UartRx */
  UartRxHandle = osSemaphoreNew(1, 0, &UartRx_attributes);
 8000624:	4a39      	ldr	r2, [pc, #228]	@ (800070c <main+0x130>)
 8000626:	2100      	movs	r1, #0
 8000628:	2001      	movs	r0, #1
 800062a:	f00e fb91 	bl	800ed50 <osSemaphoreNew>
 800062e:	4603      	mov	r3, r0
 8000630:	4a37      	ldr	r2, [pc, #220]	@ (8000710 <main+0x134>)
 8000632:	6013      	str	r3, [r2, #0]

  /* creation of UartTx */
  UartTxHandle = osSemaphoreNew(1, 0, &UartTx_attributes);
 8000634:	4a37      	ldr	r2, [pc, #220]	@ (8000714 <main+0x138>)
 8000636:	2100      	movs	r1, #0
 8000638:	2001      	movs	r0, #1
 800063a:	f00e fb89 	bl	800ed50 <osSemaphoreNew>
 800063e:	4603      	mov	r3, r0
 8000640:	4a35      	ldr	r2, [pc, #212]	@ (8000718 <main+0x13c>)
 8000642:	6013      	str	r3, [r2, #0]

  /* creation of I2cRx */
  I2cRxHandle = osSemaphoreNew(1, 0, &I2cRx_attributes);
 8000644:	4a35      	ldr	r2, [pc, #212]	@ (800071c <main+0x140>)
 8000646:	2100      	movs	r1, #0
 8000648:	2001      	movs	r0, #1
 800064a:	f00e fb81 	bl	800ed50 <osSemaphoreNew>
 800064e:	4603      	mov	r3, r0
 8000650:	4a33      	ldr	r2, [pc, #204]	@ (8000720 <main+0x144>)
 8000652:	6013      	str	r3, [r2, #0]

  /* creation of I2cTx */
  I2cTxHandle = osSemaphoreNew(1, 0, &I2cTx_attributes);
 8000654:	4a33      	ldr	r2, [pc, #204]	@ (8000724 <main+0x148>)
 8000656:	2100      	movs	r1, #0
 8000658:	2001      	movs	r0, #1
 800065a:	f00e fb79 	bl	800ed50 <osSemaphoreNew>
 800065e:	4603      	mov	r3, r0
 8000660:	4a31      	ldr	r2, [pc, #196]	@ (8000728 <main+0x14c>)
 8000662:	6013      	str	r3, [r2, #0]

  /* creation of SpiRx */
  SpiRxHandle = osSemaphoreNew(1, 0, &SpiRx_attributes);
 8000664:	4a31      	ldr	r2, [pc, #196]	@ (800072c <main+0x150>)
 8000666:	2100      	movs	r1, #0
 8000668:	2001      	movs	r0, #1
 800066a:	f00e fb71 	bl	800ed50 <osSemaphoreNew>
 800066e:	4603      	mov	r3, r0
 8000670:	4a2f      	ldr	r2, [pc, #188]	@ (8000730 <main+0x154>)
 8000672:	6013      	str	r3, [r2, #0]

  /* creation of AdcSem */
  AdcSemHandle = osSemaphoreNew(1, 0, &AdcSem_attributes);
 8000674:	4a2f      	ldr	r2, [pc, #188]	@ (8000734 <main+0x158>)
 8000676:	2100      	movs	r1, #0
 8000678:	2001      	movs	r0, #1
 800067a:	f00e fb69 	bl	800ed50 <osSemaphoreNew>
 800067e:	4603      	mov	r3, r0
 8000680:	4a2d      	ldr	r2, [pc, #180]	@ (8000738 <main+0x15c>)
 8000682:	6013      	str	r3, [r2, #0]

  /* creation of TimSem */
  TimSemHandle = osSemaphoreNew(1, 0, &TimSem_attributes);
 8000684:	4a2d      	ldr	r2, [pc, #180]	@ (800073c <main+0x160>)
 8000686:	2100      	movs	r1, #0
 8000688:	2001      	movs	r0, #1
 800068a:	f00e fb61 	bl	800ed50 <osSemaphoreNew>
 800068e:	4603      	mov	r3, r0
 8000690:	4a2b      	ldr	r2, [pc, #172]	@ (8000740 <main+0x164>)
 8000692:	6013      	str	r3, [r2, #0]

  /* creation of SpiTx */
  SpiTxHandle = osSemaphoreNew(1, 0, &SpiTx_attributes);
 8000694:	4a2b      	ldr	r2, [pc, #172]	@ (8000744 <main+0x168>)
 8000696:	2100      	movs	r1, #0
 8000698:	2001      	movs	r0, #1
 800069a:	f00e fb59 	bl	800ed50 <osSemaphoreNew>
 800069e:	4603      	mov	r3, r0
 80006a0:	4a29      	ldr	r2, [pc, #164]	@ (8000748 <main+0x16c>)
 80006a2:	6013      	str	r3, [r2, #0]

  /* creation of SpiSlaveRx */
  SpiSlaveRxHandle = osSemaphoreNew(1, 0, &SpiSlaveRx_attributes);
 80006a4:	4a29      	ldr	r2, [pc, #164]	@ (800074c <main+0x170>)
 80006a6:	2100      	movs	r1, #0
 80006a8:	2001      	movs	r0, #1
 80006aa:	f00e fb51 	bl	800ed50 <osSemaphoreNew>
 80006ae:	4603      	mov	r3, r0
 80006b0:	4a27      	ldr	r2, [pc, #156]	@ (8000750 <main+0x174>)
 80006b2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of testsQ */
  testsQHandle = osMessageQueueNew (16, 4, &testsQ_attributes);
 80006b4:	4a27      	ldr	r2, [pc, #156]	@ (8000754 <main+0x178>)
 80006b6:	2104      	movs	r1, #4
 80006b8:	2010      	movs	r0, #16
 80006ba:	f00e fca3 	bl	800f004 <osMessageQueueNew>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a25      	ldr	r2, [pc, #148]	@ (8000758 <main+0x17c>)
 80006c2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(lwip_initiation, NULL, &defaultTask_attributes);
 80006c4:	4a25      	ldr	r2, [pc, #148]	@ (800075c <main+0x180>)
 80006c6:	2100      	movs	r1, #0
 80006c8:	4825      	ldr	r0, [pc, #148]	@ (8000760 <main+0x184>)
 80006ca:	f00e f925 	bl	800e918 <osThreadNew>
 80006ce:	4603      	mov	r3, r0
 80006d0:	4a24      	ldr	r2, [pc, #144]	@ (8000764 <main+0x188>)
 80006d2:	6013      	str	r3, [r2, #0]

  /* creation of blink_task */
  blink_taskHandle = osThreadNew(blinking_blue, NULL, &blink_task_attributes);
 80006d4:	4a24      	ldr	r2, [pc, #144]	@ (8000768 <main+0x18c>)
 80006d6:	2100      	movs	r1, #0
 80006d8:	4824      	ldr	r0, [pc, #144]	@ (800076c <main+0x190>)
 80006da:	f00e f91d 	bl	800e918 <osThreadNew>
 80006de:	4603      	mov	r3, r0
 80006e0:	4a23      	ldr	r2, [pc, #140]	@ (8000770 <main+0x194>)
 80006e2:	6013      	str	r3, [r2, #0]

  /* creation of udp_task */
  udp_taskHandle = osThreadNew(udp_function, NULL, &udp_task_attributes);
 80006e4:	4a23      	ldr	r2, [pc, #140]	@ (8000774 <main+0x198>)
 80006e6:	2100      	movs	r1, #0
 80006e8:	4823      	ldr	r0, [pc, #140]	@ (8000778 <main+0x19c>)
 80006ea:	f00e f915 	bl	800e918 <osThreadNew>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a22      	ldr	r2, [pc, #136]	@ (800077c <main+0x1a0>)
 80006f2:	6013      	str	r3, [r2, #0]

  /* creation of performing_task */
  performing_taskHandle = osThreadNew(perform_tests, NULL, &performing_task_attributes);
 80006f4:	4a22      	ldr	r2, [pc, #136]	@ (8000780 <main+0x1a4>)
 80006f6:	2100      	movs	r1, #0
 80006f8:	4822      	ldr	r0, [pc, #136]	@ (8000784 <main+0x1a8>)
 80006fa:	f00e f90d 	bl	800e918 <osThreadNew>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a21      	ldr	r2, [pc, #132]	@ (8000788 <main+0x1ac>)
 8000702:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000704:	f00e f8aa 	bl	800e85c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000708:	bf00      	nop
 800070a:	e7fd      	b.n	8000708 <main+0x12c>
 800070c:	08022120 	.word	0x08022120
 8000710:	20000db0 	.word	0x20000db0
 8000714:	08022130 	.word	0x08022130
 8000718:	20000db4 	.word	0x20000db4
 800071c:	08022140 	.word	0x08022140
 8000720:	20000db8 	.word	0x20000db8
 8000724:	08022150 	.word	0x08022150
 8000728:	20000dbc 	.word	0x20000dbc
 800072c:	08022160 	.word	0x08022160
 8000730:	20000dc0 	.word	0x20000dc0
 8000734:	08022170 	.word	0x08022170
 8000738:	20000dc4 	.word	0x20000dc4
 800073c:	08022180 	.word	0x08022180
 8000740:	20000dc8 	.word	0x20000dc8
 8000744:	08022190 	.word	0x08022190
 8000748:	20000dcc 	.word	0x20000dcc
 800074c:	080221a0 	.word	0x080221a0
 8000750:	20000dd0 	.word	0x20000dd0
 8000754:	08022108 	.word	0x08022108
 8000758:	20000dac 	.word	0x20000dac
 800075c:	08022078 	.word	0x08022078
 8000760:	08001241 	.word	0x08001241
 8000764:	20000d9c 	.word	0x20000d9c
 8000768:	0802209c 	.word	0x0802209c
 800076c:	08001255 	.word	0x08001255
 8000770:	20000da0 	.word	0x20000da0
 8000774:	080220c0 	.word	0x080220c0
 8000778:	08001299 	.word	0x08001299
 800077c:	20000da4 	.word	0x20000da4
 8000780:	080220e4 	.word	0x080220e4
 8000784:	080012ad 	.word	0x080012ad
 8000788:	20000da8 	.word	0x20000da8

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	@ 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	2230      	movs	r2, #48	@ 0x30
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f01d fdd0 	bl	801e340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007b0:	f007 fe0c 	bl	80083cc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b4:	4b27      	ldr	r3, [pc, #156]	@ (8000854 <SystemClock_Config+0xc8>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b8:	4a26      	ldr	r2, [pc, #152]	@ (8000854 <SystemClock_Config+0xc8>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c0:	4b24      	ldr	r3, [pc, #144]	@ (8000854 <SystemClock_Config+0xc8>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007cc:	4b22      	ldr	r3, [pc, #136]	@ (8000858 <SystemClock_Config+0xcc>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007d4:	4a20      	ldr	r2, [pc, #128]	@ (8000858 <SystemClock_Config+0xcc>)
 80007d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000858 <SystemClock_Config+0xcc>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007ec:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000800:	2348      	movs	r3, #72	@ 0x48
 8000802:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000808:	2303      	movs	r3, #3
 800080a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	4618      	mov	r0, r3
 8000812:	f007 fdeb 	bl	80083ec <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800081c:	f000 fe06 	bl	800142c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000820:	230f      	movs	r3, #15
 8000822:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000824:	2302      	movs	r3, #2
 8000826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800082c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000830:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2102      	movs	r1, #2
 800083c:	4618      	mov	r0, r3
 800083e:	f008 f879 	bl	8008934 <HAL_RCC_ClockConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000848:	f000 fdf0 	bl	800142c <Error_Handler>
  }
}
 800084c:	bf00      	nop
 800084e:	3750      	adds	r7, #80	@ 0x50
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800
 8000858:	40007000 	.word	0x40007000

0800085c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000862:	463b      	mov	r3, r7
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800086e:	4b21      	ldr	r3, [pc, #132]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000870:	4a21      	ldr	r2, [pc, #132]	@ (80008f8 <MX_ADC1_Init+0x9c>)
 8000872:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000874:	4b1f      	ldr	r3, [pc, #124]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800087a:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <MX_ADC1_Init+0x98>)
 800087c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000880:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000882:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000884:	2201      	movs	r2, #1
 8000886:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000888:	4b1a      	ldr	r3, [pc, #104]	@ (80008f4 <MX_ADC1_Init+0x98>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088e:	4b19      	ldr	r3, [pc, #100]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000896:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <MX_ADC1_Init+0x98>)
 8000898:	2200      	movs	r2, #0
 800089a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800089c:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <MX_ADC1_Init+0x98>)
 800089e:	4a17      	ldr	r2, [pc, #92]	@ (80008fc <MX_ADC1_Init+0xa0>)
 80008a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a2:	4b14      	ldr	r3, [pc, #80]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008a8:	4b12      	ldr	r3, [pc, #72]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008ae:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008bc:	480d      	ldr	r0, [pc, #52]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008be:	f001 ffcd 	bl	800285c <HAL_ADC_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008c8:	f000 fdb0 	bl	800142c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008cc:	230a      	movs	r3, #10
 80008ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008d0:	2301      	movs	r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	@ (80008f4 <MX_ADC1_Init+0x98>)
 80008de:	f002 fa3f 	bl	8002d60 <HAL_ADC_ConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008e8:	f000 fda0 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200001e8 	.word	0x200001e8
 80008f8:	40012000 	.word	0x40012000
 80008fc:	0f000001 	.word	0x0f000001

08000900 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000904:	4b0d      	ldr	r3, [pc, #52]	@ (800093c <MX_CRC_Init+0x3c>)
 8000906:	4a0e      	ldr	r2, [pc, #56]	@ (8000940 <MX_CRC_Init+0x40>)
 8000908:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800090a:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_CRC_Init+0x3c>)
 800090c:	2200      	movs	r2, #0
 800090e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000910:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <MX_CRC_Init+0x3c>)
 8000912:	2200      	movs	r2, #0
 8000914:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000916:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_CRC_Init+0x3c>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800091c:	4b07      	ldr	r3, [pc, #28]	@ (800093c <MX_CRC_Init+0x3c>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000922:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_CRC_Init+0x3c>)
 8000924:	2201      	movs	r2, #1
 8000926:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	@ (800093c <MX_CRC_Init+0x3c>)
 800092a:	f002 fd8b 	bl	8003444 <HAL_CRC_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000934:	f000 fd7a 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000230 	.word	0x20000230
 8000940:	40023000 	.word	0x40023000

08000944 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800094a:	463b      	mov	r3, r7
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_DAC_Init+0x4c>)
 8000954:	4a0f      	ldr	r2, [pc, #60]	@ (8000994 <MX_DAC_Init+0x50>)
 8000956:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000958:	480d      	ldr	r0, [pc, #52]	@ (8000990 <MX_DAC_Init+0x4c>)
 800095a:	f002 ff7d 	bl	8003858 <HAL_DAC_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000964:	f000 fd62 	bl	800142c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000968:	2300      	movs	r3, #0
 800096a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000970:	463b      	mov	r3, r7
 8000972:	2200      	movs	r2, #0
 8000974:	4619      	mov	r1, r3
 8000976:	4806      	ldr	r0, [pc, #24]	@ (8000990 <MX_DAC_Init+0x4c>)
 8000978:	f003 f871 	bl	8003a5e <HAL_DAC_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000982:	f000 fd53 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000254 	.word	0x20000254
 8000994:	40007400 	.word	0x40007400

08000998 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800099c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <MX_I2C1_Init+0x74>)
 800099e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a10 <MX_I2C1_Init+0x78>)
 80009a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a14 <MX_I2C1_Init+0x7c>)
 80009a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 240;
 80009a8:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009aa:	22f0      	movs	r2, #240	@ 0xf0
 80009ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ae:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b4:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009d2:	480e      	ldr	r0, [pc, #56]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009d4:	f005 faae 	bl	8005f34 <HAL_I2C_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009de:	f000 fd25 	bl	800142c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009e2:	2100      	movs	r1, #0
 80009e4:	4809      	ldr	r0, [pc, #36]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009e6:	f007 fb1f 	bl	8008028 <HAL_I2CEx_ConfigAnalogFilter>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009f0:	f000 fd1c 	bl	800142c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009f4:	2100      	movs	r1, #0
 80009f6:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <MX_I2C1_Init+0x74>)
 80009f8:	f007 fb61 	bl	80080be <HAL_I2CEx_ConfigDigitalFilter>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a02:	f000 fd13 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000268 	.word	0x20000268
 8000a10:	40005400 	.word	0x40005400
 8000a14:	00808cd2 	.word	0x00808cd2

08000a18 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a90 <MX_I2C4_Init+0x78>)
 8000a20:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 8000a22:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a24:	4a1b      	ldr	r2, [pc, #108]	@ (8000a94 <MX_I2C4_Init+0x7c>)
 8000a26:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000a28:	4b18      	ldr	r3, [pc, #96]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a34:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000a3a:	4b14      	ldr	r3, [pc, #80]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a40:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a46:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a52:	480e      	ldr	r0, [pc, #56]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a54:	f005 fa6e 	bl	8005f34 <HAL_I2C_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a5e:	f000 fce5 	bl	800142c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a62:	2100      	movs	r1, #0
 8000a64:	4809      	ldr	r0, [pc, #36]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a66:	f007 fadf 	bl	8008028 <HAL_I2CEx_ConfigAnalogFilter>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a70:	f000 fcdc 	bl	800142c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a74:	2100      	movs	r1, #0
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <MX_I2C4_Init+0x74>)
 8000a78:	f007 fb21 	bl	80080be <HAL_I2CEx_ConfigDigitalFilter>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a82:	f000 fcd3 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200002bc 	.word	0x200002bc
 8000a90:	40006000 	.word	0x40006000
 8000a94:	00808cd2 	.word	0x00808cd2

08000a98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000b10 <MX_SPI1_Init+0x78>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000aa4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000aa8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aaa:	4b18      	ldr	r3, [pc, #96]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab0:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ab2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000ab6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000abe:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ac6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ace:	2230      	movs	r2, #48	@ 0x30
 8000ad0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ae0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ae4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ae6:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000ae8:	2207      	movs	r2, #7
 8000aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aec:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000af4:	2208      	movs	r2, #8
 8000af6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000af8:	4804      	ldr	r0, [pc, #16]	@ (8000b0c <MX_SPI1_Init+0x74>)
 8000afa:	f008 fd63 	bl	80095c4 <HAL_SPI_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000b04:	f000 fc92 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200003d0 	.word	0x200003d0
 8000b10:	40013000 	.word	0x40013000

08000b14 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000b18:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <MX_SPI4_Init+0x6c>)
 8000b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000b84 <MX_SPI4_Init+0x70>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8000b1e:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <MX_SPI4_Init+0x6c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000b24:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <MX_SPI4_Init+0x6c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b2a:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <MX_SPI4_Init+0x6c>)
 8000b2c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000b30:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <MX_SPI4_Init+0x6c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b38:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <MX_SPI4_Init+0x6c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <MX_SPI4_Init+0x6c>)
 8000b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b44:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <MX_SPI4_Init+0x6c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <MX_SPI4_Init+0x6c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <MX_SPI4_Init+0x6c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000b58:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <MX_SPI4_Init+0x6c>)
 8000b5a:	2207      	movs	r2, #7
 8000b5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <MX_SPI4_Init+0x6c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <MX_SPI4_Init+0x6c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	@ (8000b80 <MX_SPI4_Init+0x6c>)
 8000b6c:	f008 fd2a 	bl	80095c4 <HAL_SPI_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_SPI4_Init+0x66>
  {
    Error_Handler();
 8000b76:	f000 fc59 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000434 	.word	0x20000434
 8000b84:	40013400 	.word	0x40013400

08000b88 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b98:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000b9a:	4a15      	ldr	r2, [pc, #84]	@ (8000bf0 <MX_TIM7_Init+0x68>)
 8000b9c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 48000 - 1;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000ba0:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8000ba4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100 - 1;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000bae:	2263      	movs	r2, #99	@ 0x63
 8000bb0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000bb8:	480c      	ldr	r0, [pc, #48]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000bba:	f00a f91f 	bl	800adfc <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000bc4:	f000 fc32 	bl	800142c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	@ (8000bec <MX_TIM7_Init+0x64>)
 8000bd6:	f00a fbe7 	bl	800b3a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000be0:	f000 fc24 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000618 	.word	0x20000618
 8000bf0:	40001400 	.word	0x40001400

08000bf4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000bfa:	4a15      	ldr	r2, [pc, #84]	@ (8000c50 <MX_UART4_Init+0x5c>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b11      	ldr	r3, [pc, #68]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b09      	ldr	r3, [pc, #36]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	@ (8000c4c <MX_UART4_Init+0x58>)
 8000c38:	f00a fc62 	bl	800b500 <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000c42:	f000 fbf3 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000664 	.word	0x20000664
 8000c50:	40004c00 	.word	0x40004c00

08000c54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c58:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c5a:	4a15      	ldr	r2, [pc, #84]	@ (8000cb0 <MX_USART2_UART_Init+0x5c>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b09      	ldr	r3, [pc, #36]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c90:	4b06      	ldr	r3, [pc, #24]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	@ (8000cac <MX_USART2_UART_Init+0x58>)
 8000c98:	f00a fc32 	bl	800b500 <HAL_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ca2:	f000 fbc3 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	200006ec 	.word	0x200006ec
 8000cb0:	40004400 	.word	0x40004400

08000cb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cb8:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cba:	4a15      	ldr	r2, [pc, #84]	@ (8000d10 <MX_USART3_UART_Init+0x5c>)
 8000cbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cbe:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cda:	220c      	movs	r2, #12
 8000cdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <MX_USART3_UART_Init+0x58>)
 8000cf8:	f00a fc02 	bl	800b500 <HAL_UART_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d02:	f000 fb93 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000774 	.word	0x20000774
 8000d10:	40004800 	.word	0x40004800

08000d14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d18:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d1a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d22:	2206      	movs	r2, #6
 8000d24:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d26:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d28:	2202      	movs	r2, #2
 8000d2a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d32:	4b0e      	ldr	r3, [pc, #56]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d34:	2202      	movs	r2, #2
 8000d36:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d44:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d4a:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d56:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d58:	f007 f9fd 	bl	8008156 <HAL_PCD_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d62:	f000 fb63 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200008bc 	.word	0x200008bc

08000d70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d76:	4b2e      	ldr	r3, [pc, #184]	@ (8000e30 <MX_DMA_Init+0xc0>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a2d      	ldr	r2, [pc, #180]	@ (8000e30 <MX_DMA_Init+0xc0>)
 8000d7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b2b      	ldr	r3, [pc, #172]	@ (8000e30 <MX_DMA_Init+0xc0>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d8e:	4b28      	ldr	r3, [pc, #160]	@ (8000e30 <MX_DMA_Init+0xc0>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a27      	ldr	r2, [pc, #156]	@ (8000e30 <MX_DMA_Init+0xc0>)
 8000d94:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9a:	4b25      	ldr	r3, [pc, #148]	@ (8000e30 <MX_DMA_Init+0xc0>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2106      	movs	r1, #6
 8000daa:	200b      	movs	r0, #11
 8000dac:	f002 fb12 	bl	80033d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000db0:	200b      	movs	r0, #11
 8000db2:	f002 fb2b 	bl	800340c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 6, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2106      	movs	r1, #6
 8000dba:	200d      	movs	r0, #13
 8000dbc:	f002 fb0a 	bl	80033d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000dc0:	200d      	movs	r0, #13
 8000dc2:	f002 fb23 	bl	800340c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2106      	movs	r1, #6
 8000dca:	2010      	movs	r0, #16
 8000dcc:	f002 fb02 	bl	80033d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000dd0:	2010      	movs	r0, #16
 8000dd2:	f002 fb1b 	bl	800340c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 6, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2106      	movs	r1, #6
 8000dda:	2011      	movs	r0, #17
 8000ddc:	f002 fafa 	bl	80033d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000de0:	2011      	movs	r0, #17
 8000de2:	f002 fb13 	bl	800340c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2105      	movs	r1, #5
 8000dea:	2038      	movs	r0, #56	@ 0x38
 8000dec:	f002 faf2 	bl	80033d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000df0:	2038      	movs	r0, #56	@ 0x38
 8000df2:	f002 fb0b 	bl	800340c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2105      	movs	r1, #5
 8000dfa:	2039      	movs	r0, #57	@ 0x39
 8000dfc:	f002 faea 	bl	80033d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e00:	2039      	movs	r0, #57	@ 0x39
 8000e02:	f002 fb03 	bl	800340c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2105      	movs	r1, #5
 8000e0a:	203a      	movs	r0, #58	@ 0x3a
 8000e0c:	f002 fae2 	bl	80033d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e10:	203a      	movs	r0, #58	@ 0x3a
 8000e12:	f002 fafb 	bl	800340c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2105      	movs	r1, #5
 8000e1a:	203b      	movs	r0, #59	@ 0x3b
 8000e1c:	f002 fada 	bl	80033d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000e20:	203b      	movs	r0, #59	@ 0x3b
 8000e22:	f002 faf3 	bl	800340c <HAL_NVIC_EnableIRQ>

}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800

08000e34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08e      	sub	sp, #56	@ 0x38
 8000e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e4a:	4b59      	ldr	r3, [pc, #356]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a58      	ldr	r2, [pc, #352]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000e50:	f043 0310 	orr.w	r3, r3, #16
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b56      	ldr	r3, [pc, #344]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0310 	and.w	r3, r3, #16
 8000e5e:	623b      	str	r3, [r7, #32]
 8000e60:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e62:	4b53      	ldr	r3, [pc, #332]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a52      	ldr	r2, [pc, #328]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b50      	ldr	r3, [pc, #320]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	61fb      	str	r3, [r7, #28]
 8000e78:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e7a:	4b4d      	ldr	r3, [pc, #308]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a4c      	ldr	r2, [pc, #304]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000e80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b4a      	ldr	r3, [pc, #296]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e8e:	61bb      	str	r3, [r7, #24]
 8000e90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	4b47      	ldr	r3, [pc, #284]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	4a46      	ldr	r2, [pc, #280]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9e:	4b44      	ldr	r3, [pc, #272]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	4b41      	ldr	r3, [pc, #260]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	4a40      	ldr	r2, [pc, #256]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb6:	4b3e      	ldr	r3, [pc, #248]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a3a      	ldr	r2, [pc, #232]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000ec8:	f043 0320 	orr.w	r3, r3, #32
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b38      	ldr	r3, [pc, #224]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0320 	and.w	r3, r3, #32
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eda:	4b35      	ldr	r3, [pc, #212]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	4a34      	ldr	r2, [pc, #208]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000ee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee6:	4b32      	ldr	r3, [pc, #200]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	4a2e      	ldr	r2, [pc, #184]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000ef8:	f043 0308 	orr.w	r3, r3, #8
 8000efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efe:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb0 <MX_GPIO_Init+0x17c>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000f10:	4828      	ldr	r0, [pc, #160]	@ (8000fb4 <MX_GPIO_Init+0x180>)
 8000f12:	f004 ffb7 	bl	8005e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000f16:	2201      	movs	r2, #1
 8000f18:	2101      	movs	r1, #1
 8000f1a:	4827      	ldr	r0, [pc, #156]	@ (8000fb8 <MX_GPIO_Init+0x184>)
 8000f1c:	f004 ffb2 	bl	8005e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2140      	movs	r1, #64	@ 0x40
 8000f24:	4824      	ldr	r0, [pc, #144]	@ (8000fb8 <MX_GPIO_Init+0x184>)
 8000f26:	f004 ffad 	bl	8005e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f30:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f3e:	4619      	mov	r1, r3
 8000f40:	481e      	ldr	r0, [pc, #120]	@ (8000fbc <MX_GPIO_Init+0x188>)
 8000f42:	f004 fce7 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000f46:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4815      	ldr	r0, [pc, #84]	@ (8000fb4 <MX_GPIO_Init+0x180>)
 8000f60:	f004 fcd8 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_Pin PG6 */
  GPIO_InitStruct.Pin = CS_Pin|GPIO_PIN_6;
 8000f64:	2341      	movs	r3, #65	@ 0x41
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480f      	ldr	r0, [pc, #60]	@ (8000fb8 <MX_GPIO_Init+0x184>)
 8000f7c:	f004 fcca 	bl	8005914 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f80:	2380      	movs	r3, #128	@ 0x80
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f90:	4619      	mov	r1, r3
 8000f92:	4809      	ldr	r0, [pc, #36]	@ (8000fb8 <MX_GPIO_Init+0x184>)
 8000f94:	f004 fcbe 	bl	8005914 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2105      	movs	r1, #5
 8000f9c:	2028      	movs	r0, #40	@ 0x28
 8000f9e:	f002 fa19 	bl	80033d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fa2:	2028      	movs	r0, #40	@ 0x28
 8000fa4:	f002 fa32 	bl	800340c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fa8:	bf00      	nop
 8000faa:	3738      	adds	r7, #56	@ 0x38
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020400 	.word	0x40020400
 8000fb8:	40021800 	.word	0x40021800
 8000fbc:	40020800 	.word	0x40020800

08000fc0 <vApplicationStackOverflowHook>:
 *
 * @param xTask Task handle of the task whose stack overflowed.
 * @param pcTaskName Pointer to the name of the task whose stack overflowed.
 */
void vApplicationStackOverflowHook(TaskHandle_t xTask, signed char *pcTaskName)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
    // A stack overflow has been detected. This is a critical error.
    // The system is in an unstable state.

    printf("\n\r!!! STACK OVERFLOW DETECTED !!!\n\r");
 8000fca:	4811      	ldr	r0, [pc, #68]	@ (8001010 <vApplicationStackOverflowHook+0x50>)
 8000fcc:	f01d f860 	bl	801e090 <iprintf>
    printf("Task: %s\n\r", pcTaskName);
 8000fd0:	6839      	ldr	r1, [r7, #0]
 8000fd2:	4810      	ldr	r0, [pc, #64]	@ (8001014 <vApplicationStackOverflowHook+0x54>)
 8000fd4:	f01d f85c 	bl	801e090 <iprintf>
    printf("Handle: 0x%lX\n\r", (uint32_t)xTask);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480e      	ldr	r0, [pc, #56]	@ (8001018 <vApplicationStackOverflowHook+0x58>)
 8000fde:	f01d f857 	bl	801e090 <iprintf>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fe6:	b672      	cpsid	i
 8000fe8:	f383 8811 	msr	BASEPRI, r3
 8000fec:	f3bf 8f6f 	isb	sy
 8000ff0:	f3bf 8f4f 	dsb	sy
 8000ff4:	b662      	cpsie	i
 8000ff6:	60fb      	str	r3, [r7, #12]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000ff8:	bf00      	nop
    // Disable interrupts to prevent further execution and potential damage
    taskDISABLE_INTERRUPTS();
    for(;;)
    {
        // RED LED toggle for visual indication
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000ffa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ffe:	4807      	ldr	r0, [pc, #28]	@ (800101c <vApplicationStackOverflowHook+0x5c>)
 8001000:	f004 ff59 	bl	8005eb6 <HAL_GPIO_TogglePin>
        osDelay(1000);
 8001004:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001008:	f00d fd2c 	bl	800ea64 <osDelay>
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800100c:	bf00      	nop
 800100e:	e7f4      	b.n	8000ffa <vApplicationStackOverflowHook+0x3a>
 8001010:	0801f0b8 	.word	0x0801f0b8
 8001014:	0801f0dc 	.word	0x0801f0dc
 8001018:	0801f0e8 	.word	0x0801f0e8
 800101c:	40020400 	.word	0x40020400

08001020 <udp_receive_init>:
    }
}

void udp_receive_init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
    udp_pcb_handle = udp_new();
 8001024:	f019 fbe6 	bl	801a7f4 <udp_new>
 8001028:	4603      	mov	r3, r0
 800102a:	4a13      	ldr	r2, [pc, #76]	@ (8001078 <udp_receive_init+0x58>)
 800102c:	6013      	str	r3, [r2, #0]
    if (!udp_pcb_handle) {
 800102e:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <udp_receive_init+0x58>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d103      	bne.n	800103e <udp_receive_init+0x1e>
        printf("Failed to create UDP PCB\n\r");
 8001036:	4811      	ldr	r0, [pc, #68]	@ (800107c <udp_receive_init+0x5c>)
 8001038:	f01d f82a 	bl	801e090 <iprintf>
        return;
 800103c:	e01a      	b.n	8001074 <udp_receive_init+0x54>
    }

    if (udp_bind(udp_pcb_handle, IP_ADDR_ANY, LOCAL_PORT) != ERR_OK) {
 800103e:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <udp_receive_init+0x58>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f241 328d 	movw	r2, #5005	@ 0x138d
 8001046:	490e      	ldr	r1, [pc, #56]	@ (8001080 <udp_receive_init+0x60>)
 8001048:	4618      	mov	r0, r3
 800104a:	f019 fb2b 	bl	801a6a4 <udp_bind>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <udp_receive_init+0x3c>
        printf("UDP bind failed\n\r");
 8001054:	480b      	ldr	r0, [pc, #44]	@ (8001084 <udp_receive_init+0x64>)
 8001056:	f01d f81b 	bl	801e090 <iprintf>
        return;
 800105a:	e00b      	b.n	8001074 <udp_receive_init+0x54>
    }

    udp_recv(udp_pcb_handle, udp_receive_callback, NULL);
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <udp_receive_init+0x58>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2200      	movs	r2, #0
 8001062:	4909      	ldr	r1, [pc, #36]	@ (8001088 <udp_receive_init+0x68>)
 8001064:	4618      	mov	r0, r3
 8001066:	f019 fba5 	bl	801a7b4 <udp_recv>
    printf("UDP ready, listening on port %d\n\r", LOCAL_PORT);
 800106a:	f241 318d 	movw	r1, #5005	@ 0x138d
 800106e:	4807      	ldr	r0, [pc, #28]	@ (800108c <udp_receive_init+0x6c>)
 8001070:	f01d f80e 	bl	801e090 <iprintf>
}
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000dd4 	.word	0x20000dd4
 800107c:	0801f0f8 	.word	0x0801f0f8
 8001080:	080222ec 	.word	0x080222ec
 8001084:	0801f114 	.word	0x0801f114
 8001088:	08001091 	.word	0x08001091
 800108c:	0801f128 	.word	0x0801f128

08001090 <udp_receive_callback>:
 * 1. alters it to a test_command_t struct
 * 2. sends it to execution queue.
 *
 * */
void udp_receive_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08e      	sub	sp, #56	@ 0x38
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
 800109c:	603b      	str	r3, [r7, #0]
    if (p != NULL) {
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d05e      	beq.n	8001162 <udp_receive_callback+0xd2>
        // Copy the sender's IP address
        ip_addr_copy(g_server_addr, *addr);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a35      	ldr	r2, [pc, #212]	@ (8001180 <udp_receive_callback+0xf0>)
 80010aa:	6013      	str	r3, [r2, #0]
        // Copy the sender's port
        g_server_port = port;
 80010ac:	4a35      	ldr	r2, [pc, #212]	@ (8001184 <udp_receive_callback+0xf4>)
 80010ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80010b2:	8013      	strh	r3, [r2, #0]

        if (p->len >= sizeof(test_command_t))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	895b      	ldrh	r3, [r3, #10]
 80010b8:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 80010bc:	d942      	bls.n	8001144 <udp_receive_callback+0xb4>
        {
            test_command_t *cmd = (test_command_t *)pvPortMalloc(sizeof(test_command_t));
 80010be:	f240 1007 	movw	r0, #263	@ 0x107
 80010c2:	f011 fa81 	bl	80125c8 <pvPortMalloc>
 80010c6:	4603      	mov	r3, r0
 80010c8:	637b      	str	r3, [r7, #52]	@ 0x34
            if (cmd != NULL)
 80010ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d02a      	beq.n	8001126 <udp_receive_callback+0x96>
            {
			   // Copy the data from the pbuf payload to the allocated memory
			   memcpy(cmd, p->payload, sizeof(test_command_t)); // Only copy the struct size
 80010d0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f240 1207 	movw	r2, #263	@ 0x107
 80010da:	4619      	mov	r1, r3
 80010dc:	f01d fa03 	bl	801e4e6 <memcpy>

	            // Send the POINTER to the newly allocated and copied* data to the queue
	            if (xQueueSendToBack(testsQHandle, &cmd, 1) != pdPASS) // Pass address of pointer
 80010e0:	4b29      	ldr	r3, [pc, #164]	@ (8001188 <udp_receive_callback+0xf8>)
 80010e2:	6818      	ldr	r0, [r3, #0]
 80010e4:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80010e8:	2300      	movs	r3, #0
 80010ea:	2201      	movs	r2, #1
 80010ec:	f00e fc6a 	bl	800f9c4 <xQueueGenericSend>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d00f      	beq.n	8001116 <udp_receive_callback+0x86>
	            {
	            	result_pro_t response={NULL, TEST_ERR};
 80010f6:	2300      	movs	r3, #0
 80010f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80010fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010fe:	863b      	strh	r3, [r7, #48]	@ 0x30
	            	send_response(response);
 8001100:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001104:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001108:	f000 f844 	bl	8001194 <send_response>
	                vPortFree(cmd); // If send fails, free the allocated memory
 800110c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800110e:	4618      	mov	r0, r3
 8001110:	f011 fb28 	bl	8012764 <vPortFree>
 8001114:	e021      	b.n	800115a <udp_receive_callback+0xca>
	            } else {
	                // notify if successfully sent to queue
	                xTaskNotifyGive(performing_taskHandle);
 8001116:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <udp_receive_callback+0xfc>)
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	2300      	movs	r3, #0
 800111c:	2202      	movs	r2, #2
 800111e:	2100      	movs	r1, #0
 8001120:	f010 fb94 	bl	801184c <xTaskGenericNotify>
 8001124:	e019      	b.n	800115a <udp_receive_callback+0xca>
	            }
            }
            else{
            	result_pro_t response={NULL, TEST_ERR};
 8001126:	2300      	movs	r3, #0
 8001128:	627b      	str	r3, [r7, #36]	@ 0x24
 800112a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800112e:	853b      	strh	r3, [r7, #40]	@ 0x28
            	send_response(response);
 8001130:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001134:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001138:	f000 f82c 	bl	8001194 <send_response>
                printf("Failed to allocate memory for test_command_t!\n\r"); // Debug printf
 800113c:	4814      	ldr	r0, [pc, #80]	@ (8001190 <udp_receive_callback+0x100>)
 800113e:	f01c ffa7 	bl	801e090 <iprintf>
 8001142:	e00a      	b.n	800115a <udp_receive_callback+0xca>
            }
        } else {
        	result_pro_t response={NULL, TEST_ERR};
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
 8001148:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800114c:	843b      	strh	r3, [r7, #32]
        	send_response(response);
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001156:	f000 f81d 	bl	8001194 <send_response>
        }
        pbuf_free(p);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f013 f9ae 	bl	80144bc <pbuf_free>
    }
    else{
    	result_pro_t response={NULL, TEST_ERR};
    	send_response(response);
    }
}
 8001160:	e00a      	b.n	8001178 <udp_receive_callback+0xe8>
    	result_pro_t response={NULL, TEST_ERR};
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800116a:	833b      	strh	r3, [r7, #24]
    	send_response(response);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001174:	f000 f80e 	bl	8001194 <send_response>
}
 8001178:	bf00      	nop
 800117a:	3738      	adds	r7, #56	@ 0x38
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000dd8 	.word	0x20000dd8
 8001184:	20000ddc 	.word	0x20000ddc
 8001188:	20000dac 	.word	0x20000dac
 800118c:	20000da8 	.word	0x20000da8
 8001190:	0801f14c 	.word	0x0801f14c

08001194 <send_response>:

int send_response(result_pro_t result)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	463b      	mov	r3, r7
 800119c:	e883 0003 	stmia.w	r3, {r0, r1}
    // Check if we have a valid sender address
    if (ip_addr_isany(&g_server_addr) == 0)
 80011a0:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <send_response+0x74>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d029      	beq.n	80011fc <send_response+0x68>
    {
        // Create a new pbuf for the response data
        struct pbuf* p = pbuf_alloc(PBUF_TRANSPORT, sizeof(result_pro_t), PBUF_RAM);
 80011a8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80011ac:	2106      	movs	r1, #6
 80011ae:	2036      	movs	r0, #54	@ 0x36
 80011b0:	f012 fea0 	bl	8013ef4 <pbuf_alloc>
 80011b4:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d01c      	beq.n	80011f6 <send_response+0x62>
        {
            // Copy the result struct into the pbuf payload
            memcpy(p->payload, &result, sizeof(result_pro_t));
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	461a      	mov	r2, r3
 80011c2:	463b      	mov	r3, r7
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	6010      	str	r0, [r2, #0]
 80011c8:	889b      	ldrh	r3, [r3, #4]
 80011ca:	8093      	strh	r3, [r2, #4]

            // Send the response to the stored address and port
            if(udp_sendto(udp_pcb_handle, p, &g_server_addr, g_server_port) != ERR_OK)
 80011cc:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <send_response+0x78>)
 80011ce:	6818      	ldr	r0, [r3, #0]
 80011d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <send_response+0x7c>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001208 <send_response+0x74>)
 80011d6:	68f9      	ldr	r1, [r7, #12]
 80011d8:	f019 f8ae 	bl	801a338 <udp_sendto>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <send_response+0x5a>
            {
                pbuf_free(p);
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f013 f96a 	bl	80144bc <pbuf_free>
            	return -1;
 80011e8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ec:	e008      	b.n	8001200 <send_response+0x6c>
            }
            // Free the pbuf
            pbuf_free(p);
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f013 f964 	bl	80144bc <pbuf_free>
        }
    }
    else{
    	return -1;
    }
}
 80011f4:	e004      	b.n	8001200 <send_response+0x6c>
        	return -1;
 80011f6:	f04f 33ff 	mov.w	r3, #4294967295
 80011fa:	e001      	b.n	8001200 <send_response+0x6c>
    	return -1;
 80011fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001200:	4618      	mov	r0, r3
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000dd8 	.word	0x20000dd8
 800120c:	20000dd4 	.word	0x20000dd4
 8001210:	20000ddc 	.word	0x20000ddc

08001214 <calculate_crc>:


uint32_t calculate_crc(uint8_t *data, size_t length) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
    // HAL_CRC_Calculate expects 32-bit words, so convert length
    uint32_t word_count = (length + 3) / 4; // Round up
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	3303      	adds	r3, #3
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	60fb      	str	r3, [r7, #12]
    return HAL_CRC_Calculate(&hcrc, (uint32_t *)data, word_count);
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	6879      	ldr	r1, [r7, #4]
 800122a:	4804      	ldr	r0, [pc, #16]	@ (800123c <calculate_crc+0x28>)
 800122c:	f002 f96e 	bl	800350c <HAL_CRC_Calculate>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000230 	.word	0x20000230

08001240 <lwip_initiation>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_lwip_initiation */
void lwip_initiation(void *argument)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001248:	f00c fc74 	bl	800db34 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800124c:	2001      	movs	r0, #1
 800124e:	f00d fc09 	bl	800ea64 <osDelay>
 8001252:	e7fb      	b.n	800124c <lwip_initiation+0xc>

08001254 <blinking_blue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blinking_blue */
void blinking_blue(void *argument)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinking_blue */
  /* Infinite loop */
  for(;;)
  {
	/* visual heartbeat */
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800125c:	2180      	movs	r1, #128	@ 0x80
 800125e:	4804      	ldr	r0, [pc, #16]	@ (8001270 <blinking_blue+0x1c>)
 8001260:	f004 fe29 	bl	8005eb6 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8001264:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001268:	f00d fbfc 	bl	800ea64 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800126c:	bf00      	nop
 800126e:	e7f5      	b.n	800125c <blinking_blue+0x8>
 8001270:	40020400 	.word	0x40020400

08001274 <__io_putchar>:
  /* USER CODE END blinking_blue */
}

/* USER CODE BEGIN Header_udp_function */
int __io_putchar(int ch)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800127c:	1d39      	adds	r1, r7, #4
 800127e:	f04f 33ff 	mov.w	r3, #4294967295
 8001282:	2201      	movs	r2, #1
 8001284:	4803      	ldr	r0, [pc, #12]	@ (8001294 <__io_putchar+0x20>)
 8001286:	f00a f989 	bl	800b59c <HAL_UART_Transmit>
    return ch;
 800128a:	687b      	ldr	r3, [r7, #4]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000774 	.word	0x20000774

08001298 <udp_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_udp_function */
void udp_function(void *argument)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN udp_function */
	udp_receive_init();
 80012a0:	f7ff febe 	bl	8001020 <udp_receive_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f00d fbdd 	bl	800ea64 <osDelay>
 80012aa:	e7fb      	b.n	80012a4 <udp_function+0xc>

080012ac <perform_tests>:
* @param argument: Not used (using queue instead)
* @retval None
*/
/* USER CODE END Header_perform_tests */
void perform_tests(void *argument)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	test_command_t *cmd;

  /* Infinite loop */
  for(;;)
  {
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // waiting for a notification
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295
 80012b8:	2001      	movs	r0, #1
 80012ba:	f010 fa7b 	bl	80117b4 <ulTaskNotifyTake>

	if (xQueueReceive(testsQHandle, &cmd, 0) != pdPASS)
 80012be:	4b40      	ldr	r3, [pc, #256]	@ (80013c0 <perform_tests+0x114>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f107 0114 	add.w	r1, r7, #20
 80012c6:	2200      	movs	r2, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f00e fdc1 	bl	800fe50 <xQueueReceive>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d003      	beq.n	80012dc <perform_tests+0x30>
	{
		printf("perform_tests: No test command received\n\r");
 80012d4:	483b      	ldr	r0, [pc, #236]	@ (80013c4 <perform_tests+0x118>)
 80012d6:	f01c fedb 	bl	801e090 <iprintf>
 80012da:	e7eb      	b.n	80012b4 <perform_tests+0x8>
		continue;
	}
	result_pro_t response;

	if(cmd->bit_pattern_length > MAX_BIT_PATTERN_LENGTH || cmd->test_id == NULL || cmd->iterations < 1){
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <perform_tests+0x40>
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	795b      	ldrb	r3, [r3, #5]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d108      	bne.n	80012fe <perform_tests+0x52>
		response.test_result =TEST_ERR;
 80012ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80012f0:	823b      	strh	r3, [r7, #16]
		send_response(response);
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012fa:	f7ff ff4b 	bl	8001194 <send_response>
	}
	response.test_id = cmd->test_id;
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	60fb      	str	r3, [r7, #12]

	switch (cmd->peripheral){
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	791b      	ldrb	r3, [r3, #4]
 8001308:	3b01      	subs	r3, #1
 800130a:	2b0f      	cmp	r3, #15
 800130c:	d845      	bhi.n	800139a <perform_tests+0xee>
 800130e:	a201      	add	r2, pc, #4	@ (adr r2, 8001314 <perform_tests+0x68>)
 8001310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001314:	08001355 	.word	0x08001355
 8001318:	08001363 	.word	0x08001363
 800131c:	0800139b 	.word	0x0800139b
 8001320:	08001371 	.word	0x08001371
 8001324:	0800139b 	.word	0x0800139b
 8001328:	0800139b 	.word	0x0800139b
 800132c:	0800139b 	.word	0x0800139b
 8001330:	0800137f 	.word	0x0800137f
 8001334:	0800139b 	.word	0x0800139b
 8001338:	0800139b 	.word	0x0800139b
 800133c:	0800139b 	.word	0x0800139b
 8001340:	0800139b 	.word	0x0800139b
 8001344:	0800139b 	.word	0x0800139b
 8001348:	0800139b 	.word	0x0800139b
 800134c:	0800139b 	.word	0x0800139b
 8001350:	0800138d 	.word	0x0800138d
	case TIMER:
		response.test_result = timer_testing(cmd);
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	4618      	mov	r0, r3
 8001358:	f01c fba0 	bl	801da9c <timer_testing>
 800135c:	4603      	mov	r3, r0
 800135e:	823b      	strh	r3, [r7, #16]
		break;
 8001360:	e01f      	b.n	80013a2 <perform_tests+0xf6>
	case UART:
		response.test_result = uart_testing(cmd);
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	4618      	mov	r0, r3
 8001366:	f01c fbcf 	bl	801db08 <uart_testing>
 800136a:	4603      	mov	r3, r0
 800136c:	823b      	strh	r3, [r7, #16]
		break;
 800136e:	e018      	b.n	80013a2 <perform_tests+0xf6>
	case SPI:
		response.test_result = spi_testing(cmd);
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	4618      	mov	r0, r3
 8001374:	f01c f93a 	bl	801d5ec <spi_testing>
 8001378:	4603      	mov	r3, r0
 800137a:	823b      	strh	r3, [r7, #16]
		break;
 800137c:	e011      	b.n	80013a2 <perform_tests+0xf6>
	case I2C:
		response.test_result = i2c_testing(cmd);
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	4618      	mov	r0, r3
 8001382:	f01b fef7 	bl	801d174 <i2c_testing>
 8001386:	4603      	mov	r3, r0
 8001388:	823b      	strh	r3, [r7, #16]
		break;
 800138a:	e00a      	b.n	80013a2 <perform_tests+0xf6>
	case ADC_P:
		response.test_result = adc_testing(cmd);
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	4618      	mov	r0, r3
 8001390:	f01b fe30 	bl	801cff4 <adc_testing>
 8001394:	4603      	mov	r3, r0
 8001396:	823b      	strh	r3, [r7, #16]
		break;
 8001398:	e003      	b.n	80013a2 <perform_tests+0xf6>
	default:
		response.test_result = TEST_ERR;
 800139a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800139e:	823b      	strh	r3, [r7, #16]
        break;
 80013a0:	bf00      	nop
	}
    vPortFree(cmd);
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f011 f9dd 	bl	8012764 <vPortFree>
    osDelay(1);
 80013aa:	2001      	movs	r0, #1
 80013ac:	f00d fb5a 	bl	800ea64 <osDelay>
    send_response(response);
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80013b8:	f7ff feec 	bl	8001194 <send_response>
  {
 80013bc:	e77a      	b.n	80012b4 <perform_tests+0x8>
 80013be:	bf00      	nop
 80013c0:	20000dac 	.word	0x20000dac
 80013c4:	0801f17c 	.word	0x0801f17c

080013c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a11      	ldr	r2, [pc, #68]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d101      	bne.n	80013de <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80013da:	f001 f9fb 	bl	80027d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001420 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d114      	bne.n	8001412 <HAL_TIM_PeriodElapsedCallback+0x4a>
  {
	    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]

	    // Use the ISR-safe function to give the semaphore
	    xSemaphoreGiveFromISR(TimSemHandle, &xHigherPriorityTaskWoken);
 80013ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f107 020c 	add.w	r2, r7, #12
 80013f4:	4611      	mov	r1, r2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f00e fc91 	bl	800fd1e <xQueueGiveFromISR>

	    // Call this if a higher priority task was unblocked
	    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <HAL_TIM_PeriodElapsedCallback+0x4a>
 8001402:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001404:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	f3bf 8f4f 	dsb	sy
 800140e:	f3bf 8f6f 	isb	sy
  }
  /* USER CODE END Callback 1 */
}
 8001412:	bf00      	nop
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40001000 	.word	0x40001000
 8001420:	40001400 	.word	0x40001400
 8001424:	20000dc8 	.word	0x20000dc8
 8001428:	e000ed04 	.word	0xe000ed04

0800142c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
}
 8001432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <Error_Handler+0x8>

08001438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <HAL_MspInit+0x6c>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001442:	4a18      	ldr	r2, [pc, #96]	@ (80014a4 <HAL_MspInit+0x6c>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001448:	6413      	str	r3, [r2, #64]	@ 0x40
 800144a:	4b16      	ldr	r3, [pc, #88]	@ (80014a4 <HAL_MspInit+0x6c>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <HAL_MspInit+0x6c>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145a:	4a12      	ldr	r2, [pc, #72]	@ (80014a4 <HAL_MspInit+0x6c>)
 800145c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001460:	6453      	str	r3, [r2, #68]	@ 0x44
 8001462:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <HAL_MspInit+0x6c>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	210f      	movs	r1, #15
 8001472:	f06f 0001 	mvn.w	r0, #1
 8001476:	f001 ffad 	bl	80033d4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2105      	movs	r1, #5
 800147e:	2005      	movs	r0, #5
 8001480:	f001 ffa8 	bl	80033d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001484:	2005      	movs	r0, #5
 8001486:	f001 ffc1 	bl	800340c <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 5, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2105      	movs	r1, #5
 800148e:	2051      	movs	r0, #81	@ 0x51
 8001490:	f001 ffa0 	bl	80033d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8001494:	2051      	movs	r0, #81	@ 0x51
 8001496:	f001 ffb9 	bl	800340c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800

080014a8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	@ 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a19      	ldr	r2, [pc, #100]	@ (800152c <HAL_ADC_MspInit+0x84>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d12b      	bne.n	8001522 <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014ca:	4b19      	ldr	r3, [pc, #100]	@ (8001530 <HAL_ADC_MspInit+0x88>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ce:	4a18      	ldr	r2, [pc, #96]	@ (8001530 <HAL_ADC_MspInit+0x88>)
 80014d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d6:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <HAL_ADC_MspInit+0x88>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e2:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <HAL_ADC_MspInit+0x88>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a12      	ldr	r2, [pc, #72]	@ (8001530 <HAL_ADC_MspInit+0x88>)
 80014e8:	f043 0304 	orr.w	r3, r3, #4
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <HAL_ADC_MspInit+0x88>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014fa:	2301      	movs	r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014fe:	2303      	movs	r3, #3
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4619      	mov	r1, r3
 800150c:	4809      	ldr	r0, [pc, #36]	@ (8001534 <HAL_ADC_MspInit+0x8c>)
 800150e:	f004 fa01 	bl	8005914 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2105      	movs	r1, #5
 8001516:	2012      	movs	r0, #18
 8001518:	f001 ff5c 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800151c:	2012      	movs	r0, #18
 800151e:	f001 ff75 	bl	800340c <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001522:	bf00      	nop
 8001524:	3728      	adds	r7, #40	@ 0x28
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40012000 	.word	0x40012000
 8001530:	40023800 	.word	0x40023800
 8001534:	40020800 	.word	0x40020800

08001538 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0a      	ldr	r2, [pc, #40]	@ (8001570 <HAL_CRC_MspInit+0x38>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d10b      	bne.n	8001562 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800154a:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <HAL_CRC_MspInit+0x3c>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	4a09      	ldr	r2, [pc, #36]	@ (8001574 <HAL_CRC_MspInit+0x3c>)
 8001550:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001554:	6313      	str	r3, [r2, #48]	@ 0x30
 8001556:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <HAL_CRC_MspInit+0x3c>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40023000 	.word	0x40023000
 8001574:	40023800 	.word	0x40023800

08001578 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	@ 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a19      	ldr	r2, [pc, #100]	@ (80015fc <HAL_DAC_MspInit+0x84>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d12b      	bne.n	80015f2 <HAL_DAC_MspInit+0x7a>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800159a:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <HAL_DAC_MspInit+0x88>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	4a18      	ldr	r2, [pc, #96]	@ (8001600 <HAL_DAC_MspInit+0x88>)
 80015a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80015a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a6:	4b16      	ldr	r3, [pc, #88]	@ (8001600 <HAL_DAC_MspInit+0x88>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	4b13      	ldr	r3, [pc, #76]	@ (8001600 <HAL_DAC_MspInit+0x88>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	4a12      	ldr	r2, [pc, #72]	@ (8001600 <HAL_DAC_MspInit+0x88>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015be:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <HAL_DAC_MspInit+0x88>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015ca:	2310      	movs	r3, #16
 80015cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ce:	2303      	movs	r3, #3
 80015d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	4809      	ldr	r0, [pc, #36]	@ (8001604 <HAL_DAC_MspInit+0x8c>)
 80015de:	f004 f999 	bl	8005914 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2105      	movs	r1, #5
 80015e6:	2036      	movs	r0, #54	@ 0x36
 80015e8:	f001 fef4 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015ec:	2036      	movs	r0, #54	@ 0x36
 80015ee:	f001 ff0d 	bl	800340c <HAL_NVIC_EnableIRQ>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 80015f2:	bf00      	nop
 80015f4:	3728      	adds	r7, #40	@ 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40007400 	.word	0x40007400
 8001600:	40023800 	.word	0x40023800
 8001604:	40020000 	.word	0x40020000

08001608 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b0ac      	sub	sp, #176	@ 0xb0
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001620:	f107 0318 	add.w	r3, r7, #24
 8001624:	2284      	movs	r2, #132	@ 0x84
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f01c fe89 	bl	801e340 <memset>
  if(hi2c->Instance==I2C1)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a82      	ldr	r2, [pc, #520]	@ (800183c <HAL_I2C_MspInit+0x234>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d17b      	bne.n	8001730 <HAL_I2C_MspInit+0x128>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001638:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800163c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800163e:	2300      	movs	r3, #0
 8001640:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001642:	f107 0318 	add.w	r3, r7, #24
 8001646:	4618      	mov	r0, r3
 8001648:	f007 fbcc 	bl	8008de4 <HAL_RCCEx_PeriphCLKConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001652:	f7ff feeb 	bl	800142c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	4b7a      	ldr	r3, [pc, #488]	@ (8001840 <HAL_I2C_MspInit+0x238>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	4a79      	ldr	r2, [pc, #484]	@ (8001840 <HAL_I2C_MspInit+0x238>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	6313      	str	r3, [r2, #48]	@ 0x30
 8001662:	4b77      	ldr	r3, [pc, #476]	@ (8001840 <HAL_I2C_MspInit+0x238>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800166e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001672:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001676:	2312      	movs	r3, #18
 8001678:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800167c:	2301      	movs	r3, #1
 800167e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001688:	2304      	movs	r3, #4
 800168a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001692:	4619      	mov	r1, r3
 8001694:	486b      	ldr	r0, [pc, #428]	@ (8001844 <HAL_I2C_MspInit+0x23c>)
 8001696:	f004 f93d 	bl	8005914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800169a:	4b69      	ldr	r3, [pc, #420]	@ (8001840 <HAL_I2C_MspInit+0x238>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	4a68      	ldr	r2, [pc, #416]	@ (8001840 <HAL_I2C_MspInit+0x238>)
 80016a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a6:	4b66      	ldr	r3, [pc, #408]	@ (8001840 <HAL_I2C_MspInit+0x238>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80016b2:	4b65      	ldr	r3, [pc, #404]	@ (8001848 <HAL_I2C_MspInit+0x240>)
 80016b4:	4a65      	ldr	r2, [pc, #404]	@ (800184c <HAL_I2C_MspInit+0x244>)
 80016b6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80016b8:	4b63      	ldr	r3, [pc, #396]	@ (8001848 <HAL_I2C_MspInit+0x240>)
 80016ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016be:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016c0:	4b61      	ldr	r3, [pc, #388]	@ (8001848 <HAL_I2C_MspInit+0x240>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c6:	4b60      	ldr	r3, [pc, #384]	@ (8001848 <HAL_I2C_MspInit+0x240>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016cc:	4b5e      	ldr	r3, [pc, #376]	@ (8001848 <HAL_I2C_MspInit+0x240>)
 80016ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016d2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016d4:	4b5c      	ldr	r3, [pc, #368]	@ (8001848 <HAL_I2C_MspInit+0x240>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016da:	4b5b      	ldr	r3, [pc, #364]	@ (8001848 <HAL_I2C_MspInit+0x240>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80016e0:	4b59      	ldr	r3, [pc, #356]	@ (8001848 <HAL_I2C_MspInit+0x240>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016e6:	4b58      	ldr	r3, [pc, #352]	@ (8001848 <HAL_I2C_MspInit+0x240>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ec:	4b56      	ldr	r3, [pc, #344]	@ (8001848 <HAL_I2C_MspInit+0x240>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80016f2:	4855      	ldr	r0, [pc, #340]	@ (8001848 <HAL_I2C_MspInit+0x240>)
 80016f4:	f002 fa16 	bl	8003b24 <HAL_DMA_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_I2C_MspInit+0xfa>
    {
      Error_Handler();
 80016fe:	f7ff fe95 	bl	800142c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a50      	ldr	r2, [pc, #320]	@ (8001848 <HAL_I2C_MspInit+0x240>)
 8001706:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001708:	4a4f      	ldr	r2, [pc, #316]	@ (8001848 <HAL_I2C_MspInit+0x240>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2105      	movs	r1, #5
 8001712:	201f      	movs	r0, #31
 8001714:	f001 fe5e 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001718:	201f      	movs	r0, #31
 800171a:	f001 fe77 	bl	800340c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2105      	movs	r1, #5
 8001722:	2020      	movs	r0, #32
 8001724:	f001 fe56 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001728:	2020      	movs	r0, #32
 800172a:	f001 fe6f 	bl	800340c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C4_MspInit 1 */

    /* USER CODE END I2C4_MspInit 1 */
  }

}
 800172e:	e080      	b.n	8001832 <HAL_I2C_MspInit+0x22a>
  else if(hi2c->Instance==I2C4)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a46      	ldr	r2, [pc, #280]	@ (8001850 <HAL_I2C_MspInit+0x248>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d17b      	bne.n	8001832 <HAL_I2C_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800173a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800173e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001740:	2300      	movs	r3, #0
 8001742:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001746:	f107 0318 	add.w	r3, r7, #24
 800174a:	4618      	mov	r0, r3
 800174c:	f007 fb4a 	bl	8008de4 <HAL_RCCEx_PeriphCLKConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_I2C_MspInit+0x152>
      Error_Handler();
 8001756:	f7ff fe69 	bl	800142c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800175a:	4b39      	ldr	r3, [pc, #228]	@ (8001840 <HAL_I2C_MspInit+0x238>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a38      	ldr	r2, [pc, #224]	@ (8001840 <HAL_I2C_MspInit+0x238>)
 8001760:	f043 0320 	orr.w	r3, r3, #32
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
 8001766:	4b36      	ldr	r3, [pc, #216]	@ (8001840 <HAL_I2C_MspInit+0x238>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f003 0320 	and.w	r3, r3, #32
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001772:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001776:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800177a:	2312      	movs	r3, #18
 800177c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001780:	2301      	movs	r3, #1
 8001782:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001786:	2303      	movs	r3, #3
 8001788:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800178c:	2304      	movs	r3, #4
 800178e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001792:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001796:	4619      	mov	r1, r3
 8001798:	482e      	ldr	r0, [pc, #184]	@ (8001854 <HAL_I2C_MspInit+0x24c>)
 800179a:	f004 f8bb 	bl	8005914 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800179e:	4b28      	ldr	r3, [pc, #160]	@ (8001840 <HAL_I2C_MspInit+0x238>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	4a27      	ldr	r2, [pc, #156]	@ (8001840 <HAL_I2C_MspInit+0x238>)
 80017a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017aa:	4b25      	ldr	r3, [pc, #148]	@ (8001840 <HAL_I2C_MspInit+0x238>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c4_tx.Instance = DMA1_Stream5;
 80017b6:	4b28      	ldr	r3, [pc, #160]	@ (8001858 <HAL_I2C_MspInit+0x250>)
 80017b8:	4a28      	ldr	r2, [pc, #160]	@ (800185c <HAL_I2C_MspInit+0x254>)
 80017ba:	601a      	str	r2, [r3, #0]
    hdma_i2c4_tx.Init.Channel = DMA_CHANNEL_2;
 80017bc:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <HAL_I2C_MspInit+0x250>)
 80017be:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80017c2:	605a      	str	r2, [r3, #4]
    hdma_i2c4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017c4:	4b24      	ldr	r3, [pc, #144]	@ (8001858 <HAL_I2C_MspInit+0x250>)
 80017c6:	2240      	movs	r2, #64	@ 0x40
 80017c8:	609a      	str	r2, [r3, #8]
    hdma_i2c4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ca:	4b23      	ldr	r3, [pc, #140]	@ (8001858 <HAL_I2C_MspInit+0x250>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	60da      	str	r2, [r3, #12]
    hdma_i2c4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017d0:	4b21      	ldr	r3, [pc, #132]	@ (8001858 <HAL_I2C_MspInit+0x250>)
 80017d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017d6:	611a      	str	r2, [r3, #16]
    hdma_i2c4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001858 <HAL_I2C_MspInit+0x250>)
 80017da:	2200      	movs	r2, #0
 80017dc:	615a      	str	r2, [r3, #20]
    hdma_i2c4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017de:	4b1e      	ldr	r3, [pc, #120]	@ (8001858 <HAL_I2C_MspInit+0x250>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
    hdma_i2c4_tx.Init.Mode = DMA_NORMAL;
 80017e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001858 <HAL_I2C_MspInit+0x250>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
    hdma_i2c4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <HAL_I2C_MspInit+0x250>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	621a      	str	r2, [r3, #32]
    hdma_i2c4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017f0:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <HAL_I2C_MspInit+0x250>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c4_tx) != HAL_OK)
 80017f6:	4818      	ldr	r0, [pc, #96]	@ (8001858 <HAL_I2C_MspInit+0x250>)
 80017f8:	f002 f994 	bl	8003b24 <HAL_DMA_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_I2C_MspInit+0x1fe>
      Error_Handler();
 8001802:	f7ff fe13 	bl	800142c <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c4_tx);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a13      	ldr	r2, [pc, #76]	@ (8001858 <HAL_I2C_MspInit+0x250>)
 800180a:	639a      	str	r2, [r3, #56]	@ 0x38
 800180c:	4a12      	ldr	r2, [pc, #72]	@ (8001858 <HAL_I2C_MspInit+0x250>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2105      	movs	r1, #5
 8001816:	205f      	movs	r0, #95	@ 0x5f
 8001818:	f001 fddc 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 800181c:	205f      	movs	r0, #95	@ 0x5f
 800181e:	f001 fdf5 	bl	800340c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 5, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2105      	movs	r1, #5
 8001826:	2060      	movs	r0, #96	@ 0x60
 8001828:	f001 fdd4 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 800182c:	2060      	movs	r0, #96	@ 0x60
 800182e:	f001 fded 	bl	800340c <HAL_NVIC_EnableIRQ>
}
 8001832:	bf00      	nop
 8001834:	37b0      	adds	r7, #176	@ 0xb0
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40005400 	.word	0x40005400
 8001840:	40023800 	.word	0x40023800
 8001844:	40020400 	.word	0x40020400
 8001848:	20000310 	.word	0x20000310
 800184c:	40026010 	.word	0x40026010
 8001850:	40006000 	.word	0x40006000
 8001854:	40021400 	.word	0x40021400
 8001858:	20000370 	.word	0x20000370
 800185c:	40026088 	.word	0x40026088

08001860 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a21      	ldr	r2, [pc, #132]	@ (80018f4 <HAL_I2C_MspDeInit+0x94>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d11b      	bne.n	80018aa <HAL_I2C_MspDeInit+0x4a>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001872:	4b21      	ldr	r3, [pc, #132]	@ (80018f8 <HAL_I2C_MspDeInit+0x98>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	4a20      	ldr	r2, [pc, #128]	@ (80018f8 <HAL_I2C_MspDeInit+0x98>)
 8001878:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800187c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800187e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001882:	481e      	ldr	r0, [pc, #120]	@ (80018fc <HAL_I2C_MspDeInit+0x9c>)
 8001884:	f004 f9f2 	bl	8005c6c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001888:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800188c:	481b      	ldr	r0, [pc, #108]	@ (80018fc <HAL_I2C_MspDeInit+0x9c>)
 800188e:	f004 f9ed 	bl	8005c6c <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001896:	4618      	mov	r0, r3
 8001898:	f002 f9f2 	bl	8003c80 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800189c:	201f      	movs	r0, #31
 800189e:	f001 fdc3 	bl	8003428 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80018a2:	2020      	movs	r0, #32
 80018a4:	f001 fdc0 	bl	8003428 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN I2C4_MspDeInit 1 */

    /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 80018a8:	e01f      	b.n	80018ea <HAL_I2C_MspDeInit+0x8a>
  else if(hi2c->Instance==I2C4)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a14      	ldr	r2, [pc, #80]	@ (8001900 <HAL_I2C_MspDeInit+0xa0>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d11a      	bne.n	80018ea <HAL_I2C_MspDeInit+0x8a>
    __HAL_RCC_I2C4_CLK_DISABLE();
 80018b4:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <HAL_I2C_MspDeInit+0x98>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b8:	4a0f      	ldr	r2, [pc, #60]	@ (80018f8 <HAL_I2C_MspDeInit+0x98>)
 80018ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018be:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_14);
 80018c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80018c4:	480f      	ldr	r0, [pc, #60]	@ (8001904 <HAL_I2C_MspDeInit+0xa4>)
 80018c6:	f004 f9d1 	bl	8005c6c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_15);
 80018ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80018ce:	480d      	ldr	r0, [pc, #52]	@ (8001904 <HAL_I2C_MspDeInit+0xa4>)
 80018d0:	f004 f9cc 	bl	8005c6c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018d8:	4618      	mov	r0, r3
 80018da:	f002 f9d1 	bl	8003c80 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(I2C4_EV_IRQn);
 80018de:	205f      	movs	r0, #95	@ 0x5f
 80018e0:	f001 fda2 	bl	8003428 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C4_ER_IRQn);
 80018e4:	2060      	movs	r0, #96	@ 0x60
 80018e6:	f001 fd9f 	bl	8003428 <HAL_NVIC_DisableIRQ>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40005400 	.word	0x40005400
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40020400 	.word	0x40020400
 8001900:	40006000 	.word	0x40006000
 8001904:	40021400 	.word	0x40021400

08001908 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08c      	sub	sp, #48	@ 0x30
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 031c 	add.w	r3, r7, #28
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4aa1      	ldr	r2, [pc, #644]	@ (8001bac <HAL_SPI_MspInit+0x2a4>)
 8001926:	4293      	cmp	r3, r2
 8001928:	f040 80a9 	bne.w	8001a7e <HAL_SPI_MspInit+0x176>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800192c:	4ba0      	ldr	r3, [pc, #640]	@ (8001bb0 <HAL_SPI_MspInit+0x2a8>)
 800192e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001930:	4a9f      	ldr	r2, [pc, #636]	@ (8001bb0 <HAL_SPI_MspInit+0x2a8>)
 8001932:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001936:	6453      	str	r3, [r2, #68]	@ 0x44
 8001938:	4b9d      	ldr	r3, [pc, #628]	@ (8001bb0 <HAL_SPI_MspInit+0x2a8>)
 800193a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001940:	61bb      	str	r3, [r7, #24]
 8001942:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001944:	4b9a      	ldr	r3, [pc, #616]	@ (8001bb0 <HAL_SPI_MspInit+0x2a8>)
 8001946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001948:	4a99      	ldr	r2, [pc, #612]	@ (8001bb0 <HAL_SPI_MspInit+0x2a8>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001950:	4b97      	ldr	r3, [pc, #604]	@ (8001bb0 <HAL_SPI_MspInit+0x2a8>)
 8001952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195c:	4b94      	ldr	r3, [pc, #592]	@ (8001bb0 <HAL_SPI_MspInit+0x2a8>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001960:	4a93      	ldr	r2, [pc, #588]	@ (8001bb0 <HAL_SPI_MspInit+0x2a8>)
 8001962:	f043 0302 	orr.w	r3, r3, #2
 8001966:	6313      	str	r3, [r2, #48]	@ 0x30
 8001968:	4b91      	ldr	r3, [pc, #580]	@ (8001bb0 <HAL_SPI_MspInit+0x2a8>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001974:	2360      	movs	r3, #96	@ 0x60
 8001976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001984:	2305      	movs	r3, #5
 8001986:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001988:	f107 031c 	add.w	r3, r7, #28
 800198c:	4619      	mov	r1, r3
 800198e:	4889      	ldr	r0, [pc, #548]	@ (8001bb4 <HAL_SPI_MspInit+0x2ac>)
 8001990:	f003 ffc0 	bl	8005914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001994:	2320      	movs	r3, #32
 8001996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a0:	2303      	movs	r3, #3
 80019a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019a4:	2305      	movs	r3, #5
 80019a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	4619      	mov	r1, r3
 80019ae:	4882      	ldr	r0, [pc, #520]	@ (8001bb8 <HAL_SPI_MspInit+0x2b0>)
 80019b0:	f003 ffb0 	bl	8005914 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 80019b4:	4b81      	ldr	r3, [pc, #516]	@ (8001bbc <HAL_SPI_MspInit+0x2b4>)
 80019b6:	4a82      	ldr	r2, [pc, #520]	@ (8001bc0 <HAL_SPI_MspInit+0x2b8>)
 80019b8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80019ba:	4b80      	ldr	r3, [pc, #512]	@ (8001bbc <HAL_SPI_MspInit+0x2b4>)
 80019bc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80019c0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019c2:	4b7e      	ldr	r3, [pc, #504]	@ (8001bbc <HAL_SPI_MspInit+0x2b4>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c8:	4b7c      	ldr	r3, [pc, #496]	@ (8001bbc <HAL_SPI_MspInit+0x2b4>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019ce:	4b7b      	ldr	r3, [pc, #492]	@ (8001bbc <HAL_SPI_MspInit+0x2b4>)
 80019d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019d4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019d6:	4b79      	ldr	r3, [pc, #484]	@ (8001bbc <HAL_SPI_MspInit+0x2b4>)
 80019d8:	2200      	movs	r2, #0
 80019da:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019dc:	4b77      	ldr	r3, [pc, #476]	@ (8001bbc <HAL_SPI_MspInit+0x2b4>)
 80019de:	2200      	movs	r2, #0
 80019e0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80019e2:	4b76      	ldr	r3, [pc, #472]	@ (8001bbc <HAL_SPI_MspInit+0x2b4>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019e8:	4b74      	ldr	r3, [pc, #464]	@ (8001bbc <HAL_SPI_MspInit+0x2b4>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019ee:	4b73      	ldr	r3, [pc, #460]	@ (8001bbc <HAL_SPI_MspInit+0x2b4>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80019f4:	4871      	ldr	r0, [pc, #452]	@ (8001bbc <HAL_SPI_MspInit+0x2b4>)
 80019f6:	f002 f895 	bl	8003b24 <HAL_DMA_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8001a00:	f7ff fd14 	bl	800142c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a6d      	ldr	r2, [pc, #436]	@ (8001bbc <HAL_SPI_MspInit+0x2b4>)
 8001a08:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a0a:	4a6c      	ldr	r2, [pc, #432]	@ (8001bbc <HAL_SPI_MspInit+0x2b4>)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001a10:	4b6c      	ldr	r3, [pc, #432]	@ (8001bc4 <HAL_SPI_MspInit+0x2bc>)
 8001a12:	4a6d      	ldr	r2, [pc, #436]	@ (8001bc8 <HAL_SPI_MspInit+0x2c0>)
 8001a14:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001a16:	4b6b      	ldr	r3, [pc, #428]	@ (8001bc4 <HAL_SPI_MspInit+0x2bc>)
 8001a18:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001a1c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a1e:	4b69      	ldr	r3, [pc, #420]	@ (8001bc4 <HAL_SPI_MspInit+0x2bc>)
 8001a20:	2240      	movs	r2, #64	@ 0x40
 8001a22:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a24:	4b67      	ldr	r3, [pc, #412]	@ (8001bc4 <HAL_SPI_MspInit+0x2bc>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a2a:	4b66      	ldr	r3, [pc, #408]	@ (8001bc4 <HAL_SPI_MspInit+0x2bc>)
 8001a2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a30:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a32:	4b64      	ldr	r3, [pc, #400]	@ (8001bc4 <HAL_SPI_MspInit+0x2bc>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a38:	4b62      	ldr	r3, [pc, #392]	@ (8001bc4 <HAL_SPI_MspInit+0x2bc>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001a3e:	4b61      	ldr	r3, [pc, #388]	@ (8001bc4 <HAL_SPI_MspInit+0x2bc>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a44:	4b5f      	ldr	r3, [pc, #380]	@ (8001bc4 <HAL_SPI_MspInit+0x2bc>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a4a:	4b5e      	ldr	r3, [pc, #376]	@ (8001bc4 <HAL_SPI_MspInit+0x2bc>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001a50:	485c      	ldr	r0, [pc, #368]	@ (8001bc4 <HAL_SPI_MspInit+0x2bc>)
 8001a52:	f002 f867 	bl	8003b24 <HAL_DMA_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8001a5c:	f7ff fce6 	bl	800142c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a58      	ldr	r2, [pc, #352]	@ (8001bc4 <HAL_SPI_MspInit+0x2bc>)
 8001a64:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a66:	4a57      	ldr	r2, [pc, #348]	@ (8001bc4 <HAL_SPI_MspInit+0x2bc>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 6, 0);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2106      	movs	r1, #6
 8001a70:	2023      	movs	r0, #35	@ 0x23
 8001a72:	f001 fcaf 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001a76:	2023      	movs	r0, #35	@ 0x23
 8001a78:	f001 fcc8 	bl	800340c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN SPI4_MspInit 1 */

    /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001a7c:	e091      	b.n	8001ba2 <HAL_SPI_MspInit+0x29a>
  else if(hspi->Instance==SPI4)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a52      	ldr	r2, [pc, #328]	@ (8001bcc <HAL_SPI_MspInit+0x2c4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	f040 808c 	bne.w	8001ba2 <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001a8a:	4b49      	ldr	r3, [pc, #292]	@ (8001bb0 <HAL_SPI_MspInit+0x2a8>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	4a48      	ldr	r2, [pc, #288]	@ (8001bb0 <HAL_SPI_MspInit+0x2a8>)
 8001a90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a96:	4b46      	ldr	r3, [pc, #280]	@ (8001bb0 <HAL_SPI_MspInit+0x2a8>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001aa2:	4b43      	ldr	r3, [pc, #268]	@ (8001bb0 <HAL_SPI_MspInit+0x2a8>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	4a42      	ldr	r2, [pc, #264]	@ (8001bb0 <HAL_SPI_MspInit+0x2a8>)
 8001aa8:	f043 0310 	orr.w	r3, r3, #16
 8001aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aae:	4b40      	ldr	r3, [pc, #256]	@ (8001bb0 <HAL_SPI_MspInit+0x2a8>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	f003 0310 	and.w	r3, r3, #16
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001aba:	2364      	movs	r3, #100	@ 0x64
 8001abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001aca:	2305      	movs	r3, #5
 8001acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ace:	f107 031c 	add.w	r3, r7, #28
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	483e      	ldr	r0, [pc, #248]	@ (8001bd0 <HAL_SPI_MspInit+0x2c8>)
 8001ad6:	f003 ff1d 	bl	8005914 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8001ada:	4b3e      	ldr	r3, [pc, #248]	@ (8001bd4 <HAL_SPI_MspInit+0x2cc>)
 8001adc:	4a3e      	ldr	r2, [pc, #248]	@ (8001bd8 <HAL_SPI_MspInit+0x2d0>)
 8001ade:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001ae0:	4b3c      	ldr	r3, [pc, #240]	@ (8001bd4 <HAL_SPI_MspInit+0x2cc>)
 8001ae2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ae6:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8001bd4 <HAL_SPI_MspInit+0x2cc>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aee:	4b39      	ldr	r3, [pc, #228]	@ (8001bd4 <HAL_SPI_MspInit+0x2cc>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001af4:	4b37      	ldr	r3, [pc, #220]	@ (8001bd4 <HAL_SPI_MspInit+0x2cc>)
 8001af6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001afa:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001afc:	4b35      	ldr	r3, [pc, #212]	@ (8001bd4 <HAL_SPI_MspInit+0x2cc>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b02:	4b34      	ldr	r3, [pc, #208]	@ (8001bd4 <HAL_SPI_MspInit+0x2cc>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001b08:	4b32      	ldr	r3, [pc, #200]	@ (8001bd4 <HAL_SPI_MspInit+0x2cc>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b0e:	4b31      	ldr	r3, [pc, #196]	@ (8001bd4 <HAL_SPI_MspInit+0x2cc>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b14:	4b2f      	ldr	r3, [pc, #188]	@ (8001bd4 <HAL_SPI_MspInit+0x2cc>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001b1a:	482e      	ldr	r0, [pc, #184]	@ (8001bd4 <HAL_SPI_MspInit+0x2cc>)
 8001b1c:	f002 f802 	bl	8003b24 <HAL_DMA_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_SPI_MspInit+0x222>
      Error_Handler();
 8001b26:	f7ff fc81 	bl	800142c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a29      	ldr	r2, [pc, #164]	@ (8001bd4 <HAL_SPI_MspInit+0x2cc>)
 8001b2e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b30:	4a28      	ldr	r2, [pc, #160]	@ (8001bd4 <HAL_SPI_MspInit+0x2cc>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8001b36:	4b29      	ldr	r3, [pc, #164]	@ (8001bdc <HAL_SPI_MspInit+0x2d4>)
 8001b38:	4a29      	ldr	r2, [pc, #164]	@ (8001be0 <HAL_SPI_MspInit+0x2d8>)
 8001b3a:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8001b3c:	4b27      	ldr	r3, [pc, #156]	@ (8001bdc <HAL_SPI_MspInit+0x2d4>)
 8001b3e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b42:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b44:	4b25      	ldr	r3, [pc, #148]	@ (8001bdc <HAL_SPI_MspInit+0x2d4>)
 8001b46:	2240      	movs	r2, #64	@ 0x40
 8001b48:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b4a:	4b24      	ldr	r3, [pc, #144]	@ (8001bdc <HAL_SPI_MspInit+0x2d4>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b50:	4b22      	ldr	r3, [pc, #136]	@ (8001bdc <HAL_SPI_MspInit+0x2d4>)
 8001b52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b56:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b58:	4b20      	ldr	r3, [pc, #128]	@ (8001bdc <HAL_SPI_MspInit+0x2d4>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bdc <HAL_SPI_MspInit+0x2d4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001b64:	4b1d      	ldr	r3, [pc, #116]	@ (8001bdc <HAL_SPI_MspInit+0x2d4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001bdc <HAL_SPI_MspInit+0x2d4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b70:	4b1a      	ldr	r3, [pc, #104]	@ (8001bdc <HAL_SPI_MspInit+0x2d4>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001b76:	4819      	ldr	r0, [pc, #100]	@ (8001bdc <HAL_SPI_MspInit+0x2d4>)
 8001b78:	f001 ffd4 	bl	8003b24 <HAL_DMA_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 8001b82:	f7ff fc53 	bl	800142c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a14      	ldr	r2, [pc, #80]	@ (8001bdc <HAL_SPI_MspInit+0x2d4>)
 8001b8a:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b8c:	4a13      	ldr	r2, [pc, #76]	@ (8001bdc <HAL_SPI_MspInit+0x2d4>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2105      	movs	r1, #5
 8001b96:	2054      	movs	r0, #84	@ 0x54
 8001b98:	f001 fc1c 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001b9c:	2054      	movs	r0, #84	@ 0x54
 8001b9e:	f001 fc35 	bl	800340c <HAL_NVIC_EnableIRQ>
}
 8001ba2:	bf00      	nop
 8001ba4:	3730      	adds	r7, #48	@ 0x30
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40013000 	.word	0x40013000
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	40020400 	.word	0x40020400
 8001bbc:	20000498 	.word	0x20000498
 8001bc0:	40026440 	.word	0x40026440
 8001bc4:	200004f8 	.word	0x200004f8
 8001bc8:	40026458 	.word	0x40026458
 8001bcc:	40013400 	.word	0x40013400
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	20000558 	.word	0x20000558
 8001bd8:	40026410 	.word	0x40026410
 8001bdc:	200005b8 	.word	0x200005b8
 8001be0:	40026428 	.word	0x40026428

08001be4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c28 <HAL_TIM_Base_MspInit+0x44>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d113      	bne.n	8001c1e <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c2c <HAL_TIM_Base_MspInit+0x48>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8001c2c <HAL_TIM_Base_MspInit+0x48>)
 8001bfc:	f043 0320 	orr.w	r3, r3, #32
 8001c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c02:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <HAL_TIM_Base_MspInit+0x48>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c06:	f003 0320 	and.w	r3, r3, #32
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2105      	movs	r1, #5
 8001c12:	2037      	movs	r0, #55	@ 0x37
 8001c14:	f001 fbde 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c18:	2037      	movs	r0, #55	@ 0x37
 8001c1a:	f001 fbf7 	bl	800340c <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM7_MspInit 1 */

  }

}
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40001400 	.word	0x40001400
 8001c2c:	40023800 	.word	0x40023800

08001c30 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b0b0      	sub	sp, #192	@ 0xc0
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c38:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	60da      	str	r2, [r3, #12]
 8001c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c48:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c4c:	2284      	movs	r2, #132	@ 0x84
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f01c fb75 	bl	801e340 <memset>
  if(huart->Instance==UART4)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4aaf      	ldr	r2, [pc, #700]	@ (8001f18 <HAL_UART_MspInit+0x2e8>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	f040 8095 	bne.w	8001d8c <HAL_UART_MspInit+0x15c>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001c62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c66:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8001c68:	2340      	movs	r3, #64	@ 0x40
 8001c6a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c6c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c70:	4618      	mov	r0, r3
 8001c72:	f007 f8b7 	bl	8008de4 <HAL_RCCEx_PeriphCLKConfig>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001c7c:	f7ff fbd6 	bl	800142c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c80:	4ba6      	ldr	r3, [pc, #664]	@ (8001f1c <HAL_UART_MspInit+0x2ec>)
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	4aa5      	ldr	r2, [pc, #660]	@ (8001f1c <HAL_UART_MspInit+0x2ec>)
 8001c86:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001c8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c8c:	4ba3      	ldr	r3, [pc, #652]	@ (8001f1c <HAL_UART_MspInit+0x2ec>)
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c94:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c98:	4ba0      	ldr	r3, [pc, #640]	@ (8001f1c <HAL_UART_MspInit+0x2ec>)
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9c:	4a9f      	ldr	r2, [pc, #636]	@ (8001f1c <HAL_UART_MspInit+0x2ec>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca4:	4b9d      	ldr	r3, [pc, #628]	@ (8001f1c <HAL_UART_MspInit+0x2ec>)
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	623b      	str	r3, [r7, #32]
 8001cae:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb0:	4b9a      	ldr	r3, [pc, #616]	@ (8001f1c <HAL_UART_MspInit+0x2ec>)
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb4:	4a99      	ldr	r2, [pc, #612]	@ (8001f1c <HAL_UART_MspInit+0x2ec>)
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cbc:	4b97      	ldr	r3, [pc, #604]	@ (8001f1c <HAL_UART_MspInit+0x2ec>)
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ce0:	2308      	movs	r3, #8
 8001ce2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001cea:	4619      	mov	r1, r3
 8001cec:	488c      	ldr	r0, [pc, #560]	@ (8001f20 <HAL_UART_MspInit+0x2f0>)
 8001cee:	f003 fe11 	bl	8005914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001cf2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d06:	2303      	movs	r3, #3
 8001d08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d0c:	2308      	movs	r3, #8
 8001d0e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d12:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001d16:	4619      	mov	r1, r3
 8001d18:	4882      	ldr	r0, [pc, #520]	@ (8001f24 <HAL_UART_MspInit+0x2f4>)
 8001d1a:	f003 fdfb 	bl	8005914 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001d1e:	4b82      	ldr	r3, [pc, #520]	@ (8001f28 <HAL_UART_MspInit+0x2f8>)
 8001d20:	4a82      	ldr	r2, [pc, #520]	@ (8001f2c <HAL_UART_MspInit+0x2fc>)
 8001d22:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001d24:	4b80      	ldr	r3, [pc, #512]	@ (8001f28 <HAL_UART_MspInit+0x2f8>)
 8001d26:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d2a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d2c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f28 <HAL_UART_MspInit+0x2f8>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d32:	4b7d      	ldr	r3, [pc, #500]	@ (8001f28 <HAL_UART_MspInit+0x2f8>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d38:	4b7b      	ldr	r3, [pc, #492]	@ (8001f28 <HAL_UART_MspInit+0x2f8>)
 8001d3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d3e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d40:	4b79      	ldr	r3, [pc, #484]	@ (8001f28 <HAL_UART_MspInit+0x2f8>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d46:	4b78      	ldr	r3, [pc, #480]	@ (8001f28 <HAL_UART_MspInit+0x2f8>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001d4c:	4b76      	ldr	r3, [pc, #472]	@ (8001f28 <HAL_UART_MspInit+0x2f8>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d52:	4b75      	ldr	r3, [pc, #468]	@ (8001f28 <HAL_UART_MspInit+0x2f8>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d58:	4b73      	ldr	r3, [pc, #460]	@ (8001f28 <HAL_UART_MspInit+0x2f8>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001d5e:	4872      	ldr	r0, [pc, #456]	@ (8001f28 <HAL_UART_MspInit+0x2f8>)
 8001d60:	f001 fee0 	bl	8003b24 <HAL_DMA_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8001d6a:	f7ff fb5f 	bl	800142c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a6d      	ldr	r2, [pc, #436]	@ (8001f28 <HAL_UART_MspInit+0x2f8>)
 8001d72:	675a      	str	r2, [r3, #116]	@ 0x74
 8001d74:	4a6c      	ldr	r2, [pc, #432]	@ (8001f28 <HAL_UART_MspInit+0x2f8>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 6, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2106      	movs	r1, #6
 8001d7e:	2034      	movs	r0, #52	@ 0x34
 8001d80:	f001 fb28 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001d84:	2034      	movs	r0, #52	@ 0x34
 8001d86:	f001 fb41 	bl	800340c <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d8a:	e0c0      	b.n	8001f0e <HAL_UART_MspInit+0x2de>
  else if(huart->Instance==USART2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a67      	ldr	r2, [pc, #412]	@ (8001f30 <HAL_UART_MspInit+0x300>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d171      	bne.n	8001e7a <HAL_UART_MspInit+0x24a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d96:	2380      	movs	r3, #128	@ 0x80
 8001d98:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001d9a:	2304      	movs	r3, #4
 8001d9c:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001da2:	4618      	mov	r0, r3
 8001da4:	f007 f81e 	bl	8008de4 <HAL_RCCEx_PeriphCLKConfig>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_UART_MspInit+0x182>
      Error_Handler();
 8001dae:	f7ff fb3d 	bl	800142c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001db2:	4b5a      	ldr	r3, [pc, #360]	@ (8001f1c <HAL_UART_MspInit+0x2ec>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	4a59      	ldr	r2, [pc, #356]	@ (8001f1c <HAL_UART_MspInit+0x2ec>)
 8001db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dbe:	4b57      	ldr	r3, [pc, #348]	@ (8001f1c <HAL_UART_MspInit+0x2ec>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dc6:	61bb      	str	r3, [r7, #24]
 8001dc8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dca:	4b54      	ldr	r3, [pc, #336]	@ (8001f1c <HAL_UART_MspInit+0x2ec>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4a53      	ldr	r2, [pc, #332]	@ (8001f1c <HAL_UART_MspInit+0x2ec>)
 8001dd0:	f043 0308 	orr.w	r3, r3, #8
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4b51      	ldr	r3, [pc, #324]	@ (8001f1c <HAL_UART_MspInit+0x2ec>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001de2:	2360      	movs	r3, #96	@ 0x60
 8001de4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df4:	2303      	movs	r3, #3
 8001df6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dfa:	2307      	movs	r3, #7
 8001dfc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e00:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e04:	4619      	mov	r1, r3
 8001e06:	484b      	ldr	r0, [pc, #300]	@ (8001f34 <HAL_UART_MspInit+0x304>)
 8001e08:	f003 fd84 	bl	8005914 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001e0c:	4b4a      	ldr	r3, [pc, #296]	@ (8001f38 <HAL_UART_MspInit+0x308>)
 8001e0e:	4a4b      	ldr	r2, [pc, #300]	@ (8001f3c <HAL_UART_MspInit+0x30c>)
 8001e10:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001e12:	4b49      	ldr	r3, [pc, #292]	@ (8001f38 <HAL_UART_MspInit+0x308>)
 8001e14:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e18:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e1a:	4b47      	ldr	r3, [pc, #284]	@ (8001f38 <HAL_UART_MspInit+0x308>)
 8001e1c:	2240      	movs	r2, #64	@ 0x40
 8001e1e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e20:	4b45      	ldr	r3, [pc, #276]	@ (8001f38 <HAL_UART_MspInit+0x308>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e26:	4b44      	ldr	r3, [pc, #272]	@ (8001f38 <HAL_UART_MspInit+0x308>)
 8001e28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e2e:	4b42      	ldr	r3, [pc, #264]	@ (8001f38 <HAL_UART_MspInit+0x308>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e34:	4b40      	ldr	r3, [pc, #256]	@ (8001f38 <HAL_UART_MspInit+0x308>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001e3a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f38 <HAL_UART_MspInit+0x308>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e40:	4b3d      	ldr	r3, [pc, #244]	@ (8001f38 <HAL_UART_MspInit+0x308>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e46:	4b3c      	ldr	r3, [pc, #240]	@ (8001f38 <HAL_UART_MspInit+0x308>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001e4c:	483a      	ldr	r0, [pc, #232]	@ (8001f38 <HAL_UART_MspInit+0x308>)
 8001e4e:	f001 fe69 	bl	8003b24 <HAL_DMA_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_UART_MspInit+0x22c>
      Error_Handler();
 8001e58:	f7ff fae8 	bl	800142c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a36      	ldr	r2, [pc, #216]	@ (8001f38 <HAL_UART_MspInit+0x308>)
 8001e60:	671a      	str	r2, [r3, #112]	@ 0x70
 8001e62:	4a35      	ldr	r2, [pc, #212]	@ (8001f38 <HAL_UART_MspInit+0x308>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2106      	movs	r1, #6
 8001e6c:	2026      	movs	r0, #38	@ 0x26
 8001e6e:	f001 fab1 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e72:	2026      	movs	r0, #38	@ 0x26
 8001e74:	f001 faca 	bl	800340c <HAL_NVIC_EnableIRQ>
}
 8001e78:	e049      	b.n	8001f0e <HAL_UART_MspInit+0x2de>
  else if(huart->Instance==USART3)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a30      	ldr	r2, [pc, #192]	@ (8001f40 <HAL_UART_MspInit+0x310>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d144      	bne.n	8001f0e <HAL_UART_MspInit+0x2de>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e88:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e92:	4618      	mov	r0, r3
 8001e94:	f006 ffa6 	bl	8008de4 <HAL_RCCEx_PeriphCLKConfig>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_UART_MspInit+0x272>
      Error_Handler();
 8001e9e:	f7ff fac5 	bl	800142c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8001f1c <HAL_UART_MspInit+0x2ec>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	4a1d      	ldr	r2, [pc, #116]	@ (8001f1c <HAL_UART_MspInit+0x2ec>)
 8001ea8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eae:	4b1b      	ldr	r3, [pc, #108]	@ (8001f1c <HAL_UART_MspInit+0x2ec>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eba:	4b18      	ldr	r3, [pc, #96]	@ (8001f1c <HAL_UART_MspInit+0x2ec>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	4a17      	ldr	r2, [pc, #92]	@ (8001f1c <HAL_UART_MspInit+0x2ec>)
 8001ec0:	f043 0308 	orr.w	r3, r3, #8
 8001ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec6:	4b15      	ldr	r3, [pc, #84]	@ (8001f1c <HAL_UART_MspInit+0x2ec>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001ed2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ed6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001eec:	2307      	movs	r3, #7
 8001eee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ef2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	480e      	ldr	r0, [pc, #56]	@ (8001f34 <HAL_UART_MspInit+0x304>)
 8001efa:	f003 fd0b 	bl	8005914 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2105      	movs	r1, #5
 8001f02:	2027      	movs	r0, #39	@ 0x27
 8001f04:	f001 fa66 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f08:	2027      	movs	r0, #39	@ 0x27
 8001f0a:	f001 fa7f 	bl	800340c <HAL_NVIC_EnableIRQ>
}
 8001f0e:	bf00      	nop
 8001f10:	37c0      	adds	r7, #192	@ 0xc0
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40004c00 	.word	0x40004c00
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40020000 	.word	0x40020000
 8001f24:	40020800 	.word	0x40020800
 8001f28:	200007fc 	.word	0x200007fc
 8001f2c:	40026040 	.word	0x40026040
 8001f30:	40004400 	.word	0x40004400
 8001f34:	40020c00 	.word	0x40020c00
 8001f38:	2000085c 	.word	0x2000085c
 8001f3c:	400260a0 	.word	0x400260a0
 8001f40:	40004800 	.word	0x40004800

08001f44 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b0ac      	sub	sp, #176	@ 0xb0
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f5c:	f107 0318 	add.w	r3, r7, #24
 8001f60:	2284      	movs	r2, #132	@ 0x84
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f01c f9eb 	bl	801e340 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f72:	d159      	bne.n	8002028 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001f74:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f78:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f80:	f107 0318 	add.w	r3, r7, #24
 8001f84:	4618      	mov	r0, r3
 8001f86:	f006 ff2d 	bl	8008de4 <HAL_RCCEx_PeriphCLKConfig>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001f90:	f7ff fa4c 	bl	800142c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f94:	4b26      	ldr	r3, [pc, #152]	@ (8002030 <HAL_PCD_MspInit+0xec>)
 8001f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f98:	4a25      	ldr	r2, [pc, #148]	@ (8002030 <HAL_PCD_MspInit+0xec>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa0:	4b23      	ldr	r3, [pc, #140]	@ (8002030 <HAL_PCD_MspInit+0xec>)
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001fac:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001fb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001fc6:	230a      	movs	r3, #10
 8001fc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fcc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4818      	ldr	r0, [pc, #96]	@ (8002034 <HAL_PCD_MspInit+0xf0>)
 8001fd4:	f003 fc9e 	bl	8005914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001fd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001fec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4810      	ldr	r0, [pc, #64]	@ (8002034 <HAL_PCD_MspInit+0xf0>)
 8001ff4:	f003 fc8e 	bl	8005914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8002030 <HAL_PCD_MspInit+0xec>)
 8001ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ffc:	4a0c      	ldr	r2, [pc, #48]	@ (8002030 <HAL_PCD_MspInit+0xec>)
 8001ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002002:	6353      	str	r3, [r2, #52]	@ 0x34
 8002004:	4b0a      	ldr	r3, [pc, #40]	@ (8002030 <HAL_PCD_MspInit+0xec>)
 8002006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4b07      	ldr	r3, [pc, #28]	@ (8002030 <HAL_PCD_MspInit+0xec>)
 8002012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002014:	4a06      	ldr	r2, [pc, #24]	@ (8002030 <HAL_PCD_MspInit+0xec>)
 8002016:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800201a:	6453      	str	r3, [r2, #68]	@ 0x44
 800201c:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <HAL_PCD_MspInit+0xec>)
 800201e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002020:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002028:	bf00      	nop
 800202a:	37b0      	adds	r7, #176	@ 0xb0
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40023800 	.word	0x40023800
 8002034:	40020000 	.word	0x40020000

08002038 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08e      	sub	sp, #56	@ 0x38
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002048:	4b33      	ldr	r3, [pc, #204]	@ (8002118 <HAL_InitTick+0xe0>)
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	4a32      	ldr	r2, [pc, #200]	@ (8002118 <HAL_InitTick+0xe0>)
 800204e:	f043 0310 	orr.w	r3, r3, #16
 8002052:	6413      	str	r3, [r2, #64]	@ 0x40
 8002054:	4b30      	ldr	r3, [pc, #192]	@ (8002118 <HAL_InitTick+0xe0>)
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	f003 0310 	and.w	r3, r3, #16
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002060:	f107 0210 	add.w	r2, r7, #16
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f006 fe88 	bl	8008d80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002076:	2b00      	cmp	r3, #0
 8002078:	d103      	bne.n	8002082 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800207a:	f006 fe59 	bl	8008d30 <HAL_RCC_GetPCLK1Freq>
 800207e:	6378      	str	r0, [r7, #52]	@ 0x34
 8002080:	e004      	b.n	800208c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002082:	f006 fe55 	bl	8008d30 <HAL_RCC_GetPCLK1Freq>
 8002086:	4603      	mov	r3, r0
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800208c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800208e:	4a23      	ldr	r2, [pc, #140]	@ (800211c <HAL_InitTick+0xe4>)
 8002090:	fba2 2303 	umull	r2, r3, r2, r3
 8002094:	0c9b      	lsrs	r3, r3, #18
 8002096:	3b01      	subs	r3, #1
 8002098:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800209a:	4b21      	ldr	r3, [pc, #132]	@ (8002120 <HAL_InitTick+0xe8>)
 800209c:	4a21      	ldr	r2, [pc, #132]	@ (8002124 <HAL_InitTick+0xec>)
 800209e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80020a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002120 <HAL_InitTick+0xe8>)
 80020a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020a6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80020a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002120 <HAL_InitTick+0xe8>)
 80020aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80020ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002120 <HAL_InitTick+0xe8>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002120 <HAL_InitTick+0xe8>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ba:	4b19      	ldr	r3, [pc, #100]	@ (8002120 <HAL_InitTick+0xe8>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80020c0:	4817      	ldr	r0, [pc, #92]	@ (8002120 <HAL_InitTick+0xe8>)
 80020c2:	f008 fe9b 	bl	800adfc <HAL_TIM_Base_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80020cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d11b      	bne.n	800210c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80020d4:	4812      	ldr	r0, [pc, #72]	@ (8002120 <HAL_InitTick+0xe8>)
 80020d6:	f008 fee9 	bl	800aeac <HAL_TIM_Base_Start_IT>
 80020da:	4603      	mov	r3, r0
 80020dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80020e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d111      	bne.n	800210c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80020e8:	2036      	movs	r0, #54	@ 0x36
 80020ea:	f001 f98f 	bl	800340c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b0f      	cmp	r3, #15
 80020f2:	d808      	bhi.n	8002106 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80020f4:	2200      	movs	r2, #0
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	2036      	movs	r0, #54	@ 0x36
 80020fa:	f001 f96b 	bl	80033d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002128 <HAL_InitTick+0xf0>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6013      	str	r3, [r2, #0]
 8002104:	e002      	b.n	800210c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800210c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002110:	4618      	mov	r0, r3
 8002112:	3738      	adds	r7, #56	@ 0x38
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40023800 	.word	0x40023800
 800211c:	431bde83 	.word	0x431bde83
 8002120:	20000de0 	.word	0x20000de0
 8002124:	40001000 	.word	0x40001000
 8002128:	20000004 	.word	0x20000004

0800212c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <NMI_Handler+0x4>

08002134 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("!!! HARD FAULT HANDLER !!!\n\r");
 800213a:	4809      	ldr	r0, [pc, #36]	@ (8002160 <HardFault_Handler+0x2c>)
 800213c:	f01b ffa8 	bl	801e090 <iprintf>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    // RED LED toggle for visual indication
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002140:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002144:	4807      	ldr	r0, [pc, #28]	@ (8002164 <HardFault_Handler+0x30>)
 8002146:	f003 feb6 	bl	8005eb6 <HAL_GPIO_TogglePin>
  	for(volatile int i=0; i<1000000; i++);
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	e002      	b.n	8002156 <HardFault_Handler+0x22>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3301      	adds	r3, #1
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a03      	ldr	r2, [pc, #12]	@ (8002168 <HardFault_Handler+0x34>)
 800215a:	4293      	cmp	r3, r2
 800215c:	ddf8      	ble.n	8002150 <HardFault_Handler+0x1c>
  	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800215e:	e7ef      	b.n	8002140 <HardFault_Handler+0xc>
 8002160:	0801f1a8 	.word	0x0801f1a8
 8002164:	40020400 	.word	0x40020400
 8002168:	000f423f 	.word	0x000f423f

0800216c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	  printf("!!! HARD FAULT HANDLER !!!\n\r");
 8002170:	4802      	ldr	r0, [pc, #8]	@ (800217c <MemManage_Handler+0x10>)
 8002172:	f01b ff8d 	bl	801e090 <iprintf>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002176:	bf00      	nop
 8002178:	e7fd      	b.n	8002176 <MemManage_Handler+0xa>
 800217a:	bf00      	nop
 800217c:	0801f1a8 	.word	0x0801f1a8

08002180 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	  printf("!!! HARD FAULT HANDLER !!!\n\r");
 8002184:	4802      	ldr	r0, [pc, #8]	@ (8002190 <BusFault_Handler+0x10>)
 8002186:	f01b ff83 	bl	801e090 <iprintf>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800218a:	bf00      	nop
 800218c:	e7fd      	b.n	800218a <BusFault_Handler+0xa>
 800218e:	bf00      	nop
 8002190:	0801f1a8 	.word	0x0801f1a8

08002194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002198:	bf00      	nop
 800219a:	e7fd      	b.n	8002198 <UsageFault_Handler+0x4>

0800219c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80021bc:	4802      	ldr	r0, [pc, #8]	@ (80021c8 <DMA1_Stream0_IRQHandler+0x10>)
 80021be:	f001 feaf 	bl	8003f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000310 	.word	0x20000310

080021cc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80021d0:	4802      	ldr	r0, [pc, #8]	@ (80021dc <DMA1_Stream2_IRQHandler+0x10>)
 80021d2:	f001 fea5 	bl	8003f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200007fc 	.word	0x200007fc

080021e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c4_tx);
 80021e4:	4802      	ldr	r0, [pc, #8]	@ (80021f0 <DMA1_Stream5_IRQHandler+0x10>)
 80021e6:	f001 fe9b 	bl	8003f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000370 	.word	0x20000370

080021f4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80021f8:	4802      	ldr	r0, [pc, #8]	@ (8002204 <DMA1_Stream6_IRQHandler+0x10>)
 80021fa:	f001 fe91 	bl	8003f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	2000085c 	.word	0x2000085c

08002208 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800220c:	4802      	ldr	r0, [pc, #8]	@ (8002218 <ADC_IRQHandler+0x10>)
 800220e:	f000 fc75 	bl	8002afc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200001e8 	.word	0x200001e8

0800221c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002220:	4802      	ldr	r0, [pc, #8]	@ (800222c <I2C1_EV_IRQHandler+0x10>)
 8002222:	f004 f9fb 	bl	800661c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000268 	.word	0x20000268

08002230 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002234:	4802      	ldr	r0, [pc, #8]	@ (8002240 <I2C1_ER_IRQHandler+0x10>)
 8002236:	f004 fa0b 	bl	8006650 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000268 	.word	0x20000268

08002244 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002248:	4802      	ldr	r0, [pc, #8]	@ (8002254 <SPI1_IRQHandler+0x10>)
 800224a:	f007 ff81 	bl	800a150 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	200003d0 	.word	0x200003d0

08002258 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800225c:	4802      	ldr	r0, [pc, #8]	@ (8002268 <USART2_IRQHandler+0x10>)
 800225e:	f009 fc83 	bl	800bb68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200006ec 	.word	0x200006ec

0800226c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002270:	4802      	ldr	r0, [pc, #8]	@ (800227c <USART3_IRQHandler+0x10>)
 8002272:	f009 fc79 	bl	800bb68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000774 	.word	0x20000774

08002280 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002284:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002288:	f003 fe30 	bl	8005eec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}

08002290 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002294:	4802      	ldr	r0, [pc, #8]	@ (80022a0 <UART4_IRQHandler+0x10>)
 8002296:	f009 fc67 	bl	800bb68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000664 	.word	0x20000664

080022a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80022a8:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <TIM6_DAC_IRQHandler+0x20>)
 80022aa:	791b      	ldrb	r3, [r3, #4]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80022b2:	4804      	ldr	r0, [pc, #16]	@ (80022c4 <TIM6_DAC_IRQHandler+0x20>)
 80022b4:	f001 fb49 	bl	800394a <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80022b8:	4803      	ldr	r0, [pc, #12]	@ (80022c8 <TIM6_DAC_IRQHandler+0x24>)
 80022ba:	f008 fe9f 	bl	800affc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000254 	.word	0x20000254
 80022c8:	20000de0 	.word	0x20000de0

080022cc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80022d0:	4802      	ldr	r0, [pc, #8]	@ (80022dc <TIM7_IRQHandler+0x10>)
 80022d2:	f008 fe93 	bl	800affc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000618 	.word	0x20000618

080022e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80022e4:	4802      	ldr	r0, [pc, #8]	@ (80022f0 <DMA2_Stream0_IRQHandler+0x10>)
 80022e6:	f001 fe1b 	bl	8003f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000558 	.word	0x20000558

080022f4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80022f8:	4802      	ldr	r0, [pc, #8]	@ (8002304 <DMA2_Stream1_IRQHandler+0x10>)
 80022fa:	f001 fe11 	bl	8003f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200005b8 	.word	0x200005b8

08002308 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800230c:	4802      	ldr	r0, [pc, #8]	@ (8002318 <DMA2_Stream2_IRQHandler+0x10>)
 800230e:	f001 fe07 	bl	8003f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000498 	.word	0x20000498

0800231c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002320:	4802      	ldr	r0, [pc, #8]	@ (800232c <DMA2_Stream3_IRQHandler+0x10>)
 8002322:	f001 fdfd 	bl	8003f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200004f8 	.word	0x200004f8

08002330 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */
//	printf("ETH_IRQHandler was called\n\r");
  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002334:	4802      	ldr	r0, [pc, #8]	@ (8002340 <ETH_IRQHandler+0x10>)
 8002336:	f002 fc05 	bl	8004b44 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	2000a1b8 	.word	0x2000a1b8

08002344 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002348:	4802      	ldr	r0, [pc, #8]	@ (8002354 <ETH_WKUP_IRQHandler+0x10>)
 800234a:	f002 fbfb 	bl	8004b44 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	2000a1b8 	.word	0x2000a1b8

08002358 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800236c:	4802      	ldr	r0, [pc, #8]	@ (8002378 <SPI4_IRQHandler+0x10>)
 800236e:	f007 feef 	bl	800a150 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000434 	.word	0x20000434

0800237c <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8002380:	4802      	ldr	r0, [pc, #8]	@ (800238c <I2C4_EV_IRQHandler+0x10>)
 8002382:	f004 f94b 	bl	800661c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200002bc 	.word	0x200002bc

08002390 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8002394:	4802      	ldr	r0, [pc, #8]	@ (80023a0 <I2C4_ER_IRQHandler+0x10>)
 8002396:	f004 f95b 	bl	8006650 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200002bc 	.word	0x200002bc

080023a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return 1;
 80023a8:	2301      	movs	r3, #1
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <_kill>:

int _kill(int pid, int sig)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023be:	4b05      	ldr	r3, [pc, #20]	@ (80023d4 <_kill+0x20>)
 80023c0:	2216      	movs	r2, #22
 80023c2:	601a      	str	r2, [r3, #0]
  return -1;
 80023c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	20027e4c 	.word	0x20027e4c

080023d8 <_exit>:

void _exit (int status)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023e0:	f04f 31ff 	mov.w	r1, #4294967295
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff ffe5 	bl	80023b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023ea:	bf00      	nop
 80023ec:	e7fd      	b.n	80023ea <_exit+0x12>

080023ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	e00a      	b.n	8002416 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002400:	f3af 8000 	nop.w
 8002404:	4601      	mov	r1, r0
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	60ba      	str	r2, [r7, #8]
 800240c:	b2ca      	uxtb	r2, r1
 800240e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	3301      	adds	r3, #1
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	429a      	cmp	r2, r3
 800241c:	dbf0      	blt.n	8002400 <_read+0x12>
  }

  return len;
 800241e:	687b      	ldr	r3, [r7, #4]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	e009      	b.n	800244e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	60ba      	str	r2, [r7, #8]
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe ff16 	bl	8001274 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	3301      	adds	r3, #1
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	429a      	cmp	r2, r3
 8002454:	dbf1      	blt.n	800243a <_write+0x12>
  }
  return len;
 8002456:	687b      	ldr	r3, [r7, #4]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <_close>:

int _close(int file)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002468:	f04f 33ff 	mov.w	r3, #4294967295
}
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002488:	605a      	str	r2, [r3, #4]
  return 0;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <_isatty>:

int _isatty(int file)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024a0:	2301      	movs	r3, #1
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b085      	sub	sp, #20
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024d0:	4a14      	ldr	r2, [pc, #80]	@ (8002524 <_sbrk+0x5c>)
 80024d2:	4b15      	ldr	r3, [pc, #84]	@ (8002528 <_sbrk+0x60>)
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024dc:	4b13      	ldr	r3, [pc, #76]	@ (800252c <_sbrk+0x64>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d102      	bne.n	80024ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024e4:	4b11      	ldr	r3, [pc, #68]	@ (800252c <_sbrk+0x64>)
 80024e6:	4a12      	ldr	r2, [pc, #72]	@ (8002530 <_sbrk+0x68>)
 80024e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ea:	4b10      	ldr	r3, [pc, #64]	@ (800252c <_sbrk+0x64>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d205      	bcs.n	8002504 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80024f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002534 <_sbrk+0x6c>)
 80024fa:	220c      	movs	r2, #12
 80024fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002502:	e009      	b.n	8002518 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002504:	4b09      	ldr	r3, [pc, #36]	@ (800252c <_sbrk+0x64>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800250a:	4b08      	ldr	r3, [pc, #32]	@ (800252c <_sbrk+0x64>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	4a06      	ldr	r2, [pc, #24]	@ (800252c <_sbrk+0x64>)
 8002514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002516:	68fb      	ldr	r3, [r7, #12]
}
 8002518:	4618      	mov	r0, r3
 800251a:	371c      	adds	r7, #28
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	20050000 	.word	0x20050000
 8002528:	00000400 	.word	0x00000400
 800252c:	20000e2c 	.word	0x20000e2c
 8002530:	20027e60 	.word	0x20027e60
 8002534:	20027e4c 	.word	0x20027e4c

08002538 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800253c:	4b06      	ldr	r3, [pc, #24]	@ (8002558 <SystemInit+0x20>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002542:	4a05      	ldr	r2, [pc, #20]	@ (8002558 <SystemInit+0x20>)
 8002544:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002548:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 800255c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002594 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002560:	f7ff ffea 	bl	8002538 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002564:	480c      	ldr	r0, [pc, #48]	@ (8002598 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002566:	490d      	ldr	r1, [pc, #52]	@ (800259c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002568:	4a0d      	ldr	r2, [pc, #52]	@ (80025a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800256a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800256c:	e002      	b.n	8002574 <LoopCopyDataInit>

0800256e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800256e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002572:	3304      	adds	r3, #4

08002574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002578:	d3f9      	bcc.n	800256e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800257a:	4a0a      	ldr	r2, [pc, #40]	@ (80025a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800257c:	4c0a      	ldr	r4, [pc, #40]	@ (80025a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800257e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002580:	e001      	b.n	8002586 <LoopFillZerobss>

08002582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002584:	3204      	adds	r2, #4

08002586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002588:	d3fb      	bcc.n	8002582 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800258a:	f01b ff85 	bl	801e498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800258e:	f7fe f825 	bl	80005dc <main>
  bx  lr    
 8002592:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8002594:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002598:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800259c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80025a0:	080223ec 	.word	0x080223ec
  ldr r2, =_sbss
 80025a4:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80025a8:	20027e5c 	.word	0x20027e5c

080025ac <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025ac:	e7fe      	b.n	80025ac <CAN1_RX0_IRQHandler>

080025ae <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00b      	beq.n	80025d6 <LAN8742_RegisterBusIO+0x28>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d007      	beq.n	80025d6 <LAN8742_RegisterBusIO+0x28>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <LAN8742_RegisterBusIO+0x28>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d102      	bne.n	80025dc <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80025d6:	f04f 33ff 	mov.w	r3, #4294967295
 80025da:	e014      	b.n	8002606 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002612:	b580      	push	{r7, lr}
 8002614:	b086      	sub	sp, #24
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d139      	bne.n	80026a2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	e01c      	b.n	8002682 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	f107 020c 	add.w	r2, r7, #12
 8002650:	2112      	movs	r1, #18
 8002652:	6978      	ldr	r0, [r7, #20]
 8002654:	4798      	blx	r3
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	da03      	bge.n	8002664 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 800265c:	f06f 0304 	mvn.w	r3, #4
 8002660:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8002662:	e00b      	b.n	800267c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	429a      	cmp	r2, r3
 800266e:	d105      	bne.n	800267c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	613b      	str	r3, [r7, #16]
         break;
 800267a:	e005      	b.n	8002688 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	3301      	adds	r3, #1
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b1f      	cmp	r3, #31
 8002686:	d9df      	bls.n	8002648 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b1f      	cmp	r3, #31
 800268e:	d902      	bls.n	8002696 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002690:	f06f 0302 	mvn.w	r3, #2
 8002694:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d102      	bne.n	80026a2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80026a2:	693b      	ldr	r3, [r7, #16]
 }
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6810      	ldr	r0, [r2, #0]
 80026c0:	f107 020c 	add.w	r2, r7, #12
 80026c4:	2101      	movs	r1, #1
 80026c6:	4798      	blx	r3
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	da02      	bge.n	80026d4 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80026ce:	f06f 0304 	mvn.w	r3, #4
 80026d2:	e06e      	b.n	80027b2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6810      	ldr	r0, [r2, #0]
 80026dc:	f107 020c 	add.w	r2, r7, #12
 80026e0:	2101      	movs	r1, #1
 80026e2:	4798      	blx	r3
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	da02      	bge.n	80026f0 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80026ea:	f06f 0304 	mvn.w	r3, #4
 80026ee:	e060      	b.n	80027b2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e059      	b.n	80027b2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6810      	ldr	r0, [r2, #0]
 8002706:	f107 020c 	add.w	r2, r7, #12
 800270a:	2100      	movs	r1, #0
 800270c:	4798      	blx	r3
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	da02      	bge.n	800271a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002714:	f06f 0304 	mvn.w	r3, #4
 8002718:	e04b      	b.n	80027b2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d11b      	bne.n	800275c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d006      	beq.n	800273c <LAN8742_GetLinkState+0x90>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002738:	2302      	movs	r3, #2
 800273a:	e03a      	b.n	80027b2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002746:	2303      	movs	r3, #3
 8002748:	e033      	b.n	80027b2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002754:	2304      	movs	r3, #4
 8002756:	e02c      	b.n	80027b2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002758:	2305      	movs	r3, #5
 800275a:	e02a      	b.n	80027b2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6810      	ldr	r0, [r2, #0]
 8002764:	f107 020c 	add.w	r2, r7, #12
 8002768:	211f      	movs	r1, #31
 800276a:	4798      	blx	r3
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	da02      	bge.n	8002778 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002772:	f06f 0304 	mvn.w	r3, #4
 8002776:	e01c      	b.n	80027b2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002782:	2306      	movs	r3, #6
 8002784:	e015      	b.n	80027b2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f003 031c 	and.w	r3, r3, #28
 800278c:	2b18      	cmp	r3, #24
 800278e:	d101      	bne.n	8002794 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002790:	2302      	movs	r3, #2
 8002792:	e00e      	b.n	80027b2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 031c 	and.w	r3, r3, #28
 800279a:	2b08      	cmp	r3, #8
 800279c:	d101      	bne.n	80027a2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800279e:	2303      	movs	r3, #3
 80027a0:	e007      	b.n	80027b2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f003 031c 	and.w	r3, r3, #28
 80027a8:	2b14      	cmp	r3, #20
 80027aa:	d101      	bne.n	80027b0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80027ac:	2304      	movs	r3, #4
 80027ae:	e000      	b.n	80027b2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80027b0:	2305      	movs	r3, #5
    }
  }
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027be:	2003      	movs	r0, #3
 80027c0:	f000 fdfd 	bl	80033be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027c4:	2005      	movs	r0, #5
 80027c6:	f7ff fc37 	bl	8002038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027ca:	f7fe fe35 	bl	8001438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d8:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <HAL_IncTick+0x20>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	461a      	mov	r2, r3
 80027de:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_IncTick+0x24>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4413      	add	r3, r2
 80027e4:	4a04      	ldr	r2, [pc, #16]	@ (80027f8 <HAL_IncTick+0x24>)
 80027e6:	6013      	str	r3, [r2, #0]
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000008 	.word	0x20000008
 80027f8:	20000e30 	.word	0x20000e30

080027fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002800:	4b03      	ldr	r3, [pc, #12]	@ (8002810 <HAL_GetTick+0x14>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000e30 	.word	0x20000e30

08002814 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800281c:	f7ff ffee 	bl	80027fc <HAL_GetTick>
 8002820:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800282c:	d005      	beq.n	800283a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800282e:	4b0a      	ldr	r3, [pc, #40]	@ (8002858 <HAL_Delay+0x44>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4413      	add	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800283a:	bf00      	nop
 800283c:	f7ff ffde 	bl	80027fc <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	429a      	cmp	r2, r3
 800284a:	d8f7      	bhi.n	800283c <HAL_Delay+0x28>
  {
  }
}
 800284c:	bf00      	nop
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	20000008 	.word	0x20000008

0800285c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002864:	2300      	movs	r3, #0
 8002866:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e031      	b.n	80028d6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002876:	2b00      	cmp	r3, #0
 8002878:	d109      	bne.n	800288e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7fe fe14 	bl	80014a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	2b00      	cmp	r3, #0
 8002898:	d116      	bne.n	80028c8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800289e:	4b10      	ldr	r3, [pc, #64]	@ (80028e0 <HAL_ADC_Init+0x84>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	f043 0202 	orr.w	r2, r3, #2
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fbb2 	bl	8003014 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	f023 0303 	bic.w	r3, r3, #3
 80028be:	f043 0201 	orr.w	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80028c6:	e001      	b.n	80028cc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	ffffeefd 	.word	0xffffeefd

080028e4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_ADC_Stop+0x16>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e01f      	b.n	800293a <HAL_ADC_Stop+0x56>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0201 	bic.w	r2, r2, #1
 8002910:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b00      	cmp	r3, #0
 800291e:	d107      	bne.n	8002930 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002924:	4b08      	ldr	r3, [pc, #32]	@ (8002948 <HAL_ADC_Stop+0x64>)
 8002926:	4013      	ands	r3, r2
 8002928:	f043 0201 	orr.w	r2, r3, #1
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	ffffeefe 	.word	0xffffeefe

0800294c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <HAL_ADC_Start_IT+0x1a>
 8002962:	2302      	movs	r3, #2
 8002964:	e0b5      	b.n	8002ad2 <HAL_ADC_Start_IT+0x186>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	d018      	beq.n	80029ae <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0201 	orr.w	r2, r2, #1
 800298a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800298c:	4b54      	ldr	r3, [pc, #336]	@ (8002ae0 <HAL_ADC_Start_IT+0x194>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a54      	ldr	r2, [pc, #336]	@ (8002ae4 <HAL_ADC_Start_IT+0x198>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	0c9a      	lsrs	r2, r3, #18
 8002998:	4613      	mov	r3, r2
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	4413      	add	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80029a0:	e002      	b.n	80029a8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f9      	bne.n	80029a2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d17d      	bne.n	8002ab8 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029c0:	4b49      	ldr	r3, [pc, #292]	@ (8002ae8 <HAL_ADC_Start_IT+0x19c>)
 80029c2:	4013      	ands	r3, r2
 80029c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d007      	beq.n	80029ea <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029e2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029f6:	d106      	bne.n	8002a06 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fc:	f023 0206 	bic.w	r2, r3, #6
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a04:	e002      	b.n	8002a0c <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002a1c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6859      	ldr	r1, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b30      	ldr	r3, [pc, #192]	@ (8002aec <HAL_ADC_Start_IT+0x1a0>)
 8002a2a:	430b      	orrs	r3, r1
 8002a2c:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002a2e:	4b30      	ldr	r3, [pc, #192]	@ (8002af0 <HAL_ADC_Start_IT+0x1a4>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 031f 	and.w	r3, r3, #31
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10f      	bne.n	8002a5a <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d143      	bne.n	8002ad0 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	e03a      	b.n	8002ad0 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a25      	ldr	r2, [pc, #148]	@ (8002af4 <HAL_ADC_Start_IT+0x1a8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d10e      	bne.n	8002a82 <HAL_ADC_Start_IT+0x136>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d107      	bne.n	8002a82 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a80:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002a82:	4b1b      	ldr	r3, [pc, #108]	@ (8002af0 <HAL_ADC_Start_IT+0x1a4>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d120      	bne.n	8002ad0 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a19      	ldr	r2, [pc, #100]	@ (8002af8 <HAL_ADC_Start_IT+0x1ac>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d11b      	bne.n	8002ad0 <HAL_ADC_Start_IT+0x184>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d114      	bne.n	8002ad0 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ab4:	609a      	str	r2, [r3, #8]
 8002ab6:	e00b      	b.n	8002ad0 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abc:	f043 0210 	orr.w	r2, r3, #16
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac8:	f043 0201 	orr.w	r2, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	20000000 	.word	0x20000000
 8002ae4:	431bde83 	.word	0x431bde83
 8002ae8:	fffff8fe 	.word	0xfffff8fe
 8002aec:	04000020 	.word	0x04000020
 8002af0:	40012300 	.word	0x40012300
 8002af4:	40012000 	.word	0x40012000
 8002af8:	40012200 	.word	0x40012200

08002afc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d049      	beq.n	8002bc6 <HAL_ADC_IRQHandler+0xca>
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d046      	beq.n	8002bc6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d105      	bne.n	8002b50 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b48:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d12b      	bne.n	8002bb6 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d127      	bne.n	8002bb6 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d006      	beq.n	8002b82 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d119      	bne.n	8002bb6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0220 	bic.w	r2, r2, #32
 8002b90:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b96:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d105      	bne.n	8002bb6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	f043 0201 	orr.w	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f01a faba 	bl	801d130 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0212 	mvn.w	r2, #18
 8002bc4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d057      	beq.n	8002c8c <HAL_ADC_IRQHandler+0x190>
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d054      	beq.n	8002c8c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d105      	bne.n	8002bfa <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d139      	bne.n	8002c7c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d006      	beq.n	8002c24 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d12b      	bne.n	8002c7c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d124      	bne.n	8002c7c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d11d      	bne.n	8002c7c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d119      	bne.n	8002c7c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d105      	bne.n	8002c7c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c74:	f043 0201 	orr.w	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 fac3 	bl	8003208 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f06f 020c 	mvn.w	r2, #12
 8002c8a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c9a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d017      	beq.n	8002cd2 <HAL_ADC_IRQHandler+0x1d6>
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d014      	beq.n	8002cd2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d10d      	bne.n	8002cd2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f837 	bl	8002d36 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f06f 0201 	mvn.w	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f003 0320 	and.w	r3, r3, #32
 8002cd8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ce0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d015      	beq.n	8002d14 <HAL_ADC_IRQHandler+0x218>
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d012      	beq.n	8002d14 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf2:	f043 0202 	orr.w	r2, r3, #2
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f06f 0220 	mvn.w	r2, #32
 8002d02:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f820 	bl	8002d4a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f06f 0220 	mvn.w	r2, #32
 8002d12:	601a      	str	r2, [r3, #0]
  }
}
 8002d14:	bf00      	nop
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x1c>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e13a      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x292>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b09      	cmp	r3, #9
 8002d8a:	d93a      	bls.n	8002e02 <HAL_ADC_ConfigChannel+0xa2>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d94:	d035      	beq.n	8002e02 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68d9      	ldr	r1, [r3, #12]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	461a      	mov	r2, r3
 8002da4:	4613      	mov	r3, r2
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4413      	add	r3, r2
 8002daa:	3b1e      	subs	r3, #30
 8002dac:	2207      	movs	r2, #7
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43da      	mvns	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	400a      	ands	r2, r1
 8002dba:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a8f      	ldr	r2, [pc, #572]	@ (8003000 <HAL_ADC_ConfigChannel+0x2a0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d10a      	bne.n	8002ddc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68d9      	ldr	r1, [r3, #12]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	061a      	lsls	r2, r3, #24
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dda:	e039      	b.n	8002e50 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68d9      	ldr	r1, [r3, #12]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	4618      	mov	r0, r3
 8002dee:	4603      	mov	r3, r0
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4403      	add	r3, r0
 8002df4:	3b1e      	subs	r3, #30
 8002df6:	409a      	lsls	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e00:	e026      	b.n	8002e50 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6919      	ldr	r1, [r3, #16]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4613      	mov	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	f003 031f 	and.w	r3, r3, #31
 8002e1a:	2207      	movs	r2, #7
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	43da      	mvns	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	400a      	ands	r2, r1
 8002e28:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6919      	ldr	r1, [r3, #16]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	4403      	add	r3, r0
 8002e42:	f003 031f 	and.w	r3, r3, #31
 8002e46:	409a      	lsls	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b06      	cmp	r3, #6
 8002e56:	d824      	bhi.n	8002ea2 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	3b05      	subs	r3, #5
 8002e6a:	221f      	movs	r2, #31
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43da      	mvns	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	400a      	ands	r2, r1
 8002e78:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	4618      	mov	r0, r3
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	3b05      	subs	r3, #5
 8002e94:	fa00 f203 	lsl.w	r2, r0, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ea0:	e04c      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b0c      	cmp	r3, #12
 8002ea8:	d824      	bhi.n	8002ef4 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	3b23      	subs	r3, #35	@ 0x23
 8002ebc:	221f      	movs	r2, #31
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43da      	mvns	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	400a      	ands	r2, r1
 8002eca:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	4618      	mov	r0, r3
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3b23      	subs	r3, #35	@ 0x23
 8002ee6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ef2:	e023      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	3b41      	subs	r3, #65	@ 0x41
 8002f06:	221f      	movs	r2, #31
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43da      	mvns	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	400a      	ands	r2, r1
 8002f14:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	4618      	mov	r0, r3
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3b41      	subs	r3, #65	@ 0x41
 8002f30:	fa00 f203 	lsl.w	r2, r0, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a30      	ldr	r2, [pc, #192]	@ (8003004 <HAL_ADC_ConfigChannel+0x2a4>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d10a      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x1fc>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f4e:	d105      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002f50:	4b2d      	ldr	r3, [pc, #180]	@ (8003008 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	4a2c      	ldr	r2, [pc, #176]	@ (8003008 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f56:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002f5a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a28      	ldr	r2, [pc, #160]	@ (8003004 <HAL_ADC_ConfigChannel+0x2a4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d10f      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x226>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b12      	cmp	r3, #18
 8002f6c:	d10b      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002f6e:	4b26      	ldr	r3, [pc, #152]	@ (8003008 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	4a25      	ldr	r2, [pc, #148]	@ (8003008 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f74:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002f78:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002f7a:	4b23      	ldr	r3, [pc, #140]	@ (8003008 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4a22      	ldr	r2, [pc, #136]	@ (8003008 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f80:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f84:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8003004 <HAL_ADC_ConfigChannel+0x2a4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d12b      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x288>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a1a      	ldr	r2, [pc, #104]	@ (8003000 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d003      	beq.n	8002fa2 <HAL_ADC_ConfigChannel+0x242>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b11      	cmp	r3, #17
 8002fa0:	d122      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002fa2:	4b19      	ldr	r3, [pc, #100]	@ (8003008 <HAL_ADC_ConfigChannel+0x2a8>)
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4a18      	ldr	r2, [pc, #96]	@ (8003008 <HAL_ADC_ConfigChannel+0x2a8>)
 8002fa8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002fac:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002fae:	4b16      	ldr	r3, [pc, #88]	@ (8003008 <HAL_ADC_ConfigChannel+0x2a8>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	4a15      	ldr	r2, [pc, #84]	@ (8003008 <HAL_ADC_ConfigChannel+0x2a8>)
 8002fb4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fb8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a10      	ldr	r2, [pc, #64]	@ (8003000 <HAL_ADC_ConfigChannel+0x2a0>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d111      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002fc4:	4b11      	ldr	r3, [pc, #68]	@ (800300c <HAL_ADC_ConfigChannel+0x2ac>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a11      	ldr	r2, [pc, #68]	@ (8003010 <HAL_ADC_ConfigChannel+0x2b0>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	0c9a      	lsrs	r2, r3, #18
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002fda:	e002      	b.n	8002fe2 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1f9      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	10000012 	.word	0x10000012
 8003004:	40012000 	.word	0x40012000
 8003008:	40012300 	.word	0x40012300
 800300c:	20000000 	.word	0x20000000
 8003010:	431bde83 	.word	0x431bde83

08003014 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800301c:	4b78      	ldr	r3, [pc, #480]	@ (8003200 <ADC_Init+0x1ec>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4a77      	ldr	r2, [pc, #476]	@ (8003200 <ADC_Init+0x1ec>)
 8003022:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003026:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003028:	4b75      	ldr	r3, [pc, #468]	@ (8003200 <ADC_Init+0x1ec>)
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4973      	ldr	r1, [pc, #460]	@ (8003200 <ADC_Init+0x1ec>)
 8003032:	4313      	orrs	r3, r2
 8003034:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003044:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	021a      	lsls	r2, r3, #8
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003068:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800308a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6899      	ldr	r1, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a2:	4a58      	ldr	r2, [pc, #352]	@ (8003204 <ADC_Init+0x1f0>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d022      	beq.n	80030ee <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6899      	ldr	r1, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6899      	ldr	r1, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	e00f      	b.n	800310e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800310c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0202 	bic.w	r2, r2, #2
 800311c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6899      	ldr	r1, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	005a      	lsls	r2, r3, #1
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01b      	beq.n	8003174 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800314a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800315a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6859      	ldr	r1, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003166:	3b01      	subs	r3, #1
 8003168:	035a      	lsls	r2, r3, #13
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	e007      	b.n	8003184 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003182:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003192:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	3b01      	subs	r3, #1
 80031a0:	051a      	lsls	r2, r3, #20
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80031b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6899      	ldr	r1, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80031c6:	025a      	lsls	r2, r3, #9
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6899      	ldr	r1, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	029a      	lsls	r2, r3, #10
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	609a      	str	r2, [r3, #8]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	40012300 	.word	0x40012300
 8003204:	0f000001 	.word	0x0f000001

08003208 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800322c:	4b0b      	ldr	r3, [pc, #44]	@ (800325c <__NVIC_SetPriorityGrouping+0x40>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003238:	4013      	ands	r3, r2
 800323a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003244:	4b06      	ldr	r3, [pc, #24]	@ (8003260 <__NVIC_SetPriorityGrouping+0x44>)
 8003246:	4313      	orrs	r3, r2
 8003248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800324a:	4a04      	ldr	r2, [pc, #16]	@ (800325c <__NVIC_SetPriorityGrouping+0x40>)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	60d3      	str	r3, [r2, #12]
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000ed00 	.word	0xe000ed00
 8003260:	05fa0000 	.word	0x05fa0000

08003264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003268:	4b04      	ldr	r3, [pc, #16]	@ (800327c <__NVIC_GetPriorityGrouping+0x18>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	0a1b      	lsrs	r3, r3, #8
 800326e:	f003 0307 	and.w	r3, r3, #7
}
 8003272:	4618      	mov	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	2b00      	cmp	r3, #0
 8003290:	db0b      	blt.n	80032aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	f003 021f 	and.w	r2, r3, #31
 8003298:	4907      	ldr	r1, [pc, #28]	@ (80032b8 <__NVIC_EnableIRQ+0x38>)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	2001      	movs	r0, #1
 80032a2:	fa00 f202 	lsl.w	r2, r0, r2
 80032a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	e000e100 	.word	0xe000e100

080032bc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	db12      	blt.n	80032f4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	f003 021f 	and.w	r2, r3, #31
 80032d4:	490a      	ldr	r1, [pc, #40]	@ (8003300 <__NVIC_DisableIRQ+0x44>)
 80032d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	2001      	movs	r0, #1
 80032de:	fa00 f202 	lsl.w	r2, r0, r2
 80032e2:	3320      	adds	r3, #32
 80032e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80032e8:	f3bf 8f4f 	dsb	sy
}
 80032ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032ee:	f3bf 8f6f 	isb	sy
}
 80032f2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	e000e100 	.word	0xe000e100

08003304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	6039      	str	r1, [r7, #0]
 800330e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003314:	2b00      	cmp	r3, #0
 8003316:	db0a      	blt.n	800332e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	b2da      	uxtb	r2, r3
 800331c:	490c      	ldr	r1, [pc, #48]	@ (8003350 <__NVIC_SetPriority+0x4c>)
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	0112      	lsls	r2, r2, #4
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	440b      	add	r3, r1
 8003328:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800332c:	e00a      	b.n	8003344 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	b2da      	uxtb	r2, r3
 8003332:	4908      	ldr	r1, [pc, #32]	@ (8003354 <__NVIC_SetPriority+0x50>)
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	3b04      	subs	r3, #4
 800333c:	0112      	lsls	r2, r2, #4
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	440b      	add	r3, r1
 8003342:	761a      	strb	r2, [r3, #24]
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	e000e100 	.word	0xe000e100
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003358:	b480      	push	{r7}
 800335a:	b089      	sub	sp, #36	@ 0x24
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f1c3 0307 	rsb	r3, r3, #7
 8003372:	2b04      	cmp	r3, #4
 8003374:	bf28      	it	cs
 8003376:	2304      	movcs	r3, #4
 8003378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3304      	adds	r3, #4
 800337e:	2b06      	cmp	r3, #6
 8003380:	d902      	bls.n	8003388 <NVIC_EncodePriority+0x30>
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	3b03      	subs	r3, #3
 8003386:	e000      	b.n	800338a <NVIC_EncodePriority+0x32>
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800338c:	f04f 32ff 	mov.w	r2, #4294967295
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43da      	mvns	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	401a      	ands	r2, r3
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033a0:	f04f 31ff 	mov.w	r1, #4294967295
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	fa01 f303 	lsl.w	r3, r1, r3
 80033aa:	43d9      	mvns	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b0:	4313      	orrs	r3, r2
         );
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3724      	adds	r7, #36	@ 0x24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7ff ff28 	bl	800321c <__NVIC_SetPriorityGrouping>
}
 80033cc:	bf00      	nop
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033e6:	f7ff ff3d 	bl	8003264 <__NVIC_GetPriorityGrouping>
 80033ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	68b9      	ldr	r1, [r7, #8]
 80033f0:	6978      	ldr	r0, [r7, #20]
 80033f2:	f7ff ffb1 	bl	8003358 <NVIC_EncodePriority>
 80033f6:	4602      	mov	r2, r0
 80033f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033fc:	4611      	mov	r1, r2
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff ff80 	bl	8003304 <__NVIC_SetPriority>
}
 8003404:	bf00      	nop
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff ff30 	bl	8003280 <__NVIC_EnableIRQ>
}
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff ff40 	bl	80032bc <__NVIC_DisableIRQ>
}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e054      	b.n	8003500 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	7f5b      	ldrb	r3, [r3, #29]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d105      	bne.n	800346c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fe f866 	bl	8001538 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	791b      	ldrb	r3, [r3, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10c      	bne.n	8003494 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a22      	ldr	r2, [pc, #136]	@ (8003508 <HAL_CRC_Init+0xc4>)
 8003480:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0218 	bic.w	r2, r2, #24
 8003490:	609a      	str	r2, [r3, #8]
 8003492:	e00c      	b.n	80034ae <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6899      	ldr	r1, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	461a      	mov	r2, r3
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f94c 	bl	800373c <HAL_CRCEx_Polynomial_Set>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e028      	b.n	8003500 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	795b      	ldrb	r3, [r3, #5]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d105      	bne.n	80034c2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f04f 32ff 	mov.w	r2, #4294967295
 80034be:	611a      	str	r2, [r3, #16]
 80034c0:	e004      	b.n	80034cc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6912      	ldr	r2, [r2, #16]
 80034ca:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699a      	ldr	r2, [r3, #24]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	04c11db7 	.word	0x04c11db7

0800350c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003518:	2300      	movs	r3, #0
 800351a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2202      	movs	r2, #2
 8003520:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 0201 	orr.w	r2, r2, #1
 8003530:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	2b03      	cmp	r3, #3
 8003538:	d006      	beq.n	8003548 <HAL_CRC_Calculate+0x3c>
 800353a:	2b03      	cmp	r3, #3
 800353c:	d829      	bhi.n	8003592 <HAL_CRC_Calculate+0x86>
 800353e:	2b01      	cmp	r3, #1
 8003540:	d019      	beq.n	8003576 <HAL_CRC_Calculate+0x6a>
 8003542:	2b02      	cmp	r3, #2
 8003544:	d01e      	beq.n	8003584 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8003546:	e024      	b.n	8003592 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
 800354c:	e00a      	b.n	8003564 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	441a      	add	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	3301      	adds	r3, #1
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	429a      	cmp	r2, r3
 800356a:	d3f0      	bcc.n	800354e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	613b      	str	r3, [r7, #16]
      break;
 8003574:	e00e      	b.n	8003594 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 f812 	bl	80035a4 <CRC_Handle_8>
 8003580:	6138      	str	r0, [r7, #16]
      break;
 8003582:	e007      	b.n	8003594 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f89d 	bl	80036c8 <CRC_Handle_16>
 800358e:	6138      	str	r0, [r7, #16]
      break;
 8003590:	e000      	b.n	8003594 <HAL_CRC_Calculate+0x88>
      break;
 8003592:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2201      	movs	r2, #1
 8003598:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800359a:	693b      	ldr	r3, [r7, #16]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b089      	sub	sp, #36	@ 0x24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80035b0:	2300      	movs	r3, #0
 80035b2:	61fb      	str	r3, [r7, #28]
 80035b4:	e023      	b.n	80035fe <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	4413      	add	r3, r2
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	3301      	adds	r3, #1
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	440b      	add	r3, r1
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80035d0:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	3302      	adds	r3, #2
 80035d8:	68b9      	ldr	r1, [r7, #8]
 80035da:	440b      	add	r3, r1
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80035e0:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	3303      	adds	r3, #3
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	440b      	add	r3, r1
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80035f4:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80035f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	3301      	adds	r3, #1
 80035fc:	61fb      	str	r3, [r7, #28]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	089b      	lsrs	r3, r3, #2
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	429a      	cmp	r2, r3
 8003606:	d3d6      	bcc.n	80035b6 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d051      	beq.n	80036b6 <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	2b01      	cmp	r3, #1
 800361a:	d108      	bne.n	800362e <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	4413      	add	r3, r2
 8003624:	68fa      	ldr	r2, [r7, #12]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	7013      	strb	r3, [r2, #0]
 800362c:	e043      	b.n	80036b6 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d118      	bne.n	800366a <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	4413      	add	r3, r2
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	b21b      	sxth	r3, r3
 8003644:	021b      	lsls	r3, r3, #8
 8003646:	b21a      	sxth	r2, r3
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	3301      	adds	r3, #1
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	440b      	add	r3, r1
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	b21b      	sxth	r3, r3
 8003656:	4313      	orrs	r3, r2
 8003658:	b21b      	sxth	r3, r3
 800365a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	8b7a      	ldrh	r2, [r7, #26]
 8003666:	801a      	strh	r2, [r3, #0]
 8003668:	e025      	b.n	80036b6 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f003 0303 	and.w	r3, r3, #3
 8003670:	2b03      	cmp	r3, #3
 8003672:	d120      	bne.n	80036b6 <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	4413      	add	r3, r2
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	b21b      	sxth	r3, r3
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	b21a      	sxth	r2, r3
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	3301      	adds	r3, #1
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	440b      	add	r3, r1
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	b21b      	sxth	r3, r3
 8003692:	4313      	orrs	r3, r2
 8003694:	b21b      	sxth	r3, r3
 8003696:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	8b7a      	ldrh	r2, [r7, #26]
 80036a2:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	3302      	adds	r3, #2
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	4413      	add	r3, r2
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3724      	adds	r7, #36	@ 0x24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	e013      	b.n	8003702 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	4413      	add	r3, r2
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	041a      	lsls	r2, r3, #16
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	3302      	adds	r3, #2
 80036ec:	68b9      	ldr	r1, [r7, #8]
 80036ee:	440b      	add	r3, r1
 80036f0:	881b      	ldrh	r3, [r3, #0]
 80036f2:	4619      	mov	r1, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	3301      	adds	r3, #1
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	085b      	lsrs	r3, r3, #1
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	429a      	cmp	r2, r3
 800370a:	d3e6      	bcc.n	80036da <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d009      	beq.n	800372a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	4413      	add	r3, r2
 8003724:	881a      	ldrh	r2, [r3, #0]
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
}
 8003730:	4618      	mov	r0, r3
 8003732:	371c      	adds	r7, #28
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800373c:	b480      	push	{r7}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003748:	2300      	movs	r3, #0
 800374a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800374c:	231f      	movs	r3, #31
 800374e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d102      	bne.n	8003760 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	75fb      	strb	r3, [r7, #23]
 800375e:	e063      	b.n	8003828 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003760:	bf00      	nop
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1e5a      	subs	r2, r3, #1
 8003766:	613a      	str	r2, [r7, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d009      	beq.n	8003780 <HAL_CRCEx_Polynomial_Set+0x44>
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f003 031f 	and.w	r3, r3, #31
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	fa22 f303 	lsr.w	r3, r2, r3
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f0      	beq.n	8003762 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b18      	cmp	r3, #24
 8003784:	d846      	bhi.n	8003814 <HAL_CRCEx_Polynomial_Set+0xd8>
 8003786:	a201      	add	r2, pc, #4	@ (adr r2, 800378c <HAL_CRCEx_Polynomial_Set+0x50>)
 8003788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378c:	0800381b 	.word	0x0800381b
 8003790:	08003815 	.word	0x08003815
 8003794:	08003815 	.word	0x08003815
 8003798:	08003815 	.word	0x08003815
 800379c:	08003815 	.word	0x08003815
 80037a0:	08003815 	.word	0x08003815
 80037a4:	08003815 	.word	0x08003815
 80037a8:	08003815 	.word	0x08003815
 80037ac:	08003809 	.word	0x08003809
 80037b0:	08003815 	.word	0x08003815
 80037b4:	08003815 	.word	0x08003815
 80037b8:	08003815 	.word	0x08003815
 80037bc:	08003815 	.word	0x08003815
 80037c0:	08003815 	.word	0x08003815
 80037c4:	08003815 	.word	0x08003815
 80037c8:	08003815 	.word	0x08003815
 80037cc:	080037fd 	.word	0x080037fd
 80037d0:	08003815 	.word	0x08003815
 80037d4:	08003815 	.word	0x08003815
 80037d8:	08003815 	.word	0x08003815
 80037dc:	08003815 	.word	0x08003815
 80037e0:	08003815 	.word	0x08003815
 80037e4:	08003815 	.word	0x08003815
 80037e8:	08003815 	.word	0x08003815
 80037ec:	080037f1 	.word	0x080037f1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	2b06      	cmp	r3, #6
 80037f4:	d913      	bls.n	800381e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80037fa:	e010      	b.n	800381e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	2b07      	cmp	r3, #7
 8003800:	d90f      	bls.n	8003822 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003806:	e00c      	b.n	8003822 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	2b0f      	cmp	r3, #15
 800380c:	d90b      	bls.n	8003826 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003812:	e008      	b.n	8003826 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	75fb      	strb	r3, [r7, #23]
        break;
 8003818:	e006      	b.n	8003828 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800381a:	bf00      	nop
 800381c:	e004      	b.n	8003828 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800381e:	bf00      	nop
 8003820:	e002      	b.n	8003828 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003822:	bf00      	nop
 8003824:	e000      	b.n	8003828 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003826:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003828:	7dfb      	ldrb	r3, [r7, #23]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10d      	bne.n	800384a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f023 0118 	bic.w	r1, r3, #24
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	430a      	orrs	r2, r1
 8003848:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800384a:	7dfb      	ldrb	r3, [r7, #23]
}
 800384c:	4618      	mov	r0, r3
 800384e:	371c      	adds	r7, #28
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e014      	b.n	8003894 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	791b      	ldrb	r3, [r3, #4]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d105      	bne.n	8003880 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fd fe7c 	bl	8001578 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e046      	b.n	800393e <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	795b      	ldrb	r3, [r3, #5]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_DAC_Start+0x20>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e040      	b.n	800393e <HAL_DAC_Start+0xa2>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2202      	movs	r2, #2
 80038c6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6819      	ldr	r1, [r3, #0]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2201      	movs	r2, #1
 80038d6:	409a      	lsls	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10f      	bne.n	8003906 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80038f0:	2b3c      	cmp	r3, #60	@ 0x3c
 80038f2:	d11d      	bne.n	8003930 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	605a      	str	r2, [r3, #4]
 8003904:	e014      	b.n	8003930 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	213c      	movs	r1, #60	@ 0x3c
 8003918:	fa01 f303 	lsl.w	r3, r1, r3
 800391c:	429a      	cmp	r2, r3
 800391e:	d107      	bne.n	8003930 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0202 	orr.w	r2, r2, #2
 800392e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003960:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d01d      	beq.n	80039a8 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d018      	beq.n	80039a8 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2204      	movs	r2, #4
 800397a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	f043 0201 	orr.w	r2, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003990:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039a0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f851 	bl	8003a4a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d01d      	beq.n	80039ee <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d018      	beq.n	80039ee <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2204      	movs	r2, #4
 80039c0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f043 0202 	orr.w	r2, r3, #2
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80039d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80039e6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f891 	bl	8003b10 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80039ee:	bf00      	nop
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b087      	sub	sp, #28
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
 8003a02:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e015      	b.n	8003a3e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d105      	bne.n	8003a2a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4413      	add	r3, r2
 8003a24:	3308      	adds	r3, #8
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	e004      	b.n	8003a34 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4413      	add	r3, r2
 8003a30:	3314      	adds	r3, #20
 8003a32:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	461a      	mov	r2, r3
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	371c      	adds	r7, #28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b089      	sub	sp, #36	@ 0x24
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <HAL_DAC_ConfigChannel+0x1c>
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e042      	b.n	8003b04 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	795b      	ldrb	r3, [r3, #5]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_DAC_ConfigChannel+0x2c>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e03c      	b.n	8003b04 <HAL_DAC_ConfigChannel+0xa6>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2202      	movs	r2, #2
 8003a94:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8003aac:	43db      	mvns	r3, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f003 0310 	and.w	r3, r3, #16
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6819      	ldr	r1, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f003 0310 	and.w	r3, r3, #16
 8003ae6:	22c0      	movs	r2, #192	@ 0xc0
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	43da      	mvns	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	400a      	ands	r2, r1
 8003af4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2201      	movs	r2, #1
 8003afa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003b02:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3724      	adds	r7, #36	@ 0x24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b30:	f7fe fe64 	bl	80027fc <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e099      	b.n	8003c74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0201 	bic.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b60:	e00f      	b.n	8003b82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b62:	f7fe fe4b 	bl	80027fc <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b05      	cmp	r3, #5
 8003b6e:	d908      	bls.n	8003b82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2220      	movs	r2, #32
 8003b74:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2203      	movs	r2, #3
 8003b7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e078      	b.n	8003c74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1e8      	bne.n	8003b62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4b38      	ldr	r3, [pc, #224]	@ (8003c7c <HAL_DMA_Init+0x158>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d107      	bne.n	8003bec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be4:	4313      	orrs	r3, r2
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f023 0307 	bic.w	r3, r3, #7
 8003c02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d117      	bne.n	8003c46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00e      	beq.n	8003c46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fb81 	bl	8004330 <DMA_CheckFifoParam>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2240      	movs	r2, #64	@ 0x40
 8003c38:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003c42:	2301      	movs	r3, #1
 8003c44:	e016      	b.n	8003c74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fb38 	bl	80042c4 <DMA_CalcBaseAndBitshift>
 8003c54:	4603      	mov	r3, r0
 8003c56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c5c:	223f      	movs	r2, #63	@ 0x3f
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	f010803f 	.word	0xf010803f

08003c80 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e050      	b.n	8003d34 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d101      	bne.n	8003ca2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e048      	b.n	8003d34 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0201 	bic.w	r2, r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2221      	movs	r2, #33	@ 0x21
 8003ce0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 faee 	bl	80042c4 <DMA_CalcBaseAndBitshift>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf0:	223f      	movs	r2, #63	@ 0x3f
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d101      	bne.n	8003d62 <HAL_DMA_Start_IT+0x26>
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e048      	b.n	8003df4 <HAL_DMA_Start_IT+0xb8>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d137      	bne.n	8003de6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	68b9      	ldr	r1, [r7, #8]
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 fa6c 	bl	8004268 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d94:	223f      	movs	r2, #63	@ 0x3f
 8003d96:	409a      	lsls	r2, r3
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0216 	orr.w	r2, r2, #22
 8003daa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695a      	ldr	r2, [r3, #20]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003dba:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d007      	beq.n	8003dd4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0208 	orr.w	r2, r2, #8
 8003dd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	e005      	b.n	8003df2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003dee:	2302      	movs	r3, #2
 8003df0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e08:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e0a:	f7fe fcf7 	bl	80027fc <HAL_GetTick>
 8003e0e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d008      	beq.n	8003e2e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2280      	movs	r2, #128	@ 0x80
 8003e20:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e052      	b.n	8003ed4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0216 	bic.w	r2, r2, #22
 8003e3c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695a      	ldr	r2, [r3, #20]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e4c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d103      	bne.n	8003e5e <HAL_DMA_Abort+0x62>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d007      	beq.n	8003e6e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f022 0208 	bic.w	r2, r2, #8
 8003e6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0201 	bic.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e7e:	e013      	b.n	8003ea8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e80:	f7fe fcbc 	bl	80027fc <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b05      	cmp	r3, #5
 8003e8c:	d90c      	bls.n	8003ea8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2220      	movs	r2, #32
 8003e92:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2203      	movs	r2, #3
 8003e98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e015      	b.n	8003ed4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1e4      	bne.n	8003e80 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eba:	223f      	movs	r2, #63	@ 0x3f
 8003ebc:	409a      	lsls	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d004      	beq.n	8003efa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2280      	movs	r2, #128	@ 0x80
 8003ef4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e00c      	b.n	8003f14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2205      	movs	r2, #5
 8003efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0201 	bic.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003f2c:	4b8e      	ldr	r3, [pc, #568]	@ (8004168 <HAL_DMA_IRQHandler+0x248>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a8e      	ldr	r2, [pc, #568]	@ (800416c <HAL_DMA_IRQHandler+0x24c>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	0a9b      	lsrs	r3, r3, #10
 8003f38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4a:	2208      	movs	r2, #8
 8003f4c:	409a      	lsls	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4013      	ands	r3, r2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d01a      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d013      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0204 	bic.w	r2, r2, #4
 8003f72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f78:	2208      	movs	r2, #8
 8003f7a:	409a      	lsls	r2, r3
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f84:	f043 0201 	orr.w	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f90:	2201      	movs	r2, #1
 8003f92:	409a      	lsls	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d012      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fae:	2201      	movs	r2, #1
 8003fb0:	409a      	lsls	r2, r3
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fba:	f043 0202 	orr.w	r2, r3, #2
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	409a      	lsls	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d012      	beq.n	8003ff8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00b      	beq.n	8003ff8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff0:	f043 0204 	orr.w	r2, r3, #4
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ffc:	2210      	movs	r2, #16
 8003ffe:	409a      	lsls	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4013      	ands	r3, r2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d043      	beq.n	8004090 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d03c      	beq.n	8004090 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800401a:	2210      	movs	r2, #16
 800401c:	409a      	lsls	r2, r3
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d018      	beq.n	8004062 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d108      	bne.n	8004050 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004042:	2b00      	cmp	r3, #0
 8004044:	d024      	beq.n	8004090 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4798      	blx	r3
 800404e:	e01f      	b.n	8004090 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004054:	2b00      	cmp	r3, #0
 8004056:	d01b      	beq.n	8004090 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	4798      	blx	r3
 8004060:	e016      	b.n	8004090 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800406c:	2b00      	cmp	r3, #0
 800406e:	d107      	bne.n	8004080 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 0208 	bic.w	r2, r2, #8
 800407e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004094:	2220      	movs	r2, #32
 8004096:	409a      	lsls	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4013      	ands	r3, r2
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 808f 	beq.w	80041c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 8087 	beq.w	80041c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b6:	2220      	movs	r2, #32
 80040b8:	409a      	lsls	r2, r3
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b05      	cmp	r3, #5
 80040c8:	d136      	bne.n	8004138 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0216 	bic.w	r2, r2, #22
 80040d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695a      	ldr	r2, [r3, #20]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d103      	bne.n	80040fa <HAL_DMA_IRQHandler+0x1da>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d007      	beq.n	800410a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0208 	bic.w	r2, r2, #8
 8004108:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800410e:	223f      	movs	r2, #63	@ 0x3f
 8004110:	409a      	lsls	r2, r3
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800412a:	2b00      	cmp	r3, #0
 800412c:	d07e      	beq.n	800422c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	4798      	blx	r3
        }
        return;
 8004136:	e079      	b.n	800422c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d01d      	beq.n	8004182 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10d      	bne.n	8004170 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004158:	2b00      	cmp	r3, #0
 800415a:	d031      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4798      	blx	r3
 8004164:	e02c      	b.n	80041c0 <HAL_DMA_IRQHandler+0x2a0>
 8004166:	bf00      	nop
 8004168:	20000000 	.word	0x20000000
 800416c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004174:	2b00      	cmp	r3, #0
 8004176:	d023      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	4798      	blx	r3
 8004180:	e01e      	b.n	80041c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10f      	bne.n	80041b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f022 0210 	bic.w	r2, r2, #16
 800419e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d032      	beq.n	800422e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d022      	beq.n	800421a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2205      	movs	r2, #5
 80041d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0201 	bic.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	3301      	adds	r3, #1
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d307      	bcc.n	8004208 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f2      	bne.n	80041ec <HAL_DMA_IRQHandler+0x2cc>
 8004206:	e000      	b.n	800420a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004208:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	4798      	blx	r3
 800422a:	e000      	b.n	800422e <HAL_DMA_IRQHandler+0x30e>
        return;
 800422c:	bf00      	nop
    }
  }
}
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004242:	b2db      	uxtb	r3, r3
}
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800425c:	4618      	mov	r0, r3
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004284:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	2b40      	cmp	r3, #64	@ 0x40
 8004294:	d108      	bne.n	80042a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80042a6:	e007      	b.n	80042b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	60da      	str	r2, [r3, #12]
}
 80042b8:	bf00      	nop
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	3b10      	subs	r3, #16
 80042d4:	4a13      	ldr	r2, [pc, #76]	@ (8004324 <DMA_CalcBaseAndBitshift+0x60>)
 80042d6:	fba2 2303 	umull	r2, r3, r2, r3
 80042da:	091b      	lsrs	r3, r3, #4
 80042dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042de:	4a12      	ldr	r2, [pc, #72]	@ (8004328 <DMA_CalcBaseAndBitshift+0x64>)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	d908      	bls.n	8004304 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	461a      	mov	r2, r3
 80042f8:	4b0c      	ldr	r3, [pc, #48]	@ (800432c <DMA_CalcBaseAndBitshift+0x68>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	1d1a      	adds	r2, r3, #4
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	659a      	str	r2, [r3, #88]	@ 0x58
 8004302:	e006      	b.n	8004312 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	4b08      	ldr	r3, [pc, #32]	@ (800432c <DMA_CalcBaseAndBitshift+0x68>)
 800430c:	4013      	ands	r3, r2
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	aaaaaaab 	.word	0xaaaaaaab
 8004328:	080221c8 	.word	0x080221c8
 800432c:	fffffc00 	.word	0xfffffc00

08004330 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004338:	2300      	movs	r3, #0
 800433a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004340:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d11f      	bne.n	800438a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2b03      	cmp	r3, #3
 800434e:	d856      	bhi.n	80043fe <DMA_CheckFifoParam+0xce>
 8004350:	a201      	add	r2, pc, #4	@ (adr r2, 8004358 <DMA_CheckFifoParam+0x28>)
 8004352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004356:	bf00      	nop
 8004358:	08004369 	.word	0x08004369
 800435c:	0800437b 	.word	0x0800437b
 8004360:	08004369 	.word	0x08004369
 8004364:	080043ff 	.word	0x080043ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d046      	beq.n	8004402 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004378:	e043      	b.n	8004402 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004382:	d140      	bne.n	8004406 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004388:	e03d      	b.n	8004406 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004392:	d121      	bne.n	80043d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2b03      	cmp	r3, #3
 8004398:	d837      	bhi.n	800440a <DMA_CheckFifoParam+0xda>
 800439a:	a201      	add	r2, pc, #4	@ (adr r2, 80043a0 <DMA_CheckFifoParam+0x70>)
 800439c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a0:	080043b1 	.word	0x080043b1
 80043a4:	080043b7 	.word	0x080043b7
 80043a8:	080043b1 	.word	0x080043b1
 80043ac:	080043c9 	.word	0x080043c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	73fb      	strb	r3, [r7, #15]
      break;
 80043b4:	e030      	b.n	8004418 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d025      	beq.n	800440e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c6:	e022      	b.n	800440e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043d0:	d11f      	bne.n	8004412 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043d6:	e01c      	b.n	8004412 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d903      	bls.n	80043e6 <DMA_CheckFifoParam+0xb6>
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d003      	beq.n	80043ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043e4:	e018      	b.n	8004418 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	73fb      	strb	r3, [r7, #15]
      break;
 80043ea:	e015      	b.n	8004418 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00e      	beq.n	8004416 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	73fb      	strb	r3, [r7, #15]
      break;
 80043fc:	e00b      	b.n	8004416 <DMA_CheckFifoParam+0xe6>
      break;
 80043fe:	bf00      	nop
 8004400:	e00a      	b.n	8004418 <DMA_CheckFifoParam+0xe8>
      break;
 8004402:	bf00      	nop
 8004404:	e008      	b.n	8004418 <DMA_CheckFifoParam+0xe8>
      break;
 8004406:	bf00      	nop
 8004408:	e006      	b.n	8004418 <DMA_CheckFifoParam+0xe8>
      break;
 800440a:	bf00      	nop
 800440c:	e004      	b.n	8004418 <DMA_CheckFifoParam+0xe8>
      break;
 800440e:	bf00      	nop
 8004410:	e002      	b.n	8004418 <DMA_CheckFifoParam+0xe8>
      break;   
 8004412:	bf00      	nop
 8004414:	e000      	b.n	8004418 <DMA_CheckFifoParam+0xe8>
      break;
 8004416:	bf00      	nop
    }
  } 
  
  return status; 
 8004418:	7bfb      	ldrb	r3, [r7, #15]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop

08004428 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e086      	b.n	8004548 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004440:	2b00      	cmp	r3, #0
 8004442:	d106      	bne.n	8004452 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2220      	movs	r2, #32
 8004448:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f009 ffa9 	bl	800e3a4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004452:	4b3f      	ldr	r3, [pc, #252]	@ (8004550 <HAL_ETH_Init+0x128>)
 8004454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004456:	4a3e      	ldr	r2, [pc, #248]	@ (8004550 <HAL_ETH_Init+0x128>)
 8004458:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800445c:	6453      	str	r3, [r2, #68]	@ 0x44
 800445e:	4b3c      	ldr	r3, [pc, #240]	@ (8004550 <HAL_ETH_Init+0x128>)
 8004460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004462:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004466:	60bb      	str	r3, [r7, #8]
 8004468:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800446a:	4b3a      	ldr	r3, [pc, #232]	@ (8004554 <HAL_ETH_Init+0x12c>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	4a39      	ldr	r2, [pc, #228]	@ (8004554 <HAL_ETH_Init+0x12c>)
 8004470:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004474:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004476:	4b37      	ldr	r3, [pc, #220]	@ (8004554 <HAL_ETH_Init+0x12c>)
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	4935      	ldr	r1, [pc, #212]	@ (8004554 <HAL_ETH_Init+0x12c>)
 8004480:	4313      	orrs	r3, r2
 8004482:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004484:	4b33      	ldr	r3, [pc, #204]	@ (8004554 <HAL_ETH_Init+0x12c>)
 8004486:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6812      	ldr	r2, [r2, #0]
 8004496:	f043 0301 	orr.w	r3, r3, #1
 800449a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800449e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044a0:	f7fe f9ac 	bl	80027fc <HAL_GetTick>
 80044a4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80044a6:	e011      	b.n	80044cc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80044a8:	f7fe f9a8 	bl	80027fc <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80044b6:	d909      	bls.n	80044cc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2204      	movs	r2, #4
 80044bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	22e0      	movs	r2, #224	@ 0xe0
 80044c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e03d      	b.n	8004548 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1e4      	bne.n	80044a8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 ff5c 	bl	800539c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f001 f807 	bl	80054f8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f001 f85d 	bl	80055aa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	461a      	mov	r2, r3
 80044f6:	2100      	movs	r1, #0
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 ffc5 	bl	8005488 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800450c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4b0f      	ldr	r3, [pc, #60]	@ (8004558 <HAL_ETH_Init+0x130>)
 800451c:	430b      	orrs	r3, r1
 800451e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8004532:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2210      	movs	r2, #16
 8004542:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40023800 	.word	0x40023800
 8004554:	40013800 	.word	0x40013800
 8004558:	00020060 	.word	0x00020060

0800455c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800456a:	2b10      	cmp	r3, #16
 800456c:	d15f      	bne.n	800462e <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2220      	movs	r2, #32
 8004572:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2204      	movs	r2, #4
 8004580:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f9f6 	bl	8004974 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004590:	2001      	movs	r0, #1
 8004592:	f7fe f93f 	bl	8002814 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6812      	ldr	r2, [r2, #0]
 80045ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80045b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80045b4:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	f043 0302 	orr.w	r3, r3, #2
 80045c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80045cc:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fd80 	bl	80050d4 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f042 0208 	orr.w	r2, r2, #8
 80045e2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80045ec:	2001      	movs	r0, #1
 80045ee:	f7fe f911 	bl	8002814 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0204 	orr.w	r2, r2, #4
 8004608:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004612:	69d9      	ldr	r1, [r3, #28]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	4b07      	ldr	r3, [pc, #28]	@ (8004638 <HAL_ETH_Start_IT+0xdc>)
 800461a:	430b      	orrs	r3, r1
 800461c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004620:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2240      	movs	r2, #64	@ 0x40
 8004626:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800462a:	2300      	movs	r3, #0
 800462c:	e000      	b.n	8004630 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
  }
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	0001a0c1 	.word	0x0001a0c1

0800463c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800464a:	2b40      	cmp	r3, #64	@ 0x40
 800464c:	d16e      	bne.n	800472c <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2220      	movs	r2, #32
 8004652:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800465e:	69d9      	ldr	r1, [r3, #28]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	4b34      	ldr	r3, [pc, #208]	@ (8004738 <HAL_ETH_Stop_IT+0xfc>)
 8004666:	400b      	ands	r3, r1
 8004668:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800466c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004680:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004684:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	f023 0302 	bic.w	r3, r3, #2
 8004698:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800469c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0204 	bic.w	r2, r2, #4
 80046ac:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80046b6:	2001      	movs	r0, #1
 80046b8:	f7fe f8ac 	bl	8002814 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fd05 	bl	80050d4 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0208 	bic.w	r2, r2, #8
 80046d8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80046e2:	2001      	movs	r0, #1
 80046e4:	f7fe f896 	bl	8002814 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	e00e      	b.n	8004714 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	3212      	adds	r2, #18
 80046fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004700:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	3301      	adds	r3, #1
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2b03      	cmp	r3, #3
 8004718:	d9ed      	bls.n	80046f6 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2210      	movs	r2, #16
 8004724:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8004728:	2300      	movs	r3, #0
 800472a:	e000      	b.n	800472e <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
  }
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	fffe5f3e 	.word	0xfffe5f3e

0800473c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d109      	bne.n	8004760 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004752:	f043 0201 	orr.w	r2, r3, #1
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e045      	b.n	80047ec <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004766:	2b40      	cmp	r3, #64	@ 0x40
 8004768:	d13f      	bne.n	80047ea <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004772:	2201      	movs	r2, #1
 8004774:	6839      	ldr	r1, [r7, #0]
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 ff86 	bl	8005688 <ETH_Prepare_Tx_Descriptors>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d009      	beq.n	8004796 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004788:	f043 0202 	orr.w	r2, r3, #2
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e02a      	b.n	80047ec <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8004796:	f3bf 8f4f 	dsb	sy
}
 800479a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a0:	1c5a      	adds	r2, r3, #1
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047aa:	2b03      	cmp	r3, #3
 80047ac:	d904      	bls.n	80047b8 <HAL_ETH_Transmit_IT+0x7c>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b2:	1f1a      	subs	r2, r3, #4
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00d      	beq.n	80047e6 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047d2:	461a      	mov	r2, r3
 80047d4:	2304      	movs	r3, #4
 80047d6:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80047e0:	461a      	mov	r2, r3
 80047e2:	2300      	movs	r3, #0
 80047e4:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e000      	b.n	80047ec <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
  }
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d109      	bne.n	8004820 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004812:	f043 0201 	orr.w	r2, r3, #1
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e0a4      	b.n	800496a <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004826:	2b40      	cmp	r3, #64	@ 0x40
 8004828:	d001      	beq.n	800482e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e09d      	b.n	800496a <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004832:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69fa      	ldr	r2, [r7, #28]
 8004838:	3212      	adds	r2, #18
 800483a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800483e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004844:	f1c3 0304 	rsb	r3, r3, #4
 8004848:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800484a:	e066      	b.n	800491a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004854:	2b00      	cmp	r3, #0
 8004856:	d007      	beq.n	8004868 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	69da      	ldr	r2, [r3, #28]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	699a      	ldr	r2, [r3, #24]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004870:	2b00      	cmp	r3, #0
 8004872:	d103      	bne.n	800487c <HAL_ETH_ReadData+0x88>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004878:	2b00      	cmp	r3, #0
 800487a:	d03c      	beq.n	80048f6 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	0c1b      	lsrs	r3, r3, #16
 800489a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800489e:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d005      	beq.n	80048b8 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80048b4:	2301      	movs	r3, #1
 80048b6:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80048d0:	461a      	mov	r2, r3
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f009 ff39 	bl	800e74c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	441a      	add	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	2200      	movs	r2, #0
 80048f4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	3301      	adds	r3, #1
 80048fa:	61fb      	str	r3, [r7, #28]
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	2b03      	cmp	r3, #3
 8004900:	d902      	bls.n	8004908 <HAL_ETH_ReadData+0x114>
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	3b04      	subs	r3, #4
 8004906:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	3212      	adds	r2, #18
 800490e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004912:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	3301      	adds	r3, #1
 8004918:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800491e:	2b00      	cmp	r3, #0
 8004920:	db06      	blt.n	8004930 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	429a      	cmp	r2, r3
 8004928:	d202      	bcs.n	8004930 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800492a:	7cfb      	ldrb	r3, [r7, #19]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d08d      	beq.n	800484c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	441a      	add	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f815 	bl	8004974 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69fa      	ldr	r2, [r7, #28]
 800494e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8004950:	7cfb      	ldrb	r3, [r7, #19]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d108      	bne.n	8004968 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	e000      	b.n	800496a <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
}
 800496a:	4618      	mov	r0, r3
 800496c:	3720      	adds	r7, #32
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
	...

08004974 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800497c:	2300      	movs	r3, #0
 800497e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004980:	2301      	movs	r3, #1
 8004982:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004988:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69fa      	ldr	r2, [r7, #28]
 800498e:	3212      	adds	r2, #18
 8004990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004994:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800499a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800499c:	e042      	b.n	8004a24 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d112      	bne.n	80049cc <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80049a6:	f107 0308 	add.w	r3, r7, #8
 80049aa:	4618      	mov	r0, r3
 80049ac:	f009 fe9e 	bl	800e6ec <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d102      	bne.n	80049bc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	74fb      	strb	r3, [r7, #19]
 80049ba:	e007      	b.n	80049cc <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	461a      	mov	r2, r3
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	461a      	mov	r2, r3
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80049cc:	7cfb      	ldrb	r3, [r7, #19]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d028      	beq.n	8004a24 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d106      	bne.n	80049e8 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695a      	ldr	r2, [r3, #20]
 80049de:	4b26      	ldr	r3, [pc, #152]	@ (8004a78 <ETH_UpdateDescriptor+0x104>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	6053      	str	r3, [r2, #4]
 80049e6:	e005      	b.n	80049f4 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	3301      	adds	r3, #1
 8004a04:	61fb      	str	r3, [r7, #28]
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d902      	bls.n	8004a12 <ETH_UpdateDescriptor+0x9e>
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	3b04      	subs	r3, #4
 8004a10:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69fa      	ldr	r2, [r7, #28]
 8004a16:	3212      	adds	r2, #18
 8004a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a1c:	617b      	str	r3, [r7, #20]
      desccount--;
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	3b01      	subs	r3, #1
 8004a22:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <ETH_UpdateDescriptor+0xbc>
 8004a2a:	7cfb      	ldrb	r3, [r7, #19]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1b6      	bne.n	800499e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d01a      	beq.n	8004a70 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	3303      	adds	r3, #3
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004a44:	f3bf 8f5f 	dmb	sy
}
 8004a48:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6919      	ldr	r1, [r3, #16]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4613      	mov	r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	18ca      	adds	r2, r1, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a62:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	69fa      	ldr	r2, [r7, #28]
 8004a68:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8004a70:	bf00      	nop
 8004a72:	3720      	adds	r7, #32
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	80004000 	.word	0x80004000

08004a7c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3318      	adds	r3, #24
 8004a88:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a94:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004a96:	2301      	movs	r3, #1
 8004a98:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004a9a:	e047      	b.n	8004b2c <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10a      	bne.n	8004acc <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d902      	bls.n	8004ac8 <HAL_ETH_ReleaseTxPacket+0x4c>
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	3b04      	subs	r3, #4
 8004ac6:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004acc:	7bbb      	ldrb	r3, [r7, #14]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d02c      	beq.n	8004b2c <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68d9      	ldr	r1, [r3, #12]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	440b      	add	r3, r1
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	db1f      	blt.n	8004b28 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	3304      	adds	r3, #4
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f009 fe6b 	bl	800e7d0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	3304      	adds	r3, #4
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	2200      	movs	r2, #0
 8004b06:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	613b      	str	r3, [r7, #16]
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	2b03      	cmp	r3, #3
 8004b12:	d902      	bls.n	8004b1a <HAL_ETH_ReleaseTxPacket+0x9e>
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	3b04      	subs	r3, #4
 8004b18:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004b26:	e001      	b.n	8004b2c <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <HAL_ETH_ReleaseTxPacket+0xbc>
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1b1      	bne.n	8004a9c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b52:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8004b6c:	4b4b      	ldr	r3, [pc, #300]	@ (8004c9c <HAL_ETH_IRQHandler+0x158>)
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00e      	beq.n	8004b9a <HAL_ETH_IRQHandler+0x56>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d009      	beq.n	8004b9a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b8e:	461a      	mov	r2, r3
 8004b90:	4b43      	ldr	r3, [pc, #268]	@ (8004ca0 <HAL_ETH_IRQHandler+0x15c>)
 8004b92:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f009 f945 	bl	800de24 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00f      	beq.n	8004bc4 <HAL_ETH_IRQHandler+0x80>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8004bbc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f009 f940 	bl	800de44 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d042      	beq.n	8004c54 <HAL_ETH_IRQHandler+0x110>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d03d      	beq.n	8004c54 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bde:	f043 0208 	orr.w	r2, r3, #8
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d01a      	beq.n	8004c28 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bfa:	695a      	ldr	r2, [r3, #20]
 8004bfc:	4b29      	ldr	r3, [pc, #164]	@ (8004ca4 <HAL_ETH_IRQHandler+0x160>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	6812      	ldr	r2, [r2, #0]
 8004c14:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8004c18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004c1c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	22e0      	movs	r2, #224	@ 0xe0
 8004c22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004c26:	e012      	b.n	8004c4e <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c30:	695a      	ldr	r2, [r3, #20]
 8004c32:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004c36:	4013      	ands	r3, r2
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c46:	461a      	mov	r2, r3
 8004c48:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004c4c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f009 f908 	bl	800de64 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00e      	beq.n	8004c7c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c64:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f81a 	bl	8004ca8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d006      	beq.n	8004c94 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004c86:	4b05      	ldr	r3, [pc, #20]	@ (8004c9c <HAL_ETH_IRQHandler+0x158>)
 8004c88:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004c8c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f814 	bl	8004cbc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004c94:	bf00      	nop
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40013c00 	.word	0x40013c00
 8004ca0:	00010040 	.word	0x00010040
 8004ca4:	007e2000 	.word	0x007e2000

08004ca8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f003 031c 	and.w	r3, r3, #28
 8004cec:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	02db      	lsls	r3, r3, #11
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	019b      	lsls	r3, r3, #6
 8004cfe:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f023 0302 	bic.w	r3, r3, #2
 8004d0e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f043 0301 	orr.w	r3, r3, #1
 8004d16:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004d20:	f7fd fd6c 	bl	80027fc <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004d26:	e00d      	b.n	8004d44 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004d28:	f7fd fd68 	bl	80027fc <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d36:	d301      	bcc.n	8004d3c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e010      	b.n	8004d5e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1ec      	bne.n	8004d28 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	461a      	mov	r2, r3
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b086      	sub	sp, #24
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	60f8      	str	r0, [r7, #12]
 8004d6e:	60b9      	str	r1, [r7, #8]
 8004d70:	607a      	str	r2, [r7, #4]
 8004d72:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f003 031c 	and.w	r3, r3, #28
 8004d82:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	02db      	lsls	r3, r3, #11
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	019b      	lsls	r3, r3, #6
 8004d94:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f043 0302 	orr.w	r3, r3, #2
 8004da4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f043 0301 	orr.w	r3, r3, #1
 8004dac:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dc0:	f7fd fd1c 	bl	80027fc <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004dc6:	e00d      	b.n	8004de4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004dc8:	f7fd fd18 	bl	80027fc <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dd6:	d301      	bcc.n	8004ddc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e009      	b.n	8004df0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1ec      	bne.n	8004dc8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e0e6      	b.n	8004fda <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0310 	and.w	r3, r3, #16
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	bf14      	ite	ne
 8004e1a:	2301      	movne	r3, #1
 8004e1c:	2300      	moveq	r3, #0
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	bf0c      	ite	eq
 8004e44:	2301      	moveq	r3, #1
 8004e46:	2300      	movne	r3, #0
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	bf14      	ite	ne
 8004e60:	2301      	movne	r3, #1
 8004e62:	2300      	moveq	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	bf0c      	ite	eq
 8004e7a:	2301      	moveq	r3, #1
 8004e7c:	2300      	movne	r3, #0
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	461a      	mov	r2, r3
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	bf14      	ite	ne
 8004e94:	2301      	movne	r3, #1
 8004e96:	2300      	moveq	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	bf0c      	ite	eq
 8004eca:	2301      	moveq	r3, #1
 8004ecc:	2300      	movne	r3, #0
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	bf0c      	ite	eq
 8004ee4:	2301      	moveq	r3, #1
 8004ee6:	2300      	movne	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	461a      	mov	r2, r3
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	bf14      	ite	ne
 8004efe:	2301      	movne	r3, #1
 8004f00:	2300      	moveq	r3, #0
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	461a      	mov	r2, r3
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	bf14      	ite	ne
 8004f26:	2301      	movne	r3, #1
 8004f28:	2300      	moveq	r3, #0
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	bf14      	ite	ne
 8004f40:	2301      	movne	r3, #1
 8004f42:	2300      	moveq	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	461a      	mov	r2, r3
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	bf14      	ite	ne
 8004f5a:	2301      	movne	r3, #1
 8004f5c:	2300      	moveq	r3, #0
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	461a      	mov	r2, r3
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	bf0c      	ite	eq
 8004f76:	2301      	moveq	r3, #1
 8004f78:	2300      	movne	r3, #0
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	0c1b      	lsrs	r3, r3, #16
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	bf14      	ite	ne
 8004fae:	2301      	movne	r3, #1
 8004fb0:	2300      	moveq	r3, #0
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	bf14      	ite	ne
 8004fca:	2301      	movne	r3, #1
 8004fcc:	2300      	moveq	r3, #0
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b082      	sub	sp, #8
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e00b      	b.n	8005012 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005000:	2b10      	cmp	r3, #16
 8005002:	d105      	bne.n	8005010 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8005004:	6839      	ldr	r1, [r7, #0]
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f88a 	bl	8005120 <ETH_SetMACConfig>

    return HAL_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	e000      	b.n	8005012 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
  }
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 031c 	bic.w	r3, r3, #28
 8005032:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005034:	f003 fe70 	bl	8008d18 <HAL_RCC_GetHCLKFreq>
 8005038:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	4a14      	ldr	r2, [pc, #80]	@ (8005090 <HAL_ETH_SetMDIOClockRange+0x74>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d804      	bhi.n	800504c <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f043 0308 	orr.w	r3, r3, #8
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	e019      	b.n	8005080 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4a11      	ldr	r2, [pc, #68]	@ (8005094 <HAL_ETH_SetMDIOClockRange+0x78>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d204      	bcs.n	800505e <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f043 030c 	orr.w	r3, r3, #12
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	e010      	b.n	8005080 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	4a0d      	ldr	r2, [pc, #52]	@ (8005098 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d90c      	bls.n	8005080 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	4a0c      	ldr	r2, [pc, #48]	@ (800509c <HAL_ETH_SetMDIOClockRange+0x80>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d804      	bhi.n	8005078 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f043 0304 	orr.w	r3, r3, #4
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	e003      	b.n	8005080 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f043 0310 	orr.w	r3, r3, #16
 800507e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	611a      	str	r2, [r3, #16]
}
 8005088:	bf00      	nop
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	02160ebf 	.word	0x02160ebf
 8005094:	03938700 	.word	0x03938700
 8005098:	05f5e0ff 	.word	0x05f5e0ff
 800509c:	08f0d17f 	.word	0x08f0d17f

080050a0 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6812      	ldr	r2, [r2, #0]
 80050ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80050f6:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005104:	2001      	movs	r0, #1
 8005106:	f7fd fb85 	bl	8002814 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005114:	6193      	str	r3, [r2, #24]
}
 8005116:	bf00      	nop
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4b53      	ldr	r3, [pc, #332]	@ (8005284 <ETH_SetMACConfig+0x164>)
 8005136:	4013      	ands	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	7b9b      	ldrb	r3, [r3, #14]
 800513e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	7c12      	ldrb	r2, [r2, #16]
 8005144:	2a00      	cmp	r2, #0
 8005146:	d102      	bne.n	800514e <ETH_SetMACConfig+0x2e>
 8005148:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800514c:	e000      	b.n	8005150 <ETH_SetMACConfig+0x30>
 800514e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005150:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	7c52      	ldrb	r2, [r2, #17]
 8005156:	2a00      	cmp	r2, #0
 8005158:	d102      	bne.n	8005160 <ETH_SetMACConfig+0x40>
 800515a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800515e:	e000      	b.n	8005162 <ETH_SetMACConfig+0x42>
 8005160:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005162:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005168:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	7fdb      	ldrb	r3, [r3, #31]
 800516e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005170:	431a      	orrs	r2, r3
                        macconf->Speed |
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005176:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	7f92      	ldrb	r2, [r2, #30]
 800517c:	2a00      	cmp	r2, #0
 800517e:	d102      	bne.n	8005186 <ETH_SetMACConfig+0x66>
 8005180:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005184:	e000      	b.n	8005188 <ETH_SetMACConfig+0x68>
 8005186:	2200      	movs	r2, #0
                        macconf->Speed |
 8005188:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	7f1b      	ldrb	r3, [r3, #28]
 800518e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005190:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005196:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	791b      	ldrb	r3, [r3, #4]
 800519c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800519e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80051a6:	2a00      	cmp	r2, #0
 80051a8:	d102      	bne.n	80051b0 <ETH_SetMACConfig+0x90>
 80051aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051ae:	e000      	b.n	80051b2 <ETH_SetMACConfig+0x92>
 80051b0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80051b2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	7bdb      	ldrb	r3, [r3, #15]
 80051b8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80051ba:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80051c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051c8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80051ca:	4313      	orrs	r3, r2
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80051e2:	2001      	movs	r0, #1
 80051e4:	f7fd fb16 	bl	8002814 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80051fe:	4013      	ands	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005206:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800520e:	2a00      	cmp	r2, #0
 8005210:	d101      	bne.n	8005216 <ETH_SetMACConfig+0xf6>
 8005212:	2280      	movs	r2, #128	@ 0x80
 8005214:	e000      	b.n	8005218 <ETH_SetMACConfig+0xf8>
 8005216:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005218:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800521e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8005226:	2a01      	cmp	r2, #1
 8005228:	d101      	bne.n	800522e <ETH_SetMACConfig+0x10e>
 800522a:	2208      	movs	r2, #8
 800522c:	e000      	b.n	8005230 <ETH_SetMACConfig+0x110>
 800522e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005230:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8005238:	2a01      	cmp	r2, #1
 800523a:	d101      	bne.n	8005240 <ETH_SetMACConfig+0x120>
 800523c:	2204      	movs	r2, #4
 800523e:	e000      	b.n	8005242 <ETH_SetMACConfig+0x122>
 8005240:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005242:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800524a:	2a01      	cmp	r2, #1
 800524c:	d101      	bne.n	8005252 <ETH_SetMACConfig+0x132>
 800524e:	2202      	movs	r2, #2
 8005250:	e000      	b.n	8005254 <ETH_SetMACConfig+0x134>
 8005252:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005254:	4313      	orrs	r3, r2
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	4313      	orrs	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800526c:	2001      	movs	r0, #1
 800526e:	f7fd fad1 	bl	8002814 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	619a      	str	r2, [r3, #24]
}
 800527a:	bf00      	nop
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	fd20810f 	.word	0xfd20810f

08005288 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4b3d      	ldr	r3, [pc, #244]	@ (8005398 <ETH_SetDMAConfig+0x110>)
 80052a2:	4013      	ands	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	7b1b      	ldrb	r3, [r3, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d102      	bne.n	80052b4 <ETH_SetDMAConfig+0x2c>
 80052ae:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80052b2:	e000      	b.n	80052b6 <ETH_SetDMAConfig+0x2e>
 80052b4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	7b5b      	ldrb	r3, [r3, #13]
 80052ba:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80052bc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	7f52      	ldrb	r2, [r2, #29]
 80052c2:	2a00      	cmp	r2, #0
 80052c4:	d102      	bne.n	80052cc <ETH_SetDMAConfig+0x44>
 80052c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80052ca:	e000      	b.n	80052ce <ETH_SetDMAConfig+0x46>
 80052cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80052ce:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	7b9b      	ldrb	r3, [r3, #14]
 80052d4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80052d6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80052dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	7f1b      	ldrb	r3, [r3, #28]
 80052e2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80052e4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	7f9b      	ldrb	r3, [r3, #30]
 80052ea:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80052ec:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80052f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80052fa:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80052fc:	4313      	orrs	r3, r2
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4313      	orrs	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800530c:	461a      	mov	r2, r3
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800531e:	2001      	movs	r0, #1
 8005320:	f7fd fa78 	bl	8002814 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800532c:	461a      	mov	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	791b      	ldrb	r3, [r3, #4]
 8005336:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800533c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005342:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005348:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005350:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8005352:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005358:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800535a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005360:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6812      	ldr	r2, [r2, #0]
 8005366:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800536a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800536e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800537c:	2001      	movs	r0, #1
 800537e:	f7fd fa49 	bl	8002814 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800538a:	461a      	mov	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6013      	str	r3, [r2, #0]
}
 8005390:	bf00      	nop
 8005392:	3710      	adds	r7, #16
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	f8de3f23 	.word	0xf8de3f23

0800539c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b0a6      	sub	sp, #152	@ 0x98
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80053a4:	2301      	movs	r3, #1
 80053a6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80053aa:	2301      	movs	r3, #1
 80053ac:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80053b0:	2300      	movs	r3, #0
 80053b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80053b4:	2300      	movs	r3, #0
 80053b6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80053ba:	2301      	movs	r3, #1
 80053bc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80053c0:	2300      	movs	r3, #0
 80053c2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80053c6:	2301      	movs	r3, #1
 80053c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80053cc:	2301      	movs	r3, #1
 80053ce:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80053d2:	2300      	movs	r3, #0
 80053d4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80053d8:	2300      	movs	r3, #0
 80053da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80053de:	2300      	movs	r3, #0
 80053e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80053e2:	2300      	movs	r3, #0
 80053e4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80053ec:	2300      	movs	r3, #0
 80053ee:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80053f2:	2300      	movs	r3, #0
 80053f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80053f8:	2300      	movs	r3, #0
 80053fa:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80053fe:	2300      	movs	r3, #0
 8005400:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005404:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005408:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800540a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800540e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005410:	2300      	movs	r3, #0
 8005412:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005416:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800541a:	4619      	mov	r1, r3
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff fe7f 	bl	8005120 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005422:	2301      	movs	r3, #1
 8005424:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005426:	2301      	movs	r3, #1
 8005428:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800542a:	2301      	movs	r3, #1
 800542c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005430:	2301      	movs	r3, #1
 8005432:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005434:	2300      	movs	r3, #0
 8005436:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005438:	2300      	movs	r3, #0
 800543a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800543e:	2300      	movs	r3, #0
 8005440:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005444:	2300      	movs	r3, #0
 8005446:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005448:	2301      	movs	r3, #1
 800544a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800544e:	2301      	movs	r3, #1
 8005450:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005452:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005456:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005458:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800545c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800545e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005462:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005464:	2301      	movs	r3, #1
 8005466:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800546a:	2300      	movs	r3, #0
 800546c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800546e:	2300      	movs	r3, #0
 8005470:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005472:	f107 0308 	add.w	r3, r7, #8
 8005476:	4619      	mov	r1, r3
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7ff ff05 	bl	8005288 <ETH_SetDMAConfig>
}
 800547e:	bf00      	nop
 8005480:	3798      	adds	r7, #152	@ 0x98
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	3305      	adds	r3, #5
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	021b      	lsls	r3, r3, #8
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	3204      	adds	r2, #4
 80054a0:	7812      	ldrb	r2, [r2, #0]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	4b11      	ldr	r3, [pc, #68]	@ (80054f0 <ETH_MACAddressConfig+0x68>)
 80054aa:	4413      	add	r3, r2
 80054ac:	461a      	mov	r2, r3
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3303      	adds	r3, #3
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	061a      	lsls	r2, r3, #24
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	3302      	adds	r3, #2
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	041b      	lsls	r3, r3, #16
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3301      	adds	r3, #1
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	021b      	lsls	r3, r3, #8
 80054cc:	4313      	orrs	r3, r2
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	7812      	ldrb	r2, [r2, #0]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	4b06      	ldr	r3, [pc, #24]	@ (80054f4 <ETH_MACAddressConfig+0x6c>)
 80054da:	4413      	add	r3, r2
 80054dc:	461a      	mov	r2, r3
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	6013      	str	r3, [r2, #0]
}
 80054e2:	bf00      	nop
 80054e4:	371c      	adds	r7, #28
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	40028040 	.word	0x40028040
 80054f4:	40028044 	.word	0x40028044

080054f8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005500:	2300      	movs	r3, #0
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	e03e      	b.n	8005584 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68d9      	ldr	r1, [r3, #12]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4613      	mov	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	440b      	add	r3, r1
 8005516:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2200      	movs	r2, #0
 8005522:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2200      	movs	r2, #0
 8005528:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2200      	movs	r2, #0
 800552e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005530:	68b9      	ldr	r1, [r7, #8]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	3206      	adds	r2, #6
 8005538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2b02      	cmp	r3, #2
 800554c:	d80c      	bhi.n	8005568 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68d9      	ldr	r1, [r3, #12]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	00db      	lsls	r3, r3, #3
 800555e:	440b      	add	r3, r1
 8005560:	461a      	mov	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	60da      	str	r2, [r3, #12]
 8005566:	e004      	b.n	8005572 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	461a      	mov	r2, r3
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	3301      	adds	r3, #1
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b03      	cmp	r3, #3
 8005588:	d9bd      	bls.n	8005506 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800559c:	611a      	str	r2, [r3, #16]
}
 800559e:	bf00      	nop
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b085      	sub	sp, #20
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80055b2:	2300      	movs	r3, #0
 80055b4:	60fb      	str	r3, [r7, #12]
 80055b6:	e048      	b.n	800564a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6919      	ldr	r1, [r3, #16]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4613      	mov	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	440b      	add	r3, r1
 80055c8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2200      	movs	r2, #0
 80055d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	2200      	movs	r2, #0
 80055da:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2200      	movs	r2, #0
 80055e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	2200      	movs	r2, #0
 80055e6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2200      	movs	r2, #0
 80055ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80055f4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800560e:	68b9      	ldr	r1, [r7, #8]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	3212      	adds	r2, #18
 8005616:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2b02      	cmp	r3, #2
 800561e:	d80c      	bhi.n	800563a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6919      	ldr	r1, [r3, #16]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	1c5a      	adds	r2, r3, #1
 8005628:	4613      	mov	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	440b      	add	r3, r1
 8005632:	461a      	mov	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	60da      	str	r2, [r3, #12]
 8005638:	e004      	b.n	8005644 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	461a      	mov	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3301      	adds	r3, #1
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2b03      	cmp	r3, #3
 800564e:	d9b3      	bls.n	80055b8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	691a      	ldr	r2, [r3, #16]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800567a:	60da      	str	r2, [r3, #12]
}
 800567c:	bf00      	nop
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8005688:	b480      	push	{r7}
 800568a:	b091      	sub	sp, #68	@ 0x44
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	3318      	adds	r3, #24
 8005698:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800569a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80056a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80056a6:	2300      	movs	r3, #0
 80056a8:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b2:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80056ba:	2300      	movs	r3, #0
 80056bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80056be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056ca:	d007      	beq.n	80056dc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80056cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056d0:	3304      	adds	r3, #4
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80056dc:	2302      	movs	r3, #2
 80056de:	e111      	b.n	8005904 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 80056e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e2:	3301      	adds	r3, #1
 80056e4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80056e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ee:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80056f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	4b86      	ldr	r3, [pc, #536]	@ (8005910 <ETH_Prepare_Tx_Descriptors+0x288>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056fa:	6852      	ldr	r2, [r2, #4]
 80056fc:	431a      	orrs	r2, r3
 80056fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005700:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d008      	beq.n	8005720 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800570e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	431a      	orrs	r2, r3
 800571c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	2b00      	cmp	r3, #0
 800572a:	d008      	beq.n	800573e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800572c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	431a      	orrs	r2, r3
 800573a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0304 	and.w	r3, r3, #4
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800574a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005754:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800575e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005760:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005762:	e082      	b.n	800586a <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800576c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576e:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d006      	beq.n	8005784 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800577e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	e005      	b.n	8005790 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578e:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005792:	3301      	adds	r3, #1
 8005794:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005798:	2b03      	cmp	r3, #3
 800579a:	d902      	bls.n	80057a2 <ETH_Prepare_Tx_Descriptors+0x11a>
 800579c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800579e:	3b04      	subs	r3, #4
 80057a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057aa:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80057ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057b8:	d007      	beq.n	80057ca <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80057ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057be:	3304      	adds	r3, #4
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d029      	beq.n	800581e <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80057ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80057d8:	2300      	movs	r3, #0
 80057da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057dc:	e019      	b.n	8005812 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80057de:	f3bf 8f5f 	dmb	sy
}
 80057e2:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80057e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80057ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ee:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80057f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057f2:	3301      	adds	r3, #1
 80057f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057f8:	2b03      	cmp	r3, #3
 80057fa:	d902      	bls.n	8005802 <ETH_Prepare_Tx_Descriptors+0x17a>
 80057fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057fe:	3b04      	subs	r3, #4
 8005800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005804:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800580a:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 800580c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580e:	3301      	adds	r3, #1
 8005810:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005812:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005816:	429a      	cmp	r2, r3
 8005818:	d3e1      	bcc.n	80057de <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 800581a:	2302      	movs	r3, #2
 800581c:	e072      	b.n	8005904 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800581e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005828:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800582a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800582c:	3301      	adds	r3, #1
 800582e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	461a      	mov	r2, r3
 800583c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583e:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	4b32      	ldr	r3, [pc, #200]	@ (8005910 <ETH_Prepare_Tx_Descriptors+0x288>)
 8005846:	4013      	ands	r3, r2
 8005848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800584a:	6852      	ldr	r2, [r2, #4]
 800584c:	431a      	orrs	r2, r3
 800584e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005850:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005854:	3301      	adds	r3, #1
 8005856:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8005858:	f3bf 8f5f 	dmb	sy
}
 800585c:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800585e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005868:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800586a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	f47f af78 	bne.w	8005764 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d006      	beq.n	8005888 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800587a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	e005      	b.n	8005894 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005892:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800589c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589e:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80058a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a2:	6a3a      	ldr	r2, [r7, #32]
 80058a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a8:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80058aa:	f3bf 8f5f 	dmb	sy
}
 80058ae:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80058b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80058b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ba:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80058bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058c4:	3304      	adds	r3, #4
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	440b      	add	r3, r1
 80058ca:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80058cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80058d0:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058d2:	f3ef 8310 	mrs	r3, PRIMASK
 80058d6:	613b      	str	r3, [r7, #16]
  return(result);
 80058d8:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80058da:	61fb      	str	r3, [r7, #28]
 80058dc:	2301      	movs	r3, #1
 80058de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f383 8810 	msr	PRIMASK, r3
}
 80058e6:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80058e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ee:	4413      	add	r3, r2
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	f383 8810 	msr	PRIMASK, r3
}
 8005900:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3744      	adds	r7, #68	@ 0x44
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	ffffe000 	.word	0xffffe000

08005914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005914:	b480      	push	{r7}
 8005916:	b089      	sub	sp, #36	@ 0x24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800591e:	2300      	movs	r3, #0
 8005920:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005922:	2300      	movs	r3, #0
 8005924:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005926:	2300      	movs	r3, #0
 8005928:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800592a:	2300      	movs	r3, #0
 800592c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800592e:	2300      	movs	r3, #0
 8005930:	61fb      	str	r3, [r7, #28]
 8005932:	e175      	b.n	8005c20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005934:	2201      	movs	r2, #1
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	fa02 f303 	lsl.w	r3, r2, r3
 800593c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4013      	ands	r3, r2
 8005946:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	429a      	cmp	r2, r3
 800594e:	f040 8164 	bne.w	8005c1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	2b01      	cmp	r3, #1
 800595c:	d005      	beq.n	800596a <HAL_GPIO_Init+0x56>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f003 0303 	and.w	r3, r3, #3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d130      	bne.n	80059cc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	2203      	movs	r2, #3
 8005976:	fa02 f303 	lsl.w	r3, r2, r3
 800597a:	43db      	mvns	r3, r3
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	4013      	ands	r3, r2
 8005980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	4313      	orrs	r3, r2
 8005992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059a0:	2201      	movs	r2, #1
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	fa02 f303 	lsl.w	r3, r2, r3
 80059a8:	43db      	mvns	r3, r3
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	4013      	ands	r3, r2
 80059ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	091b      	lsrs	r3, r3, #4
 80059b6:	f003 0201 	and.w	r2, r3, #1
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	fa02 f303 	lsl.w	r3, r2, r3
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f003 0303 	and.w	r3, r3, #3
 80059d4:	2b03      	cmp	r3, #3
 80059d6:	d017      	beq.n	8005a08 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	2203      	movs	r2, #3
 80059e4:	fa02 f303 	lsl.w	r3, r2, r3
 80059e8:	43db      	mvns	r3, r3
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	4013      	ands	r3, r2
 80059ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	fa02 f303 	lsl.w	r3, r2, r3
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f003 0303 	and.w	r3, r3, #3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d123      	bne.n	8005a5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	08da      	lsrs	r2, r3, #3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3208      	adds	r2, #8
 8005a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	f003 0307 	and.w	r3, r3, #7
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	220f      	movs	r2, #15
 8005a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a30:	43db      	mvns	r3, r3
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	4013      	ands	r3, r2
 8005a36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	fa02 f303 	lsl.w	r3, r2, r3
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	08da      	lsrs	r2, r3, #3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3208      	adds	r2, #8
 8005a56:	69b9      	ldr	r1, [r7, #24]
 8005a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	2203      	movs	r2, #3
 8005a68:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6c:	43db      	mvns	r3, r3
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	4013      	ands	r3, r2
 8005a72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	f003 0203 	and.w	r2, r3, #3
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	fa02 f303 	lsl.w	r3, r2, r3
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 80be 	beq.w	8005c1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a9e:	4b66      	ldr	r3, [pc, #408]	@ (8005c38 <HAL_GPIO_Init+0x324>)
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa2:	4a65      	ldr	r2, [pc, #404]	@ (8005c38 <HAL_GPIO_Init+0x324>)
 8005aa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005aaa:	4b63      	ldr	r3, [pc, #396]	@ (8005c38 <HAL_GPIO_Init+0x324>)
 8005aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005ab6:	4a61      	ldr	r2, [pc, #388]	@ (8005c3c <HAL_GPIO_Init+0x328>)
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	089b      	lsrs	r3, r3, #2
 8005abc:	3302      	adds	r3, #2
 8005abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	220f      	movs	r2, #15
 8005ace:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad2:	43db      	mvns	r3, r3
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a58      	ldr	r2, [pc, #352]	@ (8005c40 <HAL_GPIO_Init+0x32c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d037      	beq.n	8005b52 <HAL_GPIO_Init+0x23e>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a57      	ldr	r2, [pc, #348]	@ (8005c44 <HAL_GPIO_Init+0x330>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d031      	beq.n	8005b4e <HAL_GPIO_Init+0x23a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a56      	ldr	r2, [pc, #344]	@ (8005c48 <HAL_GPIO_Init+0x334>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d02b      	beq.n	8005b4a <HAL_GPIO_Init+0x236>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a55      	ldr	r2, [pc, #340]	@ (8005c4c <HAL_GPIO_Init+0x338>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d025      	beq.n	8005b46 <HAL_GPIO_Init+0x232>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a54      	ldr	r2, [pc, #336]	@ (8005c50 <HAL_GPIO_Init+0x33c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d01f      	beq.n	8005b42 <HAL_GPIO_Init+0x22e>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a53      	ldr	r2, [pc, #332]	@ (8005c54 <HAL_GPIO_Init+0x340>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d019      	beq.n	8005b3e <HAL_GPIO_Init+0x22a>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a52      	ldr	r2, [pc, #328]	@ (8005c58 <HAL_GPIO_Init+0x344>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d013      	beq.n	8005b3a <HAL_GPIO_Init+0x226>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a51      	ldr	r2, [pc, #324]	@ (8005c5c <HAL_GPIO_Init+0x348>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00d      	beq.n	8005b36 <HAL_GPIO_Init+0x222>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a50      	ldr	r2, [pc, #320]	@ (8005c60 <HAL_GPIO_Init+0x34c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d007      	beq.n	8005b32 <HAL_GPIO_Init+0x21e>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a4f      	ldr	r2, [pc, #316]	@ (8005c64 <HAL_GPIO_Init+0x350>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d101      	bne.n	8005b2e <HAL_GPIO_Init+0x21a>
 8005b2a:	2309      	movs	r3, #9
 8005b2c:	e012      	b.n	8005b54 <HAL_GPIO_Init+0x240>
 8005b2e:	230a      	movs	r3, #10
 8005b30:	e010      	b.n	8005b54 <HAL_GPIO_Init+0x240>
 8005b32:	2308      	movs	r3, #8
 8005b34:	e00e      	b.n	8005b54 <HAL_GPIO_Init+0x240>
 8005b36:	2307      	movs	r3, #7
 8005b38:	e00c      	b.n	8005b54 <HAL_GPIO_Init+0x240>
 8005b3a:	2306      	movs	r3, #6
 8005b3c:	e00a      	b.n	8005b54 <HAL_GPIO_Init+0x240>
 8005b3e:	2305      	movs	r3, #5
 8005b40:	e008      	b.n	8005b54 <HAL_GPIO_Init+0x240>
 8005b42:	2304      	movs	r3, #4
 8005b44:	e006      	b.n	8005b54 <HAL_GPIO_Init+0x240>
 8005b46:	2303      	movs	r3, #3
 8005b48:	e004      	b.n	8005b54 <HAL_GPIO_Init+0x240>
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	e002      	b.n	8005b54 <HAL_GPIO_Init+0x240>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <HAL_GPIO_Init+0x240>
 8005b52:	2300      	movs	r3, #0
 8005b54:	69fa      	ldr	r2, [r7, #28]
 8005b56:	f002 0203 	and.w	r2, r2, #3
 8005b5a:	0092      	lsls	r2, r2, #2
 8005b5c:	4093      	lsls	r3, r2
 8005b5e:	69ba      	ldr	r2, [r7, #24]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005b64:	4935      	ldr	r1, [pc, #212]	@ (8005c3c <HAL_GPIO_Init+0x328>)
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	089b      	lsrs	r3, r3, #2
 8005b6a:	3302      	adds	r3, #2
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b72:	4b3d      	ldr	r3, [pc, #244]	@ (8005c68 <HAL_GPIO_Init+0x354>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	43db      	mvns	r3, r3
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b96:	4a34      	ldr	r2, [pc, #208]	@ (8005c68 <HAL_GPIO_Init+0x354>)
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b9c:	4b32      	ldr	r3, [pc, #200]	@ (8005c68 <HAL_GPIO_Init+0x354>)
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	43db      	mvns	r3, r3
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005bc0:	4a29      	ldr	r2, [pc, #164]	@ (8005c68 <HAL_GPIO_Init+0x354>)
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005bc6:	4b28      	ldr	r3, [pc, #160]	@ (8005c68 <HAL_GPIO_Init+0x354>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	43db      	mvns	r3, r3
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005bea:	4a1f      	ldr	r2, [pc, #124]	@ (8005c68 <HAL_GPIO_Init+0x354>)
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8005c68 <HAL_GPIO_Init+0x354>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	43db      	mvns	r3, r3
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c14:	4a14      	ldr	r2, [pc, #80]	@ (8005c68 <HAL_GPIO_Init+0x354>)
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	61fb      	str	r3, [r7, #28]
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	2b0f      	cmp	r3, #15
 8005c24:	f67f ae86 	bls.w	8005934 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005c28:	bf00      	nop
 8005c2a:	bf00      	nop
 8005c2c:	3724      	adds	r7, #36	@ 0x24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	40023800 	.word	0x40023800
 8005c3c:	40013800 	.word	0x40013800
 8005c40:	40020000 	.word	0x40020000
 8005c44:	40020400 	.word	0x40020400
 8005c48:	40020800 	.word	0x40020800
 8005c4c:	40020c00 	.word	0x40020c00
 8005c50:	40021000 	.word	0x40021000
 8005c54:	40021400 	.word	0x40021400
 8005c58:	40021800 	.word	0x40021800
 8005c5c:	40021c00 	.word	0x40021c00
 8005c60:	40022000 	.word	0x40022000
 8005c64:	40022400 	.word	0x40022400
 8005c68:	40013c00 	.word	0x40013c00

08005c6c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005c76:	2300      	movs	r3, #0
 8005c78:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005c82:	2300      	movs	r3, #0
 8005c84:	617b      	str	r3, [r7, #20]
 8005c86:	e0d9      	b.n	8005e3c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005c88:	2201      	movs	r2, #1
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c90:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	4013      	ands	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	f040 80c9 	bne.w	8005e36 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005ca4:	4a6b      	ldr	r2, [pc, #428]	@ (8005e54 <HAL_GPIO_DeInit+0x1e8>)
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	089b      	lsrs	r3, r3, #2
 8005caa:	3302      	adds	r3, #2
 8005cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cb0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f003 0303 	and.w	r3, r3, #3
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	220f      	movs	r2, #15
 8005cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a63      	ldr	r2, [pc, #396]	@ (8005e58 <HAL_GPIO_DeInit+0x1ec>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d037      	beq.n	8005d3e <HAL_GPIO_DeInit+0xd2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a62      	ldr	r2, [pc, #392]	@ (8005e5c <HAL_GPIO_DeInit+0x1f0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d031      	beq.n	8005d3a <HAL_GPIO_DeInit+0xce>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a61      	ldr	r2, [pc, #388]	@ (8005e60 <HAL_GPIO_DeInit+0x1f4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d02b      	beq.n	8005d36 <HAL_GPIO_DeInit+0xca>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a60      	ldr	r2, [pc, #384]	@ (8005e64 <HAL_GPIO_DeInit+0x1f8>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d025      	beq.n	8005d32 <HAL_GPIO_DeInit+0xc6>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a5f      	ldr	r2, [pc, #380]	@ (8005e68 <HAL_GPIO_DeInit+0x1fc>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d01f      	beq.n	8005d2e <HAL_GPIO_DeInit+0xc2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a5e      	ldr	r2, [pc, #376]	@ (8005e6c <HAL_GPIO_DeInit+0x200>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d019      	beq.n	8005d2a <HAL_GPIO_DeInit+0xbe>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a5d      	ldr	r2, [pc, #372]	@ (8005e70 <HAL_GPIO_DeInit+0x204>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d013      	beq.n	8005d26 <HAL_GPIO_DeInit+0xba>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a5c      	ldr	r2, [pc, #368]	@ (8005e74 <HAL_GPIO_DeInit+0x208>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d00d      	beq.n	8005d22 <HAL_GPIO_DeInit+0xb6>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a5b      	ldr	r2, [pc, #364]	@ (8005e78 <HAL_GPIO_DeInit+0x20c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d007      	beq.n	8005d1e <HAL_GPIO_DeInit+0xb2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a5a      	ldr	r2, [pc, #360]	@ (8005e7c <HAL_GPIO_DeInit+0x210>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d101      	bne.n	8005d1a <HAL_GPIO_DeInit+0xae>
 8005d16:	2309      	movs	r3, #9
 8005d18:	e012      	b.n	8005d40 <HAL_GPIO_DeInit+0xd4>
 8005d1a:	230a      	movs	r3, #10
 8005d1c:	e010      	b.n	8005d40 <HAL_GPIO_DeInit+0xd4>
 8005d1e:	2308      	movs	r3, #8
 8005d20:	e00e      	b.n	8005d40 <HAL_GPIO_DeInit+0xd4>
 8005d22:	2307      	movs	r3, #7
 8005d24:	e00c      	b.n	8005d40 <HAL_GPIO_DeInit+0xd4>
 8005d26:	2306      	movs	r3, #6
 8005d28:	e00a      	b.n	8005d40 <HAL_GPIO_DeInit+0xd4>
 8005d2a:	2305      	movs	r3, #5
 8005d2c:	e008      	b.n	8005d40 <HAL_GPIO_DeInit+0xd4>
 8005d2e:	2304      	movs	r3, #4
 8005d30:	e006      	b.n	8005d40 <HAL_GPIO_DeInit+0xd4>
 8005d32:	2303      	movs	r3, #3
 8005d34:	e004      	b.n	8005d40 <HAL_GPIO_DeInit+0xd4>
 8005d36:	2302      	movs	r3, #2
 8005d38:	e002      	b.n	8005d40 <HAL_GPIO_DeInit+0xd4>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e000      	b.n	8005d40 <HAL_GPIO_DeInit+0xd4>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	f002 0203 	and.w	r2, r2, #3
 8005d46:	0092      	lsls	r2, r2, #2
 8005d48:	4093      	lsls	r3, r2
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d132      	bne.n	8005db6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005d50:	4b4b      	ldr	r3, [pc, #300]	@ (8005e80 <HAL_GPIO_DeInit+0x214>)
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	43db      	mvns	r3, r3
 8005d58:	4949      	ldr	r1, [pc, #292]	@ (8005e80 <HAL_GPIO_DeInit+0x214>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005d5e:	4b48      	ldr	r3, [pc, #288]	@ (8005e80 <HAL_GPIO_DeInit+0x214>)
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	43db      	mvns	r3, r3
 8005d66:	4946      	ldr	r1, [pc, #280]	@ (8005e80 <HAL_GPIO_DeInit+0x214>)
 8005d68:	4013      	ands	r3, r2
 8005d6a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005d6c:	4b44      	ldr	r3, [pc, #272]	@ (8005e80 <HAL_GPIO_DeInit+0x214>)
 8005d6e:	68da      	ldr	r2, [r3, #12]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	43db      	mvns	r3, r3
 8005d74:	4942      	ldr	r1, [pc, #264]	@ (8005e80 <HAL_GPIO_DeInit+0x214>)
 8005d76:	4013      	ands	r3, r2
 8005d78:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005d7a:	4b41      	ldr	r3, [pc, #260]	@ (8005e80 <HAL_GPIO_DeInit+0x214>)
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	43db      	mvns	r3, r3
 8005d82:	493f      	ldr	r1, [pc, #252]	@ (8005e80 <HAL_GPIO_DeInit+0x214>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f003 0303 	and.w	r3, r3, #3
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	220f      	movs	r2, #15
 8005d92:	fa02 f303 	lsl.w	r3, r2, r3
 8005d96:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005d98:	4a2e      	ldr	r2, [pc, #184]	@ (8005e54 <HAL_GPIO_DeInit+0x1e8>)
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	089b      	lsrs	r3, r3, #2
 8005d9e:	3302      	adds	r3, #2
 8005da0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	43da      	mvns	r2, r3
 8005da8:	482a      	ldr	r0, [pc, #168]	@ (8005e54 <HAL_GPIO_DeInit+0x1e8>)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	089b      	lsrs	r3, r3, #2
 8005dae:	400a      	ands	r2, r1
 8005db0:	3302      	adds	r3, #2
 8005db2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	005b      	lsls	r3, r3, #1
 8005dbe:	2103      	movs	r1, #3
 8005dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc4:	43db      	mvns	r3, r3
 8005dc6:	401a      	ands	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	08da      	lsrs	r2, r3, #3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3208      	adds	r2, #8
 8005dd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	220f      	movs	r2, #15
 8005de2:	fa02 f303 	lsl.w	r3, r2, r3
 8005de6:	43db      	mvns	r3, r3
 8005de8:	697a      	ldr	r2, [r7, #20]
 8005dea:	08d2      	lsrs	r2, r2, #3
 8005dec:	4019      	ands	r1, r3
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	3208      	adds	r2, #8
 8005df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68da      	ldr	r2, [r3, #12]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	2103      	movs	r1, #3
 8005e00:	fa01 f303 	lsl.w	r3, r1, r3
 8005e04:	43db      	mvns	r3, r3
 8005e06:	401a      	ands	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	2101      	movs	r1, #1
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	fa01 f303 	lsl.w	r3, r1, r3
 8005e18:	43db      	mvns	r3, r3
 8005e1a:	401a      	ands	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	2103      	movs	r1, #3
 8005e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2e:	43db      	mvns	r3, r3
 8005e30:	401a      	ands	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	617b      	str	r3, [r7, #20]
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	2b0f      	cmp	r3, #15
 8005e40:	f67f af22 	bls.w	8005c88 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop
 8005e48:	371c      	adds	r7, #28
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	40013800 	.word	0x40013800
 8005e58:	40020000 	.word	0x40020000
 8005e5c:	40020400 	.word	0x40020400
 8005e60:	40020800 	.word	0x40020800
 8005e64:	40020c00 	.word	0x40020c00
 8005e68:	40021000 	.word	0x40021000
 8005e6c:	40021400 	.word	0x40021400
 8005e70:	40021800 	.word	0x40021800
 8005e74:	40021c00 	.word	0x40021c00
 8005e78:	40022000 	.word	0x40022000
 8005e7c:	40022400 	.word	0x40022400
 8005e80:	40013c00 	.word	0x40013c00

08005e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	807b      	strh	r3, [r7, #2]
 8005e90:	4613      	mov	r3, r2
 8005e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e94:	787b      	ldrb	r3, [r7, #1]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e9a:	887a      	ldrh	r2, [r7, #2]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005ea0:	e003      	b.n	8005eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005ea2:	887b      	ldrh	r3, [r7, #2]
 8005ea4:	041a      	lsls	r2, r3, #16
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	619a      	str	r2, [r3, #24]
}
 8005eaa:	bf00      	nop
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b085      	sub	sp, #20
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005ec8:	887a      	ldrh	r2, [r7, #2]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	4013      	ands	r3, r2
 8005ece:	041a      	lsls	r2, r3, #16
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	43d9      	mvns	r1, r3
 8005ed4:	887b      	ldrh	r3, [r7, #2]
 8005ed6:	400b      	ands	r3, r1
 8005ed8:	431a      	orrs	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	619a      	str	r2, [r3, #24]
}
 8005ede:	bf00      	nop
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
	...

08005eec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005ef6:	4b08      	ldr	r3, [pc, #32]	@ (8005f18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ef8:	695a      	ldr	r2, [r3, #20]
 8005efa:	88fb      	ldrh	r3, [r7, #6]
 8005efc:	4013      	ands	r3, r2
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d006      	beq.n	8005f10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f02:	4a05      	ldr	r2, [pc, #20]	@ (8005f18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f04:	88fb      	ldrh	r3, [r7, #6]
 8005f06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f08:	88fb      	ldrh	r3, [r7, #6]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 f806 	bl	8005f1c <HAL_GPIO_EXTI_Callback>
  }
}
 8005f10:	bf00      	nop
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40013c00 	.word	0x40013c00

08005f1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	4603      	mov	r3, r0
 8005f24:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005f26:	bf00      	nop
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
	...

08005f34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e08b      	b.n	800605e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d106      	bne.n	8005f60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f7fb fb54 	bl	8001608 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2224      	movs	r2, #36	@ 0x24
 8005f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0201 	bic.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005f84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d107      	bne.n	8005fae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005faa:	609a      	str	r2, [r3, #8]
 8005fac:	e006      	b.n	8005fbc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	689a      	ldr	r2, [r3, #8]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005fba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d108      	bne.n	8005fd6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fd2:	605a      	str	r2, [r3, #4]
 8005fd4:	e007      	b.n	8005fe6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005fe4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6859      	ldr	r1, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8006068 <HAL_I2C_Init+0x134>)
 8005ff2:	430b      	orrs	r3, r1
 8005ff4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68da      	ldr	r2, [r3, #12]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006004:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691a      	ldr	r2, [r3, #16]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	69d9      	ldr	r1, [r3, #28]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a1a      	ldr	r2, [r3, #32]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 0201 	orr.w	r2, r2, #1
 800603e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2220      	movs	r2, #32
 800604a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	02008000 	.word	0x02008000

0800606c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e021      	b.n	80060c2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2224      	movs	r2, #36	@ 0x24
 8006082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0201 	bic.w	r2, r2, #1
 8006094:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7fb fbe2 	bl	8001860 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
	...

080060cc <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af02      	add	r7, sp, #8
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	607a      	str	r2, [r7, #4]
 80060d6:	461a      	mov	r2, r3
 80060d8:	460b      	mov	r3, r1
 80060da:	817b      	strh	r3, [r7, #10]
 80060dc:	4613      	mov	r3, r2
 80060de:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	d153      	bne.n	8006194 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060fa:	d101      	bne.n	8006100 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 80060fc:	2302      	movs	r3, #2
 80060fe:	e04a      	b.n	8006196 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006106:	2b01      	cmp	r3, #1
 8006108:	d101      	bne.n	800610e <HAL_I2C_Master_Receive_IT+0x42>
 800610a:	2302      	movs	r3, #2
 800610c:	e043      	b.n	8006196 <HAL_I2C_Master_Receive_IT+0xca>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2222      	movs	r2, #34	@ 0x22
 800611a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2210      	movs	r2, #16
 8006122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	893a      	ldrh	r2, [r7, #8]
 8006136:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4a19      	ldr	r2, [pc, #100]	@ (80061a0 <HAL_I2C_Master_Receive_IT+0xd4>)
 800613c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4a18      	ldr	r2, [pc, #96]	@ (80061a4 <HAL_I2C_Master_Receive_IT+0xd8>)
 8006142:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006148:	b29b      	uxth	r3, r3
 800614a:	2bff      	cmp	r3, #255	@ 0xff
 800614c:	d906      	bls.n	800615c <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = 1U;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2201      	movs	r2, #1
 8006152:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006154:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006158:	617b      	str	r3, [r7, #20]
 800615a:	e007      	b.n	800616c <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006166:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800616a:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006170:	b2da      	uxtb	r2, r3
 8006172:	8979      	ldrh	r1, [r7, #10]
 8006174:	4b0c      	ldr	r3, [pc, #48]	@ (80061a8 <HAL_I2C_Master_Receive_IT+0xdc>)
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f001 fe40 	bl	8007e00 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006188:	2102      	movs	r1, #2
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f001 fe6a 	bl	8007e64 <I2C_Enable_IRQ>

    return HAL_OK;
 8006190:	2300      	movs	r3, #0
 8006192:	e000      	b.n	8006196 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006194:	2302      	movs	r3, #2
  }
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	ffff0000 	.word	0xffff0000
 80061a4:	080067bb 	.word	0x080067bb
 80061a8:	80002400 	.word	0x80002400

080061ac <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	4613      	mov	r3, r2
 80061b8:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b20      	cmp	r3, #32
 80061c4:	d156      	bne.n	8006274 <HAL_I2C_Slave_Transmit_IT+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d101      	bne.n	80061d4 <HAL_I2C_Slave_Transmit_IT+0x28>
 80061d0:	2302      	movs	r3, #2
 80061d2:	e050      	b.n	8006276 <HAL_I2C_Slave_Transmit_IT+0xca>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2221      	movs	r2, #33	@ 0x21
 80061e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2200      	movs	r2, #0
 80061f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006200:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	88fa      	ldrh	r2, [r7, #6]
 800620c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006212:	b29a      	uxth	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4a19      	ldr	r2, [pc, #100]	@ (8006280 <HAL_I2C_Slave_Transmit_IT+0xd4>)
 800621c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	4a18      	ldr	r2, [pc, #96]	@ (8006284 <HAL_I2C_Slave_Transmit_IT+0xd8>)
 8006222:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800622c:	d117      	bne.n	800625e <HAL_I2C_Slave_Transmit_IT+0xb2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006232:	781a      	ldrb	r2, [r3, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623e:	1c5a      	adds	r2, r3, #1
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	b29a      	uxth	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006256:	3b01      	subs	r3, #1
 8006258:	b29a      	uxth	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8006266:	f248 0101 	movw	r1, #32769	@ 0x8001
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f001 fdfa 	bl	8007e64 <I2C_Enable_IRQ>

    return HAL_OK;
 8006270:	2300      	movs	r3, #0
 8006272:	e000      	b.n	8006276 <HAL_I2C_Slave_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006274:	2302      	movs	r3, #2
  }
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	ffff0000 	.word	0xffff0000
 8006284:	08006a3f 	.word	0x08006a3f

08006288 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b08a      	sub	sp, #40	@ 0x28
 800628c:	af02      	add	r7, sp, #8
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	607a      	str	r2, [r7, #4]
 8006292:	461a      	mov	r2, r3
 8006294:	460b      	mov	r3, r1
 8006296:	817b      	strh	r3, [r7, #10]
 8006298:	4613      	mov	r3, r2
 800629a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800629c:	2300      	movs	r3, #0
 800629e:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b20      	cmp	r3, #32
 80062aa:	f040 80ef 	bne.w	800648c <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062bc:	d101      	bne.n	80062c2 <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 80062be:	2302      	movs	r3, #2
 80062c0:	e0e5      	b.n	800648e <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d101      	bne.n	80062d0 <HAL_I2C_Master_Transmit_DMA+0x48>
 80062cc:	2302      	movs	r3, #2
 80062ce:	e0de      	b.n	800648e <HAL_I2C_Master_Transmit_DMA+0x206>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2221      	movs	r2, #33	@ 0x21
 80062dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2210      	movs	r2, #16
 80062e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	893a      	ldrh	r2, [r7, #8]
 80062f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	4a66      	ldr	r2, [pc, #408]	@ (8006498 <HAL_I2C_Master_Transmit_DMA+0x210>)
 80062fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4a66      	ldr	r2, [pc, #408]	@ (800649c <HAL_I2C_Master_Transmit_DMA+0x214>)
 8006304:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800630a:	b29b      	uxth	r3, r3
 800630c:	2bff      	cmp	r3, #255	@ 0xff
 800630e:	d906      	bls.n	800631e <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	22ff      	movs	r2, #255	@ 0xff
 8006314:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006316:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800631a:	61fb      	str	r3, [r7, #28]
 800631c:	e007      	b.n	800632e <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006322:	b29a      	uxth	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006328:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800632c:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006332:	2b00      	cmp	r3, #0
 8006334:	d01a      	beq.n	800636c <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633a:	781a      	ldrb	r2, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006346:	1c5a      	adds	r2, r3, #1
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006350:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006356:	b29b      	uxth	r3, r3
 8006358:	3b01      	subs	r3, #1
 800635a:	b29a      	uxth	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006364:	3b01      	subs	r3, #1
 8006366:	b29a      	uxth	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006370:	2b00      	cmp	r3, #0
 8006372:	d074      	beq.n	800645e <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006378:	2b00      	cmp	r3, #0
 800637a:	d022      	beq.n	80063c2 <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006380:	4a47      	ldr	r2, [pc, #284]	@ (80064a0 <HAL_I2C_Master_Transmit_DMA+0x218>)
 8006382:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006388:	4a46      	ldr	r2, [pc, #280]	@ (80064a4 <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800638a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006390:	2200      	movs	r2, #0
 8006392:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006398:	2200      	movs	r2, #0
 800639a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a4:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80063ac:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80063b2:	f7fd fcc3 	bl	8003d3c <HAL_DMA_Start_IT>
 80063b6:	4603      	mov	r3, r0
 80063b8:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80063ba:	7dfb      	ldrb	r3, [r7, #23]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d13a      	bne.n	8006436 <HAL_I2C_Master_Transmit_DMA+0x1ae>
 80063c0:	e013      	b.n	80063ea <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063d6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e051      	b.n	800648e <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	3301      	adds	r3, #1
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	8979      	ldrh	r1, [r7, #10]
 80063f6:	4b2c      	ldr	r3, [pc, #176]	@ (80064a8 <HAL_I2C_Master_Transmit_DMA+0x220>)
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f001 fcff 	bl	8007e00 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006406:	b29a      	uxth	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800640c:	1ad3      	subs	r3, r2, r3
 800640e:	b29a      	uxth	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800641c:	2110      	movs	r1, #16
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f001 fd20 	bl	8007e64 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	e028      	b.n	8006488 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2220      	movs	r2, #32
 800643a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644a:	f043 0210 	orr.w	r2, r3, #16
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e017      	b.n	800648e <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	4a12      	ldr	r2, [pc, #72]	@ (80064ac <HAL_I2C_Master_Transmit_DMA+0x224>)
 8006462:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	b2da      	uxtb	r2, r3
 8006468:	8979      	ldrh	r1, [r7, #10]
 800646a:	4b0f      	ldr	r3, [pc, #60]	@ (80064a8 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f001 fcc4 	bl	8007e00 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006480:	2101      	movs	r1, #1
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f001 fcee 	bl	8007e64 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8006488:	2300      	movs	r3, #0
 800648a:	e000      	b.n	800648e <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800648c:	2302      	movs	r3, #2
  }
}
 800648e:	4618      	mov	r0, r3
 8006490:	3720      	adds	r7, #32
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	ffff0000 	.word	0xffff0000
 800649c:	08006c47 	.word	0x08006c47
 80064a0:	08007c73 	.word	0x08007c73
 80064a4:	08007d4f 	.word	0x08007d4f
 80064a8:	80002000 	.word	0x80002000
 80064ac:	080067bb 	.word	0x080067bb

080064b0 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	4613      	mov	r3, r2
 80064bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b20      	cmp	r3, #32
 80064c8:	f040 809b 	bne.w	8006602 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <HAL_I2C_Slave_Receive_DMA+0x28>
 80064d2:	88fb      	ldrh	r3, [r7, #6]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d105      	bne.n	80064e4 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064de:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e08f      	b.n	8006604 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d101      	bne.n	80064f2 <HAL_I2C_Slave_Receive_DMA+0x42>
 80064ee:	2302      	movs	r3, #2
 80064f0:	e088      	b.n	8006604 <HAL_I2C_Slave_Receive_DMA+0x154>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2222      	movs	r2, #34	@ 0x22
 80064fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2220      	movs	r2, #32
 8006506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	88fa      	ldrh	r2, [r7, #6]
 800651a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006520:	b29a      	uxth	r2, r3
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	4a38      	ldr	r2, [pc, #224]	@ (800660c <HAL_I2C_Slave_Receive_DMA+0x15c>)
 800652a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4a38      	ldr	r2, [pc, #224]	@ (8006610 <HAL_I2C_Slave_Receive_DMA+0x160>)
 8006530:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006536:	2b00      	cmp	r3, #0
 8006538:	d020      	beq.n	800657c <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800653e:	4a35      	ldr	r2, [pc, #212]	@ (8006614 <HAL_I2C_Slave_Receive_DMA+0x164>)
 8006540:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006546:	4a34      	ldr	r2, [pc, #208]	@ (8006618 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8006548:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800654e:	2200      	movs	r2, #0
 8006550:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006556:	2200      	movs	r2, #0
 8006558:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3324      	adds	r3, #36	@ 0x24
 8006564:	4619      	mov	r1, r3
 8006566:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800656c:	f7fd fbe6 	bl	8003d3c <HAL_DMA_Start_IT>
 8006570:	4603      	mov	r3, r0
 8006572:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8006574:	7dfb      	ldrb	r3, [r7, #23]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d12f      	bne.n	80065da <HAL_I2C_Slave_Receive_DMA+0x12a>
 800657a:	e013      	b.n	80065a4 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2228      	movs	r2, #40	@ 0x28
 8006580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006590:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e02f      	b.n	8006604 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065b2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80065bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f001 fc4f 	bl	8007e64 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065d4:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	e014      	b.n	8006604 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2228      	movs	r2, #40	@ 0x28
 80065de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ee:	f043 0210 	orr.w	r2, r3, #16
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e000      	b.n	8006604 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8006602:	2302      	movs	r3, #2
  }
}
 8006604:	4618      	mov	r0, r3
 8006606:	3718      	adds	r7, #24
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	ffff0000 	.word	0xffff0000
 8006610:	080070e9 	.word	0x080070e9
 8006614:	08007d09 	.word	0x08007d09
 8006618:	08007d4f 	.word	0x08007d4f

0800661c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006638:	2b00      	cmp	r3, #0
 800663a:	d005      	beq.n	8006648 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006640:	68ba      	ldr	r2, [r7, #8]
 8006642:	68f9      	ldr	r1, [r7, #12]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	4798      	blx	r3
  }
}
 8006648:	bf00      	nop
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	0a1b      	lsrs	r3, r3, #8
 800666c:	f003 0301 	and.w	r3, r3, #1
 8006670:	2b00      	cmp	r3, #0
 8006672:	d010      	beq.n	8006696 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	09db      	lsrs	r3, r3, #7
 8006678:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00a      	beq.n	8006696 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006684:	f043 0201 	orr.w	r2, r3, #1
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006694:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	0a9b      	lsrs	r3, r3, #10
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d010      	beq.n	80066c4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	09db      	lsrs	r3, r3, #7
 80066a6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00a      	beq.n	80066c4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066b2:	f043 0208 	orr.w	r2, r3, #8
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80066c2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	0a5b      	lsrs	r3, r3, #9
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d010      	beq.n	80066f2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	09db      	lsrs	r3, r3, #7
 80066d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00a      	beq.n	80066f2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e0:	f043 0202 	orr.w	r2, r3, #2
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066f0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066f6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f003 030b 	and.w	r3, r3, #11
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8006702:	68f9      	ldr	r1, [r7, #12]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f001 f979 	bl	80079fc <I2C_ITError>
  }
}
 800670a:	bf00      	nop
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
 8006742:	460b      	mov	r3, r1
 8006744:	70fb      	strb	r3, [r7, #3]
 8006746:	4613      	mov	r3, r2
 8006748:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800674a:	bf00      	nop
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006756:	b480      	push	{r7}
 8006758:	b083      	sub	sp, #12
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800676a:	b480      	push	{r7}
 800676c:	b083      	sub	sp, #12
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006772:	bf00      	nop
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006792:	b480      	push	{r7}
 8006794:	b083      	sub	sp, #12
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800679a:	bf00      	nop
 800679c:	370c      	adds	r7, #12
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b083      	sub	sp, #12
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80067ae:	bf00      	nop
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b088      	sub	sp, #32
 80067be:	af02      	add	r7, sp, #8
 80067c0:	60f8      	str	r0, [r7, #12]
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d101      	bne.n	80067d8 <I2C_Master_ISR_IT+0x1e>
 80067d4:	2302      	movs	r3, #2
 80067d6:	e12e      	b.n	8006a36 <I2C_Master_ISR_IT+0x27c>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	091b      	lsrs	r3, r3, #4
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d013      	beq.n	8006814 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	091b      	lsrs	r3, r3, #4
 80067f0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00d      	beq.n	8006814 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2210      	movs	r2, #16
 80067fe:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006804:	f043 0204 	orr.w	r2, r3, #4
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f001 fa0c 	bl	8007c2a <I2C_Flush_TXDR>
 8006812:	e0fb      	b.n	8006a0c <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	089b      	lsrs	r3, r3, #2
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	d023      	beq.n	8006868 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	089b      	lsrs	r3, r3, #2
 8006824:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006828:	2b00      	cmp	r3, #0
 800682a:	d01d      	beq.n	8006868 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f023 0304 	bic.w	r3, r3, #4
 8006832:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006850:	3b01      	subs	r3, #1
 8006852:	b29a      	uxth	r2, r3
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800685c:	b29b      	uxth	r3, r3
 800685e:	3b01      	subs	r3, #1
 8006860:	b29a      	uxth	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006866:	e0d1      	b.n	8006a0c <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	099b      	lsrs	r3, r3, #6
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d12a      	bne.n	80068ca <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	085b      	lsrs	r3, r3, #1
 8006878:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800687c:	2b00      	cmp	r3, #0
 800687e:	d024      	beq.n	80068ca <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	085b      	lsrs	r3, r3, #1
 8006884:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006888:	2b00      	cmp	r3, #0
 800688a:	d01e      	beq.n	80068ca <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006890:	b29b      	uxth	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 80ba 	beq.w	8006a0c <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800689c:	781a      	ldrb	r2, [r3, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a8:	1c5a      	adds	r2, r3, #1
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068b2:	3b01      	subs	r3, #1
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068be:	b29b      	uxth	r3, r3
 80068c0:	3b01      	subs	r3, #1
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 80068c8:	e0a0      	b.n	8006a0c <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	09db      	lsrs	r3, r3, #7
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d06b      	beq.n	80069ae <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	099b      	lsrs	r3, r3, #6
 80068da:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d065      	beq.n	80069ae <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d04e      	beq.n	800698a <I2C_Master_ISR_IT+0x1d0>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d14a      	bne.n	800698a <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006900:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006906:	b29b      	uxth	r3, r3
 8006908:	2bff      	cmp	r3, #255	@ 0xff
 800690a:	d91c      	bls.n	8006946 <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	0c1b      	lsrs	r3, r3, #16
 8006914:	b2db      	uxtb	r3, r3
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b01      	cmp	r3, #1
 800691e:	d103      	bne.n	8006928 <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2201      	movs	r2, #1
 8006924:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006926:	e002      	b.n	800692e <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	22ff      	movs	r2, #255	@ 0xff
 800692c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006932:	b2da      	uxtb	r2, r3
 8006934:	8a79      	ldrh	r1, [r7, #18]
 8006936:	2300      	movs	r3, #0
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f001 fa5e 	bl	8007e00 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006944:	e032      	b.n	80069ac <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800694a:	b29a      	uxth	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006954:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006958:	d00b      	beq.n	8006972 <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800695e:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006964:	8a79      	ldrh	r1, [r7, #18]
 8006966:	2000      	movs	r0, #0
 8006968:	9000      	str	r0, [sp, #0]
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f001 fa48 	bl	8007e00 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006970:	e01c      	b.n	80069ac <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006976:	b2da      	uxtb	r2, r3
 8006978:	8a79      	ldrh	r1, [r7, #18]
 800697a:	2300      	movs	r3, #0
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f001 fa3c 	bl	8007e00 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006988:	e010      	b.n	80069ac <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006994:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006998:	d003      	beq.n	80069a2 <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f000 fd09 	bl	80073b2 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069a0:	e034      	b.n	8006a0c <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80069a2:	2140      	movs	r1, #64	@ 0x40
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f001 f829 	bl	80079fc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069aa:	e02f      	b.n	8006a0c <I2C_Master_ISR_IT+0x252>
 80069ac:	e02e      	b.n	8006a0c <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	099b      	lsrs	r3, r3, #6
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d028      	beq.n	8006a0c <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	099b      	lsrs	r3, r3, #6
 80069be:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d022      	beq.n	8006a0c <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d119      	bne.n	8006a04 <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069de:	d015      	beq.n	8006a0c <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80069e8:	d108      	bne.n	80069fc <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069f8:	605a      	str	r2, [r3, #4]
 80069fa:	e007      	b.n	8006a0c <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f000 fcd8 	bl	80073b2 <I2C_ITMasterSeqCplt>
 8006a02:	e003      	b.n	8006a0c <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a04:	2140      	movs	r1, #64	@ 0x40
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 fff8 	bl	80079fc <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	095b      	lsrs	r3, r3, #5
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d009      	beq.n	8006a2c <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	095b      	lsrs	r3, r3, #5
 8006a1c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d003      	beq.n	8006a2c <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006a24:	6979      	ldr	r1, [r7, #20]
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 fd5e 	bl	80074e8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b086      	sub	sp, #24
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	60f8      	str	r0, [r7, #12]
 8006a46:	60b9      	str	r1, [r7, #8]
 8006a48:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d101      	bne.n	8006a62 <I2C_Slave_ISR_IT+0x24>
 8006a5e:	2302      	movs	r3, #2
 8006a60:	e0ed      	b.n	8006c3e <I2C_Slave_ISR_IT+0x200>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	095b      	lsrs	r3, r3, #5
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00a      	beq.n	8006a8c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	095b      	lsrs	r3, r3, #5
 8006a7a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d004      	beq.n	8006a8c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006a82:	6939      	ldr	r1, [r7, #16]
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f000 fdf9 	bl	800767c <I2C_ITSlaveCplt>
 8006a8a:	e0d3      	b.n	8006c34 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	091b      	lsrs	r3, r3, #4
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d04d      	beq.n	8006b34 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	091b      	lsrs	r3, r3, #4
 8006a9c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d047      	beq.n	8006b34 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d128      	bne.n	8006b00 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b28      	cmp	r3, #40	@ 0x28
 8006ab8:	d108      	bne.n	8006acc <I2C_Slave_ISR_IT+0x8e>
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ac0:	d104      	bne.n	8006acc <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006ac2:	6939      	ldr	r1, [r7, #16]
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 ff43 	bl	8007950 <I2C_ITListenCplt>
 8006aca:	e032      	b.n	8006b32 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b29      	cmp	r3, #41	@ 0x29
 8006ad6:	d10e      	bne.n	8006af6 <I2C_Slave_ISR_IT+0xb8>
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ade:	d00a      	beq.n	8006af6 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2210      	movs	r2, #16
 8006ae6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f001 f89e 	bl	8007c2a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f000 fc9c 	bl	800742c <I2C_ITSlaveSeqCplt>
 8006af4:	e01d      	b.n	8006b32 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2210      	movs	r2, #16
 8006afc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006afe:	e096      	b.n	8006c2e <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2210      	movs	r2, #16
 8006b06:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b0c:	f043 0204 	orr.w	r2, r3, #4
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d004      	beq.n	8006b24 <I2C_Slave_ISR_IT+0xe6>
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b20:	f040 8085 	bne.w	8006c2e <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b28:	4619      	mov	r1, r3
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f000 ff66 	bl	80079fc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006b30:	e07d      	b.n	8006c2e <I2C_Slave_ISR_IT+0x1f0>
 8006b32:	e07c      	b.n	8006c2e <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	089b      	lsrs	r3, r3, #2
 8006b38:	f003 0301 	and.w	r3, r3, #1
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d030      	beq.n	8006ba2 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	089b      	lsrs	r3, r3, #2
 8006b44:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d02a      	beq.n	8006ba2 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d018      	beq.n	8006b88 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b60:	b2d2      	uxtb	r2, r2
 8006b62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b72:	3b01      	subs	r3, #1
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	3b01      	subs	r3, #1
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d14f      	bne.n	8006c32 <I2C_Slave_ISR_IT+0x1f4>
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b98:	d04b      	beq.n	8006c32 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f000 fc46 	bl	800742c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006ba0:	e047      	b.n	8006c32 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	08db      	lsrs	r3, r3, #3
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00a      	beq.n	8006bc4 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	08db      	lsrs	r3, r3, #3
 8006bb2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d004      	beq.n	8006bc4 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006bba:	6939      	ldr	r1, [r7, #16]
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 fb74 	bl	80072aa <I2C_ITAddrCplt>
 8006bc2:	e037      	b.n	8006c34 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	085b      	lsrs	r3, r3, #1
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d031      	beq.n	8006c34 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	085b      	lsrs	r3, r3, #1
 8006bd4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d02b      	beq.n	8006c34 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d018      	beq.n	8006c18 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bea:	781a      	ldrb	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	3b01      	subs	r3, #1
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006c16:	e00d      	b.n	8006c34 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c1e:	d002      	beq.n	8006c26 <I2C_Slave_ISR_IT+0x1e8>
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d106      	bne.n	8006c34 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f000 fc00 	bl	800742c <I2C_ITSlaveSeqCplt>
 8006c2c:	e002      	b.n	8006c34 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8006c2e:	bf00      	nop
 8006c30:	e000      	b.n	8006c34 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8006c32:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b088      	sub	sp, #32
 8006c4a:	af02      	add	r7, sp, #8
 8006c4c:	60f8      	str	r0, [r7, #12]
 8006c4e:	60b9      	str	r1, [r7, #8]
 8006c50:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d101      	bne.n	8006c60 <I2C_Master_ISR_DMA+0x1a>
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	e0f0      	b.n	8006e42 <I2C_Master_ISR_DMA+0x1fc>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	091b      	lsrs	r3, r3, #4
 8006c6c:	f003 0301 	and.w	r3, r3, #1
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d017      	beq.n	8006ca4 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	091b      	lsrs	r3, r3, #4
 8006c78:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d011      	beq.n	8006ca4 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2210      	movs	r2, #16
 8006c86:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c8c:	f043 0204 	orr.w	r2, r3, #4
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006c94:	2120      	movs	r1, #32
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f001 f8e4 	bl	8007e64 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 ffc4 	bl	8007c2a <I2C_Flush_TXDR>
 8006ca2:	e0c9      	b.n	8006e38 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	09db      	lsrs	r3, r3, #7
 8006ca8:	f003 0301 	and.w	r3, r3, #1
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 8081 	beq.w	8006db4 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	099b      	lsrs	r3, r3, #6
 8006cb6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d07a      	beq.n	8006db4 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ccc:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d05c      	beq.n	8006d92 <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ce4:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	2bff      	cmp	r3, #255	@ 0xff
 8006cee:	d914      	bls.n	8006d1a <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	0c1b      	lsrs	r3, r3, #16
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d103      	bne.n	8006d0c <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2201      	movs	r2, #1
 8006d08:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006d0a:	e002      	b.n	8006d12 <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	22ff      	movs	r2, #255	@ 0xff
 8006d10:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8006d12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d16:	617b      	str	r3, [r7, #20]
 8006d18:	e010      	b.n	8006d3c <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006d2c:	d003      	beq.n	8006d36 <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d32:	617b      	str	r3, [r7, #20]
 8006d34:	e002      	b.n	8006d3c <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8006d36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d3a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	8a79      	ldrh	r1, [r7, #18]
 8006d44:	2300      	movs	r3, #0
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f001 f858 	bl	8007e00 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b22      	cmp	r3, #34	@ 0x22
 8006d6c:	d108      	bne.n	8006d80 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d7c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006d7e:	e05b      	b.n	8006e38 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d8e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006d90:	e052      	b.n	8006e38 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006da0:	d003      	beq.n	8006daa <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 fb05 	bl	80073b2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006da8:	e046      	b.n	8006e38 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006daa:	2140      	movs	r1, #64	@ 0x40
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f000 fe25 	bl	80079fc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006db2:	e041      	b.n	8006e38 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	099b      	lsrs	r3, r3, #6
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d029      	beq.n	8006e14 <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	099b      	lsrs	r3, r3, #6
 8006dc4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d023      	beq.n	8006e14 <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d119      	bne.n	8006e0a <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006de0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006de4:	d027      	beq.n	8006e36 <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006dee:	d108      	bne.n	8006e02 <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006dfe:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006e00:	e019      	b.n	8006e36 <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f000 fad5 	bl	80073b2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006e08:	e015      	b.n	8006e36 <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006e0a:	2140      	movs	r1, #64	@ 0x40
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f000 fdf5 	bl	80079fc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006e12:	e010      	b.n	8006e36 <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	095b      	lsrs	r3, r3, #5
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00b      	beq.n	8006e38 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	095b      	lsrs	r3, r3, #5
 8006e24:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d005      	beq.n	8006e38 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006e2c:	68b9      	ldr	r1, [r7, #8]
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 fb5a 	bl	80074e8 <I2C_ITMasterCplt>
 8006e34:	e000      	b.n	8006e38 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 8006e36:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3718      	adds	r7, #24
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b088      	sub	sp, #32
 8006e50:	af02      	add	r7, sp, #8
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006e58:	4b94      	ldr	r3, [pc, #592]	@ (80070ac <I2C_Mem_ISR_DMA+0x260>)
 8006e5a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d101      	bne.n	8006e6a <I2C_Mem_ISR_DMA+0x1e>
 8006e66:	2302      	movs	r3, #2
 8006e68:	e139      	b.n	80070de <I2C_Mem_ISR_DMA+0x292>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	091b      	lsrs	r3, r3, #4
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d017      	beq.n	8006eae <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	091b      	lsrs	r3, r3, #4
 8006e82:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d011      	beq.n	8006eae <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2210      	movs	r2, #16
 8006e90:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e96:	f043 0204 	orr.w	r2, r3, #4
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006e9e:	2120      	movs	r1, #32
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 ffdf 	bl	8007e64 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ea6:	68f8      	ldr	r0, [r7, #12]
 8006ea8:	f000 febf 	bl	8007c2a <I2C_Flush_TXDR>
 8006eac:	e112      	b.n	80070d4 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	085b      	lsrs	r3, r3, #1
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00f      	beq.n	8006eda <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	085b      	lsrs	r3, r3, #1
 8006ebe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d009      	beq.n	8006eda <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006ece:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed6:	651a      	str	r2, [r3, #80]	@ 0x50
 8006ed8:	e0fc      	b.n	80070d4 <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	09db      	lsrs	r3, r3, #7
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d06e      	beq.n	8006fc4 <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	099b      	lsrs	r3, r3, #6
 8006eea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d068      	beq.n	8006fc4 <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f001 f839 	bl	8007f6c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006efa:	2110      	movs	r1, #16
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f000 ffb1 	bl	8007e64 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d056      	beq.n	8006fba <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2bff      	cmp	r3, #255	@ 0xff
 8006f14:	d91e      	bls.n	8006f54 <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	0c1b      	lsrs	r3, r3, #16
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d103      	bne.n	8006f32 <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006f30:	e002      	b.n	8006f38 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	22ff      	movs	r2, #255	@ 0xff
 8006f36:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f3c:	b299      	uxth	r1, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	2300      	movs	r3, #0
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f000 ff57 	bl	8007e00 <I2C_TransferConfig>
 8006f52:	e011      	b.n	8006f78 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f62:	b299      	uxth	r1, r3
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	9300      	str	r3, [sp, #0]
 8006f6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 ff44 	bl	8007e00 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	2b22      	cmp	r3, #34	@ 0x22
 8006f94:	d108      	bne.n	8006fa8 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006fa4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006fa6:	e095      	b.n	80070d4 <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fb6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006fb8:	e08c      	b.n	80070d4 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006fba:	2140      	movs	r1, #64	@ 0x40
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 fd1d 	bl	80079fc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006fc2:	e087      	b.n	80070d4 <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	099b      	lsrs	r3, r3, #6
 8006fc8:	f003 0301 	and.w	r3, r3, #1
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d071      	beq.n	80070b4 <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	099b      	lsrs	r3, r3, #6
 8006fd4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d06b      	beq.n	80070b4 <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006fdc:	2101      	movs	r1, #1
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 ffc4 	bl	8007f6c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006fe4:	2110      	movs	r1, #16
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f000 ff3c 	bl	8007e64 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b22      	cmp	r3, #34	@ 0x22
 8006ff6:	d101      	bne.n	8006ffc <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8006ff8:	4b2d      	ldr	r3, [pc, #180]	@ (80070b0 <I2C_Mem_ISR_DMA+0x264>)
 8006ffa:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007000:	b29b      	uxth	r3, r3
 8007002:	2bff      	cmp	r3, #255	@ 0xff
 8007004:	d91e      	bls.n	8007044 <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	0c1b      	lsrs	r3, r3, #16
 800700e:	b2db      	uxtb	r3, r3
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b01      	cmp	r3, #1
 8007018:	d103      	bne.n	8007022 <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2201      	movs	r2, #1
 800701e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007020:	e002      	b.n	8007028 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	22ff      	movs	r2, #255	@ 0xff
 8007026:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800702c:	b299      	uxth	r1, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007032:	b2da      	uxtb	r2, r3
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f000 fedf 	bl	8007e00 <I2C_TransferConfig>
 8007042:	e011      	b.n	8007068 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007048:	b29a      	uxth	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007052:	b299      	uxth	r1, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007058:	b2da      	uxtb	r2, r3
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	9300      	str	r3, [sp, #0]
 800705e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f000 fecc 	bl	8007e00 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800706c:	b29a      	uxth	r2, r3
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	b29a      	uxth	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b22      	cmp	r3, #34	@ 0x22
 8007084:	d108      	bne.n	8007098 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007094:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007096:	e01d      	b.n	80070d4 <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070a6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80070a8:	e014      	b.n	80070d4 <I2C_Mem_ISR_DMA+0x288>
 80070aa:	bf00      	nop
 80070ac:	80002000 	.word	0x80002000
 80070b0:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	095b      	lsrs	r3, r3, #5
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d009      	beq.n	80070d4 <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	095b      	lsrs	r3, r3, #5
 80070c4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d003      	beq.n	80070d4 <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80070cc:	68b9      	ldr	r1, [r7, #8]
 80070ce:	68f8      	ldr	r0, [r7, #12]
 80070d0:	f000 fa0a 	bl	80074e8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop

080070e8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b088      	sub	sp, #32
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007104:	2b01      	cmp	r3, #1
 8007106:	d101      	bne.n	800710c <I2C_Slave_ISR_DMA+0x24>
 8007108:	2302      	movs	r3, #2
 800710a:	e0ca      	b.n	80072a2 <I2C_Slave_ISR_DMA+0x1ba>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	095b      	lsrs	r3, r3, #5
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00a      	beq.n	8007136 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	095b      	lsrs	r3, r3, #5
 8007124:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007128:	2b00      	cmp	r3, #0
 800712a:	d004      	beq.n	8007136 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800712c:	68b9      	ldr	r1, [r7, #8]
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 faa4 	bl	800767c <I2C_ITSlaveCplt>
 8007134:	e0b0      	b.n	8007298 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	091b      	lsrs	r3, r3, #4
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b00      	cmp	r3, #0
 8007140:	f000 809a 	beq.w	8007278 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	091b      	lsrs	r3, r3, #4
 8007148:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 8093 	beq.w	8007278 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	0b9b      	lsrs	r3, r3, #14
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d105      	bne.n	800716a <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	0bdb      	lsrs	r3, r3, #15
 8007162:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007166:	2b00      	cmp	r3, #0
 8007168:	d07f      	beq.n	800726a <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00d      	beq.n	800718e <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	0bdb      	lsrs	r3, r3, #15
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b00      	cmp	r3, #0
 800717c:	d007      	beq.n	800718e <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 800718a:	2301      	movs	r3, #1
 800718c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00d      	beq.n	80071b2 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	0b9b      	lsrs	r3, r3, #14
 800719a:	f003 0301 	and.w	r3, r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d007      	beq.n	80071b2 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 80071ae:	2301      	movs	r3, #1
 80071b0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d128      	bne.n	800720a <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b28      	cmp	r3, #40	@ 0x28
 80071c2:	d108      	bne.n	80071d6 <I2C_Slave_ISR_DMA+0xee>
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071ca:	d104      	bne.n	80071d6 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80071cc:	68b9      	ldr	r1, [r7, #8]
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 fbbe 	bl	8007950 <I2C_ITListenCplt>
 80071d4:	e048      	b.n	8007268 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	2b29      	cmp	r3, #41	@ 0x29
 80071e0:	d10e      	bne.n	8007200 <I2C_Slave_ISR_DMA+0x118>
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80071e8:	d00a      	beq.n	8007200 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2210      	movs	r2, #16
 80071f0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 fd19 	bl	8007c2a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 f917 	bl	800742c <I2C_ITSlaveSeqCplt>
 80071fe:	e033      	b.n	8007268 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2210      	movs	r2, #16
 8007206:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007208:	e034      	b.n	8007274 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2210      	movs	r2, #16
 8007210:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007216:	f043 0204 	orr.w	r2, r3, #4
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007224:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <I2C_Slave_ISR_DMA+0x14c>
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007232:	d11f      	bne.n	8007274 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007234:	7dfb      	ldrb	r3, [r7, #23]
 8007236:	2b21      	cmp	r3, #33	@ 0x21
 8007238:	d002      	beq.n	8007240 <I2C_Slave_ISR_DMA+0x158>
 800723a:	7dfb      	ldrb	r3, [r7, #23]
 800723c:	2b29      	cmp	r3, #41	@ 0x29
 800723e:	d103      	bne.n	8007248 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2221      	movs	r2, #33	@ 0x21
 8007244:	631a      	str	r2, [r3, #48]	@ 0x30
 8007246:	e008      	b.n	800725a <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007248:	7dfb      	ldrb	r3, [r7, #23]
 800724a:	2b22      	cmp	r3, #34	@ 0x22
 800724c:	d002      	beq.n	8007254 <I2C_Slave_ISR_DMA+0x16c>
 800724e:	7dfb      	ldrb	r3, [r7, #23]
 8007250:	2b2a      	cmp	r3, #42	@ 0x2a
 8007252:	d102      	bne.n	800725a <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2222      	movs	r2, #34	@ 0x22
 8007258:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800725e:	4619      	mov	r1, r3
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 fbcb 	bl	80079fc <I2C_ITError>
      if (treatdmanack == 1U)
 8007266:	e005      	b.n	8007274 <I2C_Slave_ISR_DMA+0x18c>
 8007268:	e004      	b.n	8007274 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2210      	movs	r2, #16
 8007270:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007272:	e011      	b.n	8007298 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8007274:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007276:	e00f      	b.n	8007298 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	08db      	lsrs	r3, r3, #3
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	2b00      	cmp	r3, #0
 8007282:	d009      	beq.n	8007298 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	08db      	lsrs	r3, r3, #3
 8007288:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800728c:	2b00      	cmp	r3, #0
 800728e:	d003      	beq.n	8007298 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8007290:	68b9      	ldr	r1, [r7, #8]
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 f809 	bl	80072aa <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3720      	adds	r7, #32
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b084      	sub	sp, #16
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
 80072b2:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80072c0:	2b28      	cmp	r3, #40	@ 0x28
 80072c2:	d16a      	bne.n	800739a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	0c1b      	lsrs	r3, r3, #16
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	0c1b      	lsrs	r3, r3, #16
 80072dc:	b29b      	uxth	r3, r3
 80072de:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80072e2:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072f0:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80072fe:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	2b02      	cmp	r3, #2
 8007306:	d138      	bne.n	800737a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007308:	897b      	ldrh	r3, [r7, #10]
 800730a:	09db      	lsrs	r3, r3, #7
 800730c:	b29a      	uxth	r2, r3
 800730e:	89bb      	ldrh	r3, [r7, #12]
 8007310:	4053      	eors	r3, r2
 8007312:	b29b      	uxth	r3, r3
 8007314:	f003 0306 	and.w	r3, r3, #6
 8007318:	2b00      	cmp	r3, #0
 800731a:	d11c      	bne.n	8007356 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800731c:	897b      	ldrh	r3, [r7, #10]
 800731e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800732e:	2b02      	cmp	r3, #2
 8007330:	d13b      	bne.n	80073aa <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2208      	movs	r2, #8
 800733e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007348:	89ba      	ldrh	r2, [r7, #12]
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f7ff f9f3 	bl	800673a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007354:	e029      	b.n	80073aa <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007356:	893b      	ldrh	r3, [r7, #8]
 8007358:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800735a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fe04 	bl	8007f6c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800736c:	89ba      	ldrh	r2, [r7, #12]
 800736e:	7bfb      	ldrb	r3, [r7, #15]
 8007370:	4619      	mov	r1, r3
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7ff f9e1 	bl	800673a <HAL_I2C_AddrCallback>
}
 8007378:	e017      	b.n	80073aa <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800737a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fdf4 	bl	8007f6c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800738c:	89ba      	ldrh	r2, [r7, #12]
 800738e:	7bfb      	ldrb	r3, [r7, #15]
 8007390:	4619      	mov	r1, r3
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7ff f9d1 	bl	800673a <HAL_I2C_AddrCallback>
}
 8007398:	e007      	b.n	80073aa <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2208      	movs	r2, #8
 80073a0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80073aa:	bf00      	nop
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}

080073b2 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b082      	sub	sp, #8
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b21      	cmp	r3, #33	@ 0x21
 80073cc:	d115      	bne.n	80073fa <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2220      	movs	r2, #32
 80073d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2211      	movs	r2, #17
 80073da:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80073e2:	2101      	movs	r1, #1
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fdc1 	bl	8007f6c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f016 f836 	bl	801d464 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80073f8:	e014      	b.n	8007424 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2220      	movs	r2, #32
 80073fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2212      	movs	r2, #18
 8007406:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800740e:	2102      	movs	r1, #2
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fdab 	bl	8007f6c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f016 f84a 	bl	801d4b8 <HAL_I2C_MasterRxCpltCallback>
}
 8007424:	bf00      	nop
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	0b9b      	lsrs	r3, r3, #14
 8007448:	f003 0301 	and.w	r3, r3, #1
 800744c:	2b00      	cmp	r3, #0
 800744e:	d008      	beq.n	8007462 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800745e:	601a      	str	r2, [r3, #0]
 8007460:	e00d      	b.n	800747e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	0bdb      	lsrs	r3, r3, #15
 8007466:	f003 0301 	and.w	r3, r3, #1
 800746a:	2b00      	cmp	r3, #0
 800746c:	d007      	beq.n	800747e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800747c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b29      	cmp	r3, #41	@ 0x29
 8007488:	d112      	bne.n	80074b0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2228      	movs	r2, #40	@ 0x28
 800748e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2221      	movs	r2, #33	@ 0x21
 8007496:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007498:	2101      	movs	r1, #1
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fd66 	bl	8007f6c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7ff f932 	bl	8006712 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80074ae:	e017      	b.n	80074e0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80074ba:	d111      	bne.n	80074e0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2228      	movs	r2, #40	@ 0x28
 80074c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2222      	movs	r2, #34	@ 0x22
 80074c8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80074ca:	2102      	movs	r1, #2
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fd4d 	bl	8007f6c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7ff f923 	bl	8006726 <HAL_I2C_SlaveRxCpltCallback>
}
 80074e0:	bf00      	nop
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2220      	movs	r2, #32
 80074fc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b21      	cmp	r3, #33	@ 0x21
 8007508:	d107      	bne.n	800751a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800750a:	2101      	movs	r1, #1
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fd2d 	bl	8007f6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2211      	movs	r2, #17
 8007516:	631a      	str	r2, [r3, #48]	@ 0x30
 8007518:	e00c      	b.n	8007534 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b22      	cmp	r3, #34	@ 0x22
 8007524:	d106      	bne.n	8007534 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007526:	2102      	movs	r1, #2
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fd1f 	bl	8007f6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2212      	movs	r2, #18
 8007532:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6859      	ldr	r1, [r3, #4]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	4b4d      	ldr	r3, [pc, #308]	@ (8007674 <I2C_ITMasterCplt+0x18c>)
 8007540:	400b      	ands	r3, r1
 8007542:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a4a      	ldr	r2, [pc, #296]	@ (8007678 <I2C_ITMasterCplt+0x190>)
 800754e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	091b      	lsrs	r3, r3, #4
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b00      	cmp	r3, #0
 800755a:	d009      	beq.n	8007570 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2210      	movs	r2, #16
 8007562:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007568:	f043 0204 	orr.w	r2, r3, #4
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007576:	b2db      	uxtb	r3, r3
 8007578:	2b60      	cmp	r3, #96	@ 0x60
 800757a:	d10b      	bne.n	8007594 <I2C_ITMasterCplt+0xac>
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	089b      	lsrs	r3, r3, #2
 8007580:	f003 0301 	and.w	r3, r3, #1
 8007584:	2b00      	cmp	r3, #0
 8007586:	d005      	beq.n	8007594 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800758e:	b2db      	uxtb	r3, r3
 8007590:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8007592:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fb48 	bl	8007c2a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800759e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b60      	cmp	r3, #96	@ 0x60
 80075aa:	d002      	beq.n	80075b2 <I2C_ITMasterCplt+0xca>
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d006      	beq.n	80075c0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fa1f 	bl	80079fc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80075be:	e054      	b.n	800766a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b21      	cmp	r3, #33	@ 0x21
 80075ca:	d124      	bne.n	8007616 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2220      	movs	r2, #32
 80075d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b40      	cmp	r3, #64	@ 0x40
 80075e4:	d10b      	bne.n	80075fe <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7ff f8b7 	bl	800676a <HAL_I2C_MemTxCpltCallback>
}
 80075fc:	e035      	b.n	800766a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f015 ff28 	bl	801d464 <HAL_I2C_MasterTxCpltCallback>
}
 8007614:	e029      	b.n	800766a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b22      	cmp	r3, #34	@ 0x22
 8007620:	d123      	bne.n	800766a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2220      	movs	r2, #32
 8007626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b40      	cmp	r3, #64	@ 0x40
 800763a:	d10b      	bne.n	8007654 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f7ff f896 	bl	800677e <HAL_I2C_MemRxCpltCallback>
}
 8007652:	e00a      	b.n	800766a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f015 ff27 	bl	801d4b8 <HAL_I2C_MasterRxCpltCallback>
}
 800766a:	bf00      	nop
 800766c:	3718      	adds	r7, #24
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	fe00e800 	.word	0xfe00e800
 8007678:	ffff0000 	.word	0xffff0000

0800767c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007696:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800769e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2220      	movs	r2, #32
 80076a6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80076a8:	7afb      	ldrb	r3, [r7, #11]
 80076aa:	2b21      	cmp	r3, #33	@ 0x21
 80076ac:	d002      	beq.n	80076b4 <I2C_ITSlaveCplt+0x38>
 80076ae:	7afb      	ldrb	r3, [r7, #11]
 80076b0:	2b29      	cmp	r3, #41	@ 0x29
 80076b2:	d108      	bne.n	80076c6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80076b4:	f248 0101 	movw	r1, #32769	@ 0x8001
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fc57 	bl	8007f6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2221      	movs	r2, #33	@ 0x21
 80076c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80076c4:	e019      	b.n	80076fa <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80076c6:	7afb      	ldrb	r3, [r7, #11]
 80076c8:	2b22      	cmp	r3, #34	@ 0x22
 80076ca:	d002      	beq.n	80076d2 <I2C_ITSlaveCplt+0x56>
 80076cc:	7afb      	ldrb	r3, [r7, #11]
 80076ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80076d0:	d108      	bne.n	80076e4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80076d2:	f248 0102 	movw	r1, #32770	@ 0x8002
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fc48 	bl	8007f6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2222      	movs	r2, #34	@ 0x22
 80076e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80076e2:	e00a      	b.n	80076fa <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80076e4:	7afb      	ldrb	r3, [r7, #11]
 80076e6:	2b28      	cmp	r3, #40	@ 0x28
 80076e8:	d107      	bne.n	80076fa <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80076ea:	f248 0103 	movw	r1, #32771	@ 0x8003
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fc3c 	bl	8007f6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007708:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	6859      	ldr	r1, [r3, #4]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	4b8c      	ldr	r3, [pc, #560]	@ (8007948 <I2C_ITSlaveCplt+0x2cc>)
 8007716:	400b      	ands	r3, r1
 8007718:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 fa85 	bl	8007c2a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	0b9b      	lsrs	r3, r3, #14
 8007724:	f003 0301 	and.w	r3, r3, #1
 8007728:	2b00      	cmp	r3, #0
 800772a:	d013      	beq.n	8007754 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800773a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007740:	2b00      	cmp	r3, #0
 8007742:	d020      	beq.n	8007786 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	b29a      	uxth	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007752:	e018      	b.n	8007786 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	0bdb      	lsrs	r3, r3, #15
 8007758:	f003 0301 	and.w	r3, r3, #1
 800775c:	2b00      	cmp	r3, #0
 800775e:	d012      	beq.n	8007786 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800776e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007774:	2b00      	cmp	r3, #0
 8007776:	d006      	beq.n	8007786 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	b29a      	uxth	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	089b      	lsrs	r3, r3, #2
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	2b00      	cmp	r3, #0
 8007790:	d020      	beq.n	80077d4 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f023 0304 	bic.w	r3, r3, #4
 8007798:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a4:	b2d2      	uxtb	r2, r2
 80077a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ac:	1c5a      	adds	r2, r3, #1
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00c      	beq.n	80077d4 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077be:	3b01      	subs	r3, #1
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	3b01      	subs	r3, #1
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077d8:	b29b      	uxth	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d005      	beq.n	80077ea <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077e2:	f043 0204 	orr.w	r2, r3, #4
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	091b      	lsrs	r3, r3, #4
 80077ee:	f003 0301 	and.w	r3, r3, #1
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d04a      	beq.n	800788c <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	091b      	lsrs	r3, r3, #4
 80077fa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d044      	beq.n	800788c <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007806:	b29b      	uxth	r3, r3
 8007808:	2b00      	cmp	r3, #0
 800780a:	d128      	bne.n	800785e <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b28      	cmp	r3, #40	@ 0x28
 8007816:	d108      	bne.n	800782a <I2C_ITSlaveCplt+0x1ae>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800781e:	d104      	bne.n	800782a <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007820:	6979      	ldr	r1, [r7, #20]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f894 	bl	8007950 <I2C_ITListenCplt>
 8007828:	e030      	b.n	800788c <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b29      	cmp	r3, #41	@ 0x29
 8007834:	d10e      	bne.n	8007854 <I2C_ITSlaveCplt+0x1d8>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800783c:	d00a      	beq.n	8007854 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2210      	movs	r2, #16
 8007844:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f9ef 	bl	8007c2a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7ff fded 	bl	800742c <I2C_ITSlaveSeqCplt>
 8007852:	e01b      	b.n	800788c <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2210      	movs	r2, #16
 800785a:	61da      	str	r2, [r3, #28]
 800785c:	e016      	b.n	800788c <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2210      	movs	r2, #16
 8007864:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800786a:	f043 0204 	orr.w	r2, r3, #4
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d003      	beq.n	8007880 <I2C_ITSlaveCplt+0x204>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800787e:	d105      	bne.n	800788c <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007884:	4619      	mov	r1, r3
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f8b8 	bl	80079fc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d010      	beq.n	80078c4 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f8a7 	bl	80079fc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b28      	cmp	r3, #40	@ 0x28
 80078b8:	d141      	bne.n	800793e <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80078ba:	6979      	ldr	r1, [r7, #20]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f847 	bl	8007950 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80078c2:	e03c      	b.n	800793e <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80078cc:	d014      	beq.n	80078f8 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7ff fdac 	bl	800742c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a1d      	ldr	r2, [pc, #116]	@ (800794c <I2C_ITSlaveCplt+0x2d0>)
 80078d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2220      	movs	r2, #32
 80078de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7fe ff30 	bl	8006756 <HAL_I2C_ListenCpltCallback>
}
 80078f6:	e022      	b.n	800793e <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	2b22      	cmp	r3, #34	@ 0x22
 8007902:	d10e      	bne.n	8007922 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2220      	movs	r2, #32
 8007908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7fe ff03 	bl	8006726 <HAL_I2C_SlaveRxCpltCallback>
}
 8007920:	e00d      	b.n	800793e <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2220      	movs	r2, #32
 8007926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7fe feea 	bl	8006712 <HAL_I2C_SlaveTxCpltCallback>
}
 800793e:	bf00      	nop
 8007940:	3718      	adds	r7, #24
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	fe00e800 	.word	0xfe00e800
 800794c:	ffff0000 	.word	0xffff0000

08007950 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a26      	ldr	r2, [pc, #152]	@ (80079f8 <I2C_ITListenCplt+0xa8>)
 800795e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2220      	movs	r2, #32
 800796a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	089b      	lsrs	r3, r3, #2
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	2b00      	cmp	r3, #0
 8007986:	d022      	beq.n	80079ce <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007992:	b2d2      	uxtb	r2, r2
 8007994:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d012      	beq.n	80079ce <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80079ac:	3b01      	subs	r3, #1
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	3b01      	subs	r3, #1
 80079bc:	b29a      	uxth	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079c6:	f043 0204 	orr.w	r2, r3, #4
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80079ce:	f248 0103 	movw	r1, #32771	@ 0x8003
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 faca 	bl	8007f6c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2210      	movs	r2, #16
 80079de:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7fe feb4 	bl	8006756 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80079ee:	bf00      	nop
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	ffff0000 	.word	0xffff0000

080079fc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a0c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a6d      	ldr	r2, [pc, #436]	@ (8007bd0 <I2C_ITError+0x1d4>)
 8007a1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007a2e:	7bfb      	ldrb	r3, [r7, #15]
 8007a30:	2b28      	cmp	r3, #40	@ 0x28
 8007a32:	d005      	beq.n	8007a40 <I2C_ITError+0x44>
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
 8007a36:	2b29      	cmp	r3, #41	@ 0x29
 8007a38:	d002      	beq.n	8007a40 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
 8007a3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a3e:	d10b      	bne.n	8007a58 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007a40:	2103      	movs	r1, #3
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fa92 	bl	8007f6c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2228      	movs	r2, #40	@ 0x28
 8007a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a60      	ldr	r2, [pc, #384]	@ (8007bd4 <I2C_ITError+0x1d8>)
 8007a54:	635a      	str	r2, [r3, #52]	@ 0x34
 8007a56:	e030      	b.n	8007aba <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007a58:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fa85 	bl	8007f6c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f8e1 	bl	8007c2a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b60      	cmp	r3, #96	@ 0x60
 8007a72:	d01f      	beq.n	8007ab4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2220      	movs	r2, #32
 8007a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	f003 0320 	and.w	r3, r3, #32
 8007a86:	2b20      	cmp	r3, #32
 8007a88:	d114      	bne.n	8007ab4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	f003 0310 	and.w	r3, r3, #16
 8007a94:	2b10      	cmp	r3, #16
 8007a96:	d109      	bne.n	8007aac <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2210      	movs	r2, #16
 8007a9e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aa4:	f043 0204 	orr.w	r2, r3, #4
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007abe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d039      	beq.n	8007b3c <I2C_ITError+0x140>
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	2b11      	cmp	r3, #17
 8007acc:	d002      	beq.n	8007ad4 <I2C_ITError+0xd8>
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2b21      	cmp	r3, #33	@ 0x21
 8007ad2:	d133      	bne.n	8007b3c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ade:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ae2:	d107      	bne.n	8007af4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007af2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fc fb9b 	bl	8004234 <HAL_DMA_GetState>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d017      	beq.n	8007b34 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b08:	4a33      	ldr	r2, [pc, #204]	@ (8007bd8 <I2C_ITError+0x1dc>)
 8007b0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fc f9df 	bl	8003edc <HAL_DMA_Abort_IT>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d04d      	beq.n	8007bc0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007b2e:	4610      	mov	r0, r2
 8007b30:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007b32:	e045      	b.n	8007bc0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f851 	bl	8007bdc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007b3a:	e041      	b.n	8007bc0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d039      	beq.n	8007bb8 <I2C_ITError+0x1bc>
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2b12      	cmp	r3, #18
 8007b48:	d002      	beq.n	8007b50 <I2C_ITError+0x154>
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	2b22      	cmp	r3, #34	@ 0x22
 8007b4e:	d133      	bne.n	8007bb8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b5e:	d107      	bne.n	8007b70 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b6e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7fc fb5d 	bl	8004234 <HAL_DMA_GetState>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d017      	beq.n	8007bb0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b84:	4a14      	ldr	r2, [pc, #80]	@ (8007bd8 <I2C_ITError+0x1dc>)
 8007b86:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fc f9a1 	bl	8003edc <HAL_DMA_Abort_IT>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d011      	beq.n	8007bc4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007baa:	4610      	mov	r0, r2
 8007bac:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007bae:	e009      	b.n	8007bc4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f813 	bl	8007bdc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007bb6:	e005      	b.n	8007bc4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f80f 	bl	8007bdc <I2C_TreatErrorCallback>
  }
}
 8007bbe:	e002      	b.n	8007bc6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007bc0:	bf00      	nop
 8007bc2:	e000      	b.n	8007bc6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007bc4:	bf00      	nop
}
 8007bc6:	bf00      	nop
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	ffff0000 	.word	0xffff0000
 8007bd4:	08006a3f 	.word	0x08006a3f
 8007bd8:	08007dc3 	.word	0x08007dc3

08007bdc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b60      	cmp	r3, #96	@ 0x60
 8007bee:	d10e      	bne.n	8007c0e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7fe fdcd 	bl	80067a6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007c0c:	e009      	b.n	8007c22 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7fe fdb8 	bl	8006792 <HAL_I2C_ErrorCallback>
}
 8007c22:	bf00      	nop
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	f003 0302 	and.w	r3, r3, #2
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d103      	bne.n	8007c48 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2200      	movs	r2, #0
 8007c46:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d007      	beq.n	8007c66 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	699a      	ldr	r2, [r3, #24]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f042 0201 	orr.w	r2, r2, #1
 8007c64:	619a      	str	r2, [r3, #24]
  }
}
 8007c66:	bf00      	nop
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b084      	sub	sp, #16
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007c8e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d104      	bne.n	8007ca4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007c9a:	2120      	movs	r1, #32
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f000 f8e1 	bl	8007e64 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007ca2:	e02d      	b.n	8007d00 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007cac:	441a      	add	r2, r3
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	2bff      	cmp	r3, #255	@ 0xff
 8007cba:	d903      	bls.n	8007cc4 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	22ff      	movs	r2, #255	@ 0xff
 8007cc0:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007cc2:	e004      	b.n	8007cce <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	3328      	adds	r3, #40	@ 0x28
 8007cde:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007ce4:	f7fc f82a 	bl	8003d3c <HAL_DMA_Start_IT>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d004      	beq.n	8007cf8 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007cee:	2110      	movs	r1, #16
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f7ff fe83 	bl	80079fc <I2C_ITError>
}
 8007cf6:	e003      	b.n	8007d00 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007cf8:	2140      	movs	r1, #64	@ 0x40
 8007cfa:	68f8      	ldr	r0, [r7, #12]
 8007cfc:	f000 f8b2 	bl	8007e64 <I2C_Enable_IRQ>
}
 8007d00:	bf00      	nop
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1a:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d10e      	bne.n	8007d46 <I2C_DMASlaveReceiveCplt+0x3e>
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007d2e:	d00a      	beq.n	8007d46 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d3e:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f7ff fb73 	bl	800742c <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8007d46:	bf00      	nop
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8007d56:	2300      	movs	r3, #0
 8007d58:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d5e:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d007      	beq.n	8007d78 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d101      	bne.n	8007d78 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8007d74:	2301      	movs	r3, #1
 8007d76:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d007      	beq.n	8007d90 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d101      	bne.n	8007d90 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f7fc fa5d 	bl	8004250 <HAL_DMA_GetError>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d00e      	beq.n	8007dba <I2C_DMAError+0x6c>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00b      	beq.n	8007dba <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	685a      	ldr	r2, [r3, #4]
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007db0:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007db2:	2110      	movs	r1, #16
 8007db4:	68b8      	ldr	r0, [r7, #8]
 8007db6:	f7ff fe21 	bl	80079fc <I2C_ITError>
  }
}
 8007dba:	bf00      	nop
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b084      	sub	sp, #16
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d003      	beq.n	8007de0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ddc:	2200      	movs	r2, #0
 8007dde:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d003      	beq.n	8007df0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dec:	2200      	movs	r2, #0
 8007dee:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f7ff fef3 	bl	8007bdc <I2C_TreatErrorCallback>
}
 8007df6:	bf00      	nop
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
	...

08007e00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b087      	sub	sp, #28
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	607b      	str	r3, [r7, #4]
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	817b      	strh	r3, [r7, #10]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e12:	897b      	ldrh	r3, [r7, #10]
 8007e14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e18:	7a7b      	ldrb	r3, [r7, #9]
 8007e1a:	041b      	lsls	r3, r3, #16
 8007e1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e20:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007e26:	6a3b      	ldr	r3, [r7, #32]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e2e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	6a3b      	ldr	r3, [r7, #32]
 8007e38:	0d5b      	lsrs	r3, r3, #21
 8007e3a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007e3e:	4b08      	ldr	r3, [pc, #32]	@ (8007e60 <I2C_TransferConfig+0x60>)
 8007e40:	430b      	orrs	r3, r1
 8007e42:	43db      	mvns	r3, r3
 8007e44:	ea02 0103 	and.w	r1, r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007e52:	bf00      	nop
 8007e54:	371c      	adds	r7, #28
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	03ff63ff 	.word	0x03ff63ff

08007e64 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e78:	4a39      	ldr	r2, [pc, #228]	@ (8007f60 <I2C_Enable_IRQ+0xfc>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d032      	beq.n	8007ee4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8007e82:	4a38      	ldr	r2, [pc, #224]	@ (8007f64 <I2C_Enable_IRQ+0x100>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d02d      	beq.n	8007ee4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007e8c:	4a36      	ldr	r2, [pc, #216]	@ (8007f68 <I2C_Enable_IRQ+0x104>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d028      	beq.n	8007ee4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007e92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	da03      	bge.n	8007ea2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007ea0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007ea2:	887b      	ldrh	r3, [r7, #2]
 8007ea4:	f003 0301 	and.w	r3, r3, #1
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d003      	beq.n	8007eb4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007eb2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007eb4:	887b      	ldrh	r3, [r7, #2]
 8007eb6:	f003 0302 	and.w	r3, r3, #2
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d003      	beq.n	8007ec6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007ec4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007ec6:	887b      	ldrh	r3, [r7, #2]
 8007ec8:	2b10      	cmp	r3, #16
 8007eca:	d103      	bne.n	8007ed4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007ed2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007ed4:	887b      	ldrh	r3, [r7, #2]
 8007ed6:	2b20      	cmp	r3, #32
 8007ed8:	d133      	bne.n	8007f42 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f043 0320 	orr.w	r3, r3, #32
 8007ee0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007ee2:	e02e      	b.n	8007f42 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007ee4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	da03      	bge.n	8007ef4 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007ef2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007ef4:	887b      	ldrh	r3, [r7, #2]
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8007f04:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007f06:	887b      	ldrh	r3, [r7, #2]
 8007f08:	f003 0302 	and.w	r3, r3, #2
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d003      	beq.n	8007f18 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8007f16:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007f18:	887b      	ldrh	r3, [r7, #2]
 8007f1a:	2b10      	cmp	r3, #16
 8007f1c:	d103      	bne.n	8007f26 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007f24:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007f26:	887b      	ldrh	r3, [r7, #2]
 8007f28:	2b20      	cmp	r3, #32
 8007f2a:	d103      	bne.n	8007f34 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007f32:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007f34:	887b      	ldrh	r3, [r7, #2]
 8007f36:	2b40      	cmp	r3, #64	@ 0x40
 8007f38:	d103      	bne.n	8007f42 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f40:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6819      	ldr	r1, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	601a      	str	r2, [r3, #0]
}
 8007f52:	bf00      	nop
 8007f54:	3714      	adds	r7, #20
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	08006c47 	.word	0x08006c47
 8007f64:	080070e9 	.word	0x080070e9
 8007f68:	08006e4d 	.word	0x08006e4d

08007f6c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007f7c:	887b      	ldrh	r3, [r7, #2]
 8007f7e:	f003 0301 	and.w	r3, r3, #1
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00f      	beq.n	8007fa6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007f8c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007f9a:	2b28      	cmp	r3, #40	@ 0x28
 8007f9c:	d003      	beq.n	8007fa6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007fa4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007fa6:	887b      	ldrh	r3, [r7, #2]
 8007fa8:	f003 0302 	and.w	r3, r3, #2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00f      	beq.n	8007fd0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8007fb6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007fc4:	2b28      	cmp	r3, #40	@ 0x28
 8007fc6:	d003      	beq.n	8007fd0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007fce:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007fd0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	da03      	bge.n	8007fe0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007fde:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007fe0:	887b      	ldrh	r3, [r7, #2]
 8007fe2:	2b10      	cmp	r3, #16
 8007fe4:	d103      	bne.n	8007fee <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007fec:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007fee:	887b      	ldrh	r3, [r7, #2]
 8007ff0:	2b20      	cmp	r3, #32
 8007ff2:	d103      	bne.n	8007ffc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f043 0320 	orr.w	r3, r3, #32
 8007ffa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007ffc:	887b      	ldrh	r3, [r7, #2]
 8007ffe:	2b40      	cmp	r3, #64	@ 0x40
 8008000:	d103      	bne.n	800800a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008008:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6819      	ldr	r1, [r3, #0]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	43da      	mvns	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	400a      	ands	r2, r1
 800801a:	601a      	str	r2, [r3, #0]
}
 800801c:	bf00      	nop
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b20      	cmp	r3, #32
 800803c:	d138      	bne.n	80080b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008044:	2b01      	cmp	r3, #1
 8008046:	d101      	bne.n	800804c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008048:	2302      	movs	r3, #2
 800804a:	e032      	b.n	80080b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2224      	movs	r2, #36	@ 0x24
 8008058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f022 0201 	bic.w	r2, r2, #1
 800806a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800807a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6819      	ldr	r1, [r3, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	430a      	orrs	r2, r1
 800808a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f042 0201 	orr.w	r2, r2, #1
 800809a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2220      	movs	r2, #32
 80080a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	e000      	b.n	80080b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80080b0:	2302      	movs	r3, #2
  }
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	370c      	adds	r7, #12
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80080be:	b480      	push	{r7}
 80080c0:	b085      	sub	sp, #20
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b20      	cmp	r3, #32
 80080d2:	d139      	bne.n	8008148 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d101      	bne.n	80080e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80080de:	2302      	movs	r3, #2
 80080e0:	e033      	b.n	800814a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2224      	movs	r2, #36	@ 0x24
 80080ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f022 0201 	bic.w	r2, r2, #1
 8008100:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008110:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	021b      	lsls	r3, r3, #8
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	4313      	orrs	r3, r2
 800811a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f042 0201 	orr.w	r2, r2, #1
 8008132:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2220      	movs	r2, #32
 8008138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008144:	2300      	movs	r3, #0
 8008146:	e000      	b.n	800814a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008148:	2302      	movs	r3, #2
  }
}
 800814a:	4618      	mov	r0, r3
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b086      	sub	sp, #24
 800815a:	af02      	add	r7, sp, #8
 800815c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d101      	bne.n	8008168 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e108      	b.n	800837a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d106      	bne.n	8008188 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7f9 fede 	bl	8001f44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2203      	movs	r2, #3
 800818c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008196:	d102      	bne.n	800819e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f005 fa2a 	bl	800d5fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6818      	ldr	r0, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	7c1a      	ldrb	r2, [r3, #16]
 80081b0:	f88d 2000 	strb.w	r2, [sp]
 80081b4:	3304      	adds	r3, #4
 80081b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081b8:	f005 f9c6 	bl	800d548 <USB_CoreInit>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d005      	beq.n	80081ce <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2202      	movs	r2, #2
 80081c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e0d5      	b.n	800837a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2100      	movs	r1, #0
 80081d4:	4618      	mov	r0, r3
 80081d6:	f005 fa22 	bl	800d61e <USB_SetCurrentMode>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d005      	beq.n	80081ec <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2202      	movs	r2, #2
 80081e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	e0c6      	b.n	800837a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081ec:	2300      	movs	r3, #0
 80081ee:	73fb      	strb	r3, [r7, #15]
 80081f0:	e04a      	b.n	8008288 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80081f2:	7bfa      	ldrb	r2, [r7, #15]
 80081f4:	6879      	ldr	r1, [r7, #4]
 80081f6:	4613      	mov	r3, r2
 80081f8:	00db      	lsls	r3, r3, #3
 80081fa:	4413      	add	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	440b      	add	r3, r1
 8008200:	3315      	adds	r3, #21
 8008202:	2201      	movs	r2, #1
 8008204:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008206:	7bfa      	ldrb	r2, [r7, #15]
 8008208:	6879      	ldr	r1, [r7, #4]
 800820a:	4613      	mov	r3, r2
 800820c:	00db      	lsls	r3, r3, #3
 800820e:	4413      	add	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	440b      	add	r3, r1
 8008214:	3314      	adds	r3, #20
 8008216:	7bfa      	ldrb	r2, [r7, #15]
 8008218:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800821a:	7bfa      	ldrb	r2, [r7, #15]
 800821c:	7bfb      	ldrb	r3, [r7, #15]
 800821e:	b298      	uxth	r0, r3
 8008220:	6879      	ldr	r1, [r7, #4]
 8008222:	4613      	mov	r3, r2
 8008224:	00db      	lsls	r3, r3, #3
 8008226:	4413      	add	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	440b      	add	r3, r1
 800822c:	332e      	adds	r3, #46	@ 0x2e
 800822e:	4602      	mov	r2, r0
 8008230:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008232:	7bfa      	ldrb	r2, [r7, #15]
 8008234:	6879      	ldr	r1, [r7, #4]
 8008236:	4613      	mov	r3, r2
 8008238:	00db      	lsls	r3, r3, #3
 800823a:	4413      	add	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	440b      	add	r3, r1
 8008240:	3318      	adds	r3, #24
 8008242:	2200      	movs	r2, #0
 8008244:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008246:	7bfa      	ldrb	r2, [r7, #15]
 8008248:	6879      	ldr	r1, [r7, #4]
 800824a:	4613      	mov	r3, r2
 800824c:	00db      	lsls	r3, r3, #3
 800824e:	4413      	add	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	440b      	add	r3, r1
 8008254:	331c      	adds	r3, #28
 8008256:	2200      	movs	r2, #0
 8008258:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800825a:	7bfa      	ldrb	r2, [r7, #15]
 800825c:	6879      	ldr	r1, [r7, #4]
 800825e:	4613      	mov	r3, r2
 8008260:	00db      	lsls	r3, r3, #3
 8008262:	4413      	add	r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	440b      	add	r3, r1
 8008268:	3320      	adds	r3, #32
 800826a:	2200      	movs	r2, #0
 800826c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800826e:	7bfa      	ldrb	r2, [r7, #15]
 8008270:	6879      	ldr	r1, [r7, #4]
 8008272:	4613      	mov	r3, r2
 8008274:	00db      	lsls	r3, r3, #3
 8008276:	4413      	add	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	440b      	add	r3, r1
 800827c:	3324      	adds	r3, #36	@ 0x24
 800827e:	2200      	movs	r2, #0
 8008280:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008282:	7bfb      	ldrb	r3, [r7, #15]
 8008284:	3301      	adds	r3, #1
 8008286:	73fb      	strb	r3, [r7, #15]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	791b      	ldrb	r3, [r3, #4]
 800828c:	7bfa      	ldrb	r2, [r7, #15]
 800828e:	429a      	cmp	r2, r3
 8008290:	d3af      	bcc.n	80081f2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008292:	2300      	movs	r3, #0
 8008294:	73fb      	strb	r3, [r7, #15]
 8008296:	e044      	b.n	8008322 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008298:	7bfa      	ldrb	r2, [r7, #15]
 800829a:	6879      	ldr	r1, [r7, #4]
 800829c:	4613      	mov	r3, r2
 800829e:	00db      	lsls	r3, r3, #3
 80082a0:	4413      	add	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	440b      	add	r3, r1
 80082a6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80082aa:	2200      	movs	r2, #0
 80082ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80082ae:	7bfa      	ldrb	r2, [r7, #15]
 80082b0:	6879      	ldr	r1, [r7, #4]
 80082b2:	4613      	mov	r3, r2
 80082b4:	00db      	lsls	r3, r3, #3
 80082b6:	4413      	add	r3, r2
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	440b      	add	r3, r1
 80082bc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80082c0:	7bfa      	ldrb	r2, [r7, #15]
 80082c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80082c4:	7bfa      	ldrb	r2, [r7, #15]
 80082c6:	6879      	ldr	r1, [r7, #4]
 80082c8:	4613      	mov	r3, r2
 80082ca:	00db      	lsls	r3, r3, #3
 80082cc:	4413      	add	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	440b      	add	r3, r1
 80082d2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80082d6:	2200      	movs	r2, #0
 80082d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80082da:	7bfa      	ldrb	r2, [r7, #15]
 80082dc:	6879      	ldr	r1, [r7, #4]
 80082de:	4613      	mov	r3, r2
 80082e0:	00db      	lsls	r3, r3, #3
 80082e2:	4413      	add	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	440b      	add	r3, r1
 80082e8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80082ec:	2200      	movs	r2, #0
 80082ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80082f0:	7bfa      	ldrb	r2, [r7, #15]
 80082f2:	6879      	ldr	r1, [r7, #4]
 80082f4:	4613      	mov	r3, r2
 80082f6:	00db      	lsls	r3, r3, #3
 80082f8:	4413      	add	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	440b      	add	r3, r1
 80082fe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008302:	2200      	movs	r2, #0
 8008304:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008306:	7bfa      	ldrb	r2, [r7, #15]
 8008308:	6879      	ldr	r1, [r7, #4]
 800830a:	4613      	mov	r3, r2
 800830c:	00db      	lsls	r3, r3, #3
 800830e:	4413      	add	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	440b      	add	r3, r1
 8008314:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008318:	2200      	movs	r2, #0
 800831a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800831c:	7bfb      	ldrb	r3, [r7, #15]
 800831e:	3301      	adds	r3, #1
 8008320:	73fb      	strb	r3, [r7, #15]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	791b      	ldrb	r3, [r3, #4]
 8008326:	7bfa      	ldrb	r2, [r7, #15]
 8008328:	429a      	cmp	r2, r3
 800832a:	d3b5      	bcc.n	8008298 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6818      	ldr	r0, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	7c1a      	ldrb	r2, [r3, #16]
 8008334:	f88d 2000 	strb.w	r2, [sp]
 8008338:	3304      	adds	r3, #4
 800833a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800833c:	f005 f9bc 	bl	800d6b8 <USB_DevInit>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d005      	beq.n	8008352 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2202      	movs	r2, #2
 800834a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e013      	b.n	800837a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	7b1b      	ldrb	r3, [r3, #12]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d102      	bne.n	800836e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f80b 	bl	8008384 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4618      	mov	r0, r3
 8008374:	f005 fb77 	bl	800da66 <USB_DevDisconnect>

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
	...

08008384 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2201      	movs	r2, #1
 8008396:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083b2:	4b05      	ldr	r3, [pc, #20]	@ (80083c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80083b4:	4313      	orrs	r3, r2
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3714      	adds	r7, #20
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr
 80083c8:	10000003 	.word	0x10000003

080083cc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80083cc:	b480      	push	{r7}
 80083ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083d0:	4b05      	ldr	r3, [pc, #20]	@ (80083e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a04      	ldr	r2, [pc, #16]	@ (80083e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80083d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083da:	6013      	str	r3, [r2, #0]
}
 80083dc:	bf00      	nop
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	40007000 	.word	0x40007000

080083ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80083f4:	2300      	movs	r3, #0
 80083f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e291      	b.n	8008926 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 8087 	beq.w	800851e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008410:	4b96      	ldr	r3, [pc, #600]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f003 030c 	and.w	r3, r3, #12
 8008418:	2b04      	cmp	r3, #4
 800841a:	d00c      	beq.n	8008436 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800841c:	4b93      	ldr	r3, [pc, #588]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f003 030c 	and.w	r3, r3, #12
 8008424:	2b08      	cmp	r3, #8
 8008426:	d112      	bne.n	800844e <HAL_RCC_OscConfig+0x62>
 8008428:	4b90      	ldr	r3, [pc, #576]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008430:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008434:	d10b      	bne.n	800844e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008436:	4b8d      	ldr	r3, [pc, #564]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d06c      	beq.n	800851c <HAL_RCC_OscConfig+0x130>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d168      	bne.n	800851c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e26b      	b.n	8008926 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008456:	d106      	bne.n	8008466 <HAL_RCC_OscConfig+0x7a>
 8008458:	4b84      	ldr	r3, [pc, #528]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a83      	ldr	r2, [pc, #524]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 800845e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008462:	6013      	str	r3, [r2, #0]
 8008464:	e02e      	b.n	80084c4 <HAL_RCC_OscConfig+0xd8>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d10c      	bne.n	8008488 <HAL_RCC_OscConfig+0x9c>
 800846e:	4b7f      	ldr	r3, [pc, #508]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a7e      	ldr	r2, [pc, #504]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 8008474:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	4b7c      	ldr	r3, [pc, #496]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a7b      	ldr	r2, [pc, #492]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 8008480:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008484:	6013      	str	r3, [r2, #0]
 8008486:	e01d      	b.n	80084c4 <HAL_RCC_OscConfig+0xd8>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008490:	d10c      	bne.n	80084ac <HAL_RCC_OscConfig+0xc0>
 8008492:	4b76      	ldr	r3, [pc, #472]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a75      	ldr	r2, [pc, #468]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 8008498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800849c:	6013      	str	r3, [r2, #0]
 800849e:	4b73      	ldr	r3, [pc, #460]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a72      	ldr	r2, [pc, #456]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 80084a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084a8:	6013      	str	r3, [r2, #0]
 80084aa:	e00b      	b.n	80084c4 <HAL_RCC_OscConfig+0xd8>
 80084ac:	4b6f      	ldr	r3, [pc, #444]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a6e      	ldr	r2, [pc, #440]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 80084b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084b6:	6013      	str	r3, [r2, #0]
 80084b8:	4b6c      	ldr	r3, [pc, #432]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a6b      	ldr	r2, [pc, #428]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 80084be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80084c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d013      	beq.n	80084f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084cc:	f7fa f996 	bl	80027fc <HAL_GetTick>
 80084d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084d2:	e008      	b.n	80084e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084d4:	f7fa f992 	bl	80027fc <HAL_GetTick>
 80084d8:	4602      	mov	r2, r0
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	2b64      	cmp	r3, #100	@ 0x64
 80084e0:	d901      	bls.n	80084e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e21f      	b.n	8008926 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80084e6:	4b61      	ldr	r3, [pc, #388]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d0f0      	beq.n	80084d4 <HAL_RCC_OscConfig+0xe8>
 80084f2:	e014      	b.n	800851e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084f4:	f7fa f982 	bl	80027fc <HAL_GetTick>
 80084f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80084fa:	e008      	b.n	800850e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084fc:	f7fa f97e 	bl	80027fc <HAL_GetTick>
 8008500:	4602      	mov	r2, r0
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	2b64      	cmp	r3, #100	@ 0x64
 8008508:	d901      	bls.n	800850e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	e20b      	b.n	8008926 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800850e:	4b57      	ldr	r3, [pc, #348]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1f0      	bne.n	80084fc <HAL_RCC_OscConfig+0x110>
 800851a:	e000      	b.n	800851e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800851c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 0302 	and.w	r3, r3, #2
 8008526:	2b00      	cmp	r3, #0
 8008528:	d069      	beq.n	80085fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800852a:	4b50      	ldr	r3, [pc, #320]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	f003 030c 	and.w	r3, r3, #12
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00b      	beq.n	800854e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008536:	4b4d      	ldr	r3, [pc, #308]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f003 030c 	and.w	r3, r3, #12
 800853e:	2b08      	cmp	r3, #8
 8008540:	d11c      	bne.n	800857c <HAL_RCC_OscConfig+0x190>
 8008542:	4b4a      	ldr	r3, [pc, #296]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800854a:	2b00      	cmp	r3, #0
 800854c:	d116      	bne.n	800857c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800854e:	4b47      	ldr	r3, [pc, #284]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f003 0302 	and.w	r3, r3, #2
 8008556:	2b00      	cmp	r3, #0
 8008558:	d005      	beq.n	8008566 <HAL_RCC_OscConfig+0x17a>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d001      	beq.n	8008566 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	e1df      	b.n	8008926 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008566:	4b41      	ldr	r3, [pc, #260]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	00db      	lsls	r3, r3, #3
 8008574:	493d      	ldr	r1, [pc, #244]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 8008576:	4313      	orrs	r3, r2
 8008578:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800857a:	e040      	b.n	80085fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d023      	beq.n	80085cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008584:	4b39      	ldr	r3, [pc, #228]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a38      	ldr	r2, [pc, #224]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 800858a:	f043 0301 	orr.w	r3, r3, #1
 800858e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008590:	f7fa f934 	bl	80027fc <HAL_GetTick>
 8008594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008596:	e008      	b.n	80085aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008598:	f7fa f930 	bl	80027fc <HAL_GetTick>
 800859c:	4602      	mov	r2, r0
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d901      	bls.n	80085aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e1bd      	b.n	8008926 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085aa:	4b30      	ldr	r3, [pc, #192]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0302 	and.w	r3, r3, #2
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d0f0      	beq.n	8008598 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085b6:	4b2d      	ldr	r3, [pc, #180]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	00db      	lsls	r3, r3, #3
 80085c4:	4929      	ldr	r1, [pc, #164]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	600b      	str	r3, [r1, #0]
 80085ca:	e018      	b.n	80085fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085cc:	4b27      	ldr	r3, [pc, #156]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a26      	ldr	r2, [pc, #152]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 80085d2:	f023 0301 	bic.w	r3, r3, #1
 80085d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085d8:	f7fa f910 	bl	80027fc <HAL_GetTick>
 80085dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085de:	e008      	b.n	80085f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085e0:	f7fa f90c 	bl	80027fc <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d901      	bls.n	80085f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e199      	b.n	8008926 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80085f2:	4b1e      	ldr	r3, [pc, #120]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 0302 	and.w	r3, r3, #2
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1f0      	bne.n	80085e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 0308 	and.w	r3, r3, #8
 8008606:	2b00      	cmp	r3, #0
 8008608:	d038      	beq.n	800867c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d019      	beq.n	8008646 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008612:	4b16      	ldr	r3, [pc, #88]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 8008614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008616:	4a15      	ldr	r2, [pc, #84]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 8008618:	f043 0301 	orr.w	r3, r3, #1
 800861c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800861e:	f7fa f8ed 	bl	80027fc <HAL_GetTick>
 8008622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008624:	e008      	b.n	8008638 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008626:	f7fa f8e9 	bl	80027fc <HAL_GetTick>
 800862a:	4602      	mov	r2, r0
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	2b02      	cmp	r3, #2
 8008632:	d901      	bls.n	8008638 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008634:	2303      	movs	r3, #3
 8008636:	e176      	b.n	8008926 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008638:	4b0c      	ldr	r3, [pc, #48]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 800863a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800863c:	f003 0302 	and.w	r3, r3, #2
 8008640:	2b00      	cmp	r3, #0
 8008642:	d0f0      	beq.n	8008626 <HAL_RCC_OscConfig+0x23a>
 8008644:	e01a      	b.n	800867c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008646:	4b09      	ldr	r3, [pc, #36]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 8008648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800864a:	4a08      	ldr	r2, [pc, #32]	@ (800866c <HAL_RCC_OscConfig+0x280>)
 800864c:	f023 0301 	bic.w	r3, r3, #1
 8008650:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008652:	f7fa f8d3 	bl	80027fc <HAL_GetTick>
 8008656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008658:	e00a      	b.n	8008670 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800865a:	f7fa f8cf 	bl	80027fc <HAL_GetTick>
 800865e:	4602      	mov	r2, r0
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	2b02      	cmp	r3, #2
 8008666:	d903      	bls.n	8008670 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e15c      	b.n	8008926 <HAL_RCC_OscConfig+0x53a>
 800866c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008670:	4b91      	ldr	r3, [pc, #580]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 8008672:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008674:	f003 0302 	and.w	r3, r3, #2
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1ee      	bne.n	800865a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 0304 	and.w	r3, r3, #4
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 80a4 	beq.w	80087d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800868a:	4b8b      	ldr	r3, [pc, #556]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 800868c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800868e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10d      	bne.n	80086b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008696:	4b88      	ldr	r3, [pc, #544]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 8008698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800869a:	4a87      	ldr	r2, [pc, #540]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 800869c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80086a2:	4b85      	ldr	r3, [pc, #532]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 80086a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086aa:	60bb      	str	r3, [r7, #8]
 80086ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086ae:	2301      	movs	r3, #1
 80086b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80086b2:	4b82      	ldr	r3, [pc, #520]	@ (80088bc <HAL_RCC_OscConfig+0x4d0>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d118      	bne.n	80086f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80086be:	4b7f      	ldr	r3, [pc, #508]	@ (80088bc <HAL_RCC_OscConfig+0x4d0>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a7e      	ldr	r2, [pc, #504]	@ (80088bc <HAL_RCC_OscConfig+0x4d0>)
 80086c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80086ca:	f7fa f897 	bl	80027fc <HAL_GetTick>
 80086ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80086d0:	e008      	b.n	80086e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086d2:	f7fa f893 	bl	80027fc <HAL_GetTick>
 80086d6:	4602      	mov	r2, r0
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	2b64      	cmp	r3, #100	@ 0x64
 80086de:	d901      	bls.n	80086e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e120      	b.n	8008926 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80086e4:	4b75      	ldr	r3, [pc, #468]	@ (80088bc <HAL_RCC_OscConfig+0x4d0>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d0f0      	beq.n	80086d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d106      	bne.n	8008706 <HAL_RCC_OscConfig+0x31a>
 80086f8:	4b6f      	ldr	r3, [pc, #444]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 80086fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086fc:	4a6e      	ldr	r2, [pc, #440]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 80086fe:	f043 0301 	orr.w	r3, r3, #1
 8008702:	6713      	str	r3, [r2, #112]	@ 0x70
 8008704:	e02d      	b.n	8008762 <HAL_RCC_OscConfig+0x376>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10c      	bne.n	8008728 <HAL_RCC_OscConfig+0x33c>
 800870e:	4b6a      	ldr	r3, [pc, #424]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 8008710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008712:	4a69      	ldr	r2, [pc, #420]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 8008714:	f023 0301 	bic.w	r3, r3, #1
 8008718:	6713      	str	r3, [r2, #112]	@ 0x70
 800871a:	4b67      	ldr	r3, [pc, #412]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 800871c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800871e:	4a66      	ldr	r2, [pc, #408]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 8008720:	f023 0304 	bic.w	r3, r3, #4
 8008724:	6713      	str	r3, [r2, #112]	@ 0x70
 8008726:	e01c      	b.n	8008762 <HAL_RCC_OscConfig+0x376>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	2b05      	cmp	r3, #5
 800872e:	d10c      	bne.n	800874a <HAL_RCC_OscConfig+0x35e>
 8008730:	4b61      	ldr	r3, [pc, #388]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 8008732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008734:	4a60      	ldr	r2, [pc, #384]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 8008736:	f043 0304 	orr.w	r3, r3, #4
 800873a:	6713      	str	r3, [r2, #112]	@ 0x70
 800873c:	4b5e      	ldr	r3, [pc, #376]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 800873e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008740:	4a5d      	ldr	r2, [pc, #372]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 8008742:	f043 0301 	orr.w	r3, r3, #1
 8008746:	6713      	str	r3, [r2, #112]	@ 0x70
 8008748:	e00b      	b.n	8008762 <HAL_RCC_OscConfig+0x376>
 800874a:	4b5b      	ldr	r3, [pc, #364]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 800874c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800874e:	4a5a      	ldr	r2, [pc, #360]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 8008750:	f023 0301 	bic.w	r3, r3, #1
 8008754:	6713      	str	r3, [r2, #112]	@ 0x70
 8008756:	4b58      	ldr	r3, [pc, #352]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 8008758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800875a:	4a57      	ldr	r2, [pc, #348]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 800875c:	f023 0304 	bic.w	r3, r3, #4
 8008760:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d015      	beq.n	8008796 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800876a:	f7fa f847 	bl	80027fc <HAL_GetTick>
 800876e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008770:	e00a      	b.n	8008788 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008772:	f7fa f843 	bl	80027fc <HAL_GetTick>
 8008776:	4602      	mov	r2, r0
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008780:	4293      	cmp	r3, r2
 8008782:	d901      	bls.n	8008788 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e0ce      	b.n	8008926 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008788:	4b4b      	ldr	r3, [pc, #300]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 800878a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800878c:	f003 0302 	and.w	r3, r3, #2
 8008790:	2b00      	cmp	r3, #0
 8008792:	d0ee      	beq.n	8008772 <HAL_RCC_OscConfig+0x386>
 8008794:	e014      	b.n	80087c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008796:	f7fa f831 	bl	80027fc <HAL_GetTick>
 800879a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800879c:	e00a      	b.n	80087b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800879e:	f7fa f82d 	bl	80027fc <HAL_GetTick>
 80087a2:	4602      	mov	r2, r0
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d901      	bls.n	80087b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e0b8      	b.n	8008926 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80087b4:	4b40      	ldr	r3, [pc, #256]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 80087b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087b8:	f003 0302 	and.w	r3, r3, #2
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1ee      	bne.n	800879e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80087c0:	7dfb      	ldrb	r3, [r7, #23]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d105      	bne.n	80087d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087c6:	4b3c      	ldr	r3, [pc, #240]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 80087c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ca:	4a3b      	ldr	r2, [pc, #236]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 80087cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087d0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	699b      	ldr	r3, [r3, #24]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f000 80a4 	beq.w	8008924 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80087dc:	4b36      	ldr	r3, [pc, #216]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f003 030c 	and.w	r3, r3, #12
 80087e4:	2b08      	cmp	r3, #8
 80087e6:	d06b      	beq.n	80088c0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d149      	bne.n	8008884 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087f0:	4b31      	ldr	r3, [pc, #196]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a30      	ldr	r2, [pc, #192]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 80087f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087fc:	f7f9 fffe 	bl	80027fc <HAL_GetTick>
 8008800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008802:	e008      	b.n	8008816 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008804:	f7f9 fffa 	bl	80027fc <HAL_GetTick>
 8008808:	4602      	mov	r2, r0
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	2b02      	cmp	r3, #2
 8008810:	d901      	bls.n	8008816 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	e087      	b.n	8008926 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008816:	4b28      	ldr	r3, [pc, #160]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1f0      	bne.n	8008804 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	69da      	ldr	r2, [r3, #28]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	431a      	orrs	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008830:	019b      	lsls	r3, r3, #6
 8008832:	431a      	orrs	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008838:	085b      	lsrs	r3, r3, #1
 800883a:	3b01      	subs	r3, #1
 800883c:	041b      	lsls	r3, r3, #16
 800883e:	431a      	orrs	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008844:	061b      	lsls	r3, r3, #24
 8008846:	4313      	orrs	r3, r2
 8008848:	4a1b      	ldr	r2, [pc, #108]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 800884a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800884e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008850:	4b19      	ldr	r3, [pc, #100]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a18      	ldr	r2, [pc, #96]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 8008856:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800885a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800885c:	f7f9 ffce 	bl	80027fc <HAL_GetTick>
 8008860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008862:	e008      	b.n	8008876 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008864:	f7f9 ffca 	bl	80027fc <HAL_GetTick>
 8008868:	4602      	mov	r2, r0
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	1ad3      	subs	r3, r2, r3
 800886e:	2b02      	cmp	r3, #2
 8008870:	d901      	bls.n	8008876 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	e057      	b.n	8008926 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008876:	4b10      	ldr	r3, [pc, #64]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d0f0      	beq.n	8008864 <HAL_RCC_OscConfig+0x478>
 8008882:	e04f      	b.n	8008924 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008884:	4b0c      	ldr	r3, [pc, #48]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a0b      	ldr	r2, [pc, #44]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 800888a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800888e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008890:	f7f9 ffb4 	bl	80027fc <HAL_GetTick>
 8008894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008896:	e008      	b.n	80088aa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008898:	f7f9 ffb0 	bl	80027fc <HAL_GetTick>
 800889c:	4602      	mov	r2, r0
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d901      	bls.n	80088aa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80088a6:	2303      	movs	r3, #3
 80088a8:	e03d      	b.n	8008926 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088aa:	4b03      	ldr	r3, [pc, #12]	@ (80088b8 <HAL_RCC_OscConfig+0x4cc>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d1f0      	bne.n	8008898 <HAL_RCC_OscConfig+0x4ac>
 80088b6:	e035      	b.n	8008924 <HAL_RCC_OscConfig+0x538>
 80088b8:	40023800 	.word	0x40023800
 80088bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80088c0:	4b1b      	ldr	r3, [pc, #108]	@ (8008930 <HAL_RCC_OscConfig+0x544>)
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d028      	beq.n	8008920 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80088d8:	429a      	cmp	r2, r3
 80088da:	d121      	bne.n	8008920 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d11a      	bne.n	8008920 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80088f0:	4013      	ands	r3, r2
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80088f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d111      	bne.n	8008920 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008906:	085b      	lsrs	r3, r3, #1
 8008908:	3b01      	subs	r3, #1
 800890a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800890c:	429a      	cmp	r2, r3
 800890e:	d107      	bne.n	8008920 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800891a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800891c:	429a      	cmp	r2, r3
 800891e:	d001      	beq.n	8008924 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e000      	b.n	8008926 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3718      	adds	r7, #24
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	40023800 	.word	0x40023800

08008934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800893e:	2300      	movs	r3, #0
 8008940:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d101      	bne.n	800894c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	e0d0      	b.n	8008aee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800894c:	4b6a      	ldr	r3, [pc, #424]	@ (8008af8 <HAL_RCC_ClockConfig+0x1c4>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 030f 	and.w	r3, r3, #15
 8008954:	683a      	ldr	r2, [r7, #0]
 8008956:	429a      	cmp	r2, r3
 8008958:	d910      	bls.n	800897c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800895a:	4b67      	ldr	r3, [pc, #412]	@ (8008af8 <HAL_RCC_ClockConfig+0x1c4>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f023 020f 	bic.w	r2, r3, #15
 8008962:	4965      	ldr	r1, [pc, #404]	@ (8008af8 <HAL_RCC_ClockConfig+0x1c4>)
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	4313      	orrs	r3, r2
 8008968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800896a:	4b63      	ldr	r3, [pc, #396]	@ (8008af8 <HAL_RCC_ClockConfig+0x1c4>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f003 030f 	and.w	r3, r3, #15
 8008972:	683a      	ldr	r2, [r7, #0]
 8008974:	429a      	cmp	r2, r3
 8008976:	d001      	beq.n	800897c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	e0b8      	b.n	8008aee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0302 	and.w	r3, r3, #2
 8008984:	2b00      	cmp	r3, #0
 8008986:	d020      	beq.n	80089ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 0304 	and.w	r3, r3, #4
 8008990:	2b00      	cmp	r3, #0
 8008992:	d005      	beq.n	80089a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008994:	4b59      	ldr	r3, [pc, #356]	@ (8008afc <HAL_RCC_ClockConfig+0x1c8>)
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	4a58      	ldr	r2, [pc, #352]	@ (8008afc <HAL_RCC_ClockConfig+0x1c8>)
 800899a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800899e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0308 	and.w	r3, r3, #8
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d005      	beq.n	80089b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80089ac:	4b53      	ldr	r3, [pc, #332]	@ (8008afc <HAL_RCC_ClockConfig+0x1c8>)
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	4a52      	ldr	r2, [pc, #328]	@ (8008afc <HAL_RCC_ClockConfig+0x1c8>)
 80089b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80089b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089b8:	4b50      	ldr	r3, [pc, #320]	@ (8008afc <HAL_RCC_ClockConfig+0x1c8>)
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	494d      	ldr	r1, [pc, #308]	@ (8008afc <HAL_RCC_ClockConfig+0x1c8>)
 80089c6:	4313      	orrs	r3, r2
 80089c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 0301 	and.w	r3, r3, #1
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d040      	beq.n	8008a58 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d107      	bne.n	80089ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089de:	4b47      	ldr	r3, [pc, #284]	@ (8008afc <HAL_RCC_ClockConfig+0x1c8>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d115      	bne.n	8008a16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e07f      	b.n	8008aee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d107      	bne.n	8008a06 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089f6:	4b41      	ldr	r3, [pc, #260]	@ (8008afc <HAL_RCC_ClockConfig+0x1c8>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d109      	bne.n	8008a16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e073      	b.n	8008aee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a06:	4b3d      	ldr	r3, [pc, #244]	@ (8008afc <HAL_RCC_ClockConfig+0x1c8>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 0302 	and.w	r3, r3, #2
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d101      	bne.n	8008a16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e06b      	b.n	8008aee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a16:	4b39      	ldr	r3, [pc, #228]	@ (8008afc <HAL_RCC_ClockConfig+0x1c8>)
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	f023 0203 	bic.w	r2, r3, #3
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	4936      	ldr	r1, [pc, #216]	@ (8008afc <HAL_RCC_ClockConfig+0x1c8>)
 8008a24:	4313      	orrs	r3, r2
 8008a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a28:	f7f9 fee8 	bl	80027fc <HAL_GetTick>
 8008a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a2e:	e00a      	b.n	8008a46 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a30:	f7f9 fee4 	bl	80027fc <HAL_GetTick>
 8008a34:	4602      	mov	r2, r0
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d901      	bls.n	8008a46 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e053      	b.n	8008aee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a46:	4b2d      	ldr	r3, [pc, #180]	@ (8008afc <HAL_RCC_ClockConfig+0x1c8>)
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	f003 020c 	and.w	r2, r3, #12
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d1eb      	bne.n	8008a30 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a58:	4b27      	ldr	r3, [pc, #156]	@ (8008af8 <HAL_RCC_ClockConfig+0x1c4>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 030f 	and.w	r3, r3, #15
 8008a60:	683a      	ldr	r2, [r7, #0]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d210      	bcs.n	8008a88 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a66:	4b24      	ldr	r3, [pc, #144]	@ (8008af8 <HAL_RCC_ClockConfig+0x1c4>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f023 020f 	bic.w	r2, r3, #15
 8008a6e:	4922      	ldr	r1, [pc, #136]	@ (8008af8 <HAL_RCC_ClockConfig+0x1c4>)
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a76:	4b20      	ldr	r3, [pc, #128]	@ (8008af8 <HAL_RCC_ClockConfig+0x1c4>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 030f 	and.w	r3, r3, #15
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d001      	beq.n	8008a88 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e032      	b.n	8008aee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 0304 	and.w	r3, r3, #4
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d008      	beq.n	8008aa6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a94:	4b19      	ldr	r3, [pc, #100]	@ (8008afc <HAL_RCC_ClockConfig+0x1c8>)
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	4916      	ldr	r1, [pc, #88]	@ (8008afc <HAL_RCC_ClockConfig+0x1c8>)
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 0308 	and.w	r3, r3, #8
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d009      	beq.n	8008ac6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008ab2:	4b12      	ldr	r3, [pc, #72]	@ (8008afc <HAL_RCC_ClockConfig+0x1c8>)
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	00db      	lsls	r3, r3, #3
 8008ac0:	490e      	ldr	r1, [pc, #56]	@ (8008afc <HAL_RCC_ClockConfig+0x1c8>)
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008ac6:	f000 f821 	bl	8008b0c <HAL_RCC_GetSysClockFreq>
 8008aca:	4602      	mov	r2, r0
 8008acc:	4b0b      	ldr	r3, [pc, #44]	@ (8008afc <HAL_RCC_ClockConfig+0x1c8>)
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	091b      	lsrs	r3, r3, #4
 8008ad2:	f003 030f 	and.w	r3, r3, #15
 8008ad6:	490a      	ldr	r1, [pc, #40]	@ (8008b00 <HAL_RCC_ClockConfig+0x1cc>)
 8008ad8:	5ccb      	ldrb	r3, [r1, r3]
 8008ada:	fa22 f303 	lsr.w	r3, r2, r3
 8008ade:	4a09      	ldr	r2, [pc, #36]	@ (8008b04 <HAL_RCC_ClockConfig+0x1d0>)
 8008ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008ae2:	4b09      	ldr	r3, [pc, #36]	@ (8008b08 <HAL_RCC_ClockConfig+0x1d4>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7f9 faa6 	bl	8002038 <HAL_InitTick>

  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	40023c00 	.word	0x40023c00
 8008afc:	40023800 	.word	0x40023800
 8008b00:	080221b0 	.word	0x080221b0
 8008b04:	20000000 	.word	0x20000000
 8008b08:	20000004 	.word	0x20000004

08008b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b10:	b094      	sub	sp, #80	@ 0x50
 8008b12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008b14:	2300      	movs	r3, #0
 8008b16:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b18:	2300      	movs	r3, #0
 8008b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8008b20:	2300      	movs	r3, #0
 8008b22:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b24:	4b79      	ldr	r3, [pc, #484]	@ (8008d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	f003 030c 	and.w	r3, r3, #12
 8008b2c:	2b08      	cmp	r3, #8
 8008b2e:	d00d      	beq.n	8008b4c <HAL_RCC_GetSysClockFreq+0x40>
 8008b30:	2b08      	cmp	r3, #8
 8008b32:	f200 80e1 	bhi.w	8008cf8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d002      	beq.n	8008b40 <HAL_RCC_GetSysClockFreq+0x34>
 8008b3a:	2b04      	cmp	r3, #4
 8008b3c:	d003      	beq.n	8008b46 <HAL_RCC_GetSysClockFreq+0x3a>
 8008b3e:	e0db      	b.n	8008cf8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008b40:	4b73      	ldr	r3, [pc, #460]	@ (8008d10 <HAL_RCC_GetSysClockFreq+0x204>)
 8008b42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008b44:	e0db      	b.n	8008cfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008b46:	4b73      	ldr	r3, [pc, #460]	@ (8008d14 <HAL_RCC_GetSysClockFreq+0x208>)
 8008b48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008b4a:	e0d8      	b.n	8008cfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008b4c:	4b6f      	ldr	r3, [pc, #444]	@ (8008d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b54:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008b56:	4b6d      	ldr	r3, [pc, #436]	@ (8008d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d063      	beq.n	8008c2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b62:	4b6a      	ldr	r3, [pc, #424]	@ (8008d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	099b      	lsrs	r3, r3, #6
 8008b68:	2200      	movs	r2, #0
 8008b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8008b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b74:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b76:	2300      	movs	r3, #0
 8008b78:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008b7e:	4622      	mov	r2, r4
 8008b80:	462b      	mov	r3, r5
 8008b82:	f04f 0000 	mov.w	r0, #0
 8008b86:	f04f 0100 	mov.w	r1, #0
 8008b8a:	0159      	lsls	r1, r3, #5
 8008b8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b90:	0150      	lsls	r0, r2, #5
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	4621      	mov	r1, r4
 8008b98:	1a51      	subs	r1, r2, r1
 8008b9a:	6139      	str	r1, [r7, #16]
 8008b9c:	4629      	mov	r1, r5
 8008b9e:	eb63 0301 	sbc.w	r3, r3, r1
 8008ba2:	617b      	str	r3, [r7, #20]
 8008ba4:	f04f 0200 	mov.w	r2, #0
 8008ba8:	f04f 0300 	mov.w	r3, #0
 8008bac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008bb0:	4659      	mov	r1, fp
 8008bb2:	018b      	lsls	r3, r1, #6
 8008bb4:	4651      	mov	r1, sl
 8008bb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008bba:	4651      	mov	r1, sl
 8008bbc:	018a      	lsls	r2, r1, #6
 8008bbe:	4651      	mov	r1, sl
 8008bc0:	ebb2 0801 	subs.w	r8, r2, r1
 8008bc4:	4659      	mov	r1, fp
 8008bc6:	eb63 0901 	sbc.w	r9, r3, r1
 8008bca:	f04f 0200 	mov.w	r2, #0
 8008bce:	f04f 0300 	mov.w	r3, #0
 8008bd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008bd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008bda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008bde:	4690      	mov	r8, r2
 8008be0:	4699      	mov	r9, r3
 8008be2:	4623      	mov	r3, r4
 8008be4:	eb18 0303 	adds.w	r3, r8, r3
 8008be8:	60bb      	str	r3, [r7, #8]
 8008bea:	462b      	mov	r3, r5
 8008bec:	eb49 0303 	adc.w	r3, r9, r3
 8008bf0:	60fb      	str	r3, [r7, #12]
 8008bf2:	f04f 0200 	mov.w	r2, #0
 8008bf6:	f04f 0300 	mov.w	r3, #0
 8008bfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008bfe:	4629      	mov	r1, r5
 8008c00:	024b      	lsls	r3, r1, #9
 8008c02:	4621      	mov	r1, r4
 8008c04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008c08:	4621      	mov	r1, r4
 8008c0a:	024a      	lsls	r2, r1, #9
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	4619      	mov	r1, r3
 8008c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c12:	2200      	movs	r2, #0
 8008c14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008c1c:	f7f7 fb48 	bl	80002b0 <__aeabi_uldivmod>
 8008c20:	4602      	mov	r2, r0
 8008c22:	460b      	mov	r3, r1
 8008c24:	4613      	mov	r3, r2
 8008c26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c28:	e058      	b.n	8008cdc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c2a:	4b38      	ldr	r3, [pc, #224]	@ (8008d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	099b      	lsrs	r3, r3, #6
 8008c30:	2200      	movs	r2, #0
 8008c32:	4618      	mov	r0, r3
 8008c34:	4611      	mov	r1, r2
 8008c36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008c3a:	623b      	str	r3, [r7, #32]
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008c44:	4642      	mov	r2, r8
 8008c46:	464b      	mov	r3, r9
 8008c48:	f04f 0000 	mov.w	r0, #0
 8008c4c:	f04f 0100 	mov.w	r1, #0
 8008c50:	0159      	lsls	r1, r3, #5
 8008c52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008c56:	0150      	lsls	r0, r2, #5
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4641      	mov	r1, r8
 8008c5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008c62:	4649      	mov	r1, r9
 8008c64:	eb63 0b01 	sbc.w	fp, r3, r1
 8008c68:	f04f 0200 	mov.w	r2, #0
 8008c6c:	f04f 0300 	mov.w	r3, #0
 8008c70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008c74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008c78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008c7c:	ebb2 040a 	subs.w	r4, r2, sl
 8008c80:	eb63 050b 	sbc.w	r5, r3, fp
 8008c84:	f04f 0200 	mov.w	r2, #0
 8008c88:	f04f 0300 	mov.w	r3, #0
 8008c8c:	00eb      	lsls	r3, r5, #3
 8008c8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c92:	00e2      	lsls	r2, r4, #3
 8008c94:	4614      	mov	r4, r2
 8008c96:	461d      	mov	r5, r3
 8008c98:	4643      	mov	r3, r8
 8008c9a:	18e3      	adds	r3, r4, r3
 8008c9c:	603b      	str	r3, [r7, #0]
 8008c9e:	464b      	mov	r3, r9
 8008ca0:	eb45 0303 	adc.w	r3, r5, r3
 8008ca4:	607b      	str	r3, [r7, #4]
 8008ca6:	f04f 0200 	mov.w	r2, #0
 8008caa:	f04f 0300 	mov.w	r3, #0
 8008cae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008cb2:	4629      	mov	r1, r5
 8008cb4:	028b      	lsls	r3, r1, #10
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008cbc:	4621      	mov	r1, r4
 8008cbe:	028a      	lsls	r2, r1, #10
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	61bb      	str	r3, [r7, #24]
 8008cca:	61fa      	str	r2, [r7, #28]
 8008ccc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008cd0:	f7f7 faee 	bl	80002b0 <__aeabi_uldivmod>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	4613      	mov	r3, r2
 8008cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8008d0c <HAL_RCC_GetSysClockFreq+0x200>)
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	0c1b      	lsrs	r3, r3, #16
 8008ce2:	f003 0303 	and.w	r3, r3, #3
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	005b      	lsls	r3, r3, #1
 8008cea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008cec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008cee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008cf6:	e002      	b.n	8008cfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008cf8:	4b05      	ldr	r3, [pc, #20]	@ (8008d10 <HAL_RCC_GetSysClockFreq+0x204>)
 8008cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008cfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3750      	adds	r7, #80	@ 0x50
 8008d04:	46bd      	mov	sp, r7
 8008d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d0a:	bf00      	nop
 8008d0c:	40023800 	.word	0x40023800
 8008d10:	00f42400 	.word	0x00f42400
 8008d14:	007a1200 	.word	0x007a1200

08008d18 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d1c:	4b03      	ldr	r3, [pc, #12]	@ (8008d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	20000000 	.word	0x20000000

08008d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008d34:	f7ff fff0 	bl	8008d18 <HAL_RCC_GetHCLKFreq>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	4b05      	ldr	r3, [pc, #20]	@ (8008d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	0a9b      	lsrs	r3, r3, #10
 8008d40:	f003 0307 	and.w	r3, r3, #7
 8008d44:	4903      	ldr	r1, [pc, #12]	@ (8008d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d46:	5ccb      	ldrb	r3, [r1, r3]
 8008d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	40023800 	.word	0x40023800
 8008d54:	080221c0 	.word	0x080221c0

08008d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008d5c:	f7ff ffdc 	bl	8008d18 <HAL_RCC_GetHCLKFreq>
 8008d60:	4602      	mov	r2, r0
 8008d62:	4b05      	ldr	r3, [pc, #20]	@ (8008d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	0b5b      	lsrs	r3, r3, #13
 8008d68:	f003 0307 	and.w	r3, r3, #7
 8008d6c:	4903      	ldr	r1, [pc, #12]	@ (8008d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d6e:	5ccb      	ldrb	r3, [r1, r3]
 8008d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	40023800 	.word	0x40023800
 8008d7c:	080221c0 	.word	0x080221c0

08008d80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	220f      	movs	r2, #15
 8008d8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008d90:	4b12      	ldr	r3, [pc, #72]	@ (8008ddc <HAL_RCC_GetClockConfig+0x5c>)
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	f003 0203 	and.w	r2, r3, #3
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8008ddc <HAL_RCC_GetClockConfig+0x5c>)
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008da8:	4b0c      	ldr	r3, [pc, #48]	@ (8008ddc <HAL_RCC_GetClockConfig+0x5c>)
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008db4:	4b09      	ldr	r3, [pc, #36]	@ (8008ddc <HAL_RCC_GetClockConfig+0x5c>)
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	08db      	lsrs	r3, r3, #3
 8008dba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008dc2:	4b07      	ldr	r3, [pc, #28]	@ (8008de0 <HAL_RCC_GetClockConfig+0x60>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 020f 	and.w	r2, r3, #15
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	601a      	str	r2, [r3, #0]
}
 8008dce:	bf00      	nop
 8008dd0:	370c      	adds	r7, #12
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	40023800 	.word	0x40023800
 8008de0:	40023c00 	.word	0x40023c00

08008de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b088      	sub	sp, #32
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008dec:	2300      	movs	r3, #0
 8008dee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008df0:	2300      	movs	r3, #0
 8008df2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008df4:	2300      	movs	r3, #0
 8008df6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d012      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008e0c:	4b69      	ldr	r3, [pc, #420]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	4a68      	ldr	r2, [pc, #416]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e12:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008e16:	6093      	str	r3, [r2, #8]
 8008e18:	4b66      	ldr	r3, [pc, #408]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e1a:	689a      	ldr	r2, [r3, #8]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e20:	4964      	ldr	r1, [pc, #400]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e22:	4313      	orrs	r3, r2
 8008e24:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d017      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e3e:	4b5d      	ldr	r3, [pc, #372]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e44:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e4c:	4959      	ldr	r1, [pc, #356]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e5c:	d101      	bne.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d017      	beq.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008e7a:	4b4e      	ldr	r3, [pc, #312]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e80:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e88:	494a      	ldr	r1, [pc, #296]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e98:	d101      	bne.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d101      	bne.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 0320 	and.w	r3, r3, #32
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f000 808b 	beq.w	8008fde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008ec8:	4b3a      	ldr	r3, [pc, #232]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ecc:	4a39      	ldr	r2, [pc, #228]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ece:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ed2:	6413      	str	r3, [r2, #64]	@ 0x40
 8008ed4:	4b37      	ldr	r3, [pc, #220]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008edc:	60bb      	str	r3, [r7, #8]
 8008ede:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008ee0:	4b35      	ldr	r3, [pc, #212]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a34      	ldr	r2, [pc, #208]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008eea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008eec:	f7f9 fc86 	bl	80027fc <HAL_GetTick>
 8008ef0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008ef2:	e008      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ef4:	f7f9 fc82 	bl	80027fc <HAL_GetTick>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	2b64      	cmp	r3, #100	@ 0x64
 8008f00:	d901      	bls.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008f02:	2303      	movs	r3, #3
 8008f04:	e357      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008f06:	4b2c      	ldr	r3, [pc, #176]	@ (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d0f0      	beq.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008f12:	4b28      	ldr	r3, [pc, #160]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f1a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d035      	beq.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f2a:	693a      	ldr	r2, [r7, #16]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d02e      	beq.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f30:	4b20      	ldr	r3, [pc, #128]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f38:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f3e:	4a1d      	ldr	r2, [pc, #116]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f44:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008f46:	4b1b      	ldr	r3, [pc, #108]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f4a:	4a1a      	ldr	r2, [pc, #104]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f50:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008f52:	4a18      	ldr	r2, [pc, #96]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008f58:	4b16      	ldr	r3, [pc, #88]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f5c:	f003 0301 	and.w	r3, r3, #1
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d114      	bne.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f64:	f7f9 fc4a 	bl	80027fc <HAL_GetTick>
 8008f68:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f6a:	e00a      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f6c:	f7f9 fc46 	bl	80027fc <HAL_GetTick>
 8008f70:	4602      	mov	r2, r0
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d901      	bls.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	e319      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f82:	4b0c      	ldr	r3, [pc, #48]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f86:	f003 0302 	and.w	r3, r3, #2
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d0ee      	beq.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f9a:	d111      	bne.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008f9c:	4b05      	ldr	r3, [pc, #20]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008fa8:	4b04      	ldr	r3, [pc, #16]	@ (8008fbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008faa:	400b      	ands	r3, r1
 8008fac:	4901      	ldr	r1, [pc, #4]	@ (8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	608b      	str	r3, [r1, #8]
 8008fb2:	e00b      	b.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008fb4:	40023800 	.word	0x40023800
 8008fb8:	40007000 	.word	0x40007000
 8008fbc:	0ffffcff 	.word	0x0ffffcff
 8008fc0:	4baa      	ldr	r3, [pc, #680]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	4aa9      	ldr	r2, [pc, #676]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fc6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008fca:	6093      	str	r3, [r2, #8]
 8008fcc:	4ba7      	ldr	r3, [pc, #668]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fd8:	49a4      	ldr	r1, [pc, #656]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 0310 	and.w	r3, r3, #16
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d010      	beq.n	800900c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008fea:	4ba0      	ldr	r3, [pc, #640]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ff0:	4a9e      	ldr	r2, [pc, #632]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ff2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ff6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8008ffa:	4b9c      	ldr	r3, [pc, #624]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ffc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009004:	4999      	ldr	r1, [pc, #612]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009006:	4313      	orrs	r3, r2
 8009008:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00a      	beq.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009018:	4b94      	ldr	r3, [pc, #592]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800901a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800901e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009026:	4991      	ldr	r1, [pc, #580]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009028:	4313      	orrs	r3, r2
 800902a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00a      	beq.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800903a:	4b8c      	ldr	r3, [pc, #560]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800903c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009040:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009048:	4988      	ldr	r1, [pc, #544]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800904a:	4313      	orrs	r3, r2
 800904c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00a      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800905c:	4b83      	ldr	r3, [pc, #524]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800905e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009062:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800906a:	4980      	ldr	r1, [pc, #512]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800906c:	4313      	orrs	r3, r2
 800906e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00a      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800907e:	4b7b      	ldr	r3, [pc, #492]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009084:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800908c:	4977      	ldr	r1, [pc, #476]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800908e:	4313      	orrs	r3, r2
 8009090:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00a      	beq.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80090a0:	4b72      	ldr	r3, [pc, #456]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090a6:	f023 0203 	bic.w	r2, r3, #3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090ae:	496f      	ldr	r1, [pc, #444]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090b0:	4313      	orrs	r3, r2
 80090b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00a      	beq.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80090c2:	4b6a      	ldr	r3, [pc, #424]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090c8:	f023 020c 	bic.w	r2, r3, #12
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090d0:	4966      	ldr	r1, [pc, #408]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090d2:	4313      	orrs	r3, r2
 80090d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00a      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80090e4:	4b61      	ldr	r3, [pc, #388]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090ea:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090f2:	495e      	ldr	r1, [pc, #376]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090f4:	4313      	orrs	r3, r2
 80090f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00a      	beq.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009106:	4b59      	ldr	r3, [pc, #356]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800910c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009114:	4955      	ldr	r1, [pc, #340]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009116:	4313      	orrs	r3, r2
 8009118:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009124:	2b00      	cmp	r3, #0
 8009126:	d00a      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009128:	4b50      	ldr	r3, [pc, #320]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800912a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800912e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009136:	494d      	ldr	r1, [pc, #308]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009138:	4313      	orrs	r3, r2
 800913a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00a      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800914a:	4b48      	ldr	r3, [pc, #288]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800914c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009150:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009158:	4944      	ldr	r1, [pc, #272]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800915a:	4313      	orrs	r3, r2
 800915c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00a      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800916c:	4b3f      	ldr	r3, [pc, #252]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800916e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009172:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800917a:	493c      	ldr	r1, [pc, #240]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800917c:	4313      	orrs	r3, r2
 800917e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00a      	beq.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800918e:	4b37      	ldr	r3, [pc, #220]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009194:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800919c:	4933      	ldr	r1, [pc, #204]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800919e:	4313      	orrs	r3, r2
 80091a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00a      	beq.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80091b0:	4b2e      	ldr	r3, [pc, #184]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091b6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80091be:	492b      	ldr	r1, [pc, #172]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091c0:	4313      	orrs	r3, r2
 80091c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d011      	beq.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80091d2:	4b26      	ldr	r3, [pc, #152]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091d8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80091e0:	4922      	ldr	r1, [pc, #136]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091e2:	4313      	orrs	r3, r2
 80091e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80091ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091f0:	d101      	bne.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80091f2:	2301      	movs	r3, #1
 80091f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 0308 	and.w	r3, r3, #8
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d001      	beq.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009202:	2301      	movs	r3, #1
 8009204:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00a      	beq.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009212:	4b16      	ldr	r3, [pc, #88]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009218:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009220:	4912      	ldr	r1, [pc, #72]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009222:	4313      	orrs	r3, r2
 8009224:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00b      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009234:	4b0d      	ldr	r3, [pc, #52]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800923a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009244:	4909      	ldr	r1, [pc, #36]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009246:	4313      	orrs	r3, r2
 8009248:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d006      	beq.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800925a:	2b00      	cmp	r3, #0
 800925c:	f000 80d9 	beq.w	8009412 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009260:	4b02      	ldr	r3, [pc, #8]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a01      	ldr	r2, [pc, #4]	@ (800926c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009266:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800926a:	e001      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800926c:	40023800 	.word	0x40023800
 8009270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009272:	f7f9 fac3 	bl	80027fc <HAL_GetTick>
 8009276:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009278:	e008      	b.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800927a:	f7f9 fabf 	bl	80027fc <HAL_GetTick>
 800927e:	4602      	mov	r2, r0
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	2b64      	cmp	r3, #100	@ 0x64
 8009286:	d901      	bls.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009288:	2303      	movs	r3, #3
 800928a:	e194      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800928c:	4b6c      	ldr	r3, [pc, #432]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1f0      	bne.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f003 0301 	and.w	r3, r3, #1
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d021      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d11d      	bne.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80092ac:	4b64      	ldr	r3, [pc, #400]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092b2:	0c1b      	lsrs	r3, r3, #16
 80092b4:	f003 0303 	and.w	r3, r3, #3
 80092b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80092ba:	4b61      	ldr	r3, [pc, #388]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80092c0:	0e1b      	lsrs	r3, r3, #24
 80092c2:	f003 030f 	and.w	r3, r3, #15
 80092c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	019a      	lsls	r2, r3, #6
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	041b      	lsls	r3, r3, #16
 80092d2:	431a      	orrs	r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	061b      	lsls	r3, r3, #24
 80092d8:	431a      	orrs	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	071b      	lsls	r3, r3, #28
 80092e0:	4957      	ldr	r1, [pc, #348]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092e2:	4313      	orrs	r3, r2
 80092e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d004      	beq.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092fc:	d00a      	beq.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009306:	2b00      	cmp	r3, #0
 8009308:	d02e      	beq.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800930e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009312:	d129      	bne.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009314:	4b4a      	ldr	r3, [pc, #296]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009316:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800931a:	0c1b      	lsrs	r3, r3, #16
 800931c:	f003 0303 	and.w	r3, r3, #3
 8009320:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009322:	4b47      	ldr	r3, [pc, #284]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009324:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009328:	0f1b      	lsrs	r3, r3, #28
 800932a:	f003 0307 	and.w	r3, r3, #7
 800932e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	019a      	lsls	r2, r3, #6
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	041b      	lsls	r3, r3, #16
 800933a:	431a      	orrs	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	061b      	lsls	r3, r3, #24
 8009342:	431a      	orrs	r2, r3
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	071b      	lsls	r3, r3, #28
 8009348:	493d      	ldr	r1, [pc, #244]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800934a:	4313      	orrs	r3, r2
 800934c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009350:	4b3b      	ldr	r3, [pc, #236]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009352:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009356:	f023 021f 	bic.w	r2, r3, #31
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800935e:	3b01      	subs	r3, #1
 8009360:	4937      	ldr	r1, [pc, #220]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009362:	4313      	orrs	r3, r2
 8009364:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d01d      	beq.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009374:	4b32      	ldr	r3, [pc, #200]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009376:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800937a:	0e1b      	lsrs	r3, r3, #24
 800937c:	f003 030f 	and.w	r3, r3, #15
 8009380:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009382:	4b2f      	ldr	r3, [pc, #188]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009384:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009388:	0f1b      	lsrs	r3, r3, #28
 800938a:	f003 0307 	and.w	r3, r3, #7
 800938e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	019a      	lsls	r2, r3, #6
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	041b      	lsls	r3, r3, #16
 800939c:	431a      	orrs	r2, r3
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	061b      	lsls	r3, r3, #24
 80093a2:	431a      	orrs	r2, r3
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	071b      	lsls	r3, r3, #28
 80093a8:	4925      	ldr	r1, [pc, #148]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093aa:	4313      	orrs	r3, r2
 80093ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d011      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	019a      	lsls	r2, r3, #6
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	041b      	lsls	r3, r3, #16
 80093c8:	431a      	orrs	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	061b      	lsls	r3, r3, #24
 80093d0:	431a      	orrs	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	071b      	lsls	r3, r3, #28
 80093d8:	4919      	ldr	r1, [pc, #100]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093da:	4313      	orrs	r3, r2
 80093dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80093e0:	4b17      	ldr	r3, [pc, #92]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a16      	ldr	r2, [pc, #88]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80093ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093ec:	f7f9 fa06 	bl	80027fc <HAL_GetTick>
 80093f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80093f2:	e008      	b.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80093f4:	f7f9 fa02 	bl	80027fc <HAL_GetTick>
 80093f8:	4602      	mov	r2, r0
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	2b64      	cmp	r3, #100	@ 0x64
 8009400:	d901      	bls.n	8009406 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009402:	2303      	movs	r3, #3
 8009404:	e0d7      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009406:	4b0e      	ldr	r3, [pc, #56]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800940e:	2b00      	cmp	r3, #0
 8009410:	d0f0      	beq.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	2b01      	cmp	r3, #1
 8009416:	f040 80cd 	bne.w	80095b4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800941a:	4b09      	ldr	r3, [pc, #36]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a08      	ldr	r2, [pc, #32]	@ (8009440 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009420:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009426:	f7f9 f9e9 	bl	80027fc <HAL_GetTick>
 800942a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800942c:	e00a      	b.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800942e:	f7f9 f9e5 	bl	80027fc <HAL_GetTick>
 8009432:	4602      	mov	r2, r0
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	2b64      	cmp	r3, #100	@ 0x64
 800943a:	d903      	bls.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800943c:	2303      	movs	r3, #3
 800943e:	e0ba      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009440:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009444:	4b5e      	ldr	r3, [pc, #376]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800944c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009450:	d0ed      	beq.n	800942e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800945a:	2b00      	cmp	r3, #0
 800945c:	d003      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009462:	2b00      	cmp	r3, #0
 8009464:	d009      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800946e:	2b00      	cmp	r3, #0
 8009470:	d02e      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009476:	2b00      	cmp	r3, #0
 8009478:	d12a      	bne.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800947a:	4b51      	ldr	r3, [pc, #324]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800947c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009480:	0c1b      	lsrs	r3, r3, #16
 8009482:	f003 0303 	and.w	r3, r3, #3
 8009486:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009488:	4b4d      	ldr	r3, [pc, #308]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800948a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800948e:	0f1b      	lsrs	r3, r3, #28
 8009490:	f003 0307 	and.w	r3, r3, #7
 8009494:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	695b      	ldr	r3, [r3, #20]
 800949a:	019a      	lsls	r2, r3, #6
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	041b      	lsls	r3, r3, #16
 80094a0:	431a      	orrs	r2, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	061b      	lsls	r3, r3, #24
 80094a8:	431a      	orrs	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	071b      	lsls	r3, r3, #28
 80094ae:	4944      	ldr	r1, [pc, #272]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094b0:	4313      	orrs	r3, r2
 80094b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80094b6:	4b42      	ldr	r3, [pc, #264]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094bc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094c4:	3b01      	subs	r3, #1
 80094c6:	021b      	lsls	r3, r3, #8
 80094c8:	493d      	ldr	r1, [pc, #244]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094ca:	4313      	orrs	r3, r2
 80094cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d022      	beq.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094e4:	d11d      	bne.n	8009522 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80094e6:	4b36      	ldr	r3, [pc, #216]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094ec:	0e1b      	lsrs	r3, r3, #24
 80094ee:	f003 030f 	and.w	r3, r3, #15
 80094f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80094f4:	4b32      	ldr	r3, [pc, #200]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094fa:	0f1b      	lsrs	r3, r3, #28
 80094fc:	f003 0307 	and.w	r3, r3, #7
 8009500:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	695b      	ldr	r3, [r3, #20]
 8009506:	019a      	lsls	r2, r3, #6
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6a1b      	ldr	r3, [r3, #32]
 800950c:	041b      	lsls	r3, r3, #16
 800950e:	431a      	orrs	r2, r3
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	061b      	lsls	r3, r3, #24
 8009514:	431a      	orrs	r2, r3
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	071b      	lsls	r3, r3, #28
 800951a:	4929      	ldr	r1, [pc, #164]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800951c:	4313      	orrs	r3, r2
 800951e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 0308 	and.w	r3, r3, #8
 800952a:	2b00      	cmp	r3, #0
 800952c:	d028      	beq.n	8009580 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800952e:	4b24      	ldr	r3, [pc, #144]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009534:	0e1b      	lsrs	r3, r3, #24
 8009536:	f003 030f 	and.w	r3, r3, #15
 800953a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800953c:	4b20      	ldr	r3, [pc, #128]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800953e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009542:	0c1b      	lsrs	r3, r3, #16
 8009544:	f003 0303 	and.w	r3, r3, #3
 8009548:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	695b      	ldr	r3, [r3, #20]
 800954e:	019a      	lsls	r2, r3, #6
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	041b      	lsls	r3, r3, #16
 8009554:	431a      	orrs	r2, r3
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	061b      	lsls	r3, r3, #24
 800955a:	431a      	orrs	r2, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	69db      	ldr	r3, [r3, #28]
 8009560:	071b      	lsls	r3, r3, #28
 8009562:	4917      	ldr	r1, [pc, #92]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009564:	4313      	orrs	r3, r2
 8009566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800956a:	4b15      	ldr	r3, [pc, #84]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800956c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009570:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009578:	4911      	ldr	r1, [pc, #68]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800957a:	4313      	orrs	r3, r2
 800957c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009580:	4b0f      	ldr	r3, [pc, #60]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a0e      	ldr	r2, [pc, #56]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800958a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800958c:	f7f9 f936 	bl	80027fc <HAL_GetTick>
 8009590:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009592:	e008      	b.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009594:	f7f9 f932 	bl	80027fc <HAL_GetTick>
 8009598:	4602      	mov	r2, r0
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	1ad3      	subs	r3, r2, r3
 800959e:	2b64      	cmp	r3, #100	@ 0x64
 80095a0:	d901      	bls.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e007      	b.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80095a6:	4b06      	ldr	r3, [pc, #24]	@ (80095c0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095b2:	d1ef      	bne.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3720      	adds	r7, #32
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	40023800 	.word	0x40023800

080095c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d101      	bne.n	80095d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	e0c6      	b.n	8009764 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d108      	bne.n	80095f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095e6:	d009      	beq.n	80095fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	61da      	str	r2, [r3, #28]
 80095ee:	e005      	b.n	80095fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b00      	cmp	r3, #0
 8009606:	d106      	bne.n	8009616 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f7f8 f979 	bl	8001908 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2202      	movs	r2, #2
 800961a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800962c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009636:	d902      	bls.n	800963e <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009638:	2300      	movs	r3, #0
 800963a:	60fb      	str	r3, [r7, #12]
 800963c:	e002      	b.n	8009644 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800963e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009642:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800964c:	d007      	beq.n	800965e <HAL_SPI_Init+0x9a>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009656:	d002      	beq.n	800965e <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	689b      	ldr	r3, [r3, #8]
 800966a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800966e:	431a      	orrs	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	f003 0302 	and.w	r3, r3, #2
 8009678:	431a      	orrs	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	695b      	ldr	r3, [r3, #20]
 800967e:	f003 0301 	and.w	r3, r3, #1
 8009682:	431a      	orrs	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	699b      	ldr	r3, [r3, #24]
 8009688:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800968c:	431a      	orrs	r2, r3
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	69db      	ldr	r3, [r3, #28]
 8009692:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009696:	431a      	orrs	r2, r3
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6a1b      	ldr	r3, [r3, #32]
 800969c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096a0:	ea42 0103 	orr.w	r1, r2, r3
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	430a      	orrs	r2, r1
 80096b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096bc:	d11b      	bne.n	80096f6 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d10b      	bne.n	80096de <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80096ce:	d903      	bls.n	80096d8 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2202      	movs	r2, #2
 80096d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80096d6:	e002      	b.n	80096de <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	631a      	str	r2, [r3, #48]	@ 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d107      	bne.n	80096f6 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80096f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	699b      	ldr	r3, [r3, #24]
 80096fa:	0c1b      	lsrs	r3, r3, #16
 80096fc:	f003 0204 	and.w	r2, r3, #4
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009704:	f003 0310 	and.w	r3, r3, #16
 8009708:	431a      	orrs	r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800970e:	f003 0308 	and.w	r3, r3, #8
 8009712:	431a      	orrs	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800971c:	ea42 0103 	orr.w	r1, r2, r3
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	430a      	orrs	r2, r1
 800972c:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009736:	d105      	bne.n	8009744 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	b292      	uxth	r2, r2
 8009742:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	69da      	ldr	r2, [r3, #28]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009752:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	4613      	mov	r3, r2
 8009778:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009780:	b2db      	uxtb	r3, r3
 8009782:	2b01      	cmp	r3, #1
 8009784:	d001      	beq.n	800978a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8009786:	2302      	movs	r3, #2
 8009788:	e0e9      	b.n	800995e <HAL_SPI_Transmit_DMA+0x1f2>
  }

  if ((pData == NULL) || (Size == 0U))
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d002      	beq.n	8009796 <HAL_SPI_Transmit_DMA+0x2a>
 8009790:	88fb      	ldrh	r3, [r7, #6]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e0e1      	b.n	800995e <HAL_SPI_Transmit_DMA+0x1f2>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d101      	bne.n	80097a8 <HAL_SPI_Transmit_DMA+0x3c>
 80097a4:	2302      	movs	r3, #2
 80097a6:	e0da      	b.n	800995e <HAL_SPI_Transmit_DMA+0x1f2>
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2203      	movs	r2, #3
 80097b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	88fa      	ldrh	r2, [r7, #6]
 80097c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	88fa      	ldrh	r2, [r7, #6]
 80097ce:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2200      	movs	r2, #0
 80097d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2200      	movs	r2, #0
 80097e0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097fa:	d10f      	bne.n	800981c <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800980a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800981a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009820:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009824:	d10f      	bne.n	8009846 <HAL_SPI_Transmit_DMA+0xda>
  {
    SPI_RESET_CRC(hspi);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009834:	601a      	str	r2, [r3, #0]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009844:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800984a:	4a47      	ldr	r2, [pc, #284]	@ (8009968 <HAL_SPI_Transmit_DMA+0x1fc>)
 800984c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009852:	4a46      	ldr	r2, [pc, #280]	@ (800996c <HAL_SPI_Transmit_DMA+0x200>)
 8009854:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800985a:	4a45      	ldr	r2, [pc, #276]	@ (8009970 <HAL_SPI_Transmit_DMA+0x204>)
 800985c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009862:	2200      	movs	r2, #0
 8009864:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	685a      	ldr	r2, [r3, #4]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009874:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	68db      	ldr	r3, [r3, #12]
 800987a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800987e:	d82d      	bhi.n	80098dc <HAL_SPI_Transmit_DMA+0x170>
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800988a:	d127      	bne.n	80098dc <HAL_SPI_Transmit_DMA+0x170>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009890:	b29b      	uxth	r3, r3
 8009892:	f003 0301 	and.w	r3, r3, #1
 8009896:	2b00      	cmp	r3, #0
 8009898:	d10f      	bne.n	80098ba <HAL_SPI_Transmit_DMA+0x14e>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	685a      	ldr	r2, [r3, #4]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80098a8:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	085b      	lsrs	r3, r3, #1
 80098b2:	b29a      	uxth	r2, r3
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80098b8:	e010      	b.n	80098dc <HAL_SPI_Transmit_DMA+0x170>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	685a      	ldr	r2, [r3, #4]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80098c8:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	085b      	lsrs	r3, r3, #1
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	3301      	adds	r3, #1
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098e4:	4619      	mov	r1, r3
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	330c      	adds	r3, #12
 80098ec:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098f2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80098f4:	f7fa fa22 	bl	8003d3c <HAL_DMA_Start_IT>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00b      	beq.n	8009916 <HAL_SPI_Transmit_DMA+0x1aa>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009902:	f043 0210 	orr.w	r2, r3, #16
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	e023      	b.n	800995e <HAL_SPI_Transmit_DMA+0x1f2>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009920:	2b40      	cmp	r3, #64	@ 0x40
 8009922:	d007      	beq.n	8009934 <HAL_SPI_Transmit_DMA+0x1c8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009932:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2200      	movs	r2, #0
 8009938:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f042 0220 	orr.w	r2, r2, #32
 800994a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	685a      	ldr	r2, [r3, #4]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f042 0202 	orr.w	r2, r2, #2
 800995a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	0800a6ef 	.word	0x0800a6ef
 800996c:	0800a3a1 	.word	0x0800a3a1
 8009970:	0800a743 	.word	0x0800a743

08009974 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	60f8      	str	r0, [r7, #12]
 800997c:	60b9      	str	r1, [r7, #8]
 800997e:	4613      	mov	r3, r2
 8009980:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b01      	cmp	r3, #1
 800998c:	d001      	beq.n	8009992 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 800998e:	2302      	movs	r3, #2
 8009990:	e11a      	b.n	8009bc8 <HAL_SPI_Receive_DMA+0x254>
  }

  if ((pData == NULL) || (Size == 0U))
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d002      	beq.n	800999e <HAL_SPI_Receive_DMA+0x2a>
 8009998:	88fb      	ldrh	r3, [r7, #6]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d101      	bne.n	80099a2 <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e112      	b.n	8009bc8 <HAL_SPI_Receive_DMA+0x254>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d110      	bne.n	80099cc <HAL_SPI_Receive_DMA+0x58>
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80099b2:	d10b      	bne.n	80099cc <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2204      	movs	r2, #4
 80099b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80099bc:	88fb      	ldrh	r3, [r7, #6]
 80099be:	68ba      	ldr	r2, [r7, #8]
 80099c0:	68b9      	ldr	r1, [r7, #8]
 80099c2:	68f8      	ldr	r0, [r7, #12]
 80099c4:	f000 f90a 	bl	8009bdc <HAL_SPI_TransmitReceive_DMA>
 80099c8:	4603      	mov	r3, r0
 80099ca:	e0fd      	b.n	8009bc8 <HAL_SPI_Receive_DMA+0x254>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80099d2:	2b01      	cmp	r3, #1
 80099d4:	d101      	bne.n	80099da <HAL_SPI_Receive_DMA+0x66>
 80099d6:	2302      	movs	r3, #2
 80099d8:	e0f6      	b.n	8009bc8 <HAL_SPI_Receive_DMA+0x254>
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2204      	movs	r2, #4
 80099e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2200      	movs	r2, #0
 80099ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	88fa      	ldrh	r2, [r7, #6]
 80099fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	88fa      	ldrh	r2, [r7, #6]
 8009a02:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2200      	movs	r2, #0
 8009a16:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a26:	d10f      	bne.n	8009a48 <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009a46:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a50:	d10f      	bne.n	8009a72 <HAL_SPI_Receive_DMA+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	681a      	ldr	r2, [r3, #0]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009a60:	601a      	str	r2, [r3, #0]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009a70:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	685a      	ldr	r2, [r3, #4]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009a80:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009a8a:	d908      	bls.n	8009a9e <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	685a      	ldr	r2, [r3, #4]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009a9a:	605a      	str	r2, [r3, #4]
 8009a9c:	e042      	b.n	8009b24 <HAL_SPI_Receive_DMA+0x1b0>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	685a      	ldr	r2, [r3, #4]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009aac:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ab2:	699b      	ldr	r3, [r3, #24]
 8009ab4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ab8:	d134      	bne.n	8009b24 <HAL_SPI_Receive_DMA+0x1b0>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	685a      	ldr	r2, [r3, #4]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009ac8:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d111      	bne.n	8009afe <HAL_SPI_Receive_DMA+0x18a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	685a      	ldr	r2, [r3, #4]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009ae8:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	085b      	lsrs	r3, r3, #1
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009afc:	e012      	b.n	8009b24 <HAL_SPI_Receive_DMA+0x1b0>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	685a      	ldr	r2, [r3, #4]
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009b0c:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	085b      	lsrs	r3, r3, #1
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b28:	4a29      	ldr	r2, [pc, #164]	@ (8009bd0 <HAL_SPI_Receive_DMA+0x25c>)
 8009b2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b30:	4a28      	ldr	r2, [pc, #160]	@ (8009bd4 <HAL_SPI_Receive_DMA+0x260>)
 8009b32:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b38:	4a27      	ldr	r2, [pc, #156]	@ (8009bd8 <HAL_SPI_Receive_DMA+0x264>)
 8009b3a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b40:	2200      	movs	r2, #0
 8009b42:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	330c      	adds	r3, #12
 8009b4e:	4619      	mov	r1, r3
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b54:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009b5c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009b5e:	f7fa f8ed 	bl	8003d3c <HAL_DMA_Start_IT>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00b      	beq.n	8009b80 <HAL_SPI_Receive_DMA+0x20c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b6c:	f043 0210 	orr.w	r2, r3, #16
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e023      	b.n	8009bc8 <HAL_SPI_Receive_DMA+0x254>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b8a:	2b40      	cmp	r3, #64	@ 0x40
 8009b8c:	d007      	beq.n	8009b9e <HAL_SPI_Receive_DMA+0x22a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b9c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	685a      	ldr	r2, [r3, #4]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f042 0220 	orr.w	r2, r2, #32
 8009bb4:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	685a      	ldr	r2, [r3, #4]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f042 0201 	orr.w	r2, r2, #1
 8009bc4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	0800a70b 	.word	0x0800a70b
 8009bd4:	0800a449 	.word	0x0800a449
 8009bd8:	0800a743 	.word	0x0800a743

08009bdc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b086      	sub	sp, #24
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	60b9      	str	r1, [r7, #8]
 8009be6:	607a      	str	r2, [r7, #4]
 8009be8:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009bf0:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8009bf8:	7dfb      	ldrb	r3, [r7, #23]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d00c      	beq.n	8009c18 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c04:	d106      	bne.n	8009c14 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d102      	bne.n	8009c14 <HAL_SPI_TransmitReceive_DMA+0x38>
 8009c0e:	7dfb      	ldrb	r3, [r7, #23]
 8009c10:	2b04      	cmp	r3, #4
 8009c12:	d001      	beq.n	8009c18 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009c14:	2302      	movs	r3, #2
 8009c16:	e16d      	b.n	8009ef4 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d005      	beq.n	8009c2a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d002      	beq.n	8009c2a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8009c24:	887b      	ldrh	r3, [r7, #2]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d101      	bne.n	8009c2e <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e162      	b.n	8009ef4 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d101      	bne.n	8009c3c <HAL_SPI_TransmitReceive_DMA+0x60>
 8009c38:	2302      	movs	r3, #2
 8009c3a:	e15b      	b.n	8009ef4 <HAL_SPI_TransmitReceive_DMA+0x318>
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2201      	movs	r2, #1
 8009c40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	2b04      	cmp	r3, #4
 8009c4e:	d003      	beq.n	8009c58 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2205      	movs	r2, #5
 8009c54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	68ba      	ldr	r2, [r7, #8]
 8009c62:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	887a      	ldrh	r2, [r7, #2]
 8009c68:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	887a      	ldrh	r2, [r7, #2]
 8009c6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	887a      	ldrh	r2, [r7, #2]
 8009c7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	887a      	ldrh	r2, [r7, #2]
 8009c82:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	651a      	str	r2, [r3, #80]	@ 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c9a:	d10f      	bne.n	8009cbc <HAL_SPI_TransmitReceive_DMA+0xe0>
  {
    SPI_RESET_CRC(hspi);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009caa:	601a      	str	r2, [r3, #0]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009cba:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8009cca:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009cd4:	d908      	bls.n	8009ce8 <HAL_SPI_TransmitReceive_DMA+0x10c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	685a      	ldr	r2, [r3, #4]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009ce4:	605a      	str	r2, [r3, #4]
 8009ce6:	e06f      	b.n	8009dc8 <HAL_SPI_TransmitReceive_DMA+0x1ec>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	685a      	ldr	r2, [r3, #4]
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009cf6:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d02:	d126      	bne.n	8009d52 <HAL_SPI_TransmitReceive_DMA+0x176>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8009d08:	f003 0301 	and.w	r3, r3, #1
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d10f      	bne.n	8009d30 <HAL_SPI_TransmitReceive_DMA+0x154>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	685a      	ldr	r2, [r3, #4]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009d1e:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	085b      	lsrs	r3, r3, #1
 8009d28:	b29a      	uxth	r2, r3
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009d2e:	e010      	b.n	8009d52 <HAL_SPI_TransmitReceive_DMA+0x176>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	685a      	ldr	r2, [r3, #4]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009d3e:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	085b      	lsrs	r3, r3, #1
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	b29a      	uxth	r2, r3
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d5c:	d134      	bne.n	8009dc8 <HAL_SPI_TransmitReceive_DMA+0x1ec>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	685a      	ldr	r2, [r3, #4]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009d6c:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	f003 0301 	and.w	r3, r3, #1
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d111      	bne.n	8009da2 <HAL_SPI_TransmitReceive_DMA+0x1c6>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	685a      	ldr	r2, [r3, #4]
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009d8c:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	085b      	lsrs	r3, r3, #1
 8009d98:	b29a      	uxth	r2, r3
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009da0:	e012      	b.n	8009dc8 <HAL_SPI_TransmitReceive_DMA+0x1ec>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	685a      	ldr	r2, [r3, #4]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009db0:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	085b      	lsrs	r3, r3, #1
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	b29a      	uxth	r2, r3
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	2b04      	cmp	r3, #4
 8009dd2:	d108      	bne.n	8009de6 <HAL_SPI_TransmitReceive_DMA+0x20a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dd8:	4a48      	ldr	r2, [pc, #288]	@ (8009efc <HAL_SPI_TransmitReceive_DMA+0x320>)
 8009dda:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009de0:	4a47      	ldr	r2, [pc, #284]	@ (8009f00 <HAL_SPI_TransmitReceive_DMA+0x324>)
 8009de2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009de4:	e007      	b.n	8009df6 <HAL_SPI_TransmitReceive_DMA+0x21a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dea:	4a46      	ldr	r2, [pc, #280]	@ (8009f04 <HAL_SPI_TransmitReceive_DMA+0x328>)
 8009dec:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009df2:	4a45      	ldr	r2, [pc, #276]	@ (8009f08 <HAL_SPI_TransmitReceive_DMA+0x32c>)
 8009df4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dfa:	4a44      	ldr	r2, [pc, #272]	@ (8009f0c <HAL_SPI_TransmitReceive_DMA+0x330>)
 8009dfc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e02:	2200      	movs	r2, #0
 8009e04:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	330c      	adds	r3, #12
 8009e10:	4619      	mov	r1, r3
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e16:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009e1e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009e20:	f7f9 ff8c 	bl	8003d3c <HAL_DMA_Start_IT>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00b      	beq.n	8009e42 <HAL_SPI_TransmitReceive_DMA+0x266>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e2e:	f043 0210 	orr.w	r2, r3, #16
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e058      	b.n	8009ef4 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	685a      	ldr	r2, [r3, #4]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f042 0201 	orr.w	r2, r2, #1
 8009e50:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e56:	2200      	movs	r2, #0
 8009e58:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e5e:	2200      	movs	r2, #0
 8009e60:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e66:	2200      	movs	r2, #0
 8009e68:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e6e:	2200      	movs	r2, #0
 8009e70:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	330c      	adds	r3, #12
 8009e82:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e88:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009e8a:	f7f9 ff57 	bl	8003d3c <HAL_DMA_Start_IT>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d00b      	beq.n	8009eac <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e98:	f043 0210 	orr.w	r2, r3, #16
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e023      	b.n	8009ef4 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009eb6:	2b40      	cmp	r3, #64	@ 0x40
 8009eb8:	d007      	beq.n	8009eca <HAL_SPI_TransmitReceive_DMA+0x2ee>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ec8:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	685a      	ldr	r2, [r3, #4]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f042 0220 	orr.w	r2, r2, #32
 8009ee0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	685a      	ldr	r2, [r3, #4]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f042 0202 	orr.w	r2, r2, #2
 8009ef0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3718      	adds	r7, #24
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	0800a70b 	.word	0x0800a70b
 8009f00:	0800a449 	.word	0x0800a449
 8009f04:	0800a727 	.word	0x0800a727
 8009f08:	0800a5a9 	.word	0x0800a5a9
 8009f0c:	0800a743 	.word	0x0800a743

08009f10 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b08a      	sub	sp, #40	@ 0x28
 8009f14:	af02      	add	r7, sp, #8
 8009f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8009f1c:	4b88      	ldr	r3, [pc, #544]	@ (800a140 <HAL_SPI_Abort+0x230>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a88      	ldr	r2, [pc, #544]	@ (800a144 <HAL_SPI_Abort+0x234>)
 8009f22:	fba2 2303 	umull	r2, r3, r2, r3
 8009f26:	0a5b      	lsrs	r3, r3, #9
 8009f28:	2264      	movs	r2, #100	@ 0x64
 8009f2a:	fb02 f303 	mul.w	r3, r2, r3
 8009f2e:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	685a      	ldr	r2, [r3, #4]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f022 0220 	bic.w	r2, r2, #32
 8009f42:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f4e:	2b80      	cmp	r3, #128	@ 0x80
 8009f50:	d117      	bne.n	8009f82 <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a7c      	ldr	r2, [pc, #496]	@ (800a148 <HAL_SPI_Abort+0x238>)
 8009f56:	651a      	str	r2, [r3, #80]	@ 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d106      	bne.n	8009f6c <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009f6a:	e008      	b.n	8009f7e <HAL_SPI_Abort+0x6e>
      }
      count--;
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	2b07      	cmp	r3, #7
 8009f7c:	d1ec      	bne.n	8009f58 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f8c:	2b40      	cmp	r3, #64	@ 0x40
 8009f8e:	d117      	bne.n	8009fc0 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4a6e      	ldr	r2, [pc, #440]	@ (800a14c <HAL_SPI_Abort+0x23c>)
 8009f94:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8009f96:	69bb      	ldr	r3, [r7, #24]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d106      	bne.n	8009faa <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fa0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009fa8:	e008      	b.n	8009fbc <HAL_SPI_Abort+0xac>
      }
      count--;
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	3b01      	subs	r3, #1
 8009fae:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	2b07      	cmp	r3, #7
 8009fba:	d1ec      	bne.n	8009f96 <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	f003 0302 	and.w	r3, r3, #2
 8009fca:	2b02      	cmp	r3, #2
 8009fcc:	d141      	bne.n	800a052 <HAL_SPI_Abort+0x142>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d03d      	beq.n	800a052 <HAL_SPI_Abort+0x142>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fda:	2200      	movs	r2, #0
 8009fdc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7f9 ff0a 	bl	8003dfc <HAL_DMA_Abort>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d002      	beq.n	8009ff4 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2240      	movs	r2, #64	@ 0x40
 8009ff2:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	685a      	ldr	r2, [r3, #4]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f022 0202 	bic.w	r2, r2, #2
 800a002:	605a      	str	r2, [r3, #4]

      if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a004:	f7f8 fbfa 	bl	80027fc <HAL_GetTick>
 800a008:	4603      	mov	r3, r0
 800a00a:	461a      	mov	r2, r3
 800a00c:	2164      	movs	r1, #100	@ 0x64
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 fd66 	bl	800aae0 <SPI_EndRxTxTransaction>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d002      	beq.n	800a020 <HAL_SPI_Abort+0x110>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2240      	movs	r2, #64	@ 0x40
 800a01e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable SPI Peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a02e:	601a      	str	r2, [r3, #0]

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800a030:	f7f8 fbe4 	bl	80027fc <HAL_GetTick>
 800a034:	4603      	mov	r3, r0
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	2364      	movs	r3, #100	@ 0x64
 800a03a:	2200      	movs	r2, #0
 800a03c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 fc3b 	bl	800a8bc <SPI_WaitFifoStateUntilTimeout>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d002      	beq.n	800a052 <HAL_SPI_Abort+0x142>
                                        HAL_GetTick()) != HAL_OK)
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2240      	movs	r2, #64	@ 0x40
 800a050:	661a      	str	r2, [r3, #96]	@ 0x60
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	f003 0301 	and.w	r3, r3, #1
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d143      	bne.n	800a0e8 <HAL_SPI_Abort+0x1d8>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a064:	2b00      	cmp	r3, #0
 800a066:	d03f      	beq.n	800a0e8 <HAL_SPI_Abort+0x1d8>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a06c:	2200      	movs	r2, #0
 800a06e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a074:	4618      	mov	r0, r3
 800a076:	f7f9 fec1 	bl	8003dfc <HAL_DMA_Abort>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d002      	beq.n	800a086 <HAL_SPI_Abort+0x176>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2240      	movs	r2, #64	@ 0x40
 800a084:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a094:	601a      	str	r2, [r3, #0]

      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800a096:	f7f8 fbb1 	bl	80027fc <HAL_GetTick>
 800a09a:	4603      	mov	r3, r0
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	2364      	movs	r3, #100	@ 0x64
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	2180      	movs	r1, #128	@ 0x80
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fb81 	bl	800a7ac <SPI_WaitFlagStateUntilTimeout>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d002      	beq.n	800a0b6 <HAL_SPI_Abort+0x1a6>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2240      	movs	r2, #64	@ 0x40
 800a0b4:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800a0b6:	f7f8 fba1 	bl	80027fc <HAL_GetTick>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	2364      	movs	r3, #100	@ 0x64
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 fbf8 	bl	800a8bc <SPI_WaitFifoStateUntilTimeout>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d002      	beq.n	800a0d8 <HAL_SPI_Abort+0x1c8>
                                        HAL_GetTick()) != HAL_OK)
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2240      	movs	r2, #64	@ 0x40
 800a0d6:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	685a      	ldr	r2, [r3, #4]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f022 0201 	bic.w	r2, r2, #1
 800a0e6:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0fa:	2b40      	cmp	r3, #64	@ 0x40
 800a0fc:	d102      	bne.n	800a104 <HAL_SPI_Abort+0x1f4>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 800a0fe:	2301      	movs	r3, #1
 800a100:	77fb      	strb	r3, [r7, #31]
 800a102:	e002      	b.n	800a10a <HAL_SPI_Abort+0x1fa>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a10a:	2300      	movs	r3, #0
 800a10c:	613b      	str	r3, [r7, #16]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	613b      	str	r3, [r7, #16]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	613b      	str	r3, [r7, #16]
 800a11e:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a120:	2300      	movs	r3, #0
 800a122:	60fb      	str	r3, [r7, #12]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	60fb      	str	r3, [r7, #12]
 800a12c:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return errorcode;
 800a136:	7ffb      	ldrb	r3, [r7, #31]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3720      	adds	r7, #32
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	20000000 	.word	0x20000000
 800a144:	057619f1 	.word	0x057619f1
 800a148:	0800ac75 	.word	0x0800ac75
 800a14c:	0800abb5 	.word	0x0800abb5

0800a150 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b088      	sub	sp, #32
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	689b      	ldr	r3, [r3, #8]
 800a166:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a168:	69bb      	ldr	r3, [r7, #24]
 800a16a:	099b      	lsrs	r3, r3, #6
 800a16c:	f003 0301 	and.w	r3, r3, #1
 800a170:	2b00      	cmp	r3, #0
 800a172:	d10f      	bne.n	800a194 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00a      	beq.n	800a194 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	099b      	lsrs	r3, r3, #6
 800a182:	f003 0301 	and.w	r3, r3, #1
 800a186:	2b00      	cmp	r3, #0
 800a188:	d004      	beq.n	800a194 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	4798      	blx	r3
    return;
 800a192:	e0d7      	b.n	800a344 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	085b      	lsrs	r3, r3, #1
 800a198:	f003 0301 	and.w	r3, r3, #1
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d00a      	beq.n	800a1b6 <HAL_SPI_IRQHandler+0x66>
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	09db      	lsrs	r3, r3, #7
 800a1a4:	f003 0301 	and.w	r3, r3, #1
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d004      	beq.n	800a1b6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	4798      	blx	r3
    return;
 800a1b4:	e0c6      	b.n	800a344 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	095b      	lsrs	r3, r3, #5
 800a1ba:	f003 0301 	and.w	r3, r3, #1
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10c      	bne.n	800a1dc <HAL_SPI_IRQHandler+0x8c>
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	099b      	lsrs	r3, r3, #6
 800a1c6:	f003 0301 	and.w	r3, r3, #1
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d106      	bne.n	800a1dc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a1ce:	69bb      	ldr	r3, [r7, #24]
 800a1d0:	0a1b      	lsrs	r3, r3, #8
 800a1d2:	f003 0301 	and.w	r3, r3, #1
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f000 80b4 	beq.w	800a344 <HAL_SPI_IRQHandler+0x1f4>
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	095b      	lsrs	r3, r3, #5
 800a1e0:	f003 0301 	and.w	r3, r3, #1
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f000 80ad 	beq.w	800a344 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	099b      	lsrs	r3, r3, #6
 800a1ee:	f003 0301 	and.w	r3, r3, #1
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d023      	beq.n	800a23e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	2b03      	cmp	r3, #3
 800a200:	d011      	beq.n	800a226 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a206:	f043 0204 	orr.w	r2, r3, #4
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a20e:	2300      	movs	r3, #0
 800a210:	617b      	str	r3, [r7, #20]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	617b      	str	r3, [r7, #20]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	617b      	str	r3, [r7, #20]
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	e00b      	b.n	800a23e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a226:	2300      	movs	r3, #0
 800a228:	613b      	str	r3, [r7, #16]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	613b      	str	r3, [r7, #16]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	613b      	str	r3, [r7, #16]
 800a23a:	693b      	ldr	r3, [r7, #16]
        return;
 800a23c:	e082      	b.n	800a344 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	095b      	lsrs	r3, r3, #5
 800a242:	f003 0301 	and.w	r3, r3, #1
 800a246:	2b00      	cmp	r3, #0
 800a248:	d014      	beq.n	800a274 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a24e:	f043 0201 	orr.w	r2, r3, #1
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a256:	2300      	movs	r3, #0
 800a258:	60fb      	str	r3, [r7, #12]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	60fb      	str	r3, [r7, #12]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a270:	601a      	str	r2, [r3, #0]
 800a272:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	0a1b      	lsrs	r3, r3, #8
 800a278:	f003 0301 	and.w	r3, r3, #1
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00c      	beq.n	800a29a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a284:	f043 0208 	orr.w	r2, r3, #8
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a28c:	2300      	movs	r3, #0
 800a28e:	60bb      	str	r3, [r7, #8]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	60bb      	str	r3, [r7, #8]
 800a298:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d04f      	beq.n	800a342 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	685a      	ldr	r2, [r3, #4]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a2b0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	f003 0302 	and.w	r3, r3, #2
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d104      	bne.n	800a2ce <HAL_SPI_IRQHandler+0x17e>
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	f003 0301 	and.w	r3, r3, #1
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d034      	beq.n	800a338 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	685a      	ldr	r2, [r3, #4]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f022 0203 	bic.w	r2, r2, #3
 800a2dc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d011      	beq.n	800a30a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2ea:	4a18      	ldr	r2, [pc, #96]	@ (800a34c <HAL_SPI_IRQHandler+0x1fc>)
 800a2ec:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f7f9 fdf2 	bl	8003edc <HAL_DMA_Abort_IT>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d005      	beq.n	800a30a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a302:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d016      	beq.n	800a340 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a316:	4a0d      	ldr	r2, [pc, #52]	@ (800a34c <HAL_SPI_IRQHandler+0x1fc>)
 800a318:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a31e:	4618      	mov	r0, r3
 800a320:	f7f9 fddc 	bl	8003edc <HAL_DMA_Abort_IT>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00a      	beq.n	800a340 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a32e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800a336:	e003      	b.n	800a340 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f013 fb89 	bl	801da50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a33e:	e000      	b.n	800a342 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800a340:	bf00      	nop
    return;
 800a342:	bf00      	nop
  }
}
 800a344:	3720      	adds	r7, #32
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	0800a783 	.word	0x0800a783

0800a350 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a358:	bf00      	nop
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a36c:	bf00      	nop
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3ae:	f7f8 fa25 	bl	80027fc <HAL_GetTick>
 800a3b2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3c2:	d03b      	beq.n	800a43c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	685a      	ldr	r2, [r3, #4]
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f022 0220 	bic.w	r2, r2, #32
 800a3d2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	685a      	ldr	r2, [r3, #4]
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f022 0202 	bic.w	r2, r2, #2
 800a3e2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	2164      	movs	r1, #100	@ 0x64
 800a3e8:	6978      	ldr	r0, [r7, #20]
 800a3ea:	f000 fb79 	bl	800aae0 <SPI_EndRxTxTransaction>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d005      	beq.n	800a400 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3f8:	f043 0220 	orr.w	r2, r3, #32
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d10a      	bne.n	800a41e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a408:	2300      	movs	r3, #0
 800a40a:	60fb      	str	r3, [r7, #12]
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	60fb      	str	r3, [r7, #12]
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	60fb      	str	r3, [r7, #12]
 800a41c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	2200      	movs	r2, #0
 800a422:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a430:	2b00      	cmp	r3, #0
 800a432:	d003      	beq.n	800a43c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a434:	6978      	ldr	r0, [r7, #20]
 800a436:	f013 fb0b 	bl	801da50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a43a:	e002      	b.n	800a442 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800a43c:	6978      	ldr	r0, [r7, #20]
 800a43e:	f7ff ff87 	bl	800a350 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a442:	3718      	adds	r7, #24
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b08a      	sub	sp, #40	@ 0x28
 800a44c:	af02      	add	r7, sp, #8
 800a44e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a454:	61fb      	str	r3, [r7, #28]
  uint32_t tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800a456:	2300      	movs	r3, #0
 800a458:	613b      	str	r3, [r7, #16]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a45a:	2300      	movs	r3, #0
 800a45c:	73fb      	strb	r3, [r7, #15]
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a45e:	f7f8 f9cd 	bl	80027fc <HAL_GetTick>
 800a462:	61b8      	str	r0, [r7, #24]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a46e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a472:	f000 8093 	beq.w	800a59c <SPI_DMAReceiveCplt+0x154>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f022 0220 	bic.w	r2, r2, #32
 800a484:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
    /* CRC handling */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a48a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a48e:	d13e      	bne.n	800a50e <SPI_DMAReceiveCplt+0xc6>
    {
      /* Wait until RXNE flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	9300      	str	r3, [sp, #0]
 800a494:	2364      	movs	r3, #100	@ 0x64
 800a496:	2201      	movs	r2, #1
 800a498:	2101      	movs	r1, #1
 800a49a:	69f8      	ldr	r0, [r7, #28]
 800a49c:	f000 f986 	bl	800a7ac <SPI_WaitFlagStateUntilTimeout>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d005      	beq.n	800a4b2 <SPI_DMAReceiveCplt+0x6a>
      {
        /* Error on the CRC reception */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a4a6:	69fb      	ldr	r3, [r7, #28]
 800a4a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4aa:	f043 0202 	orr.w	r2, r3, #2
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      /* Read CRC */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a4ba:	d905      	bls.n	800a4c8 <SPI_DMAReceiveCplt+0x80>
      {
        /* Read 16bit CRC */
        tmpreg = READ_REG(hspi->Instance->DR);
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	613b      	str	r3, [r7, #16]
        /* To avoid GCC warning */
        UNUSED(tmpreg);
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	e022      	b.n	800a50e <SPI_DMAReceiveCplt+0xc6>
      }
      else
      {
        /* Initialize the 8bit temporary pointer */
        ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	330c      	adds	r3, #12
 800a4ce:	617b      	str	r3, [r7, #20]
        /* Read 8bit CRC */
        tmpreg8 = *ptmpreg8;
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	b2db      	uxtb	r3, r3
 800a4d6:	73fb      	strb	r3, [r7, #15]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 800a4d8:	7bfb      	ldrb	r3, [r7, #15]

        if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800a4da:	69fb      	ldr	r3, [r7, #28]
 800a4dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4de:	2b02      	cmp	r3, #2
 800a4e0:	d115      	bne.n	800a50e <SPI_DMAReceiveCplt+0xc6>
        {
          if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	2364      	movs	r3, #100	@ 0x64
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	2101      	movs	r1, #1
 800a4ec:	69f8      	ldr	r0, [r7, #28]
 800a4ee:	f000 f95d 	bl	800a7ac <SPI_WaitFlagStateUntilTimeout>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d005      	beq.n	800a504 <SPI_DMAReceiveCplt+0xbc>
          {
            /* Error on the CRC reception */
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4fc:	f043 0202 	orr.w	r2, r3, #2
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
          tmpreg8 = *ptmpreg8;
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	73fb      	strb	r3, [r7, #15]
          /* To avoid GCC warning */
          UNUSED(tmpreg8);
 800a50c:	7bfb      	ldrb	r3, [r7, #15]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d10d      	bne.n	800a532 <SPI_DMAReceiveCplt+0xea>
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a51e:	d108      	bne.n	800a532 <SPI_DMAReceiveCplt+0xea>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	685a      	ldr	r2, [r3, #4]
 800a526:	69fb      	ldr	r3, [r7, #28]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f022 0203 	bic.w	r2, r2, #3
 800a52e:	605a      	str	r2, [r3, #4]
 800a530:	e007      	b.n	800a542 <SPI_DMAReceiveCplt+0xfa>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	685a      	ldr	r2, [r3, #4]
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f022 0201 	bic.w	r2, r2, #1
 800a540:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a542:	69ba      	ldr	r2, [r7, #24]
 800a544:	2164      	movs	r1, #100	@ 0x64
 800a546:	69f8      	ldr	r0, [r7, #28]
 800a548:	f000 fa4e 	bl	800a9e8 <SPI_EndRxTransaction>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d002      	beq.n	800a558 <SPI_DMAReceiveCplt+0x110>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	2220      	movs	r2, #32
 800a556:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	f003 0310 	and.w	r3, r3, #16
 800a572:	2b10      	cmp	r3, #16
 800a574:	d10a      	bne.n	800a58c <SPI_DMAReceiveCplt+0x144>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a57a:	f043 0202 	orr.w	r2, r3, #2
 800a57e:	69fb      	ldr	r3, [r7, #28]
 800a580:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800a582:	69fb      	ldr	r3, [r7, #28]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800a58a:	609a      	str	r2, [r3, #8]
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a590:	2b00      	cmp	r3, #0
 800a592:	d003      	beq.n	800a59c <SPI_DMAReceiveCplt+0x154>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a594:	69f8      	ldr	r0, [r7, #28]
 800a596:	f013 fa5b 	bl	801da50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a59a:	e002      	b.n	800a5a2 <SPI_DMAReceiveCplt+0x15a>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800a59c:	69f8      	ldr	r0, [r7, #28]
 800a59e:	f013 f985 	bl	801d8ac <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a5a2:	3720      	adds	r7, #32
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b08a      	sub	sp, #40	@ 0x28
 800a5ac:	af02      	add	r7, sp, #8
 800a5ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5b4:	61fb      	str	r3, [r7, #28]
  uint32_t tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	613b      	str	r3, [r7, #16]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	73fb      	strb	r3, [r7, #15]
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a5be:	f7f8 f91d 	bl	80027fc <HAL_GetTick>
 800a5c2:	61b8      	str	r0, [r7, #24]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5d2:	f000 8086 	beq.w	800a6e2 <SPI_DMATransmitReceiveCplt+0x13a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	685a      	ldr	r2, [r3, #4]
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f022 0220 	bic.w	r2, r2, #32
 800a5e4:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
    /* CRC handling */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a5e6:	69fb      	ldr	r3, [r7, #28]
 800a5e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5ee:	d13d      	bne.n	800a66c <SPI_DMATransmitReceiveCplt+0xc4>
    {
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_8BIT))
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a5f8:	d120      	bne.n	800a63c <SPI_DMATransmitReceiveCplt+0x94>
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d11c      	bne.n	800a63c <SPI_DMATransmitReceiveCplt+0x94>
      {
        if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_QUARTER_FULL, SPI_DEFAULT_TIMEOUT,
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	9300      	str	r3, [sp, #0]
 800a606:	2364      	movs	r3, #100	@ 0x64
 800a608:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a60c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a610:	69f8      	ldr	r0, [r7, #28]
 800a612:	f000 f953 	bl	800a8bc <SPI_WaitFifoStateUntilTimeout>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d005      	beq.n	800a628 <SPI_DMATransmitReceiveCplt+0x80>
                                          tickstart) != HAL_OK)
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a620:	f043 0202 	orr.w	r2, r3, #2
 800a624:	69fb      	ldr	r3, [r7, #28]
 800a626:	661a      	str	r2, [r3, #96]	@ 0x60
        }
        /* Initialize the 8bit temporary pointer */
        ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	330c      	adds	r3, #12
 800a62e:	617b      	str	r3, [r7, #20]
        /* Read 8bit CRC */
        tmpreg8 = *ptmpreg8;
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	b2db      	uxtb	r3, r3
 800a636:	73fb      	strb	r3, [r7, #15]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 800a638:	7bfb      	ldrb	r3, [r7, #15]
 800a63a:	e017      	b.n	800a66c <SPI_DMATransmitReceiveCplt+0xc4>
      }
      else
      {
        if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_HALF_FULL, SPI_DEFAULT_TIMEOUT,
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	2364      	movs	r3, #100	@ 0x64
 800a642:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a646:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a64a:	69f8      	ldr	r0, [r7, #28]
 800a64c:	f000 f936 	bl	800a8bc <SPI_WaitFifoStateUntilTimeout>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d005      	beq.n	800a662 <SPI_DMATransmitReceiveCplt+0xba>
                                          tickstart) != HAL_OK)
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a656:	69fb      	ldr	r3, [r7, #28]
 800a658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a65a:	f043 0202 	orr.w	r2, r3, #2
 800a65e:	69fb      	ldr	r3, [r7, #28]
 800a660:	661a      	str	r2, [r3, #96]	@ 0x60
        }
        /* Read CRC to Flush DR and RXNE flag */
        tmpreg = READ_REG(hspi->Instance->DR);
 800a662:	69fb      	ldr	r3, [r7, #28]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	613b      	str	r3, [r7, #16]
        /* To avoid GCC warning */
        UNUSED(tmpreg);
 800a66a:	693b      	ldr	r3, [r7, #16]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a66c:	69ba      	ldr	r2, [r7, #24]
 800a66e:	2164      	movs	r1, #100	@ 0x64
 800a670:	69f8      	ldr	r0, [r7, #28]
 800a672:	f000 fa35 	bl	800aae0 <SPI_EndRxTxTransaction>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d005      	beq.n	800a688 <SPI_DMATransmitReceiveCplt+0xe0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a680:	f043 0220 	orr.w	r2, r3, #32
 800a684:	69fb      	ldr	r3, [r7, #28]
 800a686:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	685a      	ldr	r2, [r3, #4]
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f022 0203 	bic.w	r2, r2, #3
 800a696:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	2200      	movs	r2, #0
 800a69c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800a6a6:	69fb      	ldr	r3, [r7, #28]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

#if (USE_SPI_CRC != 0U)
    /* Check if CRC error occurred */
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800a6ae:	69fb      	ldr	r3, [r7, #28]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	689b      	ldr	r3, [r3, #8]
 800a6b4:	f003 0310 	and.w	r3, r3, #16
 800a6b8:	2b10      	cmp	r3, #16
 800a6ba:	d10a      	bne.n	800a6d2 <SPI_DMATransmitReceiveCplt+0x12a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6c0:	f043 0202 	orr.w	r2, r3, #2
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800a6d0:	609a      	str	r2, [r3, #8]
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a6d2:	69fb      	ldr	r3, [r7, #28]
 800a6d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d003      	beq.n	800a6e2 <SPI_DMATransmitReceiveCplt+0x13a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a6da:	69f8      	ldr	r0, [r7, #28]
 800a6dc:	f013 f9b8 	bl	801da50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a6e0:	e002      	b.n	800a6e8 <SPI_DMATransmitReceiveCplt+0x140>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800a6e2:	69f8      	ldr	r0, [r7, #28]
 800a6e4:	f013 f91e 	bl	801d924 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a6e8:	3720      	adds	r7, #32
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b084      	sub	sp, #16
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6fa:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f7ff fe31 	bl	800a364 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a702:	bf00      	nop
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b084      	sub	sp, #16
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a716:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f7ff fe2d 	bl	800a378 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a71e:	bf00      	nop
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b084      	sub	sp, #16
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a732:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a734:	68f8      	ldr	r0, [r7, #12]
 800a736:	f7ff fe29 	bl	800a38c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a73a:	bf00      	nop
 800a73c:	3710      	adds	r7, #16
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a742:	b580      	push	{r7, lr}
 800a744:	b084      	sub	sp, #16
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a74e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	685a      	ldr	r2, [r3, #4]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f022 0203 	bic.w	r2, r2, #3
 800a75e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a764:	f043 0210 	orr.w	r2, r3, #16
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2201      	movs	r2, #1
 800a770:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f013 f96b 	bl	801da50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a77a:	bf00      	nop
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a782:	b580      	push	{r7, lr}
 800a784:	b084      	sub	sp, #16
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a78e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2200      	movs	r2, #0
 800a79c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f013 f956 	bl	801da50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a7a4:	bf00      	nop
 800a7a6:	3710      	adds	r7, #16
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b088      	sub	sp, #32
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	603b      	str	r3, [r7, #0]
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a7bc:	f7f8 f81e 	bl	80027fc <HAL_GetTick>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c4:	1a9b      	subs	r3, r3, r2
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a7cc:	f7f8 f816 	bl	80027fc <HAL_GetTick>
 800a7d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a7d2:	4b39      	ldr	r3, [pc, #228]	@ (800a8b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	015b      	lsls	r3, r3, #5
 800a7d8:	0d1b      	lsrs	r3, r3, #20
 800a7da:	69fa      	ldr	r2, [r7, #28]
 800a7dc:	fb02 f303 	mul.w	r3, r2, r3
 800a7e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a7e2:	e055      	b.n	800a890 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ea:	d051      	beq.n	800a890 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a7ec:	f7f8 f806 	bl	80027fc <HAL_GetTick>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	69fa      	ldr	r2, [r7, #28]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d902      	bls.n	800a802 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d13d      	bne.n	800a87e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	685a      	ldr	r2, [r3, #4]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a810:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a81a:	d111      	bne.n	800a840 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a824:	d004      	beq.n	800a830 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a82e:	d107      	bne.n	800a840 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a83e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a848:	d10f      	bne.n	800a86a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a858:	601a      	str	r2, [r3, #0]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a868:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2201      	movs	r2, #1
 800a86e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2200      	movs	r2, #0
 800a876:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a87a:	2303      	movs	r3, #3
 800a87c:	e018      	b.n	800a8b0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d102      	bne.n	800a88a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800a884:	2300      	movs	r3, #0
 800a886:	61fb      	str	r3, [r7, #28]
 800a888:	e002      	b.n	800a890 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	3b01      	subs	r3, #1
 800a88e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	689a      	ldr	r2, [r3, #8]
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	4013      	ands	r3, r2
 800a89a:	68ba      	ldr	r2, [r7, #8]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	bf0c      	ite	eq
 800a8a0:	2301      	moveq	r3, #1
 800a8a2:	2300      	movne	r3, #0
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	79fb      	ldrb	r3, [r7, #7]
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d19a      	bne.n	800a7e4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3720      	adds	r7, #32
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	20000000 	.word	0x20000000

0800a8bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b08a      	sub	sp, #40	@ 0x28
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	607a      	str	r2, [r7, #4]
 800a8c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a8ce:	f7f7 ff95 	bl	80027fc <HAL_GetTick>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d6:	1a9b      	subs	r3, r3, r2
 800a8d8:	683a      	ldr	r2, [r7, #0]
 800a8da:	4413      	add	r3, r2
 800a8dc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a8de:	f7f7 ff8d 	bl	80027fc <HAL_GetTick>
 800a8e2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	330c      	adds	r3, #12
 800a8ea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a8ec:	4b3d      	ldr	r3, [pc, #244]	@ (800a9e4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	4613      	mov	r3, r2
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	4413      	add	r3, r2
 800a8f6:	00da      	lsls	r2, r3, #3
 800a8f8:	1ad3      	subs	r3, r2, r3
 800a8fa:	0d1b      	lsrs	r3, r3, #20
 800a8fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8fe:	fb02 f303 	mul.w	r3, r2, r3
 800a902:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a904:	e061      	b.n	800a9ca <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a90c:	d107      	bne.n	800a91e <SPI_WaitFifoStateUntilTimeout+0x62>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d104      	bne.n	800a91e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a91c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a924:	d051      	beq.n	800a9ca <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a926:	f7f7 ff69 	bl	80027fc <HAL_GetTick>
 800a92a:	4602      	mov	r2, r0
 800a92c:	6a3b      	ldr	r3, [r7, #32]
 800a92e:	1ad3      	subs	r3, r2, r3
 800a930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a932:	429a      	cmp	r2, r3
 800a934:	d902      	bls.n	800a93c <SPI_WaitFifoStateUntilTimeout+0x80>
 800a936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d13d      	bne.n	800a9b8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	685a      	ldr	r2, [r3, #4]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a94a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a954:	d111      	bne.n	800a97a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a95e:	d004      	beq.n	800a96a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	689b      	ldr	r3, [r3, #8]
 800a964:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a968:	d107      	bne.n	800a97a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a978:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a97e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a982:	d10f      	bne.n	800a9a4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a992:	601a      	str	r2, [r3, #0]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a9a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a9b4:	2303      	movs	r3, #3
 800a9b6:	e011      	b.n	800a9dc <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a9b8:	69bb      	ldr	r3, [r7, #24]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d102      	bne.n	800a9c4 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9c2:	e002      	b.n	800a9ca <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	689a      	ldr	r2, [r3, #8]
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	4013      	ands	r3, r2
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d195      	bne.n	800a906 <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3728      	adds	r7, #40	@ 0x28
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	20000000 	.word	0x20000000

0800a9e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b088      	sub	sp, #32
 800a9ec:	af02      	add	r7, sp, #8
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a9fc:	d111      	bne.n	800aa22 <SPI_EndRxTransaction+0x3a>
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa06:	d004      	beq.n	800aa12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa10:	d107      	bne.n	800aa22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aa20:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aa2a:	d112      	bne.n	800aa52 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	9300      	str	r3, [sp, #0]
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	2200      	movs	r2, #0
 800aa34:	2180      	movs	r1, #128	@ 0x80
 800aa36:	68f8      	ldr	r0, [r7, #12]
 800aa38:	f7ff feb8 	bl	800a7ac <SPI_WaitFlagStateUntilTimeout>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d021      	beq.n	800aa86 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa46:	f043 0220 	orr.w	r2, r3, #32
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800aa4e:	2303      	movs	r3, #3
 800aa50:	e03d      	b.n	800aace <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800aa52:	4b21      	ldr	r3, [pc, #132]	@ (800aad8 <SPI_EndRxTransaction+0xf0>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a21      	ldr	r2, [pc, #132]	@ (800aadc <SPI_EndRxTransaction+0xf4>)
 800aa58:	fba2 2303 	umull	r2, r3, r2, r3
 800aa5c:	0d5b      	lsrs	r3, r3, #21
 800aa5e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800aa62:	fb02 f303 	mul.w	r3, r2, r3
 800aa66:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00a      	beq.n	800aa84 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	3b01      	subs	r3, #1
 800aa72:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	689b      	ldr	r3, [r3, #8]
 800aa7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa7e:	2b80      	cmp	r3, #128	@ 0x80
 800aa80:	d0f2      	beq.n	800aa68 <SPI_EndRxTransaction+0x80>
 800aa82:	e000      	b.n	800aa86 <SPI_EndRxTransaction+0x9e>
        break;
 800aa84:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aa8e:	d11d      	bne.n	800aacc <SPI_EndRxTransaction+0xe4>
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa98:	d004      	beq.n	800aaa4 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	689b      	ldr	r3, [r3, #8]
 800aa9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aaa2:	d113      	bne.n	800aacc <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	9300      	str	r3, [sp, #0]
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f7ff ff03 	bl	800a8bc <SPI_WaitFifoStateUntilTimeout>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d007      	beq.n	800aacc <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aac0:	f043 0220 	orr.w	r2, r3, #32
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800aac8:	2303      	movs	r3, #3
 800aaca:	e000      	b.n	800aace <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3718      	adds	r7, #24
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	20000000 	.word	0x20000000
 800aadc:	165e9f81 	.word	0x165e9f81

0800aae0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b088      	sub	sp, #32
 800aae4:	af02      	add	r7, sp, #8
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	60b9      	str	r1, [r7, #8]
 800aaea:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	9300      	str	r3, [sp, #0]
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	f7ff fedf 	bl	800a8bc <SPI_WaitFifoStateUntilTimeout>
 800aafe:	4603      	mov	r3, r0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d007      	beq.n	800ab14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab08:	f043 0220 	orr.w	r2, r3, #32
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ab10:	2303      	movs	r3, #3
 800ab12:	e046      	b.n	800aba2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ab14:	4b25      	ldr	r3, [pc, #148]	@ (800abac <SPI_EndRxTxTransaction+0xcc>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a25      	ldr	r2, [pc, #148]	@ (800abb0 <SPI_EndRxTxTransaction+0xd0>)
 800ab1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab1e:	0d5b      	lsrs	r3, r3, #21
 800ab20:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ab24:	fb02 f303 	mul.w	r3, r2, r3
 800ab28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ab32:	d112      	bne.n	800ab5a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	9300      	str	r3, [sp, #0]
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	2180      	movs	r1, #128	@ 0x80
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f7ff fe34 	bl	800a7ac <SPI_WaitFlagStateUntilTimeout>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d016      	beq.n	800ab78 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab4e:	f043 0220 	orr.w	r2, r3, #32
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800ab56:	2303      	movs	r3, #3
 800ab58:	e023      	b.n	800aba2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00a      	beq.n	800ab76 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	3b01      	subs	r3, #1
 800ab64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab70:	2b80      	cmp	r3, #128	@ 0x80
 800ab72:	d0f2      	beq.n	800ab5a <SPI_EndRxTxTransaction+0x7a>
 800ab74:	e000      	b.n	800ab78 <SPI_EndRxTxTransaction+0x98>
        break;
 800ab76:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	9300      	str	r3, [sp, #0]
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ab84:	68f8      	ldr	r0, [r7, #12]
 800ab86:	f7ff fe99 	bl	800a8bc <SPI_WaitFifoStateUntilTimeout>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d007      	beq.n	800aba0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ab94:	f043 0220 	orr.w	r2, r3, #32
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ab9c:	2303      	movs	r3, #3
 800ab9e:	e000      	b.n	800aba2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3718      	adds	r7, #24
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	20000000 	.word	0x20000000
 800abb0:	165e9f81 	.word	0x165e9f81

0800abb4 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b086      	sub	sp, #24
 800abb8:	af02      	add	r7, sp, #8
 800abba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800abca:	601a      	str	r2, [r3, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800abcc:	4b27      	ldr	r3, [pc, #156]	@ (800ac6c <SPI_AbortRx_ISR+0xb8>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a27      	ldr	r2, [pc, #156]	@ (800ac70 <SPI_AbortRx_ISR+0xbc>)
 800abd2:	fba2 2303 	umull	r2, r3, r2, r3
 800abd6:	0a5b      	lsrs	r3, r3, #9
 800abd8:	2264      	movs	r2, #100	@ 0x64
 800abda:	fb02 f303 	mul.w	r3, r2, r3
 800abde:	60fb      	str	r3, [r7, #12]

  /* Disable RXNEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	685a      	ldr	r2, [r3, #4]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800abee:	605a      	str	r2, [r3, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count == 0U)
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d106      	bne.n	800ac04 <SPI_AbortRx_ISR+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800abfa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800ac02:	e009      	b.n	800ac18 <SPI_AbortRx_ISR+0x64>
    }
    count--;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	3b01      	subs	r3, #1
 800ac08:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac14:	2b40      	cmp	r3, #64	@ 0x40
 800ac16:	d0eb      	beq.n	800abf0 <SPI_AbortRx_ISR+0x3c>

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800ac18:	f7f7 fdf0 	bl	80027fc <HAL_GetTick>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	9300      	str	r3, [sp, #0]
 800ac20:	2364      	movs	r3, #100	@ 0x64
 800ac22:	2200      	movs	r2, #0
 800ac24:	2180      	movs	r1, #128	@ 0x80
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f7ff fdc0 	bl	800a7ac <SPI_WaitFlagStateUntilTimeout>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d002      	beq.n	800ac38 <SPI_AbortRx_ISR+0x84>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2240      	movs	r2, #64	@ 0x40
 800ac36:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800ac38:	f7f7 fde0 	bl	80027fc <HAL_GetTick>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	9300      	str	r3, [sp, #0]
 800ac40:	2364      	movs	r3, #100	@ 0x64
 800ac42:	2200      	movs	r2, #0
 800ac44:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f7ff fe37 	bl	800a8bc <SPI_WaitFifoStateUntilTimeout>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d002      	beq.n	800ac5a <SPI_AbortRx_ISR+0xa6>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2240      	movs	r2, #64	@ 0x40
 800ac58:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2207      	movs	r2, #7
 800ac5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 800ac62:	bf00      	nop
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	20000000 	.word	0x20000000
 800ac70:	057619f1 	.word	0x057619f1

0800ac74 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b086      	sub	sp, #24
 800ac78:	af02      	add	r7, sp, #8
 800ac7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800ac7c:	4b4c      	ldr	r3, [pc, #304]	@ (800adb0 <SPI_AbortTx_ISR+0x13c>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a4c      	ldr	r2, [pc, #304]	@ (800adb4 <SPI_AbortTx_ISR+0x140>)
 800ac82:	fba2 2303 	umull	r2, r3, r2, r3
 800ac86:	0a5b      	lsrs	r3, r3, #9
 800ac88:	2264      	movs	r2, #100	@ 0x64
 800ac8a:	fb02 f303 	mul.w	r3, r2, r3
 800ac8e:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	685a      	ldr	r2, [r3, #4]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ac9e:	605a      	str	r2, [r3, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count == 0U)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d106      	bne.n	800acb4 <SPI_AbortTx_ISR+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acaa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800acb2:	e009      	b.n	800acc8 <SPI_AbortTx_ISR+0x54>
    }
    count--;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	3b01      	subs	r3, #1
 800acb8:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acc4:	2b80      	cmp	r3, #128	@ 0x80
 800acc6:	d0eb      	beq.n	800aca0 <SPI_AbortTx_ISR+0x2c>

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800acc8:	f7f7 fd98 	bl	80027fc <HAL_GetTick>
 800accc:	4603      	mov	r3, r0
 800acce:	461a      	mov	r2, r3
 800acd0:	2164      	movs	r1, #100	@ 0x64
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f7ff ff04 	bl	800aae0 <SPI_EndRxTxTransaction>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d002      	beq.n	800ace4 <SPI_AbortTx_ISR+0x70>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2240      	movs	r2, #64	@ 0x40
 800ace2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800acf2:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800acf4:	f7f7 fd82 	bl	80027fc <HAL_GetTick>
 800acf8:	4603      	mov	r3, r0
 800acfa:	9300      	str	r3, [sp, #0]
 800acfc:	2364      	movs	r3, #100	@ 0x64
 800acfe:	2200      	movs	r2, #0
 800ad00:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f7ff fdd9 	bl	800a8bc <SPI_WaitFifoStateUntilTimeout>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d002      	beq.n	800ad16 <SPI_AbortTx_ISR+0xa2>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2240      	movs	r2, #64	@ 0x40
 800ad14:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Check case of Full-Duplex Mode and disable directly RXNEIE interrupt */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad20:	2b40      	cmp	r3, #64	@ 0x40
 800ad22:	d13c      	bne.n	800ad9e <SPI_AbortTx_ISR+0x12a>
  {
    /* Disable RXNEIE interrupt */
    CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	685a      	ldr	r2, [r3, #4]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ad32:	605a      	str	r2, [r3, #4]

    /* Check RXNEIE is disabled */
    do
    {
      if (count == 0U)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d106      	bne.n	800ad48 <SPI_AbortTx_ISR+0xd4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ad3e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800ad46:	e009      	b.n	800ad5c <SPI_AbortTx_ISR+0xe8>
      }
      count--;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	60fb      	str	r3, [r7, #12]
    } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad58:	2b40      	cmp	r3, #64	@ 0x40
 800ad5a:	d0eb      	beq.n	800ad34 <SPI_AbortTx_ISR+0xc0>

    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800ad5c:	f7f7 fd4e 	bl	80027fc <HAL_GetTick>
 800ad60:	4603      	mov	r3, r0
 800ad62:	9300      	str	r3, [sp, #0]
 800ad64:	2364      	movs	r3, #100	@ 0x64
 800ad66:	2200      	movs	r2, #0
 800ad68:	2180      	movs	r1, #128	@ 0x80
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f7ff fd1e 	bl	800a7ac <SPI_WaitFlagStateUntilTimeout>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d002      	beq.n	800ad7c <SPI_AbortTx_ISR+0x108>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2240      	movs	r2, #64	@ 0x40
 800ad7a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800ad7c:	f7f7 fd3e 	bl	80027fc <HAL_GetTick>
 800ad80:	4603      	mov	r3, r0
 800ad82:	9300      	str	r3, [sp, #0]
 800ad84:	2364      	movs	r3, #100	@ 0x64
 800ad86:	2200      	movs	r2, #0
 800ad88:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f7ff fd95 	bl	800a8bc <SPI_WaitFifoStateUntilTimeout>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d002      	beq.n	800ad9e <SPI_AbortTx_ISR+0x12a>
                                      HAL_GetTick()) != HAL_OK)
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2240      	movs	r2, #64	@ 0x40
 800ad9c:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }
  hspi->State = HAL_SPI_STATE_ABORT;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2207      	movs	r2, #7
 800ada2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 800ada6:	bf00      	nop
 800ada8:	3710      	adds	r7, #16
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	20000000 	.word	0x20000000
 800adb4:	057619f1 	.word	0x057619f1

0800adb8 <HAL_SPIEx_FlushRxFifo>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(const SPI_HandleTypeDef *hspi)
{
 800adb8:	b480      	push	{r7}
 800adba:	b085      	sub	sp, #20
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
 800adc0:	2300      	movs	r3, #0
 800adc2:	73fb      	strb	r3, [r7, #15]
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800adc4:	e00c      	b.n	800ade0 <HAL_SPIEx_FlushRxFifo+0x28>
  {
    count++;
 800adc6:	7bfb      	ldrb	r3, [r7, #15]
 800adc8:	3301      	adds	r3, #1
 800adca:	73fb      	strb	r3, [r7, #15]
    tmpreg = hspi->Instance->DR;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	60bb      	str	r3, [r7, #8]
    UNUSED(tmpreg); /* To avoid GCC warning */
 800add4:	68bb      	ldr	r3, [r7, #8]
    if (count == SPI_FIFO_SIZE)
 800add6:	7bfb      	ldrb	r3, [r7, #15]
 800add8:	2b04      	cmp	r3, #4
 800adda:	d101      	bne.n	800ade0 <HAL_SPIEx_FlushRxFifo+0x28>
    {
      return HAL_TIMEOUT;
 800addc:	2303      	movs	r3, #3
 800adde:	e007      	b.n	800adf0 <HAL_SPIEx_FlushRxFifo+0x38>
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800adea:	2b00      	cmp	r3, #0
 800adec:	d1eb      	bne.n	800adc6 <HAL_SPIEx_FlushRxFifo+0xe>
    }
  }
  return HAL_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3714      	adds	r7, #20
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d101      	bne.n	800ae0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e049      	b.n	800aea2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d106      	bne.n	800ae28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f7f6 fede 	bl	8001be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2202      	movs	r2, #2
 800ae2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	3304      	adds	r3, #4
 800ae38:	4619      	mov	r1, r3
 800ae3a:	4610      	mov	r0, r2
 800ae3c:	f000 fa0e 	bl	800b25c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2201      	movs	r2, #1
 800ae54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2201      	movs	r2, #1
 800ae64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2201      	movs	r2, #1
 800ae74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2201      	movs	r2, #1
 800ae84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2201      	movs	r2, #1
 800ae94:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aea0:	2300      	movs	r3, #0
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3708      	adds	r7, #8
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
	...

0800aeac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d001      	beq.n	800aec4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aec0:	2301      	movs	r3, #1
 800aec2:	e054      	b.n	800af6e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2202      	movs	r2, #2
 800aec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	68da      	ldr	r2, [r3, #12]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f042 0201 	orr.w	r2, r2, #1
 800aeda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a26      	ldr	r2, [pc, #152]	@ (800af7c <HAL_TIM_Base_Start_IT+0xd0>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d022      	beq.n	800af2c <HAL_TIM_Base_Start_IT+0x80>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aeee:	d01d      	beq.n	800af2c <HAL_TIM_Base_Start_IT+0x80>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a22      	ldr	r2, [pc, #136]	@ (800af80 <HAL_TIM_Base_Start_IT+0xd4>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d018      	beq.n	800af2c <HAL_TIM_Base_Start_IT+0x80>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a21      	ldr	r2, [pc, #132]	@ (800af84 <HAL_TIM_Base_Start_IT+0xd8>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d013      	beq.n	800af2c <HAL_TIM_Base_Start_IT+0x80>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a1f      	ldr	r2, [pc, #124]	@ (800af88 <HAL_TIM_Base_Start_IT+0xdc>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d00e      	beq.n	800af2c <HAL_TIM_Base_Start_IT+0x80>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4a1e      	ldr	r2, [pc, #120]	@ (800af8c <HAL_TIM_Base_Start_IT+0xe0>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d009      	beq.n	800af2c <HAL_TIM_Base_Start_IT+0x80>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a1c      	ldr	r2, [pc, #112]	@ (800af90 <HAL_TIM_Base_Start_IT+0xe4>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d004      	beq.n	800af2c <HAL_TIM_Base_Start_IT+0x80>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4a1b      	ldr	r2, [pc, #108]	@ (800af94 <HAL_TIM_Base_Start_IT+0xe8>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d115      	bne.n	800af58 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	689a      	ldr	r2, [r3, #8]
 800af32:	4b19      	ldr	r3, [pc, #100]	@ (800af98 <HAL_TIM_Base_Start_IT+0xec>)
 800af34:	4013      	ands	r3, r2
 800af36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2b06      	cmp	r3, #6
 800af3c:	d015      	beq.n	800af6a <HAL_TIM_Base_Start_IT+0xbe>
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af44:	d011      	beq.n	800af6a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f042 0201 	orr.w	r2, r2, #1
 800af54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af56:	e008      	b.n	800af6a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	681a      	ldr	r2, [r3, #0]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f042 0201 	orr.w	r2, r2, #1
 800af66:	601a      	str	r2, [r3, #0]
 800af68:	e000      	b.n	800af6c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3714      	adds	r7, #20
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop
 800af7c:	40010000 	.word	0x40010000
 800af80:	40000400 	.word	0x40000400
 800af84:	40000800 	.word	0x40000800
 800af88:	40000c00 	.word	0x40000c00
 800af8c:	40010400 	.word	0x40010400
 800af90:	40014000 	.word	0x40014000
 800af94:	40001800 	.word	0x40001800
 800af98:	00010007 	.word	0x00010007

0800af9c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68da      	ldr	r2, [r3, #12]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f022 0201 	bic.w	r2, r2, #1
 800afb2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	6a1a      	ldr	r2, [r3, #32]
 800afba:	4b0f      	ldr	r3, [pc, #60]	@ (800aff8 <HAL_TIM_Base_Stop_IT+0x5c>)
 800afbc:	4013      	ands	r3, r2
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10f      	bne.n	800afe2 <HAL_TIM_Base_Stop_IT+0x46>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	6a1a      	ldr	r2, [r3, #32]
 800afc8:	f240 4344 	movw	r3, #1092	@ 0x444
 800afcc:	4013      	ands	r3, r2
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d107      	bne.n	800afe2 <HAL_TIM_Base_Stop_IT+0x46>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f022 0201 	bic.w	r2, r2, #1
 800afe0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2201      	movs	r2, #1
 800afe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800afea:	2300      	movs	r3, #0
}
 800afec:	4618      	mov	r0, r3
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr
 800aff8:	00111111 	.word	0x00111111

0800affc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	f003 0302 	and.w	r3, r3, #2
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d020      	beq.n	800b060 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f003 0302 	and.w	r3, r3, #2
 800b024:	2b00      	cmp	r3, #0
 800b026:	d01b      	beq.n	800b060 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f06f 0202 	mvn.w	r2, #2
 800b030:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2201      	movs	r2, #1
 800b036:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	699b      	ldr	r3, [r3, #24]
 800b03e:	f003 0303 	and.w	r3, r3, #3
 800b042:	2b00      	cmp	r3, #0
 800b044:	d003      	beq.n	800b04e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 f8e9 	bl	800b21e <HAL_TIM_IC_CaptureCallback>
 800b04c:	e005      	b.n	800b05a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 f8db 	bl	800b20a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 f8ec 	bl	800b232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2200      	movs	r2, #0
 800b05e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	f003 0304 	and.w	r3, r3, #4
 800b066:	2b00      	cmp	r3, #0
 800b068:	d020      	beq.n	800b0ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f003 0304 	and.w	r3, r3, #4
 800b070:	2b00      	cmp	r3, #0
 800b072:	d01b      	beq.n	800b0ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f06f 0204 	mvn.w	r2, #4
 800b07c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2202      	movs	r2, #2
 800b082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	699b      	ldr	r3, [r3, #24]
 800b08a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d003      	beq.n	800b09a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 f8c3 	bl	800b21e <HAL_TIM_IC_CaptureCallback>
 800b098:	e005      	b.n	800b0a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 f8b5 	bl	800b20a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 f8c6 	bl	800b232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	f003 0308 	and.w	r3, r3, #8
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d020      	beq.n	800b0f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	f003 0308 	and.w	r3, r3, #8
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d01b      	beq.n	800b0f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f06f 0208 	mvn.w	r2, #8
 800b0c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2204      	movs	r2, #4
 800b0ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	69db      	ldr	r3, [r3, #28]
 800b0d6:	f003 0303 	and.w	r3, r3, #3
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d003      	beq.n	800b0e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 f89d 	bl	800b21e <HAL_TIM_IC_CaptureCallback>
 800b0e4:	e005      	b.n	800b0f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 f88f 	bl	800b20a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 f8a0 	bl	800b232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	f003 0310 	and.w	r3, r3, #16
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d020      	beq.n	800b144 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f003 0310 	and.w	r3, r3, #16
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d01b      	beq.n	800b144 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f06f 0210 	mvn.w	r2, #16
 800b114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2208      	movs	r2, #8
 800b11a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	69db      	ldr	r3, [r3, #28]
 800b122:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b126:	2b00      	cmp	r3, #0
 800b128:	d003      	beq.n	800b132 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 f877 	bl	800b21e <HAL_TIM_IC_CaptureCallback>
 800b130:	e005      	b.n	800b13e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 f869 	bl	800b20a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f000 f87a 	bl	800b232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	f003 0301 	and.w	r3, r3, #1
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00c      	beq.n	800b168 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f003 0301 	and.w	r3, r3, #1
 800b154:	2b00      	cmp	r3, #0
 800b156:	d007      	beq.n	800b168 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f06f 0201 	mvn.w	r2, #1
 800b160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f7f6 f930 	bl	80013c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d104      	bne.n	800b17c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d00c      	beq.n	800b196 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b182:	2b00      	cmp	r3, #0
 800b184:	d007      	beq.n	800b196 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b18e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 f9a1 	bl	800b4d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00c      	beq.n	800b1ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d007      	beq.n	800b1ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b1b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f000 f999 	bl	800b4ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d00c      	beq.n	800b1de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d007      	beq.n	800b1de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b1d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 f834 	bl	800b246 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	f003 0320 	and.w	r3, r3, #32
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d00c      	beq.n	800b202 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f003 0320 	and.w	r3, r3, #32
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d007      	beq.n	800b202 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f06f 0220 	mvn.w	r2, #32
 800b1fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 f961 	bl	800b4c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b202:	bf00      	nop
 800b204:	3710      	adds	r7, #16
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b20a:	b480      	push	{r7}
 800b20c:	b083      	sub	sp, #12
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b212:	bf00      	nop
 800b214:	370c      	adds	r7, #12
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr

0800b21e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b21e:	b480      	push	{r7}
 800b220:	b083      	sub	sp, #12
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b226:	bf00      	nop
 800b228:	370c      	adds	r7, #12
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr

0800b232 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b232:	b480      	push	{r7}
 800b234:	b083      	sub	sp, #12
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b23a:	bf00      	nop
 800b23c:	370c      	adds	r7, #12
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr

0800b246 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b246:	b480      	push	{r7}
 800b248:	b083      	sub	sp, #12
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b24e:	bf00      	nop
 800b250:	370c      	adds	r7, #12
 800b252:	46bd      	mov	sp, r7
 800b254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b258:	4770      	bx	lr
	...

0800b25c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	4a43      	ldr	r2, [pc, #268]	@ (800b37c <TIM_Base_SetConfig+0x120>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d013      	beq.n	800b29c <TIM_Base_SetConfig+0x40>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b27a:	d00f      	beq.n	800b29c <TIM_Base_SetConfig+0x40>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a40      	ldr	r2, [pc, #256]	@ (800b380 <TIM_Base_SetConfig+0x124>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d00b      	beq.n	800b29c <TIM_Base_SetConfig+0x40>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	4a3f      	ldr	r2, [pc, #252]	@ (800b384 <TIM_Base_SetConfig+0x128>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d007      	beq.n	800b29c <TIM_Base_SetConfig+0x40>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4a3e      	ldr	r2, [pc, #248]	@ (800b388 <TIM_Base_SetConfig+0x12c>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d003      	beq.n	800b29c <TIM_Base_SetConfig+0x40>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	4a3d      	ldr	r2, [pc, #244]	@ (800b38c <TIM_Base_SetConfig+0x130>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d108      	bne.n	800b2ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	68fa      	ldr	r2, [r7, #12]
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a32      	ldr	r2, [pc, #200]	@ (800b37c <TIM_Base_SetConfig+0x120>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d02b      	beq.n	800b30e <TIM_Base_SetConfig+0xb2>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2bc:	d027      	beq.n	800b30e <TIM_Base_SetConfig+0xb2>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a2f      	ldr	r2, [pc, #188]	@ (800b380 <TIM_Base_SetConfig+0x124>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d023      	beq.n	800b30e <TIM_Base_SetConfig+0xb2>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a2e      	ldr	r2, [pc, #184]	@ (800b384 <TIM_Base_SetConfig+0x128>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d01f      	beq.n	800b30e <TIM_Base_SetConfig+0xb2>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a2d      	ldr	r2, [pc, #180]	@ (800b388 <TIM_Base_SetConfig+0x12c>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d01b      	beq.n	800b30e <TIM_Base_SetConfig+0xb2>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4a2c      	ldr	r2, [pc, #176]	@ (800b38c <TIM_Base_SetConfig+0x130>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d017      	beq.n	800b30e <TIM_Base_SetConfig+0xb2>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a2b      	ldr	r2, [pc, #172]	@ (800b390 <TIM_Base_SetConfig+0x134>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d013      	beq.n	800b30e <TIM_Base_SetConfig+0xb2>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4a2a      	ldr	r2, [pc, #168]	@ (800b394 <TIM_Base_SetConfig+0x138>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d00f      	beq.n	800b30e <TIM_Base_SetConfig+0xb2>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	4a29      	ldr	r2, [pc, #164]	@ (800b398 <TIM_Base_SetConfig+0x13c>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d00b      	beq.n	800b30e <TIM_Base_SetConfig+0xb2>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4a28      	ldr	r2, [pc, #160]	@ (800b39c <TIM_Base_SetConfig+0x140>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d007      	beq.n	800b30e <TIM_Base_SetConfig+0xb2>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4a27      	ldr	r2, [pc, #156]	@ (800b3a0 <TIM_Base_SetConfig+0x144>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d003      	beq.n	800b30e <TIM_Base_SetConfig+0xb2>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4a26      	ldr	r2, [pc, #152]	@ (800b3a4 <TIM_Base_SetConfig+0x148>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d108      	bne.n	800b320 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b314:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	68db      	ldr	r3, [r3, #12]
 800b31a:	68fa      	ldr	r2, [r7, #12]
 800b31c:	4313      	orrs	r3, r2
 800b31e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	695b      	ldr	r3, [r3, #20]
 800b32a:	4313      	orrs	r3, r2
 800b32c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	689a      	ldr	r2, [r3, #8]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	4a0e      	ldr	r2, [pc, #56]	@ (800b37c <TIM_Base_SetConfig+0x120>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d003      	beq.n	800b34e <TIM_Base_SetConfig+0xf2>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	4a10      	ldr	r2, [pc, #64]	@ (800b38c <TIM_Base_SetConfig+0x130>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d103      	bne.n	800b356 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	691a      	ldr	r2, [r3, #16]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f043 0204 	orr.w	r2, r3, #4
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2201      	movs	r2, #1
 800b366:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	68fa      	ldr	r2, [r7, #12]
 800b36c:	601a      	str	r2, [r3, #0]
}
 800b36e:	bf00      	nop
 800b370:	3714      	adds	r7, #20
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	40010000 	.word	0x40010000
 800b380:	40000400 	.word	0x40000400
 800b384:	40000800 	.word	0x40000800
 800b388:	40000c00 	.word	0x40000c00
 800b38c:	40010400 	.word	0x40010400
 800b390:	40014000 	.word	0x40014000
 800b394:	40014400 	.word	0x40014400
 800b398:	40014800 	.word	0x40014800
 800b39c:	40001800 	.word	0x40001800
 800b3a0:	40001c00 	.word	0x40001c00
 800b3a4:	40002000 	.word	0x40002000

0800b3a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b085      	sub	sp, #20
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b3b8:	2b01      	cmp	r3, #1
 800b3ba:	d101      	bne.n	800b3c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b3bc:	2302      	movs	r3, #2
 800b3be:	e06d      	b.n	800b49c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2202      	movs	r2, #2
 800b3cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	689b      	ldr	r3, [r3, #8]
 800b3de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a30      	ldr	r2, [pc, #192]	@ (800b4a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d004      	beq.n	800b3f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4a2f      	ldr	r2, [pc, #188]	@ (800b4ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d108      	bne.n	800b406 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b3fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	4313      	orrs	r3, r2
 800b404:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b40c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	68fa      	ldr	r2, [r7, #12]
 800b414:	4313      	orrs	r3, r2
 800b416:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a20      	ldr	r2, [pc, #128]	@ (800b4a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d022      	beq.n	800b470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b432:	d01d      	beq.n	800b470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a1d      	ldr	r2, [pc, #116]	@ (800b4b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d018      	beq.n	800b470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	4a1c      	ldr	r2, [pc, #112]	@ (800b4b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d013      	beq.n	800b470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4a1a      	ldr	r2, [pc, #104]	@ (800b4b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d00e      	beq.n	800b470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a15      	ldr	r2, [pc, #84]	@ (800b4ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d009      	beq.n	800b470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a16      	ldr	r2, [pc, #88]	@ (800b4bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d004      	beq.n	800b470 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a15      	ldr	r2, [pc, #84]	@ (800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d10c      	bne.n	800b48a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b476:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	68ba      	ldr	r2, [r7, #8]
 800b47e:	4313      	orrs	r3, r2
 800b480:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	68ba      	ldr	r2, [r7, #8]
 800b488:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2201      	movs	r2, #1
 800b48e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2200      	movs	r2, #0
 800b496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3714      	adds	r7, #20
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr
 800b4a8:	40010000 	.word	0x40010000
 800b4ac:	40010400 	.word	0x40010400
 800b4b0:	40000400 	.word	0x40000400
 800b4b4:	40000800 	.word	0x40000800
 800b4b8:	40000c00 	.word	0x40000c00
 800b4bc:	40014000 	.word	0x40014000
 800b4c0:	40001800 	.word	0x40001800

0800b4c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b083      	sub	sp, #12
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b4cc:	bf00      	nop
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b083      	sub	sp, #12
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b4e0:	bf00      	nop
 800b4e2:	370c      	adds	r7, #12
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ea:	4770      	bx	lr

0800b4ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b4f4:	bf00      	nop
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d101      	bne.n	800b512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b50e:	2301      	movs	r3, #1
 800b510:	e040      	b.n	800b594 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b516:	2b00      	cmp	r3, #0
 800b518:	d106      	bne.n	800b528 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f7f6 fb84 	bl	8001c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2224      	movs	r2, #36	@ 0x24
 800b52c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	681a      	ldr	r2, [r3, #0]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f022 0201 	bic.w	r2, r2, #1
 800b53c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b542:	2b00      	cmp	r3, #0
 800b544:	d002      	beq.n	800b54c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f001 f888 	bl	800c65c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 fe21 	bl	800c194 <UART_SetConfig>
 800b552:	4603      	mov	r3, r0
 800b554:	2b01      	cmp	r3, #1
 800b556:	d101      	bne.n	800b55c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800b558:	2301      	movs	r3, #1
 800b55a:	e01b      	b.n	800b594 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	685a      	ldr	r2, [r3, #4]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b56a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	689a      	ldr	r2, [r3, #8]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b57a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f042 0201 	orr.w	r2, r2, #1
 800b58a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f001 f907 	bl	800c7a0 <UART_CheckIdleState>
 800b592:	4603      	mov	r3, r0
}
 800b594:	4618      	mov	r0, r3
 800b596:	3708      	adds	r7, #8
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b08a      	sub	sp, #40	@ 0x28
 800b5a0:	af02      	add	r7, sp, #8
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	603b      	str	r3, [r7, #0]
 800b5a8:	4613      	mov	r3, r2
 800b5aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b5b0:	2b20      	cmp	r3, #32
 800b5b2:	d177      	bne.n	800b6a4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d002      	beq.n	800b5c0 <HAL_UART_Transmit+0x24>
 800b5ba:	88fb      	ldrh	r3, [r7, #6]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d101      	bne.n	800b5c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	e070      	b.n	800b6a6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2221      	movs	r2, #33	@ 0x21
 800b5d0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b5d2:	f7f7 f913 	bl	80027fc <HAL_GetTick>
 800b5d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	88fa      	ldrh	r2, [r7, #6]
 800b5dc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	88fa      	ldrh	r2, [r7, #6]
 800b5e4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b5f0:	d108      	bne.n	800b604 <HAL_UART_Transmit+0x68>
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	691b      	ldr	r3, [r3, #16]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d104      	bne.n	800b604 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	61bb      	str	r3, [r7, #24]
 800b602:	e003      	b.n	800b60c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b608:	2300      	movs	r3, #0
 800b60a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b60c:	e02f      	b.n	800b66e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	9300      	str	r3, [sp, #0]
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	2200      	movs	r2, #0
 800b616:	2180      	movs	r1, #128	@ 0x80
 800b618:	68f8      	ldr	r0, [r7, #12]
 800b61a:	f001 f918 	bl	800c84e <UART_WaitOnFlagUntilTimeout>
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d004      	beq.n	800b62e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2220      	movs	r2, #32
 800b628:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800b62a:	2303      	movs	r3, #3
 800b62c:	e03b      	b.n	800b6a6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800b62e:	69fb      	ldr	r3, [r7, #28]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d10b      	bne.n	800b64c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	881b      	ldrh	r3, [r3, #0]
 800b638:	461a      	mov	r2, r3
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b642:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	3302      	adds	r3, #2
 800b648:	61bb      	str	r3, [r7, #24]
 800b64a:	e007      	b.n	800b65c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	781a      	ldrb	r2, [r3, #0]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b656:	69fb      	ldr	r3, [r7, #28]
 800b658:	3301      	adds	r3, #1
 800b65a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b662:	b29b      	uxth	r3, r3
 800b664:	3b01      	subs	r3, #1
 800b666:	b29a      	uxth	r2, r3
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b674:	b29b      	uxth	r3, r3
 800b676:	2b00      	cmp	r3, #0
 800b678:	d1c9      	bne.n	800b60e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	9300      	str	r3, [sp, #0]
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	2200      	movs	r2, #0
 800b682:	2140      	movs	r1, #64	@ 0x40
 800b684:	68f8      	ldr	r0, [r7, #12]
 800b686:	f001 f8e2 	bl	800c84e <UART_WaitOnFlagUntilTimeout>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d004      	beq.n	800b69a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2220      	movs	r2, #32
 800b694:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800b696:	2303      	movs	r3, #3
 800b698:	e005      	b.n	800b6a6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2220      	movs	r2, #32
 800b69e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	e000      	b.n	800b6a6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800b6a4:	2302      	movs	r3, #2
  }
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3720      	adds	r7, #32
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
	...

0800b6b0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b6b0:	b480      	push	{r7}
 800b6b2:	b08b      	sub	sp, #44	@ 0x2c
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b6c2:	2b20      	cmp	r3, #32
 800b6c4:	d147      	bne.n	800b756 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d002      	beq.n	800b6d2 <HAL_UART_Transmit_IT+0x22>
 800b6cc:	88fb      	ldrh	r3, [r7, #6]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d101      	bne.n	800b6d6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e040      	b.n	800b758 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	68ba      	ldr	r2, [r7, #8]
 800b6da:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	88fa      	ldrh	r2, [r7, #6]
 800b6e0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	88fa      	ldrh	r2, [r7, #6]
 800b6e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2221      	movs	r2, #33	@ 0x21
 800b6fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	689b      	ldr	r3, [r3, #8]
 800b704:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b708:	d107      	bne.n	800b71a <HAL_UART_Transmit_IT+0x6a>
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	691b      	ldr	r3, [r3, #16]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d103      	bne.n	800b71a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	4a13      	ldr	r2, [pc, #76]	@ (800b764 <HAL_UART_Transmit_IT+0xb4>)
 800b716:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b718:	e002      	b.n	800b720 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	4a12      	ldr	r2, [pc, #72]	@ (800b768 <HAL_UART_Transmit_IT+0xb8>)
 800b71e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	e853 3f00 	ldrex	r3, [r3]
 800b72c:	613b      	str	r3, [r7, #16]
   return(result);
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b734:	627b      	str	r3, [r7, #36]	@ 0x24
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	461a      	mov	r2, r3
 800b73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b73e:	623b      	str	r3, [r7, #32]
 800b740:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b742:	69f9      	ldr	r1, [r7, #28]
 800b744:	6a3a      	ldr	r2, [r7, #32]
 800b746:	e841 2300 	strex	r3, r2, [r1]
 800b74a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d1e6      	bne.n	800b720 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800b752:	2300      	movs	r3, #0
 800b754:	e000      	b.n	800b758 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800b756:	2302      	movs	r3, #2
  }
}
 800b758:	4618      	mov	r0, r3
 800b75a:	372c      	adds	r7, #44	@ 0x2c
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr
 800b764:	0800d0e3 	.word	0x0800d0e3
 800b768:	0800d02d 	.word	0x0800d02d

0800b76c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b08a      	sub	sp, #40	@ 0x28
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	60b9      	str	r1, [r7, #8]
 800b776:	4613      	mov	r3, r2
 800b778:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b780:	2b20      	cmp	r3, #32
 800b782:	d132      	bne.n	800b7ea <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d002      	beq.n	800b790 <HAL_UART_Receive_IT+0x24>
 800b78a:	88fb      	ldrh	r3, [r7, #6]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d101      	bne.n	800b794 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b790:	2301      	movs	r3, #1
 800b792:	e02b      	b.n	800b7ec <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2200      	movs	r2, #0
 800b798:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d018      	beq.n	800b7da <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	e853 3f00 	ldrex	r3, [r3]
 800b7b4:	613b      	str	r3, [r7, #16]
   return(result);
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b7bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c6:	623b      	str	r3, [r7, #32]
 800b7c8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ca:	69f9      	ldr	r1, [r7, #28]
 800b7cc:	6a3a      	ldr	r2, [r7, #32]
 800b7ce:	e841 2300 	strex	r3, r2, [r1]
 800b7d2:	61bb      	str	r3, [r7, #24]
   return(result);
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d1e6      	bne.n	800b7a8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b7da:	88fb      	ldrh	r3, [r7, #6]
 800b7dc:	461a      	mov	r2, r3
 800b7de:	68b9      	ldr	r1, [r7, #8]
 800b7e0:	68f8      	ldr	r0, [r7, #12]
 800b7e2:	f001 f8a1 	bl	800c928 <UART_Start_Receive_IT>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	e000      	b.n	800b7ec <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800b7ea:	2302      	movs	r3, #2
  }
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3728      	adds	r7, #40	@ 0x28
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b08a      	sub	sp, #40	@ 0x28
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	60f8      	str	r0, [r7, #12]
 800b7fc:	60b9      	str	r1, [r7, #8]
 800b7fe:	4613      	mov	r3, r2
 800b800:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b806:	2b20      	cmp	r3, #32
 800b808:	d165      	bne.n	800b8d6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d002      	beq.n	800b816 <HAL_UART_Transmit_DMA+0x22>
 800b810:	88fb      	ldrh	r3, [r7, #6]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d101      	bne.n	800b81a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800b816:	2301      	movs	r3, #1
 800b818:	e05e      	b.n	800b8d8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	68ba      	ldr	r2, [r7, #8]
 800b81e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	88fa      	ldrh	r2, [r7, #6]
 800b824:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	88fa      	ldrh	r2, [r7, #6]
 800b82c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2200      	movs	r2, #0
 800b834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2221      	movs	r2, #33	@ 0x21
 800b83c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b842:	2b00      	cmp	r3, #0
 800b844:	d027      	beq.n	800b896 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b84a:	4a25      	ldr	r2, [pc, #148]	@ (800b8e0 <HAL_UART_Transmit_DMA+0xec>)
 800b84c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b852:	4a24      	ldr	r2, [pc, #144]	@ (800b8e4 <HAL_UART_Transmit_DMA+0xf0>)
 800b854:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b85a:	4a23      	ldr	r2, [pc, #140]	@ (800b8e8 <HAL_UART_Transmit_DMA+0xf4>)
 800b85c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b862:	2200      	movs	r2, #0
 800b864:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b86e:	4619      	mov	r1, r3
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	3328      	adds	r3, #40	@ 0x28
 800b876:	461a      	mov	r2, r3
 800b878:	88fb      	ldrh	r3, [r7, #6]
 800b87a:	f7f8 fa5f 	bl	8003d3c <HAL_DMA_Start_IT>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d008      	beq.n	800b896 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2210      	movs	r2, #16
 800b888:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2220      	movs	r2, #32
 800b890:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800b892:	2301      	movs	r3, #1
 800b894:	e020      	b.n	800b8d8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	2240      	movs	r2, #64	@ 0x40
 800b89c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	3308      	adds	r3, #8
 800b8a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	e853 3f00 	ldrex	r3, [r3]
 800b8ac:	613b      	str	r3, [r7, #16]
   return(result);
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	3308      	adds	r3, #8
 800b8bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8be:	623a      	str	r2, [r7, #32]
 800b8c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c2:	69f9      	ldr	r1, [r7, #28]
 800b8c4:	6a3a      	ldr	r2, [r7, #32]
 800b8c6:	e841 2300 	strex	r3, r2, [r1]
 800b8ca:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8cc:	69bb      	ldr	r3, [r7, #24]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d1e5      	bne.n	800b89e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	e000      	b.n	800b8d8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800b8d6:	2302      	movs	r3, #2
  }
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3728      	adds	r7, #40	@ 0x28
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	0800cd09 	.word	0x0800cd09
 800b8e4:	0800cd9f 	.word	0x0800cd9f
 800b8e8:	0800cf8b 	.word	0x0800cf8b

0800b8ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b08a      	sub	sp, #40	@ 0x28
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b900:	2b20      	cmp	r3, #32
 800b902:	d132      	bne.n	800b96a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d002      	beq.n	800b910 <HAL_UART_Receive_DMA+0x24>
 800b90a:	88fb      	ldrh	r3, [r7, #6]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d101      	bne.n	800b914 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b910:	2301      	movs	r3, #1
 800b912:	e02b      	b.n	800b96c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2200      	movs	r2, #0
 800b918:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b924:	2b00      	cmp	r3, #0
 800b926:	d018      	beq.n	800b95a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	e853 3f00 	ldrex	r3, [r3]
 800b934:	613b      	str	r3, [r7, #16]
   return(result);
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b93c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	461a      	mov	r2, r3
 800b944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b946:	623b      	str	r3, [r7, #32]
 800b948:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b94a:	69f9      	ldr	r1, [r7, #28]
 800b94c:	6a3a      	ldr	r2, [r7, #32]
 800b94e:	e841 2300 	strex	r3, r2, [r1]
 800b952:	61bb      	str	r3, [r7, #24]
   return(result);
 800b954:	69bb      	ldr	r3, [r7, #24]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d1e6      	bne.n	800b928 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b95a:	88fb      	ldrh	r3, [r7, #6]
 800b95c:	461a      	mov	r2, r3
 800b95e:	68b9      	ldr	r1, [r7, #8]
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f001 f8a7 	bl	800cab4 <UART_Start_Receive_DMA>
 800b966:	4603      	mov	r3, r0
 800b968:	e000      	b.n	800b96c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800b96a:	2302      	movs	r3, #2
  }
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3728      	adds	r7, #40	@ 0x28
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b0a0      	sub	sp, #128	@ 0x80
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b982:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b984:	e853 3f00 	ldrex	r3, [r3]
 800b988:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b98a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b98c:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800b990:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	461a      	mov	r2, r3
 800b998:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b99a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b99c:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b99e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b9a0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b9a2:	e841 2300 	strex	r3, r2, [r1]
 800b9a6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b9a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d1e6      	bne.n	800b97c <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	3308      	adds	r3, #8
 800b9b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b9b8:	e853 3f00 	ldrex	r3, [r3]
 800b9bc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b9be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9c0:	f023 0301 	bic.w	r3, r3, #1
 800b9c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	3308      	adds	r3, #8
 800b9cc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800b9ce:	657a      	str	r2, [r7, #84]	@ 0x54
 800b9d0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b9d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b9d6:	e841 2300 	strex	r3, r2, [r1]
 800b9da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b9dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d1e5      	bne.n	800b9ae <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d118      	bne.n	800ba1c <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9f2:	e853 3f00 	ldrex	r3, [r3]
 800b9f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9fa:	f023 0310 	bic.w	r3, r3, #16
 800b9fe:	677b      	str	r3, [r7, #116]	@ 0x74
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	461a      	mov	r2, r3
 800ba06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba08:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba0a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba10:	e841 2300 	strex	r3, r2, [r1]
 800ba14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d1e6      	bne.n	800b9ea <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba26:	2b80      	cmp	r3, #128	@ 0x80
 800ba28:	d137      	bne.n	800ba9a <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	3308      	adds	r3, #8
 800ba30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba32:	6a3b      	ldr	r3, [r7, #32]
 800ba34:	e853 3f00 	ldrex	r3, [r3]
 800ba38:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba3a:	69fb      	ldr	r3, [r7, #28]
 800ba3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba40:	673b      	str	r3, [r7, #112]	@ 0x70
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	3308      	adds	r3, #8
 800ba48:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ba4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba52:	e841 2300 	strex	r3, r2, [r1]
 800ba56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d1e5      	bne.n	800ba2a <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d019      	beq.n	800ba9a <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7f8 f9c2 	bl	8003dfc <HAL_DMA_Abort>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00d      	beq.n	800ba9a <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7f8 fbe4 	bl	8004250 <HAL_DMA_GetError>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	2b20      	cmp	r3, #32
 800ba8c:	d105      	bne.n	800ba9a <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2210      	movs	r2, #16
 800ba92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ba96:	2303      	movs	r3, #3
 800ba98:	e061      	b.n	800bb5e <HAL_UART_Abort+0x1ea>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800baa4:	2b40      	cmp	r3, #64	@ 0x40
 800baa6:	d137      	bne.n	800bb18 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	3308      	adds	r3, #8
 800baae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	e853 3f00 	ldrex	r3, [r3]
 800bab6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800babe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	3308      	adds	r3, #8
 800bac6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bac8:	61ba      	str	r2, [r7, #24]
 800baca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bacc:	6979      	ldr	r1, [r7, #20]
 800bace:	69ba      	ldr	r2, [r7, #24]
 800bad0:	e841 2300 	strex	r3, r2, [r1]
 800bad4:	613b      	str	r3, [r7, #16]
   return(result);
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1e5      	bne.n	800baa8 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d019      	beq.n	800bb18 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bae8:	2200      	movs	r2, #0
 800baea:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7f8 f983 	bl	8003dfc <HAL_DMA_Abort>
 800baf6:	4603      	mov	r3, r0
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d00d      	beq.n	800bb18 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7f8 fba5 	bl	8004250 <HAL_DMA_GetError>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b20      	cmp	r3, #32
 800bb0a:	d105      	bne.n	800bb18 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2210      	movs	r2, #16
 800bb10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bb14:	2303      	movs	r3, #3
 800bb16:	e022      	b.n	800bb5e <HAL_UART_Abort+0x1ea>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  huart->RxXferCount = 0U;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2200      	movs	r2, #0
 800bb24:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	220f      	movs	r2, #15
 800bb2e:	621a      	str	r2, [r3, #32]


  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	699a      	ldr	r2, [r3, #24]
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f042 0208 	orr.w	r2, r2, #8
 800bb3e:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2220      	movs	r2, #32
 800bb44:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2220      	movs	r2, #32
 800bb4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	661a      	str	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2200      	movs	r2, #0
 800bb58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb5c:	2300      	movs	r3, #0
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3780      	adds	r7, #128	@ 0x80
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
	...

0800bb68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b0ba      	sub	sp, #232	@ 0xe8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	69db      	ldr	r3, [r3, #28]
 800bb76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	689b      	ldr	r3, [r3, #8]
 800bb8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bb8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800bb92:	f640 030f 	movw	r3, #2063	@ 0x80f
 800bb96:	4013      	ands	r3, r2
 800bb98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800bb9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d115      	bne.n	800bbd0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800bba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bba8:	f003 0320 	and.w	r3, r3, #32
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d00f      	beq.n	800bbd0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bbb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bbb4:	f003 0320 	and.w	r3, r3, #32
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d009      	beq.n	800bbd0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f000 82b1 	beq.w	800c128 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	4798      	blx	r3
      }
      return;
 800bbce:	e2ab      	b.n	800c128 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bbd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f000 8117 	beq.w	800be08 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800bbda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bbde:	f003 0301 	and.w	r3, r3, #1
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d106      	bne.n	800bbf4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800bbe6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800bbea:	4b85      	ldr	r3, [pc, #532]	@ (800be00 <HAL_UART_IRQHandler+0x298>)
 800bbec:	4013      	ands	r3, r2
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	f000 810a 	beq.w	800be08 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bbf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bbf8:	f003 0301 	and.w	r3, r3, #1
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d011      	beq.n	800bc24 <HAL_UART_IRQHandler+0xbc>
 800bc00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bc04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00b      	beq.n	800bc24 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2201      	movs	r2, #1
 800bc12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc1a:	f043 0201 	orr.w	r2, r3, #1
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc28:	f003 0302 	and.w	r3, r3, #2
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d011      	beq.n	800bc54 <HAL_UART_IRQHandler+0xec>
 800bc30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bc34:	f003 0301 	and.w	r3, r3, #1
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d00b      	beq.n	800bc54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	2202      	movs	r2, #2
 800bc42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc4a:	f043 0204 	orr.w	r2, r3, #4
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc58:	f003 0304 	and.w	r3, r3, #4
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d011      	beq.n	800bc84 <HAL_UART_IRQHandler+0x11c>
 800bc60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bc64:	f003 0301 	and.w	r3, r3, #1
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d00b      	beq.n	800bc84 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	2204      	movs	r2, #4
 800bc72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc7a:	f043 0202 	orr.w	r2, r3, #2
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bc84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc88:	f003 0308 	and.w	r3, r3, #8
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d017      	beq.n	800bcc0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bc90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bc94:	f003 0320 	and.w	r3, r3, #32
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d105      	bne.n	800bca8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800bc9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bca0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d00b      	beq.n	800bcc0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2208      	movs	r2, #8
 800bcae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bcb6:	f043 0208 	orr.w	r2, r3, #8
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bcc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d012      	beq.n	800bcf2 <HAL_UART_IRQHandler+0x18a>
 800bccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bcd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d00c      	beq.n	800bcf2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bce0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bce8:	f043 0220 	orr.w	r2, r3, #32
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	f000 8217 	beq.w	800c12c <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800bcfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd02:	f003 0320 	and.w	r3, r3, #32
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00d      	beq.n	800bd26 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bd0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bd0e:	f003 0320 	and.w	r3, r3, #32
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d007      	beq.n	800bd26 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d003      	beq.n	800bd26 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bd2c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd3a:	2b40      	cmp	r3, #64	@ 0x40
 800bd3c:	d005      	beq.n	800bd4a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bd3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bd42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d04f      	beq.n	800bdea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 ff78 	bl	800cc40 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	689b      	ldr	r3, [r3, #8]
 800bd56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd5a:	2b40      	cmp	r3, #64	@ 0x40
 800bd5c:	d141      	bne.n	800bde2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	3308      	adds	r3, #8
 800bd64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bd6c:	e853 3f00 	ldrex	r3, [r3]
 800bd70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800bd74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bd78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	3308      	adds	r3, #8
 800bd86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800bd8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bd8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800bd96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800bd9a:	e841 2300 	strex	r3, r2, [r1]
 800bd9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800bda2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d1d9      	bne.n	800bd5e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d013      	beq.n	800bdda <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdb6:	4a13      	ldr	r2, [pc, #76]	@ (800be04 <HAL_UART_IRQHandler+0x29c>)
 800bdb8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7f8 f88c 	bl	8003edc <HAL_DMA_Abort_IT>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d017      	beq.n	800bdfa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdd8:	e00f      	b.n	800bdfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 f9c4 	bl	800c168 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bde0:	e00b      	b.n	800bdfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 f9c0 	bl	800c168 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bde8:	e007      	b.n	800bdfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 f9bc 	bl	800c168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800bdf8:	e198      	b.n	800c12c <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdfa:	bf00      	nop
    return;
 800bdfc:	e196      	b.n	800c12c <HAL_UART_IRQHandler+0x5c4>
 800bdfe:	bf00      	nop
 800be00:	04000120 	.word	0x04000120
 800be04:	0800d009 	.word	0x0800d009

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	f040 8166 	bne.w	800c0de <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800be12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be16:	f003 0310 	and.w	r3, r3, #16
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	f000 815f 	beq.w	800c0de <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800be20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be24:	f003 0310 	and.w	r3, r3, #16
 800be28:	2b00      	cmp	r3, #0
 800be2a:	f000 8158 	beq.w	800c0de <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2210      	movs	r2, #16
 800be34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	689b      	ldr	r3, [r3, #8]
 800be3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be40:	2b40      	cmp	r3, #64	@ 0x40
 800be42:	f040 80d0 	bne.w	800bfe6 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800be52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800be56:	2b00      	cmp	r3, #0
 800be58:	f000 80ab 	beq.w	800bfb2 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800be62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800be66:	429a      	cmp	r2, r3
 800be68:	f080 80a3 	bcs.w	800bfb2 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800be72:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be7a:	69db      	ldr	r3, [r3, #28]
 800be7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be80:	f000 8086 	beq.w	800bf90 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800be90:	e853 3f00 	ldrex	r3, [r3]
 800be94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800be98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800be9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bea0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	461a      	mov	r2, r3
 800beaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800beae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800beb2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800beba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800bebe:	e841 2300 	strex	r3, r2, [r1]
 800bec2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800bec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800beca:	2b00      	cmp	r3, #0
 800becc:	d1da      	bne.n	800be84 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	3308      	adds	r3, #8
 800bed4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bed8:	e853 3f00 	ldrex	r3, [r3]
 800bedc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bede:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bee0:	f023 0301 	bic.w	r3, r3, #1
 800bee4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	3308      	adds	r3, #8
 800beee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bef2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800bef6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800befa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800befe:	e841 2300 	strex	r3, r2, [r1]
 800bf02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bf04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d1e1      	bne.n	800bece <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	3308      	adds	r3, #8
 800bf10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bf14:	e853 3f00 	ldrex	r3, [r3]
 800bf18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bf1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	3308      	adds	r3, #8
 800bf2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bf2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bf30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bf34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bf36:	e841 2300 	strex	r3, r2, [r1]
 800bf3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bf3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d1e3      	bne.n	800bf0a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2220      	movs	r2, #32
 800bf46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf58:	e853 3f00 	ldrex	r3, [r3]
 800bf5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bf5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf60:	f023 0310 	bic.w	r3, r3, #16
 800bf64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	461a      	mov	r2, r3
 800bf6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf72:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf74:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bf78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf7a:	e841 2300 	strex	r3, r2, [r1]
 800bf7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bf80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d1e4      	bne.n	800bf50 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7f7 ff36 	bl	8003dfc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2202      	movs	r2, #2
 800bf94:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	1ad3      	subs	r3, r2, r3
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 f8e6 	bl	800c17c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800bfb0:	e0be      	b.n	800c130 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bfb8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	f040 80b7 	bne.w	800c130 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bfc6:	69db      	ldr	r3, [r3, #28]
 800bfc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bfcc:	f040 80b0 	bne.w	800c130 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2202      	movs	r2, #2
 800bfd4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bfdc:	4619      	mov	r1, r3
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 f8cc 	bl	800c17c <HAL_UARTEx_RxEventCallback>
      return;
 800bfe4:	e0a4      	b.n	800c130 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	1ad3      	subs	r3, r2, r3
 800bff6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c000:	b29b      	uxth	r3, r3
 800c002:	2b00      	cmp	r3, #0
 800c004:	f000 8096 	beq.w	800c134 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800c008:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f000 8091 	beq.w	800c134 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c01a:	e853 3f00 	ldrex	r3, [r3]
 800c01e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c022:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c026:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	461a      	mov	r2, r3
 800c030:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c034:	647b      	str	r3, [r7, #68]	@ 0x44
 800c036:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c038:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c03a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c03c:	e841 2300 	strex	r3, r2, [r1]
 800c040:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c044:	2b00      	cmp	r3, #0
 800c046:	d1e4      	bne.n	800c012 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	3308      	adds	r3, #8
 800c04e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c052:	e853 3f00 	ldrex	r3, [r3]
 800c056:	623b      	str	r3, [r7, #32]
   return(result);
 800c058:	6a3b      	ldr	r3, [r7, #32]
 800c05a:	f023 0301 	bic.w	r3, r3, #1
 800c05e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	3308      	adds	r3, #8
 800c068:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c06c:	633a      	str	r2, [r7, #48]	@ 0x30
 800c06e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c070:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c072:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c074:	e841 2300 	strex	r3, r2, [r1]
 800c078:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d1e3      	bne.n	800c048 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2220      	movs	r2, #32
 800c084:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2200      	movs	r2, #0
 800c08c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	e853 3f00 	ldrex	r3, [r3]
 800c0a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	f023 0310 	bic.w	r3, r3, #16
 800c0a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c0b6:	61fb      	str	r3, [r7, #28]
 800c0b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ba:	69b9      	ldr	r1, [r7, #24]
 800c0bc:	69fa      	ldr	r2, [r7, #28]
 800c0be:	e841 2300 	strex	r3, r2, [r1]
 800c0c2:	617b      	str	r3, [r7, #20]
   return(result);
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d1e4      	bne.n	800c094 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2202      	movs	r2, #2
 800c0ce:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c0d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 f850 	bl	800c17c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c0dc:	e02a      	b.n	800c134 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c0de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d00e      	beq.n	800c108 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c0ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d008      	beq.n	800c108 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d01c      	beq.n	800c138 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	4798      	blx	r3
    }
    return;
 800c106:	e017      	b.n	800c138 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c10c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c110:	2b00      	cmp	r3, #0
 800c112:	d012      	beq.n	800c13a <HAL_UART_IRQHandler+0x5d2>
 800c114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d00c      	beq.n	800c13a <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f001 f83e 	bl	800d1a2 <UART_EndTransmit_IT>
    return;
 800c126:	e008      	b.n	800c13a <HAL_UART_IRQHandler+0x5d2>
      return;
 800c128:	bf00      	nop
 800c12a:	e006      	b.n	800c13a <HAL_UART_IRQHandler+0x5d2>
    return;
 800c12c:	bf00      	nop
 800c12e:	e004      	b.n	800c13a <HAL_UART_IRQHandler+0x5d2>
      return;
 800c130:	bf00      	nop
 800c132:	e002      	b.n	800c13a <HAL_UART_IRQHandler+0x5d2>
      return;
 800c134:	bf00      	nop
 800c136:	e000      	b.n	800c13a <HAL_UART_IRQHandler+0x5d2>
    return;
 800c138:	bf00      	nop
  }

}
 800c13a:	37e8      	adds	r7, #232	@ 0xe8
 800c13c:	46bd      	mov	sp, r7
 800c13e:	bd80      	pop	{r7, pc}

0800c140 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c148:	bf00      	nop
 800c14a:	370c      	adds	r7, #12
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr

0800c154 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c154:	b480      	push	{r7}
 800c156:	b083      	sub	sp, #12
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c15c:	bf00      	nop
 800c15e:	370c      	adds	r7, #12
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr

0800c168 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c168:	b480      	push	{r7}
 800c16a:	b083      	sub	sp, #12
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c170:	bf00      	nop
 800c172:	370c      	adds	r7, #12
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	460b      	mov	r3, r1
 800c186:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c188:	bf00      	nop
 800c18a:	370c      	adds	r7, #12
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr

0800c194 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b088      	sub	sp, #32
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c19c:	2300      	movs	r3, #0
 800c19e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	689a      	ldr	r2, [r3, #8]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	691b      	ldr	r3, [r3, #16]
 800c1a8:	431a      	orrs	r2, r3
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	695b      	ldr	r3, [r3, #20]
 800c1ae:	431a      	orrs	r2, r3
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	69db      	ldr	r3, [r3, #28]
 800c1b4:	4313      	orrs	r3, r2
 800c1b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	4ba6      	ldr	r3, [pc, #664]	@ (800c458 <UART_SetConfig+0x2c4>)
 800c1c0:	4013      	ands	r3, r2
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	6812      	ldr	r2, [r2, #0]
 800c1c6:	6979      	ldr	r1, [r7, #20]
 800c1c8:	430b      	orrs	r3, r1
 800c1ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	685b      	ldr	r3, [r3, #4]
 800c1d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	68da      	ldr	r2, [r3, #12]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	430a      	orrs	r2, r1
 800c1e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	699b      	ldr	r3, [r3, #24]
 800c1e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6a1b      	ldr	r3, [r3, #32]
 800c1ec:	697a      	ldr	r2, [r7, #20]
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	689b      	ldr	r3, [r3, #8]
 800c1f8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	697a      	ldr	r2, [r7, #20]
 800c202:	430a      	orrs	r2, r1
 800c204:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4a94      	ldr	r2, [pc, #592]	@ (800c45c <UART_SetConfig+0x2c8>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d120      	bne.n	800c252 <UART_SetConfig+0xbe>
 800c210:	4b93      	ldr	r3, [pc, #588]	@ (800c460 <UART_SetConfig+0x2cc>)
 800c212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c216:	f003 0303 	and.w	r3, r3, #3
 800c21a:	2b03      	cmp	r3, #3
 800c21c:	d816      	bhi.n	800c24c <UART_SetConfig+0xb8>
 800c21e:	a201      	add	r2, pc, #4	@ (adr r2, 800c224 <UART_SetConfig+0x90>)
 800c220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c224:	0800c235 	.word	0x0800c235
 800c228:	0800c241 	.word	0x0800c241
 800c22c:	0800c23b 	.word	0x0800c23b
 800c230:	0800c247 	.word	0x0800c247
 800c234:	2301      	movs	r3, #1
 800c236:	77fb      	strb	r3, [r7, #31]
 800c238:	e150      	b.n	800c4dc <UART_SetConfig+0x348>
 800c23a:	2302      	movs	r3, #2
 800c23c:	77fb      	strb	r3, [r7, #31]
 800c23e:	e14d      	b.n	800c4dc <UART_SetConfig+0x348>
 800c240:	2304      	movs	r3, #4
 800c242:	77fb      	strb	r3, [r7, #31]
 800c244:	e14a      	b.n	800c4dc <UART_SetConfig+0x348>
 800c246:	2308      	movs	r3, #8
 800c248:	77fb      	strb	r3, [r7, #31]
 800c24a:	e147      	b.n	800c4dc <UART_SetConfig+0x348>
 800c24c:	2310      	movs	r3, #16
 800c24e:	77fb      	strb	r3, [r7, #31]
 800c250:	e144      	b.n	800c4dc <UART_SetConfig+0x348>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	4a83      	ldr	r2, [pc, #524]	@ (800c464 <UART_SetConfig+0x2d0>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d132      	bne.n	800c2c2 <UART_SetConfig+0x12e>
 800c25c:	4b80      	ldr	r3, [pc, #512]	@ (800c460 <UART_SetConfig+0x2cc>)
 800c25e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c262:	f003 030c 	and.w	r3, r3, #12
 800c266:	2b0c      	cmp	r3, #12
 800c268:	d828      	bhi.n	800c2bc <UART_SetConfig+0x128>
 800c26a:	a201      	add	r2, pc, #4	@ (adr r2, 800c270 <UART_SetConfig+0xdc>)
 800c26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c270:	0800c2a5 	.word	0x0800c2a5
 800c274:	0800c2bd 	.word	0x0800c2bd
 800c278:	0800c2bd 	.word	0x0800c2bd
 800c27c:	0800c2bd 	.word	0x0800c2bd
 800c280:	0800c2b1 	.word	0x0800c2b1
 800c284:	0800c2bd 	.word	0x0800c2bd
 800c288:	0800c2bd 	.word	0x0800c2bd
 800c28c:	0800c2bd 	.word	0x0800c2bd
 800c290:	0800c2ab 	.word	0x0800c2ab
 800c294:	0800c2bd 	.word	0x0800c2bd
 800c298:	0800c2bd 	.word	0x0800c2bd
 800c29c:	0800c2bd 	.word	0x0800c2bd
 800c2a0:	0800c2b7 	.word	0x0800c2b7
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	77fb      	strb	r3, [r7, #31]
 800c2a8:	e118      	b.n	800c4dc <UART_SetConfig+0x348>
 800c2aa:	2302      	movs	r3, #2
 800c2ac:	77fb      	strb	r3, [r7, #31]
 800c2ae:	e115      	b.n	800c4dc <UART_SetConfig+0x348>
 800c2b0:	2304      	movs	r3, #4
 800c2b2:	77fb      	strb	r3, [r7, #31]
 800c2b4:	e112      	b.n	800c4dc <UART_SetConfig+0x348>
 800c2b6:	2308      	movs	r3, #8
 800c2b8:	77fb      	strb	r3, [r7, #31]
 800c2ba:	e10f      	b.n	800c4dc <UART_SetConfig+0x348>
 800c2bc:	2310      	movs	r3, #16
 800c2be:	77fb      	strb	r3, [r7, #31]
 800c2c0:	e10c      	b.n	800c4dc <UART_SetConfig+0x348>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4a68      	ldr	r2, [pc, #416]	@ (800c468 <UART_SetConfig+0x2d4>)
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d120      	bne.n	800c30e <UART_SetConfig+0x17a>
 800c2cc:	4b64      	ldr	r3, [pc, #400]	@ (800c460 <UART_SetConfig+0x2cc>)
 800c2ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2d2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c2d6:	2b30      	cmp	r3, #48	@ 0x30
 800c2d8:	d013      	beq.n	800c302 <UART_SetConfig+0x16e>
 800c2da:	2b30      	cmp	r3, #48	@ 0x30
 800c2dc:	d814      	bhi.n	800c308 <UART_SetConfig+0x174>
 800c2de:	2b20      	cmp	r3, #32
 800c2e0:	d009      	beq.n	800c2f6 <UART_SetConfig+0x162>
 800c2e2:	2b20      	cmp	r3, #32
 800c2e4:	d810      	bhi.n	800c308 <UART_SetConfig+0x174>
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d002      	beq.n	800c2f0 <UART_SetConfig+0x15c>
 800c2ea:	2b10      	cmp	r3, #16
 800c2ec:	d006      	beq.n	800c2fc <UART_SetConfig+0x168>
 800c2ee:	e00b      	b.n	800c308 <UART_SetConfig+0x174>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	77fb      	strb	r3, [r7, #31]
 800c2f4:	e0f2      	b.n	800c4dc <UART_SetConfig+0x348>
 800c2f6:	2302      	movs	r3, #2
 800c2f8:	77fb      	strb	r3, [r7, #31]
 800c2fa:	e0ef      	b.n	800c4dc <UART_SetConfig+0x348>
 800c2fc:	2304      	movs	r3, #4
 800c2fe:	77fb      	strb	r3, [r7, #31]
 800c300:	e0ec      	b.n	800c4dc <UART_SetConfig+0x348>
 800c302:	2308      	movs	r3, #8
 800c304:	77fb      	strb	r3, [r7, #31]
 800c306:	e0e9      	b.n	800c4dc <UART_SetConfig+0x348>
 800c308:	2310      	movs	r3, #16
 800c30a:	77fb      	strb	r3, [r7, #31]
 800c30c:	e0e6      	b.n	800c4dc <UART_SetConfig+0x348>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4a56      	ldr	r2, [pc, #344]	@ (800c46c <UART_SetConfig+0x2d8>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d120      	bne.n	800c35a <UART_SetConfig+0x1c6>
 800c318:	4b51      	ldr	r3, [pc, #324]	@ (800c460 <UART_SetConfig+0x2cc>)
 800c31a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c31e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c322:	2bc0      	cmp	r3, #192	@ 0xc0
 800c324:	d013      	beq.n	800c34e <UART_SetConfig+0x1ba>
 800c326:	2bc0      	cmp	r3, #192	@ 0xc0
 800c328:	d814      	bhi.n	800c354 <UART_SetConfig+0x1c0>
 800c32a:	2b80      	cmp	r3, #128	@ 0x80
 800c32c:	d009      	beq.n	800c342 <UART_SetConfig+0x1ae>
 800c32e:	2b80      	cmp	r3, #128	@ 0x80
 800c330:	d810      	bhi.n	800c354 <UART_SetConfig+0x1c0>
 800c332:	2b00      	cmp	r3, #0
 800c334:	d002      	beq.n	800c33c <UART_SetConfig+0x1a8>
 800c336:	2b40      	cmp	r3, #64	@ 0x40
 800c338:	d006      	beq.n	800c348 <UART_SetConfig+0x1b4>
 800c33a:	e00b      	b.n	800c354 <UART_SetConfig+0x1c0>
 800c33c:	2300      	movs	r3, #0
 800c33e:	77fb      	strb	r3, [r7, #31]
 800c340:	e0cc      	b.n	800c4dc <UART_SetConfig+0x348>
 800c342:	2302      	movs	r3, #2
 800c344:	77fb      	strb	r3, [r7, #31]
 800c346:	e0c9      	b.n	800c4dc <UART_SetConfig+0x348>
 800c348:	2304      	movs	r3, #4
 800c34a:	77fb      	strb	r3, [r7, #31]
 800c34c:	e0c6      	b.n	800c4dc <UART_SetConfig+0x348>
 800c34e:	2308      	movs	r3, #8
 800c350:	77fb      	strb	r3, [r7, #31]
 800c352:	e0c3      	b.n	800c4dc <UART_SetConfig+0x348>
 800c354:	2310      	movs	r3, #16
 800c356:	77fb      	strb	r3, [r7, #31]
 800c358:	e0c0      	b.n	800c4dc <UART_SetConfig+0x348>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a44      	ldr	r2, [pc, #272]	@ (800c470 <UART_SetConfig+0x2dc>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d125      	bne.n	800c3b0 <UART_SetConfig+0x21c>
 800c364:	4b3e      	ldr	r3, [pc, #248]	@ (800c460 <UART_SetConfig+0x2cc>)
 800c366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c36a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c36e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c372:	d017      	beq.n	800c3a4 <UART_SetConfig+0x210>
 800c374:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c378:	d817      	bhi.n	800c3aa <UART_SetConfig+0x216>
 800c37a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c37e:	d00b      	beq.n	800c398 <UART_SetConfig+0x204>
 800c380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c384:	d811      	bhi.n	800c3aa <UART_SetConfig+0x216>
 800c386:	2b00      	cmp	r3, #0
 800c388:	d003      	beq.n	800c392 <UART_SetConfig+0x1fe>
 800c38a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c38e:	d006      	beq.n	800c39e <UART_SetConfig+0x20a>
 800c390:	e00b      	b.n	800c3aa <UART_SetConfig+0x216>
 800c392:	2300      	movs	r3, #0
 800c394:	77fb      	strb	r3, [r7, #31]
 800c396:	e0a1      	b.n	800c4dc <UART_SetConfig+0x348>
 800c398:	2302      	movs	r3, #2
 800c39a:	77fb      	strb	r3, [r7, #31]
 800c39c:	e09e      	b.n	800c4dc <UART_SetConfig+0x348>
 800c39e:	2304      	movs	r3, #4
 800c3a0:	77fb      	strb	r3, [r7, #31]
 800c3a2:	e09b      	b.n	800c4dc <UART_SetConfig+0x348>
 800c3a4:	2308      	movs	r3, #8
 800c3a6:	77fb      	strb	r3, [r7, #31]
 800c3a8:	e098      	b.n	800c4dc <UART_SetConfig+0x348>
 800c3aa:	2310      	movs	r3, #16
 800c3ac:	77fb      	strb	r3, [r7, #31]
 800c3ae:	e095      	b.n	800c4dc <UART_SetConfig+0x348>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a2f      	ldr	r2, [pc, #188]	@ (800c474 <UART_SetConfig+0x2e0>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d125      	bne.n	800c406 <UART_SetConfig+0x272>
 800c3ba:	4b29      	ldr	r3, [pc, #164]	@ (800c460 <UART_SetConfig+0x2cc>)
 800c3bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c3c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c3c8:	d017      	beq.n	800c3fa <UART_SetConfig+0x266>
 800c3ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c3ce:	d817      	bhi.n	800c400 <UART_SetConfig+0x26c>
 800c3d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c3d4:	d00b      	beq.n	800c3ee <UART_SetConfig+0x25a>
 800c3d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c3da:	d811      	bhi.n	800c400 <UART_SetConfig+0x26c>
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d003      	beq.n	800c3e8 <UART_SetConfig+0x254>
 800c3e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3e4:	d006      	beq.n	800c3f4 <UART_SetConfig+0x260>
 800c3e6:	e00b      	b.n	800c400 <UART_SetConfig+0x26c>
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	77fb      	strb	r3, [r7, #31]
 800c3ec:	e076      	b.n	800c4dc <UART_SetConfig+0x348>
 800c3ee:	2302      	movs	r3, #2
 800c3f0:	77fb      	strb	r3, [r7, #31]
 800c3f2:	e073      	b.n	800c4dc <UART_SetConfig+0x348>
 800c3f4:	2304      	movs	r3, #4
 800c3f6:	77fb      	strb	r3, [r7, #31]
 800c3f8:	e070      	b.n	800c4dc <UART_SetConfig+0x348>
 800c3fa:	2308      	movs	r3, #8
 800c3fc:	77fb      	strb	r3, [r7, #31]
 800c3fe:	e06d      	b.n	800c4dc <UART_SetConfig+0x348>
 800c400:	2310      	movs	r3, #16
 800c402:	77fb      	strb	r3, [r7, #31]
 800c404:	e06a      	b.n	800c4dc <UART_SetConfig+0x348>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a1b      	ldr	r2, [pc, #108]	@ (800c478 <UART_SetConfig+0x2e4>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d138      	bne.n	800c482 <UART_SetConfig+0x2ee>
 800c410:	4b13      	ldr	r3, [pc, #76]	@ (800c460 <UART_SetConfig+0x2cc>)
 800c412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c416:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800c41a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c41e:	d017      	beq.n	800c450 <UART_SetConfig+0x2bc>
 800c420:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c424:	d82a      	bhi.n	800c47c <UART_SetConfig+0x2e8>
 800c426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c42a:	d00b      	beq.n	800c444 <UART_SetConfig+0x2b0>
 800c42c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c430:	d824      	bhi.n	800c47c <UART_SetConfig+0x2e8>
 800c432:	2b00      	cmp	r3, #0
 800c434:	d003      	beq.n	800c43e <UART_SetConfig+0x2aa>
 800c436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c43a:	d006      	beq.n	800c44a <UART_SetConfig+0x2b6>
 800c43c:	e01e      	b.n	800c47c <UART_SetConfig+0x2e8>
 800c43e:	2300      	movs	r3, #0
 800c440:	77fb      	strb	r3, [r7, #31]
 800c442:	e04b      	b.n	800c4dc <UART_SetConfig+0x348>
 800c444:	2302      	movs	r3, #2
 800c446:	77fb      	strb	r3, [r7, #31]
 800c448:	e048      	b.n	800c4dc <UART_SetConfig+0x348>
 800c44a:	2304      	movs	r3, #4
 800c44c:	77fb      	strb	r3, [r7, #31]
 800c44e:	e045      	b.n	800c4dc <UART_SetConfig+0x348>
 800c450:	2308      	movs	r3, #8
 800c452:	77fb      	strb	r3, [r7, #31]
 800c454:	e042      	b.n	800c4dc <UART_SetConfig+0x348>
 800c456:	bf00      	nop
 800c458:	efff69f3 	.word	0xefff69f3
 800c45c:	40011000 	.word	0x40011000
 800c460:	40023800 	.word	0x40023800
 800c464:	40004400 	.word	0x40004400
 800c468:	40004800 	.word	0x40004800
 800c46c:	40004c00 	.word	0x40004c00
 800c470:	40005000 	.word	0x40005000
 800c474:	40011400 	.word	0x40011400
 800c478:	40007800 	.word	0x40007800
 800c47c:	2310      	movs	r3, #16
 800c47e:	77fb      	strb	r3, [r7, #31]
 800c480:	e02c      	b.n	800c4dc <UART_SetConfig+0x348>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4a72      	ldr	r2, [pc, #456]	@ (800c650 <UART_SetConfig+0x4bc>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d125      	bne.n	800c4d8 <UART_SetConfig+0x344>
 800c48c:	4b71      	ldr	r3, [pc, #452]	@ (800c654 <UART_SetConfig+0x4c0>)
 800c48e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c492:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c496:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c49a:	d017      	beq.n	800c4cc <UART_SetConfig+0x338>
 800c49c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c4a0:	d817      	bhi.n	800c4d2 <UART_SetConfig+0x33e>
 800c4a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c4a6:	d00b      	beq.n	800c4c0 <UART_SetConfig+0x32c>
 800c4a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c4ac:	d811      	bhi.n	800c4d2 <UART_SetConfig+0x33e>
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d003      	beq.n	800c4ba <UART_SetConfig+0x326>
 800c4b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c4b6:	d006      	beq.n	800c4c6 <UART_SetConfig+0x332>
 800c4b8:	e00b      	b.n	800c4d2 <UART_SetConfig+0x33e>
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	77fb      	strb	r3, [r7, #31]
 800c4be:	e00d      	b.n	800c4dc <UART_SetConfig+0x348>
 800c4c0:	2302      	movs	r3, #2
 800c4c2:	77fb      	strb	r3, [r7, #31]
 800c4c4:	e00a      	b.n	800c4dc <UART_SetConfig+0x348>
 800c4c6:	2304      	movs	r3, #4
 800c4c8:	77fb      	strb	r3, [r7, #31]
 800c4ca:	e007      	b.n	800c4dc <UART_SetConfig+0x348>
 800c4cc:	2308      	movs	r3, #8
 800c4ce:	77fb      	strb	r3, [r7, #31]
 800c4d0:	e004      	b.n	800c4dc <UART_SetConfig+0x348>
 800c4d2:	2310      	movs	r3, #16
 800c4d4:	77fb      	strb	r3, [r7, #31]
 800c4d6:	e001      	b.n	800c4dc <UART_SetConfig+0x348>
 800c4d8:	2310      	movs	r3, #16
 800c4da:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	69db      	ldr	r3, [r3, #28]
 800c4e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c4e4:	d15b      	bne.n	800c59e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800c4e6:	7ffb      	ldrb	r3, [r7, #31]
 800c4e8:	2b08      	cmp	r3, #8
 800c4ea:	d828      	bhi.n	800c53e <UART_SetConfig+0x3aa>
 800c4ec:	a201      	add	r2, pc, #4	@ (adr r2, 800c4f4 <UART_SetConfig+0x360>)
 800c4ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4f2:	bf00      	nop
 800c4f4:	0800c519 	.word	0x0800c519
 800c4f8:	0800c521 	.word	0x0800c521
 800c4fc:	0800c529 	.word	0x0800c529
 800c500:	0800c53f 	.word	0x0800c53f
 800c504:	0800c52f 	.word	0x0800c52f
 800c508:	0800c53f 	.word	0x0800c53f
 800c50c:	0800c53f 	.word	0x0800c53f
 800c510:	0800c53f 	.word	0x0800c53f
 800c514:	0800c537 	.word	0x0800c537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c518:	f7fc fc0a 	bl	8008d30 <HAL_RCC_GetPCLK1Freq>
 800c51c:	61b8      	str	r0, [r7, #24]
        break;
 800c51e:	e013      	b.n	800c548 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c520:	f7fc fc1a 	bl	8008d58 <HAL_RCC_GetPCLK2Freq>
 800c524:	61b8      	str	r0, [r7, #24]
        break;
 800c526:	e00f      	b.n	800c548 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c528:	4b4b      	ldr	r3, [pc, #300]	@ (800c658 <UART_SetConfig+0x4c4>)
 800c52a:	61bb      	str	r3, [r7, #24]
        break;
 800c52c:	e00c      	b.n	800c548 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c52e:	f7fc faed 	bl	8008b0c <HAL_RCC_GetSysClockFreq>
 800c532:	61b8      	str	r0, [r7, #24]
        break;
 800c534:	e008      	b.n	800c548 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c536:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c53a:	61bb      	str	r3, [r7, #24]
        break;
 800c53c:	e004      	b.n	800c548 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c53e:	2300      	movs	r3, #0
 800c540:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c542:	2301      	movs	r3, #1
 800c544:	77bb      	strb	r3, [r7, #30]
        break;
 800c546:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c548:	69bb      	ldr	r3, [r7, #24]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d074      	beq.n	800c638 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c54e:	69bb      	ldr	r3, [r7, #24]
 800c550:	005a      	lsls	r2, r3, #1
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	685b      	ldr	r3, [r3, #4]
 800c556:	085b      	lsrs	r3, r3, #1
 800c558:	441a      	add	r2, r3
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c562:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	2b0f      	cmp	r3, #15
 800c568:	d916      	bls.n	800c598 <UART_SetConfig+0x404>
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c570:	d212      	bcs.n	800c598 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	b29b      	uxth	r3, r3
 800c576:	f023 030f 	bic.w	r3, r3, #15
 800c57a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	085b      	lsrs	r3, r3, #1
 800c580:	b29b      	uxth	r3, r3
 800c582:	f003 0307 	and.w	r3, r3, #7
 800c586:	b29a      	uxth	r2, r3
 800c588:	89fb      	ldrh	r3, [r7, #14]
 800c58a:	4313      	orrs	r3, r2
 800c58c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	89fa      	ldrh	r2, [r7, #14]
 800c594:	60da      	str	r2, [r3, #12]
 800c596:	e04f      	b.n	800c638 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c598:	2301      	movs	r3, #1
 800c59a:	77bb      	strb	r3, [r7, #30]
 800c59c:	e04c      	b.n	800c638 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c59e:	7ffb      	ldrb	r3, [r7, #31]
 800c5a0:	2b08      	cmp	r3, #8
 800c5a2:	d828      	bhi.n	800c5f6 <UART_SetConfig+0x462>
 800c5a4:	a201      	add	r2, pc, #4	@ (adr r2, 800c5ac <UART_SetConfig+0x418>)
 800c5a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5aa:	bf00      	nop
 800c5ac:	0800c5d1 	.word	0x0800c5d1
 800c5b0:	0800c5d9 	.word	0x0800c5d9
 800c5b4:	0800c5e1 	.word	0x0800c5e1
 800c5b8:	0800c5f7 	.word	0x0800c5f7
 800c5bc:	0800c5e7 	.word	0x0800c5e7
 800c5c0:	0800c5f7 	.word	0x0800c5f7
 800c5c4:	0800c5f7 	.word	0x0800c5f7
 800c5c8:	0800c5f7 	.word	0x0800c5f7
 800c5cc:	0800c5ef 	.word	0x0800c5ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c5d0:	f7fc fbae 	bl	8008d30 <HAL_RCC_GetPCLK1Freq>
 800c5d4:	61b8      	str	r0, [r7, #24]
        break;
 800c5d6:	e013      	b.n	800c600 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c5d8:	f7fc fbbe 	bl	8008d58 <HAL_RCC_GetPCLK2Freq>
 800c5dc:	61b8      	str	r0, [r7, #24]
        break;
 800c5de:	e00f      	b.n	800c600 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c5e0:	4b1d      	ldr	r3, [pc, #116]	@ (800c658 <UART_SetConfig+0x4c4>)
 800c5e2:	61bb      	str	r3, [r7, #24]
        break;
 800c5e4:	e00c      	b.n	800c600 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c5e6:	f7fc fa91 	bl	8008b0c <HAL_RCC_GetSysClockFreq>
 800c5ea:	61b8      	str	r0, [r7, #24]
        break;
 800c5ec:	e008      	b.n	800c600 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c5ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c5f2:	61bb      	str	r3, [r7, #24]
        break;
 800c5f4:	e004      	b.n	800c600 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	77bb      	strb	r3, [r7, #30]
        break;
 800c5fe:	bf00      	nop
    }

    if (pclk != 0U)
 800c600:	69bb      	ldr	r3, [r7, #24]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d018      	beq.n	800c638 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	085a      	lsrs	r2, r3, #1
 800c60c:	69bb      	ldr	r3, [r7, #24]
 800c60e:	441a      	add	r2, r3
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	fbb2 f3f3 	udiv	r3, r2, r3
 800c618:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	2b0f      	cmp	r3, #15
 800c61e:	d909      	bls.n	800c634 <UART_SetConfig+0x4a0>
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c626:	d205      	bcs.n	800c634 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	b29a      	uxth	r2, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	60da      	str	r2, [r3, #12]
 800c632:	e001      	b.n	800c638 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c634:	2301      	movs	r3, #1
 800c636:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2200      	movs	r2, #0
 800c642:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800c644:	7fbb      	ldrb	r3, [r7, #30]
}
 800c646:	4618      	mov	r0, r3
 800c648:	3720      	adds	r7, #32
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	40007c00 	.word	0x40007c00
 800c654:	40023800 	.word	0x40023800
 800c658:	00f42400 	.word	0x00f42400

0800c65c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c668:	f003 0308 	and.w	r3, r3, #8
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d00a      	beq.n	800c686 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	430a      	orrs	r2, r1
 800c684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c68a:	f003 0301 	and.w	r3, r3, #1
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d00a      	beq.n	800c6a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	430a      	orrs	r2, r1
 800c6a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6ac:	f003 0302 	and.w	r3, r3, #2
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d00a      	beq.n	800c6ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	430a      	orrs	r2, r1
 800c6c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6ce:	f003 0304 	and.w	r3, r3, #4
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d00a      	beq.n	800c6ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	430a      	orrs	r2, r1
 800c6ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6f0:	f003 0310 	and.w	r3, r3, #16
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d00a      	beq.n	800c70e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	689b      	ldr	r3, [r3, #8]
 800c6fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	430a      	orrs	r2, r1
 800c70c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c712:	f003 0320 	and.w	r3, r3, #32
 800c716:	2b00      	cmp	r3, #0
 800c718:	d00a      	beq.n	800c730 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	430a      	orrs	r2, r1
 800c72e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d01a      	beq.n	800c772 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	685b      	ldr	r3, [r3, #4]
 800c742:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	430a      	orrs	r2, r1
 800c750:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c756:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c75a:	d10a      	bne.n	800c772 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	685b      	ldr	r3, [r3, #4]
 800c762:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	430a      	orrs	r2, r1
 800c770:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00a      	beq.n	800c794 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	430a      	orrs	r2, r1
 800c792:	605a      	str	r2, [r3, #4]
  }
}
 800c794:	bf00      	nop
 800c796:	370c      	adds	r7, #12
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr

0800c7a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b08c      	sub	sp, #48	@ 0x30
 800c7a4:	af02      	add	r7, sp, #8
 800c7a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c7b0:	f7f6 f824 	bl	80027fc <HAL_GetTick>
 800c7b4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f003 0308 	and.w	r3, r3, #8
 800c7c0:	2b08      	cmp	r3, #8
 800c7c2:	d12e      	bne.n	800c822 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c7c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c7c8:	9300      	str	r3, [sp, #0]
 800c7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f000 f83b 	bl	800c84e <UART_WaitOnFlagUntilTimeout>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d021      	beq.n	800c822 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	e853 3f00 	ldrex	r3, [r3]
 800c7ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c7f2:	623b      	str	r3, [r7, #32]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	6a3b      	ldr	r3, [r7, #32]
 800c7fc:	61fb      	str	r3, [r7, #28]
 800c7fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c800:	69b9      	ldr	r1, [r7, #24]
 800c802:	69fa      	ldr	r2, [r7, #28]
 800c804:	e841 2300 	strex	r3, r2, [r1]
 800c808:	617b      	str	r3, [r7, #20]
   return(result);
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d1e6      	bne.n	800c7de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2220      	movs	r2, #32
 800c814:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2200      	movs	r2, #0
 800c81a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c81e:	2303      	movs	r3, #3
 800c820:	e011      	b.n	800c846 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2220      	movs	r2, #32
 800c826:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2220      	movs	r2, #32
 800c82c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2200      	movs	r2, #0
 800c834:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2200      	movs	r2, #0
 800c83a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2200      	movs	r2, #0
 800c840:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800c844:	2300      	movs	r3, #0
}
 800c846:	4618      	mov	r0, r3
 800c848:	3728      	adds	r7, #40	@ 0x28
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}

0800c84e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c84e:	b580      	push	{r7, lr}
 800c850:	b084      	sub	sp, #16
 800c852:	af00      	add	r7, sp, #0
 800c854:	60f8      	str	r0, [r7, #12]
 800c856:	60b9      	str	r1, [r7, #8]
 800c858:	603b      	str	r3, [r7, #0]
 800c85a:	4613      	mov	r3, r2
 800c85c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c85e:	e04f      	b.n	800c900 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c860:	69bb      	ldr	r3, [r7, #24]
 800c862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c866:	d04b      	beq.n	800c900 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c868:	f7f5 ffc8 	bl	80027fc <HAL_GetTick>
 800c86c:	4602      	mov	r2, r0
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	1ad3      	subs	r3, r2, r3
 800c872:	69ba      	ldr	r2, [r7, #24]
 800c874:	429a      	cmp	r2, r3
 800c876:	d302      	bcc.n	800c87e <UART_WaitOnFlagUntilTimeout+0x30>
 800c878:	69bb      	ldr	r3, [r7, #24]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d101      	bne.n	800c882 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c87e:	2303      	movs	r3, #3
 800c880:	e04e      	b.n	800c920 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f003 0304 	and.w	r3, r3, #4
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d037      	beq.n	800c900 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	2b80      	cmp	r3, #128	@ 0x80
 800c894:	d034      	beq.n	800c900 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	2b40      	cmp	r3, #64	@ 0x40
 800c89a:	d031      	beq.n	800c900 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	69db      	ldr	r3, [r3, #28]
 800c8a2:	f003 0308 	and.w	r3, r3, #8
 800c8a6:	2b08      	cmp	r3, #8
 800c8a8:	d110      	bne.n	800c8cc <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	2208      	movs	r2, #8
 800c8b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c8b2:	68f8      	ldr	r0, [r7, #12]
 800c8b4:	f000 f9c4 	bl	800cc40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2208      	movs	r2, #8
 800c8bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	e029      	b.n	800c920 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	69db      	ldr	r3, [r3, #28]
 800c8d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c8d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c8da:	d111      	bne.n	800c900 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c8e4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c8e6:	68f8      	ldr	r0, [r7, #12]
 800c8e8:	f000 f9aa 	bl	800cc40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2220      	movs	r2, #32
 800c8f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800c8fc:	2303      	movs	r3, #3
 800c8fe:	e00f      	b.n	800c920 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	69da      	ldr	r2, [r3, #28]
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	4013      	ands	r3, r2
 800c90a:	68ba      	ldr	r2, [r7, #8]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	bf0c      	ite	eq
 800c910:	2301      	moveq	r3, #1
 800c912:	2300      	movne	r3, #0
 800c914:	b2db      	uxtb	r3, r3
 800c916:	461a      	mov	r2, r3
 800c918:	79fb      	ldrb	r3, [r7, #7]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d0a0      	beq.n	800c860 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c91e:	2300      	movs	r3, #0
}
 800c920:	4618      	mov	r0, r3
 800c922:	3710      	adds	r7, #16
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c928:	b480      	push	{r7}
 800c92a:	b097      	sub	sp, #92	@ 0x5c
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	4613      	mov	r3, r2
 800c934:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	68ba      	ldr	r2, [r7, #8]
 800c93a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	88fa      	ldrh	r2, [r7, #6]
 800c940:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	88fa      	ldrh	r2, [r7, #6]
 800c948:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2200      	movs	r2, #0
 800c950:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	689b      	ldr	r3, [r3, #8]
 800c956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c95a:	d10e      	bne.n	800c97a <UART_Start_Receive_IT+0x52>
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	691b      	ldr	r3, [r3, #16]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d105      	bne.n	800c970 <UART_Start_Receive_IT+0x48>
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800c96a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c96e:	e02d      	b.n	800c9cc <UART_Start_Receive_IT+0xa4>
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	22ff      	movs	r2, #255	@ 0xff
 800c974:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c978:	e028      	b.n	800c9cc <UART_Start_Receive_IT+0xa4>
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	689b      	ldr	r3, [r3, #8]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d10d      	bne.n	800c99e <UART_Start_Receive_IT+0x76>
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	691b      	ldr	r3, [r3, #16]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d104      	bne.n	800c994 <UART_Start_Receive_IT+0x6c>
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	22ff      	movs	r2, #255	@ 0xff
 800c98e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c992:	e01b      	b.n	800c9cc <UART_Start_Receive_IT+0xa4>
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	227f      	movs	r2, #127	@ 0x7f
 800c998:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c99c:	e016      	b.n	800c9cc <UART_Start_Receive_IT+0xa4>
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	689b      	ldr	r3, [r3, #8]
 800c9a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c9a6:	d10d      	bne.n	800c9c4 <UART_Start_Receive_IT+0x9c>
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	691b      	ldr	r3, [r3, #16]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d104      	bne.n	800c9ba <UART_Start_Receive_IT+0x92>
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	227f      	movs	r2, #127	@ 0x7f
 800c9b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c9b8:	e008      	b.n	800c9cc <UART_Start_Receive_IT+0xa4>
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	223f      	movs	r2, #63	@ 0x3f
 800c9be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800c9c2:	e003      	b.n	800c9cc <UART_Start_Receive_IT+0xa4>
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2222      	movs	r2, #34	@ 0x22
 800c9d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	3308      	adds	r3, #8
 800c9e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9e6:	e853 3f00 	ldrex	r3, [r3]
 800c9ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c9ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ee:	f043 0301 	orr.w	r3, r3, #1
 800c9f2:	657b      	str	r3, [r7, #84]	@ 0x54
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	3308      	adds	r3, #8
 800c9fa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c9fc:	64ba      	str	r2, [r7, #72]	@ 0x48
 800c9fe:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca00:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ca02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca04:	e841 2300 	strex	r3, r2, [r1]
 800ca08:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ca0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d1e5      	bne.n	800c9dc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca18:	d107      	bne.n	800ca2a <UART_Start_Receive_IT+0x102>
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	691b      	ldr	r3, [r3, #16]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d103      	bne.n	800ca2a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	4a21      	ldr	r2, [pc, #132]	@ (800caac <UART_Start_Receive_IT+0x184>)
 800ca26:	669a      	str	r2, [r3, #104]	@ 0x68
 800ca28:	e002      	b.n	800ca30 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	4a20      	ldr	r2, [pc, #128]	@ (800cab0 <UART_Start_Receive_IT+0x188>)
 800ca2e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	691b      	ldr	r3, [r3, #16]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d019      	beq.n	800ca6c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca40:	e853 3f00 	ldrex	r3, [r3]
 800ca44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ca46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca48:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800ca4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	461a      	mov	r2, r3
 800ca54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca56:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca58:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ca5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca5e:	e841 2300 	strex	r3, r2, [r1]
 800ca62:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ca64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d1e6      	bne.n	800ca38 <UART_Start_Receive_IT+0x110>
 800ca6a:	e018      	b.n	800ca9e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	e853 3f00 	ldrex	r3, [r3]
 800ca78:	613b      	str	r3, [r7, #16]
   return(result);
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	f043 0320 	orr.w	r3, r3, #32
 800ca80:	653b      	str	r3, [r7, #80]	@ 0x50
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	461a      	mov	r2, r3
 800ca88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca8a:	623b      	str	r3, [r7, #32]
 800ca8c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca8e:	69f9      	ldr	r1, [r7, #28]
 800ca90:	6a3a      	ldr	r2, [r7, #32]
 800ca92:	e841 2300 	strex	r3, r2, [r1]
 800ca96:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca98:	69bb      	ldr	r3, [r7, #24]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d1e6      	bne.n	800ca6c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800ca9e:	2300      	movs	r3, #0
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	375c      	adds	r7, #92	@ 0x5c
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr
 800caac:	0800d39f 	.word	0x0800d39f
 800cab0:	0800d1f7 	.word	0x0800d1f7

0800cab4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b096      	sub	sp, #88	@ 0x58
 800cab8:	af00      	add	r7, sp, #0
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	60b9      	str	r1, [r7, #8]
 800cabe:	4613      	mov	r3, r2
 800cac0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	68ba      	ldr	r2, [r7, #8]
 800cac6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	88fa      	ldrh	r2, [r7, #6]
 800cacc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2200      	movs	r2, #0
 800cad4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2222      	movs	r2, #34	@ 0x22
 800cadc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d028      	beq.n	800cb3a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800caec:	4a3e      	ldr	r2, [pc, #248]	@ (800cbe8 <UART_Start_Receive_DMA+0x134>)
 800caee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800caf4:	4a3d      	ldr	r2, [pc, #244]	@ (800cbec <UART_Start_Receive_DMA+0x138>)
 800caf6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cafc:	4a3c      	ldr	r2, [pc, #240]	@ (800cbf0 <UART_Start_Receive_DMA+0x13c>)
 800cafe:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb04:	2200      	movs	r2, #0
 800cb06:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	3324      	adds	r3, #36	@ 0x24
 800cb12:	4619      	mov	r1, r3
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb18:	461a      	mov	r2, r3
 800cb1a:	88fb      	ldrh	r3, [r7, #6]
 800cb1c:	f7f7 f90e 	bl	8003d3c <HAL_DMA_Start_IT>
 800cb20:	4603      	mov	r3, r0
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d009      	beq.n	800cb3a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2210      	movs	r2, #16
 800cb2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2220      	movs	r2, #32
 800cb32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800cb36:	2301      	movs	r3, #1
 800cb38:	e051      	b.n	800cbde <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	691b      	ldr	r3, [r3, #16]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d018      	beq.n	800cb74 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb4a:	e853 3f00 	ldrex	r3, [r3]
 800cb4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cb50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cb56:	657b      	str	r3, [r7, #84]	@ 0x54
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	461a      	mov	r2, r3
 800cb5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb60:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb62:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb64:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cb66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb68:	e841 2300 	strex	r3, r2, [r1]
 800cb6c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800cb6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d1e6      	bne.n	800cb42 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	3308      	adds	r3, #8
 800cb7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb7e:	e853 3f00 	ldrex	r3, [r3]
 800cb82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb86:	f043 0301 	orr.w	r3, r3, #1
 800cb8a:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	3308      	adds	r3, #8
 800cb92:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cb94:	637a      	str	r2, [r7, #52]	@ 0x34
 800cb96:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cb9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb9c:	e841 2300 	strex	r3, r2, [r1]
 800cba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800cba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d1e5      	bne.n	800cb74 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	3308      	adds	r3, #8
 800cbae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	e853 3f00 	ldrex	r3, [r3]
 800cbb6:	613b      	str	r3, [r7, #16]
   return(result);
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	3308      	adds	r3, #8
 800cbc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cbc8:	623a      	str	r2, [r7, #32]
 800cbca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbcc:	69f9      	ldr	r1, [r7, #28]
 800cbce:	6a3a      	ldr	r2, [r7, #32]
 800cbd0:	e841 2300 	strex	r3, r2, [r1]
 800cbd4:	61bb      	str	r3, [r7, #24]
   return(result);
 800cbd6:	69bb      	ldr	r3, [r7, #24]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d1e5      	bne.n	800cba8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800cbdc:	2300      	movs	r3, #0
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3758      	adds	r7, #88	@ 0x58
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}
 800cbe6:	bf00      	nop
 800cbe8:	0800cdbb 	.word	0x0800cdbb
 800cbec:	0800cf19 	.word	0x0800cf19
 800cbf0:	0800cf8b 	.word	0x0800cf8b

0800cbf4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b089      	sub	sp, #36	@ 0x24
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	e853 3f00 	ldrex	r3, [r3]
 800cc08:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cc10:	61fb      	str	r3, [r7, #28]
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	461a      	mov	r2, r3
 800cc18:	69fb      	ldr	r3, [r7, #28]
 800cc1a:	61bb      	str	r3, [r7, #24]
 800cc1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc1e:	6979      	ldr	r1, [r7, #20]
 800cc20:	69ba      	ldr	r2, [r7, #24]
 800cc22:	e841 2300 	strex	r3, r2, [r1]
 800cc26:	613b      	str	r3, [r7, #16]
   return(result);
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d1e6      	bne.n	800cbfc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2220      	movs	r2, #32
 800cc32:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800cc34:	bf00      	nop
 800cc36:	3724      	adds	r7, #36	@ 0x24
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3e:	4770      	bx	lr

0800cc40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cc40:	b480      	push	{r7}
 800cc42:	b095      	sub	sp, #84	@ 0x54
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc50:	e853 3f00 	ldrex	r3, [r3]
 800cc54:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cc56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cc5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	461a      	mov	r2, r3
 800cc64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc66:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc68:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cc6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cc6e:	e841 2300 	strex	r3, r2, [r1]
 800cc72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cc74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d1e6      	bne.n	800cc48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	3308      	adds	r3, #8
 800cc80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc82:	6a3b      	ldr	r3, [r7, #32]
 800cc84:	e853 3f00 	ldrex	r3, [r3]
 800cc88:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc8a:	69fb      	ldr	r3, [r7, #28]
 800cc8c:	f023 0301 	bic.w	r3, r3, #1
 800cc90:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	3308      	adds	r3, #8
 800cc98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cc9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cca0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cca2:	e841 2300 	strex	r3, r2, [r1]
 800cca6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d1e5      	bne.n	800cc7a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d118      	bne.n	800cce8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	e853 3f00 	ldrex	r3, [r3]
 800ccc2:	60bb      	str	r3, [r7, #8]
   return(result);
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	f023 0310 	bic.w	r3, r3, #16
 800ccca:	647b      	str	r3, [r7, #68]	@ 0x44
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccd4:	61bb      	str	r3, [r7, #24]
 800ccd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccd8:	6979      	ldr	r1, [r7, #20]
 800ccda:	69ba      	ldr	r2, [r7, #24]
 800ccdc:	e841 2300 	strex	r3, r2, [r1]
 800cce0:	613b      	str	r3, [r7, #16]
   return(result);
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d1e6      	bne.n	800ccb6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2220      	movs	r2, #32
 800ccec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ccfc:	bf00      	nop
 800ccfe:	3754      	adds	r7, #84	@ 0x54
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr

0800cd08 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b090      	sub	sp, #64	@ 0x40
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd14:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	69db      	ldr	r3, [r3, #28]
 800cd1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd1e:	d037      	beq.n	800cd90 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800cd20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd22:	2200      	movs	r2, #0
 800cd24:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cd28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	3308      	adds	r3, #8
 800cd2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd32:	e853 3f00 	ldrex	r3, [r3]
 800cd36:	623b      	str	r3, [r7, #32]
   return(result);
 800cd38:	6a3b      	ldr	r3, [r7, #32]
 800cd3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	3308      	adds	r3, #8
 800cd46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cd48:	633a      	str	r2, [r7, #48]	@ 0x30
 800cd4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd50:	e841 2300 	strex	r3, r2, [r1]
 800cd54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d1e5      	bne.n	800cd28 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cd5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	e853 3f00 	ldrex	r3, [r3]
 800cd68:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd70:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	461a      	mov	r2, r3
 800cd78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd7a:	61fb      	str	r3, [r7, #28]
 800cd7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd7e:	69b9      	ldr	r1, [r7, #24]
 800cd80:	69fa      	ldr	r2, [r7, #28]
 800cd82:	e841 2300 	strex	r3, r2, [r1]
 800cd86:	617b      	str	r3, [r7, #20]
   return(result);
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d1e6      	bne.n	800cd5c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cd8e:	e002      	b.n	800cd96 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800cd90:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cd92:	f011 f821 	bl	801ddd8 <HAL_UART_TxCpltCallback>
}
 800cd96:	bf00      	nop
 800cd98:	3740      	adds	r7, #64	@ 0x40
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}

0800cd9e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cd9e:	b580      	push	{r7, lr}
 800cda0:	b084      	sub	sp, #16
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdaa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800cdac:	68f8      	ldr	r0, [r7, #12]
 800cdae:	f7ff f9c7 	bl	800c140 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cdb2:	bf00      	nop
 800cdb4:	3710      	adds	r7, #16
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}

0800cdba <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cdba:	b580      	push	{r7, lr}
 800cdbc:	b09c      	sub	sp, #112	@ 0x70
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdc6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	69db      	ldr	r3, [r3, #28]
 800cdcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdd0:	d071      	beq.n	800ceb6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800cdd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cdda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cde2:	e853 3f00 	ldrex	r3, [r3]
 800cde6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800cde8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cdee:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cdf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cdf8:	657b      	str	r3, [r7, #84]	@ 0x54
 800cdfa:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdfc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cdfe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ce00:	e841 2300 	strex	r3, r2, [r1]
 800ce04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ce06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d1e6      	bne.n	800cdda <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	3308      	adds	r3, #8
 800ce12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce16:	e853 3f00 	ldrex	r3, [r3]
 800ce1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ce1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce1e:	f023 0301 	bic.w	r3, r3, #1
 800ce22:	667b      	str	r3, [r7, #100]	@ 0x64
 800ce24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	3308      	adds	r3, #8
 800ce2a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ce2c:	643a      	str	r2, [r7, #64]	@ 0x40
 800ce2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce34:	e841 2300 	strex	r3, r2, [r1]
 800ce38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ce3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d1e5      	bne.n	800ce0c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	3308      	adds	r3, #8
 800ce46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce48:	6a3b      	ldr	r3, [r7, #32]
 800ce4a:	e853 3f00 	ldrex	r3, [r3]
 800ce4e:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce50:	69fb      	ldr	r3, [r7, #28]
 800ce52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ce56:	663b      	str	r3, [r7, #96]	@ 0x60
 800ce58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	3308      	adds	r3, #8
 800ce5e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ce60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ce62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce68:	e841 2300 	strex	r3, r2, [r1]
 800ce6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ce6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d1e5      	bne.n	800ce40 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ce74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce76:	2220      	movs	r2, #32
 800ce78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce80:	2b01      	cmp	r3, #1
 800ce82:	d118      	bne.n	800ceb6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	e853 3f00 	ldrex	r3, [r3]
 800ce90:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	f023 0310 	bic.w	r3, r3, #16
 800ce98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ce9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	461a      	mov	r2, r3
 800cea0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cea2:	61bb      	str	r3, [r7, #24]
 800cea4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cea6:	6979      	ldr	r1, [r7, #20]
 800cea8:	69ba      	ldr	r2, [r7, #24]
 800ceaa:	e841 2300 	strex	r3, r2, [r1]
 800ceae:	613b      	str	r3, [r7, #16]
   return(result);
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d1e6      	bne.n	800ce84 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ceb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ceb8:	2200      	movs	r2, #0
 800ceba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cebc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d122      	bne.n	800cf0a <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800cec4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cec6:	2200      	movs	r2, #0
 800cec8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800ced6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ced8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cedc:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d204      	bcs.n	800ceee <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800cee4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cee6:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800ceea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ceee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cef0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800cef4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cef6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	1ad3      	subs	r3, r2, r3
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	4619      	mov	r1, r3
 800cf02:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cf04:	f7ff f93a 	bl	800c17c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cf08:	e002      	b.n	800cf10 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800cf0a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cf0c:	f010 ff84 	bl	801de18 <HAL_UART_RxCpltCallback>
}
 800cf10:	bf00      	nop
 800cf12:	3770      	adds	r7, #112	@ 0x70
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}

0800cf18 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b084      	sub	sp, #16
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf24:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d123      	bne.n	800cf7c <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cf3a:	085b      	lsrs	r3, r3, #1
 800cf3c:	b29a      	uxth	r2, r3
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	685b      	ldr	r3, [r3, #4]
 800cf4a:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800cf52:	897a      	ldrh	r2, [r7, #10]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d803      	bhi.n	800cf60 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	897a      	ldrh	r2, [r7, #10]
 800cf5c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cf6c:	b29b      	uxth	r3, r3
 800cf6e:	1ad3      	subs	r3, r2, r3
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	4619      	mov	r1, r3
 800cf74:	68f8      	ldr	r0, [r7, #12]
 800cf76:	f7ff f901 	bl	800c17c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cf7a:	e002      	b.n	800cf82 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800cf7c:	68f8      	ldr	r0, [r7, #12]
 800cf7e:	f7ff f8e9 	bl	800c154 <HAL_UART_RxHalfCpltCallback>
}
 800cf82:	bf00      	nop
 800cf84:	3710      	adds	r7, #16
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}

0800cf8a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cf8a:	b580      	push	{r7, lr}
 800cf8c:	b086      	sub	sp, #24
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf96:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cf9c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfa4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	689b      	ldr	r3, [r3, #8]
 800cfac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfb0:	2b80      	cmp	r3, #128	@ 0x80
 800cfb2:	d109      	bne.n	800cfc8 <UART_DMAError+0x3e>
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	2b21      	cmp	r3, #33	@ 0x21
 800cfb8:	d106      	bne.n	800cfc8 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800cfc2:	6978      	ldr	r0, [r7, #20]
 800cfc4:	f7ff fe16 	bl	800cbf4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	689b      	ldr	r3, [r3, #8]
 800cfce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfd2:	2b40      	cmp	r3, #64	@ 0x40
 800cfd4:	d109      	bne.n	800cfea <UART_DMAError+0x60>
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	2b22      	cmp	r3, #34	@ 0x22
 800cfda:	d106      	bne.n	800cfea <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800cfe4:	6978      	ldr	r0, [r7, #20]
 800cfe6:	f7ff fe2b 	bl	800cc40 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cff0:	f043 0210 	orr.w	r2, r3, #16
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cffa:	6978      	ldr	r0, [r7, #20]
 800cffc:	f7ff f8b4 	bl	800c168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d000:	bf00      	nop
 800d002:	3718      	adds	r7, #24
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d014:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2200      	movs	r2, #0
 800d01a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d01e:	68f8      	ldr	r0, [r7, #12]
 800d020:	f7ff f8a2 	bl	800c168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d024:	bf00      	nop
 800d026:	3710      	adds	r7, #16
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b08f      	sub	sp, #60	@ 0x3c
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d038:	2b21      	cmp	r3, #33	@ 0x21
 800d03a:	d14c      	bne.n	800d0d6 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d042:	b29b      	uxth	r3, r3
 800d044:	2b00      	cmp	r3, #0
 800d046:	d132      	bne.n	800d0ae <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d04e:	6a3b      	ldr	r3, [r7, #32]
 800d050:	e853 3f00 	ldrex	r3, [r3]
 800d054:	61fb      	str	r3, [r7, #28]
   return(result);
 800d056:	69fb      	ldr	r3, [r7, #28]
 800d058:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d05c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	461a      	mov	r2, r3
 800d064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d066:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d068:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d06a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d06c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d06e:	e841 2300 	strex	r3, r2, [r1]
 800d072:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d076:	2b00      	cmp	r3, #0
 800d078:	d1e6      	bne.n	800d048 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	e853 3f00 	ldrex	r3, [r3]
 800d086:	60bb      	str	r3, [r7, #8]
   return(result);
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d08e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	461a      	mov	r2, r3
 800d096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d098:	61bb      	str	r3, [r7, #24]
 800d09a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d09c:	6979      	ldr	r1, [r7, #20]
 800d09e:	69ba      	ldr	r2, [r7, #24]
 800d0a0:	e841 2300 	strex	r3, r2, [r1]
 800d0a4:	613b      	str	r3, [r7, #16]
   return(result);
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d1e6      	bne.n	800d07a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d0ac:	e013      	b.n	800d0d6 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d0b2:	781a      	ldrb	r2, [r3, #0]
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d0be:	1c5a      	adds	r2, r3, #1
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	3b01      	subs	r3, #1
 800d0ce:	b29a      	uxth	r2, r3
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800d0d6:	bf00      	nop
 800d0d8:	373c      	adds	r7, #60	@ 0x3c
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr

0800d0e2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d0e2:	b480      	push	{r7}
 800d0e4:	b091      	sub	sp, #68	@ 0x44
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d0ee:	2b21      	cmp	r3, #33	@ 0x21
 800d0f0:	d151      	bne.n	800d196 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d132      	bne.n	800d164 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d106:	e853 3f00 	ldrex	r3, [r3]
 800d10a:	623b      	str	r3, [r7, #32]
   return(result);
 800d10c:	6a3b      	ldr	r3, [r7, #32]
 800d10e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d112:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	461a      	mov	r2, r3
 800d11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d11c:	633b      	str	r3, [r7, #48]	@ 0x30
 800d11e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d120:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d124:	e841 2300 	strex	r3, r2, [r1]
 800d128:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d12a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d1e6      	bne.n	800d0fe <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	e853 3f00 	ldrex	r3, [r3]
 800d13c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d144:	637b      	str	r3, [r7, #52]	@ 0x34
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	461a      	mov	r2, r3
 800d14c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d14e:	61fb      	str	r3, [r7, #28]
 800d150:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d152:	69b9      	ldr	r1, [r7, #24]
 800d154:	69fa      	ldr	r2, [r7, #28]
 800d156:	e841 2300 	strex	r3, r2, [r1]
 800d15a:	617b      	str	r3, [r7, #20]
   return(result);
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d1e6      	bne.n	800d130 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d162:	e018      	b.n	800d196 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d168:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d16a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d16c:	881b      	ldrh	r3, [r3, #0]
 800d16e:	461a      	mov	r2, r3
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d178:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d17e:	1c9a      	adds	r2, r3, #2
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d18a:	b29b      	uxth	r3, r3
 800d18c:	3b01      	subs	r3, #1
 800d18e:	b29a      	uxth	r2, r3
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800d196:	bf00      	nop
 800d198:	3744      	adds	r7, #68	@ 0x44
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr

0800d1a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d1a2:	b580      	push	{r7, lr}
 800d1a4:	b088      	sub	sp, #32
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	e853 3f00 	ldrex	r3, [r3]
 800d1b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1be:	61fb      	str	r3, [r7, #28]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	61bb      	str	r3, [r7, #24]
 800d1ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1cc:	6979      	ldr	r1, [r7, #20]
 800d1ce:	69ba      	ldr	r2, [r7, #24]
 800d1d0:	e841 2300 	strex	r3, r2, [r1]
 800d1d4:	613b      	str	r3, [r7, #16]
   return(result);
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d1e6      	bne.n	800d1aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2220      	movs	r2, #32
 800d1e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f010 fdf5 	bl	801ddd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d1ee:	bf00      	nop
 800d1f0:	3720      	adds	r7, #32
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}

0800d1f6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d1f6:	b580      	push	{r7, lr}
 800d1f8:	b09c      	sub	sp, #112	@ 0x70
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d204:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d20e:	2b22      	cmp	r3, #34	@ 0x22
 800d210:	f040 80b9 	bne.w	800d386 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d21a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d21e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d222:	b2d9      	uxtb	r1, r3
 800d224:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d228:	b2da      	uxtb	r2, r3
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d22e:	400a      	ands	r2, r1
 800d230:	b2d2      	uxtb	r2, r2
 800d232:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d238:	1c5a      	adds	r2, r3, #1
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d244:	b29b      	uxth	r3, r3
 800d246:	3b01      	subs	r3, #1
 800d248:	b29a      	uxth	r2, r3
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d256:	b29b      	uxth	r3, r3
 800d258:	2b00      	cmp	r3, #0
 800d25a:	f040 809c 	bne.w	800d396 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d264:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d266:	e853 3f00 	ldrex	r3, [r3]
 800d26a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d26c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d26e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d272:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	461a      	mov	r2, r3
 800d27a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d27c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d27e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d280:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d282:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d284:	e841 2300 	strex	r3, r2, [r1]
 800d288:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d28a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d1e6      	bne.n	800d25e <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	3308      	adds	r3, #8
 800d296:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d29a:	e853 3f00 	ldrex	r3, [r3]
 800d29e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d2a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2a2:	f023 0301 	bic.w	r3, r3, #1
 800d2a6:	667b      	str	r3, [r7, #100]	@ 0x64
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	3308      	adds	r3, #8
 800d2ae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d2b0:	647a      	str	r2, [r7, #68]	@ 0x44
 800d2b2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d2b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d2b8:	e841 2300 	strex	r3, r2, [r1]
 800d2bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d2be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d1e5      	bne.n	800d290 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2220      	movs	r2, #32
 800d2c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d018      	beq.n	800d318 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ee:	e853 3f00 	ldrex	r3, [r3]
 800d2f2:	623b      	str	r3, [r7, #32]
   return(result);
 800d2f4:	6a3b      	ldr	r3, [r7, #32]
 800d2f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d2fa:	663b      	str	r3, [r7, #96]	@ 0x60
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	461a      	mov	r2, r3
 800d302:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d304:	633b      	str	r3, [r7, #48]	@ 0x30
 800d306:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d308:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d30a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d30c:	e841 2300 	strex	r3, r2, [r1]
 800d310:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d314:	2b00      	cmp	r3, #0
 800d316:	d1e6      	bne.n	800d2e6 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d12e      	bne.n	800d37e <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2200      	movs	r2, #0
 800d324:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	e853 3f00 	ldrex	r3, [r3]
 800d332:	60fb      	str	r3, [r7, #12]
   return(result);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f023 0310 	bic.w	r3, r3, #16
 800d33a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	461a      	mov	r2, r3
 800d342:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d344:	61fb      	str	r3, [r7, #28]
 800d346:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d348:	69b9      	ldr	r1, [r7, #24]
 800d34a:	69fa      	ldr	r2, [r7, #28]
 800d34c:	e841 2300 	strex	r3, r2, [r1]
 800d350:	617b      	str	r3, [r7, #20]
   return(result);
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d1e6      	bne.n	800d326 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	69db      	ldr	r3, [r3, #28]
 800d35e:	f003 0310 	and.w	r3, r3, #16
 800d362:	2b10      	cmp	r3, #16
 800d364:	d103      	bne.n	800d36e <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	2210      	movs	r2, #16
 800d36c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d374:	4619      	mov	r1, r3
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f7fe ff00 	bl	800c17c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d37c:	e00b      	b.n	800d396 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f010 fd4a 	bl	801de18 <HAL_UART_RxCpltCallback>
}
 800d384:	e007      	b.n	800d396 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	699a      	ldr	r2, [r3, #24]
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f042 0208 	orr.w	r2, r2, #8
 800d394:	619a      	str	r2, [r3, #24]
}
 800d396:	bf00      	nop
 800d398:	3770      	adds	r7, #112	@ 0x70
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}

0800d39e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d39e:	b580      	push	{r7, lr}
 800d3a0:	b09c      	sub	sp, #112	@ 0x70
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d3ac:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d3b6:	2b22      	cmp	r3, #34	@ 0x22
 800d3b8:	f040 80b9 	bne.w	800d52e <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3c2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3ca:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800d3cc:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800d3d0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d3d4:	4013      	ands	r3, r2
 800d3d6:	b29a      	uxth	r2, r3
 800d3d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3da:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3e0:	1c9a      	adds	r2, r3, #2
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	3b01      	subs	r3, #1
 800d3f0:	b29a      	uxth	r2, r3
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800d3fe:	b29b      	uxth	r3, r3
 800d400:	2b00      	cmp	r3, #0
 800d402:	f040 809c 	bne.w	800d53e <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d40c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d40e:	e853 3f00 	ldrex	r3, [r3]
 800d412:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d414:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d416:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d41a:	667b      	str	r3, [r7, #100]	@ 0x64
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	461a      	mov	r2, r3
 800d422:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d424:	657b      	str	r3, [r7, #84]	@ 0x54
 800d426:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d428:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d42a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d42c:	e841 2300 	strex	r3, r2, [r1]
 800d430:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d432:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d434:	2b00      	cmp	r3, #0
 800d436:	d1e6      	bne.n	800d406 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	3308      	adds	r3, #8
 800d43e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d442:	e853 3f00 	ldrex	r3, [r3]
 800d446:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d44a:	f023 0301 	bic.w	r3, r3, #1
 800d44e:	663b      	str	r3, [r7, #96]	@ 0x60
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	3308      	adds	r3, #8
 800d456:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d458:	643a      	str	r2, [r7, #64]	@ 0x40
 800d45a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d45c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d45e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d460:	e841 2300 	strex	r3, r2, [r1]
 800d464:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d1e5      	bne.n	800d438 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2220      	movs	r2, #32
 800d470:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2200      	movs	r2, #0
 800d478:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2200      	movs	r2, #0
 800d47e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	685b      	ldr	r3, [r3, #4]
 800d486:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d018      	beq.n	800d4c0 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d494:	6a3b      	ldr	r3, [r7, #32]
 800d496:	e853 3f00 	ldrex	r3, [r3]
 800d49a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d49c:	69fb      	ldr	r3, [r7, #28]
 800d49e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d4a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4ae:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d4b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4b4:	e841 2300 	strex	r3, r2, [r1]
 800d4b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d1e6      	bne.n	800d48e <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d4c4:	2b01      	cmp	r3, #1
 800d4c6:	d12e      	bne.n	800d526 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	e853 3f00 	ldrex	r3, [r3]
 800d4da:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	f023 0310 	bic.w	r3, r3, #16
 800d4e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d4ec:	61bb      	str	r3, [r7, #24]
 800d4ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f0:	6979      	ldr	r1, [r7, #20]
 800d4f2:	69ba      	ldr	r2, [r7, #24]
 800d4f4:	e841 2300 	strex	r3, r2, [r1]
 800d4f8:	613b      	str	r3, [r7, #16]
   return(result);
 800d4fa:	693b      	ldr	r3, [r7, #16]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d1e6      	bne.n	800d4ce <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	69db      	ldr	r3, [r3, #28]
 800d506:	f003 0310 	and.w	r3, r3, #16
 800d50a:	2b10      	cmp	r3, #16
 800d50c:	d103      	bne.n	800d516 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	2210      	movs	r2, #16
 800d514:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d51c:	4619      	mov	r1, r3
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f7fe fe2c 	bl	800c17c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d524:	e00b      	b.n	800d53e <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f010 fc76 	bl	801de18 <HAL_UART_RxCpltCallback>
}
 800d52c:	e007      	b.n	800d53e <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	699a      	ldr	r2, [r3, #24]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f042 0208 	orr.w	r2, r2, #8
 800d53c:	619a      	str	r2, [r3, #24]
}
 800d53e:	bf00      	nop
 800d540:	3770      	adds	r7, #112	@ 0x70
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
	...

0800d548 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d548:	b084      	sub	sp, #16
 800d54a:	b580      	push	{r7, lr}
 800d54c:	b084      	sub	sp, #16
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6078      	str	r0, [r7, #4]
 800d552:	f107 001c 	add.w	r0, r7, #28
 800d556:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d55a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d55e:	2b01      	cmp	r3, #1
 800d560:	d121      	bne.n	800d5a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d566:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	68da      	ldr	r2, [r3, #12]
 800d572:	4b21      	ldr	r3, [pc, #132]	@ (800d5f8 <USB_CoreInit+0xb0>)
 800d574:	4013      	ands	r3, r2
 800d576:	687a      	ldr	r2, [r7, #4]
 800d578:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	68db      	ldr	r3, [r3, #12]
 800d57e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d586:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d58a:	2b01      	cmp	r3, #1
 800d58c:	d105      	bne.n	800d59a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f000 fa92 	bl	800dac4 <USB_CoreReset>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	73fb      	strb	r3, [r7, #15]
 800d5a4:	e010      	b.n	800d5c8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	68db      	ldr	r3, [r3, #12]
 800d5aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f000 fa86 	bl	800dac4 <USB_CoreReset>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800d5c8:	7fbb      	ldrb	r3, [r7, #30]
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	d10b      	bne.n	800d5e6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	689b      	ldr	r3, [r3, #8]
 800d5d2:	f043 0206 	orr.w	r2, r3, #6
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	689b      	ldr	r3, [r3, #8]
 800d5de:	f043 0220 	orr.w	r2, r3, #32
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d5e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3710      	adds	r7, #16
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d5f2:	b004      	add	sp, #16
 800d5f4:	4770      	bx	lr
 800d5f6:	bf00      	nop
 800d5f8:	ffbdffbf 	.word	0xffbdffbf

0800d5fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	689b      	ldr	r3, [r3, #8]
 800d608:	f023 0201 	bic.w	r2, r3, #1
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d610:	2300      	movs	r3, #0
}
 800d612:	4618      	mov	r0, r3
 800d614:	370c      	adds	r7, #12
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr

0800d61e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d61e:	b580      	push	{r7, lr}
 800d620:	b084      	sub	sp, #16
 800d622:	af00      	add	r7, sp, #0
 800d624:	6078      	str	r0, [r7, #4]
 800d626:	460b      	mov	r3, r1
 800d628:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d62a:	2300      	movs	r3, #0
 800d62c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	68db      	ldr	r3, [r3, #12]
 800d632:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d63a:	78fb      	ldrb	r3, [r7, #3]
 800d63c:	2b01      	cmp	r3, #1
 800d63e:	d115      	bne.n	800d66c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	68db      	ldr	r3, [r3, #12]
 800d644:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d64c:	200a      	movs	r0, #10
 800d64e:	f7f5 f8e1 	bl	8002814 <HAL_Delay>
      ms += 10U;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	330a      	adds	r3, #10
 800d656:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f000 fa25 	bl	800daa8 <USB_GetMode>
 800d65e:	4603      	mov	r3, r0
 800d660:	2b01      	cmp	r3, #1
 800d662:	d01e      	beq.n	800d6a2 <USB_SetCurrentMode+0x84>
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2bc7      	cmp	r3, #199	@ 0xc7
 800d668:	d9f0      	bls.n	800d64c <USB_SetCurrentMode+0x2e>
 800d66a:	e01a      	b.n	800d6a2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d66c:	78fb      	ldrb	r3, [r7, #3]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d115      	bne.n	800d69e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	68db      	ldr	r3, [r3, #12]
 800d676:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d67e:	200a      	movs	r0, #10
 800d680:	f7f5 f8c8 	bl	8002814 <HAL_Delay>
      ms += 10U;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	330a      	adds	r3, #10
 800d688:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f000 fa0c 	bl	800daa8 <USB_GetMode>
 800d690:	4603      	mov	r3, r0
 800d692:	2b00      	cmp	r3, #0
 800d694:	d005      	beq.n	800d6a2 <USB_SetCurrentMode+0x84>
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	2bc7      	cmp	r3, #199	@ 0xc7
 800d69a:	d9f0      	bls.n	800d67e <USB_SetCurrentMode+0x60>
 800d69c:	e001      	b.n	800d6a2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e005      	b.n	800d6ae <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2bc8      	cmp	r3, #200	@ 0xc8
 800d6a6:	d101      	bne.n	800d6ac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	e000      	b.n	800d6ae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d6ac:	2300      	movs	r3, #0
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3710      	adds	r7, #16
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
	...

0800d6b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d6b8:	b084      	sub	sp, #16
 800d6ba:	b580      	push	{r7, lr}
 800d6bc:	b086      	sub	sp, #24
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
 800d6c2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d6c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	613b      	str	r3, [r7, #16]
 800d6d6:	e009      	b.n	800d6ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	3340      	adds	r3, #64	@ 0x40
 800d6de:	009b      	lsls	r3, r3, #2
 800d6e0:	4413      	add	r3, r2
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	613b      	str	r3, [r7, #16]
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	2b0e      	cmp	r3, #14
 800d6f0:	d9f2      	bls.n	800d6d8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d6f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d11c      	bne.n	800d734 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	68fa      	ldr	r2, [r7, #12]
 800d704:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d708:	f043 0302 	orr.w	r3, r3, #2
 800d70c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d712:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	601a      	str	r2, [r3, #0]
 800d732:	e005      	b.n	800d740 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d738:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d746:	461a      	mov	r2, r3
 800d748:	2300      	movs	r3, #0
 800d74a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d74c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d750:	2b01      	cmp	r3, #1
 800d752:	d10d      	bne.n	800d770 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d754:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d104      	bne.n	800d766 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d75c:	2100      	movs	r1, #0
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 f968 	bl	800da34 <USB_SetDevSpeed>
 800d764:	e008      	b.n	800d778 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d766:	2101      	movs	r1, #1
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f000 f963 	bl	800da34 <USB_SetDevSpeed>
 800d76e:	e003      	b.n	800d778 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d770:	2103      	movs	r1, #3
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f000 f95e 	bl	800da34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d778:	2110      	movs	r1, #16
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f000 f8fa 	bl	800d974 <USB_FlushTxFifo>
 800d780:	4603      	mov	r3, r0
 800d782:	2b00      	cmp	r3, #0
 800d784:	d001      	beq.n	800d78a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800d786:	2301      	movs	r3, #1
 800d788:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 f924 	bl	800d9d8 <USB_FlushRxFifo>
 800d790:	4603      	mov	r3, r0
 800d792:	2b00      	cmp	r3, #0
 800d794:	d001      	beq.n	800d79a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800d796:	2301      	movs	r3, #1
 800d798:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d7be:	2300      	movs	r3, #0
 800d7c0:	613b      	str	r3, [r7, #16]
 800d7c2:	e043      	b.n	800d84c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	015a      	lsls	r2, r3, #5
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	4413      	add	r3, r2
 800d7cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d7d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d7da:	d118      	bne.n	800d80e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d10a      	bne.n	800d7f8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	015a      	lsls	r2, r3, #5
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	4413      	add	r3, r2
 800d7ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d7ee:	461a      	mov	r2, r3
 800d7f0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d7f4:	6013      	str	r3, [r2, #0]
 800d7f6:	e013      	b.n	800d820 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	015a      	lsls	r2, r3, #5
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	4413      	add	r3, r2
 800d800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d804:	461a      	mov	r2, r3
 800d806:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d80a:	6013      	str	r3, [r2, #0]
 800d80c:	e008      	b.n	800d820 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	015a      	lsls	r2, r3, #5
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	4413      	add	r3, r2
 800d816:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d81a:	461a      	mov	r2, r3
 800d81c:	2300      	movs	r3, #0
 800d81e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	015a      	lsls	r2, r3, #5
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	4413      	add	r3, r2
 800d828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d82c:	461a      	mov	r2, r3
 800d82e:	2300      	movs	r3, #0
 800d830:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	015a      	lsls	r2, r3, #5
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	4413      	add	r3, r2
 800d83a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d83e:	461a      	mov	r2, r3
 800d840:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d844:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	3301      	adds	r3, #1
 800d84a:	613b      	str	r3, [r7, #16]
 800d84c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d850:	461a      	mov	r2, r3
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	4293      	cmp	r3, r2
 800d856:	d3b5      	bcc.n	800d7c4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d858:	2300      	movs	r3, #0
 800d85a:	613b      	str	r3, [r7, #16]
 800d85c:	e043      	b.n	800d8e6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	015a      	lsls	r2, r3, #5
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	4413      	add	r3, r2
 800d866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d870:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d874:	d118      	bne.n	800d8a8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d10a      	bne.n	800d892 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	015a      	lsls	r2, r3, #5
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	4413      	add	r3, r2
 800d884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d888:	461a      	mov	r2, r3
 800d88a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d88e:	6013      	str	r3, [r2, #0]
 800d890:	e013      	b.n	800d8ba <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	015a      	lsls	r2, r3, #5
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	4413      	add	r3, r2
 800d89a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d89e:	461a      	mov	r2, r3
 800d8a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d8a4:	6013      	str	r3, [r2, #0]
 800d8a6:	e008      	b.n	800d8ba <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d8a8:	693b      	ldr	r3, [r7, #16]
 800d8aa:	015a      	lsls	r2, r3, #5
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	4413      	add	r3, r2
 800d8b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	015a      	lsls	r2, r3, #5
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	4413      	add	r3, r2
 800d8c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8c6:	461a      	mov	r2, r3
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	015a      	lsls	r2, r3, #5
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d8d8:	461a      	mov	r2, r3
 800d8da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d8de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d8e0:	693b      	ldr	r3, [r7, #16]
 800d8e2:	3301      	adds	r3, #1
 800d8e4:	613b      	str	r3, [r7, #16]
 800d8e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d3b5      	bcc.n	800d85e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d8f8:	691b      	ldr	r3, [r3, #16]
 800d8fa:	68fa      	ldr	r2, [r7, #12]
 800d8fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d900:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d904:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2200      	movs	r2, #0
 800d90a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d912:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d914:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d105      	bne.n	800d928 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	699b      	ldr	r3, [r3, #24]
 800d920:	f043 0210 	orr.w	r2, r3, #16
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	699a      	ldr	r2, [r3, #24]
 800d92c:	4b0f      	ldr	r3, [pc, #60]	@ (800d96c <USB_DevInit+0x2b4>)
 800d92e:	4313      	orrs	r3, r2
 800d930:	687a      	ldr	r2, [r7, #4]
 800d932:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d934:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d005      	beq.n	800d948 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	699b      	ldr	r3, [r3, #24]
 800d940:	f043 0208 	orr.w	r2, r3, #8
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d948:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d105      	bne.n	800d95c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	699a      	ldr	r2, [r3, #24]
 800d954:	4b06      	ldr	r3, [pc, #24]	@ (800d970 <USB_DevInit+0x2b8>)
 800d956:	4313      	orrs	r3, r2
 800d958:	687a      	ldr	r2, [r7, #4]
 800d95a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d95c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3718      	adds	r7, #24
 800d962:	46bd      	mov	sp, r7
 800d964:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d968:	b004      	add	sp, #16
 800d96a:	4770      	bx	lr
 800d96c:	803c3800 	.word	0x803c3800
 800d970:	40000004 	.word	0x40000004

0800d974 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d974:	b480      	push	{r7}
 800d976:	b085      	sub	sp, #20
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d97e:	2300      	movs	r3, #0
 800d980:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	3301      	adds	r3, #1
 800d986:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d98e:	d901      	bls.n	800d994 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d990:	2303      	movs	r3, #3
 800d992:	e01b      	b.n	800d9cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	691b      	ldr	r3, [r3, #16]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	daf2      	bge.n	800d982 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d99c:	2300      	movs	r3, #0
 800d99e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	019b      	lsls	r3, r3, #6
 800d9a4:	f043 0220 	orr.w	r2, r3, #32
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d9b8:	d901      	bls.n	800d9be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d9ba:	2303      	movs	r3, #3
 800d9bc:	e006      	b.n	800d9cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	691b      	ldr	r3, [r3, #16]
 800d9c2:	f003 0320 	and.w	r3, r3, #32
 800d9c6:	2b20      	cmp	r3, #32
 800d9c8:	d0f0      	beq.n	800d9ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d9ca:	2300      	movs	r3, #0
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3714      	adds	r7, #20
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr

0800d9d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b085      	sub	sp, #20
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d9f0:	d901      	bls.n	800d9f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d9f2:	2303      	movs	r3, #3
 800d9f4:	e018      	b.n	800da28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	691b      	ldr	r3, [r3, #16]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	daf2      	bge.n	800d9e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d9fe:	2300      	movs	r3, #0
 800da00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2210      	movs	r2, #16
 800da06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	3301      	adds	r3, #1
 800da0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800da14:	d901      	bls.n	800da1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800da16:	2303      	movs	r3, #3
 800da18:	e006      	b.n	800da28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	691b      	ldr	r3, [r3, #16]
 800da1e:	f003 0310 	and.w	r3, r3, #16
 800da22:	2b10      	cmp	r3, #16
 800da24:	d0f0      	beq.n	800da08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800da26:	2300      	movs	r3, #0
}
 800da28:	4618      	mov	r0, r3
 800da2a:	3714      	adds	r7, #20
 800da2c:	46bd      	mov	sp, r7
 800da2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da32:	4770      	bx	lr

0800da34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800da34:	b480      	push	{r7}
 800da36:	b085      	sub	sp, #20
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	460b      	mov	r3, r1
 800da3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da4a:	681a      	ldr	r2, [r3, #0]
 800da4c:	78fb      	ldrb	r3, [r7, #3]
 800da4e:	68f9      	ldr	r1, [r7, #12]
 800da50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800da54:	4313      	orrs	r3, r2
 800da56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800da58:	2300      	movs	r3, #0
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3714      	adds	r7, #20
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr

0800da66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800da66:	b480      	push	{r7}
 800da68:	b085      	sub	sp, #20
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	68fa      	ldr	r2, [r7, #12]
 800da7c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800da80:	f023 0303 	bic.w	r3, r3, #3
 800da84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	68fa      	ldr	r2, [r7, #12]
 800da90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800da94:	f043 0302 	orr.w	r3, r3, #2
 800da98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800da9a:	2300      	movs	r3, #0
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3714      	adds	r7, #20
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr

0800daa8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b083      	sub	sp, #12
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	695b      	ldr	r3, [r3, #20]
 800dab4:	f003 0301 	and.w	r3, r3, #1
}
 800dab8:	4618      	mov	r0, r3
 800daba:	370c      	adds	r7, #12
 800dabc:	46bd      	mov	sp, r7
 800dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac2:	4770      	bx	lr

0800dac4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dac4:	b480      	push	{r7}
 800dac6:	b085      	sub	sp, #20
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dacc:	2300      	movs	r3, #0
 800dace:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	3301      	adds	r3, #1
 800dad4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dadc:	d901      	bls.n	800dae2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800dade:	2303      	movs	r3, #3
 800dae0:	e022      	b.n	800db28 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	691b      	ldr	r3, [r3, #16]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	daf2      	bge.n	800dad0 <USB_CoreReset+0xc>

  count = 10U;
 800daea:	230a      	movs	r3, #10
 800daec:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800daee:	e002      	b.n	800daf6 <USB_CoreReset+0x32>
  {
    count--;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	3b01      	subs	r3, #1
 800daf4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d1f9      	bne.n	800daf0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	691b      	ldr	r3, [r3, #16]
 800db00:	f043 0201 	orr.w	r2, r3, #1
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	3301      	adds	r3, #1
 800db0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800db14:	d901      	bls.n	800db1a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800db16:	2303      	movs	r3, #3
 800db18:	e006      	b.n	800db28 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	691b      	ldr	r3, [r3, #16]
 800db1e:	f003 0301 	and.w	r3, r3, #1
 800db22:	2b01      	cmp	r3, #1
 800db24:	d0f0      	beq.n	800db08 <USB_CoreReset+0x44>

  return HAL_OK;
 800db26:	2300      	movs	r3, #0
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3714      	adds	r7, #20
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr

0800db34 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800db3a:	4b92      	ldr	r3, [pc, #584]	@ (800dd84 <MX_LWIP_Init+0x250>)
 800db3c:	22c0      	movs	r2, #192	@ 0xc0
 800db3e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800db40:	4b90      	ldr	r3, [pc, #576]	@ (800dd84 <MX_LWIP_Init+0x250>)
 800db42:	22a8      	movs	r2, #168	@ 0xa8
 800db44:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800db46:	4b8f      	ldr	r3, [pc, #572]	@ (800dd84 <MX_LWIP_Init+0x250>)
 800db48:	2201      	movs	r2, #1
 800db4a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 168;
 800db4c:	4b8d      	ldr	r3, [pc, #564]	@ (800dd84 <MX_LWIP_Init+0x250>)
 800db4e:	22a8      	movs	r2, #168	@ 0xa8
 800db50:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800db52:	4b8d      	ldr	r3, [pc, #564]	@ (800dd88 <MX_LWIP_Init+0x254>)
 800db54:	22ff      	movs	r2, #255	@ 0xff
 800db56:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800db58:	4b8b      	ldr	r3, [pc, #556]	@ (800dd88 <MX_LWIP_Init+0x254>)
 800db5a:	22ff      	movs	r2, #255	@ 0xff
 800db5c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800db5e:	4b8a      	ldr	r3, [pc, #552]	@ (800dd88 <MX_LWIP_Init+0x254>)
 800db60:	22ff      	movs	r2, #255	@ 0xff
 800db62:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800db64:	4b88      	ldr	r3, [pc, #544]	@ (800dd88 <MX_LWIP_Init+0x254>)
 800db66:	2200      	movs	r2, #0
 800db68:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800db6a:	4b88      	ldr	r3, [pc, #544]	@ (800dd8c <MX_LWIP_Init+0x258>)
 800db6c:	2200      	movs	r2, #0
 800db6e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800db70:	4b86      	ldr	r3, [pc, #536]	@ (800dd8c <MX_LWIP_Init+0x258>)
 800db72:	2200      	movs	r2, #0
 800db74:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800db76:	4b85      	ldr	r3, [pc, #532]	@ (800dd8c <MX_LWIP_Init+0x258>)
 800db78:	2200      	movs	r2, #0
 800db7a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800db7c:	4b83      	ldr	r3, [pc, #524]	@ (800dd8c <MX_LWIP_Init+0x258>)
 800db7e:	2200      	movs	r2, #0
 800db80:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800db82:	2100      	movs	r1, #0
 800db84:	2000      	movs	r0, #0
 800db86:	f005 f861 	bl	8012c4c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800db8a:	4b7e      	ldr	r3, [pc, #504]	@ (800dd84 <MX_LWIP_Init+0x250>)
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	061a      	lsls	r2, r3, #24
 800db90:	4b7c      	ldr	r3, [pc, #496]	@ (800dd84 <MX_LWIP_Init+0x250>)
 800db92:	785b      	ldrb	r3, [r3, #1]
 800db94:	041b      	lsls	r3, r3, #16
 800db96:	431a      	orrs	r2, r3
 800db98:	4b7a      	ldr	r3, [pc, #488]	@ (800dd84 <MX_LWIP_Init+0x250>)
 800db9a:	789b      	ldrb	r3, [r3, #2]
 800db9c:	021b      	lsls	r3, r3, #8
 800db9e:	4313      	orrs	r3, r2
 800dba0:	4a78      	ldr	r2, [pc, #480]	@ (800dd84 <MX_LWIP_Init+0x250>)
 800dba2:	78d2      	ldrb	r2, [r2, #3]
 800dba4:	4313      	orrs	r3, r2
 800dba6:	061a      	lsls	r2, r3, #24
 800dba8:	4b76      	ldr	r3, [pc, #472]	@ (800dd84 <MX_LWIP_Init+0x250>)
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	0619      	lsls	r1, r3, #24
 800dbae:	4b75      	ldr	r3, [pc, #468]	@ (800dd84 <MX_LWIP_Init+0x250>)
 800dbb0:	785b      	ldrb	r3, [r3, #1]
 800dbb2:	041b      	lsls	r3, r3, #16
 800dbb4:	4319      	orrs	r1, r3
 800dbb6:	4b73      	ldr	r3, [pc, #460]	@ (800dd84 <MX_LWIP_Init+0x250>)
 800dbb8:	789b      	ldrb	r3, [r3, #2]
 800dbba:	021b      	lsls	r3, r3, #8
 800dbbc:	430b      	orrs	r3, r1
 800dbbe:	4971      	ldr	r1, [pc, #452]	@ (800dd84 <MX_LWIP_Init+0x250>)
 800dbc0:	78c9      	ldrb	r1, [r1, #3]
 800dbc2:	430b      	orrs	r3, r1
 800dbc4:	021b      	lsls	r3, r3, #8
 800dbc6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dbca:	431a      	orrs	r2, r3
 800dbcc:	4b6d      	ldr	r3, [pc, #436]	@ (800dd84 <MX_LWIP_Init+0x250>)
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	0619      	lsls	r1, r3, #24
 800dbd2:	4b6c      	ldr	r3, [pc, #432]	@ (800dd84 <MX_LWIP_Init+0x250>)
 800dbd4:	785b      	ldrb	r3, [r3, #1]
 800dbd6:	041b      	lsls	r3, r3, #16
 800dbd8:	4319      	orrs	r1, r3
 800dbda:	4b6a      	ldr	r3, [pc, #424]	@ (800dd84 <MX_LWIP_Init+0x250>)
 800dbdc:	789b      	ldrb	r3, [r3, #2]
 800dbde:	021b      	lsls	r3, r3, #8
 800dbe0:	430b      	orrs	r3, r1
 800dbe2:	4968      	ldr	r1, [pc, #416]	@ (800dd84 <MX_LWIP_Init+0x250>)
 800dbe4:	78c9      	ldrb	r1, [r1, #3]
 800dbe6:	430b      	orrs	r3, r1
 800dbe8:	0a1b      	lsrs	r3, r3, #8
 800dbea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dbee:	431a      	orrs	r2, r3
 800dbf0:	4b64      	ldr	r3, [pc, #400]	@ (800dd84 <MX_LWIP_Init+0x250>)
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	0619      	lsls	r1, r3, #24
 800dbf6:	4b63      	ldr	r3, [pc, #396]	@ (800dd84 <MX_LWIP_Init+0x250>)
 800dbf8:	785b      	ldrb	r3, [r3, #1]
 800dbfa:	041b      	lsls	r3, r3, #16
 800dbfc:	4319      	orrs	r1, r3
 800dbfe:	4b61      	ldr	r3, [pc, #388]	@ (800dd84 <MX_LWIP_Init+0x250>)
 800dc00:	789b      	ldrb	r3, [r3, #2]
 800dc02:	021b      	lsls	r3, r3, #8
 800dc04:	430b      	orrs	r3, r1
 800dc06:	495f      	ldr	r1, [pc, #380]	@ (800dd84 <MX_LWIP_Init+0x250>)
 800dc08:	78c9      	ldrb	r1, [r1, #3]
 800dc0a:	430b      	orrs	r3, r1
 800dc0c:	0e1b      	lsrs	r3, r3, #24
 800dc0e:	4313      	orrs	r3, r2
 800dc10:	4a5f      	ldr	r2, [pc, #380]	@ (800dd90 <MX_LWIP_Init+0x25c>)
 800dc12:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800dc14:	4b5c      	ldr	r3, [pc, #368]	@ (800dd88 <MX_LWIP_Init+0x254>)
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	061a      	lsls	r2, r3, #24
 800dc1a:	4b5b      	ldr	r3, [pc, #364]	@ (800dd88 <MX_LWIP_Init+0x254>)
 800dc1c:	785b      	ldrb	r3, [r3, #1]
 800dc1e:	041b      	lsls	r3, r3, #16
 800dc20:	431a      	orrs	r2, r3
 800dc22:	4b59      	ldr	r3, [pc, #356]	@ (800dd88 <MX_LWIP_Init+0x254>)
 800dc24:	789b      	ldrb	r3, [r3, #2]
 800dc26:	021b      	lsls	r3, r3, #8
 800dc28:	4313      	orrs	r3, r2
 800dc2a:	4a57      	ldr	r2, [pc, #348]	@ (800dd88 <MX_LWIP_Init+0x254>)
 800dc2c:	78d2      	ldrb	r2, [r2, #3]
 800dc2e:	4313      	orrs	r3, r2
 800dc30:	061a      	lsls	r2, r3, #24
 800dc32:	4b55      	ldr	r3, [pc, #340]	@ (800dd88 <MX_LWIP_Init+0x254>)
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	0619      	lsls	r1, r3, #24
 800dc38:	4b53      	ldr	r3, [pc, #332]	@ (800dd88 <MX_LWIP_Init+0x254>)
 800dc3a:	785b      	ldrb	r3, [r3, #1]
 800dc3c:	041b      	lsls	r3, r3, #16
 800dc3e:	4319      	orrs	r1, r3
 800dc40:	4b51      	ldr	r3, [pc, #324]	@ (800dd88 <MX_LWIP_Init+0x254>)
 800dc42:	789b      	ldrb	r3, [r3, #2]
 800dc44:	021b      	lsls	r3, r3, #8
 800dc46:	430b      	orrs	r3, r1
 800dc48:	494f      	ldr	r1, [pc, #316]	@ (800dd88 <MX_LWIP_Init+0x254>)
 800dc4a:	78c9      	ldrb	r1, [r1, #3]
 800dc4c:	430b      	orrs	r3, r1
 800dc4e:	021b      	lsls	r3, r3, #8
 800dc50:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dc54:	431a      	orrs	r2, r3
 800dc56:	4b4c      	ldr	r3, [pc, #304]	@ (800dd88 <MX_LWIP_Init+0x254>)
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	0619      	lsls	r1, r3, #24
 800dc5c:	4b4a      	ldr	r3, [pc, #296]	@ (800dd88 <MX_LWIP_Init+0x254>)
 800dc5e:	785b      	ldrb	r3, [r3, #1]
 800dc60:	041b      	lsls	r3, r3, #16
 800dc62:	4319      	orrs	r1, r3
 800dc64:	4b48      	ldr	r3, [pc, #288]	@ (800dd88 <MX_LWIP_Init+0x254>)
 800dc66:	789b      	ldrb	r3, [r3, #2]
 800dc68:	021b      	lsls	r3, r3, #8
 800dc6a:	430b      	orrs	r3, r1
 800dc6c:	4946      	ldr	r1, [pc, #280]	@ (800dd88 <MX_LWIP_Init+0x254>)
 800dc6e:	78c9      	ldrb	r1, [r1, #3]
 800dc70:	430b      	orrs	r3, r1
 800dc72:	0a1b      	lsrs	r3, r3, #8
 800dc74:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dc78:	431a      	orrs	r2, r3
 800dc7a:	4b43      	ldr	r3, [pc, #268]	@ (800dd88 <MX_LWIP_Init+0x254>)
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	0619      	lsls	r1, r3, #24
 800dc80:	4b41      	ldr	r3, [pc, #260]	@ (800dd88 <MX_LWIP_Init+0x254>)
 800dc82:	785b      	ldrb	r3, [r3, #1]
 800dc84:	041b      	lsls	r3, r3, #16
 800dc86:	4319      	orrs	r1, r3
 800dc88:	4b3f      	ldr	r3, [pc, #252]	@ (800dd88 <MX_LWIP_Init+0x254>)
 800dc8a:	789b      	ldrb	r3, [r3, #2]
 800dc8c:	021b      	lsls	r3, r3, #8
 800dc8e:	430b      	orrs	r3, r1
 800dc90:	493d      	ldr	r1, [pc, #244]	@ (800dd88 <MX_LWIP_Init+0x254>)
 800dc92:	78c9      	ldrb	r1, [r1, #3]
 800dc94:	430b      	orrs	r3, r1
 800dc96:	0e1b      	lsrs	r3, r3, #24
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	4a3e      	ldr	r2, [pc, #248]	@ (800dd94 <MX_LWIP_Init+0x260>)
 800dc9c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800dc9e:	4b3b      	ldr	r3, [pc, #236]	@ (800dd8c <MX_LWIP_Init+0x258>)
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	061a      	lsls	r2, r3, #24
 800dca4:	4b39      	ldr	r3, [pc, #228]	@ (800dd8c <MX_LWIP_Init+0x258>)
 800dca6:	785b      	ldrb	r3, [r3, #1]
 800dca8:	041b      	lsls	r3, r3, #16
 800dcaa:	431a      	orrs	r2, r3
 800dcac:	4b37      	ldr	r3, [pc, #220]	@ (800dd8c <MX_LWIP_Init+0x258>)
 800dcae:	789b      	ldrb	r3, [r3, #2]
 800dcb0:	021b      	lsls	r3, r3, #8
 800dcb2:	4313      	orrs	r3, r2
 800dcb4:	4a35      	ldr	r2, [pc, #212]	@ (800dd8c <MX_LWIP_Init+0x258>)
 800dcb6:	78d2      	ldrb	r2, [r2, #3]
 800dcb8:	4313      	orrs	r3, r2
 800dcba:	061a      	lsls	r2, r3, #24
 800dcbc:	4b33      	ldr	r3, [pc, #204]	@ (800dd8c <MX_LWIP_Init+0x258>)
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	0619      	lsls	r1, r3, #24
 800dcc2:	4b32      	ldr	r3, [pc, #200]	@ (800dd8c <MX_LWIP_Init+0x258>)
 800dcc4:	785b      	ldrb	r3, [r3, #1]
 800dcc6:	041b      	lsls	r3, r3, #16
 800dcc8:	4319      	orrs	r1, r3
 800dcca:	4b30      	ldr	r3, [pc, #192]	@ (800dd8c <MX_LWIP_Init+0x258>)
 800dccc:	789b      	ldrb	r3, [r3, #2]
 800dcce:	021b      	lsls	r3, r3, #8
 800dcd0:	430b      	orrs	r3, r1
 800dcd2:	492e      	ldr	r1, [pc, #184]	@ (800dd8c <MX_LWIP_Init+0x258>)
 800dcd4:	78c9      	ldrb	r1, [r1, #3]
 800dcd6:	430b      	orrs	r3, r1
 800dcd8:	021b      	lsls	r3, r3, #8
 800dcda:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dcde:	431a      	orrs	r2, r3
 800dce0:	4b2a      	ldr	r3, [pc, #168]	@ (800dd8c <MX_LWIP_Init+0x258>)
 800dce2:	781b      	ldrb	r3, [r3, #0]
 800dce4:	0619      	lsls	r1, r3, #24
 800dce6:	4b29      	ldr	r3, [pc, #164]	@ (800dd8c <MX_LWIP_Init+0x258>)
 800dce8:	785b      	ldrb	r3, [r3, #1]
 800dcea:	041b      	lsls	r3, r3, #16
 800dcec:	4319      	orrs	r1, r3
 800dcee:	4b27      	ldr	r3, [pc, #156]	@ (800dd8c <MX_LWIP_Init+0x258>)
 800dcf0:	789b      	ldrb	r3, [r3, #2]
 800dcf2:	021b      	lsls	r3, r3, #8
 800dcf4:	430b      	orrs	r3, r1
 800dcf6:	4925      	ldr	r1, [pc, #148]	@ (800dd8c <MX_LWIP_Init+0x258>)
 800dcf8:	78c9      	ldrb	r1, [r1, #3]
 800dcfa:	430b      	orrs	r3, r1
 800dcfc:	0a1b      	lsrs	r3, r3, #8
 800dcfe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dd02:	431a      	orrs	r2, r3
 800dd04:	4b21      	ldr	r3, [pc, #132]	@ (800dd8c <MX_LWIP_Init+0x258>)
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	0619      	lsls	r1, r3, #24
 800dd0a:	4b20      	ldr	r3, [pc, #128]	@ (800dd8c <MX_LWIP_Init+0x258>)
 800dd0c:	785b      	ldrb	r3, [r3, #1]
 800dd0e:	041b      	lsls	r3, r3, #16
 800dd10:	4319      	orrs	r1, r3
 800dd12:	4b1e      	ldr	r3, [pc, #120]	@ (800dd8c <MX_LWIP_Init+0x258>)
 800dd14:	789b      	ldrb	r3, [r3, #2]
 800dd16:	021b      	lsls	r3, r3, #8
 800dd18:	430b      	orrs	r3, r1
 800dd1a:	491c      	ldr	r1, [pc, #112]	@ (800dd8c <MX_LWIP_Init+0x258>)
 800dd1c:	78c9      	ldrb	r1, [r1, #3]
 800dd1e:	430b      	orrs	r3, r1
 800dd20:	0e1b      	lsrs	r3, r3, #24
 800dd22:	4313      	orrs	r3, r2
 800dd24:	4a1c      	ldr	r2, [pc, #112]	@ (800dd98 <MX_LWIP_Init+0x264>)
 800dd26:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800dd28:	4b1c      	ldr	r3, [pc, #112]	@ (800dd9c <MX_LWIP_Init+0x268>)
 800dd2a:	9302      	str	r3, [sp, #8]
 800dd2c:	4b1c      	ldr	r3, [pc, #112]	@ (800dda0 <MX_LWIP_Init+0x26c>)
 800dd2e:	9301      	str	r3, [sp, #4]
 800dd30:	2300      	movs	r3, #0
 800dd32:	9300      	str	r3, [sp, #0]
 800dd34:	4b18      	ldr	r3, [pc, #96]	@ (800dd98 <MX_LWIP_Init+0x264>)
 800dd36:	4a17      	ldr	r2, [pc, #92]	@ (800dd94 <MX_LWIP_Init+0x260>)
 800dd38:	4915      	ldr	r1, [pc, #84]	@ (800dd90 <MX_LWIP_Init+0x25c>)
 800dd3a:	481a      	ldr	r0, [pc, #104]	@ (800dda4 <MX_LWIP_Init+0x270>)
 800dd3c:	f005 fd4c 	bl	80137d8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800dd40:	4818      	ldr	r0, [pc, #96]	@ (800dda4 <MX_LWIP_Init+0x270>)
 800dd42:	f005 fefb 	bl	8013b3c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800dd46:	4817      	ldr	r0, [pc, #92]	@ (800dda4 <MX_LWIP_Init+0x270>)
 800dd48:	f005 ff08 	bl	8013b5c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800dd4c:	4916      	ldr	r1, [pc, #88]	@ (800dda8 <MX_LWIP_Init+0x274>)
 800dd4e:	4815      	ldr	r0, [pc, #84]	@ (800dda4 <MX_LWIP_Init+0x270>)
 800dd50:	f006 f806 	bl	8013d60 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800dd54:	2224      	movs	r2, #36	@ 0x24
 800dd56:	2100      	movs	r1, #0
 800dd58:	4814      	ldr	r0, [pc, #80]	@ (800ddac <MX_LWIP_Init+0x278>)
 800dd5a:	f010 faf1 	bl	801e340 <memset>
  attributes.name = "EthLink";
 800dd5e:	4b13      	ldr	r3, [pc, #76]	@ (800ddac <MX_LWIP_Init+0x278>)
 800dd60:	4a13      	ldr	r2, [pc, #76]	@ (800ddb0 <MX_LWIP_Init+0x27c>)
 800dd62:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800dd64:	4b11      	ldr	r3, [pc, #68]	@ (800ddac <MX_LWIP_Init+0x278>)
 800dd66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800dd6a:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800dd6c:	4b0f      	ldr	r3, [pc, #60]	@ (800ddac <MX_LWIP_Init+0x278>)
 800dd6e:	2210      	movs	r2, #16
 800dd70:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800dd72:	4a0e      	ldr	r2, [pc, #56]	@ (800ddac <MX_LWIP_Init+0x278>)
 800dd74:	490b      	ldr	r1, [pc, #44]	@ (800dda4 <MX_LWIP_Init+0x270>)
 800dd76:	480f      	ldr	r0, [pc, #60]	@ (800ddb4 <MX_LWIP_Init+0x280>)
 800dd78:	f000 fdce 	bl	800e918 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */
  // printf("IP: %s\n\r", ipaddr_ntoa(&gnetif.ip_addr));
/* USER CODE END 3 */
}
 800dd7c:	bf00      	nop
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	20000e74 	.word	0x20000e74
 800dd88:	20000e78 	.word	0x20000e78
 800dd8c:	20000e7c 	.word	0x20000e7c
 800dd90:	20000e68 	.word	0x20000e68
 800dd94:	20000e6c 	.word	0x20000e6c
 800dd98:	20000e70 	.word	0x20000e70
 800dd9c:	08012b89 	.word	0x08012b89
 800dda0:	0800e2f9 	.word	0x0800e2f9
 800dda4:	20000e34 	.word	0x20000e34
 800dda8:	0800ddb9 	.word	0x0800ddb9
 800ddac:	20000e80 	.word	0x20000e80
 800ddb0:	0801f1c8 	.word	0x0801f1c8
 800ddb4:	0800e5d1 	.word	0x0800e5d1

0800ddb8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800ddb8:	b480      	push	{r7}
 800ddba:	b083      	sub	sp, #12
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800ddc0:	bf00      	nop
 800ddc2:	370c      	adds	r7, #12
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr

0800ddcc <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b087      	sub	sp, #28
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
 800ddd4:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800ddde:	2320      	movs	r3, #32
 800dde0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800dde2:	f3bf 8f4f 	dsb	sy
}
 800dde6:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800dde8:	e00b      	b.n	800de02 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800ddea:	4a0d      	ldr	r2, [pc, #52]	@ (800de20 <SCB_InvalidateDCache_by_Addr+0x54>)
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	693a      	ldr	r2, [r7, #16]
 800ddf6:	4413      	add	r3, r2
 800ddf8:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800ddfa:	697a      	ldr	r2, [r7, #20]
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	1ad3      	subs	r3, r2, r3
 800de00:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	2b00      	cmp	r3, #0
 800de06:	dcf0      	bgt.n	800ddea <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800de08:	f3bf 8f4f 	dsb	sy
}
 800de0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800de0e:	f3bf 8f6f 	isb	sy
}
 800de12:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800de14:	bf00      	nop
 800de16:	371c      	adds	r7, #28
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr
 800de20:	e000ed00 	.word	0xe000ed00

0800de24 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800de2c:	4b04      	ldr	r3, [pc, #16]	@ (800de40 <HAL_ETH_RxCpltCallback+0x1c>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	4618      	mov	r0, r3
 800de32:	f001 f88f 	bl	800ef54 <osSemaphoreRelease>
}
 800de36:	bf00      	nop
 800de38:	3708      	adds	r7, #8
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}
 800de3e:	bf00      	nop
 800de40:	2000a1b0 	.word	0x2000a1b0

0800de44 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b082      	sub	sp, #8
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800de4c:	4b04      	ldr	r3, [pc, #16]	@ (800de60 <HAL_ETH_TxCpltCallback+0x1c>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	4618      	mov	r0, r3
 800de52:	f001 f87f 	bl	800ef54 <osSemaphoreRelease>
}
 800de56:	bf00      	nop
 800de58:	3708      	adds	r7, #8
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	bf00      	nop
 800de60:	2000a1b4 	.word	0x2000a1b4

0800de64 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f7f7 f924 	bl	80050ba <HAL_ETH_GetDMAError>
 800de72:	4603      	mov	r3, r0
 800de74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de78:	2b80      	cmp	r3, #128	@ 0x80
 800de7a:	d104      	bne.n	800de86 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800de7c:	4b04      	ldr	r3, [pc, #16]	@ (800de90 <HAL_ETH_ErrorCallback+0x2c>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4618      	mov	r0, r3
 800de82:	f001 f867 	bl	800ef54 <osSemaphoreRelease>
  }
}
 800de86:	bf00      	nop
 800de88:	3708      	adds	r7, #8
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	bf00      	nop
 800de90:	2000a1b0 	.word	0x2000a1b0

0800de94 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b0aa      	sub	sp, #168	@ 0xa8
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800de9c:	2300      	movs	r3, #0
 800de9e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800dea2:	2300      	movs	r3, #0
 800dea4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800dea8:	2300      	movs	r3, #0
 800deaa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800deae:	f107 0310 	add.w	r3, r7, #16
 800deb2:	2264      	movs	r2, #100	@ 0x64
 800deb4:	2100      	movs	r1, #0
 800deb6:	4618      	mov	r0, r3
 800deb8:	f010 fa42 	bl	801e340 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800debc:	4b89      	ldr	r3, [pc, #548]	@ (800e0e4 <low_level_init+0x250>)
 800debe:	4a8a      	ldr	r2, [pc, #552]	@ (800e0e8 <low_level_init+0x254>)
 800dec0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800dec2:	2300      	movs	r3, #0
 800dec4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800dec6:	2380      	movs	r3, #128	@ 0x80
 800dec8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800deca:	23e1      	movs	r3, #225	@ 0xe1
 800decc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800dece:	2300      	movs	r3, #0
 800ded0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800ded2:	2300      	movs	r3, #0
 800ded4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800ded6:	2300      	movs	r3, #0
 800ded8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800deda:	4a82      	ldr	r2, [pc, #520]	@ (800e0e4 <low_level_init+0x250>)
 800dedc:	f107 0308 	add.w	r3, r7, #8
 800dee0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800dee2:	4b80      	ldr	r3, [pc, #512]	@ (800e0e4 <low_level_init+0x250>)
 800dee4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800dee8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800deea:	4b7e      	ldr	r3, [pc, #504]	@ (800e0e4 <low_level_init+0x250>)
 800deec:	4a7f      	ldr	r2, [pc, #508]	@ (800e0ec <low_level_init+0x258>)
 800deee:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800def0:	4b7c      	ldr	r3, [pc, #496]	@ (800e0e4 <low_level_init+0x250>)
 800def2:	4a7f      	ldr	r2, [pc, #508]	@ (800e0f0 <low_level_init+0x25c>)
 800def4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800def6:	4b7b      	ldr	r3, [pc, #492]	@ (800e0e4 <low_level_init+0x250>)
 800def8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800defc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800defe:	4879      	ldr	r0, [pc, #484]	@ (800e0e4 <low_level_init+0x250>)
 800df00:	f7f6 fa92 	bl	8004428 <HAL_ETH_Init>
 800df04:	4603      	mov	r3, r0
 800df06:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800df0a:	2238      	movs	r2, #56	@ 0x38
 800df0c:	2100      	movs	r1, #0
 800df0e:	4879      	ldr	r0, [pc, #484]	@ (800e0f4 <low_level_init+0x260>)
 800df10:	f010 fa16 	bl	801e340 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800df14:	4b77      	ldr	r3, [pc, #476]	@ (800e0f4 <low_level_init+0x260>)
 800df16:	2221      	movs	r2, #33	@ 0x21
 800df18:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800df1a:	4b76      	ldr	r3, [pc, #472]	@ (800e0f4 <low_level_init+0x260>)
 800df1c:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800df20:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800df22:	4b74      	ldr	r3, [pc, #464]	@ (800e0f4 <low_level_init+0x260>)
 800df24:	2200      	movs	r2, #0
 800df26:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800df28:	4873      	ldr	r0, [pc, #460]	@ (800e0f8 <low_level_init+0x264>)
 800df2a:	f005 fb0f 	bl	801354c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2206      	movs	r2, #6
 800df32:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800df36:	4b6b      	ldr	r3, [pc, #428]	@ (800e0e4 <low_level_init+0x250>)
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	781a      	ldrb	r2, [r3, #0]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800df42:	4b68      	ldr	r3, [pc, #416]	@ (800e0e4 <low_level_init+0x250>)
 800df44:	685b      	ldr	r3, [r3, #4]
 800df46:	785a      	ldrb	r2, [r3, #1]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800df4e:	4b65      	ldr	r3, [pc, #404]	@ (800e0e4 <low_level_init+0x250>)
 800df50:	685b      	ldr	r3, [r3, #4]
 800df52:	789a      	ldrb	r2, [r3, #2]
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800df5a:	4b62      	ldr	r3, [pc, #392]	@ (800e0e4 <low_level_init+0x250>)
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	78da      	ldrb	r2, [r3, #3]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800df66:	4b5f      	ldr	r3, [pc, #380]	@ (800e0e4 <low_level_init+0x250>)
 800df68:	685b      	ldr	r3, [r3, #4]
 800df6a:	791a      	ldrb	r2, [r3, #4]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800df72:	4b5c      	ldr	r3, [pc, #368]	@ (800e0e4 <low_level_init+0x250>)
 800df74:	685b      	ldr	r3, [r3, #4]
 800df76:	795a      	ldrb	r2, [r3, #5]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800df84:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800df8c:	f043 030a 	orr.w	r3, r3, #10
 800df90:	b2da      	uxtb	r2, r3
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800df98:	2200      	movs	r2, #0
 800df9a:	2100      	movs	r1, #0
 800df9c:	2001      	movs	r0, #1
 800df9e:	f000 fed7 	bl	800ed50 <osSemaphoreNew>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	4a55      	ldr	r2, [pc, #340]	@ (800e0fc <low_level_init+0x268>)
 800dfa6:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	2100      	movs	r1, #0
 800dfac:	2001      	movs	r0, #1
 800dfae:	f000 fecf 	bl	800ed50 <osSemaphoreNew>
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	4a52      	ldr	r2, [pc, #328]	@ (800e100 <low_level_init+0x26c>)
 800dfb6:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800dfb8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800dfbc:	2224      	movs	r2, #36	@ 0x24
 800dfbe:	2100      	movs	r1, #0
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f010 f9bd 	bl	801e340 <memset>
  attributes.name = "EthIf";
 800dfc6:	4b4f      	ldr	r3, [pc, #316]	@ (800e104 <low_level_init+0x270>)
 800dfc8:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800dfca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dfce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800dfd2:	2330      	movs	r3, #48	@ 0x30
 800dfd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800dfd8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800dfdc:	461a      	mov	r2, r3
 800dfde:	6879      	ldr	r1, [r7, #4]
 800dfe0:	4849      	ldr	r0, [pc, #292]	@ (800e108 <low_level_init+0x274>)
 800dfe2:	f000 fc99 	bl	800e918 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800dfe6:	4949      	ldr	r1, [pc, #292]	@ (800e10c <low_level_init+0x278>)
 800dfe8:	4849      	ldr	r0, [pc, #292]	@ (800e110 <low_level_init+0x27c>)
 800dfea:	f7f4 fae0 	bl	80025ae <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800dfee:	4848      	ldr	r0, [pc, #288]	@ (800e110 <low_level_init+0x27c>)
 800dff0:	f7f4 fb0f 	bl	8002612 <LAN8742_Init>
 800dff4:	4603      	mov	r3, r0
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d006      	beq.n	800e008 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f005 fe80 	bl	8013d00 <netif_set_link_down>
    netif_set_down(netif);
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f005 fe17 	bl	8013c34 <netif_set_down>
 800e006:	e06a      	b.n	800e0de <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800e008:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d164      	bne.n	800e0da <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e010:	483f      	ldr	r0, [pc, #252]	@ (800e110 <low_level_init+0x27c>)
 800e012:	f7f4 fb4b 	bl	80026ac <LAN8742_GetLinkState>
 800e016:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800e01a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e01e:	2b01      	cmp	r3, #1
 800e020:	dc06      	bgt.n	800e030 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f005 fe6c 	bl	8013d00 <netif_set_link_down>
      netif_set_down(netif);
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f005 fe03 	bl	8013c34 <netif_set_down>
 800e02e:	e056      	b.n	800e0de <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800e030:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e034:	3b02      	subs	r3, #2
 800e036:	2b03      	cmp	r3, #3
 800e038:	d82a      	bhi.n	800e090 <low_level_init+0x1fc>
 800e03a:	a201      	add	r2, pc, #4	@ (adr r2, 800e040 <low_level_init+0x1ac>)
 800e03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e040:	0800e051 	.word	0x0800e051
 800e044:	0800e063 	.word	0x0800e063
 800e048:	0800e073 	.word	0x0800e073
 800e04c:	0800e083 	.word	0x0800e083
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800e050:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e054:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800e058:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e05c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800e060:	e01f      	b.n	800e0a2 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800e062:	2300      	movs	r3, #0
 800e064:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800e068:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e06c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800e070:	e017      	b.n	800e0a2 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800e072:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e076:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800e07a:	2300      	movs	r3, #0
 800e07c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800e080:	e00f      	b.n	800e0a2 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800e082:	2300      	movs	r3, #0
 800e084:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800e088:	2300      	movs	r3, #0
 800e08a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800e08e:	e008      	b.n	800e0a2 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800e090:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e094:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800e098:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e09c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800e0a0:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800e0a2:	f107 0310 	add.w	r3, r7, #16
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	480e      	ldr	r0, [pc, #56]	@ (800e0e4 <low_level_init+0x250>)
 800e0aa:	f7f6 fea5 	bl	8004df8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800e0ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e0b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800e0b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e0b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800e0ba:	f107 0310 	add.w	r3, r7, #16
 800e0be:	4619      	mov	r1, r3
 800e0c0:	4808      	ldr	r0, [pc, #32]	@ (800e0e4 <low_level_init+0x250>)
 800e0c2:	f7f6 ff90 	bl	8004fe6 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800e0c6:	4807      	ldr	r0, [pc, #28]	@ (800e0e4 <low_level_init+0x250>)
 800e0c8:	f7f6 fa48 	bl	800455c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f005 fd45 	bl	8013b5c <netif_set_up>
    netif_set_link_up(netif);
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f005 fde0 	bl	8013c98 <netif_set_link_up>
 800e0d8:	e001      	b.n	800e0de <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800e0da:	f7f3 f9a7 	bl	800142c <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800e0de:	37a8      	adds	r7, #168	@ 0xa8
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	2000a1b8 	.word	0x2000a1b8
 800e0e8:	40028000 	.word	0x40028000
 800e0ec:	2000012c 	.word	0x2000012c
 800e0f0:	2000008c 	.word	0x2000008c
 800e0f4:	2000a268 	.word	0x2000a268
 800e0f8:	080221d0 	.word	0x080221d0
 800e0fc:	2000a1b0 	.word	0x2000a1b0
 800e100:	2000a1b4 	.word	0x2000a1b4
 800e104:	0801f1d0 	.word	0x0801f1d0
 800e108:	0800e2a5 	.word	0x0800e2a5
 800e10c:	2000000c 	.word	0x2000000c
 800e110:	2000a2a0 	.word	0x2000a2a0

0800e114 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b092      	sub	sp, #72	@ 0x48
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800e11e:	2300      	movs	r3, #0
 800e120:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800e122:	2300      	movs	r3, #0
 800e124:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800e126:	2300      	movs	r3, #0
 800e128:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800e12c:	f107 030c 	add.w	r3, r7, #12
 800e130:	2230      	movs	r2, #48	@ 0x30
 800e132:	2100      	movs	r1, #0
 800e134:	4618      	mov	r0, r3
 800e136:	f010 f903 	bl	801e340 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800e13a:	f107 030c 	add.w	r3, r7, #12
 800e13e:	2230      	movs	r2, #48	@ 0x30
 800e140:	2100      	movs	r1, #0
 800e142:	4618      	mov	r0, r3
 800e144:	f010 f8fc 	bl	801e340 <memset>

  for(q = p; q != NULL; q = q->next)
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e14c:	e045      	b.n	800e1da <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800e14e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e150:	2b03      	cmp	r3, #3
 800e152:	d902      	bls.n	800e15a <low_level_output+0x46>
      return ERR_IF;
 800e154:	f06f 030b 	mvn.w	r3, #11
 800e158:	e07f      	b.n	800e25a <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800e15a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e15c:	6859      	ldr	r1, [r3, #4]
 800e15e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e160:	4613      	mov	r3, r2
 800e162:	005b      	lsls	r3, r3, #1
 800e164:	4413      	add	r3, r2
 800e166:	009b      	lsls	r3, r3, #2
 800e168:	3348      	adds	r3, #72	@ 0x48
 800e16a:	443b      	add	r3, r7
 800e16c:	3b3c      	subs	r3, #60	@ 0x3c
 800e16e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800e170:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e172:	895b      	ldrh	r3, [r3, #10]
 800e174:	4619      	mov	r1, r3
 800e176:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e178:	4613      	mov	r3, r2
 800e17a:	005b      	lsls	r3, r3, #1
 800e17c:	4413      	add	r3, r2
 800e17e:	009b      	lsls	r3, r3, #2
 800e180:	3348      	adds	r3, #72	@ 0x48
 800e182:	443b      	add	r3, r7
 800e184:	3b38      	subs	r3, #56	@ 0x38
 800e186:	6019      	str	r1, [r3, #0]

    if(i>0)
 800e188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d011      	beq.n	800e1b2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800e18e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e190:	1e5a      	subs	r2, r3, #1
 800e192:	f107 000c 	add.w	r0, r7, #12
 800e196:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e198:	460b      	mov	r3, r1
 800e19a:	005b      	lsls	r3, r3, #1
 800e19c:	440b      	add	r3, r1
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	18c1      	adds	r1, r0, r3
 800e1a2:	4613      	mov	r3, r2
 800e1a4:	005b      	lsls	r3, r3, #1
 800e1a6:	4413      	add	r3, r2
 800e1a8:	009b      	lsls	r3, r3, #2
 800e1aa:	3348      	adds	r3, #72	@ 0x48
 800e1ac:	443b      	add	r3, r7
 800e1ae:	3b34      	subs	r3, #52	@ 0x34
 800e1b0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800e1b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d109      	bne.n	800e1ce <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800e1ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e1bc:	4613      	mov	r3, r2
 800e1be:	005b      	lsls	r3, r3, #1
 800e1c0:	4413      	add	r3, r2
 800e1c2:	009b      	lsls	r3, r3, #2
 800e1c4:	3348      	adds	r3, #72	@ 0x48
 800e1c6:	443b      	add	r3, r7
 800e1c8:	3b34      	subs	r3, #52	@ 0x34
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	601a      	str	r2, [r3, #0]
    }

    i++;
 800e1ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1d0:	3301      	adds	r3, #1
 800e1d2:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800e1d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	643b      	str	r3, [r7, #64]	@ 0x40
 800e1da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d1b6      	bne.n	800e14e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	891b      	ldrh	r3, [r3, #8]
 800e1e4:	461a      	mov	r2, r3
 800e1e6:	4b1f      	ldr	r3, [pc, #124]	@ (800e264 <low_level_output+0x150>)
 800e1e8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800e1ea:	4a1e      	ldr	r2, [pc, #120]	@ (800e264 <low_level_output+0x150>)
 800e1ec:	f107 030c 	add.w	r3, r7, #12
 800e1f0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800e1f2:	4a1c      	ldr	r2, [pc, #112]	@ (800e264 <low_level_output+0x150>)
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800e1f8:	6838      	ldr	r0, [r7, #0]
 800e1fa:	f006 fa05 	bl	8014608 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800e1fe:	4919      	ldr	r1, [pc, #100]	@ (800e264 <low_level_output+0x150>)
 800e200:	4819      	ldr	r0, [pc, #100]	@ (800e268 <low_level_output+0x154>)
 800e202:	f7f6 fa9b 	bl	800473c <HAL_ETH_Transmit_IT>
 800e206:	4603      	mov	r3, r0
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d103      	bne.n	800e214 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800e20c:	2300      	movs	r3, #0
 800e20e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e212:	e01b      	b.n	800e24c <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800e214:	4814      	ldr	r0, [pc, #80]	@ (800e268 <low_level_output+0x154>)
 800e216:	f7f6 ff43 	bl	80050a0 <HAL_ETH_GetError>
 800e21a:	4603      	mov	r3, r0
 800e21c:	f003 0302 	and.w	r3, r3, #2
 800e220:	2b00      	cmp	r3, #0
 800e222:	d00d      	beq.n	800e240 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800e224:	4b11      	ldr	r3, [pc, #68]	@ (800e26c <low_level_output+0x158>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800e22c:	4618      	mov	r0, r3
 800e22e:	f000 fe2b 	bl	800ee88 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800e232:	480d      	ldr	r0, [pc, #52]	@ (800e268 <low_level_output+0x154>)
 800e234:	f7f6 fc22 	bl	8004a7c <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800e238:	23fe      	movs	r3, #254	@ 0xfe
 800e23a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800e23e:	e005      	b.n	800e24c <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800e240:	6838      	ldr	r0, [r7, #0]
 800e242:	f006 f93b 	bl	80144bc <pbuf_free>
        errval =  ERR_IF;
 800e246:	23f4      	movs	r3, #244	@ 0xf4
 800e248:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800e24c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800e250:	f113 0f02 	cmn.w	r3, #2
 800e254:	d0d3      	beq.n	800e1fe <low_level_output+0xea>

  return errval;
 800e256:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	3748      	adds	r7, #72	@ 0x48
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}
 800e262:	bf00      	nop
 800e264:	2000a268 	.word	0x2000a268
 800e268:	2000a1b8 	.word	0x2000a1b8
 800e26c:	2000a1b4 	.word	0x2000a1b4

0800e270 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b084      	sub	sp, #16
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800e278:	2300      	movs	r3, #0
 800e27a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800e27c:	4b07      	ldr	r3, [pc, #28]	@ (800e29c <low_level_input+0x2c>)
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d105      	bne.n	800e290 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800e284:	f107 030c 	add.w	r3, r7, #12
 800e288:	4619      	mov	r1, r3
 800e28a:	4805      	ldr	r0, [pc, #20]	@ (800e2a0 <low_level_input+0x30>)
 800e28c:	f7f6 fab2 	bl	80047f4 <HAL_ETH_ReadData>
  }

  return p;
 800e290:	68fb      	ldr	r3, [r7, #12]
}
 800e292:	4618      	mov	r0, r3
 800e294:	3710      	adds	r7, #16
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	bf00      	nop
 800e29c:	2000a1ac 	.word	0x2000a1ac
 800e2a0:	2000a1b8 	.word	0x2000a1b8

0800e2a4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b084      	sub	sp, #16
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800e2b4:	4b0f      	ldr	r3, [pc, #60]	@ (800e2f4 <ethernetif_input+0x50>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	f04f 31ff 	mov.w	r1, #4294967295
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f000 fde3 	bl	800ee88 <osSemaphoreAcquire>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d1f5      	bne.n	800e2b4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800e2c8:	68b8      	ldr	r0, [r7, #8]
 800e2ca:	f7ff ffd1 	bl	800e270 <low_level_input>
 800e2ce:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00a      	beq.n	800e2ec <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	691b      	ldr	r3, [r3, #16]
 800e2da:	68b9      	ldr	r1, [r7, #8]
 800e2dc:	68f8      	ldr	r0, [r7, #12]
 800e2de:	4798      	blx	r3
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d002      	beq.n	800e2ec <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800e2e6:	68f8      	ldr	r0, [r7, #12]
 800e2e8:	f006 f8e8 	bl	80144bc <pbuf_free>
          }
        }
      } while(p!=NULL);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d1ea      	bne.n	800e2c8 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800e2f2:	e7df      	b.n	800e2b4 <ethernetif_input+0x10>
 800e2f4:	2000a1b0 	.word	0x2000a1b0

0800e2f8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d106      	bne.n	800e314 <ethernetif_init+0x1c>
 800e306:	4b0e      	ldr	r3, [pc, #56]	@ (800e340 <ethernetif_init+0x48>)
 800e308:	f240 220d 	movw	r2, #525	@ 0x20d
 800e30c:	490d      	ldr	r1, [pc, #52]	@ (800e344 <ethernetif_init+0x4c>)
 800e30e:	480e      	ldr	r0, [pc, #56]	@ (800e348 <ethernetif_init+0x50>)
 800e310:	f00f febe 	bl	801e090 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	2273      	movs	r2, #115	@ 0x73
 800e318:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2274      	movs	r2, #116	@ 0x74
 800e320:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	4a09      	ldr	r2, [pc, #36]	@ (800e34c <ethernetif_init+0x54>)
 800e328:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	4a08      	ldr	r2, [pc, #32]	@ (800e350 <ethernetif_init+0x58>)
 800e32e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f7ff fdaf 	bl	800de94 <low_level_init>

  return ERR_OK;
 800e336:	2300      	movs	r3, #0
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3708      	adds	r7, #8
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}
 800e340:	0801f1d8 	.word	0x0801f1d8
 800e344:	0801f1f4 	.word	0x0801f1f4
 800e348:	0801f204 	.word	0x0801f204
 800e34c:	0801b11d 	.word	0x0801b11d
 800e350:	0800e115 	.word	0x0800e115

0800e354 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b084      	sub	sp, #16
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800e360:	68f9      	ldr	r1, [r7, #12]
 800e362:	4809      	ldr	r0, [pc, #36]	@ (800e388 <pbuf_free_custom+0x34>)
 800e364:	f005 f9e2 	bl	801372c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800e368:	4b08      	ldr	r3, [pc, #32]	@ (800e38c <pbuf_free_custom+0x38>)
 800e36a:	781b      	ldrb	r3, [r3, #0]
 800e36c:	2b01      	cmp	r3, #1
 800e36e:	d107      	bne.n	800e380 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800e370:	4b06      	ldr	r3, [pc, #24]	@ (800e38c <pbuf_free_custom+0x38>)
 800e372:	2200      	movs	r2, #0
 800e374:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800e376:	4b06      	ldr	r3, [pc, #24]	@ (800e390 <pbuf_free_custom+0x3c>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4618      	mov	r0, r3
 800e37c:	f000 fdea 	bl	800ef54 <osSemaphoreRelease>
  }
}
 800e380:	bf00      	nop
 800e382:	3710      	adds	r7, #16
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}
 800e388:	080221d0 	.word	0x080221d0
 800e38c:	2000a1ac 	.word	0x2000a1ac
 800e390:	2000a1b0 	.word	0x2000a1b0

0800e394 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e398:	f7f4 fa30 	bl	80027fc <HAL_GetTick>
 800e39c:	4603      	mov	r3, r0
}
 800e39e:	4618      	mov	r0, r3
 800e3a0:	bd80      	pop	{r7, pc}
	...

0800e3a4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b08e      	sub	sp, #56	@ 0x38
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e3ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	601a      	str	r2, [r3, #0]
 800e3b4:	605a      	str	r2, [r3, #4]
 800e3b6:	609a      	str	r2, [r3, #8]
 800e3b8:	60da      	str	r2, [r3, #12]
 800e3ba:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	4a56      	ldr	r2, [pc, #344]	@ (800e51c <HAL_ETH_MspInit+0x178>)
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	f040 80a6 	bne.w	800e514 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800e3c8:	4b55      	ldr	r3, [pc, #340]	@ (800e520 <HAL_ETH_MspInit+0x17c>)
 800e3ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3cc:	4a54      	ldr	r2, [pc, #336]	@ (800e520 <HAL_ETH_MspInit+0x17c>)
 800e3ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800e3d2:	6313      	str	r3, [r2, #48]	@ 0x30
 800e3d4:	4b52      	ldr	r3, [pc, #328]	@ (800e520 <HAL_ETH_MspInit+0x17c>)
 800e3d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e3dc:	623b      	str	r3, [r7, #32]
 800e3de:	6a3b      	ldr	r3, [r7, #32]
 800e3e0:	4b4f      	ldr	r3, [pc, #316]	@ (800e520 <HAL_ETH_MspInit+0x17c>)
 800e3e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3e4:	4a4e      	ldr	r2, [pc, #312]	@ (800e520 <HAL_ETH_MspInit+0x17c>)
 800e3e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e3ea:	6313      	str	r3, [r2, #48]	@ 0x30
 800e3ec:	4b4c      	ldr	r3, [pc, #304]	@ (800e520 <HAL_ETH_MspInit+0x17c>)
 800e3ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800e3f4:	61fb      	str	r3, [r7, #28]
 800e3f6:	69fb      	ldr	r3, [r7, #28]
 800e3f8:	4b49      	ldr	r3, [pc, #292]	@ (800e520 <HAL_ETH_MspInit+0x17c>)
 800e3fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3fc:	4a48      	ldr	r2, [pc, #288]	@ (800e520 <HAL_ETH_MspInit+0x17c>)
 800e3fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e402:	6313      	str	r3, [r2, #48]	@ 0x30
 800e404:	4b46      	ldr	r3, [pc, #280]	@ (800e520 <HAL_ETH_MspInit+0x17c>)
 800e406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e408:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e40c:	61bb      	str	r3, [r7, #24]
 800e40e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e410:	4b43      	ldr	r3, [pc, #268]	@ (800e520 <HAL_ETH_MspInit+0x17c>)
 800e412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e414:	4a42      	ldr	r2, [pc, #264]	@ (800e520 <HAL_ETH_MspInit+0x17c>)
 800e416:	f043 0304 	orr.w	r3, r3, #4
 800e41a:	6313      	str	r3, [r2, #48]	@ 0x30
 800e41c:	4b40      	ldr	r3, [pc, #256]	@ (800e520 <HAL_ETH_MspInit+0x17c>)
 800e41e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e420:	f003 0304 	and.w	r3, r3, #4
 800e424:	617b      	str	r3, [r7, #20]
 800e426:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e428:	4b3d      	ldr	r3, [pc, #244]	@ (800e520 <HAL_ETH_MspInit+0x17c>)
 800e42a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e42c:	4a3c      	ldr	r2, [pc, #240]	@ (800e520 <HAL_ETH_MspInit+0x17c>)
 800e42e:	f043 0301 	orr.w	r3, r3, #1
 800e432:	6313      	str	r3, [r2, #48]	@ 0x30
 800e434:	4b3a      	ldr	r3, [pc, #232]	@ (800e520 <HAL_ETH_MspInit+0x17c>)
 800e436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e438:	f003 0301 	and.w	r3, r3, #1
 800e43c:	613b      	str	r3, [r7, #16]
 800e43e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e440:	4b37      	ldr	r3, [pc, #220]	@ (800e520 <HAL_ETH_MspInit+0x17c>)
 800e442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e444:	4a36      	ldr	r2, [pc, #216]	@ (800e520 <HAL_ETH_MspInit+0x17c>)
 800e446:	f043 0302 	orr.w	r3, r3, #2
 800e44a:	6313      	str	r3, [r2, #48]	@ 0x30
 800e44c:	4b34      	ldr	r3, [pc, #208]	@ (800e520 <HAL_ETH_MspInit+0x17c>)
 800e44e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e450:	f003 0302 	and.w	r3, r3, #2
 800e454:	60fb      	str	r3, [r7, #12]
 800e456:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800e458:	4b31      	ldr	r3, [pc, #196]	@ (800e520 <HAL_ETH_MspInit+0x17c>)
 800e45a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e45c:	4a30      	ldr	r2, [pc, #192]	@ (800e520 <HAL_ETH_MspInit+0x17c>)
 800e45e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e462:	6313      	str	r3, [r2, #48]	@ 0x30
 800e464:	4b2e      	ldr	r3, [pc, #184]	@ (800e520 <HAL_ETH_MspInit+0x17c>)
 800e466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e46c:	60bb      	str	r3, [r7, #8]
 800e46e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800e470:	2332      	movs	r3, #50	@ 0x32
 800e472:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e474:	2302      	movs	r3, #2
 800e476:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e478:	2300      	movs	r3, #0
 800e47a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e47c:	2303      	movs	r3, #3
 800e47e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e480:	230b      	movs	r3, #11
 800e482:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e488:	4619      	mov	r1, r3
 800e48a:	4826      	ldr	r0, [pc, #152]	@ (800e524 <HAL_ETH_MspInit+0x180>)
 800e48c:	f7f7 fa42 	bl	8005914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800e490:	2386      	movs	r3, #134	@ 0x86
 800e492:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e494:	2302      	movs	r3, #2
 800e496:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e498:	2300      	movs	r3, #0
 800e49a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e49c:	2303      	movs	r3, #3
 800e49e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e4a0:	230b      	movs	r3, #11
 800e4a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e4a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e4a8:	4619      	mov	r1, r3
 800e4aa:	481f      	ldr	r0, [pc, #124]	@ (800e528 <HAL_ETH_MspInit+0x184>)
 800e4ac:	f7f7 fa32 	bl	8005914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800e4b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e4b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4b6:	2302      	movs	r3, #2
 800e4b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e4be:	2303      	movs	r3, #3
 800e4c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e4c2:	230b      	movs	r3, #11
 800e4c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800e4c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e4ca:	4619      	mov	r1, r3
 800e4cc:	4817      	ldr	r0, [pc, #92]	@ (800e52c <HAL_ETH_MspInit+0x188>)
 800e4ce:	f7f7 fa21 	bl	8005914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800e4d2:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800e4d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4d8:	2302      	movs	r3, #2
 800e4da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e4e0:	2303      	movs	r3, #3
 800e4e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e4e4:	230b      	movs	r3, #11
 800e4e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e4e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	4810      	ldr	r0, [pc, #64]	@ (800e530 <HAL_ETH_MspInit+0x18c>)
 800e4f0:	f7f7 fa10 	bl	8005914 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	2105      	movs	r1, #5
 800e4f8:	203d      	movs	r0, #61	@ 0x3d
 800e4fa:	f7f4 ff6b 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800e4fe:	203d      	movs	r0, #61	@ 0x3d
 800e500:	f7f4 ff84 	bl	800340c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800e504:	2200      	movs	r2, #0
 800e506:	2105      	movs	r1, #5
 800e508:	203e      	movs	r0, #62	@ 0x3e
 800e50a:	f7f4 ff63 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800e50e:	203e      	movs	r0, #62	@ 0x3e
 800e510:	f7f4 ff7c 	bl	800340c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800e514:	bf00      	nop
 800e516:	3738      	adds	r7, #56	@ 0x38
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	40028000 	.word	0x40028000
 800e520:	40023800 	.word	0x40023800
 800e524:	40020800 	.word	0x40020800
 800e528:	40020000 	.word	0x40020000
 800e52c:	40020400 	.word	0x40020400
 800e530:	40021800 	.word	0x40021800

0800e534 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800e538:	4802      	ldr	r0, [pc, #8]	@ (800e544 <ETH_PHY_IO_Init+0x10>)
 800e53a:	f7f6 fd6f 	bl	800501c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800e53e:	2300      	movs	r3, #0
}
 800e540:	4618      	mov	r0, r3
 800e542:	bd80      	pop	{r7, pc}
 800e544:	2000a1b8 	.word	0x2000a1b8

0800e548 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800e548:	b480      	push	{r7}
 800e54a:	af00      	add	r7, sp, #0
  return 0;
 800e54c:	2300      	movs	r3, #0
}
 800e54e:	4618      	mov	r0, r3
 800e550:	46bd      	mov	sp, r7
 800e552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e556:	4770      	bx	lr

0800e558 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b084      	sub	sp, #16
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	60f8      	str	r0, [r7, #12]
 800e560:	60b9      	str	r1, [r7, #8]
 800e562:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	68ba      	ldr	r2, [r7, #8]
 800e568:	68f9      	ldr	r1, [r7, #12]
 800e56a:	4807      	ldr	r0, [pc, #28]	@ (800e588 <ETH_PHY_IO_ReadReg+0x30>)
 800e56c:	f7f6 fbb0 	bl	8004cd0 <HAL_ETH_ReadPHYRegister>
 800e570:	4603      	mov	r3, r0
 800e572:	2b00      	cmp	r3, #0
 800e574:	d002      	beq.n	800e57c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800e576:	f04f 33ff 	mov.w	r3, #4294967295
 800e57a:	e000      	b.n	800e57e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800e57c:	2300      	movs	r3, #0
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3710      	adds	r7, #16
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
 800e586:	bf00      	nop
 800e588:	2000a1b8 	.word	0x2000a1b8

0800e58c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
 800e592:	60f8      	str	r0, [r7, #12]
 800e594:	60b9      	str	r1, [r7, #8]
 800e596:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	68ba      	ldr	r2, [r7, #8]
 800e59c:	68f9      	ldr	r1, [r7, #12]
 800e59e:	4807      	ldr	r0, [pc, #28]	@ (800e5bc <ETH_PHY_IO_WriteReg+0x30>)
 800e5a0:	f7f6 fbe1 	bl	8004d66 <HAL_ETH_WritePHYRegister>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d002      	beq.n	800e5b0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800e5aa:	f04f 33ff 	mov.w	r3, #4294967295
 800e5ae:	e000      	b.n	800e5b2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800e5b0:	2300      	movs	r3, #0
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	3710      	adds	r7, #16
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	2000a1b8 	.word	0x2000a1b8

0800e5c0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e5c4:	f7f4 f91a 	bl	80027fc <HAL_GetTick>
 800e5c8:	4603      	mov	r3, r0
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	bd80      	pop	{r7, pc}
	...

0800e5d0 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b0a0      	sub	sp, #128	@ 0x80
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800e5d8:	f107 0308 	add.w	r3, r7, #8
 800e5dc:	2264      	movs	r2, #100	@ 0x64
 800e5de:	2100      	movs	r1, #0
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f00f fead 	bl	801e340 <memset>
  int32_t PHYLinkState = 0;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e5fa:	483a      	ldr	r0, [pc, #232]	@ (800e6e4 <ethernet_link_thread+0x114>)
 800e5fc:	f7f4 f856 	bl	80026ac <LAN8742_GetLinkState>
 800e600:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800e602:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e604:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e608:	089b      	lsrs	r3, r3, #2
 800e60a:	f003 0301 	and.w	r3, r3, #1
 800e60e:	b2db      	uxtb	r3, r3
 800e610:	2b00      	cmp	r3, #0
 800e612:	d00c      	beq.n	800e62e <ethernet_link_thread+0x5e>
 800e614:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e616:	2b01      	cmp	r3, #1
 800e618:	dc09      	bgt.n	800e62e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800e61a:	4833      	ldr	r0, [pc, #204]	@ (800e6e8 <ethernet_link_thread+0x118>)
 800e61c:	f7f6 f80e 	bl	800463c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800e620:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e622:	f005 fb07 	bl	8013c34 <netif_set_down>
    netif_set_link_down(netif);
 800e626:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e628:	f005 fb6a 	bl	8013d00 <netif_set_link_down>
 800e62c:	e055      	b.n	800e6da <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800e62e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e630:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e634:	f003 0304 	and.w	r3, r3, #4
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d14e      	bne.n	800e6da <ethernet_link_thread+0x10a>
 800e63c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e63e:	2b01      	cmp	r3, #1
 800e640:	dd4b      	ble.n	800e6da <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800e642:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e644:	3b02      	subs	r3, #2
 800e646:	2b03      	cmp	r3, #3
 800e648:	d82a      	bhi.n	800e6a0 <ethernet_link_thread+0xd0>
 800e64a:	a201      	add	r2, pc, #4	@ (adr r2, 800e650 <ethernet_link_thread+0x80>)
 800e64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e650:	0800e661 	.word	0x0800e661
 800e654:	0800e673 	.word	0x0800e673
 800e658:	0800e683 	.word	0x0800e683
 800e65c:	0800e693 	.word	0x0800e693
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800e660:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e664:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800e666:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e66a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800e66c:	2301      	movs	r3, #1
 800e66e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800e670:	e017      	b.n	800e6a2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800e672:	2300      	movs	r3, #0
 800e674:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800e676:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e67a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800e67c:	2301      	movs	r3, #1
 800e67e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800e680:	e00f      	b.n	800e6a2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800e682:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e686:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800e688:	2300      	movs	r3, #0
 800e68a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800e68c:	2301      	movs	r3, #1
 800e68e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800e690:	e007      	b.n	800e6a2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800e692:	2300      	movs	r3, #0
 800e694:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800e696:	2300      	movs	r3, #0
 800e698:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800e69a:	2301      	movs	r3, #1
 800e69c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800e69e:	e000      	b.n	800e6a2 <ethernet_link_thread+0xd2>
    default:
      break;
 800e6a0:	bf00      	nop
    }

    if(linkchanged)
 800e6a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d018      	beq.n	800e6da <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800e6a8:	f107 0308 	add.w	r3, r7, #8
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	480e      	ldr	r0, [pc, #56]	@ (800e6e8 <ethernet_link_thread+0x118>)
 800e6b0:	f7f6 fba2 	bl	8004df8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800e6b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e6b6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800e6b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e6ba:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800e6bc:	f107 0308 	add.w	r3, r7, #8
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	4809      	ldr	r0, [pc, #36]	@ (800e6e8 <ethernet_link_thread+0x118>)
 800e6c4:	f7f6 fc8f 	bl	8004fe6 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800e6c8:	4807      	ldr	r0, [pc, #28]	@ (800e6e8 <ethernet_link_thread+0x118>)
 800e6ca:	f7f5 ff47 	bl	800455c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800e6ce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e6d0:	f005 fa44 	bl	8013b5c <netif_set_up>
      netif_set_link_up(netif);
 800e6d4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e6d6:	f005 fadf 	bl	8013c98 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800e6da:	2064      	movs	r0, #100	@ 0x64
 800e6dc:	f000 f9c2 	bl	800ea64 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e6e0:	e78b      	b.n	800e5fa <ethernet_link_thread+0x2a>
 800e6e2:	bf00      	nop
 800e6e4:	2000a2a0 	.word	0x2000a2a0
 800e6e8:	2000a1b8 	.word	0x2000a1b8

0800e6ec <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b086      	sub	sp, #24
 800e6f0:	af02      	add	r7, sp, #8
 800e6f2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800e6f4:	4812      	ldr	r0, [pc, #72]	@ (800e740 <HAL_ETH_RxAllocateCallback+0x54>)
 800e6f6:	f004 ffa5 	bl	8013644 <memp_malloc_pool>
 800e6fa:	60f8      	str	r0, [r7, #12]
  if (p)
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d014      	beq.n	800e72c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	f103 0220 	add.w	r2, r3, #32
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	4a0d      	ldr	r2, [pc, #52]	@ (800e744 <HAL_ETH_RxAllocateCallback+0x58>)
 800e710:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800e71a:	9201      	str	r2, [sp, #4]
 800e71c:	9300      	str	r3, [sp, #0]
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2241      	movs	r2, #65	@ 0x41
 800e722:	2100      	movs	r1, #0
 800e724:	2000      	movs	r0, #0
 800e726:	f005 fd0f 	bl	8014148 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800e72a:	e005      	b.n	800e738 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800e72c:	4b06      	ldr	r3, [pc, #24]	@ (800e748 <HAL_ETH_RxAllocateCallback+0x5c>)
 800e72e:	2201      	movs	r2, #1
 800e730:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2200      	movs	r2, #0
 800e736:	601a      	str	r2, [r3, #0]
}
 800e738:	bf00      	nop
 800e73a:	3710      	adds	r7, #16
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}
 800e740:	080221d0 	.word	0x080221d0
 800e744:	0800e355 	.word	0x0800e355
 800e748:	2000a1ac 	.word	0x2000a1ac

0800e74c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b088      	sub	sp, #32
 800e750:	af00      	add	r7, sp, #0
 800e752:	60f8      	str	r0, [r7, #12]
 800e754:	60b9      	str	r1, [r7, #8]
 800e756:	607a      	str	r2, [r7, #4]
 800e758:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e762:	2300      	movs	r3, #0
 800e764:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	3b20      	subs	r3, #32
 800e76a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800e76c:	69fb      	ldr	r3, [r7, #28]
 800e76e:	2200      	movs	r2, #0
 800e770:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800e772:	69fb      	ldr	r3, [r7, #28]
 800e774:	2200      	movs	r2, #0
 800e776:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800e778:	69fb      	ldr	r3, [r7, #28]
 800e77a:	887a      	ldrh	r2, [r7, #2]
 800e77c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d103      	bne.n	800e78e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800e786:	69bb      	ldr	r3, [r7, #24]
 800e788:	69fa      	ldr	r2, [r7, #28]
 800e78a:	601a      	str	r2, [r3, #0]
 800e78c:	e003      	b.n	800e796 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	69fa      	ldr	r2, [r7, #28]
 800e794:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	69fa      	ldr	r2, [r7, #28]
 800e79a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800e79c:	69bb      	ldr	r3, [r7, #24]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	61fb      	str	r3, [r7, #28]
 800e7a2:	e009      	b.n	800e7b8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800e7a4:	69fb      	ldr	r3, [r7, #28]
 800e7a6:	891a      	ldrh	r2, [r3, #8]
 800e7a8:	887b      	ldrh	r3, [r7, #2]
 800e7aa:	4413      	add	r3, r2
 800e7ac:	b29a      	uxth	r2, r3
 800e7ae:	69fb      	ldr	r3, [r7, #28]
 800e7b0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800e7b2:	69fb      	ldr	r3, [r7, #28]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	61fb      	str	r3, [r7, #28]
 800e7b8:	69fb      	ldr	r3, [r7, #28]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d1f2      	bne.n	800e7a4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800e7be:	887b      	ldrh	r3, [r7, #2]
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f7ff fb02 	bl	800ddcc <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800e7c8:	bf00      	nop
 800e7ca:	3720      	adds	r7, #32
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}

0800e7d0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b082      	sub	sp, #8
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800e7d8:	6878      	ldr	r0, [r7, #4]
 800e7da:	f005 fe6f 	bl	80144bc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800e7de:	bf00      	nop
 800e7e0:	3708      	adds	r7, #8
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}

0800e7e6 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e7e6:	b480      	push	{r7}
 800e7e8:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800e7ea:	bf00      	nop
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f2:	4770      	bx	lr

0800e7f4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e7f4:	b480      	push	{r7}
 800e7f6:	b085      	sub	sp, #20
 800e7f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e7fa:	f3ef 8305 	mrs	r3, IPSR
 800e7fe:	60bb      	str	r3, [r7, #8]
  return(result);
 800e800:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e802:	2b00      	cmp	r3, #0
 800e804:	d10f      	bne.n	800e826 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e806:	f3ef 8310 	mrs	r3, PRIMASK
 800e80a:	607b      	str	r3, [r7, #4]
  return(result);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d105      	bne.n	800e81e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e812:	f3ef 8311 	mrs	r3, BASEPRI
 800e816:	603b      	str	r3, [r7, #0]
  return(result);
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d007      	beq.n	800e82e <osKernelInitialize+0x3a>
 800e81e:	4b0e      	ldr	r3, [pc, #56]	@ (800e858 <osKernelInitialize+0x64>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	2b02      	cmp	r3, #2
 800e824:	d103      	bne.n	800e82e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800e826:	f06f 0305 	mvn.w	r3, #5
 800e82a:	60fb      	str	r3, [r7, #12]
 800e82c:	e00c      	b.n	800e848 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e82e:	4b0a      	ldr	r3, [pc, #40]	@ (800e858 <osKernelInitialize+0x64>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d105      	bne.n	800e842 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e836:	4b08      	ldr	r3, [pc, #32]	@ (800e858 <osKernelInitialize+0x64>)
 800e838:	2201      	movs	r2, #1
 800e83a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e83c:	2300      	movs	r3, #0
 800e83e:	60fb      	str	r3, [r7, #12]
 800e840:	e002      	b.n	800e848 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800e842:	f04f 33ff 	mov.w	r3, #4294967295
 800e846:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e848:	68fb      	ldr	r3, [r7, #12]
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3714      	adds	r7, #20
 800e84e:	46bd      	mov	sp, r7
 800e850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e854:	4770      	bx	lr
 800e856:	bf00      	nop
 800e858:	2000a2c0 	.word	0x2000a2c0

0800e85c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b084      	sub	sp, #16
 800e860:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e862:	f3ef 8305 	mrs	r3, IPSR
 800e866:	60bb      	str	r3, [r7, #8]
  return(result);
 800e868:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d10f      	bne.n	800e88e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e86e:	f3ef 8310 	mrs	r3, PRIMASK
 800e872:	607b      	str	r3, [r7, #4]
  return(result);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d105      	bne.n	800e886 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e87a:	f3ef 8311 	mrs	r3, BASEPRI
 800e87e:	603b      	str	r3, [r7, #0]
  return(result);
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d007      	beq.n	800e896 <osKernelStart+0x3a>
 800e886:	4b0f      	ldr	r3, [pc, #60]	@ (800e8c4 <osKernelStart+0x68>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	2b02      	cmp	r3, #2
 800e88c:	d103      	bne.n	800e896 <osKernelStart+0x3a>
    stat = osErrorISR;
 800e88e:	f06f 0305 	mvn.w	r3, #5
 800e892:	60fb      	str	r3, [r7, #12]
 800e894:	e010      	b.n	800e8b8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e896:	4b0b      	ldr	r3, [pc, #44]	@ (800e8c4 <osKernelStart+0x68>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	2b01      	cmp	r3, #1
 800e89c:	d109      	bne.n	800e8b2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e89e:	f7ff ffa2 	bl	800e7e6 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e8a2:	4b08      	ldr	r3, [pc, #32]	@ (800e8c4 <osKernelStart+0x68>)
 800e8a4:	2202      	movs	r2, #2
 800e8a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e8a8:	f002 f92e 	bl	8010b08 <vTaskStartScheduler>
      stat = osOK;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	60fb      	str	r3, [r7, #12]
 800e8b0:	e002      	b.n	800e8b8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800e8b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e8b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e8b8:	68fb      	ldr	r3, [r7, #12]
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	3710      	adds	r7, #16
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}
 800e8c2:	bf00      	nop
 800e8c4:	2000a2c0 	.word	0x2000a2c0

0800e8c8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b084      	sub	sp, #16
 800e8cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8ce:	f3ef 8305 	mrs	r3, IPSR
 800e8d2:	60bb      	str	r3, [r7, #8]
  return(result);
 800e8d4:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d10f      	bne.n	800e8fa <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8da:	f3ef 8310 	mrs	r3, PRIMASK
 800e8de:	607b      	str	r3, [r7, #4]
  return(result);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d105      	bne.n	800e8f2 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e8e6:	f3ef 8311 	mrs	r3, BASEPRI
 800e8ea:	603b      	str	r3, [r7, #0]
  return(result);
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d007      	beq.n	800e902 <osKernelGetTickCount+0x3a>
 800e8f2:	4b08      	ldr	r3, [pc, #32]	@ (800e914 <osKernelGetTickCount+0x4c>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	2b02      	cmp	r3, #2
 800e8f8:	d103      	bne.n	800e902 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800e8fa:	f002 fa37 	bl	8010d6c <xTaskGetTickCountFromISR>
 800e8fe:	60f8      	str	r0, [r7, #12]
 800e900:	e002      	b.n	800e908 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800e902:	f002 fa23 	bl	8010d4c <xTaskGetTickCount>
 800e906:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800e908:	68fb      	ldr	r3, [r7, #12]
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3710      	adds	r7, #16
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
 800e912:	bf00      	nop
 800e914:	2000a2c0 	.word	0x2000a2c0

0800e918 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e918:	b580      	push	{r7, lr}
 800e91a:	b090      	sub	sp, #64	@ 0x40
 800e91c:	af04      	add	r7, sp, #16
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e924:	2300      	movs	r3, #0
 800e926:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e928:	f3ef 8305 	mrs	r3, IPSR
 800e92c:	61fb      	str	r3, [r7, #28]
  return(result);
 800e92e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800e930:	2b00      	cmp	r3, #0
 800e932:	f040 8090 	bne.w	800ea56 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e936:	f3ef 8310 	mrs	r3, PRIMASK
 800e93a:	61bb      	str	r3, [r7, #24]
  return(result);
 800e93c:	69bb      	ldr	r3, [r7, #24]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d105      	bne.n	800e94e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e942:	f3ef 8311 	mrs	r3, BASEPRI
 800e946:	617b      	str	r3, [r7, #20]
  return(result);
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d003      	beq.n	800e956 <osThreadNew+0x3e>
 800e94e:	4b44      	ldr	r3, [pc, #272]	@ (800ea60 <osThreadNew+0x148>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	2b02      	cmp	r3, #2
 800e954:	d07f      	beq.n	800ea56 <osThreadNew+0x13e>
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d07c      	beq.n	800ea56 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800e95c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e960:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800e962:	2318      	movs	r3, #24
 800e964:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800e966:	2300      	movs	r3, #0
 800e968:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800e96a:	f04f 33ff 	mov.w	r3, #4294967295
 800e96e:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d045      	beq.n	800ea02 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d002      	beq.n	800e984 <osThreadNew+0x6c>
        name = attr->name;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	699b      	ldr	r3, [r3, #24]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d002      	beq.n	800e992 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	699b      	ldr	r3, [r3, #24]
 800e990:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e994:	2b00      	cmp	r3, #0
 800e996:	d008      	beq.n	800e9aa <osThreadNew+0x92>
 800e998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e99a:	2b38      	cmp	r3, #56	@ 0x38
 800e99c:	d805      	bhi.n	800e9aa <osThreadNew+0x92>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	685b      	ldr	r3, [r3, #4]
 800e9a2:	f003 0301 	and.w	r3, r3, #1
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d001      	beq.n	800e9ae <osThreadNew+0x96>
        return (NULL);
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	e054      	b.n	800ea58 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	695b      	ldr	r3, [r3, #20]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d003      	beq.n	800e9be <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	695b      	ldr	r3, [r3, #20]
 800e9ba:	089b      	lsrs	r3, r3, #2
 800e9bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	689b      	ldr	r3, [r3, #8]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d00e      	beq.n	800e9e4 <osThreadNew+0xcc>
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	68db      	ldr	r3, [r3, #12]
 800e9ca:	2ba7      	cmp	r3, #167	@ 0xa7
 800e9cc:	d90a      	bls.n	800e9e4 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d006      	beq.n	800e9e4 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	695b      	ldr	r3, [r3, #20]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d002      	beq.n	800e9e4 <osThreadNew+0xcc>
        mem = 1;
 800e9de:	2301      	movs	r3, #1
 800e9e0:	623b      	str	r3, [r7, #32]
 800e9e2:	e010      	b.n	800ea06 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	689b      	ldr	r3, [r3, #8]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d10c      	bne.n	800ea06 <osThreadNew+0xee>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	68db      	ldr	r3, [r3, #12]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d108      	bne.n	800ea06 <osThreadNew+0xee>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	691b      	ldr	r3, [r3, #16]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d104      	bne.n	800ea06 <osThreadNew+0xee>
          mem = 0;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	623b      	str	r3, [r7, #32]
 800ea00:	e001      	b.n	800ea06 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800ea02:	2300      	movs	r3, #0
 800ea04:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ea06:	6a3b      	ldr	r3, [r7, #32]
 800ea08:	2b01      	cmp	r3, #1
 800ea0a:	d110      	bne.n	800ea2e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ea10:	687a      	ldr	r2, [r7, #4]
 800ea12:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ea14:	9202      	str	r2, [sp, #8]
 800ea16:	9301      	str	r3, [sp, #4]
 800ea18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea1a:	9300      	str	r3, [sp, #0]
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ea20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ea22:	68f8      	ldr	r0, [r7, #12]
 800ea24:	f001 fe72 	bl	801070c <xTaskCreateStatic>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	613b      	str	r3, [r7, #16]
 800ea2c:	e013      	b.n	800ea56 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800ea2e:	6a3b      	ldr	r3, [r7, #32]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d110      	bne.n	800ea56 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ea34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea36:	b29a      	uxth	r2, r3
 800ea38:	f107 0310 	add.w	r3, r7, #16
 800ea3c:	9301      	str	r3, [sp, #4]
 800ea3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea40:	9300      	str	r3, [sp, #0]
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ea46:	68f8      	ldr	r0, [r7, #12]
 800ea48:	f001 fec6 	bl	80107d8 <xTaskCreate>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	2b01      	cmp	r3, #1
 800ea50:	d001      	beq.n	800ea56 <osThreadNew+0x13e>
          hTask = NULL;
 800ea52:	2300      	movs	r3, #0
 800ea54:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ea56:	693b      	ldr	r3, [r7, #16]
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3730      	adds	r7, #48	@ 0x30
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}
 800ea60:	2000a2c0 	.word	0x2000a2c0

0800ea64 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b086      	sub	sp, #24
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea6c:	f3ef 8305 	mrs	r3, IPSR
 800ea70:	613b      	str	r3, [r7, #16]
  return(result);
 800ea72:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d10f      	bne.n	800ea98 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea78:	f3ef 8310 	mrs	r3, PRIMASK
 800ea7c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d105      	bne.n	800ea90 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ea84:	f3ef 8311 	mrs	r3, BASEPRI
 800ea88:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d007      	beq.n	800eaa0 <osDelay+0x3c>
 800ea90:	4b0a      	ldr	r3, [pc, #40]	@ (800eabc <osDelay+0x58>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	2b02      	cmp	r3, #2
 800ea96:	d103      	bne.n	800eaa0 <osDelay+0x3c>
    stat = osErrorISR;
 800ea98:	f06f 0305 	mvn.w	r3, #5
 800ea9c:	617b      	str	r3, [r7, #20]
 800ea9e:	e007      	b.n	800eab0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d002      	beq.n	800eab0 <osDelay+0x4c>
      vTaskDelay(ticks);
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f001 fff4 	bl	8010a98 <vTaskDelay>
    }
  }

  return (stat);
 800eab0:	697b      	ldr	r3, [r7, #20]
}
 800eab2:	4618      	mov	r0, r3
 800eab4:	3718      	adds	r7, #24
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}
 800eaba:	bf00      	nop
 800eabc:	2000a2c0 	.word	0x2000a2c0

0800eac0 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b08a      	sub	sp, #40	@ 0x28
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800eac8:	2300      	movs	r3, #0
 800eaca:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eacc:	f3ef 8305 	mrs	r3, IPSR
 800ead0:	613b      	str	r3, [r7, #16]
  return(result);
 800ead2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	f040 8085 	bne.w	800ebe4 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eada:	f3ef 8310 	mrs	r3, PRIMASK
 800eade:	60fb      	str	r3, [r7, #12]
  return(result);
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d105      	bne.n	800eaf2 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eae6:	f3ef 8311 	mrs	r3, BASEPRI
 800eaea:	60bb      	str	r3, [r7, #8]
  return(result);
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d003      	beq.n	800eafa <osMutexNew+0x3a>
 800eaf2:	4b3f      	ldr	r3, [pc, #252]	@ (800ebf0 <osMutexNew+0x130>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2b02      	cmp	r3, #2
 800eaf8:	d074      	beq.n	800ebe4 <osMutexNew+0x124>
    if (attr != NULL) {
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d003      	beq.n	800eb08 <osMutexNew+0x48>
      type = attr->attr_bits;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	685b      	ldr	r3, [r3, #4]
 800eb04:	623b      	str	r3, [r7, #32]
 800eb06:	e001      	b.n	800eb0c <osMutexNew+0x4c>
    } else {
      type = 0U;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800eb0c:	6a3b      	ldr	r3, [r7, #32]
 800eb0e:	f003 0301 	and.w	r3, r3, #1
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d002      	beq.n	800eb1c <osMutexNew+0x5c>
      rmtx = 1U;
 800eb16:	2301      	movs	r3, #1
 800eb18:	61fb      	str	r3, [r7, #28]
 800eb1a:	e001      	b.n	800eb20 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800eb20:	6a3b      	ldr	r3, [r7, #32]
 800eb22:	f003 0308 	and.w	r3, r3, #8
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d15c      	bne.n	800ebe4 <osMutexNew+0x124>
      mem = -1;
 800eb2a:	f04f 33ff 	mov.w	r3, #4294967295
 800eb2e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d015      	beq.n	800eb62 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	689b      	ldr	r3, [r3, #8]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d006      	beq.n	800eb4c <osMutexNew+0x8c>
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	68db      	ldr	r3, [r3, #12]
 800eb42:	2b4f      	cmp	r3, #79	@ 0x4f
 800eb44:	d902      	bls.n	800eb4c <osMutexNew+0x8c>
          mem = 1;
 800eb46:	2301      	movs	r3, #1
 800eb48:	61bb      	str	r3, [r7, #24]
 800eb4a:	e00c      	b.n	800eb66 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	689b      	ldr	r3, [r3, #8]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d108      	bne.n	800eb66 <osMutexNew+0xa6>
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d104      	bne.n	800eb66 <osMutexNew+0xa6>
            mem = 0;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	61bb      	str	r3, [r7, #24]
 800eb60:	e001      	b.n	800eb66 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800eb62:	2300      	movs	r3, #0
 800eb64:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800eb66:	69bb      	ldr	r3, [r7, #24]
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	d112      	bne.n	800eb92 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800eb6c:	69fb      	ldr	r3, [r7, #28]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d007      	beq.n	800eb82 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	689b      	ldr	r3, [r3, #8]
 800eb76:	4619      	mov	r1, r3
 800eb78:	2004      	movs	r0, #4
 800eb7a:	f000 fe22 	bl	800f7c2 <xQueueCreateMutexStatic>
 800eb7e:	6278      	str	r0, [r7, #36]	@ 0x24
 800eb80:	e016      	b.n	800ebb0 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	689b      	ldr	r3, [r3, #8]
 800eb86:	4619      	mov	r1, r3
 800eb88:	2001      	movs	r0, #1
 800eb8a:	f000 fe1a 	bl	800f7c2 <xQueueCreateMutexStatic>
 800eb8e:	6278      	str	r0, [r7, #36]	@ 0x24
 800eb90:	e00e      	b.n	800ebb0 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800eb92:	69bb      	ldr	r3, [r7, #24]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d10b      	bne.n	800ebb0 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800eb98:	69fb      	ldr	r3, [r7, #28]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d004      	beq.n	800eba8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800eb9e:	2004      	movs	r0, #4
 800eba0:	f000 fdf7 	bl	800f792 <xQueueCreateMutex>
 800eba4:	6278      	str	r0, [r7, #36]	@ 0x24
 800eba6:	e003      	b.n	800ebb0 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800eba8:	2001      	movs	r0, #1
 800ebaa:	f000 fdf2 	bl	800f792 <xQueueCreateMutex>
 800ebae:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ebb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d00c      	beq.n	800ebd0 <osMutexNew+0x110>
        if (attr != NULL) {
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d003      	beq.n	800ebc4 <osMutexNew+0x104>
          name = attr->name;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	617b      	str	r3, [r7, #20]
 800ebc2:	e001      	b.n	800ebc8 <osMutexNew+0x108>
        } else {
          name = NULL;
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800ebc8:	6979      	ldr	r1, [r7, #20]
 800ebca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ebcc:	f001 fd16 	bl	80105fc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ebd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d006      	beq.n	800ebe4 <osMutexNew+0x124>
 800ebd6:	69fb      	ldr	r3, [r7, #28]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d003      	beq.n	800ebe4 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ebdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebde:	f043 0301 	orr.w	r3, r3, #1
 800ebe2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ebe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3728      	adds	r7, #40	@ 0x28
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	bf00      	nop
 800ebf0:	2000a2c0 	.word	0x2000a2c0

0800ebf4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b088      	sub	sp, #32
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	f023 0301 	bic.w	r3, r3, #1
 800ec04:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	f003 0301 	and.w	r3, r3, #1
 800ec0c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec12:	f3ef 8305 	mrs	r3, IPSR
 800ec16:	613b      	str	r3, [r7, #16]
  return(result);
 800ec18:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d10f      	bne.n	800ec3e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec1e:	f3ef 8310 	mrs	r3, PRIMASK
 800ec22:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d105      	bne.n	800ec36 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ec2a:	f3ef 8311 	mrs	r3, BASEPRI
 800ec2e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ec30:	68bb      	ldr	r3, [r7, #8]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d007      	beq.n	800ec46 <osMutexAcquire+0x52>
 800ec36:	4b1d      	ldr	r3, [pc, #116]	@ (800ecac <osMutexAcquire+0xb8>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	2b02      	cmp	r3, #2
 800ec3c:	d103      	bne.n	800ec46 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800ec3e:	f06f 0305 	mvn.w	r3, #5
 800ec42:	61fb      	str	r3, [r7, #28]
 800ec44:	e02c      	b.n	800eca0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800ec46:	69bb      	ldr	r3, [r7, #24]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d103      	bne.n	800ec54 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800ec4c:	f06f 0303 	mvn.w	r3, #3
 800ec50:	61fb      	str	r3, [r7, #28]
 800ec52:	e025      	b.n	800eca0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d011      	beq.n	800ec7e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ec5a:	6839      	ldr	r1, [r7, #0]
 800ec5c:	69b8      	ldr	r0, [r7, #24]
 800ec5e:	f000 fe02 	bl	800f866 <xQueueTakeMutexRecursive>
 800ec62:	4603      	mov	r3, r0
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d01b      	beq.n	800eca0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d003      	beq.n	800ec76 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800ec6e:	f06f 0301 	mvn.w	r3, #1
 800ec72:	61fb      	str	r3, [r7, #28]
 800ec74:	e014      	b.n	800eca0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ec76:	f06f 0302 	mvn.w	r3, #2
 800ec7a:	61fb      	str	r3, [r7, #28]
 800ec7c:	e010      	b.n	800eca0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ec7e:	6839      	ldr	r1, [r7, #0]
 800ec80:	69b8      	ldr	r0, [r7, #24]
 800ec82:	f001 f9cd 	bl	8010020 <xQueueSemaphoreTake>
 800ec86:	4603      	mov	r3, r0
 800ec88:	2b01      	cmp	r3, #1
 800ec8a:	d009      	beq.n	800eca0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d003      	beq.n	800ec9a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800ec92:	f06f 0301 	mvn.w	r3, #1
 800ec96:	61fb      	str	r3, [r7, #28]
 800ec98:	e002      	b.n	800eca0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ec9a:	f06f 0302 	mvn.w	r3, #2
 800ec9e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800eca0:	69fb      	ldr	r3, [r7, #28]
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	3720      	adds	r7, #32
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}
 800ecaa:	bf00      	nop
 800ecac:	2000a2c0 	.word	0x2000a2c0

0800ecb0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b088      	sub	sp, #32
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f023 0301 	bic.w	r3, r3, #1
 800ecbe:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f003 0301 	and.w	r3, r3, #1
 800ecc6:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ecc8:	2300      	movs	r3, #0
 800ecca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eccc:	f3ef 8305 	mrs	r3, IPSR
 800ecd0:	613b      	str	r3, [r7, #16]
  return(result);
 800ecd2:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d10f      	bne.n	800ecf8 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecd8:	f3ef 8310 	mrs	r3, PRIMASK
 800ecdc:	60fb      	str	r3, [r7, #12]
  return(result);
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d105      	bne.n	800ecf0 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ece4:	f3ef 8311 	mrs	r3, BASEPRI
 800ece8:	60bb      	str	r3, [r7, #8]
  return(result);
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d007      	beq.n	800ed00 <osMutexRelease+0x50>
 800ecf0:	4b16      	ldr	r3, [pc, #88]	@ (800ed4c <osMutexRelease+0x9c>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	2b02      	cmp	r3, #2
 800ecf6:	d103      	bne.n	800ed00 <osMutexRelease+0x50>
    stat = osErrorISR;
 800ecf8:	f06f 0305 	mvn.w	r3, #5
 800ecfc:	61fb      	str	r3, [r7, #28]
 800ecfe:	e01f      	b.n	800ed40 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800ed00:	69bb      	ldr	r3, [r7, #24]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d103      	bne.n	800ed0e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800ed06:	f06f 0303 	mvn.w	r3, #3
 800ed0a:	61fb      	str	r3, [r7, #28]
 800ed0c:	e018      	b.n	800ed40 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d009      	beq.n	800ed28 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ed14:	69b8      	ldr	r0, [r7, #24]
 800ed16:	f000 fd6f 	bl	800f7f8 <xQueueGiveMutexRecursive>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	2b01      	cmp	r3, #1
 800ed1e:	d00f      	beq.n	800ed40 <osMutexRelease+0x90>
        stat = osErrorResource;
 800ed20:	f06f 0302 	mvn.w	r3, #2
 800ed24:	61fb      	str	r3, [r7, #28]
 800ed26:	e00b      	b.n	800ed40 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ed28:	2300      	movs	r3, #0
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	2100      	movs	r1, #0
 800ed2e:	69b8      	ldr	r0, [r7, #24]
 800ed30:	f000 fe48 	bl	800f9c4 <xQueueGenericSend>
 800ed34:	4603      	mov	r3, r0
 800ed36:	2b01      	cmp	r3, #1
 800ed38:	d002      	beq.n	800ed40 <osMutexRelease+0x90>
        stat = osErrorResource;
 800ed3a:	f06f 0302 	mvn.w	r3, #2
 800ed3e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800ed40:	69fb      	ldr	r3, [r7, #28]
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3720      	adds	r7, #32
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}
 800ed4a:	bf00      	nop
 800ed4c:	2000a2c0 	.word	0x2000a2c0

0800ed50 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b08c      	sub	sp, #48	@ 0x30
 800ed54:	af02      	add	r7, sp, #8
 800ed56:	60f8      	str	r0, [r7, #12]
 800ed58:	60b9      	str	r1, [r7, #8]
 800ed5a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed60:	f3ef 8305 	mrs	r3, IPSR
 800ed64:	61bb      	str	r3, [r7, #24]
  return(result);
 800ed66:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	f040 8086 	bne.w	800ee7a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed6e:	f3ef 8310 	mrs	r3, PRIMASK
 800ed72:	617b      	str	r3, [r7, #20]
  return(result);
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d105      	bne.n	800ed86 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ed7a:	f3ef 8311 	mrs	r3, BASEPRI
 800ed7e:	613b      	str	r3, [r7, #16]
  return(result);
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d003      	beq.n	800ed8e <osSemaphoreNew+0x3e>
 800ed86:	4b3f      	ldr	r3, [pc, #252]	@ (800ee84 <osSemaphoreNew+0x134>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	2b02      	cmp	r3, #2
 800ed8c:	d075      	beq.n	800ee7a <osSemaphoreNew+0x12a>
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d072      	beq.n	800ee7a <osSemaphoreNew+0x12a>
 800ed94:	68ba      	ldr	r2, [r7, #8]
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	d86e      	bhi.n	800ee7a <osSemaphoreNew+0x12a>
    mem = -1;
 800ed9c:	f04f 33ff 	mov.w	r3, #4294967295
 800eda0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d015      	beq.n	800edd4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	689b      	ldr	r3, [r3, #8]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d006      	beq.n	800edbe <osSemaphoreNew+0x6e>
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	68db      	ldr	r3, [r3, #12]
 800edb4:	2b4f      	cmp	r3, #79	@ 0x4f
 800edb6:	d902      	bls.n	800edbe <osSemaphoreNew+0x6e>
        mem = 1;
 800edb8:	2301      	movs	r3, #1
 800edba:	623b      	str	r3, [r7, #32]
 800edbc:	e00c      	b.n	800edd8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	689b      	ldr	r3, [r3, #8]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d108      	bne.n	800edd8 <osSemaphoreNew+0x88>
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	68db      	ldr	r3, [r3, #12]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d104      	bne.n	800edd8 <osSemaphoreNew+0x88>
          mem = 0;
 800edce:	2300      	movs	r3, #0
 800edd0:	623b      	str	r3, [r7, #32]
 800edd2:	e001      	b.n	800edd8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800edd4:	2300      	movs	r3, #0
 800edd6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800edd8:	6a3b      	ldr	r3, [r7, #32]
 800edda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edde:	d04c      	beq.n	800ee7a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2b01      	cmp	r3, #1
 800ede4:	d128      	bne.n	800ee38 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800ede6:	6a3b      	ldr	r3, [r7, #32]
 800ede8:	2b01      	cmp	r3, #1
 800edea:	d10a      	bne.n	800ee02 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	689b      	ldr	r3, [r3, #8]
 800edf0:	2203      	movs	r2, #3
 800edf2:	9200      	str	r2, [sp, #0]
 800edf4:	2200      	movs	r2, #0
 800edf6:	2100      	movs	r1, #0
 800edf8:	2001      	movs	r0, #1
 800edfa:	f000 fbc3 	bl	800f584 <xQueueGenericCreateStatic>
 800edfe:	6278      	str	r0, [r7, #36]	@ 0x24
 800ee00:	e005      	b.n	800ee0e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800ee02:	2203      	movs	r2, #3
 800ee04:	2100      	movs	r1, #0
 800ee06:	2001      	movs	r0, #1
 800ee08:	f000 fc43 	bl	800f692 <xQueueGenericCreate>
 800ee0c:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ee0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d022      	beq.n	800ee5a <osSemaphoreNew+0x10a>
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d01f      	beq.n	800ee5a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	2100      	movs	r1, #0
 800ee20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ee22:	f000 fdcf 	bl	800f9c4 <xQueueGenericSend>
 800ee26:	4603      	mov	r3, r0
 800ee28:	2b01      	cmp	r3, #1
 800ee2a:	d016      	beq.n	800ee5a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800ee2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ee2e:	f001 fa97 	bl	8010360 <vQueueDelete>
            hSemaphore = NULL;
 800ee32:	2300      	movs	r3, #0
 800ee34:	627b      	str	r3, [r7, #36]	@ 0x24
 800ee36:	e010      	b.n	800ee5a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800ee38:	6a3b      	ldr	r3, [r7, #32]
 800ee3a:	2b01      	cmp	r3, #1
 800ee3c:	d108      	bne.n	800ee50 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	689b      	ldr	r3, [r3, #8]
 800ee42:	461a      	mov	r2, r3
 800ee44:	68b9      	ldr	r1, [r7, #8]
 800ee46:	68f8      	ldr	r0, [r7, #12]
 800ee48:	f000 fd46 	bl	800f8d8 <xQueueCreateCountingSemaphoreStatic>
 800ee4c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ee4e:	e004      	b.n	800ee5a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ee50:	68b9      	ldr	r1, [r7, #8]
 800ee52:	68f8      	ldr	r0, [r7, #12]
 800ee54:	f000 fd7d 	bl	800f952 <xQueueCreateCountingSemaphore>
 800ee58:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ee5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d00c      	beq.n	800ee7a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d003      	beq.n	800ee6e <osSemaphoreNew+0x11e>
          name = attr->name;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	61fb      	str	r3, [r7, #28]
 800ee6c:	e001      	b.n	800ee72 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ee72:	69f9      	ldr	r1, [r7, #28]
 800ee74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ee76:	f001 fbc1 	bl	80105fc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ee7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3728      	adds	r7, #40	@ 0x28
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}
 800ee84:	2000a2c0 	.word	0x2000a2c0

0800ee88 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b088      	sub	sp, #32
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ee96:	2300      	movs	r3, #0
 800ee98:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800ee9a:	69bb      	ldr	r3, [r7, #24]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d103      	bne.n	800eea8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800eea0:	f06f 0303 	mvn.w	r3, #3
 800eea4:	61fb      	str	r3, [r7, #28]
 800eea6:	e04b      	b.n	800ef40 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eea8:	f3ef 8305 	mrs	r3, IPSR
 800eeac:	617b      	str	r3, [r7, #20]
  return(result);
 800eeae:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d10f      	bne.n	800eed4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eeb4:	f3ef 8310 	mrs	r3, PRIMASK
 800eeb8:	613b      	str	r3, [r7, #16]
  return(result);
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d105      	bne.n	800eecc <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eec0:	f3ef 8311 	mrs	r3, BASEPRI
 800eec4:	60fb      	str	r3, [r7, #12]
  return(result);
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d026      	beq.n	800ef1a <osSemaphoreAcquire+0x92>
 800eecc:	4b1f      	ldr	r3, [pc, #124]	@ (800ef4c <osSemaphoreAcquire+0xc4>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	2b02      	cmp	r3, #2
 800eed2:	d122      	bne.n	800ef1a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d003      	beq.n	800eee2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800eeda:	f06f 0303 	mvn.w	r3, #3
 800eede:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800eee0:	e02d      	b.n	800ef3e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800eee2:	2300      	movs	r3, #0
 800eee4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800eee6:	f107 0308 	add.w	r3, r7, #8
 800eeea:	461a      	mov	r2, r3
 800eeec:	2100      	movs	r1, #0
 800eeee:	69b8      	ldr	r0, [r7, #24]
 800eef0:	f001 f9ae 	bl	8010250 <xQueueReceiveFromISR>
 800eef4:	4603      	mov	r3, r0
 800eef6:	2b01      	cmp	r3, #1
 800eef8:	d003      	beq.n	800ef02 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800eefa:	f06f 0302 	mvn.w	r3, #2
 800eefe:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800ef00:	e01d      	b.n	800ef3e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d01a      	beq.n	800ef3e <osSemaphoreAcquire+0xb6>
 800ef08:	4b11      	ldr	r3, [pc, #68]	@ (800ef50 <osSemaphoreAcquire+0xc8>)
 800ef0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef0e:	601a      	str	r2, [r3, #0]
 800ef10:	f3bf 8f4f 	dsb	sy
 800ef14:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800ef18:	e011      	b.n	800ef3e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ef1a:	6839      	ldr	r1, [r7, #0]
 800ef1c:	69b8      	ldr	r0, [r7, #24]
 800ef1e:	f001 f87f 	bl	8010020 <xQueueSemaphoreTake>
 800ef22:	4603      	mov	r3, r0
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	d00b      	beq.n	800ef40 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d003      	beq.n	800ef36 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800ef2e:	f06f 0301 	mvn.w	r3, #1
 800ef32:	61fb      	str	r3, [r7, #28]
 800ef34:	e004      	b.n	800ef40 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800ef36:	f06f 0302 	mvn.w	r3, #2
 800ef3a:	61fb      	str	r3, [r7, #28]
 800ef3c:	e000      	b.n	800ef40 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800ef3e:	bf00      	nop
      }
    }
  }

  return (stat);
 800ef40:	69fb      	ldr	r3, [r7, #28]
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3720      	adds	r7, #32
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}
 800ef4a:	bf00      	nop
 800ef4c:	2000a2c0 	.word	0x2000a2c0
 800ef50:	e000ed04 	.word	0xe000ed04

0800ef54 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b088      	sub	sp, #32
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ef60:	2300      	movs	r3, #0
 800ef62:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800ef64:	69bb      	ldr	r3, [r7, #24]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d103      	bne.n	800ef72 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ef6a:	f06f 0303 	mvn.w	r3, #3
 800ef6e:	61fb      	str	r3, [r7, #28]
 800ef70:	e03e      	b.n	800eff0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef72:	f3ef 8305 	mrs	r3, IPSR
 800ef76:	617b      	str	r3, [r7, #20]
  return(result);
 800ef78:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d10f      	bne.n	800ef9e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef7e:	f3ef 8310 	mrs	r3, PRIMASK
 800ef82:	613b      	str	r3, [r7, #16]
  return(result);
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d105      	bne.n	800ef96 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ef8a:	f3ef 8311 	mrs	r3, BASEPRI
 800ef8e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d01e      	beq.n	800efd4 <osSemaphoreRelease+0x80>
 800ef96:	4b19      	ldr	r3, [pc, #100]	@ (800effc <osSemaphoreRelease+0xa8>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	2b02      	cmp	r3, #2
 800ef9c:	d11a      	bne.n	800efd4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800efa2:	f107 0308 	add.w	r3, r7, #8
 800efa6:	4619      	mov	r1, r3
 800efa8:	69b8      	ldr	r0, [r7, #24]
 800efaa:	f000 feb8 	bl	800fd1e <xQueueGiveFromISR>
 800efae:	4603      	mov	r3, r0
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	d003      	beq.n	800efbc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800efb4:	f06f 0302 	mvn.w	r3, #2
 800efb8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800efba:	e018      	b.n	800efee <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d015      	beq.n	800efee <osSemaphoreRelease+0x9a>
 800efc2:	4b0f      	ldr	r3, [pc, #60]	@ (800f000 <osSemaphoreRelease+0xac>)
 800efc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800efc8:	601a      	str	r2, [r3, #0]
 800efca:	f3bf 8f4f 	dsb	sy
 800efce:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800efd2:	e00c      	b.n	800efee <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800efd4:	2300      	movs	r3, #0
 800efd6:	2200      	movs	r2, #0
 800efd8:	2100      	movs	r1, #0
 800efda:	69b8      	ldr	r0, [r7, #24]
 800efdc:	f000 fcf2 	bl	800f9c4 <xQueueGenericSend>
 800efe0:	4603      	mov	r3, r0
 800efe2:	2b01      	cmp	r3, #1
 800efe4:	d004      	beq.n	800eff0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800efe6:	f06f 0302 	mvn.w	r3, #2
 800efea:	61fb      	str	r3, [r7, #28]
 800efec:	e000      	b.n	800eff0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800efee:	bf00      	nop
    }
  }

  return (stat);
 800eff0:	69fb      	ldr	r3, [r7, #28]
}
 800eff2:	4618      	mov	r0, r3
 800eff4:	3720      	adds	r7, #32
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}
 800effa:	bf00      	nop
 800effc:	2000a2c0 	.word	0x2000a2c0
 800f000:	e000ed04 	.word	0xe000ed04

0800f004 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f004:	b580      	push	{r7, lr}
 800f006:	b08c      	sub	sp, #48	@ 0x30
 800f008:	af02      	add	r7, sp, #8
 800f00a:	60f8      	str	r0, [r7, #12]
 800f00c:	60b9      	str	r1, [r7, #8]
 800f00e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f010:	2300      	movs	r3, #0
 800f012:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f014:	f3ef 8305 	mrs	r3, IPSR
 800f018:	61bb      	str	r3, [r7, #24]
  return(result);
 800f01a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d16f      	bne.n	800f100 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f020:	f3ef 8310 	mrs	r3, PRIMASK
 800f024:	617b      	str	r3, [r7, #20]
  return(result);
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d105      	bne.n	800f038 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f02c:	f3ef 8311 	mrs	r3, BASEPRI
 800f030:	613b      	str	r3, [r7, #16]
  return(result);
 800f032:	693b      	ldr	r3, [r7, #16]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d003      	beq.n	800f040 <osMessageQueueNew+0x3c>
 800f038:	4b34      	ldr	r3, [pc, #208]	@ (800f10c <osMessageQueueNew+0x108>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	2b02      	cmp	r3, #2
 800f03e:	d05f      	beq.n	800f100 <osMessageQueueNew+0xfc>
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d05c      	beq.n	800f100 <osMessageQueueNew+0xfc>
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d059      	beq.n	800f100 <osMessageQueueNew+0xfc>
    mem = -1;
 800f04c:	f04f 33ff 	mov.w	r3, #4294967295
 800f050:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d029      	beq.n	800f0ac <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	689b      	ldr	r3, [r3, #8]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d012      	beq.n	800f086 <osMessageQueueNew+0x82>
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	68db      	ldr	r3, [r3, #12]
 800f064:	2b4f      	cmp	r3, #79	@ 0x4f
 800f066:	d90e      	bls.n	800f086 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d00a      	beq.n	800f086 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	695a      	ldr	r2, [r3, #20]
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	68b9      	ldr	r1, [r7, #8]
 800f078:	fb01 f303 	mul.w	r3, r1, r3
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d302      	bcc.n	800f086 <osMessageQueueNew+0x82>
        mem = 1;
 800f080:	2301      	movs	r3, #1
 800f082:	623b      	str	r3, [r7, #32]
 800f084:	e014      	b.n	800f0b0 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d110      	bne.n	800f0b0 <osMessageQueueNew+0xac>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	68db      	ldr	r3, [r3, #12]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d10c      	bne.n	800f0b0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d108      	bne.n	800f0b0 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	695b      	ldr	r3, [r3, #20]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d104      	bne.n	800f0b0 <osMessageQueueNew+0xac>
          mem = 0;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	623b      	str	r3, [r7, #32]
 800f0aa:	e001      	b.n	800f0b0 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f0b0:	6a3b      	ldr	r3, [r7, #32]
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	d10b      	bne.n	800f0ce <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	691a      	ldr	r2, [r3, #16]
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	689b      	ldr	r3, [r3, #8]
 800f0be:	2100      	movs	r1, #0
 800f0c0:	9100      	str	r1, [sp, #0]
 800f0c2:	68b9      	ldr	r1, [r7, #8]
 800f0c4:	68f8      	ldr	r0, [r7, #12]
 800f0c6:	f000 fa5d 	bl	800f584 <xQueueGenericCreateStatic>
 800f0ca:	6278      	str	r0, [r7, #36]	@ 0x24
 800f0cc:	e008      	b.n	800f0e0 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800f0ce:	6a3b      	ldr	r3, [r7, #32]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d105      	bne.n	800f0e0 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	68b9      	ldr	r1, [r7, #8]
 800f0d8:	68f8      	ldr	r0, [r7, #12]
 800f0da:	f000 fada 	bl	800f692 <xQueueGenericCreate>
 800f0de:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d00c      	beq.n	800f100 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d003      	beq.n	800f0f4 <osMessageQueueNew+0xf0>
        name = attr->name;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	61fb      	str	r3, [r7, #28]
 800f0f2:	e001      	b.n	800f0f8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800f0f8:	69f9      	ldr	r1, [r7, #28]
 800f0fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f0fc:	f001 fa7e 	bl	80105fc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f102:	4618      	mov	r0, r3
 800f104:	3728      	adds	r7, #40	@ 0x28
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}
 800f10a:	bf00      	nop
 800f10c:	2000a2c0 	.word	0x2000a2c0

0800f110 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f110:	b580      	push	{r7, lr}
 800f112:	b08a      	sub	sp, #40	@ 0x28
 800f114:	af00      	add	r7, sp, #0
 800f116:	60f8      	str	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	603b      	str	r3, [r7, #0]
 800f11c:	4613      	mov	r3, r2
 800f11e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f124:	2300      	movs	r3, #0
 800f126:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f128:	f3ef 8305 	mrs	r3, IPSR
 800f12c:	61fb      	str	r3, [r7, #28]
  return(result);
 800f12e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800f130:	2b00      	cmp	r3, #0
 800f132:	d10f      	bne.n	800f154 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f134:	f3ef 8310 	mrs	r3, PRIMASK
 800f138:	61bb      	str	r3, [r7, #24]
  return(result);
 800f13a:	69bb      	ldr	r3, [r7, #24]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d105      	bne.n	800f14c <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f140:	f3ef 8311 	mrs	r3, BASEPRI
 800f144:	617b      	str	r3, [r7, #20]
  return(result);
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d02c      	beq.n	800f1a6 <osMessageQueuePut+0x96>
 800f14c:	4b28      	ldr	r3, [pc, #160]	@ (800f1f0 <osMessageQueuePut+0xe0>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	2b02      	cmp	r3, #2
 800f152:	d128      	bne.n	800f1a6 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f154:	6a3b      	ldr	r3, [r7, #32]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d005      	beq.n	800f166 <osMessageQueuePut+0x56>
 800f15a:	68bb      	ldr	r3, [r7, #8]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d002      	beq.n	800f166 <osMessageQueuePut+0x56>
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d003      	beq.n	800f16e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800f166:	f06f 0303 	mvn.w	r3, #3
 800f16a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f16c:	e039      	b.n	800f1e2 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800f16e:	2300      	movs	r3, #0
 800f170:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f172:	f107 0210 	add.w	r2, r7, #16
 800f176:	2300      	movs	r3, #0
 800f178:	68b9      	ldr	r1, [r7, #8]
 800f17a:	6a38      	ldr	r0, [r7, #32]
 800f17c:	f000 fd2c 	bl	800fbd8 <xQueueGenericSendFromISR>
 800f180:	4603      	mov	r3, r0
 800f182:	2b01      	cmp	r3, #1
 800f184:	d003      	beq.n	800f18e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800f186:	f06f 0302 	mvn.w	r3, #2
 800f18a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f18c:	e029      	b.n	800f1e2 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d026      	beq.n	800f1e2 <osMessageQueuePut+0xd2>
 800f194:	4b17      	ldr	r3, [pc, #92]	@ (800f1f4 <osMessageQueuePut+0xe4>)
 800f196:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f19a:	601a      	str	r2, [r3, #0]
 800f19c:	f3bf 8f4f 	dsb	sy
 800f1a0:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f1a4:	e01d      	b.n	800f1e2 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f1a6:	6a3b      	ldr	r3, [r7, #32]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d002      	beq.n	800f1b2 <osMessageQueuePut+0xa2>
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d103      	bne.n	800f1ba <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800f1b2:	f06f 0303 	mvn.w	r3, #3
 800f1b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1b8:	e014      	b.n	800f1e4 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	683a      	ldr	r2, [r7, #0]
 800f1be:	68b9      	ldr	r1, [r7, #8]
 800f1c0:	6a38      	ldr	r0, [r7, #32]
 800f1c2:	f000 fbff 	bl	800f9c4 <xQueueGenericSend>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	2b01      	cmp	r3, #1
 800f1ca:	d00b      	beq.n	800f1e4 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d003      	beq.n	800f1da <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800f1d2:	f06f 0301 	mvn.w	r3, #1
 800f1d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1d8:	e004      	b.n	800f1e4 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800f1da:	f06f 0302 	mvn.w	r3, #2
 800f1de:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1e0:	e000      	b.n	800f1e4 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f1e2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3728      	adds	r7, #40	@ 0x28
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}
 800f1ee:	bf00      	nop
 800f1f0:	2000a2c0 	.word	0x2000a2c0
 800f1f4:	e000ed04 	.word	0xe000ed04

0800f1f8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b08a      	sub	sp, #40	@ 0x28
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	60f8      	str	r0, [r7, #12]
 800f200:	60b9      	str	r1, [r7, #8]
 800f202:	607a      	str	r2, [r7, #4]
 800f204:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f20a:	2300      	movs	r3, #0
 800f20c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f20e:	f3ef 8305 	mrs	r3, IPSR
 800f212:	61fb      	str	r3, [r7, #28]
  return(result);
 800f214:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800f216:	2b00      	cmp	r3, #0
 800f218:	d10f      	bne.n	800f23a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f21a:	f3ef 8310 	mrs	r3, PRIMASK
 800f21e:	61bb      	str	r3, [r7, #24]
  return(result);
 800f220:	69bb      	ldr	r3, [r7, #24]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d105      	bne.n	800f232 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f226:	f3ef 8311 	mrs	r3, BASEPRI
 800f22a:	617b      	str	r3, [r7, #20]
  return(result);
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d02c      	beq.n	800f28c <osMessageQueueGet+0x94>
 800f232:	4b28      	ldr	r3, [pc, #160]	@ (800f2d4 <osMessageQueueGet+0xdc>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	2b02      	cmp	r3, #2
 800f238:	d128      	bne.n	800f28c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f23a:	6a3b      	ldr	r3, [r7, #32]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d005      	beq.n	800f24c <osMessageQueueGet+0x54>
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d002      	beq.n	800f24c <osMessageQueueGet+0x54>
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d003      	beq.n	800f254 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800f24c:	f06f 0303 	mvn.w	r3, #3
 800f250:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f252:	e038      	b.n	800f2c6 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800f254:	2300      	movs	r3, #0
 800f256:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f258:	f107 0310 	add.w	r3, r7, #16
 800f25c:	461a      	mov	r2, r3
 800f25e:	68b9      	ldr	r1, [r7, #8]
 800f260:	6a38      	ldr	r0, [r7, #32]
 800f262:	f000 fff5 	bl	8010250 <xQueueReceiveFromISR>
 800f266:	4603      	mov	r3, r0
 800f268:	2b01      	cmp	r3, #1
 800f26a:	d003      	beq.n	800f274 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800f26c:	f06f 0302 	mvn.w	r3, #2
 800f270:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f272:	e028      	b.n	800f2c6 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800f274:	693b      	ldr	r3, [r7, #16]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d025      	beq.n	800f2c6 <osMessageQueueGet+0xce>
 800f27a:	4b17      	ldr	r3, [pc, #92]	@ (800f2d8 <osMessageQueueGet+0xe0>)
 800f27c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f280:	601a      	str	r2, [r3, #0]
 800f282:	f3bf 8f4f 	dsb	sy
 800f286:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f28a:	e01c      	b.n	800f2c6 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f28c:	6a3b      	ldr	r3, [r7, #32]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d002      	beq.n	800f298 <osMessageQueueGet+0xa0>
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d103      	bne.n	800f2a0 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800f298:	f06f 0303 	mvn.w	r3, #3
 800f29c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f29e:	e013      	b.n	800f2c8 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f2a0:	683a      	ldr	r2, [r7, #0]
 800f2a2:	68b9      	ldr	r1, [r7, #8]
 800f2a4:	6a38      	ldr	r0, [r7, #32]
 800f2a6:	f000 fdd3 	bl	800fe50 <xQueueReceive>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	d00b      	beq.n	800f2c8 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d003      	beq.n	800f2be <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800f2b6:	f06f 0301 	mvn.w	r3, #1
 800f2ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800f2bc:	e004      	b.n	800f2c8 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800f2be:	f06f 0302 	mvn.w	r3, #2
 800f2c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800f2c4:	e000      	b.n	800f2c8 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f2c6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	3728      	adds	r7, #40	@ 0x28
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}
 800f2d2:	bf00      	nop
 800f2d4:	2000a2c0 	.word	0x2000a2c0
 800f2d8:	e000ed04 	.word	0xe000ed04

0800f2dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f2dc:	b480      	push	{r7}
 800f2de:	b085      	sub	sp, #20
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	60f8      	str	r0, [r7, #12]
 800f2e4:	60b9      	str	r1, [r7, #8]
 800f2e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	4a07      	ldr	r2, [pc, #28]	@ (800f308 <vApplicationGetIdleTaskMemory+0x2c>)
 800f2ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	4a06      	ldr	r2, [pc, #24]	@ (800f30c <vApplicationGetIdleTaskMemory+0x30>)
 800f2f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f2fa:	601a      	str	r2, [r3, #0]
}
 800f2fc:	bf00      	nop
 800f2fe:	3714      	adds	r7, #20
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr
 800f308:	2000a2c4 	.word	0x2000a2c4
 800f30c:	2000a36c 	.word	0x2000a36c

0800f310 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f310:	b480      	push	{r7}
 800f312:	b085      	sub	sp, #20
 800f314:	af00      	add	r7, sp, #0
 800f316:	60f8      	str	r0, [r7, #12]
 800f318:	60b9      	str	r1, [r7, #8]
 800f31a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	4a07      	ldr	r2, [pc, #28]	@ (800f33c <vApplicationGetTimerTaskMemory+0x2c>)
 800f320:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	4a06      	ldr	r2, [pc, #24]	@ (800f340 <vApplicationGetTimerTaskMemory+0x30>)
 800f326:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f32e:	601a      	str	r2, [r3, #0]
}
 800f330:	bf00      	nop
 800f332:	3714      	adds	r7, #20
 800f334:	46bd      	mov	sp, r7
 800f336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33a:	4770      	bx	lr
 800f33c:	2000a76c 	.word	0x2000a76c
 800f340:	2000a814 	.word	0x2000a814

0800f344 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f344:	b480      	push	{r7}
 800f346:	b083      	sub	sp, #12
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f103 0208 	add.w	r2, r3, #8
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f04f 32ff 	mov.w	r2, #4294967295
 800f35c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f103 0208 	add.w	r2, r3, #8
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f103 0208 	add.w	r2, r3, #8
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2200      	movs	r2, #0
 800f376:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f378:	bf00      	nop
 800f37a:	370c      	adds	r7, #12
 800f37c:	46bd      	mov	sp, r7
 800f37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f382:	4770      	bx	lr

0800f384 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f384:	b480      	push	{r7}
 800f386:	b083      	sub	sp, #12
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2200      	movs	r2, #0
 800f390:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f392:	bf00      	nop
 800f394:	370c      	adds	r7, #12
 800f396:	46bd      	mov	sp, r7
 800f398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39c:	4770      	bx	lr

0800f39e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f39e:	b480      	push	{r7}
 800f3a0:	b085      	sub	sp, #20
 800f3a2:	af00      	add	r7, sp, #0
 800f3a4:	6078      	str	r0, [r7, #4]
 800f3a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	68fa      	ldr	r2, [r7, #12]
 800f3b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	689a      	ldr	r2, [r3, #8]
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	689b      	ldr	r3, [r3, #8]
 800f3c0:	683a      	ldr	r2, [r7, #0]
 800f3c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	683a      	ldr	r2, [r7, #0]
 800f3c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	687a      	ldr	r2, [r7, #4]
 800f3ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	1c5a      	adds	r2, r3, #1
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	601a      	str	r2, [r3, #0]
}
 800f3da:	bf00      	nop
 800f3dc:	3714      	adds	r7, #20
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e4:	4770      	bx	lr

0800f3e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f3e6:	b480      	push	{r7}
 800f3e8:	b085      	sub	sp, #20
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	6078      	str	r0, [r7, #4]
 800f3ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f3f6:	68bb      	ldr	r3, [r7, #8]
 800f3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3fc:	d103      	bne.n	800f406 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	691b      	ldr	r3, [r3, #16]
 800f402:	60fb      	str	r3, [r7, #12]
 800f404:	e00c      	b.n	800f420 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	3308      	adds	r3, #8
 800f40a:	60fb      	str	r3, [r7, #12]
 800f40c:	e002      	b.n	800f414 <vListInsert+0x2e>
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	685b      	ldr	r3, [r3, #4]
 800f412:	60fb      	str	r3, [r7, #12]
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	685b      	ldr	r3, [r3, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	68ba      	ldr	r2, [r7, #8]
 800f41c:	429a      	cmp	r2, r3
 800f41e:	d2f6      	bcs.n	800f40e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	685a      	ldr	r2, [r3, #4]
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	685b      	ldr	r3, [r3, #4]
 800f42c:	683a      	ldr	r2, [r7, #0]
 800f42e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	68fa      	ldr	r2, [r7, #12]
 800f434:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	683a      	ldr	r2, [r7, #0]
 800f43a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	687a      	ldr	r2, [r7, #4]
 800f440:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	1c5a      	adds	r2, r3, #1
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	601a      	str	r2, [r3, #0]
}
 800f44c:	bf00      	nop
 800f44e:	3714      	adds	r7, #20
 800f450:	46bd      	mov	sp, r7
 800f452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f456:	4770      	bx	lr

0800f458 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f458:	b480      	push	{r7}
 800f45a:	b085      	sub	sp, #20
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	691b      	ldr	r3, [r3, #16]
 800f464:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	685b      	ldr	r3, [r3, #4]
 800f46a:	687a      	ldr	r2, [r7, #4]
 800f46c:	6892      	ldr	r2, [r2, #8]
 800f46e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	689b      	ldr	r3, [r3, #8]
 800f474:	687a      	ldr	r2, [r7, #4]
 800f476:	6852      	ldr	r2, [r2, #4]
 800f478:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	687a      	ldr	r2, [r7, #4]
 800f480:	429a      	cmp	r2, r3
 800f482:	d103      	bne.n	800f48c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	689a      	ldr	r2, [r3, #8]
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2200      	movs	r2, #0
 800f490:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	1e5a      	subs	r2, r3, #1
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	681b      	ldr	r3, [r3, #0]
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3714      	adds	r7, #20
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr

0800f4ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b084      	sub	sp, #16
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d10d      	bne.n	800f4dc <xQueueGenericReset+0x30>
	__asm volatile
 800f4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4c4:	b672      	cpsid	i
 800f4c6:	f383 8811 	msr	BASEPRI, r3
 800f4ca:	f3bf 8f6f 	isb	sy
 800f4ce:	f3bf 8f4f 	dsb	sy
 800f4d2:	b662      	cpsie	i
 800f4d4:	60bb      	str	r3, [r7, #8]
}
 800f4d6:	bf00      	nop
 800f4d8:	bf00      	nop
 800f4da:	e7fd      	b.n	800f4d8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800f4dc:	f002 ff46 	bl	801236c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4e8:	68f9      	ldr	r1, [r7, #12]
 800f4ea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f4ec:	fb01 f303 	mul.w	r3, r1, r3
 800f4f0:	441a      	add	r2, r3
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	681a      	ldr	r2, [r3, #0]
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f50c:	3b01      	subs	r3, #1
 800f50e:	68f9      	ldr	r1, [r7, #12]
 800f510:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f512:	fb01 f303 	mul.w	r3, r1, r3
 800f516:	441a      	add	r2, r3
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	22ff      	movs	r2, #255	@ 0xff
 800f520:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	22ff      	movs	r2, #255	@ 0xff
 800f528:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d114      	bne.n	800f55c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	691b      	ldr	r3, [r3, #16]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d01a      	beq.n	800f570 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	3310      	adds	r3, #16
 800f53e:	4618      	mov	r0, r3
 800f540:	f001 fdc4 	bl	80110cc <xTaskRemoveFromEventList>
 800f544:	4603      	mov	r3, r0
 800f546:	2b00      	cmp	r3, #0
 800f548:	d012      	beq.n	800f570 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f54a:	4b0d      	ldr	r3, [pc, #52]	@ (800f580 <xQueueGenericReset+0xd4>)
 800f54c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f550:	601a      	str	r2, [r3, #0]
 800f552:	f3bf 8f4f 	dsb	sy
 800f556:	f3bf 8f6f 	isb	sy
 800f55a:	e009      	b.n	800f570 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	3310      	adds	r3, #16
 800f560:	4618      	mov	r0, r3
 800f562:	f7ff feef 	bl	800f344 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	3324      	adds	r3, #36	@ 0x24
 800f56a:	4618      	mov	r0, r3
 800f56c:	f7ff feea 	bl	800f344 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f570:	f002 ff32 	bl	80123d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f574:	2301      	movs	r3, #1
}
 800f576:	4618      	mov	r0, r3
 800f578:	3710      	adds	r7, #16
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}
 800f57e:	bf00      	nop
 800f580:	e000ed04 	.word	0xe000ed04

0800f584 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f584:	b580      	push	{r7, lr}
 800f586:	b08e      	sub	sp, #56	@ 0x38
 800f588:	af02      	add	r7, sp, #8
 800f58a:	60f8      	str	r0, [r7, #12]
 800f58c:	60b9      	str	r1, [r7, #8]
 800f58e:	607a      	str	r2, [r7, #4]
 800f590:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d10d      	bne.n	800f5b4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800f598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f59c:	b672      	cpsid	i
 800f59e:	f383 8811 	msr	BASEPRI, r3
 800f5a2:	f3bf 8f6f 	isb	sy
 800f5a6:	f3bf 8f4f 	dsb	sy
 800f5aa:	b662      	cpsie	i
 800f5ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f5ae:	bf00      	nop
 800f5b0:	bf00      	nop
 800f5b2:	e7fd      	b.n	800f5b0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d10d      	bne.n	800f5d6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800f5ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5be:	b672      	cpsid	i
 800f5c0:	f383 8811 	msr	BASEPRI, r3
 800f5c4:	f3bf 8f6f 	isb	sy
 800f5c8:	f3bf 8f4f 	dsb	sy
 800f5cc:	b662      	cpsie	i
 800f5ce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f5d0:	bf00      	nop
 800f5d2:	bf00      	nop
 800f5d4:	e7fd      	b.n	800f5d2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d002      	beq.n	800f5e2 <xQueueGenericCreateStatic+0x5e>
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d001      	beq.n	800f5e6 <xQueueGenericCreateStatic+0x62>
 800f5e2:	2301      	movs	r3, #1
 800f5e4:	e000      	b.n	800f5e8 <xQueueGenericCreateStatic+0x64>
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d10d      	bne.n	800f608 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800f5ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5f0:	b672      	cpsid	i
 800f5f2:	f383 8811 	msr	BASEPRI, r3
 800f5f6:	f3bf 8f6f 	isb	sy
 800f5fa:	f3bf 8f4f 	dsb	sy
 800f5fe:	b662      	cpsie	i
 800f600:	623b      	str	r3, [r7, #32]
}
 800f602:	bf00      	nop
 800f604:	bf00      	nop
 800f606:	e7fd      	b.n	800f604 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d102      	bne.n	800f614 <xQueueGenericCreateStatic+0x90>
 800f60e:	68bb      	ldr	r3, [r7, #8]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d101      	bne.n	800f618 <xQueueGenericCreateStatic+0x94>
 800f614:	2301      	movs	r3, #1
 800f616:	e000      	b.n	800f61a <xQueueGenericCreateStatic+0x96>
 800f618:	2300      	movs	r3, #0
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d10d      	bne.n	800f63a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800f61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f622:	b672      	cpsid	i
 800f624:	f383 8811 	msr	BASEPRI, r3
 800f628:	f3bf 8f6f 	isb	sy
 800f62c:	f3bf 8f4f 	dsb	sy
 800f630:	b662      	cpsie	i
 800f632:	61fb      	str	r3, [r7, #28]
}
 800f634:	bf00      	nop
 800f636:	bf00      	nop
 800f638:	e7fd      	b.n	800f636 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f63a:	2350      	movs	r3, #80	@ 0x50
 800f63c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	2b50      	cmp	r3, #80	@ 0x50
 800f642:	d00d      	beq.n	800f660 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800f644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f648:	b672      	cpsid	i
 800f64a:	f383 8811 	msr	BASEPRI, r3
 800f64e:	f3bf 8f6f 	isb	sy
 800f652:	f3bf 8f4f 	dsb	sy
 800f656:	b662      	cpsie	i
 800f658:	61bb      	str	r3, [r7, #24]
}
 800f65a:	bf00      	nop
 800f65c:	bf00      	nop
 800f65e:	e7fd      	b.n	800f65c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f660:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d00d      	beq.n	800f688 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f66c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f66e:	2201      	movs	r2, #1
 800f670:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f674:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f67a:	9300      	str	r3, [sp, #0]
 800f67c:	4613      	mov	r3, r2
 800f67e:	687a      	ldr	r2, [r7, #4]
 800f680:	68b9      	ldr	r1, [r7, #8]
 800f682:	68f8      	ldr	r0, [r7, #12]
 800f684:	f000 f848 	bl	800f718 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f68a:	4618      	mov	r0, r3
 800f68c:	3730      	adds	r7, #48	@ 0x30
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}

0800f692 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f692:	b580      	push	{r7, lr}
 800f694:	b08a      	sub	sp, #40	@ 0x28
 800f696:	af02      	add	r7, sp, #8
 800f698:	60f8      	str	r0, [r7, #12]
 800f69a:	60b9      	str	r1, [r7, #8]
 800f69c:	4613      	mov	r3, r2
 800f69e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d10d      	bne.n	800f6c2 <xQueueGenericCreate+0x30>
	__asm volatile
 800f6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6aa:	b672      	cpsid	i
 800f6ac:	f383 8811 	msr	BASEPRI, r3
 800f6b0:	f3bf 8f6f 	isb	sy
 800f6b4:	f3bf 8f4f 	dsb	sy
 800f6b8:	b662      	cpsie	i
 800f6ba:	613b      	str	r3, [r7, #16]
}
 800f6bc:	bf00      	nop
 800f6be:	bf00      	nop
 800f6c0:	e7fd      	b.n	800f6be <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d102      	bne.n	800f6ce <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	61fb      	str	r3, [r7, #28]
 800f6cc:	e004      	b.n	800f6d8 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	68ba      	ldr	r2, [r7, #8]
 800f6d2:	fb02 f303 	mul.w	r3, r2, r3
 800f6d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f6d8:	69fb      	ldr	r3, [r7, #28]
 800f6da:	3350      	adds	r3, #80	@ 0x50
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f002 ff73 	bl	80125c8 <pvPortMalloc>
 800f6e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f6e4:	69bb      	ldr	r3, [r7, #24]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d011      	beq.n	800f70e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f6ea:	69bb      	ldr	r3, [r7, #24]
 800f6ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	3350      	adds	r3, #80	@ 0x50
 800f6f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f6f4:	69bb      	ldr	r3, [r7, #24]
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f6fc:	79fa      	ldrb	r2, [r7, #7]
 800f6fe:	69bb      	ldr	r3, [r7, #24]
 800f700:	9300      	str	r3, [sp, #0]
 800f702:	4613      	mov	r3, r2
 800f704:	697a      	ldr	r2, [r7, #20]
 800f706:	68b9      	ldr	r1, [r7, #8]
 800f708:	68f8      	ldr	r0, [r7, #12]
 800f70a:	f000 f805 	bl	800f718 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f70e:	69bb      	ldr	r3, [r7, #24]
	}
 800f710:	4618      	mov	r0, r3
 800f712:	3720      	adds	r7, #32
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}

0800f718 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b084      	sub	sp, #16
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	60f8      	str	r0, [r7, #12]
 800f720:	60b9      	str	r1, [r7, #8]
 800f722:	607a      	str	r2, [r7, #4]
 800f724:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d103      	bne.n	800f734 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f72c:	69bb      	ldr	r3, [r7, #24]
 800f72e:	69ba      	ldr	r2, [r7, #24]
 800f730:	601a      	str	r2, [r3, #0]
 800f732:	e002      	b.n	800f73a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f734:	69bb      	ldr	r3, [r7, #24]
 800f736:	687a      	ldr	r2, [r7, #4]
 800f738:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f73a:	69bb      	ldr	r3, [r7, #24]
 800f73c:	68fa      	ldr	r2, [r7, #12]
 800f73e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f740:	69bb      	ldr	r3, [r7, #24]
 800f742:	68ba      	ldr	r2, [r7, #8]
 800f744:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f746:	2101      	movs	r1, #1
 800f748:	69b8      	ldr	r0, [r7, #24]
 800f74a:	f7ff feaf 	bl	800f4ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f74e:	69bb      	ldr	r3, [r7, #24]
 800f750:	78fa      	ldrb	r2, [r7, #3]
 800f752:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f756:	bf00      	nop
 800f758:	3710      	adds	r7, #16
 800f75a:	46bd      	mov	sp, r7
 800f75c:	bd80      	pop	{r7, pc}

0800f75e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f75e:	b580      	push	{r7, lr}
 800f760:	b082      	sub	sp, #8
 800f762:	af00      	add	r7, sp, #0
 800f764:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d00e      	beq.n	800f78a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	2200      	movs	r2, #0
 800f770:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2200      	movs	r2, #0
 800f776:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2200      	movs	r2, #0
 800f77c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f77e:	2300      	movs	r3, #0
 800f780:	2200      	movs	r2, #0
 800f782:	2100      	movs	r1, #0
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f000 f91d 	bl	800f9c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f78a:	bf00      	nop
 800f78c:	3708      	adds	r7, #8
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}

0800f792 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f792:	b580      	push	{r7, lr}
 800f794:	b086      	sub	sp, #24
 800f796:	af00      	add	r7, sp, #0
 800f798:	4603      	mov	r3, r0
 800f79a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f79c:	2301      	movs	r3, #1
 800f79e:	617b      	str	r3, [r7, #20]
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f7a4:	79fb      	ldrb	r3, [r7, #7]
 800f7a6:	461a      	mov	r2, r3
 800f7a8:	6939      	ldr	r1, [r7, #16]
 800f7aa:	6978      	ldr	r0, [r7, #20]
 800f7ac:	f7ff ff71 	bl	800f692 <xQueueGenericCreate>
 800f7b0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f7b2:	68f8      	ldr	r0, [r7, #12]
 800f7b4:	f7ff ffd3 	bl	800f75e <prvInitialiseMutex>

		return xNewQueue;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
	}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3718      	adds	r7, #24
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}

0800f7c2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f7c2:	b580      	push	{r7, lr}
 800f7c4:	b088      	sub	sp, #32
 800f7c6:	af02      	add	r7, sp, #8
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	6039      	str	r1, [r7, #0]
 800f7cc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	617b      	str	r3, [r7, #20]
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f7d6:	79fb      	ldrb	r3, [r7, #7]
 800f7d8:	9300      	str	r3, [sp, #0]
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	2200      	movs	r2, #0
 800f7de:	6939      	ldr	r1, [r7, #16]
 800f7e0:	6978      	ldr	r0, [r7, #20]
 800f7e2:	f7ff fecf 	bl	800f584 <xQueueGenericCreateStatic>
 800f7e6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f7e8:	68f8      	ldr	r0, [r7, #12]
 800f7ea:	f7ff ffb8 	bl	800f75e <prvInitialiseMutex>

		return xNewQueue;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
	}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3718      	adds	r7, #24
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}

0800f7f8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800f7f8:	b590      	push	{r4, r7, lr}
 800f7fa:	b087      	sub	sp, #28
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f804:	693b      	ldr	r3, [r7, #16]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d10d      	bne.n	800f826 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800f80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f80e:	b672      	cpsid	i
 800f810:	f383 8811 	msr	BASEPRI, r3
 800f814:	f3bf 8f6f 	isb	sy
 800f818:	f3bf 8f4f 	dsb	sy
 800f81c:	b662      	cpsie	i
 800f81e:	60fb      	str	r3, [r7, #12]
}
 800f820:	bf00      	nop
 800f822:	bf00      	nop
 800f824:	e7fd      	b.n	800f822 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	689c      	ldr	r4, [r3, #8]
 800f82a:	f001 fe1d 	bl	8011468 <xTaskGetCurrentTaskHandle>
 800f82e:	4603      	mov	r3, r0
 800f830:	429c      	cmp	r4, r3
 800f832:	d111      	bne.n	800f858 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	68db      	ldr	r3, [r3, #12]
 800f838:	1e5a      	subs	r2, r3, #1
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800f83e:	693b      	ldr	r3, [r7, #16]
 800f840:	68db      	ldr	r3, [r3, #12]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d105      	bne.n	800f852 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800f846:	2300      	movs	r3, #0
 800f848:	2200      	movs	r2, #0
 800f84a:	2100      	movs	r1, #0
 800f84c:	6938      	ldr	r0, [r7, #16]
 800f84e:	f000 f8b9 	bl	800f9c4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800f852:	2301      	movs	r3, #1
 800f854:	617b      	str	r3, [r7, #20]
 800f856:	e001      	b.n	800f85c <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800f858:	2300      	movs	r3, #0
 800f85a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800f85c:	697b      	ldr	r3, [r7, #20]
	}
 800f85e:	4618      	mov	r0, r3
 800f860:	371c      	adds	r7, #28
 800f862:	46bd      	mov	sp, r7
 800f864:	bd90      	pop	{r4, r7, pc}

0800f866 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800f866:	b590      	push	{r4, r7, lr}
 800f868:	b087      	sub	sp, #28
 800f86a:	af00      	add	r7, sp, #0
 800f86c:	6078      	str	r0, [r7, #4]
 800f86e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f874:	693b      	ldr	r3, [r7, #16]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d10d      	bne.n	800f896 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800f87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f87e:	b672      	cpsid	i
 800f880:	f383 8811 	msr	BASEPRI, r3
 800f884:	f3bf 8f6f 	isb	sy
 800f888:	f3bf 8f4f 	dsb	sy
 800f88c:	b662      	cpsie	i
 800f88e:	60fb      	str	r3, [r7, #12]
}
 800f890:	bf00      	nop
 800f892:	bf00      	nop
 800f894:	e7fd      	b.n	800f892 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	689c      	ldr	r4, [r3, #8]
 800f89a:	f001 fde5 	bl	8011468 <xTaskGetCurrentTaskHandle>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	429c      	cmp	r4, r3
 800f8a2:	d107      	bne.n	800f8b4 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	68db      	ldr	r3, [r3, #12]
 800f8a8:	1c5a      	adds	r2, r3, #1
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800f8ae:	2301      	movs	r3, #1
 800f8b0:	617b      	str	r3, [r7, #20]
 800f8b2:	e00c      	b.n	800f8ce <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800f8b4:	6839      	ldr	r1, [r7, #0]
 800f8b6:	6938      	ldr	r0, [r7, #16]
 800f8b8:	f000 fbb2 	bl	8010020 <xQueueSemaphoreTake>
 800f8bc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800f8be:	697b      	ldr	r3, [r7, #20]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d004      	beq.n	800f8ce <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	68db      	ldr	r3, [r3, #12]
 800f8c8:	1c5a      	adds	r2, r3, #1
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800f8ce:	697b      	ldr	r3, [r7, #20]
	}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	371c      	adds	r7, #28
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd90      	pop	{r4, r7, pc}

0800f8d8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b08a      	sub	sp, #40	@ 0x28
 800f8dc:	af02      	add	r7, sp, #8
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d10d      	bne.n	800f906 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800f8ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8ee:	b672      	cpsid	i
 800f8f0:	f383 8811 	msr	BASEPRI, r3
 800f8f4:	f3bf 8f6f 	isb	sy
 800f8f8:	f3bf 8f4f 	dsb	sy
 800f8fc:	b662      	cpsie	i
 800f8fe:	61bb      	str	r3, [r7, #24]
}
 800f900:	bf00      	nop
 800f902:	bf00      	nop
 800f904:	e7fd      	b.n	800f902 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f906:	68ba      	ldr	r2, [r7, #8]
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	429a      	cmp	r2, r3
 800f90c:	d90d      	bls.n	800f92a <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800f90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f912:	b672      	cpsid	i
 800f914:	f383 8811 	msr	BASEPRI, r3
 800f918:	f3bf 8f6f 	isb	sy
 800f91c:	f3bf 8f4f 	dsb	sy
 800f920:	b662      	cpsie	i
 800f922:	617b      	str	r3, [r7, #20]
}
 800f924:	bf00      	nop
 800f926:	bf00      	nop
 800f928:	e7fd      	b.n	800f926 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f92a:	2302      	movs	r3, #2
 800f92c:	9300      	str	r3, [sp, #0]
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2200      	movs	r2, #0
 800f932:	2100      	movs	r1, #0
 800f934:	68f8      	ldr	r0, [r7, #12]
 800f936:	f7ff fe25 	bl	800f584 <xQueueGenericCreateStatic>
 800f93a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800f93c:	69fb      	ldr	r3, [r7, #28]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d002      	beq.n	800f948 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f942:	69fb      	ldr	r3, [r7, #28]
 800f944:	68ba      	ldr	r2, [r7, #8]
 800f946:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f948:	69fb      	ldr	r3, [r7, #28]
	}
 800f94a:	4618      	mov	r0, r3
 800f94c:	3720      	adds	r7, #32
 800f94e:	46bd      	mov	sp, r7
 800f950:	bd80      	pop	{r7, pc}

0800f952 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800f952:	b580      	push	{r7, lr}
 800f954:	b086      	sub	sp, #24
 800f956:	af00      	add	r7, sp, #0
 800f958:	6078      	str	r0, [r7, #4]
 800f95a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d10d      	bne.n	800f97e <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800f962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f966:	b672      	cpsid	i
 800f968:	f383 8811 	msr	BASEPRI, r3
 800f96c:	f3bf 8f6f 	isb	sy
 800f970:	f3bf 8f4f 	dsb	sy
 800f974:	b662      	cpsie	i
 800f976:	613b      	str	r3, [r7, #16]
}
 800f978:	bf00      	nop
 800f97a:	bf00      	nop
 800f97c:	e7fd      	b.n	800f97a <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f97e:	683a      	ldr	r2, [r7, #0]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	429a      	cmp	r2, r3
 800f984:	d90d      	bls.n	800f9a2 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800f986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f98a:	b672      	cpsid	i
 800f98c:	f383 8811 	msr	BASEPRI, r3
 800f990:	f3bf 8f6f 	isb	sy
 800f994:	f3bf 8f4f 	dsb	sy
 800f998:	b662      	cpsie	i
 800f99a:	60fb      	str	r3, [r7, #12]
}
 800f99c:	bf00      	nop
 800f99e:	bf00      	nop
 800f9a0:	e7fd      	b.n	800f99e <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f9a2:	2202      	movs	r2, #2
 800f9a4:	2100      	movs	r1, #0
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f7ff fe73 	bl	800f692 <xQueueGenericCreate>
 800f9ac:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f9ae:	697b      	ldr	r3, [r7, #20]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d002      	beq.n	800f9ba <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	683a      	ldr	r2, [r7, #0]
 800f9b8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f9ba:	697b      	ldr	r3, [r7, #20]
	}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3718      	adds	r7, #24
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}

0800f9c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b08e      	sub	sp, #56	@ 0x38
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	60f8      	str	r0, [r7, #12]
 800f9cc:	60b9      	str	r1, [r7, #8]
 800f9ce:	607a      	str	r2, [r7, #4]
 800f9d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800f9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d10d      	bne.n	800f9fc <xQueueGenericSend+0x38>
	__asm volatile
 800f9e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9e4:	b672      	cpsid	i
 800f9e6:	f383 8811 	msr	BASEPRI, r3
 800f9ea:	f3bf 8f6f 	isb	sy
 800f9ee:	f3bf 8f4f 	dsb	sy
 800f9f2:	b662      	cpsie	i
 800f9f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f9f6:	bf00      	nop
 800f9f8:	bf00      	nop
 800f9fa:	e7fd      	b.n	800f9f8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d103      	bne.n	800fa0a <xQueueGenericSend+0x46>
 800fa02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d101      	bne.n	800fa0e <xQueueGenericSend+0x4a>
 800fa0a:	2301      	movs	r3, #1
 800fa0c:	e000      	b.n	800fa10 <xQueueGenericSend+0x4c>
 800fa0e:	2300      	movs	r3, #0
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d10d      	bne.n	800fa30 <xQueueGenericSend+0x6c>
	__asm volatile
 800fa14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa18:	b672      	cpsid	i
 800fa1a:	f383 8811 	msr	BASEPRI, r3
 800fa1e:	f3bf 8f6f 	isb	sy
 800fa22:	f3bf 8f4f 	dsb	sy
 800fa26:	b662      	cpsie	i
 800fa28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fa2a:	bf00      	nop
 800fa2c:	bf00      	nop
 800fa2e:	e7fd      	b.n	800fa2c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	2b02      	cmp	r3, #2
 800fa34:	d103      	bne.n	800fa3e <xQueueGenericSend+0x7a>
 800fa36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa3a:	2b01      	cmp	r3, #1
 800fa3c:	d101      	bne.n	800fa42 <xQueueGenericSend+0x7e>
 800fa3e:	2301      	movs	r3, #1
 800fa40:	e000      	b.n	800fa44 <xQueueGenericSend+0x80>
 800fa42:	2300      	movs	r3, #0
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d10d      	bne.n	800fa64 <xQueueGenericSend+0xa0>
	__asm volatile
 800fa48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa4c:	b672      	cpsid	i
 800fa4e:	f383 8811 	msr	BASEPRI, r3
 800fa52:	f3bf 8f6f 	isb	sy
 800fa56:	f3bf 8f4f 	dsb	sy
 800fa5a:	b662      	cpsie	i
 800fa5c:	623b      	str	r3, [r7, #32]
}
 800fa5e:	bf00      	nop
 800fa60:	bf00      	nop
 800fa62:	e7fd      	b.n	800fa60 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fa64:	f001 fd10 	bl	8011488 <xTaskGetSchedulerState>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d102      	bne.n	800fa74 <xQueueGenericSend+0xb0>
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d101      	bne.n	800fa78 <xQueueGenericSend+0xb4>
 800fa74:	2301      	movs	r3, #1
 800fa76:	e000      	b.n	800fa7a <xQueueGenericSend+0xb6>
 800fa78:	2300      	movs	r3, #0
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d10d      	bne.n	800fa9a <xQueueGenericSend+0xd6>
	__asm volatile
 800fa7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa82:	b672      	cpsid	i
 800fa84:	f383 8811 	msr	BASEPRI, r3
 800fa88:	f3bf 8f6f 	isb	sy
 800fa8c:	f3bf 8f4f 	dsb	sy
 800fa90:	b662      	cpsie	i
 800fa92:	61fb      	str	r3, [r7, #28]
}
 800fa94:	bf00      	nop
 800fa96:	bf00      	nop
 800fa98:	e7fd      	b.n	800fa96 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fa9a:	f002 fc67 	bl	801236c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fa9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800faa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800faa6:	429a      	cmp	r2, r3
 800faa8:	d302      	bcc.n	800fab0 <xQueueGenericSend+0xec>
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	2b02      	cmp	r3, #2
 800faae:	d129      	bne.n	800fb04 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fab0:	683a      	ldr	r2, [r7, #0]
 800fab2:	68b9      	ldr	r1, [r7, #8]
 800fab4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fab6:	f000 fc91 	bl	80103dc <prvCopyDataToQueue>
 800faba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fabc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fabe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d010      	beq.n	800fae6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fac6:	3324      	adds	r3, #36	@ 0x24
 800fac8:	4618      	mov	r0, r3
 800faca:	f001 faff 	bl	80110cc <xTaskRemoveFromEventList>
 800face:	4603      	mov	r3, r0
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d013      	beq.n	800fafc <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fad4:	4b3f      	ldr	r3, [pc, #252]	@ (800fbd4 <xQueueGenericSend+0x210>)
 800fad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fada:	601a      	str	r2, [r3, #0]
 800fadc:	f3bf 8f4f 	dsb	sy
 800fae0:	f3bf 8f6f 	isb	sy
 800fae4:	e00a      	b.n	800fafc <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d007      	beq.n	800fafc <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800faec:	4b39      	ldr	r3, [pc, #228]	@ (800fbd4 <xQueueGenericSend+0x210>)
 800faee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800faf2:	601a      	str	r2, [r3, #0]
 800faf4:	f3bf 8f4f 	dsb	sy
 800faf8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fafc:	f002 fc6c 	bl	80123d8 <vPortExitCritical>
				return pdPASS;
 800fb00:	2301      	movs	r3, #1
 800fb02:	e063      	b.n	800fbcc <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d103      	bne.n	800fb12 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fb0a:	f002 fc65 	bl	80123d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	e05c      	b.n	800fbcc <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fb12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d106      	bne.n	800fb26 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb18:	f107 0314 	add.w	r3, r7, #20
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f001 fb3b 	bl	8011198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fb22:	2301      	movs	r3, #1
 800fb24:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fb26:	f002 fc57 	bl	80123d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fb2a:	f001 f861 	bl	8010bf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fb2e:	f002 fc1d 	bl	801236c <vPortEnterCritical>
 800fb32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fb38:	b25b      	sxtb	r3, r3
 800fb3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb3e:	d103      	bne.n	800fb48 <xQueueGenericSend+0x184>
 800fb40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb42:	2200      	movs	r2, #0
 800fb44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fb48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fb4e:	b25b      	sxtb	r3, r3
 800fb50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb54:	d103      	bne.n	800fb5e <xQueueGenericSend+0x19a>
 800fb56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb58:	2200      	movs	r2, #0
 800fb5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fb5e:	f002 fc3b 	bl	80123d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fb62:	1d3a      	adds	r2, r7, #4
 800fb64:	f107 0314 	add.w	r3, r7, #20
 800fb68:	4611      	mov	r1, r2
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f001 fb2a 	bl	80111c4 <xTaskCheckForTimeOut>
 800fb70:	4603      	mov	r3, r0
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d124      	bne.n	800fbc0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fb76:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fb78:	f000 fd28 	bl	80105cc <prvIsQueueFull>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d018      	beq.n	800fbb4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fb82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb84:	3310      	adds	r3, #16
 800fb86:	687a      	ldr	r2, [r7, #4]
 800fb88:	4611      	mov	r1, r2
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f001 fa48 	bl	8011020 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fb90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fb92:	f000 fcb3 	bl	80104fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fb96:	f001 f839 	bl	8010c0c <xTaskResumeAll>
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	f47f af7c 	bne.w	800fa9a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800fba2:	4b0c      	ldr	r3, [pc, #48]	@ (800fbd4 <xQueueGenericSend+0x210>)
 800fba4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fba8:	601a      	str	r2, [r3, #0]
 800fbaa:	f3bf 8f4f 	dsb	sy
 800fbae:	f3bf 8f6f 	isb	sy
 800fbb2:	e772      	b.n	800fa9a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fbb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fbb6:	f000 fca1 	bl	80104fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fbba:	f001 f827 	bl	8010c0c <xTaskResumeAll>
 800fbbe:	e76c      	b.n	800fa9a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fbc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fbc2:	f000 fc9b 	bl	80104fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fbc6:	f001 f821 	bl	8010c0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fbca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fbcc:	4618      	mov	r0, r3
 800fbce:	3738      	adds	r7, #56	@ 0x38
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd80      	pop	{r7, pc}
 800fbd4:	e000ed04 	.word	0xe000ed04

0800fbd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b08e      	sub	sp, #56	@ 0x38
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	60f8      	str	r0, [r7, #12]
 800fbe0:	60b9      	str	r1, [r7, #8]
 800fbe2:	607a      	str	r2, [r7, #4]
 800fbe4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fbea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d10d      	bne.n	800fc0c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800fbf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbf4:	b672      	cpsid	i
 800fbf6:	f383 8811 	msr	BASEPRI, r3
 800fbfa:	f3bf 8f6f 	isb	sy
 800fbfe:	f3bf 8f4f 	dsb	sy
 800fc02:	b662      	cpsie	i
 800fc04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fc06:	bf00      	nop
 800fc08:	bf00      	nop
 800fc0a:	e7fd      	b.n	800fc08 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d103      	bne.n	800fc1a <xQueueGenericSendFromISR+0x42>
 800fc12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d101      	bne.n	800fc1e <xQueueGenericSendFromISR+0x46>
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	e000      	b.n	800fc20 <xQueueGenericSendFromISR+0x48>
 800fc1e:	2300      	movs	r3, #0
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d10d      	bne.n	800fc40 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800fc24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc28:	b672      	cpsid	i
 800fc2a:	f383 8811 	msr	BASEPRI, r3
 800fc2e:	f3bf 8f6f 	isb	sy
 800fc32:	f3bf 8f4f 	dsb	sy
 800fc36:	b662      	cpsie	i
 800fc38:	623b      	str	r3, [r7, #32]
}
 800fc3a:	bf00      	nop
 800fc3c:	bf00      	nop
 800fc3e:	e7fd      	b.n	800fc3c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	2b02      	cmp	r3, #2
 800fc44:	d103      	bne.n	800fc4e <xQueueGenericSendFromISR+0x76>
 800fc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc4a:	2b01      	cmp	r3, #1
 800fc4c:	d101      	bne.n	800fc52 <xQueueGenericSendFromISR+0x7a>
 800fc4e:	2301      	movs	r3, #1
 800fc50:	e000      	b.n	800fc54 <xQueueGenericSendFromISR+0x7c>
 800fc52:	2300      	movs	r3, #0
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d10d      	bne.n	800fc74 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800fc58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc5c:	b672      	cpsid	i
 800fc5e:	f383 8811 	msr	BASEPRI, r3
 800fc62:	f3bf 8f6f 	isb	sy
 800fc66:	f3bf 8f4f 	dsb	sy
 800fc6a:	b662      	cpsie	i
 800fc6c:	61fb      	str	r3, [r7, #28]
}
 800fc6e:	bf00      	nop
 800fc70:	bf00      	nop
 800fc72:	e7fd      	b.n	800fc70 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fc74:	f002 fc62 	bl	801253c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fc78:	f3ef 8211 	mrs	r2, BASEPRI
 800fc7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc80:	b672      	cpsid	i
 800fc82:	f383 8811 	msr	BASEPRI, r3
 800fc86:	f3bf 8f6f 	isb	sy
 800fc8a:	f3bf 8f4f 	dsb	sy
 800fc8e:	b662      	cpsie	i
 800fc90:	61ba      	str	r2, [r7, #24]
 800fc92:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fc94:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fc96:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fc98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fc9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d302      	bcc.n	800fcaa <xQueueGenericSendFromISR+0xd2>
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	2b02      	cmp	r3, #2
 800fca8:	d12c      	bne.n	800fd04 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fcaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fcb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fcb4:	683a      	ldr	r2, [r7, #0]
 800fcb6:	68b9      	ldr	r1, [r7, #8]
 800fcb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fcba:	f000 fb8f 	bl	80103dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fcbe:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800fcc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcc6:	d112      	bne.n	800fcee <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fcc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d016      	beq.n	800fcfe <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fcd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcd2:	3324      	adds	r3, #36	@ 0x24
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f001 f9f9 	bl	80110cc <xTaskRemoveFromEventList>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d00e      	beq.n	800fcfe <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d00b      	beq.n	800fcfe <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2201      	movs	r2, #1
 800fcea:	601a      	str	r2, [r3, #0]
 800fcec:	e007      	b.n	800fcfe <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fcee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	b2db      	uxtb	r3, r3
 800fcf6:	b25a      	sxtb	r2, r3
 800fcf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fcfe:	2301      	movs	r3, #1
 800fd00:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800fd02:	e001      	b.n	800fd08 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fd04:	2300      	movs	r3, #0
 800fd06:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd0a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fd0c:	693b      	ldr	r3, [r7, #16]
 800fd0e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fd12:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fd14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	3738      	adds	r7, #56	@ 0x38
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}

0800fd1e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fd1e:	b580      	push	{r7, lr}
 800fd20:	b08e      	sub	sp, #56	@ 0x38
 800fd22:	af00      	add	r7, sp, #0
 800fd24:	6078      	str	r0, [r7, #4]
 800fd26:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fd2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d10d      	bne.n	800fd4e <xQueueGiveFromISR+0x30>
	__asm volatile
 800fd32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd36:	b672      	cpsid	i
 800fd38:	f383 8811 	msr	BASEPRI, r3
 800fd3c:	f3bf 8f6f 	isb	sy
 800fd40:	f3bf 8f4f 	dsb	sy
 800fd44:	b662      	cpsie	i
 800fd46:	623b      	str	r3, [r7, #32]
}
 800fd48:	bf00      	nop
 800fd4a:	bf00      	nop
 800fd4c:	e7fd      	b.n	800fd4a <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fd4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d00d      	beq.n	800fd72 <xQueueGiveFromISR+0x54>
	__asm volatile
 800fd56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd5a:	b672      	cpsid	i
 800fd5c:	f383 8811 	msr	BASEPRI, r3
 800fd60:	f3bf 8f6f 	isb	sy
 800fd64:	f3bf 8f4f 	dsb	sy
 800fd68:	b662      	cpsie	i
 800fd6a:	61fb      	str	r3, [r7, #28]
}
 800fd6c:	bf00      	nop
 800fd6e:	bf00      	nop
 800fd70:	e7fd      	b.n	800fd6e <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fd72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d103      	bne.n	800fd82 <xQueueGiveFromISR+0x64>
 800fd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd7c:	689b      	ldr	r3, [r3, #8]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d101      	bne.n	800fd86 <xQueueGiveFromISR+0x68>
 800fd82:	2301      	movs	r3, #1
 800fd84:	e000      	b.n	800fd88 <xQueueGiveFromISR+0x6a>
 800fd86:	2300      	movs	r3, #0
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d10d      	bne.n	800fda8 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800fd8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd90:	b672      	cpsid	i
 800fd92:	f383 8811 	msr	BASEPRI, r3
 800fd96:	f3bf 8f6f 	isb	sy
 800fd9a:	f3bf 8f4f 	dsb	sy
 800fd9e:	b662      	cpsie	i
 800fda0:	61bb      	str	r3, [r7, #24]
}
 800fda2:	bf00      	nop
 800fda4:	bf00      	nop
 800fda6:	e7fd      	b.n	800fda4 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fda8:	f002 fbc8 	bl	801253c <vPortValidateInterruptPriority>
	__asm volatile
 800fdac:	f3ef 8211 	mrs	r2, BASEPRI
 800fdb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdb4:	b672      	cpsid	i
 800fdb6:	f383 8811 	msr	BASEPRI, r3
 800fdba:	f3bf 8f6f 	isb	sy
 800fdbe:	f3bf 8f4f 	dsb	sy
 800fdc2:	b662      	cpsie	i
 800fdc4:	617a      	str	r2, [r7, #20]
 800fdc6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800fdc8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fdca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fdcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdd0:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fdd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d22b      	bcs.n	800fe34 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fde2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fde6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fde8:	1c5a      	adds	r2, r3, #1
 800fdea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdec:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fdee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fdf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdf6:	d112      	bne.n	800fe1e <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fdf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d016      	beq.n	800fe2e <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe02:	3324      	adds	r3, #36	@ 0x24
 800fe04:	4618      	mov	r0, r3
 800fe06:	f001 f961 	bl	80110cc <xTaskRemoveFromEventList>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d00e      	beq.n	800fe2e <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d00b      	beq.n	800fe2e <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	2201      	movs	r2, #1
 800fe1a:	601a      	str	r2, [r3, #0]
 800fe1c:	e007      	b.n	800fe2e <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fe1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fe22:	3301      	adds	r3, #1
 800fe24:	b2db      	uxtb	r3, r3
 800fe26:	b25a      	sxtb	r2, r3
 800fe28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fe2e:	2301      	movs	r3, #1
 800fe30:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe32:	e001      	b.n	800fe38 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fe34:	2300      	movs	r3, #0
 800fe36:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe3a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	f383 8811 	msr	BASEPRI, r3
}
 800fe42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fe44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	3738      	adds	r7, #56	@ 0x38
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}
	...

0800fe50 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b08c      	sub	sp, #48	@ 0x30
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	60f8      	str	r0, [r7, #12]
 800fe58:	60b9      	str	r1, [r7, #8]
 800fe5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fe64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d10d      	bne.n	800fe86 <xQueueReceive+0x36>
	__asm volatile
 800fe6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe6e:	b672      	cpsid	i
 800fe70:	f383 8811 	msr	BASEPRI, r3
 800fe74:	f3bf 8f6f 	isb	sy
 800fe78:	f3bf 8f4f 	dsb	sy
 800fe7c:	b662      	cpsie	i
 800fe7e:	623b      	str	r3, [r7, #32]
}
 800fe80:	bf00      	nop
 800fe82:	bf00      	nop
 800fe84:	e7fd      	b.n	800fe82 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d103      	bne.n	800fe94 <xQueueReceive+0x44>
 800fe8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d101      	bne.n	800fe98 <xQueueReceive+0x48>
 800fe94:	2301      	movs	r3, #1
 800fe96:	e000      	b.n	800fe9a <xQueueReceive+0x4a>
 800fe98:	2300      	movs	r3, #0
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d10d      	bne.n	800feba <xQueueReceive+0x6a>
	__asm volatile
 800fe9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fea2:	b672      	cpsid	i
 800fea4:	f383 8811 	msr	BASEPRI, r3
 800fea8:	f3bf 8f6f 	isb	sy
 800feac:	f3bf 8f4f 	dsb	sy
 800feb0:	b662      	cpsie	i
 800feb2:	61fb      	str	r3, [r7, #28]
}
 800feb4:	bf00      	nop
 800feb6:	bf00      	nop
 800feb8:	e7fd      	b.n	800feb6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800feba:	f001 fae5 	bl	8011488 <xTaskGetSchedulerState>
 800febe:	4603      	mov	r3, r0
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d102      	bne.n	800feca <xQueueReceive+0x7a>
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d101      	bne.n	800fece <xQueueReceive+0x7e>
 800feca:	2301      	movs	r3, #1
 800fecc:	e000      	b.n	800fed0 <xQueueReceive+0x80>
 800fece:	2300      	movs	r3, #0
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d10d      	bne.n	800fef0 <xQueueReceive+0xa0>
	__asm volatile
 800fed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fed8:	b672      	cpsid	i
 800feda:	f383 8811 	msr	BASEPRI, r3
 800fede:	f3bf 8f6f 	isb	sy
 800fee2:	f3bf 8f4f 	dsb	sy
 800fee6:	b662      	cpsie	i
 800fee8:	61bb      	str	r3, [r7, #24]
}
 800feea:	bf00      	nop
 800feec:	bf00      	nop
 800feee:	e7fd      	b.n	800feec <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fef0:	f002 fa3c 	bl	801236c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fef8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fefa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d01f      	beq.n	800ff40 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ff00:	68b9      	ldr	r1, [r7, #8]
 800ff02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ff04:	f000 fad4 	bl	80104b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ff08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff0a:	1e5a      	subs	r2, r3, #1
 800ff0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff0e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff12:	691b      	ldr	r3, [r3, #16]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d00f      	beq.n	800ff38 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff1a:	3310      	adds	r3, #16
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f001 f8d5 	bl	80110cc <xTaskRemoveFromEventList>
 800ff22:	4603      	mov	r3, r0
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d007      	beq.n	800ff38 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ff28:	4b3c      	ldr	r3, [pc, #240]	@ (801001c <xQueueReceive+0x1cc>)
 800ff2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff2e:	601a      	str	r2, [r3, #0]
 800ff30:	f3bf 8f4f 	dsb	sy
 800ff34:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ff38:	f002 fa4e 	bl	80123d8 <vPortExitCritical>
				return pdPASS;
 800ff3c:	2301      	movs	r3, #1
 800ff3e:	e069      	b.n	8010014 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d103      	bne.n	800ff4e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ff46:	f002 fa47 	bl	80123d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	e062      	b.n	8010014 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ff4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d106      	bne.n	800ff62 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ff54:	f107 0310 	add.w	r3, r7, #16
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f001 f91d 	bl	8011198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ff5e:	2301      	movs	r3, #1
 800ff60:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ff62:	f002 fa39 	bl	80123d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ff66:	f000 fe43 	bl	8010bf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ff6a:	f002 f9ff 	bl	801236c <vPortEnterCritical>
 800ff6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ff74:	b25b      	sxtb	r3, r3
 800ff76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff7a:	d103      	bne.n	800ff84 <xQueueReceive+0x134>
 800ff7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff7e:	2200      	movs	r2, #0
 800ff80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ff84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ff8a:	b25b      	sxtb	r3, r3
 800ff8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff90:	d103      	bne.n	800ff9a <xQueueReceive+0x14a>
 800ff92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff94:	2200      	movs	r2, #0
 800ff96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ff9a:	f002 fa1d 	bl	80123d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ff9e:	1d3a      	adds	r2, r7, #4
 800ffa0:	f107 0310 	add.w	r3, r7, #16
 800ffa4:	4611      	mov	r1, r2
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	f001 f90c 	bl	80111c4 <xTaskCheckForTimeOut>
 800ffac:	4603      	mov	r3, r0
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d123      	bne.n	800fffa <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ffb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ffb4:	f000 faf4 	bl	80105a0 <prvIsQueueEmpty>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d017      	beq.n	800ffee <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ffbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffc0:	3324      	adds	r3, #36	@ 0x24
 800ffc2:	687a      	ldr	r2, [r7, #4]
 800ffc4:	4611      	mov	r1, r2
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f001 f82a 	bl	8011020 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ffcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ffce:	f000 fa95 	bl	80104fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ffd2:	f000 fe1b 	bl	8010c0c <xTaskResumeAll>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d189      	bne.n	800fef0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800ffdc:	4b0f      	ldr	r3, [pc, #60]	@ (801001c <xQueueReceive+0x1cc>)
 800ffde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ffe2:	601a      	str	r2, [r3, #0]
 800ffe4:	f3bf 8f4f 	dsb	sy
 800ffe8:	f3bf 8f6f 	isb	sy
 800ffec:	e780      	b.n	800fef0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ffee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fff0:	f000 fa84 	bl	80104fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fff4:	f000 fe0a 	bl	8010c0c <xTaskResumeAll>
 800fff8:	e77a      	b.n	800fef0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fffa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fffc:	f000 fa7e 	bl	80104fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010000:	f000 fe04 	bl	8010c0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010004:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010006:	f000 facb 	bl	80105a0 <prvIsQueueEmpty>
 801000a:	4603      	mov	r3, r0
 801000c:	2b00      	cmp	r3, #0
 801000e:	f43f af6f 	beq.w	800fef0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010012:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010014:	4618      	mov	r0, r3
 8010016:	3730      	adds	r7, #48	@ 0x30
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}
 801001c:	e000ed04 	.word	0xe000ed04

08010020 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b08e      	sub	sp, #56	@ 0x38
 8010024:	af00      	add	r7, sp, #0
 8010026:	6078      	str	r0, [r7, #4]
 8010028:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801002a:	2300      	movs	r3, #0
 801002c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010032:	2300      	movs	r3, #0
 8010034:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010038:	2b00      	cmp	r3, #0
 801003a:	d10d      	bne.n	8010058 <xQueueSemaphoreTake+0x38>
	__asm volatile
 801003c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010040:	b672      	cpsid	i
 8010042:	f383 8811 	msr	BASEPRI, r3
 8010046:	f3bf 8f6f 	isb	sy
 801004a:	f3bf 8f4f 	dsb	sy
 801004e:	b662      	cpsie	i
 8010050:	623b      	str	r3, [r7, #32]
}
 8010052:	bf00      	nop
 8010054:	bf00      	nop
 8010056:	e7fd      	b.n	8010054 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801005a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801005c:	2b00      	cmp	r3, #0
 801005e:	d00d      	beq.n	801007c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8010060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010064:	b672      	cpsid	i
 8010066:	f383 8811 	msr	BASEPRI, r3
 801006a:	f3bf 8f6f 	isb	sy
 801006e:	f3bf 8f4f 	dsb	sy
 8010072:	b662      	cpsie	i
 8010074:	61fb      	str	r3, [r7, #28]
}
 8010076:	bf00      	nop
 8010078:	bf00      	nop
 801007a:	e7fd      	b.n	8010078 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801007c:	f001 fa04 	bl	8011488 <xTaskGetSchedulerState>
 8010080:	4603      	mov	r3, r0
 8010082:	2b00      	cmp	r3, #0
 8010084:	d102      	bne.n	801008c <xQueueSemaphoreTake+0x6c>
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d101      	bne.n	8010090 <xQueueSemaphoreTake+0x70>
 801008c:	2301      	movs	r3, #1
 801008e:	e000      	b.n	8010092 <xQueueSemaphoreTake+0x72>
 8010090:	2300      	movs	r3, #0
 8010092:	2b00      	cmp	r3, #0
 8010094:	d10d      	bne.n	80100b2 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8010096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801009a:	b672      	cpsid	i
 801009c:	f383 8811 	msr	BASEPRI, r3
 80100a0:	f3bf 8f6f 	isb	sy
 80100a4:	f3bf 8f4f 	dsb	sy
 80100a8:	b662      	cpsie	i
 80100aa:	61bb      	str	r3, [r7, #24]
}
 80100ac:	bf00      	nop
 80100ae:	bf00      	nop
 80100b0:	e7fd      	b.n	80100ae <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80100b2:	f002 f95b 	bl	801236c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80100b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100ba:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80100bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d024      	beq.n	801010c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80100c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100c4:	1e5a      	subs	r2, r3, #1
 80100c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100c8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80100ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d104      	bne.n	80100dc <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80100d2:	f001 fb5b 	bl	801178c <pvTaskIncrementMutexHeldCount>
 80100d6:	4602      	mov	r2, r0
 80100d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100da:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80100dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100de:	691b      	ldr	r3, [r3, #16]
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d00f      	beq.n	8010104 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80100e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100e6:	3310      	adds	r3, #16
 80100e8:	4618      	mov	r0, r3
 80100ea:	f000 ffef 	bl	80110cc <xTaskRemoveFromEventList>
 80100ee:	4603      	mov	r3, r0
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d007      	beq.n	8010104 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80100f4:	4b55      	ldr	r3, [pc, #340]	@ (801024c <xQueueSemaphoreTake+0x22c>)
 80100f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80100fa:	601a      	str	r2, [r3, #0]
 80100fc:	f3bf 8f4f 	dsb	sy
 8010100:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010104:	f002 f968 	bl	80123d8 <vPortExitCritical>
				return pdPASS;
 8010108:	2301      	movs	r3, #1
 801010a:	e09a      	b.n	8010242 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d114      	bne.n	801013c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010114:	2b00      	cmp	r3, #0
 8010116:	d00d      	beq.n	8010134 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8010118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801011c:	b672      	cpsid	i
 801011e:	f383 8811 	msr	BASEPRI, r3
 8010122:	f3bf 8f6f 	isb	sy
 8010126:	f3bf 8f4f 	dsb	sy
 801012a:	b662      	cpsie	i
 801012c:	617b      	str	r3, [r7, #20]
}
 801012e:	bf00      	nop
 8010130:	bf00      	nop
 8010132:	e7fd      	b.n	8010130 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010134:	f002 f950 	bl	80123d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010138:	2300      	movs	r3, #0
 801013a:	e082      	b.n	8010242 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 801013c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801013e:	2b00      	cmp	r3, #0
 8010140:	d106      	bne.n	8010150 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010142:	f107 030c 	add.w	r3, r7, #12
 8010146:	4618      	mov	r0, r3
 8010148:	f001 f826 	bl	8011198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801014c:	2301      	movs	r3, #1
 801014e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010150:	f002 f942 	bl	80123d8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010154:	f000 fd4c 	bl	8010bf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010158:	f002 f908 	bl	801236c <vPortEnterCritical>
 801015c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801015e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010162:	b25b      	sxtb	r3, r3
 8010164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010168:	d103      	bne.n	8010172 <xQueueSemaphoreTake+0x152>
 801016a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801016c:	2200      	movs	r2, #0
 801016e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010174:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010178:	b25b      	sxtb	r3, r3
 801017a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801017e:	d103      	bne.n	8010188 <xQueueSemaphoreTake+0x168>
 8010180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010182:	2200      	movs	r2, #0
 8010184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010188:	f002 f926 	bl	80123d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801018c:	463a      	mov	r2, r7
 801018e:	f107 030c 	add.w	r3, r7, #12
 8010192:	4611      	mov	r1, r2
 8010194:	4618      	mov	r0, r3
 8010196:	f001 f815 	bl	80111c4 <xTaskCheckForTimeOut>
 801019a:	4603      	mov	r3, r0
 801019c:	2b00      	cmp	r3, #0
 801019e:	d132      	bne.n	8010206 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80101a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80101a2:	f000 f9fd 	bl	80105a0 <prvIsQueueEmpty>
 80101a6:	4603      	mov	r3, r0
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d026      	beq.n	80101fa <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80101ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d109      	bne.n	80101c8 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80101b4:	f002 f8da 	bl	801236c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80101b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101ba:	689b      	ldr	r3, [r3, #8]
 80101bc:	4618      	mov	r0, r3
 80101be:	f001 f981 	bl	80114c4 <xTaskPriorityInherit>
 80101c2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80101c4:	f002 f908 	bl	80123d8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80101c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101ca:	3324      	adds	r3, #36	@ 0x24
 80101cc:	683a      	ldr	r2, [r7, #0]
 80101ce:	4611      	mov	r1, r2
 80101d0:	4618      	mov	r0, r3
 80101d2:	f000 ff25 	bl	8011020 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80101d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80101d8:	f000 f990 	bl	80104fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80101dc:	f000 fd16 	bl	8010c0c <xTaskResumeAll>
 80101e0:	4603      	mov	r3, r0
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	f47f af65 	bne.w	80100b2 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80101e8:	4b18      	ldr	r3, [pc, #96]	@ (801024c <xQueueSemaphoreTake+0x22c>)
 80101ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80101ee:	601a      	str	r2, [r3, #0]
 80101f0:	f3bf 8f4f 	dsb	sy
 80101f4:	f3bf 8f6f 	isb	sy
 80101f8:	e75b      	b.n	80100b2 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80101fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80101fc:	f000 f97e 	bl	80104fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010200:	f000 fd04 	bl	8010c0c <xTaskResumeAll>
 8010204:	e755      	b.n	80100b2 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010206:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010208:	f000 f978 	bl	80104fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801020c:	f000 fcfe 	bl	8010c0c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010210:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010212:	f000 f9c5 	bl	80105a0 <prvIsQueueEmpty>
 8010216:	4603      	mov	r3, r0
 8010218:	2b00      	cmp	r3, #0
 801021a:	f43f af4a 	beq.w	80100b2 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801021e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010220:	2b00      	cmp	r3, #0
 8010222:	d00d      	beq.n	8010240 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8010224:	f002 f8a2 	bl	801236c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010228:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801022a:	f000 f8bf 	bl	80103ac <prvGetDisinheritPriorityAfterTimeout>
 801022e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010232:	689b      	ldr	r3, [r3, #8]
 8010234:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010236:	4618      	mov	r0, r3
 8010238:	f001 fa20 	bl	801167c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801023c:	f002 f8cc 	bl	80123d8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010240:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010242:	4618      	mov	r0, r3
 8010244:	3738      	adds	r7, #56	@ 0x38
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}
 801024a:	bf00      	nop
 801024c:	e000ed04 	.word	0xe000ed04

08010250 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b08e      	sub	sp, #56	@ 0x38
 8010254:	af00      	add	r7, sp, #0
 8010256:	60f8      	str	r0, [r7, #12]
 8010258:	60b9      	str	r1, [r7, #8]
 801025a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010262:	2b00      	cmp	r3, #0
 8010264:	d10d      	bne.n	8010282 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8010266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801026a:	b672      	cpsid	i
 801026c:	f383 8811 	msr	BASEPRI, r3
 8010270:	f3bf 8f6f 	isb	sy
 8010274:	f3bf 8f4f 	dsb	sy
 8010278:	b662      	cpsie	i
 801027a:	623b      	str	r3, [r7, #32]
}
 801027c:	bf00      	nop
 801027e:	bf00      	nop
 8010280:	e7fd      	b.n	801027e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d103      	bne.n	8010290 <xQueueReceiveFromISR+0x40>
 8010288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801028a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801028c:	2b00      	cmp	r3, #0
 801028e:	d101      	bne.n	8010294 <xQueueReceiveFromISR+0x44>
 8010290:	2301      	movs	r3, #1
 8010292:	e000      	b.n	8010296 <xQueueReceiveFromISR+0x46>
 8010294:	2300      	movs	r3, #0
 8010296:	2b00      	cmp	r3, #0
 8010298:	d10d      	bne.n	80102b6 <xQueueReceiveFromISR+0x66>
	__asm volatile
 801029a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801029e:	b672      	cpsid	i
 80102a0:	f383 8811 	msr	BASEPRI, r3
 80102a4:	f3bf 8f6f 	isb	sy
 80102a8:	f3bf 8f4f 	dsb	sy
 80102ac:	b662      	cpsie	i
 80102ae:	61fb      	str	r3, [r7, #28]
}
 80102b0:	bf00      	nop
 80102b2:	bf00      	nop
 80102b4:	e7fd      	b.n	80102b2 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80102b6:	f002 f941 	bl	801253c <vPortValidateInterruptPriority>
	__asm volatile
 80102ba:	f3ef 8211 	mrs	r2, BASEPRI
 80102be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102c2:	b672      	cpsid	i
 80102c4:	f383 8811 	msr	BASEPRI, r3
 80102c8:	f3bf 8f6f 	isb	sy
 80102cc:	f3bf 8f4f 	dsb	sy
 80102d0:	b662      	cpsie	i
 80102d2:	61ba      	str	r2, [r7, #24]
 80102d4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80102d6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80102d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80102da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102de:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80102e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d02f      	beq.n	8010346 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80102e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80102ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80102f0:	68b9      	ldr	r1, [r7, #8]
 80102f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80102f4:	f000 f8dc 	bl	80104b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80102f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102fa:	1e5a      	subs	r2, r3, #1
 80102fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80102fe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010300:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010308:	d112      	bne.n	8010330 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801030a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801030c:	691b      	ldr	r3, [r3, #16]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d016      	beq.n	8010340 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010314:	3310      	adds	r3, #16
 8010316:	4618      	mov	r0, r3
 8010318:	f000 fed8 	bl	80110cc <xTaskRemoveFromEventList>
 801031c:	4603      	mov	r3, r0
 801031e:	2b00      	cmp	r3, #0
 8010320:	d00e      	beq.n	8010340 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d00b      	beq.n	8010340 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2201      	movs	r2, #1
 801032c:	601a      	str	r2, [r3, #0]
 801032e:	e007      	b.n	8010340 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010330:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010334:	3301      	adds	r3, #1
 8010336:	b2db      	uxtb	r3, r3
 8010338:	b25a      	sxtb	r2, r3
 801033a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801033c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8010340:	2301      	movs	r3, #1
 8010342:	637b      	str	r3, [r7, #52]	@ 0x34
 8010344:	e001      	b.n	801034a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8010346:	2300      	movs	r3, #0
 8010348:	637b      	str	r3, [r7, #52]	@ 0x34
 801034a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801034c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	f383 8811 	msr	BASEPRI, r3
}
 8010354:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010358:	4618      	mov	r0, r3
 801035a:	3738      	adds	r7, #56	@ 0x38
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}

08010360 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b084      	sub	sp, #16
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d10d      	bne.n	801038e <vQueueDelete+0x2e>
	__asm volatile
 8010372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010376:	b672      	cpsid	i
 8010378:	f383 8811 	msr	BASEPRI, r3
 801037c:	f3bf 8f6f 	isb	sy
 8010380:	f3bf 8f4f 	dsb	sy
 8010384:	b662      	cpsie	i
 8010386:	60bb      	str	r3, [r7, #8]
}
 8010388:	bf00      	nop
 801038a:	bf00      	nop
 801038c:	e7fd      	b.n	801038a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801038e:	68f8      	ldr	r0, [r7, #12]
 8010390:	f000 f95e 	bl	8010650 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 801039a:	2b00      	cmp	r3, #0
 801039c:	d102      	bne.n	80103a4 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 801039e:	68f8      	ldr	r0, [r7, #12]
 80103a0:	f002 f9e0 	bl	8012764 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80103a4:	bf00      	nop
 80103a6:	3710      	adds	r7, #16
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}

080103ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80103ac:	b480      	push	{r7}
 80103ae:	b085      	sub	sp, #20
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d006      	beq.n	80103ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80103c6:	60fb      	str	r3, [r7, #12]
 80103c8:	e001      	b.n	80103ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80103ca:	2300      	movs	r3, #0
 80103cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80103ce:	68fb      	ldr	r3, [r7, #12]
	}
 80103d0:	4618      	mov	r0, r3
 80103d2:	3714      	adds	r7, #20
 80103d4:	46bd      	mov	sp, r7
 80103d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103da:	4770      	bx	lr

080103dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b086      	sub	sp, #24
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	60f8      	str	r0, [r7, #12]
 80103e4:	60b9      	str	r1, [r7, #8]
 80103e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80103e8:	2300      	movs	r3, #0
 80103ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d10d      	bne.n	8010416 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d14d      	bne.n	801049e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	689b      	ldr	r3, [r3, #8]
 8010406:	4618      	mov	r0, r3
 8010408:	f001 f8c4 	bl	8011594 <xTaskPriorityDisinherit>
 801040c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	2200      	movs	r2, #0
 8010412:	609a      	str	r2, [r3, #8]
 8010414:	e043      	b.n	801049e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d119      	bne.n	8010450 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	6858      	ldr	r0, [r3, #4]
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010424:	461a      	mov	r2, r3
 8010426:	68b9      	ldr	r1, [r7, #8]
 8010428:	f00e f85d 	bl	801e4e6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	685a      	ldr	r2, [r3, #4]
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010434:	441a      	add	r2, r3
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	685a      	ldr	r2, [r3, #4]
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	689b      	ldr	r3, [r3, #8]
 8010442:	429a      	cmp	r2, r3
 8010444:	d32b      	bcc.n	801049e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	681a      	ldr	r2, [r3, #0]
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	605a      	str	r2, [r3, #4]
 801044e:	e026      	b.n	801049e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	68d8      	ldr	r0, [r3, #12]
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010458:	461a      	mov	r2, r3
 801045a:	68b9      	ldr	r1, [r7, #8]
 801045c:	f00e f843 	bl	801e4e6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	68da      	ldr	r2, [r3, #12]
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010468:	425b      	negs	r3, r3
 801046a:	441a      	add	r2, r3
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	68da      	ldr	r2, [r3, #12]
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	429a      	cmp	r2, r3
 801047a:	d207      	bcs.n	801048c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	689a      	ldr	r2, [r3, #8]
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010484:	425b      	negs	r3, r3
 8010486:	441a      	add	r2, r3
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2b02      	cmp	r3, #2
 8010490:	d105      	bne.n	801049e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010492:	693b      	ldr	r3, [r7, #16]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d002      	beq.n	801049e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010498:	693b      	ldr	r3, [r7, #16]
 801049a:	3b01      	subs	r3, #1
 801049c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801049e:	693b      	ldr	r3, [r7, #16]
 80104a0:	1c5a      	adds	r2, r3, #1
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80104a6:	697b      	ldr	r3, [r7, #20]
}
 80104a8:	4618      	mov	r0, r3
 80104aa:	3718      	adds	r7, #24
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}

080104b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b082      	sub	sp, #8
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
 80104b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d018      	beq.n	80104f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	68da      	ldr	r2, [r3, #12]
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104ca:	441a      	add	r2, r3
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	68da      	ldr	r2, [r3, #12]
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	689b      	ldr	r3, [r3, #8]
 80104d8:	429a      	cmp	r2, r3
 80104da:	d303      	bcc.n	80104e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681a      	ldr	r2, [r3, #0]
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	68d9      	ldr	r1, [r3, #12]
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104ec:	461a      	mov	r2, r3
 80104ee:	6838      	ldr	r0, [r7, #0]
 80104f0:	f00d fff9 	bl	801e4e6 <memcpy>
	}
}
 80104f4:	bf00      	nop
 80104f6:	3708      	adds	r7, #8
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}

080104fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b084      	sub	sp, #16
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010504:	f001 ff32 	bl	801236c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801050e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010510:	e011      	b.n	8010536 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010516:	2b00      	cmp	r3, #0
 8010518:	d012      	beq.n	8010540 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	3324      	adds	r3, #36	@ 0x24
 801051e:	4618      	mov	r0, r3
 8010520:	f000 fdd4 	bl	80110cc <xTaskRemoveFromEventList>
 8010524:	4603      	mov	r3, r0
 8010526:	2b00      	cmp	r3, #0
 8010528:	d001      	beq.n	801052e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801052a:	f000 feb3 	bl	8011294 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801052e:	7bfb      	ldrb	r3, [r7, #15]
 8010530:	3b01      	subs	r3, #1
 8010532:	b2db      	uxtb	r3, r3
 8010534:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801053a:	2b00      	cmp	r3, #0
 801053c:	dce9      	bgt.n	8010512 <prvUnlockQueue+0x16>
 801053e:	e000      	b.n	8010542 <prvUnlockQueue+0x46>
					break;
 8010540:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	22ff      	movs	r2, #255	@ 0xff
 8010546:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801054a:	f001 ff45 	bl	80123d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801054e:	f001 ff0d 	bl	801236c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010558:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801055a:	e011      	b.n	8010580 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	691b      	ldr	r3, [r3, #16]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d012      	beq.n	801058a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	3310      	adds	r3, #16
 8010568:	4618      	mov	r0, r3
 801056a:	f000 fdaf 	bl	80110cc <xTaskRemoveFromEventList>
 801056e:	4603      	mov	r3, r0
 8010570:	2b00      	cmp	r3, #0
 8010572:	d001      	beq.n	8010578 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010574:	f000 fe8e 	bl	8011294 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010578:	7bbb      	ldrb	r3, [r7, #14]
 801057a:	3b01      	subs	r3, #1
 801057c:	b2db      	uxtb	r3, r3
 801057e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010580:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010584:	2b00      	cmp	r3, #0
 8010586:	dce9      	bgt.n	801055c <prvUnlockQueue+0x60>
 8010588:	e000      	b.n	801058c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801058a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	22ff      	movs	r2, #255	@ 0xff
 8010590:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010594:	f001 ff20 	bl	80123d8 <vPortExitCritical>
}
 8010598:	bf00      	nop
 801059a:	3710      	adds	r7, #16
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}

080105a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80105a0:	b580      	push	{r7, lr}
 80105a2:	b084      	sub	sp, #16
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80105a8:	f001 fee0 	bl	801236c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d102      	bne.n	80105ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80105b4:	2301      	movs	r3, #1
 80105b6:	60fb      	str	r3, [r7, #12]
 80105b8:	e001      	b.n	80105be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80105ba:	2300      	movs	r3, #0
 80105bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80105be:	f001 ff0b 	bl	80123d8 <vPortExitCritical>

	return xReturn;
 80105c2:	68fb      	ldr	r3, [r7, #12]
}
 80105c4:	4618      	mov	r0, r3
 80105c6:	3710      	adds	r7, #16
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}

080105cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80105d4:	f001 feca 	bl	801236c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105e0:	429a      	cmp	r2, r3
 80105e2:	d102      	bne.n	80105ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80105e4:	2301      	movs	r3, #1
 80105e6:	60fb      	str	r3, [r7, #12]
 80105e8:	e001      	b.n	80105ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80105ea:	2300      	movs	r3, #0
 80105ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80105ee:	f001 fef3 	bl	80123d8 <vPortExitCritical>

	return xReturn;
 80105f2:	68fb      	ldr	r3, [r7, #12]
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	3710      	adds	r7, #16
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}

080105fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80105fc:	b480      	push	{r7}
 80105fe:	b085      	sub	sp, #20
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010606:	2300      	movs	r3, #0
 8010608:	60fb      	str	r3, [r7, #12]
 801060a:	e014      	b.n	8010636 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801060c:	4a0f      	ldr	r2, [pc, #60]	@ (801064c <vQueueAddToRegistry+0x50>)
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d10b      	bne.n	8010630 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010618:	490c      	ldr	r1, [pc, #48]	@ (801064c <vQueueAddToRegistry+0x50>)
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	683a      	ldr	r2, [r7, #0]
 801061e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010622:	4a0a      	ldr	r2, [pc, #40]	@ (801064c <vQueueAddToRegistry+0x50>)
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	00db      	lsls	r3, r3, #3
 8010628:	4413      	add	r3, r2
 801062a:	687a      	ldr	r2, [r7, #4]
 801062c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801062e:	e006      	b.n	801063e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	3301      	adds	r3, #1
 8010634:	60fb      	str	r3, [r7, #12]
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	2b07      	cmp	r3, #7
 801063a:	d9e7      	bls.n	801060c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801063c:	bf00      	nop
 801063e:	bf00      	nop
 8010640:	3714      	adds	r7, #20
 8010642:	46bd      	mov	sp, r7
 8010644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010648:	4770      	bx	lr
 801064a:	bf00      	nop
 801064c:	2000b014 	.word	0x2000b014

08010650 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010650:	b480      	push	{r7}
 8010652:	b085      	sub	sp, #20
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010658:	2300      	movs	r3, #0
 801065a:	60fb      	str	r3, [r7, #12]
 801065c:	e016      	b.n	801068c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801065e:	4a10      	ldr	r2, [pc, #64]	@ (80106a0 <vQueueUnregisterQueue+0x50>)
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	00db      	lsls	r3, r3, #3
 8010664:	4413      	add	r3, r2
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	687a      	ldr	r2, [r7, #4]
 801066a:	429a      	cmp	r2, r3
 801066c:	d10b      	bne.n	8010686 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801066e:	4a0c      	ldr	r2, [pc, #48]	@ (80106a0 <vQueueUnregisterQueue+0x50>)
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	2100      	movs	r1, #0
 8010674:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010678:	4a09      	ldr	r2, [pc, #36]	@ (80106a0 <vQueueUnregisterQueue+0x50>)
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	00db      	lsls	r3, r3, #3
 801067e:	4413      	add	r3, r2
 8010680:	2200      	movs	r2, #0
 8010682:	605a      	str	r2, [r3, #4]
				break;
 8010684:	e006      	b.n	8010694 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	3301      	adds	r3, #1
 801068a:	60fb      	str	r3, [r7, #12]
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	2b07      	cmp	r3, #7
 8010690:	d9e5      	bls.n	801065e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010692:	bf00      	nop
 8010694:	bf00      	nop
 8010696:	3714      	adds	r7, #20
 8010698:	46bd      	mov	sp, r7
 801069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069e:	4770      	bx	lr
 80106a0:	2000b014 	.word	0x2000b014

080106a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b086      	sub	sp, #24
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	60f8      	str	r0, [r7, #12]
 80106ac:	60b9      	str	r1, [r7, #8]
 80106ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80106b4:	f001 fe5a 	bl	801236c <vPortEnterCritical>
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80106be:	b25b      	sxtb	r3, r3
 80106c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106c4:	d103      	bne.n	80106ce <vQueueWaitForMessageRestricted+0x2a>
 80106c6:	697b      	ldr	r3, [r7, #20]
 80106c8:	2200      	movs	r2, #0
 80106ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80106d4:	b25b      	sxtb	r3, r3
 80106d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106da:	d103      	bne.n	80106e4 <vQueueWaitForMessageRestricted+0x40>
 80106dc:	697b      	ldr	r3, [r7, #20]
 80106de:	2200      	movs	r2, #0
 80106e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80106e4:	f001 fe78 	bl	80123d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d106      	bne.n	80106fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	3324      	adds	r3, #36	@ 0x24
 80106f4:	687a      	ldr	r2, [r7, #4]
 80106f6:	68b9      	ldr	r1, [r7, #8]
 80106f8:	4618      	mov	r0, r3
 80106fa:	f000 fcb9 	bl	8011070 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80106fe:	6978      	ldr	r0, [r7, #20]
 8010700:	f7ff fefc 	bl	80104fc <prvUnlockQueue>
	}
 8010704:	bf00      	nop
 8010706:	3718      	adds	r7, #24
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}

0801070c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801070c:	b580      	push	{r7, lr}
 801070e:	b08e      	sub	sp, #56	@ 0x38
 8010710:	af04      	add	r7, sp, #16
 8010712:	60f8      	str	r0, [r7, #12]
 8010714:	60b9      	str	r1, [r7, #8]
 8010716:	607a      	str	r2, [r7, #4]
 8010718:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801071a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801071c:	2b00      	cmp	r3, #0
 801071e:	d10d      	bne.n	801073c <xTaskCreateStatic+0x30>
	__asm volatile
 8010720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010724:	b672      	cpsid	i
 8010726:	f383 8811 	msr	BASEPRI, r3
 801072a:	f3bf 8f6f 	isb	sy
 801072e:	f3bf 8f4f 	dsb	sy
 8010732:	b662      	cpsie	i
 8010734:	623b      	str	r3, [r7, #32]
}
 8010736:	bf00      	nop
 8010738:	bf00      	nop
 801073a:	e7fd      	b.n	8010738 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801073c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801073e:	2b00      	cmp	r3, #0
 8010740:	d10d      	bne.n	801075e <xTaskCreateStatic+0x52>
	__asm volatile
 8010742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010746:	b672      	cpsid	i
 8010748:	f383 8811 	msr	BASEPRI, r3
 801074c:	f3bf 8f6f 	isb	sy
 8010750:	f3bf 8f4f 	dsb	sy
 8010754:	b662      	cpsie	i
 8010756:	61fb      	str	r3, [r7, #28]
}
 8010758:	bf00      	nop
 801075a:	bf00      	nop
 801075c:	e7fd      	b.n	801075a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801075e:	23a8      	movs	r3, #168	@ 0xa8
 8010760:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	2ba8      	cmp	r3, #168	@ 0xa8
 8010766:	d00d      	beq.n	8010784 <xTaskCreateStatic+0x78>
	__asm volatile
 8010768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801076c:	b672      	cpsid	i
 801076e:	f383 8811 	msr	BASEPRI, r3
 8010772:	f3bf 8f6f 	isb	sy
 8010776:	f3bf 8f4f 	dsb	sy
 801077a:	b662      	cpsie	i
 801077c:	61bb      	str	r3, [r7, #24]
}
 801077e:	bf00      	nop
 8010780:	bf00      	nop
 8010782:	e7fd      	b.n	8010780 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010784:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010788:	2b00      	cmp	r3, #0
 801078a:	d01e      	beq.n	80107ca <xTaskCreateStatic+0xbe>
 801078c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801078e:	2b00      	cmp	r3, #0
 8010790:	d01b      	beq.n	80107ca <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010794:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010798:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801079a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801079c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801079e:	2202      	movs	r2, #2
 80107a0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80107a4:	2300      	movs	r3, #0
 80107a6:	9303      	str	r3, [sp, #12]
 80107a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107aa:	9302      	str	r3, [sp, #8]
 80107ac:	f107 0314 	add.w	r3, r7, #20
 80107b0:	9301      	str	r3, [sp, #4]
 80107b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107b4:	9300      	str	r3, [sp, #0]
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	687a      	ldr	r2, [r7, #4]
 80107ba:	68b9      	ldr	r1, [r7, #8]
 80107bc:	68f8      	ldr	r0, [r7, #12]
 80107be:	f000 f851 	bl	8010864 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80107c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80107c4:	f000 f8f8 	bl	80109b8 <prvAddNewTaskToReadyList>
 80107c8:	e001      	b.n	80107ce <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80107ca:	2300      	movs	r3, #0
 80107cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80107ce:	697b      	ldr	r3, [r7, #20]
	}
 80107d0:	4618      	mov	r0, r3
 80107d2:	3728      	adds	r7, #40	@ 0x28
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}

080107d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b08c      	sub	sp, #48	@ 0x30
 80107dc:	af04      	add	r7, sp, #16
 80107de:	60f8      	str	r0, [r7, #12]
 80107e0:	60b9      	str	r1, [r7, #8]
 80107e2:	603b      	str	r3, [r7, #0]
 80107e4:	4613      	mov	r3, r2
 80107e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80107e8:	88fb      	ldrh	r3, [r7, #6]
 80107ea:	009b      	lsls	r3, r3, #2
 80107ec:	4618      	mov	r0, r3
 80107ee:	f001 feeb 	bl	80125c8 <pvPortMalloc>
 80107f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80107f4:	697b      	ldr	r3, [r7, #20]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d00e      	beq.n	8010818 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80107fa:	20a8      	movs	r0, #168	@ 0xa8
 80107fc:	f001 fee4 	bl	80125c8 <pvPortMalloc>
 8010800:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010802:	69fb      	ldr	r3, [r7, #28]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d003      	beq.n	8010810 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010808:	69fb      	ldr	r3, [r7, #28]
 801080a:	697a      	ldr	r2, [r7, #20]
 801080c:	631a      	str	r2, [r3, #48]	@ 0x30
 801080e:	e005      	b.n	801081c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010810:	6978      	ldr	r0, [r7, #20]
 8010812:	f001 ffa7 	bl	8012764 <vPortFree>
 8010816:	e001      	b.n	801081c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010818:	2300      	movs	r3, #0
 801081a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801081c:	69fb      	ldr	r3, [r7, #28]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d017      	beq.n	8010852 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010822:	69fb      	ldr	r3, [r7, #28]
 8010824:	2200      	movs	r2, #0
 8010826:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801082a:	88fa      	ldrh	r2, [r7, #6]
 801082c:	2300      	movs	r3, #0
 801082e:	9303      	str	r3, [sp, #12]
 8010830:	69fb      	ldr	r3, [r7, #28]
 8010832:	9302      	str	r3, [sp, #8]
 8010834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010836:	9301      	str	r3, [sp, #4]
 8010838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801083a:	9300      	str	r3, [sp, #0]
 801083c:	683b      	ldr	r3, [r7, #0]
 801083e:	68b9      	ldr	r1, [r7, #8]
 8010840:	68f8      	ldr	r0, [r7, #12]
 8010842:	f000 f80f 	bl	8010864 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010846:	69f8      	ldr	r0, [r7, #28]
 8010848:	f000 f8b6 	bl	80109b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801084c:	2301      	movs	r3, #1
 801084e:	61bb      	str	r3, [r7, #24]
 8010850:	e002      	b.n	8010858 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010852:	f04f 33ff 	mov.w	r3, #4294967295
 8010856:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010858:	69bb      	ldr	r3, [r7, #24]
	}
 801085a:	4618      	mov	r0, r3
 801085c:	3720      	adds	r7, #32
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}
	...

08010864 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b088      	sub	sp, #32
 8010868:	af00      	add	r7, sp, #0
 801086a:	60f8      	str	r0, [r7, #12]
 801086c:	60b9      	str	r1, [r7, #8]
 801086e:	607a      	str	r2, [r7, #4]
 8010870:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010874:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	009b      	lsls	r3, r3, #2
 801087a:	461a      	mov	r2, r3
 801087c:	21a5      	movs	r1, #165	@ 0xa5
 801087e:	f00d fd5f 	bl	801e340 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010884:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010886:	6879      	ldr	r1, [r7, #4]
 8010888:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801088c:	440b      	add	r3, r1
 801088e:	009b      	lsls	r3, r3, #2
 8010890:	4413      	add	r3, r2
 8010892:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010894:	69bb      	ldr	r3, [r7, #24]
 8010896:	f023 0307 	bic.w	r3, r3, #7
 801089a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801089c:	69bb      	ldr	r3, [r7, #24]
 801089e:	f003 0307 	and.w	r3, r3, #7
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d00d      	beq.n	80108c2 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80108a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108aa:	b672      	cpsid	i
 80108ac:	f383 8811 	msr	BASEPRI, r3
 80108b0:	f3bf 8f6f 	isb	sy
 80108b4:	f3bf 8f4f 	dsb	sy
 80108b8:	b662      	cpsie	i
 80108ba:	617b      	str	r3, [r7, #20]
}
 80108bc:	bf00      	nop
 80108be:	bf00      	nop
 80108c0:	e7fd      	b.n	80108be <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80108c2:	68bb      	ldr	r3, [r7, #8]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d01f      	beq.n	8010908 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80108c8:	2300      	movs	r3, #0
 80108ca:	61fb      	str	r3, [r7, #28]
 80108cc:	e012      	b.n	80108f4 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80108ce:	68ba      	ldr	r2, [r7, #8]
 80108d0:	69fb      	ldr	r3, [r7, #28]
 80108d2:	4413      	add	r3, r2
 80108d4:	7819      	ldrb	r1, [r3, #0]
 80108d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108d8:	69fb      	ldr	r3, [r7, #28]
 80108da:	4413      	add	r3, r2
 80108dc:	3334      	adds	r3, #52	@ 0x34
 80108de:	460a      	mov	r2, r1
 80108e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80108e2:	68ba      	ldr	r2, [r7, #8]
 80108e4:	69fb      	ldr	r3, [r7, #28]
 80108e6:	4413      	add	r3, r2
 80108e8:	781b      	ldrb	r3, [r3, #0]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d006      	beq.n	80108fc <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80108ee:	69fb      	ldr	r3, [r7, #28]
 80108f0:	3301      	adds	r3, #1
 80108f2:	61fb      	str	r3, [r7, #28]
 80108f4:	69fb      	ldr	r3, [r7, #28]
 80108f6:	2b0f      	cmp	r3, #15
 80108f8:	d9e9      	bls.n	80108ce <prvInitialiseNewTask+0x6a>
 80108fa:	e000      	b.n	80108fe <prvInitialiseNewTask+0x9a>
			{
				break;
 80108fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80108fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010900:	2200      	movs	r2, #0
 8010902:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010906:	e003      	b.n	8010910 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801090a:	2200      	movs	r2, #0
 801090c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010912:	2b37      	cmp	r3, #55	@ 0x37
 8010914:	d901      	bls.n	801091a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010916:	2337      	movs	r3, #55	@ 0x37
 8010918:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801091a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801091c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801091e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010922:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010924:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010928:	2200      	movs	r2, #0
 801092a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801092c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801092e:	3304      	adds	r3, #4
 8010930:	4618      	mov	r0, r3
 8010932:	f7fe fd27 	bl	800f384 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010938:	3318      	adds	r3, #24
 801093a:	4618      	mov	r0, r3
 801093c:	f7fe fd22 	bl	800f384 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010942:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010944:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010948:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801094c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801094e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010954:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010958:	2200      	movs	r2, #0
 801095a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801095e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010960:	2200      	movs	r2, #0
 8010962:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010968:	3354      	adds	r3, #84	@ 0x54
 801096a:	224c      	movs	r2, #76	@ 0x4c
 801096c:	2100      	movs	r1, #0
 801096e:	4618      	mov	r0, r3
 8010970:	f00d fce6 	bl	801e340 <memset>
 8010974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010976:	4a0d      	ldr	r2, [pc, #52]	@ (80109ac <prvInitialiseNewTask+0x148>)
 8010978:	659a      	str	r2, [r3, #88]	@ 0x58
 801097a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801097c:	4a0c      	ldr	r2, [pc, #48]	@ (80109b0 <prvInitialiseNewTask+0x14c>)
 801097e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8010980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010982:	4a0c      	ldr	r2, [pc, #48]	@ (80109b4 <prvInitialiseNewTask+0x150>)
 8010984:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010986:	683a      	ldr	r2, [r7, #0]
 8010988:	68f9      	ldr	r1, [r7, #12]
 801098a:	69b8      	ldr	r0, [r7, #24]
 801098c:	f001 fbe2 	bl	8012154 <pxPortInitialiseStack>
 8010990:	4602      	mov	r2, r0
 8010992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010994:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010998:	2b00      	cmp	r3, #0
 801099a:	d002      	beq.n	80109a2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801099c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801099e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80109a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80109a2:	bf00      	nop
 80109a4:	3720      	adds	r7, #32
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}
 80109aa:	bf00      	nop
 80109ac:	20027d10 	.word	0x20027d10
 80109b0:	20027d78 	.word	0x20027d78
 80109b4:	20027de0 	.word	0x20027de0

080109b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b082      	sub	sp, #8
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80109c0:	f001 fcd4 	bl	801236c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80109c4:	4b2d      	ldr	r3, [pc, #180]	@ (8010a7c <prvAddNewTaskToReadyList+0xc4>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	3301      	adds	r3, #1
 80109ca:	4a2c      	ldr	r2, [pc, #176]	@ (8010a7c <prvAddNewTaskToReadyList+0xc4>)
 80109cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80109ce:	4b2c      	ldr	r3, [pc, #176]	@ (8010a80 <prvAddNewTaskToReadyList+0xc8>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d109      	bne.n	80109ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80109d6:	4a2a      	ldr	r2, [pc, #168]	@ (8010a80 <prvAddNewTaskToReadyList+0xc8>)
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80109dc:	4b27      	ldr	r3, [pc, #156]	@ (8010a7c <prvAddNewTaskToReadyList+0xc4>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	2b01      	cmp	r3, #1
 80109e2:	d110      	bne.n	8010a06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80109e4:	f000 fc7a 	bl	80112dc <prvInitialiseTaskLists>
 80109e8:	e00d      	b.n	8010a06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80109ea:	4b26      	ldr	r3, [pc, #152]	@ (8010a84 <prvAddNewTaskToReadyList+0xcc>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d109      	bne.n	8010a06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80109f2:	4b23      	ldr	r3, [pc, #140]	@ (8010a80 <prvAddNewTaskToReadyList+0xc8>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109fc:	429a      	cmp	r2, r3
 80109fe:	d802      	bhi.n	8010a06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010a00:	4a1f      	ldr	r2, [pc, #124]	@ (8010a80 <prvAddNewTaskToReadyList+0xc8>)
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010a06:	4b20      	ldr	r3, [pc, #128]	@ (8010a88 <prvAddNewTaskToReadyList+0xd0>)
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	3301      	adds	r3, #1
 8010a0c:	4a1e      	ldr	r2, [pc, #120]	@ (8010a88 <prvAddNewTaskToReadyList+0xd0>)
 8010a0e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010a10:	4b1d      	ldr	r3, [pc, #116]	@ (8010a88 <prvAddNewTaskToReadyList+0xd0>)
 8010a12:	681a      	ldr	r2, [r3, #0]
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8010a8c <prvAddNewTaskToReadyList+0xd4>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d903      	bls.n	8010a2c <prvAddNewTaskToReadyList+0x74>
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a28:	4a18      	ldr	r2, [pc, #96]	@ (8010a8c <prvAddNewTaskToReadyList+0xd4>)
 8010a2a:	6013      	str	r3, [r2, #0]
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a30:	4613      	mov	r3, r2
 8010a32:	009b      	lsls	r3, r3, #2
 8010a34:	4413      	add	r3, r2
 8010a36:	009b      	lsls	r3, r3, #2
 8010a38:	4a15      	ldr	r2, [pc, #84]	@ (8010a90 <prvAddNewTaskToReadyList+0xd8>)
 8010a3a:	441a      	add	r2, r3
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	3304      	adds	r3, #4
 8010a40:	4619      	mov	r1, r3
 8010a42:	4610      	mov	r0, r2
 8010a44:	f7fe fcab 	bl	800f39e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010a48:	f001 fcc6 	bl	80123d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8010a84 <prvAddNewTaskToReadyList+0xcc>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d00e      	beq.n	8010a72 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010a54:	4b0a      	ldr	r3, [pc, #40]	@ (8010a80 <prvAddNewTaskToReadyList+0xc8>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	d207      	bcs.n	8010a72 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010a62:	4b0c      	ldr	r3, [pc, #48]	@ (8010a94 <prvAddNewTaskToReadyList+0xdc>)
 8010a64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010a68:	601a      	str	r2, [r3, #0]
 8010a6a:	f3bf 8f4f 	dsb	sy
 8010a6e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010a72:	bf00      	nop
 8010a74:	3708      	adds	r7, #8
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}
 8010a7a:	bf00      	nop
 8010a7c:	2000b528 	.word	0x2000b528
 8010a80:	2000b054 	.word	0x2000b054
 8010a84:	2000b534 	.word	0x2000b534
 8010a88:	2000b544 	.word	0x2000b544
 8010a8c:	2000b530 	.word	0x2000b530
 8010a90:	2000b058 	.word	0x2000b058
 8010a94:	e000ed04 	.word	0xe000ed04

08010a98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b084      	sub	sp, #16
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d01a      	beq.n	8010ae0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010aaa:	4b15      	ldr	r3, [pc, #84]	@ (8010b00 <vTaskDelay+0x68>)
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d00d      	beq.n	8010ace <vTaskDelay+0x36>
	__asm volatile
 8010ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ab6:	b672      	cpsid	i
 8010ab8:	f383 8811 	msr	BASEPRI, r3
 8010abc:	f3bf 8f6f 	isb	sy
 8010ac0:	f3bf 8f4f 	dsb	sy
 8010ac4:	b662      	cpsie	i
 8010ac6:	60bb      	str	r3, [r7, #8]
}
 8010ac8:	bf00      	nop
 8010aca:	bf00      	nop
 8010acc:	e7fd      	b.n	8010aca <vTaskDelay+0x32>
			vTaskSuspendAll();
 8010ace:	f000 f88f 	bl	8010bf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010ad2:	2100      	movs	r1, #0
 8010ad4:	6878      	ldr	r0, [r7, #4]
 8010ad6:	f000 ff81 	bl	80119dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010ada:	f000 f897 	bl	8010c0c <xTaskResumeAll>
 8010ade:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d107      	bne.n	8010af6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8010ae6:	4b07      	ldr	r3, [pc, #28]	@ (8010b04 <vTaskDelay+0x6c>)
 8010ae8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010aec:	601a      	str	r2, [r3, #0]
 8010aee:	f3bf 8f4f 	dsb	sy
 8010af2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010af6:	bf00      	nop
 8010af8:	3710      	adds	r7, #16
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}
 8010afe:	bf00      	nop
 8010b00:	2000b550 	.word	0x2000b550
 8010b04:	e000ed04 	.word	0xe000ed04

08010b08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b08a      	sub	sp, #40	@ 0x28
 8010b0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010b12:	2300      	movs	r3, #0
 8010b14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010b16:	463a      	mov	r2, r7
 8010b18:	1d39      	adds	r1, r7, #4
 8010b1a:	f107 0308 	add.w	r3, r7, #8
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f7fe fbdc 	bl	800f2dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010b24:	6839      	ldr	r1, [r7, #0]
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	68ba      	ldr	r2, [r7, #8]
 8010b2a:	9202      	str	r2, [sp, #8]
 8010b2c:	9301      	str	r3, [sp, #4]
 8010b2e:	2300      	movs	r3, #0
 8010b30:	9300      	str	r3, [sp, #0]
 8010b32:	2300      	movs	r3, #0
 8010b34:	460a      	mov	r2, r1
 8010b36:	4926      	ldr	r1, [pc, #152]	@ (8010bd0 <vTaskStartScheduler+0xc8>)
 8010b38:	4826      	ldr	r0, [pc, #152]	@ (8010bd4 <vTaskStartScheduler+0xcc>)
 8010b3a:	f7ff fde7 	bl	801070c <xTaskCreateStatic>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	4a25      	ldr	r2, [pc, #148]	@ (8010bd8 <vTaskStartScheduler+0xd0>)
 8010b42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010b44:	4b24      	ldr	r3, [pc, #144]	@ (8010bd8 <vTaskStartScheduler+0xd0>)
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d002      	beq.n	8010b52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010b4c:	2301      	movs	r3, #1
 8010b4e:	617b      	str	r3, [r7, #20]
 8010b50:	e001      	b.n	8010b56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010b52:	2300      	movs	r3, #0
 8010b54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	2b01      	cmp	r3, #1
 8010b5a:	d102      	bne.n	8010b62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010b5c:	f000 ff92 	bl	8011a84 <xTimerCreateTimerTask>
 8010b60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	2b01      	cmp	r3, #1
 8010b66:	d11d      	bne.n	8010ba4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8010b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b6c:	b672      	cpsid	i
 8010b6e:	f383 8811 	msr	BASEPRI, r3
 8010b72:	f3bf 8f6f 	isb	sy
 8010b76:	f3bf 8f4f 	dsb	sy
 8010b7a:	b662      	cpsie	i
 8010b7c:	613b      	str	r3, [r7, #16]
}
 8010b7e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010b80:	4b16      	ldr	r3, [pc, #88]	@ (8010bdc <vTaskStartScheduler+0xd4>)
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	3354      	adds	r3, #84	@ 0x54
 8010b86:	4a16      	ldr	r2, [pc, #88]	@ (8010be0 <vTaskStartScheduler+0xd8>)
 8010b88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010b8a:	4b16      	ldr	r3, [pc, #88]	@ (8010be4 <vTaskStartScheduler+0xdc>)
 8010b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8010b90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010b92:	4b15      	ldr	r3, [pc, #84]	@ (8010be8 <vTaskStartScheduler+0xe0>)
 8010b94:	2201      	movs	r2, #1
 8010b96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010b98:	4b14      	ldr	r3, [pc, #80]	@ (8010bec <vTaskStartScheduler+0xe4>)
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010b9e:	f001 fb67 	bl	8012270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010ba2:	e011      	b.n	8010bc8 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010baa:	d10d      	bne.n	8010bc8 <vTaskStartScheduler+0xc0>
	__asm volatile
 8010bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bb0:	b672      	cpsid	i
 8010bb2:	f383 8811 	msr	BASEPRI, r3
 8010bb6:	f3bf 8f6f 	isb	sy
 8010bba:	f3bf 8f4f 	dsb	sy
 8010bbe:	b662      	cpsie	i
 8010bc0:	60fb      	str	r3, [r7, #12]
}
 8010bc2:	bf00      	nop
 8010bc4:	bf00      	nop
 8010bc6:	e7fd      	b.n	8010bc4 <vTaskStartScheduler+0xbc>
}
 8010bc8:	bf00      	nop
 8010bca:	3718      	adds	r7, #24
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	bd80      	pop	{r7, pc}
 8010bd0:	0801f22c 	.word	0x0801f22c
 8010bd4:	080112ad 	.word	0x080112ad
 8010bd8:	2000b54c 	.word	0x2000b54c
 8010bdc:	2000b054 	.word	0x2000b054
 8010be0:	2000003c 	.word	0x2000003c
 8010be4:	2000b548 	.word	0x2000b548
 8010be8:	2000b534 	.word	0x2000b534
 8010bec:	2000b52c 	.word	0x2000b52c

08010bf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010bf0:	b480      	push	{r7}
 8010bf2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010bf4:	4b04      	ldr	r3, [pc, #16]	@ (8010c08 <vTaskSuspendAll+0x18>)
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	3301      	adds	r3, #1
 8010bfa:	4a03      	ldr	r2, [pc, #12]	@ (8010c08 <vTaskSuspendAll+0x18>)
 8010bfc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8010bfe:	bf00      	nop
 8010c00:	46bd      	mov	sp, r7
 8010c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c06:	4770      	bx	lr
 8010c08:	2000b550 	.word	0x2000b550

08010c0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b084      	sub	sp, #16
 8010c10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010c12:	2300      	movs	r3, #0
 8010c14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010c16:	2300      	movs	r3, #0
 8010c18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010c1a:	4b43      	ldr	r3, [pc, #268]	@ (8010d28 <xTaskResumeAll+0x11c>)
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d10d      	bne.n	8010c3e <xTaskResumeAll+0x32>
	__asm volatile
 8010c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c26:	b672      	cpsid	i
 8010c28:	f383 8811 	msr	BASEPRI, r3
 8010c2c:	f3bf 8f6f 	isb	sy
 8010c30:	f3bf 8f4f 	dsb	sy
 8010c34:	b662      	cpsie	i
 8010c36:	603b      	str	r3, [r7, #0]
}
 8010c38:	bf00      	nop
 8010c3a:	bf00      	nop
 8010c3c:	e7fd      	b.n	8010c3a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010c3e:	f001 fb95 	bl	801236c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010c42:	4b39      	ldr	r3, [pc, #228]	@ (8010d28 <xTaskResumeAll+0x11c>)
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	3b01      	subs	r3, #1
 8010c48:	4a37      	ldr	r2, [pc, #220]	@ (8010d28 <xTaskResumeAll+0x11c>)
 8010c4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010c4c:	4b36      	ldr	r3, [pc, #216]	@ (8010d28 <xTaskResumeAll+0x11c>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d162      	bne.n	8010d1a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010c54:	4b35      	ldr	r3, [pc, #212]	@ (8010d2c <xTaskResumeAll+0x120>)
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d05e      	beq.n	8010d1a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010c5c:	e02f      	b.n	8010cbe <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c5e:	4b34      	ldr	r3, [pc, #208]	@ (8010d30 <xTaskResumeAll+0x124>)
 8010c60:	68db      	ldr	r3, [r3, #12]
 8010c62:	68db      	ldr	r3, [r3, #12]
 8010c64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	3318      	adds	r3, #24
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7fe fbf4 	bl	800f458 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	3304      	adds	r3, #4
 8010c74:	4618      	mov	r0, r3
 8010c76:	f7fe fbef 	bl	800f458 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8010d34 <xTaskResumeAll+0x128>)
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	429a      	cmp	r2, r3
 8010c84:	d903      	bls.n	8010c8e <xTaskResumeAll+0x82>
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c8a:	4a2a      	ldr	r2, [pc, #168]	@ (8010d34 <xTaskResumeAll+0x128>)
 8010c8c:	6013      	str	r3, [r2, #0]
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c92:	4613      	mov	r3, r2
 8010c94:	009b      	lsls	r3, r3, #2
 8010c96:	4413      	add	r3, r2
 8010c98:	009b      	lsls	r3, r3, #2
 8010c9a:	4a27      	ldr	r2, [pc, #156]	@ (8010d38 <xTaskResumeAll+0x12c>)
 8010c9c:	441a      	add	r2, r3
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	3304      	adds	r3, #4
 8010ca2:	4619      	mov	r1, r3
 8010ca4:	4610      	mov	r0, r2
 8010ca6:	f7fe fb7a 	bl	800f39e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cae:	4b23      	ldr	r3, [pc, #140]	@ (8010d3c <xTaskResumeAll+0x130>)
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cb4:	429a      	cmp	r2, r3
 8010cb6:	d302      	bcc.n	8010cbe <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8010cb8:	4b21      	ldr	r3, [pc, #132]	@ (8010d40 <xTaskResumeAll+0x134>)
 8010cba:	2201      	movs	r2, #1
 8010cbc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8010d30 <xTaskResumeAll+0x124>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d1cb      	bne.n	8010c5e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d001      	beq.n	8010cd0 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010ccc:	f000 fbac 	bl	8011428 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8010d44 <xTaskResumeAll+0x138>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d010      	beq.n	8010cfe <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010cdc:	f000 f858 	bl	8010d90 <xTaskIncrementTick>
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d002      	beq.n	8010cec <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8010ce6:	4b16      	ldr	r3, [pc, #88]	@ (8010d40 <xTaskResumeAll+0x134>)
 8010ce8:	2201      	movs	r2, #1
 8010cea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	3b01      	subs	r3, #1
 8010cf0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d1f1      	bne.n	8010cdc <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8010cf8:	4b12      	ldr	r3, [pc, #72]	@ (8010d44 <xTaskResumeAll+0x138>)
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010cfe:	4b10      	ldr	r3, [pc, #64]	@ (8010d40 <xTaskResumeAll+0x134>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d009      	beq.n	8010d1a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010d06:	2301      	movs	r3, #1
 8010d08:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8010d48 <xTaskResumeAll+0x13c>)
 8010d0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010d10:	601a      	str	r2, [r3, #0]
 8010d12:	f3bf 8f4f 	dsb	sy
 8010d16:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010d1a:	f001 fb5d 	bl	80123d8 <vPortExitCritical>

	return xAlreadyYielded;
 8010d1e:	68bb      	ldr	r3, [r7, #8]
}
 8010d20:	4618      	mov	r0, r3
 8010d22:	3710      	adds	r7, #16
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}
 8010d28:	2000b550 	.word	0x2000b550
 8010d2c:	2000b528 	.word	0x2000b528
 8010d30:	2000b4e8 	.word	0x2000b4e8
 8010d34:	2000b530 	.word	0x2000b530
 8010d38:	2000b058 	.word	0x2000b058
 8010d3c:	2000b054 	.word	0x2000b054
 8010d40:	2000b53c 	.word	0x2000b53c
 8010d44:	2000b538 	.word	0x2000b538
 8010d48:	e000ed04 	.word	0xe000ed04

08010d4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010d4c:	b480      	push	{r7}
 8010d4e:	b083      	sub	sp, #12
 8010d50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010d52:	4b05      	ldr	r3, [pc, #20]	@ (8010d68 <xTaskGetTickCount+0x1c>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010d58:	687b      	ldr	r3, [r7, #4]
}
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	370c      	adds	r7, #12
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d64:	4770      	bx	lr
 8010d66:	bf00      	nop
 8010d68:	2000b52c 	.word	0x2000b52c

08010d6c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b082      	sub	sp, #8
 8010d70:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010d72:	f001 fbe3 	bl	801253c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8010d76:	2300      	movs	r3, #0
 8010d78:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8010d7a:	4b04      	ldr	r3, [pc, #16]	@ (8010d8c <xTaskGetTickCountFromISR+0x20>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d80:	683b      	ldr	r3, [r7, #0]
}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3708      	adds	r7, #8
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
 8010d8a:	bf00      	nop
 8010d8c:	2000b52c 	.word	0x2000b52c

08010d90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b086      	sub	sp, #24
 8010d94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010d96:	2300      	movs	r3, #0
 8010d98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d9a:	4b50      	ldr	r3, [pc, #320]	@ (8010edc <xTaskIncrementTick+0x14c>)
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	f040 808c 	bne.w	8010ebc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010da4:	4b4e      	ldr	r3, [pc, #312]	@ (8010ee0 <xTaskIncrementTick+0x150>)
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	3301      	adds	r3, #1
 8010daa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010dac:	4a4c      	ldr	r2, [pc, #304]	@ (8010ee0 <xTaskIncrementTick+0x150>)
 8010dae:	693b      	ldr	r3, [r7, #16]
 8010db0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010db2:	693b      	ldr	r3, [r7, #16]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d123      	bne.n	8010e00 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8010db8:	4b4a      	ldr	r3, [pc, #296]	@ (8010ee4 <xTaskIncrementTick+0x154>)
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d00d      	beq.n	8010dde <xTaskIncrementTick+0x4e>
	__asm volatile
 8010dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dc6:	b672      	cpsid	i
 8010dc8:	f383 8811 	msr	BASEPRI, r3
 8010dcc:	f3bf 8f6f 	isb	sy
 8010dd0:	f3bf 8f4f 	dsb	sy
 8010dd4:	b662      	cpsie	i
 8010dd6:	603b      	str	r3, [r7, #0]
}
 8010dd8:	bf00      	nop
 8010dda:	bf00      	nop
 8010ddc:	e7fd      	b.n	8010dda <xTaskIncrementTick+0x4a>
 8010dde:	4b41      	ldr	r3, [pc, #260]	@ (8010ee4 <xTaskIncrementTick+0x154>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	60fb      	str	r3, [r7, #12]
 8010de4:	4b40      	ldr	r3, [pc, #256]	@ (8010ee8 <xTaskIncrementTick+0x158>)
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	4a3e      	ldr	r2, [pc, #248]	@ (8010ee4 <xTaskIncrementTick+0x154>)
 8010dea:	6013      	str	r3, [r2, #0]
 8010dec:	4a3e      	ldr	r2, [pc, #248]	@ (8010ee8 <xTaskIncrementTick+0x158>)
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	6013      	str	r3, [r2, #0]
 8010df2:	4b3e      	ldr	r3, [pc, #248]	@ (8010eec <xTaskIncrementTick+0x15c>)
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	3301      	adds	r3, #1
 8010df8:	4a3c      	ldr	r2, [pc, #240]	@ (8010eec <xTaskIncrementTick+0x15c>)
 8010dfa:	6013      	str	r3, [r2, #0]
 8010dfc:	f000 fb14 	bl	8011428 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010e00:	4b3b      	ldr	r3, [pc, #236]	@ (8010ef0 <xTaskIncrementTick+0x160>)
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	693a      	ldr	r2, [r7, #16]
 8010e06:	429a      	cmp	r2, r3
 8010e08:	d349      	bcc.n	8010e9e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e0a:	4b36      	ldr	r3, [pc, #216]	@ (8010ee4 <xTaskIncrementTick+0x154>)
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d104      	bne.n	8010e1e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e14:	4b36      	ldr	r3, [pc, #216]	@ (8010ef0 <xTaskIncrementTick+0x160>)
 8010e16:	f04f 32ff 	mov.w	r2, #4294967295
 8010e1a:	601a      	str	r2, [r3, #0]
					break;
 8010e1c:	e03f      	b.n	8010e9e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e1e:	4b31      	ldr	r3, [pc, #196]	@ (8010ee4 <xTaskIncrementTick+0x154>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	68db      	ldr	r3, [r3, #12]
 8010e24:	68db      	ldr	r3, [r3, #12]
 8010e26:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	685b      	ldr	r3, [r3, #4]
 8010e2c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010e2e:	693a      	ldr	r2, [r7, #16]
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	429a      	cmp	r2, r3
 8010e34:	d203      	bcs.n	8010e3e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010e36:	4a2e      	ldr	r2, [pc, #184]	@ (8010ef0 <xTaskIncrementTick+0x160>)
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010e3c:	e02f      	b.n	8010e9e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e3e:	68bb      	ldr	r3, [r7, #8]
 8010e40:	3304      	adds	r3, #4
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7fe fb08 	bl	800f458 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010e48:	68bb      	ldr	r3, [r7, #8]
 8010e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d004      	beq.n	8010e5a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	3318      	adds	r3, #24
 8010e54:	4618      	mov	r0, r3
 8010e56:	f7fe faff 	bl	800f458 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e5e:	4b25      	ldr	r3, [pc, #148]	@ (8010ef4 <xTaskIncrementTick+0x164>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	429a      	cmp	r2, r3
 8010e64:	d903      	bls.n	8010e6e <xTaskIncrementTick+0xde>
 8010e66:	68bb      	ldr	r3, [r7, #8]
 8010e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e6a:	4a22      	ldr	r2, [pc, #136]	@ (8010ef4 <xTaskIncrementTick+0x164>)
 8010e6c:	6013      	str	r3, [r2, #0]
 8010e6e:	68bb      	ldr	r3, [r7, #8]
 8010e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e72:	4613      	mov	r3, r2
 8010e74:	009b      	lsls	r3, r3, #2
 8010e76:	4413      	add	r3, r2
 8010e78:	009b      	lsls	r3, r3, #2
 8010e7a:	4a1f      	ldr	r2, [pc, #124]	@ (8010ef8 <xTaskIncrementTick+0x168>)
 8010e7c:	441a      	add	r2, r3
 8010e7e:	68bb      	ldr	r3, [r7, #8]
 8010e80:	3304      	adds	r3, #4
 8010e82:	4619      	mov	r1, r3
 8010e84:	4610      	mov	r0, r2
 8010e86:	f7fe fa8a 	bl	800f39e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8010efc <xTaskIncrementTick+0x16c>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d3b8      	bcc.n	8010e0a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8010e98:	2301      	movs	r3, #1
 8010e9a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e9c:	e7b5      	b.n	8010e0a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010e9e:	4b17      	ldr	r3, [pc, #92]	@ (8010efc <xTaskIncrementTick+0x16c>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ea4:	4914      	ldr	r1, [pc, #80]	@ (8010ef8 <xTaskIncrementTick+0x168>)
 8010ea6:	4613      	mov	r3, r2
 8010ea8:	009b      	lsls	r3, r3, #2
 8010eaa:	4413      	add	r3, r2
 8010eac:	009b      	lsls	r3, r3, #2
 8010eae:	440b      	add	r3, r1
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	2b01      	cmp	r3, #1
 8010eb4:	d907      	bls.n	8010ec6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8010eb6:	2301      	movs	r3, #1
 8010eb8:	617b      	str	r3, [r7, #20]
 8010eba:	e004      	b.n	8010ec6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010ebc:	4b10      	ldr	r3, [pc, #64]	@ (8010f00 <xTaskIncrementTick+0x170>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	3301      	adds	r3, #1
 8010ec2:	4a0f      	ldr	r2, [pc, #60]	@ (8010f00 <xTaskIncrementTick+0x170>)
 8010ec4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8010f04 <xTaskIncrementTick+0x174>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d001      	beq.n	8010ed2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8010ece:	2301      	movs	r3, #1
 8010ed0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010ed2:	697b      	ldr	r3, [r7, #20]
}
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	3718      	adds	r7, #24
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}
 8010edc:	2000b550 	.word	0x2000b550
 8010ee0:	2000b52c 	.word	0x2000b52c
 8010ee4:	2000b4e0 	.word	0x2000b4e0
 8010ee8:	2000b4e4 	.word	0x2000b4e4
 8010eec:	2000b540 	.word	0x2000b540
 8010ef0:	2000b548 	.word	0x2000b548
 8010ef4:	2000b530 	.word	0x2000b530
 8010ef8:	2000b058 	.word	0x2000b058
 8010efc:	2000b054 	.word	0x2000b054
 8010f00:	2000b538 	.word	0x2000b538
 8010f04:	2000b53c 	.word	0x2000b53c

08010f08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b086      	sub	sp, #24
 8010f0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010f0e:	4b3e      	ldr	r3, [pc, #248]	@ (8011008 <vTaskSwitchContext+0x100>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d003      	beq.n	8010f1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010f16:	4b3d      	ldr	r3, [pc, #244]	@ (801100c <vTaskSwitchContext+0x104>)
 8010f18:	2201      	movs	r2, #1
 8010f1a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010f1c:	e070      	b.n	8011000 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 8010f1e:	4b3b      	ldr	r3, [pc, #236]	@ (801100c <vTaskSwitchContext+0x104>)
 8010f20:	2200      	movs	r2, #0
 8010f22:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8010f24:	4b3a      	ldr	r3, [pc, #232]	@ (8011010 <vTaskSwitchContext+0x108>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010f2a:	613b      	str	r3, [r7, #16]
 8010f2c:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8010f30:	60fb      	str	r3, [r7, #12]
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	68fa      	ldr	r2, [r7, #12]
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	d111      	bne.n	8010f60 <vTaskSwitchContext+0x58>
 8010f3c:	693b      	ldr	r3, [r7, #16]
 8010f3e:	3304      	adds	r3, #4
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	68fa      	ldr	r2, [r7, #12]
 8010f44:	429a      	cmp	r2, r3
 8010f46:	d10b      	bne.n	8010f60 <vTaskSwitchContext+0x58>
 8010f48:	693b      	ldr	r3, [r7, #16]
 8010f4a:	3308      	adds	r3, #8
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	68fa      	ldr	r2, [r7, #12]
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d105      	bne.n	8010f60 <vTaskSwitchContext+0x58>
 8010f54:	693b      	ldr	r3, [r7, #16]
 8010f56:	330c      	adds	r3, #12
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	68fa      	ldr	r2, [r7, #12]
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d008      	beq.n	8010f72 <vTaskSwitchContext+0x6a>
 8010f60:	4b2b      	ldr	r3, [pc, #172]	@ (8011010 <vTaskSwitchContext+0x108>)
 8010f62:	681a      	ldr	r2, [r3, #0]
 8010f64:	4b2a      	ldr	r3, [pc, #168]	@ (8011010 <vTaskSwitchContext+0x108>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	3334      	adds	r3, #52	@ 0x34
 8010f6a:	4619      	mov	r1, r3
 8010f6c:	4610      	mov	r0, r2
 8010f6e:	f7f0 f827 	bl	8000fc0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f72:	4b28      	ldr	r3, [pc, #160]	@ (8011014 <vTaskSwitchContext+0x10c>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	617b      	str	r3, [r7, #20]
 8010f78:	e013      	b.n	8010fa2 <vTaskSwitchContext+0x9a>
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d10d      	bne.n	8010f9c <vTaskSwitchContext+0x94>
	__asm volatile
 8010f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f84:	b672      	cpsid	i
 8010f86:	f383 8811 	msr	BASEPRI, r3
 8010f8a:	f3bf 8f6f 	isb	sy
 8010f8e:	f3bf 8f4f 	dsb	sy
 8010f92:	b662      	cpsie	i
 8010f94:	607b      	str	r3, [r7, #4]
}
 8010f96:	bf00      	nop
 8010f98:	bf00      	nop
 8010f9a:	e7fd      	b.n	8010f98 <vTaskSwitchContext+0x90>
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	3b01      	subs	r3, #1
 8010fa0:	617b      	str	r3, [r7, #20]
 8010fa2:	491d      	ldr	r1, [pc, #116]	@ (8011018 <vTaskSwitchContext+0x110>)
 8010fa4:	697a      	ldr	r2, [r7, #20]
 8010fa6:	4613      	mov	r3, r2
 8010fa8:	009b      	lsls	r3, r3, #2
 8010faa:	4413      	add	r3, r2
 8010fac:	009b      	lsls	r3, r3, #2
 8010fae:	440b      	add	r3, r1
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d0e1      	beq.n	8010f7a <vTaskSwitchContext+0x72>
 8010fb6:	697a      	ldr	r2, [r7, #20]
 8010fb8:	4613      	mov	r3, r2
 8010fba:	009b      	lsls	r3, r3, #2
 8010fbc:	4413      	add	r3, r2
 8010fbe:	009b      	lsls	r3, r3, #2
 8010fc0:	4a15      	ldr	r2, [pc, #84]	@ (8011018 <vTaskSwitchContext+0x110>)
 8010fc2:	4413      	add	r3, r2
 8010fc4:	60bb      	str	r3, [r7, #8]
 8010fc6:	68bb      	ldr	r3, [r7, #8]
 8010fc8:	685b      	ldr	r3, [r3, #4]
 8010fca:	685a      	ldr	r2, [r3, #4]
 8010fcc:	68bb      	ldr	r3, [r7, #8]
 8010fce:	605a      	str	r2, [r3, #4]
 8010fd0:	68bb      	ldr	r3, [r7, #8]
 8010fd2:	685a      	ldr	r2, [r3, #4]
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	3308      	adds	r3, #8
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	d104      	bne.n	8010fe6 <vTaskSwitchContext+0xde>
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	685b      	ldr	r3, [r3, #4]
 8010fe0:	685a      	ldr	r2, [r3, #4]
 8010fe2:	68bb      	ldr	r3, [r7, #8]
 8010fe4:	605a      	str	r2, [r3, #4]
 8010fe6:	68bb      	ldr	r3, [r7, #8]
 8010fe8:	685b      	ldr	r3, [r3, #4]
 8010fea:	68db      	ldr	r3, [r3, #12]
 8010fec:	4a08      	ldr	r2, [pc, #32]	@ (8011010 <vTaskSwitchContext+0x108>)
 8010fee:	6013      	str	r3, [r2, #0]
 8010ff0:	4a08      	ldr	r2, [pc, #32]	@ (8011014 <vTaskSwitchContext+0x10c>)
 8010ff2:	697b      	ldr	r3, [r7, #20]
 8010ff4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010ff6:	4b06      	ldr	r3, [pc, #24]	@ (8011010 <vTaskSwitchContext+0x108>)
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	3354      	adds	r3, #84	@ 0x54
 8010ffc:	4a07      	ldr	r2, [pc, #28]	@ (801101c <vTaskSwitchContext+0x114>)
 8010ffe:	6013      	str	r3, [r2, #0]
}
 8011000:	bf00      	nop
 8011002:	3718      	adds	r7, #24
 8011004:	46bd      	mov	sp, r7
 8011006:	bd80      	pop	{r7, pc}
 8011008:	2000b550 	.word	0x2000b550
 801100c:	2000b53c 	.word	0x2000b53c
 8011010:	2000b054 	.word	0x2000b054
 8011014:	2000b530 	.word	0x2000b530
 8011018:	2000b058 	.word	0x2000b058
 801101c:	2000003c 	.word	0x2000003c

08011020 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b084      	sub	sp, #16
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
 8011028:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d10d      	bne.n	801104c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8011030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011034:	b672      	cpsid	i
 8011036:	f383 8811 	msr	BASEPRI, r3
 801103a:	f3bf 8f6f 	isb	sy
 801103e:	f3bf 8f4f 	dsb	sy
 8011042:	b662      	cpsie	i
 8011044:	60fb      	str	r3, [r7, #12]
}
 8011046:	bf00      	nop
 8011048:	bf00      	nop
 801104a:	e7fd      	b.n	8011048 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801104c:	4b07      	ldr	r3, [pc, #28]	@ (801106c <vTaskPlaceOnEventList+0x4c>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	3318      	adds	r3, #24
 8011052:	4619      	mov	r1, r3
 8011054:	6878      	ldr	r0, [r7, #4]
 8011056:	f7fe f9c6 	bl	800f3e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801105a:	2101      	movs	r1, #1
 801105c:	6838      	ldr	r0, [r7, #0]
 801105e:	f000 fcbd 	bl	80119dc <prvAddCurrentTaskToDelayedList>
}
 8011062:	bf00      	nop
 8011064:	3710      	adds	r7, #16
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}
 801106a:	bf00      	nop
 801106c:	2000b054 	.word	0x2000b054

08011070 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011070:	b580      	push	{r7, lr}
 8011072:	b086      	sub	sp, #24
 8011074:	af00      	add	r7, sp, #0
 8011076:	60f8      	str	r0, [r7, #12]
 8011078:	60b9      	str	r1, [r7, #8]
 801107a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d10d      	bne.n	801109e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8011082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011086:	b672      	cpsid	i
 8011088:	f383 8811 	msr	BASEPRI, r3
 801108c:	f3bf 8f6f 	isb	sy
 8011090:	f3bf 8f4f 	dsb	sy
 8011094:	b662      	cpsie	i
 8011096:	617b      	str	r3, [r7, #20]
}
 8011098:	bf00      	nop
 801109a:	bf00      	nop
 801109c:	e7fd      	b.n	801109a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801109e:	4b0a      	ldr	r3, [pc, #40]	@ (80110c8 <vTaskPlaceOnEventListRestricted+0x58>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	3318      	adds	r3, #24
 80110a4:	4619      	mov	r1, r3
 80110a6:	68f8      	ldr	r0, [r7, #12]
 80110a8:	f7fe f979 	bl	800f39e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d002      	beq.n	80110b8 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80110b2:	f04f 33ff 	mov.w	r3, #4294967295
 80110b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80110b8:	6879      	ldr	r1, [r7, #4]
 80110ba:	68b8      	ldr	r0, [r7, #8]
 80110bc:	f000 fc8e 	bl	80119dc <prvAddCurrentTaskToDelayedList>
	}
 80110c0:	bf00      	nop
 80110c2:	3718      	adds	r7, #24
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd80      	pop	{r7, pc}
 80110c8:	2000b054 	.word	0x2000b054

080110cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b086      	sub	sp, #24
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	68db      	ldr	r3, [r3, #12]
 80110d8:	68db      	ldr	r3, [r3, #12]
 80110da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80110dc:	693b      	ldr	r3, [r7, #16]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d10d      	bne.n	80110fe <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80110e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110e6:	b672      	cpsid	i
 80110e8:	f383 8811 	msr	BASEPRI, r3
 80110ec:	f3bf 8f6f 	isb	sy
 80110f0:	f3bf 8f4f 	dsb	sy
 80110f4:	b662      	cpsie	i
 80110f6:	60fb      	str	r3, [r7, #12]
}
 80110f8:	bf00      	nop
 80110fa:	bf00      	nop
 80110fc:	e7fd      	b.n	80110fa <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80110fe:	693b      	ldr	r3, [r7, #16]
 8011100:	3318      	adds	r3, #24
 8011102:	4618      	mov	r0, r3
 8011104:	f7fe f9a8 	bl	800f458 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011108:	4b1d      	ldr	r3, [pc, #116]	@ (8011180 <xTaskRemoveFromEventList+0xb4>)
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d11d      	bne.n	801114c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011110:	693b      	ldr	r3, [r7, #16]
 8011112:	3304      	adds	r3, #4
 8011114:	4618      	mov	r0, r3
 8011116:	f7fe f99f 	bl	800f458 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801111a:	693b      	ldr	r3, [r7, #16]
 801111c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801111e:	4b19      	ldr	r3, [pc, #100]	@ (8011184 <xTaskRemoveFromEventList+0xb8>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	429a      	cmp	r2, r3
 8011124:	d903      	bls.n	801112e <xTaskRemoveFromEventList+0x62>
 8011126:	693b      	ldr	r3, [r7, #16]
 8011128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801112a:	4a16      	ldr	r2, [pc, #88]	@ (8011184 <xTaskRemoveFromEventList+0xb8>)
 801112c:	6013      	str	r3, [r2, #0]
 801112e:	693b      	ldr	r3, [r7, #16]
 8011130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011132:	4613      	mov	r3, r2
 8011134:	009b      	lsls	r3, r3, #2
 8011136:	4413      	add	r3, r2
 8011138:	009b      	lsls	r3, r3, #2
 801113a:	4a13      	ldr	r2, [pc, #76]	@ (8011188 <xTaskRemoveFromEventList+0xbc>)
 801113c:	441a      	add	r2, r3
 801113e:	693b      	ldr	r3, [r7, #16]
 8011140:	3304      	adds	r3, #4
 8011142:	4619      	mov	r1, r3
 8011144:	4610      	mov	r0, r2
 8011146:	f7fe f92a 	bl	800f39e <vListInsertEnd>
 801114a:	e005      	b.n	8011158 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801114c:	693b      	ldr	r3, [r7, #16]
 801114e:	3318      	adds	r3, #24
 8011150:	4619      	mov	r1, r3
 8011152:	480e      	ldr	r0, [pc, #56]	@ (801118c <xTaskRemoveFromEventList+0xc0>)
 8011154:	f7fe f923 	bl	800f39e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011158:	693b      	ldr	r3, [r7, #16]
 801115a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801115c:	4b0c      	ldr	r3, [pc, #48]	@ (8011190 <xTaskRemoveFromEventList+0xc4>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011162:	429a      	cmp	r2, r3
 8011164:	d905      	bls.n	8011172 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011166:	2301      	movs	r3, #1
 8011168:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801116a:	4b0a      	ldr	r3, [pc, #40]	@ (8011194 <xTaskRemoveFromEventList+0xc8>)
 801116c:	2201      	movs	r2, #1
 801116e:	601a      	str	r2, [r3, #0]
 8011170:	e001      	b.n	8011176 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8011172:	2300      	movs	r3, #0
 8011174:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011176:	697b      	ldr	r3, [r7, #20]
}
 8011178:	4618      	mov	r0, r3
 801117a:	3718      	adds	r7, #24
 801117c:	46bd      	mov	sp, r7
 801117e:	bd80      	pop	{r7, pc}
 8011180:	2000b550 	.word	0x2000b550
 8011184:	2000b530 	.word	0x2000b530
 8011188:	2000b058 	.word	0x2000b058
 801118c:	2000b4e8 	.word	0x2000b4e8
 8011190:	2000b054 	.word	0x2000b054
 8011194:	2000b53c 	.word	0x2000b53c

08011198 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011198:	b480      	push	{r7}
 801119a:	b083      	sub	sp, #12
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80111a0:	4b06      	ldr	r3, [pc, #24]	@ (80111bc <vTaskInternalSetTimeOutState+0x24>)
 80111a2:	681a      	ldr	r2, [r3, #0]
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80111a8:	4b05      	ldr	r3, [pc, #20]	@ (80111c0 <vTaskInternalSetTimeOutState+0x28>)
 80111aa:	681a      	ldr	r2, [r3, #0]
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	605a      	str	r2, [r3, #4]
}
 80111b0:	bf00      	nop
 80111b2:	370c      	adds	r7, #12
 80111b4:	46bd      	mov	sp, r7
 80111b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ba:	4770      	bx	lr
 80111bc:	2000b540 	.word	0x2000b540
 80111c0:	2000b52c 	.word	0x2000b52c

080111c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b088      	sub	sp, #32
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
 80111cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d10d      	bne.n	80111f0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80111d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111d8:	b672      	cpsid	i
 80111da:	f383 8811 	msr	BASEPRI, r3
 80111de:	f3bf 8f6f 	isb	sy
 80111e2:	f3bf 8f4f 	dsb	sy
 80111e6:	b662      	cpsie	i
 80111e8:	613b      	str	r3, [r7, #16]
}
 80111ea:	bf00      	nop
 80111ec:	bf00      	nop
 80111ee:	e7fd      	b.n	80111ec <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d10d      	bne.n	8011212 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80111f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111fa:	b672      	cpsid	i
 80111fc:	f383 8811 	msr	BASEPRI, r3
 8011200:	f3bf 8f6f 	isb	sy
 8011204:	f3bf 8f4f 	dsb	sy
 8011208:	b662      	cpsie	i
 801120a:	60fb      	str	r3, [r7, #12]
}
 801120c:	bf00      	nop
 801120e:	bf00      	nop
 8011210:	e7fd      	b.n	801120e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8011212:	f001 f8ab 	bl	801236c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011216:	4b1d      	ldr	r3, [pc, #116]	@ (801128c <xTaskCheckForTimeOut+0xc8>)
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	685b      	ldr	r3, [r3, #4]
 8011220:	69ba      	ldr	r2, [r7, #24]
 8011222:	1ad3      	subs	r3, r2, r3
 8011224:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011226:	683b      	ldr	r3, [r7, #0]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801122e:	d102      	bne.n	8011236 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011230:	2300      	movs	r3, #0
 8011232:	61fb      	str	r3, [r7, #28]
 8011234:	e023      	b.n	801127e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681a      	ldr	r2, [r3, #0]
 801123a:	4b15      	ldr	r3, [pc, #84]	@ (8011290 <xTaskCheckForTimeOut+0xcc>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	429a      	cmp	r2, r3
 8011240:	d007      	beq.n	8011252 <xTaskCheckForTimeOut+0x8e>
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	685b      	ldr	r3, [r3, #4]
 8011246:	69ba      	ldr	r2, [r7, #24]
 8011248:	429a      	cmp	r2, r3
 801124a:	d302      	bcc.n	8011252 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801124c:	2301      	movs	r3, #1
 801124e:	61fb      	str	r3, [r7, #28]
 8011250:	e015      	b.n	801127e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011252:	683b      	ldr	r3, [r7, #0]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	697a      	ldr	r2, [r7, #20]
 8011258:	429a      	cmp	r2, r3
 801125a:	d20b      	bcs.n	8011274 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	681a      	ldr	r2, [r3, #0]
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	1ad2      	subs	r2, r2, r3
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011268:	6878      	ldr	r0, [r7, #4]
 801126a:	f7ff ff95 	bl	8011198 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801126e:	2300      	movs	r3, #0
 8011270:	61fb      	str	r3, [r7, #28]
 8011272:	e004      	b.n	801127e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	2200      	movs	r2, #0
 8011278:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801127a:	2301      	movs	r3, #1
 801127c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801127e:	f001 f8ab 	bl	80123d8 <vPortExitCritical>

	return xReturn;
 8011282:	69fb      	ldr	r3, [r7, #28]
}
 8011284:	4618      	mov	r0, r3
 8011286:	3720      	adds	r7, #32
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}
 801128c:	2000b52c 	.word	0x2000b52c
 8011290:	2000b540 	.word	0x2000b540

08011294 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011294:	b480      	push	{r7}
 8011296:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011298:	4b03      	ldr	r3, [pc, #12]	@ (80112a8 <vTaskMissedYield+0x14>)
 801129a:	2201      	movs	r2, #1
 801129c:	601a      	str	r2, [r3, #0]
}
 801129e:	bf00      	nop
 80112a0:	46bd      	mov	sp, r7
 80112a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a6:	4770      	bx	lr
 80112a8:	2000b53c 	.word	0x2000b53c

080112ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b082      	sub	sp, #8
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80112b4:	f000 f852 	bl	801135c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80112b8:	4b06      	ldr	r3, [pc, #24]	@ (80112d4 <prvIdleTask+0x28>)
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	2b01      	cmp	r3, #1
 80112be:	d9f9      	bls.n	80112b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80112c0:	4b05      	ldr	r3, [pc, #20]	@ (80112d8 <prvIdleTask+0x2c>)
 80112c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80112c6:	601a      	str	r2, [r3, #0]
 80112c8:	f3bf 8f4f 	dsb	sy
 80112cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80112d0:	e7f0      	b.n	80112b4 <prvIdleTask+0x8>
 80112d2:	bf00      	nop
 80112d4:	2000b058 	.word	0x2000b058
 80112d8:	e000ed04 	.word	0xe000ed04

080112dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b082      	sub	sp, #8
 80112e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80112e2:	2300      	movs	r3, #0
 80112e4:	607b      	str	r3, [r7, #4]
 80112e6:	e00c      	b.n	8011302 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80112e8:	687a      	ldr	r2, [r7, #4]
 80112ea:	4613      	mov	r3, r2
 80112ec:	009b      	lsls	r3, r3, #2
 80112ee:	4413      	add	r3, r2
 80112f0:	009b      	lsls	r3, r3, #2
 80112f2:	4a12      	ldr	r2, [pc, #72]	@ (801133c <prvInitialiseTaskLists+0x60>)
 80112f4:	4413      	add	r3, r2
 80112f6:	4618      	mov	r0, r3
 80112f8:	f7fe f824 	bl	800f344 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	3301      	adds	r3, #1
 8011300:	607b      	str	r3, [r7, #4]
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2b37      	cmp	r3, #55	@ 0x37
 8011306:	d9ef      	bls.n	80112e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011308:	480d      	ldr	r0, [pc, #52]	@ (8011340 <prvInitialiseTaskLists+0x64>)
 801130a:	f7fe f81b 	bl	800f344 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801130e:	480d      	ldr	r0, [pc, #52]	@ (8011344 <prvInitialiseTaskLists+0x68>)
 8011310:	f7fe f818 	bl	800f344 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011314:	480c      	ldr	r0, [pc, #48]	@ (8011348 <prvInitialiseTaskLists+0x6c>)
 8011316:	f7fe f815 	bl	800f344 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801131a:	480c      	ldr	r0, [pc, #48]	@ (801134c <prvInitialiseTaskLists+0x70>)
 801131c:	f7fe f812 	bl	800f344 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011320:	480b      	ldr	r0, [pc, #44]	@ (8011350 <prvInitialiseTaskLists+0x74>)
 8011322:	f7fe f80f 	bl	800f344 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011326:	4b0b      	ldr	r3, [pc, #44]	@ (8011354 <prvInitialiseTaskLists+0x78>)
 8011328:	4a05      	ldr	r2, [pc, #20]	@ (8011340 <prvInitialiseTaskLists+0x64>)
 801132a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801132c:	4b0a      	ldr	r3, [pc, #40]	@ (8011358 <prvInitialiseTaskLists+0x7c>)
 801132e:	4a05      	ldr	r2, [pc, #20]	@ (8011344 <prvInitialiseTaskLists+0x68>)
 8011330:	601a      	str	r2, [r3, #0]
}
 8011332:	bf00      	nop
 8011334:	3708      	adds	r7, #8
 8011336:	46bd      	mov	sp, r7
 8011338:	bd80      	pop	{r7, pc}
 801133a:	bf00      	nop
 801133c:	2000b058 	.word	0x2000b058
 8011340:	2000b4b8 	.word	0x2000b4b8
 8011344:	2000b4cc 	.word	0x2000b4cc
 8011348:	2000b4e8 	.word	0x2000b4e8
 801134c:	2000b4fc 	.word	0x2000b4fc
 8011350:	2000b514 	.word	0x2000b514
 8011354:	2000b4e0 	.word	0x2000b4e0
 8011358:	2000b4e4 	.word	0x2000b4e4

0801135c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b082      	sub	sp, #8
 8011360:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011362:	e019      	b.n	8011398 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011364:	f001 f802 	bl	801236c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011368:	4b10      	ldr	r3, [pc, #64]	@ (80113ac <prvCheckTasksWaitingTermination+0x50>)
 801136a:	68db      	ldr	r3, [r3, #12]
 801136c:	68db      	ldr	r3, [r3, #12]
 801136e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	3304      	adds	r3, #4
 8011374:	4618      	mov	r0, r3
 8011376:	f7fe f86f 	bl	800f458 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801137a:	4b0d      	ldr	r3, [pc, #52]	@ (80113b0 <prvCheckTasksWaitingTermination+0x54>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	3b01      	subs	r3, #1
 8011380:	4a0b      	ldr	r2, [pc, #44]	@ (80113b0 <prvCheckTasksWaitingTermination+0x54>)
 8011382:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011384:	4b0b      	ldr	r3, [pc, #44]	@ (80113b4 <prvCheckTasksWaitingTermination+0x58>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	3b01      	subs	r3, #1
 801138a:	4a0a      	ldr	r2, [pc, #40]	@ (80113b4 <prvCheckTasksWaitingTermination+0x58>)
 801138c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801138e:	f001 f823 	bl	80123d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011392:	6878      	ldr	r0, [r7, #4]
 8011394:	f000 f810 	bl	80113b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011398:	4b06      	ldr	r3, [pc, #24]	@ (80113b4 <prvCheckTasksWaitingTermination+0x58>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d1e1      	bne.n	8011364 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80113a0:	bf00      	nop
 80113a2:	bf00      	nop
 80113a4:	3708      	adds	r7, #8
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}
 80113aa:	bf00      	nop
 80113ac:	2000b4fc 	.word	0x2000b4fc
 80113b0:	2000b528 	.word	0x2000b528
 80113b4:	2000b510 	.word	0x2000b510

080113b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b084      	sub	sp, #16
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	3354      	adds	r3, #84	@ 0x54
 80113c4:	4618      	mov	r0, r3
 80113c6:	f00c ffd3 	bl	801e370 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d108      	bne.n	80113e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80113d8:	4618      	mov	r0, r3
 80113da:	f001 f9c3 	bl	8012764 <vPortFree>
				vPortFree( pxTCB );
 80113de:	6878      	ldr	r0, [r7, #4]
 80113e0:	f001 f9c0 	bl	8012764 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80113e4:	e01b      	b.n	801141e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80113ec:	2b01      	cmp	r3, #1
 80113ee:	d103      	bne.n	80113f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80113f0:	6878      	ldr	r0, [r7, #4]
 80113f2:	f001 f9b7 	bl	8012764 <vPortFree>
	}
 80113f6:	e012      	b.n	801141e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80113fe:	2b02      	cmp	r3, #2
 8011400:	d00d      	beq.n	801141e <prvDeleteTCB+0x66>
	__asm volatile
 8011402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011406:	b672      	cpsid	i
 8011408:	f383 8811 	msr	BASEPRI, r3
 801140c:	f3bf 8f6f 	isb	sy
 8011410:	f3bf 8f4f 	dsb	sy
 8011414:	b662      	cpsie	i
 8011416:	60fb      	str	r3, [r7, #12]
}
 8011418:	bf00      	nop
 801141a:	bf00      	nop
 801141c:	e7fd      	b.n	801141a <prvDeleteTCB+0x62>
	}
 801141e:	bf00      	nop
 8011420:	3710      	adds	r7, #16
 8011422:	46bd      	mov	sp, r7
 8011424:	bd80      	pop	{r7, pc}
	...

08011428 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011428:	b480      	push	{r7}
 801142a:	b083      	sub	sp, #12
 801142c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801142e:	4b0c      	ldr	r3, [pc, #48]	@ (8011460 <prvResetNextTaskUnblockTime+0x38>)
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d104      	bne.n	8011442 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011438:	4b0a      	ldr	r3, [pc, #40]	@ (8011464 <prvResetNextTaskUnblockTime+0x3c>)
 801143a:	f04f 32ff 	mov.w	r2, #4294967295
 801143e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011440:	e008      	b.n	8011454 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011442:	4b07      	ldr	r3, [pc, #28]	@ (8011460 <prvResetNextTaskUnblockTime+0x38>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	68db      	ldr	r3, [r3, #12]
 8011448:	68db      	ldr	r3, [r3, #12]
 801144a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	685b      	ldr	r3, [r3, #4]
 8011450:	4a04      	ldr	r2, [pc, #16]	@ (8011464 <prvResetNextTaskUnblockTime+0x3c>)
 8011452:	6013      	str	r3, [r2, #0]
}
 8011454:	bf00      	nop
 8011456:	370c      	adds	r7, #12
 8011458:	46bd      	mov	sp, r7
 801145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145e:	4770      	bx	lr
 8011460:	2000b4e0 	.word	0x2000b4e0
 8011464:	2000b548 	.word	0x2000b548

08011468 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8011468:	b480      	push	{r7}
 801146a:	b083      	sub	sp, #12
 801146c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801146e:	4b05      	ldr	r3, [pc, #20]	@ (8011484 <xTaskGetCurrentTaskHandle+0x1c>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	607b      	str	r3, [r7, #4]

		return xReturn;
 8011474:	687b      	ldr	r3, [r7, #4]
	}
 8011476:	4618      	mov	r0, r3
 8011478:	370c      	adds	r7, #12
 801147a:	46bd      	mov	sp, r7
 801147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011480:	4770      	bx	lr
 8011482:	bf00      	nop
 8011484:	2000b054 	.word	0x2000b054

08011488 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011488:	b480      	push	{r7}
 801148a:	b083      	sub	sp, #12
 801148c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801148e:	4b0b      	ldr	r3, [pc, #44]	@ (80114bc <xTaskGetSchedulerState+0x34>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d102      	bne.n	801149c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011496:	2301      	movs	r3, #1
 8011498:	607b      	str	r3, [r7, #4]
 801149a:	e008      	b.n	80114ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801149c:	4b08      	ldr	r3, [pc, #32]	@ (80114c0 <xTaskGetSchedulerState+0x38>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d102      	bne.n	80114aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80114a4:	2302      	movs	r3, #2
 80114a6:	607b      	str	r3, [r7, #4]
 80114a8:	e001      	b.n	80114ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80114aa:	2300      	movs	r3, #0
 80114ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80114ae:	687b      	ldr	r3, [r7, #4]
	}
 80114b0:	4618      	mov	r0, r3
 80114b2:	370c      	adds	r7, #12
 80114b4:	46bd      	mov	sp, r7
 80114b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ba:	4770      	bx	lr
 80114bc:	2000b534 	.word	0x2000b534
 80114c0:	2000b550 	.word	0x2000b550

080114c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b084      	sub	sp, #16
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80114d0:	2300      	movs	r3, #0
 80114d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d051      	beq.n	801157e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80114da:	68bb      	ldr	r3, [r7, #8]
 80114dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80114de:	4b2a      	ldr	r3, [pc, #168]	@ (8011588 <xTaskPriorityInherit+0xc4>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114e4:	429a      	cmp	r2, r3
 80114e6:	d241      	bcs.n	801156c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	699b      	ldr	r3, [r3, #24]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	db06      	blt.n	80114fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80114f0:	4b25      	ldr	r3, [pc, #148]	@ (8011588 <xTaskPriorityInherit+0xc4>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114f6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	6959      	ldr	r1, [r3, #20]
 8011502:	68bb      	ldr	r3, [r7, #8]
 8011504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011506:	4613      	mov	r3, r2
 8011508:	009b      	lsls	r3, r3, #2
 801150a:	4413      	add	r3, r2
 801150c:	009b      	lsls	r3, r3, #2
 801150e:	4a1f      	ldr	r2, [pc, #124]	@ (801158c <xTaskPriorityInherit+0xc8>)
 8011510:	4413      	add	r3, r2
 8011512:	4299      	cmp	r1, r3
 8011514:	d122      	bne.n	801155c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	3304      	adds	r3, #4
 801151a:	4618      	mov	r0, r3
 801151c:	f7fd ff9c 	bl	800f458 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011520:	4b19      	ldr	r3, [pc, #100]	@ (8011588 <xTaskPriorityInherit+0xc4>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801152e:	4b18      	ldr	r3, [pc, #96]	@ (8011590 <xTaskPriorityInherit+0xcc>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	429a      	cmp	r2, r3
 8011534:	d903      	bls.n	801153e <xTaskPriorityInherit+0x7a>
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801153a:	4a15      	ldr	r2, [pc, #84]	@ (8011590 <xTaskPriorityInherit+0xcc>)
 801153c:	6013      	str	r3, [r2, #0]
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011542:	4613      	mov	r3, r2
 8011544:	009b      	lsls	r3, r3, #2
 8011546:	4413      	add	r3, r2
 8011548:	009b      	lsls	r3, r3, #2
 801154a:	4a10      	ldr	r2, [pc, #64]	@ (801158c <xTaskPriorityInherit+0xc8>)
 801154c:	441a      	add	r2, r3
 801154e:	68bb      	ldr	r3, [r7, #8]
 8011550:	3304      	adds	r3, #4
 8011552:	4619      	mov	r1, r3
 8011554:	4610      	mov	r0, r2
 8011556:	f7fd ff22 	bl	800f39e <vListInsertEnd>
 801155a:	e004      	b.n	8011566 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801155c:	4b0a      	ldr	r3, [pc, #40]	@ (8011588 <xTaskPriorityInherit+0xc4>)
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011562:	68bb      	ldr	r3, [r7, #8]
 8011564:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011566:	2301      	movs	r3, #1
 8011568:	60fb      	str	r3, [r7, #12]
 801156a:	e008      	b.n	801157e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801156c:	68bb      	ldr	r3, [r7, #8]
 801156e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011570:	4b05      	ldr	r3, [pc, #20]	@ (8011588 <xTaskPriorityInherit+0xc4>)
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011576:	429a      	cmp	r2, r3
 8011578:	d201      	bcs.n	801157e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801157a:	2301      	movs	r3, #1
 801157c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801157e:	68fb      	ldr	r3, [r7, #12]
	}
 8011580:	4618      	mov	r0, r3
 8011582:	3710      	adds	r7, #16
 8011584:	46bd      	mov	sp, r7
 8011586:	bd80      	pop	{r7, pc}
 8011588:	2000b054 	.word	0x2000b054
 801158c:	2000b058 	.word	0x2000b058
 8011590:	2000b530 	.word	0x2000b530

08011594 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011594:	b580      	push	{r7, lr}
 8011596:	b086      	sub	sp, #24
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80115a0:	2300      	movs	r3, #0
 80115a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d05c      	beq.n	8011664 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80115aa:	4b31      	ldr	r3, [pc, #196]	@ (8011670 <xTaskPriorityDisinherit+0xdc>)
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	693a      	ldr	r2, [r7, #16]
 80115b0:	429a      	cmp	r2, r3
 80115b2:	d00d      	beq.n	80115d0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80115b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115b8:	b672      	cpsid	i
 80115ba:	f383 8811 	msr	BASEPRI, r3
 80115be:	f3bf 8f6f 	isb	sy
 80115c2:	f3bf 8f4f 	dsb	sy
 80115c6:	b662      	cpsie	i
 80115c8:	60fb      	str	r3, [r7, #12]
}
 80115ca:	bf00      	nop
 80115cc:	bf00      	nop
 80115ce:	e7fd      	b.n	80115cc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80115d0:	693b      	ldr	r3, [r7, #16]
 80115d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d10d      	bne.n	80115f4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80115d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115dc:	b672      	cpsid	i
 80115de:	f383 8811 	msr	BASEPRI, r3
 80115e2:	f3bf 8f6f 	isb	sy
 80115e6:	f3bf 8f4f 	dsb	sy
 80115ea:	b662      	cpsie	i
 80115ec:	60bb      	str	r3, [r7, #8]
}
 80115ee:	bf00      	nop
 80115f0:	bf00      	nop
 80115f2:	e7fd      	b.n	80115f0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80115f4:	693b      	ldr	r3, [r7, #16]
 80115f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80115f8:	1e5a      	subs	r2, r3, #1
 80115fa:	693b      	ldr	r3, [r7, #16]
 80115fc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80115fe:	693b      	ldr	r3, [r7, #16]
 8011600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011602:	693b      	ldr	r3, [r7, #16]
 8011604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011606:	429a      	cmp	r2, r3
 8011608:	d02c      	beq.n	8011664 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801160a:	693b      	ldr	r3, [r7, #16]
 801160c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801160e:	2b00      	cmp	r3, #0
 8011610:	d128      	bne.n	8011664 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011612:	693b      	ldr	r3, [r7, #16]
 8011614:	3304      	adds	r3, #4
 8011616:	4618      	mov	r0, r3
 8011618:	f7fd ff1e 	bl	800f458 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801161c:	693b      	ldr	r3, [r7, #16]
 801161e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011620:	693b      	ldr	r3, [r7, #16]
 8011622:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011624:	693b      	ldr	r3, [r7, #16]
 8011626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011628:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801162c:	693b      	ldr	r3, [r7, #16]
 801162e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011630:	693b      	ldr	r3, [r7, #16]
 8011632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011634:	4b0f      	ldr	r3, [pc, #60]	@ (8011674 <xTaskPriorityDisinherit+0xe0>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	429a      	cmp	r2, r3
 801163a:	d903      	bls.n	8011644 <xTaskPriorityDisinherit+0xb0>
 801163c:	693b      	ldr	r3, [r7, #16]
 801163e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011640:	4a0c      	ldr	r2, [pc, #48]	@ (8011674 <xTaskPriorityDisinherit+0xe0>)
 8011642:	6013      	str	r3, [r2, #0]
 8011644:	693b      	ldr	r3, [r7, #16]
 8011646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011648:	4613      	mov	r3, r2
 801164a:	009b      	lsls	r3, r3, #2
 801164c:	4413      	add	r3, r2
 801164e:	009b      	lsls	r3, r3, #2
 8011650:	4a09      	ldr	r2, [pc, #36]	@ (8011678 <xTaskPriorityDisinherit+0xe4>)
 8011652:	441a      	add	r2, r3
 8011654:	693b      	ldr	r3, [r7, #16]
 8011656:	3304      	adds	r3, #4
 8011658:	4619      	mov	r1, r3
 801165a:	4610      	mov	r0, r2
 801165c:	f7fd fe9f 	bl	800f39e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011660:	2301      	movs	r3, #1
 8011662:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011664:	697b      	ldr	r3, [r7, #20]
	}
 8011666:	4618      	mov	r0, r3
 8011668:	3718      	adds	r7, #24
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}
 801166e:	bf00      	nop
 8011670:	2000b054 	.word	0x2000b054
 8011674:	2000b530 	.word	0x2000b530
 8011678:	2000b058 	.word	0x2000b058

0801167c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801167c:	b580      	push	{r7, lr}
 801167e:	b088      	sub	sp, #32
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
 8011684:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801168a:	2301      	movs	r3, #1
 801168c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d070      	beq.n	8011776 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011694:	69bb      	ldr	r3, [r7, #24]
 8011696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011698:	2b00      	cmp	r3, #0
 801169a:	d10d      	bne.n	80116b8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 801169c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116a0:	b672      	cpsid	i
 80116a2:	f383 8811 	msr	BASEPRI, r3
 80116a6:	f3bf 8f6f 	isb	sy
 80116aa:	f3bf 8f4f 	dsb	sy
 80116ae:	b662      	cpsie	i
 80116b0:	60fb      	str	r3, [r7, #12]
}
 80116b2:	bf00      	nop
 80116b4:	bf00      	nop
 80116b6:	e7fd      	b.n	80116b4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80116b8:	69bb      	ldr	r3, [r7, #24]
 80116ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80116bc:	683a      	ldr	r2, [r7, #0]
 80116be:	429a      	cmp	r2, r3
 80116c0:	d902      	bls.n	80116c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	61fb      	str	r3, [r7, #28]
 80116c6:	e002      	b.n	80116ce <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80116c8:	69bb      	ldr	r3, [r7, #24]
 80116ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80116cc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80116ce:	69bb      	ldr	r3, [r7, #24]
 80116d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116d2:	69fa      	ldr	r2, [r7, #28]
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d04e      	beq.n	8011776 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80116d8:	69bb      	ldr	r3, [r7, #24]
 80116da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80116dc:	697a      	ldr	r2, [r7, #20]
 80116de:	429a      	cmp	r2, r3
 80116e0:	d149      	bne.n	8011776 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80116e2:	4b27      	ldr	r3, [pc, #156]	@ (8011780 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	69ba      	ldr	r2, [r7, #24]
 80116e8:	429a      	cmp	r2, r3
 80116ea:	d10d      	bne.n	8011708 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 80116ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116f0:	b672      	cpsid	i
 80116f2:	f383 8811 	msr	BASEPRI, r3
 80116f6:	f3bf 8f6f 	isb	sy
 80116fa:	f3bf 8f4f 	dsb	sy
 80116fe:	b662      	cpsie	i
 8011700:	60bb      	str	r3, [r7, #8]
}
 8011702:	bf00      	nop
 8011704:	bf00      	nop
 8011706:	e7fd      	b.n	8011704 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011708:	69bb      	ldr	r3, [r7, #24]
 801170a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801170c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801170e:	69bb      	ldr	r3, [r7, #24]
 8011710:	69fa      	ldr	r2, [r7, #28]
 8011712:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011714:	69bb      	ldr	r3, [r7, #24]
 8011716:	699b      	ldr	r3, [r3, #24]
 8011718:	2b00      	cmp	r3, #0
 801171a:	db04      	blt.n	8011726 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801171c:	69fb      	ldr	r3, [r7, #28]
 801171e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011722:	69bb      	ldr	r3, [r7, #24]
 8011724:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011726:	69bb      	ldr	r3, [r7, #24]
 8011728:	6959      	ldr	r1, [r3, #20]
 801172a:	693a      	ldr	r2, [r7, #16]
 801172c:	4613      	mov	r3, r2
 801172e:	009b      	lsls	r3, r3, #2
 8011730:	4413      	add	r3, r2
 8011732:	009b      	lsls	r3, r3, #2
 8011734:	4a13      	ldr	r2, [pc, #76]	@ (8011784 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8011736:	4413      	add	r3, r2
 8011738:	4299      	cmp	r1, r3
 801173a:	d11c      	bne.n	8011776 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801173c:	69bb      	ldr	r3, [r7, #24]
 801173e:	3304      	adds	r3, #4
 8011740:	4618      	mov	r0, r3
 8011742:	f7fd fe89 	bl	800f458 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011746:	69bb      	ldr	r3, [r7, #24]
 8011748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801174a:	4b0f      	ldr	r3, [pc, #60]	@ (8011788 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	429a      	cmp	r2, r3
 8011750:	d903      	bls.n	801175a <vTaskPriorityDisinheritAfterTimeout+0xde>
 8011752:	69bb      	ldr	r3, [r7, #24]
 8011754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011756:	4a0c      	ldr	r2, [pc, #48]	@ (8011788 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8011758:	6013      	str	r3, [r2, #0]
 801175a:	69bb      	ldr	r3, [r7, #24]
 801175c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801175e:	4613      	mov	r3, r2
 8011760:	009b      	lsls	r3, r3, #2
 8011762:	4413      	add	r3, r2
 8011764:	009b      	lsls	r3, r3, #2
 8011766:	4a07      	ldr	r2, [pc, #28]	@ (8011784 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8011768:	441a      	add	r2, r3
 801176a:	69bb      	ldr	r3, [r7, #24]
 801176c:	3304      	adds	r3, #4
 801176e:	4619      	mov	r1, r3
 8011770:	4610      	mov	r0, r2
 8011772:	f7fd fe14 	bl	800f39e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011776:	bf00      	nop
 8011778:	3720      	adds	r7, #32
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}
 801177e:	bf00      	nop
 8011780:	2000b054 	.word	0x2000b054
 8011784:	2000b058 	.word	0x2000b058
 8011788:	2000b530 	.word	0x2000b530

0801178c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801178c:	b480      	push	{r7}
 801178e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011790:	4b07      	ldr	r3, [pc, #28]	@ (80117b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d004      	beq.n	80117a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011798:	4b05      	ldr	r3, [pc, #20]	@ (80117b0 <pvTaskIncrementMutexHeldCount+0x24>)
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801179e:	3201      	adds	r2, #1
 80117a0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80117a2:	4b03      	ldr	r3, [pc, #12]	@ (80117b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80117a4:	681b      	ldr	r3, [r3, #0]
	}
 80117a6:	4618      	mov	r0, r3
 80117a8:	46bd      	mov	sp, r7
 80117aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ae:	4770      	bx	lr
 80117b0:	2000b054 	.word	0x2000b054

080117b4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b084      	sub	sp, #16
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
 80117bc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80117be:	f000 fdd5 	bl	801236c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80117c2:	4b20      	ldr	r3, [pc, #128]	@ (8011844 <ulTaskNotifyTake+0x90>)
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d113      	bne.n	80117f6 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80117ce:	4b1d      	ldr	r3, [pc, #116]	@ (8011844 <ulTaskNotifyTake+0x90>)
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	2201      	movs	r2, #1
 80117d4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d00b      	beq.n	80117f6 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80117de:	2101      	movs	r1, #1
 80117e0:	6838      	ldr	r0, [r7, #0]
 80117e2:	f000 f8fb 	bl	80119dc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80117e6:	4b18      	ldr	r3, [pc, #96]	@ (8011848 <ulTaskNotifyTake+0x94>)
 80117e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80117ec:	601a      	str	r2, [r3, #0]
 80117ee:	f3bf 8f4f 	dsb	sy
 80117f2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80117f6:	f000 fdef 	bl	80123d8 <vPortExitCritical>

		taskENTER_CRITICAL();
 80117fa:	f000 fdb7 	bl	801236c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80117fe:	4b11      	ldr	r3, [pc, #68]	@ (8011844 <ulTaskNotifyTake+0x90>)
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011806:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	2b00      	cmp	r3, #0
 801180c:	d00e      	beq.n	801182c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d005      	beq.n	8011820 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8011814:	4b0b      	ldr	r3, [pc, #44]	@ (8011844 <ulTaskNotifyTake+0x90>)
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	2200      	movs	r2, #0
 801181a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 801181e:	e005      	b.n	801182c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8011820:	4b08      	ldr	r3, [pc, #32]	@ (8011844 <ulTaskNotifyTake+0x90>)
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	68fa      	ldr	r2, [r7, #12]
 8011826:	3a01      	subs	r2, #1
 8011828:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801182c:	4b05      	ldr	r3, [pc, #20]	@ (8011844 <ulTaskNotifyTake+0x90>)
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	2200      	movs	r2, #0
 8011832:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8011836:	f000 fdcf 	bl	80123d8 <vPortExitCritical>

		return ulReturn;
 801183a:	68fb      	ldr	r3, [r7, #12]
	}
 801183c:	4618      	mov	r0, r3
 801183e:	3710      	adds	r7, #16
 8011840:	46bd      	mov	sp, r7
 8011842:	bd80      	pop	{r7, pc}
 8011844:	2000b054 	.word	0x2000b054
 8011848:	e000ed04 	.word	0xe000ed04

0801184c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801184c:	b580      	push	{r7, lr}
 801184e:	b08a      	sub	sp, #40	@ 0x28
 8011850:	af00      	add	r7, sp, #0
 8011852:	60f8      	str	r0, [r7, #12]
 8011854:	60b9      	str	r1, [r7, #8]
 8011856:	603b      	str	r3, [r7, #0]
 8011858:	4613      	mov	r3, r2
 801185a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801185c:	2301      	movs	r3, #1
 801185e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d10d      	bne.n	8011882 <xTaskGenericNotify+0x36>
	__asm volatile
 8011866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801186a:	b672      	cpsid	i
 801186c:	f383 8811 	msr	BASEPRI, r3
 8011870:	f3bf 8f6f 	isb	sy
 8011874:	f3bf 8f4f 	dsb	sy
 8011878:	b662      	cpsie	i
 801187a:	61bb      	str	r3, [r7, #24]
}
 801187c:	bf00      	nop
 801187e:	bf00      	nop
 8011880:	e7fd      	b.n	801187e <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8011886:	f000 fd71 	bl	801236c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801188a:	683b      	ldr	r3, [r7, #0]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d004      	beq.n	801189a <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011890:	6a3b      	ldr	r3, [r7, #32]
 8011892:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801189a:	6a3b      	ldr	r3, [r7, #32]
 801189c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80118a0:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80118a2:	6a3b      	ldr	r3, [r7, #32]
 80118a4:	2202      	movs	r2, #2
 80118a6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80118aa:	79fb      	ldrb	r3, [r7, #7]
 80118ac:	2b04      	cmp	r3, #4
 80118ae:	d82e      	bhi.n	801190e <xTaskGenericNotify+0xc2>
 80118b0:	a201      	add	r2, pc, #4	@ (adr r2, 80118b8 <xTaskGenericNotify+0x6c>)
 80118b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118b6:	bf00      	nop
 80118b8:	08011937 	.word	0x08011937
 80118bc:	080118cd 	.word	0x080118cd
 80118c0:	080118df 	.word	0x080118df
 80118c4:	080118ef 	.word	0x080118ef
 80118c8:	080118f9 	.word	0x080118f9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80118cc:	6a3b      	ldr	r3, [r7, #32]
 80118ce:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	431a      	orrs	r2, r3
 80118d6:	6a3b      	ldr	r3, [r7, #32]
 80118d8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80118dc:	e02e      	b.n	801193c <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80118de:	6a3b      	ldr	r3, [r7, #32]
 80118e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80118e4:	1c5a      	adds	r2, r3, #1
 80118e6:	6a3b      	ldr	r3, [r7, #32]
 80118e8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80118ec:	e026      	b.n	801193c <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80118ee:	6a3b      	ldr	r3, [r7, #32]
 80118f0:	68ba      	ldr	r2, [r7, #8]
 80118f2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80118f6:	e021      	b.n	801193c <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80118f8:	7ffb      	ldrb	r3, [r7, #31]
 80118fa:	2b02      	cmp	r3, #2
 80118fc:	d004      	beq.n	8011908 <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80118fe:	6a3b      	ldr	r3, [r7, #32]
 8011900:	68ba      	ldr	r2, [r7, #8]
 8011902:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011906:	e019      	b.n	801193c <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 8011908:	2300      	movs	r3, #0
 801190a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 801190c:	e016      	b.n	801193c <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801190e:	6a3b      	ldr	r3, [r7, #32]
 8011910:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011918:	d00f      	beq.n	801193a <xTaskGenericNotify+0xee>
	__asm volatile
 801191a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801191e:	b672      	cpsid	i
 8011920:	f383 8811 	msr	BASEPRI, r3
 8011924:	f3bf 8f6f 	isb	sy
 8011928:	f3bf 8f4f 	dsb	sy
 801192c:	b662      	cpsie	i
 801192e:	617b      	str	r3, [r7, #20]
}
 8011930:	bf00      	nop
 8011932:	bf00      	nop
 8011934:	e7fd      	b.n	8011932 <xTaskGenericNotify+0xe6>
					break;
 8011936:	bf00      	nop
 8011938:	e000      	b.n	801193c <xTaskGenericNotify+0xf0>

					break;
 801193a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801193c:	7ffb      	ldrb	r3, [r7, #31]
 801193e:	2b01      	cmp	r3, #1
 8011940:	d13d      	bne.n	80119be <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011942:	6a3b      	ldr	r3, [r7, #32]
 8011944:	3304      	adds	r3, #4
 8011946:	4618      	mov	r0, r3
 8011948:	f7fd fd86 	bl	800f458 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801194c:	6a3b      	ldr	r3, [r7, #32]
 801194e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011950:	4b1e      	ldr	r3, [pc, #120]	@ (80119cc <xTaskGenericNotify+0x180>)
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	429a      	cmp	r2, r3
 8011956:	d903      	bls.n	8011960 <xTaskGenericNotify+0x114>
 8011958:	6a3b      	ldr	r3, [r7, #32]
 801195a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801195c:	4a1b      	ldr	r2, [pc, #108]	@ (80119cc <xTaskGenericNotify+0x180>)
 801195e:	6013      	str	r3, [r2, #0]
 8011960:	6a3b      	ldr	r3, [r7, #32]
 8011962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011964:	4613      	mov	r3, r2
 8011966:	009b      	lsls	r3, r3, #2
 8011968:	4413      	add	r3, r2
 801196a:	009b      	lsls	r3, r3, #2
 801196c:	4a18      	ldr	r2, [pc, #96]	@ (80119d0 <xTaskGenericNotify+0x184>)
 801196e:	441a      	add	r2, r3
 8011970:	6a3b      	ldr	r3, [r7, #32]
 8011972:	3304      	adds	r3, #4
 8011974:	4619      	mov	r1, r3
 8011976:	4610      	mov	r0, r2
 8011978:	f7fd fd11 	bl	800f39e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801197c:	6a3b      	ldr	r3, [r7, #32]
 801197e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011980:	2b00      	cmp	r3, #0
 8011982:	d00d      	beq.n	80119a0 <xTaskGenericNotify+0x154>
	__asm volatile
 8011984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011988:	b672      	cpsid	i
 801198a:	f383 8811 	msr	BASEPRI, r3
 801198e:	f3bf 8f6f 	isb	sy
 8011992:	f3bf 8f4f 	dsb	sy
 8011996:	b662      	cpsie	i
 8011998:	613b      	str	r3, [r7, #16]
}
 801199a:	bf00      	nop
 801199c:	bf00      	nop
 801199e:	e7fd      	b.n	801199c <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80119a0:	6a3b      	ldr	r3, [r7, #32]
 80119a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80119a4:	4b0b      	ldr	r3, [pc, #44]	@ (80119d4 <xTaskGenericNotify+0x188>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119aa:	429a      	cmp	r2, r3
 80119ac:	d907      	bls.n	80119be <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80119ae:	4b0a      	ldr	r3, [pc, #40]	@ (80119d8 <xTaskGenericNotify+0x18c>)
 80119b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80119b4:	601a      	str	r2, [r3, #0]
 80119b6:	f3bf 8f4f 	dsb	sy
 80119ba:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80119be:	f000 fd0b 	bl	80123d8 <vPortExitCritical>

		return xReturn;
 80119c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80119c4:	4618      	mov	r0, r3
 80119c6:	3728      	adds	r7, #40	@ 0x28
 80119c8:	46bd      	mov	sp, r7
 80119ca:	bd80      	pop	{r7, pc}
 80119cc:	2000b530 	.word	0x2000b530
 80119d0:	2000b058 	.word	0x2000b058
 80119d4:	2000b054 	.word	0x2000b054
 80119d8:	e000ed04 	.word	0xe000ed04

080119dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b084      	sub	sp, #16
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
 80119e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80119e6:	4b21      	ldr	r3, [pc, #132]	@ (8011a6c <prvAddCurrentTaskToDelayedList+0x90>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80119ec:	4b20      	ldr	r3, [pc, #128]	@ (8011a70 <prvAddCurrentTaskToDelayedList+0x94>)
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	3304      	adds	r3, #4
 80119f2:	4618      	mov	r0, r3
 80119f4:	f7fd fd30 	bl	800f458 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119fe:	d10a      	bne.n	8011a16 <prvAddCurrentTaskToDelayedList+0x3a>
 8011a00:	683b      	ldr	r3, [r7, #0]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d007      	beq.n	8011a16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a06:	4b1a      	ldr	r3, [pc, #104]	@ (8011a70 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	3304      	adds	r3, #4
 8011a0c:	4619      	mov	r1, r3
 8011a0e:	4819      	ldr	r0, [pc, #100]	@ (8011a74 <prvAddCurrentTaskToDelayedList+0x98>)
 8011a10:	f7fd fcc5 	bl	800f39e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011a14:	e026      	b.n	8011a64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011a16:	68fa      	ldr	r2, [r7, #12]
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	4413      	add	r3, r2
 8011a1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011a1e:	4b14      	ldr	r3, [pc, #80]	@ (8011a70 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	68ba      	ldr	r2, [r7, #8]
 8011a24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011a26:	68ba      	ldr	r2, [r7, #8]
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	429a      	cmp	r2, r3
 8011a2c:	d209      	bcs.n	8011a42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a2e:	4b12      	ldr	r3, [pc, #72]	@ (8011a78 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011a30:	681a      	ldr	r2, [r3, #0]
 8011a32:	4b0f      	ldr	r3, [pc, #60]	@ (8011a70 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	3304      	adds	r3, #4
 8011a38:	4619      	mov	r1, r3
 8011a3a:	4610      	mov	r0, r2
 8011a3c:	f7fd fcd3 	bl	800f3e6 <vListInsert>
}
 8011a40:	e010      	b.n	8011a64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011a42:	4b0e      	ldr	r3, [pc, #56]	@ (8011a7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8011a44:	681a      	ldr	r2, [r3, #0]
 8011a46:	4b0a      	ldr	r3, [pc, #40]	@ (8011a70 <prvAddCurrentTaskToDelayedList+0x94>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	3304      	adds	r3, #4
 8011a4c:	4619      	mov	r1, r3
 8011a4e:	4610      	mov	r0, r2
 8011a50:	f7fd fcc9 	bl	800f3e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011a54:	4b0a      	ldr	r3, [pc, #40]	@ (8011a80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	68ba      	ldr	r2, [r7, #8]
 8011a5a:	429a      	cmp	r2, r3
 8011a5c:	d202      	bcs.n	8011a64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011a5e:	4a08      	ldr	r2, [pc, #32]	@ (8011a80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	6013      	str	r3, [r2, #0]
}
 8011a64:	bf00      	nop
 8011a66:	3710      	adds	r7, #16
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	bd80      	pop	{r7, pc}
 8011a6c:	2000b52c 	.word	0x2000b52c
 8011a70:	2000b054 	.word	0x2000b054
 8011a74:	2000b514 	.word	0x2000b514
 8011a78:	2000b4e4 	.word	0x2000b4e4
 8011a7c:	2000b4e0 	.word	0x2000b4e0
 8011a80:	2000b548 	.word	0x2000b548

08011a84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b08a      	sub	sp, #40	@ 0x28
 8011a88:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011a8e:	f000 fb21 	bl	80120d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011a92:	4b1e      	ldr	r3, [pc, #120]	@ (8011b0c <xTimerCreateTimerTask+0x88>)
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d021      	beq.n	8011ade <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011aa2:	1d3a      	adds	r2, r7, #4
 8011aa4:	f107 0108 	add.w	r1, r7, #8
 8011aa8:	f107 030c 	add.w	r3, r7, #12
 8011aac:	4618      	mov	r0, r3
 8011aae:	f7fd fc2f 	bl	800f310 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011ab2:	6879      	ldr	r1, [r7, #4]
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	68fa      	ldr	r2, [r7, #12]
 8011ab8:	9202      	str	r2, [sp, #8]
 8011aba:	9301      	str	r3, [sp, #4]
 8011abc:	2302      	movs	r3, #2
 8011abe:	9300      	str	r3, [sp, #0]
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	460a      	mov	r2, r1
 8011ac4:	4912      	ldr	r1, [pc, #72]	@ (8011b10 <xTimerCreateTimerTask+0x8c>)
 8011ac6:	4813      	ldr	r0, [pc, #76]	@ (8011b14 <xTimerCreateTimerTask+0x90>)
 8011ac8:	f7fe fe20 	bl	801070c <xTaskCreateStatic>
 8011acc:	4603      	mov	r3, r0
 8011ace:	4a12      	ldr	r2, [pc, #72]	@ (8011b18 <xTimerCreateTimerTask+0x94>)
 8011ad0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011ad2:	4b11      	ldr	r3, [pc, #68]	@ (8011b18 <xTimerCreateTimerTask+0x94>)
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d001      	beq.n	8011ade <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011ada:	2301      	movs	r3, #1
 8011adc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011ade:	697b      	ldr	r3, [r7, #20]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d10d      	bne.n	8011b00 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8011ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ae8:	b672      	cpsid	i
 8011aea:	f383 8811 	msr	BASEPRI, r3
 8011aee:	f3bf 8f6f 	isb	sy
 8011af2:	f3bf 8f4f 	dsb	sy
 8011af6:	b662      	cpsie	i
 8011af8:	613b      	str	r3, [r7, #16]
}
 8011afa:	bf00      	nop
 8011afc:	bf00      	nop
 8011afe:	e7fd      	b.n	8011afc <xTimerCreateTimerTask+0x78>
	return xReturn;
 8011b00:	697b      	ldr	r3, [r7, #20]
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	3718      	adds	r7, #24
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}
 8011b0a:	bf00      	nop
 8011b0c:	2000b584 	.word	0x2000b584
 8011b10:	0801f234 	.word	0x0801f234
 8011b14:	08011c5d 	.word	0x08011c5d
 8011b18:	2000b588 	.word	0x2000b588

08011b1c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b08a      	sub	sp, #40	@ 0x28
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	60f8      	str	r0, [r7, #12]
 8011b24:	60b9      	str	r1, [r7, #8]
 8011b26:	607a      	str	r2, [r7, #4]
 8011b28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d10d      	bne.n	8011b50 <xTimerGenericCommand+0x34>
	__asm volatile
 8011b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b38:	b672      	cpsid	i
 8011b3a:	f383 8811 	msr	BASEPRI, r3
 8011b3e:	f3bf 8f6f 	isb	sy
 8011b42:	f3bf 8f4f 	dsb	sy
 8011b46:	b662      	cpsie	i
 8011b48:	623b      	str	r3, [r7, #32]
}
 8011b4a:	bf00      	nop
 8011b4c:	bf00      	nop
 8011b4e:	e7fd      	b.n	8011b4c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011b50:	4b19      	ldr	r3, [pc, #100]	@ (8011bb8 <xTimerGenericCommand+0x9c>)
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d02a      	beq.n	8011bae <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	2b05      	cmp	r3, #5
 8011b68:	dc18      	bgt.n	8011b9c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011b6a:	f7ff fc8d 	bl	8011488 <xTaskGetSchedulerState>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	2b02      	cmp	r3, #2
 8011b72:	d109      	bne.n	8011b88 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011b74:	4b10      	ldr	r3, [pc, #64]	@ (8011bb8 <xTimerGenericCommand+0x9c>)
 8011b76:	6818      	ldr	r0, [r3, #0]
 8011b78:	f107 0110 	add.w	r1, r7, #16
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011b80:	f7fd ff20 	bl	800f9c4 <xQueueGenericSend>
 8011b84:	6278      	str	r0, [r7, #36]	@ 0x24
 8011b86:	e012      	b.n	8011bae <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011b88:	4b0b      	ldr	r3, [pc, #44]	@ (8011bb8 <xTimerGenericCommand+0x9c>)
 8011b8a:	6818      	ldr	r0, [r3, #0]
 8011b8c:	f107 0110 	add.w	r1, r7, #16
 8011b90:	2300      	movs	r3, #0
 8011b92:	2200      	movs	r2, #0
 8011b94:	f7fd ff16 	bl	800f9c4 <xQueueGenericSend>
 8011b98:	6278      	str	r0, [r7, #36]	@ 0x24
 8011b9a:	e008      	b.n	8011bae <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011b9c:	4b06      	ldr	r3, [pc, #24]	@ (8011bb8 <xTimerGenericCommand+0x9c>)
 8011b9e:	6818      	ldr	r0, [r3, #0]
 8011ba0:	f107 0110 	add.w	r1, r7, #16
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	683a      	ldr	r2, [r7, #0]
 8011ba8:	f7fe f816 	bl	800fbd8 <xQueueGenericSendFromISR>
 8011bac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3728      	adds	r7, #40	@ 0x28
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}
 8011bb8:	2000b584 	.word	0x2000b584

08011bbc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b088      	sub	sp, #32
 8011bc0:	af02      	add	r7, sp, #8
 8011bc2:	6078      	str	r0, [r7, #4]
 8011bc4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011bc6:	4b24      	ldr	r3, [pc, #144]	@ (8011c58 <prvProcessExpiredTimer+0x9c>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	68db      	ldr	r3, [r3, #12]
 8011bcc:	68db      	ldr	r3, [r3, #12]
 8011bce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011bd0:	697b      	ldr	r3, [r7, #20]
 8011bd2:	3304      	adds	r3, #4
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	f7fd fc3f 	bl	800f458 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011bda:	697b      	ldr	r3, [r7, #20]
 8011bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011be0:	f003 0304 	and.w	r3, r3, #4
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d025      	beq.n	8011c34 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	699a      	ldr	r2, [r3, #24]
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	18d1      	adds	r1, r2, r3
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	683a      	ldr	r2, [r7, #0]
 8011bf4:	6978      	ldr	r0, [r7, #20]
 8011bf6:	f000 f8d7 	bl	8011da8 <prvInsertTimerInActiveList>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d022      	beq.n	8011c46 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011c00:	2300      	movs	r3, #0
 8011c02:	9300      	str	r3, [sp, #0]
 8011c04:	2300      	movs	r3, #0
 8011c06:	687a      	ldr	r2, [r7, #4]
 8011c08:	2100      	movs	r1, #0
 8011c0a:	6978      	ldr	r0, [r7, #20]
 8011c0c:	f7ff ff86 	bl	8011b1c <xTimerGenericCommand>
 8011c10:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011c12:	693b      	ldr	r3, [r7, #16]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d116      	bne.n	8011c46 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8011c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c1c:	b672      	cpsid	i
 8011c1e:	f383 8811 	msr	BASEPRI, r3
 8011c22:	f3bf 8f6f 	isb	sy
 8011c26:	f3bf 8f4f 	dsb	sy
 8011c2a:	b662      	cpsie	i
 8011c2c:	60fb      	str	r3, [r7, #12]
}
 8011c2e:	bf00      	nop
 8011c30:	bf00      	nop
 8011c32:	e7fd      	b.n	8011c30 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011c34:	697b      	ldr	r3, [r7, #20]
 8011c36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011c3a:	f023 0301 	bic.w	r3, r3, #1
 8011c3e:	b2da      	uxtb	r2, r3
 8011c40:	697b      	ldr	r3, [r7, #20]
 8011c42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	6a1b      	ldr	r3, [r3, #32]
 8011c4a:	6978      	ldr	r0, [r7, #20]
 8011c4c:	4798      	blx	r3
}
 8011c4e:	bf00      	nop
 8011c50:	3718      	adds	r7, #24
 8011c52:	46bd      	mov	sp, r7
 8011c54:	bd80      	pop	{r7, pc}
 8011c56:	bf00      	nop
 8011c58:	2000b57c 	.word	0x2000b57c

08011c5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b084      	sub	sp, #16
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011c64:	f107 0308 	add.w	r3, r7, #8
 8011c68:	4618      	mov	r0, r3
 8011c6a:	f000 f859 	bl	8011d20 <prvGetNextExpireTime>
 8011c6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	4619      	mov	r1, r3
 8011c74:	68f8      	ldr	r0, [r7, #12]
 8011c76:	f000 f805 	bl	8011c84 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011c7a:	f000 f8d7 	bl	8011e2c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011c7e:	bf00      	nop
 8011c80:	e7f0      	b.n	8011c64 <prvTimerTask+0x8>
	...

08011c84 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011c84:	b580      	push	{r7, lr}
 8011c86:	b084      	sub	sp, #16
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
 8011c8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011c8e:	f7fe ffaf 	bl	8010bf0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011c92:	f107 0308 	add.w	r3, r7, #8
 8011c96:	4618      	mov	r0, r3
 8011c98:	f000 f866 	bl	8011d68 <prvSampleTimeNow>
 8011c9c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d130      	bne.n	8011d06 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d10a      	bne.n	8011cc0 <prvProcessTimerOrBlockTask+0x3c>
 8011caa:	687a      	ldr	r2, [r7, #4]
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	429a      	cmp	r2, r3
 8011cb0:	d806      	bhi.n	8011cc0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011cb2:	f7fe ffab 	bl	8010c0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011cb6:	68f9      	ldr	r1, [r7, #12]
 8011cb8:	6878      	ldr	r0, [r7, #4]
 8011cba:	f7ff ff7f 	bl	8011bbc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011cbe:	e024      	b.n	8011d0a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011cc0:	683b      	ldr	r3, [r7, #0]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d008      	beq.n	8011cd8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011cc6:	4b13      	ldr	r3, [pc, #76]	@ (8011d14 <prvProcessTimerOrBlockTask+0x90>)
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d101      	bne.n	8011cd4 <prvProcessTimerOrBlockTask+0x50>
 8011cd0:	2301      	movs	r3, #1
 8011cd2:	e000      	b.n	8011cd6 <prvProcessTimerOrBlockTask+0x52>
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8011d18 <prvProcessTimerOrBlockTask+0x94>)
 8011cda:	6818      	ldr	r0, [r3, #0]
 8011cdc:	687a      	ldr	r2, [r7, #4]
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	1ad3      	subs	r3, r2, r3
 8011ce2:	683a      	ldr	r2, [r7, #0]
 8011ce4:	4619      	mov	r1, r3
 8011ce6:	f7fe fcdd 	bl	80106a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011cea:	f7fe ff8f 	bl	8010c0c <xTaskResumeAll>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d10a      	bne.n	8011d0a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011cf4:	4b09      	ldr	r3, [pc, #36]	@ (8011d1c <prvProcessTimerOrBlockTask+0x98>)
 8011cf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011cfa:	601a      	str	r2, [r3, #0]
 8011cfc:	f3bf 8f4f 	dsb	sy
 8011d00:	f3bf 8f6f 	isb	sy
}
 8011d04:	e001      	b.n	8011d0a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011d06:	f7fe ff81 	bl	8010c0c <xTaskResumeAll>
}
 8011d0a:	bf00      	nop
 8011d0c:	3710      	adds	r7, #16
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}
 8011d12:	bf00      	nop
 8011d14:	2000b580 	.word	0x2000b580
 8011d18:	2000b584 	.word	0x2000b584
 8011d1c:	e000ed04 	.word	0xe000ed04

08011d20 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011d20:	b480      	push	{r7}
 8011d22:	b085      	sub	sp, #20
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011d28:	4b0e      	ldr	r3, [pc, #56]	@ (8011d64 <prvGetNextExpireTime+0x44>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d101      	bne.n	8011d36 <prvGetNextExpireTime+0x16>
 8011d32:	2201      	movs	r2, #1
 8011d34:	e000      	b.n	8011d38 <prvGetNextExpireTime+0x18>
 8011d36:	2200      	movs	r2, #0
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d105      	bne.n	8011d50 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011d44:	4b07      	ldr	r3, [pc, #28]	@ (8011d64 <prvGetNextExpireTime+0x44>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	68db      	ldr	r3, [r3, #12]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	60fb      	str	r3, [r7, #12]
 8011d4e:	e001      	b.n	8011d54 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011d50:	2300      	movs	r3, #0
 8011d52:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011d54:	68fb      	ldr	r3, [r7, #12]
}
 8011d56:	4618      	mov	r0, r3
 8011d58:	3714      	adds	r7, #20
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d60:	4770      	bx	lr
 8011d62:	bf00      	nop
 8011d64:	2000b57c 	.word	0x2000b57c

08011d68 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b084      	sub	sp, #16
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011d70:	f7fe ffec 	bl	8010d4c <xTaskGetTickCount>
 8011d74:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011d76:	4b0b      	ldr	r3, [pc, #44]	@ (8011da4 <prvSampleTimeNow+0x3c>)
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	68fa      	ldr	r2, [r7, #12]
 8011d7c:	429a      	cmp	r2, r3
 8011d7e:	d205      	bcs.n	8011d8c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011d80:	f000 f940 	bl	8012004 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	2201      	movs	r2, #1
 8011d88:	601a      	str	r2, [r3, #0]
 8011d8a:	e002      	b.n	8011d92 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2200      	movs	r2, #0
 8011d90:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011d92:	4a04      	ldr	r2, [pc, #16]	@ (8011da4 <prvSampleTimeNow+0x3c>)
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011d98:	68fb      	ldr	r3, [r7, #12]
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	3710      	adds	r7, #16
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}
 8011da2:	bf00      	nop
 8011da4:	2000b58c 	.word	0x2000b58c

08011da8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b086      	sub	sp, #24
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	60f8      	str	r0, [r7, #12]
 8011db0:	60b9      	str	r1, [r7, #8]
 8011db2:	607a      	str	r2, [r7, #4]
 8011db4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011db6:	2300      	movs	r3, #0
 8011db8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	68ba      	ldr	r2, [r7, #8]
 8011dbe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	68fa      	ldr	r2, [r7, #12]
 8011dc4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011dc6:	68ba      	ldr	r2, [r7, #8]
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	429a      	cmp	r2, r3
 8011dcc:	d812      	bhi.n	8011df4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011dce:	687a      	ldr	r2, [r7, #4]
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	1ad2      	subs	r2, r2, r3
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	699b      	ldr	r3, [r3, #24]
 8011dd8:	429a      	cmp	r2, r3
 8011dda:	d302      	bcc.n	8011de2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011ddc:	2301      	movs	r3, #1
 8011dde:	617b      	str	r3, [r7, #20]
 8011de0:	e01b      	b.n	8011e1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011de2:	4b10      	ldr	r3, [pc, #64]	@ (8011e24 <prvInsertTimerInActiveList+0x7c>)
 8011de4:	681a      	ldr	r2, [r3, #0]
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	3304      	adds	r3, #4
 8011dea:	4619      	mov	r1, r3
 8011dec:	4610      	mov	r0, r2
 8011dee:	f7fd fafa 	bl	800f3e6 <vListInsert>
 8011df2:	e012      	b.n	8011e1a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011df4:	687a      	ldr	r2, [r7, #4]
 8011df6:	683b      	ldr	r3, [r7, #0]
 8011df8:	429a      	cmp	r2, r3
 8011dfa:	d206      	bcs.n	8011e0a <prvInsertTimerInActiveList+0x62>
 8011dfc:	68ba      	ldr	r2, [r7, #8]
 8011dfe:	683b      	ldr	r3, [r7, #0]
 8011e00:	429a      	cmp	r2, r3
 8011e02:	d302      	bcc.n	8011e0a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011e04:	2301      	movs	r3, #1
 8011e06:	617b      	str	r3, [r7, #20]
 8011e08:	e007      	b.n	8011e1a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011e0a:	4b07      	ldr	r3, [pc, #28]	@ (8011e28 <prvInsertTimerInActiveList+0x80>)
 8011e0c:	681a      	ldr	r2, [r3, #0]
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	3304      	adds	r3, #4
 8011e12:	4619      	mov	r1, r3
 8011e14:	4610      	mov	r0, r2
 8011e16:	f7fd fae6 	bl	800f3e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011e1a:	697b      	ldr	r3, [r7, #20]
}
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	3718      	adds	r7, #24
 8011e20:	46bd      	mov	sp, r7
 8011e22:	bd80      	pop	{r7, pc}
 8011e24:	2000b580 	.word	0x2000b580
 8011e28:	2000b57c 	.word	0x2000b57c

08011e2c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b08e      	sub	sp, #56	@ 0x38
 8011e30:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011e32:	e0d4      	b.n	8011fde <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	da1b      	bge.n	8011e72 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011e3a:	1d3b      	adds	r3, r7, #4
 8011e3c:	3304      	adds	r3, #4
 8011e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d10d      	bne.n	8011e62 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8011e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e4a:	b672      	cpsid	i
 8011e4c:	f383 8811 	msr	BASEPRI, r3
 8011e50:	f3bf 8f6f 	isb	sy
 8011e54:	f3bf 8f4f 	dsb	sy
 8011e58:	b662      	cpsie	i
 8011e5a:	61fb      	str	r3, [r7, #28]
}
 8011e5c:	bf00      	nop
 8011e5e:	bf00      	nop
 8011e60:	e7fd      	b.n	8011e5e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011e68:	6850      	ldr	r0, [r2, #4]
 8011e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011e6c:	6892      	ldr	r2, [r2, #8]
 8011e6e:	4611      	mov	r1, r2
 8011e70:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	f2c0 80b2 	blt.w	8011fde <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8011e7a:	68fb      	ldr	r3, [r7, #12]
 8011e7c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8011e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e80:	695b      	ldr	r3, [r3, #20]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d004      	beq.n	8011e90 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e88:	3304      	adds	r3, #4
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f7fd fae4 	bl	800f458 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011e90:	463b      	mov	r3, r7
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7ff ff68 	bl	8011d68 <prvSampleTimeNow>
 8011e98:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	2b09      	cmp	r3, #9
 8011e9e:	f200 809b 	bhi.w	8011fd8 <prvProcessReceivedCommands+0x1ac>
 8011ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8011ea8 <prvProcessReceivedCommands+0x7c>)
 8011ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ea8:	08011ed1 	.word	0x08011ed1
 8011eac:	08011ed1 	.word	0x08011ed1
 8011eb0:	08011ed1 	.word	0x08011ed1
 8011eb4:	08011f4b 	.word	0x08011f4b
 8011eb8:	08011f5f 	.word	0x08011f5f
 8011ebc:	08011faf 	.word	0x08011faf
 8011ec0:	08011ed1 	.word	0x08011ed1
 8011ec4:	08011ed1 	.word	0x08011ed1
 8011ec8:	08011f4b 	.word	0x08011f4b
 8011ecc:	08011f5f 	.word	0x08011f5f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011ed6:	f043 0301 	orr.w	r3, r3, #1
 8011eda:	b2da      	uxtb	r2, r3
 8011edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ede:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011ee2:	68ba      	ldr	r2, [r7, #8]
 8011ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ee6:	699b      	ldr	r3, [r3, #24]
 8011ee8:	18d1      	adds	r1, r2, r3
 8011eea:	68bb      	ldr	r3, [r7, #8]
 8011eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011eee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011ef0:	f7ff ff5a 	bl	8011da8 <prvInsertTimerInActiveList>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d070      	beq.n	8011fdc <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011efc:	6a1b      	ldr	r3, [r3, #32]
 8011efe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011f08:	f003 0304 	and.w	r3, r3, #4
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d065      	beq.n	8011fdc <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011f10:	68ba      	ldr	r2, [r7, #8]
 8011f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f14:	699b      	ldr	r3, [r3, #24]
 8011f16:	441a      	add	r2, r3
 8011f18:	2300      	movs	r3, #0
 8011f1a:	9300      	str	r3, [sp, #0]
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	2100      	movs	r1, #0
 8011f20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f22:	f7ff fdfb 	bl	8011b1c <xTimerGenericCommand>
 8011f26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011f28:	6a3b      	ldr	r3, [r7, #32]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d156      	bne.n	8011fdc <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8011f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f32:	b672      	cpsid	i
 8011f34:	f383 8811 	msr	BASEPRI, r3
 8011f38:	f3bf 8f6f 	isb	sy
 8011f3c:	f3bf 8f4f 	dsb	sy
 8011f40:	b662      	cpsie	i
 8011f42:	61bb      	str	r3, [r7, #24]
}
 8011f44:	bf00      	nop
 8011f46:	bf00      	nop
 8011f48:	e7fd      	b.n	8011f46 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011f50:	f023 0301 	bic.w	r3, r3, #1
 8011f54:	b2da      	uxtb	r2, r3
 8011f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011f5c:	e03f      	b.n	8011fde <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011f64:	f043 0301 	orr.w	r3, r3, #1
 8011f68:	b2da      	uxtb	r2, r3
 8011f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011f70:	68ba      	ldr	r2, [r7, #8]
 8011f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f74:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8011f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f78:	699b      	ldr	r3, [r3, #24]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d10d      	bne.n	8011f9a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8011f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f82:	b672      	cpsid	i
 8011f84:	f383 8811 	msr	BASEPRI, r3
 8011f88:	f3bf 8f6f 	isb	sy
 8011f8c:	f3bf 8f4f 	dsb	sy
 8011f90:	b662      	cpsie	i
 8011f92:	617b      	str	r3, [r7, #20]
}
 8011f94:	bf00      	nop
 8011f96:	bf00      	nop
 8011f98:	e7fd      	b.n	8011f96 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8011f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f9c:	699a      	ldr	r2, [r3, #24]
 8011f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fa0:	18d1      	adds	r1, r2, r3
 8011fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011fa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011fa8:	f7ff fefe 	bl	8011da8 <prvInsertTimerInActiveList>
					break;
 8011fac:	e017      	b.n	8011fde <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8011fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011fb4:	f003 0302 	and.w	r3, r3, #2
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d103      	bne.n	8011fc4 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8011fbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011fbe:	f000 fbd1 	bl	8012764 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8011fc2:	e00c      	b.n	8011fde <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011fca:	f023 0301 	bic.w	r3, r3, #1
 8011fce:	b2da      	uxtb	r2, r3
 8011fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8011fd6:	e002      	b.n	8011fde <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8011fd8:	bf00      	nop
 8011fda:	e000      	b.n	8011fde <prvProcessReceivedCommands+0x1b2>
					break;
 8011fdc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8011fde:	4b08      	ldr	r3, [pc, #32]	@ (8012000 <prvProcessReceivedCommands+0x1d4>)
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	1d39      	adds	r1, r7, #4
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f7fd ff32 	bl	800fe50 <xQueueReceive>
 8011fec:	4603      	mov	r3, r0
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	f47f af20 	bne.w	8011e34 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8011ff4:	bf00      	nop
 8011ff6:	bf00      	nop
 8011ff8:	3730      	adds	r7, #48	@ 0x30
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}
 8011ffe:	bf00      	nop
 8012000:	2000b584 	.word	0x2000b584

08012004 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b088      	sub	sp, #32
 8012008:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801200a:	e04b      	b.n	80120a4 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801200c:	4b2f      	ldr	r3, [pc, #188]	@ (80120cc <prvSwitchTimerLists+0xc8>)
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	68db      	ldr	r3, [r3, #12]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012016:	4b2d      	ldr	r3, [pc, #180]	@ (80120cc <prvSwitchTimerLists+0xc8>)
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	68db      	ldr	r3, [r3, #12]
 801201c:	68db      	ldr	r3, [r3, #12]
 801201e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	3304      	adds	r3, #4
 8012024:	4618      	mov	r0, r3
 8012026:	f7fd fa17 	bl	800f458 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	6a1b      	ldr	r3, [r3, #32]
 801202e:	68f8      	ldr	r0, [r7, #12]
 8012030:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012038:	f003 0304 	and.w	r3, r3, #4
 801203c:	2b00      	cmp	r3, #0
 801203e:	d031      	beq.n	80120a4 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	699b      	ldr	r3, [r3, #24]
 8012044:	693a      	ldr	r2, [r7, #16]
 8012046:	4413      	add	r3, r2
 8012048:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801204a:	68ba      	ldr	r2, [r7, #8]
 801204c:	693b      	ldr	r3, [r7, #16]
 801204e:	429a      	cmp	r2, r3
 8012050:	d90e      	bls.n	8012070 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	68ba      	ldr	r2, [r7, #8]
 8012056:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	68fa      	ldr	r2, [r7, #12]
 801205c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801205e:	4b1b      	ldr	r3, [pc, #108]	@ (80120cc <prvSwitchTimerLists+0xc8>)
 8012060:	681a      	ldr	r2, [r3, #0]
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	3304      	adds	r3, #4
 8012066:	4619      	mov	r1, r3
 8012068:	4610      	mov	r0, r2
 801206a:	f7fd f9bc 	bl	800f3e6 <vListInsert>
 801206e:	e019      	b.n	80120a4 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012070:	2300      	movs	r3, #0
 8012072:	9300      	str	r3, [sp, #0]
 8012074:	2300      	movs	r3, #0
 8012076:	693a      	ldr	r2, [r7, #16]
 8012078:	2100      	movs	r1, #0
 801207a:	68f8      	ldr	r0, [r7, #12]
 801207c:	f7ff fd4e 	bl	8011b1c <xTimerGenericCommand>
 8012080:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d10d      	bne.n	80120a4 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8012088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801208c:	b672      	cpsid	i
 801208e:	f383 8811 	msr	BASEPRI, r3
 8012092:	f3bf 8f6f 	isb	sy
 8012096:	f3bf 8f4f 	dsb	sy
 801209a:	b662      	cpsie	i
 801209c:	603b      	str	r3, [r7, #0]
}
 801209e:	bf00      	nop
 80120a0:	bf00      	nop
 80120a2:	e7fd      	b.n	80120a0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80120a4:	4b09      	ldr	r3, [pc, #36]	@ (80120cc <prvSwitchTimerLists+0xc8>)
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d1ae      	bne.n	801200c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80120ae:	4b07      	ldr	r3, [pc, #28]	@ (80120cc <prvSwitchTimerLists+0xc8>)
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80120b4:	4b06      	ldr	r3, [pc, #24]	@ (80120d0 <prvSwitchTimerLists+0xcc>)
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	4a04      	ldr	r2, [pc, #16]	@ (80120cc <prvSwitchTimerLists+0xc8>)
 80120ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80120bc:	4a04      	ldr	r2, [pc, #16]	@ (80120d0 <prvSwitchTimerLists+0xcc>)
 80120be:	697b      	ldr	r3, [r7, #20]
 80120c0:	6013      	str	r3, [r2, #0]
}
 80120c2:	bf00      	nop
 80120c4:	3718      	adds	r7, #24
 80120c6:	46bd      	mov	sp, r7
 80120c8:	bd80      	pop	{r7, pc}
 80120ca:	bf00      	nop
 80120cc:	2000b57c 	.word	0x2000b57c
 80120d0:	2000b580 	.word	0x2000b580

080120d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b082      	sub	sp, #8
 80120d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80120da:	f000 f947 	bl	801236c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80120de:	4b15      	ldr	r3, [pc, #84]	@ (8012134 <prvCheckForValidListAndQueue+0x60>)
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d120      	bne.n	8012128 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80120e6:	4814      	ldr	r0, [pc, #80]	@ (8012138 <prvCheckForValidListAndQueue+0x64>)
 80120e8:	f7fd f92c 	bl	800f344 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80120ec:	4813      	ldr	r0, [pc, #76]	@ (801213c <prvCheckForValidListAndQueue+0x68>)
 80120ee:	f7fd f929 	bl	800f344 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80120f2:	4b13      	ldr	r3, [pc, #76]	@ (8012140 <prvCheckForValidListAndQueue+0x6c>)
 80120f4:	4a10      	ldr	r2, [pc, #64]	@ (8012138 <prvCheckForValidListAndQueue+0x64>)
 80120f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80120f8:	4b12      	ldr	r3, [pc, #72]	@ (8012144 <prvCheckForValidListAndQueue+0x70>)
 80120fa:	4a10      	ldr	r2, [pc, #64]	@ (801213c <prvCheckForValidListAndQueue+0x68>)
 80120fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80120fe:	2300      	movs	r3, #0
 8012100:	9300      	str	r3, [sp, #0]
 8012102:	4b11      	ldr	r3, [pc, #68]	@ (8012148 <prvCheckForValidListAndQueue+0x74>)
 8012104:	4a11      	ldr	r2, [pc, #68]	@ (801214c <prvCheckForValidListAndQueue+0x78>)
 8012106:	2110      	movs	r1, #16
 8012108:	200a      	movs	r0, #10
 801210a:	f7fd fa3b 	bl	800f584 <xQueueGenericCreateStatic>
 801210e:	4603      	mov	r3, r0
 8012110:	4a08      	ldr	r2, [pc, #32]	@ (8012134 <prvCheckForValidListAndQueue+0x60>)
 8012112:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012114:	4b07      	ldr	r3, [pc, #28]	@ (8012134 <prvCheckForValidListAndQueue+0x60>)
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d005      	beq.n	8012128 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801211c:	4b05      	ldr	r3, [pc, #20]	@ (8012134 <prvCheckForValidListAndQueue+0x60>)
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	490b      	ldr	r1, [pc, #44]	@ (8012150 <prvCheckForValidListAndQueue+0x7c>)
 8012122:	4618      	mov	r0, r3
 8012124:	f7fe fa6a 	bl	80105fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012128:	f000 f956 	bl	80123d8 <vPortExitCritical>
}
 801212c:	bf00      	nop
 801212e:	46bd      	mov	sp, r7
 8012130:	bd80      	pop	{r7, pc}
 8012132:	bf00      	nop
 8012134:	2000b584 	.word	0x2000b584
 8012138:	2000b554 	.word	0x2000b554
 801213c:	2000b568 	.word	0x2000b568
 8012140:	2000b57c 	.word	0x2000b57c
 8012144:	2000b580 	.word	0x2000b580
 8012148:	2000b630 	.word	0x2000b630
 801214c:	2000b590 	.word	0x2000b590
 8012150:	0801f23c 	.word	0x0801f23c

08012154 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012154:	b480      	push	{r7}
 8012156:	b085      	sub	sp, #20
 8012158:	af00      	add	r7, sp, #0
 801215a:	60f8      	str	r0, [r7, #12]
 801215c:	60b9      	str	r1, [r7, #8]
 801215e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	3b04      	subs	r3, #4
 8012164:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801216c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	3b04      	subs	r3, #4
 8012172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	f023 0201 	bic.w	r2, r3, #1
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	3b04      	subs	r3, #4
 8012182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012184:	4a0c      	ldr	r2, [pc, #48]	@ (80121b8 <pxPortInitialiseStack+0x64>)
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	3b14      	subs	r3, #20
 801218e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012190:	687a      	ldr	r2, [r7, #4]
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	3b04      	subs	r3, #4
 801219a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	f06f 0202 	mvn.w	r2, #2
 80121a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	3b20      	subs	r3, #32
 80121a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80121aa:	68fb      	ldr	r3, [r7, #12]
}
 80121ac:	4618      	mov	r0, r3
 80121ae:	3714      	adds	r7, #20
 80121b0:	46bd      	mov	sp, r7
 80121b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b6:	4770      	bx	lr
 80121b8:	080121bd 	.word	0x080121bd

080121bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80121bc:	b480      	push	{r7}
 80121be:	b085      	sub	sp, #20
 80121c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80121c2:	2300      	movs	r3, #0
 80121c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80121c6:	4b15      	ldr	r3, [pc, #84]	@ (801221c <prvTaskExitError+0x60>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121ce:	d00d      	beq.n	80121ec <prvTaskExitError+0x30>
	__asm volatile
 80121d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121d4:	b672      	cpsid	i
 80121d6:	f383 8811 	msr	BASEPRI, r3
 80121da:	f3bf 8f6f 	isb	sy
 80121de:	f3bf 8f4f 	dsb	sy
 80121e2:	b662      	cpsie	i
 80121e4:	60fb      	str	r3, [r7, #12]
}
 80121e6:	bf00      	nop
 80121e8:	bf00      	nop
 80121ea:	e7fd      	b.n	80121e8 <prvTaskExitError+0x2c>
	__asm volatile
 80121ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121f0:	b672      	cpsid	i
 80121f2:	f383 8811 	msr	BASEPRI, r3
 80121f6:	f3bf 8f6f 	isb	sy
 80121fa:	f3bf 8f4f 	dsb	sy
 80121fe:	b662      	cpsie	i
 8012200:	60bb      	str	r3, [r7, #8]
}
 8012202:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012204:	bf00      	nop
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d0fc      	beq.n	8012206 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801220c:	bf00      	nop
 801220e:	bf00      	nop
 8012210:	3714      	adds	r7, #20
 8012212:	46bd      	mov	sp, r7
 8012214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012218:	4770      	bx	lr
 801221a:	bf00      	nop
 801221c:	20000020 	.word	0x20000020

08012220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012220:	4b07      	ldr	r3, [pc, #28]	@ (8012240 <pxCurrentTCBConst2>)
 8012222:	6819      	ldr	r1, [r3, #0]
 8012224:	6808      	ldr	r0, [r1, #0]
 8012226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801222a:	f380 8809 	msr	PSP, r0
 801222e:	f3bf 8f6f 	isb	sy
 8012232:	f04f 0000 	mov.w	r0, #0
 8012236:	f380 8811 	msr	BASEPRI, r0
 801223a:	4770      	bx	lr
 801223c:	f3af 8000 	nop.w

08012240 <pxCurrentTCBConst2>:
 8012240:	2000b054 	.word	0x2000b054
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012244:	bf00      	nop
 8012246:	bf00      	nop

08012248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012248:	4808      	ldr	r0, [pc, #32]	@ (801226c <prvPortStartFirstTask+0x24>)
 801224a:	6800      	ldr	r0, [r0, #0]
 801224c:	6800      	ldr	r0, [r0, #0]
 801224e:	f380 8808 	msr	MSP, r0
 8012252:	f04f 0000 	mov.w	r0, #0
 8012256:	f380 8814 	msr	CONTROL, r0
 801225a:	b662      	cpsie	i
 801225c:	b661      	cpsie	f
 801225e:	f3bf 8f4f 	dsb	sy
 8012262:	f3bf 8f6f 	isb	sy
 8012266:	df00      	svc	0
 8012268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801226a:	bf00      	nop
 801226c:	e000ed08 	.word	0xe000ed08

08012270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b084      	sub	sp, #16
 8012274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012276:	4b37      	ldr	r3, [pc, #220]	@ (8012354 <xPortStartScheduler+0xe4>)
 8012278:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	781b      	ldrb	r3, [r3, #0]
 801227e:	b2db      	uxtb	r3, r3
 8012280:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	22ff      	movs	r2, #255	@ 0xff
 8012286:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	781b      	ldrb	r3, [r3, #0]
 801228c:	b2db      	uxtb	r3, r3
 801228e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012290:	78fb      	ldrb	r3, [r7, #3]
 8012292:	b2db      	uxtb	r3, r3
 8012294:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8012298:	b2da      	uxtb	r2, r3
 801229a:	4b2f      	ldr	r3, [pc, #188]	@ (8012358 <xPortStartScheduler+0xe8>)
 801229c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801229e:	4b2f      	ldr	r3, [pc, #188]	@ (801235c <xPortStartScheduler+0xec>)
 80122a0:	2207      	movs	r2, #7
 80122a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80122a4:	e009      	b.n	80122ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80122a6:	4b2d      	ldr	r3, [pc, #180]	@ (801235c <xPortStartScheduler+0xec>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	3b01      	subs	r3, #1
 80122ac:	4a2b      	ldr	r2, [pc, #172]	@ (801235c <xPortStartScheduler+0xec>)
 80122ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80122b0:	78fb      	ldrb	r3, [r7, #3]
 80122b2:	b2db      	uxtb	r3, r3
 80122b4:	005b      	lsls	r3, r3, #1
 80122b6:	b2db      	uxtb	r3, r3
 80122b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80122ba:	78fb      	ldrb	r3, [r7, #3]
 80122bc:	b2db      	uxtb	r3, r3
 80122be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80122c2:	2b80      	cmp	r3, #128	@ 0x80
 80122c4:	d0ef      	beq.n	80122a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80122c6:	4b25      	ldr	r3, [pc, #148]	@ (801235c <xPortStartScheduler+0xec>)
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	f1c3 0307 	rsb	r3, r3, #7
 80122ce:	2b04      	cmp	r3, #4
 80122d0:	d00d      	beq.n	80122ee <xPortStartScheduler+0x7e>
	__asm volatile
 80122d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122d6:	b672      	cpsid	i
 80122d8:	f383 8811 	msr	BASEPRI, r3
 80122dc:	f3bf 8f6f 	isb	sy
 80122e0:	f3bf 8f4f 	dsb	sy
 80122e4:	b662      	cpsie	i
 80122e6:	60bb      	str	r3, [r7, #8]
}
 80122e8:	bf00      	nop
 80122ea:	bf00      	nop
 80122ec:	e7fd      	b.n	80122ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80122ee:	4b1b      	ldr	r3, [pc, #108]	@ (801235c <xPortStartScheduler+0xec>)
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	021b      	lsls	r3, r3, #8
 80122f4:	4a19      	ldr	r2, [pc, #100]	@ (801235c <xPortStartScheduler+0xec>)
 80122f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80122f8:	4b18      	ldr	r3, [pc, #96]	@ (801235c <xPortStartScheduler+0xec>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012300:	4a16      	ldr	r2, [pc, #88]	@ (801235c <xPortStartScheduler+0xec>)
 8012302:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	b2da      	uxtb	r2, r3
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801230c:	4b14      	ldr	r3, [pc, #80]	@ (8012360 <xPortStartScheduler+0xf0>)
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	4a13      	ldr	r2, [pc, #76]	@ (8012360 <xPortStartScheduler+0xf0>)
 8012312:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012316:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012318:	4b11      	ldr	r3, [pc, #68]	@ (8012360 <xPortStartScheduler+0xf0>)
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	4a10      	ldr	r2, [pc, #64]	@ (8012360 <xPortStartScheduler+0xf0>)
 801231e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012322:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012324:	f000 f8dc 	bl	80124e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012328:	4b0e      	ldr	r3, [pc, #56]	@ (8012364 <xPortStartScheduler+0xf4>)
 801232a:	2200      	movs	r2, #0
 801232c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801232e:	f000 f8fb 	bl	8012528 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012332:	4b0d      	ldr	r3, [pc, #52]	@ (8012368 <xPortStartScheduler+0xf8>)
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	4a0c      	ldr	r2, [pc, #48]	@ (8012368 <xPortStartScheduler+0xf8>)
 8012338:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801233c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801233e:	f7ff ff83 	bl	8012248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012342:	f7fe fde1 	bl	8010f08 <vTaskSwitchContext>
	prvTaskExitError();
 8012346:	f7ff ff39 	bl	80121bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801234a:	2300      	movs	r3, #0
}
 801234c:	4618      	mov	r0, r3
 801234e:	3710      	adds	r7, #16
 8012350:	46bd      	mov	sp, r7
 8012352:	bd80      	pop	{r7, pc}
 8012354:	e000e400 	.word	0xe000e400
 8012358:	2000b680 	.word	0x2000b680
 801235c:	2000b684 	.word	0x2000b684
 8012360:	e000ed20 	.word	0xe000ed20
 8012364:	20000020 	.word	0x20000020
 8012368:	e000ef34 	.word	0xe000ef34

0801236c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801236c:	b480      	push	{r7}
 801236e:	b083      	sub	sp, #12
 8012370:	af00      	add	r7, sp, #0
	__asm volatile
 8012372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012376:	b672      	cpsid	i
 8012378:	f383 8811 	msr	BASEPRI, r3
 801237c:	f3bf 8f6f 	isb	sy
 8012380:	f3bf 8f4f 	dsb	sy
 8012384:	b662      	cpsie	i
 8012386:	607b      	str	r3, [r7, #4]
}
 8012388:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801238a:	4b11      	ldr	r3, [pc, #68]	@ (80123d0 <vPortEnterCritical+0x64>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	3301      	adds	r3, #1
 8012390:	4a0f      	ldr	r2, [pc, #60]	@ (80123d0 <vPortEnterCritical+0x64>)
 8012392:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012394:	4b0e      	ldr	r3, [pc, #56]	@ (80123d0 <vPortEnterCritical+0x64>)
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	2b01      	cmp	r3, #1
 801239a:	d112      	bne.n	80123c2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801239c:	4b0d      	ldr	r3, [pc, #52]	@ (80123d4 <vPortEnterCritical+0x68>)
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	b2db      	uxtb	r3, r3
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d00d      	beq.n	80123c2 <vPortEnterCritical+0x56>
	__asm volatile
 80123a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123aa:	b672      	cpsid	i
 80123ac:	f383 8811 	msr	BASEPRI, r3
 80123b0:	f3bf 8f6f 	isb	sy
 80123b4:	f3bf 8f4f 	dsb	sy
 80123b8:	b662      	cpsie	i
 80123ba:	603b      	str	r3, [r7, #0]
}
 80123bc:	bf00      	nop
 80123be:	bf00      	nop
 80123c0:	e7fd      	b.n	80123be <vPortEnterCritical+0x52>
	}
}
 80123c2:	bf00      	nop
 80123c4:	370c      	adds	r7, #12
 80123c6:	46bd      	mov	sp, r7
 80123c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123cc:	4770      	bx	lr
 80123ce:	bf00      	nop
 80123d0:	20000020 	.word	0x20000020
 80123d4:	e000ed04 	.word	0xe000ed04

080123d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80123d8:	b480      	push	{r7}
 80123da:	b083      	sub	sp, #12
 80123dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80123de:	4b13      	ldr	r3, [pc, #76]	@ (801242c <vPortExitCritical+0x54>)
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d10d      	bne.n	8012402 <vPortExitCritical+0x2a>
	__asm volatile
 80123e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123ea:	b672      	cpsid	i
 80123ec:	f383 8811 	msr	BASEPRI, r3
 80123f0:	f3bf 8f6f 	isb	sy
 80123f4:	f3bf 8f4f 	dsb	sy
 80123f8:	b662      	cpsie	i
 80123fa:	607b      	str	r3, [r7, #4]
}
 80123fc:	bf00      	nop
 80123fe:	bf00      	nop
 8012400:	e7fd      	b.n	80123fe <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8012402:	4b0a      	ldr	r3, [pc, #40]	@ (801242c <vPortExitCritical+0x54>)
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	3b01      	subs	r3, #1
 8012408:	4a08      	ldr	r2, [pc, #32]	@ (801242c <vPortExitCritical+0x54>)
 801240a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801240c:	4b07      	ldr	r3, [pc, #28]	@ (801242c <vPortExitCritical+0x54>)
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d105      	bne.n	8012420 <vPortExitCritical+0x48>
 8012414:	2300      	movs	r3, #0
 8012416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012418:	683b      	ldr	r3, [r7, #0]
 801241a:	f383 8811 	msr	BASEPRI, r3
}
 801241e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012420:	bf00      	nop
 8012422:	370c      	adds	r7, #12
 8012424:	46bd      	mov	sp, r7
 8012426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801242a:	4770      	bx	lr
 801242c:	20000020 	.word	0x20000020

08012430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012430:	f3ef 8009 	mrs	r0, PSP
 8012434:	f3bf 8f6f 	isb	sy
 8012438:	4b15      	ldr	r3, [pc, #84]	@ (8012490 <pxCurrentTCBConst>)
 801243a:	681a      	ldr	r2, [r3, #0]
 801243c:	f01e 0f10 	tst.w	lr, #16
 8012440:	bf08      	it	eq
 8012442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801244a:	6010      	str	r0, [r2, #0]
 801244c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012450:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012454:	b672      	cpsid	i
 8012456:	f380 8811 	msr	BASEPRI, r0
 801245a:	f3bf 8f4f 	dsb	sy
 801245e:	f3bf 8f6f 	isb	sy
 8012462:	b662      	cpsie	i
 8012464:	f7fe fd50 	bl	8010f08 <vTaskSwitchContext>
 8012468:	f04f 0000 	mov.w	r0, #0
 801246c:	f380 8811 	msr	BASEPRI, r0
 8012470:	bc09      	pop	{r0, r3}
 8012472:	6819      	ldr	r1, [r3, #0]
 8012474:	6808      	ldr	r0, [r1, #0]
 8012476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801247a:	f01e 0f10 	tst.w	lr, #16
 801247e:	bf08      	it	eq
 8012480:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012484:	f380 8809 	msr	PSP, r0
 8012488:	f3bf 8f6f 	isb	sy
 801248c:	4770      	bx	lr
 801248e:	bf00      	nop

08012490 <pxCurrentTCBConst>:
 8012490:	2000b054 	.word	0x2000b054
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012494:	bf00      	nop
 8012496:	bf00      	nop

08012498 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b082      	sub	sp, #8
 801249c:	af00      	add	r7, sp, #0
	__asm volatile
 801249e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124a2:	b672      	cpsid	i
 80124a4:	f383 8811 	msr	BASEPRI, r3
 80124a8:	f3bf 8f6f 	isb	sy
 80124ac:	f3bf 8f4f 	dsb	sy
 80124b0:	b662      	cpsie	i
 80124b2:	607b      	str	r3, [r7, #4]
}
 80124b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80124b6:	f7fe fc6b 	bl	8010d90 <xTaskIncrementTick>
 80124ba:	4603      	mov	r3, r0
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d003      	beq.n	80124c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80124c0:	4b06      	ldr	r3, [pc, #24]	@ (80124dc <SysTick_Handler+0x44>)
 80124c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80124c6:	601a      	str	r2, [r3, #0]
 80124c8:	2300      	movs	r3, #0
 80124ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	f383 8811 	msr	BASEPRI, r3
}
 80124d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80124d4:	bf00      	nop
 80124d6:	3708      	adds	r7, #8
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}
 80124dc:	e000ed04 	.word	0xe000ed04

080124e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80124e0:	b480      	push	{r7}
 80124e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80124e4:	4b0b      	ldr	r3, [pc, #44]	@ (8012514 <vPortSetupTimerInterrupt+0x34>)
 80124e6:	2200      	movs	r2, #0
 80124e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80124ea:	4b0b      	ldr	r3, [pc, #44]	@ (8012518 <vPortSetupTimerInterrupt+0x38>)
 80124ec:	2200      	movs	r2, #0
 80124ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80124f0:	4b0a      	ldr	r3, [pc, #40]	@ (801251c <vPortSetupTimerInterrupt+0x3c>)
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	4a0a      	ldr	r2, [pc, #40]	@ (8012520 <vPortSetupTimerInterrupt+0x40>)
 80124f6:	fba2 2303 	umull	r2, r3, r2, r3
 80124fa:	099b      	lsrs	r3, r3, #6
 80124fc:	4a09      	ldr	r2, [pc, #36]	@ (8012524 <vPortSetupTimerInterrupt+0x44>)
 80124fe:	3b01      	subs	r3, #1
 8012500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012502:	4b04      	ldr	r3, [pc, #16]	@ (8012514 <vPortSetupTimerInterrupt+0x34>)
 8012504:	2207      	movs	r2, #7
 8012506:	601a      	str	r2, [r3, #0]
}
 8012508:	bf00      	nop
 801250a:	46bd      	mov	sp, r7
 801250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012510:	4770      	bx	lr
 8012512:	bf00      	nop
 8012514:	e000e010 	.word	0xe000e010
 8012518:	e000e018 	.word	0xe000e018
 801251c:	20000000 	.word	0x20000000
 8012520:	10624dd3 	.word	0x10624dd3
 8012524:	e000e014 	.word	0xe000e014

08012528 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012528:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012538 <vPortEnableVFP+0x10>
 801252c:	6801      	ldr	r1, [r0, #0]
 801252e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8012532:	6001      	str	r1, [r0, #0]
 8012534:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012536:	bf00      	nop
 8012538:	e000ed88 	.word	0xe000ed88

0801253c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801253c:	b480      	push	{r7}
 801253e:	b085      	sub	sp, #20
 8012540:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012542:	f3ef 8305 	mrs	r3, IPSR
 8012546:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	2b0f      	cmp	r3, #15
 801254c:	d917      	bls.n	801257e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801254e:	4a1a      	ldr	r2, [pc, #104]	@ (80125b8 <vPortValidateInterruptPriority+0x7c>)
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	4413      	add	r3, r2
 8012554:	781b      	ldrb	r3, [r3, #0]
 8012556:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012558:	4b18      	ldr	r3, [pc, #96]	@ (80125bc <vPortValidateInterruptPriority+0x80>)
 801255a:	781b      	ldrb	r3, [r3, #0]
 801255c:	7afa      	ldrb	r2, [r7, #11]
 801255e:	429a      	cmp	r2, r3
 8012560:	d20d      	bcs.n	801257e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8012562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012566:	b672      	cpsid	i
 8012568:	f383 8811 	msr	BASEPRI, r3
 801256c:	f3bf 8f6f 	isb	sy
 8012570:	f3bf 8f4f 	dsb	sy
 8012574:	b662      	cpsie	i
 8012576:	607b      	str	r3, [r7, #4]
}
 8012578:	bf00      	nop
 801257a:	bf00      	nop
 801257c:	e7fd      	b.n	801257a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801257e:	4b10      	ldr	r3, [pc, #64]	@ (80125c0 <vPortValidateInterruptPriority+0x84>)
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8012586:	4b0f      	ldr	r3, [pc, #60]	@ (80125c4 <vPortValidateInterruptPriority+0x88>)
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	429a      	cmp	r2, r3
 801258c:	d90d      	bls.n	80125aa <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801258e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012592:	b672      	cpsid	i
 8012594:	f383 8811 	msr	BASEPRI, r3
 8012598:	f3bf 8f6f 	isb	sy
 801259c:	f3bf 8f4f 	dsb	sy
 80125a0:	b662      	cpsie	i
 80125a2:	603b      	str	r3, [r7, #0]
}
 80125a4:	bf00      	nop
 80125a6:	bf00      	nop
 80125a8:	e7fd      	b.n	80125a6 <vPortValidateInterruptPriority+0x6a>
	}
 80125aa:	bf00      	nop
 80125ac:	3714      	adds	r7, #20
 80125ae:	46bd      	mov	sp, r7
 80125b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b4:	4770      	bx	lr
 80125b6:	bf00      	nop
 80125b8:	e000e3f0 	.word	0xe000e3f0
 80125bc:	2000b680 	.word	0x2000b680
 80125c0:	e000ed0c 	.word	0xe000ed0c
 80125c4:	2000b684 	.word	0x2000b684

080125c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b08a      	sub	sp, #40	@ 0x28
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80125d0:	2300      	movs	r3, #0
 80125d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80125d4:	f7fe fb0c 	bl	8010bf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80125d8:	4b5d      	ldr	r3, [pc, #372]	@ (8012750 <pvPortMalloc+0x188>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d101      	bne.n	80125e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80125e0:	f000 f920 	bl	8012824 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80125e4:	4b5b      	ldr	r3, [pc, #364]	@ (8012754 <pvPortMalloc+0x18c>)
 80125e6:	681a      	ldr	r2, [r3, #0]
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	4013      	ands	r3, r2
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	f040 8094 	bne.w	801271a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d020      	beq.n	801263a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80125f8:	2208      	movs	r2, #8
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	4413      	add	r3, r2
 80125fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	f003 0307 	and.w	r3, r3, #7
 8012606:	2b00      	cmp	r3, #0
 8012608:	d017      	beq.n	801263a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	f023 0307 	bic.w	r3, r3, #7
 8012610:	3308      	adds	r3, #8
 8012612:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f003 0307 	and.w	r3, r3, #7
 801261a:	2b00      	cmp	r3, #0
 801261c:	d00d      	beq.n	801263a <pvPortMalloc+0x72>
	__asm volatile
 801261e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012622:	b672      	cpsid	i
 8012624:	f383 8811 	msr	BASEPRI, r3
 8012628:	f3bf 8f6f 	isb	sy
 801262c:	f3bf 8f4f 	dsb	sy
 8012630:	b662      	cpsie	i
 8012632:	617b      	str	r3, [r7, #20]
}
 8012634:	bf00      	nop
 8012636:	bf00      	nop
 8012638:	e7fd      	b.n	8012636 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d06c      	beq.n	801271a <pvPortMalloc+0x152>
 8012640:	4b45      	ldr	r3, [pc, #276]	@ (8012758 <pvPortMalloc+0x190>)
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	687a      	ldr	r2, [r7, #4]
 8012646:	429a      	cmp	r2, r3
 8012648:	d867      	bhi.n	801271a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801264a:	4b44      	ldr	r3, [pc, #272]	@ (801275c <pvPortMalloc+0x194>)
 801264c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801264e:	4b43      	ldr	r3, [pc, #268]	@ (801275c <pvPortMalloc+0x194>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012654:	e004      	b.n	8012660 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8012656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012658:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801265a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012662:	685b      	ldr	r3, [r3, #4]
 8012664:	687a      	ldr	r2, [r7, #4]
 8012666:	429a      	cmp	r2, r3
 8012668:	d903      	bls.n	8012672 <pvPortMalloc+0xaa>
 801266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d1f1      	bne.n	8012656 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012672:	4b37      	ldr	r3, [pc, #220]	@ (8012750 <pvPortMalloc+0x188>)
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012678:	429a      	cmp	r2, r3
 801267a:	d04e      	beq.n	801271a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801267c:	6a3b      	ldr	r3, [r7, #32]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	2208      	movs	r2, #8
 8012682:	4413      	add	r3, r2
 8012684:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012688:	681a      	ldr	r2, [r3, #0]
 801268a:	6a3b      	ldr	r3, [r7, #32]
 801268c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012690:	685a      	ldr	r2, [r3, #4]
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	1ad2      	subs	r2, r2, r3
 8012696:	2308      	movs	r3, #8
 8012698:	005b      	lsls	r3, r3, #1
 801269a:	429a      	cmp	r2, r3
 801269c:	d922      	bls.n	80126e4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801269e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	4413      	add	r3, r2
 80126a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80126a6:	69bb      	ldr	r3, [r7, #24]
 80126a8:	f003 0307 	and.w	r3, r3, #7
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d00d      	beq.n	80126cc <pvPortMalloc+0x104>
	__asm volatile
 80126b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126b4:	b672      	cpsid	i
 80126b6:	f383 8811 	msr	BASEPRI, r3
 80126ba:	f3bf 8f6f 	isb	sy
 80126be:	f3bf 8f4f 	dsb	sy
 80126c2:	b662      	cpsie	i
 80126c4:	613b      	str	r3, [r7, #16]
}
 80126c6:	bf00      	nop
 80126c8:	bf00      	nop
 80126ca:	e7fd      	b.n	80126c8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80126cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126ce:	685a      	ldr	r2, [r3, #4]
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	1ad2      	subs	r2, r2, r3
 80126d4:	69bb      	ldr	r3, [r7, #24]
 80126d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80126d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126da:	687a      	ldr	r2, [r7, #4]
 80126dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80126de:	69b8      	ldr	r0, [r7, #24]
 80126e0:	f000 f902 	bl	80128e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80126e4:	4b1c      	ldr	r3, [pc, #112]	@ (8012758 <pvPortMalloc+0x190>)
 80126e6:	681a      	ldr	r2, [r3, #0]
 80126e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126ea:	685b      	ldr	r3, [r3, #4]
 80126ec:	1ad3      	subs	r3, r2, r3
 80126ee:	4a1a      	ldr	r2, [pc, #104]	@ (8012758 <pvPortMalloc+0x190>)
 80126f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80126f2:	4b19      	ldr	r3, [pc, #100]	@ (8012758 <pvPortMalloc+0x190>)
 80126f4:	681a      	ldr	r2, [r3, #0]
 80126f6:	4b1a      	ldr	r3, [pc, #104]	@ (8012760 <pvPortMalloc+0x198>)
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	429a      	cmp	r2, r3
 80126fc:	d203      	bcs.n	8012706 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80126fe:	4b16      	ldr	r3, [pc, #88]	@ (8012758 <pvPortMalloc+0x190>)
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	4a17      	ldr	r2, [pc, #92]	@ (8012760 <pvPortMalloc+0x198>)
 8012704:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012708:	685a      	ldr	r2, [r3, #4]
 801270a:	4b12      	ldr	r3, [pc, #72]	@ (8012754 <pvPortMalloc+0x18c>)
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	431a      	orrs	r2, r3
 8012710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012712:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012716:	2200      	movs	r2, #0
 8012718:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801271a:	f7fe fa77 	bl	8010c0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801271e:	69fb      	ldr	r3, [r7, #28]
 8012720:	f003 0307 	and.w	r3, r3, #7
 8012724:	2b00      	cmp	r3, #0
 8012726:	d00d      	beq.n	8012744 <pvPortMalloc+0x17c>
	__asm volatile
 8012728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801272c:	b672      	cpsid	i
 801272e:	f383 8811 	msr	BASEPRI, r3
 8012732:	f3bf 8f6f 	isb	sy
 8012736:	f3bf 8f4f 	dsb	sy
 801273a:	b662      	cpsie	i
 801273c:	60fb      	str	r3, [r7, #12]
}
 801273e:	bf00      	nop
 8012740:	bf00      	nop
 8012742:	e7fd      	b.n	8012740 <pvPortMalloc+0x178>
	return pvReturn;
 8012744:	69fb      	ldr	r3, [r7, #28]
}
 8012746:	4618      	mov	r0, r3
 8012748:	3728      	adds	r7, #40	@ 0x28
 801274a:	46bd      	mov	sp, r7
 801274c:	bd80      	pop	{r7, pc}
 801274e:	bf00      	nop
 8012750:	20024690 	.word	0x20024690
 8012754:	2002469c 	.word	0x2002469c
 8012758:	20024694 	.word	0x20024694
 801275c:	20024688 	.word	0x20024688
 8012760:	20024698 	.word	0x20024698

08012764 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b086      	sub	sp, #24
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d04e      	beq.n	8012814 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012776:	2308      	movs	r3, #8
 8012778:	425b      	negs	r3, r3
 801277a:	697a      	ldr	r2, [r7, #20]
 801277c:	4413      	add	r3, r2
 801277e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012780:	697b      	ldr	r3, [r7, #20]
 8012782:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012784:	693b      	ldr	r3, [r7, #16]
 8012786:	685a      	ldr	r2, [r3, #4]
 8012788:	4b24      	ldr	r3, [pc, #144]	@ (801281c <vPortFree+0xb8>)
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	4013      	ands	r3, r2
 801278e:	2b00      	cmp	r3, #0
 8012790:	d10d      	bne.n	80127ae <vPortFree+0x4a>
	__asm volatile
 8012792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012796:	b672      	cpsid	i
 8012798:	f383 8811 	msr	BASEPRI, r3
 801279c:	f3bf 8f6f 	isb	sy
 80127a0:	f3bf 8f4f 	dsb	sy
 80127a4:	b662      	cpsie	i
 80127a6:	60fb      	str	r3, [r7, #12]
}
 80127a8:	bf00      	nop
 80127aa:	bf00      	nop
 80127ac:	e7fd      	b.n	80127aa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80127ae:	693b      	ldr	r3, [r7, #16]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d00d      	beq.n	80127d2 <vPortFree+0x6e>
	__asm volatile
 80127b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127ba:	b672      	cpsid	i
 80127bc:	f383 8811 	msr	BASEPRI, r3
 80127c0:	f3bf 8f6f 	isb	sy
 80127c4:	f3bf 8f4f 	dsb	sy
 80127c8:	b662      	cpsie	i
 80127ca:	60bb      	str	r3, [r7, #8]
}
 80127cc:	bf00      	nop
 80127ce:	bf00      	nop
 80127d0:	e7fd      	b.n	80127ce <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80127d2:	693b      	ldr	r3, [r7, #16]
 80127d4:	685a      	ldr	r2, [r3, #4]
 80127d6:	4b11      	ldr	r3, [pc, #68]	@ (801281c <vPortFree+0xb8>)
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	4013      	ands	r3, r2
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d019      	beq.n	8012814 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80127e0:	693b      	ldr	r3, [r7, #16]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d115      	bne.n	8012814 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80127e8:	693b      	ldr	r3, [r7, #16]
 80127ea:	685a      	ldr	r2, [r3, #4]
 80127ec:	4b0b      	ldr	r3, [pc, #44]	@ (801281c <vPortFree+0xb8>)
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	43db      	mvns	r3, r3
 80127f2:	401a      	ands	r2, r3
 80127f4:	693b      	ldr	r3, [r7, #16]
 80127f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80127f8:	f7fe f9fa 	bl	8010bf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80127fc:	693b      	ldr	r3, [r7, #16]
 80127fe:	685a      	ldr	r2, [r3, #4]
 8012800:	4b07      	ldr	r3, [pc, #28]	@ (8012820 <vPortFree+0xbc>)
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	4413      	add	r3, r2
 8012806:	4a06      	ldr	r2, [pc, #24]	@ (8012820 <vPortFree+0xbc>)
 8012808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801280a:	6938      	ldr	r0, [r7, #16]
 801280c:	f000 f86c 	bl	80128e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012810:	f7fe f9fc 	bl	8010c0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012814:	bf00      	nop
 8012816:	3718      	adds	r7, #24
 8012818:	46bd      	mov	sp, r7
 801281a:	bd80      	pop	{r7, pc}
 801281c:	2002469c 	.word	0x2002469c
 8012820:	20024694 	.word	0x20024694

08012824 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012824:	b480      	push	{r7}
 8012826:	b085      	sub	sp, #20
 8012828:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801282a:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 801282e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012830:	4b27      	ldr	r3, [pc, #156]	@ (80128d0 <prvHeapInit+0xac>)
 8012832:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	f003 0307 	and.w	r3, r3, #7
 801283a:	2b00      	cmp	r3, #0
 801283c:	d00c      	beq.n	8012858 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	3307      	adds	r3, #7
 8012842:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	f023 0307 	bic.w	r3, r3, #7
 801284a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801284c:	68ba      	ldr	r2, [r7, #8]
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	1ad3      	subs	r3, r2, r3
 8012852:	4a1f      	ldr	r2, [pc, #124]	@ (80128d0 <prvHeapInit+0xac>)
 8012854:	4413      	add	r3, r2
 8012856:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801285c:	4a1d      	ldr	r2, [pc, #116]	@ (80128d4 <prvHeapInit+0xb0>)
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012862:	4b1c      	ldr	r3, [pc, #112]	@ (80128d4 <prvHeapInit+0xb0>)
 8012864:	2200      	movs	r2, #0
 8012866:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	68ba      	ldr	r2, [r7, #8]
 801286c:	4413      	add	r3, r2
 801286e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012870:	2208      	movs	r2, #8
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	1a9b      	subs	r3, r3, r2
 8012876:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	f023 0307 	bic.w	r3, r3, #7
 801287e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	4a15      	ldr	r2, [pc, #84]	@ (80128d8 <prvHeapInit+0xb4>)
 8012884:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012886:	4b14      	ldr	r3, [pc, #80]	@ (80128d8 <prvHeapInit+0xb4>)
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	2200      	movs	r2, #0
 801288c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801288e:	4b12      	ldr	r3, [pc, #72]	@ (80128d8 <prvHeapInit+0xb4>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	2200      	movs	r2, #0
 8012894:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	68fa      	ldr	r2, [r7, #12]
 801289e:	1ad2      	subs	r2, r2, r3
 80128a0:	683b      	ldr	r3, [r7, #0]
 80128a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80128a4:	4b0c      	ldr	r3, [pc, #48]	@ (80128d8 <prvHeapInit+0xb4>)
 80128a6:	681a      	ldr	r2, [r3, #0]
 80128a8:	683b      	ldr	r3, [r7, #0]
 80128aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	685b      	ldr	r3, [r3, #4]
 80128b0:	4a0a      	ldr	r2, [pc, #40]	@ (80128dc <prvHeapInit+0xb8>)
 80128b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	685b      	ldr	r3, [r3, #4]
 80128b8:	4a09      	ldr	r2, [pc, #36]	@ (80128e0 <prvHeapInit+0xbc>)
 80128ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80128bc:	4b09      	ldr	r3, [pc, #36]	@ (80128e4 <prvHeapInit+0xc0>)
 80128be:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80128c2:	601a      	str	r2, [r3, #0]
}
 80128c4:	bf00      	nop
 80128c6:	3714      	adds	r7, #20
 80128c8:	46bd      	mov	sp, r7
 80128ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ce:	4770      	bx	lr
 80128d0:	2000b688 	.word	0x2000b688
 80128d4:	20024688 	.word	0x20024688
 80128d8:	20024690 	.word	0x20024690
 80128dc:	20024698 	.word	0x20024698
 80128e0:	20024694 	.word	0x20024694
 80128e4:	2002469c 	.word	0x2002469c

080128e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80128e8:	b480      	push	{r7}
 80128ea:	b085      	sub	sp, #20
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80128f0:	4b28      	ldr	r3, [pc, #160]	@ (8012994 <prvInsertBlockIntoFreeList+0xac>)
 80128f2:	60fb      	str	r3, [r7, #12]
 80128f4:	e002      	b.n	80128fc <prvInsertBlockIntoFreeList+0x14>
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	60fb      	str	r3, [r7, #12]
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	687a      	ldr	r2, [r7, #4]
 8012902:	429a      	cmp	r2, r3
 8012904:	d8f7      	bhi.n	80128f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	685b      	ldr	r3, [r3, #4]
 801290e:	68ba      	ldr	r2, [r7, #8]
 8012910:	4413      	add	r3, r2
 8012912:	687a      	ldr	r2, [r7, #4]
 8012914:	429a      	cmp	r2, r3
 8012916:	d108      	bne.n	801292a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	685a      	ldr	r2, [r3, #4]
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	685b      	ldr	r3, [r3, #4]
 8012920:	441a      	add	r2, r3
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	685b      	ldr	r3, [r3, #4]
 8012932:	68ba      	ldr	r2, [r7, #8]
 8012934:	441a      	add	r2, r3
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	429a      	cmp	r2, r3
 801293c:	d118      	bne.n	8012970 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	681a      	ldr	r2, [r3, #0]
 8012942:	4b15      	ldr	r3, [pc, #84]	@ (8012998 <prvInsertBlockIntoFreeList+0xb0>)
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	429a      	cmp	r2, r3
 8012948:	d00d      	beq.n	8012966 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	685a      	ldr	r2, [r3, #4]
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	685b      	ldr	r3, [r3, #4]
 8012954:	441a      	add	r2, r3
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	681a      	ldr	r2, [r3, #0]
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	601a      	str	r2, [r3, #0]
 8012964:	e008      	b.n	8012978 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012966:	4b0c      	ldr	r3, [pc, #48]	@ (8012998 <prvInsertBlockIntoFreeList+0xb0>)
 8012968:	681a      	ldr	r2, [r3, #0]
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	601a      	str	r2, [r3, #0]
 801296e:	e003      	b.n	8012978 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	681a      	ldr	r2, [r3, #0]
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012978:	68fa      	ldr	r2, [r7, #12]
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	429a      	cmp	r2, r3
 801297e:	d002      	beq.n	8012986 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	687a      	ldr	r2, [r7, #4]
 8012984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012986:	bf00      	nop
 8012988:	3714      	adds	r7, #20
 801298a:	46bd      	mov	sp, r7
 801298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012990:	4770      	bx	lr
 8012992:	bf00      	nop
 8012994:	20024688 	.word	0x20024688
 8012998:	20024690 	.word	0x20024690

0801299c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801299c:	b580      	push	{r7, lr}
 801299e:	b084      	sub	sp, #16
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
 80129a4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80129a6:	f007 facd 	bl	8019f44 <sys_timeouts_sleeptime>
 80129aa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129b2:	d10b      	bne.n	80129cc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80129b4:	4813      	ldr	r0, [pc, #76]	@ (8012a04 <tcpip_timeouts_mbox_fetch+0x68>)
 80129b6:	f00a fad2 	bl	801cf5e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80129ba:	2200      	movs	r2, #0
 80129bc:	6839      	ldr	r1, [r7, #0]
 80129be:	6878      	ldr	r0, [r7, #4]
 80129c0:	f00a fa5a 	bl	801ce78 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80129c4:	480f      	ldr	r0, [pc, #60]	@ (8012a04 <tcpip_timeouts_mbox_fetch+0x68>)
 80129c6:	f00a fabb 	bl	801cf40 <sys_mutex_lock>
    return;
 80129ca:	e018      	b.n	80129fe <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d102      	bne.n	80129d8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80129d2:	f007 fa7d 	bl	8019ed0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80129d6:	e7e6      	b.n	80129a6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80129d8:	480a      	ldr	r0, [pc, #40]	@ (8012a04 <tcpip_timeouts_mbox_fetch+0x68>)
 80129da:	f00a fac0 	bl	801cf5e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80129de:	68fa      	ldr	r2, [r7, #12]
 80129e0:	6839      	ldr	r1, [r7, #0]
 80129e2:	6878      	ldr	r0, [r7, #4]
 80129e4:	f00a fa48 	bl	801ce78 <sys_arch_mbox_fetch>
 80129e8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80129ea:	4806      	ldr	r0, [pc, #24]	@ (8012a04 <tcpip_timeouts_mbox_fetch+0x68>)
 80129ec:	f00a faa8 	bl	801cf40 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80129f0:	68bb      	ldr	r3, [r7, #8]
 80129f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129f6:	d102      	bne.n	80129fe <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80129f8:	f007 fa6a 	bl	8019ed0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80129fc:	e7d3      	b.n	80129a6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80129fe:	3710      	adds	r7, #16
 8012a00:	46bd      	mov	sp, r7
 8012a02:	bd80      	pop	{r7, pc}
 8012a04:	200246ac 	.word	0x200246ac

08012a08 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b084      	sub	sp, #16
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012a10:	4810      	ldr	r0, [pc, #64]	@ (8012a54 <tcpip_thread+0x4c>)
 8012a12:	f00a fa95 	bl	801cf40 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012a16:	4b10      	ldr	r3, [pc, #64]	@ (8012a58 <tcpip_thread+0x50>)
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d005      	beq.n	8012a2a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8012a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8012a58 <tcpip_thread+0x50>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	4a0e      	ldr	r2, [pc, #56]	@ (8012a5c <tcpip_thread+0x54>)
 8012a24:	6812      	ldr	r2, [r2, #0]
 8012a26:	4610      	mov	r0, r2
 8012a28:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012a2a:	f107 030c 	add.w	r3, r7, #12
 8012a2e:	4619      	mov	r1, r3
 8012a30:	480b      	ldr	r0, [pc, #44]	@ (8012a60 <tcpip_thread+0x58>)
 8012a32:	f7ff ffb3 	bl	801299c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d106      	bne.n	8012a4a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012a3c:	4b09      	ldr	r3, [pc, #36]	@ (8012a64 <tcpip_thread+0x5c>)
 8012a3e:	2291      	movs	r2, #145	@ 0x91
 8012a40:	4909      	ldr	r1, [pc, #36]	@ (8012a68 <tcpip_thread+0x60>)
 8012a42:	480a      	ldr	r0, [pc, #40]	@ (8012a6c <tcpip_thread+0x64>)
 8012a44:	f00b fb24 	bl	801e090 <iprintf>
      continue;
 8012a48:	e003      	b.n	8012a52 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f000 f80f 	bl	8012a70 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012a52:	e7ea      	b.n	8012a2a <tcpip_thread+0x22>
 8012a54:	200246ac 	.word	0x200246ac
 8012a58:	200246a0 	.word	0x200246a0
 8012a5c:	200246a4 	.word	0x200246a4
 8012a60:	200246a8 	.word	0x200246a8
 8012a64:	0801f244 	.word	0x0801f244
 8012a68:	0801f274 	.word	0x0801f274
 8012a6c:	0801f294 	.word	0x0801f294

08012a70 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b082      	sub	sp, #8
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	781b      	ldrb	r3, [r3, #0]
 8012a7c:	2b02      	cmp	r3, #2
 8012a7e:	d026      	beq.n	8012ace <tcpip_thread_handle_msg+0x5e>
 8012a80:	2b02      	cmp	r3, #2
 8012a82:	dc2b      	bgt.n	8012adc <tcpip_thread_handle_msg+0x6c>
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d002      	beq.n	8012a8e <tcpip_thread_handle_msg+0x1e>
 8012a88:	2b01      	cmp	r3, #1
 8012a8a:	d015      	beq.n	8012ab8 <tcpip_thread_handle_msg+0x48>
 8012a8c:	e026      	b.n	8012adc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	68db      	ldr	r3, [r3, #12]
 8012a92:	687a      	ldr	r2, [r7, #4]
 8012a94:	6850      	ldr	r0, [r2, #4]
 8012a96:	687a      	ldr	r2, [r7, #4]
 8012a98:	6892      	ldr	r2, [r2, #8]
 8012a9a:	4611      	mov	r1, r2
 8012a9c:	4798      	blx	r3
 8012a9e:	4603      	mov	r3, r0
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d004      	beq.n	8012aae <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	685b      	ldr	r3, [r3, #4]
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f001 fd07 	bl	80144bc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012aae:	6879      	ldr	r1, [r7, #4]
 8012ab0:	2009      	movs	r0, #9
 8012ab2:	f000 fe5f 	bl	8013774 <memp_free>
      break;
 8012ab6:	e018      	b.n	8012aea <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	685b      	ldr	r3, [r3, #4]
 8012abc:	687a      	ldr	r2, [r7, #4]
 8012abe:	6892      	ldr	r2, [r2, #8]
 8012ac0:	4610      	mov	r0, r2
 8012ac2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012ac4:	6879      	ldr	r1, [r7, #4]
 8012ac6:	2008      	movs	r0, #8
 8012ac8:	f000 fe54 	bl	8013774 <memp_free>
      break;
 8012acc:	e00d      	b.n	8012aea <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	685b      	ldr	r3, [r3, #4]
 8012ad2:	687a      	ldr	r2, [r7, #4]
 8012ad4:	6892      	ldr	r2, [r2, #8]
 8012ad6:	4610      	mov	r0, r2
 8012ad8:	4798      	blx	r3
      break;
 8012ada:	e006      	b.n	8012aea <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012adc:	4b05      	ldr	r3, [pc, #20]	@ (8012af4 <tcpip_thread_handle_msg+0x84>)
 8012ade:	22cf      	movs	r2, #207	@ 0xcf
 8012ae0:	4905      	ldr	r1, [pc, #20]	@ (8012af8 <tcpip_thread_handle_msg+0x88>)
 8012ae2:	4806      	ldr	r0, [pc, #24]	@ (8012afc <tcpip_thread_handle_msg+0x8c>)
 8012ae4:	f00b fad4 	bl	801e090 <iprintf>
      break;
 8012ae8:	bf00      	nop
  }
}
 8012aea:	bf00      	nop
 8012aec:	3708      	adds	r7, #8
 8012aee:	46bd      	mov	sp, r7
 8012af0:	bd80      	pop	{r7, pc}
 8012af2:	bf00      	nop
 8012af4:	0801f244 	.word	0x0801f244
 8012af8:	0801f274 	.word	0x0801f274
 8012afc:	0801f294 	.word	0x0801f294

08012b00 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b086      	sub	sp, #24
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	60f8      	str	r0, [r7, #12]
 8012b08:	60b9      	str	r1, [r7, #8]
 8012b0a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012b0c:	481a      	ldr	r0, [pc, #104]	@ (8012b78 <tcpip_inpkt+0x78>)
 8012b0e:	f00a f9e4 	bl	801ceda <sys_mbox_valid>
 8012b12:	4603      	mov	r3, r0
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d105      	bne.n	8012b24 <tcpip_inpkt+0x24>
 8012b18:	4b18      	ldr	r3, [pc, #96]	@ (8012b7c <tcpip_inpkt+0x7c>)
 8012b1a:	22fc      	movs	r2, #252	@ 0xfc
 8012b1c:	4918      	ldr	r1, [pc, #96]	@ (8012b80 <tcpip_inpkt+0x80>)
 8012b1e:	4819      	ldr	r0, [pc, #100]	@ (8012b84 <tcpip_inpkt+0x84>)
 8012b20:	f00b fab6 	bl	801e090 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012b24:	2009      	movs	r0, #9
 8012b26:	f000 fdaf 	bl	8013688 <memp_malloc>
 8012b2a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8012b2c:	697b      	ldr	r3, [r7, #20]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d102      	bne.n	8012b38 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012b32:	f04f 33ff 	mov.w	r3, #4294967295
 8012b36:	e01a      	b.n	8012b6e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012b38:	697b      	ldr	r3, [r7, #20]
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	68fa      	ldr	r2, [r7, #12]
 8012b42:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012b44:	697b      	ldr	r3, [r7, #20]
 8012b46:	68ba      	ldr	r2, [r7, #8]
 8012b48:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8012b4a:	697b      	ldr	r3, [r7, #20]
 8012b4c:	687a      	ldr	r2, [r7, #4]
 8012b4e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012b50:	6979      	ldr	r1, [r7, #20]
 8012b52:	4809      	ldr	r0, [pc, #36]	@ (8012b78 <tcpip_inpkt+0x78>)
 8012b54:	f00a f976 	bl	801ce44 <sys_mbox_trypost>
 8012b58:	4603      	mov	r3, r0
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d006      	beq.n	8012b6c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012b5e:	6979      	ldr	r1, [r7, #20]
 8012b60:	2009      	movs	r0, #9
 8012b62:	f000 fe07 	bl	8013774 <memp_free>
    return ERR_MEM;
 8012b66:	f04f 33ff 	mov.w	r3, #4294967295
 8012b6a:	e000      	b.n	8012b6e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8012b6c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8012b6e:	4618      	mov	r0, r3
 8012b70:	3718      	adds	r7, #24
 8012b72:	46bd      	mov	sp, r7
 8012b74:	bd80      	pop	{r7, pc}
 8012b76:	bf00      	nop
 8012b78:	200246a8 	.word	0x200246a8
 8012b7c:	0801f244 	.word	0x0801f244
 8012b80:	0801f2bc 	.word	0x0801f2bc
 8012b84:	0801f294 	.word	0x0801f294

08012b88 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b082      	sub	sp, #8
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
 8012b90:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012b92:	683b      	ldr	r3, [r7, #0]
 8012b94:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012b98:	f003 0318 	and.w	r3, r3, #24
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d006      	beq.n	8012bae <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012ba0:	4a08      	ldr	r2, [pc, #32]	@ (8012bc4 <tcpip_input+0x3c>)
 8012ba2:	6839      	ldr	r1, [r7, #0]
 8012ba4:	6878      	ldr	r0, [r7, #4]
 8012ba6:	f7ff ffab 	bl	8012b00 <tcpip_inpkt>
 8012baa:	4603      	mov	r3, r0
 8012bac:	e005      	b.n	8012bba <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8012bae:	4a06      	ldr	r2, [pc, #24]	@ (8012bc8 <tcpip_input+0x40>)
 8012bb0:	6839      	ldr	r1, [r7, #0]
 8012bb2:	6878      	ldr	r0, [r7, #4]
 8012bb4:	f7ff ffa4 	bl	8012b00 <tcpip_inpkt>
 8012bb8:	4603      	mov	r3, r0
}
 8012bba:	4618      	mov	r0, r3
 8012bbc:	3708      	adds	r7, #8
 8012bbe:	46bd      	mov	sp, r7
 8012bc0:	bd80      	pop	{r7, pc}
 8012bc2:	bf00      	nop
 8012bc4:	0801cc65 	.word	0x0801cc65
 8012bc8:	0801bb6d 	.word	0x0801bb6d

08012bcc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b084      	sub	sp, #16
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
 8012bd4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012bd6:	4819      	ldr	r0, [pc, #100]	@ (8012c3c <tcpip_try_callback+0x70>)
 8012bd8:	f00a f97f 	bl	801ceda <sys_mbox_valid>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d106      	bne.n	8012bf0 <tcpip_try_callback+0x24>
 8012be2:	4b17      	ldr	r3, [pc, #92]	@ (8012c40 <tcpip_try_callback+0x74>)
 8012be4:	f240 125d 	movw	r2, #349	@ 0x15d
 8012be8:	4916      	ldr	r1, [pc, #88]	@ (8012c44 <tcpip_try_callback+0x78>)
 8012bea:	4817      	ldr	r0, [pc, #92]	@ (8012c48 <tcpip_try_callback+0x7c>)
 8012bec:	f00b fa50 	bl	801e090 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012bf0:	2008      	movs	r0, #8
 8012bf2:	f000 fd49 	bl	8013688 <memp_malloc>
 8012bf6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d102      	bne.n	8012c04 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8012bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8012c02:	e017      	b.n	8012c34 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	2201      	movs	r2, #1
 8012c08:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	687a      	ldr	r2, [r7, #4]
 8012c0e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	683a      	ldr	r2, [r7, #0]
 8012c14:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012c16:	68f9      	ldr	r1, [r7, #12]
 8012c18:	4808      	ldr	r0, [pc, #32]	@ (8012c3c <tcpip_try_callback+0x70>)
 8012c1a:	f00a f913 	bl	801ce44 <sys_mbox_trypost>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d006      	beq.n	8012c32 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012c24:	68f9      	ldr	r1, [r7, #12]
 8012c26:	2008      	movs	r0, #8
 8012c28:	f000 fda4 	bl	8013774 <memp_free>
    return ERR_MEM;
 8012c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8012c30:	e000      	b.n	8012c34 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012c32:	2300      	movs	r3, #0
}
 8012c34:	4618      	mov	r0, r3
 8012c36:	3710      	adds	r7, #16
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	bd80      	pop	{r7, pc}
 8012c3c:	200246a8 	.word	0x200246a8
 8012c40:	0801f244 	.word	0x0801f244
 8012c44:	0801f2bc 	.word	0x0801f2bc
 8012c48:	0801f294 	.word	0x0801f294

08012c4c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b084      	sub	sp, #16
 8012c50:	af02      	add	r7, sp, #8
 8012c52:	6078      	str	r0, [r7, #4]
 8012c54:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012c56:	f000 f872 	bl	8012d3e <lwip_init>

  tcpip_init_done = initfunc;
 8012c5a:	4a17      	ldr	r2, [pc, #92]	@ (8012cb8 <tcpip_init+0x6c>)
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8012c60:	4a16      	ldr	r2, [pc, #88]	@ (8012cbc <tcpip_init+0x70>)
 8012c62:	683b      	ldr	r3, [r7, #0]
 8012c64:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012c66:	2106      	movs	r1, #6
 8012c68:	4815      	ldr	r0, [pc, #84]	@ (8012cc0 <tcpip_init+0x74>)
 8012c6a:	f00a f8d1 	bl	801ce10 <sys_mbox_new>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d006      	beq.n	8012c82 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012c74:	4b13      	ldr	r3, [pc, #76]	@ (8012cc4 <tcpip_init+0x78>)
 8012c76:	f240 2261 	movw	r2, #609	@ 0x261
 8012c7a:	4913      	ldr	r1, [pc, #76]	@ (8012cc8 <tcpip_init+0x7c>)
 8012c7c:	4813      	ldr	r0, [pc, #76]	@ (8012ccc <tcpip_init+0x80>)
 8012c7e:	f00b fa07 	bl	801e090 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8012c82:	4813      	ldr	r0, [pc, #76]	@ (8012cd0 <tcpip_init+0x84>)
 8012c84:	f00a f946 	bl	801cf14 <sys_mutex_new>
 8012c88:	4603      	mov	r3, r0
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d006      	beq.n	8012c9c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8012c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8012cc4 <tcpip_init+0x78>)
 8012c90:	f240 2265 	movw	r2, #613	@ 0x265
 8012c94:	490f      	ldr	r1, [pc, #60]	@ (8012cd4 <tcpip_init+0x88>)
 8012c96:	480d      	ldr	r0, [pc, #52]	@ (8012ccc <tcpip_init+0x80>)
 8012c98:	f00b f9fa 	bl	801e090 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012c9c:	2318      	movs	r3, #24
 8012c9e:	9300      	str	r3, [sp, #0]
 8012ca0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	490c      	ldr	r1, [pc, #48]	@ (8012cd8 <tcpip_init+0x8c>)
 8012ca8:	480c      	ldr	r0, [pc, #48]	@ (8012cdc <tcpip_init+0x90>)
 8012caa:	f00a f965 	bl	801cf78 <sys_thread_new>
}
 8012cae:	bf00      	nop
 8012cb0:	3708      	adds	r7, #8
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd80      	pop	{r7, pc}
 8012cb6:	bf00      	nop
 8012cb8:	200246a0 	.word	0x200246a0
 8012cbc:	200246a4 	.word	0x200246a4
 8012cc0:	200246a8 	.word	0x200246a8
 8012cc4:	0801f244 	.word	0x0801f244
 8012cc8:	0801f2cc 	.word	0x0801f2cc
 8012ccc:	0801f294 	.word	0x0801f294
 8012cd0:	200246ac 	.word	0x200246ac
 8012cd4:	0801f2f0 	.word	0x0801f2f0
 8012cd8:	08012a09 	.word	0x08012a09
 8012cdc:	0801f314 	.word	0x0801f314

08012ce0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8012ce0:	b480      	push	{r7}
 8012ce2:	b083      	sub	sp, #12
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8012cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012cee:	021b      	lsls	r3, r3, #8
 8012cf0:	b21a      	sxth	r2, r3
 8012cf2:	88fb      	ldrh	r3, [r7, #6]
 8012cf4:	0a1b      	lsrs	r3, r3, #8
 8012cf6:	b29b      	uxth	r3, r3
 8012cf8:	b21b      	sxth	r3, r3
 8012cfa:	4313      	orrs	r3, r2
 8012cfc:	b21b      	sxth	r3, r3
 8012cfe:	b29b      	uxth	r3, r3
}
 8012d00:	4618      	mov	r0, r3
 8012d02:	370c      	adds	r7, #12
 8012d04:	46bd      	mov	sp, r7
 8012d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0a:	4770      	bx	lr

08012d0c <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8012d0c:	b480      	push	{r7}
 8012d0e:	b083      	sub	sp, #12
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	061a      	lsls	r2, r3, #24
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	021b      	lsls	r3, r3, #8
 8012d1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012d20:	431a      	orrs	r2, r3
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	0a1b      	lsrs	r3, r3, #8
 8012d26:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012d2a:	431a      	orrs	r2, r3
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	0e1b      	lsrs	r3, r3, #24
 8012d30:	4313      	orrs	r3, r2
}
 8012d32:	4618      	mov	r0, r3
 8012d34:	370c      	adds	r7, #12
 8012d36:	46bd      	mov	sp, r7
 8012d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d3c:	4770      	bx	lr

08012d3e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8012d3e:	b580      	push	{r7, lr}
 8012d40:	b082      	sub	sp, #8
 8012d42:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8012d44:	2300      	movs	r3, #0
 8012d46:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8012d48:	f00a f8d8 	bl	801cefc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8012d4c:	f000 f8d4 	bl	8012ef8 <mem_init>
  memp_init();
 8012d50:	f000 fc2c 	bl	80135ac <memp_init>
  pbuf_init();
  netif_init();
 8012d54:	f000 fd38 	bl	80137c8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8012d58:	f007 f92c 	bl	8019fb4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8012d5c:	f001 fe58 	bl	8014a10 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8012d60:	f007 f86e 	bl	8019e40 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8012d64:	bf00      	nop
 8012d66:	3708      	adds	r7, #8
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	bd80      	pop	{r7, pc}

08012d6c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8012d6c:	b480      	push	{r7}
 8012d6e:	b083      	sub	sp, #12
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	4603      	mov	r3, r0
 8012d74:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8012d76:	4b05      	ldr	r3, [pc, #20]	@ (8012d8c <ptr_to_mem+0x20>)
 8012d78:	681a      	ldr	r2, [r3, #0]
 8012d7a:	88fb      	ldrh	r3, [r7, #6]
 8012d7c:	4413      	add	r3, r2
}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	370c      	adds	r7, #12
 8012d82:	46bd      	mov	sp, r7
 8012d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d88:	4770      	bx	lr
 8012d8a:	bf00      	nop
 8012d8c:	200246c8 	.word	0x200246c8

08012d90 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012d90:	b480      	push	{r7}
 8012d92:	b083      	sub	sp, #12
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8012d98:	4b05      	ldr	r3, [pc, #20]	@ (8012db0 <mem_to_ptr+0x20>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	687a      	ldr	r2, [r7, #4]
 8012d9e:	1ad3      	subs	r3, r2, r3
 8012da0:	b29b      	uxth	r3, r3
}
 8012da2:	4618      	mov	r0, r3
 8012da4:	370c      	adds	r7, #12
 8012da6:	46bd      	mov	sp, r7
 8012da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dac:	4770      	bx	lr
 8012dae:	bf00      	nop
 8012db0:	200246c8 	.word	0x200246c8

08012db4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8012db4:	b590      	push	{r4, r7, lr}
 8012db6:	b085      	sub	sp, #20
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8012dbc:	4b45      	ldr	r3, [pc, #276]	@ (8012ed4 <plug_holes+0x120>)
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	687a      	ldr	r2, [r7, #4]
 8012dc2:	429a      	cmp	r2, r3
 8012dc4:	d206      	bcs.n	8012dd4 <plug_holes+0x20>
 8012dc6:	4b44      	ldr	r3, [pc, #272]	@ (8012ed8 <plug_holes+0x124>)
 8012dc8:	f240 12df 	movw	r2, #479	@ 0x1df
 8012dcc:	4943      	ldr	r1, [pc, #268]	@ (8012edc <plug_holes+0x128>)
 8012dce:	4844      	ldr	r0, [pc, #272]	@ (8012ee0 <plug_holes+0x12c>)
 8012dd0:	f00b f95e 	bl	801e090 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8012dd4:	4b43      	ldr	r3, [pc, #268]	@ (8012ee4 <plug_holes+0x130>)
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	687a      	ldr	r2, [r7, #4]
 8012dda:	429a      	cmp	r2, r3
 8012ddc:	d306      	bcc.n	8012dec <plug_holes+0x38>
 8012dde:	4b3e      	ldr	r3, [pc, #248]	@ (8012ed8 <plug_holes+0x124>)
 8012de0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8012de4:	4940      	ldr	r1, [pc, #256]	@ (8012ee8 <plug_holes+0x134>)
 8012de6:	483e      	ldr	r0, [pc, #248]	@ (8012ee0 <plug_holes+0x12c>)
 8012de8:	f00b f952 	bl	801e090 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	791b      	ldrb	r3, [r3, #4]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d006      	beq.n	8012e02 <plug_holes+0x4e>
 8012df4:	4b38      	ldr	r3, [pc, #224]	@ (8012ed8 <plug_holes+0x124>)
 8012df6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8012dfa:	493c      	ldr	r1, [pc, #240]	@ (8012eec <plug_holes+0x138>)
 8012dfc:	4838      	ldr	r0, [pc, #224]	@ (8012ee0 <plug_holes+0x12c>)
 8012dfe:	f00b f947 	bl	801e090 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	881b      	ldrh	r3, [r3, #0]
 8012e06:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012e0a:	d906      	bls.n	8012e1a <plug_holes+0x66>
 8012e0c:	4b32      	ldr	r3, [pc, #200]	@ (8012ed8 <plug_holes+0x124>)
 8012e0e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8012e12:	4937      	ldr	r1, [pc, #220]	@ (8012ef0 <plug_holes+0x13c>)
 8012e14:	4832      	ldr	r0, [pc, #200]	@ (8012ee0 <plug_holes+0x12c>)
 8012e16:	f00b f93b 	bl	801e090 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	881b      	ldrh	r3, [r3, #0]
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f7ff ffa4 	bl	8012d6c <ptr_to_mem>
 8012e24:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8012e26:	687a      	ldr	r2, [r7, #4]
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	429a      	cmp	r2, r3
 8012e2c:	d024      	beq.n	8012e78 <plug_holes+0xc4>
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	791b      	ldrb	r3, [r3, #4]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d120      	bne.n	8012e78 <plug_holes+0xc4>
 8012e36:	4b2b      	ldr	r3, [pc, #172]	@ (8012ee4 <plug_holes+0x130>)
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	68fa      	ldr	r2, [r7, #12]
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	d01b      	beq.n	8012e78 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8012e40:	4b2c      	ldr	r3, [pc, #176]	@ (8012ef4 <plug_holes+0x140>)
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	68fa      	ldr	r2, [r7, #12]
 8012e46:	429a      	cmp	r2, r3
 8012e48:	d102      	bne.n	8012e50 <plug_holes+0x9c>
      lfree = mem;
 8012e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8012ef4 <plug_holes+0x140>)
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	881a      	ldrh	r2, [r3, #0]
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	881b      	ldrh	r3, [r3, #0]
 8012e5c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012e60:	d00a      	beq.n	8012e78 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	881b      	ldrh	r3, [r3, #0]
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7ff ff80 	bl	8012d6c <ptr_to_mem>
 8012e6c:	4604      	mov	r4, r0
 8012e6e:	6878      	ldr	r0, [r7, #4]
 8012e70:	f7ff ff8e 	bl	8012d90 <mem_to_ptr>
 8012e74:	4603      	mov	r3, r0
 8012e76:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	885b      	ldrh	r3, [r3, #2]
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7ff ff75 	bl	8012d6c <ptr_to_mem>
 8012e82:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8012e84:	68ba      	ldr	r2, [r7, #8]
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	429a      	cmp	r2, r3
 8012e8a:	d01f      	beq.n	8012ecc <plug_holes+0x118>
 8012e8c:	68bb      	ldr	r3, [r7, #8]
 8012e8e:	791b      	ldrb	r3, [r3, #4]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d11b      	bne.n	8012ecc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012e94:	4b17      	ldr	r3, [pc, #92]	@ (8012ef4 <plug_holes+0x140>)
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	687a      	ldr	r2, [r7, #4]
 8012e9a:	429a      	cmp	r2, r3
 8012e9c:	d102      	bne.n	8012ea4 <plug_holes+0xf0>
      lfree = pmem;
 8012e9e:	4a15      	ldr	r2, [pc, #84]	@ (8012ef4 <plug_holes+0x140>)
 8012ea0:	68bb      	ldr	r3, [r7, #8]
 8012ea2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	881a      	ldrh	r2, [r3, #0]
 8012ea8:	68bb      	ldr	r3, [r7, #8]
 8012eaa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	881b      	ldrh	r3, [r3, #0]
 8012eb0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012eb4:	d00a      	beq.n	8012ecc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	881b      	ldrh	r3, [r3, #0]
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f7ff ff56 	bl	8012d6c <ptr_to_mem>
 8012ec0:	4604      	mov	r4, r0
 8012ec2:	68b8      	ldr	r0, [r7, #8]
 8012ec4:	f7ff ff64 	bl	8012d90 <mem_to_ptr>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8012ecc:	bf00      	nop
 8012ece:	3714      	adds	r7, #20
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd90      	pop	{r4, r7, pc}
 8012ed4:	200246c8 	.word	0x200246c8
 8012ed8:	0801f324 	.word	0x0801f324
 8012edc:	0801f354 	.word	0x0801f354
 8012ee0:	0801f36c 	.word	0x0801f36c
 8012ee4:	200246cc 	.word	0x200246cc
 8012ee8:	0801f394 	.word	0x0801f394
 8012eec:	0801f3b0 	.word	0x0801f3b0
 8012ef0:	0801f3cc 	.word	0x0801f3cc
 8012ef4:	200246d4 	.word	0x200246d4

08012ef8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b082      	sub	sp, #8
 8012efc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8012efe:	4b1d      	ldr	r3, [pc, #116]	@ (8012f74 <mem_init+0x7c>)
 8012f00:	4a1d      	ldr	r2, [pc, #116]	@ (8012f78 <mem_init+0x80>)
 8012f02:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012f04:	4b1b      	ldr	r3, [pc, #108]	@ (8012f74 <mem_init+0x7c>)
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8012f10:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	2200      	movs	r2, #0
 8012f16:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8012f1e:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8012f22:	f7ff ff23 	bl	8012d6c <ptr_to_mem>
 8012f26:	4603      	mov	r3, r0
 8012f28:	4a14      	ldr	r2, [pc, #80]	@ (8012f7c <mem_init+0x84>)
 8012f2a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8012f2c:	4b13      	ldr	r3, [pc, #76]	@ (8012f7c <mem_init+0x84>)
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	2201      	movs	r2, #1
 8012f32:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8012f34:	4b11      	ldr	r3, [pc, #68]	@ (8012f7c <mem_init+0x84>)
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8012f3c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8012f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8012f7c <mem_init+0x84>)
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8012f46:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8012f48:	4b0a      	ldr	r3, [pc, #40]	@ (8012f74 <mem_init+0x7c>)
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	4a0c      	ldr	r2, [pc, #48]	@ (8012f80 <mem_init+0x88>)
 8012f4e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8012f50:	480c      	ldr	r0, [pc, #48]	@ (8012f84 <mem_init+0x8c>)
 8012f52:	f009 ffdf 	bl	801cf14 <sys_mutex_new>
 8012f56:	4603      	mov	r3, r0
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d006      	beq.n	8012f6a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8012f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8012f88 <mem_init+0x90>)
 8012f5e:	f240 221f 	movw	r2, #543	@ 0x21f
 8012f62:	490a      	ldr	r1, [pc, #40]	@ (8012f8c <mem_init+0x94>)
 8012f64:	480a      	ldr	r0, [pc, #40]	@ (8012f90 <mem_init+0x98>)
 8012f66:	f00b f893 	bl	801e090 <iprintf>
  }
}
 8012f6a:	bf00      	nop
 8012f6c:	3708      	adds	r7, #8
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bd80      	pop	{r7, pc}
 8012f72:	bf00      	nop
 8012f74:	200246c8 	.word	0x200246c8
 8012f78:	20048000 	.word	0x20048000
 8012f7c:	200246cc 	.word	0x200246cc
 8012f80:	200246d4 	.word	0x200246d4
 8012f84:	200246d0 	.word	0x200246d0
 8012f88:	0801f324 	.word	0x0801f324
 8012f8c:	0801f3f8 	.word	0x0801f3f8
 8012f90:	0801f36c 	.word	0x0801f36c

08012f94 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b086      	sub	sp, #24
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8012f9c:	6878      	ldr	r0, [r7, #4]
 8012f9e:	f7ff fef7 	bl	8012d90 <mem_to_ptr>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	881b      	ldrh	r3, [r3, #0]
 8012faa:	4618      	mov	r0, r3
 8012fac:	f7ff fede 	bl	8012d6c <ptr_to_mem>
 8012fb0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	885b      	ldrh	r3, [r3, #2]
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f7ff fed8 	bl	8012d6c <ptr_to_mem>
 8012fbc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	881b      	ldrh	r3, [r3, #0]
 8012fc2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012fc6:	d818      	bhi.n	8012ffa <mem_link_valid+0x66>
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	885b      	ldrh	r3, [r3, #2]
 8012fcc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012fd0:	d813      	bhi.n	8012ffa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012fd6:	8afa      	ldrh	r2, [r7, #22]
 8012fd8:	429a      	cmp	r2, r3
 8012fda:	d004      	beq.n	8012fe6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	881b      	ldrh	r3, [r3, #0]
 8012fe0:	8afa      	ldrh	r2, [r7, #22]
 8012fe2:	429a      	cmp	r2, r3
 8012fe4:	d109      	bne.n	8012ffa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012fe6:	4b08      	ldr	r3, [pc, #32]	@ (8013008 <mem_link_valid+0x74>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012fea:	693a      	ldr	r2, [r7, #16]
 8012fec:	429a      	cmp	r2, r3
 8012fee:	d006      	beq.n	8012ffe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012ff0:	693b      	ldr	r3, [r7, #16]
 8012ff2:	885b      	ldrh	r3, [r3, #2]
 8012ff4:	8afa      	ldrh	r2, [r7, #22]
 8012ff6:	429a      	cmp	r2, r3
 8012ff8:	d001      	beq.n	8012ffe <mem_link_valid+0x6a>
    return 0;
 8012ffa:	2300      	movs	r3, #0
 8012ffc:	e000      	b.n	8013000 <mem_link_valid+0x6c>
  }
  return 1;
 8012ffe:	2301      	movs	r3, #1
}
 8013000:	4618      	mov	r0, r3
 8013002:	3718      	adds	r7, #24
 8013004:	46bd      	mov	sp, r7
 8013006:	bd80      	pop	{r7, pc}
 8013008:	200246cc 	.word	0x200246cc

0801300c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b088      	sub	sp, #32
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d070      	beq.n	80130fc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	f003 0303 	and.w	r3, r3, #3
 8013020:	2b00      	cmp	r3, #0
 8013022:	d00d      	beq.n	8013040 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8013024:	4b37      	ldr	r3, [pc, #220]	@ (8013104 <mem_free+0xf8>)
 8013026:	f240 2273 	movw	r2, #627	@ 0x273
 801302a:	4937      	ldr	r1, [pc, #220]	@ (8013108 <mem_free+0xfc>)
 801302c:	4837      	ldr	r0, [pc, #220]	@ (801310c <mem_free+0x100>)
 801302e:	f00b f82f 	bl	801e090 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013032:	f009 ffc1 	bl	801cfb8 <sys_arch_protect>
 8013036:	60f8      	str	r0, [r7, #12]
 8013038:	68f8      	ldr	r0, [r7, #12]
 801303a:	f009 ffcb 	bl	801cfd4 <sys_arch_unprotect>
    return;
 801303e:	e05e      	b.n	80130fe <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	3b08      	subs	r3, #8
 8013044:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8013046:	4b32      	ldr	r3, [pc, #200]	@ (8013110 <mem_free+0x104>)
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	69fa      	ldr	r2, [r7, #28]
 801304c:	429a      	cmp	r2, r3
 801304e:	d306      	bcc.n	801305e <mem_free+0x52>
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	f103 020c 	add.w	r2, r3, #12
 8013056:	4b2f      	ldr	r3, [pc, #188]	@ (8013114 <mem_free+0x108>)
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	429a      	cmp	r2, r3
 801305c:	d90d      	bls.n	801307a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801305e:	4b29      	ldr	r3, [pc, #164]	@ (8013104 <mem_free+0xf8>)
 8013060:	f240 227f 	movw	r2, #639	@ 0x27f
 8013064:	492c      	ldr	r1, [pc, #176]	@ (8013118 <mem_free+0x10c>)
 8013066:	4829      	ldr	r0, [pc, #164]	@ (801310c <mem_free+0x100>)
 8013068:	f00b f812 	bl	801e090 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801306c:	f009 ffa4 	bl	801cfb8 <sys_arch_protect>
 8013070:	6138      	str	r0, [r7, #16]
 8013072:	6938      	ldr	r0, [r7, #16]
 8013074:	f009 ffae 	bl	801cfd4 <sys_arch_unprotect>
    return;
 8013078:	e041      	b.n	80130fe <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801307a:	4828      	ldr	r0, [pc, #160]	@ (801311c <mem_free+0x110>)
 801307c:	f009 ff60 	bl	801cf40 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8013080:	69fb      	ldr	r3, [r7, #28]
 8013082:	791b      	ldrb	r3, [r3, #4]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d110      	bne.n	80130aa <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8013088:	4b1e      	ldr	r3, [pc, #120]	@ (8013104 <mem_free+0xf8>)
 801308a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 801308e:	4924      	ldr	r1, [pc, #144]	@ (8013120 <mem_free+0x114>)
 8013090:	481e      	ldr	r0, [pc, #120]	@ (801310c <mem_free+0x100>)
 8013092:	f00a fffd 	bl	801e090 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013096:	4821      	ldr	r0, [pc, #132]	@ (801311c <mem_free+0x110>)
 8013098:	f009 ff61 	bl	801cf5e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801309c:	f009 ff8c 	bl	801cfb8 <sys_arch_protect>
 80130a0:	6178      	str	r0, [r7, #20]
 80130a2:	6978      	ldr	r0, [r7, #20]
 80130a4:	f009 ff96 	bl	801cfd4 <sys_arch_unprotect>
    return;
 80130a8:	e029      	b.n	80130fe <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80130aa:	69f8      	ldr	r0, [r7, #28]
 80130ac:	f7ff ff72 	bl	8012f94 <mem_link_valid>
 80130b0:	4603      	mov	r3, r0
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d110      	bne.n	80130d8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80130b6:	4b13      	ldr	r3, [pc, #76]	@ (8013104 <mem_free+0xf8>)
 80130b8:	f240 2295 	movw	r2, #661	@ 0x295
 80130bc:	4919      	ldr	r1, [pc, #100]	@ (8013124 <mem_free+0x118>)
 80130be:	4813      	ldr	r0, [pc, #76]	@ (801310c <mem_free+0x100>)
 80130c0:	f00a ffe6 	bl	801e090 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80130c4:	4815      	ldr	r0, [pc, #84]	@ (801311c <mem_free+0x110>)
 80130c6:	f009 ff4a 	bl	801cf5e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80130ca:	f009 ff75 	bl	801cfb8 <sys_arch_protect>
 80130ce:	61b8      	str	r0, [r7, #24]
 80130d0:	69b8      	ldr	r0, [r7, #24]
 80130d2:	f009 ff7f 	bl	801cfd4 <sys_arch_unprotect>
    return;
 80130d6:	e012      	b.n	80130fe <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80130d8:	69fb      	ldr	r3, [r7, #28]
 80130da:	2200      	movs	r2, #0
 80130dc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80130de:	4b12      	ldr	r3, [pc, #72]	@ (8013128 <mem_free+0x11c>)
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	69fa      	ldr	r2, [r7, #28]
 80130e4:	429a      	cmp	r2, r3
 80130e6:	d202      	bcs.n	80130ee <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80130e8:	4a0f      	ldr	r2, [pc, #60]	@ (8013128 <mem_free+0x11c>)
 80130ea:	69fb      	ldr	r3, [r7, #28]
 80130ec:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80130ee:	69f8      	ldr	r0, [r7, #28]
 80130f0:	f7ff fe60 	bl	8012db4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80130f4:	4809      	ldr	r0, [pc, #36]	@ (801311c <mem_free+0x110>)
 80130f6:	f009 ff32 	bl	801cf5e <sys_mutex_unlock>
 80130fa:	e000      	b.n	80130fe <mem_free+0xf2>
    return;
 80130fc:	bf00      	nop
}
 80130fe:	3720      	adds	r7, #32
 8013100:	46bd      	mov	sp, r7
 8013102:	bd80      	pop	{r7, pc}
 8013104:	0801f324 	.word	0x0801f324
 8013108:	0801f414 	.word	0x0801f414
 801310c:	0801f36c 	.word	0x0801f36c
 8013110:	200246c8 	.word	0x200246c8
 8013114:	200246cc 	.word	0x200246cc
 8013118:	0801f438 	.word	0x0801f438
 801311c:	200246d0 	.word	0x200246d0
 8013120:	0801f454 	.word	0x0801f454
 8013124:	0801f47c 	.word	0x0801f47c
 8013128:	200246d4 	.word	0x200246d4

0801312c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b088      	sub	sp, #32
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
 8013134:	460b      	mov	r3, r1
 8013136:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8013138:	887b      	ldrh	r3, [r7, #2]
 801313a:	3303      	adds	r3, #3
 801313c:	b29b      	uxth	r3, r3
 801313e:	f023 0303 	bic.w	r3, r3, #3
 8013142:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8013144:	8bfb      	ldrh	r3, [r7, #30]
 8013146:	2b0b      	cmp	r3, #11
 8013148:	d801      	bhi.n	801314e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801314a:	230c      	movs	r3, #12
 801314c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801314e:	8bfb      	ldrh	r3, [r7, #30]
 8013150:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8013154:	d803      	bhi.n	801315e <mem_trim+0x32>
 8013156:	8bfa      	ldrh	r2, [r7, #30]
 8013158:	887b      	ldrh	r3, [r7, #2]
 801315a:	429a      	cmp	r2, r3
 801315c:	d201      	bcs.n	8013162 <mem_trim+0x36>
    return NULL;
 801315e:	2300      	movs	r3, #0
 8013160:	e0d8      	b.n	8013314 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8013162:	4b6e      	ldr	r3, [pc, #440]	@ (801331c <mem_trim+0x1f0>)
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	687a      	ldr	r2, [r7, #4]
 8013168:	429a      	cmp	r2, r3
 801316a:	d304      	bcc.n	8013176 <mem_trim+0x4a>
 801316c:	4b6c      	ldr	r3, [pc, #432]	@ (8013320 <mem_trim+0x1f4>)
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	687a      	ldr	r2, [r7, #4]
 8013172:	429a      	cmp	r2, r3
 8013174:	d306      	bcc.n	8013184 <mem_trim+0x58>
 8013176:	4b6b      	ldr	r3, [pc, #428]	@ (8013324 <mem_trim+0x1f8>)
 8013178:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801317c:	496a      	ldr	r1, [pc, #424]	@ (8013328 <mem_trim+0x1fc>)
 801317e:	486b      	ldr	r0, [pc, #428]	@ (801332c <mem_trim+0x200>)
 8013180:	f00a ff86 	bl	801e090 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8013184:	4b65      	ldr	r3, [pc, #404]	@ (801331c <mem_trim+0x1f0>)
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	687a      	ldr	r2, [r7, #4]
 801318a:	429a      	cmp	r2, r3
 801318c:	d304      	bcc.n	8013198 <mem_trim+0x6c>
 801318e:	4b64      	ldr	r3, [pc, #400]	@ (8013320 <mem_trim+0x1f4>)
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	687a      	ldr	r2, [r7, #4]
 8013194:	429a      	cmp	r2, r3
 8013196:	d307      	bcc.n	80131a8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013198:	f009 ff0e 	bl	801cfb8 <sys_arch_protect>
 801319c:	60b8      	str	r0, [r7, #8]
 801319e:	68b8      	ldr	r0, [r7, #8]
 80131a0:	f009 ff18 	bl	801cfd4 <sys_arch_unprotect>
    return rmem;
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	e0b5      	b.n	8013314 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	3b08      	subs	r3, #8
 80131ac:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80131ae:	69b8      	ldr	r0, [r7, #24]
 80131b0:	f7ff fdee 	bl	8012d90 <mem_to_ptr>
 80131b4:	4603      	mov	r3, r0
 80131b6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80131b8:	69bb      	ldr	r3, [r7, #24]
 80131ba:	881a      	ldrh	r2, [r3, #0]
 80131bc:	8afb      	ldrh	r3, [r7, #22]
 80131be:	1ad3      	subs	r3, r2, r3
 80131c0:	b29b      	uxth	r3, r3
 80131c2:	3b08      	subs	r3, #8
 80131c4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80131c6:	8bfa      	ldrh	r2, [r7, #30]
 80131c8:	8abb      	ldrh	r3, [r7, #20]
 80131ca:	429a      	cmp	r2, r3
 80131cc:	d906      	bls.n	80131dc <mem_trim+0xb0>
 80131ce:	4b55      	ldr	r3, [pc, #340]	@ (8013324 <mem_trim+0x1f8>)
 80131d0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80131d4:	4956      	ldr	r1, [pc, #344]	@ (8013330 <mem_trim+0x204>)
 80131d6:	4855      	ldr	r0, [pc, #340]	@ (801332c <mem_trim+0x200>)
 80131d8:	f00a ff5a 	bl	801e090 <iprintf>
  if (newsize > size) {
 80131dc:	8bfa      	ldrh	r2, [r7, #30]
 80131de:	8abb      	ldrh	r3, [r7, #20]
 80131e0:	429a      	cmp	r2, r3
 80131e2:	d901      	bls.n	80131e8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80131e4:	2300      	movs	r3, #0
 80131e6:	e095      	b.n	8013314 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80131e8:	8bfa      	ldrh	r2, [r7, #30]
 80131ea:	8abb      	ldrh	r3, [r7, #20]
 80131ec:	429a      	cmp	r2, r3
 80131ee:	d101      	bne.n	80131f4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	e08f      	b.n	8013314 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80131f4:	484f      	ldr	r0, [pc, #316]	@ (8013334 <mem_trim+0x208>)
 80131f6:	f009 fea3 	bl	801cf40 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80131fa:	69bb      	ldr	r3, [r7, #24]
 80131fc:	881b      	ldrh	r3, [r3, #0]
 80131fe:	4618      	mov	r0, r3
 8013200:	f7ff fdb4 	bl	8012d6c <ptr_to_mem>
 8013204:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8013206:	693b      	ldr	r3, [r7, #16]
 8013208:	791b      	ldrb	r3, [r3, #4]
 801320a:	2b00      	cmp	r3, #0
 801320c:	d13f      	bne.n	801328e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801320e:	69bb      	ldr	r3, [r7, #24]
 8013210:	881b      	ldrh	r3, [r3, #0]
 8013212:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8013216:	d106      	bne.n	8013226 <mem_trim+0xfa>
 8013218:	4b42      	ldr	r3, [pc, #264]	@ (8013324 <mem_trim+0x1f8>)
 801321a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 801321e:	4946      	ldr	r1, [pc, #280]	@ (8013338 <mem_trim+0x20c>)
 8013220:	4842      	ldr	r0, [pc, #264]	@ (801332c <mem_trim+0x200>)
 8013222:	f00a ff35 	bl	801e090 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	881b      	ldrh	r3, [r3, #0]
 801322a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801322c:	8afa      	ldrh	r2, [r7, #22]
 801322e:	8bfb      	ldrh	r3, [r7, #30]
 8013230:	4413      	add	r3, r2
 8013232:	b29b      	uxth	r3, r3
 8013234:	3308      	adds	r3, #8
 8013236:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8013238:	4b40      	ldr	r3, [pc, #256]	@ (801333c <mem_trim+0x210>)
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	693a      	ldr	r2, [r7, #16]
 801323e:	429a      	cmp	r2, r3
 8013240:	d106      	bne.n	8013250 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8013242:	89fb      	ldrh	r3, [r7, #14]
 8013244:	4618      	mov	r0, r3
 8013246:	f7ff fd91 	bl	8012d6c <ptr_to_mem>
 801324a:	4603      	mov	r3, r0
 801324c:	4a3b      	ldr	r2, [pc, #236]	@ (801333c <mem_trim+0x210>)
 801324e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8013250:	89fb      	ldrh	r3, [r7, #14]
 8013252:	4618      	mov	r0, r3
 8013254:	f7ff fd8a 	bl	8012d6c <ptr_to_mem>
 8013258:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801325a:	693b      	ldr	r3, [r7, #16]
 801325c:	2200      	movs	r2, #0
 801325e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8013260:	693b      	ldr	r3, [r7, #16]
 8013262:	89ba      	ldrh	r2, [r7, #12]
 8013264:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8013266:	693b      	ldr	r3, [r7, #16]
 8013268:	8afa      	ldrh	r2, [r7, #22]
 801326a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801326c:	69bb      	ldr	r3, [r7, #24]
 801326e:	89fa      	ldrh	r2, [r7, #14]
 8013270:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013272:	693b      	ldr	r3, [r7, #16]
 8013274:	881b      	ldrh	r3, [r3, #0]
 8013276:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801327a:	d047      	beq.n	801330c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801327c:	693b      	ldr	r3, [r7, #16]
 801327e:	881b      	ldrh	r3, [r3, #0]
 8013280:	4618      	mov	r0, r3
 8013282:	f7ff fd73 	bl	8012d6c <ptr_to_mem>
 8013286:	4602      	mov	r2, r0
 8013288:	89fb      	ldrh	r3, [r7, #14]
 801328a:	8053      	strh	r3, [r2, #2]
 801328c:	e03e      	b.n	801330c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801328e:	8bfb      	ldrh	r3, [r7, #30]
 8013290:	f103 0214 	add.w	r2, r3, #20
 8013294:	8abb      	ldrh	r3, [r7, #20]
 8013296:	429a      	cmp	r2, r3
 8013298:	d838      	bhi.n	801330c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801329a:	8afa      	ldrh	r2, [r7, #22]
 801329c:	8bfb      	ldrh	r3, [r7, #30]
 801329e:	4413      	add	r3, r2
 80132a0:	b29b      	uxth	r3, r3
 80132a2:	3308      	adds	r3, #8
 80132a4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80132a6:	69bb      	ldr	r3, [r7, #24]
 80132a8:	881b      	ldrh	r3, [r3, #0]
 80132aa:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80132ae:	d106      	bne.n	80132be <mem_trim+0x192>
 80132b0:	4b1c      	ldr	r3, [pc, #112]	@ (8013324 <mem_trim+0x1f8>)
 80132b2:	f240 3216 	movw	r2, #790	@ 0x316
 80132b6:	4920      	ldr	r1, [pc, #128]	@ (8013338 <mem_trim+0x20c>)
 80132b8:	481c      	ldr	r0, [pc, #112]	@ (801332c <mem_trim+0x200>)
 80132ba:	f00a fee9 	bl	801e090 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80132be:	89fb      	ldrh	r3, [r7, #14]
 80132c0:	4618      	mov	r0, r3
 80132c2:	f7ff fd53 	bl	8012d6c <ptr_to_mem>
 80132c6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80132c8:	4b1c      	ldr	r3, [pc, #112]	@ (801333c <mem_trim+0x210>)
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	693a      	ldr	r2, [r7, #16]
 80132ce:	429a      	cmp	r2, r3
 80132d0:	d202      	bcs.n	80132d8 <mem_trim+0x1ac>
      lfree = mem2;
 80132d2:	4a1a      	ldr	r2, [pc, #104]	@ (801333c <mem_trim+0x210>)
 80132d4:	693b      	ldr	r3, [r7, #16]
 80132d6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80132d8:	693b      	ldr	r3, [r7, #16]
 80132da:	2200      	movs	r2, #0
 80132dc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80132de:	69bb      	ldr	r3, [r7, #24]
 80132e0:	881a      	ldrh	r2, [r3, #0]
 80132e2:	693b      	ldr	r3, [r7, #16]
 80132e4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80132e6:	693b      	ldr	r3, [r7, #16]
 80132e8:	8afa      	ldrh	r2, [r7, #22]
 80132ea:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80132ec:	69bb      	ldr	r3, [r7, #24]
 80132ee:	89fa      	ldrh	r2, [r7, #14]
 80132f0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80132f2:	693b      	ldr	r3, [r7, #16]
 80132f4:	881b      	ldrh	r3, [r3, #0]
 80132f6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80132fa:	d007      	beq.n	801330c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80132fc:	693b      	ldr	r3, [r7, #16]
 80132fe:	881b      	ldrh	r3, [r3, #0]
 8013300:	4618      	mov	r0, r3
 8013302:	f7ff fd33 	bl	8012d6c <ptr_to_mem>
 8013306:	4602      	mov	r2, r0
 8013308:	89fb      	ldrh	r3, [r7, #14]
 801330a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801330c:	4809      	ldr	r0, [pc, #36]	@ (8013334 <mem_trim+0x208>)
 801330e:	f009 fe26 	bl	801cf5e <sys_mutex_unlock>
  return rmem;
 8013312:	687b      	ldr	r3, [r7, #4]
}
 8013314:	4618      	mov	r0, r3
 8013316:	3720      	adds	r7, #32
 8013318:	46bd      	mov	sp, r7
 801331a:	bd80      	pop	{r7, pc}
 801331c:	200246c8 	.word	0x200246c8
 8013320:	200246cc 	.word	0x200246cc
 8013324:	0801f324 	.word	0x0801f324
 8013328:	0801f4b0 	.word	0x0801f4b0
 801332c:	0801f36c 	.word	0x0801f36c
 8013330:	0801f4c8 	.word	0x0801f4c8
 8013334:	200246d0 	.word	0x200246d0
 8013338:	0801f4e8 	.word	0x0801f4e8
 801333c:	200246d4 	.word	0x200246d4

08013340 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b088      	sub	sp, #32
 8013344:	af00      	add	r7, sp, #0
 8013346:	4603      	mov	r3, r0
 8013348:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801334a:	88fb      	ldrh	r3, [r7, #6]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d101      	bne.n	8013354 <mem_malloc+0x14>
    return NULL;
 8013350:	2300      	movs	r3, #0
 8013352:	e0e2      	b.n	801351a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013354:	88fb      	ldrh	r3, [r7, #6]
 8013356:	3303      	adds	r3, #3
 8013358:	b29b      	uxth	r3, r3
 801335a:	f023 0303 	bic.w	r3, r3, #3
 801335e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8013360:	8bbb      	ldrh	r3, [r7, #28]
 8013362:	2b0b      	cmp	r3, #11
 8013364:	d801      	bhi.n	801336a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8013366:	230c      	movs	r3, #12
 8013368:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801336a:	8bbb      	ldrh	r3, [r7, #28]
 801336c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8013370:	d803      	bhi.n	801337a <mem_malloc+0x3a>
 8013372:	8bba      	ldrh	r2, [r7, #28]
 8013374:	88fb      	ldrh	r3, [r7, #6]
 8013376:	429a      	cmp	r2, r3
 8013378:	d201      	bcs.n	801337e <mem_malloc+0x3e>
    return NULL;
 801337a:	2300      	movs	r3, #0
 801337c:	e0cd      	b.n	801351a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801337e:	4869      	ldr	r0, [pc, #420]	@ (8013524 <mem_malloc+0x1e4>)
 8013380:	f009 fdde 	bl	801cf40 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013384:	4b68      	ldr	r3, [pc, #416]	@ (8013528 <mem_malloc+0x1e8>)
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	4618      	mov	r0, r3
 801338a:	f7ff fd01 	bl	8012d90 <mem_to_ptr>
 801338e:	4603      	mov	r3, r0
 8013390:	83fb      	strh	r3, [r7, #30]
 8013392:	e0b7      	b.n	8013504 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013394:	8bfb      	ldrh	r3, [r7, #30]
 8013396:	4618      	mov	r0, r3
 8013398:	f7ff fce8 	bl	8012d6c <ptr_to_mem>
 801339c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801339e:	697b      	ldr	r3, [r7, #20]
 80133a0:	791b      	ldrb	r3, [r3, #4]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	f040 80a7 	bne.w	80134f6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80133a8:	697b      	ldr	r3, [r7, #20]
 80133aa:	881b      	ldrh	r3, [r3, #0]
 80133ac:	461a      	mov	r2, r3
 80133ae:	8bfb      	ldrh	r3, [r7, #30]
 80133b0:	1ad3      	subs	r3, r2, r3
 80133b2:	f1a3 0208 	sub.w	r2, r3, #8
 80133b6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80133b8:	429a      	cmp	r2, r3
 80133ba:	f0c0 809c 	bcc.w	80134f6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80133be:	697b      	ldr	r3, [r7, #20]
 80133c0:	881b      	ldrh	r3, [r3, #0]
 80133c2:	461a      	mov	r2, r3
 80133c4:	8bfb      	ldrh	r3, [r7, #30]
 80133c6:	1ad3      	subs	r3, r2, r3
 80133c8:	f1a3 0208 	sub.w	r2, r3, #8
 80133cc:	8bbb      	ldrh	r3, [r7, #28]
 80133ce:	3314      	adds	r3, #20
 80133d0:	429a      	cmp	r2, r3
 80133d2:	d333      	bcc.n	801343c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80133d4:	8bfa      	ldrh	r2, [r7, #30]
 80133d6:	8bbb      	ldrh	r3, [r7, #28]
 80133d8:	4413      	add	r3, r2
 80133da:	b29b      	uxth	r3, r3
 80133dc:	3308      	adds	r3, #8
 80133de:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80133e0:	8a7b      	ldrh	r3, [r7, #18]
 80133e2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80133e6:	d106      	bne.n	80133f6 <mem_malloc+0xb6>
 80133e8:	4b50      	ldr	r3, [pc, #320]	@ (801352c <mem_malloc+0x1ec>)
 80133ea:	f240 3287 	movw	r2, #903	@ 0x387
 80133ee:	4950      	ldr	r1, [pc, #320]	@ (8013530 <mem_malloc+0x1f0>)
 80133f0:	4850      	ldr	r0, [pc, #320]	@ (8013534 <mem_malloc+0x1f4>)
 80133f2:	f00a fe4d 	bl	801e090 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80133f6:	8a7b      	ldrh	r3, [r7, #18]
 80133f8:	4618      	mov	r0, r3
 80133fa:	f7ff fcb7 	bl	8012d6c <ptr_to_mem>
 80133fe:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	2200      	movs	r2, #0
 8013404:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013406:	697b      	ldr	r3, [r7, #20]
 8013408:	881a      	ldrh	r2, [r3, #0]
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	8bfa      	ldrh	r2, [r7, #30]
 8013412:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013414:	697b      	ldr	r3, [r7, #20]
 8013416:	8a7a      	ldrh	r2, [r7, #18]
 8013418:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801341a:	697b      	ldr	r3, [r7, #20]
 801341c:	2201      	movs	r2, #1
 801341e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	881b      	ldrh	r3, [r3, #0]
 8013424:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8013428:	d00b      	beq.n	8013442 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	881b      	ldrh	r3, [r3, #0]
 801342e:	4618      	mov	r0, r3
 8013430:	f7ff fc9c 	bl	8012d6c <ptr_to_mem>
 8013434:	4602      	mov	r2, r0
 8013436:	8a7b      	ldrh	r3, [r7, #18]
 8013438:	8053      	strh	r3, [r2, #2]
 801343a:	e002      	b.n	8013442 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801343c:	697b      	ldr	r3, [r7, #20]
 801343e:	2201      	movs	r2, #1
 8013440:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013442:	4b39      	ldr	r3, [pc, #228]	@ (8013528 <mem_malloc+0x1e8>)
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	697a      	ldr	r2, [r7, #20]
 8013448:	429a      	cmp	r2, r3
 801344a:	d127      	bne.n	801349c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 801344c:	4b36      	ldr	r3, [pc, #216]	@ (8013528 <mem_malloc+0x1e8>)
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013452:	e005      	b.n	8013460 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013454:	69bb      	ldr	r3, [r7, #24]
 8013456:	881b      	ldrh	r3, [r3, #0]
 8013458:	4618      	mov	r0, r3
 801345a:	f7ff fc87 	bl	8012d6c <ptr_to_mem>
 801345e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013460:	69bb      	ldr	r3, [r7, #24]
 8013462:	791b      	ldrb	r3, [r3, #4]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d004      	beq.n	8013472 <mem_malloc+0x132>
 8013468:	4b33      	ldr	r3, [pc, #204]	@ (8013538 <mem_malloc+0x1f8>)
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	69ba      	ldr	r2, [r7, #24]
 801346e:	429a      	cmp	r2, r3
 8013470:	d1f0      	bne.n	8013454 <mem_malloc+0x114>
          }
          lfree = cur;
 8013472:	4a2d      	ldr	r2, [pc, #180]	@ (8013528 <mem_malloc+0x1e8>)
 8013474:	69bb      	ldr	r3, [r7, #24]
 8013476:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013478:	4b2b      	ldr	r3, [pc, #172]	@ (8013528 <mem_malloc+0x1e8>)
 801347a:	681a      	ldr	r2, [r3, #0]
 801347c:	4b2e      	ldr	r3, [pc, #184]	@ (8013538 <mem_malloc+0x1f8>)
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	429a      	cmp	r2, r3
 8013482:	d00b      	beq.n	801349c <mem_malloc+0x15c>
 8013484:	4b28      	ldr	r3, [pc, #160]	@ (8013528 <mem_malloc+0x1e8>)
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	791b      	ldrb	r3, [r3, #4]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d006      	beq.n	801349c <mem_malloc+0x15c>
 801348e:	4b27      	ldr	r3, [pc, #156]	@ (801352c <mem_malloc+0x1ec>)
 8013490:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8013494:	4929      	ldr	r1, [pc, #164]	@ (801353c <mem_malloc+0x1fc>)
 8013496:	4827      	ldr	r0, [pc, #156]	@ (8013534 <mem_malloc+0x1f4>)
 8013498:	f00a fdfa 	bl	801e090 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 801349c:	4821      	ldr	r0, [pc, #132]	@ (8013524 <mem_malloc+0x1e4>)
 801349e:	f009 fd5e 	bl	801cf5e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80134a2:	8bba      	ldrh	r2, [r7, #28]
 80134a4:	697b      	ldr	r3, [r7, #20]
 80134a6:	4413      	add	r3, r2
 80134a8:	3308      	adds	r3, #8
 80134aa:	4a23      	ldr	r2, [pc, #140]	@ (8013538 <mem_malloc+0x1f8>)
 80134ac:	6812      	ldr	r2, [r2, #0]
 80134ae:	4293      	cmp	r3, r2
 80134b0:	d906      	bls.n	80134c0 <mem_malloc+0x180>
 80134b2:	4b1e      	ldr	r3, [pc, #120]	@ (801352c <mem_malloc+0x1ec>)
 80134b4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80134b8:	4921      	ldr	r1, [pc, #132]	@ (8013540 <mem_malloc+0x200>)
 80134ba:	481e      	ldr	r0, [pc, #120]	@ (8013534 <mem_malloc+0x1f4>)
 80134bc:	f00a fde8 	bl	801e090 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80134c0:	697b      	ldr	r3, [r7, #20]
 80134c2:	f003 0303 	and.w	r3, r3, #3
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d006      	beq.n	80134d8 <mem_malloc+0x198>
 80134ca:	4b18      	ldr	r3, [pc, #96]	@ (801352c <mem_malloc+0x1ec>)
 80134cc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80134d0:	491c      	ldr	r1, [pc, #112]	@ (8013544 <mem_malloc+0x204>)
 80134d2:	4818      	ldr	r0, [pc, #96]	@ (8013534 <mem_malloc+0x1f4>)
 80134d4:	f00a fddc 	bl	801e090 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80134d8:	697b      	ldr	r3, [r7, #20]
 80134da:	f003 0303 	and.w	r3, r3, #3
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d006      	beq.n	80134f0 <mem_malloc+0x1b0>
 80134e2:	4b12      	ldr	r3, [pc, #72]	@ (801352c <mem_malloc+0x1ec>)
 80134e4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80134e8:	4917      	ldr	r1, [pc, #92]	@ (8013548 <mem_malloc+0x208>)
 80134ea:	4812      	ldr	r0, [pc, #72]	@ (8013534 <mem_malloc+0x1f4>)
 80134ec:	f00a fdd0 	bl	801e090 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80134f0:	697b      	ldr	r3, [r7, #20]
 80134f2:	3308      	adds	r3, #8
 80134f4:	e011      	b.n	801351a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80134f6:	8bfb      	ldrh	r3, [r7, #30]
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7ff fc37 	bl	8012d6c <ptr_to_mem>
 80134fe:	4603      	mov	r3, r0
 8013500:	881b      	ldrh	r3, [r3, #0]
 8013502:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013504:	8bfa      	ldrh	r2, [r7, #30]
 8013506:	8bbb      	ldrh	r3, [r7, #28]
 8013508:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 801350c:	429a      	cmp	r2, r3
 801350e:	f4ff af41 	bcc.w	8013394 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8013512:	4804      	ldr	r0, [pc, #16]	@ (8013524 <mem_malloc+0x1e4>)
 8013514:	f009 fd23 	bl	801cf5e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013518:	2300      	movs	r3, #0
}
 801351a:	4618      	mov	r0, r3
 801351c:	3720      	adds	r7, #32
 801351e:	46bd      	mov	sp, r7
 8013520:	bd80      	pop	{r7, pc}
 8013522:	bf00      	nop
 8013524:	200246d0 	.word	0x200246d0
 8013528:	200246d4 	.word	0x200246d4
 801352c:	0801f324 	.word	0x0801f324
 8013530:	0801f4e8 	.word	0x0801f4e8
 8013534:	0801f36c 	.word	0x0801f36c
 8013538:	200246cc 	.word	0x200246cc
 801353c:	0801f4fc 	.word	0x0801f4fc
 8013540:	0801f518 	.word	0x0801f518
 8013544:	0801f548 	.word	0x0801f548
 8013548:	0801f578 	.word	0x0801f578

0801354c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801354c:	b480      	push	{r7}
 801354e:	b085      	sub	sp, #20
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	689b      	ldr	r3, [r3, #8]
 8013558:	2200      	movs	r2, #0
 801355a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	685b      	ldr	r3, [r3, #4]
 8013560:	3303      	adds	r3, #3
 8013562:	f023 0303 	bic.w	r3, r3, #3
 8013566:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013568:	2300      	movs	r3, #0
 801356a:	60fb      	str	r3, [r7, #12]
 801356c:	e011      	b.n	8013592 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	689b      	ldr	r3, [r3, #8]
 8013572:	681a      	ldr	r2, [r3, #0]
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	689b      	ldr	r3, [r3, #8]
 801357c:	68ba      	ldr	r2, [r7, #8]
 801357e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	881b      	ldrh	r3, [r3, #0]
 8013584:	461a      	mov	r2, r3
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	4413      	add	r3, r2
 801358a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	3301      	adds	r3, #1
 8013590:	60fb      	str	r3, [r7, #12]
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	885b      	ldrh	r3, [r3, #2]
 8013596:	461a      	mov	r2, r3
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	4293      	cmp	r3, r2
 801359c:	dbe7      	blt.n	801356e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801359e:	bf00      	nop
 80135a0:	bf00      	nop
 80135a2:	3714      	adds	r7, #20
 80135a4:	46bd      	mov	sp, r7
 80135a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135aa:	4770      	bx	lr

080135ac <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b082      	sub	sp, #8
 80135b0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80135b2:	2300      	movs	r3, #0
 80135b4:	80fb      	strh	r3, [r7, #6]
 80135b6:	e009      	b.n	80135cc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80135b8:	88fb      	ldrh	r3, [r7, #6]
 80135ba:	4a08      	ldr	r2, [pc, #32]	@ (80135dc <memp_init+0x30>)
 80135bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80135c0:	4618      	mov	r0, r3
 80135c2:	f7ff ffc3 	bl	801354c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80135c6:	88fb      	ldrh	r3, [r7, #6]
 80135c8:	3301      	adds	r3, #1
 80135ca:	80fb      	strh	r3, [r7, #6]
 80135cc:	88fb      	ldrh	r3, [r7, #6]
 80135ce:	2b0c      	cmp	r3, #12
 80135d0:	d9f2      	bls.n	80135b8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80135d2:	bf00      	nop
 80135d4:	bf00      	nop
 80135d6:	3708      	adds	r7, #8
 80135d8:	46bd      	mov	sp, r7
 80135da:	bd80      	pop	{r7, pc}
 80135dc:	08022278 	.word	0x08022278

080135e0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b084      	sub	sp, #16
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80135e8:	f009 fce6 	bl	801cfb8 <sys_arch_protect>
 80135ec:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	689b      	ldr	r3, [r3, #8]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80135f6:	68bb      	ldr	r3, [r7, #8]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d015      	beq.n	8013628 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	689b      	ldr	r3, [r3, #8]
 8013600:	68ba      	ldr	r2, [r7, #8]
 8013602:	6812      	ldr	r2, [r2, #0]
 8013604:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013606:	68bb      	ldr	r3, [r7, #8]
 8013608:	f003 0303 	and.w	r3, r3, #3
 801360c:	2b00      	cmp	r3, #0
 801360e:	d006      	beq.n	801361e <do_memp_malloc_pool+0x3e>
 8013610:	4b09      	ldr	r3, [pc, #36]	@ (8013638 <do_memp_malloc_pool+0x58>)
 8013612:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8013616:	4909      	ldr	r1, [pc, #36]	@ (801363c <do_memp_malloc_pool+0x5c>)
 8013618:	4809      	ldr	r0, [pc, #36]	@ (8013640 <do_memp_malloc_pool+0x60>)
 801361a:	f00a fd39 	bl	801e090 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801361e:	68f8      	ldr	r0, [r7, #12]
 8013620:	f009 fcd8 	bl	801cfd4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013624:	68bb      	ldr	r3, [r7, #8]
 8013626:	e003      	b.n	8013630 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013628:	68f8      	ldr	r0, [r7, #12]
 801362a:	f009 fcd3 	bl	801cfd4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801362e:	2300      	movs	r3, #0
}
 8013630:	4618      	mov	r0, r3
 8013632:	3710      	adds	r7, #16
 8013634:	46bd      	mov	sp, r7
 8013636:	bd80      	pop	{r7, pc}
 8013638:	0801f59c 	.word	0x0801f59c
 801363c:	0801f5cc 	.word	0x0801f5cc
 8013640:	0801f5f0 	.word	0x0801f5f0

08013644 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b082      	sub	sp, #8
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d106      	bne.n	8013660 <memp_malloc_pool+0x1c>
 8013652:	4b0a      	ldr	r3, [pc, #40]	@ (801367c <memp_malloc_pool+0x38>)
 8013654:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8013658:	4909      	ldr	r1, [pc, #36]	@ (8013680 <memp_malloc_pool+0x3c>)
 801365a:	480a      	ldr	r0, [pc, #40]	@ (8013684 <memp_malloc_pool+0x40>)
 801365c:	f00a fd18 	bl	801e090 <iprintf>
  if (desc == NULL) {
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d101      	bne.n	801366a <memp_malloc_pool+0x26>
    return NULL;
 8013666:	2300      	movs	r3, #0
 8013668:	e003      	b.n	8013672 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801366a:	6878      	ldr	r0, [r7, #4]
 801366c:	f7ff ffb8 	bl	80135e0 <do_memp_malloc_pool>
 8013670:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8013672:	4618      	mov	r0, r3
 8013674:	3708      	adds	r7, #8
 8013676:	46bd      	mov	sp, r7
 8013678:	bd80      	pop	{r7, pc}
 801367a:	bf00      	nop
 801367c:	0801f59c 	.word	0x0801f59c
 8013680:	0801f618 	.word	0x0801f618
 8013684:	0801f5f0 	.word	0x0801f5f0

08013688 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013688:	b580      	push	{r7, lr}
 801368a:	b084      	sub	sp, #16
 801368c:	af00      	add	r7, sp, #0
 801368e:	4603      	mov	r3, r0
 8013690:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8013692:	79fb      	ldrb	r3, [r7, #7]
 8013694:	2b0c      	cmp	r3, #12
 8013696:	d908      	bls.n	80136aa <memp_malloc+0x22>
 8013698:	4b0a      	ldr	r3, [pc, #40]	@ (80136c4 <memp_malloc+0x3c>)
 801369a:	f240 1257 	movw	r2, #343	@ 0x157
 801369e:	490a      	ldr	r1, [pc, #40]	@ (80136c8 <memp_malloc+0x40>)
 80136a0:	480a      	ldr	r0, [pc, #40]	@ (80136cc <memp_malloc+0x44>)
 80136a2:	f00a fcf5 	bl	801e090 <iprintf>
 80136a6:	2300      	movs	r3, #0
 80136a8:	e008      	b.n	80136bc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80136aa:	79fb      	ldrb	r3, [r7, #7]
 80136ac:	4a08      	ldr	r2, [pc, #32]	@ (80136d0 <memp_malloc+0x48>)
 80136ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136b2:	4618      	mov	r0, r3
 80136b4:	f7ff ff94 	bl	80135e0 <do_memp_malloc_pool>
 80136b8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80136ba:	68fb      	ldr	r3, [r7, #12]
}
 80136bc:	4618      	mov	r0, r3
 80136be:	3710      	adds	r7, #16
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bd80      	pop	{r7, pc}
 80136c4:	0801f59c 	.word	0x0801f59c
 80136c8:	0801f62c 	.word	0x0801f62c
 80136cc:	0801f5f0 	.word	0x0801f5f0
 80136d0:	08022278 	.word	0x08022278

080136d4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b084      	sub	sp, #16
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
 80136dc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80136de:	683b      	ldr	r3, [r7, #0]
 80136e0:	f003 0303 	and.w	r3, r3, #3
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d006      	beq.n	80136f6 <do_memp_free_pool+0x22>
 80136e8:	4b0d      	ldr	r3, [pc, #52]	@ (8013720 <do_memp_free_pool+0x4c>)
 80136ea:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80136ee:	490d      	ldr	r1, [pc, #52]	@ (8013724 <do_memp_free_pool+0x50>)
 80136f0:	480d      	ldr	r0, [pc, #52]	@ (8013728 <do_memp_free_pool+0x54>)
 80136f2:	f00a fccd 	bl	801e090 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80136f6:	683b      	ldr	r3, [r7, #0]
 80136f8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80136fa:	f009 fc5d 	bl	801cfb8 <sys_arch_protect>
 80136fe:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	689b      	ldr	r3, [r3, #8]
 8013704:	681a      	ldr	r2, [r3, #0]
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	689b      	ldr	r3, [r3, #8]
 801370e:	68fa      	ldr	r2, [r7, #12]
 8013710:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8013712:	68b8      	ldr	r0, [r7, #8]
 8013714:	f009 fc5e 	bl	801cfd4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013718:	bf00      	nop
 801371a:	3710      	adds	r7, #16
 801371c:	46bd      	mov	sp, r7
 801371e:	bd80      	pop	{r7, pc}
 8013720:	0801f59c 	.word	0x0801f59c
 8013724:	0801f64c 	.word	0x0801f64c
 8013728:	0801f5f0 	.word	0x0801f5f0

0801372c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b082      	sub	sp, #8
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
 8013734:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d106      	bne.n	801374a <memp_free_pool+0x1e>
 801373c:	4b0a      	ldr	r3, [pc, #40]	@ (8013768 <memp_free_pool+0x3c>)
 801373e:	f240 1295 	movw	r2, #405	@ 0x195
 8013742:	490a      	ldr	r1, [pc, #40]	@ (801376c <memp_free_pool+0x40>)
 8013744:	480a      	ldr	r0, [pc, #40]	@ (8013770 <memp_free_pool+0x44>)
 8013746:	f00a fca3 	bl	801e090 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d007      	beq.n	8013760 <memp_free_pool+0x34>
 8013750:	683b      	ldr	r3, [r7, #0]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d004      	beq.n	8013760 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8013756:	6839      	ldr	r1, [r7, #0]
 8013758:	6878      	ldr	r0, [r7, #4]
 801375a:	f7ff ffbb 	bl	80136d4 <do_memp_free_pool>
 801375e:	e000      	b.n	8013762 <memp_free_pool+0x36>
    return;
 8013760:	bf00      	nop
}
 8013762:	3708      	adds	r7, #8
 8013764:	46bd      	mov	sp, r7
 8013766:	bd80      	pop	{r7, pc}
 8013768:	0801f59c 	.word	0x0801f59c
 801376c:	0801f618 	.word	0x0801f618
 8013770:	0801f5f0 	.word	0x0801f5f0

08013774 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013774:	b580      	push	{r7, lr}
 8013776:	b082      	sub	sp, #8
 8013778:	af00      	add	r7, sp, #0
 801377a:	4603      	mov	r3, r0
 801377c:	6039      	str	r1, [r7, #0]
 801377e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013780:	79fb      	ldrb	r3, [r7, #7]
 8013782:	2b0c      	cmp	r3, #12
 8013784:	d907      	bls.n	8013796 <memp_free+0x22>
 8013786:	4b0c      	ldr	r3, [pc, #48]	@ (80137b8 <memp_free+0x44>)
 8013788:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 801378c:	490b      	ldr	r1, [pc, #44]	@ (80137bc <memp_free+0x48>)
 801378e:	480c      	ldr	r0, [pc, #48]	@ (80137c0 <memp_free+0x4c>)
 8013790:	f00a fc7e 	bl	801e090 <iprintf>
 8013794:	e00c      	b.n	80137b0 <memp_free+0x3c>

  if (mem == NULL) {
 8013796:	683b      	ldr	r3, [r7, #0]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d008      	beq.n	80137ae <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801379c:	79fb      	ldrb	r3, [r7, #7]
 801379e:	4a09      	ldr	r2, [pc, #36]	@ (80137c4 <memp_free+0x50>)
 80137a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80137a4:	6839      	ldr	r1, [r7, #0]
 80137a6:	4618      	mov	r0, r3
 80137a8:	f7ff ff94 	bl	80136d4 <do_memp_free_pool>
 80137ac:	e000      	b.n	80137b0 <memp_free+0x3c>
    return;
 80137ae:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80137b0:	3708      	adds	r7, #8
 80137b2:	46bd      	mov	sp, r7
 80137b4:	bd80      	pop	{r7, pc}
 80137b6:	bf00      	nop
 80137b8:	0801f59c 	.word	0x0801f59c
 80137bc:	0801f66c 	.word	0x0801f66c
 80137c0:	0801f5f0 	.word	0x0801f5f0
 80137c4:	08022278 	.word	0x08022278

080137c8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80137c8:	b480      	push	{r7}
 80137ca:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80137cc:	bf00      	nop
 80137ce:	46bd      	mov	sp, r7
 80137d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d4:	4770      	bx	lr
	...

080137d8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b086      	sub	sp, #24
 80137dc:	af00      	add	r7, sp, #0
 80137de:	60f8      	str	r0, [r7, #12]
 80137e0:	60b9      	str	r1, [r7, #8]
 80137e2:	607a      	str	r2, [r7, #4]
 80137e4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d108      	bne.n	80137fe <netif_add+0x26>
 80137ec:	4b57      	ldr	r3, [pc, #348]	@ (801394c <netif_add+0x174>)
 80137ee:	f240 1227 	movw	r2, #295	@ 0x127
 80137f2:	4957      	ldr	r1, [pc, #348]	@ (8013950 <netif_add+0x178>)
 80137f4:	4857      	ldr	r0, [pc, #348]	@ (8013954 <netif_add+0x17c>)
 80137f6:	f00a fc4b 	bl	801e090 <iprintf>
 80137fa:	2300      	movs	r3, #0
 80137fc:	e0a2      	b.n	8013944 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80137fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013800:	2b00      	cmp	r3, #0
 8013802:	d108      	bne.n	8013816 <netif_add+0x3e>
 8013804:	4b51      	ldr	r3, [pc, #324]	@ (801394c <netif_add+0x174>)
 8013806:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801380a:	4953      	ldr	r1, [pc, #332]	@ (8013958 <netif_add+0x180>)
 801380c:	4851      	ldr	r0, [pc, #324]	@ (8013954 <netif_add+0x17c>)
 801380e:	f00a fc3f 	bl	801e090 <iprintf>
 8013812:	2300      	movs	r3, #0
 8013814:	e096      	b.n	8013944 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013816:	68bb      	ldr	r3, [r7, #8]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d101      	bne.n	8013820 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801381c:	4b4f      	ldr	r3, [pc, #316]	@ (801395c <netif_add+0x184>)
 801381e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d101      	bne.n	801382a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013826:	4b4d      	ldr	r3, [pc, #308]	@ (801395c <netif_add+0x184>)
 8013828:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801382a:	683b      	ldr	r3, [r7, #0]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d101      	bne.n	8013834 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013830:	4b4a      	ldr	r3, [pc, #296]	@ (801395c <netif_add+0x184>)
 8013832:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	2200      	movs	r2, #0
 8013838:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	2200      	movs	r2, #0
 801383e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	2200      	movs	r2, #0
 8013844:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013846:	68fb      	ldr	r3, [r7, #12]
 8013848:	4a45      	ldr	r2, [pc, #276]	@ (8013960 <netif_add+0x188>)
 801384a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	2200      	movs	r2, #0
 8013850:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	2200      	movs	r2, #0
 8013856:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	2200      	movs	r2, #0
 801385e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	6a3a      	ldr	r2, [r7, #32]
 8013864:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8013866:	4b3f      	ldr	r3, [pc, #252]	@ (8013964 <netif_add+0x18c>)
 8013868:	781a      	ldrb	r2, [r3, #0]
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013874:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013876:	683b      	ldr	r3, [r7, #0]
 8013878:	687a      	ldr	r2, [r7, #4]
 801387a:	68b9      	ldr	r1, [r7, #8]
 801387c:	68f8      	ldr	r0, [r7, #12]
 801387e:	f000 f913 	bl	8013aa8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8013882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013884:	68f8      	ldr	r0, [r7, #12]
 8013886:	4798      	blx	r3
 8013888:	4603      	mov	r3, r0
 801388a:	2b00      	cmp	r3, #0
 801388c:	d001      	beq.n	8013892 <netif_add+0xba>
    return NULL;
 801388e:	2300      	movs	r3, #0
 8013890:	e058      	b.n	8013944 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013898:	2bff      	cmp	r3, #255	@ 0xff
 801389a:	d103      	bne.n	80138a4 <netif_add+0xcc>
        netif->num = 0;
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	2200      	movs	r2, #0
 80138a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80138a4:	2300      	movs	r3, #0
 80138a6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80138a8:	4b2f      	ldr	r3, [pc, #188]	@ (8013968 <netif_add+0x190>)
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	617b      	str	r3, [r7, #20]
 80138ae:	e02b      	b.n	8013908 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80138b0:	697a      	ldr	r2, [r7, #20]
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	429a      	cmp	r2, r3
 80138b6:	d106      	bne.n	80138c6 <netif_add+0xee>
 80138b8:	4b24      	ldr	r3, [pc, #144]	@ (801394c <netif_add+0x174>)
 80138ba:	f240 128b 	movw	r2, #395	@ 0x18b
 80138be:	492b      	ldr	r1, [pc, #172]	@ (801396c <netif_add+0x194>)
 80138c0:	4824      	ldr	r0, [pc, #144]	@ (8013954 <netif_add+0x17c>)
 80138c2:	f00a fbe5 	bl	801e090 <iprintf>
        num_netifs++;
 80138c6:	693b      	ldr	r3, [r7, #16]
 80138c8:	3301      	adds	r3, #1
 80138ca:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80138cc:	693b      	ldr	r3, [r7, #16]
 80138ce:	2bff      	cmp	r3, #255	@ 0xff
 80138d0:	dd06      	ble.n	80138e0 <netif_add+0x108>
 80138d2:	4b1e      	ldr	r3, [pc, #120]	@ (801394c <netif_add+0x174>)
 80138d4:	f240 128d 	movw	r2, #397	@ 0x18d
 80138d8:	4925      	ldr	r1, [pc, #148]	@ (8013970 <netif_add+0x198>)
 80138da:	481e      	ldr	r0, [pc, #120]	@ (8013954 <netif_add+0x17c>)
 80138dc:	f00a fbd8 	bl	801e090 <iprintf>
        if (netif2->num == netif->num) {
 80138e0:	697b      	ldr	r3, [r7, #20]
 80138e2:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80138ec:	429a      	cmp	r2, r3
 80138ee:	d108      	bne.n	8013902 <netif_add+0x12a>
          netif->num++;
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80138f6:	3301      	adds	r3, #1
 80138f8:	b2da      	uxtb	r2, r3
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8013900:	e005      	b.n	801390e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013902:	697b      	ldr	r3, [r7, #20]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	617b      	str	r3, [r7, #20]
 8013908:	697b      	ldr	r3, [r7, #20]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d1d0      	bne.n	80138b0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801390e:	697b      	ldr	r3, [r7, #20]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d1be      	bne.n	8013892 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801391a:	2bfe      	cmp	r3, #254	@ 0xfe
 801391c:	d103      	bne.n	8013926 <netif_add+0x14e>
    netif_num = 0;
 801391e:	4b11      	ldr	r3, [pc, #68]	@ (8013964 <netif_add+0x18c>)
 8013920:	2200      	movs	r2, #0
 8013922:	701a      	strb	r2, [r3, #0]
 8013924:	e006      	b.n	8013934 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801392c:	3301      	adds	r3, #1
 801392e:	b2da      	uxtb	r2, r3
 8013930:	4b0c      	ldr	r3, [pc, #48]	@ (8013964 <netif_add+0x18c>)
 8013932:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8013934:	4b0c      	ldr	r3, [pc, #48]	@ (8013968 <netif_add+0x190>)
 8013936:	681a      	ldr	r2, [r3, #0]
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801393c:	4a0a      	ldr	r2, [pc, #40]	@ (8013968 <netif_add+0x190>)
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8013942:	68fb      	ldr	r3, [r7, #12]
}
 8013944:	4618      	mov	r0, r3
 8013946:	3718      	adds	r7, #24
 8013948:	46bd      	mov	sp, r7
 801394a:	bd80      	pop	{r7, pc}
 801394c:	0801f688 	.word	0x0801f688
 8013950:	0801f71c 	.word	0x0801f71c
 8013954:	0801f6d8 	.word	0x0801f6d8
 8013958:	0801f738 	.word	0x0801f738
 801395c:	080222ec 	.word	0x080222ec
 8013960:	08013d83 	.word	0x08013d83
 8013964:	200277ac 	.word	0x200277ac
 8013968:	200277a4 	.word	0x200277a4
 801396c:	0801f75c 	.word	0x0801f75c
 8013970:	0801f770 	.word	0x0801f770

08013974 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b082      	sub	sp, #8
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
 801397c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801397e:	6839      	ldr	r1, [r7, #0]
 8013980:	6878      	ldr	r0, [r7, #4]
 8013982:	f002 fb8f 	bl	80160a4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8013986:	6839      	ldr	r1, [r7, #0]
 8013988:	6878      	ldr	r0, [r7, #4]
 801398a:	f006 ff4b 	bl	801a824 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801398e:	bf00      	nop
 8013990:	3708      	adds	r7, #8
 8013992:	46bd      	mov	sp, r7
 8013994:	bd80      	pop	{r7, pc}
	...

08013998 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8013998:	b580      	push	{r7, lr}
 801399a:	b086      	sub	sp, #24
 801399c:	af00      	add	r7, sp, #0
 801399e:	60f8      	str	r0, [r7, #12]
 80139a0:	60b9      	str	r1, [r7, #8]
 80139a2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80139a4:	68bb      	ldr	r3, [r7, #8]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d106      	bne.n	80139b8 <netif_do_set_ipaddr+0x20>
 80139aa:	4b1d      	ldr	r3, [pc, #116]	@ (8013a20 <netif_do_set_ipaddr+0x88>)
 80139ac:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80139b0:	491c      	ldr	r1, [pc, #112]	@ (8013a24 <netif_do_set_ipaddr+0x8c>)
 80139b2:	481d      	ldr	r0, [pc, #116]	@ (8013a28 <netif_do_set_ipaddr+0x90>)
 80139b4:	f00a fb6c 	bl	801e090 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d106      	bne.n	80139cc <netif_do_set_ipaddr+0x34>
 80139be:	4b18      	ldr	r3, [pc, #96]	@ (8013a20 <netif_do_set_ipaddr+0x88>)
 80139c0:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80139c4:	4917      	ldr	r1, [pc, #92]	@ (8013a24 <netif_do_set_ipaddr+0x8c>)
 80139c6:	4818      	ldr	r0, [pc, #96]	@ (8013a28 <netif_do_set_ipaddr+0x90>)
 80139c8:	f00a fb62 	bl	801e090 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80139cc:	68bb      	ldr	r3, [r7, #8]
 80139ce:	681a      	ldr	r2, [r3, #0]
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	3304      	adds	r3, #4
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	429a      	cmp	r2, r3
 80139d8:	d01c      	beq.n	8013a14 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80139da:	68bb      	ldr	r3, [r7, #8]
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	3304      	adds	r3, #4
 80139e4:	681a      	ldr	r2, [r3, #0]
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80139ea:	f107 0314 	add.w	r3, r7, #20
 80139ee:	4619      	mov	r1, r3
 80139f0:	6878      	ldr	r0, [r7, #4]
 80139f2:	f7ff ffbf 	bl	8013974 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80139f6:	68bb      	ldr	r3, [r7, #8]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d002      	beq.n	8013a02 <netif_do_set_ipaddr+0x6a>
 80139fc:	68bb      	ldr	r3, [r7, #8]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	e000      	b.n	8013a04 <netif_do_set_ipaddr+0x6c>
 8013a02:	2300      	movs	r3, #0
 8013a04:	68fa      	ldr	r2, [r7, #12]
 8013a06:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013a08:	2101      	movs	r1, #1
 8013a0a:	68f8      	ldr	r0, [r7, #12]
 8013a0c:	f000 f8d2 	bl	8013bb4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8013a10:	2301      	movs	r3, #1
 8013a12:	e000      	b.n	8013a16 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8013a14:	2300      	movs	r3, #0
}
 8013a16:	4618      	mov	r0, r3
 8013a18:	3718      	adds	r7, #24
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	bd80      	pop	{r7, pc}
 8013a1e:	bf00      	nop
 8013a20:	0801f688 	.word	0x0801f688
 8013a24:	0801f7a0 	.word	0x0801f7a0
 8013a28:	0801f6d8 	.word	0x0801f6d8

08013a2c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8013a2c:	b480      	push	{r7}
 8013a2e:	b085      	sub	sp, #20
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	60f8      	str	r0, [r7, #12]
 8013a34:	60b9      	str	r1, [r7, #8]
 8013a36:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013a38:	68bb      	ldr	r3, [r7, #8]
 8013a3a:	681a      	ldr	r2, [r3, #0]
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	3308      	adds	r3, #8
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	429a      	cmp	r2, r3
 8013a44:	d00a      	beq.n	8013a5c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8013a46:	68bb      	ldr	r3, [r7, #8]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d002      	beq.n	8013a52 <netif_do_set_netmask+0x26>
 8013a4c:	68bb      	ldr	r3, [r7, #8]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	e000      	b.n	8013a54 <netif_do_set_netmask+0x28>
 8013a52:	2300      	movs	r3, #0
 8013a54:	68fa      	ldr	r2, [r7, #12]
 8013a56:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8013a58:	2301      	movs	r3, #1
 8013a5a:	e000      	b.n	8013a5e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8013a5c:	2300      	movs	r3, #0
}
 8013a5e:	4618      	mov	r0, r3
 8013a60:	3714      	adds	r7, #20
 8013a62:	46bd      	mov	sp, r7
 8013a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a68:	4770      	bx	lr

08013a6a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8013a6a:	b480      	push	{r7}
 8013a6c:	b085      	sub	sp, #20
 8013a6e:	af00      	add	r7, sp, #0
 8013a70:	60f8      	str	r0, [r7, #12]
 8013a72:	60b9      	str	r1, [r7, #8]
 8013a74:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8013a76:	68bb      	ldr	r3, [r7, #8]
 8013a78:	681a      	ldr	r2, [r3, #0]
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	330c      	adds	r3, #12
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	429a      	cmp	r2, r3
 8013a82:	d00a      	beq.n	8013a9a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013a84:	68bb      	ldr	r3, [r7, #8]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d002      	beq.n	8013a90 <netif_do_set_gw+0x26>
 8013a8a:	68bb      	ldr	r3, [r7, #8]
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	e000      	b.n	8013a92 <netif_do_set_gw+0x28>
 8013a90:	2300      	movs	r3, #0
 8013a92:	68fa      	ldr	r2, [r7, #12]
 8013a94:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8013a96:	2301      	movs	r3, #1
 8013a98:	e000      	b.n	8013a9c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8013a9a:	2300      	movs	r3, #0
}
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	3714      	adds	r7, #20
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa6:	4770      	bx	lr

08013aa8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b088      	sub	sp, #32
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	60f8      	str	r0, [r7, #12]
 8013ab0:	60b9      	str	r1, [r7, #8]
 8013ab2:	607a      	str	r2, [r7, #4]
 8013ab4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8013aba:	2300      	movs	r3, #0
 8013abc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013abe:	68bb      	ldr	r3, [r7, #8]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d101      	bne.n	8013ac8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8013ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8013b38 <netif_set_addr+0x90>)
 8013ac6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d101      	bne.n	8013ad2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8013ace:	4b1a      	ldr	r3, [pc, #104]	@ (8013b38 <netif_set_addr+0x90>)
 8013ad0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013ad2:	683b      	ldr	r3, [r7, #0]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d101      	bne.n	8013adc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8013ad8:	4b17      	ldr	r3, [pc, #92]	@ (8013b38 <netif_set_addr+0x90>)
 8013ada:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8013adc:	68bb      	ldr	r3, [r7, #8]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d003      	beq.n	8013aea <netif_set_addr+0x42>
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d101      	bne.n	8013aee <netif_set_addr+0x46>
 8013aea:	2301      	movs	r3, #1
 8013aec:	e000      	b.n	8013af0 <netif_set_addr+0x48>
 8013aee:	2300      	movs	r3, #0
 8013af0:	617b      	str	r3, [r7, #20]
  if (remove) {
 8013af2:	697b      	ldr	r3, [r7, #20]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d006      	beq.n	8013b06 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013af8:	f107 0310 	add.w	r3, r7, #16
 8013afc:	461a      	mov	r2, r3
 8013afe:	68b9      	ldr	r1, [r7, #8]
 8013b00:	68f8      	ldr	r0, [r7, #12]
 8013b02:	f7ff ff49 	bl	8013998 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8013b06:	69fa      	ldr	r2, [r7, #28]
 8013b08:	6879      	ldr	r1, [r7, #4]
 8013b0a:	68f8      	ldr	r0, [r7, #12]
 8013b0c:	f7ff ff8e 	bl	8013a2c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8013b10:	69ba      	ldr	r2, [r7, #24]
 8013b12:	6839      	ldr	r1, [r7, #0]
 8013b14:	68f8      	ldr	r0, [r7, #12]
 8013b16:	f7ff ffa8 	bl	8013a6a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8013b1a:	697b      	ldr	r3, [r7, #20]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d106      	bne.n	8013b2e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013b20:	f107 0310 	add.w	r3, r7, #16
 8013b24:	461a      	mov	r2, r3
 8013b26:	68b9      	ldr	r1, [r7, #8]
 8013b28:	68f8      	ldr	r0, [r7, #12]
 8013b2a:	f7ff ff35 	bl	8013998 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8013b2e:	bf00      	nop
 8013b30:	3720      	adds	r7, #32
 8013b32:	46bd      	mov	sp, r7
 8013b34:	bd80      	pop	{r7, pc}
 8013b36:	bf00      	nop
 8013b38:	080222ec 	.word	0x080222ec

08013b3c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8013b3c:	b480      	push	{r7}
 8013b3e:	b083      	sub	sp, #12
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013b44:	4a04      	ldr	r2, [pc, #16]	@ (8013b58 <netif_set_default+0x1c>)
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8013b4a:	bf00      	nop
 8013b4c:	370c      	adds	r7, #12
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b54:	4770      	bx	lr
 8013b56:	bf00      	nop
 8013b58:	200277a8 	.word	0x200277a8

08013b5c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b082      	sub	sp, #8
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d107      	bne.n	8013b7a <netif_set_up+0x1e>
 8013b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8013ba8 <netif_set_up+0x4c>)
 8013b6c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8013b70:	490e      	ldr	r1, [pc, #56]	@ (8013bac <netif_set_up+0x50>)
 8013b72:	480f      	ldr	r0, [pc, #60]	@ (8013bb0 <netif_set_up+0x54>)
 8013b74:	f00a fa8c 	bl	801e090 <iprintf>
 8013b78:	e013      	b.n	8013ba2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013b80:	f003 0301 	and.w	r3, r3, #1
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d10c      	bne.n	8013ba2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013b8e:	f043 0301 	orr.w	r3, r3, #1
 8013b92:	b2da      	uxtb	r2, r3
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013b9a:	2103      	movs	r1, #3
 8013b9c:	6878      	ldr	r0, [r7, #4]
 8013b9e:	f000 f809 	bl	8013bb4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8013ba2:	3708      	adds	r7, #8
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	bd80      	pop	{r7, pc}
 8013ba8:	0801f688 	.word	0x0801f688
 8013bac:	0801f810 	.word	0x0801f810
 8013bb0:	0801f6d8 	.word	0x0801f6d8

08013bb4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b082      	sub	sp, #8
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
 8013bbc:	460b      	mov	r3, r1
 8013bbe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d106      	bne.n	8013bd4 <netif_issue_reports+0x20>
 8013bc6:	4b18      	ldr	r3, [pc, #96]	@ (8013c28 <netif_issue_reports+0x74>)
 8013bc8:	f240 326d 	movw	r2, #877	@ 0x36d
 8013bcc:	4917      	ldr	r1, [pc, #92]	@ (8013c2c <netif_issue_reports+0x78>)
 8013bce:	4818      	ldr	r0, [pc, #96]	@ (8013c30 <netif_issue_reports+0x7c>)
 8013bd0:	f00a fa5e 	bl	801e090 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013bda:	f003 0304 	and.w	r3, r3, #4
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d01e      	beq.n	8013c20 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013be8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d017      	beq.n	8013c20 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013bf0:	78fb      	ldrb	r3, [r7, #3]
 8013bf2:	f003 0301 	and.w	r3, r3, #1
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d013      	beq.n	8013c22 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	3304      	adds	r3, #4
 8013bfe:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d00e      	beq.n	8013c22 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013c0a:	f003 0308 	and.w	r3, r3, #8
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d007      	beq.n	8013c22 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	3304      	adds	r3, #4
 8013c16:	4619      	mov	r1, r3
 8013c18:	6878      	ldr	r0, [r7, #4]
 8013c1a:	f007 fd6d 	bl	801b6f8 <etharp_request>
 8013c1e:	e000      	b.n	8013c22 <netif_issue_reports+0x6e>
    return;
 8013c20:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8013c22:	3708      	adds	r7, #8
 8013c24:	46bd      	mov	sp, r7
 8013c26:	bd80      	pop	{r7, pc}
 8013c28:	0801f688 	.word	0x0801f688
 8013c2c:	0801f82c 	.word	0x0801f82c
 8013c30:	0801f6d8 	.word	0x0801f6d8

08013c34 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8013c34:	b580      	push	{r7, lr}
 8013c36:	b082      	sub	sp, #8
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d107      	bne.n	8013c52 <netif_set_down+0x1e>
 8013c42:	4b12      	ldr	r3, [pc, #72]	@ (8013c8c <netif_set_down+0x58>)
 8013c44:	f240 329b 	movw	r2, #923	@ 0x39b
 8013c48:	4911      	ldr	r1, [pc, #68]	@ (8013c90 <netif_set_down+0x5c>)
 8013c4a:	4812      	ldr	r0, [pc, #72]	@ (8013c94 <netif_set_down+0x60>)
 8013c4c:	f00a fa20 	bl	801e090 <iprintf>
 8013c50:	e019      	b.n	8013c86 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013c58:	f003 0301 	and.w	r3, r3, #1
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d012      	beq.n	8013c86 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013c66:	f023 0301 	bic.w	r3, r3, #1
 8013c6a:	b2da      	uxtb	r2, r3
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013c78:	f003 0308 	and.w	r3, r3, #8
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d002      	beq.n	8013c86 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8013c80:	6878      	ldr	r0, [r7, #4]
 8013c82:	f007 f8f7 	bl	801ae74 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8013c86:	3708      	adds	r7, #8
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	bd80      	pop	{r7, pc}
 8013c8c:	0801f688 	.word	0x0801f688
 8013c90:	0801f850 	.word	0x0801f850
 8013c94:	0801f6d8 	.word	0x0801f6d8

08013c98 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b082      	sub	sp, #8
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d107      	bne.n	8013cb6 <netif_set_link_up+0x1e>
 8013ca6:	4b13      	ldr	r3, [pc, #76]	@ (8013cf4 <netif_set_link_up+0x5c>)
 8013ca8:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8013cac:	4912      	ldr	r1, [pc, #72]	@ (8013cf8 <netif_set_link_up+0x60>)
 8013cae:	4813      	ldr	r0, [pc, #76]	@ (8013cfc <netif_set_link_up+0x64>)
 8013cb0:	f00a f9ee 	bl	801e090 <iprintf>
 8013cb4:	e01b      	b.n	8013cee <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013cbc:	f003 0304 	and.w	r3, r3, #4
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d114      	bne.n	8013cee <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013cca:	f043 0304 	orr.w	r3, r3, #4
 8013cce:	b2da      	uxtb	r2, r3
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013cd6:	2103      	movs	r1, #3
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f7ff ff6b 	bl	8013bb4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	69db      	ldr	r3, [r3, #28]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d003      	beq.n	8013cee <netif_set_link_up+0x56>
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	69db      	ldr	r3, [r3, #28]
 8013cea:	6878      	ldr	r0, [r7, #4]
 8013cec:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013cee:	3708      	adds	r7, #8
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	bd80      	pop	{r7, pc}
 8013cf4:	0801f688 	.word	0x0801f688
 8013cf8:	0801f870 	.word	0x0801f870
 8013cfc:	0801f6d8 	.word	0x0801f6d8

08013d00 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b082      	sub	sp, #8
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d107      	bne.n	8013d1e <netif_set_link_down+0x1e>
 8013d0e:	4b11      	ldr	r3, [pc, #68]	@ (8013d54 <netif_set_link_down+0x54>)
 8013d10:	f240 4206 	movw	r2, #1030	@ 0x406
 8013d14:	4910      	ldr	r1, [pc, #64]	@ (8013d58 <netif_set_link_down+0x58>)
 8013d16:	4811      	ldr	r0, [pc, #68]	@ (8013d5c <netif_set_link_down+0x5c>)
 8013d18:	f00a f9ba 	bl	801e090 <iprintf>
 8013d1c:	e017      	b.n	8013d4e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013d24:	f003 0304 	and.w	r3, r3, #4
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d010      	beq.n	8013d4e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013d32:	f023 0304 	bic.w	r3, r3, #4
 8013d36:	b2da      	uxtb	r2, r3
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	69db      	ldr	r3, [r3, #28]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d003      	beq.n	8013d4e <netif_set_link_down+0x4e>
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	69db      	ldr	r3, [r3, #28]
 8013d4a:	6878      	ldr	r0, [r7, #4]
 8013d4c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013d4e:	3708      	adds	r7, #8
 8013d50:	46bd      	mov	sp, r7
 8013d52:	bd80      	pop	{r7, pc}
 8013d54:	0801f688 	.word	0x0801f688
 8013d58:	0801f894 	.word	0x0801f894
 8013d5c:	0801f6d8 	.word	0x0801f6d8

08013d60 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8013d60:	b480      	push	{r7}
 8013d62:	b083      	sub	sp, #12
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
 8013d68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d002      	beq.n	8013d76 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	683a      	ldr	r2, [r7, #0]
 8013d74:	61da      	str	r2, [r3, #28]
  }
}
 8013d76:	bf00      	nop
 8013d78:	370c      	adds	r7, #12
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d80:	4770      	bx	lr

08013d82 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8013d82:	b480      	push	{r7}
 8013d84:	b085      	sub	sp, #20
 8013d86:	af00      	add	r7, sp, #0
 8013d88:	60f8      	str	r0, [r7, #12]
 8013d8a:	60b9      	str	r1, [r7, #8]
 8013d8c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8013d8e:	f06f 030b 	mvn.w	r3, #11
}
 8013d92:	4618      	mov	r0, r3
 8013d94:	3714      	adds	r7, #20
 8013d96:	46bd      	mov	sp, r7
 8013d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d9c:	4770      	bx	lr
	...

08013da0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8013da0:	b480      	push	{r7}
 8013da2:	b085      	sub	sp, #20
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	4603      	mov	r3, r0
 8013da8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8013daa:	79fb      	ldrb	r3, [r7, #7]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d013      	beq.n	8013dd8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8013db0:	4b0d      	ldr	r3, [pc, #52]	@ (8013de8 <netif_get_by_index+0x48>)
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	60fb      	str	r3, [r7, #12]
 8013db6:	e00c      	b.n	8013dd2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013dbe:	3301      	adds	r3, #1
 8013dc0:	b2db      	uxtb	r3, r3
 8013dc2:	79fa      	ldrb	r2, [r7, #7]
 8013dc4:	429a      	cmp	r2, r3
 8013dc6:	d101      	bne.n	8013dcc <netif_get_by_index+0x2c>
        return netif; /* found! */
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	e006      	b.n	8013dda <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	60fb      	str	r3, [r7, #12]
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d1ef      	bne.n	8013db8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8013dd8:	2300      	movs	r3, #0
}
 8013dda:	4618      	mov	r0, r3
 8013ddc:	3714      	adds	r7, #20
 8013dde:	46bd      	mov	sp, r7
 8013de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de4:	4770      	bx	lr
 8013de6:	bf00      	nop
 8013de8:	200277a4 	.word	0x200277a4

08013dec <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b082      	sub	sp, #8
 8013df0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8013df2:	f009 f8e1 	bl	801cfb8 <sys_arch_protect>
 8013df6:	6038      	str	r0, [r7, #0]
 8013df8:	4b0d      	ldr	r3, [pc, #52]	@ (8013e30 <pbuf_free_ooseq+0x44>)
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	701a      	strb	r2, [r3, #0]
 8013dfe:	6838      	ldr	r0, [r7, #0]
 8013e00:	f009 f8e8 	bl	801cfd4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013e04:	4b0b      	ldr	r3, [pc, #44]	@ (8013e34 <pbuf_free_ooseq+0x48>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	607b      	str	r3, [r7, #4]
 8013e0a:	e00a      	b.n	8013e22 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d003      	beq.n	8013e1c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013e14:	6878      	ldr	r0, [r7, #4]
 8013e16:	f002 f983 	bl	8016120 <tcp_free_ooseq>
      return;
 8013e1a:	e005      	b.n	8013e28 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	68db      	ldr	r3, [r3, #12]
 8013e20:	607b      	str	r3, [r7, #4]
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d1f1      	bne.n	8013e0c <pbuf_free_ooseq+0x20>
    }
  }
}
 8013e28:	3708      	adds	r7, #8
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	bd80      	pop	{r7, pc}
 8013e2e:	bf00      	nop
 8013e30:	200277ad 	.word	0x200277ad
 8013e34:	200277bc 	.word	0x200277bc

08013e38 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b082      	sub	sp, #8
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013e40:	f7ff ffd4 	bl	8013dec <pbuf_free_ooseq>
}
 8013e44:	bf00      	nop
 8013e46:	3708      	adds	r7, #8
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	bd80      	pop	{r7, pc}

08013e4c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b082      	sub	sp, #8
 8013e50:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8013e52:	f009 f8b1 	bl	801cfb8 <sys_arch_protect>
 8013e56:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013e58:	4b0f      	ldr	r3, [pc, #60]	@ (8013e98 <pbuf_pool_is_empty+0x4c>)
 8013e5a:	781b      	ldrb	r3, [r3, #0]
 8013e5c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8013e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8013e98 <pbuf_pool_is_empty+0x4c>)
 8013e60:	2201      	movs	r2, #1
 8013e62:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013e64:	6878      	ldr	r0, [r7, #4]
 8013e66:	f009 f8b5 	bl	801cfd4 <sys_arch_unprotect>

  if (!queued) {
 8013e6a:	78fb      	ldrb	r3, [r7, #3]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d10f      	bne.n	8013e90 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8013e70:	2100      	movs	r1, #0
 8013e72:	480a      	ldr	r0, [pc, #40]	@ (8013e9c <pbuf_pool_is_empty+0x50>)
 8013e74:	f7fe feaa 	bl	8012bcc <tcpip_try_callback>
 8013e78:	4603      	mov	r3, r0
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d008      	beq.n	8013e90 <pbuf_pool_is_empty+0x44>
 8013e7e:	f009 f89b 	bl	801cfb8 <sys_arch_protect>
 8013e82:	6078      	str	r0, [r7, #4]
 8013e84:	4b04      	ldr	r3, [pc, #16]	@ (8013e98 <pbuf_pool_is_empty+0x4c>)
 8013e86:	2200      	movs	r2, #0
 8013e88:	701a      	strb	r2, [r3, #0]
 8013e8a:	6878      	ldr	r0, [r7, #4]
 8013e8c:	f009 f8a2 	bl	801cfd4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013e90:	bf00      	nop
 8013e92:	3708      	adds	r7, #8
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd80      	pop	{r7, pc}
 8013e98:	200277ad 	.word	0x200277ad
 8013e9c:	08013e39 	.word	0x08013e39

08013ea0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8013ea0:	b480      	push	{r7}
 8013ea2:	b085      	sub	sp, #20
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	60f8      	str	r0, [r7, #12]
 8013ea8:	60b9      	str	r1, [r7, #8]
 8013eaa:	4611      	mov	r1, r2
 8013eac:	461a      	mov	r2, r3
 8013eae:	460b      	mov	r3, r1
 8013eb0:	80fb      	strh	r3, [r7, #6]
 8013eb2:	4613      	mov	r3, r2
 8013eb4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	2200      	movs	r2, #0
 8013eba:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	68ba      	ldr	r2, [r7, #8]
 8013ec0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	88fa      	ldrh	r2, [r7, #6]
 8013ec6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	88ba      	ldrh	r2, [r7, #4]
 8013ecc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8013ece:	8b3b      	ldrh	r3, [r7, #24]
 8013ed0:	b2da      	uxtb	r2, r3
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	7f3a      	ldrb	r2, [r7, #28]
 8013eda:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	2201      	movs	r2, #1
 8013ee0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	2200      	movs	r2, #0
 8013ee6:	73da      	strb	r2, [r3, #15]
}
 8013ee8:	bf00      	nop
 8013eea:	3714      	adds	r7, #20
 8013eec:	46bd      	mov	sp, r7
 8013eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef2:	4770      	bx	lr

08013ef4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b08c      	sub	sp, #48	@ 0x30
 8013ef8:	af02      	add	r7, sp, #8
 8013efa:	4603      	mov	r3, r0
 8013efc:	71fb      	strb	r3, [r7, #7]
 8013efe:	460b      	mov	r3, r1
 8013f00:	80bb      	strh	r3, [r7, #4]
 8013f02:	4613      	mov	r3, r2
 8013f04:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8013f06:	79fb      	ldrb	r3, [r7, #7]
 8013f08:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8013f0a:	887b      	ldrh	r3, [r7, #2]
 8013f0c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013f10:	d07f      	beq.n	8014012 <pbuf_alloc+0x11e>
 8013f12:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013f16:	f300 80c8 	bgt.w	80140aa <pbuf_alloc+0x1b6>
 8013f1a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8013f1e:	d010      	beq.n	8013f42 <pbuf_alloc+0x4e>
 8013f20:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8013f24:	f300 80c1 	bgt.w	80140aa <pbuf_alloc+0x1b6>
 8013f28:	2b01      	cmp	r3, #1
 8013f2a:	d002      	beq.n	8013f32 <pbuf_alloc+0x3e>
 8013f2c:	2b41      	cmp	r3, #65	@ 0x41
 8013f2e:	f040 80bc 	bne.w	80140aa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8013f32:	887a      	ldrh	r2, [r7, #2]
 8013f34:	88bb      	ldrh	r3, [r7, #4]
 8013f36:	4619      	mov	r1, r3
 8013f38:	2000      	movs	r0, #0
 8013f3a:	f000 f8d1 	bl	80140e0 <pbuf_alloc_reference>
 8013f3e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8013f40:	e0bd      	b.n	80140be <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8013f42:	2300      	movs	r3, #0
 8013f44:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8013f46:	2300      	movs	r3, #0
 8013f48:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8013f4a:	88bb      	ldrh	r3, [r7, #4]
 8013f4c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8013f4e:	200c      	movs	r0, #12
 8013f50:	f7ff fb9a 	bl	8013688 <memp_malloc>
 8013f54:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8013f56:	693b      	ldr	r3, [r7, #16]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d109      	bne.n	8013f70 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8013f5c:	f7ff ff76 	bl	8013e4c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8013f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d002      	beq.n	8013f6c <pbuf_alloc+0x78>
            pbuf_free(p);
 8013f66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013f68:	f000 faa8 	bl	80144bc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	e0a7      	b.n	80140c0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8013f70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013f72:	3303      	adds	r3, #3
 8013f74:	b29b      	uxth	r3, r3
 8013f76:	f023 0303 	bic.w	r3, r3, #3
 8013f7a:	b29b      	uxth	r3, r3
 8013f7c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8013f80:	b29b      	uxth	r3, r3
 8013f82:	8b7a      	ldrh	r2, [r7, #26]
 8013f84:	4293      	cmp	r3, r2
 8013f86:	bf28      	it	cs
 8013f88:	4613      	movcs	r3, r2
 8013f8a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8013f8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013f8e:	3310      	adds	r3, #16
 8013f90:	693a      	ldr	r2, [r7, #16]
 8013f92:	4413      	add	r3, r2
 8013f94:	3303      	adds	r3, #3
 8013f96:	f023 0303 	bic.w	r3, r3, #3
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	89f9      	ldrh	r1, [r7, #14]
 8013f9e:	8b7a      	ldrh	r2, [r7, #26]
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	9301      	str	r3, [sp, #4]
 8013fa4:	887b      	ldrh	r3, [r7, #2]
 8013fa6:	9300      	str	r3, [sp, #0]
 8013fa8:	460b      	mov	r3, r1
 8013faa:	4601      	mov	r1, r0
 8013fac:	6938      	ldr	r0, [r7, #16]
 8013fae:	f7ff ff77 	bl	8013ea0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8013fb2:	693b      	ldr	r3, [r7, #16]
 8013fb4:	685b      	ldr	r3, [r3, #4]
 8013fb6:	f003 0303 	and.w	r3, r3, #3
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d006      	beq.n	8013fcc <pbuf_alloc+0xd8>
 8013fbe:	4b42      	ldr	r3, [pc, #264]	@ (80140c8 <pbuf_alloc+0x1d4>)
 8013fc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013fc4:	4941      	ldr	r1, [pc, #260]	@ (80140cc <pbuf_alloc+0x1d8>)
 8013fc6:	4842      	ldr	r0, [pc, #264]	@ (80140d0 <pbuf_alloc+0x1dc>)
 8013fc8:	f00a f862 	bl	801e090 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8013fcc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013fce:	3303      	adds	r3, #3
 8013fd0:	f023 0303 	bic.w	r3, r3, #3
 8013fd4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8013fd8:	d106      	bne.n	8013fe8 <pbuf_alloc+0xf4>
 8013fda:	4b3b      	ldr	r3, [pc, #236]	@ (80140c8 <pbuf_alloc+0x1d4>)
 8013fdc:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8013fe0:	493c      	ldr	r1, [pc, #240]	@ (80140d4 <pbuf_alloc+0x1e0>)
 8013fe2:	483b      	ldr	r0, [pc, #236]	@ (80140d0 <pbuf_alloc+0x1dc>)
 8013fe4:	f00a f854 	bl	801e090 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8013fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d102      	bne.n	8013ff4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8013fee:	693b      	ldr	r3, [r7, #16]
 8013ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8013ff2:	e002      	b.n	8013ffa <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8013ff4:	69fb      	ldr	r3, [r7, #28]
 8013ff6:	693a      	ldr	r2, [r7, #16]
 8013ff8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8013ffa:	693b      	ldr	r3, [r7, #16]
 8013ffc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8013ffe:	8b7a      	ldrh	r2, [r7, #26]
 8014000:	89fb      	ldrh	r3, [r7, #14]
 8014002:	1ad3      	subs	r3, r2, r3
 8014004:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8014006:	2300      	movs	r3, #0
 8014008:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 801400a:	8b7b      	ldrh	r3, [r7, #26]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d19e      	bne.n	8013f4e <pbuf_alloc+0x5a>
      break;
 8014010:	e055      	b.n	80140be <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8014012:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014014:	3303      	adds	r3, #3
 8014016:	b29b      	uxth	r3, r3
 8014018:	f023 0303 	bic.w	r3, r3, #3
 801401c:	b29a      	uxth	r2, r3
 801401e:	88bb      	ldrh	r3, [r7, #4]
 8014020:	3303      	adds	r3, #3
 8014022:	b29b      	uxth	r3, r3
 8014024:	f023 0303 	bic.w	r3, r3, #3
 8014028:	b29b      	uxth	r3, r3
 801402a:	4413      	add	r3, r2
 801402c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801402e:	8b3b      	ldrh	r3, [r7, #24]
 8014030:	3310      	adds	r3, #16
 8014032:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014034:	8b3a      	ldrh	r2, [r7, #24]
 8014036:	88bb      	ldrh	r3, [r7, #4]
 8014038:	3303      	adds	r3, #3
 801403a:	f023 0303 	bic.w	r3, r3, #3
 801403e:	429a      	cmp	r2, r3
 8014040:	d306      	bcc.n	8014050 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8014042:	8afa      	ldrh	r2, [r7, #22]
 8014044:	88bb      	ldrh	r3, [r7, #4]
 8014046:	3303      	adds	r3, #3
 8014048:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801404c:	429a      	cmp	r2, r3
 801404e:	d201      	bcs.n	8014054 <pbuf_alloc+0x160>
        return NULL;
 8014050:	2300      	movs	r3, #0
 8014052:	e035      	b.n	80140c0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8014054:	8afb      	ldrh	r3, [r7, #22]
 8014056:	4618      	mov	r0, r3
 8014058:	f7ff f972 	bl	8013340 <mem_malloc>
 801405c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 801405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014060:	2b00      	cmp	r3, #0
 8014062:	d101      	bne.n	8014068 <pbuf_alloc+0x174>
        return NULL;
 8014064:	2300      	movs	r3, #0
 8014066:	e02b      	b.n	80140c0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8014068:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801406a:	3310      	adds	r3, #16
 801406c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801406e:	4413      	add	r3, r2
 8014070:	3303      	adds	r3, #3
 8014072:	f023 0303 	bic.w	r3, r3, #3
 8014076:	4618      	mov	r0, r3
 8014078:	88b9      	ldrh	r1, [r7, #4]
 801407a:	88ba      	ldrh	r2, [r7, #4]
 801407c:	2300      	movs	r3, #0
 801407e:	9301      	str	r3, [sp, #4]
 8014080:	887b      	ldrh	r3, [r7, #2]
 8014082:	9300      	str	r3, [sp, #0]
 8014084:	460b      	mov	r3, r1
 8014086:	4601      	mov	r1, r0
 8014088:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801408a:	f7ff ff09 	bl	8013ea0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014090:	685b      	ldr	r3, [r3, #4]
 8014092:	f003 0303 	and.w	r3, r3, #3
 8014096:	2b00      	cmp	r3, #0
 8014098:	d010      	beq.n	80140bc <pbuf_alloc+0x1c8>
 801409a:	4b0b      	ldr	r3, [pc, #44]	@ (80140c8 <pbuf_alloc+0x1d4>)
 801409c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80140a0:	490d      	ldr	r1, [pc, #52]	@ (80140d8 <pbuf_alloc+0x1e4>)
 80140a2:	480b      	ldr	r0, [pc, #44]	@ (80140d0 <pbuf_alloc+0x1dc>)
 80140a4:	f009 fff4 	bl	801e090 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80140a8:	e008      	b.n	80140bc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80140aa:	4b07      	ldr	r3, [pc, #28]	@ (80140c8 <pbuf_alloc+0x1d4>)
 80140ac:	f240 1227 	movw	r2, #295	@ 0x127
 80140b0:	490a      	ldr	r1, [pc, #40]	@ (80140dc <pbuf_alloc+0x1e8>)
 80140b2:	4807      	ldr	r0, [pc, #28]	@ (80140d0 <pbuf_alloc+0x1dc>)
 80140b4:	f009 ffec 	bl	801e090 <iprintf>
      return NULL;
 80140b8:	2300      	movs	r3, #0
 80140ba:	e001      	b.n	80140c0 <pbuf_alloc+0x1cc>
      break;
 80140bc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80140be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80140c0:	4618      	mov	r0, r3
 80140c2:	3728      	adds	r7, #40	@ 0x28
 80140c4:	46bd      	mov	sp, r7
 80140c6:	bd80      	pop	{r7, pc}
 80140c8:	0801f8b8 	.word	0x0801f8b8
 80140cc:	0801f8e8 	.word	0x0801f8e8
 80140d0:	0801f918 	.word	0x0801f918
 80140d4:	0801f940 	.word	0x0801f940
 80140d8:	0801f974 	.word	0x0801f974
 80140dc:	0801f9a0 	.word	0x0801f9a0

080140e0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b086      	sub	sp, #24
 80140e4:	af02      	add	r7, sp, #8
 80140e6:	6078      	str	r0, [r7, #4]
 80140e8:	460b      	mov	r3, r1
 80140ea:	807b      	strh	r3, [r7, #2]
 80140ec:	4613      	mov	r3, r2
 80140ee:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80140f0:	883b      	ldrh	r3, [r7, #0]
 80140f2:	2b41      	cmp	r3, #65	@ 0x41
 80140f4:	d009      	beq.n	801410a <pbuf_alloc_reference+0x2a>
 80140f6:	883b      	ldrh	r3, [r7, #0]
 80140f8:	2b01      	cmp	r3, #1
 80140fa:	d006      	beq.n	801410a <pbuf_alloc_reference+0x2a>
 80140fc:	4b0f      	ldr	r3, [pc, #60]	@ (801413c <pbuf_alloc_reference+0x5c>)
 80140fe:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8014102:	490f      	ldr	r1, [pc, #60]	@ (8014140 <pbuf_alloc_reference+0x60>)
 8014104:	480f      	ldr	r0, [pc, #60]	@ (8014144 <pbuf_alloc_reference+0x64>)
 8014106:	f009 ffc3 	bl	801e090 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801410a:	200b      	movs	r0, #11
 801410c:	f7ff fabc 	bl	8013688 <memp_malloc>
 8014110:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d101      	bne.n	801411c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8014118:	2300      	movs	r3, #0
 801411a:	e00b      	b.n	8014134 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801411c:	8879      	ldrh	r1, [r7, #2]
 801411e:	887a      	ldrh	r2, [r7, #2]
 8014120:	2300      	movs	r3, #0
 8014122:	9301      	str	r3, [sp, #4]
 8014124:	883b      	ldrh	r3, [r7, #0]
 8014126:	9300      	str	r3, [sp, #0]
 8014128:	460b      	mov	r3, r1
 801412a:	6879      	ldr	r1, [r7, #4]
 801412c:	68f8      	ldr	r0, [r7, #12]
 801412e:	f7ff feb7 	bl	8013ea0 <pbuf_init_alloced_pbuf>
  return p;
 8014132:	68fb      	ldr	r3, [r7, #12]
}
 8014134:	4618      	mov	r0, r3
 8014136:	3710      	adds	r7, #16
 8014138:	46bd      	mov	sp, r7
 801413a:	bd80      	pop	{r7, pc}
 801413c:	0801f8b8 	.word	0x0801f8b8
 8014140:	0801f9bc 	.word	0x0801f9bc
 8014144:	0801f918 	.word	0x0801f918

08014148 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b088      	sub	sp, #32
 801414c:	af02      	add	r7, sp, #8
 801414e:	607b      	str	r3, [r7, #4]
 8014150:	4603      	mov	r3, r0
 8014152:	73fb      	strb	r3, [r7, #15]
 8014154:	460b      	mov	r3, r1
 8014156:	81bb      	strh	r3, [r7, #12]
 8014158:	4613      	mov	r3, r2
 801415a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801415c:	7bfb      	ldrb	r3, [r7, #15]
 801415e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8014160:	8a7b      	ldrh	r3, [r7, #18]
 8014162:	3303      	adds	r3, #3
 8014164:	f023 0203 	bic.w	r2, r3, #3
 8014168:	89bb      	ldrh	r3, [r7, #12]
 801416a:	441a      	add	r2, r3
 801416c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801416e:	429a      	cmp	r2, r3
 8014170:	d901      	bls.n	8014176 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8014172:	2300      	movs	r3, #0
 8014174:	e018      	b.n	80141a8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8014176:	6a3b      	ldr	r3, [r7, #32]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d007      	beq.n	801418c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801417c:	8a7b      	ldrh	r3, [r7, #18]
 801417e:	3303      	adds	r3, #3
 8014180:	f023 0303 	bic.w	r3, r3, #3
 8014184:	6a3a      	ldr	r2, [r7, #32]
 8014186:	4413      	add	r3, r2
 8014188:	617b      	str	r3, [r7, #20]
 801418a:	e001      	b.n	8014190 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801418c:	2300      	movs	r3, #0
 801418e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8014190:	6878      	ldr	r0, [r7, #4]
 8014192:	89b9      	ldrh	r1, [r7, #12]
 8014194:	89ba      	ldrh	r2, [r7, #12]
 8014196:	2302      	movs	r3, #2
 8014198:	9301      	str	r3, [sp, #4]
 801419a:	897b      	ldrh	r3, [r7, #10]
 801419c:	9300      	str	r3, [sp, #0]
 801419e:	460b      	mov	r3, r1
 80141a0:	6979      	ldr	r1, [r7, #20]
 80141a2:	f7ff fe7d 	bl	8013ea0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80141a6:	687b      	ldr	r3, [r7, #4]
}
 80141a8:	4618      	mov	r0, r3
 80141aa:	3718      	adds	r7, #24
 80141ac:	46bd      	mov	sp, r7
 80141ae:	bd80      	pop	{r7, pc}

080141b0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b084      	sub	sp, #16
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	6078      	str	r0, [r7, #4]
 80141b8:	460b      	mov	r3, r1
 80141ba:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d106      	bne.n	80141d0 <pbuf_realloc+0x20>
 80141c2:	4b3a      	ldr	r3, [pc, #232]	@ (80142ac <pbuf_realloc+0xfc>)
 80141c4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80141c8:	4939      	ldr	r1, [pc, #228]	@ (80142b0 <pbuf_realloc+0x100>)
 80141ca:	483a      	ldr	r0, [pc, #232]	@ (80142b4 <pbuf_realloc+0x104>)
 80141cc:	f009 ff60 	bl	801e090 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	891b      	ldrh	r3, [r3, #8]
 80141d4:	887a      	ldrh	r2, [r7, #2]
 80141d6:	429a      	cmp	r2, r3
 80141d8:	d263      	bcs.n	80142a2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	891a      	ldrh	r2, [r3, #8]
 80141de:	887b      	ldrh	r3, [r7, #2]
 80141e0:	1ad3      	subs	r3, r2, r3
 80141e2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80141e4:	887b      	ldrh	r3, [r7, #2]
 80141e6:	817b      	strh	r3, [r7, #10]
  q = p;
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80141ec:	e018      	b.n	8014220 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	895b      	ldrh	r3, [r3, #10]
 80141f2:	897a      	ldrh	r2, [r7, #10]
 80141f4:	1ad3      	subs	r3, r2, r3
 80141f6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	891a      	ldrh	r2, [r3, #8]
 80141fc:	893b      	ldrh	r3, [r7, #8]
 80141fe:	1ad3      	subs	r3, r2, r3
 8014200:	b29a      	uxth	r2, r3
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d106      	bne.n	8014220 <pbuf_realloc+0x70>
 8014212:	4b26      	ldr	r3, [pc, #152]	@ (80142ac <pbuf_realloc+0xfc>)
 8014214:	f240 12af 	movw	r2, #431	@ 0x1af
 8014218:	4927      	ldr	r1, [pc, #156]	@ (80142b8 <pbuf_realloc+0x108>)
 801421a:	4826      	ldr	r0, [pc, #152]	@ (80142b4 <pbuf_realloc+0x104>)
 801421c:	f009 ff38 	bl	801e090 <iprintf>
  while (rem_len > q->len) {
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	895b      	ldrh	r3, [r3, #10]
 8014224:	897a      	ldrh	r2, [r7, #10]
 8014226:	429a      	cmp	r2, r3
 8014228:	d8e1      	bhi.n	80141ee <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	7b1b      	ldrb	r3, [r3, #12]
 801422e:	f003 030f 	and.w	r3, r3, #15
 8014232:	2b00      	cmp	r3, #0
 8014234:	d121      	bne.n	801427a <pbuf_realloc+0xca>
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	895b      	ldrh	r3, [r3, #10]
 801423a:	897a      	ldrh	r2, [r7, #10]
 801423c:	429a      	cmp	r2, r3
 801423e:	d01c      	beq.n	801427a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	7b5b      	ldrb	r3, [r3, #13]
 8014244:	f003 0302 	and.w	r3, r3, #2
 8014248:	2b00      	cmp	r3, #0
 801424a:	d116      	bne.n	801427a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	685a      	ldr	r2, [r3, #4]
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	1ad3      	subs	r3, r2, r3
 8014254:	b29a      	uxth	r2, r3
 8014256:	897b      	ldrh	r3, [r7, #10]
 8014258:	4413      	add	r3, r2
 801425a:	b29b      	uxth	r3, r3
 801425c:	4619      	mov	r1, r3
 801425e:	68f8      	ldr	r0, [r7, #12]
 8014260:	f7fe ff64 	bl	801312c <mem_trim>
 8014264:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d106      	bne.n	801427a <pbuf_realloc+0xca>
 801426c:	4b0f      	ldr	r3, [pc, #60]	@ (80142ac <pbuf_realloc+0xfc>)
 801426e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8014272:	4912      	ldr	r1, [pc, #72]	@ (80142bc <pbuf_realloc+0x10c>)
 8014274:	480f      	ldr	r0, [pc, #60]	@ (80142b4 <pbuf_realloc+0x104>)
 8014276:	f009 ff0b 	bl	801e090 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	897a      	ldrh	r2, [r7, #10]
 801427e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	895a      	ldrh	r2, [r3, #10]
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d004      	beq.n	801429a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	4618      	mov	r0, r3
 8014296:	f000 f911 	bl	80144bc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	2200      	movs	r2, #0
 801429e:	601a      	str	r2, [r3, #0]
 80142a0:	e000      	b.n	80142a4 <pbuf_realloc+0xf4>
    return;
 80142a2:	bf00      	nop

}
 80142a4:	3710      	adds	r7, #16
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}
 80142aa:	bf00      	nop
 80142ac:	0801f8b8 	.word	0x0801f8b8
 80142b0:	0801f9d0 	.word	0x0801f9d0
 80142b4:	0801f918 	.word	0x0801f918
 80142b8:	0801f9e8 	.word	0x0801f9e8
 80142bc:	0801fa00 	.word	0x0801fa00

080142c0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b086      	sub	sp, #24
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	60f8      	str	r0, [r7, #12]
 80142c8:	60b9      	str	r1, [r7, #8]
 80142ca:	4613      	mov	r3, r2
 80142cc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d106      	bne.n	80142e2 <pbuf_add_header_impl+0x22>
 80142d4:	4b2b      	ldr	r3, [pc, #172]	@ (8014384 <pbuf_add_header_impl+0xc4>)
 80142d6:	f240 12df 	movw	r2, #479	@ 0x1df
 80142da:	492b      	ldr	r1, [pc, #172]	@ (8014388 <pbuf_add_header_impl+0xc8>)
 80142dc:	482b      	ldr	r0, [pc, #172]	@ (801438c <pbuf_add_header_impl+0xcc>)
 80142de:	f009 fed7 	bl	801e090 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d003      	beq.n	80142f0 <pbuf_add_header_impl+0x30>
 80142e8:	68bb      	ldr	r3, [r7, #8]
 80142ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80142ee:	d301      	bcc.n	80142f4 <pbuf_add_header_impl+0x34>
    return 1;
 80142f0:	2301      	movs	r3, #1
 80142f2:	e043      	b.n	801437c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80142f4:	68bb      	ldr	r3, [r7, #8]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d101      	bne.n	80142fe <pbuf_add_header_impl+0x3e>
    return 0;
 80142fa:	2300      	movs	r3, #0
 80142fc:	e03e      	b.n	801437c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80142fe:	68bb      	ldr	r3, [r7, #8]
 8014300:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	891a      	ldrh	r2, [r3, #8]
 8014306:	8a7b      	ldrh	r3, [r7, #18]
 8014308:	4413      	add	r3, r2
 801430a:	b29b      	uxth	r3, r3
 801430c:	8a7a      	ldrh	r2, [r7, #18]
 801430e:	429a      	cmp	r2, r3
 8014310:	d901      	bls.n	8014316 <pbuf_add_header_impl+0x56>
    return 1;
 8014312:	2301      	movs	r3, #1
 8014314:	e032      	b.n	801437c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	7b1b      	ldrb	r3, [r3, #12]
 801431a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801431c:	8a3b      	ldrh	r3, [r7, #16]
 801431e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014322:	2b00      	cmp	r3, #0
 8014324:	d00c      	beq.n	8014340 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	685a      	ldr	r2, [r3, #4]
 801432a:	68bb      	ldr	r3, [r7, #8]
 801432c:	425b      	negs	r3, r3
 801432e:	4413      	add	r3, r2
 8014330:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	3310      	adds	r3, #16
 8014336:	697a      	ldr	r2, [r7, #20]
 8014338:	429a      	cmp	r2, r3
 801433a:	d20d      	bcs.n	8014358 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801433c:	2301      	movs	r3, #1
 801433e:	e01d      	b.n	801437c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8014340:	79fb      	ldrb	r3, [r7, #7]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d006      	beq.n	8014354 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	685a      	ldr	r2, [r3, #4]
 801434a:	68bb      	ldr	r3, [r7, #8]
 801434c:	425b      	negs	r3, r3
 801434e:	4413      	add	r3, r2
 8014350:	617b      	str	r3, [r7, #20]
 8014352:	e001      	b.n	8014358 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014354:	2301      	movs	r3, #1
 8014356:	e011      	b.n	801437c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	697a      	ldr	r2, [r7, #20]
 801435c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	895a      	ldrh	r2, [r3, #10]
 8014362:	8a7b      	ldrh	r3, [r7, #18]
 8014364:	4413      	add	r3, r2
 8014366:	b29a      	uxth	r2, r3
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801436c:	68fb      	ldr	r3, [r7, #12]
 801436e:	891a      	ldrh	r2, [r3, #8]
 8014370:	8a7b      	ldrh	r3, [r7, #18]
 8014372:	4413      	add	r3, r2
 8014374:	b29a      	uxth	r2, r3
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	811a      	strh	r2, [r3, #8]


  return 0;
 801437a:	2300      	movs	r3, #0
}
 801437c:	4618      	mov	r0, r3
 801437e:	3718      	adds	r7, #24
 8014380:	46bd      	mov	sp, r7
 8014382:	bd80      	pop	{r7, pc}
 8014384:	0801f8b8 	.word	0x0801f8b8
 8014388:	0801fa1c 	.word	0x0801fa1c
 801438c:	0801f918 	.word	0x0801f918

08014390 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b082      	sub	sp, #8
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
 8014398:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801439a:	2200      	movs	r2, #0
 801439c:	6839      	ldr	r1, [r7, #0]
 801439e:	6878      	ldr	r0, [r7, #4]
 80143a0:	f7ff ff8e 	bl	80142c0 <pbuf_add_header_impl>
 80143a4:	4603      	mov	r3, r0
}
 80143a6:	4618      	mov	r0, r3
 80143a8:	3708      	adds	r7, #8
 80143aa:	46bd      	mov	sp, r7
 80143ac:	bd80      	pop	{r7, pc}
	...

080143b0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b084      	sub	sp, #16
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
 80143b8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d106      	bne.n	80143ce <pbuf_remove_header+0x1e>
 80143c0:	4b20      	ldr	r3, [pc, #128]	@ (8014444 <pbuf_remove_header+0x94>)
 80143c2:	f240 224b 	movw	r2, #587	@ 0x24b
 80143c6:	4920      	ldr	r1, [pc, #128]	@ (8014448 <pbuf_remove_header+0x98>)
 80143c8:	4820      	ldr	r0, [pc, #128]	@ (801444c <pbuf_remove_header+0x9c>)
 80143ca:	f009 fe61 	bl	801e090 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d003      	beq.n	80143dc <pbuf_remove_header+0x2c>
 80143d4:	683b      	ldr	r3, [r7, #0]
 80143d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80143da:	d301      	bcc.n	80143e0 <pbuf_remove_header+0x30>
    return 1;
 80143dc:	2301      	movs	r3, #1
 80143de:	e02c      	b.n	801443a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80143e0:	683b      	ldr	r3, [r7, #0]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d101      	bne.n	80143ea <pbuf_remove_header+0x3a>
    return 0;
 80143e6:	2300      	movs	r3, #0
 80143e8:	e027      	b.n	801443a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80143ea:	683b      	ldr	r3, [r7, #0]
 80143ec:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	895b      	ldrh	r3, [r3, #10]
 80143f2:	89fa      	ldrh	r2, [r7, #14]
 80143f4:	429a      	cmp	r2, r3
 80143f6:	d908      	bls.n	801440a <pbuf_remove_header+0x5a>
 80143f8:	4b12      	ldr	r3, [pc, #72]	@ (8014444 <pbuf_remove_header+0x94>)
 80143fa:	f240 2255 	movw	r2, #597	@ 0x255
 80143fe:	4914      	ldr	r1, [pc, #80]	@ (8014450 <pbuf_remove_header+0xa0>)
 8014400:	4812      	ldr	r0, [pc, #72]	@ (801444c <pbuf_remove_header+0x9c>)
 8014402:	f009 fe45 	bl	801e090 <iprintf>
 8014406:	2301      	movs	r3, #1
 8014408:	e017      	b.n	801443a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	685b      	ldr	r3, [r3, #4]
 801440e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	685a      	ldr	r2, [r3, #4]
 8014414:	683b      	ldr	r3, [r7, #0]
 8014416:	441a      	add	r2, r3
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	895a      	ldrh	r2, [r3, #10]
 8014420:	89fb      	ldrh	r3, [r7, #14]
 8014422:	1ad3      	subs	r3, r2, r3
 8014424:	b29a      	uxth	r2, r3
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	891a      	ldrh	r2, [r3, #8]
 801442e:	89fb      	ldrh	r3, [r7, #14]
 8014430:	1ad3      	subs	r3, r2, r3
 8014432:	b29a      	uxth	r2, r3
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014438:	2300      	movs	r3, #0
}
 801443a:	4618      	mov	r0, r3
 801443c:	3710      	adds	r7, #16
 801443e:	46bd      	mov	sp, r7
 8014440:	bd80      	pop	{r7, pc}
 8014442:	bf00      	nop
 8014444:	0801f8b8 	.word	0x0801f8b8
 8014448:	0801fa1c 	.word	0x0801fa1c
 801444c:	0801f918 	.word	0x0801f918
 8014450:	0801fa28 	.word	0x0801fa28

08014454 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014454:	b580      	push	{r7, lr}
 8014456:	b082      	sub	sp, #8
 8014458:	af00      	add	r7, sp, #0
 801445a:	6078      	str	r0, [r7, #4]
 801445c:	460b      	mov	r3, r1
 801445e:	807b      	strh	r3, [r7, #2]
 8014460:	4613      	mov	r3, r2
 8014462:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014464:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014468:	2b00      	cmp	r3, #0
 801446a:	da08      	bge.n	801447e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801446c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014470:	425b      	negs	r3, r3
 8014472:	4619      	mov	r1, r3
 8014474:	6878      	ldr	r0, [r7, #4]
 8014476:	f7ff ff9b 	bl	80143b0 <pbuf_remove_header>
 801447a:	4603      	mov	r3, r0
 801447c:	e007      	b.n	801448e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801447e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014482:	787a      	ldrb	r2, [r7, #1]
 8014484:	4619      	mov	r1, r3
 8014486:	6878      	ldr	r0, [r7, #4]
 8014488:	f7ff ff1a 	bl	80142c0 <pbuf_add_header_impl>
 801448c:	4603      	mov	r3, r0
  }
}
 801448e:	4618      	mov	r0, r3
 8014490:	3708      	adds	r7, #8
 8014492:	46bd      	mov	sp, r7
 8014494:	bd80      	pop	{r7, pc}

08014496 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8014496:	b580      	push	{r7, lr}
 8014498:	b082      	sub	sp, #8
 801449a:	af00      	add	r7, sp, #0
 801449c:	6078      	str	r0, [r7, #4]
 801449e:	460b      	mov	r3, r1
 80144a0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80144a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80144a6:	2201      	movs	r2, #1
 80144a8:	4619      	mov	r1, r3
 80144aa:	6878      	ldr	r0, [r7, #4]
 80144ac:	f7ff ffd2 	bl	8014454 <pbuf_header_impl>
 80144b0:	4603      	mov	r3, r0
}
 80144b2:	4618      	mov	r0, r3
 80144b4:	3708      	adds	r7, #8
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bd80      	pop	{r7, pc}
	...

080144bc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80144bc:	b580      	push	{r7, lr}
 80144be:	b088      	sub	sp, #32
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d10b      	bne.n	80144e2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d106      	bne.n	80144de <pbuf_free+0x22>
 80144d0:	4b3b      	ldr	r3, [pc, #236]	@ (80145c0 <pbuf_free+0x104>)
 80144d2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80144d6:	493b      	ldr	r1, [pc, #236]	@ (80145c4 <pbuf_free+0x108>)
 80144d8:	483b      	ldr	r0, [pc, #236]	@ (80145c8 <pbuf_free+0x10c>)
 80144da:	f009 fdd9 	bl	801e090 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80144de:	2300      	movs	r3, #0
 80144e0:	e069      	b.n	80145b6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80144e2:	2300      	movs	r3, #0
 80144e4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80144e6:	e062      	b.n	80145ae <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80144e8:	f008 fd66 	bl	801cfb8 <sys_arch_protect>
 80144ec:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	7b9b      	ldrb	r3, [r3, #14]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d106      	bne.n	8014504 <pbuf_free+0x48>
 80144f6:	4b32      	ldr	r3, [pc, #200]	@ (80145c0 <pbuf_free+0x104>)
 80144f8:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80144fc:	4933      	ldr	r1, [pc, #204]	@ (80145cc <pbuf_free+0x110>)
 80144fe:	4832      	ldr	r0, [pc, #200]	@ (80145c8 <pbuf_free+0x10c>)
 8014500:	f009 fdc6 	bl	801e090 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	7b9b      	ldrb	r3, [r3, #14]
 8014508:	3b01      	subs	r3, #1
 801450a:	b2da      	uxtb	r2, r3
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	739a      	strb	r2, [r3, #14]
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	7b9b      	ldrb	r3, [r3, #14]
 8014514:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8014516:	69b8      	ldr	r0, [r7, #24]
 8014518:	f008 fd5c 	bl	801cfd4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801451c:	7dfb      	ldrb	r3, [r7, #23]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d143      	bne.n	80145aa <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	7b1b      	ldrb	r3, [r3, #12]
 801452c:	f003 030f 	and.w	r3, r3, #15
 8014530:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	7b5b      	ldrb	r3, [r3, #13]
 8014536:	f003 0302 	and.w	r3, r3, #2
 801453a:	2b00      	cmp	r3, #0
 801453c:	d011      	beq.n	8014562 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014542:	68bb      	ldr	r3, [r7, #8]
 8014544:	691b      	ldr	r3, [r3, #16]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d106      	bne.n	8014558 <pbuf_free+0x9c>
 801454a:	4b1d      	ldr	r3, [pc, #116]	@ (80145c0 <pbuf_free+0x104>)
 801454c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8014550:	491f      	ldr	r1, [pc, #124]	@ (80145d0 <pbuf_free+0x114>)
 8014552:	481d      	ldr	r0, [pc, #116]	@ (80145c8 <pbuf_free+0x10c>)
 8014554:	f009 fd9c 	bl	801e090 <iprintf>
        pc->custom_free_function(p);
 8014558:	68bb      	ldr	r3, [r7, #8]
 801455a:	691b      	ldr	r3, [r3, #16]
 801455c:	6878      	ldr	r0, [r7, #4]
 801455e:	4798      	blx	r3
 8014560:	e01d      	b.n	801459e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8014562:	7bfb      	ldrb	r3, [r7, #15]
 8014564:	2b02      	cmp	r3, #2
 8014566:	d104      	bne.n	8014572 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8014568:	6879      	ldr	r1, [r7, #4]
 801456a:	200c      	movs	r0, #12
 801456c:	f7ff f902 	bl	8013774 <memp_free>
 8014570:	e015      	b.n	801459e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8014572:	7bfb      	ldrb	r3, [r7, #15]
 8014574:	2b01      	cmp	r3, #1
 8014576:	d104      	bne.n	8014582 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8014578:	6879      	ldr	r1, [r7, #4]
 801457a:	200b      	movs	r0, #11
 801457c:	f7ff f8fa 	bl	8013774 <memp_free>
 8014580:	e00d      	b.n	801459e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8014582:	7bfb      	ldrb	r3, [r7, #15]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d103      	bne.n	8014590 <pbuf_free+0xd4>
          mem_free(p);
 8014588:	6878      	ldr	r0, [r7, #4]
 801458a:	f7fe fd3f 	bl	801300c <mem_free>
 801458e:	e006      	b.n	801459e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014590:	4b0b      	ldr	r3, [pc, #44]	@ (80145c0 <pbuf_free+0x104>)
 8014592:	f240 320f 	movw	r2, #783	@ 0x30f
 8014596:	490f      	ldr	r1, [pc, #60]	@ (80145d4 <pbuf_free+0x118>)
 8014598:	480b      	ldr	r0, [pc, #44]	@ (80145c8 <pbuf_free+0x10c>)
 801459a:	f009 fd79 	bl	801e090 <iprintf>
        }
      }
      count++;
 801459e:	7ffb      	ldrb	r3, [r7, #31]
 80145a0:	3301      	adds	r3, #1
 80145a2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80145a4:	693b      	ldr	r3, [r7, #16]
 80145a6:	607b      	str	r3, [r7, #4]
 80145a8:	e001      	b.n	80145ae <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80145aa:	2300      	movs	r3, #0
 80145ac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d199      	bne.n	80144e8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80145b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80145b6:	4618      	mov	r0, r3
 80145b8:	3720      	adds	r7, #32
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bd80      	pop	{r7, pc}
 80145be:	bf00      	nop
 80145c0:	0801f8b8 	.word	0x0801f8b8
 80145c4:	0801fa1c 	.word	0x0801fa1c
 80145c8:	0801f918 	.word	0x0801f918
 80145cc:	0801fa48 	.word	0x0801fa48
 80145d0:	0801fa60 	.word	0x0801fa60
 80145d4:	0801fa84 	.word	0x0801fa84

080145d8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80145d8:	b480      	push	{r7}
 80145da:	b085      	sub	sp, #20
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80145e0:	2300      	movs	r3, #0
 80145e2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80145e4:	e005      	b.n	80145f2 <pbuf_clen+0x1a>
    ++len;
 80145e6:	89fb      	ldrh	r3, [r7, #14]
 80145e8:	3301      	adds	r3, #1
 80145ea:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d1f6      	bne.n	80145e6 <pbuf_clen+0xe>
  }
  return len;
 80145f8:	89fb      	ldrh	r3, [r7, #14]
}
 80145fa:	4618      	mov	r0, r3
 80145fc:	3714      	adds	r7, #20
 80145fe:	46bd      	mov	sp, r7
 8014600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014604:	4770      	bx	lr
	...

08014608 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b084      	sub	sp, #16
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d016      	beq.n	8014644 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8014616:	f008 fccf 	bl	801cfb8 <sys_arch_protect>
 801461a:	60f8      	str	r0, [r7, #12]
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	7b9b      	ldrb	r3, [r3, #14]
 8014620:	3301      	adds	r3, #1
 8014622:	b2da      	uxtb	r2, r3
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	739a      	strb	r2, [r3, #14]
 8014628:	68f8      	ldr	r0, [r7, #12]
 801462a:	f008 fcd3 	bl	801cfd4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	7b9b      	ldrb	r3, [r3, #14]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d106      	bne.n	8014644 <pbuf_ref+0x3c>
 8014636:	4b05      	ldr	r3, [pc, #20]	@ (801464c <pbuf_ref+0x44>)
 8014638:	f240 3242 	movw	r2, #834	@ 0x342
 801463c:	4904      	ldr	r1, [pc, #16]	@ (8014650 <pbuf_ref+0x48>)
 801463e:	4805      	ldr	r0, [pc, #20]	@ (8014654 <pbuf_ref+0x4c>)
 8014640:	f009 fd26 	bl	801e090 <iprintf>
  }
}
 8014644:	bf00      	nop
 8014646:	3710      	adds	r7, #16
 8014648:	46bd      	mov	sp, r7
 801464a:	bd80      	pop	{r7, pc}
 801464c:	0801f8b8 	.word	0x0801f8b8
 8014650:	0801fa98 	.word	0x0801fa98
 8014654:	0801f918 	.word	0x0801f918

08014658 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b084      	sub	sp, #16
 801465c:	af00      	add	r7, sp, #0
 801465e:	6078      	str	r0, [r7, #4]
 8014660:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d002      	beq.n	801466e <pbuf_cat+0x16>
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d107      	bne.n	801467e <pbuf_cat+0x26>
 801466e:	4b20      	ldr	r3, [pc, #128]	@ (80146f0 <pbuf_cat+0x98>)
 8014670:	f240 3259 	movw	r2, #857	@ 0x359
 8014674:	491f      	ldr	r1, [pc, #124]	@ (80146f4 <pbuf_cat+0x9c>)
 8014676:	4820      	ldr	r0, [pc, #128]	@ (80146f8 <pbuf_cat+0xa0>)
 8014678:	f009 fd0a 	bl	801e090 <iprintf>
 801467c:	e034      	b.n	80146e8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	60fb      	str	r3, [r7, #12]
 8014682:	e00a      	b.n	801469a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014684:	68fb      	ldr	r3, [r7, #12]
 8014686:	891a      	ldrh	r2, [r3, #8]
 8014688:	683b      	ldr	r3, [r7, #0]
 801468a:	891b      	ldrh	r3, [r3, #8]
 801468c:	4413      	add	r3, r2
 801468e:	b29a      	uxth	r2, r3
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	60fb      	str	r3, [r7, #12]
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d1f0      	bne.n	8014684 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	891a      	ldrh	r2, [r3, #8]
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	895b      	ldrh	r3, [r3, #10]
 80146aa:	429a      	cmp	r2, r3
 80146ac:	d006      	beq.n	80146bc <pbuf_cat+0x64>
 80146ae:	4b10      	ldr	r3, [pc, #64]	@ (80146f0 <pbuf_cat+0x98>)
 80146b0:	f240 3262 	movw	r2, #866	@ 0x362
 80146b4:	4911      	ldr	r1, [pc, #68]	@ (80146fc <pbuf_cat+0xa4>)
 80146b6:	4810      	ldr	r0, [pc, #64]	@ (80146f8 <pbuf_cat+0xa0>)
 80146b8:	f009 fcea 	bl	801e090 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d006      	beq.n	80146d2 <pbuf_cat+0x7a>
 80146c4:	4b0a      	ldr	r3, [pc, #40]	@ (80146f0 <pbuf_cat+0x98>)
 80146c6:	f240 3263 	movw	r2, #867	@ 0x363
 80146ca:	490d      	ldr	r1, [pc, #52]	@ (8014700 <pbuf_cat+0xa8>)
 80146cc:	480a      	ldr	r0, [pc, #40]	@ (80146f8 <pbuf_cat+0xa0>)
 80146ce:	f009 fcdf 	bl	801e090 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	891a      	ldrh	r2, [r3, #8]
 80146d6:	683b      	ldr	r3, [r7, #0]
 80146d8:	891b      	ldrh	r3, [r3, #8]
 80146da:	4413      	add	r3, r2
 80146dc:	b29a      	uxth	r2, r3
 80146de:	68fb      	ldr	r3, [r7, #12]
 80146e0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	683a      	ldr	r2, [r7, #0]
 80146e6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80146e8:	3710      	adds	r7, #16
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bd80      	pop	{r7, pc}
 80146ee:	bf00      	nop
 80146f0:	0801f8b8 	.word	0x0801f8b8
 80146f4:	0801faac 	.word	0x0801faac
 80146f8:	0801f918 	.word	0x0801f918
 80146fc:	0801fae4 	.word	0x0801fae4
 8014700:	0801fb14 	.word	0x0801fb14

08014704 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b082      	sub	sp, #8
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
 801470c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801470e:	6839      	ldr	r1, [r7, #0]
 8014710:	6878      	ldr	r0, [r7, #4]
 8014712:	f7ff ffa1 	bl	8014658 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8014716:	6838      	ldr	r0, [r7, #0]
 8014718:	f7ff ff76 	bl	8014608 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801471c:	bf00      	nop
 801471e:	3708      	adds	r7, #8
 8014720:	46bd      	mov	sp, r7
 8014722:	bd80      	pop	{r7, pc}

08014724 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b086      	sub	sp, #24
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
 801472c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801472e:	2300      	movs	r3, #0
 8014730:	617b      	str	r3, [r7, #20]
 8014732:	2300      	movs	r3, #0
 8014734:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d008      	beq.n	801474e <pbuf_copy+0x2a>
 801473c:	683b      	ldr	r3, [r7, #0]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d005      	beq.n	801474e <pbuf_copy+0x2a>
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	891a      	ldrh	r2, [r3, #8]
 8014746:	683b      	ldr	r3, [r7, #0]
 8014748:	891b      	ldrh	r3, [r3, #8]
 801474a:	429a      	cmp	r2, r3
 801474c:	d209      	bcs.n	8014762 <pbuf_copy+0x3e>
 801474e:	4b57      	ldr	r3, [pc, #348]	@ (80148ac <pbuf_copy+0x188>)
 8014750:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8014754:	4956      	ldr	r1, [pc, #344]	@ (80148b0 <pbuf_copy+0x18c>)
 8014756:	4857      	ldr	r0, [pc, #348]	@ (80148b4 <pbuf_copy+0x190>)
 8014758:	f009 fc9a 	bl	801e090 <iprintf>
 801475c:	f06f 030f 	mvn.w	r3, #15
 8014760:	e09f      	b.n	80148a2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	895b      	ldrh	r3, [r3, #10]
 8014766:	461a      	mov	r2, r3
 8014768:	697b      	ldr	r3, [r7, #20]
 801476a:	1ad2      	subs	r2, r2, r3
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	895b      	ldrh	r3, [r3, #10]
 8014770:	4619      	mov	r1, r3
 8014772:	693b      	ldr	r3, [r7, #16]
 8014774:	1acb      	subs	r3, r1, r3
 8014776:	429a      	cmp	r2, r3
 8014778:	d306      	bcc.n	8014788 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801477a:	683b      	ldr	r3, [r7, #0]
 801477c:	895b      	ldrh	r3, [r3, #10]
 801477e:	461a      	mov	r2, r3
 8014780:	693b      	ldr	r3, [r7, #16]
 8014782:	1ad3      	subs	r3, r2, r3
 8014784:	60fb      	str	r3, [r7, #12]
 8014786:	e005      	b.n	8014794 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	895b      	ldrh	r3, [r3, #10]
 801478c:	461a      	mov	r2, r3
 801478e:	697b      	ldr	r3, [r7, #20]
 8014790:	1ad3      	subs	r3, r2, r3
 8014792:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	685a      	ldr	r2, [r3, #4]
 8014798:	697b      	ldr	r3, [r7, #20]
 801479a:	18d0      	adds	r0, r2, r3
 801479c:	683b      	ldr	r3, [r7, #0]
 801479e:	685a      	ldr	r2, [r3, #4]
 80147a0:	693b      	ldr	r3, [r7, #16]
 80147a2:	4413      	add	r3, r2
 80147a4:	68fa      	ldr	r2, [r7, #12]
 80147a6:	4619      	mov	r1, r3
 80147a8:	f009 fe9d 	bl	801e4e6 <memcpy>
    offset_to += len;
 80147ac:	697a      	ldr	r2, [r7, #20]
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	4413      	add	r3, r2
 80147b2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80147b4:	693a      	ldr	r2, [r7, #16]
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	4413      	add	r3, r2
 80147ba:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	895b      	ldrh	r3, [r3, #10]
 80147c0:	461a      	mov	r2, r3
 80147c2:	697b      	ldr	r3, [r7, #20]
 80147c4:	4293      	cmp	r3, r2
 80147c6:	d906      	bls.n	80147d6 <pbuf_copy+0xb2>
 80147c8:	4b38      	ldr	r3, [pc, #224]	@ (80148ac <pbuf_copy+0x188>)
 80147ca:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80147ce:	493a      	ldr	r1, [pc, #232]	@ (80148b8 <pbuf_copy+0x194>)
 80147d0:	4838      	ldr	r0, [pc, #224]	@ (80148b4 <pbuf_copy+0x190>)
 80147d2:	f009 fc5d 	bl	801e090 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80147d6:	683b      	ldr	r3, [r7, #0]
 80147d8:	895b      	ldrh	r3, [r3, #10]
 80147da:	461a      	mov	r2, r3
 80147dc:	693b      	ldr	r3, [r7, #16]
 80147de:	4293      	cmp	r3, r2
 80147e0:	d906      	bls.n	80147f0 <pbuf_copy+0xcc>
 80147e2:	4b32      	ldr	r3, [pc, #200]	@ (80148ac <pbuf_copy+0x188>)
 80147e4:	f240 32da 	movw	r2, #986	@ 0x3da
 80147e8:	4934      	ldr	r1, [pc, #208]	@ (80148bc <pbuf_copy+0x198>)
 80147ea:	4832      	ldr	r0, [pc, #200]	@ (80148b4 <pbuf_copy+0x190>)
 80147ec:	f009 fc50 	bl	801e090 <iprintf>
    if (offset_from >= p_from->len) {
 80147f0:	683b      	ldr	r3, [r7, #0]
 80147f2:	895b      	ldrh	r3, [r3, #10]
 80147f4:	461a      	mov	r2, r3
 80147f6:	693b      	ldr	r3, [r7, #16]
 80147f8:	4293      	cmp	r3, r2
 80147fa:	d304      	bcc.n	8014806 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80147fc:	2300      	movs	r3, #0
 80147fe:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014800:	683b      	ldr	r3, [r7, #0]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	895b      	ldrh	r3, [r3, #10]
 801480a:	461a      	mov	r2, r3
 801480c:	697b      	ldr	r3, [r7, #20]
 801480e:	4293      	cmp	r3, r2
 8014810:	d114      	bne.n	801483c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014812:	2300      	movs	r3, #0
 8014814:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d10c      	bne.n	801483c <pbuf_copy+0x118>
 8014822:	683b      	ldr	r3, [r7, #0]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d009      	beq.n	801483c <pbuf_copy+0x118>
 8014828:	4b20      	ldr	r3, [pc, #128]	@ (80148ac <pbuf_copy+0x188>)
 801482a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801482e:	4924      	ldr	r1, [pc, #144]	@ (80148c0 <pbuf_copy+0x19c>)
 8014830:	4820      	ldr	r0, [pc, #128]	@ (80148b4 <pbuf_copy+0x190>)
 8014832:	f009 fc2d 	bl	801e090 <iprintf>
 8014836:	f06f 030f 	mvn.w	r3, #15
 801483a:	e032      	b.n	80148a2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801483c:	683b      	ldr	r3, [r7, #0]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d013      	beq.n	801486a <pbuf_copy+0x146>
 8014842:	683b      	ldr	r3, [r7, #0]
 8014844:	895a      	ldrh	r2, [r3, #10]
 8014846:	683b      	ldr	r3, [r7, #0]
 8014848:	891b      	ldrh	r3, [r3, #8]
 801484a:	429a      	cmp	r2, r3
 801484c:	d10d      	bne.n	801486a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801484e:	683b      	ldr	r3, [r7, #0]
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	2b00      	cmp	r3, #0
 8014854:	d009      	beq.n	801486a <pbuf_copy+0x146>
 8014856:	4b15      	ldr	r3, [pc, #84]	@ (80148ac <pbuf_copy+0x188>)
 8014858:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 801485c:	4919      	ldr	r1, [pc, #100]	@ (80148c4 <pbuf_copy+0x1a0>)
 801485e:	4815      	ldr	r0, [pc, #84]	@ (80148b4 <pbuf_copy+0x190>)
 8014860:	f009 fc16 	bl	801e090 <iprintf>
 8014864:	f06f 0305 	mvn.w	r3, #5
 8014868:	e01b      	b.n	80148a2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d013      	beq.n	8014898 <pbuf_copy+0x174>
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	895a      	ldrh	r2, [r3, #10]
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	891b      	ldrh	r3, [r3, #8]
 8014878:	429a      	cmp	r2, r3
 801487a:	d10d      	bne.n	8014898 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d009      	beq.n	8014898 <pbuf_copy+0x174>
 8014884:	4b09      	ldr	r3, [pc, #36]	@ (80148ac <pbuf_copy+0x188>)
 8014886:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801488a:	490e      	ldr	r1, [pc, #56]	@ (80148c4 <pbuf_copy+0x1a0>)
 801488c:	4809      	ldr	r0, [pc, #36]	@ (80148b4 <pbuf_copy+0x190>)
 801488e:	f009 fbff 	bl	801e090 <iprintf>
 8014892:	f06f 0305 	mvn.w	r3, #5
 8014896:	e004      	b.n	80148a2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8014898:	683b      	ldr	r3, [r7, #0]
 801489a:	2b00      	cmp	r3, #0
 801489c:	f47f af61 	bne.w	8014762 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80148a0:	2300      	movs	r3, #0
}
 80148a2:	4618      	mov	r0, r3
 80148a4:	3718      	adds	r7, #24
 80148a6:	46bd      	mov	sp, r7
 80148a8:	bd80      	pop	{r7, pc}
 80148aa:	bf00      	nop
 80148ac:	0801f8b8 	.word	0x0801f8b8
 80148b0:	0801fb60 	.word	0x0801fb60
 80148b4:	0801f918 	.word	0x0801f918
 80148b8:	0801fb90 	.word	0x0801fb90
 80148bc:	0801fba8 	.word	0x0801fba8
 80148c0:	0801fbc4 	.word	0x0801fbc4
 80148c4:	0801fbd4 	.word	0x0801fbd4

080148c8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b088      	sub	sp, #32
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	60f8      	str	r0, [r7, #12]
 80148d0:	60b9      	str	r1, [r7, #8]
 80148d2:	4611      	mov	r1, r2
 80148d4:	461a      	mov	r2, r3
 80148d6:	460b      	mov	r3, r1
 80148d8:	80fb      	strh	r3, [r7, #6]
 80148da:	4613      	mov	r3, r2
 80148dc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80148de:	2300      	movs	r3, #0
 80148e0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80148e2:	2300      	movs	r3, #0
 80148e4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d108      	bne.n	80148fe <pbuf_copy_partial+0x36>
 80148ec:	4b2b      	ldr	r3, [pc, #172]	@ (801499c <pbuf_copy_partial+0xd4>)
 80148ee:	f240 420a 	movw	r2, #1034	@ 0x40a
 80148f2:	492b      	ldr	r1, [pc, #172]	@ (80149a0 <pbuf_copy_partial+0xd8>)
 80148f4:	482b      	ldr	r0, [pc, #172]	@ (80149a4 <pbuf_copy_partial+0xdc>)
 80148f6:	f009 fbcb 	bl	801e090 <iprintf>
 80148fa:	2300      	movs	r3, #0
 80148fc:	e04a      	b.n	8014994 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80148fe:	68bb      	ldr	r3, [r7, #8]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d108      	bne.n	8014916 <pbuf_copy_partial+0x4e>
 8014904:	4b25      	ldr	r3, [pc, #148]	@ (801499c <pbuf_copy_partial+0xd4>)
 8014906:	f240 420b 	movw	r2, #1035	@ 0x40b
 801490a:	4927      	ldr	r1, [pc, #156]	@ (80149a8 <pbuf_copy_partial+0xe0>)
 801490c:	4825      	ldr	r0, [pc, #148]	@ (80149a4 <pbuf_copy_partial+0xdc>)
 801490e:	f009 fbbf 	bl	801e090 <iprintf>
 8014912:	2300      	movs	r3, #0
 8014914:	e03e      	b.n	8014994 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	61fb      	str	r3, [r7, #28]
 801491a:	e034      	b.n	8014986 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801491c:	88bb      	ldrh	r3, [r7, #4]
 801491e:	2b00      	cmp	r3, #0
 8014920:	d00a      	beq.n	8014938 <pbuf_copy_partial+0x70>
 8014922:	69fb      	ldr	r3, [r7, #28]
 8014924:	895b      	ldrh	r3, [r3, #10]
 8014926:	88ba      	ldrh	r2, [r7, #4]
 8014928:	429a      	cmp	r2, r3
 801492a:	d305      	bcc.n	8014938 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801492c:	69fb      	ldr	r3, [r7, #28]
 801492e:	895b      	ldrh	r3, [r3, #10]
 8014930:	88ba      	ldrh	r2, [r7, #4]
 8014932:	1ad3      	subs	r3, r2, r3
 8014934:	80bb      	strh	r3, [r7, #4]
 8014936:	e023      	b.n	8014980 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8014938:	69fb      	ldr	r3, [r7, #28]
 801493a:	895a      	ldrh	r2, [r3, #10]
 801493c:	88bb      	ldrh	r3, [r7, #4]
 801493e:	1ad3      	subs	r3, r2, r3
 8014940:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8014942:	8b3a      	ldrh	r2, [r7, #24]
 8014944:	88fb      	ldrh	r3, [r7, #6]
 8014946:	429a      	cmp	r2, r3
 8014948:	d901      	bls.n	801494e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801494a:	88fb      	ldrh	r3, [r7, #6]
 801494c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801494e:	8b7b      	ldrh	r3, [r7, #26]
 8014950:	68ba      	ldr	r2, [r7, #8]
 8014952:	18d0      	adds	r0, r2, r3
 8014954:	69fb      	ldr	r3, [r7, #28]
 8014956:	685a      	ldr	r2, [r3, #4]
 8014958:	88bb      	ldrh	r3, [r7, #4]
 801495a:	4413      	add	r3, r2
 801495c:	8b3a      	ldrh	r2, [r7, #24]
 801495e:	4619      	mov	r1, r3
 8014960:	f009 fdc1 	bl	801e4e6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8014964:	8afa      	ldrh	r2, [r7, #22]
 8014966:	8b3b      	ldrh	r3, [r7, #24]
 8014968:	4413      	add	r3, r2
 801496a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801496c:	8b7a      	ldrh	r2, [r7, #26]
 801496e:	8b3b      	ldrh	r3, [r7, #24]
 8014970:	4413      	add	r3, r2
 8014972:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8014974:	88fa      	ldrh	r2, [r7, #6]
 8014976:	8b3b      	ldrh	r3, [r7, #24]
 8014978:	1ad3      	subs	r3, r2, r3
 801497a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801497c:	2300      	movs	r3, #0
 801497e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014980:	69fb      	ldr	r3, [r7, #28]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	61fb      	str	r3, [r7, #28]
 8014986:	88fb      	ldrh	r3, [r7, #6]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d002      	beq.n	8014992 <pbuf_copy_partial+0xca>
 801498c:	69fb      	ldr	r3, [r7, #28]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d1c4      	bne.n	801491c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8014992:	8afb      	ldrh	r3, [r7, #22]
}
 8014994:	4618      	mov	r0, r3
 8014996:	3720      	adds	r7, #32
 8014998:	46bd      	mov	sp, r7
 801499a:	bd80      	pop	{r7, pc}
 801499c:	0801f8b8 	.word	0x0801f8b8
 80149a0:	0801fc00 	.word	0x0801fc00
 80149a4:	0801f918 	.word	0x0801f918
 80149a8:	0801fc20 	.word	0x0801fc20

080149ac <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b084      	sub	sp, #16
 80149b0:	af00      	add	r7, sp, #0
 80149b2:	4603      	mov	r3, r0
 80149b4:	603a      	str	r2, [r7, #0]
 80149b6:	71fb      	strb	r3, [r7, #7]
 80149b8:	460b      	mov	r3, r1
 80149ba:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80149bc:	683b      	ldr	r3, [r7, #0]
 80149be:	8919      	ldrh	r1, [r3, #8]
 80149c0:	88ba      	ldrh	r2, [r7, #4]
 80149c2:	79fb      	ldrb	r3, [r7, #7]
 80149c4:	4618      	mov	r0, r3
 80149c6:	f7ff fa95 	bl	8013ef4 <pbuf_alloc>
 80149ca:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d101      	bne.n	80149d6 <pbuf_clone+0x2a>
    return NULL;
 80149d2:	2300      	movs	r3, #0
 80149d4:	e011      	b.n	80149fa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80149d6:	6839      	ldr	r1, [r7, #0]
 80149d8:	68f8      	ldr	r0, [r7, #12]
 80149da:	f7ff fea3 	bl	8014724 <pbuf_copy>
 80149de:	4603      	mov	r3, r0
 80149e0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80149e2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d006      	beq.n	80149f8 <pbuf_clone+0x4c>
 80149ea:	4b06      	ldr	r3, [pc, #24]	@ (8014a04 <pbuf_clone+0x58>)
 80149ec:	f240 5224 	movw	r2, #1316	@ 0x524
 80149f0:	4905      	ldr	r1, [pc, #20]	@ (8014a08 <pbuf_clone+0x5c>)
 80149f2:	4806      	ldr	r0, [pc, #24]	@ (8014a0c <pbuf_clone+0x60>)
 80149f4:	f009 fb4c 	bl	801e090 <iprintf>
  return q;
 80149f8:	68fb      	ldr	r3, [r7, #12]
}
 80149fa:	4618      	mov	r0, r3
 80149fc:	3710      	adds	r7, #16
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bd80      	pop	{r7, pc}
 8014a02:	bf00      	nop
 8014a04:	0801f8b8 	.word	0x0801f8b8
 8014a08:	0801fd2c 	.word	0x0801fd2c
 8014a0c:	0801f918 	.word	0x0801f918

08014a10 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014a14:	f009 fa3c 	bl	801de90 <rand>
 8014a18:	4603      	mov	r3, r0
 8014a1a:	b29b      	uxth	r3, r3
 8014a1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014a20:	b29b      	uxth	r3, r3
 8014a22:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8014a26:	b29a      	uxth	r2, r3
 8014a28:	4b01      	ldr	r3, [pc, #4]	@ (8014a30 <tcp_init+0x20>)
 8014a2a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014a2c:	bf00      	nop
 8014a2e:	bd80      	pop	{r7, pc}
 8014a30:	20000024 	.word	0x20000024

08014a34 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b082      	sub	sp, #8
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	7d1b      	ldrb	r3, [r3, #20]
 8014a40:	2b01      	cmp	r3, #1
 8014a42:	d105      	bne.n	8014a50 <tcp_free+0x1c>
 8014a44:	4b06      	ldr	r3, [pc, #24]	@ (8014a60 <tcp_free+0x2c>)
 8014a46:	22d4      	movs	r2, #212	@ 0xd4
 8014a48:	4906      	ldr	r1, [pc, #24]	@ (8014a64 <tcp_free+0x30>)
 8014a4a:	4807      	ldr	r0, [pc, #28]	@ (8014a68 <tcp_free+0x34>)
 8014a4c:	f009 fb20 	bl	801e090 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8014a50:	6879      	ldr	r1, [r7, #4]
 8014a52:	2001      	movs	r0, #1
 8014a54:	f7fe fe8e 	bl	8013774 <memp_free>
}
 8014a58:	bf00      	nop
 8014a5a:	3708      	adds	r7, #8
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	bd80      	pop	{r7, pc}
 8014a60:	0801fdb8 	.word	0x0801fdb8
 8014a64:	0801fde8 	.word	0x0801fde8
 8014a68:	0801fdfc 	.word	0x0801fdfc

08014a6c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b082      	sub	sp, #8
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	7d1b      	ldrb	r3, [r3, #20]
 8014a78:	2b01      	cmp	r3, #1
 8014a7a:	d105      	bne.n	8014a88 <tcp_free_listen+0x1c>
 8014a7c:	4b06      	ldr	r3, [pc, #24]	@ (8014a98 <tcp_free_listen+0x2c>)
 8014a7e:	22df      	movs	r2, #223	@ 0xdf
 8014a80:	4906      	ldr	r1, [pc, #24]	@ (8014a9c <tcp_free_listen+0x30>)
 8014a82:	4807      	ldr	r0, [pc, #28]	@ (8014aa0 <tcp_free_listen+0x34>)
 8014a84:	f009 fb04 	bl	801e090 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8014a88:	6879      	ldr	r1, [r7, #4]
 8014a8a:	2002      	movs	r0, #2
 8014a8c:	f7fe fe72 	bl	8013774 <memp_free>
}
 8014a90:	bf00      	nop
 8014a92:	3708      	adds	r7, #8
 8014a94:	46bd      	mov	sp, r7
 8014a96:	bd80      	pop	{r7, pc}
 8014a98:	0801fdb8 	.word	0x0801fdb8
 8014a9c:	0801fe24 	.word	0x0801fe24
 8014aa0:	0801fdfc 	.word	0x0801fdfc

08014aa4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8014aa8:	f000 fea4 	bl	80157f4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8014aac:	4b07      	ldr	r3, [pc, #28]	@ (8014acc <tcp_tmr+0x28>)
 8014aae:	781b      	ldrb	r3, [r3, #0]
 8014ab0:	3301      	adds	r3, #1
 8014ab2:	b2da      	uxtb	r2, r3
 8014ab4:	4b05      	ldr	r3, [pc, #20]	@ (8014acc <tcp_tmr+0x28>)
 8014ab6:	701a      	strb	r2, [r3, #0]
 8014ab8:	4b04      	ldr	r3, [pc, #16]	@ (8014acc <tcp_tmr+0x28>)
 8014aba:	781b      	ldrb	r3, [r3, #0]
 8014abc:	f003 0301 	and.w	r3, r3, #1
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d001      	beq.n	8014ac8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8014ac4:	f000 fb54 	bl	8015170 <tcp_slowtmr>
  }
}
 8014ac8:	bf00      	nop
 8014aca:	bd80      	pop	{r7, pc}
 8014acc:	200277c5 	.word	0x200277c5

08014ad0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b084      	sub	sp, #16
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
 8014ad8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8014ada:	683b      	ldr	r3, [r7, #0]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d105      	bne.n	8014aec <tcp_remove_listener+0x1c>
 8014ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8014b18 <tcp_remove_listener+0x48>)
 8014ae2:	22ff      	movs	r2, #255	@ 0xff
 8014ae4:	490d      	ldr	r1, [pc, #52]	@ (8014b1c <tcp_remove_listener+0x4c>)
 8014ae6:	480e      	ldr	r0, [pc, #56]	@ (8014b20 <tcp_remove_listener+0x50>)
 8014ae8:	f009 fad2 	bl	801e090 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	60fb      	str	r3, [r7, #12]
 8014af0:	e00a      	b.n	8014b08 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014af6:	683a      	ldr	r2, [r7, #0]
 8014af8:	429a      	cmp	r2, r3
 8014afa:	d102      	bne.n	8014b02 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	2200      	movs	r2, #0
 8014b00:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	68db      	ldr	r3, [r3, #12]
 8014b06:	60fb      	str	r3, [r7, #12]
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d1f1      	bne.n	8014af2 <tcp_remove_listener+0x22>
    }
  }
}
 8014b0e:	bf00      	nop
 8014b10:	bf00      	nop
 8014b12:	3710      	adds	r7, #16
 8014b14:	46bd      	mov	sp, r7
 8014b16:	bd80      	pop	{r7, pc}
 8014b18:	0801fdb8 	.word	0x0801fdb8
 8014b1c:	0801fe40 	.word	0x0801fe40
 8014b20:	0801fdfc 	.word	0x0801fdfc

08014b24 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b084      	sub	sp, #16
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d106      	bne.n	8014b40 <tcp_listen_closed+0x1c>
 8014b32:	4b14      	ldr	r3, [pc, #80]	@ (8014b84 <tcp_listen_closed+0x60>)
 8014b34:	f240 1211 	movw	r2, #273	@ 0x111
 8014b38:	4913      	ldr	r1, [pc, #76]	@ (8014b88 <tcp_listen_closed+0x64>)
 8014b3a:	4814      	ldr	r0, [pc, #80]	@ (8014b8c <tcp_listen_closed+0x68>)
 8014b3c:	f009 faa8 	bl	801e090 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	7d1b      	ldrb	r3, [r3, #20]
 8014b44:	2b01      	cmp	r3, #1
 8014b46:	d006      	beq.n	8014b56 <tcp_listen_closed+0x32>
 8014b48:	4b0e      	ldr	r3, [pc, #56]	@ (8014b84 <tcp_listen_closed+0x60>)
 8014b4a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8014b4e:	4910      	ldr	r1, [pc, #64]	@ (8014b90 <tcp_listen_closed+0x6c>)
 8014b50:	480e      	ldr	r0, [pc, #56]	@ (8014b8c <tcp_listen_closed+0x68>)
 8014b52:	f009 fa9d 	bl	801e090 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014b56:	2301      	movs	r3, #1
 8014b58:	60fb      	str	r3, [r7, #12]
 8014b5a:	e00b      	b.n	8014b74 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8014b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8014b94 <tcp_listen_closed+0x70>)
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	6879      	ldr	r1, [r7, #4]
 8014b68:	4618      	mov	r0, r3
 8014b6a:	f7ff ffb1 	bl	8014ad0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	3301      	adds	r3, #1
 8014b72:	60fb      	str	r3, [r7, #12]
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	2b03      	cmp	r3, #3
 8014b78:	d9f0      	bls.n	8014b5c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8014b7a:	bf00      	nop
 8014b7c:	bf00      	nop
 8014b7e:	3710      	adds	r7, #16
 8014b80:	46bd      	mov	sp, r7
 8014b82:	bd80      	pop	{r7, pc}
 8014b84:	0801fdb8 	.word	0x0801fdb8
 8014b88:	0801fe68 	.word	0x0801fe68
 8014b8c:	0801fdfc 	.word	0x0801fdfc
 8014b90:	0801fe74 	.word	0x0801fe74
 8014b94:	080222c4 	.word	0x080222c4

08014b98 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8014b98:	b5b0      	push	{r4, r5, r7, lr}
 8014b9a:	b088      	sub	sp, #32
 8014b9c:	af04      	add	r7, sp, #16
 8014b9e:	6078      	str	r0, [r7, #4]
 8014ba0:	460b      	mov	r3, r1
 8014ba2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d106      	bne.n	8014bb8 <tcp_close_shutdown+0x20>
 8014baa:	4b63      	ldr	r3, [pc, #396]	@ (8014d38 <tcp_close_shutdown+0x1a0>)
 8014bac:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8014bb0:	4962      	ldr	r1, [pc, #392]	@ (8014d3c <tcp_close_shutdown+0x1a4>)
 8014bb2:	4863      	ldr	r0, [pc, #396]	@ (8014d40 <tcp_close_shutdown+0x1a8>)
 8014bb4:	f009 fa6c 	bl	801e090 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8014bb8:	78fb      	ldrb	r3, [r7, #3]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d066      	beq.n	8014c8c <tcp_close_shutdown+0xf4>
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	7d1b      	ldrb	r3, [r3, #20]
 8014bc2:	2b04      	cmp	r3, #4
 8014bc4:	d003      	beq.n	8014bce <tcp_close_shutdown+0x36>
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	7d1b      	ldrb	r3, [r3, #20]
 8014bca:	2b07      	cmp	r3, #7
 8014bcc:	d15e      	bne.n	8014c8c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d104      	bne.n	8014be0 <tcp_close_shutdown+0x48>
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014bda:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014bde:	d055      	beq.n	8014c8c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	8b5b      	ldrh	r3, [r3, #26]
 8014be4:	f003 0310 	and.w	r3, r3, #16
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d106      	bne.n	8014bfa <tcp_close_shutdown+0x62>
 8014bec:	4b52      	ldr	r3, [pc, #328]	@ (8014d38 <tcp_close_shutdown+0x1a0>)
 8014bee:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8014bf2:	4954      	ldr	r1, [pc, #336]	@ (8014d44 <tcp_close_shutdown+0x1ac>)
 8014bf4:	4852      	ldr	r0, [pc, #328]	@ (8014d40 <tcp_close_shutdown+0x1a8>)
 8014bf6:	f009 fa4b 	bl	801e090 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014c02:	687d      	ldr	r5, [r7, #4]
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	3304      	adds	r3, #4
 8014c08:	687a      	ldr	r2, [r7, #4]
 8014c0a:	8ad2      	ldrh	r2, [r2, #22]
 8014c0c:	6879      	ldr	r1, [r7, #4]
 8014c0e:	8b09      	ldrh	r1, [r1, #24]
 8014c10:	9102      	str	r1, [sp, #8]
 8014c12:	9201      	str	r2, [sp, #4]
 8014c14:	9300      	str	r3, [sp, #0]
 8014c16:	462b      	mov	r3, r5
 8014c18:	4622      	mov	r2, r4
 8014c1a:	4601      	mov	r1, r0
 8014c1c:	6878      	ldr	r0, [r7, #4]
 8014c1e:	f004 fe8d 	bl	801993c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8014c22:	6878      	ldr	r0, [r7, #4]
 8014c24:	f001 f8c8 	bl	8015db8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014c28:	4b47      	ldr	r3, [pc, #284]	@ (8014d48 <tcp_close_shutdown+0x1b0>)
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	687a      	ldr	r2, [r7, #4]
 8014c2e:	429a      	cmp	r2, r3
 8014c30:	d105      	bne.n	8014c3e <tcp_close_shutdown+0xa6>
 8014c32:	4b45      	ldr	r3, [pc, #276]	@ (8014d48 <tcp_close_shutdown+0x1b0>)
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	68db      	ldr	r3, [r3, #12]
 8014c38:	4a43      	ldr	r2, [pc, #268]	@ (8014d48 <tcp_close_shutdown+0x1b0>)
 8014c3a:	6013      	str	r3, [r2, #0]
 8014c3c:	e013      	b.n	8014c66 <tcp_close_shutdown+0xce>
 8014c3e:	4b42      	ldr	r3, [pc, #264]	@ (8014d48 <tcp_close_shutdown+0x1b0>)
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	60fb      	str	r3, [r7, #12]
 8014c44:	e00c      	b.n	8014c60 <tcp_close_shutdown+0xc8>
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	68db      	ldr	r3, [r3, #12]
 8014c4a:	687a      	ldr	r2, [r7, #4]
 8014c4c:	429a      	cmp	r2, r3
 8014c4e:	d104      	bne.n	8014c5a <tcp_close_shutdown+0xc2>
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	68da      	ldr	r2, [r3, #12]
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	60da      	str	r2, [r3, #12]
 8014c58:	e005      	b.n	8014c66 <tcp_close_shutdown+0xce>
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	68db      	ldr	r3, [r3, #12]
 8014c5e:	60fb      	str	r3, [r7, #12]
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d1ef      	bne.n	8014c46 <tcp_close_shutdown+0xae>
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	2200      	movs	r2, #0
 8014c6a:	60da      	str	r2, [r3, #12]
 8014c6c:	4b37      	ldr	r3, [pc, #220]	@ (8014d4c <tcp_close_shutdown+0x1b4>)
 8014c6e:	2201      	movs	r2, #1
 8014c70:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8014c72:	4b37      	ldr	r3, [pc, #220]	@ (8014d50 <tcp_close_shutdown+0x1b8>)
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	687a      	ldr	r2, [r7, #4]
 8014c78:	429a      	cmp	r2, r3
 8014c7a:	d102      	bne.n	8014c82 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8014c7c:	f003 fd5c 	bl	8018738 <tcp_trigger_input_pcb_close>
 8014c80:	e002      	b.n	8014c88 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8014c82:	6878      	ldr	r0, [r7, #4]
 8014c84:	f7ff fed6 	bl	8014a34 <tcp_free>
      }
      return ERR_OK;
 8014c88:	2300      	movs	r3, #0
 8014c8a:	e050      	b.n	8014d2e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	7d1b      	ldrb	r3, [r3, #20]
 8014c90:	2b02      	cmp	r3, #2
 8014c92:	d03b      	beq.n	8014d0c <tcp_close_shutdown+0x174>
 8014c94:	2b02      	cmp	r3, #2
 8014c96:	dc44      	bgt.n	8014d22 <tcp_close_shutdown+0x18a>
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d002      	beq.n	8014ca2 <tcp_close_shutdown+0x10a>
 8014c9c:	2b01      	cmp	r3, #1
 8014c9e:	d02a      	beq.n	8014cf6 <tcp_close_shutdown+0x15e>
 8014ca0:	e03f      	b.n	8014d22 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	8adb      	ldrh	r3, [r3, #22]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d021      	beq.n	8014cee <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014caa:	4b2a      	ldr	r3, [pc, #168]	@ (8014d54 <tcp_close_shutdown+0x1bc>)
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	687a      	ldr	r2, [r7, #4]
 8014cb0:	429a      	cmp	r2, r3
 8014cb2:	d105      	bne.n	8014cc0 <tcp_close_shutdown+0x128>
 8014cb4:	4b27      	ldr	r3, [pc, #156]	@ (8014d54 <tcp_close_shutdown+0x1bc>)
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	68db      	ldr	r3, [r3, #12]
 8014cba:	4a26      	ldr	r2, [pc, #152]	@ (8014d54 <tcp_close_shutdown+0x1bc>)
 8014cbc:	6013      	str	r3, [r2, #0]
 8014cbe:	e013      	b.n	8014ce8 <tcp_close_shutdown+0x150>
 8014cc0:	4b24      	ldr	r3, [pc, #144]	@ (8014d54 <tcp_close_shutdown+0x1bc>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	60bb      	str	r3, [r7, #8]
 8014cc6:	e00c      	b.n	8014ce2 <tcp_close_shutdown+0x14a>
 8014cc8:	68bb      	ldr	r3, [r7, #8]
 8014cca:	68db      	ldr	r3, [r3, #12]
 8014ccc:	687a      	ldr	r2, [r7, #4]
 8014cce:	429a      	cmp	r2, r3
 8014cd0:	d104      	bne.n	8014cdc <tcp_close_shutdown+0x144>
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	68da      	ldr	r2, [r3, #12]
 8014cd6:	68bb      	ldr	r3, [r7, #8]
 8014cd8:	60da      	str	r2, [r3, #12]
 8014cda:	e005      	b.n	8014ce8 <tcp_close_shutdown+0x150>
 8014cdc:	68bb      	ldr	r3, [r7, #8]
 8014cde:	68db      	ldr	r3, [r3, #12]
 8014ce0:	60bb      	str	r3, [r7, #8]
 8014ce2:	68bb      	ldr	r3, [r7, #8]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d1ef      	bne.n	8014cc8 <tcp_close_shutdown+0x130>
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	2200      	movs	r2, #0
 8014cec:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8014cee:	6878      	ldr	r0, [r7, #4]
 8014cf0:	f7ff fea0 	bl	8014a34 <tcp_free>
      break;
 8014cf4:	e01a      	b.n	8014d2c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8014cf6:	6878      	ldr	r0, [r7, #4]
 8014cf8:	f7ff ff14 	bl	8014b24 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8014cfc:	6879      	ldr	r1, [r7, #4]
 8014cfe:	4816      	ldr	r0, [pc, #88]	@ (8014d58 <tcp_close_shutdown+0x1c0>)
 8014d00:	f001 f8aa 	bl	8015e58 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014d04:	6878      	ldr	r0, [r7, #4]
 8014d06:	f7ff feb1 	bl	8014a6c <tcp_free_listen>
      break;
 8014d0a:	e00f      	b.n	8014d2c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014d0c:	6879      	ldr	r1, [r7, #4]
 8014d0e:	480e      	ldr	r0, [pc, #56]	@ (8014d48 <tcp_close_shutdown+0x1b0>)
 8014d10:	f001 f8a2 	bl	8015e58 <tcp_pcb_remove>
 8014d14:	4b0d      	ldr	r3, [pc, #52]	@ (8014d4c <tcp_close_shutdown+0x1b4>)
 8014d16:	2201      	movs	r2, #1
 8014d18:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8014d1a:	6878      	ldr	r0, [r7, #4]
 8014d1c:	f7ff fe8a 	bl	8014a34 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8014d20:	e004      	b.n	8014d2c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8014d22:	6878      	ldr	r0, [r7, #4]
 8014d24:	f000 f81a 	bl	8014d5c <tcp_close_shutdown_fin>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	e000      	b.n	8014d2e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8014d2c:	2300      	movs	r3, #0
}
 8014d2e:	4618      	mov	r0, r3
 8014d30:	3710      	adds	r7, #16
 8014d32:	46bd      	mov	sp, r7
 8014d34:	bdb0      	pop	{r4, r5, r7, pc}
 8014d36:	bf00      	nop
 8014d38:	0801fdb8 	.word	0x0801fdb8
 8014d3c:	0801fe8c 	.word	0x0801fe8c
 8014d40:	0801fdfc 	.word	0x0801fdfc
 8014d44:	0801feac 	.word	0x0801feac
 8014d48:	200277bc 	.word	0x200277bc
 8014d4c:	200277c4 	.word	0x200277c4
 8014d50:	200277fc 	.word	0x200277fc
 8014d54:	200277b4 	.word	0x200277b4
 8014d58:	200277b8 	.word	0x200277b8

08014d5c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b084      	sub	sp, #16
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d106      	bne.n	8014d78 <tcp_close_shutdown_fin+0x1c>
 8014d6a:	4b2e      	ldr	r3, [pc, #184]	@ (8014e24 <tcp_close_shutdown_fin+0xc8>)
 8014d6c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8014d70:	492d      	ldr	r1, [pc, #180]	@ (8014e28 <tcp_close_shutdown_fin+0xcc>)
 8014d72:	482e      	ldr	r0, [pc, #184]	@ (8014e2c <tcp_close_shutdown_fin+0xd0>)
 8014d74:	f009 f98c 	bl	801e090 <iprintf>

  switch (pcb->state) {
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	7d1b      	ldrb	r3, [r3, #20]
 8014d7c:	2b07      	cmp	r3, #7
 8014d7e:	d020      	beq.n	8014dc2 <tcp_close_shutdown_fin+0x66>
 8014d80:	2b07      	cmp	r3, #7
 8014d82:	dc2b      	bgt.n	8014ddc <tcp_close_shutdown_fin+0x80>
 8014d84:	2b03      	cmp	r3, #3
 8014d86:	d002      	beq.n	8014d8e <tcp_close_shutdown_fin+0x32>
 8014d88:	2b04      	cmp	r3, #4
 8014d8a:	d00d      	beq.n	8014da8 <tcp_close_shutdown_fin+0x4c>
 8014d8c:	e026      	b.n	8014ddc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8014d8e:	6878      	ldr	r0, [r7, #4]
 8014d90:	f003 fee2 	bl	8018b58 <tcp_send_fin>
 8014d94:	4603      	mov	r3, r0
 8014d96:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d11f      	bne.n	8014de0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	2205      	movs	r2, #5
 8014da4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014da6:	e01b      	b.n	8014de0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8014da8:	6878      	ldr	r0, [r7, #4]
 8014daa:	f003 fed5 	bl	8018b58 <tcp_send_fin>
 8014dae:	4603      	mov	r3, r0
 8014db0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d114      	bne.n	8014de4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	2205      	movs	r2, #5
 8014dbe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014dc0:	e010      	b.n	8014de4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8014dc2:	6878      	ldr	r0, [r7, #4]
 8014dc4:	f003 fec8 	bl	8018b58 <tcp_send_fin>
 8014dc8:	4603      	mov	r3, r0
 8014dca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d109      	bne.n	8014de8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	2209      	movs	r2, #9
 8014dd8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014dda:	e005      	b.n	8014de8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8014ddc:	2300      	movs	r3, #0
 8014dde:	e01c      	b.n	8014e1a <tcp_close_shutdown_fin+0xbe>
      break;
 8014de0:	bf00      	nop
 8014de2:	e002      	b.n	8014dea <tcp_close_shutdown_fin+0x8e>
      break;
 8014de4:	bf00      	nop
 8014de6:	e000      	b.n	8014dea <tcp_close_shutdown_fin+0x8e>
      break;
 8014de8:	bf00      	nop
  }

  if (err == ERR_OK) {
 8014dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d103      	bne.n	8014dfa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8014df2:	6878      	ldr	r0, [r7, #4]
 8014df4:	f003 ffee 	bl	8018dd4 <tcp_output>
 8014df8:	e00d      	b.n	8014e16 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8014dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e02:	d108      	bne.n	8014e16 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	8b5b      	ldrh	r3, [r3, #26]
 8014e08:	f043 0308 	orr.w	r3, r3, #8
 8014e0c:	b29a      	uxth	r2, r3
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8014e12:	2300      	movs	r3, #0
 8014e14:	e001      	b.n	8014e1a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8014e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	3710      	adds	r7, #16
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	bd80      	pop	{r7, pc}
 8014e22:	bf00      	nop
 8014e24:	0801fdb8 	.word	0x0801fdb8
 8014e28:	0801fe68 	.word	0x0801fe68
 8014e2c:	0801fdfc 	.word	0x0801fdfc

08014e30 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014e30:	b580      	push	{r7, lr}
 8014e32:	b082      	sub	sp, #8
 8014e34:	af00      	add	r7, sp, #0
 8014e36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d109      	bne.n	8014e52 <tcp_close+0x22>
 8014e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8014e7c <tcp_close+0x4c>)
 8014e40:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8014e44:	490e      	ldr	r1, [pc, #56]	@ (8014e80 <tcp_close+0x50>)
 8014e46:	480f      	ldr	r0, [pc, #60]	@ (8014e84 <tcp_close+0x54>)
 8014e48:	f009 f922 	bl	801e090 <iprintf>
 8014e4c:	f06f 030f 	mvn.w	r3, #15
 8014e50:	e00f      	b.n	8014e72 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	7d1b      	ldrb	r3, [r3, #20]
 8014e56:	2b01      	cmp	r3, #1
 8014e58:	d006      	beq.n	8014e68 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	8b5b      	ldrh	r3, [r3, #26]
 8014e5e:	f043 0310 	orr.w	r3, r3, #16
 8014e62:	b29a      	uxth	r2, r3
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8014e68:	2101      	movs	r1, #1
 8014e6a:	6878      	ldr	r0, [r7, #4]
 8014e6c:	f7ff fe94 	bl	8014b98 <tcp_close_shutdown>
 8014e70:	4603      	mov	r3, r0
}
 8014e72:	4618      	mov	r0, r3
 8014e74:	3708      	adds	r7, #8
 8014e76:	46bd      	mov	sp, r7
 8014e78:	bd80      	pop	{r7, pc}
 8014e7a:	bf00      	nop
 8014e7c:	0801fdb8 	.word	0x0801fdb8
 8014e80:	0801fec8 	.word	0x0801fec8
 8014e84:	0801fdfc 	.word	0x0801fdfc

08014e88 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	b08e      	sub	sp, #56	@ 0x38
 8014e8c:	af04      	add	r7, sp, #16
 8014e8e:	6078      	str	r0, [r7, #4]
 8014e90:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d107      	bne.n	8014ea8 <tcp_abandon+0x20>
 8014e98:	4b52      	ldr	r3, [pc, #328]	@ (8014fe4 <tcp_abandon+0x15c>)
 8014e9a:	f240 223d 	movw	r2, #573	@ 0x23d
 8014e9e:	4952      	ldr	r1, [pc, #328]	@ (8014fe8 <tcp_abandon+0x160>)
 8014ea0:	4852      	ldr	r0, [pc, #328]	@ (8014fec <tcp_abandon+0x164>)
 8014ea2:	f009 f8f5 	bl	801e090 <iprintf>
 8014ea6:	e099      	b.n	8014fdc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	7d1b      	ldrb	r3, [r3, #20]
 8014eac:	2b01      	cmp	r3, #1
 8014eae:	d106      	bne.n	8014ebe <tcp_abandon+0x36>
 8014eb0:	4b4c      	ldr	r3, [pc, #304]	@ (8014fe4 <tcp_abandon+0x15c>)
 8014eb2:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8014eb6:	494e      	ldr	r1, [pc, #312]	@ (8014ff0 <tcp_abandon+0x168>)
 8014eb8:	484c      	ldr	r0, [pc, #304]	@ (8014fec <tcp_abandon+0x164>)
 8014eba:	f009 f8e9 	bl	801e090 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	7d1b      	ldrb	r3, [r3, #20]
 8014ec2:	2b0a      	cmp	r3, #10
 8014ec4:	d107      	bne.n	8014ed6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8014ec6:	6879      	ldr	r1, [r7, #4]
 8014ec8:	484a      	ldr	r0, [pc, #296]	@ (8014ff4 <tcp_abandon+0x16c>)
 8014eca:	f000 ffc5 	bl	8015e58 <tcp_pcb_remove>
    tcp_free(pcb);
 8014ece:	6878      	ldr	r0, [r7, #4]
 8014ed0:	f7ff fdb0 	bl	8014a34 <tcp_free>
 8014ed4:	e082      	b.n	8014fdc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8014ed6:	2300      	movs	r3, #0
 8014ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8014eda:	2300      	movs	r3, #0
 8014edc:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014ee2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ee8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014ef0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	691b      	ldr	r3, [r3, #16]
 8014ef6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	7d1b      	ldrb	r3, [r3, #20]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d126      	bne.n	8014f4e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	8adb      	ldrh	r3, [r3, #22]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d02e      	beq.n	8014f66 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014f08:	4b3b      	ldr	r3, [pc, #236]	@ (8014ff8 <tcp_abandon+0x170>)
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	687a      	ldr	r2, [r7, #4]
 8014f0e:	429a      	cmp	r2, r3
 8014f10:	d105      	bne.n	8014f1e <tcp_abandon+0x96>
 8014f12:	4b39      	ldr	r3, [pc, #228]	@ (8014ff8 <tcp_abandon+0x170>)
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	68db      	ldr	r3, [r3, #12]
 8014f18:	4a37      	ldr	r2, [pc, #220]	@ (8014ff8 <tcp_abandon+0x170>)
 8014f1a:	6013      	str	r3, [r2, #0]
 8014f1c:	e013      	b.n	8014f46 <tcp_abandon+0xbe>
 8014f1e:	4b36      	ldr	r3, [pc, #216]	@ (8014ff8 <tcp_abandon+0x170>)
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	61fb      	str	r3, [r7, #28]
 8014f24:	e00c      	b.n	8014f40 <tcp_abandon+0xb8>
 8014f26:	69fb      	ldr	r3, [r7, #28]
 8014f28:	68db      	ldr	r3, [r3, #12]
 8014f2a:	687a      	ldr	r2, [r7, #4]
 8014f2c:	429a      	cmp	r2, r3
 8014f2e:	d104      	bne.n	8014f3a <tcp_abandon+0xb2>
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	68da      	ldr	r2, [r3, #12]
 8014f34:	69fb      	ldr	r3, [r7, #28]
 8014f36:	60da      	str	r2, [r3, #12]
 8014f38:	e005      	b.n	8014f46 <tcp_abandon+0xbe>
 8014f3a:	69fb      	ldr	r3, [r7, #28]
 8014f3c:	68db      	ldr	r3, [r3, #12]
 8014f3e:	61fb      	str	r3, [r7, #28]
 8014f40:	69fb      	ldr	r3, [r7, #28]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d1ef      	bne.n	8014f26 <tcp_abandon+0x9e>
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	2200      	movs	r2, #0
 8014f4a:	60da      	str	r2, [r3, #12]
 8014f4c:	e00b      	b.n	8014f66 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8014f4e:	683b      	ldr	r3, [r7, #0]
 8014f50:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	8adb      	ldrh	r3, [r3, #22]
 8014f56:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014f58:	6879      	ldr	r1, [r7, #4]
 8014f5a:	4828      	ldr	r0, [pc, #160]	@ (8014ffc <tcp_abandon+0x174>)
 8014f5c:	f000 ff7c 	bl	8015e58 <tcp_pcb_remove>
 8014f60:	4b27      	ldr	r3, [pc, #156]	@ (8015000 <tcp_abandon+0x178>)
 8014f62:	2201      	movs	r2, #1
 8014f64:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d004      	beq.n	8014f78 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014f72:	4618      	mov	r0, r3
 8014f74:	f000 fd1e 	bl	80159b4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d004      	beq.n	8014f8a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f84:	4618      	mov	r0, r3
 8014f86:	f000 fd15 	bl	80159b4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d004      	beq.n	8014f9c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014f96:	4618      	mov	r0, r3
 8014f98:	f000 fd0c 	bl	80159b4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8014f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d00e      	beq.n	8014fc0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8014fa2:	6879      	ldr	r1, [r7, #4]
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	3304      	adds	r3, #4
 8014fa8:	687a      	ldr	r2, [r7, #4]
 8014faa:	8b12      	ldrh	r2, [r2, #24]
 8014fac:	9202      	str	r2, [sp, #8]
 8014fae:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014fb0:	9201      	str	r2, [sp, #4]
 8014fb2:	9300      	str	r3, [sp, #0]
 8014fb4:	460b      	mov	r3, r1
 8014fb6:	697a      	ldr	r2, [r7, #20]
 8014fb8:	69b9      	ldr	r1, [r7, #24]
 8014fba:	6878      	ldr	r0, [r7, #4]
 8014fbc:	f004 fcbe 	bl	801993c <tcp_rst>
    }
    last_state = pcb->state;
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	7d1b      	ldrb	r3, [r3, #20]
 8014fc4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8014fc6:	6878      	ldr	r0, [r7, #4]
 8014fc8:	f7ff fd34 	bl	8014a34 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8014fcc:	693b      	ldr	r3, [r7, #16]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d004      	beq.n	8014fdc <tcp_abandon+0x154>
 8014fd2:	693b      	ldr	r3, [r7, #16]
 8014fd4:	f06f 010c 	mvn.w	r1, #12
 8014fd8:	68f8      	ldr	r0, [r7, #12]
 8014fda:	4798      	blx	r3
  }
}
 8014fdc:	3728      	adds	r7, #40	@ 0x28
 8014fde:	46bd      	mov	sp, r7
 8014fe0:	bd80      	pop	{r7, pc}
 8014fe2:	bf00      	nop
 8014fe4:	0801fdb8 	.word	0x0801fdb8
 8014fe8:	0801fefc 	.word	0x0801fefc
 8014fec:	0801fdfc 	.word	0x0801fdfc
 8014ff0:	0801ff18 	.word	0x0801ff18
 8014ff4:	200277c0 	.word	0x200277c0
 8014ff8:	200277b4 	.word	0x200277b4
 8014ffc:	200277bc 	.word	0x200277bc
 8015000:	200277c4 	.word	0x200277c4

08015004 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b082      	sub	sp, #8
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801500c:	2101      	movs	r1, #1
 801500e:	6878      	ldr	r0, [r7, #4]
 8015010:	f7ff ff3a 	bl	8014e88 <tcp_abandon>
}
 8015014:	bf00      	nop
 8015016:	3708      	adds	r7, #8
 8015018:	46bd      	mov	sp, r7
 801501a:	bd80      	pop	{r7, pc}

0801501c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801501c:	b580      	push	{r7, lr}
 801501e:	b084      	sub	sp, #16
 8015020:	af00      	add	r7, sp, #0
 8015022:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d106      	bne.n	8015038 <tcp_update_rcv_ann_wnd+0x1c>
 801502a:	4b25      	ldr	r3, [pc, #148]	@ (80150c0 <tcp_update_rcv_ann_wnd+0xa4>)
 801502c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8015030:	4924      	ldr	r1, [pc, #144]	@ (80150c4 <tcp_update_rcv_ann_wnd+0xa8>)
 8015032:	4825      	ldr	r0, [pc, #148]	@ (80150c8 <tcp_update_rcv_ann_wnd+0xac>)
 8015034:	f009 f82c 	bl	801e090 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801503c:	687a      	ldr	r2, [r7, #4]
 801503e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8015040:	4413      	add	r3, r2
 8015042:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015048:	687a      	ldr	r2, [r7, #4]
 801504a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 801504c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8015050:	bf28      	it	cs
 8015052:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8015056:	b292      	uxth	r2, r2
 8015058:	4413      	add	r3, r2
 801505a:	68fa      	ldr	r2, [r7, #12]
 801505c:	1ad3      	subs	r3, r2, r3
 801505e:	2b00      	cmp	r3, #0
 8015060:	db08      	blt.n	8015074 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801506e:	68fa      	ldr	r2, [r7, #12]
 8015070:	1ad3      	subs	r3, r2, r3
 8015072:	e020      	b.n	80150b6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801507c:	1ad3      	subs	r3, r2, r3
 801507e:	2b00      	cmp	r3, #0
 8015080:	dd03      	ble.n	801508a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	2200      	movs	r2, #0
 8015086:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015088:	e014      	b.n	80150b4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015092:	1ad3      	subs	r3, r2, r3
 8015094:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8015096:	68bb      	ldr	r3, [r7, #8]
 8015098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801509c:	d306      	bcc.n	80150ac <tcp_update_rcv_ann_wnd+0x90>
 801509e:	4b08      	ldr	r3, [pc, #32]	@ (80150c0 <tcp_update_rcv_ann_wnd+0xa4>)
 80150a0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80150a4:	4909      	ldr	r1, [pc, #36]	@ (80150cc <tcp_update_rcv_ann_wnd+0xb0>)
 80150a6:	4808      	ldr	r0, [pc, #32]	@ (80150c8 <tcp_update_rcv_ann_wnd+0xac>)
 80150a8:	f008 fff2 	bl	801e090 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80150ac:	68bb      	ldr	r3, [r7, #8]
 80150ae:	b29a      	uxth	r2, r3
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80150b4:	2300      	movs	r3, #0
  }
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3710      	adds	r7, #16
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd80      	pop	{r7, pc}
 80150be:	bf00      	nop
 80150c0:	0801fdb8 	.word	0x0801fdb8
 80150c4:	08020014 	.word	0x08020014
 80150c8:	0801fdfc 	.word	0x0801fdfc
 80150cc:	08020038 	.word	0x08020038

080150d0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b084      	sub	sp, #16
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	6078      	str	r0, [r7, #4]
 80150d8:	460b      	mov	r3, r1
 80150da:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d107      	bne.n	80150f2 <tcp_recved+0x22>
 80150e2:	4b1f      	ldr	r3, [pc, #124]	@ (8015160 <tcp_recved+0x90>)
 80150e4:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80150e8:	491e      	ldr	r1, [pc, #120]	@ (8015164 <tcp_recved+0x94>)
 80150ea:	481f      	ldr	r0, [pc, #124]	@ (8015168 <tcp_recved+0x98>)
 80150ec:	f008 ffd0 	bl	801e090 <iprintf>
 80150f0:	e032      	b.n	8015158 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	7d1b      	ldrb	r3, [r3, #20]
 80150f6:	2b01      	cmp	r3, #1
 80150f8:	d106      	bne.n	8015108 <tcp_recved+0x38>
 80150fa:	4b19      	ldr	r3, [pc, #100]	@ (8015160 <tcp_recved+0x90>)
 80150fc:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8015100:	491a      	ldr	r1, [pc, #104]	@ (801516c <tcp_recved+0x9c>)
 8015102:	4819      	ldr	r0, [pc, #100]	@ (8015168 <tcp_recved+0x98>)
 8015104:	f008 ffc4 	bl	801e090 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801510c:	887b      	ldrh	r3, [r7, #2]
 801510e:	4413      	add	r3, r2
 8015110:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8015112:	89fb      	ldrh	r3, [r7, #14]
 8015114:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8015118:	d804      	bhi.n	8015124 <tcp_recved+0x54>
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801511e:	89fa      	ldrh	r2, [r7, #14]
 8015120:	429a      	cmp	r2, r3
 8015122:	d204      	bcs.n	801512e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801512a:	851a      	strh	r2, [r3, #40]	@ 0x28
 801512c:	e002      	b.n	8015134 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	89fa      	ldrh	r2, [r7, #14]
 8015132:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8015134:	6878      	ldr	r0, [r7, #4]
 8015136:	f7ff ff71 	bl	801501c <tcp_update_rcv_ann_wnd>
 801513a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801513c:	68bb      	ldr	r3, [r7, #8]
 801513e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8015142:	d309      	bcc.n	8015158 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	8b5b      	ldrh	r3, [r3, #26]
 8015148:	f043 0302 	orr.w	r3, r3, #2
 801514c:	b29a      	uxth	r2, r3
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015152:	6878      	ldr	r0, [r7, #4]
 8015154:	f003 fe3e 	bl	8018dd4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8015158:	3710      	adds	r7, #16
 801515a:	46bd      	mov	sp, r7
 801515c:	bd80      	pop	{r7, pc}
 801515e:	bf00      	nop
 8015160:	0801fdb8 	.word	0x0801fdb8
 8015164:	08020054 	.word	0x08020054
 8015168:	0801fdfc 	.word	0x0801fdfc
 801516c:	0802006c 	.word	0x0802006c

08015170 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8015170:	b5b0      	push	{r4, r5, r7, lr}
 8015172:	b090      	sub	sp, #64	@ 0x40
 8015174:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8015176:	2300      	movs	r3, #0
 8015178:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 801517c:	4b95      	ldr	r3, [pc, #596]	@ (80153d4 <tcp_slowtmr+0x264>)
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	3301      	adds	r3, #1
 8015182:	4a94      	ldr	r2, [pc, #592]	@ (80153d4 <tcp_slowtmr+0x264>)
 8015184:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8015186:	4b94      	ldr	r3, [pc, #592]	@ (80153d8 <tcp_slowtmr+0x268>)
 8015188:	781b      	ldrb	r3, [r3, #0]
 801518a:	3301      	adds	r3, #1
 801518c:	b2da      	uxtb	r2, r3
 801518e:	4b92      	ldr	r3, [pc, #584]	@ (80153d8 <tcp_slowtmr+0x268>)
 8015190:	701a      	strb	r2, [r3, #0]
 8015192:	e000      	b.n	8015196 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8015194:	bf00      	nop
  prev = NULL;
 8015196:	2300      	movs	r3, #0
 8015198:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801519a:	4b90      	ldr	r3, [pc, #576]	@ (80153dc <tcp_slowtmr+0x26c>)
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80151a0:	e29d      	b.n	80156de <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80151a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151a4:	7d1b      	ldrb	r3, [r3, #20]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d106      	bne.n	80151b8 <tcp_slowtmr+0x48>
 80151aa:	4b8d      	ldr	r3, [pc, #564]	@ (80153e0 <tcp_slowtmr+0x270>)
 80151ac:	f240 42be 	movw	r2, #1214	@ 0x4be
 80151b0:	498c      	ldr	r1, [pc, #560]	@ (80153e4 <tcp_slowtmr+0x274>)
 80151b2:	488d      	ldr	r0, [pc, #564]	@ (80153e8 <tcp_slowtmr+0x278>)
 80151b4:	f008 ff6c 	bl	801e090 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80151b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151ba:	7d1b      	ldrb	r3, [r3, #20]
 80151bc:	2b01      	cmp	r3, #1
 80151be:	d106      	bne.n	80151ce <tcp_slowtmr+0x5e>
 80151c0:	4b87      	ldr	r3, [pc, #540]	@ (80153e0 <tcp_slowtmr+0x270>)
 80151c2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80151c6:	4989      	ldr	r1, [pc, #548]	@ (80153ec <tcp_slowtmr+0x27c>)
 80151c8:	4887      	ldr	r0, [pc, #540]	@ (80153e8 <tcp_slowtmr+0x278>)
 80151ca:	f008 ff61 	bl	801e090 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80151ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151d0:	7d1b      	ldrb	r3, [r3, #20]
 80151d2:	2b0a      	cmp	r3, #10
 80151d4:	d106      	bne.n	80151e4 <tcp_slowtmr+0x74>
 80151d6:	4b82      	ldr	r3, [pc, #520]	@ (80153e0 <tcp_slowtmr+0x270>)
 80151d8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80151dc:	4984      	ldr	r1, [pc, #528]	@ (80153f0 <tcp_slowtmr+0x280>)
 80151de:	4882      	ldr	r0, [pc, #520]	@ (80153e8 <tcp_slowtmr+0x278>)
 80151e0:	f008 ff56 	bl	801e090 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80151e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151e6:	7f9a      	ldrb	r2, [r3, #30]
 80151e8:	4b7b      	ldr	r3, [pc, #492]	@ (80153d8 <tcp_slowtmr+0x268>)
 80151ea:	781b      	ldrb	r3, [r3, #0]
 80151ec:	429a      	cmp	r2, r3
 80151ee:	d105      	bne.n	80151fc <tcp_slowtmr+0x8c>
      prev = pcb;
 80151f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80151f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151f6:	68db      	ldr	r3, [r3, #12]
 80151f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80151fa:	e270      	b.n	80156de <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 80151fc:	4b76      	ldr	r3, [pc, #472]	@ (80153d8 <tcp_slowtmr+0x268>)
 80151fe:	781a      	ldrb	r2, [r3, #0]
 8015200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015202:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8015204:	2300      	movs	r3, #0
 8015206:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801520a:	2300      	movs	r3, #0
 801520c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015212:	7d1b      	ldrb	r3, [r3, #20]
 8015214:	2b02      	cmp	r3, #2
 8015216:	d10a      	bne.n	801522e <tcp_slowtmr+0xbe>
 8015218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801521a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801521e:	2b05      	cmp	r3, #5
 8015220:	d905      	bls.n	801522e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8015222:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015226:	3301      	adds	r3, #1
 8015228:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801522c:	e11e      	b.n	801546c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801522e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015230:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015234:	2b0b      	cmp	r3, #11
 8015236:	d905      	bls.n	8015244 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8015238:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801523c:	3301      	adds	r3, #1
 801523e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015242:	e113      	b.n	801546c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8015244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015246:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801524a:	2b00      	cmp	r3, #0
 801524c:	d075      	beq.n	801533a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801524e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015252:	2b00      	cmp	r3, #0
 8015254:	d006      	beq.n	8015264 <tcp_slowtmr+0xf4>
 8015256:	4b62      	ldr	r3, [pc, #392]	@ (80153e0 <tcp_slowtmr+0x270>)
 8015258:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 801525c:	4965      	ldr	r1, [pc, #404]	@ (80153f4 <tcp_slowtmr+0x284>)
 801525e:	4862      	ldr	r0, [pc, #392]	@ (80153e8 <tcp_slowtmr+0x278>)
 8015260:	f008 ff16 	bl	801e090 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8015264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015266:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015268:	2b00      	cmp	r3, #0
 801526a:	d106      	bne.n	801527a <tcp_slowtmr+0x10a>
 801526c:	4b5c      	ldr	r3, [pc, #368]	@ (80153e0 <tcp_slowtmr+0x270>)
 801526e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8015272:	4961      	ldr	r1, [pc, #388]	@ (80153f8 <tcp_slowtmr+0x288>)
 8015274:	485c      	ldr	r0, [pc, #368]	@ (80153e8 <tcp_slowtmr+0x278>)
 8015276:	f008 ff0b 	bl	801e090 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801527a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801527c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015280:	2b0b      	cmp	r3, #11
 8015282:	d905      	bls.n	8015290 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8015284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015288:	3301      	adds	r3, #1
 801528a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801528e:	e0ed      	b.n	801546c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8015290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015292:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015296:	3b01      	subs	r3, #1
 8015298:	4a58      	ldr	r2, [pc, #352]	@ (80153fc <tcp_slowtmr+0x28c>)
 801529a:	5cd3      	ldrb	r3, [r2, r3]
 801529c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801529e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152a0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80152a4:	7c7a      	ldrb	r2, [r7, #17]
 80152a6:	429a      	cmp	r2, r3
 80152a8:	d907      	bls.n	80152ba <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80152aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152ac:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80152b0:	3301      	adds	r3, #1
 80152b2:	b2da      	uxtb	r2, r3
 80152b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152b6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80152ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152bc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80152c0:	7c7a      	ldrb	r2, [r7, #17]
 80152c2:	429a      	cmp	r2, r3
 80152c4:	f200 80d2 	bhi.w	801546c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80152c8:	2301      	movs	r3, #1
 80152ca:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80152cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d108      	bne.n	80152e8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80152d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80152d8:	f004 fc24 	bl	8019b24 <tcp_zero_window_probe>
 80152dc:	4603      	mov	r3, r0
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d014      	beq.n	801530c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80152e2:	2300      	movs	r3, #0
 80152e4:	623b      	str	r3, [r7, #32]
 80152e6:	e011      	b.n	801530c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80152e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80152ee:	4619      	mov	r1, r3
 80152f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80152f2:	f003 fae9 	bl	80188c8 <tcp_split_unsent_seg>
 80152f6:	4603      	mov	r3, r0
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d107      	bne.n	801530c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80152fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80152fe:	f003 fd69 	bl	8018dd4 <tcp_output>
 8015302:	4603      	mov	r3, r0
 8015304:	2b00      	cmp	r3, #0
 8015306:	d101      	bne.n	801530c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8015308:	2300      	movs	r3, #0
 801530a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801530c:	6a3b      	ldr	r3, [r7, #32]
 801530e:	2b00      	cmp	r3, #0
 8015310:	f000 80ac 	beq.w	801546c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8015314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015316:	2200      	movs	r2, #0
 8015318:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801531c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801531e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015322:	2b06      	cmp	r3, #6
 8015324:	f200 80a2 	bhi.w	801546c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8015328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801532a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801532e:	3301      	adds	r3, #1
 8015330:	b2da      	uxtb	r2, r3
 8015332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015334:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8015338:	e098      	b.n	801546c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801533a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801533c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015340:	2b00      	cmp	r3, #0
 8015342:	db0f      	blt.n	8015364 <tcp_slowtmr+0x1f4>
 8015344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015346:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801534a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801534e:	4293      	cmp	r3, r2
 8015350:	d008      	beq.n	8015364 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8015352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015354:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015358:	b29b      	uxth	r3, r3
 801535a:	3301      	adds	r3, #1
 801535c:	b29b      	uxth	r3, r3
 801535e:	b21a      	sxth	r2, r3
 8015360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015362:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8015364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015366:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801536a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801536c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8015370:	429a      	cmp	r2, r3
 8015372:	db7b      	blt.n	801546c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8015374:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015376:	f004 f821 	bl	80193bc <tcp_rexmit_rto_prepare>
 801537a:	4603      	mov	r3, r0
 801537c:	2b00      	cmp	r3, #0
 801537e:	d007      	beq.n	8015390 <tcp_slowtmr+0x220>
 8015380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015384:	2b00      	cmp	r3, #0
 8015386:	d171      	bne.n	801546c <tcp_slowtmr+0x2fc>
 8015388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801538a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801538c:	2b00      	cmp	r3, #0
 801538e:	d06d      	beq.n	801546c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8015390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015392:	7d1b      	ldrb	r3, [r3, #20]
 8015394:	2b02      	cmp	r3, #2
 8015396:	d03a      	beq.n	801540e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8015398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801539a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801539e:	2b0c      	cmp	r3, #12
 80153a0:	bf28      	it	cs
 80153a2:	230c      	movcs	r3, #12
 80153a4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80153a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80153ac:	10db      	asrs	r3, r3, #3
 80153ae:	b21b      	sxth	r3, r3
 80153b0:	461a      	mov	r2, r3
 80153b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80153b8:	4413      	add	r3, r2
 80153ba:	7efa      	ldrb	r2, [r7, #27]
 80153bc:	4910      	ldr	r1, [pc, #64]	@ (8015400 <tcp_slowtmr+0x290>)
 80153be:	5c8a      	ldrb	r2, [r1, r2]
 80153c0:	4093      	lsls	r3, r2
 80153c2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80153c4:	697b      	ldr	r3, [r7, #20]
 80153c6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80153ca:	4293      	cmp	r3, r2
 80153cc:	dc1a      	bgt.n	8015404 <tcp_slowtmr+0x294>
 80153ce:	697b      	ldr	r3, [r7, #20]
 80153d0:	b21a      	sxth	r2, r3
 80153d2:	e019      	b.n	8015408 <tcp_slowtmr+0x298>
 80153d4:	200277b0 	.word	0x200277b0
 80153d8:	200277c6 	.word	0x200277c6
 80153dc:	200277bc 	.word	0x200277bc
 80153e0:	0801fdb8 	.word	0x0801fdb8
 80153e4:	080200fc 	.word	0x080200fc
 80153e8:	0801fdfc 	.word	0x0801fdfc
 80153ec:	08020128 	.word	0x08020128
 80153f0:	08020154 	.word	0x08020154
 80153f4:	08020184 	.word	0x08020184
 80153f8:	080201b8 	.word	0x080201b8
 80153fc:	080222bc 	.word	0x080222bc
 8015400:	080222ac 	.word	0x080222ac
 8015404:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801540a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801540e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015410:	2200      	movs	r2, #0
 8015412:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015416:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801541a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801541c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015420:	4293      	cmp	r3, r2
 8015422:	bf28      	it	cs
 8015424:	4613      	movcs	r3, r2
 8015426:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015428:	8a7b      	ldrh	r3, [r7, #18]
 801542a:	085b      	lsrs	r3, r3, #1
 801542c:	b29a      	uxth	r2, r3
 801542e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015430:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015436:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801543a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801543c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801543e:	005b      	lsls	r3, r3, #1
 8015440:	b29b      	uxth	r3, r3
 8015442:	429a      	cmp	r2, r3
 8015444:	d206      	bcs.n	8015454 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8015446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015448:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801544a:	005b      	lsls	r3, r3, #1
 801544c:	b29a      	uxth	r2, r3
 801544e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015450:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8015454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015456:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8015458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801545a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801545e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015460:	2200      	movs	r2, #0
 8015462:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8015466:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015468:	f004 f818 	bl	801949c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 801546c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801546e:	7d1b      	ldrb	r3, [r3, #20]
 8015470:	2b06      	cmp	r3, #6
 8015472:	d111      	bne.n	8015498 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8015474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015476:	8b5b      	ldrh	r3, [r3, #26]
 8015478:	f003 0310 	and.w	r3, r3, #16
 801547c:	2b00      	cmp	r3, #0
 801547e:	d00b      	beq.n	8015498 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015480:	4b9c      	ldr	r3, [pc, #624]	@ (80156f4 <tcp_slowtmr+0x584>)
 8015482:	681a      	ldr	r2, [r3, #0]
 8015484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015486:	6a1b      	ldr	r3, [r3, #32]
 8015488:	1ad3      	subs	r3, r2, r3
 801548a:	2b28      	cmp	r3, #40	@ 0x28
 801548c:	d904      	bls.n	8015498 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801548e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015492:	3301      	adds	r3, #1
 8015494:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801549a:	7a5b      	ldrb	r3, [r3, #9]
 801549c:	f003 0308 	and.w	r3, r3, #8
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d04a      	beq.n	801553a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80154a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154a6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80154a8:	2b04      	cmp	r3, #4
 80154aa:	d003      	beq.n	80154b4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80154ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154ae:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80154b0:	2b07      	cmp	r3, #7
 80154b2:	d142      	bne.n	801553a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80154b4:	4b8f      	ldr	r3, [pc, #572]	@ (80156f4 <tcp_slowtmr+0x584>)
 80154b6:	681a      	ldr	r2, [r3, #0]
 80154b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154ba:	6a1b      	ldr	r3, [r3, #32]
 80154bc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80154be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154c0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80154c4:	4b8c      	ldr	r3, [pc, #560]	@ (80156f8 <tcp_slowtmr+0x588>)
 80154c6:	440b      	add	r3, r1
 80154c8:	498c      	ldr	r1, [pc, #560]	@ (80156fc <tcp_slowtmr+0x58c>)
 80154ca:	fba1 1303 	umull	r1, r3, r1, r3
 80154ce:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80154d0:	429a      	cmp	r2, r3
 80154d2:	d90a      	bls.n	80154ea <tcp_slowtmr+0x37a>
        ++pcb_remove;
 80154d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80154d8:	3301      	adds	r3, #1
 80154da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 80154de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80154e2:	3301      	adds	r3, #1
 80154e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80154e8:	e027      	b.n	801553a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80154ea:	4b82      	ldr	r3, [pc, #520]	@ (80156f4 <tcp_slowtmr+0x584>)
 80154ec:	681a      	ldr	r2, [r3, #0]
 80154ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154f0:	6a1b      	ldr	r3, [r3, #32]
 80154f2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80154f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154f6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80154fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154fc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8015500:	4618      	mov	r0, r3
 8015502:	4b7f      	ldr	r3, [pc, #508]	@ (8015700 <tcp_slowtmr+0x590>)
 8015504:	fb00 f303 	mul.w	r3, r0, r3
 8015508:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801550a:	497c      	ldr	r1, [pc, #496]	@ (80156fc <tcp_slowtmr+0x58c>)
 801550c:	fba1 1303 	umull	r1, r3, r1, r3
 8015510:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015512:	429a      	cmp	r2, r3
 8015514:	d911      	bls.n	801553a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8015516:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015518:	f004 fac4 	bl	8019aa4 <tcp_keepalive>
 801551c:	4603      	mov	r3, r0
 801551e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8015522:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8015526:	2b00      	cmp	r3, #0
 8015528:	d107      	bne.n	801553a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801552a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801552c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8015530:	3301      	adds	r3, #1
 8015532:	b2da      	uxtb	r2, r3
 8015534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015536:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801553a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801553c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801553e:	2b00      	cmp	r3, #0
 8015540:	d011      	beq.n	8015566 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8015542:	4b6c      	ldr	r3, [pc, #432]	@ (80156f4 <tcp_slowtmr+0x584>)
 8015544:	681a      	ldr	r2, [r3, #0]
 8015546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015548:	6a1b      	ldr	r3, [r3, #32]
 801554a:	1ad2      	subs	r2, r2, r3
 801554c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801554e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8015552:	4619      	mov	r1, r3
 8015554:	460b      	mov	r3, r1
 8015556:	005b      	lsls	r3, r3, #1
 8015558:	440b      	add	r3, r1
 801555a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801555c:	429a      	cmp	r2, r3
 801555e:	d302      	bcc.n	8015566 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8015560:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015562:	f000 fddd 	bl	8016120 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8015566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015568:	7d1b      	ldrb	r3, [r3, #20]
 801556a:	2b03      	cmp	r3, #3
 801556c:	d10b      	bne.n	8015586 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801556e:	4b61      	ldr	r3, [pc, #388]	@ (80156f4 <tcp_slowtmr+0x584>)
 8015570:	681a      	ldr	r2, [r3, #0]
 8015572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015574:	6a1b      	ldr	r3, [r3, #32]
 8015576:	1ad3      	subs	r3, r2, r3
 8015578:	2b28      	cmp	r3, #40	@ 0x28
 801557a:	d904      	bls.n	8015586 <tcp_slowtmr+0x416>
        ++pcb_remove;
 801557c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015580:	3301      	adds	r3, #1
 8015582:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8015586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015588:	7d1b      	ldrb	r3, [r3, #20]
 801558a:	2b09      	cmp	r3, #9
 801558c:	d10b      	bne.n	80155a6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801558e:	4b59      	ldr	r3, [pc, #356]	@ (80156f4 <tcp_slowtmr+0x584>)
 8015590:	681a      	ldr	r2, [r3, #0]
 8015592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015594:	6a1b      	ldr	r3, [r3, #32]
 8015596:	1ad3      	subs	r3, r2, r3
 8015598:	2bf0      	cmp	r3, #240	@ 0xf0
 801559a:	d904      	bls.n	80155a6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 801559c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80155a0:	3301      	adds	r3, #1
 80155a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80155a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d060      	beq.n	8015670 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80155ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80155b4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80155b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80155b8:	f000 fbfe 	bl	8015db8 <tcp_pcb_purge>
      if (prev != NULL) {
 80155bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d010      	beq.n	80155e4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80155c2:	4b50      	ldr	r3, [pc, #320]	@ (8015704 <tcp_slowtmr+0x594>)
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80155c8:	429a      	cmp	r2, r3
 80155ca:	d106      	bne.n	80155da <tcp_slowtmr+0x46a>
 80155cc:	4b4e      	ldr	r3, [pc, #312]	@ (8015708 <tcp_slowtmr+0x598>)
 80155ce:	f240 526d 	movw	r2, #1389	@ 0x56d
 80155d2:	494e      	ldr	r1, [pc, #312]	@ (801570c <tcp_slowtmr+0x59c>)
 80155d4:	484e      	ldr	r0, [pc, #312]	@ (8015710 <tcp_slowtmr+0x5a0>)
 80155d6:	f008 fd5b 	bl	801e090 <iprintf>
        prev->next = pcb->next;
 80155da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155dc:	68da      	ldr	r2, [r3, #12]
 80155de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80155e0:	60da      	str	r2, [r3, #12]
 80155e2:	e00f      	b.n	8015604 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80155e4:	4b47      	ldr	r3, [pc, #284]	@ (8015704 <tcp_slowtmr+0x594>)
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80155ea:	429a      	cmp	r2, r3
 80155ec:	d006      	beq.n	80155fc <tcp_slowtmr+0x48c>
 80155ee:	4b46      	ldr	r3, [pc, #280]	@ (8015708 <tcp_slowtmr+0x598>)
 80155f0:	f240 5271 	movw	r2, #1393	@ 0x571
 80155f4:	4947      	ldr	r1, [pc, #284]	@ (8015714 <tcp_slowtmr+0x5a4>)
 80155f6:	4846      	ldr	r0, [pc, #280]	@ (8015710 <tcp_slowtmr+0x5a0>)
 80155f8:	f008 fd4a 	bl	801e090 <iprintf>
        tcp_active_pcbs = pcb->next;
 80155fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155fe:	68db      	ldr	r3, [r3, #12]
 8015600:	4a40      	ldr	r2, [pc, #256]	@ (8015704 <tcp_slowtmr+0x594>)
 8015602:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8015604:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015608:	2b00      	cmp	r3, #0
 801560a:	d013      	beq.n	8015634 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801560c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801560e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8015610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015612:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015614:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8015616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015618:	3304      	adds	r3, #4
 801561a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801561c:	8ad2      	ldrh	r2, [r2, #22]
 801561e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015620:	8b09      	ldrh	r1, [r1, #24]
 8015622:	9102      	str	r1, [sp, #8]
 8015624:	9201      	str	r2, [sp, #4]
 8015626:	9300      	str	r3, [sp, #0]
 8015628:	462b      	mov	r3, r5
 801562a:	4622      	mov	r2, r4
 801562c:	4601      	mov	r1, r0
 801562e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015630:	f004 f984 	bl	801993c <tcp_rst>
      err_arg = pcb->callback_arg;
 8015634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015636:	691b      	ldr	r3, [r3, #16]
 8015638:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801563a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801563c:	7d1b      	ldrb	r3, [r3, #20]
 801563e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8015640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015642:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8015644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015646:	68db      	ldr	r3, [r3, #12]
 8015648:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801564a:	6838      	ldr	r0, [r7, #0]
 801564c:	f7ff f9f2 	bl	8014a34 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8015650:	4b31      	ldr	r3, [pc, #196]	@ (8015718 <tcp_slowtmr+0x5a8>)
 8015652:	2200      	movs	r2, #0
 8015654:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d004      	beq.n	8015666 <tcp_slowtmr+0x4f6>
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	f06f 010c 	mvn.w	r1, #12
 8015662:	68b8      	ldr	r0, [r7, #8]
 8015664:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8015666:	4b2c      	ldr	r3, [pc, #176]	@ (8015718 <tcp_slowtmr+0x5a8>)
 8015668:	781b      	ldrb	r3, [r3, #0]
 801566a:	2b00      	cmp	r3, #0
 801566c:	d037      	beq.n	80156de <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801566e:	e592      	b.n	8015196 <tcp_slowtmr+0x26>
      prev = pcb;
 8015670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015672:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015676:	68db      	ldr	r3, [r3, #12]
 8015678:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801567a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801567c:	7f1b      	ldrb	r3, [r3, #28]
 801567e:	3301      	adds	r3, #1
 8015680:	b2da      	uxtb	r2, r3
 8015682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015684:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8015686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015688:	7f1a      	ldrb	r2, [r3, #28]
 801568a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801568c:	7f5b      	ldrb	r3, [r3, #29]
 801568e:	429a      	cmp	r2, r3
 8015690:	d325      	bcc.n	80156de <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8015692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015694:	2200      	movs	r2, #0
 8015696:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8015698:	4b1f      	ldr	r3, [pc, #124]	@ (8015718 <tcp_slowtmr+0x5a8>)
 801569a:	2200      	movs	r2, #0
 801569c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801569e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d00b      	beq.n	80156c0 <tcp_slowtmr+0x550>
 80156a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80156ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80156b0:	6912      	ldr	r2, [r2, #16]
 80156b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80156b4:	4610      	mov	r0, r2
 80156b6:	4798      	blx	r3
 80156b8:	4603      	mov	r3, r0
 80156ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80156be:	e002      	b.n	80156c6 <tcp_slowtmr+0x556>
 80156c0:	2300      	movs	r3, #0
 80156c2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80156c6:	4b14      	ldr	r3, [pc, #80]	@ (8015718 <tcp_slowtmr+0x5a8>)
 80156c8:	781b      	ldrb	r3, [r3, #0]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	f47f ad62 	bne.w	8015194 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80156d0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d102      	bne.n	80156de <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80156d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80156da:	f003 fb7b 	bl	8018dd4 <tcp_output>
  while (pcb != NULL) {
 80156de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	f47f ad5e 	bne.w	80151a2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80156e6:	2300      	movs	r3, #0
 80156e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 80156ea:	4b0c      	ldr	r3, [pc, #48]	@ (801571c <tcp_slowtmr+0x5ac>)
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80156f0:	e069      	b.n	80157c6 <tcp_slowtmr+0x656>
 80156f2:	bf00      	nop
 80156f4:	200277b0 	.word	0x200277b0
 80156f8:	000a4cb8 	.word	0x000a4cb8
 80156fc:	10624dd3 	.word	0x10624dd3
 8015700:	000124f8 	.word	0x000124f8
 8015704:	200277bc 	.word	0x200277bc
 8015708:	0801fdb8 	.word	0x0801fdb8
 801570c:	080201f0 	.word	0x080201f0
 8015710:	0801fdfc 	.word	0x0801fdfc
 8015714:	0802021c 	.word	0x0802021c
 8015718:	200277c4 	.word	0x200277c4
 801571c:	200277c0 	.word	0x200277c0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015722:	7d1b      	ldrb	r3, [r3, #20]
 8015724:	2b0a      	cmp	r3, #10
 8015726:	d006      	beq.n	8015736 <tcp_slowtmr+0x5c6>
 8015728:	4b2b      	ldr	r3, [pc, #172]	@ (80157d8 <tcp_slowtmr+0x668>)
 801572a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801572e:	492b      	ldr	r1, [pc, #172]	@ (80157dc <tcp_slowtmr+0x66c>)
 8015730:	482b      	ldr	r0, [pc, #172]	@ (80157e0 <tcp_slowtmr+0x670>)
 8015732:	f008 fcad 	bl	801e090 <iprintf>
    pcb_remove = 0;
 8015736:	2300      	movs	r3, #0
 8015738:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801573c:	4b29      	ldr	r3, [pc, #164]	@ (80157e4 <tcp_slowtmr+0x674>)
 801573e:	681a      	ldr	r2, [r3, #0]
 8015740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015742:	6a1b      	ldr	r3, [r3, #32]
 8015744:	1ad3      	subs	r3, r2, r3
 8015746:	2bf0      	cmp	r3, #240	@ 0xf0
 8015748:	d904      	bls.n	8015754 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801574a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801574e:	3301      	adds	r3, #1
 8015750:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015754:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015758:	2b00      	cmp	r3, #0
 801575a:	d02f      	beq.n	80157bc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801575c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801575e:	f000 fb2b 	bl	8015db8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8015762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015764:	2b00      	cmp	r3, #0
 8015766:	d010      	beq.n	801578a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015768:	4b1f      	ldr	r3, [pc, #124]	@ (80157e8 <tcp_slowtmr+0x678>)
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801576e:	429a      	cmp	r2, r3
 8015770:	d106      	bne.n	8015780 <tcp_slowtmr+0x610>
 8015772:	4b19      	ldr	r3, [pc, #100]	@ (80157d8 <tcp_slowtmr+0x668>)
 8015774:	f240 52af 	movw	r2, #1455	@ 0x5af
 8015778:	491c      	ldr	r1, [pc, #112]	@ (80157ec <tcp_slowtmr+0x67c>)
 801577a:	4819      	ldr	r0, [pc, #100]	@ (80157e0 <tcp_slowtmr+0x670>)
 801577c:	f008 fc88 	bl	801e090 <iprintf>
        prev->next = pcb->next;
 8015780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015782:	68da      	ldr	r2, [r3, #12]
 8015784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015786:	60da      	str	r2, [r3, #12]
 8015788:	e00f      	b.n	80157aa <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801578a:	4b17      	ldr	r3, [pc, #92]	@ (80157e8 <tcp_slowtmr+0x678>)
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015790:	429a      	cmp	r2, r3
 8015792:	d006      	beq.n	80157a2 <tcp_slowtmr+0x632>
 8015794:	4b10      	ldr	r3, [pc, #64]	@ (80157d8 <tcp_slowtmr+0x668>)
 8015796:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801579a:	4915      	ldr	r1, [pc, #84]	@ (80157f0 <tcp_slowtmr+0x680>)
 801579c:	4810      	ldr	r0, [pc, #64]	@ (80157e0 <tcp_slowtmr+0x670>)
 801579e:	f008 fc77 	bl	801e090 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80157a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157a4:	68db      	ldr	r3, [r3, #12]
 80157a6:	4a10      	ldr	r2, [pc, #64]	@ (80157e8 <tcp_slowtmr+0x678>)
 80157a8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80157aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157ac:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80157ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157b0:	68db      	ldr	r3, [r3, #12]
 80157b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80157b4:	69f8      	ldr	r0, [r7, #28]
 80157b6:	f7ff f93d 	bl	8014a34 <tcp_free>
 80157ba:	e004      	b.n	80157c6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80157bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157be:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80157c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157c2:	68db      	ldr	r3, [r3, #12]
 80157c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80157c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d1a9      	bne.n	8015720 <tcp_slowtmr+0x5b0>
    }
  }
}
 80157cc:	bf00      	nop
 80157ce:	bf00      	nop
 80157d0:	3730      	adds	r7, #48	@ 0x30
 80157d2:	46bd      	mov	sp, r7
 80157d4:	bdb0      	pop	{r4, r5, r7, pc}
 80157d6:	bf00      	nop
 80157d8:	0801fdb8 	.word	0x0801fdb8
 80157dc:	08020248 	.word	0x08020248
 80157e0:	0801fdfc 	.word	0x0801fdfc
 80157e4:	200277b0 	.word	0x200277b0
 80157e8:	200277c0 	.word	0x200277c0
 80157ec:	08020278 	.word	0x08020278
 80157f0:	080202a0 	.word	0x080202a0

080157f4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80157f4:	b580      	push	{r7, lr}
 80157f6:	b082      	sub	sp, #8
 80157f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80157fa:	4b2d      	ldr	r3, [pc, #180]	@ (80158b0 <tcp_fasttmr+0xbc>)
 80157fc:	781b      	ldrb	r3, [r3, #0]
 80157fe:	3301      	adds	r3, #1
 8015800:	b2da      	uxtb	r2, r3
 8015802:	4b2b      	ldr	r3, [pc, #172]	@ (80158b0 <tcp_fasttmr+0xbc>)
 8015804:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8015806:	4b2b      	ldr	r3, [pc, #172]	@ (80158b4 <tcp_fasttmr+0xc0>)
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801580c:	e048      	b.n	80158a0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	7f9a      	ldrb	r2, [r3, #30]
 8015812:	4b27      	ldr	r3, [pc, #156]	@ (80158b0 <tcp_fasttmr+0xbc>)
 8015814:	781b      	ldrb	r3, [r3, #0]
 8015816:	429a      	cmp	r2, r3
 8015818:	d03f      	beq.n	801589a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801581a:	4b25      	ldr	r3, [pc, #148]	@ (80158b0 <tcp_fasttmr+0xbc>)
 801581c:	781a      	ldrb	r2, [r3, #0]
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	8b5b      	ldrh	r3, [r3, #26]
 8015826:	f003 0301 	and.w	r3, r3, #1
 801582a:	2b00      	cmp	r3, #0
 801582c:	d010      	beq.n	8015850 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	8b5b      	ldrh	r3, [r3, #26]
 8015832:	f043 0302 	orr.w	r3, r3, #2
 8015836:	b29a      	uxth	r2, r3
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801583c:	6878      	ldr	r0, [r7, #4]
 801583e:	f003 fac9 	bl	8018dd4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	8b5b      	ldrh	r3, [r3, #26]
 8015846:	f023 0303 	bic.w	r3, r3, #3
 801584a:	b29a      	uxth	r2, r3
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	8b5b      	ldrh	r3, [r3, #26]
 8015854:	f003 0308 	and.w	r3, r3, #8
 8015858:	2b00      	cmp	r3, #0
 801585a:	d009      	beq.n	8015870 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	8b5b      	ldrh	r3, [r3, #26]
 8015860:	f023 0308 	bic.w	r3, r3, #8
 8015864:	b29a      	uxth	r2, r3
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801586a:	6878      	ldr	r0, [r7, #4]
 801586c:	f7ff fa76 	bl	8014d5c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	68db      	ldr	r3, [r3, #12]
 8015874:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801587a:	2b00      	cmp	r3, #0
 801587c:	d00a      	beq.n	8015894 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801587e:	4b0e      	ldr	r3, [pc, #56]	@ (80158b8 <tcp_fasttmr+0xc4>)
 8015880:	2200      	movs	r2, #0
 8015882:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8015884:	6878      	ldr	r0, [r7, #4]
 8015886:	f000 f819 	bl	80158bc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801588a:	4b0b      	ldr	r3, [pc, #44]	@ (80158b8 <tcp_fasttmr+0xc4>)
 801588c:	781b      	ldrb	r3, [r3, #0]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d000      	beq.n	8015894 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8015892:	e7b8      	b.n	8015806 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8015894:	683b      	ldr	r3, [r7, #0]
 8015896:	607b      	str	r3, [r7, #4]
 8015898:	e002      	b.n	80158a0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	68db      	ldr	r3, [r3, #12]
 801589e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d1b3      	bne.n	801580e <tcp_fasttmr+0x1a>
    }
  }
}
 80158a6:	bf00      	nop
 80158a8:	bf00      	nop
 80158aa:	3708      	adds	r7, #8
 80158ac:	46bd      	mov	sp, r7
 80158ae:	bd80      	pop	{r7, pc}
 80158b0:	200277c6 	.word	0x200277c6
 80158b4:	200277bc 	.word	0x200277bc
 80158b8:	200277c4 	.word	0x200277c4

080158bc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80158bc:	b590      	push	{r4, r7, lr}
 80158be:	b085      	sub	sp, #20
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d109      	bne.n	80158de <tcp_process_refused_data+0x22>
 80158ca:	4b37      	ldr	r3, [pc, #220]	@ (80159a8 <tcp_process_refused_data+0xec>)
 80158cc:	f240 6209 	movw	r2, #1545	@ 0x609
 80158d0:	4936      	ldr	r1, [pc, #216]	@ (80159ac <tcp_process_refused_data+0xf0>)
 80158d2:	4837      	ldr	r0, [pc, #220]	@ (80159b0 <tcp_process_refused_data+0xf4>)
 80158d4:	f008 fbdc 	bl	801e090 <iprintf>
 80158d8:	f06f 030f 	mvn.w	r3, #15
 80158dc:	e060      	b.n	80159a0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80158e2:	7b5b      	ldrb	r3, [r3, #13]
 80158e4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80158ea:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	2200      	movs	r2, #0
 80158f0:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d00b      	beq.n	8015914 <tcp_process_refused_data+0x58>
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	6918      	ldr	r0, [r3, #16]
 8015906:	2300      	movs	r3, #0
 8015908:	68ba      	ldr	r2, [r7, #8]
 801590a:	6879      	ldr	r1, [r7, #4]
 801590c:	47a0      	blx	r4
 801590e:	4603      	mov	r3, r0
 8015910:	73fb      	strb	r3, [r7, #15]
 8015912:	e007      	b.n	8015924 <tcp_process_refused_data+0x68>
 8015914:	2300      	movs	r3, #0
 8015916:	68ba      	ldr	r2, [r7, #8]
 8015918:	6879      	ldr	r1, [r7, #4]
 801591a:	2000      	movs	r0, #0
 801591c:	f000 f8a4 	bl	8015a68 <tcp_recv_null>
 8015920:	4603      	mov	r3, r0
 8015922:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8015924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d12a      	bne.n	8015982 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801592c:	7bbb      	ldrb	r3, [r7, #14]
 801592e:	f003 0320 	and.w	r3, r3, #32
 8015932:	2b00      	cmp	r3, #0
 8015934:	d033      	beq.n	801599e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801593a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801593e:	d005      	beq.n	801594c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015944:	3301      	adds	r3, #1
 8015946:	b29a      	uxth	r2, r3
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015952:	2b00      	cmp	r3, #0
 8015954:	d00b      	beq.n	801596e <tcp_process_refused_data+0xb2>
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	6918      	ldr	r0, [r3, #16]
 8015960:	2300      	movs	r3, #0
 8015962:	2200      	movs	r2, #0
 8015964:	6879      	ldr	r1, [r7, #4]
 8015966:	47a0      	blx	r4
 8015968:	4603      	mov	r3, r0
 801596a:	73fb      	strb	r3, [r7, #15]
 801596c:	e001      	b.n	8015972 <tcp_process_refused_data+0xb6>
 801596e:	2300      	movs	r3, #0
 8015970:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8015972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015976:	f113 0f0d 	cmn.w	r3, #13
 801597a:	d110      	bne.n	801599e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801597c:	f06f 030c 	mvn.w	r3, #12
 8015980:	e00e      	b.n	80159a0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8015982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015986:	f113 0f0d 	cmn.w	r3, #13
 801598a:	d102      	bne.n	8015992 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801598c:	f06f 030c 	mvn.w	r3, #12
 8015990:	e006      	b.n	80159a0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	68ba      	ldr	r2, [r7, #8]
 8015996:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8015998:	f06f 0304 	mvn.w	r3, #4
 801599c:	e000      	b.n	80159a0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801599e:	2300      	movs	r3, #0
}
 80159a0:	4618      	mov	r0, r3
 80159a2:	3714      	adds	r7, #20
 80159a4:	46bd      	mov	sp, r7
 80159a6:	bd90      	pop	{r4, r7, pc}
 80159a8:	0801fdb8 	.word	0x0801fdb8
 80159ac:	080202c8 	.word	0x080202c8
 80159b0:	0801fdfc 	.word	0x0801fdfc

080159b4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80159b4:	b580      	push	{r7, lr}
 80159b6:	b084      	sub	sp, #16
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80159bc:	e007      	b.n	80159ce <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80159c4:	6878      	ldr	r0, [r7, #4]
 80159c6:	f000 f80a 	bl	80159de <tcp_seg_free>
    seg = next;
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d1f4      	bne.n	80159be <tcp_segs_free+0xa>
  }
}
 80159d4:	bf00      	nop
 80159d6:	bf00      	nop
 80159d8:	3710      	adds	r7, #16
 80159da:	46bd      	mov	sp, r7
 80159dc:	bd80      	pop	{r7, pc}

080159de <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80159de:	b580      	push	{r7, lr}
 80159e0:	b082      	sub	sp, #8
 80159e2:	af00      	add	r7, sp, #0
 80159e4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d00c      	beq.n	8015a06 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	685b      	ldr	r3, [r3, #4]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d004      	beq.n	80159fe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	685b      	ldr	r3, [r3, #4]
 80159f8:	4618      	mov	r0, r3
 80159fa:	f7fe fd5f 	bl	80144bc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80159fe:	6879      	ldr	r1, [r7, #4]
 8015a00:	2003      	movs	r0, #3
 8015a02:	f7fd feb7 	bl	8013774 <memp_free>
  }
}
 8015a06:	bf00      	nop
 8015a08:	3708      	adds	r7, #8
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	bd80      	pop	{r7, pc}
	...

08015a10 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015a10:	b580      	push	{r7, lr}
 8015a12:	b084      	sub	sp, #16
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d106      	bne.n	8015a2c <tcp_seg_copy+0x1c>
 8015a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8015a5c <tcp_seg_copy+0x4c>)
 8015a20:	f240 6282 	movw	r2, #1666	@ 0x682
 8015a24:	490e      	ldr	r1, [pc, #56]	@ (8015a60 <tcp_seg_copy+0x50>)
 8015a26:	480f      	ldr	r0, [pc, #60]	@ (8015a64 <tcp_seg_copy+0x54>)
 8015a28:	f008 fb32 	bl	801e090 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015a2c:	2003      	movs	r0, #3
 8015a2e:	f7fd fe2b 	bl	8013688 <memp_malloc>
 8015a32:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d101      	bne.n	8015a3e <tcp_seg_copy+0x2e>
    return NULL;
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	e00a      	b.n	8015a54 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8015a3e:	2210      	movs	r2, #16
 8015a40:	6879      	ldr	r1, [r7, #4]
 8015a42:	68f8      	ldr	r0, [r7, #12]
 8015a44:	f008 fd4f 	bl	801e4e6 <memcpy>
  pbuf_ref(cseg->p);
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	685b      	ldr	r3, [r3, #4]
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	f7fe fddb 	bl	8014608 <pbuf_ref>
  return cseg;
 8015a52:	68fb      	ldr	r3, [r7, #12]
}
 8015a54:	4618      	mov	r0, r3
 8015a56:	3710      	adds	r7, #16
 8015a58:	46bd      	mov	sp, r7
 8015a5a:	bd80      	pop	{r7, pc}
 8015a5c:	0801fdb8 	.word	0x0801fdb8
 8015a60:	0802030c 	.word	0x0802030c
 8015a64:	0801fdfc 	.word	0x0801fdfc

08015a68 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	b084      	sub	sp, #16
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	60f8      	str	r0, [r7, #12]
 8015a70:	60b9      	str	r1, [r7, #8]
 8015a72:	607a      	str	r2, [r7, #4]
 8015a74:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8015a76:	68bb      	ldr	r3, [r7, #8]
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d109      	bne.n	8015a90 <tcp_recv_null+0x28>
 8015a7c:	4b12      	ldr	r3, [pc, #72]	@ (8015ac8 <tcp_recv_null+0x60>)
 8015a7e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8015a82:	4912      	ldr	r1, [pc, #72]	@ (8015acc <tcp_recv_null+0x64>)
 8015a84:	4812      	ldr	r0, [pc, #72]	@ (8015ad0 <tcp_recv_null+0x68>)
 8015a86:	f008 fb03 	bl	801e090 <iprintf>
 8015a8a:	f06f 030f 	mvn.w	r3, #15
 8015a8e:	e016      	b.n	8015abe <tcp_recv_null+0x56>

  if (p != NULL) {
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d009      	beq.n	8015aaa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	891b      	ldrh	r3, [r3, #8]
 8015a9a:	4619      	mov	r1, r3
 8015a9c:	68b8      	ldr	r0, [r7, #8]
 8015a9e:	f7ff fb17 	bl	80150d0 <tcp_recved>
    pbuf_free(p);
 8015aa2:	6878      	ldr	r0, [r7, #4]
 8015aa4:	f7fe fd0a 	bl	80144bc <pbuf_free>
 8015aa8:	e008      	b.n	8015abc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8015aaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d104      	bne.n	8015abc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8015ab2:	68b8      	ldr	r0, [r7, #8]
 8015ab4:	f7ff f9bc 	bl	8014e30 <tcp_close>
 8015ab8:	4603      	mov	r3, r0
 8015aba:	e000      	b.n	8015abe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8015abc:	2300      	movs	r3, #0
}
 8015abe:	4618      	mov	r0, r3
 8015ac0:	3710      	adds	r7, #16
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bd80      	pop	{r7, pc}
 8015ac6:	bf00      	nop
 8015ac8:	0801fdb8 	.word	0x0801fdb8
 8015acc:	08020328 	.word	0x08020328
 8015ad0:	0801fdfc 	.word	0x0801fdfc

08015ad4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b086      	sub	sp, #24
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	4603      	mov	r3, r0
 8015adc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8015ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	db01      	blt.n	8015aea <tcp_kill_prio+0x16>
 8015ae6:	79fb      	ldrb	r3, [r7, #7]
 8015ae8:	e000      	b.n	8015aec <tcp_kill_prio+0x18>
 8015aea:	237f      	movs	r3, #127	@ 0x7f
 8015aec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8015aee:	7afb      	ldrb	r3, [r7, #11]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d034      	beq.n	8015b5e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8015af4:	7afb      	ldrb	r3, [r7, #11]
 8015af6:	3b01      	subs	r3, #1
 8015af8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8015afa:	2300      	movs	r3, #0
 8015afc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015afe:	2300      	movs	r3, #0
 8015b00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015b02:	4b19      	ldr	r3, [pc, #100]	@ (8015b68 <tcp_kill_prio+0x94>)
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	617b      	str	r3, [r7, #20]
 8015b08:	e01f      	b.n	8015b4a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8015b0a:	697b      	ldr	r3, [r7, #20]
 8015b0c:	7d5b      	ldrb	r3, [r3, #21]
 8015b0e:	7afa      	ldrb	r2, [r7, #11]
 8015b10:	429a      	cmp	r2, r3
 8015b12:	d80c      	bhi.n	8015b2e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015b14:	697b      	ldr	r3, [r7, #20]
 8015b16:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8015b18:	7afa      	ldrb	r2, [r7, #11]
 8015b1a:	429a      	cmp	r2, r3
 8015b1c:	d112      	bne.n	8015b44 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015b1e:	4b13      	ldr	r3, [pc, #76]	@ (8015b6c <tcp_kill_prio+0x98>)
 8015b20:	681a      	ldr	r2, [r3, #0]
 8015b22:	697b      	ldr	r3, [r7, #20]
 8015b24:	6a1b      	ldr	r3, [r3, #32]
 8015b26:	1ad3      	subs	r3, r2, r3
 8015b28:	68fa      	ldr	r2, [r7, #12]
 8015b2a:	429a      	cmp	r2, r3
 8015b2c:	d80a      	bhi.n	8015b44 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8015b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8015b6c <tcp_kill_prio+0x98>)
 8015b30:	681a      	ldr	r2, [r3, #0]
 8015b32:	697b      	ldr	r3, [r7, #20]
 8015b34:	6a1b      	ldr	r3, [r3, #32]
 8015b36:	1ad3      	subs	r3, r2, r3
 8015b38:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8015b3a:	697b      	ldr	r3, [r7, #20]
 8015b3c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8015b3e:	697b      	ldr	r3, [r7, #20]
 8015b40:	7d5b      	ldrb	r3, [r3, #21]
 8015b42:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015b44:	697b      	ldr	r3, [r7, #20]
 8015b46:	68db      	ldr	r3, [r3, #12]
 8015b48:	617b      	str	r3, [r7, #20]
 8015b4a:	697b      	ldr	r3, [r7, #20]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d1dc      	bne.n	8015b0a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8015b50:	693b      	ldr	r3, [r7, #16]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d004      	beq.n	8015b60 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015b56:	6938      	ldr	r0, [r7, #16]
 8015b58:	f7ff fa54 	bl	8015004 <tcp_abort>
 8015b5c:	e000      	b.n	8015b60 <tcp_kill_prio+0x8c>
    return;
 8015b5e:	bf00      	nop
  }
}
 8015b60:	3718      	adds	r7, #24
 8015b62:	46bd      	mov	sp, r7
 8015b64:	bd80      	pop	{r7, pc}
 8015b66:	bf00      	nop
 8015b68:	200277bc 	.word	0x200277bc
 8015b6c:	200277b0 	.word	0x200277b0

08015b70 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b086      	sub	sp, #24
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	4603      	mov	r3, r0
 8015b78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8015b7a:	79fb      	ldrb	r3, [r7, #7]
 8015b7c:	2b08      	cmp	r3, #8
 8015b7e:	d009      	beq.n	8015b94 <tcp_kill_state+0x24>
 8015b80:	79fb      	ldrb	r3, [r7, #7]
 8015b82:	2b09      	cmp	r3, #9
 8015b84:	d006      	beq.n	8015b94 <tcp_kill_state+0x24>
 8015b86:	4b1a      	ldr	r3, [pc, #104]	@ (8015bf0 <tcp_kill_state+0x80>)
 8015b88:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8015b8c:	4919      	ldr	r1, [pc, #100]	@ (8015bf4 <tcp_kill_state+0x84>)
 8015b8e:	481a      	ldr	r0, [pc, #104]	@ (8015bf8 <tcp_kill_state+0x88>)
 8015b90:	f008 fa7e 	bl	801e090 <iprintf>

  inactivity = 0;
 8015b94:	2300      	movs	r3, #0
 8015b96:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015b98:	2300      	movs	r3, #0
 8015b9a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015b9c:	4b17      	ldr	r3, [pc, #92]	@ (8015bfc <tcp_kill_state+0x8c>)
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	617b      	str	r3, [r7, #20]
 8015ba2:	e017      	b.n	8015bd4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8015ba4:	697b      	ldr	r3, [r7, #20]
 8015ba6:	7d1b      	ldrb	r3, [r3, #20]
 8015ba8:	79fa      	ldrb	r2, [r7, #7]
 8015baa:	429a      	cmp	r2, r3
 8015bac:	d10f      	bne.n	8015bce <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015bae:	4b14      	ldr	r3, [pc, #80]	@ (8015c00 <tcp_kill_state+0x90>)
 8015bb0:	681a      	ldr	r2, [r3, #0]
 8015bb2:	697b      	ldr	r3, [r7, #20]
 8015bb4:	6a1b      	ldr	r3, [r3, #32]
 8015bb6:	1ad3      	subs	r3, r2, r3
 8015bb8:	68fa      	ldr	r2, [r7, #12]
 8015bba:	429a      	cmp	r2, r3
 8015bbc:	d807      	bhi.n	8015bce <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8015bbe:	4b10      	ldr	r3, [pc, #64]	@ (8015c00 <tcp_kill_state+0x90>)
 8015bc0:	681a      	ldr	r2, [r3, #0]
 8015bc2:	697b      	ldr	r3, [r7, #20]
 8015bc4:	6a1b      	ldr	r3, [r3, #32]
 8015bc6:	1ad3      	subs	r3, r2, r3
 8015bc8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8015bca:	697b      	ldr	r3, [r7, #20]
 8015bcc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015bce:	697b      	ldr	r3, [r7, #20]
 8015bd0:	68db      	ldr	r3, [r3, #12]
 8015bd2:	617b      	str	r3, [r7, #20]
 8015bd4:	697b      	ldr	r3, [r7, #20]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d1e4      	bne.n	8015ba4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8015bda:	693b      	ldr	r3, [r7, #16]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d003      	beq.n	8015be8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8015be0:	2100      	movs	r1, #0
 8015be2:	6938      	ldr	r0, [r7, #16]
 8015be4:	f7ff f950 	bl	8014e88 <tcp_abandon>
  }
}
 8015be8:	bf00      	nop
 8015bea:	3718      	adds	r7, #24
 8015bec:	46bd      	mov	sp, r7
 8015bee:	bd80      	pop	{r7, pc}
 8015bf0:	0801fdb8 	.word	0x0801fdb8
 8015bf4:	08020344 	.word	0x08020344
 8015bf8:	0801fdfc 	.word	0x0801fdfc
 8015bfc:	200277bc 	.word	0x200277bc
 8015c00:	200277b0 	.word	0x200277b0

08015c04 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b084      	sub	sp, #16
 8015c08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8015c0e:	2300      	movs	r3, #0
 8015c10:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c12:	4b12      	ldr	r3, [pc, #72]	@ (8015c5c <tcp_kill_timewait+0x58>)
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	60fb      	str	r3, [r7, #12]
 8015c18:	e012      	b.n	8015c40 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015c1a:	4b11      	ldr	r3, [pc, #68]	@ (8015c60 <tcp_kill_timewait+0x5c>)
 8015c1c:	681a      	ldr	r2, [r3, #0]
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	6a1b      	ldr	r3, [r3, #32]
 8015c22:	1ad3      	subs	r3, r2, r3
 8015c24:	687a      	ldr	r2, [r7, #4]
 8015c26:	429a      	cmp	r2, r3
 8015c28:	d807      	bhi.n	8015c3a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8015c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8015c60 <tcp_kill_timewait+0x5c>)
 8015c2c:	681a      	ldr	r2, [r3, #0]
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	6a1b      	ldr	r3, [r3, #32]
 8015c32:	1ad3      	subs	r3, r2, r3
 8015c34:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	68db      	ldr	r3, [r3, #12]
 8015c3e:	60fb      	str	r3, [r7, #12]
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d1e9      	bne.n	8015c1a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8015c46:	68bb      	ldr	r3, [r7, #8]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d002      	beq.n	8015c52 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015c4c:	68b8      	ldr	r0, [r7, #8]
 8015c4e:	f7ff f9d9 	bl	8015004 <tcp_abort>
  }
}
 8015c52:	bf00      	nop
 8015c54:	3710      	adds	r7, #16
 8015c56:	46bd      	mov	sp, r7
 8015c58:	bd80      	pop	{r7, pc}
 8015c5a:	bf00      	nop
 8015c5c:	200277c0 	.word	0x200277c0
 8015c60:	200277b0 	.word	0x200277b0

08015c64 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b082      	sub	sp, #8
 8015c68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8015c6a:	4b10      	ldr	r3, [pc, #64]	@ (8015cac <tcp_handle_closepend+0x48>)
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015c70:	e014      	b.n	8015c9c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	68db      	ldr	r3, [r3, #12]
 8015c76:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	8b5b      	ldrh	r3, [r3, #26]
 8015c7c:	f003 0308 	and.w	r3, r3, #8
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d009      	beq.n	8015c98 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	8b5b      	ldrh	r3, [r3, #26]
 8015c88:	f023 0308 	bic.w	r3, r3, #8
 8015c8c:	b29a      	uxth	r2, r3
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8015c92:	6878      	ldr	r0, [r7, #4]
 8015c94:	f7ff f862 	bl	8014d5c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8015c98:	683b      	ldr	r3, [r7, #0]
 8015c9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d1e7      	bne.n	8015c72 <tcp_handle_closepend+0xe>
  }
}
 8015ca2:	bf00      	nop
 8015ca4:	bf00      	nop
 8015ca6:	3708      	adds	r7, #8
 8015ca8:	46bd      	mov	sp, r7
 8015caa:	bd80      	pop	{r7, pc}
 8015cac:	200277bc 	.word	0x200277bc

08015cb0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8015cb0:	b580      	push	{r7, lr}
 8015cb2:	b084      	sub	sp, #16
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	4603      	mov	r3, r0
 8015cb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015cba:	2001      	movs	r0, #1
 8015cbc:	f7fd fce4 	bl	8013688 <memp_malloc>
 8015cc0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8015cc2:	68fb      	ldr	r3, [r7, #12]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d126      	bne.n	8015d16 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8015cc8:	f7ff ffcc 	bl	8015c64 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8015ccc:	f7ff ff9a 	bl	8015c04 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015cd0:	2001      	movs	r0, #1
 8015cd2:	f7fd fcd9 	bl	8013688 <memp_malloc>
 8015cd6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d11b      	bne.n	8015d16 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8015cde:	2009      	movs	r0, #9
 8015ce0:	f7ff ff46 	bl	8015b70 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015ce4:	2001      	movs	r0, #1
 8015ce6:	f7fd fccf 	bl	8013688 <memp_malloc>
 8015cea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d111      	bne.n	8015d16 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8015cf2:	2008      	movs	r0, #8
 8015cf4:	f7ff ff3c 	bl	8015b70 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015cf8:	2001      	movs	r0, #1
 8015cfa:	f7fd fcc5 	bl	8013688 <memp_malloc>
 8015cfe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8015d00:	68fb      	ldr	r3, [r7, #12]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d107      	bne.n	8015d16 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8015d06:	79fb      	ldrb	r3, [r7, #7]
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f7ff fee3 	bl	8015ad4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015d0e:	2001      	movs	r0, #1
 8015d10:	f7fd fcba 	bl	8013688 <memp_malloc>
 8015d14:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d03f      	beq.n	8015d9c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8015d1c:	229c      	movs	r2, #156	@ 0x9c
 8015d1e:	2100      	movs	r1, #0
 8015d20:	68f8      	ldr	r0, [r7, #12]
 8015d22:	f008 fb0d 	bl	801e340 <memset>
    pcb->prio = prio;
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	79fa      	ldrb	r2, [r7, #7]
 8015d2a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8015d32:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8015d3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	22ff      	movs	r2, #255	@ 0xff
 8015d4a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8015d52:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	2206      	movs	r2, #6
 8015d58:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	2206      	movs	r2, #6
 8015d60:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8015d62:	68fb      	ldr	r3, [r7, #12]
 8015d64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015d68:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	2201      	movs	r2, #1
 8015d6e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8015d72:	4b0d      	ldr	r3, [pc, #52]	@ (8015da8 <tcp_alloc+0xf8>)
 8015d74:	681a      	ldr	r2, [r3, #0]
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8015d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8015dac <tcp_alloc+0xfc>)
 8015d7c:	781a      	ldrb	r2, [r3, #0]
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8015d88:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	4a08      	ldr	r2, [pc, #32]	@ (8015db0 <tcp_alloc+0x100>)
 8015d90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	4a07      	ldr	r2, [pc, #28]	@ (8015db4 <tcp_alloc+0x104>)
 8015d98:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8015d9c:	68fb      	ldr	r3, [r7, #12]
}
 8015d9e:	4618      	mov	r0, r3
 8015da0:	3710      	adds	r7, #16
 8015da2:	46bd      	mov	sp, r7
 8015da4:	bd80      	pop	{r7, pc}
 8015da6:	bf00      	nop
 8015da8:	200277b0 	.word	0x200277b0
 8015dac:	200277c6 	.word	0x200277c6
 8015db0:	08015a69 	.word	0x08015a69
 8015db4:	006ddd00 	.word	0x006ddd00

08015db8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b082      	sub	sp, #8
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d107      	bne.n	8015dd6 <tcp_pcb_purge+0x1e>
 8015dc6:	4b21      	ldr	r3, [pc, #132]	@ (8015e4c <tcp_pcb_purge+0x94>)
 8015dc8:	f640 0251 	movw	r2, #2129	@ 0x851
 8015dcc:	4920      	ldr	r1, [pc, #128]	@ (8015e50 <tcp_pcb_purge+0x98>)
 8015dce:	4821      	ldr	r0, [pc, #132]	@ (8015e54 <tcp_pcb_purge+0x9c>)
 8015dd0:	f008 f95e 	bl	801e090 <iprintf>
 8015dd4:	e037      	b.n	8015e46 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	7d1b      	ldrb	r3, [r3, #20]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d033      	beq.n	8015e46 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8015de2:	2b0a      	cmp	r3, #10
 8015de4:	d02f      	beq.n	8015e46 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8015dea:	2b01      	cmp	r3, #1
 8015dec:	d02b      	beq.n	8015e46 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d007      	beq.n	8015e06 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	f7fe fb5e 	bl	80144bc <pbuf_free>
      pcb->refused_data = NULL;
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	2200      	movs	r2, #0
 8015e04:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d002      	beq.n	8015e14 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8015e0e:	6878      	ldr	r0, [r7, #4]
 8015e10:	f000 f986 	bl	8016120 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015e1a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015e20:	4618      	mov	r0, r3
 8015e22:	f7ff fdc7 	bl	80159b4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	f7ff fdc2 	bl	80159b4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	2200      	movs	r2, #0
 8015e34:	66da      	str	r2, [r3, #108]	@ 0x6c
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	2200      	movs	r2, #0
 8015e42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8015e46:	3708      	adds	r7, #8
 8015e48:	46bd      	mov	sp, r7
 8015e4a:	bd80      	pop	{r7, pc}
 8015e4c:	0801fdb8 	.word	0x0801fdb8
 8015e50:	08020404 	.word	0x08020404
 8015e54:	0801fdfc 	.word	0x0801fdfc

08015e58 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8015e58:	b580      	push	{r7, lr}
 8015e5a:	b084      	sub	sp, #16
 8015e5c:	af00      	add	r7, sp, #0
 8015e5e:	6078      	str	r0, [r7, #4]
 8015e60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8015e62:	683b      	ldr	r3, [r7, #0]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d106      	bne.n	8015e76 <tcp_pcb_remove+0x1e>
 8015e68:	4b3e      	ldr	r3, [pc, #248]	@ (8015f64 <tcp_pcb_remove+0x10c>)
 8015e6a:	f640 0283 	movw	r2, #2179	@ 0x883
 8015e6e:	493e      	ldr	r1, [pc, #248]	@ (8015f68 <tcp_pcb_remove+0x110>)
 8015e70:	483e      	ldr	r0, [pc, #248]	@ (8015f6c <tcp_pcb_remove+0x114>)
 8015e72:	f008 f90d 	bl	801e090 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d106      	bne.n	8015e8a <tcp_pcb_remove+0x32>
 8015e7c:	4b39      	ldr	r3, [pc, #228]	@ (8015f64 <tcp_pcb_remove+0x10c>)
 8015e7e:	f640 0284 	movw	r2, #2180	@ 0x884
 8015e82:	493b      	ldr	r1, [pc, #236]	@ (8015f70 <tcp_pcb_remove+0x118>)
 8015e84:	4839      	ldr	r0, [pc, #228]	@ (8015f6c <tcp_pcb_remove+0x114>)
 8015e86:	f008 f903 	bl	801e090 <iprintf>

  TCP_RMV(pcblist, pcb);
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	683a      	ldr	r2, [r7, #0]
 8015e90:	429a      	cmp	r2, r3
 8015e92:	d105      	bne.n	8015ea0 <tcp_pcb_remove+0x48>
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	68da      	ldr	r2, [r3, #12]
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	601a      	str	r2, [r3, #0]
 8015e9e:	e013      	b.n	8015ec8 <tcp_pcb_remove+0x70>
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	60fb      	str	r3, [r7, #12]
 8015ea6:	e00c      	b.n	8015ec2 <tcp_pcb_remove+0x6a>
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	68db      	ldr	r3, [r3, #12]
 8015eac:	683a      	ldr	r2, [r7, #0]
 8015eae:	429a      	cmp	r2, r3
 8015eb0:	d104      	bne.n	8015ebc <tcp_pcb_remove+0x64>
 8015eb2:	683b      	ldr	r3, [r7, #0]
 8015eb4:	68da      	ldr	r2, [r3, #12]
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	60da      	str	r2, [r3, #12]
 8015eba:	e005      	b.n	8015ec8 <tcp_pcb_remove+0x70>
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	68db      	ldr	r3, [r3, #12]
 8015ec0:	60fb      	str	r3, [r7, #12]
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d1ef      	bne.n	8015ea8 <tcp_pcb_remove+0x50>
 8015ec8:	683b      	ldr	r3, [r7, #0]
 8015eca:	2200      	movs	r2, #0
 8015ecc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8015ece:	6838      	ldr	r0, [r7, #0]
 8015ed0:	f7ff ff72 	bl	8015db8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8015ed4:	683b      	ldr	r3, [r7, #0]
 8015ed6:	7d1b      	ldrb	r3, [r3, #20]
 8015ed8:	2b0a      	cmp	r3, #10
 8015eda:	d013      	beq.n	8015f04 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8015edc:	683b      	ldr	r3, [r7, #0]
 8015ede:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8015ee0:	2b01      	cmp	r3, #1
 8015ee2:	d00f      	beq.n	8015f04 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8015ee4:	683b      	ldr	r3, [r7, #0]
 8015ee6:	8b5b      	ldrh	r3, [r3, #26]
 8015ee8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d009      	beq.n	8015f04 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8015ef0:	683b      	ldr	r3, [r7, #0]
 8015ef2:	8b5b      	ldrh	r3, [r3, #26]
 8015ef4:	f043 0302 	orr.w	r3, r3, #2
 8015ef8:	b29a      	uxth	r2, r3
 8015efa:	683b      	ldr	r3, [r7, #0]
 8015efc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015efe:	6838      	ldr	r0, [r7, #0]
 8015f00:	f002 ff68 	bl	8018dd4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8015f04:	683b      	ldr	r3, [r7, #0]
 8015f06:	7d1b      	ldrb	r3, [r3, #20]
 8015f08:	2b01      	cmp	r3, #1
 8015f0a:	d020      	beq.n	8015f4e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8015f0c:	683b      	ldr	r3, [r7, #0]
 8015f0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d006      	beq.n	8015f22 <tcp_pcb_remove+0xca>
 8015f14:	4b13      	ldr	r3, [pc, #76]	@ (8015f64 <tcp_pcb_remove+0x10c>)
 8015f16:	f640 0293 	movw	r2, #2195	@ 0x893
 8015f1a:	4916      	ldr	r1, [pc, #88]	@ (8015f74 <tcp_pcb_remove+0x11c>)
 8015f1c:	4813      	ldr	r0, [pc, #76]	@ (8015f6c <tcp_pcb_remove+0x114>)
 8015f1e:	f008 f8b7 	bl	801e090 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8015f22:	683b      	ldr	r3, [r7, #0]
 8015f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d006      	beq.n	8015f38 <tcp_pcb_remove+0xe0>
 8015f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8015f64 <tcp_pcb_remove+0x10c>)
 8015f2c:	f640 0294 	movw	r2, #2196	@ 0x894
 8015f30:	4911      	ldr	r1, [pc, #68]	@ (8015f78 <tcp_pcb_remove+0x120>)
 8015f32:	480e      	ldr	r0, [pc, #56]	@ (8015f6c <tcp_pcb_remove+0x114>)
 8015f34:	f008 f8ac 	bl	801e090 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8015f38:	683b      	ldr	r3, [r7, #0]
 8015f3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d006      	beq.n	8015f4e <tcp_pcb_remove+0xf6>
 8015f40:	4b08      	ldr	r3, [pc, #32]	@ (8015f64 <tcp_pcb_remove+0x10c>)
 8015f42:	f640 0296 	movw	r2, #2198	@ 0x896
 8015f46:	490d      	ldr	r1, [pc, #52]	@ (8015f7c <tcp_pcb_remove+0x124>)
 8015f48:	4808      	ldr	r0, [pc, #32]	@ (8015f6c <tcp_pcb_remove+0x114>)
 8015f4a:	f008 f8a1 	bl	801e090 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8015f4e:	683b      	ldr	r3, [r7, #0]
 8015f50:	2200      	movs	r2, #0
 8015f52:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8015f54:	683b      	ldr	r3, [r7, #0]
 8015f56:	2200      	movs	r2, #0
 8015f58:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8015f5a:	bf00      	nop
 8015f5c:	3710      	adds	r7, #16
 8015f5e:	46bd      	mov	sp, r7
 8015f60:	bd80      	pop	{r7, pc}
 8015f62:	bf00      	nop
 8015f64:	0801fdb8 	.word	0x0801fdb8
 8015f68:	08020420 	.word	0x08020420
 8015f6c:	0801fdfc 	.word	0x0801fdfc
 8015f70:	0802043c 	.word	0x0802043c
 8015f74:	0802045c 	.word	0x0802045c
 8015f78:	08020474 	.word	0x08020474
 8015f7c:	08020490 	.word	0x08020490

08015f80 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8015f80:	b580      	push	{r7, lr}
 8015f82:	b082      	sub	sp, #8
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d106      	bne.n	8015f9c <tcp_next_iss+0x1c>
 8015f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8015fb8 <tcp_next_iss+0x38>)
 8015f90:	f640 02af 	movw	r2, #2223	@ 0x8af
 8015f94:	4909      	ldr	r1, [pc, #36]	@ (8015fbc <tcp_next_iss+0x3c>)
 8015f96:	480a      	ldr	r0, [pc, #40]	@ (8015fc0 <tcp_next_iss+0x40>)
 8015f98:	f008 f87a 	bl	801e090 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8015f9c:	4b09      	ldr	r3, [pc, #36]	@ (8015fc4 <tcp_next_iss+0x44>)
 8015f9e:	681a      	ldr	r2, [r3, #0]
 8015fa0:	4b09      	ldr	r3, [pc, #36]	@ (8015fc8 <tcp_next_iss+0x48>)
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	4413      	add	r3, r2
 8015fa6:	4a07      	ldr	r2, [pc, #28]	@ (8015fc4 <tcp_next_iss+0x44>)
 8015fa8:	6013      	str	r3, [r2, #0]
  return iss;
 8015faa:	4b06      	ldr	r3, [pc, #24]	@ (8015fc4 <tcp_next_iss+0x44>)
 8015fac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8015fae:	4618      	mov	r0, r3
 8015fb0:	3708      	adds	r7, #8
 8015fb2:	46bd      	mov	sp, r7
 8015fb4:	bd80      	pop	{r7, pc}
 8015fb6:	bf00      	nop
 8015fb8:	0801fdb8 	.word	0x0801fdb8
 8015fbc:	080204a8 	.word	0x080204a8
 8015fc0:	0801fdfc 	.word	0x0801fdfc
 8015fc4:	20000028 	.word	0x20000028
 8015fc8:	200277b0 	.word	0x200277b0

08015fcc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b086      	sub	sp, #24
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	4603      	mov	r3, r0
 8015fd4:	60b9      	str	r1, [r7, #8]
 8015fd6:	607a      	str	r2, [r7, #4]
 8015fd8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d106      	bne.n	8015fee <tcp_eff_send_mss_netif+0x22>
 8015fe0:	4b14      	ldr	r3, [pc, #80]	@ (8016034 <tcp_eff_send_mss_netif+0x68>)
 8015fe2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8015fe6:	4914      	ldr	r1, [pc, #80]	@ (8016038 <tcp_eff_send_mss_netif+0x6c>)
 8015fe8:	4814      	ldr	r0, [pc, #80]	@ (801603c <tcp_eff_send_mss_netif+0x70>)
 8015fea:	f008 f851 	bl	801e090 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8015fee:	68bb      	ldr	r3, [r7, #8]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d101      	bne.n	8015ff8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8015ff4:	89fb      	ldrh	r3, [r7, #14]
 8015ff6:	e019      	b.n	801602c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8015ff8:	68bb      	ldr	r3, [r7, #8]
 8015ffa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015ffc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8015ffe:	8afb      	ldrh	r3, [r7, #22]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d012      	beq.n	801602a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016004:	2328      	movs	r3, #40	@ 0x28
 8016006:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8016008:	8afa      	ldrh	r2, [r7, #22]
 801600a:	8abb      	ldrh	r3, [r7, #20]
 801600c:	429a      	cmp	r2, r3
 801600e:	d904      	bls.n	801601a <tcp_eff_send_mss_netif+0x4e>
 8016010:	8afa      	ldrh	r2, [r7, #22]
 8016012:	8abb      	ldrh	r3, [r7, #20]
 8016014:	1ad3      	subs	r3, r2, r3
 8016016:	b29b      	uxth	r3, r3
 8016018:	e000      	b.n	801601c <tcp_eff_send_mss_netif+0x50>
 801601a:	2300      	movs	r3, #0
 801601c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801601e:	8a7a      	ldrh	r2, [r7, #18]
 8016020:	89fb      	ldrh	r3, [r7, #14]
 8016022:	4293      	cmp	r3, r2
 8016024:	bf28      	it	cs
 8016026:	4613      	movcs	r3, r2
 8016028:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801602a:	89fb      	ldrh	r3, [r7, #14]
}
 801602c:	4618      	mov	r0, r3
 801602e:	3718      	adds	r7, #24
 8016030:	46bd      	mov	sp, r7
 8016032:	bd80      	pop	{r7, pc}
 8016034:	0801fdb8 	.word	0x0801fdb8
 8016038:	080204c4 	.word	0x080204c4
 801603c:	0801fdfc 	.word	0x0801fdfc

08016040 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8016040:	b580      	push	{r7, lr}
 8016042:	b084      	sub	sp, #16
 8016044:	af00      	add	r7, sp, #0
 8016046:	6078      	str	r0, [r7, #4]
 8016048:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801604a:	683b      	ldr	r3, [r7, #0]
 801604c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	2b00      	cmp	r3, #0
 8016052:	d119      	bne.n	8016088 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8016054:	4b10      	ldr	r3, [pc, #64]	@ (8016098 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8016056:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801605a:	4910      	ldr	r1, [pc, #64]	@ (801609c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801605c:	4810      	ldr	r0, [pc, #64]	@ (80160a0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801605e:	f008 f817 	bl	801e090 <iprintf>

  while (pcb != NULL) {
 8016062:	e011      	b.n	8016088 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	681a      	ldr	r2, [r3, #0]
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	429a      	cmp	r2, r3
 801606e:	d108      	bne.n	8016082 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	68db      	ldr	r3, [r3, #12]
 8016074:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8016076:	68f8      	ldr	r0, [r7, #12]
 8016078:	f7fe ffc4 	bl	8015004 <tcp_abort>
      pcb = next;
 801607c:	68bb      	ldr	r3, [r7, #8]
 801607e:	60fb      	str	r3, [r7, #12]
 8016080:	e002      	b.n	8016088 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	68db      	ldr	r3, [r3, #12]
 8016086:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d1ea      	bne.n	8016064 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801608e:	bf00      	nop
 8016090:	bf00      	nop
 8016092:	3710      	adds	r7, #16
 8016094:	46bd      	mov	sp, r7
 8016096:	bd80      	pop	{r7, pc}
 8016098:	0801fdb8 	.word	0x0801fdb8
 801609c:	080204ec 	.word	0x080204ec
 80160a0:	0801fdfc 	.word	0x0801fdfc

080160a4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b084      	sub	sp, #16
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]
 80160ac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d02a      	beq.n	801610a <tcp_netif_ip_addr_changed+0x66>
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d026      	beq.n	801610a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80160bc:	4b15      	ldr	r3, [pc, #84]	@ (8016114 <tcp_netif_ip_addr_changed+0x70>)
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	4619      	mov	r1, r3
 80160c2:	6878      	ldr	r0, [r7, #4]
 80160c4:	f7ff ffbc 	bl	8016040 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80160c8:	4b13      	ldr	r3, [pc, #76]	@ (8016118 <tcp_netif_ip_addr_changed+0x74>)
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	4619      	mov	r1, r3
 80160ce:	6878      	ldr	r0, [r7, #4]
 80160d0:	f7ff ffb6 	bl	8016040 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80160d4:	683b      	ldr	r3, [r7, #0]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d017      	beq.n	801610a <tcp_netif_ip_addr_changed+0x66>
 80160da:	683b      	ldr	r3, [r7, #0]
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d013      	beq.n	801610a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80160e2:	4b0e      	ldr	r3, [pc, #56]	@ (801611c <tcp_netif_ip_addr_changed+0x78>)
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	60fb      	str	r3, [r7, #12]
 80160e8:	e00c      	b.n	8016104 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	681a      	ldr	r2, [r3, #0]
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	429a      	cmp	r2, r3
 80160f4:	d103      	bne.n	80160fe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80160f6:	683b      	ldr	r3, [r7, #0]
 80160f8:	681a      	ldr	r2, [r3, #0]
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	68db      	ldr	r3, [r3, #12]
 8016102:	60fb      	str	r3, [r7, #12]
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d1ef      	bne.n	80160ea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801610a:	bf00      	nop
 801610c:	3710      	adds	r7, #16
 801610e:	46bd      	mov	sp, r7
 8016110:	bd80      	pop	{r7, pc}
 8016112:	bf00      	nop
 8016114:	200277bc 	.word	0x200277bc
 8016118:	200277b4 	.word	0x200277b4
 801611c:	200277b8 	.word	0x200277b8

08016120 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8016120:	b580      	push	{r7, lr}
 8016122:	b082      	sub	sp, #8
 8016124:	af00      	add	r7, sp, #0
 8016126:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801612c:	2b00      	cmp	r3, #0
 801612e:	d007      	beq.n	8016140 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016134:	4618      	mov	r0, r3
 8016136:	f7ff fc3d 	bl	80159b4 <tcp_segs_free>
    pcb->ooseq = NULL;
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	2200      	movs	r2, #0
 801613e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8016140:	bf00      	nop
 8016142:	3708      	adds	r7, #8
 8016144:	46bd      	mov	sp, r7
 8016146:	bd80      	pop	{r7, pc}

08016148 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8016148:	b590      	push	{r4, r7, lr}
 801614a:	b08d      	sub	sp, #52	@ 0x34
 801614c:	af04      	add	r7, sp, #16
 801614e:	6078      	str	r0, [r7, #4]
 8016150:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d105      	bne.n	8016164 <tcp_input+0x1c>
 8016158:	4b9b      	ldr	r3, [pc, #620]	@ (80163c8 <tcp_input+0x280>)
 801615a:	2283      	movs	r2, #131	@ 0x83
 801615c:	499b      	ldr	r1, [pc, #620]	@ (80163cc <tcp_input+0x284>)
 801615e:	489c      	ldr	r0, [pc, #624]	@ (80163d0 <tcp_input+0x288>)
 8016160:	f007 ff96 	bl	801e090 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	685b      	ldr	r3, [r3, #4]
 8016168:	4a9a      	ldr	r2, [pc, #616]	@ (80163d4 <tcp_input+0x28c>)
 801616a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	895b      	ldrh	r3, [r3, #10]
 8016170:	2b13      	cmp	r3, #19
 8016172:	f240 83d1 	bls.w	8016918 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016176:	4b98      	ldr	r3, [pc, #608]	@ (80163d8 <tcp_input+0x290>)
 8016178:	695b      	ldr	r3, [r3, #20]
 801617a:	4a97      	ldr	r2, [pc, #604]	@ (80163d8 <tcp_input+0x290>)
 801617c:	6812      	ldr	r2, [r2, #0]
 801617e:	4611      	mov	r1, r2
 8016180:	4618      	mov	r0, r3
 8016182:	f005 feef 	bl	801bf64 <ip4_addr_isbroadcast_u32>
 8016186:	4603      	mov	r3, r0
 8016188:	2b00      	cmp	r3, #0
 801618a:	f040 83c7 	bne.w	801691c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801618e:	4b92      	ldr	r3, [pc, #584]	@ (80163d8 <tcp_input+0x290>)
 8016190:	695b      	ldr	r3, [r3, #20]
 8016192:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016196:	2be0      	cmp	r3, #224	@ 0xe0
 8016198:	f000 83c0 	beq.w	801691c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801619c:	4b8d      	ldr	r3, [pc, #564]	@ (80163d4 <tcp_input+0x28c>)
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	899b      	ldrh	r3, [r3, #12]
 80161a2:	b29b      	uxth	r3, r3
 80161a4:	4618      	mov	r0, r3
 80161a6:	f7fc fd9b 	bl	8012ce0 <lwip_htons>
 80161aa:	4603      	mov	r3, r0
 80161ac:	0b1b      	lsrs	r3, r3, #12
 80161ae:	b29b      	uxth	r3, r3
 80161b0:	b2db      	uxtb	r3, r3
 80161b2:	009b      	lsls	r3, r3, #2
 80161b4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80161b6:	7cbb      	ldrb	r3, [r7, #18]
 80161b8:	2b13      	cmp	r3, #19
 80161ba:	f240 83b1 	bls.w	8016920 <tcp_input+0x7d8>
 80161be:	7cbb      	ldrb	r3, [r7, #18]
 80161c0:	b29a      	uxth	r2, r3
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	891b      	ldrh	r3, [r3, #8]
 80161c6:	429a      	cmp	r2, r3
 80161c8:	f200 83aa 	bhi.w	8016920 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80161cc:	7cbb      	ldrb	r3, [r7, #18]
 80161ce:	b29b      	uxth	r3, r3
 80161d0:	3b14      	subs	r3, #20
 80161d2:	b29a      	uxth	r2, r3
 80161d4:	4b81      	ldr	r3, [pc, #516]	@ (80163dc <tcp_input+0x294>)
 80161d6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80161d8:	4b81      	ldr	r3, [pc, #516]	@ (80163e0 <tcp_input+0x298>)
 80161da:	2200      	movs	r2, #0
 80161dc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	895a      	ldrh	r2, [r3, #10]
 80161e2:	7cbb      	ldrb	r3, [r7, #18]
 80161e4:	b29b      	uxth	r3, r3
 80161e6:	429a      	cmp	r2, r3
 80161e8:	d309      	bcc.n	80161fe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80161ea:	4b7c      	ldr	r3, [pc, #496]	@ (80163dc <tcp_input+0x294>)
 80161ec:	881a      	ldrh	r2, [r3, #0]
 80161ee:	4b7d      	ldr	r3, [pc, #500]	@ (80163e4 <tcp_input+0x29c>)
 80161f0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80161f2:	7cbb      	ldrb	r3, [r7, #18]
 80161f4:	4619      	mov	r1, r3
 80161f6:	6878      	ldr	r0, [r7, #4]
 80161f8:	f7fe f8da 	bl	80143b0 <pbuf_remove_header>
 80161fc:	e04e      	b.n	801629c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d105      	bne.n	8016212 <tcp_input+0xca>
 8016206:	4b70      	ldr	r3, [pc, #448]	@ (80163c8 <tcp_input+0x280>)
 8016208:	22c2      	movs	r2, #194	@ 0xc2
 801620a:	4977      	ldr	r1, [pc, #476]	@ (80163e8 <tcp_input+0x2a0>)
 801620c:	4870      	ldr	r0, [pc, #448]	@ (80163d0 <tcp_input+0x288>)
 801620e:	f007 ff3f 	bl	801e090 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8016212:	2114      	movs	r1, #20
 8016214:	6878      	ldr	r0, [r7, #4]
 8016216:	f7fe f8cb 	bl	80143b0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	895a      	ldrh	r2, [r3, #10]
 801621e:	4b71      	ldr	r3, [pc, #452]	@ (80163e4 <tcp_input+0x29c>)
 8016220:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8016222:	4b6e      	ldr	r3, [pc, #440]	@ (80163dc <tcp_input+0x294>)
 8016224:	881a      	ldrh	r2, [r3, #0]
 8016226:	4b6f      	ldr	r3, [pc, #444]	@ (80163e4 <tcp_input+0x29c>)
 8016228:	881b      	ldrh	r3, [r3, #0]
 801622a:	1ad3      	subs	r3, r2, r3
 801622c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801622e:	4b6d      	ldr	r3, [pc, #436]	@ (80163e4 <tcp_input+0x29c>)
 8016230:	881b      	ldrh	r3, [r3, #0]
 8016232:	4619      	mov	r1, r3
 8016234:	6878      	ldr	r0, [r7, #4]
 8016236:	f7fe f8bb 	bl	80143b0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	895b      	ldrh	r3, [r3, #10]
 8016240:	8a3a      	ldrh	r2, [r7, #16]
 8016242:	429a      	cmp	r2, r3
 8016244:	f200 836e 	bhi.w	8016924 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	685b      	ldr	r3, [r3, #4]
 801624e:	4a64      	ldr	r2, [pc, #400]	@ (80163e0 <tcp_input+0x298>)
 8016250:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	8a3a      	ldrh	r2, [r7, #16]
 8016258:	4611      	mov	r1, r2
 801625a:	4618      	mov	r0, r3
 801625c:	f7fe f8a8 	bl	80143b0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	891a      	ldrh	r2, [r3, #8]
 8016264:	8a3b      	ldrh	r3, [r7, #16]
 8016266:	1ad3      	subs	r3, r2, r3
 8016268:	b29a      	uxth	r2, r3
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	895b      	ldrh	r3, [r3, #10]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d005      	beq.n	8016282 <tcp_input+0x13a>
 8016276:	4b54      	ldr	r3, [pc, #336]	@ (80163c8 <tcp_input+0x280>)
 8016278:	22df      	movs	r2, #223	@ 0xdf
 801627a:	495c      	ldr	r1, [pc, #368]	@ (80163ec <tcp_input+0x2a4>)
 801627c:	4854      	ldr	r0, [pc, #336]	@ (80163d0 <tcp_input+0x288>)
 801627e:	f007 ff07 	bl	801e090 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	891a      	ldrh	r2, [r3, #8]
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	891b      	ldrh	r3, [r3, #8]
 801628c:	429a      	cmp	r2, r3
 801628e:	d005      	beq.n	801629c <tcp_input+0x154>
 8016290:	4b4d      	ldr	r3, [pc, #308]	@ (80163c8 <tcp_input+0x280>)
 8016292:	22e0      	movs	r2, #224	@ 0xe0
 8016294:	4956      	ldr	r1, [pc, #344]	@ (80163f0 <tcp_input+0x2a8>)
 8016296:	484e      	ldr	r0, [pc, #312]	@ (80163d0 <tcp_input+0x288>)
 8016298:	f007 fefa 	bl	801e090 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801629c:	4b4d      	ldr	r3, [pc, #308]	@ (80163d4 <tcp_input+0x28c>)
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	881b      	ldrh	r3, [r3, #0]
 80162a2:	b29b      	uxth	r3, r3
 80162a4:	4a4b      	ldr	r2, [pc, #300]	@ (80163d4 <tcp_input+0x28c>)
 80162a6:	6814      	ldr	r4, [r2, #0]
 80162a8:	4618      	mov	r0, r3
 80162aa:	f7fc fd19 	bl	8012ce0 <lwip_htons>
 80162ae:	4603      	mov	r3, r0
 80162b0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80162b2:	4b48      	ldr	r3, [pc, #288]	@ (80163d4 <tcp_input+0x28c>)
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	885b      	ldrh	r3, [r3, #2]
 80162b8:	b29b      	uxth	r3, r3
 80162ba:	4a46      	ldr	r2, [pc, #280]	@ (80163d4 <tcp_input+0x28c>)
 80162bc:	6814      	ldr	r4, [r2, #0]
 80162be:	4618      	mov	r0, r3
 80162c0:	f7fc fd0e 	bl	8012ce0 <lwip_htons>
 80162c4:	4603      	mov	r3, r0
 80162c6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80162c8:	4b42      	ldr	r3, [pc, #264]	@ (80163d4 <tcp_input+0x28c>)
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	685b      	ldr	r3, [r3, #4]
 80162ce:	4a41      	ldr	r2, [pc, #260]	@ (80163d4 <tcp_input+0x28c>)
 80162d0:	6814      	ldr	r4, [r2, #0]
 80162d2:	4618      	mov	r0, r3
 80162d4:	f7fc fd1a 	bl	8012d0c <lwip_htonl>
 80162d8:	4603      	mov	r3, r0
 80162da:	6063      	str	r3, [r4, #4]
 80162dc:	6863      	ldr	r3, [r4, #4]
 80162de:	4a45      	ldr	r2, [pc, #276]	@ (80163f4 <tcp_input+0x2ac>)
 80162e0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80162e2:	4b3c      	ldr	r3, [pc, #240]	@ (80163d4 <tcp_input+0x28c>)
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	689b      	ldr	r3, [r3, #8]
 80162e8:	4a3a      	ldr	r2, [pc, #232]	@ (80163d4 <tcp_input+0x28c>)
 80162ea:	6814      	ldr	r4, [r2, #0]
 80162ec:	4618      	mov	r0, r3
 80162ee:	f7fc fd0d 	bl	8012d0c <lwip_htonl>
 80162f2:	4603      	mov	r3, r0
 80162f4:	60a3      	str	r3, [r4, #8]
 80162f6:	68a3      	ldr	r3, [r4, #8]
 80162f8:	4a3f      	ldr	r2, [pc, #252]	@ (80163f8 <tcp_input+0x2b0>)
 80162fa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80162fc:	4b35      	ldr	r3, [pc, #212]	@ (80163d4 <tcp_input+0x28c>)
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	89db      	ldrh	r3, [r3, #14]
 8016302:	b29b      	uxth	r3, r3
 8016304:	4a33      	ldr	r2, [pc, #204]	@ (80163d4 <tcp_input+0x28c>)
 8016306:	6814      	ldr	r4, [r2, #0]
 8016308:	4618      	mov	r0, r3
 801630a:	f7fc fce9 	bl	8012ce0 <lwip_htons>
 801630e:	4603      	mov	r3, r0
 8016310:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8016312:	4b30      	ldr	r3, [pc, #192]	@ (80163d4 <tcp_input+0x28c>)
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	899b      	ldrh	r3, [r3, #12]
 8016318:	b29b      	uxth	r3, r3
 801631a:	4618      	mov	r0, r3
 801631c:	f7fc fce0 	bl	8012ce0 <lwip_htons>
 8016320:	4603      	mov	r3, r0
 8016322:	b2db      	uxtb	r3, r3
 8016324:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016328:	b2da      	uxtb	r2, r3
 801632a:	4b34      	ldr	r3, [pc, #208]	@ (80163fc <tcp_input+0x2b4>)
 801632c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	891a      	ldrh	r2, [r3, #8]
 8016332:	4b33      	ldr	r3, [pc, #204]	@ (8016400 <tcp_input+0x2b8>)
 8016334:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8016336:	4b31      	ldr	r3, [pc, #196]	@ (80163fc <tcp_input+0x2b4>)
 8016338:	781b      	ldrb	r3, [r3, #0]
 801633a:	f003 0303 	and.w	r3, r3, #3
 801633e:	2b00      	cmp	r3, #0
 8016340:	d00c      	beq.n	801635c <tcp_input+0x214>
    tcplen++;
 8016342:	4b2f      	ldr	r3, [pc, #188]	@ (8016400 <tcp_input+0x2b8>)
 8016344:	881b      	ldrh	r3, [r3, #0]
 8016346:	3301      	adds	r3, #1
 8016348:	b29a      	uxth	r2, r3
 801634a:	4b2d      	ldr	r3, [pc, #180]	@ (8016400 <tcp_input+0x2b8>)
 801634c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	891a      	ldrh	r2, [r3, #8]
 8016352:	4b2b      	ldr	r3, [pc, #172]	@ (8016400 <tcp_input+0x2b8>)
 8016354:	881b      	ldrh	r3, [r3, #0]
 8016356:	429a      	cmp	r2, r3
 8016358:	f200 82e6 	bhi.w	8016928 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801635c:	2300      	movs	r3, #0
 801635e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016360:	4b28      	ldr	r3, [pc, #160]	@ (8016404 <tcp_input+0x2bc>)
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	61fb      	str	r3, [r7, #28]
 8016366:	e09d      	b.n	80164a4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8016368:	69fb      	ldr	r3, [r7, #28]
 801636a:	7d1b      	ldrb	r3, [r3, #20]
 801636c:	2b00      	cmp	r3, #0
 801636e:	d105      	bne.n	801637c <tcp_input+0x234>
 8016370:	4b15      	ldr	r3, [pc, #84]	@ (80163c8 <tcp_input+0x280>)
 8016372:	22fb      	movs	r2, #251	@ 0xfb
 8016374:	4924      	ldr	r1, [pc, #144]	@ (8016408 <tcp_input+0x2c0>)
 8016376:	4816      	ldr	r0, [pc, #88]	@ (80163d0 <tcp_input+0x288>)
 8016378:	f007 fe8a 	bl	801e090 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801637c:	69fb      	ldr	r3, [r7, #28]
 801637e:	7d1b      	ldrb	r3, [r3, #20]
 8016380:	2b0a      	cmp	r3, #10
 8016382:	d105      	bne.n	8016390 <tcp_input+0x248>
 8016384:	4b10      	ldr	r3, [pc, #64]	@ (80163c8 <tcp_input+0x280>)
 8016386:	22fc      	movs	r2, #252	@ 0xfc
 8016388:	4920      	ldr	r1, [pc, #128]	@ (801640c <tcp_input+0x2c4>)
 801638a:	4811      	ldr	r0, [pc, #68]	@ (80163d0 <tcp_input+0x288>)
 801638c:	f007 fe80 	bl	801e090 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8016390:	69fb      	ldr	r3, [r7, #28]
 8016392:	7d1b      	ldrb	r3, [r3, #20]
 8016394:	2b01      	cmp	r3, #1
 8016396:	d105      	bne.n	80163a4 <tcp_input+0x25c>
 8016398:	4b0b      	ldr	r3, [pc, #44]	@ (80163c8 <tcp_input+0x280>)
 801639a:	22fd      	movs	r2, #253	@ 0xfd
 801639c:	491c      	ldr	r1, [pc, #112]	@ (8016410 <tcp_input+0x2c8>)
 801639e:	480c      	ldr	r0, [pc, #48]	@ (80163d0 <tcp_input+0x288>)
 80163a0:	f007 fe76 	bl	801e090 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80163a4:	69fb      	ldr	r3, [r7, #28]
 80163a6:	7a1b      	ldrb	r3, [r3, #8]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d033      	beq.n	8016414 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80163ac:	69fb      	ldr	r3, [r7, #28]
 80163ae:	7a1a      	ldrb	r2, [r3, #8]
 80163b0:	4b09      	ldr	r3, [pc, #36]	@ (80163d8 <tcp_input+0x290>)
 80163b2:	685b      	ldr	r3, [r3, #4]
 80163b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80163b8:	3301      	adds	r3, #1
 80163ba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80163bc:	429a      	cmp	r2, r3
 80163be:	d029      	beq.n	8016414 <tcp_input+0x2cc>
      prev = pcb;
 80163c0:	69fb      	ldr	r3, [r7, #28]
 80163c2:	61bb      	str	r3, [r7, #24]
      continue;
 80163c4:	e06b      	b.n	801649e <tcp_input+0x356>
 80163c6:	bf00      	nop
 80163c8:	08020520 	.word	0x08020520
 80163cc:	08020554 	.word	0x08020554
 80163d0:	0802056c 	.word	0x0802056c
 80163d4:	200277d8 	.word	0x200277d8
 80163d8:	200246b0 	.word	0x200246b0
 80163dc:	200277dc 	.word	0x200277dc
 80163e0:	200277e0 	.word	0x200277e0
 80163e4:	200277de 	.word	0x200277de
 80163e8:	08020594 	.word	0x08020594
 80163ec:	080205a4 	.word	0x080205a4
 80163f0:	080205b0 	.word	0x080205b0
 80163f4:	200277e8 	.word	0x200277e8
 80163f8:	200277ec 	.word	0x200277ec
 80163fc:	200277f4 	.word	0x200277f4
 8016400:	200277f2 	.word	0x200277f2
 8016404:	200277bc 	.word	0x200277bc
 8016408:	080205d0 	.word	0x080205d0
 801640c:	080205f8 	.word	0x080205f8
 8016410:	08020624 	.word	0x08020624
    }

    if (pcb->remote_port == tcphdr->src &&
 8016414:	69fb      	ldr	r3, [r7, #28]
 8016416:	8b1a      	ldrh	r2, [r3, #24]
 8016418:	4b72      	ldr	r3, [pc, #456]	@ (80165e4 <tcp_input+0x49c>)
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	881b      	ldrh	r3, [r3, #0]
 801641e:	b29b      	uxth	r3, r3
 8016420:	429a      	cmp	r2, r3
 8016422:	d13a      	bne.n	801649a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8016424:	69fb      	ldr	r3, [r7, #28]
 8016426:	8ada      	ldrh	r2, [r3, #22]
 8016428:	4b6e      	ldr	r3, [pc, #440]	@ (80165e4 <tcp_input+0x49c>)
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	885b      	ldrh	r3, [r3, #2]
 801642e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8016430:	429a      	cmp	r2, r3
 8016432:	d132      	bne.n	801649a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016434:	69fb      	ldr	r3, [r7, #28]
 8016436:	685a      	ldr	r2, [r3, #4]
 8016438:	4b6b      	ldr	r3, [pc, #428]	@ (80165e8 <tcp_input+0x4a0>)
 801643a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801643c:	429a      	cmp	r2, r3
 801643e:	d12c      	bne.n	801649a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016440:	69fb      	ldr	r3, [r7, #28]
 8016442:	681a      	ldr	r2, [r3, #0]
 8016444:	4b68      	ldr	r3, [pc, #416]	@ (80165e8 <tcp_input+0x4a0>)
 8016446:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016448:	429a      	cmp	r2, r3
 801644a:	d126      	bne.n	801649a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801644c:	69fb      	ldr	r3, [r7, #28]
 801644e:	68db      	ldr	r3, [r3, #12]
 8016450:	69fa      	ldr	r2, [r7, #28]
 8016452:	429a      	cmp	r2, r3
 8016454:	d106      	bne.n	8016464 <tcp_input+0x31c>
 8016456:	4b65      	ldr	r3, [pc, #404]	@ (80165ec <tcp_input+0x4a4>)
 8016458:	f240 120d 	movw	r2, #269	@ 0x10d
 801645c:	4964      	ldr	r1, [pc, #400]	@ (80165f0 <tcp_input+0x4a8>)
 801645e:	4865      	ldr	r0, [pc, #404]	@ (80165f4 <tcp_input+0x4ac>)
 8016460:	f007 fe16 	bl	801e090 <iprintf>
      if (prev != NULL) {
 8016464:	69bb      	ldr	r3, [r7, #24]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d00a      	beq.n	8016480 <tcp_input+0x338>
        prev->next = pcb->next;
 801646a:	69fb      	ldr	r3, [r7, #28]
 801646c:	68da      	ldr	r2, [r3, #12]
 801646e:	69bb      	ldr	r3, [r7, #24]
 8016470:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8016472:	4b61      	ldr	r3, [pc, #388]	@ (80165f8 <tcp_input+0x4b0>)
 8016474:	681a      	ldr	r2, [r3, #0]
 8016476:	69fb      	ldr	r3, [r7, #28]
 8016478:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801647a:	4a5f      	ldr	r2, [pc, #380]	@ (80165f8 <tcp_input+0x4b0>)
 801647c:	69fb      	ldr	r3, [r7, #28]
 801647e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8016480:	69fb      	ldr	r3, [r7, #28]
 8016482:	68db      	ldr	r3, [r3, #12]
 8016484:	69fa      	ldr	r2, [r7, #28]
 8016486:	429a      	cmp	r2, r3
 8016488:	d111      	bne.n	80164ae <tcp_input+0x366>
 801648a:	4b58      	ldr	r3, [pc, #352]	@ (80165ec <tcp_input+0x4a4>)
 801648c:	f240 1215 	movw	r2, #277	@ 0x115
 8016490:	495a      	ldr	r1, [pc, #360]	@ (80165fc <tcp_input+0x4b4>)
 8016492:	4858      	ldr	r0, [pc, #352]	@ (80165f4 <tcp_input+0x4ac>)
 8016494:	f007 fdfc 	bl	801e090 <iprintf>
      break;
 8016498:	e009      	b.n	80164ae <tcp_input+0x366>
    }
    prev = pcb;
 801649a:	69fb      	ldr	r3, [r7, #28]
 801649c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801649e:	69fb      	ldr	r3, [r7, #28]
 80164a0:	68db      	ldr	r3, [r3, #12]
 80164a2:	61fb      	str	r3, [r7, #28]
 80164a4:	69fb      	ldr	r3, [r7, #28]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	f47f af5e 	bne.w	8016368 <tcp_input+0x220>
 80164ac:	e000      	b.n	80164b0 <tcp_input+0x368>
      break;
 80164ae:	bf00      	nop
  }

  if (pcb == NULL) {
 80164b0:	69fb      	ldr	r3, [r7, #28]
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	f040 80aa 	bne.w	801660c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80164b8:	4b51      	ldr	r3, [pc, #324]	@ (8016600 <tcp_input+0x4b8>)
 80164ba:	681b      	ldr	r3, [r3, #0]
 80164bc:	61fb      	str	r3, [r7, #28]
 80164be:	e03f      	b.n	8016540 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80164c0:	69fb      	ldr	r3, [r7, #28]
 80164c2:	7d1b      	ldrb	r3, [r3, #20]
 80164c4:	2b0a      	cmp	r3, #10
 80164c6:	d006      	beq.n	80164d6 <tcp_input+0x38e>
 80164c8:	4b48      	ldr	r3, [pc, #288]	@ (80165ec <tcp_input+0x4a4>)
 80164ca:	f240 121f 	movw	r2, #287	@ 0x11f
 80164ce:	494d      	ldr	r1, [pc, #308]	@ (8016604 <tcp_input+0x4bc>)
 80164d0:	4848      	ldr	r0, [pc, #288]	@ (80165f4 <tcp_input+0x4ac>)
 80164d2:	f007 fddd 	bl	801e090 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80164d6:	69fb      	ldr	r3, [r7, #28]
 80164d8:	7a1b      	ldrb	r3, [r3, #8]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d009      	beq.n	80164f2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80164de:	69fb      	ldr	r3, [r7, #28]
 80164e0:	7a1a      	ldrb	r2, [r3, #8]
 80164e2:	4b41      	ldr	r3, [pc, #260]	@ (80165e8 <tcp_input+0x4a0>)
 80164e4:	685b      	ldr	r3, [r3, #4]
 80164e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80164ea:	3301      	adds	r3, #1
 80164ec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80164ee:	429a      	cmp	r2, r3
 80164f0:	d122      	bne.n	8016538 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80164f2:	69fb      	ldr	r3, [r7, #28]
 80164f4:	8b1a      	ldrh	r2, [r3, #24]
 80164f6:	4b3b      	ldr	r3, [pc, #236]	@ (80165e4 <tcp_input+0x49c>)
 80164f8:	681b      	ldr	r3, [r3, #0]
 80164fa:	881b      	ldrh	r3, [r3, #0]
 80164fc:	b29b      	uxth	r3, r3
 80164fe:	429a      	cmp	r2, r3
 8016500:	d11b      	bne.n	801653a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8016502:	69fb      	ldr	r3, [r7, #28]
 8016504:	8ada      	ldrh	r2, [r3, #22]
 8016506:	4b37      	ldr	r3, [pc, #220]	@ (80165e4 <tcp_input+0x49c>)
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	885b      	ldrh	r3, [r3, #2]
 801650c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801650e:	429a      	cmp	r2, r3
 8016510:	d113      	bne.n	801653a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016512:	69fb      	ldr	r3, [r7, #28]
 8016514:	685a      	ldr	r2, [r3, #4]
 8016516:	4b34      	ldr	r3, [pc, #208]	@ (80165e8 <tcp_input+0x4a0>)
 8016518:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801651a:	429a      	cmp	r2, r3
 801651c:	d10d      	bne.n	801653a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801651e:	69fb      	ldr	r3, [r7, #28]
 8016520:	681a      	ldr	r2, [r3, #0]
 8016522:	4b31      	ldr	r3, [pc, #196]	@ (80165e8 <tcp_input+0x4a0>)
 8016524:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016526:	429a      	cmp	r2, r3
 8016528:	d107      	bne.n	801653a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801652a:	69f8      	ldr	r0, [r7, #28]
 801652c:	f000 fb56 	bl	8016bdc <tcp_timewait_input>
        }
        pbuf_free(p);
 8016530:	6878      	ldr	r0, [r7, #4]
 8016532:	f7fd ffc3 	bl	80144bc <pbuf_free>
        return;
 8016536:	e1fd      	b.n	8016934 <tcp_input+0x7ec>
        continue;
 8016538:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801653a:	69fb      	ldr	r3, [r7, #28]
 801653c:	68db      	ldr	r3, [r3, #12]
 801653e:	61fb      	str	r3, [r7, #28]
 8016540:	69fb      	ldr	r3, [r7, #28]
 8016542:	2b00      	cmp	r3, #0
 8016544:	d1bc      	bne.n	80164c0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8016546:	2300      	movs	r3, #0
 8016548:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801654a:	4b2f      	ldr	r3, [pc, #188]	@ (8016608 <tcp_input+0x4c0>)
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	617b      	str	r3, [r7, #20]
 8016550:	e02a      	b.n	80165a8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016552:	697b      	ldr	r3, [r7, #20]
 8016554:	7a1b      	ldrb	r3, [r3, #8]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d00c      	beq.n	8016574 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801655a:	697b      	ldr	r3, [r7, #20]
 801655c:	7a1a      	ldrb	r2, [r3, #8]
 801655e:	4b22      	ldr	r3, [pc, #136]	@ (80165e8 <tcp_input+0x4a0>)
 8016560:	685b      	ldr	r3, [r3, #4]
 8016562:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016566:	3301      	adds	r3, #1
 8016568:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801656a:	429a      	cmp	r2, r3
 801656c:	d002      	beq.n	8016574 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801656e:	697b      	ldr	r3, [r7, #20]
 8016570:	61bb      	str	r3, [r7, #24]
        continue;
 8016572:	e016      	b.n	80165a2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8016574:	697b      	ldr	r3, [r7, #20]
 8016576:	8ada      	ldrh	r2, [r3, #22]
 8016578:	4b1a      	ldr	r3, [pc, #104]	@ (80165e4 <tcp_input+0x49c>)
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	885b      	ldrh	r3, [r3, #2]
 801657e:	b29b      	uxth	r3, r3
 8016580:	429a      	cmp	r2, r3
 8016582:	d10c      	bne.n	801659e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8016584:	697b      	ldr	r3, [r7, #20]
 8016586:	681a      	ldr	r2, [r3, #0]
 8016588:	4b17      	ldr	r3, [pc, #92]	@ (80165e8 <tcp_input+0x4a0>)
 801658a:	695b      	ldr	r3, [r3, #20]
 801658c:	429a      	cmp	r2, r3
 801658e:	d00f      	beq.n	80165b0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8016590:	697b      	ldr	r3, [r7, #20]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d00d      	beq.n	80165b2 <tcp_input+0x46a>
 8016596:	697b      	ldr	r3, [r7, #20]
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	2b00      	cmp	r3, #0
 801659c:	d009      	beq.n	80165b2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801659e:	697b      	ldr	r3, [r7, #20]
 80165a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80165a2:	697b      	ldr	r3, [r7, #20]
 80165a4:	68db      	ldr	r3, [r3, #12]
 80165a6:	617b      	str	r3, [r7, #20]
 80165a8:	697b      	ldr	r3, [r7, #20]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d1d1      	bne.n	8016552 <tcp_input+0x40a>
 80165ae:	e000      	b.n	80165b2 <tcp_input+0x46a>
            break;
 80165b0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80165b2:	697b      	ldr	r3, [r7, #20]
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d029      	beq.n	801660c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80165b8:	69bb      	ldr	r3, [r7, #24]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d00a      	beq.n	80165d4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80165be:	697b      	ldr	r3, [r7, #20]
 80165c0:	68da      	ldr	r2, [r3, #12]
 80165c2:	69bb      	ldr	r3, [r7, #24]
 80165c4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80165c6:	4b10      	ldr	r3, [pc, #64]	@ (8016608 <tcp_input+0x4c0>)
 80165c8:	681a      	ldr	r2, [r3, #0]
 80165ca:	697b      	ldr	r3, [r7, #20]
 80165cc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80165ce:	4a0e      	ldr	r2, [pc, #56]	@ (8016608 <tcp_input+0x4c0>)
 80165d0:	697b      	ldr	r3, [r7, #20]
 80165d2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80165d4:	6978      	ldr	r0, [r7, #20]
 80165d6:	f000 fa03 	bl	80169e0 <tcp_listen_input>
      }
      pbuf_free(p);
 80165da:	6878      	ldr	r0, [r7, #4]
 80165dc:	f7fd ff6e 	bl	80144bc <pbuf_free>
      return;
 80165e0:	e1a8      	b.n	8016934 <tcp_input+0x7ec>
 80165e2:	bf00      	nop
 80165e4:	200277d8 	.word	0x200277d8
 80165e8:	200246b0 	.word	0x200246b0
 80165ec:	08020520 	.word	0x08020520
 80165f0:	0802064c 	.word	0x0802064c
 80165f4:	0802056c 	.word	0x0802056c
 80165f8:	200277bc 	.word	0x200277bc
 80165fc:	08020678 	.word	0x08020678
 8016600:	200277c0 	.word	0x200277c0
 8016604:	080206a4 	.word	0x080206a4
 8016608:	200277b8 	.word	0x200277b8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801660c:	69fb      	ldr	r3, [r7, #28]
 801660e:	2b00      	cmp	r3, #0
 8016610:	f000 8158 	beq.w	80168c4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8016614:	4b95      	ldr	r3, [pc, #596]	@ (801686c <tcp_input+0x724>)
 8016616:	2200      	movs	r2, #0
 8016618:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	891a      	ldrh	r2, [r3, #8]
 801661e:	4b93      	ldr	r3, [pc, #588]	@ (801686c <tcp_input+0x724>)
 8016620:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8016622:	4a92      	ldr	r2, [pc, #584]	@ (801686c <tcp_input+0x724>)
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016628:	4b91      	ldr	r3, [pc, #580]	@ (8016870 <tcp_input+0x728>)
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	4a8f      	ldr	r2, [pc, #572]	@ (801686c <tcp_input+0x724>)
 801662e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8016630:	4b90      	ldr	r3, [pc, #576]	@ (8016874 <tcp_input+0x72c>)
 8016632:	2200      	movs	r2, #0
 8016634:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8016636:	4b90      	ldr	r3, [pc, #576]	@ (8016878 <tcp_input+0x730>)
 8016638:	2200      	movs	r2, #0
 801663a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801663c:	4b8f      	ldr	r3, [pc, #572]	@ (801687c <tcp_input+0x734>)
 801663e:	2200      	movs	r2, #0
 8016640:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8016642:	4b8f      	ldr	r3, [pc, #572]	@ (8016880 <tcp_input+0x738>)
 8016644:	781b      	ldrb	r3, [r3, #0]
 8016646:	f003 0308 	and.w	r3, r3, #8
 801664a:	2b00      	cmp	r3, #0
 801664c:	d006      	beq.n	801665c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	7b5b      	ldrb	r3, [r3, #13]
 8016652:	f043 0301 	orr.w	r3, r3, #1
 8016656:	b2da      	uxtb	r2, r3
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801665c:	69fb      	ldr	r3, [r7, #28]
 801665e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016660:	2b00      	cmp	r3, #0
 8016662:	d017      	beq.n	8016694 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016664:	69f8      	ldr	r0, [r7, #28]
 8016666:	f7ff f929 	bl	80158bc <tcp_process_refused_data>
 801666a:	4603      	mov	r3, r0
 801666c:	f113 0f0d 	cmn.w	r3, #13
 8016670:	d007      	beq.n	8016682 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016672:	69fb      	ldr	r3, [r7, #28]
 8016674:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016676:	2b00      	cmp	r3, #0
 8016678:	d00c      	beq.n	8016694 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801667a:	4b82      	ldr	r3, [pc, #520]	@ (8016884 <tcp_input+0x73c>)
 801667c:	881b      	ldrh	r3, [r3, #0]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d008      	beq.n	8016694 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8016682:	69fb      	ldr	r3, [r7, #28]
 8016684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016686:	2b00      	cmp	r3, #0
 8016688:	f040 80e3 	bne.w	8016852 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801668c:	69f8      	ldr	r0, [r7, #28]
 801668e:	f003 f9a7 	bl	80199e0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8016692:	e0de      	b.n	8016852 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8016694:	4a7c      	ldr	r2, [pc, #496]	@ (8016888 <tcp_input+0x740>)
 8016696:	69fb      	ldr	r3, [r7, #28]
 8016698:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801669a:	69f8      	ldr	r0, [r7, #28]
 801669c:	f000 fb18 	bl	8016cd0 <tcp_process>
 80166a0:	4603      	mov	r3, r0
 80166a2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80166a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80166a8:	f113 0f0d 	cmn.w	r3, #13
 80166ac:	f000 80d3 	beq.w	8016856 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80166b0:	4b71      	ldr	r3, [pc, #452]	@ (8016878 <tcp_input+0x730>)
 80166b2:	781b      	ldrb	r3, [r3, #0]
 80166b4:	f003 0308 	and.w	r3, r3, #8
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d015      	beq.n	80166e8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80166bc:	69fb      	ldr	r3, [r7, #28]
 80166be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d008      	beq.n	80166d8 <tcp_input+0x590>
 80166c6:	69fb      	ldr	r3, [r7, #28]
 80166c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80166cc:	69fa      	ldr	r2, [r7, #28]
 80166ce:	6912      	ldr	r2, [r2, #16]
 80166d0:	f06f 010d 	mvn.w	r1, #13
 80166d4:	4610      	mov	r0, r2
 80166d6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80166d8:	69f9      	ldr	r1, [r7, #28]
 80166da:	486c      	ldr	r0, [pc, #432]	@ (801688c <tcp_input+0x744>)
 80166dc:	f7ff fbbc 	bl	8015e58 <tcp_pcb_remove>
        tcp_free(pcb);
 80166e0:	69f8      	ldr	r0, [r7, #28]
 80166e2:	f7fe f9a7 	bl	8014a34 <tcp_free>
 80166e6:	e0da      	b.n	801689e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80166e8:	2300      	movs	r3, #0
 80166ea:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80166ec:	4b63      	ldr	r3, [pc, #396]	@ (801687c <tcp_input+0x734>)
 80166ee:	881b      	ldrh	r3, [r3, #0]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d01d      	beq.n	8016730 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80166f4:	4b61      	ldr	r3, [pc, #388]	@ (801687c <tcp_input+0x734>)
 80166f6:	881b      	ldrh	r3, [r3, #0]
 80166f8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80166fa:	69fb      	ldr	r3, [r7, #28]
 80166fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016700:	2b00      	cmp	r3, #0
 8016702:	d00a      	beq.n	801671a <tcp_input+0x5d2>
 8016704:	69fb      	ldr	r3, [r7, #28]
 8016706:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801670a:	69fa      	ldr	r2, [r7, #28]
 801670c:	6910      	ldr	r0, [r2, #16]
 801670e:	89fa      	ldrh	r2, [r7, #14]
 8016710:	69f9      	ldr	r1, [r7, #28]
 8016712:	4798      	blx	r3
 8016714:	4603      	mov	r3, r0
 8016716:	74fb      	strb	r3, [r7, #19]
 8016718:	e001      	b.n	801671e <tcp_input+0x5d6>
 801671a:	2300      	movs	r3, #0
 801671c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801671e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016722:	f113 0f0d 	cmn.w	r3, #13
 8016726:	f000 8098 	beq.w	801685a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801672a:	4b54      	ldr	r3, [pc, #336]	@ (801687c <tcp_input+0x734>)
 801672c:	2200      	movs	r2, #0
 801672e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8016730:	69f8      	ldr	r0, [r7, #28]
 8016732:	f000 f915 	bl	8016960 <tcp_input_delayed_close>
 8016736:	4603      	mov	r3, r0
 8016738:	2b00      	cmp	r3, #0
 801673a:	f040 8090 	bne.w	801685e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801673e:	4b4d      	ldr	r3, [pc, #308]	@ (8016874 <tcp_input+0x72c>)
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	2b00      	cmp	r3, #0
 8016744:	d041      	beq.n	80167ca <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016746:	69fb      	ldr	r3, [r7, #28]
 8016748:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801674a:	2b00      	cmp	r3, #0
 801674c:	d006      	beq.n	801675c <tcp_input+0x614>
 801674e:	4b50      	ldr	r3, [pc, #320]	@ (8016890 <tcp_input+0x748>)
 8016750:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8016754:	494f      	ldr	r1, [pc, #316]	@ (8016894 <tcp_input+0x74c>)
 8016756:	4850      	ldr	r0, [pc, #320]	@ (8016898 <tcp_input+0x750>)
 8016758:	f007 fc9a 	bl	801e090 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801675c:	69fb      	ldr	r3, [r7, #28]
 801675e:	8b5b      	ldrh	r3, [r3, #26]
 8016760:	f003 0310 	and.w	r3, r3, #16
 8016764:	2b00      	cmp	r3, #0
 8016766:	d008      	beq.n	801677a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8016768:	4b42      	ldr	r3, [pc, #264]	@ (8016874 <tcp_input+0x72c>)
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	4618      	mov	r0, r3
 801676e:	f7fd fea5 	bl	80144bc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8016772:	69f8      	ldr	r0, [r7, #28]
 8016774:	f7fe fc46 	bl	8015004 <tcp_abort>
            goto aborted;
 8016778:	e091      	b.n	801689e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801677a:	69fb      	ldr	r3, [r7, #28]
 801677c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016780:	2b00      	cmp	r3, #0
 8016782:	d00c      	beq.n	801679e <tcp_input+0x656>
 8016784:	69fb      	ldr	r3, [r7, #28]
 8016786:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801678a:	69fb      	ldr	r3, [r7, #28]
 801678c:	6918      	ldr	r0, [r3, #16]
 801678e:	4b39      	ldr	r3, [pc, #228]	@ (8016874 <tcp_input+0x72c>)
 8016790:	681a      	ldr	r2, [r3, #0]
 8016792:	2300      	movs	r3, #0
 8016794:	69f9      	ldr	r1, [r7, #28]
 8016796:	47a0      	blx	r4
 8016798:	4603      	mov	r3, r0
 801679a:	74fb      	strb	r3, [r7, #19]
 801679c:	e008      	b.n	80167b0 <tcp_input+0x668>
 801679e:	4b35      	ldr	r3, [pc, #212]	@ (8016874 <tcp_input+0x72c>)
 80167a0:	681a      	ldr	r2, [r3, #0]
 80167a2:	2300      	movs	r3, #0
 80167a4:	69f9      	ldr	r1, [r7, #28]
 80167a6:	2000      	movs	r0, #0
 80167a8:	f7ff f95e 	bl	8015a68 <tcp_recv_null>
 80167ac:	4603      	mov	r3, r0
 80167ae:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80167b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80167b4:	f113 0f0d 	cmn.w	r3, #13
 80167b8:	d053      	beq.n	8016862 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80167ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d003      	beq.n	80167ca <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80167c2:	4b2c      	ldr	r3, [pc, #176]	@ (8016874 <tcp_input+0x72c>)
 80167c4:	681a      	ldr	r2, [r3, #0]
 80167c6:	69fb      	ldr	r3, [r7, #28]
 80167c8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80167ca:	4b2b      	ldr	r3, [pc, #172]	@ (8016878 <tcp_input+0x730>)
 80167cc:	781b      	ldrb	r3, [r3, #0]
 80167ce:	f003 0320 	and.w	r3, r3, #32
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d030      	beq.n	8016838 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80167d6:	69fb      	ldr	r3, [r7, #28]
 80167d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d009      	beq.n	80167f2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80167de:	69fb      	ldr	r3, [r7, #28]
 80167e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80167e2:	7b5a      	ldrb	r2, [r3, #13]
 80167e4:	69fb      	ldr	r3, [r7, #28]
 80167e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80167e8:	f042 0220 	orr.w	r2, r2, #32
 80167ec:	b2d2      	uxtb	r2, r2
 80167ee:	735a      	strb	r2, [r3, #13]
 80167f0:	e022      	b.n	8016838 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80167f2:	69fb      	ldr	r3, [r7, #28]
 80167f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80167f6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80167fa:	d005      	beq.n	8016808 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80167fc:	69fb      	ldr	r3, [r7, #28]
 80167fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016800:	3301      	adds	r3, #1
 8016802:	b29a      	uxth	r2, r3
 8016804:	69fb      	ldr	r3, [r7, #28]
 8016806:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016808:	69fb      	ldr	r3, [r7, #28]
 801680a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801680e:	2b00      	cmp	r3, #0
 8016810:	d00b      	beq.n	801682a <tcp_input+0x6e2>
 8016812:	69fb      	ldr	r3, [r7, #28]
 8016814:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016818:	69fb      	ldr	r3, [r7, #28]
 801681a:	6918      	ldr	r0, [r3, #16]
 801681c:	2300      	movs	r3, #0
 801681e:	2200      	movs	r2, #0
 8016820:	69f9      	ldr	r1, [r7, #28]
 8016822:	47a0      	blx	r4
 8016824:	4603      	mov	r3, r0
 8016826:	74fb      	strb	r3, [r7, #19]
 8016828:	e001      	b.n	801682e <tcp_input+0x6e6>
 801682a:	2300      	movs	r3, #0
 801682c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801682e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016832:	f113 0f0d 	cmn.w	r3, #13
 8016836:	d016      	beq.n	8016866 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016838:	4b13      	ldr	r3, [pc, #76]	@ (8016888 <tcp_input+0x740>)
 801683a:	2200      	movs	r2, #0
 801683c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801683e:	69f8      	ldr	r0, [r7, #28]
 8016840:	f000 f88e 	bl	8016960 <tcp_input_delayed_close>
 8016844:	4603      	mov	r3, r0
 8016846:	2b00      	cmp	r3, #0
 8016848:	d128      	bne.n	801689c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801684a:	69f8      	ldr	r0, [r7, #28]
 801684c:	f002 fac2 	bl	8018dd4 <tcp_output>
 8016850:	e025      	b.n	801689e <tcp_input+0x756>
        goto aborted;
 8016852:	bf00      	nop
 8016854:	e023      	b.n	801689e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016856:	bf00      	nop
 8016858:	e021      	b.n	801689e <tcp_input+0x756>
              goto aborted;
 801685a:	bf00      	nop
 801685c:	e01f      	b.n	801689e <tcp_input+0x756>
          goto aborted;
 801685e:	bf00      	nop
 8016860:	e01d      	b.n	801689e <tcp_input+0x756>
            goto aborted;
 8016862:	bf00      	nop
 8016864:	e01b      	b.n	801689e <tcp_input+0x756>
              goto aborted;
 8016866:	bf00      	nop
 8016868:	e019      	b.n	801689e <tcp_input+0x756>
 801686a:	bf00      	nop
 801686c:	200277c8 	.word	0x200277c8
 8016870:	200277d8 	.word	0x200277d8
 8016874:	200277f8 	.word	0x200277f8
 8016878:	200277f5 	.word	0x200277f5
 801687c:	200277f0 	.word	0x200277f0
 8016880:	200277f4 	.word	0x200277f4
 8016884:	200277f2 	.word	0x200277f2
 8016888:	200277fc 	.word	0x200277fc
 801688c:	200277bc 	.word	0x200277bc
 8016890:	08020520 	.word	0x08020520
 8016894:	080206d4 	.word	0x080206d4
 8016898:	0802056c 	.word	0x0802056c
          goto aborted;
 801689c:	bf00      	nop
    tcp_input_pcb = NULL;
 801689e:	4b27      	ldr	r3, [pc, #156]	@ (801693c <tcp_input+0x7f4>)
 80168a0:	2200      	movs	r2, #0
 80168a2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80168a4:	4b26      	ldr	r3, [pc, #152]	@ (8016940 <tcp_input+0x7f8>)
 80168a6:	2200      	movs	r2, #0
 80168a8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80168aa:	4b26      	ldr	r3, [pc, #152]	@ (8016944 <tcp_input+0x7fc>)
 80168ac:	685b      	ldr	r3, [r3, #4]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d03f      	beq.n	8016932 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80168b2:	4b24      	ldr	r3, [pc, #144]	@ (8016944 <tcp_input+0x7fc>)
 80168b4:	685b      	ldr	r3, [r3, #4]
 80168b6:	4618      	mov	r0, r3
 80168b8:	f7fd fe00 	bl	80144bc <pbuf_free>
      inseg.p = NULL;
 80168bc:	4b21      	ldr	r3, [pc, #132]	@ (8016944 <tcp_input+0x7fc>)
 80168be:	2200      	movs	r2, #0
 80168c0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80168c2:	e036      	b.n	8016932 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80168c4:	4b20      	ldr	r3, [pc, #128]	@ (8016948 <tcp_input+0x800>)
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	899b      	ldrh	r3, [r3, #12]
 80168ca:	b29b      	uxth	r3, r3
 80168cc:	4618      	mov	r0, r3
 80168ce:	f7fc fa07 	bl	8012ce0 <lwip_htons>
 80168d2:	4603      	mov	r3, r0
 80168d4:	b2db      	uxtb	r3, r3
 80168d6:	f003 0304 	and.w	r3, r3, #4
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d118      	bne.n	8016910 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80168de:	4b1b      	ldr	r3, [pc, #108]	@ (801694c <tcp_input+0x804>)
 80168e0:	6819      	ldr	r1, [r3, #0]
 80168e2:	4b1b      	ldr	r3, [pc, #108]	@ (8016950 <tcp_input+0x808>)
 80168e4:	881b      	ldrh	r3, [r3, #0]
 80168e6:	461a      	mov	r2, r3
 80168e8:	4b1a      	ldr	r3, [pc, #104]	@ (8016954 <tcp_input+0x80c>)
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80168ee:	4b16      	ldr	r3, [pc, #88]	@ (8016948 <tcp_input+0x800>)
 80168f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80168f2:	885b      	ldrh	r3, [r3, #2]
 80168f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80168f6:	4a14      	ldr	r2, [pc, #80]	@ (8016948 <tcp_input+0x800>)
 80168f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80168fa:	8812      	ldrh	r2, [r2, #0]
 80168fc:	b292      	uxth	r2, r2
 80168fe:	9202      	str	r2, [sp, #8]
 8016900:	9301      	str	r3, [sp, #4]
 8016902:	4b15      	ldr	r3, [pc, #84]	@ (8016958 <tcp_input+0x810>)
 8016904:	9300      	str	r3, [sp, #0]
 8016906:	4b15      	ldr	r3, [pc, #84]	@ (801695c <tcp_input+0x814>)
 8016908:	4602      	mov	r2, r0
 801690a:	2000      	movs	r0, #0
 801690c:	f003 f816 	bl	801993c <tcp_rst>
    pbuf_free(p);
 8016910:	6878      	ldr	r0, [r7, #4]
 8016912:	f7fd fdd3 	bl	80144bc <pbuf_free>
  return;
 8016916:	e00c      	b.n	8016932 <tcp_input+0x7ea>
    goto dropped;
 8016918:	bf00      	nop
 801691a:	e006      	b.n	801692a <tcp_input+0x7e2>
    goto dropped;
 801691c:	bf00      	nop
 801691e:	e004      	b.n	801692a <tcp_input+0x7e2>
    goto dropped;
 8016920:	bf00      	nop
 8016922:	e002      	b.n	801692a <tcp_input+0x7e2>
      goto dropped;
 8016924:	bf00      	nop
 8016926:	e000      	b.n	801692a <tcp_input+0x7e2>
      goto dropped;
 8016928:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801692a:	6878      	ldr	r0, [r7, #4]
 801692c:	f7fd fdc6 	bl	80144bc <pbuf_free>
 8016930:	e000      	b.n	8016934 <tcp_input+0x7ec>
  return;
 8016932:	bf00      	nop
}
 8016934:	3724      	adds	r7, #36	@ 0x24
 8016936:	46bd      	mov	sp, r7
 8016938:	bd90      	pop	{r4, r7, pc}
 801693a:	bf00      	nop
 801693c:	200277fc 	.word	0x200277fc
 8016940:	200277f8 	.word	0x200277f8
 8016944:	200277c8 	.word	0x200277c8
 8016948:	200277d8 	.word	0x200277d8
 801694c:	200277ec 	.word	0x200277ec
 8016950:	200277f2 	.word	0x200277f2
 8016954:	200277e8 	.word	0x200277e8
 8016958:	200246c0 	.word	0x200246c0
 801695c:	200246c4 	.word	0x200246c4

08016960 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8016960:	b580      	push	{r7, lr}
 8016962:	b082      	sub	sp, #8
 8016964:	af00      	add	r7, sp, #0
 8016966:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d106      	bne.n	801697c <tcp_input_delayed_close+0x1c>
 801696e:	4b17      	ldr	r3, [pc, #92]	@ (80169cc <tcp_input_delayed_close+0x6c>)
 8016970:	f240 225a 	movw	r2, #602	@ 0x25a
 8016974:	4916      	ldr	r1, [pc, #88]	@ (80169d0 <tcp_input_delayed_close+0x70>)
 8016976:	4817      	ldr	r0, [pc, #92]	@ (80169d4 <tcp_input_delayed_close+0x74>)
 8016978:	f007 fb8a 	bl	801e090 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801697c:	4b16      	ldr	r3, [pc, #88]	@ (80169d8 <tcp_input_delayed_close+0x78>)
 801697e:	781b      	ldrb	r3, [r3, #0]
 8016980:	f003 0310 	and.w	r3, r3, #16
 8016984:	2b00      	cmp	r3, #0
 8016986:	d01c      	beq.n	80169c2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	8b5b      	ldrh	r3, [r3, #26]
 801698c:	f003 0310 	and.w	r3, r3, #16
 8016990:	2b00      	cmp	r3, #0
 8016992:	d10d      	bne.n	80169b0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801699a:	2b00      	cmp	r3, #0
 801699c:	d008      	beq.n	80169b0 <tcp_input_delayed_close+0x50>
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80169a4:	687a      	ldr	r2, [r7, #4]
 80169a6:	6912      	ldr	r2, [r2, #16]
 80169a8:	f06f 010e 	mvn.w	r1, #14
 80169ac:	4610      	mov	r0, r2
 80169ae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80169b0:	6879      	ldr	r1, [r7, #4]
 80169b2:	480a      	ldr	r0, [pc, #40]	@ (80169dc <tcp_input_delayed_close+0x7c>)
 80169b4:	f7ff fa50 	bl	8015e58 <tcp_pcb_remove>
    tcp_free(pcb);
 80169b8:	6878      	ldr	r0, [r7, #4]
 80169ba:	f7fe f83b 	bl	8014a34 <tcp_free>
    return 1;
 80169be:	2301      	movs	r3, #1
 80169c0:	e000      	b.n	80169c4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80169c2:	2300      	movs	r3, #0
}
 80169c4:	4618      	mov	r0, r3
 80169c6:	3708      	adds	r7, #8
 80169c8:	46bd      	mov	sp, r7
 80169ca:	bd80      	pop	{r7, pc}
 80169cc:	08020520 	.word	0x08020520
 80169d0:	080206f0 	.word	0x080206f0
 80169d4:	0802056c 	.word	0x0802056c
 80169d8:	200277f5 	.word	0x200277f5
 80169dc:	200277bc 	.word	0x200277bc

080169e0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80169e0:	b590      	push	{r4, r7, lr}
 80169e2:	b08b      	sub	sp, #44	@ 0x2c
 80169e4:	af04      	add	r7, sp, #16
 80169e6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80169e8:	4b6f      	ldr	r3, [pc, #444]	@ (8016ba8 <tcp_listen_input+0x1c8>)
 80169ea:	781b      	ldrb	r3, [r3, #0]
 80169ec:	f003 0304 	and.w	r3, r3, #4
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	f040 80d2 	bne.w	8016b9a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d106      	bne.n	8016a0a <tcp_listen_input+0x2a>
 80169fc:	4b6b      	ldr	r3, [pc, #428]	@ (8016bac <tcp_listen_input+0x1cc>)
 80169fe:	f240 2281 	movw	r2, #641	@ 0x281
 8016a02:	496b      	ldr	r1, [pc, #428]	@ (8016bb0 <tcp_listen_input+0x1d0>)
 8016a04:	486b      	ldr	r0, [pc, #428]	@ (8016bb4 <tcp_listen_input+0x1d4>)
 8016a06:	f007 fb43 	bl	801e090 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8016a0a:	4b67      	ldr	r3, [pc, #412]	@ (8016ba8 <tcp_listen_input+0x1c8>)
 8016a0c:	781b      	ldrb	r3, [r3, #0]
 8016a0e:	f003 0310 	and.w	r3, r3, #16
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d019      	beq.n	8016a4a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a16:	4b68      	ldr	r3, [pc, #416]	@ (8016bb8 <tcp_listen_input+0x1d8>)
 8016a18:	6819      	ldr	r1, [r3, #0]
 8016a1a:	4b68      	ldr	r3, [pc, #416]	@ (8016bbc <tcp_listen_input+0x1dc>)
 8016a1c:	881b      	ldrh	r3, [r3, #0]
 8016a1e:	461a      	mov	r2, r3
 8016a20:	4b67      	ldr	r3, [pc, #412]	@ (8016bc0 <tcp_listen_input+0x1e0>)
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016a26:	4b67      	ldr	r3, [pc, #412]	@ (8016bc4 <tcp_listen_input+0x1e4>)
 8016a28:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a2a:	885b      	ldrh	r3, [r3, #2]
 8016a2c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016a2e:	4a65      	ldr	r2, [pc, #404]	@ (8016bc4 <tcp_listen_input+0x1e4>)
 8016a30:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016a32:	8812      	ldrh	r2, [r2, #0]
 8016a34:	b292      	uxth	r2, r2
 8016a36:	9202      	str	r2, [sp, #8]
 8016a38:	9301      	str	r3, [sp, #4]
 8016a3a:	4b63      	ldr	r3, [pc, #396]	@ (8016bc8 <tcp_listen_input+0x1e8>)
 8016a3c:	9300      	str	r3, [sp, #0]
 8016a3e:	4b63      	ldr	r3, [pc, #396]	@ (8016bcc <tcp_listen_input+0x1ec>)
 8016a40:	4602      	mov	r2, r0
 8016a42:	6878      	ldr	r0, [r7, #4]
 8016a44:	f002 ff7a 	bl	801993c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8016a48:	e0a9      	b.n	8016b9e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8016a4a:	4b57      	ldr	r3, [pc, #348]	@ (8016ba8 <tcp_listen_input+0x1c8>)
 8016a4c:	781b      	ldrb	r3, [r3, #0]
 8016a4e:	f003 0302 	and.w	r3, r3, #2
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	f000 80a3 	beq.w	8016b9e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	7d5b      	ldrb	r3, [r3, #21]
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	f7ff f927 	bl	8015cb0 <tcp_alloc>
 8016a62:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8016a64:	697b      	ldr	r3, [r7, #20]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d111      	bne.n	8016a8e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	699b      	ldr	r3, [r3, #24]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d00a      	beq.n	8016a88 <tcp_listen_input+0xa8>
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	699b      	ldr	r3, [r3, #24]
 8016a76:	687a      	ldr	r2, [r7, #4]
 8016a78:	6910      	ldr	r0, [r2, #16]
 8016a7a:	f04f 32ff 	mov.w	r2, #4294967295
 8016a7e:	2100      	movs	r1, #0
 8016a80:	4798      	blx	r3
 8016a82:	4603      	mov	r3, r0
 8016a84:	73bb      	strb	r3, [r7, #14]
      return;
 8016a86:	e08b      	b.n	8016ba0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016a88:	23f0      	movs	r3, #240	@ 0xf0
 8016a8a:	73bb      	strb	r3, [r7, #14]
      return;
 8016a8c:	e088      	b.n	8016ba0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8016a8e:	4b50      	ldr	r3, [pc, #320]	@ (8016bd0 <tcp_listen_input+0x1f0>)
 8016a90:	695a      	ldr	r2, [r3, #20]
 8016a92:	697b      	ldr	r3, [r7, #20]
 8016a94:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8016a96:	4b4e      	ldr	r3, [pc, #312]	@ (8016bd0 <tcp_listen_input+0x1f0>)
 8016a98:	691a      	ldr	r2, [r3, #16]
 8016a9a:	697b      	ldr	r3, [r7, #20]
 8016a9c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	8ada      	ldrh	r2, [r3, #22]
 8016aa2:	697b      	ldr	r3, [r7, #20]
 8016aa4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8016aa6:	4b47      	ldr	r3, [pc, #284]	@ (8016bc4 <tcp_listen_input+0x1e4>)
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	881b      	ldrh	r3, [r3, #0]
 8016aac:	b29a      	uxth	r2, r3
 8016aae:	697b      	ldr	r3, [r7, #20]
 8016ab0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8016ab2:	697b      	ldr	r3, [r7, #20]
 8016ab4:	2203      	movs	r2, #3
 8016ab6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8016ab8:	4b41      	ldr	r3, [pc, #260]	@ (8016bc0 <tcp_listen_input+0x1e0>)
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	1c5a      	adds	r2, r3, #1
 8016abe:	697b      	ldr	r3, [r7, #20]
 8016ac0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8016ac2:	697b      	ldr	r3, [r7, #20]
 8016ac4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016ac6:	697b      	ldr	r3, [r7, #20]
 8016ac8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8016aca:	6978      	ldr	r0, [r7, #20]
 8016acc:	f7ff fa58 	bl	8015f80 <tcp_next_iss>
 8016ad0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8016ad2:	697b      	ldr	r3, [r7, #20]
 8016ad4:	693a      	ldr	r2, [r7, #16]
 8016ad6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8016ad8:	697b      	ldr	r3, [r7, #20]
 8016ada:	693a      	ldr	r2, [r7, #16]
 8016adc:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8016ade:	697b      	ldr	r3, [r7, #20]
 8016ae0:	693a      	ldr	r2, [r7, #16]
 8016ae2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8016ae4:	697b      	ldr	r3, [r7, #20]
 8016ae6:	693a      	ldr	r2, [r7, #16]
 8016ae8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8016aea:	4b35      	ldr	r3, [pc, #212]	@ (8016bc0 <tcp_listen_input+0x1e0>)
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	1e5a      	subs	r2, r3, #1
 8016af0:	697b      	ldr	r3, [r7, #20]
 8016af2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	691a      	ldr	r2, [r3, #16]
 8016af8:	697b      	ldr	r3, [r7, #20]
 8016afa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8016afc:	697b      	ldr	r3, [r7, #20]
 8016afe:	687a      	ldr	r2, [r7, #4]
 8016b00:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	7a5b      	ldrb	r3, [r3, #9]
 8016b06:	f003 030c 	and.w	r3, r3, #12
 8016b0a:	b2da      	uxtb	r2, r3
 8016b0c:	697b      	ldr	r3, [r7, #20]
 8016b0e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	7a1a      	ldrb	r2, [r3, #8]
 8016b14:	697b      	ldr	r3, [r7, #20]
 8016b16:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8016b18:	4b2e      	ldr	r3, [pc, #184]	@ (8016bd4 <tcp_listen_input+0x1f4>)
 8016b1a:	681a      	ldr	r2, [r3, #0]
 8016b1c:	697b      	ldr	r3, [r7, #20]
 8016b1e:	60da      	str	r2, [r3, #12]
 8016b20:	4a2c      	ldr	r2, [pc, #176]	@ (8016bd4 <tcp_listen_input+0x1f4>)
 8016b22:	697b      	ldr	r3, [r7, #20]
 8016b24:	6013      	str	r3, [r2, #0]
 8016b26:	f003 f8cb 	bl	8019cc0 <tcp_timer_needed>
 8016b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8016bd8 <tcp_listen_input+0x1f8>)
 8016b2c:	2201      	movs	r2, #1
 8016b2e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8016b30:	6978      	ldr	r0, [r7, #20]
 8016b32:	f001 fd8b 	bl	801864c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8016b36:	4b23      	ldr	r3, [pc, #140]	@ (8016bc4 <tcp_listen_input+0x1e4>)
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	89db      	ldrh	r3, [r3, #14]
 8016b3c:	b29a      	uxth	r2, r3
 8016b3e:	697b      	ldr	r3, [r7, #20]
 8016b40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8016b44:	697b      	ldr	r3, [r7, #20]
 8016b46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016b4a:	697b      	ldr	r3, [r7, #20]
 8016b4c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8016b50:	697b      	ldr	r3, [r7, #20]
 8016b52:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8016b54:	697b      	ldr	r3, [r7, #20]
 8016b56:	3304      	adds	r3, #4
 8016b58:	4618      	mov	r0, r3
 8016b5a:	f004 ff6d 	bl	801ba38 <ip4_route>
 8016b5e:	4601      	mov	r1, r0
 8016b60:	697b      	ldr	r3, [r7, #20]
 8016b62:	3304      	adds	r3, #4
 8016b64:	461a      	mov	r2, r3
 8016b66:	4620      	mov	r0, r4
 8016b68:	f7ff fa30 	bl	8015fcc <tcp_eff_send_mss_netif>
 8016b6c:	4603      	mov	r3, r0
 8016b6e:	461a      	mov	r2, r3
 8016b70:	697b      	ldr	r3, [r7, #20]
 8016b72:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8016b74:	2112      	movs	r1, #18
 8016b76:	6978      	ldr	r0, [r7, #20]
 8016b78:	f002 f83e 	bl	8018bf8 <tcp_enqueue_flags>
 8016b7c:	4603      	mov	r3, r0
 8016b7e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8016b80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d004      	beq.n	8016b92 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8016b88:	2100      	movs	r1, #0
 8016b8a:	6978      	ldr	r0, [r7, #20]
 8016b8c:	f7fe f97c 	bl	8014e88 <tcp_abandon>
      return;
 8016b90:	e006      	b.n	8016ba0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8016b92:	6978      	ldr	r0, [r7, #20]
 8016b94:	f002 f91e 	bl	8018dd4 <tcp_output>
  return;
 8016b98:	e001      	b.n	8016b9e <tcp_listen_input+0x1be>
    return;
 8016b9a:	bf00      	nop
 8016b9c:	e000      	b.n	8016ba0 <tcp_listen_input+0x1c0>
  return;
 8016b9e:	bf00      	nop
}
 8016ba0:	371c      	adds	r7, #28
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	bd90      	pop	{r4, r7, pc}
 8016ba6:	bf00      	nop
 8016ba8:	200277f4 	.word	0x200277f4
 8016bac:	08020520 	.word	0x08020520
 8016bb0:	08020718 	.word	0x08020718
 8016bb4:	0802056c 	.word	0x0802056c
 8016bb8:	200277ec 	.word	0x200277ec
 8016bbc:	200277f2 	.word	0x200277f2
 8016bc0:	200277e8 	.word	0x200277e8
 8016bc4:	200277d8 	.word	0x200277d8
 8016bc8:	200246c0 	.word	0x200246c0
 8016bcc:	200246c4 	.word	0x200246c4
 8016bd0:	200246b0 	.word	0x200246b0
 8016bd4:	200277bc 	.word	0x200277bc
 8016bd8:	200277c4 	.word	0x200277c4

08016bdc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8016bdc:	b580      	push	{r7, lr}
 8016bde:	b086      	sub	sp, #24
 8016be0:	af04      	add	r7, sp, #16
 8016be2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8016be4:	4b2f      	ldr	r3, [pc, #188]	@ (8016ca4 <tcp_timewait_input+0xc8>)
 8016be6:	781b      	ldrb	r3, [r3, #0]
 8016be8:	f003 0304 	and.w	r3, r3, #4
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d153      	bne.n	8016c98 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d106      	bne.n	8016c04 <tcp_timewait_input+0x28>
 8016bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8016ca8 <tcp_timewait_input+0xcc>)
 8016bf8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8016bfc:	492b      	ldr	r1, [pc, #172]	@ (8016cac <tcp_timewait_input+0xd0>)
 8016bfe:	482c      	ldr	r0, [pc, #176]	@ (8016cb0 <tcp_timewait_input+0xd4>)
 8016c00:	f007 fa46 	bl	801e090 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8016c04:	4b27      	ldr	r3, [pc, #156]	@ (8016ca4 <tcp_timewait_input+0xc8>)
 8016c06:	781b      	ldrb	r3, [r3, #0]
 8016c08:	f003 0302 	and.w	r3, r3, #2
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d02a      	beq.n	8016c66 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8016c10:	4b28      	ldr	r3, [pc, #160]	@ (8016cb4 <tcp_timewait_input+0xd8>)
 8016c12:	681a      	ldr	r2, [r3, #0]
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c18:	1ad3      	subs	r3, r2, r3
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	db2d      	blt.n	8016c7a <tcp_timewait_input+0x9e>
 8016c1e:	4b25      	ldr	r3, [pc, #148]	@ (8016cb4 <tcp_timewait_input+0xd8>)
 8016c20:	681a      	ldr	r2, [r3, #0]
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c26:	6879      	ldr	r1, [r7, #4]
 8016c28:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016c2a:	440b      	add	r3, r1
 8016c2c:	1ad3      	subs	r3, r2, r3
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	dc23      	bgt.n	8016c7a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016c32:	4b21      	ldr	r3, [pc, #132]	@ (8016cb8 <tcp_timewait_input+0xdc>)
 8016c34:	6819      	ldr	r1, [r3, #0]
 8016c36:	4b21      	ldr	r3, [pc, #132]	@ (8016cbc <tcp_timewait_input+0xe0>)
 8016c38:	881b      	ldrh	r3, [r3, #0]
 8016c3a:	461a      	mov	r2, r3
 8016c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8016cb4 <tcp_timewait_input+0xd8>)
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016c42:	4b1f      	ldr	r3, [pc, #124]	@ (8016cc0 <tcp_timewait_input+0xe4>)
 8016c44:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016c46:	885b      	ldrh	r3, [r3, #2]
 8016c48:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016c4a:	4a1d      	ldr	r2, [pc, #116]	@ (8016cc0 <tcp_timewait_input+0xe4>)
 8016c4c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016c4e:	8812      	ldrh	r2, [r2, #0]
 8016c50:	b292      	uxth	r2, r2
 8016c52:	9202      	str	r2, [sp, #8]
 8016c54:	9301      	str	r3, [sp, #4]
 8016c56:	4b1b      	ldr	r3, [pc, #108]	@ (8016cc4 <tcp_timewait_input+0xe8>)
 8016c58:	9300      	str	r3, [sp, #0]
 8016c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8016cc8 <tcp_timewait_input+0xec>)
 8016c5c:	4602      	mov	r2, r0
 8016c5e:	6878      	ldr	r0, [r7, #4]
 8016c60:	f002 fe6c 	bl	801993c <tcp_rst>
      return;
 8016c64:	e01b      	b.n	8016c9e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8016c66:	4b0f      	ldr	r3, [pc, #60]	@ (8016ca4 <tcp_timewait_input+0xc8>)
 8016c68:	781b      	ldrb	r3, [r3, #0]
 8016c6a:	f003 0301 	and.w	r3, r3, #1
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d003      	beq.n	8016c7a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8016c72:	4b16      	ldr	r3, [pc, #88]	@ (8016ccc <tcp_timewait_input+0xf0>)
 8016c74:	681a      	ldr	r2, [r3, #0]
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8016c7a:	4b10      	ldr	r3, [pc, #64]	@ (8016cbc <tcp_timewait_input+0xe0>)
 8016c7c:	881b      	ldrh	r3, [r3, #0]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d00c      	beq.n	8016c9c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	8b5b      	ldrh	r3, [r3, #26]
 8016c86:	f043 0302 	orr.w	r3, r3, #2
 8016c8a:	b29a      	uxth	r2, r3
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016c90:	6878      	ldr	r0, [r7, #4]
 8016c92:	f002 f89f 	bl	8018dd4 <tcp_output>
  }
  return;
 8016c96:	e001      	b.n	8016c9c <tcp_timewait_input+0xc0>
    return;
 8016c98:	bf00      	nop
 8016c9a:	e000      	b.n	8016c9e <tcp_timewait_input+0xc2>
  return;
 8016c9c:	bf00      	nop
}
 8016c9e:	3708      	adds	r7, #8
 8016ca0:	46bd      	mov	sp, r7
 8016ca2:	bd80      	pop	{r7, pc}
 8016ca4:	200277f4 	.word	0x200277f4
 8016ca8:	08020520 	.word	0x08020520
 8016cac:	08020738 	.word	0x08020738
 8016cb0:	0802056c 	.word	0x0802056c
 8016cb4:	200277e8 	.word	0x200277e8
 8016cb8:	200277ec 	.word	0x200277ec
 8016cbc:	200277f2 	.word	0x200277f2
 8016cc0:	200277d8 	.word	0x200277d8
 8016cc4:	200246c0 	.word	0x200246c0
 8016cc8:	200246c4 	.word	0x200246c4
 8016ccc:	200277b0 	.word	0x200277b0

08016cd0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8016cd0:	b590      	push	{r4, r7, lr}
 8016cd2:	b08d      	sub	sp, #52	@ 0x34
 8016cd4:	af04      	add	r7, sp, #16
 8016cd6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8016cd8:	2300      	movs	r3, #0
 8016cda:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8016cdc:	2300      	movs	r3, #0
 8016cde:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d106      	bne.n	8016cf4 <tcp_process+0x24>
 8016ce6:	4b9d      	ldr	r3, [pc, #628]	@ (8016f5c <tcp_process+0x28c>)
 8016ce8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8016cec:	499c      	ldr	r1, [pc, #624]	@ (8016f60 <tcp_process+0x290>)
 8016cee:	489d      	ldr	r0, [pc, #628]	@ (8016f64 <tcp_process+0x294>)
 8016cf0:	f007 f9ce 	bl	801e090 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8016cf4:	4b9c      	ldr	r3, [pc, #624]	@ (8016f68 <tcp_process+0x298>)
 8016cf6:	781b      	ldrb	r3, [r3, #0]
 8016cf8:	f003 0304 	and.w	r3, r3, #4
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d04e      	beq.n	8016d9e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	7d1b      	ldrb	r3, [r3, #20]
 8016d04:	2b02      	cmp	r3, #2
 8016d06:	d108      	bne.n	8016d1a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016d0c:	4b97      	ldr	r3, [pc, #604]	@ (8016f6c <tcp_process+0x29c>)
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	429a      	cmp	r2, r3
 8016d12:	d123      	bne.n	8016d5c <tcp_process+0x8c>
        acceptable = 1;
 8016d14:	2301      	movs	r3, #1
 8016d16:	76fb      	strb	r3, [r7, #27]
 8016d18:	e020      	b.n	8016d5c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016d1e:	4b94      	ldr	r3, [pc, #592]	@ (8016f70 <tcp_process+0x2a0>)
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	429a      	cmp	r2, r3
 8016d24:	d102      	bne.n	8016d2c <tcp_process+0x5c>
        acceptable = 1;
 8016d26:	2301      	movs	r3, #1
 8016d28:	76fb      	strb	r3, [r7, #27]
 8016d2a:	e017      	b.n	8016d5c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016d2c:	4b90      	ldr	r3, [pc, #576]	@ (8016f70 <tcp_process+0x2a0>)
 8016d2e:	681a      	ldr	r2, [r3, #0]
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d34:	1ad3      	subs	r3, r2, r3
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	db10      	blt.n	8016d5c <tcp_process+0x8c>
 8016d3a:	4b8d      	ldr	r3, [pc, #564]	@ (8016f70 <tcp_process+0x2a0>)
 8016d3c:	681a      	ldr	r2, [r3, #0]
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d42:	6879      	ldr	r1, [r7, #4]
 8016d44:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016d46:	440b      	add	r3, r1
 8016d48:	1ad3      	subs	r3, r2, r3
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	dc06      	bgt.n	8016d5c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	8b5b      	ldrh	r3, [r3, #26]
 8016d52:	f043 0302 	orr.w	r3, r3, #2
 8016d56:	b29a      	uxth	r2, r3
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8016d5c:	7efb      	ldrb	r3, [r7, #27]
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d01b      	beq.n	8016d9a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	7d1b      	ldrb	r3, [r3, #20]
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d106      	bne.n	8016d78 <tcp_process+0xa8>
 8016d6a:	4b7c      	ldr	r3, [pc, #496]	@ (8016f5c <tcp_process+0x28c>)
 8016d6c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8016d70:	4980      	ldr	r1, [pc, #512]	@ (8016f74 <tcp_process+0x2a4>)
 8016d72:	487c      	ldr	r0, [pc, #496]	@ (8016f64 <tcp_process+0x294>)
 8016d74:	f007 f98c 	bl	801e090 <iprintf>
      recv_flags |= TF_RESET;
 8016d78:	4b7f      	ldr	r3, [pc, #508]	@ (8016f78 <tcp_process+0x2a8>)
 8016d7a:	781b      	ldrb	r3, [r3, #0]
 8016d7c:	f043 0308 	orr.w	r3, r3, #8
 8016d80:	b2da      	uxtb	r2, r3
 8016d82:	4b7d      	ldr	r3, [pc, #500]	@ (8016f78 <tcp_process+0x2a8>)
 8016d84:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	8b5b      	ldrh	r3, [r3, #26]
 8016d8a:	f023 0301 	bic.w	r3, r3, #1
 8016d8e:	b29a      	uxth	r2, r3
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8016d94:	f06f 030d 	mvn.w	r3, #13
 8016d98:	e37a      	b.n	8017490 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	e378      	b.n	8017490 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8016d9e:	4b72      	ldr	r3, [pc, #456]	@ (8016f68 <tcp_process+0x298>)
 8016da0:	781b      	ldrb	r3, [r3, #0]
 8016da2:	f003 0302 	and.w	r3, r3, #2
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d010      	beq.n	8016dcc <tcp_process+0xfc>
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	7d1b      	ldrb	r3, [r3, #20]
 8016dae:	2b02      	cmp	r3, #2
 8016db0:	d00c      	beq.n	8016dcc <tcp_process+0xfc>
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	7d1b      	ldrb	r3, [r3, #20]
 8016db6:	2b03      	cmp	r3, #3
 8016db8:	d008      	beq.n	8016dcc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	8b5b      	ldrh	r3, [r3, #26]
 8016dbe:	f043 0302 	orr.w	r3, r3, #2
 8016dc2:	b29a      	uxth	r2, r3
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8016dc8:	2300      	movs	r3, #0
 8016dca:	e361      	b.n	8017490 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	8b5b      	ldrh	r3, [r3, #26]
 8016dd0:	f003 0310 	and.w	r3, r3, #16
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d103      	bne.n	8016de0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8016dd8:	4b68      	ldr	r3, [pc, #416]	@ (8016f7c <tcp_process+0x2ac>)
 8016dda:	681a      	ldr	r2, [r3, #0]
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	2200      	movs	r2, #0
 8016de4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	2200      	movs	r2, #0
 8016dec:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8016df0:	6878      	ldr	r0, [r7, #4]
 8016df2:	f001 fc2b 	bl	801864c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	7d1b      	ldrb	r3, [r3, #20]
 8016dfa:	3b02      	subs	r3, #2
 8016dfc:	2b07      	cmp	r3, #7
 8016dfe:	f200 8337 	bhi.w	8017470 <tcp_process+0x7a0>
 8016e02:	a201      	add	r2, pc, #4	@ (adr r2, 8016e08 <tcp_process+0x138>)
 8016e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e08:	08016e29 	.word	0x08016e29
 8016e0c:	08017059 	.word	0x08017059
 8016e10:	080171d1 	.word	0x080171d1
 8016e14:	080171fb 	.word	0x080171fb
 8016e18:	0801731f 	.word	0x0801731f
 8016e1c:	080171d1 	.word	0x080171d1
 8016e20:	080173ab 	.word	0x080173ab
 8016e24:	0801743b 	.word	0x0801743b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8016e28:	4b4f      	ldr	r3, [pc, #316]	@ (8016f68 <tcp_process+0x298>)
 8016e2a:	781b      	ldrb	r3, [r3, #0]
 8016e2c:	f003 0310 	and.w	r3, r3, #16
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	f000 80e4 	beq.w	8016ffe <tcp_process+0x32e>
 8016e36:	4b4c      	ldr	r3, [pc, #304]	@ (8016f68 <tcp_process+0x298>)
 8016e38:	781b      	ldrb	r3, [r3, #0]
 8016e3a:	f003 0302 	and.w	r3, r3, #2
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	f000 80dd 	beq.w	8016ffe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8016e44:	687b      	ldr	r3, [r7, #4]
 8016e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016e48:	1c5a      	adds	r2, r3, #1
 8016e4a:	4b48      	ldr	r3, [pc, #288]	@ (8016f6c <tcp_process+0x29c>)
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	429a      	cmp	r2, r3
 8016e50:	f040 80d5 	bne.w	8016ffe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8016e54:	4b46      	ldr	r3, [pc, #280]	@ (8016f70 <tcp_process+0x2a0>)
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	1c5a      	adds	r2, r3, #1
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8016e66:	4b41      	ldr	r3, [pc, #260]	@ (8016f6c <tcp_process+0x29c>)
 8016e68:	681a      	ldr	r2, [r3, #0]
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8016e6e:	4b44      	ldr	r3, [pc, #272]	@ (8016f80 <tcp_process+0x2b0>)
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	89db      	ldrh	r3, [r3, #14]
 8016e74:	b29a      	uxth	r2, r3
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8016e88:	4b39      	ldr	r3, [pc, #228]	@ (8016f70 <tcp_process+0x2a0>)
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	1e5a      	subs	r2, r3, #1
 8016e8e:	687b      	ldr	r3, [r7, #4]
 8016e90:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	2204      	movs	r2, #4
 8016e96:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	3304      	adds	r3, #4
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	f004 fdc9 	bl	801ba38 <ip4_route>
 8016ea6:	4601      	mov	r1, r0
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	3304      	adds	r3, #4
 8016eac:	461a      	mov	r2, r3
 8016eae:	4620      	mov	r0, r4
 8016eb0:	f7ff f88c 	bl	8015fcc <tcp_eff_send_mss_netif>
 8016eb4:	4603      	mov	r3, r0
 8016eb6:	461a      	mov	r2, r3
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016ec0:	009a      	lsls	r2, r3, #2
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016ec6:	005b      	lsls	r3, r3, #1
 8016ec8:	f241 111c 	movw	r1, #4380	@ 0x111c
 8016ecc:	428b      	cmp	r3, r1
 8016ece:	bf38      	it	cc
 8016ed0:	460b      	movcc	r3, r1
 8016ed2:	429a      	cmp	r2, r3
 8016ed4:	d204      	bcs.n	8016ee0 <tcp_process+0x210>
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016eda:	009b      	lsls	r3, r3, #2
 8016edc:	b29b      	uxth	r3, r3
 8016ede:	e00d      	b.n	8016efc <tcp_process+0x22c>
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016ee4:	005b      	lsls	r3, r3, #1
 8016ee6:	f241 121c 	movw	r2, #4380	@ 0x111c
 8016eea:	4293      	cmp	r3, r2
 8016eec:	d904      	bls.n	8016ef8 <tcp_process+0x228>
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016ef2:	005b      	lsls	r3, r3, #1
 8016ef4:	b29b      	uxth	r3, r3
 8016ef6:	e001      	b.n	8016efc <tcp_process+0x22c>
 8016ef8:	f241 131c 	movw	r3, #4380	@ 0x111c
 8016efc:	687a      	ldr	r2, [r7, #4]
 8016efe:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d106      	bne.n	8016f1a <tcp_process+0x24a>
 8016f0c:	4b13      	ldr	r3, [pc, #76]	@ (8016f5c <tcp_process+0x28c>)
 8016f0e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8016f12:	491c      	ldr	r1, [pc, #112]	@ (8016f84 <tcp_process+0x2b4>)
 8016f14:	4813      	ldr	r0, [pc, #76]	@ (8016f64 <tcp_process+0x294>)
 8016f16:	f007 f8bb 	bl	801e090 <iprintf>
        --pcb->snd_queuelen;
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016f20:	3b01      	subs	r3, #1
 8016f22:	b29a      	uxth	r2, r3
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016f2e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8016f30:	69fb      	ldr	r3, [r7, #28]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d12a      	bne.n	8016f8c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016f3a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8016f3c:	69fb      	ldr	r3, [r7, #28]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d106      	bne.n	8016f50 <tcp_process+0x280>
 8016f42:	4b06      	ldr	r3, [pc, #24]	@ (8016f5c <tcp_process+0x28c>)
 8016f44:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8016f48:	490f      	ldr	r1, [pc, #60]	@ (8016f88 <tcp_process+0x2b8>)
 8016f4a:	4806      	ldr	r0, [pc, #24]	@ (8016f64 <tcp_process+0x294>)
 8016f4c:	f007 f8a0 	bl	801e090 <iprintf>
          pcb->unsent = rseg->next;
 8016f50:	69fb      	ldr	r3, [r7, #28]
 8016f52:	681a      	ldr	r2, [r3, #0]
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016f58:	e01c      	b.n	8016f94 <tcp_process+0x2c4>
 8016f5a:	bf00      	nop
 8016f5c:	08020520 	.word	0x08020520
 8016f60:	08020758 	.word	0x08020758
 8016f64:	0802056c 	.word	0x0802056c
 8016f68:	200277f4 	.word	0x200277f4
 8016f6c:	200277ec 	.word	0x200277ec
 8016f70:	200277e8 	.word	0x200277e8
 8016f74:	08020774 	.word	0x08020774
 8016f78:	200277f5 	.word	0x200277f5
 8016f7c:	200277b0 	.word	0x200277b0
 8016f80:	200277d8 	.word	0x200277d8
 8016f84:	08020794 	.word	0x08020794
 8016f88:	080207ac 	.word	0x080207ac
        } else {
          pcb->unacked = rseg->next;
 8016f8c:	69fb      	ldr	r3, [r7, #28]
 8016f8e:	681a      	ldr	r2, [r3, #0]
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8016f94:	69f8      	ldr	r0, [r7, #28]
 8016f96:	f7fe fd22 	bl	80159de <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d104      	bne.n	8016fac <tcp_process+0x2dc>
          pcb->rtime = -1;
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016fa8:	861a      	strh	r2, [r3, #48]	@ 0x30
 8016faa:	e006      	b.n	8016fba <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	2200      	movs	r2, #0
 8016fb0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	2200      	movs	r2, #0
 8016fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d00a      	beq.n	8016fda <tcp_process+0x30a>
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016fca:	687a      	ldr	r2, [r7, #4]
 8016fcc:	6910      	ldr	r0, [r2, #16]
 8016fce:	2200      	movs	r2, #0
 8016fd0:	6879      	ldr	r1, [r7, #4]
 8016fd2:	4798      	blx	r3
 8016fd4:	4603      	mov	r3, r0
 8016fd6:	76bb      	strb	r3, [r7, #26]
 8016fd8:	e001      	b.n	8016fde <tcp_process+0x30e>
 8016fda:	2300      	movs	r3, #0
 8016fdc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8016fde:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016fe2:	f113 0f0d 	cmn.w	r3, #13
 8016fe6:	d102      	bne.n	8016fee <tcp_process+0x31e>
          return ERR_ABRT;
 8016fe8:	f06f 030c 	mvn.w	r3, #12
 8016fec:	e250      	b.n	8017490 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	8b5b      	ldrh	r3, [r3, #26]
 8016ff2:	f043 0302 	orr.w	r3, r3, #2
 8016ff6:	b29a      	uxth	r2, r3
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8016ffc:	e23a      	b.n	8017474 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8016ffe:	4b98      	ldr	r3, [pc, #608]	@ (8017260 <tcp_process+0x590>)
 8017000:	781b      	ldrb	r3, [r3, #0]
 8017002:	f003 0310 	and.w	r3, r3, #16
 8017006:	2b00      	cmp	r3, #0
 8017008:	f000 8234 	beq.w	8017474 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801700c:	4b95      	ldr	r3, [pc, #596]	@ (8017264 <tcp_process+0x594>)
 801700e:	6819      	ldr	r1, [r3, #0]
 8017010:	4b95      	ldr	r3, [pc, #596]	@ (8017268 <tcp_process+0x598>)
 8017012:	881b      	ldrh	r3, [r3, #0]
 8017014:	461a      	mov	r2, r3
 8017016:	4b95      	ldr	r3, [pc, #596]	@ (801726c <tcp_process+0x59c>)
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801701c:	4b94      	ldr	r3, [pc, #592]	@ (8017270 <tcp_process+0x5a0>)
 801701e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017020:	885b      	ldrh	r3, [r3, #2]
 8017022:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017024:	4a92      	ldr	r2, [pc, #584]	@ (8017270 <tcp_process+0x5a0>)
 8017026:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017028:	8812      	ldrh	r2, [r2, #0]
 801702a:	b292      	uxth	r2, r2
 801702c:	9202      	str	r2, [sp, #8]
 801702e:	9301      	str	r3, [sp, #4]
 8017030:	4b90      	ldr	r3, [pc, #576]	@ (8017274 <tcp_process+0x5a4>)
 8017032:	9300      	str	r3, [sp, #0]
 8017034:	4b90      	ldr	r3, [pc, #576]	@ (8017278 <tcp_process+0x5a8>)
 8017036:	4602      	mov	r2, r0
 8017038:	6878      	ldr	r0, [r7, #4]
 801703a:	f002 fc7f 	bl	801993c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017044:	2b05      	cmp	r3, #5
 8017046:	f200 8215 	bhi.w	8017474 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	2200      	movs	r2, #0
 801704e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8017050:	6878      	ldr	r0, [r7, #4]
 8017052:	f002 fa4b 	bl	80194ec <tcp_rexmit_rto>
      break;
 8017056:	e20d      	b.n	8017474 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017058:	4b81      	ldr	r3, [pc, #516]	@ (8017260 <tcp_process+0x590>)
 801705a:	781b      	ldrb	r3, [r3, #0]
 801705c:	f003 0310 	and.w	r3, r3, #16
 8017060:	2b00      	cmp	r3, #0
 8017062:	f000 80a1 	beq.w	80171a8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017066:	4b7f      	ldr	r3, [pc, #508]	@ (8017264 <tcp_process+0x594>)
 8017068:	681a      	ldr	r2, [r3, #0]
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801706e:	1ad3      	subs	r3, r2, r3
 8017070:	3b01      	subs	r3, #1
 8017072:	2b00      	cmp	r3, #0
 8017074:	db7e      	blt.n	8017174 <tcp_process+0x4a4>
 8017076:	4b7b      	ldr	r3, [pc, #492]	@ (8017264 <tcp_process+0x594>)
 8017078:	681a      	ldr	r2, [r3, #0]
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801707e:	1ad3      	subs	r3, r2, r3
 8017080:	2b00      	cmp	r3, #0
 8017082:	dc77      	bgt.n	8017174 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	2204      	movs	r2, #4
 8017088:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801708e:	2b00      	cmp	r3, #0
 8017090:	d102      	bne.n	8017098 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8017092:	23fa      	movs	r3, #250	@ 0xfa
 8017094:	76bb      	strb	r3, [r7, #26]
 8017096:	e01d      	b.n	80170d4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801709c:	699b      	ldr	r3, [r3, #24]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d106      	bne.n	80170b0 <tcp_process+0x3e0>
 80170a2:	4b76      	ldr	r3, [pc, #472]	@ (801727c <tcp_process+0x5ac>)
 80170a4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80170a8:	4975      	ldr	r1, [pc, #468]	@ (8017280 <tcp_process+0x5b0>)
 80170aa:	4876      	ldr	r0, [pc, #472]	@ (8017284 <tcp_process+0x5b4>)
 80170ac:	f006 fff0 	bl	801e090 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80170b4:	699b      	ldr	r3, [r3, #24]
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d00a      	beq.n	80170d0 <tcp_process+0x400>
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80170be:	699b      	ldr	r3, [r3, #24]
 80170c0:	687a      	ldr	r2, [r7, #4]
 80170c2:	6910      	ldr	r0, [r2, #16]
 80170c4:	2200      	movs	r2, #0
 80170c6:	6879      	ldr	r1, [r7, #4]
 80170c8:	4798      	blx	r3
 80170ca:	4603      	mov	r3, r0
 80170cc:	76bb      	strb	r3, [r7, #26]
 80170ce:	e001      	b.n	80170d4 <tcp_process+0x404>
 80170d0:	23f0      	movs	r3, #240	@ 0xf0
 80170d2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80170d4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d00a      	beq.n	80170f2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80170dc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80170e0:	f113 0f0d 	cmn.w	r3, #13
 80170e4:	d002      	beq.n	80170ec <tcp_process+0x41c>
              tcp_abort(pcb);
 80170e6:	6878      	ldr	r0, [r7, #4]
 80170e8:	f7fd ff8c 	bl	8015004 <tcp_abort>
            }
            return ERR_ABRT;
 80170ec:	f06f 030c 	mvn.w	r3, #12
 80170f0:	e1ce      	b.n	8017490 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80170f2:	6878      	ldr	r0, [r7, #4]
 80170f4:	f000 fae0 	bl	80176b8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80170f8:	4b63      	ldr	r3, [pc, #396]	@ (8017288 <tcp_process+0x5b8>)
 80170fa:	881b      	ldrh	r3, [r3, #0]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d005      	beq.n	801710c <tcp_process+0x43c>
            recv_acked--;
 8017100:	4b61      	ldr	r3, [pc, #388]	@ (8017288 <tcp_process+0x5b8>)
 8017102:	881b      	ldrh	r3, [r3, #0]
 8017104:	3b01      	subs	r3, #1
 8017106:	b29a      	uxth	r2, r3
 8017108:	4b5f      	ldr	r3, [pc, #380]	@ (8017288 <tcp_process+0x5b8>)
 801710a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017110:	009a      	lsls	r2, r3, #2
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017116:	005b      	lsls	r3, r3, #1
 8017118:	f241 111c 	movw	r1, #4380	@ 0x111c
 801711c:	428b      	cmp	r3, r1
 801711e:	bf38      	it	cc
 8017120:	460b      	movcc	r3, r1
 8017122:	429a      	cmp	r2, r3
 8017124:	d204      	bcs.n	8017130 <tcp_process+0x460>
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801712a:	009b      	lsls	r3, r3, #2
 801712c:	b29b      	uxth	r3, r3
 801712e:	e00d      	b.n	801714c <tcp_process+0x47c>
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017134:	005b      	lsls	r3, r3, #1
 8017136:	f241 121c 	movw	r2, #4380	@ 0x111c
 801713a:	4293      	cmp	r3, r2
 801713c:	d904      	bls.n	8017148 <tcp_process+0x478>
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017142:	005b      	lsls	r3, r3, #1
 8017144:	b29b      	uxth	r3, r3
 8017146:	e001      	b.n	801714c <tcp_process+0x47c>
 8017148:	f241 131c 	movw	r3, #4380	@ 0x111c
 801714c:	687a      	ldr	r2, [r7, #4]
 801714e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8017152:	4b4e      	ldr	r3, [pc, #312]	@ (801728c <tcp_process+0x5bc>)
 8017154:	781b      	ldrb	r3, [r3, #0]
 8017156:	f003 0320 	and.w	r3, r3, #32
 801715a:	2b00      	cmp	r3, #0
 801715c:	d037      	beq.n	80171ce <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	8b5b      	ldrh	r3, [r3, #26]
 8017162:	f043 0302 	orr.w	r3, r3, #2
 8017166:	b29a      	uxth	r2, r3
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	2207      	movs	r2, #7
 8017170:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8017172:	e02c      	b.n	80171ce <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017174:	4b3b      	ldr	r3, [pc, #236]	@ (8017264 <tcp_process+0x594>)
 8017176:	6819      	ldr	r1, [r3, #0]
 8017178:	4b3b      	ldr	r3, [pc, #236]	@ (8017268 <tcp_process+0x598>)
 801717a:	881b      	ldrh	r3, [r3, #0]
 801717c:	461a      	mov	r2, r3
 801717e:	4b3b      	ldr	r3, [pc, #236]	@ (801726c <tcp_process+0x59c>)
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017184:	4b3a      	ldr	r3, [pc, #232]	@ (8017270 <tcp_process+0x5a0>)
 8017186:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017188:	885b      	ldrh	r3, [r3, #2]
 801718a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801718c:	4a38      	ldr	r2, [pc, #224]	@ (8017270 <tcp_process+0x5a0>)
 801718e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017190:	8812      	ldrh	r2, [r2, #0]
 8017192:	b292      	uxth	r2, r2
 8017194:	9202      	str	r2, [sp, #8]
 8017196:	9301      	str	r3, [sp, #4]
 8017198:	4b36      	ldr	r3, [pc, #216]	@ (8017274 <tcp_process+0x5a4>)
 801719a:	9300      	str	r3, [sp, #0]
 801719c:	4b36      	ldr	r3, [pc, #216]	@ (8017278 <tcp_process+0x5a8>)
 801719e:	4602      	mov	r2, r0
 80171a0:	6878      	ldr	r0, [r7, #4]
 80171a2:	f002 fbcb 	bl	801993c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80171a6:	e167      	b.n	8017478 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80171a8:	4b2d      	ldr	r3, [pc, #180]	@ (8017260 <tcp_process+0x590>)
 80171aa:	781b      	ldrb	r3, [r3, #0]
 80171ac:	f003 0302 	and.w	r3, r3, #2
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	f000 8161 	beq.w	8017478 <tcp_process+0x7a8>
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171ba:	1e5a      	subs	r2, r3, #1
 80171bc:	4b2b      	ldr	r3, [pc, #172]	@ (801726c <tcp_process+0x59c>)
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	429a      	cmp	r2, r3
 80171c2:	f040 8159 	bne.w	8017478 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80171c6:	6878      	ldr	r0, [r7, #4]
 80171c8:	f002 f9b2 	bl	8019530 <tcp_rexmit>
      break;
 80171cc:	e154      	b.n	8017478 <tcp_process+0x7a8>
 80171ce:	e153      	b.n	8017478 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80171d0:	6878      	ldr	r0, [r7, #4]
 80171d2:	f000 fa71 	bl	80176b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80171d6:	4b2d      	ldr	r3, [pc, #180]	@ (801728c <tcp_process+0x5bc>)
 80171d8:	781b      	ldrb	r3, [r3, #0]
 80171da:	f003 0320 	and.w	r3, r3, #32
 80171de:	2b00      	cmp	r3, #0
 80171e0:	f000 814c 	beq.w	801747c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	8b5b      	ldrh	r3, [r3, #26]
 80171e8:	f043 0302 	orr.w	r3, r3, #2
 80171ec:	b29a      	uxth	r2, r3
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	2207      	movs	r2, #7
 80171f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80171f8:	e140      	b.n	801747c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80171fa:	6878      	ldr	r0, [r7, #4]
 80171fc:	f000 fa5c 	bl	80176b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017200:	4b22      	ldr	r3, [pc, #136]	@ (801728c <tcp_process+0x5bc>)
 8017202:	781b      	ldrb	r3, [r3, #0]
 8017204:	f003 0320 	and.w	r3, r3, #32
 8017208:	2b00      	cmp	r3, #0
 801720a:	d071      	beq.n	80172f0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801720c:	4b14      	ldr	r3, [pc, #80]	@ (8017260 <tcp_process+0x590>)
 801720e:	781b      	ldrb	r3, [r3, #0]
 8017210:	f003 0310 	and.w	r3, r3, #16
 8017214:	2b00      	cmp	r3, #0
 8017216:	d060      	beq.n	80172da <tcp_process+0x60a>
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801721c:	4b11      	ldr	r3, [pc, #68]	@ (8017264 <tcp_process+0x594>)
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	429a      	cmp	r2, r3
 8017222:	d15a      	bne.n	80172da <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017228:	2b00      	cmp	r3, #0
 801722a:	d156      	bne.n	80172da <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	8b5b      	ldrh	r3, [r3, #26]
 8017230:	f043 0302 	orr.w	r3, r3, #2
 8017234:	b29a      	uxth	r2, r3
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801723a:	6878      	ldr	r0, [r7, #4]
 801723c:	f7fe fdbc 	bl	8015db8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8017240:	4b13      	ldr	r3, [pc, #76]	@ (8017290 <tcp_process+0x5c0>)
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	687a      	ldr	r2, [r7, #4]
 8017246:	429a      	cmp	r2, r3
 8017248:	d105      	bne.n	8017256 <tcp_process+0x586>
 801724a:	4b11      	ldr	r3, [pc, #68]	@ (8017290 <tcp_process+0x5c0>)
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	68db      	ldr	r3, [r3, #12]
 8017250:	4a0f      	ldr	r2, [pc, #60]	@ (8017290 <tcp_process+0x5c0>)
 8017252:	6013      	str	r3, [r2, #0]
 8017254:	e02e      	b.n	80172b4 <tcp_process+0x5e4>
 8017256:	4b0e      	ldr	r3, [pc, #56]	@ (8017290 <tcp_process+0x5c0>)
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	617b      	str	r3, [r7, #20]
 801725c:	e027      	b.n	80172ae <tcp_process+0x5de>
 801725e:	bf00      	nop
 8017260:	200277f4 	.word	0x200277f4
 8017264:	200277ec 	.word	0x200277ec
 8017268:	200277f2 	.word	0x200277f2
 801726c:	200277e8 	.word	0x200277e8
 8017270:	200277d8 	.word	0x200277d8
 8017274:	200246c0 	.word	0x200246c0
 8017278:	200246c4 	.word	0x200246c4
 801727c:	08020520 	.word	0x08020520
 8017280:	080207c0 	.word	0x080207c0
 8017284:	0802056c 	.word	0x0802056c
 8017288:	200277f0 	.word	0x200277f0
 801728c:	200277f5 	.word	0x200277f5
 8017290:	200277bc 	.word	0x200277bc
 8017294:	697b      	ldr	r3, [r7, #20]
 8017296:	68db      	ldr	r3, [r3, #12]
 8017298:	687a      	ldr	r2, [r7, #4]
 801729a:	429a      	cmp	r2, r3
 801729c:	d104      	bne.n	80172a8 <tcp_process+0x5d8>
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	68da      	ldr	r2, [r3, #12]
 80172a2:	697b      	ldr	r3, [r7, #20]
 80172a4:	60da      	str	r2, [r3, #12]
 80172a6:	e005      	b.n	80172b4 <tcp_process+0x5e4>
 80172a8:	697b      	ldr	r3, [r7, #20]
 80172aa:	68db      	ldr	r3, [r3, #12]
 80172ac:	617b      	str	r3, [r7, #20]
 80172ae:	697b      	ldr	r3, [r7, #20]
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d1ef      	bne.n	8017294 <tcp_process+0x5c4>
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	2200      	movs	r2, #0
 80172b8:	60da      	str	r2, [r3, #12]
 80172ba:	4b77      	ldr	r3, [pc, #476]	@ (8017498 <tcp_process+0x7c8>)
 80172bc:	2201      	movs	r2, #1
 80172be:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	220a      	movs	r2, #10
 80172c4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80172c6:	4b75      	ldr	r3, [pc, #468]	@ (801749c <tcp_process+0x7cc>)
 80172c8:	681a      	ldr	r2, [r3, #0]
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	60da      	str	r2, [r3, #12]
 80172ce:	4a73      	ldr	r2, [pc, #460]	@ (801749c <tcp_process+0x7cc>)
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	6013      	str	r3, [r2, #0]
 80172d4:	f002 fcf4 	bl	8019cc0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80172d8:	e0d2      	b.n	8017480 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	8b5b      	ldrh	r3, [r3, #26]
 80172de:	f043 0302 	orr.w	r3, r3, #2
 80172e2:	b29a      	uxth	r2, r3
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	2208      	movs	r2, #8
 80172ec:	751a      	strb	r2, [r3, #20]
      break;
 80172ee:	e0c7      	b.n	8017480 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80172f0:	4b6b      	ldr	r3, [pc, #428]	@ (80174a0 <tcp_process+0x7d0>)
 80172f2:	781b      	ldrb	r3, [r3, #0]
 80172f4:	f003 0310 	and.w	r3, r3, #16
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	f000 80c1 	beq.w	8017480 <tcp_process+0x7b0>
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017302:	4b68      	ldr	r3, [pc, #416]	@ (80174a4 <tcp_process+0x7d4>)
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	429a      	cmp	r2, r3
 8017308:	f040 80ba 	bne.w	8017480 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017310:	2b00      	cmp	r3, #0
 8017312:	f040 80b5 	bne.w	8017480 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	2206      	movs	r2, #6
 801731a:	751a      	strb	r2, [r3, #20]
      break;
 801731c:	e0b0      	b.n	8017480 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801731e:	6878      	ldr	r0, [r7, #4]
 8017320:	f000 f9ca 	bl	80176b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017324:	4b60      	ldr	r3, [pc, #384]	@ (80174a8 <tcp_process+0x7d8>)
 8017326:	781b      	ldrb	r3, [r3, #0]
 8017328:	f003 0320 	and.w	r3, r3, #32
 801732c:	2b00      	cmp	r3, #0
 801732e:	f000 80a9 	beq.w	8017484 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	8b5b      	ldrh	r3, [r3, #26]
 8017336:	f043 0302 	orr.w	r3, r3, #2
 801733a:	b29a      	uxth	r2, r3
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8017340:	6878      	ldr	r0, [r7, #4]
 8017342:	f7fe fd39 	bl	8015db8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017346:	4b59      	ldr	r3, [pc, #356]	@ (80174ac <tcp_process+0x7dc>)
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	687a      	ldr	r2, [r7, #4]
 801734c:	429a      	cmp	r2, r3
 801734e:	d105      	bne.n	801735c <tcp_process+0x68c>
 8017350:	4b56      	ldr	r3, [pc, #344]	@ (80174ac <tcp_process+0x7dc>)
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	68db      	ldr	r3, [r3, #12]
 8017356:	4a55      	ldr	r2, [pc, #340]	@ (80174ac <tcp_process+0x7dc>)
 8017358:	6013      	str	r3, [r2, #0]
 801735a:	e013      	b.n	8017384 <tcp_process+0x6b4>
 801735c:	4b53      	ldr	r3, [pc, #332]	@ (80174ac <tcp_process+0x7dc>)
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	613b      	str	r3, [r7, #16]
 8017362:	e00c      	b.n	801737e <tcp_process+0x6ae>
 8017364:	693b      	ldr	r3, [r7, #16]
 8017366:	68db      	ldr	r3, [r3, #12]
 8017368:	687a      	ldr	r2, [r7, #4]
 801736a:	429a      	cmp	r2, r3
 801736c:	d104      	bne.n	8017378 <tcp_process+0x6a8>
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	68da      	ldr	r2, [r3, #12]
 8017372:	693b      	ldr	r3, [r7, #16]
 8017374:	60da      	str	r2, [r3, #12]
 8017376:	e005      	b.n	8017384 <tcp_process+0x6b4>
 8017378:	693b      	ldr	r3, [r7, #16]
 801737a:	68db      	ldr	r3, [r3, #12]
 801737c:	613b      	str	r3, [r7, #16]
 801737e:	693b      	ldr	r3, [r7, #16]
 8017380:	2b00      	cmp	r3, #0
 8017382:	d1ef      	bne.n	8017364 <tcp_process+0x694>
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	2200      	movs	r2, #0
 8017388:	60da      	str	r2, [r3, #12]
 801738a:	4b43      	ldr	r3, [pc, #268]	@ (8017498 <tcp_process+0x7c8>)
 801738c:	2201      	movs	r2, #1
 801738e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	220a      	movs	r2, #10
 8017394:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017396:	4b41      	ldr	r3, [pc, #260]	@ (801749c <tcp_process+0x7cc>)
 8017398:	681a      	ldr	r2, [r3, #0]
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	60da      	str	r2, [r3, #12]
 801739e:	4a3f      	ldr	r2, [pc, #252]	@ (801749c <tcp_process+0x7cc>)
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	6013      	str	r3, [r2, #0]
 80173a4:	f002 fc8c 	bl	8019cc0 <tcp_timer_needed>
      }
      break;
 80173a8:	e06c      	b.n	8017484 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80173aa:	6878      	ldr	r0, [r7, #4]
 80173ac:	f000 f984 	bl	80176b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80173b0:	4b3b      	ldr	r3, [pc, #236]	@ (80174a0 <tcp_process+0x7d0>)
 80173b2:	781b      	ldrb	r3, [r3, #0]
 80173b4:	f003 0310 	and.w	r3, r3, #16
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d065      	beq.n	8017488 <tcp_process+0x7b8>
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80173c0:	4b38      	ldr	r3, [pc, #224]	@ (80174a4 <tcp_process+0x7d4>)
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	429a      	cmp	r2, r3
 80173c6:	d15f      	bne.n	8017488 <tcp_process+0x7b8>
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d15b      	bne.n	8017488 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80173d0:	6878      	ldr	r0, [r7, #4]
 80173d2:	f7fe fcf1 	bl	8015db8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80173d6:	4b35      	ldr	r3, [pc, #212]	@ (80174ac <tcp_process+0x7dc>)
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	687a      	ldr	r2, [r7, #4]
 80173dc:	429a      	cmp	r2, r3
 80173de:	d105      	bne.n	80173ec <tcp_process+0x71c>
 80173e0:	4b32      	ldr	r3, [pc, #200]	@ (80174ac <tcp_process+0x7dc>)
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	68db      	ldr	r3, [r3, #12]
 80173e6:	4a31      	ldr	r2, [pc, #196]	@ (80174ac <tcp_process+0x7dc>)
 80173e8:	6013      	str	r3, [r2, #0]
 80173ea:	e013      	b.n	8017414 <tcp_process+0x744>
 80173ec:	4b2f      	ldr	r3, [pc, #188]	@ (80174ac <tcp_process+0x7dc>)
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	60fb      	str	r3, [r7, #12]
 80173f2:	e00c      	b.n	801740e <tcp_process+0x73e>
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	68db      	ldr	r3, [r3, #12]
 80173f8:	687a      	ldr	r2, [r7, #4]
 80173fa:	429a      	cmp	r2, r3
 80173fc:	d104      	bne.n	8017408 <tcp_process+0x738>
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	68da      	ldr	r2, [r3, #12]
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	60da      	str	r2, [r3, #12]
 8017406:	e005      	b.n	8017414 <tcp_process+0x744>
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	68db      	ldr	r3, [r3, #12]
 801740c:	60fb      	str	r3, [r7, #12]
 801740e:	68fb      	ldr	r3, [r7, #12]
 8017410:	2b00      	cmp	r3, #0
 8017412:	d1ef      	bne.n	80173f4 <tcp_process+0x724>
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	2200      	movs	r2, #0
 8017418:	60da      	str	r2, [r3, #12]
 801741a:	4b1f      	ldr	r3, [pc, #124]	@ (8017498 <tcp_process+0x7c8>)
 801741c:	2201      	movs	r2, #1
 801741e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	220a      	movs	r2, #10
 8017424:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017426:	4b1d      	ldr	r3, [pc, #116]	@ (801749c <tcp_process+0x7cc>)
 8017428:	681a      	ldr	r2, [r3, #0]
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	60da      	str	r2, [r3, #12]
 801742e:	4a1b      	ldr	r2, [pc, #108]	@ (801749c <tcp_process+0x7cc>)
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	6013      	str	r3, [r2, #0]
 8017434:	f002 fc44 	bl	8019cc0 <tcp_timer_needed>
      }
      break;
 8017438:	e026      	b.n	8017488 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801743a:	6878      	ldr	r0, [r7, #4]
 801743c:	f000 f93c 	bl	80176b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017440:	4b17      	ldr	r3, [pc, #92]	@ (80174a0 <tcp_process+0x7d0>)
 8017442:	781b      	ldrb	r3, [r3, #0]
 8017444:	f003 0310 	and.w	r3, r3, #16
 8017448:	2b00      	cmp	r3, #0
 801744a:	d01f      	beq.n	801748c <tcp_process+0x7bc>
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017450:	4b14      	ldr	r3, [pc, #80]	@ (80174a4 <tcp_process+0x7d4>)
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	429a      	cmp	r2, r3
 8017456:	d119      	bne.n	801748c <tcp_process+0x7bc>
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801745c:	2b00      	cmp	r3, #0
 801745e:	d115      	bne.n	801748c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8017460:	4b11      	ldr	r3, [pc, #68]	@ (80174a8 <tcp_process+0x7d8>)
 8017462:	781b      	ldrb	r3, [r3, #0]
 8017464:	f043 0310 	orr.w	r3, r3, #16
 8017468:	b2da      	uxtb	r2, r3
 801746a:	4b0f      	ldr	r3, [pc, #60]	@ (80174a8 <tcp_process+0x7d8>)
 801746c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801746e:	e00d      	b.n	801748c <tcp_process+0x7bc>
    default:
      break;
 8017470:	bf00      	nop
 8017472:	e00c      	b.n	801748e <tcp_process+0x7be>
      break;
 8017474:	bf00      	nop
 8017476:	e00a      	b.n	801748e <tcp_process+0x7be>
      break;
 8017478:	bf00      	nop
 801747a:	e008      	b.n	801748e <tcp_process+0x7be>
      break;
 801747c:	bf00      	nop
 801747e:	e006      	b.n	801748e <tcp_process+0x7be>
      break;
 8017480:	bf00      	nop
 8017482:	e004      	b.n	801748e <tcp_process+0x7be>
      break;
 8017484:	bf00      	nop
 8017486:	e002      	b.n	801748e <tcp_process+0x7be>
      break;
 8017488:	bf00      	nop
 801748a:	e000      	b.n	801748e <tcp_process+0x7be>
      break;
 801748c:	bf00      	nop
  }
  return ERR_OK;
 801748e:	2300      	movs	r3, #0
}
 8017490:	4618      	mov	r0, r3
 8017492:	3724      	adds	r7, #36	@ 0x24
 8017494:	46bd      	mov	sp, r7
 8017496:	bd90      	pop	{r4, r7, pc}
 8017498:	200277c4 	.word	0x200277c4
 801749c:	200277c0 	.word	0x200277c0
 80174a0:	200277f4 	.word	0x200277f4
 80174a4:	200277ec 	.word	0x200277ec
 80174a8:	200277f5 	.word	0x200277f5
 80174ac:	200277bc 	.word	0x200277bc

080174b0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80174b0:	b590      	push	{r4, r7, lr}
 80174b2:	b085      	sub	sp, #20
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	6078      	str	r0, [r7, #4]
 80174b8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d106      	bne.n	80174ce <tcp_oos_insert_segment+0x1e>
 80174c0:	4b3b      	ldr	r3, [pc, #236]	@ (80175b0 <tcp_oos_insert_segment+0x100>)
 80174c2:	f240 421f 	movw	r2, #1055	@ 0x41f
 80174c6:	493b      	ldr	r1, [pc, #236]	@ (80175b4 <tcp_oos_insert_segment+0x104>)
 80174c8:	483b      	ldr	r0, [pc, #236]	@ (80175b8 <tcp_oos_insert_segment+0x108>)
 80174ca:	f006 fde1 	bl	801e090 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	68db      	ldr	r3, [r3, #12]
 80174d2:	899b      	ldrh	r3, [r3, #12]
 80174d4:	b29b      	uxth	r3, r3
 80174d6:	4618      	mov	r0, r3
 80174d8:	f7fb fc02 	bl	8012ce0 <lwip_htons>
 80174dc:	4603      	mov	r3, r0
 80174de:	b2db      	uxtb	r3, r3
 80174e0:	f003 0301 	and.w	r3, r3, #1
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d028      	beq.n	801753a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80174e8:	6838      	ldr	r0, [r7, #0]
 80174ea:	f7fe fa63 	bl	80159b4 <tcp_segs_free>
    next = NULL;
 80174ee:	2300      	movs	r3, #0
 80174f0:	603b      	str	r3, [r7, #0]
 80174f2:	e056      	b.n	80175a2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80174f4:	683b      	ldr	r3, [r7, #0]
 80174f6:	68db      	ldr	r3, [r3, #12]
 80174f8:	899b      	ldrh	r3, [r3, #12]
 80174fa:	b29b      	uxth	r3, r3
 80174fc:	4618      	mov	r0, r3
 80174fe:	f7fb fbef 	bl	8012ce0 <lwip_htons>
 8017502:	4603      	mov	r3, r0
 8017504:	b2db      	uxtb	r3, r3
 8017506:	f003 0301 	and.w	r3, r3, #1
 801750a:	2b00      	cmp	r3, #0
 801750c:	d00d      	beq.n	801752a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	68db      	ldr	r3, [r3, #12]
 8017512:	899b      	ldrh	r3, [r3, #12]
 8017514:	b29c      	uxth	r4, r3
 8017516:	2001      	movs	r0, #1
 8017518:	f7fb fbe2 	bl	8012ce0 <lwip_htons>
 801751c:	4603      	mov	r3, r0
 801751e:	461a      	mov	r2, r3
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	68db      	ldr	r3, [r3, #12]
 8017524:	4322      	orrs	r2, r4
 8017526:	b292      	uxth	r2, r2
 8017528:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801752a:	683b      	ldr	r3, [r7, #0]
 801752c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801752e:	683b      	ldr	r3, [r7, #0]
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8017534:	68f8      	ldr	r0, [r7, #12]
 8017536:	f7fe fa52 	bl	80159de <tcp_seg_free>
    while (next &&
 801753a:	683b      	ldr	r3, [r7, #0]
 801753c:	2b00      	cmp	r3, #0
 801753e:	d00e      	beq.n	801755e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	891b      	ldrh	r3, [r3, #8]
 8017544:	461a      	mov	r2, r3
 8017546:	4b1d      	ldr	r3, [pc, #116]	@ (80175bc <tcp_oos_insert_segment+0x10c>)
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	441a      	add	r2, r3
 801754c:	683b      	ldr	r3, [r7, #0]
 801754e:	68db      	ldr	r3, [r3, #12]
 8017550:	685b      	ldr	r3, [r3, #4]
 8017552:	6839      	ldr	r1, [r7, #0]
 8017554:	8909      	ldrh	r1, [r1, #8]
 8017556:	440b      	add	r3, r1
 8017558:	1ad3      	subs	r3, r2, r3
    while (next &&
 801755a:	2b00      	cmp	r3, #0
 801755c:	daca      	bge.n	80174f4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801755e:	683b      	ldr	r3, [r7, #0]
 8017560:	2b00      	cmp	r3, #0
 8017562:	d01e      	beq.n	80175a2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	891b      	ldrh	r3, [r3, #8]
 8017568:	461a      	mov	r2, r3
 801756a:	4b14      	ldr	r3, [pc, #80]	@ (80175bc <tcp_oos_insert_segment+0x10c>)
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	441a      	add	r2, r3
 8017570:	683b      	ldr	r3, [r7, #0]
 8017572:	68db      	ldr	r3, [r3, #12]
 8017574:	685b      	ldr	r3, [r3, #4]
 8017576:	1ad3      	subs	r3, r2, r3
    if (next &&
 8017578:	2b00      	cmp	r3, #0
 801757a:	dd12      	ble.n	80175a2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801757c:	683b      	ldr	r3, [r7, #0]
 801757e:	68db      	ldr	r3, [r3, #12]
 8017580:	685b      	ldr	r3, [r3, #4]
 8017582:	b29a      	uxth	r2, r3
 8017584:	4b0d      	ldr	r3, [pc, #52]	@ (80175bc <tcp_oos_insert_segment+0x10c>)
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	b29b      	uxth	r3, r3
 801758a:	1ad3      	subs	r3, r2, r3
 801758c:	b29a      	uxth	r2, r3
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	685a      	ldr	r2, [r3, #4]
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	891b      	ldrh	r3, [r3, #8]
 801759a:	4619      	mov	r1, r3
 801759c:	4610      	mov	r0, r2
 801759e:	f7fc fe07 	bl	80141b0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	683a      	ldr	r2, [r7, #0]
 80175a6:	601a      	str	r2, [r3, #0]
}
 80175a8:	bf00      	nop
 80175aa:	3714      	adds	r7, #20
 80175ac:	46bd      	mov	sp, r7
 80175ae:	bd90      	pop	{r4, r7, pc}
 80175b0:	08020520 	.word	0x08020520
 80175b4:	080207e0 	.word	0x080207e0
 80175b8:	0802056c 	.word	0x0802056c
 80175bc:	200277e8 	.word	0x200277e8

080175c0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80175c0:	b5b0      	push	{r4, r5, r7, lr}
 80175c2:	b086      	sub	sp, #24
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	60f8      	str	r0, [r7, #12]
 80175c8:	60b9      	str	r1, [r7, #8]
 80175ca:	607a      	str	r2, [r7, #4]
 80175cc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80175ce:	e03e      	b.n	801764e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80175d0:	68bb      	ldr	r3, [r7, #8]
 80175d2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80175d4:	68bb      	ldr	r3, [r7, #8]
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80175da:	697b      	ldr	r3, [r7, #20]
 80175dc:	685b      	ldr	r3, [r3, #4]
 80175de:	4618      	mov	r0, r3
 80175e0:	f7fc fffa 	bl	80145d8 <pbuf_clen>
 80175e4:	4603      	mov	r3, r0
 80175e6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80175e8:	68fb      	ldr	r3, [r7, #12]
 80175ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80175ee:	8a7a      	ldrh	r2, [r7, #18]
 80175f0:	429a      	cmp	r2, r3
 80175f2:	d906      	bls.n	8017602 <tcp_free_acked_segments+0x42>
 80175f4:	4b2a      	ldr	r3, [pc, #168]	@ (80176a0 <tcp_free_acked_segments+0xe0>)
 80175f6:	f240 4257 	movw	r2, #1111	@ 0x457
 80175fa:	492a      	ldr	r1, [pc, #168]	@ (80176a4 <tcp_free_acked_segments+0xe4>)
 80175fc:	482a      	ldr	r0, [pc, #168]	@ (80176a8 <tcp_free_acked_segments+0xe8>)
 80175fe:	f006 fd47 	bl	801e090 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8017608:	8a7b      	ldrh	r3, [r7, #18]
 801760a:	1ad3      	subs	r3, r2, r3
 801760c:	b29a      	uxth	r2, r3
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8017614:	697b      	ldr	r3, [r7, #20]
 8017616:	891a      	ldrh	r2, [r3, #8]
 8017618:	4b24      	ldr	r3, [pc, #144]	@ (80176ac <tcp_free_acked_segments+0xec>)
 801761a:	881b      	ldrh	r3, [r3, #0]
 801761c:	4413      	add	r3, r2
 801761e:	b29a      	uxth	r2, r3
 8017620:	4b22      	ldr	r3, [pc, #136]	@ (80176ac <tcp_free_acked_segments+0xec>)
 8017622:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8017624:	6978      	ldr	r0, [r7, #20]
 8017626:	f7fe f9da 	bl	80159de <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801762a:	68fb      	ldr	r3, [r7, #12]
 801762c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017630:	2b00      	cmp	r3, #0
 8017632:	d00c      	beq.n	801764e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8017634:	68bb      	ldr	r3, [r7, #8]
 8017636:	2b00      	cmp	r3, #0
 8017638:	d109      	bne.n	801764e <tcp_free_acked_segments+0x8e>
 801763a:	683b      	ldr	r3, [r7, #0]
 801763c:	2b00      	cmp	r3, #0
 801763e:	d106      	bne.n	801764e <tcp_free_acked_segments+0x8e>
 8017640:	4b17      	ldr	r3, [pc, #92]	@ (80176a0 <tcp_free_acked_segments+0xe0>)
 8017642:	f240 4261 	movw	r2, #1121	@ 0x461
 8017646:	491a      	ldr	r1, [pc, #104]	@ (80176b0 <tcp_free_acked_segments+0xf0>)
 8017648:	4817      	ldr	r0, [pc, #92]	@ (80176a8 <tcp_free_acked_segments+0xe8>)
 801764a:	f006 fd21 	bl	801e090 <iprintf>
  while (seg_list != NULL &&
 801764e:	68bb      	ldr	r3, [r7, #8]
 8017650:	2b00      	cmp	r3, #0
 8017652:	d020      	beq.n	8017696 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8017654:	68bb      	ldr	r3, [r7, #8]
 8017656:	68db      	ldr	r3, [r3, #12]
 8017658:	685b      	ldr	r3, [r3, #4]
 801765a:	4618      	mov	r0, r3
 801765c:	f7fb fb56 	bl	8012d0c <lwip_htonl>
 8017660:	4604      	mov	r4, r0
 8017662:	68bb      	ldr	r3, [r7, #8]
 8017664:	891b      	ldrh	r3, [r3, #8]
 8017666:	461d      	mov	r5, r3
 8017668:	68bb      	ldr	r3, [r7, #8]
 801766a:	68db      	ldr	r3, [r3, #12]
 801766c:	899b      	ldrh	r3, [r3, #12]
 801766e:	b29b      	uxth	r3, r3
 8017670:	4618      	mov	r0, r3
 8017672:	f7fb fb35 	bl	8012ce0 <lwip_htons>
 8017676:	4603      	mov	r3, r0
 8017678:	b2db      	uxtb	r3, r3
 801767a:	f003 0303 	and.w	r3, r3, #3
 801767e:	2b00      	cmp	r3, #0
 8017680:	d001      	beq.n	8017686 <tcp_free_acked_segments+0xc6>
 8017682:	2301      	movs	r3, #1
 8017684:	e000      	b.n	8017688 <tcp_free_acked_segments+0xc8>
 8017686:	2300      	movs	r3, #0
 8017688:	442b      	add	r3, r5
 801768a:	18e2      	adds	r2, r4, r3
 801768c:	4b09      	ldr	r3, [pc, #36]	@ (80176b4 <tcp_free_acked_segments+0xf4>)
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8017692:	2b00      	cmp	r3, #0
 8017694:	dd9c      	ble.n	80175d0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8017696:	68bb      	ldr	r3, [r7, #8]
}
 8017698:	4618      	mov	r0, r3
 801769a:	3718      	adds	r7, #24
 801769c:	46bd      	mov	sp, r7
 801769e:	bdb0      	pop	{r4, r5, r7, pc}
 80176a0:	08020520 	.word	0x08020520
 80176a4:	08020808 	.word	0x08020808
 80176a8:	0802056c 	.word	0x0802056c
 80176ac:	200277f0 	.word	0x200277f0
 80176b0:	08020830 	.word	0x08020830
 80176b4:	200277ec 	.word	0x200277ec

080176b8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80176b8:	b5b0      	push	{r4, r5, r7, lr}
 80176ba:	b094      	sub	sp, #80	@ 0x50
 80176bc:	af00      	add	r7, sp, #0
 80176be:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80176c0:	2300      	movs	r3, #0
 80176c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d106      	bne.n	80176d8 <tcp_receive+0x20>
 80176ca:	4b91      	ldr	r3, [pc, #580]	@ (8017910 <tcp_receive+0x258>)
 80176cc:	f240 427b 	movw	r2, #1147	@ 0x47b
 80176d0:	4990      	ldr	r1, [pc, #576]	@ (8017914 <tcp_receive+0x25c>)
 80176d2:	4891      	ldr	r0, [pc, #580]	@ (8017918 <tcp_receive+0x260>)
 80176d4:	f006 fcdc 	bl	801e090 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	7d1b      	ldrb	r3, [r3, #20]
 80176dc:	2b03      	cmp	r3, #3
 80176de:	d806      	bhi.n	80176ee <tcp_receive+0x36>
 80176e0:	4b8b      	ldr	r3, [pc, #556]	@ (8017910 <tcp_receive+0x258>)
 80176e2:	f240 427c 	movw	r2, #1148	@ 0x47c
 80176e6:	498d      	ldr	r1, [pc, #564]	@ (801791c <tcp_receive+0x264>)
 80176e8:	488b      	ldr	r0, [pc, #556]	@ (8017918 <tcp_receive+0x260>)
 80176ea:	f006 fcd1 	bl	801e090 <iprintf>

  if (flags & TCP_ACK) {
 80176ee:	4b8c      	ldr	r3, [pc, #560]	@ (8017920 <tcp_receive+0x268>)
 80176f0:	781b      	ldrb	r3, [r3, #0]
 80176f2:	f003 0310 	and.w	r3, r3, #16
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	f000 8264 	beq.w	8017bc4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017702:	461a      	mov	r2, r3
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017708:	4413      	add	r3, r2
 801770a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8017710:	4b84      	ldr	r3, [pc, #528]	@ (8017924 <tcp_receive+0x26c>)
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	1ad3      	subs	r3, r2, r3
 8017716:	2b00      	cmp	r3, #0
 8017718:	db1b      	blt.n	8017752 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801771e:	4b81      	ldr	r3, [pc, #516]	@ (8017924 <tcp_receive+0x26c>)
 8017720:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017722:	429a      	cmp	r2, r3
 8017724:	d106      	bne.n	8017734 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801772a:	4b7f      	ldr	r3, [pc, #508]	@ (8017928 <tcp_receive+0x270>)
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	1ad3      	subs	r3, r2, r3
 8017730:	2b00      	cmp	r3, #0
 8017732:	db0e      	blt.n	8017752 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017738:	4b7b      	ldr	r3, [pc, #492]	@ (8017928 <tcp_receive+0x270>)
 801773a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801773c:	429a      	cmp	r2, r3
 801773e:	d125      	bne.n	801778c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017740:	4b7a      	ldr	r3, [pc, #488]	@ (801792c <tcp_receive+0x274>)
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	89db      	ldrh	r3, [r3, #14]
 8017746:	b29a      	uxth	r2, r3
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801774e:	429a      	cmp	r2, r3
 8017750:	d91c      	bls.n	801778c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8017752:	4b76      	ldr	r3, [pc, #472]	@ (801792c <tcp_receive+0x274>)
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	89db      	ldrh	r3, [r3, #14]
 8017758:	b29a      	uxth	r2, r3
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801776c:	429a      	cmp	r2, r3
 801776e:	d205      	bcs.n	801777c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801777c:	4b69      	ldr	r3, [pc, #420]	@ (8017924 <tcp_receive+0x26c>)
 801777e:	681a      	ldr	r2, [r3, #0]
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8017784:	4b68      	ldr	r3, [pc, #416]	@ (8017928 <tcp_receive+0x270>)
 8017786:	681a      	ldr	r2, [r3, #0]
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801778c:	4b66      	ldr	r3, [pc, #408]	@ (8017928 <tcp_receive+0x270>)
 801778e:	681a      	ldr	r2, [r3, #0]
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017794:	1ad3      	subs	r3, r2, r3
 8017796:	2b00      	cmp	r3, #0
 8017798:	dc58      	bgt.n	801784c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801779a:	4b65      	ldr	r3, [pc, #404]	@ (8017930 <tcp_receive+0x278>)
 801779c:	881b      	ldrh	r3, [r3, #0]
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d14b      	bne.n	801783a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80177a6:	687a      	ldr	r2, [r7, #4]
 80177a8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80177ac:	4413      	add	r3, r2
 80177ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80177b0:	429a      	cmp	r2, r3
 80177b2:	d142      	bne.n	801783a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	db3d      	blt.n	801783a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80177c2:	4b59      	ldr	r3, [pc, #356]	@ (8017928 <tcp_receive+0x270>)
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	429a      	cmp	r2, r3
 80177c8:	d137      	bne.n	801783a <tcp_receive+0x182>
              found_dupack = 1;
 80177ca:	2301      	movs	r3, #1
 80177cc:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80177d4:	2bff      	cmp	r3, #255	@ 0xff
 80177d6:	d007      	beq.n	80177e8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80177de:	3301      	adds	r3, #1
 80177e0:	b2da      	uxtb	r2, r3
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80177ee:	2b03      	cmp	r3, #3
 80177f0:	d91b      	bls.n	801782a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80177fc:	4413      	add	r3, r2
 80177fe:	b29a      	uxth	r2, r3
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017806:	429a      	cmp	r2, r3
 8017808:	d30a      	bcc.n	8017820 <tcp_receive+0x168>
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017814:	4413      	add	r3, r2
 8017816:	b29a      	uxth	r2, r3
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801781e:	e004      	b.n	801782a <tcp_receive+0x172>
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017826:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017830:	2b02      	cmp	r3, #2
 8017832:	d902      	bls.n	801783a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017834:	6878      	ldr	r0, [r7, #4]
 8017836:	f001 fee7 	bl	8019608 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801783a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801783c:	2b00      	cmp	r3, #0
 801783e:	f040 8161 	bne.w	8017b04 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	2200      	movs	r2, #0
 8017846:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801784a:	e15b      	b.n	8017b04 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801784c:	4b36      	ldr	r3, [pc, #216]	@ (8017928 <tcp_receive+0x270>)
 801784e:	681a      	ldr	r2, [r3, #0]
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017854:	1ad3      	subs	r3, r2, r3
 8017856:	3b01      	subs	r3, #1
 8017858:	2b00      	cmp	r3, #0
 801785a:	f2c0 814e 	blt.w	8017afa <tcp_receive+0x442>
 801785e:	4b32      	ldr	r3, [pc, #200]	@ (8017928 <tcp_receive+0x270>)
 8017860:	681a      	ldr	r2, [r3, #0]
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017866:	1ad3      	subs	r3, r2, r3
 8017868:	2b00      	cmp	r3, #0
 801786a:	f300 8146 	bgt.w	8017afa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	8b5b      	ldrh	r3, [r3, #26]
 8017872:	f003 0304 	and.w	r3, r3, #4
 8017876:	2b00      	cmp	r3, #0
 8017878:	d010      	beq.n	801789c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	8b5b      	ldrh	r3, [r3, #26]
 801787e:	f023 0304 	bic.w	r3, r3, #4
 8017882:	b29a      	uxth	r2, r3
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	2200      	movs	r2, #0
 8017898:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	2200      	movs	r2, #0
 80178a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80178aa:	10db      	asrs	r3, r3, #3
 80178ac:	b21b      	sxth	r3, r3
 80178ae:	b29a      	uxth	r2, r3
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80178b6:	b29b      	uxth	r3, r3
 80178b8:	4413      	add	r3, r2
 80178ba:	b29b      	uxth	r3, r3
 80178bc:	b21a      	sxth	r2, r3
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80178c4:	4b18      	ldr	r3, [pc, #96]	@ (8017928 <tcp_receive+0x270>)
 80178c6:	681b      	ldr	r3, [r3, #0]
 80178c8:	b29a      	uxth	r2, r3
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80178ce:	b29b      	uxth	r3, r3
 80178d0:	1ad3      	subs	r3, r2, r3
 80178d2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	2200      	movs	r2, #0
 80178d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80178dc:	4b12      	ldr	r3, [pc, #72]	@ (8017928 <tcp_receive+0x270>)
 80178de:	681a      	ldr	r2, [r3, #0]
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	7d1b      	ldrb	r3, [r3, #20]
 80178e8:	2b03      	cmp	r3, #3
 80178ea:	f240 8097 	bls.w	8017a1c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80178fa:	429a      	cmp	r2, r3
 80178fc:	d245      	bcs.n	801798a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	8b5b      	ldrh	r3, [r3, #26]
 8017902:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017906:	2b00      	cmp	r3, #0
 8017908:	d014      	beq.n	8017934 <tcp_receive+0x27c>
 801790a:	2301      	movs	r3, #1
 801790c:	e013      	b.n	8017936 <tcp_receive+0x27e>
 801790e:	bf00      	nop
 8017910:	08020520 	.word	0x08020520
 8017914:	08020850 	.word	0x08020850
 8017918:	0802056c 	.word	0x0802056c
 801791c:	0802086c 	.word	0x0802086c
 8017920:	200277f4 	.word	0x200277f4
 8017924:	200277e8 	.word	0x200277e8
 8017928:	200277ec 	.word	0x200277ec
 801792c:	200277d8 	.word	0x200277d8
 8017930:	200277f2 	.word	0x200277f2
 8017934:	2302      	movs	r3, #2
 8017936:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801793a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801793e:	b29a      	uxth	r2, r3
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017944:	fb12 f303 	smulbb	r3, r2, r3
 8017948:	b29b      	uxth	r3, r3
 801794a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801794c:	4293      	cmp	r3, r2
 801794e:	bf28      	it	cs
 8017950:	4613      	movcs	r3, r2
 8017952:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801795a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801795c:	4413      	add	r3, r2
 801795e:	b29a      	uxth	r2, r3
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017966:	429a      	cmp	r2, r3
 8017968:	d309      	bcc.n	801797e <tcp_receive+0x2c6>
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017970:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017972:	4413      	add	r3, r2
 8017974:	b29a      	uxth	r2, r3
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801797c:	e04e      	b.n	8017a1c <tcp_receive+0x364>
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017984:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017988:	e048      	b.n	8017a1c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017990:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017992:	4413      	add	r3, r2
 8017994:	b29a      	uxth	r2, r3
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801799c:	429a      	cmp	r2, r3
 801799e:	d309      	bcc.n	80179b4 <tcp_receive+0x2fc>
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80179a6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80179a8:	4413      	add	r3, r2
 80179aa:	b29a      	uxth	r2, r3
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80179b2:	e004      	b.n	80179be <tcp_receive+0x306>
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80179ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80179ca:	429a      	cmp	r2, r3
 80179cc:	d326      	bcc.n	8017a1c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80179da:	1ad3      	subs	r3, r2, r3
 80179dc:	b29a      	uxth	r2, r3
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80179ee:	4413      	add	r3, r2
 80179f0:	b29a      	uxth	r2, r3
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80179f8:	429a      	cmp	r2, r3
 80179fa:	d30a      	bcc.n	8017a12 <tcp_receive+0x35a>
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017a06:	4413      	add	r3, r2
 8017a08:	b29a      	uxth	r2, r3
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017a10:	e004      	b.n	8017a1c <tcp_receive+0x364>
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017a18:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a24:	4a98      	ldr	r2, [pc, #608]	@ (8017c88 <tcp_receive+0x5d0>)
 8017a26:	6878      	ldr	r0, [r7, #4]
 8017a28:	f7ff fdca 	bl	80175c0 <tcp_free_acked_segments>
 8017a2c:	4602      	mov	r2, r0
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017a3a:	4a94      	ldr	r2, [pc, #592]	@ (8017c8c <tcp_receive+0x5d4>)
 8017a3c:	6878      	ldr	r0, [r7, #4]
 8017a3e:	f7ff fdbf 	bl	80175c0 <tcp_free_acked_segments>
 8017a42:	4602      	mov	r2, r0
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d104      	bne.n	8017a5a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017a56:	861a      	strh	r2, [r3, #48]	@ 0x30
 8017a58:	e002      	b.n	8017a60 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	2200      	movs	r2, #0
 8017a5e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	2200      	movs	r2, #0
 8017a64:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d103      	bne.n	8017a76 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	2200      	movs	r2, #0
 8017a72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8017a7c:	4b84      	ldr	r3, [pc, #528]	@ (8017c90 <tcp_receive+0x5d8>)
 8017a7e:	881b      	ldrh	r3, [r3, #0]
 8017a80:	4413      	add	r3, r2
 8017a82:	b29a      	uxth	r2, r3
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	8b5b      	ldrh	r3, [r3, #26]
 8017a8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d035      	beq.n	8017b02 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d118      	bne.n	8017ad0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	d00c      	beq.n	8017ac0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017aae:	68db      	ldr	r3, [r3, #12]
 8017ab0:	685b      	ldr	r3, [r3, #4]
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	f7fb f92a 	bl	8012d0c <lwip_htonl>
 8017ab8:	4603      	mov	r3, r0
 8017aba:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	dc20      	bgt.n	8017b02 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	8b5b      	ldrh	r3, [r3, #26]
 8017ac4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017ac8:	b29a      	uxth	r2, r3
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017ace:	e018      	b.n	8017b02 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017ad8:	68db      	ldr	r3, [r3, #12]
 8017ada:	685b      	ldr	r3, [r3, #4]
 8017adc:	4618      	mov	r0, r3
 8017ade:	f7fb f915 	bl	8012d0c <lwip_htonl>
 8017ae2:	4603      	mov	r3, r0
 8017ae4:	1ae3      	subs	r3, r4, r3
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	dc0b      	bgt.n	8017b02 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	8b5b      	ldrh	r3, [r3, #26]
 8017aee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8017af2:	b29a      	uxth	r2, r3
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017af8:	e003      	b.n	8017b02 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8017afa:	6878      	ldr	r0, [r7, #4]
 8017afc:	f001 ff70 	bl	80199e0 <tcp_send_empty_ack>
 8017b00:	e000      	b.n	8017b04 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017b02:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d05b      	beq.n	8017bc4 <tcp_receive+0x50c>
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017b10:	4b60      	ldr	r3, [pc, #384]	@ (8017c94 <tcp_receive+0x5dc>)
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	1ad3      	subs	r3, r2, r3
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	da54      	bge.n	8017bc4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8017b1a:	4b5f      	ldr	r3, [pc, #380]	@ (8017c98 <tcp_receive+0x5e0>)
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	b29a      	uxth	r2, r3
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017b24:	b29b      	uxth	r3, r3
 8017b26:	1ad3      	subs	r3, r2, r3
 8017b28:	b29b      	uxth	r3, r3
 8017b2a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8017b2e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017b38:	10db      	asrs	r3, r3, #3
 8017b3a:	b21b      	sxth	r3, r3
 8017b3c:	b29b      	uxth	r3, r3
 8017b3e:	1ad3      	subs	r3, r2, r3
 8017b40:	b29b      	uxth	r3, r3
 8017b42:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017b4c:	b29a      	uxth	r2, r3
 8017b4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017b52:	4413      	add	r3, r2
 8017b54:	b29b      	uxth	r3, r3
 8017b56:	b21a      	sxth	r2, r3
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8017b5c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	da05      	bge.n	8017b70 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8017b64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017b68:	425b      	negs	r3, r3
 8017b6a:	b29b      	uxth	r3, r3
 8017b6c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8017b70:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017b7a:	109b      	asrs	r3, r3, #2
 8017b7c:	b21b      	sxth	r3, r3
 8017b7e:	b29b      	uxth	r3, r3
 8017b80:	1ad3      	subs	r3, r2, r3
 8017b82:	b29b      	uxth	r3, r3
 8017b84:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017b8e:	b29a      	uxth	r2, r3
 8017b90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8017b94:	4413      	add	r3, r2
 8017b96:	b29b      	uxth	r3, r3
 8017b98:	b21a      	sxth	r2, r3
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017ba4:	10db      	asrs	r3, r3, #3
 8017ba6:	b21b      	sxth	r3, r3
 8017ba8:	b29a      	uxth	r2, r3
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017bb0:	b29b      	uxth	r3, r3
 8017bb2:	4413      	add	r3, r2
 8017bb4:	b29b      	uxth	r3, r3
 8017bb6:	b21a      	sxth	r2, r3
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8017bc4:	4b35      	ldr	r3, [pc, #212]	@ (8017c9c <tcp_receive+0x5e4>)
 8017bc6:	881b      	ldrh	r3, [r3, #0]
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	f000 84df 	beq.w	801858c <tcp_receive+0xed4>
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	7d1b      	ldrb	r3, [r3, #20]
 8017bd2:	2b06      	cmp	r3, #6
 8017bd4:	f200 84da 	bhi.w	801858c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017bdc:	4b30      	ldr	r3, [pc, #192]	@ (8017ca0 <tcp_receive+0x5e8>)
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	1ad3      	subs	r3, r2, r3
 8017be2:	3b01      	subs	r3, #1
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	f2c0 808f 	blt.w	8017d08 <tcp_receive+0x650>
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017bee:	4b2b      	ldr	r3, [pc, #172]	@ (8017c9c <tcp_receive+0x5e4>)
 8017bf0:	881b      	ldrh	r3, [r3, #0]
 8017bf2:	4619      	mov	r1, r3
 8017bf4:	4b2a      	ldr	r3, [pc, #168]	@ (8017ca0 <tcp_receive+0x5e8>)
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	440b      	add	r3, r1
 8017bfa:	1ad3      	subs	r3, r2, r3
 8017bfc:	3301      	adds	r3, #1
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	f300 8082 	bgt.w	8017d08 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8017c04:	4b27      	ldr	r3, [pc, #156]	@ (8017ca4 <tcp_receive+0x5ec>)
 8017c06:	685b      	ldr	r3, [r3, #4]
 8017c08:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017c0e:	4b24      	ldr	r3, [pc, #144]	@ (8017ca0 <tcp_receive+0x5e8>)
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	1ad3      	subs	r3, r2, r3
 8017c14:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8017c16:	4b23      	ldr	r3, [pc, #140]	@ (8017ca4 <tcp_receive+0x5ec>)
 8017c18:	685b      	ldr	r3, [r3, #4]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d106      	bne.n	8017c2c <tcp_receive+0x574>
 8017c1e:	4b22      	ldr	r3, [pc, #136]	@ (8017ca8 <tcp_receive+0x5f0>)
 8017c20:	f240 5294 	movw	r2, #1428	@ 0x594
 8017c24:	4921      	ldr	r1, [pc, #132]	@ (8017cac <tcp_receive+0x5f4>)
 8017c26:	4822      	ldr	r0, [pc, #136]	@ (8017cb0 <tcp_receive+0x5f8>)
 8017c28:	f006 fa32 	bl	801e090 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8017c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c2e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8017c32:	4293      	cmp	r3, r2
 8017c34:	d906      	bls.n	8017c44 <tcp_receive+0x58c>
 8017c36:	4b1c      	ldr	r3, [pc, #112]	@ (8017ca8 <tcp_receive+0x5f0>)
 8017c38:	f240 5295 	movw	r2, #1429	@ 0x595
 8017c3c:	491d      	ldr	r1, [pc, #116]	@ (8017cb4 <tcp_receive+0x5fc>)
 8017c3e:	481c      	ldr	r0, [pc, #112]	@ (8017cb0 <tcp_receive+0x5f8>)
 8017c40:	f006 fa26 	bl	801e090 <iprintf>
      off = (u16_t)off32;
 8017c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c46:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8017c4a:	4b16      	ldr	r3, [pc, #88]	@ (8017ca4 <tcp_receive+0x5ec>)
 8017c4c:	685b      	ldr	r3, [r3, #4]
 8017c4e:	891b      	ldrh	r3, [r3, #8]
 8017c50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017c54:	429a      	cmp	r2, r3
 8017c56:	d906      	bls.n	8017c66 <tcp_receive+0x5ae>
 8017c58:	4b13      	ldr	r3, [pc, #76]	@ (8017ca8 <tcp_receive+0x5f0>)
 8017c5a:	f240 5297 	movw	r2, #1431	@ 0x597
 8017c5e:	4916      	ldr	r1, [pc, #88]	@ (8017cb8 <tcp_receive+0x600>)
 8017c60:	4813      	ldr	r0, [pc, #76]	@ (8017cb0 <tcp_receive+0x5f8>)
 8017c62:	f006 fa15 	bl	801e090 <iprintf>
      inseg.len -= off;
 8017c66:	4b0f      	ldr	r3, [pc, #60]	@ (8017ca4 <tcp_receive+0x5ec>)
 8017c68:	891a      	ldrh	r2, [r3, #8]
 8017c6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017c6e:	1ad3      	subs	r3, r2, r3
 8017c70:	b29a      	uxth	r2, r3
 8017c72:	4b0c      	ldr	r3, [pc, #48]	@ (8017ca4 <tcp_receive+0x5ec>)
 8017c74:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8017c76:	4b0b      	ldr	r3, [pc, #44]	@ (8017ca4 <tcp_receive+0x5ec>)
 8017c78:	685b      	ldr	r3, [r3, #4]
 8017c7a:	891a      	ldrh	r2, [r3, #8]
 8017c7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017c80:	1ad3      	subs	r3, r2, r3
 8017c82:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8017c84:	e02a      	b.n	8017cdc <tcp_receive+0x624>
 8017c86:	bf00      	nop
 8017c88:	08020888 	.word	0x08020888
 8017c8c:	08020890 	.word	0x08020890
 8017c90:	200277f0 	.word	0x200277f0
 8017c94:	200277ec 	.word	0x200277ec
 8017c98:	200277b0 	.word	0x200277b0
 8017c9c:	200277f2 	.word	0x200277f2
 8017ca0:	200277e8 	.word	0x200277e8
 8017ca4:	200277c8 	.word	0x200277c8
 8017ca8:	08020520 	.word	0x08020520
 8017cac:	08020898 	.word	0x08020898
 8017cb0:	0802056c 	.word	0x0802056c
 8017cb4:	080208a8 	.word	0x080208a8
 8017cb8:	080208b8 	.word	0x080208b8
        off -= p->len;
 8017cbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017cbe:	895b      	ldrh	r3, [r3, #10]
 8017cc0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017cc4:	1ad3      	subs	r3, r2, r3
 8017cc6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8017cca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017ccc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8017cce:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8017cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017cd2:	2200      	movs	r2, #0
 8017cd4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8017cd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017cd8:	681b      	ldr	r3, [r3, #0]
 8017cda:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8017cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017cde:	895b      	ldrh	r3, [r3, #10]
 8017ce0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017ce4:	429a      	cmp	r2, r3
 8017ce6:	d8e9      	bhi.n	8017cbc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8017ce8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017cec:	4619      	mov	r1, r3
 8017cee:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8017cf0:	f7fc fb5e 	bl	80143b0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017cf8:	4a90      	ldr	r2, [pc, #576]	@ (8017f3c <tcp_receive+0x884>)
 8017cfa:	6013      	str	r3, [r2, #0]
 8017cfc:	4b90      	ldr	r3, [pc, #576]	@ (8017f40 <tcp_receive+0x888>)
 8017cfe:	68db      	ldr	r3, [r3, #12]
 8017d00:	4a8e      	ldr	r2, [pc, #568]	@ (8017f3c <tcp_receive+0x884>)
 8017d02:	6812      	ldr	r2, [r2, #0]
 8017d04:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017d06:	e00d      	b.n	8017d24 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8017d08:	4b8c      	ldr	r3, [pc, #560]	@ (8017f3c <tcp_receive+0x884>)
 8017d0a:	681a      	ldr	r2, [r3, #0]
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d10:	1ad3      	subs	r3, r2, r3
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	da06      	bge.n	8017d24 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	8b5b      	ldrh	r3, [r3, #26]
 8017d1a:	f043 0302 	orr.w	r3, r3, #2
 8017d1e:	b29a      	uxth	r2, r3
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017d24:	4b85      	ldr	r3, [pc, #532]	@ (8017f3c <tcp_receive+0x884>)
 8017d26:	681a      	ldr	r2, [r3, #0]
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d2c:	1ad3      	subs	r3, r2, r3
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	f2c0 8427 	blt.w	8018582 <tcp_receive+0xeca>
 8017d34:	4b81      	ldr	r3, [pc, #516]	@ (8017f3c <tcp_receive+0x884>)
 8017d36:	681a      	ldr	r2, [r3, #0]
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d3c:	6879      	ldr	r1, [r7, #4]
 8017d3e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017d40:	440b      	add	r3, r1
 8017d42:	1ad3      	subs	r3, r2, r3
 8017d44:	3301      	adds	r3, #1
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	f300 841b 	bgt.w	8018582 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017d50:	4b7a      	ldr	r3, [pc, #488]	@ (8017f3c <tcp_receive+0x884>)
 8017d52:	681b      	ldr	r3, [r3, #0]
 8017d54:	429a      	cmp	r2, r3
 8017d56:	f040 8298 	bne.w	801828a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8017d5a:	4b79      	ldr	r3, [pc, #484]	@ (8017f40 <tcp_receive+0x888>)
 8017d5c:	891c      	ldrh	r4, [r3, #8]
 8017d5e:	4b78      	ldr	r3, [pc, #480]	@ (8017f40 <tcp_receive+0x888>)
 8017d60:	68db      	ldr	r3, [r3, #12]
 8017d62:	899b      	ldrh	r3, [r3, #12]
 8017d64:	b29b      	uxth	r3, r3
 8017d66:	4618      	mov	r0, r3
 8017d68:	f7fa ffba 	bl	8012ce0 <lwip_htons>
 8017d6c:	4603      	mov	r3, r0
 8017d6e:	b2db      	uxtb	r3, r3
 8017d70:	f003 0303 	and.w	r3, r3, #3
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d001      	beq.n	8017d7c <tcp_receive+0x6c4>
 8017d78:	2301      	movs	r3, #1
 8017d7a:	e000      	b.n	8017d7e <tcp_receive+0x6c6>
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	4423      	add	r3, r4
 8017d80:	b29a      	uxth	r2, r3
 8017d82:	4b70      	ldr	r3, [pc, #448]	@ (8017f44 <tcp_receive+0x88c>)
 8017d84:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017d8a:	4b6e      	ldr	r3, [pc, #440]	@ (8017f44 <tcp_receive+0x88c>)
 8017d8c:	881b      	ldrh	r3, [r3, #0]
 8017d8e:	429a      	cmp	r2, r3
 8017d90:	d274      	bcs.n	8017e7c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017d92:	4b6b      	ldr	r3, [pc, #428]	@ (8017f40 <tcp_receive+0x888>)
 8017d94:	68db      	ldr	r3, [r3, #12]
 8017d96:	899b      	ldrh	r3, [r3, #12]
 8017d98:	b29b      	uxth	r3, r3
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	f7fa ffa0 	bl	8012ce0 <lwip_htons>
 8017da0:	4603      	mov	r3, r0
 8017da2:	b2db      	uxtb	r3, r3
 8017da4:	f003 0301 	and.w	r3, r3, #1
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d01e      	beq.n	8017dea <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8017dac:	4b64      	ldr	r3, [pc, #400]	@ (8017f40 <tcp_receive+0x888>)
 8017dae:	68db      	ldr	r3, [r3, #12]
 8017db0:	899b      	ldrh	r3, [r3, #12]
 8017db2:	b29b      	uxth	r3, r3
 8017db4:	b21b      	sxth	r3, r3
 8017db6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017dba:	b21c      	sxth	r4, r3
 8017dbc:	4b60      	ldr	r3, [pc, #384]	@ (8017f40 <tcp_receive+0x888>)
 8017dbe:	68db      	ldr	r3, [r3, #12]
 8017dc0:	899b      	ldrh	r3, [r3, #12]
 8017dc2:	b29b      	uxth	r3, r3
 8017dc4:	4618      	mov	r0, r3
 8017dc6:	f7fa ff8b 	bl	8012ce0 <lwip_htons>
 8017dca:	4603      	mov	r3, r0
 8017dcc:	b2db      	uxtb	r3, r3
 8017dce:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8017dd2:	b29b      	uxth	r3, r3
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	f7fa ff83 	bl	8012ce0 <lwip_htons>
 8017dda:	4603      	mov	r3, r0
 8017ddc:	b21b      	sxth	r3, r3
 8017dde:	4323      	orrs	r3, r4
 8017de0:	b21a      	sxth	r2, r3
 8017de2:	4b57      	ldr	r3, [pc, #348]	@ (8017f40 <tcp_receive+0x888>)
 8017de4:	68db      	ldr	r3, [r3, #12]
 8017de6:	b292      	uxth	r2, r2
 8017de8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8017dee:	4b54      	ldr	r3, [pc, #336]	@ (8017f40 <tcp_receive+0x888>)
 8017df0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8017df2:	4b53      	ldr	r3, [pc, #332]	@ (8017f40 <tcp_receive+0x888>)
 8017df4:	68db      	ldr	r3, [r3, #12]
 8017df6:	899b      	ldrh	r3, [r3, #12]
 8017df8:	b29b      	uxth	r3, r3
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	f7fa ff70 	bl	8012ce0 <lwip_htons>
 8017e00:	4603      	mov	r3, r0
 8017e02:	b2db      	uxtb	r3, r3
 8017e04:	f003 0302 	and.w	r3, r3, #2
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d005      	beq.n	8017e18 <tcp_receive+0x760>
            inseg.len -= 1;
 8017e0c:	4b4c      	ldr	r3, [pc, #304]	@ (8017f40 <tcp_receive+0x888>)
 8017e0e:	891b      	ldrh	r3, [r3, #8]
 8017e10:	3b01      	subs	r3, #1
 8017e12:	b29a      	uxth	r2, r3
 8017e14:	4b4a      	ldr	r3, [pc, #296]	@ (8017f40 <tcp_receive+0x888>)
 8017e16:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8017e18:	4b49      	ldr	r3, [pc, #292]	@ (8017f40 <tcp_receive+0x888>)
 8017e1a:	685b      	ldr	r3, [r3, #4]
 8017e1c:	4a48      	ldr	r2, [pc, #288]	@ (8017f40 <tcp_receive+0x888>)
 8017e1e:	8912      	ldrh	r2, [r2, #8]
 8017e20:	4611      	mov	r1, r2
 8017e22:	4618      	mov	r0, r3
 8017e24:	f7fc f9c4 	bl	80141b0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8017e28:	4b45      	ldr	r3, [pc, #276]	@ (8017f40 <tcp_receive+0x888>)
 8017e2a:	891c      	ldrh	r4, [r3, #8]
 8017e2c:	4b44      	ldr	r3, [pc, #272]	@ (8017f40 <tcp_receive+0x888>)
 8017e2e:	68db      	ldr	r3, [r3, #12]
 8017e30:	899b      	ldrh	r3, [r3, #12]
 8017e32:	b29b      	uxth	r3, r3
 8017e34:	4618      	mov	r0, r3
 8017e36:	f7fa ff53 	bl	8012ce0 <lwip_htons>
 8017e3a:	4603      	mov	r3, r0
 8017e3c:	b2db      	uxtb	r3, r3
 8017e3e:	f003 0303 	and.w	r3, r3, #3
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d001      	beq.n	8017e4a <tcp_receive+0x792>
 8017e46:	2301      	movs	r3, #1
 8017e48:	e000      	b.n	8017e4c <tcp_receive+0x794>
 8017e4a:	2300      	movs	r3, #0
 8017e4c:	4423      	add	r3, r4
 8017e4e:	b29a      	uxth	r2, r3
 8017e50:	4b3c      	ldr	r3, [pc, #240]	@ (8017f44 <tcp_receive+0x88c>)
 8017e52:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017e54:	4b3b      	ldr	r3, [pc, #236]	@ (8017f44 <tcp_receive+0x88c>)
 8017e56:	881b      	ldrh	r3, [r3, #0]
 8017e58:	461a      	mov	r2, r3
 8017e5a:	4b38      	ldr	r3, [pc, #224]	@ (8017f3c <tcp_receive+0x884>)
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	441a      	add	r2, r3
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e64:	6879      	ldr	r1, [r7, #4]
 8017e66:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017e68:	440b      	add	r3, r1
 8017e6a:	429a      	cmp	r2, r3
 8017e6c:	d006      	beq.n	8017e7c <tcp_receive+0x7c4>
 8017e6e:	4b36      	ldr	r3, [pc, #216]	@ (8017f48 <tcp_receive+0x890>)
 8017e70:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8017e74:	4935      	ldr	r1, [pc, #212]	@ (8017f4c <tcp_receive+0x894>)
 8017e76:	4836      	ldr	r0, [pc, #216]	@ (8017f50 <tcp_receive+0x898>)
 8017e78:	f006 f90a 	bl	801e090 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	f000 80e6 	beq.w	8018052 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017e86:	4b2e      	ldr	r3, [pc, #184]	@ (8017f40 <tcp_receive+0x888>)
 8017e88:	68db      	ldr	r3, [r3, #12]
 8017e8a:	899b      	ldrh	r3, [r3, #12]
 8017e8c:	b29b      	uxth	r3, r3
 8017e8e:	4618      	mov	r0, r3
 8017e90:	f7fa ff26 	bl	8012ce0 <lwip_htons>
 8017e94:	4603      	mov	r3, r0
 8017e96:	b2db      	uxtb	r3, r3
 8017e98:	f003 0301 	and.w	r3, r3, #1
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d010      	beq.n	8017ec2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8017ea0:	e00a      	b.n	8017eb8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ea6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017eac:	681a      	ldr	r2, [r3, #0]
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8017eb2:	68f8      	ldr	r0, [r7, #12]
 8017eb4:	f7fd fd93 	bl	80159de <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d1f0      	bne.n	8017ea2 <tcp_receive+0x7ea>
 8017ec0:	e0c7      	b.n	8018052 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8017ec8:	e051      	b.n	8017f6e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017ecc:	68db      	ldr	r3, [r3, #12]
 8017ece:	899b      	ldrh	r3, [r3, #12]
 8017ed0:	b29b      	uxth	r3, r3
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	f7fa ff04 	bl	8012ce0 <lwip_htons>
 8017ed8:	4603      	mov	r3, r0
 8017eda:	b2db      	uxtb	r3, r3
 8017edc:	f003 0301 	and.w	r3, r3, #1
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d03c      	beq.n	8017f5e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8017ee4:	4b16      	ldr	r3, [pc, #88]	@ (8017f40 <tcp_receive+0x888>)
 8017ee6:	68db      	ldr	r3, [r3, #12]
 8017ee8:	899b      	ldrh	r3, [r3, #12]
 8017eea:	b29b      	uxth	r3, r3
 8017eec:	4618      	mov	r0, r3
 8017eee:	f7fa fef7 	bl	8012ce0 <lwip_htons>
 8017ef2:	4603      	mov	r3, r0
 8017ef4:	b2db      	uxtb	r3, r3
 8017ef6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d12f      	bne.n	8017f5e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8017efe:	4b10      	ldr	r3, [pc, #64]	@ (8017f40 <tcp_receive+0x888>)
 8017f00:	68db      	ldr	r3, [r3, #12]
 8017f02:	899b      	ldrh	r3, [r3, #12]
 8017f04:	b29c      	uxth	r4, r3
 8017f06:	2001      	movs	r0, #1
 8017f08:	f7fa feea 	bl	8012ce0 <lwip_htons>
 8017f0c:	4603      	mov	r3, r0
 8017f0e:	461a      	mov	r2, r3
 8017f10:	4b0b      	ldr	r3, [pc, #44]	@ (8017f40 <tcp_receive+0x888>)
 8017f12:	68db      	ldr	r3, [r3, #12]
 8017f14:	4322      	orrs	r2, r4
 8017f16:	b292      	uxth	r2, r2
 8017f18:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8017f1a:	4b09      	ldr	r3, [pc, #36]	@ (8017f40 <tcp_receive+0x888>)
 8017f1c:	891c      	ldrh	r4, [r3, #8]
 8017f1e:	4b08      	ldr	r3, [pc, #32]	@ (8017f40 <tcp_receive+0x888>)
 8017f20:	68db      	ldr	r3, [r3, #12]
 8017f22:	899b      	ldrh	r3, [r3, #12]
 8017f24:	b29b      	uxth	r3, r3
 8017f26:	4618      	mov	r0, r3
 8017f28:	f7fa feda 	bl	8012ce0 <lwip_htons>
 8017f2c:	4603      	mov	r3, r0
 8017f2e:	b2db      	uxtb	r3, r3
 8017f30:	f003 0303 	and.w	r3, r3, #3
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d00d      	beq.n	8017f54 <tcp_receive+0x89c>
 8017f38:	2301      	movs	r3, #1
 8017f3a:	e00c      	b.n	8017f56 <tcp_receive+0x89e>
 8017f3c:	200277e8 	.word	0x200277e8
 8017f40:	200277c8 	.word	0x200277c8
 8017f44:	200277f2 	.word	0x200277f2
 8017f48:	08020520 	.word	0x08020520
 8017f4c:	080208c8 	.word	0x080208c8
 8017f50:	0802056c 	.word	0x0802056c
 8017f54:	2300      	movs	r3, #0
 8017f56:	4423      	add	r3, r4
 8017f58:	b29a      	uxth	r2, r3
 8017f5a:	4b98      	ldr	r3, [pc, #608]	@ (80181bc <tcp_receive+0xb04>)
 8017f5c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8017f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f60:	613b      	str	r3, [r7, #16]
              next = next->next;
 8017f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8017f68:	6938      	ldr	r0, [r7, #16]
 8017f6a:	f7fd fd38 	bl	80159de <tcp_seg_free>
            while (next &&
 8017f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d00e      	beq.n	8017f92 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8017f74:	4b91      	ldr	r3, [pc, #580]	@ (80181bc <tcp_receive+0xb04>)
 8017f76:	881b      	ldrh	r3, [r3, #0]
 8017f78:	461a      	mov	r2, r3
 8017f7a:	4b91      	ldr	r3, [pc, #580]	@ (80181c0 <tcp_receive+0xb08>)
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	441a      	add	r2, r3
 8017f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f82:	68db      	ldr	r3, [r3, #12]
 8017f84:	685b      	ldr	r3, [r3, #4]
 8017f86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017f88:	8909      	ldrh	r1, [r1, #8]
 8017f8a:	440b      	add	r3, r1
 8017f8c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	da9b      	bge.n	8017eca <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8017f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d059      	beq.n	801804c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8017f98:	4b88      	ldr	r3, [pc, #544]	@ (80181bc <tcp_receive+0xb04>)
 8017f9a:	881b      	ldrh	r3, [r3, #0]
 8017f9c:	461a      	mov	r2, r3
 8017f9e:	4b88      	ldr	r3, [pc, #544]	@ (80181c0 <tcp_receive+0xb08>)
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	441a      	add	r2, r3
 8017fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017fa6:	68db      	ldr	r3, [r3, #12]
 8017fa8:	685b      	ldr	r3, [r3, #4]
 8017faa:	1ad3      	subs	r3, r2, r3
            if (next &&
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	dd4d      	ble.n	801804c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8017fb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017fb2:	68db      	ldr	r3, [r3, #12]
 8017fb4:	685b      	ldr	r3, [r3, #4]
 8017fb6:	b29a      	uxth	r2, r3
 8017fb8:	4b81      	ldr	r3, [pc, #516]	@ (80181c0 <tcp_receive+0xb08>)
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	b29b      	uxth	r3, r3
 8017fbe:	1ad3      	subs	r3, r2, r3
 8017fc0:	b29a      	uxth	r2, r3
 8017fc2:	4b80      	ldr	r3, [pc, #512]	@ (80181c4 <tcp_receive+0xb0c>)
 8017fc4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8017fc6:	4b7f      	ldr	r3, [pc, #508]	@ (80181c4 <tcp_receive+0xb0c>)
 8017fc8:	68db      	ldr	r3, [r3, #12]
 8017fca:	899b      	ldrh	r3, [r3, #12]
 8017fcc:	b29b      	uxth	r3, r3
 8017fce:	4618      	mov	r0, r3
 8017fd0:	f7fa fe86 	bl	8012ce0 <lwip_htons>
 8017fd4:	4603      	mov	r3, r0
 8017fd6:	b2db      	uxtb	r3, r3
 8017fd8:	f003 0302 	and.w	r3, r3, #2
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d005      	beq.n	8017fec <tcp_receive+0x934>
                inseg.len -= 1;
 8017fe0:	4b78      	ldr	r3, [pc, #480]	@ (80181c4 <tcp_receive+0xb0c>)
 8017fe2:	891b      	ldrh	r3, [r3, #8]
 8017fe4:	3b01      	subs	r3, #1
 8017fe6:	b29a      	uxth	r2, r3
 8017fe8:	4b76      	ldr	r3, [pc, #472]	@ (80181c4 <tcp_receive+0xb0c>)
 8017fea:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8017fec:	4b75      	ldr	r3, [pc, #468]	@ (80181c4 <tcp_receive+0xb0c>)
 8017fee:	685b      	ldr	r3, [r3, #4]
 8017ff0:	4a74      	ldr	r2, [pc, #464]	@ (80181c4 <tcp_receive+0xb0c>)
 8017ff2:	8912      	ldrh	r2, [r2, #8]
 8017ff4:	4611      	mov	r1, r2
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	f7fc f8da 	bl	80141b0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8017ffc:	4b71      	ldr	r3, [pc, #452]	@ (80181c4 <tcp_receive+0xb0c>)
 8017ffe:	891c      	ldrh	r4, [r3, #8]
 8018000:	4b70      	ldr	r3, [pc, #448]	@ (80181c4 <tcp_receive+0xb0c>)
 8018002:	68db      	ldr	r3, [r3, #12]
 8018004:	899b      	ldrh	r3, [r3, #12]
 8018006:	b29b      	uxth	r3, r3
 8018008:	4618      	mov	r0, r3
 801800a:	f7fa fe69 	bl	8012ce0 <lwip_htons>
 801800e:	4603      	mov	r3, r0
 8018010:	b2db      	uxtb	r3, r3
 8018012:	f003 0303 	and.w	r3, r3, #3
 8018016:	2b00      	cmp	r3, #0
 8018018:	d001      	beq.n	801801e <tcp_receive+0x966>
 801801a:	2301      	movs	r3, #1
 801801c:	e000      	b.n	8018020 <tcp_receive+0x968>
 801801e:	2300      	movs	r3, #0
 8018020:	4423      	add	r3, r4
 8018022:	b29a      	uxth	r2, r3
 8018024:	4b65      	ldr	r3, [pc, #404]	@ (80181bc <tcp_receive+0xb04>)
 8018026:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018028:	4b64      	ldr	r3, [pc, #400]	@ (80181bc <tcp_receive+0xb04>)
 801802a:	881b      	ldrh	r3, [r3, #0]
 801802c:	461a      	mov	r2, r3
 801802e:	4b64      	ldr	r3, [pc, #400]	@ (80181c0 <tcp_receive+0xb08>)
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	441a      	add	r2, r3
 8018034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018036:	68db      	ldr	r3, [r3, #12]
 8018038:	685b      	ldr	r3, [r3, #4]
 801803a:	429a      	cmp	r2, r3
 801803c:	d006      	beq.n	801804c <tcp_receive+0x994>
 801803e:	4b62      	ldr	r3, [pc, #392]	@ (80181c8 <tcp_receive+0xb10>)
 8018040:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8018044:	4961      	ldr	r1, [pc, #388]	@ (80181cc <tcp_receive+0xb14>)
 8018046:	4862      	ldr	r0, [pc, #392]	@ (80181d0 <tcp_receive+0xb18>)
 8018048:	f006 f822 	bl	801e090 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8018050:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8018052:	4b5a      	ldr	r3, [pc, #360]	@ (80181bc <tcp_receive+0xb04>)
 8018054:	881b      	ldrh	r3, [r3, #0]
 8018056:	461a      	mov	r2, r3
 8018058:	4b59      	ldr	r3, [pc, #356]	@ (80181c0 <tcp_receive+0xb08>)
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	441a      	add	r2, r3
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018066:	4b55      	ldr	r3, [pc, #340]	@ (80181bc <tcp_receive+0xb04>)
 8018068:	881b      	ldrh	r3, [r3, #0]
 801806a:	429a      	cmp	r2, r3
 801806c:	d206      	bcs.n	801807c <tcp_receive+0x9c4>
 801806e:	4b56      	ldr	r3, [pc, #344]	@ (80181c8 <tcp_receive+0xb10>)
 8018070:	f240 6207 	movw	r2, #1543	@ 0x607
 8018074:	4957      	ldr	r1, [pc, #348]	@ (80181d4 <tcp_receive+0xb1c>)
 8018076:	4856      	ldr	r0, [pc, #344]	@ (80181d0 <tcp_receive+0xb18>)
 8018078:	f006 f80a 	bl	801e090 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018080:	4b4e      	ldr	r3, [pc, #312]	@ (80181bc <tcp_receive+0xb04>)
 8018082:	881b      	ldrh	r3, [r3, #0]
 8018084:	1ad3      	subs	r3, r2, r3
 8018086:	b29a      	uxth	r2, r3
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801808c:	6878      	ldr	r0, [r7, #4]
 801808e:	f7fc ffc5 	bl	801501c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8018092:	4b4c      	ldr	r3, [pc, #304]	@ (80181c4 <tcp_receive+0xb0c>)
 8018094:	685b      	ldr	r3, [r3, #4]
 8018096:	891b      	ldrh	r3, [r3, #8]
 8018098:	2b00      	cmp	r3, #0
 801809a:	d006      	beq.n	80180aa <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801809c:	4b49      	ldr	r3, [pc, #292]	@ (80181c4 <tcp_receive+0xb0c>)
 801809e:	685b      	ldr	r3, [r3, #4]
 80180a0:	4a4d      	ldr	r2, [pc, #308]	@ (80181d8 <tcp_receive+0xb20>)
 80180a2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80180a4:	4b47      	ldr	r3, [pc, #284]	@ (80181c4 <tcp_receive+0xb0c>)
 80180a6:	2200      	movs	r2, #0
 80180a8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80180aa:	4b46      	ldr	r3, [pc, #280]	@ (80181c4 <tcp_receive+0xb0c>)
 80180ac:	68db      	ldr	r3, [r3, #12]
 80180ae:	899b      	ldrh	r3, [r3, #12]
 80180b0:	b29b      	uxth	r3, r3
 80180b2:	4618      	mov	r0, r3
 80180b4:	f7fa fe14 	bl	8012ce0 <lwip_htons>
 80180b8:	4603      	mov	r3, r0
 80180ba:	b2db      	uxtb	r3, r3
 80180bc:	f003 0301 	and.w	r3, r3, #1
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	f000 80b8 	beq.w	8018236 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80180c6:	4b45      	ldr	r3, [pc, #276]	@ (80181dc <tcp_receive+0xb24>)
 80180c8:	781b      	ldrb	r3, [r3, #0]
 80180ca:	f043 0320 	orr.w	r3, r3, #32
 80180ce:	b2da      	uxtb	r2, r3
 80180d0:	4b42      	ldr	r3, [pc, #264]	@ (80181dc <tcp_receive+0xb24>)
 80180d2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80180d4:	e0af      	b.n	8018236 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80180da:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80180e0:	68db      	ldr	r3, [r3, #12]
 80180e2:	685b      	ldr	r3, [r3, #4]
 80180e4:	4a36      	ldr	r2, [pc, #216]	@ (80181c0 <tcp_receive+0xb08>)
 80180e6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80180e8:	68bb      	ldr	r3, [r7, #8]
 80180ea:	891b      	ldrh	r3, [r3, #8]
 80180ec:	461c      	mov	r4, r3
 80180ee:	68bb      	ldr	r3, [r7, #8]
 80180f0:	68db      	ldr	r3, [r3, #12]
 80180f2:	899b      	ldrh	r3, [r3, #12]
 80180f4:	b29b      	uxth	r3, r3
 80180f6:	4618      	mov	r0, r3
 80180f8:	f7fa fdf2 	bl	8012ce0 <lwip_htons>
 80180fc:	4603      	mov	r3, r0
 80180fe:	b2db      	uxtb	r3, r3
 8018100:	f003 0303 	and.w	r3, r3, #3
 8018104:	2b00      	cmp	r3, #0
 8018106:	d001      	beq.n	801810c <tcp_receive+0xa54>
 8018108:	2301      	movs	r3, #1
 801810a:	e000      	b.n	801810e <tcp_receive+0xa56>
 801810c:	2300      	movs	r3, #0
 801810e:	191a      	adds	r2, r3, r4
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018114:	441a      	add	r2, r3
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801811e:	461c      	mov	r4, r3
 8018120:	68bb      	ldr	r3, [r7, #8]
 8018122:	891b      	ldrh	r3, [r3, #8]
 8018124:	461d      	mov	r5, r3
 8018126:	68bb      	ldr	r3, [r7, #8]
 8018128:	68db      	ldr	r3, [r3, #12]
 801812a:	899b      	ldrh	r3, [r3, #12]
 801812c:	b29b      	uxth	r3, r3
 801812e:	4618      	mov	r0, r3
 8018130:	f7fa fdd6 	bl	8012ce0 <lwip_htons>
 8018134:	4603      	mov	r3, r0
 8018136:	b2db      	uxtb	r3, r3
 8018138:	f003 0303 	and.w	r3, r3, #3
 801813c:	2b00      	cmp	r3, #0
 801813e:	d001      	beq.n	8018144 <tcp_receive+0xa8c>
 8018140:	2301      	movs	r3, #1
 8018142:	e000      	b.n	8018146 <tcp_receive+0xa8e>
 8018144:	2300      	movs	r3, #0
 8018146:	442b      	add	r3, r5
 8018148:	429c      	cmp	r4, r3
 801814a:	d206      	bcs.n	801815a <tcp_receive+0xaa2>
 801814c:	4b1e      	ldr	r3, [pc, #120]	@ (80181c8 <tcp_receive+0xb10>)
 801814e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8018152:	4923      	ldr	r1, [pc, #140]	@ (80181e0 <tcp_receive+0xb28>)
 8018154:	481e      	ldr	r0, [pc, #120]	@ (80181d0 <tcp_receive+0xb18>)
 8018156:	f005 ff9b 	bl	801e090 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801815a:	68bb      	ldr	r3, [r7, #8]
 801815c:	891b      	ldrh	r3, [r3, #8]
 801815e:	461c      	mov	r4, r3
 8018160:	68bb      	ldr	r3, [r7, #8]
 8018162:	68db      	ldr	r3, [r3, #12]
 8018164:	899b      	ldrh	r3, [r3, #12]
 8018166:	b29b      	uxth	r3, r3
 8018168:	4618      	mov	r0, r3
 801816a:	f7fa fdb9 	bl	8012ce0 <lwip_htons>
 801816e:	4603      	mov	r3, r0
 8018170:	b2db      	uxtb	r3, r3
 8018172:	f003 0303 	and.w	r3, r3, #3
 8018176:	2b00      	cmp	r3, #0
 8018178:	d001      	beq.n	801817e <tcp_receive+0xac6>
 801817a:	2301      	movs	r3, #1
 801817c:	e000      	b.n	8018180 <tcp_receive+0xac8>
 801817e:	2300      	movs	r3, #0
 8018180:	1919      	adds	r1, r3, r4
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018186:	b28b      	uxth	r3, r1
 8018188:	1ad3      	subs	r3, r2, r3
 801818a:	b29a      	uxth	r2, r3
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8018190:	6878      	ldr	r0, [r7, #4]
 8018192:	f7fc ff43 	bl	801501c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8018196:	68bb      	ldr	r3, [r7, #8]
 8018198:	685b      	ldr	r3, [r3, #4]
 801819a:	891b      	ldrh	r3, [r3, #8]
 801819c:	2b00      	cmp	r3, #0
 801819e:	d028      	beq.n	80181f2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80181a0:	4b0d      	ldr	r3, [pc, #52]	@ (80181d8 <tcp_receive+0xb20>)
 80181a2:	681b      	ldr	r3, [r3, #0]
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d01d      	beq.n	80181e4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80181a8:	4b0b      	ldr	r3, [pc, #44]	@ (80181d8 <tcp_receive+0xb20>)
 80181aa:	681a      	ldr	r2, [r3, #0]
 80181ac:	68bb      	ldr	r3, [r7, #8]
 80181ae:	685b      	ldr	r3, [r3, #4]
 80181b0:	4619      	mov	r1, r3
 80181b2:	4610      	mov	r0, r2
 80181b4:	f7fc fa50 	bl	8014658 <pbuf_cat>
 80181b8:	e018      	b.n	80181ec <tcp_receive+0xb34>
 80181ba:	bf00      	nop
 80181bc:	200277f2 	.word	0x200277f2
 80181c0:	200277e8 	.word	0x200277e8
 80181c4:	200277c8 	.word	0x200277c8
 80181c8:	08020520 	.word	0x08020520
 80181cc:	08020900 	.word	0x08020900
 80181d0:	0802056c 	.word	0x0802056c
 80181d4:	0802093c 	.word	0x0802093c
 80181d8:	200277f8 	.word	0x200277f8
 80181dc:	200277f5 	.word	0x200277f5
 80181e0:	0802095c 	.word	0x0802095c
            } else {
              recv_data = cseg->p;
 80181e4:	68bb      	ldr	r3, [r7, #8]
 80181e6:	685b      	ldr	r3, [r3, #4]
 80181e8:	4a70      	ldr	r2, [pc, #448]	@ (80183ac <tcp_receive+0xcf4>)
 80181ea:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80181ec:	68bb      	ldr	r3, [r7, #8]
 80181ee:	2200      	movs	r2, #0
 80181f0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80181f2:	68bb      	ldr	r3, [r7, #8]
 80181f4:	68db      	ldr	r3, [r3, #12]
 80181f6:	899b      	ldrh	r3, [r3, #12]
 80181f8:	b29b      	uxth	r3, r3
 80181fa:	4618      	mov	r0, r3
 80181fc:	f7fa fd70 	bl	8012ce0 <lwip_htons>
 8018200:	4603      	mov	r3, r0
 8018202:	b2db      	uxtb	r3, r3
 8018204:	f003 0301 	and.w	r3, r3, #1
 8018208:	2b00      	cmp	r3, #0
 801820a:	d00d      	beq.n	8018228 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801820c:	4b68      	ldr	r3, [pc, #416]	@ (80183b0 <tcp_receive+0xcf8>)
 801820e:	781b      	ldrb	r3, [r3, #0]
 8018210:	f043 0320 	orr.w	r3, r3, #32
 8018214:	b2da      	uxtb	r2, r3
 8018216:	4b66      	ldr	r3, [pc, #408]	@ (80183b0 <tcp_receive+0xcf8>)
 8018218:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	7d1b      	ldrb	r3, [r3, #20]
 801821e:	2b04      	cmp	r3, #4
 8018220:	d102      	bne.n	8018228 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	2207      	movs	r2, #7
 8018226:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018228:	68bb      	ldr	r3, [r7, #8]
 801822a:	681a      	ldr	r2, [r3, #0]
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8018230:	68b8      	ldr	r0, [r7, #8]
 8018232:	f7fd fbd4 	bl	80159de <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801823a:	2b00      	cmp	r3, #0
 801823c:	d008      	beq.n	8018250 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018242:	68db      	ldr	r3, [r3, #12]
 8018244:	685a      	ldr	r2, [r3, #4]
 8018246:	687b      	ldr	r3, [r7, #4]
 8018248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801824a:	429a      	cmp	r2, r3
 801824c:	f43f af43 	beq.w	80180d6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	8b5b      	ldrh	r3, [r3, #26]
 8018254:	f003 0301 	and.w	r3, r3, #1
 8018258:	2b00      	cmp	r3, #0
 801825a:	d00e      	beq.n	801827a <tcp_receive+0xbc2>
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	8b5b      	ldrh	r3, [r3, #26]
 8018260:	f023 0301 	bic.w	r3, r3, #1
 8018264:	b29a      	uxth	r2, r3
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	835a      	strh	r2, [r3, #26]
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	8b5b      	ldrh	r3, [r3, #26]
 801826e:	f043 0302 	orr.w	r3, r3, #2
 8018272:	b29a      	uxth	r2, r3
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018278:	e187      	b.n	801858a <tcp_receive+0xed2>
        tcp_ack(pcb);
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	8b5b      	ldrh	r3, [r3, #26]
 801827e:	f043 0301 	orr.w	r3, r3, #1
 8018282:	b29a      	uxth	r2, r3
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018288:	e17f      	b.n	801858a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801828e:	2b00      	cmp	r3, #0
 8018290:	d106      	bne.n	80182a0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8018292:	4848      	ldr	r0, [pc, #288]	@ (80183b4 <tcp_receive+0xcfc>)
 8018294:	f7fd fbbc 	bl	8015a10 <tcp_seg_copy>
 8018298:	4602      	mov	r2, r0
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	675a      	str	r2, [r3, #116]	@ 0x74
 801829e:	e16c      	b.n	801857a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80182a0:	2300      	movs	r3, #0
 80182a2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80182a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80182aa:	e156      	b.n	801855a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80182ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182ae:	68db      	ldr	r3, [r3, #12]
 80182b0:	685a      	ldr	r2, [r3, #4]
 80182b2:	4b41      	ldr	r3, [pc, #260]	@ (80183b8 <tcp_receive+0xd00>)
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	429a      	cmp	r2, r3
 80182b8:	d11d      	bne.n	80182f6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80182ba:	4b3e      	ldr	r3, [pc, #248]	@ (80183b4 <tcp_receive+0xcfc>)
 80182bc:	891a      	ldrh	r2, [r3, #8]
 80182be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80182c0:	891b      	ldrh	r3, [r3, #8]
 80182c2:	429a      	cmp	r2, r3
 80182c4:	f240 814e 	bls.w	8018564 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80182c8:	483a      	ldr	r0, [pc, #232]	@ (80183b4 <tcp_receive+0xcfc>)
 80182ca:	f7fd fba1 	bl	8015a10 <tcp_seg_copy>
 80182ce:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80182d0:	697b      	ldr	r3, [r7, #20]
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	f000 8148 	beq.w	8018568 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80182d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d003      	beq.n	80182e6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80182de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80182e0:	697a      	ldr	r2, [r7, #20]
 80182e2:	601a      	str	r2, [r3, #0]
 80182e4:	e002      	b.n	80182ec <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	697a      	ldr	r2, [r7, #20]
 80182ea:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80182ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80182ee:	6978      	ldr	r0, [r7, #20]
 80182f0:	f7ff f8de 	bl	80174b0 <tcp_oos_insert_segment>
                }
                break;
 80182f4:	e138      	b.n	8018568 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80182f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d117      	bne.n	801832c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80182fc:	4b2e      	ldr	r3, [pc, #184]	@ (80183b8 <tcp_receive+0xd00>)
 80182fe:	681a      	ldr	r2, [r3, #0]
 8018300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018302:	68db      	ldr	r3, [r3, #12]
 8018304:	685b      	ldr	r3, [r3, #4]
 8018306:	1ad3      	subs	r3, r2, r3
 8018308:	2b00      	cmp	r3, #0
 801830a:	da57      	bge.n	80183bc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801830c:	4829      	ldr	r0, [pc, #164]	@ (80183b4 <tcp_receive+0xcfc>)
 801830e:	f7fd fb7f 	bl	8015a10 <tcp_seg_copy>
 8018312:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018314:	69bb      	ldr	r3, [r7, #24]
 8018316:	2b00      	cmp	r3, #0
 8018318:	f000 8128 	beq.w	801856c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	69ba      	ldr	r2, [r7, #24]
 8018320:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8018322:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018324:	69b8      	ldr	r0, [r7, #24]
 8018326:	f7ff f8c3 	bl	80174b0 <tcp_oos_insert_segment>
                  }
                  break;
 801832a:	e11f      	b.n	801856c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801832c:	4b22      	ldr	r3, [pc, #136]	@ (80183b8 <tcp_receive+0xd00>)
 801832e:	681a      	ldr	r2, [r3, #0]
 8018330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018332:	68db      	ldr	r3, [r3, #12]
 8018334:	685b      	ldr	r3, [r3, #4]
 8018336:	1ad3      	subs	r3, r2, r3
 8018338:	3b01      	subs	r3, #1
 801833a:	2b00      	cmp	r3, #0
 801833c:	db3e      	blt.n	80183bc <tcp_receive+0xd04>
 801833e:	4b1e      	ldr	r3, [pc, #120]	@ (80183b8 <tcp_receive+0xd00>)
 8018340:	681a      	ldr	r2, [r3, #0]
 8018342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018344:	68db      	ldr	r3, [r3, #12]
 8018346:	685b      	ldr	r3, [r3, #4]
 8018348:	1ad3      	subs	r3, r2, r3
 801834a:	3301      	adds	r3, #1
 801834c:	2b00      	cmp	r3, #0
 801834e:	dc35      	bgt.n	80183bc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018350:	4818      	ldr	r0, [pc, #96]	@ (80183b4 <tcp_receive+0xcfc>)
 8018352:	f7fd fb5d 	bl	8015a10 <tcp_seg_copy>
 8018356:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8018358:	69fb      	ldr	r3, [r7, #28]
 801835a:	2b00      	cmp	r3, #0
 801835c:	f000 8108 	beq.w	8018570 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8018360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018362:	68db      	ldr	r3, [r3, #12]
 8018364:	685b      	ldr	r3, [r3, #4]
 8018366:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018368:	8912      	ldrh	r2, [r2, #8]
 801836a:	441a      	add	r2, r3
 801836c:	4b12      	ldr	r3, [pc, #72]	@ (80183b8 <tcp_receive+0xd00>)
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	1ad3      	subs	r3, r2, r3
 8018372:	2b00      	cmp	r3, #0
 8018374:	dd12      	ble.n	801839c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018376:	4b10      	ldr	r3, [pc, #64]	@ (80183b8 <tcp_receive+0xd00>)
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	b29a      	uxth	r2, r3
 801837c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801837e:	68db      	ldr	r3, [r3, #12]
 8018380:	685b      	ldr	r3, [r3, #4]
 8018382:	b29b      	uxth	r3, r3
 8018384:	1ad3      	subs	r3, r2, r3
 8018386:	b29a      	uxth	r2, r3
 8018388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801838a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801838c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801838e:	685a      	ldr	r2, [r3, #4]
 8018390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018392:	891b      	ldrh	r3, [r3, #8]
 8018394:	4619      	mov	r1, r3
 8018396:	4610      	mov	r0, r2
 8018398:	f7fb ff0a 	bl	80141b0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801839c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801839e:	69fa      	ldr	r2, [r7, #28]
 80183a0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80183a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80183a4:	69f8      	ldr	r0, [r7, #28]
 80183a6:	f7ff f883 	bl	80174b0 <tcp_oos_insert_segment>
                  }
                  break;
 80183aa:	e0e1      	b.n	8018570 <tcp_receive+0xeb8>
 80183ac:	200277f8 	.word	0x200277f8
 80183b0:	200277f5 	.word	0x200277f5
 80183b4:	200277c8 	.word	0x200277c8
 80183b8:	200277e8 	.word	0x200277e8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80183bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183be:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80183c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	f040 80c5 	bne.w	8018554 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80183ca:	4b7f      	ldr	r3, [pc, #508]	@ (80185c8 <tcp_receive+0xf10>)
 80183cc:	681a      	ldr	r2, [r3, #0]
 80183ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183d0:	68db      	ldr	r3, [r3, #12]
 80183d2:	685b      	ldr	r3, [r3, #4]
 80183d4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	f340 80bc 	ble.w	8018554 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80183dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80183de:	68db      	ldr	r3, [r3, #12]
 80183e0:	899b      	ldrh	r3, [r3, #12]
 80183e2:	b29b      	uxth	r3, r3
 80183e4:	4618      	mov	r0, r3
 80183e6:	f7fa fc7b 	bl	8012ce0 <lwip_htons>
 80183ea:	4603      	mov	r3, r0
 80183ec:	b2db      	uxtb	r3, r3
 80183ee:	f003 0301 	and.w	r3, r3, #1
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	f040 80be 	bne.w	8018574 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80183f8:	4874      	ldr	r0, [pc, #464]	@ (80185cc <tcp_receive+0xf14>)
 80183fa:	f7fd fb09 	bl	8015a10 <tcp_seg_copy>
 80183fe:	4602      	mov	r2, r0
 8018400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018402:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8018404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	2b00      	cmp	r3, #0
 801840a:	f000 80b5 	beq.w	8018578 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801840e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018410:	68db      	ldr	r3, [r3, #12]
 8018412:	685b      	ldr	r3, [r3, #4]
 8018414:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018416:	8912      	ldrh	r2, [r2, #8]
 8018418:	441a      	add	r2, r3
 801841a:	4b6b      	ldr	r3, [pc, #428]	@ (80185c8 <tcp_receive+0xf10>)
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	1ad3      	subs	r3, r2, r3
 8018420:	2b00      	cmp	r3, #0
 8018422:	dd12      	ble.n	801844a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018424:	4b68      	ldr	r3, [pc, #416]	@ (80185c8 <tcp_receive+0xf10>)
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	b29a      	uxth	r2, r3
 801842a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801842c:	68db      	ldr	r3, [r3, #12]
 801842e:	685b      	ldr	r3, [r3, #4]
 8018430:	b29b      	uxth	r3, r3
 8018432:	1ad3      	subs	r3, r2, r3
 8018434:	b29a      	uxth	r2, r3
 8018436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018438:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801843a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801843c:	685a      	ldr	r2, [r3, #4]
 801843e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018440:	891b      	ldrh	r3, [r3, #8]
 8018442:	4619      	mov	r1, r3
 8018444:	4610      	mov	r0, r2
 8018446:	f7fb feb3 	bl	80141b0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801844a:	4b61      	ldr	r3, [pc, #388]	@ (80185d0 <tcp_receive+0xf18>)
 801844c:	881b      	ldrh	r3, [r3, #0]
 801844e:	461a      	mov	r2, r3
 8018450:	4b5d      	ldr	r3, [pc, #372]	@ (80185c8 <tcp_receive+0xf10>)
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	441a      	add	r2, r3
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801845a:	6879      	ldr	r1, [r7, #4]
 801845c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801845e:	440b      	add	r3, r1
 8018460:	1ad3      	subs	r3, r2, r3
 8018462:	2b00      	cmp	r3, #0
 8018464:	f340 8088 	ble.w	8018578 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	68db      	ldr	r3, [r3, #12]
 801846e:	899b      	ldrh	r3, [r3, #12]
 8018470:	b29b      	uxth	r3, r3
 8018472:	4618      	mov	r0, r3
 8018474:	f7fa fc34 	bl	8012ce0 <lwip_htons>
 8018478:	4603      	mov	r3, r0
 801847a:	b2db      	uxtb	r3, r3
 801847c:	f003 0301 	and.w	r3, r3, #1
 8018480:	2b00      	cmp	r3, #0
 8018482:	d021      	beq.n	80184c8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8018484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	68db      	ldr	r3, [r3, #12]
 801848a:	899b      	ldrh	r3, [r3, #12]
 801848c:	b29b      	uxth	r3, r3
 801848e:	b21b      	sxth	r3, r3
 8018490:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8018494:	b21c      	sxth	r4, r3
 8018496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	68db      	ldr	r3, [r3, #12]
 801849c:	899b      	ldrh	r3, [r3, #12]
 801849e:	b29b      	uxth	r3, r3
 80184a0:	4618      	mov	r0, r3
 80184a2:	f7fa fc1d 	bl	8012ce0 <lwip_htons>
 80184a6:	4603      	mov	r3, r0
 80184a8:	b2db      	uxtb	r3, r3
 80184aa:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80184ae:	b29b      	uxth	r3, r3
 80184b0:	4618      	mov	r0, r3
 80184b2:	f7fa fc15 	bl	8012ce0 <lwip_htons>
 80184b6:	4603      	mov	r3, r0
 80184b8:	b21b      	sxth	r3, r3
 80184ba:	4323      	orrs	r3, r4
 80184bc:	b21a      	sxth	r2, r3
 80184be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	68db      	ldr	r3, [r3, #12]
 80184c4:	b292      	uxth	r2, r2
 80184c6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80184cc:	b29a      	uxth	r2, r3
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80184d2:	4413      	add	r3, r2
 80184d4:	b299      	uxth	r1, r3
 80184d6:	4b3c      	ldr	r3, [pc, #240]	@ (80185c8 <tcp_receive+0xf10>)
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	b29a      	uxth	r2, r3
 80184dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	1a8a      	subs	r2, r1, r2
 80184e2:	b292      	uxth	r2, r2
 80184e4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80184e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	685a      	ldr	r2, [r3, #4]
 80184ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	891b      	ldrh	r3, [r3, #8]
 80184f2:	4619      	mov	r1, r3
 80184f4:	4610      	mov	r0, r2
 80184f6:	f7fb fe5b 	bl	80141b0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80184fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	891c      	ldrh	r4, [r3, #8]
 8018500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018502:	681b      	ldr	r3, [r3, #0]
 8018504:	68db      	ldr	r3, [r3, #12]
 8018506:	899b      	ldrh	r3, [r3, #12]
 8018508:	b29b      	uxth	r3, r3
 801850a:	4618      	mov	r0, r3
 801850c:	f7fa fbe8 	bl	8012ce0 <lwip_htons>
 8018510:	4603      	mov	r3, r0
 8018512:	b2db      	uxtb	r3, r3
 8018514:	f003 0303 	and.w	r3, r3, #3
 8018518:	2b00      	cmp	r3, #0
 801851a:	d001      	beq.n	8018520 <tcp_receive+0xe68>
 801851c:	2301      	movs	r3, #1
 801851e:	e000      	b.n	8018522 <tcp_receive+0xe6a>
 8018520:	2300      	movs	r3, #0
 8018522:	4423      	add	r3, r4
 8018524:	b29a      	uxth	r2, r3
 8018526:	4b2a      	ldr	r3, [pc, #168]	@ (80185d0 <tcp_receive+0xf18>)
 8018528:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801852a:	4b29      	ldr	r3, [pc, #164]	@ (80185d0 <tcp_receive+0xf18>)
 801852c:	881b      	ldrh	r3, [r3, #0]
 801852e:	461a      	mov	r2, r3
 8018530:	4b25      	ldr	r3, [pc, #148]	@ (80185c8 <tcp_receive+0xf10>)
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	441a      	add	r2, r3
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801853a:	6879      	ldr	r1, [r7, #4]
 801853c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801853e:	440b      	add	r3, r1
 8018540:	429a      	cmp	r2, r3
 8018542:	d019      	beq.n	8018578 <tcp_receive+0xec0>
 8018544:	4b23      	ldr	r3, [pc, #140]	@ (80185d4 <tcp_receive+0xf1c>)
 8018546:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801854a:	4923      	ldr	r1, [pc, #140]	@ (80185d8 <tcp_receive+0xf20>)
 801854c:	4823      	ldr	r0, [pc, #140]	@ (80185dc <tcp_receive+0xf24>)
 801854e:	f005 fd9f 	bl	801e090 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8018552:	e011      	b.n	8018578 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	63bb      	str	r3, [r7, #56]	@ 0x38
 801855a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801855c:	2b00      	cmp	r3, #0
 801855e:	f47f aea5 	bne.w	80182ac <tcp_receive+0xbf4>
 8018562:	e00a      	b.n	801857a <tcp_receive+0xec2>
                break;
 8018564:	bf00      	nop
 8018566:	e008      	b.n	801857a <tcp_receive+0xec2>
                break;
 8018568:	bf00      	nop
 801856a:	e006      	b.n	801857a <tcp_receive+0xec2>
                  break;
 801856c:	bf00      	nop
 801856e:	e004      	b.n	801857a <tcp_receive+0xec2>
                  break;
 8018570:	bf00      	nop
 8018572:	e002      	b.n	801857a <tcp_receive+0xec2>
                  break;
 8018574:	bf00      	nop
 8018576:	e000      	b.n	801857a <tcp_receive+0xec2>
                break;
 8018578:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801857a:	6878      	ldr	r0, [r7, #4]
 801857c:	f001 fa30 	bl	80199e0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8018580:	e003      	b.n	801858a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8018582:	6878      	ldr	r0, [r7, #4]
 8018584:	f001 fa2c 	bl	80199e0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018588:	e01a      	b.n	80185c0 <tcp_receive+0xf08>
 801858a:	e019      	b.n	80185c0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801858c:	4b0e      	ldr	r3, [pc, #56]	@ (80185c8 <tcp_receive+0xf10>)
 801858e:	681a      	ldr	r2, [r3, #0]
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018594:	1ad3      	subs	r3, r2, r3
 8018596:	2b00      	cmp	r3, #0
 8018598:	db0a      	blt.n	80185b0 <tcp_receive+0xef8>
 801859a:	4b0b      	ldr	r3, [pc, #44]	@ (80185c8 <tcp_receive+0xf10>)
 801859c:	681a      	ldr	r2, [r3, #0]
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80185a2:	6879      	ldr	r1, [r7, #4]
 80185a4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80185a6:	440b      	add	r3, r1
 80185a8:	1ad3      	subs	r3, r2, r3
 80185aa:	3301      	adds	r3, #1
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	dd07      	ble.n	80185c0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	8b5b      	ldrh	r3, [r3, #26]
 80185b4:	f043 0302 	orr.w	r3, r3, #2
 80185b8:	b29a      	uxth	r2, r3
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80185be:	e7ff      	b.n	80185c0 <tcp_receive+0xf08>
 80185c0:	bf00      	nop
 80185c2:	3750      	adds	r7, #80	@ 0x50
 80185c4:	46bd      	mov	sp, r7
 80185c6:	bdb0      	pop	{r4, r5, r7, pc}
 80185c8:	200277e8 	.word	0x200277e8
 80185cc:	200277c8 	.word	0x200277c8
 80185d0:	200277f2 	.word	0x200277f2
 80185d4:	08020520 	.word	0x08020520
 80185d8:	080208c8 	.word	0x080208c8
 80185dc:	0802056c 	.word	0x0802056c

080185e0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80185e0:	b480      	push	{r7}
 80185e2:	b083      	sub	sp, #12
 80185e4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80185e6:	4b15      	ldr	r3, [pc, #84]	@ (801863c <tcp_get_next_optbyte+0x5c>)
 80185e8:	881b      	ldrh	r3, [r3, #0]
 80185ea:	1c5a      	adds	r2, r3, #1
 80185ec:	b291      	uxth	r1, r2
 80185ee:	4a13      	ldr	r2, [pc, #76]	@ (801863c <tcp_get_next_optbyte+0x5c>)
 80185f0:	8011      	strh	r1, [r2, #0]
 80185f2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80185f4:	4b12      	ldr	r3, [pc, #72]	@ (8018640 <tcp_get_next_optbyte+0x60>)
 80185f6:	681b      	ldr	r3, [r3, #0]
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	d004      	beq.n	8018606 <tcp_get_next_optbyte+0x26>
 80185fc:	4b11      	ldr	r3, [pc, #68]	@ (8018644 <tcp_get_next_optbyte+0x64>)
 80185fe:	881b      	ldrh	r3, [r3, #0]
 8018600:	88fa      	ldrh	r2, [r7, #6]
 8018602:	429a      	cmp	r2, r3
 8018604:	d208      	bcs.n	8018618 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8018606:	4b10      	ldr	r3, [pc, #64]	@ (8018648 <tcp_get_next_optbyte+0x68>)
 8018608:	681b      	ldr	r3, [r3, #0]
 801860a:	3314      	adds	r3, #20
 801860c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801860e:	88fb      	ldrh	r3, [r7, #6]
 8018610:	683a      	ldr	r2, [r7, #0]
 8018612:	4413      	add	r3, r2
 8018614:	781b      	ldrb	r3, [r3, #0]
 8018616:	e00b      	b.n	8018630 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018618:	88fb      	ldrh	r3, [r7, #6]
 801861a:	b2da      	uxtb	r2, r3
 801861c:	4b09      	ldr	r3, [pc, #36]	@ (8018644 <tcp_get_next_optbyte+0x64>)
 801861e:	881b      	ldrh	r3, [r3, #0]
 8018620:	b2db      	uxtb	r3, r3
 8018622:	1ad3      	subs	r3, r2, r3
 8018624:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8018626:	4b06      	ldr	r3, [pc, #24]	@ (8018640 <tcp_get_next_optbyte+0x60>)
 8018628:	681a      	ldr	r2, [r3, #0]
 801862a:	797b      	ldrb	r3, [r7, #5]
 801862c:	4413      	add	r3, r2
 801862e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018630:	4618      	mov	r0, r3
 8018632:	370c      	adds	r7, #12
 8018634:	46bd      	mov	sp, r7
 8018636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801863a:	4770      	bx	lr
 801863c:	200277e4 	.word	0x200277e4
 8018640:	200277e0 	.word	0x200277e0
 8018644:	200277de 	.word	0x200277de
 8018648:	200277d8 	.word	0x200277d8

0801864c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801864c:	b580      	push	{r7, lr}
 801864e:	b084      	sub	sp, #16
 8018650:	af00      	add	r7, sp, #0
 8018652:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	2b00      	cmp	r3, #0
 8018658:	d106      	bne.n	8018668 <tcp_parseopt+0x1c>
 801865a:	4b32      	ldr	r3, [pc, #200]	@ (8018724 <tcp_parseopt+0xd8>)
 801865c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8018660:	4931      	ldr	r1, [pc, #196]	@ (8018728 <tcp_parseopt+0xdc>)
 8018662:	4832      	ldr	r0, [pc, #200]	@ (801872c <tcp_parseopt+0xe0>)
 8018664:	f005 fd14 	bl	801e090 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8018668:	4b31      	ldr	r3, [pc, #196]	@ (8018730 <tcp_parseopt+0xe4>)
 801866a:	881b      	ldrh	r3, [r3, #0]
 801866c:	2b00      	cmp	r3, #0
 801866e:	d056      	beq.n	801871e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018670:	4b30      	ldr	r3, [pc, #192]	@ (8018734 <tcp_parseopt+0xe8>)
 8018672:	2200      	movs	r2, #0
 8018674:	801a      	strh	r2, [r3, #0]
 8018676:	e046      	b.n	8018706 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8018678:	f7ff ffb2 	bl	80185e0 <tcp_get_next_optbyte>
 801867c:	4603      	mov	r3, r0
 801867e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8018680:	7bfb      	ldrb	r3, [r7, #15]
 8018682:	2b02      	cmp	r3, #2
 8018684:	d006      	beq.n	8018694 <tcp_parseopt+0x48>
 8018686:	2b02      	cmp	r3, #2
 8018688:	dc2a      	bgt.n	80186e0 <tcp_parseopt+0x94>
 801868a:	2b00      	cmp	r3, #0
 801868c:	d042      	beq.n	8018714 <tcp_parseopt+0xc8>
 801868e:	2b01      	cmp	r3, #1
 8018690:	d038      	beq.n	8018704 <tcp_parseopt+0xb8>
 8018692:	e025      	b.n	80186e0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8018694:	f7ff ffa4 	bl	80185e0 <tcp_get_next_optbyte>
 8018698:	4603      	mov	r3, r0
 801869a:	2b04      	cmp	r3, #4
 801869c:	d13c      	bne.n	8018718 <tcp_parseopt+0xcc>
 801869e:	4b25      	ldr	r3, [pc, #148]	@ (8018734 <tcp_parseopt+0xe8>)
 80186a0:	881b      	ldrh	r3, [r3, #0]
 80186a2:	3301      	adds	r3, #1
 80186a4:	4a22      	ldr	r2, [pc, #136]	@ (8018730 <tcp_parseopt+0xe4>)
 80186a6:	8812      	ldrh	r2, [r2, #0]
 80186a8:	4293      	cmp	r3, r2
 80186aa:	da35      	bge.n	8018718 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80186ac:	f7ff ff98 	bl	80185e0 <tcp_get_next_optbyte>
 80186b0:	4603      	mov	r3, r0
 80186b2:	021b      	lsls	r3, r3, #8
 80186b4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80186b6:	f7ff ff93 	bl	80185e0 <tcp_get_next_optbyte>
 80186ba:	4603      	mov	r3, r0
 80186bc:	461a      	mov	r2, r3
 80186be:	89bb      	ldrh	r3, [r7, #12]
 80186c0:	4313      	orrs	r3, r2
 80186c2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80186c4:	89bb      	ldrh	r3, [r7, #12]
 80186c6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80186ca:	d804      	bhi.n	80186d6 <tcp_parseopt+0x8a>
 80186cc:	89bb      	ldrh	r3, [r7, #12]
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d001      	beq.n	80186d6 <tcp_parseopt+0x8a>
 80186d2:	89ba      	ldrh	r2, [r7, #12]
 80186d4:	e001      	b.n	80186da <tcp_parseopt+0x8e>
 80186d6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80186de:	e012      	b.n	8018706 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80186e0:	f7ff ff7e 	bl	80185e0 <tcp_get_next_optbyte>
 80186e4:	4603      	mov	r3, r0
 80186e6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80186e8:	7afb      	ldrb	r3, [r7, #11]
 80186ea:	2b01      	cmp	r3, #1
 80186ec:	d916      	bls.n	801871c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80186ee:	7afb      	ldrb	r3, [r7, #11]
 80186f0:	b29a      	uxth	r2, r3
 80186f2:	4b10      	ldr	r3, [pc, #64]	@ (8018734 <tcp_parseopt+0xe8>)
 80186f4:	881b      	ldrh	r3, [r3, #0]
 80186f6:	4413      	add	r3, r2
 80186f8:	b29b      	uxth	r3, r3
 80186fa:	3b02      	subs	r3, #2
 80186fc:	b29a      	uxth	r2, r3
 80186fe:	4b0d      	ldr	r3, [pc, #52]	@ (8018734 <tcp_parseopt+0xe8>)
 8018700:	801a      	strh	r2, [r3, #0]
 8018702:	e000      	b.n	8018706 <tcp_parseopt+0xba>
          break;
 8018704:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018706:	4b0b      	ldr	r3, [pc, #44]	@ (8018734 <tcp_parseopt+0xe8>)
 8018708:	881a      	ldrh	r2, [r3, #0]
 801870a:	4b09      	ldr	r3, [pc, #36]	@ (8018730 <tcp_parseopt+0xe4>)
 801870c:	881b      	ldrh	r3, [r3, #0]
 801870e:	429a      	cmp	r2, r3
 8018710:	d3b2      	bcc.n	8018678 <tcp_parseopt+0x2c>
 8018712:	e004      	b.n	801871e <tcp_parseopt+0xd2>
          return;
 8018714:	bf00      	nop
 8018716:	e002      	b.n	801871e <tcp_parseopt+0xd2>
            return;
 8018718:	bf00      	nop
 801871a:	e000      	b.n	801871e <tcp_parseopt+0xd2>
            return;
 801871c:	bf00      	nop
      }
    }
  }
}
 801871e:	3710      	adds	r7, #16
 8018720:	46bd      	mov	sp, r7
 8018722:	bd80      	pop	{r7, pc}
 8018724:	08020520 	.word	0x08020520
 8018728:	08020984 	.word	0x08020984
 801872c:	0802056c 	.word	0x0802056c
 8018730:	200277dc 	.word	0x200277dc
 8018734:	200277e4 	.word	0x200277e4

08018738 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8018738:	b480      	push	{r7}
 801873a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801873c:	4b05      	ldr	r3, [pc, #20]	@ (8018754 <tcp_trigger_input_pcb_close+0x1c>)
 801873e:	781b      	ldrb	r3, [r3, #0]
 8018740:	f043 0310 	orr.w	r3, r3, #16
 8018744:	b2da      	uxtb	r2, r3
 8018746:	4b03      	ldr	r3, [pc, #12]	@ (8018754 <tcp_trigger_input_pcb_close+0x1c>)
 8018748:	701a      	strb	r2, [r3, #0]
}
 801874a:	bf00      	nop
 801874c:	46bd      	mov	sp, r7
 801874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018752:	4770      	bx	lr
 8018754:	200277f5 	.word	0x200277f5

08018758 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8018758:	b580      	push	{r7, lr}
 801875a:	b084      	sub	sp, #16
 801875c:	af00      	add	r7, sp, #0
 801875e:	60f8      	str	r0, [r7, #12]
 8018760:	60b9      	str	r1, [r7, #8]
 8018762:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	2b00      	cmp	r3, #0
 8018768:	d00a      	beq.n	8018780 <tcp_route+0x28>
 801876a:	68fb      	ldr	r3, [r7, #12]
 801876c:	7a1b      	ldrb	r3, [r3, #8]
 801876e:	2b00      	cmp	r3, #0
 8018770:	d006      	beq.n	8018780 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	7a1b      	ldrb	r3, [r3, #8]
 8018776:	4618      	mov	r0, r3
 8018778:	f7fb fb12 	bl	8013da0 <netif_get_by_index>
 801877c:	4603      	mov	r3, r0
 801877e:	e003      	b.n	8018788 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8018780:	6878      	ldr	r0, [r7, #4]
 8018782:	f003 f959 	bl	801ba38 <ip4_route>
 8018786:	4603      	mov	r3, r0
  }
}
 8018788:	4618      	mov	r0, r3
 801878a:	3710      	adds	r7, #16
 801878c:	46bd      	mov	sp, r7
 801878e:	bd80      	pop	{r7, pc}

08018790 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8018790:	b590      	push	{r4, r7, lr}
 8018792:	b087      	sub	sp, #28
 8018794:	af00      	add	r7, sp, #0
 8018796:	60f8      	str	r0, [r7, #12]
 8018798:	60b9      	str	r1, [r7, #8]
 801879a:	603b      	str	r3, [r7, #0]
 801879c:	4613      	mov	r3, r2
 801879e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	2b00      	cmp	r3, #0
 80187a4:	d105      	bne.n	80187b2 <tcp_create_segment+0x22>
 80187a6:	4b43      	ldr	r3, [pc, #268]	@ (80188b4 <tcp_create_segment+0x124>)
 80187a8:	22a3      	movs	r2, #163	@ 0xa3
 80187aa:	4943      	ldr	r1, [pc, #268]	@ (80188b8 <tcp_create_segment+0x128>)
 80187ac:	4843      	ldr	r0, [pc, #268]	@ (80188bc <tcp_create_segment+0x12c>)
 80187ae:	f005 fc6f 	bl	801e090 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80187b2:	68bb      	ldr	r3, [r7, #8]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d105      	bne.n	80187c4 <tcp_create_segment+0x34>
 80187b8:	4b3e      	ldr	r3, [pc, #248]	@ (80188b4 <tcp_create_segment+0x124>)
 80187ba:	22a4      	movs	r2, #164	@ 0xa4
 80187bc:	4940      	ldr	r1, [pc, #256]	@ (80188c0 <tcp_create_segment+0x130>)
 80187be:	483f      	ldr	r0, [pc, #252]	@ (80188bc <tcp_create_segment+0x12c>)
 80187c0:	f005 fc66 	bl	801e090 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80187c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80187c8:	009b      	lsls	r3, r3, #2
 80187ca:	b2db      	uxtb	r3, r3
 80187cc:	f003 0304 	and.w	r3, r3, #4
 80187d0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80187d2:	2003      	movs	r0, #3
 80187d4:	f7fa ff58 	bl	8013688 <memp_malloc>
 80187d8:	6138      	str	r0, [r7, #16]
 80187da:	693b      	ldr	r3, [r7, #16]
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d104      	bne.n	80187ea <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80187e0:	68b8      	ldr	r0, [r7, #8]
 80187e2:	f7fb fe6b 	bl	80144bc <pbuf_free>
    return NULL;
 80187e6:	2300      	movs	r3, #0
 80187e8:	e060      	b.n	80188ac <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80187ea:	693b      	ldr	r3, [r7, #16]
 80187ec:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80187f0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80187f2:	693b      	ldr	r3, [r7, #16]
 80187f4:	2200      	movs	r2, #0
 80187f6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80187f8:	693b      	ldr	r3, [r7, #16]
 80187fa:	68ba      	ldr	r2, [r7, #8]
 80187fc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80187fe:	68bb      	ldr	r3, [r7, #8]
 8018800:	891a      	ldrh	r2, [r3, #8]
 8018802:	7dfb      	ldrb	r3, [r7, #23]
 8018804:	b29b      	uxth	r3, r3
 8018806:	429a      	cmp	r2, r3
 8018808:	d205      	bcs.n	8018816 <tcp_create_segment+0x86>
 801880a:	4b2a      	ldr	r3, [pc, #168]	@ (80188b4 <tcp_create_segment+0x124>)
 801880c:	22b0      	movs	r2, #176	@ 0xb0
 801880e:	492d      	ldr	r1, [pc, #180]	@ (80188c4 <tcp_create_segment+0x134>)
 8018810:	482a      	ldr	r0, [pc, #168]	@ (80188bc <tcp_create_segment+0x12c>)
 8018812:	f005 fc3d 	bl	801e090 <iprintf>
  seg->len = p->tot_len - optlen;
 8018816:	68bb      	ldr	r3, [r7, #8]
 8018818:	891a      	ldrh	r2, [r3, #8]
 801881a:	7dfb      	ldrb	r3, [r7, #23]
 801881c:	b29b      	uxth	r3, r3
 801881e:	1ad3      	subs	r3, r2, r3
 8018820:	b29a      	uxth	r2, r3
 8018822:	693b      	ldr	r3, [r7, #16]
 8018824:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018826:	2114      	movs	r1, #20
 8018828:	68b8      	ldr	r0, [r7, #8]
 801882a:	f7fb fdb1 	bl	8014390 <pbuf_add_header>
 801882e:	4603      	mov	r3, r0
 8018830:	2b00      	cmp	r3, #0
 8018832:	d004      	beq.n	801883e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018834:	6938      	ldr	r0, [r7, #16]
 8018836:	f7fd f8d2 	bl	80159de <tcp_seg_free>
    return NULL;
 801883a:	2300      	movs	r3, #0
 801883c:	e036      	b.n	80188ac <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801883e:	693b      	ldr	r3, [r7, #16]
 8018840:	685b      	ldr	r3, [r3, #4]
 8018842:	685a      	ldr	r2, [r3, #4]
 8018844:	693b      	ldr	r3, [r7, #16]
 8018846:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018848:	68fb      	ldr	r3, [r7, #12]
 801884a:	8ada      	ldrh	r2, [r3, #22]
 801884c:	693b      	ldr	r3, [r7, #16]
 801884e:	68dc      	ldr	r4, [r3, #12]
 8018850:	4610      	mov	r0, r2
 8018852:	f7fa fa45 	bl	8012ce0 <lwip_htons>
 8018856:	4603      	mov	r3, r0
 8018858:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801885a:	68fb      	ldr	r3, [r7, #12]
 801885c:	8b1a      	ldrh	r2, [r3, #24]
 801885e:	693b      	ldr	r3, [r7, #16]
 8018860:	68dc      	ldr	r4, [r3, #12]
 8018862:	4610      	mov	r0, r2
 8018864:	f7fa fa3c 	bl	8012ce0 <lwip_htons>
 8018868:	4603      	mov	r3, r0
 801886a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801886c:	693b      	ldr	r3, [r7, #16]
 801886e:	68dc      	ldr	r4, [r3, #12]
 8018870:	6838      	ldr	r0, [r7, #0]
 8018872:	f7fa fa4b 	bl	8012d0c <lwip_htonl>
 8018876:	4603      	mov	r3, r0
 8018878:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801887a:	7dfb      	ldrb	r3, [r7, #23]
 801887c:	089b      	lsrs	r3, r3, #2
 801887e:	b2db      	uxtb	r3, r3
 8018880:	3305      	adds	r3, #5
 8018882:	b29b      	uxth	r3, r3
 8018884:	031b      	lsls	r3, r3, #12
 8018886:	b29a      	uxth	r2, r3
 8018888:	79fb      	ldrb	r3, [r7, #7]
 801888a:	b29b      	uxth	r3, r3
 801888c:	4313      	orrs	r3, r2
 801888e:	b29a      	uxth	r2, r3
 8018890:	693b      	ldr	r3, [r7, #16]
 8018892:	68dc      	ldr	r4, [r3, #12]
 8018894:	4610      	mov	r0, r2
 8018896:	f7fa fa23 	bl	8012ce0 <lwip_htons>
 801889a:	4603      	mov	r3, r0
 801889c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801889e:	693b      	ldr	r3, [r7, #16]
 80188a0:	68db      	ldr	r3, [r3, #12]
 80188a2:	2200      	movs	r2, #0
 80188a4:	749a      	strb	r2, [r3, #18]
 80188a6:	2200      	movs	r2, #0
 80188a8:	74da      	strb	r2, [r3, #19]
  return seg;
 80188aa:	693b      	ldr	r3, [r7, #16]
}
 80188ac:	4618      	mov	r0, r3
 80188ae:	371c      	adds	r7, #28
 80188b0:	46bd      	mov	sp, r7
 80188b2:	bd90      	pop	{r4, r7, pc}
 80188b4:	080209a0 	.word	0x080209a0
 80188b8:	080209d4 	.word	0x080209d4
 80188bc:	080209f4 	.word	0x080209f4
 80188c0:	08020a1c 	.word	0x08020a1c
 80188c4:	08020a40 	.word	0x08020a40

080188c8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80188c8:	b590      	push	{r4, r7, lr}
 80188ca:	b08b      	sub	sp, #44	@ 0x2c
 80188cc:	af02      	add	r7, sp, #8
 80188ce:	6078      	str	r0, [r7, #4]
 80188d0:	460b      	mov	r3, r1
 80188d2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80188d4:	2300      	movs	r3, #0
 80188d6:	61fb      	str	r3, [r7, #28]
 80188d8:	2300      	movs	r3, #0
 80188da:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80188dc:	2300      	movs	r3, #0
 80188de:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d106      	bne.n	80188f4 <tcp_split_unsent_seg+0x2c>
 80188e6:	4b95      	ldr	r3, [pc, #596]	@ (8018b3c <tcp_split_unsent_seg+0x274>)
 80188e8:	f240 324b 	movw	r2, #843	@ 0x34b
 80188ec:	4994      	ldr	r1, [pc, #592]	@ (8018b40 <tcp_split_unsent_seg+0x278>)
 80188ee:	4895      	ldr	r0, [pc, #596]	@ (8018b44 <tcp_split_unsent_seg+0x27c>)
 80188f0:	f005 fbce 	bl	801e090 <iprintf>

  useg = pcb->unsent;
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80188f8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80188fa:	697b      	ldr	r3, [r7, #20]
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d102      	bne.n	8018906 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8018900:	f04f 33ff 	mov.w	r3, #4294967295
 8018904:	e116      	b.n	8018b34 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8018906:	887b      	ldrh	r3, [r7, #2]
 8018908:	2b00      	cmp	r3, #0
 801890a:	d109      	bne.n	8018920 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801890c:	4b8b      	ldr	r3, [pc, #556]	@ (8018b3c <tcp_split_unsent_seg+0x274>)
 801890e:	f240 3253 	movw	r2, #851	@ 0x353
 8018912:	498d      	ldr	r1, [pc, #564]	@ (8018b48 <tcp_split_unsent_seg+0x280>)
 8018914:	488b      	ldr	r0, [pc, #556]	@ (8018b44 <tcp_split_unsent_seg+0x27c>)
 8018916:	f005 fbbb 	bl	801e090 <iprintf>
    return ERR_VAL;
 801891a:	f06f 0305 	mvn.w	r3, #5
 801891e:	e109      	b.n	8018b34 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8018920:	697b      	ldr	r3, [r7, #20]
 8018922:	891b      	ldrh	r3, [r3, #8]
 8018924:	887a      	ldrh	r2, [r7, #2]
 8018926:	429a      	cmp	r2, r3
 8018928:	d301      	bcc.n	801892e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801892a:	2300      	movs	r3, #0
 801892c:	e102      	b.n	8018b34 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018932:	887a      	ldrh	r2, [r7, #2]
 8018934:	429a      	cmp	r2, r3
 8018936:	d906      	bls.n	8018946 <tcp_split_unsent_seg+0x7e>
 8018938:	4b80      	ldr	r3, [pc, #512]	@ (8018b3c <tcp_split_unsent_seg+0x274>)
 801893a:	f240 325b 	movw	r2, #859	@ 0x35b
 801893e:	4983      	ldr	r1, [pc, #524]	@ (8018b4c <tcp_split_unsent_seg+0x284>)
 8018940:	4880      	ldr	r0, [pc, #512]	@ (8018b44 <tcp_split_unsent_seg+0x27c>)
 8018942:	f005 fba5 	bl	801e090 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8018946:	697b      	ldr	r3, [r7, #20]
 8018948:	891b      	ldrh	r3, [r3, #8]
 801894a:	2b00      	cmp	r3, #0
 801894c:	d106      	bne.n	801895c <tcp_split_unsent_seg+0x94>
 801894e:	4b7b      	ldr	r3, [pc, #492]	@ (8018b3c <tcp_split_unsent_seg+0x274>)
 8018950:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8018954:	497e      	ldr	r1, [pc, #504]	@ (8018b50 <tcp_split_unsent_seg+0x288>)
 8018956:	487b      	ldr	r0, [pc, #492]	@ (8018b44 <tcp_split_unsent_seg+0x27c>)
 8018958:	f005 fb9a 	bl	801e090 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801895c:	697b      	ldr	r3, [r7, #20]
 801895e:	7a9b      	ldrb	r3, [r3, #10]
 8018960:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8018962:	7bfb      	ldrb	r3, [r7, #15]
 8018964:	009b      	lsls	r3, r3, #2
 8018966:	b2db      	uxtb	r3, r3
 8018968:	f003 0304 	and.w	r3, r3, #4
 801896c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801896e:	697b      	ldr	r3, [r7, #20]
 8018970:	891a      	ldrh	r2, [r3, #8]
 8018972:	887b      	ldrh	r3, [r7, #2]
 8018974:	1ad3      	subs	r3, r2, r3
 8018976:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8018978:	7bbb      	ldrb	r3, [r7, #14]
 801897a:	b29a      	uxth	r2, r3
 801897c:	89bb      	ldrh	r3, [r7, #12]
 801897e:	4413      	add	r3, r2
 8018980:	b29b      	uxth	r3, r3
 8018982:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018986:	4619      	mov	r1, r3
 8018988:	2036      	movs	r0, #54	@ 0x36
 801898a:	f7fb fab3 	bl	8013ef4 <pbuf_alloc>
 801898e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018990:	693b      	ldr	r3, [r7, #16]
 8018992:	2b00      	cmp	r3, #0
 8018994:	f000 80b7 	beq.w	8018b06 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8018998:	697b      	ldr	r3, [r7, #20]
 801899a:	685b      	ldr	r3, [r3, #4]
 801899c:	891a      	ldrh	r2, [r3, #8]
 801899e:	697b      	ldr	r3, [r7, #20]
 80189a0:	891b      	ldrh	r3, [r3, #8]
 80189a2:	1ad3      	subs	r3, r2, r3
 80189a4:	b29a      	uxth	r2, r3
 80189a6:	887b      	ldrh	r3, [r7, #2]
 80189a8:	4413      	add	r3, r2
 80189aa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80189ac:	697b      	ldr	r3, [r7, #20]
 80189ae:	6858      	ldr	r0, [r3, #4]
 80189b0:	693b      	ldr	r3, [r7, #16]
 80189b2:	685a      	ldr	r2, [r3, #4]
 80189b4:	7bbb      	ldrb	r3, [r7, #14]
 80189b6:	18d1      	adds	r1, r2, r3
 80189b8:	897b      	ldrh	r3, [r7, #10]
 80189ba:	89ba      	ldrh	r2, [r7, #12]
 80189bc:	f7fb ff84 	bl	80148c8 <pbuf_copy_partial>
 80189c0:	4603      	mov	r3, r0
 80189c2:	461a      	mov	r2, r3
 80189c4:	89bb      	ldrh	r3, [r7, #12]
 80189c6:	4293      	cmp	r3, r2
 80189c8:	f040 809f 	bne.w	8018b0a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80189cc:	697b      	ldr	r3, [r7, #20]
 80189ce:	68db      	ldr	r3, [r3, #12]
 80189d0:	899b      	ldrh	r3, [r3, #12]
 80189d2:	b29b      	uxth	r3, r3
 80189d4:	4618      	mov	r0, r3
 80189d6:	f7fa f983 	bl	8012ce0 <lwip_htons>
 80189da:	4603      	mov	r3, r0
 80189dc:	b2db      	uxtb	r3, r3
 80189de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80189e2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80189e4:	2300      	movs	r3, #0
 80189e6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80189e8:	7efb      	ldrb	r3, [r7, #27]
 80189ea:	f003 0308 	and.w	r3, r3, #8
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d007      	beq.n	8018a02 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80189f2:	7efb      	ldrb	r3, [r7, #27]
 80189f4:	f023 0308 	bic.w	r3, r3, #8
 80189f8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80189fa:	7ebb      	ldrb	r3, [r7, #26]
 80189fc:	f043 0308 	orr.w	r3, r3, #8
 8018a00:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8018a02:	7efb      	ldrb	r3, [r7, #27]
 8018a04:	f003 0301 	and.w	r3, r3, #1
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d007      	beq.n	8018a1c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8018a0c:	7efb      	ldrb	r3, [r7, #27]
 8018a0e:	f023 0301 	bic.w	r3, r3, #1
 8018a12:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8018a14:	7ebb      	ldrb	r3, [r7, #26]
 8018a16:	f043 0301 	orr.w	r3, r3, #1
 8018a1a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8018a1c:	697b      	ldr	r3, [r7, #20]
 8018a1e:	68db      	ldr	r3, [r3, #12]
 8018a20:	685b      	ldr	r3, [r3, #4]
 8018a22:	4618      	mov	r0, r3
 8018a24:	f7fa f972 	bl	8012d0c <lwip_htonl>
 8018a28:	4602      	mov	r2, r0
 8018a2a:	887b      	ldrh	r3, [r7, #2]
 8018a2c:	18d1      	adds	r1, r2, r3
 8018a2e:	7eba      	ldrb	r2, [r7, #26]
 8018a30:	7bfb      	ldrb	r3, [r7, #15]
 8018a32:	9300      	str	r3, [sp, #0]
 8018a34:	460b      	mov	r3, r1
 8018a36:	6939      	ldr	r1, [r7, #16]
 8018a38:	6878      	ldr	r0, [r7, #4]
 8018a3a:	f7ff fea9 	bl	8018790 <tcp_create_segment>
 8018a3e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8018a40:	69fb      	ldr	r3, [r7, #28]
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d063      	beq.n	8018b0e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8018a46:	697b      	ldr	r3, [r7, #20]
 8018a48:	685b      	ldr	r3, [r3, #4]
 8018a4a:	4618      	mov	r0, r3
 8018a4c:	f7fb fdc4 	bl	80145d8 <pbuf_clen>
 8018a50:	4603      	mov	r3, r0
 8018a52:	461a      	mov	r2, r3
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018a5a:	1a9b      	subs	r3, r3, r2
 8018a5c:	b29a      	uxth	r2, r3
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8018a64:	697b      	ldr	r3, [r7, #20]
 8018a66:	6858      	ldr	r0, [r3, #4]
 8018a68:	697b      	ldr	r3, [r7, #20]
 8018a6a:	685b      	ldr	r3, [r3, #4]
 8018a6c:	891a      	ldrh	r2, [r3, #8]
 8018a6e:	89bb      	ldrh	r3, [r7, #12]
 8018a70:	1ad3      	subs	r3, r2, r3
 8018a72:	b29b      	uxth	r3, r3
 8018a74:	4619      	mov	r1, r3
 8018a76:	f7fb fb9b 	bl	80141b0 <pbuf_realloc>
  useg->len -= remainder;
 8018a7a:	697b      	ldr	r3, [r7, #20]
 8018a7c:	891a      	ldrh	r2, [r3, #8]
 8018a7e:	89bb      	ldrh	r3, [r7, #12]
 8018a80:	1ad3      	subs	r3, r2, r3
 8018a82:	b29a      	uxth	r2, r3
 8018a84:	697b      	ldr	r3, [r7, #20]
 8018a86:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8018a88:	697b      	ldr	r3, [r7, #20]
 8018a8a:	68db      	ldr	r3, [r3, #12]
 8018a8c:	899b      	ldrh	r3, [r3, #12]
 8018a8e:	b29c      	uxth	r4, r3
 8018a90:	7efb      	ldrb	r3, [r7, #27]
 8018a92:	b29b      	uxth	r3, r3
 8018a94:	4618      	mov	r0, r3
 8018a96:	f7fa f923 	bl	8012ce0 <lwip_htons>
 8018a9a:	4603      	mov	r3, r0
 8018a9c:	461a      	mov	r2, r3
 8018a9e:	697b      	ldr	r3, [r7, #20]
 8018aa0:	68db      	ldr	r3, [r3, #12]
 8018aa2:	4322      	orrs	r2, r4
 8018aa4:	b292      	uxth	r2, r2
 8018aa6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8018aa8:	697b      	ldr	r3, [r7, #20]
 8018aaa:	685b      	ldr	r3, [r3, #4]
 8018aac:	4618      	mov	r0, r3
 8018aae:	f7fb fd93 	bl	80145d8 <pbuf_clen>
 8018ab2:	4603      	mov	r3, r0
 8018ab4:	461a      	mov	r2, r3
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018abc:	4413      	add	r3, r2
 8018abe:	b29a      	uxth	r2, r3
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018ac6:	69fb      	ldr	r3, [r7, #28]
 8018ac8:	685b      	ldr	r3, [r3, #4]
 8018aca:	4618      	mov	r0, r3
 8018acc:	f7fb fd84 	bl	80145d8 <pbuf_clen>
 8018ad0:	4603      	mov	r3, r0
 8018ad2:	461a      	mov	r2, r3
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018ada:	4413      	add	r3, r2
 8018adc:	b29a      	uxth	r2, r3
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8018ae4:	697b      	ldr	r3, [r7, #20]
 8018ae6:	681a      	ldr	r2, [r3, #0]
 8018ae8:	69fb      	ldr	r3, [r7, #28]
 8018aea:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8018aec:	697b      	ldr	r3, [r7, #20]
 8018aee:	69fa      	ldr	r2, [r7, #28]
 8018af0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8018af2:	69fb      	ldr	r3, [r7, #28]
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	2b00      	cmp	r3, #0
 8018af8:	d103      	bne.n	8018b02 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	2200      	movs	r2, #0
 8018afe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8018b02:	2300      	movs	r3, #0
 8018b04:	e016      	b.n	8018b34 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8018b06:	bf00      	nop
 8018b08:	e002      	b.n	8018b10 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8018b0a:	bf00      	nop
 8018b0c:	e000      	b.n	8018b10 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8018b0e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8018b10:	69fb      	ldr	r3, [r7, #28]
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	d006      	beq.n	8018b24 <tcp_split_unsent_seg+0x25c>
 8018b16:	4b09      	ldr	r3, [pc, #36]	@ (8018b3c <tcp_split_unsent_seg+0x274>)
 8018b18:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8018b1c:	490d      	ldr	r1, [pc, #52]	@ (8018b54 <tcp_split_unsent_seg+0x28c>)
 8018b1e:	4809      	ldr	r0, [pc, #36]	@ (8018b44 <tcp_split_unsent_seg+0x27c>)
 8018b20:	f005 fab6 	bl	801e090 <iprintf>
  if (p != NULL) {
 8018b24:	693b      	ldr	r3, [r7, #16]
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d002      	beq.n	8018b30 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8018b2a:	6938      	ldr	r0, [r7, #16]
 8018b2c:	f7fb fcc6 	bl	80144bc <pbuf_free>
  }

  return ERR_MEM;
 8018b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018b34:	4618      	mov	r0, r3
 8018b36:	3724      	adds	r7, #36	@ 0x24
 8018b38:	46bd      	mov	sp, r7
 8018b3a:	bd90      	pop	{r4, r7, pc}
 8018b3c:	080209a0 	.word	0x080209a0
 8018b40:	08020d34 	.word	0x08020d34
 8018b44:	080209f4 	.word	0x080209f4
 8018b48:	08020d58 	.word	0x08020d58
 8018b4c:	08020d7c 	.word	0x08020d7c
 8018b50:	08020d8c 	.word	0x08020d8c
 8018b54:	08020d9c 	.word	0x08020d9c

08018b58 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8018b58:	b590      	push	{r4, r7, lr}
 8018b5a:	b085      	sub	sp, #20
 8018b5c:	af00      	add	r7, sp, #0
 8018b5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d106      	bne.n	8018b74 <tcp_send_fin+0x1c>
 8018b66:	4b21      	ldr	r3, [pc, #132]	@ (8018bec <tcp_send_fin+0x94>)
 8018b68:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8018b6c:	4920      	ldr	r1, [pc, #128]	@ (8018bf0 <tcp_send_fin+0x98>)
 8018b6e:	4821      	ldr	r0, [pc, #132]	@ (8018bf4 <tcp_send_fin+0x9c>)
 8018b70:	f005 fa8e 	bl	801e090 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d02e      	beq.n	8018bda <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018b80:	60fb      	str	r3, [r7, #12]
 8018b82:	e002      	b.n	8018b8a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d1f8      	bne.n	8018b84 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	68db      	ldr	r3, [r3, #12]
 8018b96:	899b      	ldrh	r3, [r3, #12]
 8018b98:	b29b      	uxth	r3, r3
 8018b9a:	4618      	mov	r0, r3
 8018b9c:	f7fa f8a0 	bl	8012ce0 <lwip_htons>
 8018ba0:	4603      	mov	r3, r0
 8018ba2:	b2db      	uxtb	r3, r3
 8018ba4:	f003 0307 	and.w	r3, r3, #7
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d116      	bne.n	8018bda <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	68db      	ldr	r3, [r3, #12]
 8018bb0:	899b      	ldrh	r3, [r3, #12]
 8018bb2:	b29c      	uxth	r4, r3
 8018bb4:	2001      	movs	r0, #1
 8018bb6:	f7fa f893 	bl	8012ce0 <lwip_htons>
 8018bba:	4603      	mov	r3, r0
 8018bbc:	461a      	mov	r2, r3
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	68db      	ldr	r3, [r3, #12]
 8018bc2:	4322      	orrs	r2, r4
 8018bc4:	b292      	uxth	r2, r2
 8018bc6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	8b5b      	ldrh	r3, [r3, #26]
 8018bcc:	f043 0320 	orr.w	r3, r3, #32
 8018bd0:	b29a      	uxth	r2, r3
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8018bd6:	2300      	movs	r3, #0
 8018bd8:	e004      	b.n	8018be4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8018bda:	2101      	movs	r1, #1
 8018bdc:	6878      	ldr	r0, [r7, #4]
 8018bde:	f000 f80b 	bl	8018bf8 <tcp_enqueue_flags>
 8018be2:	4603      	mov	r3, r0
}
 8018be4:	4618      	mov	r0, r3
 8018be6:	3714      	adds	r7, #20
 8018be8:	46bd      	mov	sp, r7
 8018bea:	bd90      	pop	{r4, r7, pc}
 8018bec:	080209a0 	.word	0x080209a0
 8018bf0:	08020da8 	.word	0x08020da8
 8018bf4:	080209f4 	.word	0x080209f4

08018bf8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	b08a      	sub	sp, #40	@ 0x28
 8018bfc:	af02      	add	r7, sp, #8
 8018bfe:	6078      	str	r0, [r7, #4]
 8018c00:	460b      	mov	r3, r1
 8018c02:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8018c04:	2300      	movs	r3, #0
 8018c06:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8018c08:	2300      	movs	r3, #0
 8018c0a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8018c0c:	78fb      	ldrb	r3, [r7, #3]
 8018c0e:	f003 0303 	and.w	r3, r3, #3
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d106      	bne.n	8018c24 <tcp_enqueue_flags+0x2c>
 8018c16:	4b67      	ldr	r3, [pc, #412]	@ (8018db4 <tcp_enqueue_flags+0x1bc>)
 8018c18:	f240 4211 	movw	r2, #1041	@ 0x411
 8018c1c:	4966      	ldr	r1, [pc, #408]	@ (8018db8 <tcp_enqueue_flags+0x1c0>)
 8018c1e:	4867      	ldr	r0, [pc, #412]	@ (8018dbc <tcp_enqueue_flags+0x1c4>)
 8018c20:	f005 fa36 	bl	801e090 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d106      	bne.n	8018c38 <tcp_enqueue_flags+0x40>
 8018c2a:	4b62      	ldr	r3, [pc, #392]	@ (8018db4 <tcp_enqueue_flags+0x1bc>)
 8018c2c:	f240 4213 	movw	r2, #1043	@ 0x413
 8018c30:	4963      	ldr	r1, [pc, #396]	@ (8018dc0 <tcp_enqueue_flags+0x1c8>)
 8018c32:	4862      	ldr	r0, [pc, #392]	@ (8018dbc <tcp_enqueue_flags+0x1c4>)
 8018c34:	f005 fa2c 	bl	801e090 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8018c38:	78fb      	ldrb	r3, [r7, #3]
 8018c3a:	f003 0302 	and.w	r3, r3, #2
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d001      	beq.n	8018c46 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8018c42:	2301      	movs	r3, #1
 8018c44:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018c46:	7ffb      	ldrb	r3, [r7, #31]
 8018c48:	009b      	lsls	r3, r3, #2
 8018c4a:	b2db      	uxtb	r3, r3
 8018c4c:	f003 0304 	and.w	r3, r3, #4
 8018c50:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018c52:	7dfb      	ldrb	r3, [r7, #23]
 8018c54:	b29b      	uxth	r3, r3
 8018c56:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018c5a:	4619      	mov	r1, r3
 8018c5c:	2036      	movs	r0, #54	@ 0x36
 8018c5e:	f7fb f949 	bl	8013ef4 <pbuf_alloc>
 8018c62:	6138      	str	r0, [r7, #16]
 8018c64:	693b      	ldr	r3, [r7, #16]
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d109      	bne.n	8018c7e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	8b5b      	ldrh	r3, [r3, #26]
 8018c6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018c72:	b29a      	uxth	r2, r3
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018c78:	f04f 33ff 	mov.w	r3, #4294967295
 8018c7c:	e095      	b.n	8018daa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8018c7e:	693b      	ldr	r3, [r7, #16]
 8018c80:	895a      	ldrh	r2, [r3, #10]
 8018c82:	7dfb      	ldrb	r3, [r7, #23]
 8018c84:	b29b      	uxth	r3, r3
 8018c86:	429a      	cmp	r2, r3
 8018c88:	d206      	bcs.n	8018c98 <tcp_enqueue_flags+0xa0>
 8018c8a:	4b4a      	ldr	r3, [pc, #296]	@ (8018db4 <tcp_enqueue_flags+0x1bc>)
 8018c8c:	f240 4239 	movw	r2, #1081	@ 0x439
 8018c90:	494c      	ldr	r1, [pc, #304]	@ (8018dc4 <tcp_enqueue_flags+0x1cc>)
 8018c92:	484a      	ldr	r0, [pc, #296]	@ (8018dbc <tcp_enqueue_flags+0x1c4>)
 8018c94:	f005 f9fc 	bl	801e090 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8018c9c:	78fa      	ldrb	r2, [r7, #3]
 8018c9e:	7ffb      	ldrb	r3, [r7, #31]
 8018ca0:	9300      	str	r3, [sp, #0]
 8018ca2:	460b      	mov	r3, r1
 8018ca4:	6939      	ldr	r1, [r7, #16]
 8018ca6:	6878      	ldr	r0, [r7, #4]
 8018ca8:	f7ff fd72 	bl	8018790 <tcp_create_segment>
 8018cac:	60f8      	str	r0, [r7, #12]
 8018cae:	68fb      	ldr	r3, [r7, #12]
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	d109      	bne.n	8018cc8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	8b5b      	ldrh	r3, [r3, #26]
 8018cb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018cbc:	b29a      	uxth	r2, r3
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8018cc6:	e070      	b.n	8018daa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8018cc8:	68fb      	ldr	r3, [r7, #12]
 8018cca:	68db      	ldr	r3, [r3, #12]
 8018ccc:	f003 0303 	and.w	r3, r3, #3
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d006      	beq.n	8018ce2 <tcp_enqueue_flags+0xea>
 8018cd4:	4b37      	ldr	r3, [pc, #220]	@ (8018db4 <tcp_enqueue_flags+0x1bc>)
 8018cd6:	f240 4242 	movw	r2, #1090	@ 0x442
 8018cda:	493b      	ldr	r1, [pc, #236]	@ (8018dc8 <tcp_enqueue_flags+0x1d0>)
 8018cdc:	4837      	ldr	r0, [pc, #220]	@ (8018dbc <tcp_enqueue_flags+0x1c4>)
 8018cde:	f005 f9d7 	bl	801e090 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	891b      	ldrh	r3, [r3, #8]
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d006      	beq.n	8018cf8 <tcp_enqueue_flags+0x100>
 8018cea:	4b32      	ldr	r3, [pc, #200]	@ (8018db4 <tcp_enqueue_flags+0x1bc>)
 8018cec:	f240 4243 	movw	r2, #1091	@ 0x443
 8018cf0:	4936      	ldr	r1, [pc, #216]	@ (8018dcc <tcp_enqueue_flags+0x1d4>)
 8018cf2:	4832      	ldr	r0, [pc, #200]	@ (8018dbc <tcp_enqueue_flags+0x1c4>)
 8018cf4:	f005 f9cc 	bl	801e090 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d103      	bne.n	8018d08 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	68fa      	ldr	r2, [r7, #12]
 8018d04:	66da      	str	r2, [r3, #108]	@ 0x6c
 8018d06:	e00d      	b.n	8018d24 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018d0c:	61bb      	str	r3, [r7, #24]
 8018d0e:	e002      	b.n	8018d16 <tcp_enqueue_flags+0x11e>
 8018d10:	69bb      	ldr	r3, [r7, #24]
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	61bb      	str	r3, [r7, #24]
 8018d16:	69bb      	ldr	r3, [r7, #24]
 8018d18:	681b      	ldr	r3, [r3, #0]
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d1f8      	bne.n	8018d10 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8018d1e:	69bb      	ldr	r3, [r7, #24]
 8018d20:	68fa      	ldr	r2, [r7, #12]
 8018d22:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	2200      	movs	r2, #0
 8018d28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8018d2c:	78fb      	ldrb	r3, [r7, #3]
 8018d2e:	f003 0302 	and.w	r3, r3, #2
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d104      	bne.n	8018d40 <tcp_enqueue_flags+0x148>
 8018d36:	78fb      	ldrb	r3, [r7, #3]
 8018d38:	f003 0301 	and.w	r3, r3, #1
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d004      	beq.n	8018d4a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018d44:	1c5a      	adds	r2, r3, #1
 8018d46:	687b      	ldr	r3, [r7, #4]
 8018d48:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8018d4a:	78fb      	ldrb	r3, [r7, #3]
 8018d4c:	f003 0301 	and.w	r3, r3, #1
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	d006      	beq.n	8018d62 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	8b5b      	ldrh	r3, [r3, #26]
 8018d58:	f043 0320 	orr.w	r3, r3, #32
 8018d5c:	b29a      	uxth	r2, r3
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018d62:	68fb      	ldr	r3, [r7, #12]
 8018d64:	685b      	ldr	r3, [r3, #4]
 8018d66:	4618      	mov	r0, r3
 8018d68:	f7fb fc36 	bl	80145d8 <pbuf_clen>
 8018d6c:	4603      	mov	r3, r0
 8018d6e:	461a      	mov	r2, r3
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018d76:	4413      	add	r3, r2
 8018d78:	b29a      	uxth	r2, r3
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d00e      	beq.n	8018da8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	d10a      	bne.n	8018da8 <tcp_enqueue_flags+0x1b0>
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d106      	bne.n	8018da8 <tcp_enqueue_flags+0x1b0>
 8018d9a:	4b06      	ldr	r3, [pc, #24]	@ (8018db4 <tcp_enqueue_flags+0x1bc>)
 8018d9c:	f240 4265 	movw	r2, #1125	@ 0x465
 8018da0:	490b      	ldr	r1, [pc, #44]	@ (8018dd0 <tcp_enqueue_flags+0x1d8>)
 8018da2:	4806      	ldr	r0, [pc, #24]	@ (8018dbc <tcp_enqueue_flags+0x1c4>)
 8018da4:	f005 f974 	bl	801e090 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8018da8:	2300      	movs	r3, #0
}
 8018daa:	4618      	mov	r0, r3
 8018dac:	3720      	adds	r7, #32
 8018dae:	46bd      	mov	sp, r7
 8018db0:	bd80      	pop	{r7, pc}
 8018db2:	bf00      	nop
 8018db4:	080209a0 	.word	0x080209a0
 8018db8:	08020dc4 	.word	0x08020dc4
 8018dbc:	080209f4 	.word	0x080209f4
 8018dc0:	08020e1c 	.word	0x08020e1c
 8018dc4:	08020e3c 	.word	0x08020e3c
 8018dc8:	08020e78 	.word	0x08020e78
 8018dcc:	08020e90 	.word	0x08020e90
 8018dd0:	08020ebc 	.word	0x08020ebc

08018dd4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8018dd4:	b5b0      	push	{r4, r5, r7, lr}
 8018dd6:	b08a      	sub	sp, #40	@ 0x28
 8018dd8:	af00      	add	r7, sp, #0
 8018dda:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	d106      	bne.n	8018df0 <tcp_output+0x1c>
 8018de2:	4b8a      	ldr	r3, [pc, #552]	@ (801900c <tcp_output+0x238>)
 8018de4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8018de8:	4989      	ldr	r1, [pc, #548]	@ (8019010 <tcp_output+0x23c>)
 8018dea:	488a      	ldr	r0, [pc, #552]	@ (8019014 <tcp_output+0x240>)
 8018dec:	f005 f950 	bl	801e090 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	7d1b      	ldrb	r3, [r3, #20]
 8018df4:	2b01      	cmp	r3, #1
 8018df6:	d106      	bne.n	8018e06 <tcp_output+0x32>
 8018df8:	4b84      	ldr	r3, [pc, #528]	@ (801900c <tcp_output+0x238>)
 8018dfa:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8018dfe:	4986      	ldr	r1, [pc, #536]	@ (8019018 <tcp_output+0x244>)
 8018e00:	4884      	ldr	r0, [pc, #528]	@ (8019014 <tcp_output+0x240>)
 8018e02:	f005 f945 	bl	801e090 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8018e06:	4b85      	ldr	r3, [pc, #532]	@ (801901c <tcp_output+0x248>)
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	687a      	ldr	r2, [r7, #4]
 8018e0c:	429a      	cmp	r2, r3
 8018e0e:	d101      	bne.n	8018e14 <tcp_output+0x40>
    return ERR_OK;
 8018e10:	2300      	movs	r3, #0
 8018e12:	e1ce      	b.n	80191b2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018e20:	4293      	cmp	r3, r2
 8018e22:	bf28      	it	cs
 8018e24:	4613      	movcs	r3, r2
 8018e26:	b29b      	uxth	r3, r3
 8018e28:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018e2e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8018e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d10b      	bne.n	8018e4e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	8b5b      	ldrh	r3, [r3, #26]
 8018e3a:	f003 0302 	and.w	r3, r3, #2
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	f000 81aa 	beq.w	8019198 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8018e44:	6878      	ldr	r0, [r7, #4]
 8018e46:	f000 fdcb 	bl	80199e0 <tcp_send_empty_ack>
 8018e4a:	4603      	mov	r3, r0
 8018e4c:	e1b1      	b.n	80191b2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8018e4e:	6879      	ldr	r1, [r7, #4]
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	3304      	adds	r3, #4
 8018e54:	461a      	mov	r2, r3
 8018e56:	6878      	ldr	r0, [r7, #4]
 8018e58:	f7ff fc7e 	bl	8018758 <tcp_route>
 8018e5c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8018e5e:	697b      	ldr	r3, [r7, #20]
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	d102      	bne.n	8018e6a <tcp_output+0x96>
    return ERR_RTE;
 8018e64:	f06f 0303 	mvn.w	r3, #3
 8018e68:	e1a3      	b.n	80191b2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d003      	beq.n	8018e78 <tcp_output+0xa4>
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	681b      	ldr	r3, [r3, #0]
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d111      	bne.n	8018e9c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8018e78:	697b      	ldr	r3, [r7, #20]
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	d002      	beq.n	8018e84 <tcp_output+0xb0>
 8018e7e:	697b      	ldr	r3, [r7, #20]
 8018e80:	3304      	adds	r3, #4
 8018e82:	e000      	b.n	8018e86 <tcp_output+0xb2>
 8018e84:	2300      	movs	r3, #0
 8018e86:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8018e88:	693b      	ldr	r3, [r7, #16]
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d102      	bne.n	8018e94 <tcp_output+0xc0>
      return ERR_RTE;
 8018e8e:	f06f 0303 	mvn.w	r3, #3
 8018e92:	e18e      	b.n	80191b2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8018e94:	693b      	ldr	r3, [r7, #16]
 8018e96:	681a      	ldr	r2, [r3, #0]
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8018e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e9e:	68db      	ldr	r3, [r3, #12]
 8018ea0:	685b      	ldr	r3, [r3, #4]
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	f7f9 ff32 	bl	8012d0c <lwip_htonl>
 8018ea8:	4602      	mov	r2, r0
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018eae:	1ad3      	subs	r3, r2, r3
 8018eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018eb2:	8912      	ldrh	r2, [r2, #8]
 8018eb4:	4413      	add	r3, r2
 8018eb6:	69ba      	ldr	r2, [r7, #24]
 8018eb8:	429a      	cmp	r2, r3
 8018eba:	d227      	bcs.n	8018f0c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018ec2:	461a      	mov	r2, r3
 8018ec4:	69bb      	ldr	r3, [r7, #24]
 8018ec6:	4293      	cmp	r3, r2
 8018ec8:	d114      	bne.n	8018ef4 <tcp_output+0x120>
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d110      	bne.n	8018ef4 <tcp_output+0x120>
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d10b      	bne.n	8018ef4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	2200      	movs	r2, #0
 8018ee0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	2201      	movs	r2, #1
 8018ee8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	2200      	movs	r2, #0
 8018ef0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	8b5b      	ldrh	r3, [r3, #26]
 8018ef8:	f003 0302 	and.w	r3, r3, #2
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	f000 814d 	beq.w	801919c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8018f02:	6878      	ldr	r0, [r7, #4]
 8018f04:	f000 fd6c 	bl	80199e0 <tcp_send_empty_ack>
 8018f08:	4603      	mov	r3, r0
 8018f0a:	e152      	b.n	80191b2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	2200      	movs	r2, #0
 8018f10:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018f18:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8018f1a:	6a3b      	ldr	r3, [r7, #32]
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	f000 811c 	beq.w	801915a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8018f22:	e002      	b.n	8018f2a <tcp_output+0x156>
 8018f24:	6a3b      	ldr	r3, [r7, #32]
 8018f26:	681b      	ldr	r3, [r3, #0]
 8018f28:	623b      	str	r3, [r7, #32]
 8018f2a:	6a3b      	ldr	r3, [r7, #32]
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d1f8      	bne.n	8018f24 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8018f32:	e112      	b.n	801915a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8018f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f36:	68db      	ldr	r3, [r3, #12]
 8018f38:	899b      	ldrh	r3, [r3, #12]
 8018f3a:	b29b      	uxth	r3, r3
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	f7f9 fecf 	bl	8012ce0 <lwip_htons>
 8018f42:	4603      	mov	r3, r0
 8018f44:	b2db      	uxtb	r3, r3
 8018f46:	f003 0304 	and.w	r3, r3, #4
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d006      	beq.n	8018f5c <tcp_output+0x188>
 8018f4e:	4b2f      	ldr	r3, [pc, #188]	@ (801900c <tcp_output+0x238>)
 8018f50:	f240 5236 	movw	r2, #1334	@ 0x536
 8018f54:	4932      	ldr	r1, [pc, #200]	@ (8019020 <tcp_output+0x24c>)
 8018f56:	482f      	ldr	r0, [pc, #188]	@ (8019014 <tcp_output+0x240>)
 8018f58:	f005 f89a 	bl	801e090 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d01f      	beq.n	8018fa4 <tcp_output+0x1d0>
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	8b5b      	ldrh	r3, [r3, #26]
 8018f68:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d119      	bne.n	8018fa4 <tcp_output+0x1d0>
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d00b      	beq.n	8018f90 <tcp_output+0x1bc>
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d110      	bne.n	8018fa4 <tcp_output+0x1d0>
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018f86:	891a      	ldrh	r2, [r3, #8]
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018f8c:	429a      	cmp	r2, r3
 8018f8e:	d209      	bcs.n	8018fa4 <tcp_output+0x1d0>
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d004      	beq.n	8018fa4 <tcp_output+0x1d0>
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018fa0:	2b08      	cmp	r3, #8
 8018fa2:	d901      	bls.n	8018fa8 <tcp_output+0x1d4>
 8018fa4:	2301      	movs	r3, #1
 8018fa6:	e000      	b.n	8018faa <tcp_output+0x1d6>
 8018fa8:	2300      	movs	r3, #0
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d106      	bne.n	8018fbc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	8b5b      	ldrh	r3, [r3, #26]
 8018fb2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	f000 80e4 	beq.w	8019184 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	7d1b      	ldrb	r3, [r3, #20]
 8018fc0:	2b02      	cmp	r3, #2
 8018fc2:	d00d      	beq.n	8018fe0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8018fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fc6:	68db      	ldr	r3, [r3, #12]
 8018fc8:	899b      	ldrh	r3, [r3, #12]
 8018fca:	b29c      	uxth	r4, r3
 8018fcc:	2010      	movs	r0, #16
 8018fce:	f7f9 fe87 	bl	8012ce0 <lwip_htons>
 8018fd2:	4603      	mov	r3, r0
 8018fd4:	461a      	mov	r2, r3
 8018fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fd8:	68db      	ldr	r3, [r3, #12]
 8018fda:	4322      	orrs	r2, r4
 8018fdc:	b292      	uxth	r2, r2
 8018fde:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8018fe0:	697a      	ldr	r2, [r7, #20]
 8018fe2:	6879      	ldr	r1, [r7, #4]
 8018fe4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018fe6:	f000 f909 	bl	80191fc <tcp_output_segment>
 8018fea:	4603      	mov	r3, r0
 8018fec:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8018fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d016      	beq.n	8019024 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	8b5b      	ldrh	r3, [r3, #26]
 8018ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018ffe:	b29a      	uxth	r2, r3
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	835a      	strh	r2, [r3, #26]
      return err;
 8019004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019008:	e0d3      	b.n	80191b2 <tcp_output+0x3de>
 801900a:	bf00      	nop
 801900c:	080209a0 	.word	0x080209a0
 8019010:	08020ee4 	.word	0x08020ee4
 8019014:	080209f4 	.word	0x080209f4
 8019018:	08020efc 	.word	0x08020efc
 801901c:	200277fc 	.word	0x200277fc
 8019020:	08020f24 	.word	0x08020f24
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8019024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019026:	681a      	ldr	r2, [r3, #0]
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	7d1b      	ldrb	r3, [r3, #20]
 8019030:	2b02      	cmp	r3, #2
 8019032:	d006      	beq.n	8019042 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	8b5b      	ldrh	r3, [r3, #26]
 8019038:	f023 0303 	bic.w	r3, r3, #3
 801903c:	b29a      	uxth	r2, r3
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019044:	68db      	ldr	r3, [r3, #12]
 8019046:	685b      	ldr	r3, [r3, #4]
 8019048:	4618      	mov	r0, r3
 801904a:	f7f9 fe5f 	bl	8012d0c <lwip_htonl>
 801904e:	4604      	mov	r4, r0
 8019050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019052:	891b      	ldrh	r3, [r3, #8]
 8019054:	461d      	mov	r5, r3
 8019056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019058:	68db      	ldr	r3, [r3, #12]
 801905a:	899b      	ldrh	r3, [r3, #12]
 801905c:	b29b      	uxth	r3, r3
 801905e:	4618      	mov	r0, r3
 8019060:	f7f9 fe3e 	bl	8012ce0 <lwip_htons>
 8019064:	4603      	mov	r3, r0
 8019066:	b2db      	uxtb	r3, r3
 8019068:	f003 0303 	and.w	r3, r3, #3
 801906c:	2b00      	cmp	r3, #0
 801906e:	d001      	beq.n	8019074 <tcp_output+0x2a0>
 8019070:	2301      	movs	r3, #1
 8019072:	e000      	b.n	8019076 <tcp_output+0x2a2>
 8019074:	2300      	movs	r3, #0
 8019076:	442b      	add	r3, r5
 8019078:	4423      	add	r3, r4
 801907a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019080:	68bb      	ldr	r3, [r7, #8]
 8019082:	1ad3      	subs	r3, r2, r3
 8019084:	2b00      	cmp	r3, #0
 8019086:	da02      	bge.n	801908e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	68ba      	ldr	r2, [r7, #8]
 801908c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801908e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019090:	891b      	ldrh	r3, [r3, #8]
 8019092:	461c      	mov	r4, r3
 8019094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019096:	68db      	ldr	r3, [r3, #12]
 8019098:	899b      	ldrh	r3, [r3, #12]
 801909a:	b29b      	uxth	r3, r3
 801909c:	4618      	mov	r0, r3
 801909e:	f7f9 fe1f 	bl	8012ce0 <lwip_htons>
 80190a2:	4603      	mov	r3, r0
 80190a4:	b2db      	uxtb	r3, r3
 80190a6:	f003 0303 	and.w	r3, r3, #3
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d001      	beq.n	80190b2 <tcp_output+0x2de>
 80190ae:	2301      	movs	r3, #1
 80190b0:	e000      	b.n	80190b4 <tcp_output+0x2e0>
 80190b2:	2300      	movs	r3, #0
 80190b4:	4423      	add	r3, r4
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d049      	beq.n	801914e <tcp_output+0x37a>
      seg->next = NULL;
 80190ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80190bc:	2200      	movs	r2, #0
 80190be:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d105      	bne.n	80190d4 <tcp_output+0x300>
        pcb->unacked = seg;
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80190cc:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80190ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80190d0:	623b      	str	r3, [r7, #32]
 80190d2:	e03f      	b.n	8019154 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80190d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80190d6:	68db      	ldr	r3, [r3, #12]
 80190d8:	685b      	ldr	r3, [r3, #4]
 80190da:	4618      	mov	r0, r3
 80190dc:	f7f9 fe16 	bl	8012d0c <lwip_htonl>
 80190e0:	4604      	mov	r4, r0
 80190e2:	6a3b      	ldr	r3, [r7, #32]
 80190e4:	68db      	ldr	r3, [r3, #12]
 80190e6:	685b      	ldr	r3, [r3, #4]
 80190e8:	4618      	mov	r0, r3
 80190ea:	f7f9 fe0f 	bl	8012d0c <lwip_htonl>
 80190ee:	4603      	mov	r3, r0
 80190f0:	1ae3      	subs	r3, r4, r3
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	da24      	bge.n	8019140 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	3370      	adds	r3, #112	@ 0x70
 80190fa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80190fc:	e002      	b.n	8019104 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80190fe:	69fb      	ldr	r3, [r7, #28]
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019104:	69fb      	ldr	r3, [r7, #28]
 8019106:	681b      	ldr	r3, [r3, #0]
 8019108:	2b00      	cmp	r3, #0
 801910a:	d011      	beq.n	8019130 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801910c:	69fb      	ldr	r3, [r7, #28]
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	68db      	ldr	r3, [r3, #12]
 8019112:	685b      	ldr	r3, [r3, #4]
 8019114:	4618      	mov	r0, r3
 8019116:	f7f9 fdf9 	bl	8012d0c <lwip_htonl>
 801911a:	4604      	mov	r4, r0
 801911c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801911e:	68db      	ldr	r3, [r3, #12]
 8019120:	685b      	ldr	r3, [r3, #4]
 8019122:	4618      	mov	r0, r3
 8019124:	f7f9 fdf2 	bl	8012d0c <lwip_htonl>
 8019128:	4603      	mov	r3, r0
 801912a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801912c:	2b00      	cmp	r3, #0
 801912e:	dbe6      	blt.n	80190fe <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8019130:	69fb      	ldr	r3, [r7, #28]
 8019132:	681a      	ldr	r2, [r3, #0]
 8019134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019136:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8019138:	69fb      	ldr	r3, [r7, #28]
 801913a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801913c:	601a      	str	r2, [r3, #0]
 801913e:	e009      	b.n	8019154 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8019140:	6a3b      	ldr	r3, [r7, #32]
 8019142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019144:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8019146:	6a3b      	ldr	r3, [r7, #32]
 8019148:	681b      	ldr	r3, [r3, #0]
 801914a:	623b      	str	r3, [r7, #32]
 801914c:	e002      	b.n	8019154 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801914e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019150:	f7fc fc45 	bl	80159de <tcp_seg_free>
    }
    seg = pcb->unsent;
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019158:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801915a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801915c:	2b00      	cmp	r3, #0
 801915e:	d012      	beq.n	8019186 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8019160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019162:	68db      	ldr	r3, [r3, #12]
 8019164:	685b      	ldr	r3, [r3, #4]
 8019166:	4618      	mov	r0, r3
 8019168:	f7f9 fdd0 	bl	8012d0c <lwip_htonl>
 801916c:	4602      	mov	r2, r0
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019172:	1ad3      	subs	r3, r2, r3
 8019174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019176:	8912      	ldrh	r2, [r2, #8]
 8019178:	4413      	add	r3, r2
  while (seg != NULL &&
 801917a:	69ba      	ldr	r2, [r7, #24]
 801917c:	429a      	cmp	r2, r3
 801917e:	f4bf aed9 	bcs.w	8018f34 <tcp_output+0x160>
 8019182:	e000      	b.n	8019186 <tcp_output+0x3b2>
      break;
 8019184:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801918a:	2b00      	cmp	r3, #0
 801918c:	d108      	bne.n	80191a0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	2200      	movs	r2, #0
 8019192:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8019196:	e004      	b.n	80191a2 <tcp_output+0x3ce>
    goto output_done;
 8019198:	bf00      	nop
 801919a:	e002      	b.n	80191a2 <tcp_output+0x3ce>
    goto output_done;
 801919c:	bf00      	nop
 801919e:	e000      	b.n	80191a2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80191a0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	8b5b      	ldrh	r3, [r3, #26]
 80191a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80191aa:	b29a      	uxth	r2, r3
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80191b0:	2300      	movs	r3, #0
}
 80191b2:	4618      	mov	r0, r3
 80191b4:	3728      	adds	r7, #40	@ 0x28
 80191b6:	46bd      	mov	sp, r7
 80191b8:	bdb0      	pop	{r4, r5, r7, pc}
 80191ba:	bf00      	nop

080191bc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80191bc:	b580      	push	{r7, lr}
 80191be:	b082      	sub	sp, #8
 80191c0:	af00      	add	r7, sp, #0
 80191c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	d106      	bne.n	80191d8 <tcp_output_segment_busy+0x1c>
 80191ca:	4b09      	ldr	r3, [pc, #36]	@ (80191f0 <tcp_output_segment_busy+0x34>)
 80191cc:	f240 529a 	movw	r2, #1434	@ 0x59a
 80191d0:	4908      	ldr	r1, [pc, #32]	@ (80191f4 <tcp_output_segment_busy+0x38>)
 80191d2:	4809      	ldr	r0, [pc, #36]	@ (80191f8 <tcp_output_segment_busy+0x3c>)
 80191d4:	f004 ff5c 	bl	801e090 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	685b      	ldr	r3, [r3, #4]
 80191dc:	7b9b      	ldrb	r3, [r3, #14]
 80191de:	2b01      	cmp	r3, #1
 80191e0:	d001      	beq.n	80191e6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80191e2:	2301      	movs	r3, #1
 80191e4:	e000      	b.n	80191e8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80191e6:	2300      	movs	r3, #0
}
 80191e8:	4618      	mov	r0, r3
 80191ea:	3708      	adds	r7, #8
 80191ec:	46bd      	mov	sp, r7
 80191ee:	bd80      	pop	{r7, pc}
 80191f0:	080209a0 	.word	0x080209a0
 80191f4:	08020f3c 	.word	0x08020f3c
 80191f8:	080209f4 	.word	0x080209f4

080191fc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80191fc:	b5b0      	push	{r4, r5, r7, lr}
 80191fe:	b08c      	sub	sp, #48	@ 0x30
 8019200:	af04      	add	r7, sp, #16
 8019202:	60f8      	str	r0, [r7, #12]
 8019204:	60b9      	str	r1, [r7, #8]
 8019206:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	2b00      	cmp	r3, #0
 801920c:	d106      	bne.n	801921c <tcp_output_segment+0x20>
 801920e:	4b64      	ldr	r3, [pc, #400]	@ (80193a0 <tcp_output_segment+0x1a4>)
 8019210:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8019214:	4963      	ldr	r1, [pc, #396]	@ (80193a4 <tcp_output_segment+0x1a8>)
 8019216:	4864      	ldr	r0, [pc, #400]	@ (80193a8 <tcp_output_segment+0x1ac>)
 8019218:	f004 ff3a 	bl	801e090 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801921c:	68bb      	ldr	r3, [r7, #8]
 801921e:	2b00      	cmp	r3, #0
 8019220:	d106      	bne.n	8019230 <tcp_output_segment+0x34>
 8019222:	4b5f      	ldr	r3, [pc, #380]	@ (80193a0 <tcp_output_segment+0x1a4>)
 8019224:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8019228:	4960      	ldr	r1, [pc, #384]	@ (80193ac <tcp_output_segment+0x1b0>)
 801922a:	485f      	ldr	r0, [pc, #380]	@ (80193a8 <tcp_output_segment+0x1ac>)
 801922c:	f004 ff30 	bl	801e090 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	2b00      	cmp	r3, #0
 8019234:	d106      	bne.n	8019244 <tcp_output_segment+0x48>
 8019236:	4b5a      	ldr	r3, [pc, #360]	@ (80193a0 <tcp_output_segment+0x1a4>)
 8019238:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801923c:	495c      	ldr	r1, [pc, #368]	@ (80193b0 <tcp_output_segment+0x1b4>)
 801923e:	485a      	ldr	r0, [pc, #360]	@ (80193a8 <tcp_output_segment+0x1ac>)
 8019240:	f004 ff26 	bl	801e090 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8019244:	68f8      	ldr	r0, [r7, #12]
 8019246:	f7ff ffb9 	bl	80191bc <tcp_output_segment_busy>
 801924a:	4603      	mov	r3, r0
 801924c:	2b00      	cmp	r3, #0
 801924e:	d001      	beq.n	8019254 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8019250:	2300      	movs	r3, #0
 8019252:	e0a1      	b.n	8019398 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8019254:	68bb      	ldr	r3, [r7, #8]
 8019256:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019258:	68fb      	ldr	r3, [r7, #12]
 801925a:	68dc      	ldr	r4, [r3, #12]
 801925c:	4610      	mov	r0, r2
 801925e:	f7f9 fd55 	bl	8012d0c <lwip_htonl>
 8019262:	4603      	mov	r3, r0
 8019264:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8019266:	68bb      	ldr	r3, [r7, #8]
 8019268:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801926a:	68fb      	ldr	r3, [r7, #12]
 801926c:	68dc      	ldr	r4, [r3, #12]
 801926e:	4610      	mov	r0, r2
 8019270:	f7f9 fd36 	bl	8012ce0 <lwip_htons>
 8019274:	4603      	mov	r3, r0
 8019276:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019278:	68bb      	ldr	r3, [r7, #8]
 801927a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801927c:	68ba      	ldr	r2, [r7, #8]
 801927e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8019280:	441a      	add	r2, r3
 8019282:	68bb      	ldr	r3, [r7, #8]
 8019284:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8019286:	68fb      	ldr	r3, [r7, #12]
 8019288:	68db      	ldr	r3, [r3, #12]
 801928a:	3314      	adds	r3, #20
 801928c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801928e:	68fb      	ldr	r3, [r7, #12]
 8019290:	7a9b      	ldrb	r3, [r3, #10]
 8019292:	f003 0301 	and.w	r3, r3, #1
 8019296:	2b00      	cmp	r3, #0
 8019298:	d015      	beq.n	80192c6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801929a:	68bb      	ldr	r3, [r7, #8]
 801929c:	3304      	adds	r3, #4
 801929e:	461a      	mov	r2, r3
 80192a0:	6879      	ldr	r1, [r7, #4]
 80192a2:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80192a6:	f7fc fe91 	bl	8015fcc <tcp_eff_send_mss_netif>
 80192aa:	4603      	mov	r3, r0
 80192ac:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80192ae:	8b7b      	ldrh	r3, [r7, #26]
 80192b0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80192b4:	4618      	mov	r0, r3
 80192b6:	f7f9 fd29 	bl	8012d0c <lwip_htonl>
 80192ba:	4602      	mov	r2, r0
 80192bc:	69fb      	ldr	r3, [r7, #28]
 80192be:	601a      	str	r2, [r3, #0]
    opts += 1;
 80192c0:	69fb      	ldr	r3, [r7, #28]
 80192c2:	3304      	adds	r3, #4
 80192c4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80192c6:	68bb      	ldr	r3, [r7, #8]
 80192c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	da02      	bge.n	80192d6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80192d0:	68bb      	ldr	r3, [r7, #8]
 80192d2:	2200      	movs	r2, #0
 80192d4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80192d6:	68bb      	ldr	r3, [r7, #8]
 80192d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d10c      	bne.n	80192f8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80192de:	4b35      	ldr	r3, [pc, #212]	@ (80193b4 <tcp_output_segment+0x1b8>)
 80192e0:	681a      	ldr	r2, [r3, #0]
 80192e2:	68bb      	ldr	r3, [r7, #8]
 80192e4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80192e6:	68fb      	ldr	r3, [r7, #12]
 80192e8:	68db      	ldr	r3, [r3, #12]
 80192ea:	685b      	ldr	r3, [r3, #4]
 80192ec:	4618      	mov	r0, r3
 80192ee:	f7f9 fd0d 	bl	8012d0c <lwip_htonl>
 80192f2:	4602      	mov	r2, r0
 80192f4:	68bb      	ldr	r3, [r7, #8]
 80192f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80192f8:	68fb      	ldr	r3, [r7, #12]
 80192fa:	68da      	ldr	r2, [r3, #12]
 80192fc:	68fb      	ldr	r3, [r7, #12]
 80192fe:	685b      	ldr	r3, [r3, #4]
 8019300:	685b      	ldr	r3, [r3, #4]
 8019302:	1ad3      	subs	r3, r2, r3
 8019304:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8019306:	68fb      	ldr	r3, [r7, #12]
 8019308:	685b      	ldr	r3, [r3, #4]
 801930a:	8959      	ldrh	r1, [r3, #10]
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	685b      	ldr	r3, [r3, #4]
 8019310:	8b3a      	ldrh	r2, [r7, #24]
 8019312:	1a8a      	subs	r2, r1, r2
 8019314:	b292      	uxth	r2, r2
 8019316:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8019318:	68fb      	ldr	r3, [r7, #12]
 801931a:	685b      	ldr	r3, [r3, #4]
 801931c:	8919      	ldrh	r1, [r3, #8]
 801931e:	68fb      	ldr	r3, [r7, #12]
 8019320:	685b      	ldr	r3, [r3, #4]
 8019322:	8b3a      	ldrh	r2, [r7, #24]
 8019324:	1a8a      	subs	r2, r1, r2
 8019326:	b292      	uxth	r2, r2
 8019328:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801932a:	68fb      	ldr	r3, [r7, #12]
 801932c:	685b      	ldr	r3, [r3, #4]
 801932e:	68fa      	ldr	r2, [r7, #12]
 8019330:	68d2      	ldr	r2, [r2, #12]
 8019332:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8019334:	68fb      	ldr	r3, [r7, #12]
 8019336:	68db      	ldr	r3, [r3, #12]
 8019338:	2200      	movs	r2, #0
 801933a:	741a      	strb	r2, [r3, #16]
 801933c:	2200      	movs	r2, #0
 801933e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8019340:	68fb      	ldr	r3, [r7, #12]
 8019342:	68da      	ldr	r2, [r3, #12]
 8019344:	68fb      	ldr	r3, [r7, #12]
 8019346:	7a9b      	ldrb	r3, [r3, #10]
 8019348:	f003 0301 	and.w	r3, r3, #1
 801934c:	2b00      	cmp	r3, #0
 801934e:	d001      	beq.n	8019354 <tcp_output_segment+0x158>
 8019350:	2318      	movs	r3, #24
 8019352:	e000      	b.n	8019356 <tcp_output_segment+0x15a>
 8019354:	2314      	movs	r3, #20
 8019356:	4413      	add	r3, r2
 8019358:	69fa      	ldr	r2, [r7, #28]
 801935a:	429a      	cmp	r2, r3
 801935c:	d006      	beq.n	801936c <tcp_output_segment+0x170>
 801935e:	4b10      	ldr	r3, [pc, #64]	@ (80193a0 <tcp_output_segment+0x1a4>)
 8019360:	f240 621c 	movw	r2, #1564	@ 0x61c
 8019364:	4914      	ldr	r1, [pc, #80]	@ (80193b8 <tcp_output_segment+0x1bc>)
 8019366:	4810      	ldr	r0, [pc, #64]	@ (80193a8 <tcp_output_segment+0x1ac>)
 8019368:	f004 fe92 	bl	801e090 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	6858      	ldr	r0, [r3, #4]
 8019370:	68b9      	ldr	r1, [r7, #8]
 8019372:	68bb      	ldr	r3, [r7, #8]
 8019374:	1d1c      	adds	r4, r3, #4
 8019376:	68bb      	ldr	r3, [r7, #8]
 8019378:	7add      	ldrb	r5, [r3, #11]
 801937a:	68bb      	ldr	r3, [r7, #8]
 801937c:	7a9b      	ldrb	r3, [r3, #10]
 801937e:	687a      	ldr	r2, [r7, #4]
 8019380:	9202      	str	r2, [sp, #8]
 8019382:	2206      	movs	r2, #6
 8019384:	9201      	str	r2, [sp, #4]
 8019386:	9300      	str	r3, [sp, #0]
 8019388:	462b      	mov	r3, r5
 801938a:	4622      	mov	r2, r4
 801938c:	f002 fd12 	bl	801bdb4 <ip4_output_if>
 8019390:	4603      	mov	r3, r0
 8019392:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8019394:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019398:	4618      	mov	r0, r3
 801939a:	3720      	adds	r7, #32
 801939c:	46bd      	mov	sp, r7
 801939e:	bdb0      	pop	{r4, r5, r7, pc}
 80193a0:	080209a0 	.word	0x080209a0
 80193a4:	08020f64 	.word	0x08020f64
 80193a8:	080209f4 	.word	0x080209f4
 80193ac:	08020f84 	.word	0x08020f84
 80193b0:	08020fa4 	.word	0x08020fa4
 80193b4:	200277b0 	.word	0x200277b0
 80193b8:	08020fc8 	.word	0x08020fc8

080193bc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80193bc:	b5b0      	push	{r4, r5, r7, lr}
 80193be:	b084      	sub	sp, #16
 80193c0:	af00      	add	r7, sp, #0
 80193c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	2b00      	cmp	r3, #0
 80193c8:	d106      	bne.n	80193d8 <tcp_rexmit_rto_prepare+0x1c>
 80193ca:	4b31      	ldr	r3, [pc, #196]	@ (8019490 <tcp_rexmit_rto_prepare+0xd4>)
 80193cc:	f240 6263 	movw	r2, #1635	@ 0x663
 80193d0:	4930      	ldr	r1, [pc, #192]	@ (8019494 <tcp_rexmit_rto_prepare+0xd8>)
 80193d2:	4831      	ldr	r0, [pc, #196]	@ (8019498 <tcp_rexmit_rto_prepare+0xdc>)
 80193d4:	f004 fe5c 	bl	801e090 <iprintf>

  if (pcb->unacked == NULL) {
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80193dc:	2b00      	cmp	r3, #0
 80193de:	d102      	bne.n	80193e6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80193e0:	f06f 0305 	mvn.w	r3, #5
 80193e4:	e050      	b.n	8019488 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80193ea:	60fb      	str	r3, [r7, #12]
 80193ec:	e00b      	b.n	8019406 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80193ee:	68f8      	ldr	r0, [r7, #12]
 80193f0:	f7ff fee4 	bl	80191bc <tcp_output_segment_busy>
 80193f4:	4603      	mov	r3, r0
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d002      	beq.n	8019400 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80193fa:	f06f 0305 	mvn.w	r3, #5
 80193fe:	e043      	b.n	8019488 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019400:	68fb      	ldr	r3, [r7, #12]
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	60fb      	str	r3, [r7, #12]
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	2b00      	cmp	r3, #0
 801940c:	d1ef      	bne.n	80193ee <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801940e:	68f8      	ldr	r0, [r7, #12]
 8019410:	f7ff fed4 	bl	80191bc <tcp_output_segment_busy>
 8019414:	4603      	mov	r3, r0
 8019416:	2b00      	cmp	r3, #0
 8019418:	d002      	beq.n	8019420 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801941a:	f06f 0305 	mvn.w	r3, #5
 801941e:	e033      	b.n	8019488 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8019424:	68fb      	ldr	r3, [r7, #12]
 8019426:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	2200      	movs	r2, #0
 8019434:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	8b5b      	ldrh	r3, [r3, #26]
 801943a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801943e:	b29a      	uxth	r2, r3
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019444:	68fb      	ldr	r3, [r7, #12]
 8019446:	68db      	ldr	r3, [r3, #12]
 8019448:	685b      	ldr	r3, [r3, #4]
 801944a:	4618      	mov	r0, r3
 801944c:	f7f9 fc5e 	bl	8012d0c <lwip_htonl>
 8019450:	4604      	mov	r4, r0
 8019452:	68fb      	ldr	r3, [r7, #12]
 8019454:	891b      	ldrh	r3, [r3, #8]
 8019456:	461d      	mov	r5, r3
 8019458:	68fb      	ldr	r3, [r7, #12]
 801945a:	68db      	ldr	r3, [r3, #12]
 801945c:	899b      	ldrh	r3, [r3, #12]
 801945e:	b29b      	uxth	r3, r3
 8019460:	4618      	mov	r0, r3
 8019462:	f7f9 fc3d 	bl	8012ce0 <lwip_htons>
 8019466:	4603      	mov	r3, r0
 8019468:	b2db      	uxtb	r3, r3
 801946a:	f003 0303 	and.w	r3, r3, #3
 801946e:	2b00      	cmp	r3, #0
 8019470:	d001      	beq.n	8019476 <tcp_rexmit_rto_prepare+0xba>
 8019472:	2301      	movs	r3, #1
 8019474:	e000      	b.n	8019478 <tcp_rexmit_rto_prepare+0xbc>
 8019476:	2300      	movs	r3, #0
 8019478:	442b      	add	r3, r5
 801947a:	18e2      	adds	r2, r4, r3
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	2200      	movs	r2, #0
 8019484:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8019486:	2300      	movs	r3, #0
}
 8019488:	4618      	mov	r0, r3
 801948a:	3710      	adds	r7, #16
 801948c:	46bd      	mov	sp, r7
 801948e:	bdb0      	pop	{r4, r5, r7, pc}
 8019490:	080209a0 	.word	0x080209a0
 8019494:	08020fdc 	.word	0x08020fdc
 8019498:	080209f4 	.word	0x080209f4

0801949c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801949c:	b580      	push	{r7, lr}
 801949e:	b082      	sub	sp, #8
 80194a0:	af00      	add	r7, sp, #0
 80194a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d106      	bne.n	80194b8 <tcp_rexmit_rto_commit+0x1c>
 80194aa:	4b0d      	ldr	r3, [pc, #52]	@ (80194e0 <tcp_rexmit_rto_commit+0x44>)
 80194ac:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80194b0:	490c      	ldr	r1, [pc, #48]	@ (80194e4 <tcp_rexmit_rto_commit+0x48>)
 80194b2:	480d      	ldr	r0, [pc, #52]	@ (80194e8 <tcp_rexmit_rto_commit+0x4c>)
 80194b4:	f004 fdec 	bl	801e090 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80194be:	2bff      	cmp	r3, #255	@ 0xff
 80194c0:	d007      	beq.n	80194d2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80194c8:	3301      	adds	r3, #1
 80194ca:	b2da      	uxtb	r2, r3
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80194d2:	6878      	ldr	r0, [r7, #4]
 80194d4:	f7ff fc7e 	bl	8018dd4 <tcp_output>
}
 80194d8:	bf00      	nop
 80194da:	3708      	adds	r7, #8
 80194dc:	46bd      	mov	sp, r7
 80194de:	bd80      	pop	{r7, pc}
 80194e0:	080209a0 	.word	0x080209a0
 80194e4:	08021000 	.word	0x08021000
 80194e8:	080209f4 	.word	0x080209f4

080194ec <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80194ec:	b580      	push	{r7, lr}
 80194ee:	b082      	sub	sp, #8
 80194f0:	af00      	add	r7, sp, #0
 80194f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	2b00      	cmp	r3, #0
 80194f8:	d106      	bne.n	8019508 <tcp_rexmit_rto+0x1c>
 80194fa:	4b0a      	ldr	r3, [pc, #40]	@ (8019524 <tcp_rexmit_rto+0x38>)
 80194fc:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8019500:	4909      	ldr	r1, [pc, #36]	@ (8019528 <tcp_rexmit_rto+0x3c>)
 8019502:	480a      	ldr	r0, [pc, #40]	@ (801952c <tcp_rexmit_rto+0x40>)
 8019504:	f004 fdc4 	bl	801e090 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8019508:	6878      	ldr	r0, [r7, #4]
 801950a:	f7ff ff57 	bl	80193bc <tcp_rexmit_rto_prepare>
 801950e:	4603      	mov	r3, r0
 8019510:	2b00      	cmp	r3, #0
 8019512:	d102      	bne.n	801951a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8019514:	6878      	ldr	r0, [r7, #4]
 8019516:	f7ff ffc1 	bl	801949c <tcp_rexmit_rto_commit>
  }
}
 801951a:	bf00      	nop
 801951c:	3708      	adds	r7, #8
 801951e:	46bd      	mov	sp, r7
 8019520:	bd80      	pop	{r7, pc}
 8019522:	bf00      	nop
 8019524:	080209a0 	.word	0x080209a0
 8019528:	08021024 	.word	0x08021024
 801952c:	080209f4 	.word	0x080209f4

08019530 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8019530:	b590      	push	{r4, r7, lr}
 8019532:	b085      	sub	sp, #20
 8019534:	af00      	add	r7, sp, #0
 8019536:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	2b00      	cmp	r3, #0
 801953c:	d106      	bne.n	801954c <tcp_rexmit+0x1c>
 801953e:	4b2f      	ldr	r3, [pc, #188]	@ (80195fc <tcp_rexmit+0xcc>)
 8019540:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8019544:	492e      	ldr	r1, [pc, #184]	@ (8019600 <tcp_rexmit+0xd0>)
 8019546:	482f      	ldr	r0, [pc, #188]	@ (8019604 <tcp_rexmit+0xd4>)
 8019548:	f004 fda2 	bl	801e090 <iprintf>

  if (pcb->unacked == NULL) {
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019550:	2b00      	cmp	r3, #0
 8019552:	d102      	bne.n	801955a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8019554:	f06f 0305 	mvn.w	r3, #5
 8019558:	e04c      	b.n	80195f4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801955e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8019560:	68b8      	ldr	r0, [r7, #8]
 8019562:	f7ff fe2b 	bl	80191bc <tcp_output_segment_busy>
 8019566:	4603      	mov	r3, r0
 8019568:	2b00      	cmp	r3, #0
 801956a:	d002      	beq.n	8019572 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801956c:	f06f 0305 	mvn.w	r3, #5
 8019570:	e040      	b.n	80195f4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8019572:	68bb      	ldr	r3, [r7, #8]
 8019574:	681a      	ldr	r2, [r3, #0]
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	336c      	adds	r3, #108	@ 0x6c
 801957e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019580:	e002      	b.n	8019588 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8019582:	68fb      	ldr	r3, [r7, #12]
 8019584:	681b      	ldr	r3, [r3, #0]
 8019586:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019588:	68fb      	ldr	r3, [r7, #12]
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	2b00      	cmp	r3, #0
 801958e:	d011      	beq.n	80195b4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019590:	68fb      	ldr	r3, [r7, #12]
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	68db      	ldr	r3, [r3, #12]
 8019596:	685b      	ldr	r3, [r3, #4]
 8019598:	4618      	mov	r0, r3
 801959a:	f7f9 fbb7 	bl	8012d0c <lwip_htonl>
 801959e:	4604      	mov	r4, r0
 80195a0:	68bb      	ldr	r3, [r7, #8]
 80195a2:	68db      	ldr	r3, [r3, #12]
 80195a4:	685b      	ldr	r3, [r3, #4]
 80195a6:	4618      	mov	r0, r3
 80195a8:	f7f9 fbb0 	bl	8012d0c <lwip_htonl>
 80195ac:	4603      	mov	r3, r0
 80195ae:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	dbe6      	blt.n	8019582 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80195b4:	68fb      	ldr	r3, [r7, #12]
 80195b6:	681a      	ldr	r2, [r3, #0]
 80195b8:	68bb      	ldr	r3, [r7, #8]
 80195ba:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	68ba      	ldr	r2, [r7, #8]
 80195c0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80195c2:	68bb      	ldr	r3, [r7, #8]
 80195c4:	681b      	ldr	r3, [r3, #0]
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d103      	bne.n	80195d2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	2200      	movs	r2, #0
 80195ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80195d8:	2bff      	cmp	r3, #255	@ 0xff
 80195da:	d007      	beq.n	80195ec <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80195e2:	3301      	adds	r3, #1
 80195e4:	b2da      	uxtb	r2, r3
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	2200      	movs	r2, #0
 80195f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80195f2:	2300      	movs	r3, #0
}
 80195f4:	4618      	mov	r0, r3
 80195f6:	3714      	adds	r7, #20
 80195f8:	46bd      	mov	sp, r7
 80195fa:	bd90      	pop	{r4, r7, pc}
 80195fc:	080209a0 	.word	0x080209a0
 8019600:	08021040 	.word	0x08021040
 8019604:	080209f4 	.word	0x080209f4

08019608 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8019608:	b580      	push	{r7, lr}
 801960a:	b082      	sub	sp, #8
 801960c:	af00      	add	r7, sp, #0
 801960e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	2b00      	cmp	r3, #0
 8019614:	d106      	bne.n	8019624 <tcp_rexmit_fast+0x1c>
 8019616:	4b2a      	ldr	r3, [pc, #168]	@ (80196c0 <tcp_rexmit_fast+0xb8>)
 8019618:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801961c:	4929      	ldr	r1, [pc, #164]	@ (80196c4 <tcp_rexmit_fast+0xbc>)
 801961e:	482a      	ldr	r0, [pc, #168]	@ (80196c8 <tcp_rexmit_fast+0xc0>)
 8019620:	f004 fd36 	bl	801e090 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019628:	2b00      	cmp	r3, #0
 801962a:	d045      	beq.n	80196b8 <tcp_rexmit_fast+0xb0>
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	8b5b      	ldrh	r3, [r3, #26]
 8019630:	f003 0304 	and.w	r3, r3, #4
 8019634:	2b00      	cmp	r3, #0
 8019636:	d13f      	bne.n	80196b8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8019638:	6878      	ldr	r0, [r7, #4]
 801963a:	f7ff ff79 	bl	8019530 <tcp_rexmit>
 801963e:	4603      	mov	r3, r0
 8019640:	2b00      	cmp	r3, #0
 8019642:	d139      	bne.n	80196b8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8019650:	4293      	cmp	r3, r2
 8019652:	bf28      	it	cs
 8019654:	4613      	movcs	r3, r2
 8019656:	b29b      	uxth	r3, r3
 8019658:	2b00      	cmp	r3, #0
 801965a:	da00      	bge.n	801965e <tcp_rexmit_fast+0x56>
 801965c:	3301      	adds	r3, #1
 801965e:	105b      	asrs	r3, r3, #1
 8019660:	b29a      	uxth	r2, r3
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801966e:	461a      	mov	r2, r3
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019674:	005b      	lsls	r3, r3, #1
 8019676:	429a      	cmp	r2, r3
 8019678:	d206      	bcs.n	8019688 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801967e:	005b      	lsls	r3, r3, #1
 8019680:	b29a      	uxth	r2, r3
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019692:	4619      	mov	r1, r3
 8019694:	0049      	lsls	r1, r1, #1
 8019696:	440b      	add	r3, r1
 8019698:	b29b      	uxth	r3, r3
 801969a:	4413      	add	r3, r2
 801969c:	b29a      	uxth	r2, r3
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	8b5b      	ldrh	r3, [r3, #26]
 80196a8:	f043 0304 	orr.w	r3, r3, #4
 80196ac:	b29a      	uxth	r2, r3
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	2200      	movs	r2, #0
 80196b6:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80196b8:	bf00      	nop
 80196ba:	3708      	adds	r7, #8
 80196bc:	46bd      	mov	sp, r7
 80196be:	bd80      	pop	{r7, pc}
 80196c0:	080209a0 	.word	0x080209a0
 80196c4:	08021058 	.word	0x08021058
 80196c8:	080209f4 	.word	0x080209f4

080196cc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80196cc:	b580      	push	{r7, lr}
 80196ce:	b086      	sub	sp, #24
 80196d0:	af00      	add	r7, sp, #0
 80196d2:	60f8      	str	r0, [r7, #12]
 80196d4:	607b      	str	r3, [r7, #4]
 80196d6:	460b      	mov	r3, r1
 80196d8:	817b      	strh	r3, [r7, #10]
 80196da:	4613      	mov	r3, r2
 80196dc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80196de:	897a      	ldrh	r2, [r7, #10]
 80196e0:	893b      	ldrh	r3, [r7, #8]
 80196e2:	4413      	add	r3, r2
 80196e4:	b29b      	uxth	r3, r3
 80196e6:	3314      	adds	r3, #20
 80196e8:	b29b      	uxth	r3, r3
 80196ea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80196ee:	4619      	mov	r1, r3
 80196f0:	2022      	movs	r0, #34	@ 0x22
 80196f2:	f7fa fbff 	bl	8013ef4 <pbuf_alloc>
 80196f6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80196f8:	697b      	ldr	r3, [r7, #20]
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d04d      	beq.n	801979a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80196fe:	897b      	ldrh	r3, [r7, #10]
 8019700:	3313      	adds	r3, #19
 8019702:	697a      	ldr	r2, [r7, #20]
 8019704:	8952      	ldrh	r2, [r2, #10]
 8019706:	4293      	cmp	r3, r2
 8019708:	db06      	blt.n	8019718 <tcp_output_alloc_header_common+0x4c>
 801970a:	4b26      	ldr	r3, [pc, #152]	@ (80197a4 <tcp_output_alloc_header_common+0xd8>)
 801970c:	f240 7223 	movw	r2, #1827	@ 0x723
 8019710:	4925      	ldr	r1, [pc, #148]	@ (80197a8 <tcp_output_alloc_header_common+0xdc>)
 8019712:	4826      	ldr	r0, [pc, #152]	@ (80197ac <tcp_output_alloc_header_common+0xe0>)
 8019714:	f004 fcbc 	bl	801e090 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8019718:	697b      	ldr	r3, [r7, #20]
 801971a:	685b      	ldr	r3, [r3, #4]
 801971c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801971e:	8c3b      	ldrh	r3, [r7, #32]
 8019720:	4618      	mov	r0, r3
 8019722:	f7f9 fadd 	bl	8012ce0 <lwip_htons>
 8019726:	4603      	mov	r3, r0
 8019728:	461a      	mov	r2, r3
 801972a:	693b      	ldr	r3, [r7, #16]
 801972c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801972e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019730:	4618      	mov	r0, r3
 8019732:	f7f9 fad5 	bl	8012ce0 <lwip_htons>
 8019736:	4603      	mov	r3, r0
 8019738:	461a      	mov	r2, r3
 801973a:	693b      	ldr	r3, [r7, #16]
 801973c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801973e:	693b      	ldr	r3, [r7, #16]
 8019740:	687a      	ldr	r2, [r7, #4]
 8019742:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8019744:	68f8      	ldr	r0, [r7, #12]
 8019746:	f7f9 fae1 	bl	8012d0c <lwip_htonl>
 801974a:	4602      	mov	r2, r0
 801974c:	693b      	ldr	r3, [r7, #16]
 801974e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8019750:	897b      	ldrh	r3, [r7, #10]
 8019752:	089b      	lsrs	r3, r3, #2
 8019754:	b29b      	uxth	r3, r3
 8019756:	3305      	adds	r3, #5
 8019758:	b29b      	uxth	r3, r3
 801975a:	031b      	lsls	r3, r3, #12
 801975c:	b29a      	uxth	r2, r3
 801975e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019762:	b29b      	uxth	r3, r3
 8019764:	4313      	orrs	r3, r2
 8019766:	b29b      	uxth	r3, r3
 8019768:	4618      	mov	r0, r3
 801976a:	f7f9 fab9 	bl	8012ce0 <lwip_htons>
 801976e:	4603      	mov	r3, r0
 8019770:	461a      	mov	r2, r3
 8019772:	693b      	ldr	r3, [r7, #16]
 8019774:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8019776:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019778:	4618      	mov	r0, r3
 801977a:	f7f9 fab1 	bl	8012ce0 <lwip_htons>
 801977e:	4603      	mov	r3, r0
 8019780:	461a      	mov	r2, r3
 8019782:	693b      	ldr	r3, [r7, #16]
 8019784:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8019786:	693b      	ldr	r3, [r7, #16]
 8019788:	2200      	movs	r2, #0
 801978a:	741a      	strb	r2, [r3, #16]
 801978c:	2200      	movs	r2, #0
 801978e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8019790:	693b      	ldr	r3, [r7, #16]
 8019792:	2200      	movs	r2, #0
 8019794:	749a      	strb	r2, [r3, #18]
 8019796:	2200      	movs	r2, #0
 8019798:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801979a:	697b      	ldr	r3, [r7, #20]
}
 801979c:	4618      	mov	r0, r3
 801979e:	3718      	adds	r7, #24
 80197a0:	46bd      	mov	sp, r7
 80197a2:	bd80      	pop	{r7, pc}
 80197a4:	080209a0 	.word	0x080209a0
 80197a8:	08021078 	.word	0x08021078
 80197ac:	080209f4 	.word	0x080209f4

080197b0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80197b0:	b5b0      	push	{r4, r5, r7, lr}
 80197b2:	b08a      	sub	sp, #40	@ 0x28
 80197b4:	af04      	add	r7, sp, #16
 80197b6:	60f8      	str	r0, [r7, #12]
 80197b8:	607b      	str	r3, [r7, #4]
 80197ba:	460b      	mov	r3, r1
 80197bc:	817b      	strh	r3, [r7, #10]
 80197be:	4613      	mov	r3, r2
 80197c0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80197c2:	68fb      	ldr	r3, [r7, #12]
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d106      	bne.n	80197d6 <tcp_output_alloc_header+0x26>
 80197c8:	4b15      	ldr	r3, [pc, #84]	@ (8019820 <tcp_output_alloc_header+0x70>)
 80197ca:	f240 7242 	movw	r2, #1858	@ 0x742
 80197ce:	4915      	ldr	r1, [pc, #84]	@ (8019824 <tcp_output_alloc_header+0x74>)
 80197d0:	4815      	ldr	r0, [pc, #84]	@ (8019828 <tcp_output_alloc_header+0x78>)
 80197d2:	f004 fc5d 	bl	801e090 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80197d6:	68fb      	ldr	r3, [r7, #12]
 80197d8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80197da:	68fb      	ldr	r3, [r7, #12]
 80197dc:	8adb      	ldrh	r3, [r3, #22]
 80197de:	68fa      	ldr	r2, [r7, #12]
 80197e0:	8b12      	ldrh	r2, [r2, #24]
 80197e2:	68f9      	ldr	r1, [r7, #12]
 80197e4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80197e6:	893d      	ldrh	r5, [r7, #8]
 80197e8:	897c      	ldrh	r4, [r7, #10]
 80197ea:	9103      	str	r1, [sp, #12]
 80197ec:	2110      	movs	r1, #16
 80197ee:	9102      	str	r1, [sp, #8]
 80197f0:	9201      	str	r2, [sp, #4]
 80197f2:	9300      	str	r3, [sp, #0]
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	462a      	mov	r2, r5
 80197f8:	4621      	mov	r1, r4
 80197fa:	f7ff ff67 	bl	80196cc <tcp_output_alloc_header_common>
 80197fe:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8019800:	697b      	ldr	r3, [r7, #20]
 8019802:	2b00      	cmp	r3, #0
 8019804:	d006      	beq.n	8019814 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019806:	68fb      	ldr	r3, [r7, #12]
 8019808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801980a:	68fa      	ldr	r2, [r7, #12]
 801980c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801980e:	441a      	add	r2, r3
 8019810:	68fb      	ldr	r3, [r7, #12]
 8019812:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8019814:	697b      	ldr	r3, [r7, #20]
}
 8019816:	4618      	mov	r0, r3
 8019818:	3718      	adds	r7, #24
 801981a:	46bd      	mov	sp, r7
 801981c:	bdb0      	pop	{r4, r5, r7, pc}
 801981e:	bf00      	nop
 8019820:	080209a0 	.word	0x080209a0
 8019824:	080210a8 	.word	0x080210a8
 8019828:	080209f4 	.word	0x080209f4

0801982c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801982c:	b580      	push	{r7, lr}
 801982e:	b088      	sub	sp, #32
 8019830:	af00      	add	r7, sp, #0
 8019832:	60f8      	str	r0, [r7, #12]
 8019834:	60b9      	str	r1, [r7, #8]
 8019836:	4611      	mov	r1, r2
 8019838:	461a      	mov	r2, r3
 801983a:	460b      	mov	r3, r1
 801983c:	71fb      	strb	r3, [r7, #7]
 801983e:	4613      	mov	r3, r2
 8019840:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8019842:	2300      	movs	r3, #0
 8019844:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8019846:	68bb      	ldr	r3, [r7, #8]
 8019848:	2b00      	cmp	r3, #0
 801984a:	d106      	bne.n	801985a <tcp_output_fill_options+0x2e>
 801984c:	4b12      	ldr	r3, [pc, #72]	@ (8019898 <tcp_output_fill_options+0x6c>)
 801984e:	f240 7256 	movw	r2, #1878	@ 0x756
 8019852:	4912      	ldr	r1, [pc, #72]	@ (801989c <tcp_output_fill_options+0x70>)
 8019854:	4812      	ldr	r0, [pc, #72]	@ (80198a0 <tcp_output_fill_options+0x74>)
 8019856:	f004 fc1b 	bl	801e090 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801985a:	68bb      	ldr	r3, [r7, #8]
 801985c:	685b      	ldr	r3, [r3, #4]
 801985e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8019860:	69bb      	ldr	r3, [r7, #24]
 8019862:	3314      	adds	r3, #20
 8019864:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8019866:	8bfb      	ldrh	r3, [r7, #30]
 8019868:	009b      	lsls	r3, r3, #2
 801986a:	461a      	mov	r2, r3
 801986c:	79fb      	ldrb	r3, [r7, #7]
 801986e:	009b      	lsls	r3, r3, #2
 8019870:	f003 0304 	and.w	r3, r3, #4
 8019874:	4413      	add	r3, r2
 8019876:	3314      	adds	r3, #20
 8019878:	69ba      	ldr	r2, [r7, #24]
 801987a:	4413      	add	r3, r2
 801987c:	697a      	ldr	r2, [r7, #20]
 801987e:	429a      	cmp	r2, r3
 8019880:	d006      	beq.n	8019890 <tcp_output_fill_options+0x64>
 8019882:	4b05      	ldr	r3, [pc, #20]	@ (8019898 <tcp_output_fill_options+0x6c>)
 8019884:	f240 7275 	movw	r2, #1909	@ 0x775
 8019888:	4906      	ldr	r1, [pc, #24]	@ (80198a4 <tcp_output_fill_options+0x78>)
 801988a:	4805      	ldr	r0, [pc, #20]	@ (80198a0 <tcp_output_fill_options+0x74>)
 801988c:	f004 fc00 	bl	801e090 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8019890:	bf00      	nop
 8019892:	3720      	adds	r7, #32
 8019894:	46bd      	mov	sp, r7
 8019896:	bd80      	pop	{r7, pc}
 8019898:	080209a0 	.word	0x080209a0
 801989c:	080210d0 	.word	0x080210d0
 80198a0:	080209f4 	.word	0x080209f4
 80198a4:	08020fc8 	.word	0x08020fc8

080198a8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80198a8:	b580      	push	{r7, lr}
 80198aa:	b08a      	sub	sp, #40	@ 0x28
 80198ac:	af04      	add	r7, sp, #16
 80198ae:	60f8      	str	r0, [r7, #12]
 80198b0:	60b9      	str	r1, [r7, #8]
 80198b2:	607a      	str	r2, [r7, #4]
 80198b4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80198b6:	68bb      	ldr	r3, [r7, #8]
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d106      	bne.n	80198ca <tcp_output_control_segment+0x22>
 80198bc:	4b1c      	ldr	r3, [pc, #112]	@ (8019930 <tcp_output_control_segment+0x88>)
 80198be:	f240 7287 	movw	r2, #1927	@ 0x787
 80198c2:	491c      	ldr	r1, [pc, #112]	@ (8019934 <tcp_output_control_segment+0x8c>)
 80198c4:	481c      	ldr	r0, [pc, #112]	@ (8019938 <tcp_output_control_segment+0x90>)
 80198c6:	f004 fbe3 	bl	801e090 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80198ca:	683a      	ldr	r2, [r7, #0]
 80198cc:	6879      	ldr	r1, [r7, #4]
 80198ce:	68f8      	ldr	r0, [r7, #12]
 80198d0:	f7fe ff42 	bl	8018758 <tcp_route>
 80198d4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80198d6:	693b      	ldr	r3, [r7, #16]
 80198d8:	2b00      	cmp	r3, #0
 80198da:	d102      	bne.n	80198e2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80198dc:	23fc      	movs	r3, #252	@ 0xfc
 80198de:	75fb      	strb	r3, [r7, #23]
 80198e0:	e01c      	b.n	801991c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80198e2:	68fb      	ldr	r3, [r7, #12]
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	d006      	beq.n	80198f6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80198e8:	68fb      	ldr	r3, [r7, #12]
 80198ea:	7adb      	ldrb	r3, [r3, #11]
 80198ec:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80198ee:	68fb      	ldr	r3, [r7, #12]
 80198f0:	7a9b      	ldrb	r3, [r3, #10]
 80198f2:	757b      	strb	r3, [r7, #21]
 80198f4:	e003      	b.n	80198fe <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80198f6:	23ff      	movs	r3, #255	@ 0xff
 80198f8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80198fa:	2300      	movs	r3, #0
 80198fc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80198fe:	7dba      	ldrb	r2, [r7, #22]
 8019900:	693b      	ldr	r3, [r7, #16]
 8019902:	9302      	str	r3, [sp, #8]
 8019904:	2306      	movs	r3, #6
 8019906:	9301      	str	r3, [sp, #4]
 8019908:	7d7b      	ldrb	r3, [r7, #21]
 801990a:	9300      	str	r3, [sp, #0]
 801990c:	4613      	mov	r3, r2
 801990e:	683a      	ldr	r2, [r7, #0]
 8019910:	6879      	ldr	r1, [r7, #4]
 8019912:	68b8      	ldr	r0, [r7, #8]
 8019914:	f002 fa4e 	bl	801bdb4 <ip4_output_if>
 8019918:	4603      	mov	r3, r0
 801991a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801991c:	68b8      	ldr	r0, [r7, #8]
 801991e:	f7fa fdcd 	bl	80144bc <pbuf_free>
  return err;
 8019922:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019926:	4618      	mov	r0, r3
 8019928:	3718      	adds	r7, #24
 801992a:	46bd      	mov	sp, r7
 801992c:	bd80      	pop	{r7, pc}
 801992e:	bf00      	nop
 8019930:	080209a0 	.word	0x080209a0
 8019934:	080210f8 	.word	0x080210f8
 8019938:	080209f4 	.word	0x080209f4

0801993c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801993c:	b590      	push	{r4, r7, lr}
 801993e:	b08b      	sub	sp, #44	@ 0x2c
 8019940:	af04      	add	r7, sp, #16
 8019942:	60f8      	str	r0, [r7, #12]
 8019944:	60b9      	str	r1, [r7, #8]
 8019946:	607a      	str	r2, [r7, #4]
 8019948:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801994a:	683b      	ldr	r3, [r7, #0]
 801994c:	2b00      	cmp	r3, #0
 801994e:	d106      	bne.n	801995e <tcp_rst+0x22>
 8019950:	4b1f      	ldr	r3, [pc, #124]	@ (80199d0 <tcp_rst+0x94>)
 8019952:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8019956:	491f      	ldr	r1, [pc, #124]	@ (80199d4 <tcp_rst+0x98>)
 8019958:	481f      	ldr	r0, [pc, #124]	@ (80199d8 <tcp_rst+0x9c>)
 801995a:	f004 fb99 	bl	801e090 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801995e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019960:	2b00      	cmp	r3, #0
 8019962:	d106      	bne.n	8019972 <tcp_rst+0x36>
 8019964:	4b1a      	ldr	r3, [pc, #104]	@ (80199d0 <tcp_rst+0x94>)
 8019966:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801996a:	491c      	ldr	r1, [pc, #112]	@ (80199dc <tcp_rst+0xa0>)
 801996c:	481a      	ldr	r0, [pc, #104]	@ (80199d8 <tcp_rst+0x9c>)
 801996e:	f004 fb8f 	bl	801e090 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019972:	2300      	movs	r3, #0
 8019974:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8019976:	f246 0308 	movw	r3, #24584	@ 0x6008
 801997a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801997c:	7dfb      	ldrb	r3, [r7, #23]
 801997e:	b29c      	uxth	r4, r3
 8019980:	68b8      	ldr	r0, [r7, #8]
 8019982:	f7f9 f9c3 	bl	8012d0c <lwip_htonl>
 8019986:	4602      	mov	r2, r0
 8019988:	8abb      	ldrh	r3, [r7, #20]
 801998a:	9303      	str	r3, [sp, #12]
 801998c:	2314      	movs	r3, #20
 801998e:	9302      	str	r3, [sp, #8]
 8019990:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8019992:	9301      	str	r3, [sp, #4]
 8019994:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019996:	9300      	str	r3, [sp, #0]
 8019998:	4613      	mov	r3, r2
 801999a:	2200      	movs	r2, #0
 801999c:	4621      	mov	r1, r4
 801999e:	6878      	ldr	r0, [r7, #4]
 80199a0:	f7ff fe94 	bl	80196cc <tcp_output_alloc_header_common>
 80199a4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80199a6:	693b      	ldr	r3, [r7, #16]
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	d00c      	beq.n	80199c6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80199ac:	7dfb      	ldrb	r3, [r7, #23]
 80199ae:	2200      	movs	r2, #0
 80199b0:	6939      	ldr	r1, [r7, #16]
 80199b2:	68f8      	ldr	r0, [r7, #12]
 80199b4:	f7ff ff3a 	bl	801982c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80199b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80199ba:	683a      	ldr	r2, [r7, #0]
 80199bc:	6939      	ldr	r1, [r7, #16]
 80199be:	68f8      	ldr	r0, [r7, #12]
 80199c0:	f7ff ff72 	bl	80198a8 <tcp_output_control_segment>
 80199c4:	e000      	b.n	80199c8 <tcp_rst+0x8c>
    return;
 80199c6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80199c8:	371c      	adds	r7, #28
 80199ca:	46bd      	mov	sp, r7
 80199cc:	bd90      	pop	{r4, r7, pc}
 80199ce:	bf00      	nop
 80199d0:	080209a0 	.word	0x080209a0
 80199d4:	08021124 	.word	0x08021124
 80199d8:	080209f4 	.word	0x080209f4
 80199dc:	08021140 	.word	0x08021140

080199e0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80199e0:	b590      	push	{r4, r7, lr}
 80199e2:	b087      	sub	sp, #28
 80199e4:	af00      	add	r7, sp, #0
 80199e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80199e8:	2300      	movs	r3, #0
 80199ea:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80199ec:	2300      	movs	r3, #0
 80199ee:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	2b00      	cmp	r3, #0
 80199f4:	d106      	bne.n	8019a04 <tcp_send_empty_ack+0x24>
 80199f6:	4b28      	ldr	r3, [pc, #160]	@ (8019a98 <tcp_send_empty_ack+0xb8>)
 80199f8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80199fc:	4927      	ldr	r1, [pc, #156]	@ (8019a9c <tcp_send_empty_ack+0xbc>)
 80199fe:	4828      	ldr	r0, [pc, #160]	@ (8019aa0 <tcp_send_empty_ack+0xc0>)
 8019a00:	f004 fb46 	bl	801e090 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019a04:	7dfb      	ldrb	r3, [r7, #23]
 8019a06:	009b      	lsls	r3, r3, #2
 8019a08:	b2db      	uxtb	r3, r3
 8019a0a:	f003 0304 	and.w	r3, r3, #4
 8019a0e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8019a10:	7d7b      	ldrb	r3, [r7, #21]
 8019a12:	b29c      	uxth	r4, r3
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019a18:	4618      	mov	r0, r3
 8019a1a:	f7f9 f977 	bl	8012d0c <lwip_htonl>
 8019a1e:	4603      	mov	r3, r0
 8019a20:	2200      	movs	r2, #0
 8019a22:	4621      	mov	r1, r4
 8019a24:	6878      	ldr	r0, [r7, #4]
 8019a26:	f7ff fec3 	bl	80197b0 <tcp_output_alloc_header>
 8019a2a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019a2c:	693b      	ldr	r3, [r7, #16]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d109      	bne.n	8019a46 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	8b5b      	ldrh	r3, [r3, #26]
 8019a36:	f043 0303 	orr.w	r3, r3, #3
 8019a3a:	b29a      	uxth	r2, r3
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8019a40:	f06f 0301 	mvn.w	r3, #1
 8019a44:	e023      	b.n	8019a8e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8019a46:	7dbb      	ldrb	r3, [r7, #22]
 8019a48:	7dfa      	ldrb	r2, [r7, #23]
 8019a4a:	6939      	ldr	r1, [r7, #16]
 8019a4c:	6878      	ldr	r0, [r7, #4]
 8019a4e:	f7ff feed 	bl	801982c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019a52:	687a      	ldr	r2, [r7, #4]
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	3304      	adds	r3, #4
 8019a58:	6939      	ldr	r1, [r7, #16]
 8019a5a:	6878      	ldr	r0, [r7, #4]
 8019a5c:	f7ff ff24 	bl	80198a8 <tcp_output_control_segment>
 8019a60:	4603      	mov	r3, r0
 8019a62:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8019a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d007      	beq.n	8019a7c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	8b5b      	ldrh	r3, [r3, #26]
 8019a70:	f043 0303 	orr.w	r3, r3, #3
 8019a74:	b29a      	uxth	r2, r3
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	835a      	strh	r2, [r3, #26]
 8019a7a:	e006      	b.n	8019a8a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	8b5b      	ldrh	r3, [r3, #26]
 8019a80:	f023 0303 	bic.w	r3, r3, #3
 8019a84:	b29a      	uxth	r2, r3
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8019a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019a8e:	4618      	mov	r0, r3
 8019a90:	371c      	adds	r7, #28
 8019a92:	46bd      	mov	sp, r7
 8019a94:	bd90      	pop	{r4, r7, pc}
 8019a96:	bf00      	nop
 8019a98:	080209a0 	.word	0x080209a0
 8019a9c:	0802115c 	.word	0x0802115c
 8019aa0:	080209f4 	.word	0x080209f4

08019aa4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8019aa4:	b590      	push	{r4, r7, lr}
 8019aa6:	b087      	sub	sp, #28
 8019aa8:	af00      	add	r7, sp, #0
 8019aaa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019aac:	2300      	movs	r3, #0
 8019aae:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d106      	bne.n	8019ac4 <tcp_keepalive+0x20>
 8019ab6:	4b18      	ldr	r3, [pc, #96]	@ (8019b18 <tcp_keepalive+0x74>)
 8019ab8:	f640 0224 	movw	r2, #2084	@ 0x824
 8019abc:	4917      	ldr	r1, [pc, #92]	@ (8019b1c <tcp_keepalive+0x78>)
 8019abe:	4818      	ldr	r0, [pc, #96]	@ (8019b20 <tcp_keepalive+0x7c>)
 8019ac0:	f004 fae6 	bl	801e090 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8019ac4:	7dfb      	ldrb	r3, [r7, #23]
 8019ac6:	b29c      	uxth	r4, r3
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019acc:	3b01      	subs	r3, #1
 8019ace:	4618      	mov	r0, r3
 8019ad0:	f7f9 f91c 	bl	8012d0c <lwip_htonl>
 8019ad4:	4603      	mov	r3, r0
 8019ad6:	2200      	movs	r2, #0
 8019ad8:	4621      	mov	r1, r4
 8019ada:	6878      	ldr	r0, [r7, #4]
 8019adc:	f7ff fe68 	bl	80197b0 <tcp_output_alloc_header>
 8019ae0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019ae2:	693b      	ldr	r3, [r7, #16]
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	d102      	bne.n	8019aee <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8019ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8019aec:	e010      	b.n	8019b10 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019aee:	7dfb      	ldrb	r3, [r7, #23]
 8019af0:	2200      	movs	r2, #0
 8019af2:	6939      	ldr	r1, [r7, #16]
 8019af4:	6878      	ldr	r0, [r7, #4]
 8019af6:	f7ff fe99 	bl	801982c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019afa:	687a      	ldr	r2, [r7, #4]
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	3304      	adds	r3, #4
 8019b00:	6939      	ldr	r1, [r7, #16]
 8019b02:	6878      	ldr	r0, [r7, #4]
 8019b04:	f7ff fed0 	bl	80198a8 <tcp_output_control_segment>
 8019b08:	4603      	mov	r3, r0
 8019b0a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019b10:	4618      	mov	r0, r3
 8019b12:	371c      	adds	r7, #28
 8019b14:	46bd      	mov	sp, r7
 8019b16:	bd90      	pop	{r4, r7, pc}
 8019b18:	080209a0 	.word	0x080209a0
 8019b1c:	0802117c 	.word	0x0802117c
 8019b20:	080209f4 	.word	0x080209f4

08019b24 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8019b24:	b590      	push	{r4, r7, lr}
 8019b26:	b08b      	sub	sp, #44	@ 0x2c
 8019b28:	af00      	add	r7, sp, #0
 8019b2a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019b2c:	2300      	movs	r3, #0
 8019b2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d106      	bne.n	8019b46 <tcp_zero_window_probe+0x22>
 8019b38:	4b4c      	ldr	r3, [pc, #304]	@ (8019c6c <tcp_zero_window_probe+0x148>)
 8019b3a:	f640 024f 	movw	r2, #2127	@ 0x84f
 8019b3e:	494c      	ldr	r1, [pc, #304]	@ (8019c70 <tcp_zero_window_probe+0x14c>)
 8019b40:	484c      	ldr	r0, [pc, #304]	@ (8019c74 <tcp_zero_window_probe+0x150>)
 8019b42:	f004 faa5 	bl	801e090 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019b4a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8019b4c:	6a3b      	ldr	r3, [r7, #32]
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	d101      	bne.n	8019b56 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8019b52:	2300      	movs	r3, #0
 8019b54:	e086      	b.n	8019c64 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8019b5c:	2bff      	cmp	r3, #255	@ 0xff
 8019b5e:	d007      	beq.n	8019b70 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8019b60:	687b      	ldr	r3, [r7, #4]
 8019b62:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8019b66:	3301      	adds	r3, #1
 8019b68:	b2da      	uxtb	r2, r3
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8019b70:	6a3b      	ldr	r3, [r7, #32]
 8019b72:	68db      	ldr	r3, [r3, #12]
 8019b74:	899b      	ldrh	r3, [r3, #12]
 8019b76:	b29b      	uxth	r3, r3
 8019b78:	4618      	mov	r0, r3
 8019b7a:	f7f9 f8b1 	bl	8012ce0 <lwip_htons>
 8019b7e:	4603      	mov	r3, r0
 8019b80:	b2db      	uxtb	r3, r3
 8019b82:	f003 0301 	and.w	r3, r3, #1
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d005      	beq.n	8019b96 <tcp_zero_window_probe+0x72>
 8019b8a:	6a3b      	ldr	r3, [r7, #32]
 8019b8c:	891b      	ldrh	r3, [r3, #8]
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	d101      	bne.n	8019b96 <tcp_zero_window_probe+0x72>
 8019b92:	2301      	movs	r3, #1
 8019b94:	e000      	b.n	8019b98 <tcp_zero_window_probe+0x74>
 8019b96:	2300      	movs	r3, #0
 8019b98:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8019b9a:	7ffb      	ldrb	r3, [r7, #31]
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	bf0c      	ite	eq
 8019ba0:	2301      	moveq	r3, #1
 8019ba2:	2300      	movne	r3, #0
 8019ba4:	b2db      	uxtb	r3, r3
 8019ba6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8019ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019bac:	b299      	uxth	r1, r3
 8019bae:	6a3b      	ldr	r3, [r7, #32]
 8019bb0:	68db      	ldr	r3, [r3, #12]
 8019bb2:	685b      	ldr	r3, [r3, #4]
 8019bb4:	8bba      	ldrh	r2, [r7, #28]
 8019bb6:	6878      	ldr	r0, [r7, #4]
 8019bb8:	f7ff fdfa 	bl	80197b0 <tcp_output_alloc_header>
 8019bbc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8019bbe:	69bb      	ldr	r3, [r7, #24]
 8019bc0:	2b00      	cmp	r3, #0
 8019bc2:	d102      	bne.n	8019bca <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8019bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8019bc8:	e04c      	b.n	8019c64 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8019bca:	69bb      	ldr	r3, [r7, #24]
 8019bcc:	685b      	ldr	r3, [r3, #4]
 8019bce:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8019bd0:	7ffb      	ldrb	r3, [r7, #31]
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d011      	beq.n	8019bfa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8019bd6:	697b      	ldr	r3, [r7, #20]
 8019bd8:	899b      	ldrh	r3, [r3, #12]
 8019bda:	b29b      	uxth	r3, r3
 8019bdc:	b21b      	sxth	r3, r3
 8019bde:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8019be2:	b21c      	sxth	r4, r3
 8019be4:	2011      	movs	r0, #17
 8019be6:	f7f9 f87b 	bl	8012ce0 <lwip_htons>
 8019bea:	4603      	mov	r3, r0
 8019bec:	b21b      	sxth	r3, r3
 8019bee:	4323      	orrs	r3, r4
 8019bf0:	b21b      	sxth	r3, r3
 8019bf2:	b29a      	uxth	r2, r3
 8019bf4:	697b      	ldr	r3, [r7, #20]
 8019bf6:	819a      	strh	r2, [r3, #12]
 8019bf8:	e010      	b.n	8019c1c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8019bfa:	69bb      	ldr	r3, [r7, #24]
 8019bfc:	685b      	ldr	r3, [r3, #4]
 8019bfe:	3314      	adds	r3, #20
 8019c00:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8019c02:	6a3b      	ldr	r3, [r7, #32]
 8019c04:	6858      	ldr	r0, [r3, #4]
 8019c06:	6a3b      	ldr	r3, [r7, #32]
 8019c08:	685b      	ldr	r3, [r3, #4]
 8019c0a:	891a      	ldrh	r2, [r3, #8]
 8019c0c:	6a3b      	ldr	r3, [r7, #32]
 8019c0e:	891b      	ldrh	r3, [r3, #8]
 8019c10:	1ad3      	subs	r3, r2, r3
 8019c12:	b29b      	uxth	r3, r3
 8019c14:	2201      	movs	r2, #1
 8019c16:	6939      	ldr	r1, [r7, #16]
 8019c18:	f7fa fe56 	bl	80148c8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8019c1c:	6a3b      	ldr	r3, [r7, #32]
 8019c1e:	68db      	ldr	r3, [r3, #12]
 8019c20:	685b      	ldr	r3, [r3, #4]
 8019c22:	4618      	mov	r0, r3
 8019c24:	f7f9 f872 	bl	8012d0c <lwip_htonl>
 8019c28:	4603      	mov	r3, r0
 8019c2a:	3301      	adds	r3, #1
 8019c2c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019c32:	68fb      	ldr	r3, [r7, #12]
 8019c34:	1ad3      	subs	r3, r2, r3
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	da02      	bge.n	8019c40 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	68fa      	ldr	r2, [r7, #12]
 8019c3e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019c40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019c44:	2200      	movs	r2, #0
 8019c46:	69b9      	ldr	r1, [r7, #24]
 8019c48:	6878      	ldr	r0, [r7, #4]
 8019c4a:	f7ff fdef 	bl	801982c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019c4e:	687a      	ldr	r2, [r7, #4]
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	3304      	adds	r3, #4
 8019c54:	69b9      	ldr	r1, [r7, #24]
 8019c56:	6878      	ldr	r0, [r7, #4]
 8019c58:	f7ff fe26 	bl	80198a8 <tcp_output_control_segment>
 8019c5c:	4603      	mov	r3, r0
 8019c5e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019c60:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019c64:	4618      	mov	r0, r3
 8019c66:	372c      	adds	r7, #44	@ 0x2c
 8019c68:	46bd      	mov	sp, r7
 8019c6a:	bd90      	pop	{r4, r7, pc}
 8019c6c:	080209a0 	.word	0x080209a0
 8019c70:	08021198 	.word	0x08021198
 8019c74:	080209f4 	.word	0x080209f4

08019c78 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8019c78:	b580      	push	{r7, lr}
 8019c7a:	b082      	sub	sp, #8
 8019c7c:	af00      	add	r7, sp, #0
 8019c7e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8019c80:	f7fa ff10 	bl	8014aa4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8019c84:	4b0a      	ldr	r3, [pc, #40]	@ (8019cb0 <tcpip_tcp_timer+0x38>)
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d103      	bne.n	8019c94 <tcpip_tcp_timer+0x1c>
 8019c8c:	4b09      	ldr	r3, [pc, #36]	@ (8019cb4 <tcpip_tcp_timer+0x3c>)
 8019c8e:	681b      	ldr	r3, [r3, #0]
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d005      	beq.n	8019ca0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019c94:	2200      	movs	r2, #0
 8019c96:	4908      	ldr	r1, [pc, #32]	@ (8019cb8 <tcpip_tcp_timer+0x40>)
 8019c98:	20fa      	movs	r0, #250	@ 0xfa
 8019c9a:	f000 f8f3 	bl	8019e84 <sys_timeout>
 8019c9e:	e003      	b.n	8019ca8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8019ca0:	4b06      	ldr	r3, [pc, #24]	@ (8019cbc <tcpip_tcp_timer+0x44>)
 8019ca2:	2200      	movs	r2, #0
 8019ca4:	601a      	str	r2, [r3, #0]
  }
}
 8019ca6:	bf00      	nop
 8019ca8:	bf00      	nop
 8019caa:	3708      	adds	r7, #8
 8019cac:	46bd      	mov	sp, r7
 8019cae:	bd80      	pop	{r7, pc}
 8019cb0:	200277bc 	.word	0x200277bc
 8019cb4:	200277c0 	.word	0x200277c0
 8019cb8:	08019c79 	.word	0x08019c79
 8019cbc:	20027808 	.word	0x20027808

08019cc0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8019cc0:	b580      	push	{r7, lr}
 8019cc2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8019cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8019cf0 <tcp_timer_needed+0x30>)
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	d10f      	bne.n	8019cec <tcp_timer_needed+0x2c>
 8019ccc:	4b09      	ldr	r3, [pc, #36]	@ (8019cf4 <tcp_timer_needed+0x34>)
 8019cce:	681b      	ldr	r3, [r3, #0]
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	d103      	bne.n	8019cdc <tcp_timer_needed+0x1c>
 8019cd4:	4b08      	ldr	r3, [pc, #32]	@ (8019cf8 <tcp_timer_needed+0x38>)
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d007      	beq.n	8019cec <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8019cdc:	4b04      	ldr	r3, [pc, #16]	@ (8019cf0 <tcp_timer_needed+0x30>)
 8019cde:	2201      	movs	r2, #1
 8019ce0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019ce2:	2200      	movs	r2, #0
 8019ce4:	4905      	ldr	r1, [pc, #20]	@ (8019cfc <tcp_timer_needed+0x3c>)
 8019ce6:	20fa      	movs	r0, #250	@ 0xfa
 8019ce8:	f000 f8cc 	bl	8019e84 <sys_timeout>
  }
}
 8019cec:	bf00      	nop
 8019cee:	bd80      	pop	{r7, pc}
 8019cf0:	20027808 	.word	0x20027808
 8019cf4:	200277bc 	.word	0x200277bc
 8019cf8:	200277c0 	.word	0x200277c0
 8019cfc:	08019c79 	.word	0x08019c79

08019d00 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8019d00:	b580      	push	{r7, lr}
 8019d02:	b086      	sub	sp, #24
 8019d04:	af00      	add	r7, sp, #0
 8019d06:	60f8      	str	r0, [r7, #12]
 8019d08:	60b9      	str	r1, [r7, #8]
 8019d0a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8019d0c:	200a      	movs	r0, #10
 8019d0e:	f7f9 fcbb 	bl	8013688 <memp_malloc>
 8019d12:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8019d14:	693b      	ldr	r3, [r7, #16]
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	d109      	bne.n	8019d2e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8019d1a:	693b      	ldr	r3, [r7, #16]
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	d151      	bne.n	8019dc4 <sys_timeout_abs+0xc4>
 8019d20:	4b2a      	ldr	r3, [pc, #168]	@ (8019dcc <sys_timeout_abs+0xcc>)
 8019d22:	22be      	movs	r2, #190	@ 0xbe
 8019d24:	492a      	ldr	r1, [pc, #168]	@ (8019dd0 <sys_timeout_abs+0xd0>)
 8019d26:	482b      	ldr	r0, [pc, #172]	@ (8019dd4 <sys_timeout_abs+0xd4>)
 8019d28:	f004 f9b2 	bl	801e090 <iprintf>
    return;
 8019d2c:	e04a      	b.n	8019dc4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8019d2e:	693b      	ldr	r3, [r7, #16]
 8019d30:	2200      	movs	r2, #0
 8019d32:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8019d34:	693b      	ldr	r3, [r7, #16]
 8019d36:	68ba      	ldr	r2, [r7, #8]
 8019d38:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8019d3a:	693b      	ldr	r3, [r7, #16]
 8019d3c:	687a      	ldr	r2, [r7, #4]
 8019d3e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8019d40:	693b      	ldr	r3, [r7, #16]
 8019d42:	68fa      	ldr	r2, [r7, #12]
 8019d44:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8019d46:	4b24      	ldr	r3, [pc, #144]	@ (8019dd8 <sys_timeout_abs+0xd8>)
 8019d48:	681b      	ldr	r3, [r3, #0]
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d103      	bne.n	8019d56 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8019d4e:	4a22      	ldr	r2, [pc, #136]	@ (8019dd8 <sys_timeout_abs+0xd8>)
 8019d50:	693b      	ldr	r3, [r7, #16]
 8019d52:	6013      	str	r3, [r2, #0]
    return;
 8019d54:	e037      	b.n	8019dc6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8019d56:	693b      	ldr	r3, [r7, #16]
 8019d58:	685a      	ldr	r2, [r3, #4]
 8019d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8019dd8 <sys_timeout_abs+0xd8>)
 8019d5c:	681b      	ldr	r3, [r3, #0]
 8019d5e:	685b      	ldr	r3, [r3, #4]
 8019d60:	1ad3      	subs	r3, r2, r3
 8019d62:	0fdb      	lsrs	r3, r3, #31
 8019d64:	f003 0301 	and.w	r3, r3, #1
 8019d68:	b2db      	uxtb	r3, r3
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	d007      	beq.n	8019d7e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8019d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8019dd8 <sys_timeout_abs+0xd8>)
 8019d70:	681a      	ldr	r2, [r3, #0]
 8019d72:	693b      	ldr	r3, [r7, #16]
 8019d74:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8019d76:	4a18      	ldr	r2, [pc, #96]	@ (8019dd8 <sys_timeout_abs+0xd8>)
 8019d78:	693b      	ldr	r3, [r7, #16]
 8019d7a:	6013      	str	r3, [r2, #0]
 8019d7c:	e023      	b.n	8019dc6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8019d7e:	4b16      	ldr	r3, [pc, #88]	@ (8019dd8 <sys_timeout_abs+0xd8>)
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	617b      	str	r3, [r7, #20]
 8019d84:	e01a      	b.n	8019dbc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8019d86:	697b      	ldr	r3, [r7, #20]
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	d00b      	beq.n	8019da6 <sys_timeout_abs+0xa6>
 8019d8e:	693b      	ldr	r3, [r7, #16]
 8019d90:	685a      	ldr	r2, [r3, #4]
 8019d92:	697b      	ldr	r3, [r7, #20]
 8019d94:	681b      	ldr	r3, [r3, #0]
 8019d96:	685b      	ldr	r3, [r3, #4]
 8019d98:	1ad3      	subs	r3, r2, r3
 8019d9a:	0fdb      	lsrs	r3, r3, #31
 8019d9c:	f003 0301 	and.w	r3, r3, #1
 8019da0:	b2db      	uxtb	r3, r3
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	d007      	beq.n	8019db6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8019da6:	697b      	ldr	r3, [r7, #20]
 8019da8:	681a      	ldr	r2, [r3, #0]
 8019daa:	693b      	ldr	r3, [r7, #16]
 8019dac:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8019dae:	697b      	ldr	r3, [r7, #20]
 8019db0:	693a      	ldr	r2, [r7, #16]
 8019db2:	601a      	str	r2, [r3, #0]
        break;
 8019db4:	e007      	b.n	8019dc6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8019db6:	697b      	ldr	r3, [r7, #20]
 8019db8:	681b      	ldr	r3, [r3, #0]
 8019dba:	617b      	str	r3, [r7, #20]
 8019dbc:	697b      	ldr	r3, [r7, #20]
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	d1e1      	bne.n	8019d86 <sys_timeout_abs+0x86>
 8019dc2:	e000      	b.n	8019dc6 <sys_timeout_abs+0xc6>
    return;
 8019dc4:	bf00      	nop
      }
    }
  }
}
 8019dc6:	3718      	adds	r7, #24
 8019dc8:	46bd      	mov	sp, r7
 8019dca:	bd80      	pop	{r7, pc}
 8019dcc:	080211bc 	.word	0x080211bc
 8019dd0:	080211f0 	.word	0x080211f0
 8019dd4:	08021230 	.word	0x08021230
 8019dd8:	20027800 	.word	0x20027800

08019ddc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8019ddc:	b580      	push	{r7, lr}
 8019dde:	b086      	sub	sp, #24
 8019de0:	af00      	add	r7, sp, #0
 8019de2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8019de8:	697b      	ldr	r3, [r7, #20]
 8019dea:	685b      	ldr	r3, [r3, #4]
 8019dec:	4798      	blx	r3

  now = sys_now();
 8019dee:	f7f4 fad1 	bl	800e394 <sys_now>
 8019df2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8019df4:	697b      	ldr	r3, [r7, #20]
 8019df6:	681a      	ldr	r2, [r3, #0]
 8019df8:	4b0f      	ldr	r3, [pc, #60]	@ (8019e38 <lwip_cyclic_timer+0x5c>)
 8019dfa:	681b      	ldr	r3, [r3, #0]
 8019dfc:	4413      	add	r3, r2
 8019dfe:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8019e00:	68fa      	ldr	r2, [r7, #12]
 8019e02:	693b      	ldr	r3, [r7, #16]
 8019e04:	1ad3      	subs	r3, r2, r3
 8019e06:	0fdb      	lsrs	r3, r3, #31
 8019e08:	f003 0301 	and.w	r3, r3, #1
 8019e0c:	b2db      	uxtb	r3, r3
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	d009      	beq.n	8019e26 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8019e12:	697b      	ldr	r3, [r7, #20]
 8019e14:	681a      	ldr	r2, [r3, #0]
 8019e16:	693b      	ldr	r3, [r7, #16]
 8019e18:	4413      	add	r3, r2
 8019e1a:	687a      	ldr	r2, [r7, #4]
 8019e1c:	4907      	ldr	r1, [pc, #28]	@ (8019e3c <lwip_cyclic_timer+0x60>)
 8019e1e:	4618      	mov	r0, r3
 8019e20:	f7ff ff6e 	bl	8019d00 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8019e24:	e004      	b.n	8019e30 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8019e26:	687a      	ldr	r2, [r7, #4]
 8019e28:	4904      	ldr	r1, [pc, #16]	@ (8019e3c <lwip_cyclic_timer+0x60>)
 8019e2a:	68f8      	ldr	r0, [r7, #12]
 8019e2c:	f7ff ff68 	bl	8019d00 <sys_timeout_abs>
}
 8019e30:	bf00      	nop
 8019e32:	3718      	adds	r7, #24
 8019e34:	46bd      	mov	sp, r7
 8019e36:	bd80      	pop	{r7, pc}
 8019e38:	20027804 	.word	0x20027804
 8019e3c:	08019ddd 	.word	0x08019ddd

08019e40 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8019e40:	b580      	push	{r7, lr}
 8019e42:	b082      	sub	sp, #8
 8019e44:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019e46:	2301      	movs	r3, #1
 8019e48:	607b      	str	r3, [r7, #4]
 8019e4a:	e00e      	b.n	8019e6a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8019e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8019e7c <sys_timeouts_init+0x3c>)
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	00db      	lsls	r3, r3, #3
 8019e58:	4a08      	ldr	r2, [pc, #32]	@ (8019e7c <sys_timeouts_init+0x3c>)
 8019e5a:	4413      	add	r3, r2
 8019e5c:	461a      	mov	r2, r3
 8019e5e:	4908      	ldr	r1, [pc, #32]	@ (8019e80 <sys_timeouts_init+0x40>)
 8019e60:	f000 f810 	bl	8019e84 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	3301      	adds	r3, #1
 8019e68:	607b      	str	r3, [r7, #4]
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	2b02      	cmp	r3, #2
 8019e6e:	d9ed      	bls.n	8019e4c <sys_timeouts_init+0xc>
  }
}
 8019e70:	bf00      	nop
 8019e72:	bf00      	nop
 8019e74:	3708      	adds	r7, #8
 8019e76:	46bd      	mov	sp, r7
 8019e78:	bd80      	pop	{r7, pc}
 8019e7a:	bf00      	nop
 8019e7c:	080222d4 	.word	0x080222d4
 8019e80:	08019ddd 	.word	0x08019ddd

08019e84 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8019e84:	b580      	push	{r7, lr}
 8019e86:	b086      	sub	sp, #24
 8019e88:	af00      	add	r7, sp, #0
 8019e8a:	60f8      	str	r0, [r7, #12]
 8019e8c:	60b9      	str	r1, [r7, #8]
 8019e8e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8019e90:	68fb      	ldr	r3, [r7, #12]
 8019e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019e96:	d306      	bcc.n	8019ea6 <sys_timeout+0x22>
 8019e98:	4b0a      	ldr	r3, [pc, #40]	@ (8019ec4 <sys_timeout+0x40>)
 8019e9a:	f240 1229 	movw	r2, #297	@ 0x129
 8019e9e:	490a      	ldr	r1, [pc, #40]	@ (8019ec8 <sys_timeout+0x44>)
 8019ea0:	480a      	ldr	r0, [pc, #40]	@ (8019ecc <sys_timeout+0x48>)
 8019ea2:	f004 f8f5 	bl	801e090 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8019ea6:	f7f4 fa75 	bl	800e394 <sys_now>
 8019eaa:	4602      	mov	r2, r0
 8019eac:	68fb      	ldr	r3, [r7, #12]
 8019eae:	4413      	add	r3, r2
 8019eb0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8019eb2:	687a      	ldr	r2, [r7, #4]
 8019eb4:	68b9      	ldr	r1, [r7, #8]
 8019eb6:	6978      	ldr	r0, [r7, #20]
 8019eb8:	f7ff ff22 	bl	8019d00 <sys_timeout_abs>
#endif
}
 8019ebc:	bf00      	nop
 8019ebe:	3718      	adds	r7, #24
 8019ec0:	46bd      	mov	sp, r7
 8019ec2:	bd80      	pop	{r7, pc}
 8019ec4:	080211bc 	.word	0x080211bc
 8019ec8:	08021258 	.word	0x08021258
 8019ecc:	08021230 	.word	0x08021230

08019ed0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8019ed0:	b580      	push	{r7, lr}
 8019ed2:	b084      	sub	sp, #16
 8019ed4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8019ed6:	f7f4 fa5d 	bl	800e394 <sys_now>
 8019eda:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8019edc:	4b17      	ldr	r3, [pc, #92]	@ (8019f3c <sys_check_timeouts+0x6c>)
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8019ee2:	68bb      	ldr	r3, [r7, #8]
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	d022      	beq.n	8019f2e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8019ee8:	68bb      	ldr	r3, [r7, #8]
 8019eea:	685b      	ldr	r3, [r3, #4]
 8019eec:	68fa      	ldr	r2, [r7, #12]
 8019eee:	1ad3      	subs	r3, r2, r3
 8019ef0:	0fdb      	lsrs	r3, r3, #31
 8019ef2:	f003 0301 	and.w	r3, r3, #1
 8019ef6:	b2db      	uxtb	r3, r3
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	d11a      	bne.n	8019f32 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8019efc:	68bb      	ldr	r3, [r7, #8]
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	4a0e      	ldr	r2, [pc, #56]	@ (8019f3c <sys_check_timeouts+0x6c>)
 8019f02:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8019f04:	68bb      	ldr	r3, [r7, #8]
 8019f06:	689b      	ldr	r3, [r3, #8]
 8019f08:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8019f0a:	68bb      	ldr	r3, [r7, #8]
 8019f0c:	68db      	ldr	r3, [r3, #12]
 8019f0e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8019f10:	68bb      	ldr	r3, [r7, #8]
 8019f12:	685b      	ldr	r3, [r3, #4]
 8019f14:	4a0a      	ldr	r2, [pc, #40]	@ (8019f40 <sys_check_timeouts+0x70>)
 8019f16:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019f18:	68b9      	ldr	r1, [r7, #8]
 8019f1a:	200a      	movs	r0, #10
 8019f1c:	f7f9 fc2a 	bl	8013774 <memp_free>
    if (handler != NULL) {
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d0da      	beq.n	8019edc <sys_check_timeouts+0xc>
      handler(arg);
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	6838      	ldr	r0, [r7, #0]
 8019f2a:	4798      	blx	r3
  do {
 8019f2c:	e7d6      	b.n	8019edc <sys_check_timeouts+0xc>
      return;
 8019f2e:	bf00      	nop
 8019f30:	e000      	b.n	8019f34 <sys_check_timeouts+0x64>
      return;
 8019f32:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8019f34:	3710      	adds	r7, #16
 8019f36:	46bd      	mov	sp, r7
 8019f38:	bd80      	pop	{r7, pc}
 8019f3a:	bf00      	nop
 8019f3c:	20027800 	.word	0x20027800
 8019f40:	20027804 	.word	0x20027804

08019f44 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8019f44:	b580      	push	{r7, lr}
 8019f46:	b082      	sub	sp, #8
 8019f48:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8019f4a:	4b16      	ldr	r3, [pc, #88]	@ (8019fa4 <sys_timeouts_sleeptime+0x60>)
 8019f4c:	681b      	ldr	r3, [r3, #0]
 8019f4e:	2b00      	cmp	r3, #0
 8019f50:	d102      	bne.n	8019f58 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8019f52:	f04f 33ff 	mov.w	r3, #4294967295
 8019f56:	e020      	b.n	8019f9a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8019f58:	f7f4 fa1c 	bl	800e394 <sys_now>
 8019f5c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8019f5e:	4b11      	ldr	r3, [pc, #68]	@ (8019fa4 <sys_timeouts_sleeptime+0x60>)
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	685a      	ldr	r2, [r3, #4]
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	1ad3      	subs	r3, r2, r3
 8019f68:	0fdb      	lsrs	r3, r3, #31
 8019f6a:	f003 0301 	and.w	r3, r3, #1
 8019f6e:	b2db      	uxtb	r3, r3
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	d001      	beq.n	8019f78 <sys_timeouts_sleeptime+0x34>
    return 0;
 8019f74:	2300      	movs	r3, #0
 8019f76:	e010      	b.n	8019f9a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8019f78:	4b0a      	ldr	r3, [pc, #40]	@ (8019fa4 <sys_timeouts_sleeptime+0x60>)
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	685a      	ldr	r2, [r3, #4]
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	1ad3      	subs	r3, r2, r3
 8019f82:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8019f84:	683b      	ldr	r3, [r7, #0]
 8019f86:	2b00      	cmp	r3, #0
 8019f88:	da06      	bge.n	8019f98 <sys_timeouts_sleeptime+0x54>
 8019f8a:	4b07      	ldr	r3, [pc, #28]	@ (8019fa8 <sys_timeouts_sleeptime+0x64>)
 8019f8c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8019f90:	4906      	ldr	r1, [pc, #24]	@ (8019fac <sys_timeouts_sleeptime+0x68>)
 8019f92:	4807      	ldr	r0, [pc, #28]	@ (8019fb0 <sys_timeouts_sleeptime+0x6c>)
 8019f94:	f004 f87c 	bl	801e090 <iprintf>
    return ret;
 8019f98:	683b      	ldr	r3, [r7, #0]
  }
}
 8019f9a:	4618      	mov	r0, r3
 8019f9c:	3708      	adds	r7, #8
 8019f9e:	46bd      	mov	sp, r7
 8019fa0:	bd80      	pop	{r7, pc}
 8019fa2:	bf00      	nop
 8019fa4:	20027800 	.word	0x20027800
 8019fa8:	080211bc 	.word	0x080211bc
 8019fac:	08021290 	.word	0x08021290
 8019fb0:	08021230 	.word	0x08021230

08019fb4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8019fb4:	b580      	push	{r7, lr}
 8019fb6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019fb8:	f003 ff6a 	bl	801de90 <rand>
 8019fbc:	4603      	mov	r3, r0
 8019fbe:	b29b      	uxth	r3, r3
 8019fc0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019fc4:	b29b      	uxth	r3, r3
 8019fc6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8019fca:	b29a      	uxth	r2, r3
 8019fcc:	4b01      	ldr	r3, [pc, #4]	@ (8019fd4 <udp_init+0x20>)
 8019fce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019fd0:	bf00      	nop
 8019fd2:	bd80      	pop	{r7, pc}
 8019fd4:	2000002c 	.word	0x2000002c

08019fd8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8019fd8:	b480      	push	{r7}
 8019fda:	b083      	sub	sp, #12
 8019fdc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8019fde:	2300      	movs	r3, #0
 8019fe0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8019fe2:	4b17      	ldr	r3, [pc, #92]	@ (801a040 <udp_new_port+0x68>)
 8019fe4:	881b      	ldrh	r3, [r3, #0]
 8019fe6:	1c5a      	adds	r2, r3, #1
 8019fe8:	b291      	uxth	r1, r2
 8019fea:	4a15      	ldr	r2, [pc, #84]	@ (801a040 <udp_new_port+0x68>)
 8019fec:	8011      	strh	r1, [r2, #0]
 8019fee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8019ff2:	4293      	cmp	r3, r2
 8019ff4:	d103      	bne.n	8019ffe <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8019ff6:	4b12      	ldr	r3, [pc, #72]	@ (801a040 <udp_new_port+0x68>)
 8019ff8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8019ffc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019ffe:	4b11      	ldr	r3, [pc, #68]	@ (801a044 <udp_new_port+0x6c>)
 801a000:	681b      	ldr	r3, [r3, #0]
 801a002:	603b      	str	r3, [r7, #0]
 801a004:	e011      	b.n	801a02a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801a006:	683b      	ldr	r3, [r7, #0]
 801a008:	8a5a      	ldrh	r2, [r3, #18]
 801a00a:	4b0d      	ldr	r3, [pc, #52]	@ (801a040 <udp_new_port+0x68>)
 801a00c:	881b      	ldrh	r3, [r3, #0]
 801a00e:	429a      	cmp	r2, r3
 801a010:	d108      	bne.n	801a024 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801a012:	88fb      	ldrh	r3, [r7, #6]
 801a014:	3301      	adds	r3, #1
 801a016:	80fb      	strh	r3, [r7, #6]
 801a018:	88fb      	ldrh	r3, [r7, #6]
 801a01a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801a01e:	d3e0      	bcc.n	8019fe2 <udp_new_port+0xa>
        return 0;
 801a020:	2300      	movs	r3, #0
 801a022:	e007      	b.n	801a034 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a024:	683b      	ldr	r3, [r7, #0]
 801a026:	68db      	ldr	r3, [r3, #12]
 801a028:	603b      	str	r3, [r7, #0]
 801a02a:	683b      	ldr	r3, [r7, #0]
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	d1ea      	bne.n	801a006 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801a030:	4b03      	ldr	r3, [pc, #12]	@ (801a040 <udp_new_port+0x68>)
 801a032:	881b      	ldrh	r3, [r3, #0]
}
 801a034:	4618      	mov	r0, r3
 801a036:	370c      	adds	r7, #12
 801a038:	46bd      	mov	sp, r7
 801a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a03e:	4770      	bx	lr
 801a040:	2000002c 	.word	0x2000002c
 801a044:	2002780c 	.word	0x2002780c

0801a048 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801a048:	b580      	push	{r7, lr}
 801a04a:	b084      	sub	sp, #16
 801a04c:	af00      	add	r7, sp, #0
 801a04e:	60f8      	str	r0, [r7, #12]
 801a050:	60b9      	str	r1, [r7, #8]
 801a052:	4613      	mov	r3, r2
 801a054:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801a056:	68fb      	ldr	r3, [r7, #12]
 801a058:	2b00      	cmp	r3, #0
 801a05a:	d105      	bne.n	801a068 <udp_input_local_match+0x20>
 801a05c:	4b27      	ldr	r3, [pc, #156]	@ (801a0fc <udp_input_local_match+0xb4>)
 801a05e:	2287      	movs	r2, #135	@ 0x87
 801a060:	4927      	ldr	r1, [pc, #156]	@ (801a100 <udp_input_local_match+0xb8>)
 801a062:	4828      	ldr	r0, [pc, #160]	@ (801a104 <udp_input_local_match+0xbc>)
 801a064:	f004 f814 	bl	801e090 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801a068:	68bb      	ldr	r3, [r7, #8]
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d105      	bne.n	801a07a <udp_input_local_match+0x32>
 801a06e:	4b23      	ldr	r3, [pc, #140]	@ (801a0fc <udp_input_local_match+0xb4>)
 801a070:	2288      	movs	r2, #136	@ 0x88
 801a072:	4925      	ldr	r1, [pc, #148]	@ (801a108 <udp_input_local_match+0xc0>)
 801a074:	4823      	ldr	r0, [pc, #140]	@ (801a104 <udp_input_local_match+0xbc>)
 801a076:	f004 f80b 	bl	801e090 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a07a:	68fb      	ldr	r3, [r7, #12]
 801a07c:	7a1b      	ldrb	r3, [r3, #8]
 801a07e:	2b00      	cmp	r3, #0
 801a080:	d00b      	beq.n	801a09a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a082:	68fb      	ldr	r3, [r7, #12]
 801a084:	7a1a      	ldrb	r2, [r3, #8]
 801a086:	4b21      	ldr	r3, [pc, #132]	@ (801a10c <udp_input_local_match+0xc4>)
 801a088:	685b      	ldr	r3, [r3, #4]
 801a08a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a08e:	3301      	adds	r3, #1
 801a090:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a092:	429a      	cmp	r2, r3
 801a094:	d001      	beq.n	801a09a <udp_input_local_match+0x52>
    return 0;
 801a096:	2300      	movs	r3, #0
 801a098:	e02b      	b.n	801a0f2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801a09a:	79fb      	ldrb	r3, [r7, #7]
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d018      	beq.n	801a0d2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a0a0:	68fb      	ldr	r3, [r7, #12]
 801a0a2:	2b00      	cmp	r3, #0
 801a0a4:	d013      	beq.n	801a0ce <udp_input_local_match+0x86>
 801a0a6:	68fb      	ldr	r3, [r7, #12]
 801a0a8:	681b      	ldr	r3, [r3, #0]
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d00f      	beq.n	801a0ce <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a0ae:	4b17      	ldr	r3, [pc, #92]	@ (801a10c <udp_input_local_match+0xc4>)
 801a0b0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a0b6:	d00a      	beq.n	801a0ce <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801a0b8:	68fb      	ldr	r3, [r7, #12]
 801a0ba:	681a      	ldr	r2, [r3, #0]
 801a0bc:	4b13      	ldr	r3, [pc, #76]	@ (801a10c <udp_input_local_match+0xc4>)
 801a0be:	695b      	ldr	r3, [r3, #20]
 801a0c0:	405a      	eors	r2, r3
 801a0c2:	68bb      	ldr	r3, [r7, #8]
 801a0c4:	3308      	adds	r3, #8
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d110      	bne.n	801a0f0 <udp_input_local_match+0xa8>
          return 1;
 801a0ce:	2301      	movs	r3, #1
 801a0d0:	e00f      	b.n	801a0f2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801a0d2:	68fb      	ldr	r3, [r7, #12]
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d009      	beq.n	801a0ec <udp_input_local_match+0xa4>
 801a0d8:	68fb      	ldr	r3, [r7, #12]
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	d005      	beq.n	801a0ec <udp_input_local_match+0xa4>
 801a0e0:	68fb      	ldr	r3, [r7, #12]
 801a0e2:	681a      	ldr	r2, [r3, #0]
 801a0e4:	4b09      	ldr	r3, [pc, #36]	@ (801a10c <udp_input_local_match+0xc4>)
 801a0e6:	695b      	ldr	r3, [r3, #20]
 801a0e8:	429a      	cmp	r2, r3
 801a0ea:	d101      	bne.n	801a0f0 <udp_input_local_match+0xa8>
        return 1;
 801a0ec:	2301      	movs	r3, #1
 801a0ee:	e000      	b.n	801a0f2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801a0f0:	2300      	movs	r3, #0
}
 801a0f2:	4618      	mov	r0, r3
 801a0f4:	3710      	adds	r7, #16
 801a0f6:	46bd      	mov	sp, r7
 801a0f8:	bd80      	pop	{r7, pc}
 801a0fa:	bf00      	nop
 801a0fc:	080212a4 	.word	0x080212a4
 801a100:	080212d4 	.word	0x080212d4
 801a104:	080212f8 	.word	0x080212f8
 801a108:	08021320 	.word	0x08021320
 801a10c:	200246b0 	.word	0x200246b0

0801a110 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801a110:	b590      	push	{r4, r7, lr}
 801a112:	b08d      	sub	sp, #52	@ 0x34
 801a114:	af02      	add	r7, sp, #8
 801a116:	6078      	str	r0, [r7, #4]
 801a118:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801a11a:	2300      	movs	r3, #0
 801a11c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	2b00      	cmp	r3, #0
 801a122:	d105      	bne.n	801a130 <udp_input+0x20>
 801a124:	4b7c      	ldr	r3, [pc, #496]	@ (801a318 <udp_input+0x208>)
 801a126:	22cf      	movs	r2, #207	@ 0xcf
 801a128:	497c      	ldr	r1, [pc, #496]	@ (801a31c <udp_input+0x20c>)
 801a12a:	487d      	ldr	r0, [pc, #500]	@ (801a320 <udp_input+0x210>)
 801a12c:	f003 ffb0 	bl	801e090 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801a130:	683b      	ldr	r3, [r7, #0]
 801a132:	2b00      	cmp	r3, #0
 801a134:	d105      	bne.n	801a142 <udp_input+0x32>
 801a136:	4b78      	ldr	r3, [pc, #480]	@ (801a318 <udp_input+0x208>)
 801a138:	22d0      	movs	r2, #208	@ 0xd0
 801a13a:	497a      	ldr	r1, [pc, #488]	@ (801a324 <udp_input+0x214>)
 801a13c:	4878      	ldr	r0, [pc, #480]	@ (801a320 <udp_input+0x210>)
 801a13e:	f003 ffa7 	bl	801e090 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	895b      	ldrh	r3, [r3, #10]
 801a146:	2b07      	cmp	r3, #7
 801a148:	d803      	bhi.n	801a152 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801a14a:	6878      	ldr	r0, [r7, #4]
 801a14c:	f7fa f9b6 	bl	80144bc <pbuf_free>
    goto end;
 801a150:	e0de      	b.n	801a310 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	685b      	ldr	r3, [r3, #4]
 801a156:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801a158:	4b73      	ldr	r3, [pc, #460]	@ (801a328 <udp_input+0x218>)
 801a15a:	695b      	ldr	r3, [r3, #20]
 801a15c:	4a72      	ldr	r2, [pc, #456]	@ (801a328 <udp_input+0x218>)
 801a15e:	6812      	ldr	r2, [r2, #0]
 801a160:	4611      	mov	r1, r2
 801a162:	4618      	mov	r0, r3
 801a164:	f001 fefe 	bl	801bf64 <ip4_addr_isbroadcast_u32>
 801a168:	4603      	mov	r3, r0
 801a16a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801a16c:	697b      	ldr	r3, [r7, #20]
 801a16e:	881b      	ldrh	r3, [r3, #0]
 801a170:	b29b      	uxth	r3, r3
 801a172:	4618      	mov	r0, r3
 801a174:	f7f8 fdb4 	bl	8012ce0 <lwip_htons>
 801a178:	4603      	mov	r3, r0
 801a17a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801a17c:	697b      	ldr	r3, [r7, #20]
 801a17e:	885b      	ldrh	r3, [r3, #2]
 801a180:	b29b      	uxth	r3, r3
 801a182:	4618      	mov	r0, r3
 801a184:	f7f8 fdac 	bl	8012ce0 <lwip_htons>
 801a188:	4603      	mov	r3, r0
 801a18a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801a18c:	2300      	movs	r3, #0
 801a18e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801a190:	2300      	movs	r3, #0
 801a192:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801a194:	2300      	movs	r3, #0
 801a196:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a198:	4b64      	ldr	r3, [pc, #400]	@ (801a32c <udp_input+0x21c>)
 801a19a:	681b      	ldr	r3, [r3, #0]
 801a19c:	627b      	str	r3, [r7, #36]	@ 0x24
 801a19e:	e054      	b.n	801a24a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801a1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1a2:	8a5b      	ldrh	r3, [r3, #18]
 801a1a4:	89fa      	ldrh	r2, [r7, #14]
 801a1a6:	429a      	cmp	r2, r3
 801a1a8:	d14a      	bne.n	801a240 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801a1aa:	7cfb      	ldrb	r3, [r7, #19]
 801a1ac:	461a      	mov	r2, r3
 801a1ae:	6839      	ldr	r1, [r7, #0]
 801a1b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a1b2:	f7ff ff49 	bl	801a048 <udp_input_local_match>
 801a1b6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	d041      	beq.n	801a240 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801a1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1be:	7c1b      	ldrb	r3, [r3, #16]
 801a1c0:	f003 0304 	and.w	r3, r3, #4
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	d11d      	bne.n	801a204 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801a1c8:	69fb      	ldr	r3, [r7, #28]
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	d102      	bne.n	801a1d4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801a1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1d0:	61fb      	str	r3, [r7, #28]
 801a1d2:	e017      	b.n	801a204 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801a1d4:	7cfb      	ldrb	r3, [r7, #19]
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d014      	beq.n	801a204 <udp_input+0xf4>
 801a1da:	4b53      	ldr	r3, [pc, #332]	@ (801a328 <udp_input+0x218>)
 801a1dc:	695b      	ldr	r3, [r3, #20]
 801a1de:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a1e2:	d10f      	bne.n	801a204 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801a1e4:	69fb      	ldr	r3, [r7, #28]
 801a1e6:	681a      	ldr	r2, [r3, #0]
 801a1e8:	683b      	ldr	r3, [r7, #0]
 801a1ea:	3304      	adds	r3, #4
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	429a      	cmp	r2, r3
 801a1f0:	d008      	beq.n	801a204 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801a1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1f4:	681a      	ldr	r2, [r3, #0]
 801a1f6:	683b      	ldr	r3, [r7, #0]
 801a1f8:	3304      	adds	r3, #4
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	429a      	cmp	r2, r3
 801a1fe:	d101      	bne.n	801a204 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801a200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a202:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801a204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a206:	8a9b      	ldrh	r3, [r3, #20]
 801a208:	8a3a      	ldrh	r2, [r7, #16]
 801a20a:	429a      	cmp	r2, r3
 801a20c:	d118      	bne.n	801a240 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a210:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801a212:	2b00      	cmp	r3, #0
 801a214:	d005      	beq.n	801a222 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801a216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a218:	685a      	ldr	r2, [r3, #4]
 801a21a:	4b43      	ldr	r3, [pc, #268]	@ (801a328 <udp_input+0x218>)
 801a21c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801a21e:	429a      	cmp	r2, r3
 801a220:	d10e      	bne.n	801a240 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801a222:	6a3b      	ldr	r3, [r7, #32]
 801a224:	2b00      	cmp	r3, #0
 801a226:	d014      	beq.n	801a252 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801a228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a22a:	68da      	ldr	r2, [r3, #12]
 801a22c:	6a3b      	ldr	r3, [r7, #32]
 801a22e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801a230:	4b3e      	ldr	r3, [pc, #248]	@ (801a32c <udp_input+0x21c>)
 801a232:	681a      	ldr	r2, [r3, #0]
 801a234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a236:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801a238:	4a3c      	ldr	r2, [pc, #240]	@ (801a32c <udp_input+0x21c>)
 801a23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a23c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801a23e:	e008      	b.n	801a252 <udp_input+0x142>
      }
    }

    prev = pcb;
 801a240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a242:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801a244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a246:	68db      	ldr	r3, [r3, #12]
 801a248:	627b      	str	r3, [r7, #36]	@ 0x24
 801a24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a24c:	2b00      	cmp	r3, #0
 801a24e:	d1a7      	bne.n	801a1a0 <udp_input+0x90>
 801a250:	e000      	b.n	801a254 <udp_input+0x144>
        break;
 801a252:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801a254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a256:	2b00      	cmp	r3, #0
 801a258:	d101      	bne.n	801a25e <udp_input+0x14e>
    pcb = uncon_pcb;
 801a25a:	69fb      	ldr	r3, [r7, #28]
 801a25c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801a25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a260:	2b00      	cmp	r3, #0
 801a262:	d002      	beq.n	801a26a <udp_input+0x15a>
    for_us = 1;
 801a264:	2301      	movs	r3, #1
 801a266:	76fb      	strb	r3, [r7, #27]
 801a268:	e00a      	b.n	801a280 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801a26a:	683b      	ldr	r3, [r7, #0]
 801a26c:	3304      	adds	r3, #4
 801a26e:	681a      	ldr	r2, [r3, #0]
 801a270:	4b2d      	ldr	r3, [pc, #180]	@ (801a328 <udp_input+0x218>)
 801a272:	695b      	ldr	r3, [r3, #20]
 801a274:	429a      	cmp	r2, r3
 801a276:	bf0c      	ite	eq
 801a278:	2301      	moveq	r3, #1
 801a27a:	2300      	movne	r3, #0
 801a27c:	b2db      	uxtb	r3, r3
 801a27e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801a280:	7efb      	ldrb	r3, [r7, #27]
 801a282:	2b00      	cmp	r3, #0
 801a284:	d041      	beq.n	801a30a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801a286:	2108      	movs	r1, #8
 801a288:	6878      	ldr	r0, [r7, #4]
 801a28a:	f7fa f891 	bl	80143b0 <pbuf_remove_header>
 801a28e:	4603      	mov	r3, r0
 801a290:	2b00      	cmp	r3, #0
 801a292:	d00a      	beq.n	801a2aa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801a294:	4b20      	ldr	r3, [pc, #128]	@ (801a318 <udp_input+0x208>)
 801a296:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801a29a:	4925      	ldr	r1, [pc, #148]	@ (801a330 <udp_input+0x220>)
 801a29c:	4820      	ldr	r0, [pc, #128]	@ (801a320 <udp_input+0x210>)
 801a29e:	f003 fef7 	bl	801e090 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801a2a2:	6878      	ldr	r0, [r7, #4]
 801a2a4:	f7fa f90a 	bl	80144bc <pbuf_free>
      goto end;
 801a2a8:	e032      	b.n	801a310 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801a2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	d012      	beq.n	801a2d6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801a2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2b2:	699b      	ldr	r3, [r3, #24]
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d00a      	beq.n	801a2ce <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801a2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2ba:	699c      	ldr	r4, [r3, #24]
 801a2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2be:	69d8      	ldr	r0, [r3, #28]
 801a2c0:	8a3b      	ldrh	r3, [r7, #16]
 801a2c2:	9300      	str	r3, [sp, #0]
 801a2c4:	4b1b      	ldr	r3, [pc, #108]	@ (801a334 <udp_input+0x224>)
 801a2c6:	687a      	ldr	r2, [r7, #4]
 801a2c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801a2ca:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801a2cc:	e021      	b.n	801a312 <udp_input+0x202>
        pbuf_free(p);
 801a2ce:	6878      	ldr	r0, [r7, #4]
 801a2d0:	f7fa f8f4 	bl	80144bc <pbuf_free>
        goto end;
 801a2d4:	e01c      	b.n	801a310 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801a2d6:	7cfb      	ldrb	r3, [r7, #19]
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	d112      	bne.n	801a302 <udp_input+0x1f2>
 801a2dc:	4b12      	ldr	r3, [pc, #72]	@ (801a328 <udp_input+0x218>)
 801a2de:	695b      	ldr	r3, [r3, #20]
 801a2e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801a2e4:	2be0      	cmp	r3, #224	@ 0xe0
 801a2e6:	d00c      	beq.n	801a302 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801a2e8:	4b0f      	ldr	r3, [pc, #60]	@ (801a328 <udp_input+0x218>)
 801a2ea:	899b      	ldrh	r3, [r3, #12]
 801a2ec:	3308      	adds	r3, #8
 801a2ee:	b29b      	uxth	r3, r3
 801a2f0:	b21b      	sxth	r3, r3
 801a2f2:	4619      	mov	r1, r3
 801a2f4:	6878      	ldr	r0, [r7, #4]
 801a2f6:	f7fa f8ce 	bl	8014496 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801a2fa:	2103      	movs	r1, #3
 801a2fc:	6878      	ldr	r0, [r7, #4]
 801a2fe:	f001 fb11 	bl	801b924 <icmp_dest_unreach>
      pbuf_free(p);
 801a302:	6878      	ldr	r0, [r7, #4]
 801a304:	f7fa f8da 	bl	80144bc <pbuf_free>
  return;
 801a308:	e003      	b.n	801a312 <udp_input+0x202>
    pbuf_free(p);
 801a30a:	6878      	ldr	r0, [r7, #4]
 801a30c:	f7fa f8d6 	bl	80144bc <pbuf_free>
  return;
 801a310:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801a312:	372c      	adds	r7, #44	@ 0x2c
 801a314:	46bd      	mov	sp, r7
 801a316:	bd90      	pop	{r4, r7, pc}
 801a318:	080212a4 	.word	0x080212a4
 801a31c:	08021348 	.word	0x08021348
 801a320:	080212f8 	.word	0x080212f8
 801a324:	08021360 	.word	0x08021360
 801a328:	200246b0 	.word	0x200246b0
 801a32c:	2002780c 	.word	0x2002780c
 801a330:	0802137c 	.word	0x0802137c
 801a334:	200246c0 	.word	0x200246c0

0801a338 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801a338:	b580      	push	{r7, lr}
 801a33a:	b088      	sub	sp, #32
 801a33c:	af02      	add	r7, sp, #8
 801a33e:	60f8      	str	r0, [r7, #12]
 801a340:	60b9      	str	r1, [r7, #8]
 801a342:	607a      	str	r2, [r7, #4]
 801a344:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801a346:	68fb      	ldr	r3, [r7, #12]
 801a348:	2b00      	cmp	r3, #0
 801a34a:	d109      	bne.n	801a360 <udp_sendto+0x28>
 801a34c:	4b23      	ldr	r3, [pc, #140]	@ (801a3dc <udp_sendto+0xa4>)
 801a34e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801a352:	4923      	ldr	r1, [pc, #140]	@ (801a3e0 <udp_sendto+0xa8>)
 801a354:	4823      	ldr	r0, [pc, #140]	@ (801a3e4 <udp_sendto+0xac>)
 801a356:	f003 fe9b 	bl	801e090 <iprintf>
 801a35a:	f06f 030f 	mvn.w	r3, #15
 801a35e:	e038      	b.n	801a3d2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801a360:	68bb      	ldr	r3, [r7, #8]
 801a362:	2b00      	cmp	r3, #0
 801a364:	d109      	bne.n	801a37a <udp_sendto+0x42>
 801a366:	4b1d      	ldr	r3, [pc, #116]	@ (801a3dc <udp_sendto+0xa4>)
 801a368:	f240 2219 	movw	r2, #537	@ 0x219
 801a36c:	491e      	ldr	r1, [pc, #120]	@ (801a3e8 <udp_sendto+0xb0>)
 801a36e:	481d      	ldr	r0, [pc, #116]	@ (801a3e4 <udp_sendto+0xac>)
 801a370:	f003 fe8e 	bl	801e090 <iprintf>
 801a374:	f06f 030f 	mvn.w	r3, #15
 801a378:	e02b      	b.n	801a3d2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	d109      	bne.n	801a394 <udp_sendto+0x5c>
 801a380:	4b16      	ldr	r3, [pc, #88]	@ (801a3dc <udp_sendto+0xa4>)
 801a382:	f240 221a 	movw	r2, #538	@ 0x21a
 801a386:	4919      	ldr	r1, [pc, #100]	@ (801a3ec <udp_sendto+0xb4>)
 801a388:	4816      	ldr	r0, [pc, #88]	@ (801a3e4 <udp_sendto+0xac>)
 801a38a:	f003 fe81 	bl	801e090 <iprintf>
 801a38e:	f06f 030f 	mvn.w	r3, #15
 801a392:	e01e      	b.n	801a3d2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801a394:	68fb      	ldr	r3, [r7, #12]
 801a396:	7a1b      	ldrb	r3, [r3, #8]
 801a398:	2b00      	cmp	r3, #0
 801a39a:	d006      	beq.n	801a3aa <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801a39c:	68fb      	ldr	r3, [r7, #12]
 801a39e:	7a1b      	ldrb	r3, [r3, #8]
 801a3a0:	4618      	mov	r0, r3
 801a3a2:	f7f9 fcfd 	bl	8013da0 <netif_get_by_index>
 801a3a6:	6178      	str	r0, [r7, #20]
 801a3a8:	e003      	b.n	801a3b2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801a3aa:	6878      	ldr	r0, [r7, #4]
 801a3ac:	f001 fb44 	bl	801ba38 <ip4_route>
 801a3b0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801a3b2:	697b      	ldr	r3, [r7, #20]
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	d102      	bne.n	801a3be <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801a3b8:	f06f 0303 	mvn.w	r3, #3
 801a3bc:	e009      	b.n	801a3d2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801a3be:	887a      	ldrh	r2, [r7, #2]
 801a3c0:	697b      	ldr	r3, [r7, #20]
 801a3c2:	9300      	str	r3, [sp, #0]
 801a3c4:	4613      	mov	r3, r2
 801a3c6:	687a      	ldr	r2, [r7, #4]
 801a3c8:	68b9      	ldr	r1, [r7, #8]
 801a3ca:	68f8      	ldr	r0, [r7, #12]
 801a3cc:	f000 f810 	bl	801a3f0 <udp_sendto_if>
 801a3d0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801a3d2:	4618      	mov	r0, r3
 801a3d4:	3718      	adds	r7, #24
 801a3d6:	46bd      	mov	sp, r7
 801a3d8:	bd80      	pop	{r7, pc}
 801a3da:	bf00      	nop
 801a3dc:	080212a4 	.word	0x080212a4
 801a3e0:	080213c8 	.word	0x080213c8
 801a3e4:	080212f8 	.word	0x080212f8
 801a3e8:	080213e0 	.word	0x080213e0
 801a3ec:	080213fc 	.word	0x080213fc

0801a3f0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801a3f0:	b580      	push	{r7, lr}
 801a3f2:	b088      	sub	sp, #32
 801a3f4:	af02      	add	r7, sp, #8
 801a3f6:	60f8      	str	r0, [r7, #12]
 801a3f8:	60b9      	str	r1, [r7, #8]
 801a3fa:	607a      	str	r2, [r7, #4]
 801a3fc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801a3fe:	68fb      	ldr	r3, [r7, #12]
 801a400:	2b00      	cmp	r3, #0
 801a402:	d109      	bne.n	801a418 <udp_sendto_if+0x28>
 801a404:	4b2e      	ldr	r3, [pc, #184]	@ (801a4c0 <udp_sendto_if+0xd0>)
 801a406:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a40a:	492e      	ldr	r1, [pc, #184]	@ (801a4c4 <udp_sendto_if+0xd4>)
 801a40c:	482e      	ldr	r0, [pc, #184]	@ (801a4c8 <udp_sendto_if+0xd8>)
 801a40e:	f003 fe3f 	bl	801e090 <iprintf>
 801a412:	f06f 030f 	mvn.w	r3, #15
 801a416:	e04f      	b.n	801a4b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801a418:	68bb      	ldr	r3, [r7, #8]
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	d109      	bne.n	801a432 <udp_sendto_if+0x42>
 801a41e:	4b28      	ldr	r3, [pc, #160]	@ (801a4c0 <udp_sendto_if+0xd0>)
 801a420:	f240 2281 	movw	r2, #641	@ 0x281
 801a424:	4929      	ldr	r1, [pc, #164]	@ (801a4cc <udp_sendto_if+0xdc>)
 801a426:	4828      	ldr	r0, [pc, #160]	@ (801a4c8 <udp_sendto_if+0xd8>)
 801a428:	f003 fe32 	bl	801e090 <iprintf>
 801a42c:	f06f 030f 	mvn.w	r3, #15
 801a430:	e042      	b.n	801a4b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	2b00      	cmp	r3, #0
 801a436:	d109      	bne.n	801a44c <udp_sendto_if+0x5c>
 801a438:	4b21      	ldr	r3, [pc, #132]	@ (801a4c0 <udp_sendto_if+0xd0>)
 801a43a:	f240 2282 	movw	r2, #642	@ 0x282
 801a43e:	4924      	ldr	r1, [pc, #144]	@ (801a4d0 <udp_sendto_if+0xe0>)
 801a440:	4821      	ldr	r0, [pc, #132]	@ (801a4c8 <udp_sendto_if+0xd8>)
 801a442:	f003 fe25 	bl	801e090 <iprintf>
 801a446:	f06f 030f 	mvn.w	r3, #15
 801a44a:	e035      	b.n	801a4b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801a44c:	6a3b      	ldr	r3, [r7, #32]
 801a44e:	2b00      	cmp	r3, #0
 801a450:	d109      	bne.n	801a466 <udp_sendto_if+0x76>
 801a452:	4b1b      	ldr	r3, [pc, #108]	@ (801a4c0 <udp_sendto_if+0xd0>)
 801a454:	f240 2283 	movw	r2, #643	@ 0x283
 801a458:	491e      	ldr	r1, [pc, #120]	@ (801a4d4 <udp_sendto_if+0xe4>)
 801a45a:	481b      	ldr	r0, [pc, #108]	@ (801a4c8 <udp_sendto_if+0xd8>)
 801a45c:	f003 fe18 	bl	801e090 <iprintf>
 801a460:	f06f 030f 	mvn.w	r3, #15
 801a464:	e028      	b.n	801a4b8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a466:	68fb      	ldr	r3, [r7, #12]
 801a468:	2b00      	cmp	r3, #0
 801a46a:	d009      	beq.n	801a480 <udp_sendto_if+0x90>
 801a46c:	68fb      	ldr	r3, [r7, #12]
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	2b00      	cmp	r3, #0
 801a472:	d005      	beq.n	801a480 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801a474:	68fb      	ldr	r3, [r7, #12]
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801a47c:	2be0      	cmp	r3, #224	@ 0xe0
 801a47e:	d103      	bne.n	801a488 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801a480:	6a3b      	ldr	r3, [r7, #32]
 801a482:	3304      	adds	r3, #4
 801a484:	617b      	str	r3, [r7, #20]
 801a486:	e00b      	b.n	801a4a0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801a488:	68fb      	ldr	r3, [r7, #12]
 801a48a:	681a      	ldr	r2, [r3, #0]
 801a48c:	6a3b      	ldr	r3, [r7, #32]
 801a48e:	3304      	adds	r3, #4
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	429a      	cmp	r2, r3
 801a494:	d002      	beq.n	801a49c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801a496:	f06f 0303 	mvn.w	r3, #3
 801a49a:	e00d      	b.n	801a4b8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801a49c:	68fb      	ldr	r3, [r7, #12]
 801a49e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801a4a0:	887a      	ldrh	r2, [r7, #2]
 801a4a2:	697b      	ldr	r3, [r7, #20]
 801a4a4:	9301      	str	r3, [sp, #4]
 801a4a6:	6a3b      	ldr	r3, [r7, #32]
 801a4a8:	9300      	str	r3, [sp, #0]
 801a4aa:	4613      	mov	r3, r2
 801a4ac:	687a      	ldr	r2, [r7, #4]
 801a4ae:	68b9      	ldr	r1, [r7, #8]
 801a4b0:	68f8      	ldr	r0, [r7, #12]
 801a4b2:	f000 f811 	bl	801a4d8 <udp_sendto_if_src>
 801a4b6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801a4b8:	4618      	mov	r0, r3
 801a4ba:	3718      	adds	r7, #24
 801a4bc:	46bd      	mov	sp, r7
 801a4be:	bd80      	pop	{r7, pc}
 801a4c0:	080212a4 	.word	0x080212a4
 801a4c4:	08021418 	.word	0x08021418
 801a4c8:	080212f8 	.word	0x080212f8
 801a4cc:	08021434 	.word	0x08021434
 801a4d0:	08021450 	.word	0x08021450
 801a4d4:	08021470 	.word	0x08021470

0801a4d8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801a4d8:	b580      	push	{r7, lr}
 801a4da:	b08c      	sub	sp, #48	@ 0x30
 801a4dc:	af04      	add	r7, sp, #16
 801a4de:	60f8      	str	r0, [r7, #12]
 801a4e0:	60b9      	str	r1, [r7, #8]
 801a4e2:	607a      	str	r2, [r7, #4]
 801a4e4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801a4e6:	68fb      	ldr	r3, [r7, #12]
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	d109      	bne.n	801a500 <udp_sendto_if_src+0x28>
 801a4ec:	4b65      	ldr	r3, [pc, #404]	@ (801a684 <udp_sendto_if_src+0x1ac>)
 801a4ee:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801a4f2:	4965      	ldr	r1, [pc, #404]	@ (801a688 <udp_sendto_if_src+0x1b0>)
 801a4f4:	4865      	ldr	r0, [pc, #404]	@ (801a68c <udp_sendto_if_src+0x1b4>)
 801a4f6:	f003 fdcb 	bl	801e090 <iprintf>
 801a4fa:	f06f 030f 	mvn.w	r3, #15
 801a4fe:	e0bc      	b.n	801a67a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801a500:	68bb      	ldr	r3, [r7, #8]
 801a502:	2b00      	cmp	r3, #0
 801a504:	d109      	bne.n	801a51a <udp_sendto_if_src+0x42>
 801a506:	4b5f      	ldr	r3, [pc, #380]	@ (801a684 <udp_sendto_if_src+0x1ac>)
 801a508:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801a50c:	4960      	ldr	r1, [pc, #384]	@ (801a690 <udp_sendto_if_src+0x1b8>)
 801a50e:	485f      	ldr	r0, [pc, #380]	@ (801a68c <udp_sendto_if_src+0x1b4>)
 801a510:	f003 fdbe 	bl	801e090 <iprintf>
 801a514:	f06f 030f 	mvn.w	r3, #15
 801a518:	e0af      	b.n	801a67a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	2b00      	cmp	r3, #0
 801a51e:	d109      	bne.n	801a534 <udp_sendto_if_src+0x5c>
 801a520:	4b58      	ldr	r3, [pc, #352]	@ (801a684 <udp_sendto_if_src+0x1ac>)
 801a522:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801a526:	495b      	ldr	r1, [pc, #364]	@ (801a694 <udp_sendto_if_src+0x1bc>)
 801a528:	4858      	ldr	r0, [pc, #352]	@ (801a68c <udp_sendto_if_src+0x1b4>)
 801a52a:	f003 fdb1 	bl	801e090 <iprintf>
 801a52e:	f06f 030f 	mvn.w	r3, #15
 801a532:	e0a2      	b.n	801a67a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801a534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a536:	2b00      	cmp	r3, #0
 801a538:	d109      	bne.n	801a54e <udp_sendto_if_src+0x76>
 801a53a:	4b52      	ldr	r3, [pc, #328]	@ (801a684 <udp_sendto_if_src+0x1ac>)
 801a53c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801a540:	4955      	ldr	r1, [pc, #340]	@ (801a698 <udp_sendto_if_src+0x1c0>)
 801a542:	4852      	ldr	r0, [pc, #328]	@ (801a68c <udp_sendto_if_src+0x1b4>)
 801a544:	f003 fda4 	bl	801e090 <iprintf>
 801a548:	f06f 030f 	mvn.w	r3, #15
 801a54c:	e095      	b.n	801a67a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801a54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a550:	2b00      	cmp	r3, #0
 801a552:	d109      	bne.n	801a568 <udp_sendto_if_src+0x90>
 801a554:	4b4b      	ldr	r3, [pc, #300]	@ (801a684 <udp_sendto_if_src+0x1ac>)
 801a556:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801a55a:	4950      	ldr	r1, [pc, #320]	@ (801a69c <udp_sendto_if_src+0x1c4>)
 801a55c:	484b      	ldr	r0, [pc, #300]	@ (801a68c <udp_sendto_if_src+0x1b4>)
 801a55e:	f003 fd97 	bl	801e090 <iprintf>
 801a562:	f06f 030f 	mvn.w	r3, #15
 801a566:	e088      	b.n	801a67a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801a568:	68fb      	ldr	r3, [r7, #12]
 801a56a:	8a5b      	ldrh	r3, [r3, #18]
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d10f      	bne.n	801a590 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801a570:	68f9      	ldr	r1, [r7, #12]
 801a572:	68fb      	ldr	r3, [r7, #12]
 801a574:	8a5b      	ldrh	r3, [r3, #18]
 801a576:	461a      	mov	r2, r3
 801a578:	68f8      	ldr	r0, [r7, #12]
 801a57a:	f000 f893 	bl	801a6a4 <udp_bind>
 801a57e:	4603      	mov	r3, r0
 801a580:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801a582:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801a586:	2b00      	cmp	r3, #0
 801a588:	d002      	beq.n	801a590 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801a58a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801a58e:	e074      	b.n	801a67a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801a590:	68bb      	ldr	r3, [r7, #8]
 801a592:	891b      	ldrh	r3, [r3, #8]
 801a594:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801a598:	4293      	cmp	r3, r2
 801a59a:	d902      	bls.n	801a5a2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801a59c:	f04f 33ff 	mov.w	r3, #4294967295
 801a5a0:	e06b      	b.n	801a67a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801a5a2:	2108      	movs	r1, #8
 801a5a4:	68b8      	ldr	r0, [r7, #8]
 801a5a6:	f7f9 fef3 	bl	8014390 <pbuf_add_header>
 801a5aa:	4603      	mov	r3, r0
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	d015      	beq.n	801a5dc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801a5b0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a5b4:	2108      	movs	r1, #8
 801a5b6:	2022      	movs	r0, #34	@ 0x22
 801a5b8:	f7f9 fc9c 	bl	8013ef4 <pbuf_alloc>
 801a5bc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801a5be:	69fb      	ldr	r3, [r7, #28]
 801a5c0:	2b00      	cmp	r3, #0
 801a5c2:	d102      	bne.n	801a5ca <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801a5c4:	f04f 33ff 	mov.w	r3, #4294967295
 801a5c8:	e057      	b.n	801a67a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801a5ca:	68bb      	ldr	r3, [r7, #8]
 801a5cc:	891b      	ldrh	r3, [r3, #8]
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	d006      	beq.n	801a5e0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801a5d2:	68b9      	ldr	r1, [r7, #8]
 801a5d4:	69f8      	ldr	r0, [r7, #28]
 801a5d6:	f7fa f895 	bl	8014704 <pbuf_chain>
 801a5da:	e001      	b.n	801a5e0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801a5dc:	68bb      	ldr	r3, [r7, #8]
 801a5de:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801a5e0:	69fb      	ldr	r3, [r7, #28]
 801a5e2:	895b      	ldrh	r3, [r3, #10]
 801a5e4:	2b07      	cmp	r3, #7
 801a5e6:	d806      	bhi.n	801a5f6 <udp_sendto_if_src+0x11e>
 801a5e8:	4b26      	ldr	r3, [pc, #152]	@ (801a684 <udp_sendto_if_src+0x1ac>)
 801a5ea:	f240 320d 	movw	r2, #781	@ 0x30d
 801a5ee:	492c      	ldr	r1, [pc, #176]	@ (801a6a0 <udp_sendto_if_src+0x1c8>)
 801a5f0:	4826      	ldr	r0, [pc, #152]	@ (801a68c <udp_sendto_if_src+0x1b4>)
 801a5f2:	f003 fd4d 	bl	801e090 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801a5f6:	69fb      	ldr	r3, [r7, #28]
 801a5f8:	685b      	ldr	r3, [r3, #4]
 801a5fa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801a5fc:	68fb      	ldr	r3, [r7, #12]
 801a5fe:	8a5b      	ldrh	r3, [r3, #18]
 801a600:	4618      	mov	r0, r3
 801a602:	f7f8 fb6d 	bl	8012ce0 <lwip_htons>
 801a606:	4603      	mov	r3, r0
 801a608:	461a      	mov	r2, r3
 801a60a:	697b      	ldr	r3, [r7, #20]
 801a60c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801a60e:	887b      	ldrh	r3, [r7, #2]
 801a610:	4618      	mov	r0, r3
 801a612:	f7f8 fb65 	bl	8012ce0 <lwip_htons>
 801a616:	4603      	mov	r3, r0
 801a618:	461a      	mov	r2, r3
 801a61a:	697b      	ldr	r3, [r7, #20]
 801a61c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801a61e:	697b      	ldr	r3, [r7, #20]
 801a620:	2200      	movs	r2, #0
 801a622:	719a      	strb	r2, [r3, #6]
 801a624:	2200      	movs	r2, #0
 801a626:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801a628:	69fb      	ldr	r3, [r7, #28]
 801a62a:	891b      	ldrh	r3, [r3, #8]
 801a62c:	4618      	mov	r0, r3
 801a62e:	f7f8 fb57 	bl	8012ce0 <lwip_htons>
 801a632:	4603      	mov	r3, r0
 801a634:	461a      	mov	r2, r3
 801a636:	697b      	ldr	r3, [r7, #20]
 801a638:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801a63a:	2311      	movs	r3, #17
 801a63c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801a63e:	68fb      	ldr	r3, [r7, #12]
 801a640:	7adb      	ldrb	r3, [r3, #11]
 801a642:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801a644:	68fb      	ldr	r3, [r7, #12]
 801a646:	7a9b      	ldrb	r3, [r3, #10]
 801a648:	7cb9      	ldrb	r1, [r7, #18]
 801a64a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a64c:	9202      	str	r2, [sp, #8]
 801a64e:	7cfa      	ldrb	r2, [r7, #19]
 801a650:	9201      	str	r2, [sp, #4]
 801a652:	9300      	str	r3, [sp, #0]
 801a654:	460b      	mov	r3, r1
 801a656:	687a      	ldr	r2, [r7, #4]
 801a658:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a65a:	69f8      	ldr	r0, [r7, #28]
 801a65c:	f001 fbd4 	bl	801be08 <ip4_output_if_src>
 801a660:	4603      	mov	r3, r0
 801a662:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801a664:	69fa      	ldr	r2, [r7, #28]
 801a666:	68bb      	ldr	r3, [r7, #8]
 801a668:	429a      	cmp	r2, r3
 801a66a:	d004      	beq.n	801a676 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801a66c:	69f8      	ldr	r0, [r7, #28]
 801a66e:	f7f9 ff25 	bl	80144bc <pbuf_free>
    q = NULL;
 801a672:	2300      	movs	r3, #0
 801a674:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801a676:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801a67a:	4618      	mov	r0, r3
 801a67c:	3720      	adds	r7, #32
 801a67e:	46bd      	mov	sp, r7
 801a680:	bd80      	pop	{r7, pc}
 801a682:	bf00      	nop
 801a684:	080212a4 	.word	0x080212a4
 801a688:	08021490 	.word	0x08021490
 801a68c:	080212f8 	.word	0x080212f8
 801a690:	080214b0 	.word	0x080214b0
 801a694:	080214d0 	.word	0x080214d0
 801a698:	080214f4 	.word	0x080214f4
 801a69c:	08021518 	.word	0x08021518
 801a6a0:	0802153c 	.word	0x0802153c

0801a6a4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801a6a4:	b580      	push	{r7, lr}
 801a6a6:	b086      	sub	sp, #24
 801a6a8:	af00      	add	r7, sp, #0
 801a6aa:	60f8      	str	r0, [r7, #12]
 801a6ac:	60b9      	str	r1, [r7, #8]
 801a6ae:	4613      	mov	r3, r2
 801a6b0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801a6b2:	68bb      	ldr	r3, [r7, #8]
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	d101      	bne.n	801a6bc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801a6b8:	4b39      	ldr	r3, [pc, #228]	@ (801a7a0 <udp_bind+0xfc>)
 801a6ba:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801a6bc:	68fb      	ldr	r3, [r7, #12]
 801a6be:	2b00      	cmp	r3, #0
 801a6c0:	d109      	bne.n	801a6d6 <udp_bind+0x32>
 801a6c2:	4b38      	ldr	r3, [pc, #224]	@ (801a7a4 <udp_bind+0x100>)
 801a6c4:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801a6c8:	4937      	ldr	r1, [pc, #220]	@ (801a7a8 <udp_bind+0x104>)
 801a6ca:	4838      	ldr	r0, [pc, #224]	@ (801a7ac <udp_bind+0x108>)
 801a6cc:	f003 fce0 	bl	801e090 <iprintf>
 801a6d0:	f06f 030f 	mvn.w	r3, #15
 801a6d4:	e060      	b.n	801a798 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801a6d6:	2300      	movs	r3, #0
 801a6d8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a6da:	4b35      	ldr	r3, [pc, #212]	@ (801a7b0 <udp_bind+0x10c>)
 801a6dc:	681b      	ldr	r3, [r3, #0]
 801a6de:	617b      	str	r3, [r7, #20]
 801a6e0:	e009      	b.n	801a6f6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801a6e2:	68fa      	ldr	r2, [r7, #12]
 801a6e4:	697b      	ldr	r3, [r7, #20]
 801a6e6:	429a      	cmp	r2, r3
 801a6e8:	d102      	bne.n	801a6f0 <udp_bind+0x4c>
      rebind = 1;
 801a6ea:	2301      	movs	r3, #1
 801a6ec:	74fb      	strb	r3, [r7, #19]
      break;
 801a6ee:	e005      	b.n	801a6fc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a6f0:	697b      	ldr	r3, [r7, #20]
 801a6f2:	68db      	ldr	r3, [r3, #12]
 801a6f4:	617b      	str	r3, [r7, #20]
 801a6f6:	697b      	ldr	r3, [r7, #20]
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d1f2      	bne.n	801a6e2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801a6fc:	88fb      	ldrh	r3, [r7, #6]
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	d109      	bne.n	801a716 <udp_bind+0x72>
    port = udp_new_port();
 801a702:	f7ff fc69 	bl	8019fd8 <udp_new_port>
 801a706:	4603      	mov	r3, r0
 801a708:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801a70a:	88fb      	ldrh	r3, [r7, #6]
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d12c      	bne.n	801a76a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801a710:	f06f 0307 	mvn.w	r3, #7
 801a714:	e040      	b.n	801a798 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a716:	4b26      	ldr	r3, [pc, #152]	@ (801a7b0 <udp_bind+0x10c>)
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	617b      	str	r3, [r7, #20]
 801a71c:	e022      	b.n	801a764 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801a71e:	68fa      	ldr	r2, [r7, #12]
 801a720:	697b      	ldr	r3, [r7, #20]
 801a722:	429a      	cmp	r2, r3
 801a724:	d01b      	beq.n	801a75e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801a726:	697b      	ldr	r3, [r7, #20]
 801a728:	8a5b      	ldrh	r3, [r3, #18]
 801a72a:	88fa      	ldrh	r2, [r7, #6]
 801a72c:	429a      	cmp	r2, r3
 801a72e:	d116      	bne.n	801a75e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a730:	697b      	ldr	r3, [r7, #20]
 801a732:	681a      	ldr	r2, [r3, #0]
 801a734:	68bb      	ldr	r3, [r7, #8]
 801a736:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801a738:	429a      	cmp	r2, r3
 801a73a:	d00d      	beq.n	801a758 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a73c:	68bb      	ldr	r3, [r7, #8]
 801a73e:	2b00      	cmp	r3, #0
 801a740:	d00a      	beq.n	801a758 <udp_bind+0xb4>
 801a742:	68bb      	ldr	r3, [r7, #8]
 801a744:	681b      	ldr	r3, [r3, #0]
 801a746:	2b00      	cmp	r3, #0
 801a748:	d006      	beq.n	801a758 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801a74a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	d003      	beq.n	801a758 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801a750:	697b      	ldr	r3, [r7, #20]
 801a752:	681b      	ldr	r3, [r3, #0]
 801a754:	2b00      	cmp	r3, #0
 801a756:	d102      	bne.n	801a75e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801a758:	f06f 0307 	mvn.w	r3, #7
 801a75c:	e01c      	b.n	801a798 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a75e:	697b      	ldr	r3, [r7, #20]
 801a760:	68db      	ldr	r3, [r3, #12]
 801a762:	617b      	str	r3, [r7, #20]
 801a764:	697b      	ldr	r3, [r7, #20]
 801a766:	2b00      	cmp	r3, #0
 801a768:	d1d9      	bne.n	801a71e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801a76a:	68bb      	ldr	r3, [r7, #8]
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	d002      	beq.n	801a776 <udp_bind+0xd2>
 801a770:	68bb      	ldr	r3, [r7, #8]
 801a772:	681b      	ldr	r3, [r3, #0]
 801a774:	e000      	b.n	801a778 <udp_bind+0xd4>
 801a776:	2300      	movs	r3, #0
 801a778:	68fa      	ldr	r2, [r7, #12]
 801a77a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801a77c:	68fb      	ldr	r3, [r7, #12]
 801a77e:	88fa      	ldrh	r2, [r7, #6]
 801a780:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801a782:	7cfb      	ldrb	r3, [r7, #19]
 801a784:	2b00      	cmp	r3, #0
 801a786:	d106      	bne.n	801a796 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801a788:	4b09      	ldr	r3, [pc, #36]	@ (801a7b0 <udp_bind+0x10c>)
 801a78a:	681a      	ldr	r2, [r3, #0]
 801a78c:	68fb      	ldr	r3, [r7, #12]
 801a78e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801a790:	4a07      	ldr	r2, [pc, #28]	@ (801a7b0 <udp_bind+0x10c>)
 801a792:	68fb      	ldr	r3, [r7, #12]
 801a794:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801a796:	2300      	movs	r3, #0
}
 801a798:	4618      	mov	r0, r3
 801a79a:	3718      	adds	r7, #24
 801a79c:	46bd      	mov	sp, r7
 801a79e:	bd80      	pop	{r7, pc}
 801a7a0:	080222ec 	.word	0x080222ec
 801a7a4:	080212a4 	.word	0x080212a4
 801a7a8:	0802156c 	.word	0x0802156c
 801a7ac:	080212f8 	.word	0x080212f8
 801a7b0:	2002780c 	.word	0x2002780c

0801a7b4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801a7b4:	b580      	push	{r7, lr}
 801a7b6:	b084      	sub	sp, #16
 801a7b8:	af00      	add	r7, sp, #0
 801a7ba:	60f8      	str	r0, [r7, #12]
 801a7bc:	60b9      	str	r1, [r7, #8]
 801a7be:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801a7c0:	68fb      	ldr	r3, [r7, #12]
 801a7c2:	2b00      	cmp	r3, #0
 801a7c4:	d107      	bne.n	801a7d6 <udp_recv+0x22>
 801a7c6:	4b08      	ldr	r3, [pc, #32]	@ (801a7e8 <udp_recv+0x34>)
 801a7c8:	f240 428a 	movw	r2, #1162	@ 0x48a
 801a7cc:	4907      	ldr	r1, [pc, #28]	@ (801a7ec <udp_recv+0x38>)
 801a7ce:	4808      	ldr	r0, [pc, #32]	@ (801a7f0 <udp_recv+0x3c>)
 801a7d0:	f003 fc5e 	bl	801e090 <iprintf>
 801a7d4:	e005      	b.n	801a7e2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801a7d6:	68fb      	ldr	r3, [r7, #12]
 801a7d8:	68ba      	ldr	r2, [r7, #8]
 801a7da:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801a7dc:	68fb      	ldr	r3, [r7, #12]
 801a7de:	687a      	ldr	r2, [r7, #4]
 801a7e0:	61da      	str	r2, [r3, #28]
}
 801a7e2:	3710      	adds	r7, #16
 801a7e4:	46bd      	mov	sp, r7
 801a7e6:	bd80      	pop	{r7, pc}
 801a7e8:	080212a4 	.word	0x080212a4
 801a7ec:	080215d8 	.word	0x080215d8
 801a7f0:	080212f8 	.word	0x080212f8

0801a7f4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801a7f4:	b580      	push	{r7, lr}
 801a7f6:	b082      	sub	sp, #8
 801a7f8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801a7fa:	2000      	movs	r0, #0
 801a7fc:	f7f8 ff44 	bl	8013688 <memp_malloc>
 801a800:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	2b00      	cmp	r3, #0
 801a806:	d007      	beq.n	801a818 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801a808:	2220      	movs	r2, #32
 801a80a:	2100      	movs	r1, #0
 801a80c:	6878      	ldr	r0, [r7, #4]
 801a80e:	f003 fd97 	bl	801e340 <memset>
    pcb->ttl = UDP_TTL;
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	22ff      	movs	r2, #255	@ 0xff
 801a816:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801a818:	687b      	ldr	r3, [r7, #4]
}
 801a81a:	4618      	mov	r0, r3
 801a81c:	3708      	adds	r7, #8
 801a81e:	46bd      	mov	sp, r7
 801a820:	bd80      	pop	{r7, pc}
	...

0801a824 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801a824:	b480      	push	{r7}
 801a826:	b085      	sub	sp, #20
 801a828:	af00      	add	r7, sp, #0
 801a82a:	6078      	str	r0, [r7, #4]
 801a82c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801a82e:	687b      	ldr	r3, [r7, #4]
 801a830:	2b00      	cmp	r3, #0
 801a832:	d01e      	beq.n	801a872 <udp_netif_ip_addr_changed+0x4e>
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	2b00      	cmp	r3, #0
 801a83a:	d01a      	beq.n	801a872 <udp_netif_ip_addr_changed+0x4e>
 801a83c:	683b      	ldr	r3, [r7, #0]
 801a83e:	2b00      	cmp	r3, #0
 801a840:	d017      	beq.n	801a872 <udp_netif_ip_addr_changed+0x4e>
 801a842:	683b      	ldr	r3, [r7, #0]
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	2b00      	cmp	r3, #0
 801a848:	d013      	beq.n	801a872 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a84a:	4b0d      	ldr	r3, [pc, #52]	@ (801a880 <udp_netif_ip_addr_changed+0x5c>)
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	60fb      	str	r3, [r7, #12]
 801a850:	e00c      	b.n	801a86c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801a852:	68fb      	ldr	r3, [r7, #12]
 801a854:	681a      	ldr	r2, [r3, #0]
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	681b      	ldr	r3, [r3, #0]
 801a85a:	429a      	cmp	r2, r3
 801a85c:	d103      	bne.n	801a866 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801a85e:	683b      	ldr	r3, [r7, #0]
 801a860:	681a      	ldr	r2, [r3, #0]
 801a862:	68fb      	ldr	r3, [r7, #12]
 801a864:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a866:	68fb      	ldr	r3, [r7, #12]
 801a868:	68db      	ldr	r3, [r3, #12]
 801a86a:	60fb      	str	r3, [r7, #12]
 801a86c:	68fb      	ldr	r3, [r7, #12]
 801a86e:	2b00      	cmp	r3, #0
 801a870:	d1ef      	bne.n	801a852 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801a872:	bf00      	nop
 801a874:	3714      	adds	r7, #20
 801a876:	46bd      	mov	sp, r7
 801a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a87c:	4770      	bx	lr
 801a87e:	bf00      	nop
 801a880:	2002780c 	.word	0x2002780c

0801a884 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801a884:	b580      	push	{r7, lr}
 801a886:	b082      	sub	sp, #8
 801a888:	af00      	add	r7, sp, #0
 801a88a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801a88c:	4915      	ldr	r1, [pc, #84]	@ (801a8e4 <etharp_free_entry+0x60>)
 801a88e:	687a      	ldr	r2, [r7, #4]
 801a890:	4613      	mov	r3, r2
 801a892:	005b      	lsls	r3, r3, #1
 801a894:	4413      	add	r3, r2
 801a896:	00db      	lsls	r3, r3, #3
 801a898:	440b      	add	r3, r1
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d013      	beq.n	801a8c8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801a8a0:	4910      	ldr	r1, [pc, #64]	@ (801a8e4 <etharp_free_entry+0x60>)
 801a8a2:	687a      	ldr	r2, [r7, #4]
 801a8a4:	4613      	mov	r3, r2
 801a8a6:	005b      	lsls	r3, r3, #1
 801a8a8:	4413      	add	r3, r2
 801a8aa:	00db      	lsls	r3, r3, #3
 801a8ac:	440b      	add	r3, r1
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	4618      	mov	r0, r3
 801a8b2:	f7f9 fe03 	bl	80144bc <pbuf_free>
    arp_table[i].q = NULL;
 801a8b6:	490b      	ldr	r1, [pc, #44]	@ (801a8e4 <etharp_free_entry+0x60>)
 801a8b8:	687a      	ldr	r2, [r7, #4]
 801a8ba:	4613      	mov	r3, r2
 801a8bc:	005b      	lsls	r3, r3, #1
 801a8be:	4413      	add	r3, r2
 801a8c0:	00db      	lsls	r3, r3, #3
 801a8c2:	440b      	add	r3, r1
 801a8c4:	2200      	movs	r2, #0
 801a8c6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801a8c8:	4906      	ldr	r1, [pc, #24]	@ (801a8e4 <etharp_free_entry+0x60>)
 801a8ca:	687a      	ldr	r2, [r7, #4]
 801a8cc:	4613      	mov	r3, r2
 801a8ce:	005b      	lsls	r3, r3, #1
 801a8d0:	4413      	add	r3, r2
 801a8d2:	00db      	lsls	r3, r3, #3
 801a8d4:	440b      	add	r3, r1
 801a8d6:	3314      	adds	r3, #20
 801a8d8:	2200      	movs	r2, #0
 801a8da:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801a8dc:	bf00      	nop
 801a8de:	3708      	adds	r7, #8
 801a8e0:	46bd      	mov	sp, r7
 801a8e2:	bd80      	pop	{r7, pc}
 801a8e4:	20027810 	.word	0x20027810

0801a8e8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801a8e8:	b580      	push	{r7, lr}
 801a8ea:	b082      	sub	sp, #8
 801a8ec:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a8ee:	2300      	movs	r3, #0
 801a8f0:	607b      	str	r3, [r7, #4]
 801a8f2:	e096      	b.n	801aa22 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801a8f4:	494f      	ldr	r1, [pc, #316]	@ (801aa34 <etharp_tmr+0x14c>)
 801a8f6:	687a      	ldr	r2, [r7, #4]
 801a8f8:	4613      	mov	r3, r2
 801a8fa:	005b      	lsls	r3, r3, #1
 801a8fc:	4413      	add	r3, r2
 801a8fe:	00db      	lsls	r3, r3, #3
 801a900:	440b      	add	r3, r1
 801a902:	3314      	adds	r3, #20
 801a904:	781b      	ldrb	r3, [r3, #0]
 801a906:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801a908:	78fb      	ldrb	r3, [r7, #3]
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	f000 8086 	beq.w	801aa1c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801a910:	4948      	ldr	r1, [pc, #288]	@ (801aa34 <etharp_tmr+0x14c>)
 801a912:	687a      	ldr	r2, [r7, #4]
 801a914:	4613      	mov	r3, r2
 801a916:	005b      	lsls	r3, r3, #1
 801a918:	4413      	add	r3, r2
 801a91a:	00db      	lsls	r3, r3, #3
 801a91c:	440b      	add	r3, r1
 801a91e:	3312      	adds	r3, #18
 801a920:	881b      	ldrh	r3, [r3, #0]
 801a922:	3301      	adds	r3, #1
 801a924:	b298      	uxth	r0, r3
 801a926:	4943      	ldr	r1, [pc, #268]	@ (801aa34 <etharp_tmr+0x14c>)
 801a928:	687a      	ldr	r2, [r7, #4]
 801a92a:	4613      	mov	r3, r2
 801a92c:	005b      	lsls	r3, r3, #1
 801a92e:	4413      	add	r3, r2
 801a930:	00db      	lsls	r3, r3, #3
 801a932:	440b      	add	r3, r1
 801a934:	3312      	adds	r3, #18
 801a936:	4602      	mov	r2, r0
 801a938:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a93a:	493e      	ldr	r1, [pc, #248]	@ (801aa34 <etharp_tmr+0x14c>)
 801a93c:	687a      	ldr	r2, [r7, #4]
 801a93e:	4613      	mov	r3, r2
 801a940:	005b      	lsls	r3, r3, #1
 801a942:	4413      	add	r3, r2
 801a944:	00db      	lsls	r3, r3, #3
 801a946:	440b      	add	r3, r1
 801a948:	3312      	adds	r3, #18
 801a94a:	881b      	ldrh	r3, [r3, #0]
 801a94c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801a950:	d215      	bcs.n	801a97e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a952:	4938      	ldr	r1, [pc, #224]	@ (801aa34 <etharp_tmr+0x14c>)
 801a954:	687a      	ldr	r2, [r7, #4]
 801a956:	4613      	mov	r3, r2
 801a958:	005b      	lsls	r3, r3, #1
 801a95a:	4413      	add	r3, r2
 801a95c:	00db      	lsls	r3, r3, #3
 801a95e:	440b      	add	r3, r1
 801a960:	3314      	adds	r3, #20
 801a962:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a964:	2b01      	cmp	r3, #1
 801a966:	d10e      	bne.n	801a986 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801a968:	4932      	ldr	r1, [pc, #200]	@ (801aa34 <etharp_tmr+0x14c>)
 801a96a:	687a      	ldr	r2, [r7, #4]
 801a96c:	4613      	mov	r3, r2
 801a96e:	005b      	lsls	r3, r3, #1
 801a970:	4413      	add	r3, r2
 801a972:	00db      	lsls	r3, r3, #3
 801a974:	440b      	add	r3, r1
 801a976:	3312      	adds	r3, #18
 801a978:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a97a:	2b04      	cmp	r3, #4
 801a97c:	d903      	bls.n	801a986 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801a97e:	6878      	ldr	r0, [r7, #4]
 801a980:	f7ff ff80 	bl	801a884 <etharp_free_entry>
 801a984:	e04a      	b.n	801aa1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801a986:	492b      	ldr	r1, [pc, #172]	@ (801aa34 <etharp_tmr+0x14c>)
 801a988:	687a      	ldr	r2, [r7, #4]
 801a98a:	4613      	mov	r3, r2
 801a98c:	005b      	lsls	r3, r3, #1
 801a98e:	4413      	add	r3, r2
 801a990:	00db      	lsls	r3, r3, #3
 801a992:	440b      	add	r3, r1
 801a994:	3314      	adds	r3, #20
 801a996:	781b      	ldrb	r3, [r3, #0]
 801a998:	2b03      	cmp	r3, #3
 801a99a:	d10a      	bne.n	801a9b2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801a99c:	4925      	ldr	r1, [pc, #148]	@ (801aa34 <etharp_tmr+0x14c>)
 801a99e:	687a      	ldr	r2, [r7, #4]
 801a9a0:	4613      	mov	r3, r2
 801a9a2:	005b      	lsls	r3, r3, #1
 801a9a4:	4413      	add	r3, r2
 801a9a6:	00db      	lsls	r3, r3, #3
 801a9a8:	440b      	add	r3, r1
 801a9aa:	3314      	adds	r3, #20
 801a9ac:	2204      	movs	r2, #4
 801a9ae:	701a      	strb	r2, [r3, #0]
 801a9b0:	e034      	b.n	801aa1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801a9b2:	4920      	ldr	r1, [pc, #128]	@ (801aa34 <etharp_tmr+0x14c>)
 801a9b4:	687a      	ldr	r2, [r7, #4]
 801a9b6:	4613      	mov	r3, r2
 801a9b8:	005b      	lsls	r3, r3, #1
 801a9ba:	4413      	add	r3, r2
 801a9bc:	00db      	lsls	r3, r3, #3
 801a9be:	440b      	add	r3, r1
 801a9c0:	3314      	adds	r3, #20
 801a9c2:	781b      	ldrb	r3, [r3, #0]
 801a9c4:	2b04      	cmp	r3, #4
 801a9c6:	d10a      	bne.n	801a9de <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801a9c8:	491a      	ldr	r1, [pc, #104]	@ (801aa34 <etharp_tmr+0x14c>)
 801a9ca:	687a      	ldr	r2, [r7, #4]
 801a9cc:	4613      	mov	r3, r2
 801a9ce:	005b      	lsls	r3, r3, #1
 801a9d0:	4413      	add	r3, r2
 801a9d2:	00db      	lsls	r3, r3, #3
 801a9d4:	440b      	add	r3, r1
 801a9d6:	3314      	adds	r3, #20
 801a9d8:	2202      	movs	r2, #2
 801a9da:	701a      	strb	r2, [r3, #0]
 801a9dc:	e01e      	b.n	801aa1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a9de:	4915      	ldr	r1, [pc, #84]	@ (801aa34 <etharp_tmr+0x14c>)
 801a9e0:	687a      	ldr	r2, [r7, #4]
 801a9e2:	4613      	mov	r3, r2
 801a9e4:	005b      	lsls	r3, r3, #1
 801a9e6:	4413      	add	r3, r2
 801a9e8:	00db      	lsls	r3, r3, #3
 801a9ea:	440b      	add	r3, r1
 801a9ec:	3314      	adds	r3, #20
 801a9ee:	781b      	ldrb	r3, [r3, #0]
 801a9f0:	2b01      	cmp	r3, #1
 801a9f2:	d113      	bne.n	801aa1c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801a9f4:	490f      	ldr	r1, [pc, #60]	@ (801aa34 <etharp_tmr+0x14c>)
 801a9f6:	687a      	ldr	r2, [r7, #4]
 801a9f8:	4613      	mov	r3, r2
 801a9fa:	005b      	lsls	r3, r3, #1
 801a9fc:	4413      	add	r3, r2
 801a9fe:	00db      	lsls	r3, r3, #3
 801aa00:	440b      	add	r3, r1
 801aa02:	3308      	adds	r3, #8
 801aa04:	6818      	ldr	r0, [r3, #0]
 801aa06:	687a      	ldr	r2, [r7, #4]
 801aa08:	4613      	mov	r3, r2
 801aa0a:	005b      	lsls	r3, r3, #1
 801aa0c:	4413      	add	r3, r2
 801aa0e:	00db      	lsls	r3, r3, #3
 801aa10:	4a08      	ldr	r2, [pc, #32]	@ (801aa34 <etharp_tmr+0x14c>)
 801aa12:	4413      	add	r3, r2
 801aa14:	3304      	adds	r3, #4
 801aa16:	4619      	mov	r1, r3
 801aa18:	f000 fe6e 	bl	801b6f8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	3301      	adds	r3, #1
 801aa20:	607b      	str	r3, [r7, #4]
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	2b09      	cmp	r3, #9
 801aa26:	f77f af65 	ble.w	801a8f4 <etharp_tmr+0xc>
      }
    }
  }
}
 801aa2a:	bf00      	nop
 801aa2c:	bf00      	nop
 801aa2e:	3708      	adds	r7, #8
 801aa30:	46bd      	mov	sp, r7
 801aa32:	bd80      	pop	{r7, pc}
 801aa34:	20027810 	.word	0x20027810

0801aa38 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801aa38:	b580      	push	{r7, lr}
 801aa3a:	b08a      	sub	sp, #40	@ 0x28
 801aa3c:	af00      	add	r7, sp, #0
 801aa3e:	60f8      	str	r0, [r7, #12]
 801aa40:	460b      	mov	r3, r1
 801aa42:	607a      	str	r2, [r7, #4]
 801aa44:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801aa46:	230a      	movs	r3, #10
 801aa48:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801aa4a:	230a      	movs	r3, #10
 801aa4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801aa4e:	230a      	movs	r3, #10
 801aa50:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801aa52:	2300      	movs	r3, #0
 801aa54:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801aa56:	230a      	movs	r3, #10
 801aa58:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801aa5a:	2300      	movs	r3, #0
 801aa5c:	83bb      	strh	r3, [r7, #28]
 801aa5e:	2300      	movs	r3, #0
 801aa60:	837b      	strh	r3, [r7, #26]
 801aa62:	2300      	movs	r3, #0
 801aa64:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801aa66:	2300      	movs	r3, #0
 801aa68:	843b      	strh	r3, [r7, #32]
 801aa6a:	e0ae      	b.n	801abca <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801aa6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aa70:	49a6      	ldr	r1, [pc, #664]	@ (801ad0c <etharp_find_entry+0x2d4>)
 801aa72:	4613      	mov	r3, r2
 801aa74:	005b      	lsls	r3, r3, #1
 801aa76:	4413      	add	r3, r2
 801aa78:	00db      	lsls	r3, r3, #3
 801aa7a:	440b      	add	r3, r1
 801aa7c:	3314      	adds	r3, #20
 801aa7e:	781b      	ldrb	r3, [r3, #0]
 801aa80:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801aa82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801aa86:	2b0a      	cmp	r3, #10
 801aa88:	d105      	bne.n	801aa96 <etharp_find_entry+0x5e>
 801aa8a:	7dfb      	ldrb	r3, [r7, #23]
 801aa8c:	2b00      	cmp	r3, #0
 801aa8e:	d102      	bne.n	801aa96 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801aa90:	8c3b      	ldrh	r3, [r7, #32]
 801aa92:	847b      	strh	r3, [r7, #34]	@ 0x22
 801aa94:	e095      	b.n	801abc2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801aa96:	7dfb      	ldrb	r3, [r7, #23]
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	f000 8092 	beq.w	801abc2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801aa9e:	7dfb      	ldrb	r3, [r7, #23]
 801aaa0:	2b01      	cmp	r3, #1
 801aaa2:	d009      	beq.n	801aab8 <etharp_find_entry+0x80>
 801aaa4:	7dfb      	ldrb	r3, [r7, #23]
 801aaa6:	2b01      	cmp	r3, #1
 801aaa8:	d806      	bhi.n	801aab8 <etharp_find_entry+0x80>
 801aaaa:	4b99      	ldr	r3, [pc, #612]	@ (801ad10 <etharp_find_entry+0x2d8>)
 801aaac:	f240 1223 	movw	r2, #291	@ 0x123
 801aab0:	4998      	ldr	r1, [pc, #608]	@ (801ad14 <etharp_find_entry+0x2dc>)
 801aab2:	4899      	ldr	r0, [pc, #612]	@ (801ad18 <etharp_find_entry+0x2e0>)
 801aab4:	f003 faec 	bl	801e090 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801aab8:	68fb      	ldr	r3, [r7, #12]
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	d020      	beq.n	801ab00 <etharp_find_entry+0xc8>
 801aabe:	68fb      	ldr	r3, [r7, #12]
 801aac0:	6819      	ldr	r1, [r3, #0]
 801aac2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aac6:	4891      	ldr	r0, [pc, #580]	@ (801ad0c <etharp_find_entry+0x2d4>)
 801aac8:	4613      	mov	r3, r2
 801aaca:	005b      	lsls	r3, r3, #1
 801aacc:	4413      	add	r3, r2
 801aace:	00db      	lsls	r3, r3, #3
 801aad0:	4403      	add	r3, r0
 801aad2:	3304      	adds	r3, #4
 801aad4:	681b      	ldr	r3, [r3, #0]
 801aad6:	4299      	cmp	r1, r3
 801aad8:	d112      	bne.n	801ab00 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d00c      	beq.n	801aafa <etharp_find_entry+0xc2>
 801aae0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aae4:	4989      	ldr	r1, [pc, #548]	@ (801ad0c <etharp_find_entry+0x2d4>)
 801aae6:	4613      	mov	r3, r2
 801aae8:	005b      	lsls	r3, r3, #1
 801aaea:	4413      	add	r3, r2
 801aaec:	00db      	lsls	r3, r3, #3
 801aaee:	440b      	add	r3, r1
 801aaf0:	3308      	adds	r3, #8
 801aaf2:	681b      	ldr	r3, [r3, #0]
 801aaf4:	687a      	ldr	r2, [r7, #4]
 801aaf6:	429a      	cmp	r2, r3
 801aaf8:	d102      	bne.n	801ab00 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801aafa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801aafe:	e100      	b.n	801ad02 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801ab00:	7dfb      	ldrb	r3, [r7, #23]
 801ab02:	2b01      	cmp	r3, #1
 801ab04:	d140      	bne.n	801ab88 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801ab06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ab0a:	4980      	ldr	r1, [pc, #512]	@ (801ad0c <etharp_find_entry+0x2d4>)
 801ab0c:	4613      	mov	r3, r2
 801ab0e:	005b      	lsls	r3, r3, #1
 801ab10:	4413      	add	r3, r2
 801ab12:	00db      	lsls	r3, r3, #3
 801ab14:	440b      	add	r3, r1
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	d01a      	beq.n	801ab52 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801ab1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ab20:	497a      	ldr	r1, [pc, #488]	@ (801ad0c <etharp_find_entry+0x2d4>)
 801ab22:	4613      	mov	r3, r2
 801ab24:	005b      	lsls	r3, r3, #1
 801ab26:	4413      	add	r3, r2
 801ab28:	00db      	lsls	r3, r3, #3
 801ab2a:	440b      	add	r3, r1
 801ab2c:	3312      	adds	r3, #18
 801ab2e:	881b      	ldrh	r3, [r3, #0]
 801ab30:	8bba      	ldrh	r2, [r7, #28]
 801ab32:	429a      	cmp	r2, r3
 801ab34:	d845      	bhi.n	801abc2 <etharp_find_entry+0x18a>
            old_queue = i;
 801ab36:	8c3b      	ldrh	r3, [r7, #32]
 801ab38:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801ab3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ab3e:	4973      	ldr	r1, [pc, #460]	@ (801ad0c <etharp_find_entry+0x2d4>)
 801ab40:	4613      	mov	r3, r2
 801ab42:	005b      	lsls	r3, r3, #1
 801ab44:	4413      	add	r3, r2
 801ab46:	00db      	lsls	r3, r3, #3
 801ab48:	440b      	add	r3, r1
 801ab4a:	3312      	adds	r3, #18
 801ab4c:	881b      	ldrh	r3, [r3, #0]
 801ab4e:	83bb      	strh	r3, [r7, #28]
 801ab50:	e037      	b.n	801abc2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801ab52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ab56:	496d      	ldr	r1, [pc, #436]	@ (801ad0c <etharp_find_entry+0x2d4>)
 801ab58:	4613      	mov	r3, r2
 801ab5a:	005b      	lsls	r3, r3, #1
 801ab5c:	4413      	add	r3, r2
 801ab5e:	00db      	lsls	r3, r3, #3
 801ab60:	440b      	add	r3, r1
 801ab62:	3312      	adds	r3, #18
 801ab64:	881b      	ldrh	r3, [r3, #0]
 801ab66:	8b7a      	ldrh	r2, [r7, #26]
 801ab68:	429a      	cmp	r2, r3
 801ab6a:	d82a      	bhi.n	801abc2 <etharp_find_entry+0x18a>
            old_pending = i;
 801ab6c:	8c3b      	ldrh	r3, [r7, #32]
 801ab6e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801ab70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ab74:	4965      	ldr	r1, [pc, #404]	@ (801ad0c <etharp_find_entry+0x2d4>)
 801ab76:	4613      	mov	r3, r2
 801ab78:	005b      	lsls	r3, r3, #1
 801ab7a:	4413      	add	r3, r2
 801ab7c:	00db      	lsls	r3, r3, #3
 801ab7e:	440b      	add	r3, r1
 801ab80:	3312      	adds	r3, #18
 801ab82:	881b      	ldrh	r3, [r3, #0]
 801ab84:	837b      	strh	r3, [r7, #26]
 801ab86:	e01c      	b.n	801abc2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801ab88:	7dfb      	ldrb	r3, [r7, #23]
 801ab8a:	2b01      	cmp	r3, #1
 801ab8c:	d919      	bls.n	801abc2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801ab8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ab92:	495e      	ldr	r1, [pc, #376]	@ (801ad0c <etharp_find_entry+0x2d4>)
 801ab94:	4613      	mov	r3, r2
 801ab96:	005b      	lsls	r3, r3, #1
 801ab98:	4413      	add	r3, r2
 801ab9a:	00db      	lsls	r3, r3, #3
 801ab9c:	440b      	add	r3, r1
 801ab9e:	3312      	adds	r3, #18
 801aba0:	881b      	ldrh	r3, [r3, #0]
 801aba2:	8b3a      	ldrh	r2, [r7, #24]
 801aba4:	429a      	cmp	r2, r3
 801aba6:	d80c      	bhi.n	801abc2 <etharp_find_entry+0x18a>
            old_stable = i;
 801aba8:	8c3b      	ldrh	r3, [r7, #32]
 801abaa:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801abac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801abb0:	4956      	ldr	r1, [pc, #344]	@ (801ad0c <etharp_find_entry+0x2d4>)
 801abb2:	4613      	mov	r3, r2
 801abb4:	005b      	lsls	r3, r3, #1
 801abb6:	4413      	add	r3, r2
 801abb8:	00db      	lsls	r3, r3, #3
 801abba:	440b      	add	r3, r1
 801abbc:	3312      	adds	r3, #18
 801abbe:	881b      	ldrh	r3, [r3, #0]
 801abc0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801abc2:	8c3b      	ldrh	r3, [r7, #32]
 801abc4:	3301      	adds	r3, #1
 801abc6:	b29b      	uxth	r3, r3
 801abc8:	843b      	strh	r3, [r7, #32]
 801abca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801abce:	2b09      	cmp	r3, #9
 801abd0:	f77f af4c 	ble.w	801aa6c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801abd4:	7afb      	ldrb	r3, [r7, #11]
 801abd6:	f003 0302 	and.w	r3, r3, #2
 801abda:	2b00      	cmp	r3, #0
 801abdc:	d108      	bne.n	801abf0 <etharp_find_entry+0x1b8>
 801abde:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801abe2:	2b0a      	cmp	r3, #10
 801abe4:	d107      	bne.n	801abf6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801abe6:	7afb      	ldrb	r3, [r7, #11]
 801abe8:	f003 0301 	and.w	r3, r3, #1
 801abec:	2b00      	cmp	r3, #0
 801abee:	d102      	bne.n	801abf6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801abf0:	f04f 33ff 	mov.w	r3, #4294967295
 801abf4:	e085      	b.n	801ad02 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801abf6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801abfa:	2b09      	cmp	r3, #9
 801abfc:	dc02      	bgt.n	801ac04 <etharp_find_entry+0x1cc>
    i = empty;
 801abfe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ac00:	843b      	strh	r3, [r7, #32]
 801ac02:	e039      	b.n	801ac78 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801ac04:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801ac08:	2b09      	cmp	r3, #9
 801ac0a:	dc14      	bgt.n	801ac36 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801ac0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ac0e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801ac10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ac14:	493d      	ldr	r1, [pc, #244]	@ (801ad0c <etharp_find_entry+0x2d4>)
 801ac16:	4613      	mov	r3, r2
 801ac18:	005b      	lsls	r3, r3, #1
 801ac1a:	4413      	add	r3, r2
 801ac1c:	00db      	lsls	r3, r3, #3
 801ac1e:	440b      	add	r3, r1
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	d018      	beq.n	801ac58 <etharp_find_entry+0x220>
 801ac26:	4b3a      	ldr	r3, [pc, #232]	@ (801ad10 <etharp_find_entry+0x2d8>)
 801ac28:	f240 126d 	movw	r2, #365	@ 0x16d
 801ac2c:	493b      	ldr	r1, [pc, #236]	@ (801ad1c <etharp_find_entry+0x2e4>)
 801ac2e:	483a      	ldr	r0, [pc, #232]	@ (801ad18 <etharp_find_entry+0x2e0>)
 801ac30:	f003 fa2e 	bl	801e090 <iprintf>
 801ac34:	e010      	b.n	801ac58 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801ac36:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801ac3a:	2b09      	cmp	r3, #9
 801ac3c:	dc02      	bgt.n	801ac44 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801ac3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801ac40:	843b      	strh	r3, [r7, #32]
 801ac42:	e009      	b.n	801ac58 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801ac44:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801ac48:	2b09      	cmp	r3, #9
 801ac4a:	dc02      	bgt.n	801ac52 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801ac4c:	8bfb      	ldrh	r3, [r7, #30]
 801ac4e:	843b      	strh	r3, [r7, #32]
 801ac50:	e002      	b.n	801ac58 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801ac52:	f04f 33ff 	mov.w	r3, #4294967295
 801ac56:	e054      	b.n	801ad02 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801ac58:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ac5c:	2b09      	cmp	r3, #9
 801ac5e:	dd06      	ble.n	801ac6e <etharp_find_entry+0x236>
 801ac60:	4b2b      	ldr	r3, [pc, #172]	@ (801ad10 <etharp_find_entry+0x2d8>)
 801ac62:	f240 127f 	movw	r2, #383	@ 0x17f
 801ac66:	492e      	ldr	r1, [pc, #184]	@ (801ad20 <etharp_find_entry+0x2e8>)
 801ac68:	482b      	ldr	r0, [pc, #172]	@ (801ad18 <etharp_find_entry+0x2e0>)
 801ac6a:	f003 fa11 	bl	801e090 <iprintf>
    etharp_free_entry(i);
 801ac6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ac72:	4618      	mov	r0, r3
 801ac74:	f7ff fe06 	bl	801a884 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801ac78:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ac7c:	2b09      	cmp	r3, #9
 801ac7e:	dd06      	ble.n	801ac8e <etharp_find_entry+0x256>
 801ac80:	4b23      	ldr	r3, [pc, #140]	@ (801ad10 <etharp_find_entry+0x2d8>)
 801ac82:	f240 1283 	movw	r2, #387	@ 0x183
 801ac86:	4926      	ldr	r1, [pc, #152]	@ (801ad20 <etharp_find_entry+0x2e8>)
 801ac88:	4823      	ldr	r0, [pc, #140]	@ (801ad18 <etharp_find_entry+0x2e0>)
 801ac8a:	f003 fa01 	bl	801e090 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801ac8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ac92:	491e      	ldr	r1, [pc, #120]	@ (801ad0c <etharp_find_entry+0x2d4>)
 801ac94:	4613      	mov	r3, r2
 801ac96:	005b      	lsls	r3, r3, #1
 801ac98:	4413      	add	r3, r2
 801ac9a:	00db      	lsls	r3, r3, #3
 801ac9c:	440b      	add	r3, r1
 801ac9e:	3314      	adds	r3, #20
 801aca0:	781b      	ldrb	r3, [r3, #0]
 801aca2:	2b00      	cmp	r3, #0
 801aca4:	d006      	beq.n	801acb4 <etharp_find_entry+0x27c>
 801aca6:	4b1a      	ldr	r3, [pc, #104]	@ (801ad10 <etharp_find_entry+0x2d8>)
 801aca8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801acac:	491d      	ldr	r1, [pc, #116]	@ (801ad24 <etharp_find_entry+0x2ec>)
 801acae:	481a      	ldr	r0, [pc, #104]	@ (801ad18 <etharp_find_entry+0x2e0>)
 801acb0:	f003 f9ee 	bl	801e090 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801acb4:	68fb      	ldr	r3, [r7, #12]
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d00b      	beq.n	801acd2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801acba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801acbe:	68fb      	ldr	r3, [r7, #12]
 801acc0:	6819      	ldr	r1, [r3, #0]
 801acc2:	4812      	ldr	r0, [pc, #72]	@ (801ad0c <etharp_find_entry+0x2d4>)
 801acc4:	4613      	mov	r3, r2
 801acc6:	005b      	lsls	r3, r3, #1
 801acc8:	4413      	add	r3, r2
 801acca:	00db      	lsls	r3, r3, #3
 801accc:	4403      	add	r3, r0
 801acce:	3304      	adds	r3, #4
 801acd0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801acd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801acd6:	490d      	ldr	r1, [pc, #52]	@ (801ad0c <etharp_find_entry+0x2d4>)
 801acd8:	4613      	mov	r3, r2
 801acda:	005b      	lsls	r3, r3, #1
 801acdc:	4413      	add	r3, r2
 801acde:	00db      	lsls	r3, r3, #3
 801ace0:	440b      	add	r3, r1
 801ace2:	3312      	adds	r3, #18
 801ace4:	2200      	movs	r2, #0
 801ace6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801ace8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801acec:	4907      	ldr	r1, [pc, #28]	@ (801ad0c <etharp_find_entry+0x2d4>)
 801acee:	4613      	mov	r3, r2
 801acf0:	005b      	lsls	r3, r3, #1
 801acf2:	4413      	add	r3, r2
 801acf4:	00db      	lsls	r3, r3, #3
 801acf6:	440b      	add	r3, r1
 801acf8:	3308      	adds	r3, #8
 801acfa:	687a      	ldr	r2, [r7, #4]
 801acfc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801acfe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801ad02:	4618      	mov	r0, r3
 801ad04:	3728      	adds	r7, #40	@ 0x28
 801ad06:	46bd      	mov	sp, r7
 801ad08:	bd80      	pop	{r7, pc}
 801ad0a:	bf00      	nop
 801ad0c:	20027810 	.word	0x20027810
 801ad10:	08021608 	.word	0x08021608
 801ad14:	08021640 	.word	0x08021640
 801ad18:	08021680 	.word	0x08021680
 801ad1c:	080216a8 	.word	0x080216a8
 801ad20:	080216c0 	.word	0x080216c0
 801ad24:	080216d4 	.word	0x080216d4

0801ad28 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801ad28:	b580      	push	{r7, lr}
 801ad2a:	b088      	sub	sp, #32
 801ad2c:	af02      	add	r7, sp, #8
 801ad2e:	60f8      	str	r0, [r7, #12]
 801ad30:	60b9      	str	r1, [r7, #8]
 801ad32:	607a      	str	r2, [r7, #4]
 801ad34:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801ad36:	68fb      	ldr	r3, [r7, #12]
 801ad38:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801ad3c:	2b06      	cmp	r3, #6
 801ad3e:	d006      	beq.n	801ad4e <etharp_update_arp_entry+0x26>
 801ad40:	4b48      	ldr	r3, [pc, #288]	@ (801ae64 <etharp_update_arp_entry+0x13c>)
 801ad42:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801ad46:	4948      	ldr	r1, [pc, #288]	@ (801ae68 <etharp_update_arp_entry+0x140>)
 801ad48:	4848      	ldr	r0, [pc, #288]	@ (801ae6c <etharp_update_arp_entry+0x144>)
 801ad4a:	f003 f9a1 	bl	801e090 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801ad4e:	68bb      	ldr	r3, [r7, #8]
 801ad50:	2b00      	cmp	r3, #0
 801ad52:	d012      	beq.n	801ad7a <etharp_update_arp_entry+0x52>
 801ad54:	68bb      	ldr	r3, [r7, #8]
 801ad56:	681b      	ldr	r3, [r3, #0]
 801ad58:	2b00      	cmp	r3, #0
 801ad5a:	d00e      	beq.n	801ad7a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801ad5c:	68bb      	ldr	r3, [r7, #8]
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	68f9      	ldr	r1, [r7, #12]
 801ad62:	4618      	mov	r0, r3
 801ad64:	f001 f8fe 	bl	801bf64 <ip4_addr_isbroadcast_u32>
 801ad68:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801ad6a:	2b00      	cmp	r3, #0
 801ad6c:	d105      	bne.n	801ad7a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801ad6e:	68bb      	ldr	r3, [r7, #8]
 801ad70:	681b      	ldr	r3, [r3, #0]
 801ad72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801ad76:	2be0      	cmp	r3, #224	@ 0xe0
 801ad78:	d102      	bne.n	801ad80 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ad7a:	f06f 030f 	mvn.w	r3, #15
 801ad7e:	e06c      	b.n	801ae5a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801ad80:	78fb      	ldrb	r3, [r7, #3]
 801ad82:	68fa      	ldr	r2, [r7, #12]
 801ad84:	4619      	mov	r1, r3
 801ad86:	68b8      	ldr	r0, [r7, #8]
 801ad88:	f7ff fe56 	bl	801aa38 <etharp_find_entry>
 801ad8c:	4603      	mov	r3, r0
 801ad8e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801ad90:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	da02      	bge.n	801ad9e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801ad98:	8afb      	ldrh	r3, [r7, #22]
 801ad9a:	b25b      	sxtb	r3, r3
 801ad9c:	e05d      	b.n	801ae5a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801ad9e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ada2:	4933      	ldr	r1, [pc, #204]	@ (801ae70 <etharp_update_arp_entry+0x148>)
 801ada4:	4613      	mov	r3, r2
 801ada6:	005b      	lsls	r3, r3, #1
 801ada8:	4413      	add	r3, r2
 801adaa:	00db      	lsls	r3, r3, #3
 801adac:	440b      	add	r3, r1
 801adae:	3314      	adds	r3, #20
 801adb0:	2202      	movs	r2, #2
 801adb2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801adb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801adb8:	492d      	ldr	r1, [pc, #180]	@ (801ae70 <etharp_update_arp_entry+0x148>)
 801adba:	4613      	mov	r3, r2
 801adbc:	005b      	lsls	r3, r3, #1
 801adbe:	4413      	add	r3, r2
 801adc0:	00db      	lsls	r3, r3, #3
 801adc2:	440b      	add	r3, r1
 801adc4:	3308      	adds	r3, #8
 801adc6:	68fa      	ldr	r2, [r7, #12]
 801adc8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801adca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801adce:	4613      	mov	r3, r2
 801add0:	005b      	lsls	r3, r3, #1
 801add2:	4413      	add	r3, r2
 801add4:	00db      	lsls	r3, r3, #3
 801add6:	3308      	adds	r3, #8
 801add8:	4a25      	ldr	r2, [pc, #148]	@ (801ae70 <etharp_update_arp_entry+0x148>)
 801adda:	4413      	add	r3, r2
 801addc:	3304      	adds	r3, #4
 801adde:	2206      	movs	r2, #6
 801ade0:	6879      	ldr	r1, [r7, #4]
 801ade2:	4618      	mov	r0, r3
 801ade4:	f003 fb7f 	bl	801e4e6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801ade8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801adec:	4920      	ldr	r1, [pc, #128]	@ (801ae70 <etharp_update_arp_entry+0x148>)
 801adee:	4613      	mov	r3, r2
 801adf0:	005b      	lsls	r3, r3, #1
 801adf2:	4413      	add	r3, r2
 801adf4:	00db      	lsls	r3, r3, #3
 801adf6:	440b      	add	r3, r1
 801adf8:	3312      	adds	r3, #18
 801adfa:	2200      	movs	r2, #0
 801adfc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801adfe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ae02:	491b      	ldr	r1, [pc, #108]	@ (801ae70 <etharp_update_arp_entry+0x148>)
 801ae04:	4613      	mov	r3, r2
 801ae06:	005b      	lsls	r3, r3, #1
 801ae08:	4413      	add	r3, r2
 801ae0a:	00db      	lsls	r3, r3, #3
 801ae0c:	440b      	add	r3, r1
 801ae0e:	681b      	ldr	r3, [r3, #0]
 801ae10:	2b00      	cmp	r3, #0
 801ae12:	d021      	beq.n	801ae58 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801ae14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ae18:	4915      	ldr	r1, [pc, #84]	@ (801ae70 <etharp_update_arp_entry+0x148>)
 801ae1a:	4613      	mov	r3, r2
 801ae1c:	005b      	lsls	r3, r3, #1
 801ae1e:	4413      	add	r3, r2
 801ae20:	00db      	lsls	r3, r3, #3
 801ae22:	440b      	add	r3, r1
 801ae24:	681b      	ldr	r3, [r3, #0]
 801ae26:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801ae28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ae2c:	4910      	ldr	r1, [pc, #64]	@ (801ae70 <etharp_update_arp_entry+0x148>)
 801ae2e:	4613      	mov	r3, r2
 801ae30:	005b      	lsls	r3, r3, #1
 801ae32:	4413      	add	r3, r2
 801ae34:	00db      	lsls	r3, r3, #3
 801ae36:	440b      	add	r3, r1
 801ae38:	2200      	movs	r2, #0
 801ae3a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801ae3c:	68fb      	ldr	r3, [r7, #12]
 801ae3e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801ae42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801ae46:	9300      	str	r3, [sp, #0]
 801ae48:	687b      	ldr	r3, [r7, #4]
 801ae4a:	6939      	ldr	r1, [r7, #16]
 801ae4c:	68f8      	ldr	r0, [r7, #12]
 801ae4e:	f001 ff97 	bl	801cd80 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801ae52:	6938      	ldr	r0, [r7, #16]
 801ae54:	f7f9 fb32 	bl	80144bc <pbuf_free>
  }
  return ERR_OK;
 801ae58:	2300      	movs	r3, #0
}
 801ae5a:	4618      	mov	r0, r3
 801ae5c:	3718      	adds	r7, #24
 801ae5e:	46bd      	mov	sp, r7
 801ae60:	bd80      	pop	{r7, pc}
 801ae62:	bf00      	nop
 801ae64:	08021608 	.word	0x08021608
 801ae68:	08021700 	.word	0x08021700
 801ae6c:	08021680 	.word	0x08021680
 801ae70:	20027810 	.word	0x20027810

0801ae74 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801ae74:	b580      	push	{r7, lr}
 801ae76:	b084      	sub	sp, #16
 801ae78:	af00      	add	r7, sp, #0
 801ae7a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ae7c:	2300      	movs	r3, #0
 801ae7e:	60fb      	str	r3, [r7, #12]
 801ae80:	e01e      	b.n	801aec0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801ae82:	4913      	ldr	r1, [pc, #76]	@ (801aed0 <etharp_cleanup_netif+0x5c>)
 801ae84:	68fa      	ldr	r2, [r7, #12]
 801ae86:	4613      	mov	r3, r2
 801ae88:	005b      	lsls	r3, r3, #1
 801ae8a:	4413      	add	r3, r2
 801ae8c:	00db      	lsls	r3, r3, #3
 801ae8e:	440b      	add	r3, r1
 801ae90:	3314      	adds	r3, #20
 801ae92:	781b      	ldrb	r3, [r3, #0]
 801ae94:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801ae96:	7afb      	ldrb	r3, [r7, #11]
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	d00e      	beq.n	801aeba <etharp_cleanup_netif+0x46>
 801ae9c:	490c      	ldr	r1, [pc, #48]	@ (801aed0 <etharp_cleanup_netif+0x5c>)
 801ae9e:	68fa      	ldr	r2, [r7, #12]
 801aea0:	4613      	mov	r3, r2
 801aea2:	005b      	lsls	r3, r3, #1
 801aea4:	4413      	add	r3, r2
 801aea6:	00db      	lsls	r3, r3, #3
 801aea8:	440b      	add	r3, r1
 801aeaa:	3308      	adds	r3, #8
 801aeac:	681b      	ldr	r3, [r3, #0]
 801aeae:	687a      	ldr	r2, [r7, #4]
 801aeb0:	429a      	cmp	r2, r3
 801aeb2:	d102      	bne.n	801aeba <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801aeb4:	68f8      	ldr	r0, [r7, #12]
 801aeb6:	f7ff fce5 	bl	801a884 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801aeba:	68fb      	ldr	r3, [r7, #12]
 801aebc:	3301      	adds	r3, #1
 801aebe:	60fb      	str	r3, [r7, #12]
 801aec0:	68fb      	ldr	r3, [r7, #12]
 801aec2:	2b09      	cmp	r3, #9
 801aec4:	dddd      	ble.n	801ae82 <etharp_cleanup_netif+0xe>
    }
  }
}
 801aec6:	bf00      	nop
 801aec8:	bf00      	nop
 801aeca:	3710      	adds	r7, #16
 801aecc:	46bd      	mov	sp, r7
 801aece:	bd80      	pop	{r7, pc}
 801aed0:	20027810 	.word	0x20027810

0801aed4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801aed4:	b5b0      	push	{r4, r5, r7, lr}
 801aed6:	b08a      	sub	sp, #40	@ 0x28
 801aed8:	af04      	add	r7, sp, #16
 801aeda:	6078      	str	r0, [r7, #4]
 801aedc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801aede:	683b      	ldr	r3, [r7, #0]
 801aee0:	2b00      	cmp	r3, #0
 801aee2:	d107      	bne.n	801aef4 <etharp_input+0x20>
 801aee4:	4b3d      	ldr	r3, [pc, #244]	@ (801afdc <etharp_input+0x108>)
 801aee6:	f240 228a 	movw	r2, #650	@ 0x28a
 801aeea:	493d      	ldr	r1, [pc, #244]	@ (801afe0 <etharp_input+0x10c>)
 801aeec:	483d      	ldr	r0, [pc, #244]	@ (801afe4 <etharp_input+0x110>)
 801aeee:	f003 f8cf 	bl	801e090 <iprintf>
 801aef2:	e06f      	b.n	801afd4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	685b      	ldr	r3, [r3, #4]
 801aef8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801aefa:	693b      	ldr	r3, [r7, #16]
 801aefc:	881b      	ldrh	r3, [r3, #0]
 801aefe:	b29b      	uxth	r3, r3
 801af00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801af04:	d10c      	bne.n	801af20 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801af06:	693b      	ldr	r3, [r7, #16]
 801af08:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801af0a:	2b06      	cmp	r3, #6
 801af0c:	d108      	bne.n	801af20 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801af0e:	693b      	ldr	r3, [r7, #16]
 801af10:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801af12:	2b04      	cmp	r3, #4
 801af14:	d104      	bne.n	801af20 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801af16:	693b      	ldr	r3, [r7, #16]
 801af18:	885b      	ldrh	r3, [r3, #2]
 801af1a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801af1c:	2b08      	cmp	r3, #8
 801af1e:	d003      	beq.n	801af28 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801af20:	6878      	ldr	r0, [r7, #4]
 801af22:	f7f9 facb 	bl	80144bc <pbuf_free>
    return;
 801af26:	e055      	b.n	801afd4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801af28:	693b      	ldr	r3, [r7, #16]
 801af2a:	330e      	adds	r3, #14
 801af2c:	681b      	ldr	r3, [r3, #0]
 801af2e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801af30:	693b      	ldr	r3, [r7, #16]
 801af32:	3318      	adds	r3, #24
 801af34:	681b      	ldr	r3, [r3, #0]
 801af36:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801af38:	683b      	ldr	r3, [r7, #0]
 801af3a:	3304      	adds	r3, #4
 801af3c:	681b      	ldr	r3, [r3, #0]
 801af3e:	2b00      	cmp	r3, #0
 801af40:	d102      	bne.n	801af48 <etharp_input+0x74>
    for_us = 0;
 801af42:	2300      	movs	r3, #0
 801af44:	75fb      	strb	r3, [r7, #23]
 801af46:	e009      	b.n	801af5c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801af48:	68ba      	ldr	r2, [r7, #8]
 801af4a:	683b      	ldr	r3, [r7, #0]
 801af4c:	3304      	adds	r3, #4
 801af4e:	681b      	ldr	r3, [r3, #0]
 801af50:	429a      	cmp	r2, r3
 801af52:	bf0c      	ite	eq
 801af54:	2301      	moveq	r3, #1
 801af56:	2300      	movne	r3, #0
 801af58:	b2db      	uxtb	r3, r3
 801af5a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801af5c:	693b      	ldr	r3, [r7, #16]
 801af5e:	f103 0208 	add.w	r2, r3, #8
 801af62:	7dfb      	ldrb	r3, [r7, #23]
 801af64:	2b00      	cmp	r3, #0
 801af66:	d001      	beq.n	801af6c <etharp_input+0x98>
 801af68:	2301      	movs	r3, #1
 801af6a:	e000      	b.n	801af6e <etharp_input+0x9a>
 801af6c:	2302      	movs	r3, #2
 801af6e:	f107 010c 	add.w	r1, r7, #12
 801af72:	6838      	ldr	r0, [r7, #0]
 801af74:	f7ff fed8 	bl	801ad28 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801af78:	693b      	ldr	r3, [r7, #16]
 801af7a:	88db      	ldrh	r3, [r3, #6]
 801af7c:	b29b      	uxth	r3, r3
 801af7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801af82:	d003      	beq.n	801af8c <etharp_input+0xb8>
 801af84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801af88:	d01e      	beq.n	801afc8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801af8a:	e020      	b.n	801afce <etharp_input+0xfa>
      if (for_us) {
 801af8c:	7dfb      	ldrb	r3, [r7, #23]
 801af8e:	2b00      	cmp	r3, #0
 801af90:	d01c      	beq.n	801afcc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801af92:	683b      	ldr	r3, [r7, #0]
 801af94:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801af98:	693b      	ldr	r3, [r7, #16]
 801af9a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801af9e:	683b      	ldr	r3, [r7, #0]
 801afa0:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801afa4:	683b      	ldr	r3, [r7, #0]
 801afa6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801afa8:	693a      	ldr	r2, [r7, #16]
 801afaa:	3208      	adds	r2, #8
        etharp_raw(netif,
 801afac:	2102      	movs	r1, #2
 801afae:	9103      	str	r1, [sp, #12]
 801afb0:	f107 010c 	add.w	r1, r7, #12
 801afb4:	9102      	str	r1, [sp, #8]
 801afb6:	9201      	str	r2, [sp, #4]
 801afb8:	9300      	str	r3, [sp, #0]
 801afba:	462b      	mov	r3, r5
 801afbc:	4622      	mov	r2, r4
 801afbe:	4601      	mov	r1, r0
 801afc0:	6838      	ldr	r0, [r7, #0]
 801afc2:	f000 faeb 	bl	801b59c <etharp_raw>
      break;
 801afc6:	e001      	b.n	801afcc <etharp_input+0xf8>
      break;
 801afc8:	bf00      	nop
 801afca:	e000      	b.n	801afce <etharp_input+0xfa>
      break;
 801afcc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801afce:	6878      	ldr	r0, [r7, #4]
 801afd0:	f7f9 fa74 	bl	80144bc <pbuf_free>
}
 801afd4:	3718      	adds	r7, #24
 801afd6:	46bd      	mov	sp, r7
 801afd8:	bdb0      	pop	{r4, r5, r7, pc}
 801afda:	bf00      	nop
 801afdc:	08021608 	.word	0x08021608
 801afe0:	08021758 	.word	0x08021758
 801afe4:	08021680 	.word	0x08021680

0801afe8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801afe8:	b580      	push	{r7, lr}
 801afea:	b086      	sub	sp, #24
 801afec:	af02      	add	r7, sp, #8
 801afee:	60f8      	str	r0, [r7, #12]
 801aff0:	60b9      	str	r1, [r7, #8]
 801aff2:	4613      	mov	r3, r2
 801aff4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801aff6:	79fa      	ldrb	r2, [r7, #7]
 801aff8:	4944      	ldr	r1, [pc, #272]	@ (801b10c <etharp_output_to_arp_index+0x124>)
 801affa:	4613      	mov	r3, r2
 801affc:	005b      	lsls	r3, r3, #1
 801affe:	4413      	add	r3, r2
 801b000:	00db      	lsls	r3, r3, #3
 801b002:	440b      	add	r3, r1
 801b004:	3314      	adds	r3, #20
 801b006:	781b      	ldrb	r3, [r3, #0]
 801b008:	2b01      	cmp	r3, #1
 801b00a:	d806      	bhi.n	801b01a <etharp_output_to_arp_index+0x32>
 801b00c:	4b40      	ldr	r3, [pc, #256]	@ (801b110 <etharp_output_to_arp_index+0x128>)
 801b00e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801b012:	4940      	ldr	r1, [pc, #256]	@ (801b114 <etharp_output_to_arp_index+0x12c>)
 801b014:	4840      	ldr	r0, [pc, #256]	@ (801b118 <etharp_output_to_arp_index+0x130>)
 801b016:	f003 f83b 	bl	801e090 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801b01a:	79fa      	ldrb	r2, [r7, #7]
 801b01c:	493b      	ldr	r1, [pc, #236]	@ (801b10c <etharp_output_to_arp_index+0x124>)
 801b01e:	4613      	mov	r3, r2
 801b020:	005b      	lsls	r3, r3, #1
 801b022:	4413      	add	r3, r2
 801b024:	00db      	lsls	r3, r3, #3
 801b026:	440b      	add	r3, r1
 801b028:	3314      	adds	r3, #20
 801b02a:	781b      	ldrb	r3, [r3, #0]
 801b02c:	2b02      	cmp	r3, #2
 801b02e:	d153      	bne.n	801b0d8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801b030:	79fa      	ldrb	r2, [r7, #7]
 801b032:	4936      	ldr	r1, [pc, #216]	@ (801b10c <etharp_output_to_arp_index+0x124>)
 801b034:	4613      	mov	r3, r2
 801b036:	005b      	lsls	r3, r3, #1
 801b038:	4413      	add	r3, r2
 801b03a:	00db      	lsls	r3, r3, #3
 801b03c:	440b      	add	r3, r1
 801b03e:	3312      	adds	r3, #18
 801b040:	881b      	ldrh	r3, [r3, #0]
 801b042:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801b046:	d919      	bls.n	801b07c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801b048:	79fa      	ldrb	r2, [r7, #7]
 801b04a:	4613      	mov	r3, r2
 801b04c:	005b      	lsls	r3, r3, #1
 801b04e:	4413      	add	r3, r2
 801b050:	00db      	lsls	r3, r3, #3
 801b052:	4a2e      	ldr	r2, [pc, #184]	@ (801b10c <etharp_output_to_arp_index+0x124>)
 801b054:	4413      	add	r3, r2
 801b056:	3304      	adds	r3, #4
 801b058:	4619      	mov	r1, r3
 801b05a:	68f8      	ldr	r0, [r7, #12]
 801b05c:	f000 fb4c 	bl	801b6f8 <etharp_request>
 801b060:	4603      	mov	r3, r0
 801b062:	2b00      	cmp	r3, #0
 801b064:	d138      	bne.n	801b0d8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b066:	79fa      	ldrb	r2, [r7, #7]
 801b068:	4928      	ldr	r1, [pc, #160]	@ (801b10c <etharp_output_to_arp_index+0x124>)
 801b06a:	4613      	mov	r3, r2
 801b06c:	005b      	lsls	r3, r3, #1
 801b06e:	4413      	add	r3, r2
 801b070:	00db      	lsls	r3, r3, #3
 801b072:	440b      	add	r3, r1
 801b074:	3314      	adds	r3, #20
 801b076:	2203      	movs	r2, #3
 801b078:	701a      	strb	r2, [r3, #0]
 801b07a:	e02d      	b.n	801b0d8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801b07c:	79fa      	ldrb	r2, [r7, #7]
 801b07e:	4923      	ldr	r1, [pc, #140]	@ (801b10c <etharp_output_to_arp_index+0x124>)
 801b080:	4613      	mov	r3, r2
 801b082:	005b      	lsls	r3, r3, #1
 801b084:	4413      	add	r3, r2
 801b086:	00db      	lsls	r3, r3, #3
 801b088:	440b      	add	r3, r1
 801b08a:	3312      	adds	r3, #18
 801b08c:	881b      	ldrh	r3, [r3, #0]
 801b08e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801b092:	d321      	bcc.n	801b0d8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801b094:	79fa      	ldrb	r2, [r7, #7]
 801b096:	4613      	mov	r3, r2
 801b098:	005b      	lsls	r3, r3, #1
 801b09a:	4413      	add	r3, r2
 801b09c:	00db      	lsls	r3, r3, #3
 801b09e:	4a1b      	ldr	r2, [pc, #108]	@ (801b10c <etharp_output_to_arp_index+0x124>)
 801b0a0:	4413      	add	r3, r2
 801b0a2:	1d19      	adds	r1, r3, #4
 801b0a4:	79fa      	ldrb	r2, [r7, #7]
 801b0a6:	4613      	mov	r3, r2
 801b0a8:	005b      	lsls	r3, r3, #1
 801b0aa:	4413      	add	r3, r2
 801b0ac:	00db      	lsls	r3, r3, #3
 801b0ae:	3308      	adds	r3, #8
 801b0b0:	4a16      	ldr	r2, [pc, #88]	@ (801b10c <etharp_output_to_arp_index+0x124>)
 801b0b2:	4413      	add	r3, r2
 801b0b4:	3304      	adds	r3, #4
 801b0b6:	461a      	mov	r2, r3
 801b0b8:	68f8      	ldr	r0, [r7, #12]
 801b0ba:	f000 fafb 	bl	801b6b4 <etharp_request_dst>
 801b0be:	4603      	mov	r3, r0
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	d109      	bne.n	801b0d8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b0c4:	79fa      	ldrb	r2, [r7, #7]
 801b0c6:	4911      	ldr	r1, [pc, #68]	@ (801b10c <etharp_output_to_arp_index+0x124>)
 801b0c8:	4613      	mov	r3, r2
 801b0ca:	005b      	lsls	r3, r3, #1
 801b0cc:	4413      	add	r3, r2
 801b0ce:	00db      	lsls	r3, r3, #3
 801b0d0:	440b      	add	r3, r1
 801b0d2:	3314      	adds	r3, #20
 801b0d4:	2203      	movs	r2, #3
 801b0d6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801b0d8:	68fb      	ldr	r3, [r7, #12]
 801b0da:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801b0de:	79fa      	ldrb	r2, [r7, #7]
 801b0e0:	4613      	mov	r3, r2
 801b0e2:	005b      	lsls	r3, r3, #1
 801b0e4:	4413      	add	r3, r2
 801b0e6:	00db      	lsls	r3, r3, #3
 801b0e8:	3308      	adds	r3, #8
 801b0ea:	4a08      	ldr	r2, [pc, #32]	@ (801b10c <etharp_output_to_arp_index+0x124>)
 801b0ec:	4413      	add	r3, r2
 801b0ee:	3304      	adds	r3, #4
 801b0f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b0f4:	9200      	str	r2, [sp, #0]
 801b0f6:	460a      	mov	r2, r1
 801b0f8:	68b9      	ldr	r1, [r7, #8]
 801b0fa:	68f8      	ldr	r0, [r7, #12]
 801b0fc:	f001 fe40 	bl	801cd80 <ethernet_output>
 801b100:	4603      	mov	r3, r0
}
 801b102:	4618      	mov	r0, r3
 801b104:	3710      	adds	r7, #16
 801b106:	46bd      	mov	sp, r7
 801b108:	bd80      	pop	{r7, pc}
 801b10a:	bf00      	nop
 801b10c:	20027810 	.word	0x20027810
 801b110:	08021608 	.word	0x08021608
 801b114:	08021778 	.word	0x08021778
 801b118:	08021680 	.word	0x08021680

0801b11c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801b11c:	b580      	push	{r7, lr}
 801b11e:	b08a      	sub	sp, #40	@ 0x28
 801b120:	af02      	add	r7, sp, #8
 801b122:	60f8      	str	r0, [r7, #12]
 801b124:	60b9      	str	r1, [r7, #8]
 801b126:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b12c:	68fb      	ldr	r3, [r7, #12]
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d106      	bne.n	801b140 <etharp_output+0x24>
 801b132:	4b73      	ldr	r3, [pc, #460]	@ (801b300 <etharp_output+0x1e4>)
 801b134:	f240 321e 	movw	r2, #798	@ 0x31e
 801b138:	4972      	ldr	r1, [pc, #456]	@ (801b304 <etharp_output+0x1e8>)
 801b13a:	4873      	ldr	r0, [pc, #460]	@ (801b308 <etharp_output+0x1ec>)
 801b13c:	f002 ffa8 	bl	801e090 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801b140:	68bb      	ldr	r3, [r7, #8]
 801b142:	2b00      	cmp	r3, #0
 801b144:	d106      	bne.n	801b154 <etharp_output+0x38>
 801b146:	4b6e      	ldr	r3, [pc, #440]	@ (801b300 <etharp_output+0x1e4>)
 801b148:	f240 321f 	movw	r2, #799	@ 0x31f
 801b14c:	496f      	ldr	r1, [pc, #444]	@ (801b30c <etharp_output+0x1f0>)
 801b14e:	486e      	ldr	r0, [pc, #440]	@ (801b308 <etharp_output+0x1ec>)
 801b150:	f002 ff9e 	bl	801e090 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	2b00      	cmp	r3, #0
 801b158:	d106      	bne.n	801b168 <etharp_output+0x4c>
 801b15a:	4b69      	ldr	r3, [pc, #420]	@ (801b300 <etharp_output+0x1e4>)
 801b15c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801b160:	496b      	ldr	r1, [pc, #428]	@ (801b310 <etharp_output+0x1f4>)
 801b162:	4869      	ldr	r0, [pc, #420]	@ (801b308 <etharp_output+0x1ec>)
 801b164:	f002 ff94 	bl	801e090 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	681b      	ldr	r3, [r3, #0]
 801b16c:	68f9      	ldr	r1, [r7, #12]
 801b16e:	4618      	mov	r0, r3
 801b170:	f000 fef8 	bl	801bf64 <ip4_addr_isbroadcast_u32>
 801b174:	4603      	mov	r3, r0
 801b176:	2b00      	cmp	r3, #0
 801b178:	d002      	beq.n	801b180 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801b17a:	4b66      	ldr	r3, [pc, #408]	@ (801b314 <etharp_output+0x1f8>)
 801b17c:	61fb      	str	r3, [r7, #28]
 801b17e:	e0af      	b.n	801b2e0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	681b      	ldr	r3, [r3, #0]
 801b184:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b188:	2be0      	cmp	r3, #224	@ 0xe0
 801b18a:	d118      	bne.n	801b1be <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801b18c:	2301      	movs	r3, #1
 801b18e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801b190:	2300      	movs	r3, #0
 801b192:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801b194:	235e      	movs	r3, #94	@ 0x5e
 801b196:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801b198:	687b      	ldr	r3, [r7, #4]
 801b19a:	3301      	adds	r3, #1
 801b19c:	781b      	ldrb	r3, [r3, #0]
 801b19e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b1a2:	b2db      	uxtb	r3, r3
 801b1a4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801b1a6:	687b      	ldr	r3, [r7, #4]
 801b1a8:	3302      	adds	r3, #2
 801b1aa:	781b      	ldrb	r3, [r3, #0]
 801b1ac:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	3303      	adds	r3, #3
 801b1b2:	781b      	ldrb	r3, [r3, #0]
 801b1b4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801b1b6:	f107 0310 	add.w	r3, r7, #16
 801b1ba:	61fb      	str	r3, [r7, #28]
 801b1bc:	e090      	b.n	801b2e0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b1be:	687b      	ldr	r3, [r7, #4]
 801b1c0:	681a      	ldr	r2, [r3, #0]
 801b1c2:	68fb      	ldr	r3, [r7, #12]
 801b1c4:	3304      	adds	r3, #4
 801b1c6:	681b      	ldr	r3, [r3, #0]
 801b1c8:	405a      	eors	r2, r3
 801b1ca:	68fb      	ldr	r3, [r7, #12]
 801b1cc:	3308      	adds	r3, #8
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	4013      	ands	r3, r2
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d012      	beq.n	801b1fc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	681b      	ldr	r3, [r3, #0]
 801b1da:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b1dc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801b1e0:	4293      	cmp	r3, r2
 801b1e2:	d00b      	beq.n	801b1fc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801b1e4:	68fb      	ldr	r3, [r7, #12]
 801b1e6:	330c      	adds	r3, #12
 801b1e8:	681b      	ldr	r3, [r3, #0]
 801b1ea:	2b00      	cmp	r3, #0
 801b1ec:	d003      	beq.n	801b1f6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801b1ee:	68fb      	ldr	r3, [r7, #12]
 801b1f0:	330c      	adds	r3, #12
 801b1f2:	61bb      	str	r3, [r7, #24]
 801b1f4:	e002      	b.n	801b1fc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801b1f6:	f06f 0303 	mvn.w	r3, #3
 801b1fa:	e07d      	b.n	801b2f8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b1fc:	4b46      	ldr	r3, [pc, #280]	@ (801b318 <etharp_output+0x1fc>)
 801b1fe:	781b      	ldrb	r3, [r3, #0]
 801b200:	4619      	mov	r1, r3
 801b202:	4a46      	ldr	r2, [pc, #280]	@ (801b31c <etharp_output+0x200>)
 801b204:	460b      	mov	r3, r1
 801b206:	005b      	lsls	r3, r3, #1
 801b208:	440b      	add	r3, r1
 801b20a:	00db      	lsls	r3, r3, #3
 801b20c:	4413      	add	r3, r2
 801b20e:	3314      	adds	r3, #20
 801b210:	781b      	ldrb	r3, [r3, #0]
 801b212:	2b01      	cmp	r3, #1
 801b214:	d925      	bls.n	801b262 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b216:	4b40      	ldr	r3, [pc, #256]	@ (801b318 <etharp_output+0x1fc>)
 801b218:	781b      	ldrb	r3, [r3, #0]
 801b21a:	4619      	mov	r1, r3
 801b21c:	4a3f      	ldr	r2, [pc, #252]	@ (801b31c <etharp_output+0x200>)
 801b21e:	460b      	mov	r3, r1
 801b220:	005b      	lsls	r3, r3, #1
 801b222:	440b      	add	r3, r1
 801b224:	00db      	lsls	r3, r3, #3
 801b226:	4413      	add	r3, r2
 801b228:	3308      	adds	r3, #8
 801b22a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b22c:	68fa      	ldr	r2, [r7, #12]
 801b22e:	429a      	cmp	r2, r3
 801b230:	d117      	bne.n	801b262 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801b232:	69bb      	ldr	r3, [r7, #24]
 801b234:	681a      	ldr	r2, [r3, #0]
 801b236:	4b38      	ldr	r3, [pc, #224]	@ (801b318 <etharp_output+0x1fc>)
 801b238:	781b      	ldrb	r3, [r3, #0]
 801b23a:	4618      	mov	r0, r3
 801b23c:	4937      	ldr	r1, [pc, #220]	@ (801b31c <etharp_output+0x200>)
 801b23e:	4603      	mov	r3, r0
 801b240:	005b      	lsls	r3, r3, #1
 801b242:	4403      	add	r3, r0
 801b244:	00db      	lsls	r3, r3, #3
 801b246:	440b      	add	r3, r1
 801b248:	3304      	adds	r3, #4
 801b24a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b24c:	429a      	cmp	r2, r3
 801b24e:	d108      	bne.n	801b262 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801b250:	4b31      	ldr	r3, [pc, #196]	@ (801b318 <etharp_output+0x1fc>)
 801b252:	781b      	ldrb	r3, [r3, #0]
 801b254:	461a      	mov	r2, r3
 801b256:	68b9      	ldr	r1, [r7, #8]
 801b258:	68f8      	ldr	r0, [r7, #12]
 801b25a:	f7ff fec5 	bl	801afe8 <etharp_output_to_arp_index>
 801b25e:	4603      	mov	r3, r0
 801b260:	e04a      	b.n	801b2f8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b262:	2300      	movs	r3, #0
 801b264:	75fb      	strb	r3, [r7, #23]
 801b266:	e031      	b.n	801b2cc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b268:	7dfa      	ldrb	r2, [r7, #23]
 801b26a:	492c      	ldr	r1, [pc, #176]	@ (801b31c <etharp_output+0x200>)
 801b26c:	4613      	mov	r3, r2
 801b26e:	005b      	lsls	r3, r3, #1
 801b270:	4413      	add	r3, r2
 801b272:	00db      	lsls	r3, r3, #3
 801b274:	440b      	add	r3, r1
 801b276:	3314      	adds	r3, #20
 801b278:	781b      	ldrb	r3, [r3, #0]
 801b27a:	2b01      	cmp	r3, #1
 801b27c:	d923      	bls.n	801b2c6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801b27e:	7dfa      	ldrb	r2, [r7, #23]
 801b280:	4926      	ldr	r1, [pc, #152]	@ (801b31c <etharp_output+0x200>)
 801b282:	4613      	mov	r3, r2
 801b284:	005b      	lsls	r3, r3, #1
 801b286:	4413      	add	r3, r2
 801b288:	00db      	lsls	r3, r3, #3
 801b28a:	440b      	add	r3, r1
 801b28c:	3308      	adds	r3, #8
 801b28e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b290:	68fa      	ldr	r2, [r7, #12]
 801b292:	429a      	cmp	r2, r3
 801b294:	d117      	bne.n	801b2c6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801b296:	69bb      	ldr	r3, [r7, #24]
 801b298:	6819      	ldr	r1, [r3, #0]
 801b29a:	7dfa      	ldrb	r2, [r7, #23]
 801b29c:	481f      	ldr	r0, [pc, #124]	@ (801b31c <etharp_output+0x200>)
 801b29e:	4613      	mov	r3, r2
 801b2a0:	005b      	lsls	r3, r3, #1
 801b2a2:	4413      	add	r3, r2
 801b2a4:	00db      	lsls	r3, r3, #3
 801b2a6:	4403      	add	r3, r0
 801b2a8:	3304      	adds	r3, #4
 801b2aa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801b2ac:	4299      	cmp	r1, r3
 801b2ae:	d10a      	bne.n	801b2c6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801b2b0:	4a19      	ldr	r2, [pc, #100]	@ (801b318 <etharp_output+0x1fc>)
 801b2b2:	7dfb      	ldrb	r3, [r7, #23]
 801b2b4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801b2b6:	7dfb      	ldrb	r3, [r7, #23]
 801b2b8:	461a      	mov	r2, r3
 801b2ba:	68b9      	ldr	r1, [r7, #8]
 801b2bc:	68f8      	ldr	r0, [r7, #12]
 801b2be:	f7ff fe93 	bl	801afe8 <etharp_output_to_arp_index>
 801b2c2:	4603      	mov	r3, r0
 801b2c4:	e018      	b.n	801b2f8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b2c6:	7dfb      	ldrb	r3, [r7, #23]
 801b2c8:	3301      	adds	r3, #1
 801b2ca:	75fb      	strb	r3, [r7, #23]
 801b2cc:	7dfb      	ldrb	r3, [r7, #23]
 801b2ce:	2b09      	cmp	r3, #9
 801b2d0:	d9ca      	bls.n	801b268 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801b2d2:	68ba      	ldr	r2, [r7, #8]
 801b2d4:	69b9      	ldr	r1, [r7, #24]
 801b2d6:	68f8      	ldr	r0, [r7, #12]
 801b2d8:	f000 f822 	bl	801b320 <etharp_query>
 801b2dc:	4603      	mov	r3, r0
 801b2de:	e00b      	b.n	801b2f8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801b2e0:	68fb      	ldr	r3, [r7, #12]
 801b2e2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801b2e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b2ea:	9300      	str	r3, [sp, #0]
 801b2ec:	69fb      	ldr	r3, [r7, #28]
 801b2ee:	68b9      	ldr	r1, [r7, #8]
 801b2f0:	68f8      	ldr	r0, [r7, #12]
 801b2f2:	f001 fd45 	bl	801cd80 <ethernet_output>
 801b2f6:	4603      	mov	r3, r0
}
 801b2f8:	4618      	mov	r0, r3
 801b2fa:	3720      	adds	r7, #32
 801b2fc:	46bd      	mov	sp, r7
 801b2fe:	bd80      	pop	{r7, pc}
 801b300:	08021608 	.word	0x08021608
 801b304:	08021758 	.word	0x08021758
 801b308:	08021680 	.word	0x08021680
 801b30c:	080217a8 	.word	0x080217a8
 801b310:	08021748 	.word	0x08021748
 801b314:	080222f0 	.word	0x080222f0
 801b318:	20027900 	.word	0x20027900
 801b31c:	20027810 	.word	0x20027810

0801b320 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801b320:	b580      	push	{r7, lr}
 801b322:	b08c      	sub	sp, #48	@ 0x30
 801b324:	af02      	add	r7, sp, #8
 801b326:	60f8      	str	r0, [r7, #12]
 801b328:	60b9      	str	r1, [r7, #8]
 801b32a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801b32c:	68fb      	ldr	r3, [r7, #12]
 801b32e:	3326      	adds	r3, #38	@ 0x26
 801b330:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801b332:	23ff      	movs	r3, #255	@ 0xff
 801b334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801b338:	2300      	movs	r3, #0
 801b33a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b33c:	68bb      	ldr	r3, [r7, #8]
 801b33e:	681b      	ldr	r3, [r3, #0]
 801b340:	68f9      	ldr	r1, [r7, #12]
 801b342:	4618      	mov	r0, r3
 801b344:	f000 fe0e 	bl	801bf64 <ip4_addr_isbroadcast_u32>
 801b348:	4603      	mov	r3, r0
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	d10c      	bne.n	801b368 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b34e:	68bb      	ldr	r3, [r7, #8]
 801b350:	681b      	ldr	r3, [r3, #0]
 801b352:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b356:	2be0      	cmp	r3, #224	@ 0xe0
 801b358:	d006      	beq.n	801b368 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b35a:	68bb      	ldr	r3, [r7, #8]
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	d003      	beq.n	801b368 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801b360:	68bb      	ldr	r3, [r7, #8]
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	2b00      	cmp	r3, #0
 801b366:	d102      	bne.n	801b36e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b368:	f06f 030f 	mvn.w	r3, #15
 801b36c:	e101      	b.n	801b572 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801b36e:	68fa      	ldr	r2, [r7, #12]
 801b370:	2101      	movs	r1, #1
 801b372:	68b8      	ldr	r0, [r7, #8]
 801b374:	f7ff fb60 	bl	801aa38 <etharp_find_entry>
 801b378:	4603      	mov	r3, r0
 801b37a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801b37c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b380:	2b00      	cmp	r3, #0
 801b382:	da02      	bge.n	801b38a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801b384:	8a7b      	ldrh	r3, [r7, #18]
 801b386:	b25b      	sxtb	r3, r3
 801b388:	e0f3      	b.n	801b572 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801b38a:	8a7b      	ldrh	r3, [r7, #18]
 801b38c:	2b7e      	cmp	r3, #126	@ 0x7e
 801b38e:	d906      	bls.n	801b39e <etharp_query+0x7e>
 801b390:	4b7a      	ldr	r3, [pc, #488]	@ (801b57c <etharp_query+0x25c>)
 801b392:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801b396:	497a      	ldr	r1, [pc, #488]	@ (801b580 <etharp_query+0x260>)
 801b398:	487a      	ldr	r0, [pc, #488]	@ (801b584 <etharp_query+0x264>)
 801b39a:	f002 fe79 	bl	801e090 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801b39e:	8a7b      	ldrh	r3, [r7, #18]
 801b3a0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801b3a2:	7c7a      	ldrb	r2, [r7, #17]
 801b3a4:	4978      	ldr	r1, [pc, #480]	@ (801b588 <etharp_query+0x268>)
 801b3a6:	4613      	mov	r3, r2
 801b3a8:	005b      	lsls	r3, r3, #1
 801b3aa:	4413      	add	r3, r2
 801b3ac:	00db      	lsls	r3, r3, #3
 801b3ae:	440b      	add	r3, r1
 801b3b0:	3314      	adds	r3, #20
 801b3b2:	781b      	ldrb	r3, [r3, #0]
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	d115      	bne.n	801b3e4 <etharp_query+0xc4>
    is_new_entry = 1;
 801b3b8:	2301      	movs	r3, #1
 801b3ba:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801b3bc:	7c7a      	ldrb	r2, [r7, #17]
 801b3be:	4972      	ldr	r1, [pc, #456]	@ (801b588 <etharp_query+0x268>)
 801b3c0:	4613      	mov	r3, r2
 801b3c2:	005b      	lsls	r3, r3, #1
 801b3c4:	4413      	add	r3, r2
 801b3c6:	00db      	lsls	r3, r3, #3
 801b3c8:	440b      	add	r3, r1
 801b3ca:	3314      	adds	r3, #20
 801b3cc:	2201      	movs	r2, #1
 801b3ce:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801b3d0:	7c7a      	ldrb	r2, [r7, #17]
 801b3d2:	496d      	ldr	r1, [pc, #436]	@ (801b588 <etharp_query+0x268>)
 801b3d4:	4613      	mov	r3, r2
 801b3d6:	005b      	lsls	r3, r3, #1
 801b3d8:	4413      	add	r3, r2
 801b3da:	00db      	lsls	r3, r3, #3
 801b3dc:	440b      	add	r3, r1
 801b3de:	3308      	adds	r3, #8
 801b3e0:	68fa      	ldr	r2, [r7, #12]
 801b3e2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801b3e4:	7c7a      	ldrb	r2, [r7, #17]
 801b3e6:	4968      	ldr	r1, [pc, #416]	@ (801b588 <etharp_query+0x268>)
 801b3e8:	4613      	mov	r3, r2
 801b3ea:	005b      	lsls	r3, r3, #1
 801b3ec:	4413      	add	r3, r2
 801b3ee:	00db      	lsls	r3, r3, #3
 801b3f0:	440b      	add	r3, r1
 801b3f2:	3314      	adds	r3, #20
 801b3f4:	781b      	ldrb	r3, [r3, #0]
 801b3f6:	2b01      	cmp	r3, #1
 801b3f8:	d011      	beq.n	801b41e <etharp_query+0xfe>
 801b3fa:	7c7a      	ldrb	r2, [r7, #17]
 801b3fc:	4962      	ldr	r1, [pc, #392]	@ (801b588 <etharp_query+0x268>)
 801b3fe:	4613      	mov	r3, r2
 801b400:	005b      	lsls	r3, r3, #1
 801b402:	4413      	add	r3, r2
 801b404:	00db      	lsls	r3, r3, #3
 801b406:	440b      	add	r3, r1
 801b408:	3314      	adds	r3, #20
 801b40a:	781b      	ldrb	r3, [r3, #0]
 801b40c:	2b01      	cmp	r3, #1
 801b40e:	d806      	bhi.n	801b41e <etharp_query+0xfe>
 801b410:	4b5a      	ldr	r3, [pc, #360]	@ (801b57c <etharp_query+0x25c>)
 801b412:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801b416:	495d      	ldr	r1, [pc, #372]	@ (801b58c <etharp_query+0x26c>)
 801b418:	485a      	ldr	r0, [pc, #360]	@ (801b584 <etharp_query+0x264>)
 801b41a:	f002 fe39 	bl	801e090 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801b41e:	6a3b      	ldr	r3, [r7, #32]
 801b420:	2b00      	cmp	r3, #0
 801b422:	d102      	bne.n	801b42a <etharp_query+0x10a>
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	2b00      	cmp	r3, #0
 801b428:	d10c      	bne.n	801b444 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801b42a:	68b9      	ldr	r1, [r7, #8]
 801b42c:	68f8      	ldr	r0, [r7, #12]
 801b42e:	f000 f963 	bl	801b6f8 <etharp_request>
 801b432:	4603      	mov	r3, r0
 801b434:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	d102      	bne.n	801b444 <etharp_query+0x124>
      return result;
 801b43e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801b442:	e096      	b.n	801b572 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	2b00      	cmp	r3, #0
 801b448:	d106      	bne.n	801b458 <etharp_query+0x138>
 801b44a:	4b4c      	ldr	r3, [pc, #304]	@ (801b57c <etharp_query+0x25c>)
 801b44c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801b450:	494f      	ldr	r1, [pc, #316]	@ (801b590 <etharp_query+0x270>)
 801b452:	484c      	ldr	r0, [pc, #304]	@ (801b584 <etharp_query+0x264>)
 801b454:	f002 fe1c 	bl	801e090 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801b458:	7c7a      	ldrb	r2, [r7, #17]
 801b45a:	494b      	ldr	r1, [pc, #300]	@ (801b588 <etharp_query+0x268>)
 801b45c:	4613      	mov	r3, r2
 801b45e:	005b      	lsls	r3, r3, #1
 801b460:	4413      	add	r3, r2
 801b462:	00db      	lsls	r3, r3, #3
 801b464:	440b      	add	r3, r1
 801b466:	3314      	adds	r3, #20
 801b468:	781b      	ldrb	r3, [r3, #0]
 801b46a:	2b01      	cmp	r3, #1
 801b46c:	d917      	bls.n	801b49e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801b46e:	4a49      	ldr	r2, [pc, #292]	@ (801b594 <etharp_query+0x274>)
 801b470:	7c7b      	ldrb	r3, [r7, #17]
 801b472:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801b474:	7c7a      	ldrb	r2, [r7, #17]
 801b476:	4613      	mov	r3, r2
 801b478:	005b      	lsls	r3, r3, #1
 801b47a:	4413      	add	r3, r2
 801b47c:	00db      	lsls	r3, r3, #3
 801b47e:	3308      	adds	r3, #8
 801b480:	4a41      	ldr	r2, [pc, #260]	@ (801b588 <etharp_query+0x268>)
 801b482:	4413      	add	r3, r2
 801b484:	3304      	adds	r3, #4
 801b486:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b48a:	9200      	str	r2, [sp, #0]
 801b48c:	697a      	ldr	r2, [r7, #20]
 801b48e:	6879      	ldr	r1, [r7, #4]
 801b490:	68f8      	ldr	r0, [r7, #12]
 801b492:	f001 fc75 	bl	801cd80 <ethernet_output>
 801b496:	4603      	mov	r3, r0
 801b498:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b49c:	e067      	b.n	801b56e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b49e:	7c7a      	ldrb	r2, [r7, #17]
 801b4a0:	4939      	ldr	r1, [pc, #228]	@ (801b588 <etharp_query+0x268>)
 801b4a2:	4613      	mov	r3, r2
 801b4a4:	005b      	lsls	r3, r3, #1
 801b4a6:	4413      	add	r3, r2
 801b4a8:	00db      	lsls	r3, r3, #3
 801b4aa:	440b      	add	r3, r1
 801b4ac:	3314      	adds	r3, #20
 801b4ae:	781b      	ldrb	r3, [r3, #0]
 801b4b0:	2b01      	cmp	r3, #1
 801b4b2:	d15c      	bne.n	801b56e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801b4b4:	2300      	movs	r3, #0
 801b4b6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b4bc:	e01c      	b.n	801b4f8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801b4be:	69fb      	ldr	r3, [r7, #28]
 801b4c0:	895a      	ldrh	r2, [r3, #10]
 801b4c2:	69fb      	ldr	r3, [r7, #28]
 801b4c4:	891b      	ldrh	r3, [r3, #8]
 801b4c6:	429a      	cmp	r2, r3
 801b4c8:	d10a      	bne.n	801b4e0 <etharp_query+0x1c0>
 801b4ca:	69fb      	ldr	r3, [r7, #28]
 801b4cc:	681b      	ldr	r3, [r3, #0]
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	d006      	beq.n	801b4e0 <etharp_query+0x1c0>
 801b4d2:	4b2a      	ldr	r3, [pc, #168]	@ (801b57c <etharp_query+0x25c>)
 801b4d4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801b4d8:	492f      	ldr	r1, [pc, #188]	@ (801b598 <etharp_query+0x278>)
 801b4da:	482a      	ldr	r0, [pc, #168]	@ (801b584 <etharp_query+0x264>)
 801b4dc:	f002 fdd8 	bl	801e090 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801b4e0:	69fb      	ldr	r3, [r7, #28]
 801b4e2:	7b1b      	ldrb	r3, [r3, #12]
 801b4e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d002      	beq.n	801b4f2 <etharp_query+0x1d2>
        copy_needed = 1;
 801b4ec:	2301      	movs	r3, #1
 801b4ee:	61bb      	str	r3, [r7, #24]
        break;
 801b4f0:	e005      	b.n	801b4fe <etharp_query+0x1de>
      }
      p = p->next;
 801b4f2:	69fb      	ldr	r3, [r7, #28]
 801b4f4:	681b      	ldr	r3, [r3, #0]
 801b4f6:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b4f8:	69fb      	ldr	r3, [r7, #28]
 801b4fa:	2b00      	cmp	r3, #0
 801b4fc:	d1df      	bne.n	801b4be <etharp_query+0x19e>
    }
    if (copy_needed) {
 801b4fe:	69bb      	ldr	r3, [r7, #24]
 801b500:	2b00      	cmp	r3, #0
 801b502:	d007      	beq.n	801b514 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801b504:	687a      	ldr	r2, [r7, #4]
 801b506:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801b50a:	200e      	movs	r0, #14
 801b50c:	f7f9 fa4e 	bl	80149ac <pbuf_clone>
 801b510:	61f8      	str	r0, [r7, #28]
 801b512:	e004      	b.n	801b51e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801b514:	687b      	ldr	r3, [r7, #4]
 801b516:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801b518:	69f8      	ldr	r0, [r7, #28]
 801b51a:	f7f9 f875 	bl	8014608 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801b51e:	69fb      	ldr	r3, [r7, #28]
 801b520:	2b00      	cmp	r3, #0
 801b522:	d021      	beq.n	801b568 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801b524:	7c7a      	ldrb	r2, [r7, #17]
 801b526:	4918      	ldr	r1, [pc, #96]	@ (801b588 <etharp_query+0x268>)
 801b528:	4613      	mov	r3, r2
 801b52a:	005b      	lsls	r3, r3, #1
 801b52c:	4413      	add	r3, r2
 801b52e:	00db      	lsls	r3, r3, #3
 801b530:	440b      	add	r3, r1
 801b532:	681b      	ldr	r3, [r3, #0]
 801b534:	2b00      	cmp	r3, #0
 801b536:	d00a      	beq.n	801b54e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801b538:	7c7a      	ldrb	r2, [r7, #17]
 801b53a:	4913      	ldr	r1, [pc, #76]	@ (801b588 <etharp_query+0x268>)
 801b53c:	4613      	mov	r3, r2
 801b53e:	005b      	lsls	r3, r3, #1
 801b540:	4413      	add	r3, r2
 801b542:	00db      	lsls	r3, r3, #3
 801b544:	440b      	add	r3, r1
 801b546:	681b      	ldr	r3, [r3, #0]
 801b548:	4618      	mov	r0, r3
 801b54a:	f7f8 ffb7 	bl	80144bc <pbuf_free>
      }
      arp_table[i].q = p;
 801b54e:	7c7a      	ldrb	r2, [r7, #17]
 801b550:	490d      	ldr	r1, [pc, #52]	@ (801b588 <etharp_query+0x268>)
 801b552:	4613      	mov	r3, r2
 801b554:	005b      	lsls	r3, r3, #1
 801b556:	4413      	add	r3, r2
 801b558:	00db      	lsls	r3, r3, #3
 801b55a:	440b      	add	r3, r1
 801b55c:	69fa      	ldr	r2, [r7, #28]
 801b55e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801b560:	2300      	movs	r3, #0
 801b562:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b566:	e002      	b.n	801b56e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801b568:	23ff      	movs	r3, #255	@ 0xff
 801b56a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801b56e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801b572:	4618      	mov	r0, r3
 801b574:	3728      	adds	r7, #40	@ 0x28
 801b576:	46bd      	mov	sp, r7
 801b578:	bd80      	pop	{r7, pc}
 801b57a:	bf00      	nop
 801b57c:	08021608 	.word	0x08021608
 801b580:	080217b4 	.word	0x080217b4
 801b584:	08021680 	.word	0x08021680
 801b588:	20027810 	.word	0x20027810
 801b58c:	080217c4 	.word	0x080217c4
 801b590:	080217a8 	.word	0x080217a8
 801b594:	20027900 	.word	0x20027900
 801b598:	080217ec 	.word	0x080217ec

0801b59c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801b59c:	b580      	push	{r7, lr}
 801b59e:	b08a      	sub	sp, #40	@ 0x28
 801b5a0:	af02      	add	r7, sp, #8
 801b5a2:	60f8      	str	r0, [r7, #12]
 801b5a4:	60b9      	str	r1, [r7, #8]
 801b5a6:	607a      	str	r2, [r7, #4]
 801b5a8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801b5aa:	2300      	movs	r3, #0
 801b5ac:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b5ae:	68fb      	ldr	r3, [r7, #12]
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	d106      	bne.n	801b5c2 <etharp_raw+0x26>
 801b5b4:	4b3a      	ldr	r3, [pc, #232]	@ (801b6a0 <etharp_raw+0x104>)
 801b5b6:	f240 4257 	movw	r2, #1111	@ 0x457
 801b5ba:	493a      	ldr	r1, [pc, #232]	@ (801b6a4 <etharp_raw+0x108>)
 801b5bc:	483a      	ldr	r0, [pc, #232]	@ (801b6a8 <etharp_raw+0x10c>)
 801b5be:	f002 fd67 	bl	801e090 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801b5c2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b5c6:	211c      	movs	r1, #28
 801b5c8:	200e      	movs	r0, #14
 801b5ca:	f7f8 fc93 	bl	8013ef4 <pbuf_alloc>
 801b5ce:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801b5d0:	69bb      	ldr	r3, [r7, #24]
 801b5d2:	2b00      	cmp	r3, #0
 801b5d4:	d102      	bne.n	801b5dc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801b5d6:	f04f 33ff 	mov.w	r3, #4294967295
 801b5da:	e05d      	b.n	801b698 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801b5dc:	69bb      	ldr	r3, [r7, #24]
 801b5de:	895b      	ldrh	r3, [r3, #10]
 801b5e0:	2b1b      	cmp	r3, #27
 801b5e2:	d806      	bhi.n	801b5f2 <etharp_raw+0x56>
 801b5e4:	4b2e      	ldr	r3, [pc, #184]	@ (801b6a0 <etharp_raw+0x104>)
 801b5e6:	f240 4262 	movw	r2, #1122	@ 0x462
 801b5ea:	4930      	ldr	r1, [pc, #192]	@ (801b6ac <etharp_raw+0x110>)
 801b5ec:	482e      	ldr	r0, [pc, #184]	@ (801b6a8 <etharp_raw+0x10c>)
 801b5ee:	f002 fd4f 	bl	801e090 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801b5f2:	69bb      	ldr	r3, [r7, #24]
 801b5f4:	685b      	ldr	r3, [r3, #4]
 801b5f6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801b5f8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801b5fa:	4618      	mov	r0, r3
 801b5fc:	f7f7 fb70 	bl	8012ce0 <lwip_htons>
 801b600:	4603      	mov	r3, r0
 801b602:	461a      	mov	r2, r3
 801b604:	697b      	ldr	r3, [r7, #20]
 801b606:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801b608:	68fb      	ldr	r3, [r7, #12]
 801b60a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801b60e:	2b06      	cmp	r3, #6
 801b610:	d006      	beq.n	801b620 <etharp_raw+0x84>
 801b612:	4b23      	ldr	r3, [pc, #140]	@ (801b6a0 <etharp_raw+0x104>)
 801b614:	f240 4269 	movw	r2, #1129	@ 0x469
 801b618:	4925      	ldr	r1, [pc, #148]	@ (801b6b0 <etharp_raw+0x114>)
 801b61a:	4823      	ldr	r0, [pc, #140]	@ (801b6a8 <etharp_raw+0x10c>)
 801b61c:	f002 fd38 	bl	801e090 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801b620:	697b      	ldr	r3, [r7, #20]
 801b622:	3308      	adds	r3, #8
 801b624:	2206      	movs	r2, #6
 801b626:	6839      	ldr	r1, [r7, #0]
 801b628:	4618      	mov	r0, r3
 801b62a:	f002 ff5c 	bl	801e4e6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801b62e:	697b      	ldr	r3, [r7, #20]
 801b630:	3312      	adds	r3, #18
 801b632:	2206      	movs	r2, #6
 801b634:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b636:	4618      	mov	r0, r3
 801b638:	f002 ff55 	bl	801e4e6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801b63c:	697b      	ldr	r3, [r7, #20]
 801b63e:	330e      	adds	r3, #14
 801b640:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b642:	6812      	ldr	r2, [r2, #0]
 801b644:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801b646:	697b      	ldr	r3, [r7, #20]
 801b648:	3318      	adds	r3, #24
 801b64a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b64c:	6812      	ldr	r2, [r2, #0]
 801b64e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801b650:	697b      	ldr	r3, [r7, #20]
 801b652:	2200      	movs	r2, #0
 801b654:	701a      	strb	r2, [r3, #0]
 801b656:	2200      	movs	r2, #0
 801b658:	f042 0201 	orr.w	r2, r2, #1
 801b65c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801b65e:	697b      	ldr	r3, [r7, #20]
 801b660:	2200      	movs	r2, #0
 801b662:	f042 0208 	orr.w	r2, r2, #8
 801b666:	709a      	strb	r2, [r3, #2]
 801b668:	2200      	movs	r2, #0
 801b66a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801b66c:	697b      	ldr	r3, [r7, #20]
 801b66e:	2206      	movs	r2, #6
 801b670:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801b672:	697b      	ldr	r3, [r7, #20]
 801b674:	2204      	movs	r2, #4
 801b676:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801b678:	f640 0306 	movw	r3, #2054	@ 0x806
 801b67c:	9300      	str	r3, [sp, #0]
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	68ba      	ldr	r2, [r7, #8]
 801b682:	69b9      	ldr	r1, [r7, #24]
 801b684:	68f8      	ldr	r0, [r7, #12]
 801b686:	f001 fb7b 	bl	801cd80 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801b68a:	69b8      	ldr	r0, [r7, #24]
 801b68c:	f7f8 ff16 	bl	80144bc <pbuf_free>
  p = NULL;
 801b690:	2300      	movs	r3, #0
 801b692:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801b694:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b698:	4618      	mov	r0, r3
 801b69a:	3720      	adds	r7, #32
 801b69c:	46bd      	mov	sp, r7
 801b69e:	bd80      	pop	{r7, pc}
 801b6a0:	08021608 	.word	0x08021608
 801b6a4:	08021758 	.word	0x08021758
 801b6a8:	08021680 	.word	0x08021680
 801b6ac:	08021808 	.word	0x08021808
 801b6b0:	0802183c 	.word	0x0802183c

0801b6b4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801b6b4:	b580      	push	{r7, lr}
 801b6b6:	b088      	sub	sp, #32
 801b6b8:	af04      	add	r7, sp, #16
 801b6ba:	60f8      	str	r0, [r7, #12]
 801b6bc:	60b9      	str	r1, [r7, #8]
 801b6be:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b6c0:	68fb      	ldr	r3, [r7, #12]
 801b6c2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b6c6:	68fb      	ldr	r3, [r7, #12]
 801b6c8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801b6cc:	68fb      	ldr	r3, [r7, #12]
 801b6ce:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b6d0:	2201      	movs	r2, #1
 801b6d2:	9203      	str	r2, [sp, #12]
 801b6d4:	68ba      	ldr	r2, [r7, #8]
 801b6d6:	9202      	str	r2, [sp, #8]
 801b6d8:	4a06      	ldr	r2, [pc, #24]	@ (801b6f4 <etharp_request_dst+0x40>)
 801b6da:	9201      	str	r2, [sp, #4]
 801b6dc:	9300      	str	r3, [sp, #0]
 801b6de:	4603      	mov	r3, r0
 801b6e0:	687a      	ldr	r2, [r7, #4]
 801b6e2:	68f8      	ldr	r0, [r7, #12]
 801b6e4:	f7ff ff5a 	bl	801b59c <etharp_raw>
 801b6e8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801b6ea:	4618      	mov	r0, r3
 801b6ec:	3710      	adds	r7, #16
 801b6ee:	46bd      	mov	sp, r7
 801b6f0:	bd80      	pop	{r7, pc}
 801b6f2:	bf00      	nop
 801b6f4:	080222f8 	.word	0x080222f8

0801b6f8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801b6f8:	b580      	push	{r7, lr}
 801b6fa:	b082      	sub	sp, #8
 801b6fc:	af00      	add	r7, sp, #0
 801b6fe:	6078      	str	r0, [r7, #4]
 801b700:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801b702:	4a05      	ldr	r2, [pc, #20]	@ (801b718 <etharp_request+0x20>)
 801b704:	6839      	ldr	r1, [r7, #0]
 801b706:	6878      	ldr	r0, [r7, #4]
 801b708:	f7ff ffd4 	bl	801b6b4 <etharp_request_dst>
 801b70c:	4603      	mov	r3, r0
}
 801b70e:	4618      	mov	r0, r3
 801b710:	3708      	adds	r7, #8
 801b712:	46bd      	mov	sp, r7
 801b714:	bd80      	pop	{r7, pc}
 801b716:	bf00      	nop
 801b718:	080222f0 	.word	0x080222f0

0801b71c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801b71c:	b580      	push	{r7, lr}
 801b71e:	b08e      	sub	sp, #56	@ 0x38
 801b720:	af04      	add	r7, sp, #16
 801b722:	6078      	str	r0, [r7, #4]
 801b724:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801b726:	4b79      	ldr	r3, [pc, #484]	@ (801b90c <icmp_input+0x1f0>)
 801b728:	689b      	ldr	r3, [r3, #8]
 801b72a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801b72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b72e:	781b      	ldrb	r3, [r3, #0]
 801b730:	f003 030f 	and.w	r3, r3, #15
 801b734:	b2db      	uxtb	r3, r3
 801b736:	009b      	lsls	r3, r3, #2
 801b738:	b2db      	uxtb	r3, r3
 801b73a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801b73c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b73e:	2b13      	cmp	r3, #19
 801b740:	f240 80cd 	bls.w	801b8de <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	895b      	ldrh	r3, [r3, #10]
 801b748:	2b03      	cmp	r3, #3
 801b74a:	f240 80ca 	bls.w	801b8e2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	685b      	ldr	r3, [r3, #4]
 801b752:	781b      	ldrb	r3, [r3, #0]
 801b754:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801b758:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801b75c:	2b00      	cmp	r3, #0
 801b75e:	f000 80b7 	beq.w	801b8d0 <icmp_input+0x1b4>
 801b762:	2b08      	cmp	r3, #8
 801b764:	f040 80b7 	bne.w	801b8d6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801b768:	4b69      	ldr	r3, [pc, #420]	@ (801b910 <icmp_input+0x1f4>)
 801b76a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b76c:	4b67      	ldr	r3, [pc, #412]	@ (801b90c <icmp_input+0x1f0>)
 801b76e:	695b      	ldr	r3, [r3, #20]
 801b770:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b774:	2be0      	cmp	r3, #224	@ 0xe0
 801b776:	f000 80bb 	beq.w	801b8f0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801b77a:	4b64      	ldr	r3, [pc, #400]	@ (801b90c <icmp_input+0x1f0>)
 801b77c:	695b      	ldr	r3, [r3, #20]
 801b77e:	4a63      	ldr	r2, [pc, #396]	@ (801b90c <icmp_input+0x1f0>)
 801b780:	6812      	ldr	r2, [r2, #0]
 801b782:	4611      	mov	r1, r2
 801b784:	4618      	mov	r0, r3
 801b786:	f000 fbed 	bl	801bf64 <ip4_addr_isbroadcast_u32>
 801b78a:	4603      	mov	r3, r0
 801b78c:	2b00      	cmp	r3, #0
 801b78e:	f040 80b1 	bne.w	801b8f4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	891b      	ldrh	r3, [r3, #8]
 801b796:	2b07      	cmp	r3, #7
 801b798:	f240 80a5 	bls.w	801b8e6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b79c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b79e:	330e      	adds	r3, #14
 801b7a0:	4619      	mov	r1, r3
 801b7a2:	6878      	ldr	r0, [r7, #4]
 801b7a4:	f7f8 fdf4 	bl	8014390 <pbuf_add_header>
 801b7a8:	4603      	mov	r3, r0
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	d04b      	beq.n	801b846 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	891a      	ldrh	r2, [r3, #8]
 801b7b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b7b4:	4413      	add	r3, r2
 801b7b6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801b7b8:	687b      	ldr	r3, [r7, #4]
 801b7ba:	891b      	ldrh	r3, [r3, #8]
 801b7bc:	8b7a      	ldrh	r2, [r7, #26]
 801b7be:	429a      	cmp	r2, r3
 801b7c0:	f0c0 809a 	bcc.w	801b8f8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801b7c4:	8b7b      	ldrh	r3, [r7, #26]
 801b7c6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b7ca:	4619      	mov	r1, r3
 801b7cc:	200e      	movs	r0, #14
 801b7ce:	f7f8 fb91 	bl	8013ef4 <pbuf_alloc>
 801b7d2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801b7d4:	697b      	ldr	r3, [r7, #20]
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	f000 8090 	beq.w	801b8fc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801b7dc:	697b      	ldr	r3, [r7, #20]
 801b7de:	895b      	ldrh	r3, [r3, #10]
 801b7e0:	461a      	mov	r2, r3
 801b7e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b7e4:	3308      	adds	r3, #8
 801b7e6:	429a      	cmp	r2, r3
 801b7e8:	d203      	bcs.n	801b7f2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801b7ea:	6978      	ldr	r0, [r7, #20]
 801b7ec:	f7f8 fe66 	bl	80144bc <pbuf_free>
          goto icmperr;
 801b7f0:	e085      	b.n	801b8fe <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801b7f2:	697b      	ldr	r3, [r7, #20]
 801b7f4:	685b      	ldr	r3, [r3, #4]
 801b7f6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801b7f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b7fa:	4618      	mov	r0, r3
 801b7fc:	f002 fe73 	bl	801e4e6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801b800:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b802:	4619      	mov	r1, r3
 801b804:	6978      	ldr	r0, [r7, #20]
 801b806:	f7f8 fdd3 	bl	80143b0 <pbuf_remove_header>
 801b80a:	4603      	mov	r3, r0
 801b80c:	2b00      	cmp	r3, #0
 801b80e:	d009      	beq.n	801b824 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801b810:	4b40      	ldr	r3, [pc, #256]	@ (801b914 <icmp_input+0x1f8>)
 801b812:	22b6      	movs	r2, #182	@ 0xb6
 801b814:	4940      	ldr	r1, [pc, #256]	@ (801b918 <icmp_input+0x1fc>)
 801b816:	4841      	ldr	r0, [pc, #260]	@ (801b91c <icmp_input+0x200>)
 801b818:	f002 fc3a 	bl	801e090 <iprintf>
          pbuf_free(r);
 801b81c:	6978      	ldr	r0, [r7, #20]
 801b81e:	f7f8 fe4d 	bl	80144bc <pbuf_free>
          goto icmperr;
 801b822:	e06c      	b.n	801b8fe <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801b824:	6879      	ldr	r1, [r7, #4]
 801b826:	6978      	ldr	r0, [r7, #20]
 801b828:	f7f8 ff7c 	bl	8014724 <pbuf_copy>
 801b82c:	4603      	mov	r3, r0
 801b82e:	2b00      	cmp	r3, #0
 801b830:	d003      	beq.n	801b83a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801b832:	6978      	ldr	r0, [r7, #20]
 801b834:	f7f8 fe42 	bl	80144bc <pbuf_free>
          goto icmperr;
 801b838:	e061      	b.n	801b8fe <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801b83a:	6878      	ldr	r0, [r7, #4]
 801b83c:	f7f8 fe3e 	bl	80144bc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801b840:	697b      	ldr	r3, [r7, #20]
 801b842:	607b      	str	r3, [r7, #4]
 801b844:	e00f      	b.n	801b866 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b846:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b848:	330e      	adds	r3, #14
 801b84a:	4619      	mov	r1, r3
 801b84c:	6878      	ldr	r0, [r7, #4]
 801b84e:	f7f8 fdaf 	bl	80143b0 <pbuf_remove_header>
 801b852:	4603      	mov	r3, r0
 801b854:	2b00      	cmp	r3, #0
 801b856:	d006      	beq.n	801b866 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801b858:	4b2e      	ldr	r3, [pc, #184]	@ (801b914 <icmp_input+0x1f8>)
 801b85a:	22c7      	movs	r2, #199	@ 0xc7
 801b85c:	4930      	ldr	r1, [pc, #192]	@ (801b920 <icmp_input+0x204>)
 801b85e:	482f      	ldr	r0, [pc, #188]	@ (801b91c <icmp_input+0x200>)
 801b860:	f002 fc16 	bl	801e090 <iprintf>
          goto icmperr;
 801b864:	e04b      	b.n	801b8fe <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801b866:	687b      	ldr	r3, [r7, #4]
 801b868:	685b      	ldr	r3, [r3, #4]
 801b86a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801b86c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b86e:	4619      	mov	r1, r3
 801b870:	6878      	ldr	r0, [r7, #4]
 801b872:	f7f8 fd8d 	bl	8014390 <pbuf_add_header>
 801b876:	4603      	mov	r3, r0
 801b878:	2b00      	cmp	r3, #0
 801b87a:	d12b      	bne.n	801b8d4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	685b      	ldr	r3, [r3, #4]
 801b880:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801b882:	69fb      	ldr	r3, [r7, #28]
 801b884:	681a      	ldr	r2, [r3, #0]
 801b886:	68fb      	ldr	r3, [r7, #12]
 801b888:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801b88a:	4b20      	ldr	r3, [pc, #128]	@ (801b90c <icmp_input+0x1f0>)
 801b88c:	691a      	ldr	r2, [r3, #16]
 801b88e:	68fb      	ldr	r3, [r7, #12]
 801b890:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801b892:	693b      	ldr	r3, [r7, #16]
 801b894:	2200      	movs	r2, #0
 801b896:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801b898:	693b      	ldr	r3, [r7, #16]
 801b89a:	2200      	movs	r2, #0
 801b89c:	709a      	strb	r2, [r3, #2]
 801b89e:	2200      	movs	r2, #0
 801b8a0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801b8a2:	68fb      	ldr	r3, [r7, #12]
 801b8a4:	22ff      	movs	r2, #255	@ 0xff
 801b8a6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801b8a8:	68fb      	ldr	r3, [r7, #12]
 801b8aa:	2200      	movs	r2, #0
 801b8ac:	729a      	strb	r2, [r3, #10]
 801b8ae:	2200      	movs	r2, #0
 801b8b0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b8b2:	683b      	ldr	r3, [r7, #0]
 801b8b4:	9302      	str	r3, [sp, #8]
 801b8b6:	2301      	movs	r3, #1
 801b8b8:	9301      	str	r3, [sp, #4]
 801b8ba:	2300      	movs	r3, #0
 801b8bc:	9300      	str	r3, [sp, #0]
 801b8be:	23ff      	movs	r3, #255	@ 0xff
 801b8c0:	2200      	movs	r2, #0
 801b8c2:	69f9      	ldr	r1, [r7, #28]
 801b8c4:	6878      	ldr	r0, [r7, #4]
 801b8c6:	f000 fa75 	bl	801bdb4 <ip4_output_if>
 801b8ca:	4603      	mov	r3, r0
 801b8cc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801b8ce:	e001      	b.n	801b8d4 <icmp_input+0x1b8>
      break;
 801b8d0:	bf00      	nop
 801b8d2:	e000      	b.n	801b8d6 <icmp_input+0x1ba>
      break;
 801b8d4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801b8d6:	6878      	ldr	r0, [r7, #4]
 801b8d8:	f7f8 fdf0 	bl	80144bc <pbuf_free>
  return;
 801b8dc:	e013      	b.n	801b906 <icmp_input+0x1ea>
    goto lenerr;
 801b8de:	bf00      	nop
 801b8e0:	e002      	b.n	801b8e8 <icmp_input+0x1cc>
    goto lenerr;
 801b8e2:	bf00      	nop
 801b8e4:	e000      	b.n	801b8e8 <icmp_input+0x1cc>
        goto lenerr;
 801b8e6:	bf00      	nop
lenerr:
  pbuf_free(p);
 801b8e8:	6878      	ldr	r0, [r7, #4]
 801b8ea:	f7f8 fde7 	bl	80144bc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b8ee:	e00a      	b.n	801b906 <icmp_input+0x1ea>
        goto icmperr;
 801b8f0:	bf00      	nop
 801b8f2:	e004      	b.n	801b8fe <icmp_input+0x1e2>
        goto icmperr;
 801b8f4:	bf00      	nop
 801b8f6:	e002      	b.n	801b8fe <icmp_input+0x1e2>
          goto icmperr;
 801b8f8:	bf00      	nop
 801b8fa:	e000      	b.n	801b8fe <icmp_input+0x1e2>
          goto icmperr;
 801b8fc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801b8fe:	6878      	ldr	r0, [r7, #4]
 801b900:	f7f8 fddc 	bl	80144bc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b904:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801b906:	3728      	adds	r7, #40	@ 0x28
 801b908:	46bd      	mov	sp, r7
 801b90a:	bd80      	pop	{r7, pc}
 801b90c:	200246b0 	.word	0x200246b0
 801b910:	200246c4 	.word	0x200246c4
 801b914:	08021880 	.word	0x08021880
 801b918:	080218b8 	.word	0x080218b8
 801b91c:	080218f0 	.word	0x080218f0
 801b920:	08021918 	.word	0x08021918

0801b924 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801b924:	b580      	push	{r7, lr}
 801b926:	b082      	sub	sp, #8
 801b928:	af00      	add	r7, sp, #0
 801b92a:	6078      	str	r0, [r7, #4]
 801b92c:	460b      	mov	r3, r1
 801b92e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801b930:	78fb      	ldrb	r3, [r7, #3]
 801b932:	461a      	mov	r2, r3
 801b934:	2103      	movs	r1, #3
 801b936:	6878      	ldr	r0, [r7, #4]
 801b938:	f000 f814 	bl	801b964 <icmp_send_response>
}
 801b93c:	bf00      	nop
 801b93e:	3708      	adds	r7, #8
 801b940:	46bd      	mov	sp, r7
 801b942:	bd80      	pop	{r7, pc}

0801b944 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801b944:	b580      	push	{r7, lr}
 801b946:	b082      	sub	sp, #8
 801b948:	af00      	add	r7, sp, #0
 801b94a:	6078      	str	r0, [r7, #4]
 801b94c:	460b      	mov	r3, r1
 801b94e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801b950:	78fb      	ldrb	r3, [r7, #3]
 801b952:	461a      	mov	r2, r3
 801b954:	210b      	movs	r1, #11
 801b956:	6878      	ldr	r0, [r7, #4]
 801b958:	f000 f804 	bl	801b964 <icmp_send_response>
}
 801b95c:	bf00      	nop
 801b95e:	3708      	adds	r7, #8
 801b960:	46bd      	mov	sp, r7
 801b962:	bd80      	pop	{r7, pc}

0801b964 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801b964:	b580      	push	{r7, lr}
 801b966:	b08c      	sub	sp, #48	@ 0x30
 801b968:	af04      	add	r7, sp, #16
 801b96a:	6078      	str	r0, [r7, #4]
 801b96c:	460b      	mov	r3, r1
 801b96e:	70fb      	strb	r3, [r7, #3]
 801b970:	4613      	mov	r3, r2
 801b972:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801b974:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b978:	2124      	movs	r1, #36	@ 0x24
 801b97a:	2022      	movs	r0, #34	@ 0x22
 801b97c:	f7f8 faba 	bl	8013ef4 <pbuf_alloc>
 801b980:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801b982:	69fb      	ldr	r3, [r7, #28]
 801b984:	2b00      	cmp	r3, #0
 801b986:	d04c      	beq.n	801ba22 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801b988:	69fb      	ldr	r3, [r7, #28]
 801b98a:	895b      	ldrh	r3, [r3, #10]
 801b98c:	2b23      	cmp	r3, #35	@ 0x23
 801b98e:	d806      	bhi.n	801b99e <icmp_send_response+0x3a>
 801b990:	4b26      	ldr	r3, [pc, #152]	@ (801ba2c <icmp_send_response+0xc8>)
 801b992:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801b996:	4926      	ldr	r1, [pc, #152]	@ (801ba30 <icmp_send_response+0xcc>)
 801b998:	4826      	ldr	r0, [pc, #152]	@ (801ba34 <icmp_send_response+0xd0>)
 801b99a:	f002 fb79 	bl	801e090 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	685b      	ldr	r3, [r3, #4]
 801b9a2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801b9a4:	69fb      	ldr	r3, [r7, #28]
 801b9a6:	685b      	ldr	r3, [r3, #4]
 801b9a8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801b9aa:	697b      	ldr	r3, [r7, #20]
 801b9ac:	78fa      	ldrb	r2, [r7, #3]
 801b9ae:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801b9b0:	697b      	ldr	r3, [r7, #20]
 801b9b2:	78ba      	ldrb	r2, [r7, #2]
 801b9b4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801b9b6:	697b      	ldr	r3, [r7, #20]
 801b9b8:	2200      	movs	r2, #0
 801b9ba:	711a      	strb	r2, [r3, #4]
 801b9bc:	2200      	movs	r2, #0
 801b9be:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801b9c0:	697b      	ldr	r3, [r7, #20]
 801b9c2:	2200      	movs	r2, #0
 801b9c4:	719a      	strb	r2, [r3, #6]
 801b9c6:	2200      	movs	r2, #0
 801b9c8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801b9ca:	69fb      	ldr	r3, [r7, #28]
 801b9cc:	685b      	ldr	r3, [r3, #4]
 801b9ce:	f103 0008 	add.w	r0, r3, #8
 801b9d2:	687b      	ldr	r3, [r7, #4]
 801b9d4:	685b      	ldr	r3, [r3, #4]
 801b9d6:	221c      	movs	r2, #28
 801b9d8:	4619      	mov	r1, r3
 801b9da:	f002 fd84 	bl	801e4e6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801b9de:	69bb      	ldr	r3, [r7, #24]
 801b9e0:	68db      	ldr	r3, [r3, #12]
 801b9e2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801b9e4:	f107 030c 	add.w	r3, r7, #12
 801b9e8:	4618      	mov	r0, r3
 801b9ea:	f000 f825 	bl	801ba38 <ip4_route>
 801b9ee:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801b9f0:	693b      	ldr	r3, [r7, #16]
 801b9f2:	2b00      	cmp	r3, #0
 801b9f4:	d011      	beq.n	801ba1a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801b9f6:	697b      	ldr	r3, [r7, #20]
 801b9f8:	2200      	movs	r2, #0
 801b9fa:	709a      	strb	r2, [r3, #2]
 801b9fc:	2200      	movs	r2, #0
 801b9fe:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801ba00:	f107 020c 	add.w	r2, r7, #12
 801ba04:	693b      	ldr	r3, [r7, #16]
 801ba06:	9302      	str	r3, [sp, #8]
 801ba08:	2301      	movs	r3, #1
 801ba0a:	9301      	str	r3, [sp, #4]
 801ba0c:	2300      	movs	r3, #0
 801ba0e:	9300      	str	r3, [sp, #0]
 801ba10:	23ff      	movs	r3, #255	@ 0xff
 801ba12:	2100      	movs	r1, #0
 801ba14:	69f8      	ldr	r0, [r7, #28]
 801ba16:	f000 f9cd 	bl	801bdb4 <ip4_output_if>
  }
  pbuf_free(q);
 801ba1a:	69f8      	ldr	r0, [r7, #28]
 801ba1c:	f7f8 fd4e 	bl	80144bc <pbuf_free>
 801ba20:	e000      	b.n	801ba24 <icmp_send_response+0xc0>
    return;
 801ba22:	bf00      	nop
}
 801ba24:	3720      	adds	r7, #32
 801ba26:	46bd      	mov	sp, r7
 801ba28:	bd80      	pop	{r7, pc}
 801ba2a:	bf00      	nop
 801ba2c:	08021880 	.word	0x08021880
 801ba30:	0802194c 	.word	0x0802194c
 801ba34:	080218f0 	.word	0x080218f0

0801ba38 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801ba38:	b480      	push	{r7}
 801ba3a:	b085      	sub	sp, #20
 801ba3c:	af00      	add	r7, sp, #0
 801ba3e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801ba40:	4b33      	ldr	r3, [pc, #204]	@ (801bb10 <ip4_route+0xd8>)
 801ba42:	681b      	ldr	r3, [r3, #0]
 801ba44:	60fb      	str	r3, [r7, #12]
 801ba46:	e036      	b.n	801bab6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801ba48:	68fb      	ldr	r3, [r7, #12]
 801ba4a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ba4e:	f003 0301 	and.w	r3, r3, #1
 801ba52:	b2db      	uxtb	r3, r3
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d02b      	beq.n	801bab0 <ip4_route+0x78>
 801ba58:	68fb      	ldr	r3, [r7, #12]
 801ba5a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ba5e:	089b      	lsrs	r3, r3, #2
 801ba60:	f003 0301 	and.w	r3, r3, #1
 801ba64:	b2db      	uxtb	r3, r3
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	d022      	beq.n	801bab0 <ip4_route+0x78>
 801ba6a:	68fb      	ldr	r3, [r7, #12]
 801ba6c:	3304      	adds	r3, #4
 801ba6e:	681b      	ldr	r3, [r3, #0]
 801ba70:	2b00      	cmp	r3, #0
 801ba72:	d01d      	beq.n	801bab0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801ba74:	687b      	ldr	r3, [r7, #4]
 801ba76:	681a      	ldr	r2, [r3, #0]
 801ba78:	68fb      	ldr	r3, [r7, #12]
 801ba7a:	3304      	adds	r3, #4
 801ba7c:	681b      	ldr	r3, [r3, #0]
 801ba7e:	405a      	eors	r2, r3
 801ba80:	68fb      	ldr	r3, [r7, #12]
 801ba82:	3308      	adds	r3, #8
 801ba84:	681b      	ldr	r3, [r3, #0]
 801ba86:	4013      	ands	r3, r2
 801ba88:	2b00      	cmp	r3, #0
 801ba8a:	d101      	bne.n	801ba90 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801ba8c:	68fb      	ldr	r3, [r7, #12]
 801ba8e:	e038      	b.n	801bb02 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801ba90:	68fb      	ldr	r3, [r7, #12]
 801ba92:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801ba96:	f003 0302 	and.w	r3, r3, #2
 801ba9a:	2b00      	cmp	r3, #0
 801ba9c:	d108      	bne.n	801bab0 <ip4_route+0x78>
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	681a      	ldr	r2, [r3, #0]
 801baa2:	68fb      	ldr	r3, [r7, #12]
 801baa4:	330c      	adds	r3, #12
 801baa6:	681b      	ldr	r3, [r3, #0]
 801baa8:	429a      	cmp	r2, r3
 801baaa:	d101      	bne.n	801bab0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801baac:	68fb      	ldr	r3, [r7, #12]
 801baae:	e028      	b.n	801bb02 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801bab0:	68fb      	ldr	r3, [r7, #12]
 801bab2:	681b      	ldr	r3, [r3, #0]
 801bab4:	60fb      	str	r3, [r7, #12]
 801bab6:	68fb      	ldr	r3, [r7, #12]
 801bab8:	2b00      	cmp	r3, #0
 801baba:	d1c5      	bne.n	801ba48 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801babc:	4b15      	ldr	r3, [pc, #84]	@ (801bb14 <ip4_route+0xdc>)
 801babe:	681b      	ldr	r3, [r3, #0]
 801bac0:	2b00      	cmp	r3, #0
 801bac2:	d01a      	beq.n	801bafa <ip4_route+0xc2>
 801bac4:	4b13      	ldr	r3, [pc, #76]	@ (801bb14 <ip4_route+0xdc>)
 801bac6:	681b      	ldr	r3, [r3, #0]
 801bac8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bacc:	f003 0301 	and.w	r3, r3, #1
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	d012      	beq.n	801bafa <ip4_route+0xc2>
 801bad4:	4b0f      	ldr	r3, [pc, #60]	@ (801bb14 <ip4_route+0xdc>)
 801bad6:	681b      	ldr	r3, [r3, #0]
 801bad8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801badc:	f003 0304 	and.w	r3, r3, #4
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	d00a      	beq.n	801bafa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801bae4:	4b0b      	ldr	r3, [pc, #44]	@ (801bb14 <ip4_route+0xdc>)
 801bae6:	681b      	ldr	r3, [r3, #0]
 801bae8:	3304      	adds	r3, #4
 801baea:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801baec:	2b00      	cmp	r3, #0
 801baee:	d004      	beq.n	801bafa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801baf0:	687b      	ldr	r3, [r7, #4]
 801baf2:	681b      	ldr	r3, [r3, #0]
 801baf4:	b2db      	uxtb	r3, r3
 801baf6:	2b7f      	cmp	r3, #127	@ 0x7f
 801baf8:	d101      	bne.n	801bafe <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801bafa:	2300      	movs	r3, #0
 801bafc:	e001      	b.n	801bb02 <ip4_route+0xca>
  }

  return netif_default;
 801bafe:	4b05      	ldr	r3, [pc, #20]	@ (801bb14 <ip4_route+0xdc>)
 801bb00:	681b      	ldr	r3, [r3, #0]
}
 801bb02:	4618      	mov	r0, r3
 801bb04:	3714      	adds	r7, #20
 801bb06:	46bd      	mov	sp, r7
 801bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb0c:	4770      	bx	lr
 801bb0e:	bf00      	nop
 801bb10:	200277a4 	.word	0x200277a4
 801bb14:	200277a8 	.word	0x200277a8

0801bb18 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801bb18:	b580      	push	{r7, lr}
 801bb1a:	b082      	sub	sp, #8
 801bb1c:	af00      	add	r7, sp, #0
 801bb1e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801bb20:	687b      	ldr	r3, [r7, #4]
 801bb22:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bb26:	f003 0301 	and.w	r3, r3, #1
 801bb2a:	b2db      	uxtb	r3, r3
 801bb2c:	2b00      	cmp	r3, #0
 801bb2e:	d016      	beq.n	801bb5e <ip4_input_accept+0x46>
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	3304      	adds	r3, #4
 801bb34:	681b      	ldr	r3, [r3, #0]
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	d011      	beq.n	801bb5e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801bb3a:	4b0b      	ldr	r3, [pc, #44]	@ (801bb68 <ip4_input_accept+0x50>)
 801bb3c:	695a      	ldr	r2, [r3, #20]
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	3304      	adds	r3, #4
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	429a      	cmp	r2, r3
 801bb46:	d008      	beq.n	801bb5a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801bb48:	4b07      	ldr	r3, [pc, #28]	@ (801bb68 <ip4_input_accept+0x50>)
 801bb4a:	695b      	ldr	r3, [r3, #20]
 801bb4c:	6879      	ldr	r1, [r7, #4]
 801bb4e:	4618      	mov	r0, r3
 801bb50:	f000 fa08 	bl	801bf64 <ip4_addr_isbroadcast_u32>
 801bb54:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	d001      	beq.n	801bb5e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801bb5a:	2301      	movs	r3, #1
 801bb5c:	e000      	b.n	801bb60 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801bb5e:	2300      	movs	r3, #0
}
 801bb60:	4618      	mov	r0, r3
 801bb62:	3708      	adds	r7, #8
 801bb64:	46bd      	mov	sp, r7
 801bb66:	bd80      	pop	{r7, pc}
 801bb68:	200246b0 	.word	0x200246b0

0801bb6c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801bb6c:	b580      	push	{r7, lr}
 801bb6e:	b086      	sub	sp, #24
 801bb70:	af00      	add	r7, sp, #0
 801bb72:	6078      	str	r0, [r7, #4]
 801bb74:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801bb76:	687b      	ldr	r3, [r7, #4]
 801bb78:	685b      	ldr	r3, [r3, #4]
 801bb7a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801bb7c:	697b      	ldr	r3, [r7, #20]
 801bb7e:	781b      	ldrb	r3, [r3, #0]
 801bb80:	091b      	lsrs	r3, r3, #4
 801bb82:	b2db      	uxtb	r3, r3
 801bb84:	2b04      	cmp	r3, #4
 801bb86:	d004      	beq.n	801bb92 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801bb88:	6878      	ldr	r0, [r7, #4]
 801bb8a:	f7f8 fc97 	bl	80144bc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801bb8e:	2300      	movs	r3, #0
 801bb90:	e107      	b.n	801bda2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801bb92:	697b      	ldr	r3, [r7, #20]
 801bb94:	781b      	ldrb	r3, [r3, #0]
 801bb96:	f003 030f 	and.w	r3, r3, #15
 801bb9a:	b2db      	uxtb	r3, r3
 801bb9c:	009b      	lsls	r3, r3, #2
 801bb9e:	b2db      	uxtb	r3, r3
 801bba0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801bba2:	697b      	ldr	r3, [r7, #20]
 801bba4:	885b      	ldrh	r3, [r3, #2]
 801bba6:	b29b      	uxth	r3, r3
 801bba8:	4618      	mov	r0, r3
 801bbaa:	f7f7 f899 	bl	8012ce0 <lwip_htons>
 801bbae:	4603      	mov	r3, r0
 801bbb0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	891b      	ldrh	r3, [r3, #8]
 801bbb6:	89ba      	ldrh	r2, [r7, #12]
 801bbb8:	429a      	cmp	r2, r3
 801bbba:	d204      	bcs.n	801bbc6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801bbbc:	89bb      	ldrh	r3, [r7, #12]
 801bbbe:	4619      	mov	r1, r3
 801bbc0:	6878      	ldr	r0, [r7, #4]
 801bbc2:	f7f8 faf5 	bl	80141b0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	895b      	ldrh	r3, [r3, #10]
 801bbca:	89fa      	ldrh	r2, [r7, #14]
 801bbcc:	429a      	cmp	r2, r3
 801bbce:	d807      	bhi.n	801bbe0 <ip4_input+0x74>
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	891b      	ldrh	r3, [r3, #8]
 801bbd4:	89ba      	ldrh	r2, [r7, #12]
 801bbd6:	429a      	cmp	r2, r3
 801bbd8:	d802      	bhi.n	801bbe0 <ip4_input+0x74>
 801bbda:	89fb      	ldrh	r3, [r7, #14]
 801bbdc:	2b13      	cmp	r3, #19
 801bbde:	d804      	bhi.n	801bbea <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801bbe0:	6878      	ldr	r0, [r7, #4]
 801bbe2:	f7f8 fc6b 	bl	80144bc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801bbe6:	2300      	movs	r3, #0
 801bbe8:	e0db      	b.n	801bda2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801bbea:	697b      	ldr	r3, [r7, #20]
 801bbec:	691b      	ldr	r3, [r3, #16]
 801bbee:	4a6f      	ldr	r2, [pc, #444]	@ (801bdac <ip4_input+0x240>)
 801bbf0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801bbf2:	697b      	ldr	r3, [r7, #20]
 801bbf4:	68db      	ldr	r3, [r3, #12]
 801bbf6:	4a6d      	ldr	r2, [pc, #436]	@ (801bdac <ip4_input+0x240>)
 801bbf8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bbfa:	4b6c      	ldr	r3, [pc, #432]	@ (801bdac <ip4_input+0x240>)
 801bbfc:	695b      	ldr	r3, [r3, #20]
 801bbfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801bc02:	2be0      	cmp	r3, #224	@ 0xe0
 801bc04:	d112      	bne.n	801bc2c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801bc06:	683b      	ldr	r3, [r7, #0]
 801bc08:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bc0c:	f003 0301 	and.w	r3, r3, #1
 801bc10:	b2db      	uxtb	r3, r3
 801bc12:	2b00      	cmp	r3, #0
 801bc14:	d007      	beq.n	801bc26 <ip4_input+0xba>
 801bc16:	683b      	ldr	r3, [r7, #0]
 801bc18:	3304      	adds	r3, #4
 801bc1a:	681b      	ldr	r3, [r3, #0]
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	d002      	beq.n	801bc26 <ip4_input+0xba>
      netif = inp;
 801bc20:	683b      	ldr	r3, [r7, #0]
 801bc22:	613b      	str	r3, [r7, #16]
 801bc24:	e02a      	b.n	801bc7c <ip4_input+0x110>
    } else {
      netif = NULL;
 801bc26:	2300      	movs	r3, #0
 801bc28:	613b      	str	r3, [r7, #16]
 801bc2a:	e027      	b.n	801bc7c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801bc2c:	6838      	ldr	r0, [r7, #0]
 801bc2e:	f7ff ff73 	bl	801bb18 <ip4_input_accept>
 801bc32:	4603      	mov	r3, r0
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	d002      	beq.n	801bc3e <ip4_input+0xd2>
      netif = inp;
 801bc38:	683b      	ldr	r3, [r7, #0]
 801bc3a:	613b      	str	r3, [r7, #16]
 801bc3c:	e01e      	b.n	801bc7c <ip4_input+0x110>
    } else {
      netif = NULL;
 801bc3e:	2300      	movs	r3, #0
 801bc40:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801bc42:	4b5a      	ldr	r3, [pc, #360]	@ (801bdac <ip4_input+0x240>)
 801bc44:	695b      	ldr	r3, [r3, #20]
 801bc46:	b2db      	uxtb	r3, r3
 801bc48:	2b7f      	cmp	r3, #127	@ 0x7f
 801bc4a:	d017      	beq.n	801bc7c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801bc4c:	4b58      	ldr	r3, [pc, #352]	@ (801bdb0 <ip4_input+0x244>)
 801bc4e:	681b      	ldr	r3, [r3, #0]
 801bc50:	613b      	str	r3, [r7, #16]
 801bc52:	e00e      	b.n	801bc72 <ip4_input+0x106>
          if (netif == inp) {
 801bc54:	693a      	ldr	r2, [r7, #16]
 801bc56:	683b      	ldr	r3, [r7, #0]
 801bc58:	429a      	cmp	r2, r3
 801bc5a:	d006      	beq.n	801bc6a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801bc5c:	6938      	ldr	r0, [r7, #16]
 801bc5e:	f7ff ff5b 	bl	801bb18 <ip4_input_accept>
 801bc62:	4603      	mov	r3, r0
 801bc64:	2b00      	cmp	r3, #0
 801bc66:	d108      	bne.n	801bc7a <ip4_input+0x10e>
 801bc68:	e000      	b.n	801bc6c <ip4_input+0x100>
            continue;
 801bc6a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801bc6c:	693b      	ldr	r3, [r7, #16]
 801bc6e:	681b      	ldr	r3, [r3, #0]
 801bc70:	613b      	str	r3, [r7, #16]
 801bc72:	693b      	ldr	r3, [r7, #16]
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	d1ed      	bne.n	801bc54 <ip4_input+0xe8>
 801bc78:	e000      	b.n	801bc7c <ip4_input+0x110>
            break;
 801bc7a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801bc7c:	4b4b      	ldr	r3, [pc, #300]	@ (801bdac <ip4_input+0x240>)
 801bc7e:	691b      	ldr	r3, [r3, #16]
 801bc80:	6839      	ldr	r1, [r7, #0]
 801bc82:	4618      	mov	r0, r3
 801bc84:	f000 f96e 	bl	801bf64 <ip4_addr_isbroadcast_u32>
 801bc88:	4603      	mov	r3, r0
 801bc8a:	2b00      	cmp	r3, #0
 801bc8c:	d105      	bne.n	801bc9a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801bc8e:	4b47      	ldr	r3, [pc, #284]	@ (801bdac <ip4_input+0x240>)
 801bc90:	691b      	ldr	r3, [r3, #16]
 801bc92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801bc96:	2be0      	cmp	r3, #224	@ 0xe0
 801bc98:	d104      	bne.n	801bca4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801bc9a:	6878      	ldr	r0, [r7, #4]
 801bc9c:	f7f8 fc0e 	bl	80144bc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801bca0:	2300      	movs	r3, #0
 801bca2:	e07e      	b.n	801bda2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801bca4:	693b      	ldr	r3, [r7, #16]
 801bca6:	2b00      	cmp	r3, #0
 801bca8:	d104      	bne.n	801bcb4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801bcaa:	6878      	ldr	r0, [r7, #4]
 801bcac:	f7f8 fc06 	bl	80144bc <pbuf_free>
    return ERR_OK;
 801bcb0:	2300      	movs	r3, #0
 801bcb2:	e076      	b.n	801bda2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801bcb4:	697b      	ldr	r3, [r7, #20]
 801bcb6:	88db      	ldrh	r3, [r3, #6]
 801bcb8:	b29b      	uxth	r3, r3
 801bcba:	461a      	mov	r2, r3
 801bcbc:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801bcc0:	4013      	ands	r3, r2
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d00b      	beq.n	801bcde <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801bcc6:	6878      	ldr	r0, [r7, #4]
 801bcc8:	f000 fc92 	bl	801c5f0 <ip4_reass>
 801bccc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	d101      	bne.n	801bcd8 <ip4_input+0x16c>
      return ERR_OK;
 801bcd4:	2300      	movs	r3, #0
 801bcd6:	e064      	b.n	801bda2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801bcd8:	687b      	ldr	r3, [r7, #4]
 801bcda:	685b      	ldr	r3, [r3, #4]
 801bcdc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801bcde:	4a33      	ldr	r2, [pc, #204]	@ (801bdac <ip4_input+0x240>)
 801bce0:	693b      	ldr	r3, [r7, #16]
 801bce2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801bce4:	4a31      	ldr	r2, [pc, #196]	@ (801bdac <ip4_input+0x240>)
 801bce6:	683b      	ldr	r3, [r7, #0]
 801bce8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801bcea:	4a30      	ldr	r2, [pc, #192]	@ (801bdac <ip4_input+0x240>)
 801bcec:	697b      	ldr	r3, [r7, #20]
 801bcee:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801bcf0:	697b      	ldr	r3, [r7, #20]
 801bcf2:	781b      	ldrb	r3, [r3, #0]
 801bcf4:	f003 030f 	and.w	r3, r3, #15
 801bcf8:	b2db      	uxtb	r3, r3
 801bcfa:	009b      	lsls	r3, r3, #2
 801bcfc:	b2db      	uxtb	r3, r3
 801bcfe:	461a      	mov	r2, r3
 801bd00:	4b2a      	ldr	r3, [pc, #168]	@ (801bdac <ip4_input+0x240>)
 801bd02:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801bd04:	89fb      	ldrh	r3, [r7, #14]
 801bd06:	4619      	mov	r1, r3
 801bd08:	6878      	ldr	r0, [r7, #4]
 801bd0a:	f7f8 fb51 	bl	80143b0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801bd0e:	697b      	ldr	r3, [r7, #20]
 801bd10:	7a5b      	ldrb	r3, [r3, #9]
 801bd12:	2b11      	cmp	r3, #17
 801bd14:	d006      	beq.n	801bd24 <ip4_input+0x1b8>
 801bd16:	2b11      	cmp	r3, #17
 801bd18:	dc13      	bgt.n	801bd42 <ip4_input+0x1d6>
 801bd1a:	2b01      	cmp	r3, #1
 801bd1c:	d00c      	beq.n	801bd38 <ip4_input+0x1cc>
 801bd1e:	2b06      	cmp	r3, #6
 801bd20:	d005      	beq.n	801bd2e <ip4_input+0x1c2>
 801bd22:	e00e      	b.n	801bd42 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801bd24:	6839      	ldr	r1, [r7, #0]
 801bd26:	6878      	ldr	r0, [r7, #4]
 801bd28:	f7fe f9f2 	bl	801a110 <udp_input>
        break;
 801bd2c:	e026      	b.n	801bd7c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801bd2e:	6839      	ldr	r1, [r7, #0]
 801bd30:	6878      	ldr	r0, [r7, #4]
 801bd32:	f7fa fa09 	bl	8016148 <tcp_input>
        break;
 801bd36:	e021      	b.n	801bd7c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801bd38:	6839      	ldr	r1, [r7, #0]
 801bd3a:	6878      	ldr	r0, [r7, #4]
 801bd3c:	f7ff fcee 	bl	801b71c <icmp_input>
        break;
 801bd40:	e01c      	b.n	801bd7c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801bd42:	4b1a      	ldr	r3, [pc, #104]	@ (801bdac <ip4_input+0x240>)
 801bd44:	695b      	ldr	r3, [r3, #20]
 801bd46:	6939      	ldr	r1, [r7, #16]
 801bd48:	4618      	mov	r0, r3
 801bd4a:	f000 f90b 	bl	801bf64 <ip4_addr_isbroadcast_u32>
 801bd4e:	4603      	mov	r3, r0
 801bd50:	2b00      	cmp	r3, #0
 801bd52:	d10f      	bne.n	801bd74 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bd54:	4b15      	ldr	r3, [pc, #84]	@ (801bdac <ip4_input+0x240>)
 801bd56:	695b      	ldr	r3, [r3, #20]
 801bd58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801bd5c:	2be0      	cmp	r3, #224	@ 0xe0
 801bd5e:	d009      	beq.n	801bd74 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801bd60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801bd64:	4619      	mov	r1, r3
 801bd66:	6878      	ldr	r0, [r7, #4]
 801bd68:	f7f8 fb95 	bl	8014496 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801bd6c:	2102      	movs	r1, #2
 801bd6e:	6878      	ldr	r0, [r7, #4]
 801bd70:	f7ff fdd8 	bl	801b924 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801bd74:	6878      	ldr	r0, [r7, #4]
 801bd76:	f7f8 fba1 	bl	80144bc <pbuf_free>
        break;
 801bd7a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801bd7c:	4b0b      	ldr	r3, [pc, #44]	@ (801bdac <ip4_input+0x240>)
 801bd7e:	2200      	movs	r2, #0
 801bd80:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801bd82:	4b0a      	ldr	r3, [pc, #40]	@ (801bdac <ip4_input+0x240>)
 801bd84:	2200      	movs	r2, #0
 801bd86:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801bd88:	4b08      	ldr	r3, [pc, #32]	@ (801bdac <ip4_input+0x240>)
 801bd8a:	2200      	movs	r2, #0
 801bd8c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801bd8e:	4b07      	ldr	r3, [pc, #28]	@ (801bdac <ip4_input+0x240>)
 801bd90:	2200      	movs	r2, #0
 801bd92:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801bd94:	4b05      	ldr	r3, [pc, #20]	@ (801bdac <ip4_input+0x240>)
 801bd96:	2200      	movs	r2, #0
 801bd98:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801bd9a:	4b04      	ldr	r3, [pc, #16]	@ (801bdac <ip4_input+0x240>)
 801bd9c:	2200      	movs	r2, #0
 801bd9e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801bda0:	2300      	movs	r3, #0
}
 801bda2:	4618      	mov	r0, r3
 801bda4:	3718      	adds	r7, #24
 801bda6:	46bd      	mov	sp, r7
 801bda8:	bd80      	pop	{r7, pc}
 801bdaa:	bf00      	nop
 801bdac:	200246b0 	.word	0x200246b0
 801bdb0:	200277a4 	.word	0x200277a4

0801bdb4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801bdb4:	b580      	push	{r7, lr}
 801bdb6:	b08a      	sub	sp, #40	@ 0x28
 801bdb8:	af04      	add	r7, sp, #16
 801bdba:	60f8      	str	r0, [r7, #12]
 801bdbc:	60b9      	str	r1, [r7, #8]
 801bdbe:	607a      	str	r2, [r7, #4]
 801bdc0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801bdc2:	68bb      	ldr	r3, [r7, #8]
 801bdc4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	2b00      	cmp	r3, #0
 801bdca:	d009      	beq.n	801bde0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801bdcc:	68bb      	ldr	r3, [r7, #8]
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	d003      	beq.n	801bdda <ip4_output_if+0x26>
 801bdd2:	68bb      	ldr	r3, [r7, #8]
 801bdd4:	681b      	ldr	r3, [r3, #0]
 801bdd6:	2b00      	cmp	r3, #0
 801bdd8:	d102      	bne.n	801bde0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801bdda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bddc:	3304      	adds	r3, #4
 801bdde:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801bde0:	78fa      	ldrb	r2, [r7, #3]
 801bde2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bde4:	9302      	str	r3, [sp, #8]
 801bde6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801bdea:	9301      	str	r3, [sp, #4]
 801bdec:	f897 3020 	ldrb.w	r3, [r7, #32]
 801bdf0:	9300      	str	r3, [sp, #0]
 801bdf2:	4613      	mov	r3, r2
 801bdf4:	687a      	ldr	r2, [r7, #4]
 801bdf6:	6979      	ldr	r1, [r7, #20]
 801bdf8:	68f8      	ldr	r0, [r7, #12]
 801bdfa:	f000 f805 	bl	801be08 <ip4_output_if_src>
 801bdfe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801be00:	4618      	mov	r0, r3
 801be02:	3718      	adds	r7, #24
 801be04:	46bd      	mov	sp, r7
 801be06:	bd80      	pop	{r7, pc}

0801be08 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801be08:	b580      	push	{r7, lr}
 801be0a:	b088      	sub	sp, #32
 801be0c:	af00      	add	r7, sp, #0
 801be0e:	60f8      	str	r0, [r7, #12]
 801be10:	60b9      	str	r1, [r7, #8]
 801be12:	607a      	str	r2, [r7, #4]
 801be14:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801be16:	68fb      	ldr	r3, [r7, #12]
 801be18:	7b9b      	ldrb	r3, [r3, #14]
 801be1a:	2b01      	cmp	r3, #1
 801be1c:	d006      	beq.n	801be2c <ip4_output_if_src+0x24>
 801be1e:	4b4b      	ldr	r3, [pc, #300]	@ (801bf4c <ip4_output_if_src+0x144>)
 801be20:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801be24:	494a      	ldr	r1, [pc, #296]	@ (801bf50 <ip4_output_if_src+0x148>)
 801be26:	484b      	ldr	r0, [pc, #300]	@ (801bf54 <ip4_output_if_src+0x14c>)
 801be28:	f002 f932 	bl	801e090 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	2b00      	cmp	r3, #0
 801be30:	d060      	beq.n	801bef4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801be32:	2314      	movs	r3, #20
 801be34:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801be36:	2114      	movs	r1, #20
 801be38:	68f8      	ldr	r0, [r7, #12]
 801be3a:	f7f8 faa9 	bl	8014390 <pbuf_add_header>
 801be3e:	4603      	mov	r3, r0
 801be40:	2b00      	cmp	r3, #0
 801be42:	d002      	beq.n	801be4a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801be44:	f06f 0301 	mvn.w	r3, #1
 801be48:	e07c      	b.n	801bf44 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801be4a:	68fb      	ldr	r3, [r7, #12]
 801be4c:	685b      	ldr	r3, [r3, #4]
 801be4e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801be50:	68fb      	ldr	r3, [r7, #12]
 801be52:	895b      	ldrh	r3, [r3, #10]
 801be54:	2b13      	cmp	r3, #19
 801be56:	d806      	bhi.n	801be66 <ip4_output_if_src+0x5e>
 801be58:	4b3c      	ldr	r3, [pc, #240]	@ (801bf4c <ip4_output_if_src+0x144>)
 801be5a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801be5e:	493e      	ldr	r1, [pc, #248]	@ (801bf58 <ip4_output_if_src+0x150>)
 801be60:	483c      	ldr	r0, [pc, #240]	@ (801bf54 <ip4_output_if_src+0x14c>)
 801be62:	f002 f915 	bl	801e090 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801be66:	69fb      	ldr	r3, [r7, #28]
 801be68:	78fa      	ldrb	r2, [r7, #3]
 801be6a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801be6c:	69fb      	ldr	r3, [r7, #28]
 801be6e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801be72:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	681a      	ldr	r2, [r3, #0]
 801be78:	69fb      	ldr	r3, [r7, #28]
 801be7a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801be7c:	8b7b      	ldrh	r3, [r7, #26]
 801be7e:	089b      	lsrs	r3, r3, #2
 801be80:	b29b      	uxth	r3, r3
 801be82:	b2db      	uxtb	r3, r3
 801be84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801be88:	b2da      	uxtb	r2, r3
 801be8a:	69fb      	ldr	r3, [r7, #28]
 801be8c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801be8e:	69fb      	ldr	r3, [r7, #28]
 801be90:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801be94:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801be96:	68fb      	ldr	r3, [r7, #12]
 801be98:	891b      	ldrh	r3, [r3, #8]
 801be9a:	4618      	mov	r0, r3
 801be9c:	f7f6 ff20 	bl	8012ce0 <lwip_htons>
 801bea0:	4603      	mov	r3, r0
 801bea2:	461a      	mov	r2, r3
 801bea4:	69fb      	ldr	r3, [r7, #28]
 801bea6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801bea8:	69fb      	ldr	r3, [r7, #28]
 801beaa:	2200      	movs	r2, #0
 801beac:	719a      	strb	r2, [r3, #6]
 801beae:	2200      	movs	r2, #0
 801beb0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801beb2:	4b2a      	ldr	r3, [pc, #168]	@ (801bf5c <ip4_output_if_src+0x154>)
 801beb4:	881b      	ldrh	r3, [r3, #0]
 801beb6:	4618      	mov	r0, r3
 801beb8:	f7f6 ff12 	bl	8012ce0 <lwip_htons>
 801bebc:	4603      	mov	r3, r0
 801bebe:	461a      	mov	r2, r3
 801bec0:	69fb      	ldr	r3, [r7, #28]
 801bec2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801bec4:	4b25      	ldr	r3, [pc, #148]	@ (801bf5c <ip4_output_if_src+0x154>)
 801bec6:	881b      	ldrh	r3, [r3, #0]
 801bec8:	3301      	adds	r3, #1
 801beca:	b29a      	uxth	r2, r3
 801becc:	4b23      	ldr	r3, [pc, #140]	@ (801bf5c <ip4_output_if_src+0x154>)
 801bece:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801bed0:	68bb      	ldr	r3, [r7, #8]
 801bed2:	2b00      	cmp	r3, #0
 801bed4:	d104      	bne.n	801bee0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801bed6:	4b22      	ldr	r3, [pc, #136]	@ (801bf60 <ip4_output_if_src+0x158>)
 801bed8:	681a      	ldr	r2, [r3, #0]
 801beda:	69fb      	ldr	r3, [r7, #28]
 801bedc:	60da      	str	r2, [r3, #12]
 801bede:	e003      	b.n	801bee8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801bee0:	68bb      	ldr	r3, [r7, #8]
 801bee2:	681a      	ldr	r2, [r3, #0]
 801bee4:	69fb      	ldr	r3, [r7, #28]
 801bee6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801bee8:	69fb      	ldr	r3, [r7, #28]
 801beea:	2200      	movs	r2, #0
 801beec:	729a      	strb	r2, [r3, #10]
 801beee:	2200      	movs	r2, #0
 801bef0:	72da      	strb	r2, [r3, #11]
 801bef2:	e00f      	b.n	801bf14 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801bef4:	68fb      	ldr	r3, [r7, #12]
 801bef6:	895b      	ldrh	r3, [r3, #10]
 801bef8:	2b13      	cmp	r3, #19
 801befa:	d802      	bhi.n	801bf02 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801befc:	f06f 0301 	mvn.w	r3, #1
 801bf00:	e020      	b.n	801bf44 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801bf02:	68fb      	ldr	r3, [r7, #12]
 801bf04:	685b      	ldr	r3, [r3, #4]
 801bf06:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801bf08:	69fb      	ldr	r3, [r7, #28]
 801bf0a:	691b      	ldr	r3, [r3, #16]
 801bf0c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801bf0e:	f107 0314 	add.w	r3, r7, #20
 801bf12:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801bf14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf16:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801bf18:	2b00      	cmp	r3, #0
 801bf1a:	d00c      	beq.n	801bf36 <ip4_output_if_src+0x12e>
 801bf1c:	68fb      	ldr	r3, [r7, #12]
 801bf1e:	891a      	ldrh	r2, [r3, #8]
 801bf20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf22:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801bf24:	429a      	cmp	r2, r3
 801bf26:	d906      	bls.n	801bf36 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801bf28:	687a      	ldr	r2, [r7, #4]
 801bf2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801bf2c:	68f8      	ldr	r0, [r7, #12]
 801bf2e:	f000 fd53 	bl	801c9d8 <ip4_frag>
 801bf32:	4603      	mov	r3, r0
 801bf34:	e006      	b.n	801bf44 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801bf36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf38:	695b      	ldr	r3, [r3, #20]
 801bf3a:	687a      	ldr	r2, [r7, #4]
 801bf3c:	68f9      	ldr	r1, [r7, #12]
 801bf3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801bf40:	4798      	blx	r3
 801bf42:	4603      	mov	r3, r0
}
 801bf44:	4618      	mov	r0, r3
 801bf46:	3720      	adds	r7, #32
 801bf48:	46bd      	mov	sp, r7
 801bf4a:	bd80      	pop	{r7, pc}
 801bf4c:	08021978 	.word	0x08021978
 801bf50:	080219ac 	.word	0x080219ac
 801bf54:	080219b8 	.word	0x080219b8
 801bf58:	080219e0 	.word	0x080219e0
 801bf5c:	20027902 	.word	0x20027902
 801bf60:	080222ec 	.word	0x080222ec

0801bf64 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801bf64:	b480      	push	{r7}
 801bf66:	b085      	sub	sp, #20
 801bf68:	af00      	add	r7, sp, #0
 801bf6a:	6078      	str	r0, [r7, #4]
 801bf6c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801bf6e:	687b      	ldr	r3, [r7, #4]
 801bf70:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801bf72:	687b      	ldr	r3, [r7, #4]
 801bf74:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bf78:	d002      	beq.n	801bf80 <ip4_addr_isbroadcast_u32+0x1c>
 801bf7a:	687b      	ldr	r3, [r7, #4]
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	d101      	bne.n	801bf84 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801bf80:	2301      	movs	r3, #1
 801bf82:	e02a      	b.n	801bfda <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801bf84:	683b      	ldr	r3, [r7, #0]
 801bf86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801bf8a:	f003 0302 	and.w	r3, r3, #2
 801bf8e:	2b00      	cmp	r3, #0
 801bf90:	d101      	bne.n	801bf96 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801bf92:	2300      	movs	r3, #0
 801bf94:	e021      	b.n	801bfda <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801bf96:	683b      	ldr	r3, [r7, #0]
 801bf98:	3304      	adds	r3, #4
 801bf9a:	681b      	ldr	r3, [r3, #0]
 801bf9c:	687a      	ldr	r2, [r7, #4]
 801bf9e:	429a      	cmp	r2, r3
 801bfa0:	d101      	bne.n	801bfa6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801bfa2:	2300      	movs	r3, #0
 801bfa4:	e019      	b.n	801bfda <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801bfa6:	68fa      	ldr	r2, [r7, #12]
 801bfa8:	683b      	ldr	r3, [r7, #0]
 801bfaa:	3304      	adds	r3, #4
 801bfac:	681b      	ldr	r3, [r3, #0]
 801bfae:	405a      	eors	r2, r3
 801bfb0:	683b      	ldr	r3, [r7, #0]
 801bfb2:	3308      	adds	r3, #8
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	4013      	ands	r3, r2
 801bfb8:	2b00      	cmp	r3, #0
 801bfba:	d10d      	bne.n	801bfd8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801bfbc:	683b      	ldr	r3, [r7, #0]
 801bfbe:	3308      	adds	r3, #8
 801bfc0:	681b      	ldr	r3, [r3, #0]
 801bfc2:	43da      	mvns	r2, r3
 801bfc4:	687b      	ldr	r3, [r7, #4]
 801bfc6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801bfc8:	683b      	ldr	r3, [r7, #0]
 801bfca:	3308      	adds	r3, #8
 801bfcc:	681b      	ldr	r3, [r3, #0]
 801bfce:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801bfd0:	429a      	cmp	r2, r3
 801bfd2:	d101      	bne.n	801bfd8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801bfd4:	2301      	movs	r3, #1
 801bfd6:	e000      	b.n	801bfda <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801bfd8:	2300      	movs	r3, #0
  }
}
 801bfda:	4618      	mov	r0, r3
 801bfdc:	3714      	adds	r7, #20
 801bfde:	46bd      	mov	sp, r7
 801bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfe4:	4770      	bx	lr
	...

0801bfe8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801bfe8:	b580      	push	{r7, lr}
 801bfea:	b084      	sub	sp, #16
 801bfec:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801bfee:	2300      	movs	r3, #0
 801bff0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801bff2:	4b12      	ldr	r3, [pc, #72]	@ (801c03c <ip_reass_tmr+0x54>)
 801bff4:	681b      	ldr	r3, [r3, #0]
 801bff6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801bff8:	e018      	b.n	801c02c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801bffa:	68fb      	ldr	r3, [r7, #12]
 801bffc:	7fdb      	ldrb	r3, [r3, #31]
 801bffe:	2b00      	cmp	r3, #0
 801c000:	d00b      	beq.n	801c01a <ip_reass_tmr+0x32>
      r->timer--;
 801c002:	68fb      	ldr	r3, [r7, #12]
 801c004:	7fdb      	ldrb	r3, [r3, #31]
 801c006:	3b01      	subs	r3, #1
 801c008:	b2da      	uxtb	r2, r3
 801c00a:	68fb      	ldr	r3, [r7, #12]
 801c00c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801c00e:	68fb      	ldr	r3, [r7, #12]
 801c010:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801c012:	68fb      	ldr	r3, [r7, #12]
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	60fb      	str	r3, [r7, #12]
 801c018:	e008      	b.n	801c02c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801c01a:	68fb      	ldr	r3, [r7, #12]
 801c01c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801c01e:	68fb      	ldr	r3, [r7, #12]
 801c020:	681b      	ldr	r3, [r3, #0]
 801c022:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801c024:	68b9      	ldr	r1, [r7, #8]
 801c026:	6878      	ldr	r0, [r7, #4]
 801c028:	f000 f80a 	bl	801c040 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801c02c:	68fb      	ldr	r3, [r7, #12]
 801c02e:	2b00      	cmp	r3, #0
 801c030:	d1e3      	bne.n	801bffa <ip_reass_tmr+0x12>
    }
  }
}
 801c032:	bf00      	nop
 801c034:	bf00      	nop
 801c036:	3710      	adds	r7, #16
 801c038:	46bd      	mov	sp, r7
 801c03a:	bd80      	pop	{r7, pc}
 801c03c:	20027904 	.word	0x20027904

0801c040 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c040:	b580      	push	{r7, lr}
 801c042:	b088      	sub	sp, #32
 801c044:	af00      	add	r7, sp, #0
 801c046:	6078      	str	r0, [r7, #4]
 801c048:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801c04a:	2300      	movs	r3, #0
 801c04c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801c04e:	683a      	ldr	r2, [r7, #0]
 801c050:	687b      	ldr	r3, [r7, #4]
 801c052:	429a      	cmp	r2, r3
 801c054:	d105      	bne.n	801c062 <ip_reass_free_complete_datagram+0x22>
 801c056:	4b45      	ldr	r3, [pc, #276]	@ (801c16c <ip_reass_free_complete_datagram+0x12c>)
 801c058:	22ab      	movs	r2, #171	@ 0xab
 801c05a:	4945      	ldr	r1, [pc, #276]	@ (801c170 <ip_reass_free_complete_datagram+0x130>)
 801c05c:	4845      	ldr	r0, [pc, #276]	@ (801c174 <ip_reass_free_complete_datagram+0x134>)
 801c05e:	f002 f817 	bl	801e090 <iprintf>
  if (prev != NULL) {
 801c062:	683b      	ldr	r3, [r7, #0]
 801c064:	2b00      	cmp	r3, #0
 801c066:	d00a      	beq.n	801c07e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801c068:	683b      	ldr	r3, [r7, #0]
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	687a      	ldr	r2, [r7, #4]
 801c06e:	429a      	cmp	r2, r3
 801c070:	d005      	beq.n	801c07e <ip_reass_free_complete_datagram+0x3e>
 801c072:	4b3e      	ldr	r3, [pc, #248]	@ (801c16c <ip_reass_free_complete_datagram+0x12c>)
 801c074:	22ad      	movs	r2, #173	@ 0xad
 801c076:	4940      	ldr	r1, [pc, #256]	@ (801c178 <ip_reass_free_complete_datagram+0x138>)
 801c078:	483e      	ldr	r0, [pc, #248]	@ (801c174 <ip_reass_free_complete_datagram+0x134>)
 801c07a:	f002 f809 	bl	801e090 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	685b      	ldr	r3, [r3, #4]
 801c082:	685b      	ldr	r3, [r3, #4]
 801c084:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801c086:	697b      	ldr	r3, [r7, #20]
 801c088:	889b      	ldrh	r3, [r3, #4]
 801c08a:	b29b      	uxth	r3, r3
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	d12a      	bne.n	801c0e6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	685b      	ldr	r3, [r3, #4]
 801c094:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801c096:	697b      	ldr	r3, [r7, #20]
 801c098:	681a      	ldr	r2, [r3, #0]
 801c09a:	687b      	ldr	r3, [r7, #4]
 801c09c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801c09e:	69bb      	ldr	r3, [r7, #24]
 801c0a0:	6858      	ldr	r0, [r3, #4]
 801c0a2:	687b      	ldr	r3, [r7, #4]
 801c0a4:	3308      	adds	r3, #8
 801c0a6:	2214      	movs	r2, #20
 801c0a8:	4619      	mov	r1, r3
 801c0aa:	f002 fa1c 	bl	801e4e6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801c0ae:	2101      	movs	r1, #1
 801c0b0:	69b8      	ldr	r0, [r7, #24]
 801c0b2:	f7ff fc47 	bl	801b944 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801c0b6:	69b8      	ldr	r0, [r7, #24]
 801c0b8:	f7f8 fa8e 	bl	80145d8 <pbuf_clen>
 801c0bc:	4603      	mov	r3, r0
 801c0be:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c0c0:	8bfa      	ldrh	r2, [r7, #30]
 801c0c2:	8a7b      	ldrh	r3, [r7, #18]
 801c0c4:	4413      	add	r3, r2
 801c0c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c0ca:	db05      	blt.n	801c0d8 <ip_reass_free_complete_datagram+0x98>
 801c0cc:	4b27      	ldr	r3, [pc, #156]	@ (801c16c <ip_reass_free_complete_datagram+0x12c>)
 801c0ce:	22bc      	movs	r2, #188	@ 0xbc
 801c0d0:	492a      	ldr	r1, [pc, #168]	@ (801c17c <ip_reass_free_complete_datagram+0x13c>)
 801c0d2:	4828      	ldr	r0, [pc, #160]	@ (801c174 <ip_reass_free_complete_datagram+0x134>)
 801c0d4:	f001 ffdc 	bl	801e090 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c0d8:	8bfa      	ldrh	r2, [r7, #30]
 801c0da:	8a7b      	ldrh	r3, [r7, #18]
 801c0dc:	4413      	add	r3, r2
 801c0de:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801c0e0:	69b8      	ldr	r0, [r7, #24]
 801c0e2:	f7f8 f9eb 	bl	80144bc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	685b      	ldr	r3, [r3, #4]
 801c0ea:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801c0ec:	e01f      	b.n	801c12e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801c0ee:	69bb      	ldr	r3, [r7, #24]
 801c0f0:	685b      	ldr	r3, [r3, #4]
 801c0f2:	617b      	str	r3, [r7, #20]
    pcur = p;
 801c0f4:	69bb      	ldr	r3, [r7, #24]
 801c0f6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801c0f8:	697b      	ldr	r3, [r7, #20]
 801c0fa:	681b      	ldr	r3, [r3, #0]
 801c0fc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801c0fe:	68f8      	ldr	r0, [r7, #12]
 801c100:	f7f8 fa6a 	bl	80145d8 <pbuf_clen>
 801c104:	4603      	mov	r3, r0
 801c106:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c108:	8bfa      	ldrh	r2, [r7, #30]
 801c10a:	8a7b      	ldrh	r3, [r7, #18]
 801c10c:	4413      	add	r3, r2
 801c10e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c112:	db05      	blt.n	801c120 <ip_reass_free_complete_datagram+0xe0>
 801c114:	4b15      	ldr	r3, [pc, #84]	@ (801c16c <ip_reass_free_complete_datagram+0x12c>)
 801c116:	22cc      	movs	r2, #204	@ 0xcc
 801c118:	4918      	ldr	r1, [pc, #96]	@ (801c17c <ip_reass_free_complete_datagram+0x13c>)
 801c11a:	4816      	ldr	r0, [pc, #88]	@ (801c174 <ip_reass_free_complete_datagram+0x134>)
 801c11c:	f001 ffb8 	bl	801e090 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c120:	8bfa      	ldrh	r2, [r7, #30]
 801c122:	8a7b      	ldrh	r3, [r7, #18]
 801c124:	4413      	add	r3, r2
 801c126:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801c128:	68f8      	ldr	r0, [r7, #12]
 801c12a:	f7f8 f9c7 	bl	80144bc <pbuf_free>
  while (p != NULL) {
 801c12e:	69bb      	ldr	r3, [r7, #24]
 801c130:	2b00      	cmp	r3, #0
 801c132:	d1dc      	bne.n	801c0ee <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801c134:	6839      	ldr	r1, [r7, #0]
 801c136:	6878      	ldr	r0, [r7, #4]
 801c138:	f000 f8c2 	bl	801c2c0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801c13c:	4b10      	ldr	r3, [pc, #64]	@ (801c180 <ip_reass_free_complete_datagram+0x140>)
 801c13e:	881b      	ldrh	r3, [r3, #0]
 801c140:	8bfa      	ldrh	r2, [r7, #30]
 801c142:	429a      	cmp	r2, r3
 801c144:	d905      	bls.n	801c152 <ip_reass_free_complete_datagram+0x112>
 801c146:	4b09      	ldr	r3, [pc, #36]	@ (801c16c <ip_reass_free_complete_datagram+0x12c>)
 801c148:	22d2      	movs	r2, #210	@ 0xd2
 801c14a:	490e      	ldr	r1, [pc, #56]	@ (801c184 <ip_reass_free_complete_datagram+0x144>)
 801c14c:	4809      	ldr	r0, [pc, #36]	@ (801c174 <ip_reass_free_complete_datagram+0x134>)
 801c14e:	f001 ff9f 	bl	801e090 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801c152:	4b0b      	ldr	r3, [pc, #44]	@ (801c180 <ip_reass_free_complete_datagram+0x140>)
 801c154:	881a      	ldrh	r2, [r3, #0]
 801c156:	8bfb      	ldrh	r3, [r7, #30]
 801c158:	1ad3      	subs	r3, r2, r3
 801c15a:	b29a      	uxth	r2, r3
 801c15c:	4b08      	ldr	r3, [pc, #32]	@ (801c180 <ip_reass_free_complete_datagram+0x140>)
 801c15e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801c160:	8bfb      	ldrh	r3, [r7, #30]
}
 801c162:	4618      	mov	r0, r3
 801c164:	3720      	adds	r7, #32
 801c166:	46bd      	mov	sp, r7
 801c168:	bd80      	pop	{r7, pc}
 801c16a:	bf00      	nop
 801c16c:	08021a10 	.word	0x08021a10
 801c170:	08021a4c 	.word	0x08021a4c
 801c174:	08021a58 	.word	0x08021a58
 801c178:	08021a80 	.word	0x08021a80
 801c17c:	08021a94 	.word	0x08021a94
 801c180:	20027908 	.word	0x20027908
 801c184:	08021ab4 	.word	0x08021ab4

0801c188 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801c188:	b580      	push	{r7, lr}
 801c18a:	b08a      	sub	sp, #40	@ 0x28
 801c18c:	af00      	add	r7, sp, #0
 801c18e:	6078      	str	r0, [r7, #4]
 801c190:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801c192:	2300      	movs	r3, #0
 801c194:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801c196:	2300      	movs	r3, #0
 801c198:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801c19a:	2300      	movs	r3, #0
 801c19c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801c19e:	2300      	movs	r3, #0
 801c1a0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801c1a2:	2300      	movs	r3, #0
 801c1a4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801c1a6:	4b28      	ldr	r3, [pc, #160]	@ (801c248 <ip_reass_remove_oldest_datagram+0xc0>)
 801c1a8:	681b      	ldr	r3, [r3, #0]
 801c1aa:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c1ac:	e030      	b.n	801c210 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801c1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1b0:	695a      	ldr	r2, [r3, #20]
 801c1b2:	687b      	ldr	r3, [r7, #4]
 801c1b4:	68db      	ldr	r3, [r3, #12]
 801c1b6:	429a      	cmp	r2, r3
 801c1b8:	d10c      	bne.n	801c1d4 <ip_reass_remove_oldest_datagram+0x4c>
 801c1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1bc:	699a      	ldr	r2, [r3, #24]
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	691b      	ldr	r3, [r3, #16]
 801c1c2:	429a      	cmp	r2, r3
 801c1c4:	d106      	bne.n	801c1d4 <ip_reass_remove_oldest_datagram+0x4c>
 801c1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1c8:	899a      	ldrh	r2, [r3, #12]
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	889b      	ldrh	r3, [r3, #4]
 801c1ce:	b29b      	uxth	r3, r3
 801c1d0:	429a      	cmp	r2, r3
 801c1d2:	d014      	beq.n	801c1fe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801c1d4:	693b      	ldr	r3, [r7, #16]
 801c1d6:	3301      	adds	r3, #1
 801c1d8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801c1da:	6a3b      	ldr	r3, [r7, #32]
 801c1dc:	2b00      	cmp	r3, #0
 801c1de:	d104      	bne.n	801c1ea <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801c1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1e2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c1e4:	69fb      	ldr	r3, [r7, #28]
 801c1e6:	61bb      	str	r3, [r7, #24]
 801c1e8:	e009      	b.n	801c1fe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801c1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1ec:	7fda      	ldrb	r2, [r3, #31]
 801c1ee:	6a3b      	ldr	r3, [r7, #32]
 801c1f0:	7fdb      	ldrb	r3, [r3, #31]
 801c1f2:	429a      	cmp	r2, r3
 801c1f4:	d803      	bhi.n	801c1fe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801c1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1f8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c1fa:	69fb      	ldr	r3, [r7, #28]
 801c1fc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801c1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c200:	681b      	ldr	r3, [r3, #0]
 801c202:	2b00      	cmp	r3, #0
 801c204:	d001      	beq.n	801c20a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801c206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c208:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801c20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c20c:	681b      	ldr	r3, [r3, #0]
 801c20e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c212:	2b00      	cmp	r3, #0
 801c214:	d1cb      	bne.n	801c1ae <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801c216:	6a3b      	ldr	r3, [r7, #32]
 801c218:	2b00      	cmp	r3, #0
 801c21a:	d008      	beq.n	801c22e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801c21c:	69b9      	ldr	r1, [r7, #24]
 801c21e:	6a38      	ldr	r0, [r7, #32]
 801c220:	f7ff ff0e 	bl	801c040 <ip_reass_free_complete_datagram>
 801c224:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801c226:	697a      	ldr	r2, [r7, #20]
 801c228:	68fb      	ldr	r3, [r7, #12]
 801c22a:	4413      	add	r3, r2
 801c22c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801c22e:	697a      	ldr	r2, [r7, #20]
 801c230:	683b      	ldr	r3, [r7, #0]
 801c232:	429a      	cmp	r2, r3
 801c234:	da02      	bge.n	801c23c <ip_reass_remove_oldest_datagram+0xb4>
 801c236:	693b      	ldr	r3, [r7, #16]
 801c238:	2b01      	cmp	r3, #1
 801c23a:	dcac      	bgt.n	801c196 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801c23c:	697b      	ldr	r3, [r7, #20]
}
 801c23e:	4618      	mov	r0, r3
 801c240:	3728      	adds	r7, #40	@ 0x28
 801c242:	46bd      	mov	sp, r7
 801c244:	bd80      	pop	{r7, pc}
 801c246:	bf00      	nop
 801c248:	20027904 	.word	0x20027904

0801c24c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801c24c:	b580      	push	{r7, lr}
 801c24e:	b084      	sub	sp, #16
 801c250:	af00      	add	r7, sp, #0
 801c252:	6078      	str	r0, [r7, #4]
 801c254:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c256:	2004      	movs	r0, #4
 801c258:	f7f7 fa16 	bl	8013688 <memp_malloc>
 801c25c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801c25e:	68fb      	ldr	r3, [r7, #12]
 801c260:	2b00      	cmp	r3, #0
 801c262:	d110      	bne.n	801c286 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801c264:	6839      	ldr	r1, [r7, #0]
 801c266:	6878      	ldr	r0, [r7, #4]
 801c268:	f7ff ff8e 	bl	801c188 <ip_reass_remove_oldest_datagram>
 801c26c:	4602      	mov	r2, r0
 801c26e:	683b      	ldr	r3, [r7, #0]
 801c270:	4293      	cmp	r3, r2
 801c272:	dc03      	bgt.n	801c27c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c274:	2004      	movs	r0, #4
 801c276:	f7f7 fa07 	bl	8013688 <memp_malloc>
 801c27a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801c27c:	68fb      	ldr	r3, [r7, #12]
 801c27e:	2b00      	cmp	r3, #0
 801c280:	d101      	bne.n	801c286 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801c282:	2300      	movs	r3, #0
 801c284:	e016      	b.n	801c2b4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801c286:	2220      	movs	r2, #32
 801c288:	2100      	movs	r1, #0
 801c28a:	68f8      	ldr	r0, [r7, #12]
 801c28c:	f002 f858 	bl	801e340 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801c290:	68fb      	ldr	r3, [r7, #12]
 801c292:	220f      	movs	r2, #15
 801c294:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801c296:	4b09      	ldr	r3, [pc, #36]	@ (801c2bc <ip_reass_enqueue_new_datagram+0x70>)
 801c298:	681a      	ldr	r2, [r3, #0]
 801c29a:	68fb      	ldr	r3, [r7, #12]
 801c29c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801c29e:	4a07      	ldr	r2, [pc, #28]	@ (801c2bc <ip_reass_enqueue_new_datagram+0x70>)
 801c2a0:	68fb      	ldr	r3, [r7, #12]
 801c2a2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801c2a4:	68fb      	ldr	r3, [r7, #12]
 801c2a6:	3308      	adds	r3, #8
 801c2a8:	2214      	movs	r2, #20
 801c2aa:	6879      	ldr	r1, [r7, #4]
 801c2ac:	4618      	mov	r0, r3
 801c2ae:	f002 f91a 	bl	801e4e6 <memcpy>
  return ipr;
 801c2b2:	68fb      	ldr	r3, [r7, #12]
}
 801c2b4:	4618      	mov	r0, r3
 801c2b6:	3710      	adds	r7, #16
 801c2b8:	46bd      	mov	sp, r7
 801c2ba:	bd80      	pop	{r7, pc}
 801c2bc:	20027904 	.word	0x20027904

0801c2c0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c2c0:	b580      	push	{r7, lr}
 801c2c2:	b082      	sub	sp, #8
 801c2c4:	af00      	add	r7, sp, #0
 801c2c6:	6078      	str	r0, [r7, #4]
 801c2c8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801c2ca:	4b10      	ldr	r3, [pc, #64]	@ (801c30c <ip_reass_dequeue_datagram+0x4c>)
 801c2cc:	681b      	ldr	r3, [r3, #0]
 801c2ce:	687a      	ldr	r2, [r7, #4]
 801c2d0:	429a      	cmp	r2, r3
 801c2d2:	d104      	bne.n	801c2de <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	681b      	ldr	r3, [r3, #0]
 801c2d8:	4a0c      	ldr	r2, [pc, #48]	@ (801c30c <ip_reass_dequeue_datagram+0x4c>)
 801c2da:	6013      	str	r3, [r2, #0]
 801c2dc:	e00d      	b.n	801c2fa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801c2de:	683b      	ldr	r3, [r7, #0]
 801c2e0:	2b00      	cmp	r3, #0
 801c2e2:	d106      	bne.n	801c2f2 <ip_reass_dequeue_datagram+0x32>
 801c2e4:	4b0a      	ldr	r3, [pc, #40]	@ (801c310 <ip_reass_dequeue_datagram+0x50>)
 801c2e6:	f240 1245 	movw	r2, #325	@ 0x145
 801c2ea:	490a      	ldr	r1, [pc, #40]	@ (801c314 <ip_reass_dequeue_datagram+0x54>)
 801c2ec:	480a      	ldr	r0, [pc, #40]	@ (801c318 <ip_reass_dequeue_datagram+0x58>)
 801c2ee:	f001 fecf 	bl	801e090 <iprintf>
    prev->next = ipr->next;
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	681a      	ldr	r2, [r3, #0]
 801c2f6:	683b      	ldr	r3, [r7, #0]
 801c2f8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801c2fa:	6879      	ldr	r1, [r7, #4]
 801c2fc:	2004      	movs	r0, #4
 801c2fe:	f7f7 fa39 	bl	8013774 <memp_free>
}
 801c302:	bf00      	nop
 801c304:	3708      	adds	r7, #8
 801c306:	46bd      	mov	sp, r7
 801c308:	bd80      	pop	{r7, pc}
 801c30a:	bf00      	nop
 801c30c:	20027904 	.word	0x20027904
 801c310:	08021a10 	.word	0x08021a10
 801c314:	08021ad8 	.word	0x08021ad8
 801c318:	08021a58 	.word	0x08021a58

0801c31c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801c31c:	b580      	push	{r7, lr}
 801c31e:	b08c      	sub	sp, #48	@ 0x30
 801c320:	af00      	add	r7, sp, #0
 801c322:	60f8      	str	r0, [r7, #12]
 801c324:	60b9      	str	r1, [r7, #8]
 801c326:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801c328:	2300      	movs	r3, #0
 801c32a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801c32c:	2301      	movs	r3, #1
 801c32e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801c330:	68bb      	ldr	r3, [r7, #8]
 801c332:	685b      	ldr	r3, [r3, #4]
 801c334:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c336:	69fb      	ldr	r3, [r7, #28]
 801c338:	885b      	ldrh	r3, [r3, #2]
 801c33a:	b29b      	uxth	r3, r3
 801c33c:	4618      	mov	r0, r3
 801c33e:	f7f6 fccf 	bl	8012ce0 <lwip_htons>
 801c342:	4603      	mov	r3, r0
 801c344:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801c346:	69fb      	ldr	r3, [r7, #28]
 801c348:	781b      	ldrb	r3, [r3, #0]
 801c34a:	f003 030f 	and.w	r3, r3, #15
 801c34e:	b2db      	uxtb	r3, r3
 801c350:	009b      	lsls	r3, r3, #2
 801c352:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801c354:	7e7b      	ldrb	r3, [r7, #25]
 801c356:	b29b      	uxth	r3, r3
 801c358:	8b7a      	ldrh	r2, [r7, #26]
 801c35a:	429a      	cmp	r2, r3
 801c35c:	d202      	bcs.n	801c364 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c35e:	f04f 33ff 	mov.w	r3, #4294967295
 801c362:	e135      	b.n	801c5d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801c364:	7e7b      	ldrb	r3, [r7, #25]
 801c366:	b29b      	uxth	r3, r3
 801c368:	8b7a      	ldrh	r2, [r7, #26]
 801c36a:	1ad3      	subs	r3, r2, r3
 801c36c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801c36e:	69fb      	ldr	r3, [r7, #28]
 801c370:	88db      	ldrh	r3, [r3, #6]
 801c372:	b29b      	uxth	r3, r3
 801c374:	4618      	mov	r0, r3
 801c376:	f7f6 fcb3 	bl	8012ce0 <lwip_htons>
 801c37a:	4603      	mov	r3, r0
 801c37c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c380:	b29b      	uxth	r3, r3
 801c382:	00db      	lsls	r3, r3, #3
 801c384:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801c386:	68bb      	ldr	r3, [r7, #8]
 801c388:	685b      	ldr	r3, [r3, #4]
 801c38a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801c38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c38e:	2200      	movs	r2, #0
 801c390:	701a      	strb	r2, [r3, #0]
 801c392:	2200      	movs	r2, #0
 801c394:	705a      	strb	r2, [r3, #1]
 801c396:	2200      	movs	r2, #0
 801c398:	709a      	strb	r2, [r3, #2]
 801c39a:	2200      	movs	r2, #0
 801c39c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801c39e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3a0:	8afa      	ldrh	r2, [r7, #22]
 801c3a2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801c3a4:	8afa      	ldrh	r2, [r7, #22]
 801c3a6:	8b7b      	ldrh	r3, [r7, #26]
 801c3a8:	4413      	add	r3, r2
 801c3aa:	b29a      	uxth	r2, r3
 801c3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3ae:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801c3b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3b2:	88db      	ldrh	r3, [r3, #6]
 801c3b4:	b29b      	uxth	r3, r3
 801c3b6:	8afa      	ldrh	r2, [r7, #22]
 801c3b8:	429a      	cmp	r2, r3
 801c3ba:	d902      	bls.n	801c3c2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c3bc:	f04f 33ff 	mov.w	r3, #4294967295
 801c3c0:	e106      	b.n	801c5d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801c3c2:	68fb      	ldr	r3, [r7, #12]
 801c3c4:	685b      	ldr	r3, [r3, #4]
 801c3c6:	627b      	str	r3, [r7, #36]	@ 0x24
 801c3c8:	e068      	b.n	801c49c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801c3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3cc:	685b      	ldr	r3, [r3, #4]
 801c3ce:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801c3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3d2:	889b      	ldrh	r3, [r3, #4]
 801c3d4:	b29a      	uxth	r2, r3
 801c3d6:	693b      	ldr	r3, [r7, #16]
 801c3d8:	889b      	ldrh	r3, [r3, #4]
 801c3da:	b29b      	uxth	r3, r3
 801c3dc:	429a      	cmp	r2, r3
 801c3de:	d235      	bcs.n	801c44c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801c3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c3e4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801c3e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3e8:	2b00      	cmp	r3, #0
 801c3ea:	d020      	beq.n	801c42e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801c3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3ee:	889b      	ldrh	r3, [r3, #4]
 801c3f0:	b29a      	uxth	r2, r3
 801c3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3f4:	88db      	ldrh	r3, [r3, #6]
 801c3f6:	b29b      	uxth	r3, r3
 801c3f8:	429a      	cmp	r2, r3
 801c3fa:	d307      	bcc.n	801c40c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801c3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3fe:	88db      	ldrh	r3, [r3, #6]
 801c400:	b29a      	uxth	r2, r3
 801c402:	693b      	ldr	r3, [r7, #16]
 801c404:	889b      	ldrh	r3, [r3, #4]
 801c406:	b29b      	uxth	r3, r3
 801c408:	429a      	cmp	r2, r3
 801c40a:	d902      	bls.n	801c412 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c40c:	f04f 33ff 	mov.w	r3, #4294967295
 801c410:	e0de      	b.n	801c5d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801c412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c414:	68ba      	ldr	r2, [r7, #8]
 801c416:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801c418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c41a:	88db      	ldrh	r3, [r3, #6]
 801c41c:	b29a      	uxth	r2, r3
 801c41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c420:	889b      	ldrh	r3, [r3, #4]
 801c422:	b29b      	uxth	r3, r3
 801c424:	429a      	cmp	r2, r3
 801c426:	d03d      	beq.n	801c4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c428:	2300      	movs	r3, #0
 801c42a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801c42c:	e03a      	b.n	801c4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801c42e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c430:	88db      	ldrh	r3, [r3, #6]
 801c432:	b29a      	uxth	r2, r3
 801c434:	693b      	ldr	r3, [r7, #16]
 801c436:	889b      	ldrh	r3, [r3, #4]
 801c438:	b29b      	uxth	r3, r3
 801c43a:	429a      	cmp	r2, r3
 801c43c:	d902      	bls.n	801c444 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c43e:	f04f 33ff 	mov.w	r3, #4294967295
 801c442:	e0c5      	b.n	801c5d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801c444:	68fb      	ldr	r3, [r7, #12]
 801c446:	68ba      	ldr	r2, [r7, #8]
 801c448:	605a      	str	r2, [r3, #4]
      break;
 801c44a:	e02b      	b.n	801c4a4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801c44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c44e:	889b      	ldrh	r3, [r3, #4]
 801c450:	b29a      	uxth	r2, r3
 801c452:	693b      	ldr	r3, [r7, #16]
 801c454:	889b      	ldrh	r3, [r3, #4]
 801c456:	b29b      	uxth	r3, r3
 801c458:	429a      	cmp	r2, r3
 801c45a:	d102      	bne.n	801c462 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c45c:	f04f 33ff 	mov.w	r3, #4294967295
 801c460:	e0b6      	b.n	801c5d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801c462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c464:	889b      	ldrh	r3, [r3, #4]
 801c466:	b29a      	uxth	r2, r3
 801c468:	693b      	ldr	r3, [r7, #16]
 801c46a:	88db      	ldrh	r3, [r3, #6]
 801c46c:	b29b      	uxth	r3, r3
 801c46e:	429a      	cmp	r2, r3
 801c470:	d202      	bcs.n	801c478 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c472:	f04f 33ff 	mov.w	r3, #4294967295
 801c476:	e0ab      	b.n	801c5d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801c478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c47a:	2b00      	cmp	r3, #0
 801c47c:	d009      	beq.n	801c492 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801c47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c480:	88db      	ldrh	r3, [r3, #6]
 801c482:	b29a      	uxth	r2, r3
 801c484:	693b      	ldr	r3, [r7, #16]
 801c486:	889b      	ldrh	r3, [r3, #4]
 801c488:	b29b      	uxth	r3, r3
 801c48a:	429a      	cmp	r2, r3
 801c48c:	d001      	beq.n	801c492 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c48e:	2300      	movs	r3, #0
 801c490:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801c492:	693b      	ldr	r3, [r7, #16]
 801c494:	681b      	ldr	r3, [r3, #0]
 801c496:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801c498:	693b      	ldr	r3, [r7, #16]
 801c49a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801c49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c49e:	2b00      	cmp	r3, #0
 801c4a0:	d193      	bne.n	801c3ca <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801c4a2:	e000      	b.n	801c4a6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801c4a4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801c4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4a8:	2b00      	cmp	r3, #0
 801c4aa:	d12d      	bne.n	801c508 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801c4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	d01c      	beq.n	801c4ec <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801c4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4b4:	88db      	ldrh	r3, [r3, #6]
 801c4b6:	b29a      	uxth	r2, r3
 801c4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4ba:	889b      	ldrh	r3, [r3, #4]
 801c4bc:	b29b      	uxth	r3, r3
 801c4be:	429a      	cmp	r2, r3
 801c4c0:	d906      	bls.n	801c4d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801c4c2:	4b45      	ldr	r3, [pc, #276]	@ (801c5d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c4c4:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801c4c8:	4944      	ldr	r1, [pc, #272]	@ (801c5dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801c4ca:	4845      	ldr	r0, [pc, #276]	@ (801c5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c4cc:	f001 fde0 	bl	801e090 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801c4d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4d2:	68ba      	ldr	r2, [r7, #8]
 801c4d4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801c4d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4d8:	88db      	ldrh	r3, [r3, #6]
 801c4da:	b29a      	uxth	r2, r3
 801c4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4de:	889b      	ldrh	r3, [r3, #4]
 801c4e0:	b29b      	uxth	r3, r3
 801c4e2:	429a      	cmp	r2, r3
 801c4e4:	d010      	beq.n	801c508 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801c4e6:	2300      	movs	r3, #0
 801c4e8:	623b      	str	r3, [r7, #32]
 801c4ea:	e00d      	b.n	801c508 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801c4ec:	68fb      	ldr	r3, [r7, #12]
 801c4ee:	685b      	ldr	r3, [r3, #4]
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d006      	beq.n	801c502 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801c4f4:	4b38      	ldr	r3, [pc, #224]	@ (801c5d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c4f6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801c4fa:	493a      	ldr	r1, [pc, #232]	@ (801c5e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801c4fc:	4838      	ldr	r0, [pc, #224]	@ (801c5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c4fe:	f001 fdc7 	bl	801e090 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801c502:	68fb      	ldr	r3, [r7, #12]
 801c504:	68ba      	ldr	r2, [r7, #8]
 801c506:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	d105      	bne.n	801c51a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801c50e:	68fb      	ldr	r3, [r7, #12]
 801c510:	7f9b      	ldrb	r3, [r3, #30]
 801c512:	f003 0301 	and.w	r3, r3, #1
 801c516:	2b00      	cmp	r3, #0
 801c518:	d059      	beq.n	801c5ce <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801c51a:	6a3b      	ldr	r3, [r7, #32]
 801c51c:	2b00      	cmp	r3, #0
 801c51e:	d04f      	beq.n	801c5c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801c520:	68fb      	ldr	r3, [r7, #12]
 801c522:	685b      	ldr	r3, [r3, #4]
 801c524:	2b00      	cmp	r3, #0
 801c526:	d006      	beq.n	801c536 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801c528:	68fb      	ldr	r3, [r7, #12]
 801c52a:	685b      	ldr	r3, [r3, #4]
 801c52c:	685b      	ldr	r3, [r3, #4]
 801c52e:	889b      	ldrh	r3, [r3, #4]
 801c530:	b29b      	uxth	r3, r3
 801c532:	2b00      	cmp	r3, #0
 801c534:	d002      	beq.n	801c53c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801c536:	2300      	movs	r3, #0
 801c538:	623b      	str	r3, [r7, #32]
 801c53a:	e041      	b.n	801c5c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801c53c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c53e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801c540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c542:	681b      	ldr	r3, [r3, #0]
 801c544:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c546:	e012      	b.n	801c56e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801c548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c54a:	685b      	ldr	r3, [r3, #4]
 801c54c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801c54e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c550:	88db      	ldrh	r3, [r3, #6]
 801c552:	b29a      	uxth	r2, r3
 801c554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c556:	889b      	ldrh	r3, [r3, #4]
 801c558:	b29b      	uxth	r3, r3
 801c55a:	429a      	cmp	r2, r3
 801c55c:	d002      	beq.n	801c564 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801c55e:	2300      	movs	r3, #0
 801c560:	623b      	str	r3, [r7, #32]
            break;
 801c562:	e007      	b.n	801c574 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801c564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c566:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801c568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c56a:	681b      	ldr	r3, [r3, #0]
 801c56c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c570:	2b00      	cmp	r3, #0
 801c572:	d1e9      	bne.n	801c548 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801c574:	6a3b      	ldr	r3, [r7, #32]
 801c576:	2b00      	cmp	r3, #0
 801c578:	d022      	beq.n	801c5c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801c57a:	68fb      	ldr	r3, [r7, #12]
 801c57c:	685b      	ldr	r3, [r3, #4]
 801c57e:	2b00      	cmp	r3, #0
 801c580:	d106      	bne.n	801c590 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801c582:	4b15      	ldr	r3, [pc, #84]	@ (801c5d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c584:	f240 12df 	movw	r2, #479	@ 0x1df
 801c588:	4917      	ldr	r1, [pc, #92]	@ (801c5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c58a:	4815      	ldr	r0, [pc, #84]	@ (801c5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c58c:	f001 fd80 	bl	801e090 <iprintf>
          LWIP_ASSERT("sanity check",
 801c590:	68fb      	ldr	r3, [r7, #12]
 801c592:	685b      	ldr	r3, [r3, #4]
 801c594:	685b      	ldr	r3, [r3, #4]
 801c596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c598:	429a      	cmp	r2, r3
 801c59a:	d106      	bne.n	801c5aa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801c59c:	4b0e      	ldr	r3, [pc, #56]	@ (801c5d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c59e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801c5a2:	4911      	ldr	r1, [pc, #68]	@ (801c5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c5a4:	480e      	ldr	r0, [pc, #56]	@ (801c5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c5a6:	f001 fd73 	bl	801e090 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801c5aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5ac:	681b      	ldr	r3, [r3, #0]
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	d006      	beq.n	801c5c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801c5b2:	4b09      	ldr	r3, [pc, #36]	@ (801c5d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c5b4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801c5b8:	490c      	ldr	r1, [pc, #48]	@ (801c5ec <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801c5ba:	4809      	ldr	r0, [pc, #36]	@ (801c5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c5bc:	f001 fd68 	bl	801e090 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801c5c0:	6a3b      	ldr	r3, [r7, #32]
 801c5c2:	2b00      	cmp	r3, #0
 801c5c4:	bf14      	ite	ne
 801c5c6:	2301      	movne	r3, #1
 801c5c8:	2300      	moveq	r3, #0
 801c5ca:	b2db      	uxtb	r3, r3
 801c5cc:	e000      	b.n	801c5d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801c5ce:	2300      	movs	r3, #0
}
 801c5d0:	4618      	mov	r0, r3
 801c5d2:	3730      	adds	r7, #48	@ 0x30
 801c5d4:	46bd      	mov	sp, r7
 801c5d6:	bd80      	pop	{r7, pc}
 801c5d8:	08021a10 	.word	0x08021a10
 801c5dc:	08021af4 	.word	0x08021af4
 801c5e0:	08021a58 	.word	0x08021a58
 801c5e4:	08021b14 	.word	0x08021b14
 801c5e8:	08021b4c 	.word	0x08021b4c
 801c5ec:	08021b5c 	.word	0x08021b5c

0801c5f0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801c5f0:	b580      	push	{r7, lr}
 801c5f2:	b08e      	sub	sp, #56	@ 0x38
 801c5f4:	af00      	add	r7, sp, #0
 801c5f6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801c5f8:	687b      	ldr	r3, [r7, #4]
 801c5fa:	685b      	ldr	r3, [r3, #4]
 801c5fc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801c5fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c600:	781b      	ldrb	r3, [r3, #0]
 801c602:	f003 030f 	and.w	r3, r3, #15
 801c606:	b2db      	uxtb	r3, r3
 801c608:	009b      	lsls	r3, r3, #2
 801c60a:	b2db      	uxtb	r3, r3
 801c60c:	2b14      	cmp	r3, #20
 801c60e:	f040 8171 	bne.w	801c8f4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801c612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c614:	88db      	ldrh	r3, [r3, #6]
 801c616:	b29b      	uxth	r3, r3
 801c618:	4618      	mov	r0, r3
 801c61a:	f7f6 fb61 	bl	8012ce0 <lwip_htons>
 801c61e:	4603      	mov	r3, r0
 801c620:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c624:	b29b      	uxth	r3, r3
 801c626:	00db      	lsls	r3, r3, #3
 801c628:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c62a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c62c:	885b      	ldrh	r3, [r3, #2]
 801c62e:	b29b      	uxth	r3, r3
 801c630:	4618      	mov	r0, r3
 801c632:	f7f6 fb55 	bl	8012ce0 <lwip_htons>
 801c636:	4603      	mov	r3, r0
 801c638:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801c63a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c63c:	781b      	ldrb	r3, [r3, #0]
 801c63e:	f003 030f 	and.w	r3, r3, #15
 801c642:	b2db      	uxtb	r3, r3
 801c644:	009b      	lsls	r3, r3, #2
 801c646:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801c64a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c64e:	b29b      	uxth	r3, r3
 801c650:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c652:	429a      	cmp	r2, r3
 801c654:	f0c0 8150 	bcc.w	801c8f8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801c658:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c65c:	b29b      	uxth	r3, r3
 801c65e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c660:	1ad3      	subs	r3, r2, r3
 801c662:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801c664:	6878      	ldr	r0, [r7, #4]
 801c666:	f7f7 ffb7 	bl	80145d8 <pbuf_clen>
 801c66a:	4603      	mov	r3, r0
 801c66c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801c66e:	4b8c      	ldr	r3, [pc, #560]	@ (801c8a0 <ip4_reass+0x2b0>)
 801c670:	881b      	ldrh	r3, [r3, #0]
 801c672:	461a      	mov	r2, r3
 801c674:	8c3b      	ldrh	r3, [r7, #32]
 801c676:	4413      	add	r3, r2
 801c678:	2b0a      	cmp	r3, #10
 801c67a:	dd10      	ble.n	801c69e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c67c:	8c3b      	ldrh	r3, [r7, #32]
 801c67e:	4619      	mov	r1, r3
 801c680:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c682:	f7ff fd81 	bl	801c188 <ip_reass_remove_oldest_datagram>
 801c686:	4603      	mov	r3, r0
 801c688:	2b00      	cmp	r3, #0
 801c68a:	f000 8137 	beq.w	801c8fc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801c68e:	4b84      	ldr	r3, [pc, #528]	@ (801c8a0 <ip4_reass+0x2b0>)
 801c690:	881b      	ldrh	r3, [r3, #0]
 801c692:	461a      	mov	r2, r3
 801c694:	8c3b      	ldrh	r3, [r7, #32]
 801c696:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c698:	2b0a      	cmp	r3, #10
 801c69a:	f300 812f 	bgt.w	801c8fc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c69e:	4b81      	ldr	r3, [pc, #516]	@ (801c8a4 <ip4_reass+0x2b4>)
 801c6a0:	681b      	ldr	r3, [r3, #0]
 801c6a2:	633b      	str	r3, [r7, #48]	@ 0x30
 801c6a4:	e015      	b.n	801c6d2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801c6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6a8:	695a      	ldr	r2, [r3, #20]
 801c6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6ac:	68db      	ldr	r3, [r3, #12]
 801c6ae:	429a      	cmp	r2, r3
 801c6b0:	d10c      	bne.n	801c6cc <ip4_reass+0xdc>
 801c6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6b4:	699a      	ldr	r2, [r3, #24]
 801c6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6b8:	691b      	ldr	r3, [r3, #16]
 801c6ba:	429a      	cmp	r2, r3
 801c6bc:	d106      	bne.n	801c6cc <ip4_reass+0xdc>
 801c6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6c0:	899a      	ldrh	r2, [r3, #12]
 801c6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6c4:	889b      	ldrh	r3, [r3, #4]
 801c6c6:	b29b      	uxth	r3, r3
 801c6c8:	429a      	cmp	r2, r3
 801c6ca:	d006      	beq.n	801c6da <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6ce:	681b      	ldr	r3, [r3, #0]
 801c6d0:	633b      	str	r3, [r7, #48]	@ 0x30
 801c6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6d4:	2b00      	cmp	r3, #0
 801c6d6:	d1e6      	bne.n	801c6a6 <ip4_reass+0xb6>
 801c6d8:	e000      	b.n	801c6dc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801c6da:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801c6dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	d109      	bne.n	801c6f6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801c6e2:	8c3b      	ldrh	r3, [r7, #32]
 801c6e4:	4619      	mov	r1, r3
 801c6e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c6e8:	f7ff fdb0 	bl	801c24c <ip_reass_enqueue_new_datagram>
 801c6ec:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801c6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	d11c      	bne.n	801c72e <ip4_reass+0x13e>
      goto nullreturn;
 801c6f4:	e105      	b.n	801c902 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6f8:	88db      	ldrh	r3, [r3, #6]
 801c6fa:	b29b      	uxth	r3, r3
 801c6fc:	4618      	mov	r0, r3
 801c6fe:	f7f6 faef 	bl	8012ce0 <lwip_htons>
 801c702:	4603      	mov	r3, r0
 801c704:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c708:	2b00      	cmp	r3, #0
 801c70a:	d110      	bne.n	801c72e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801c70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c70e:	89db      	ldrh	r3, [r3, #14]
 801c710:	4618      	mov	r0, r3
 801c712:	f7f6 fae5 	bl	8012ce0 <lwip_htons>
 801c716:	4603      	mov	r3, r0
 801c718:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c71c:	2b00      	cmp	r3, #0
 801c71e:	d006      	beq.n	801c72e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801c720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c722:	3308      	adds	r3, #8
 801c724:	2214      	movs	r2, #20
 801c726:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801c728:	4618      	mov	r0, r3
 801c72a:	f001 fedc 	bl	801e4e6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801c72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c730:	88db      	ldrh	r3, [r3, #6]
 801c732:	b29b      	uxth	r3, r3
 801c734:	f003 0320 	and.w	r3, r3, #32
 801c738:	2b00      	cmp	r3, #0
 801c73a:	bf0c      	ite	eq
 801c73c:	2301      	moveq	r3, #1
 801c73e:	2300      	movne	r3, #0
 801c740:	b2db      	uxtb	r3, r3
 801c742:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801c744:	69fb      	ldr	r3, [r7, #28]
 801c746:	2b00      	cmp	r3, #0
 801c748:	d00e      	beq.n	801c768 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801c74a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c74c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c74e:	4413      	add	r3, r2
 801c750:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801c752:	8b7a      	ldrh	r2, [r7, #26]
 801c754:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c756:	429a      	cmp	r2, r3
 801c758:	f0c0 80a0 	bcc.w	801c89c <ip4_reass+0x2ac>
 801c75c:	8b7b      	ldrh	r3, [r7, #26]
 801c75e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801c762:	4293      	cmp	r3, r2
 801c764:	f200 809a 	bhi.w	801c89c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801c768:	69fa      	ldr	r2, [r7, #28]
 801c76a:	6879      	ldr	r1, [r7, #4]
 801c76c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c76e:	f7ff fdd5 	bl	801c31c <ip_reass_chain_frag_into_datagram_and_validate>
 801c772:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801c774:	697b      	ldr	r3, [r7, #20]
 801c776:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c77a:	f000 809b 	beq.w	801c8b4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c77e:	4b48      	ldr	r3, [pc, #288]	@ (801c8a0 <ip4_reass+0x2b0>)
 801c780:	881a      	ldrh	r2, [r3, #0]
 801c782:	8c3b      	ldrh	r3, [r7, #32]
 801c784:	4413      	add	r3, r2
 801c786:	b29a      	uxth	r2, r3
 801c788:	4b45      	ldr	r3, [pc, #276]	@ (801c8a0 <ip4_reass+0x2b0>)
 801c78a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801c78c:	69fb      	ldr	r3, [r7, #28]
 801c78e:	2b00      	cmp	r3, #0
 801c790:	d00d      	beq.n	801c7ae <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801c792:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c794:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c796:	4413      	add	r3, r2
 801c798:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801c79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c79c:	8a7a      	ldrh	r2, [r7, #18]
 801c79e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7a2:	7f9b      	ldrb	r3, [r3, #30]
 801c7a4:	f043 0301 	orr.w	r3, r3, #1
 801c7a8:	b2da      	uxtb	r2, r3
 801c7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7ac:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801c7ae:	697b      	ldr	r3, [r7, #20]
 801c7b0:	2b01      	cmp	r3, #1
 801c7b2:	d171      	bne.n	801c898 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801c7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7b6:	8b9b      	ldrh	r3, [r3, #28]
 801c7b8:	3314      	adds	r3, #20
 801c7ba:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801c7bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7be:	685b      	ldr	r3, [r3, #4]
 801c7c0:	685b      	ldr	r3, [r3, #4]
 801c7c2:	681b      	ldr	r3, [r3, #0]
 801c7c4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801c7c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7c8:	685b      	ldr	r3, [r3, #4]
 801c7ca:	685b      	ldr	r3, [r3, #4]
 801c7cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7d0:	3308      	adds	r3, #8
 801c7d2:	2214      	movs	r2, #20
 801c7d4:	4619      	mov	r1, r3
 801c7d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c7d8:	f001 fe85 	bl	801e4e6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801c7dc:	8a3b      	ldrh	r3, [r7, #16]
 801c7de:	4618      	mov	r0, r3
 801c7e0:	f7f6 fa7e 	bl	8012ce0 <lwip_htons>
 801c7e4:	4603      	mov	r3, r0
 801c7e6:	461a      	mov	r2, r3
 801c7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7ea:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801c7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7ee:	2200      	movs	r2, #0
 801c7f0:	719a      	strb	r2, [r3, #6]
 801c7f2:	2200      	movs	r2, #0
 801c7f4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801c7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7f8:	2200      	movs	r2, #0
 801c7fa:	729a      	strb	r2, [r3, #10]
 801c7fc:	2200      	movs	r2, #0
 801c7fe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801c800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c802:	685b      	ldr	r3, [r3, #4]
 801c804:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801c806:	e00d      	b.n	801c824 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801c808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c80a:	685b      	ldr	r3, [r3, #4]
 801c80c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801c80e:	2114      	movs	r1, #20
 801c810:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801c812:	f7f7 fdcd 	bl	80143b0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801c816:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c818:	6878      	ldr	r0, [r7, #4]
 801c81a:	f7f7 ff1d 	bl	8014658 <pbuf_cat>
      r = iprh->next_pbuf;
 801c81e:	68fb      	ldr	r3, [r7, #12]
 801c820:	681b      	ldr	r3, [r3, #0]
 801c822:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801c824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c826:	2b00      	cmp	r3, #0
 801c828:	d1ee      	bne.n	801c808 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801c82a:	4b1e      	ldr	r3, [pc, #120]	@ (801c8a4 <ip4_reass+0x2b4>)
 801c82c:	681b      	ldr	r3, [r3, #0]
 801c82e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c830:	429a      	cmp	r2, r3
 801c832:	d102      	bne.n	801c83a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801c834:	2300      	movs	r3, #0
 801c836:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c838:	e010      	b.n	801c85c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c83a:	4b1a      	ldr	r3, [pc, #104]	@ (801c8a4 <ip4_reass+0x2b4>)
 801c83c:	681b      	ldr	r3, [r3, #0]
 801c83e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c840:	e007      	b.n	801c852 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801c842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c844:	681b      	ldr	r3, [r3, #0]
 801c846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c848:	429a      	cmp	r2, r3
 801c84a:	d006      	beq.n	801c85a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c84c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c84e:	681b      	ldr	r3, [r3, #0]
 801c850:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c854:	2b00      	cmp	r3, #0
 801c856:	d1f4      	bne.n	801c842 <ip4_reass+0x252>
 801c858:	e000      	b.n	801c85c <ip4_reass+0x26c>
          break;
 801c85a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801c85c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c85e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c860:	f7ff fd2e 	bl	801c2c0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801c864:	6878      	ldr	r0, [r7, #4]
 801c866:	f7f7 feb7 	bl	80145d8 <pbuf_clen>
 801c86a:	4603      	mov	r3, r0
 801c86c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801c86e:	4b0c      	ldr	r3, [pc, #48]	@ (801c8a0 <ip4_reass+0x2b0>)
 801c870:	881b      	ldrh	r3, [r3, #0]
 801c872:	8c3a      	ldrh	r2, [r7, #32]
 801c874:	429a      	cmp	r2, r3
 801c876:	d906      	bls.n	801c886 <ip4_reass+0x296>
 801c878:	4b0b      	ldr	r3, [pc, #44]	@ (801c8a8 <ip4_reass+0x2b8>)
 801c87a:	f240 229b 	movw	r2, #667	@ 0x29b
 801c87e:	490b      	ldr	r1, [pc, #44]	@ (801c8ac <ip4_reass+0x2bc>)
 801c880:	480b      	ldr	r0, [pc, #44]	@ (801c8b0 <ip4_reass+0x2c0>)
 801c882:	f001 fc05 	bl	801e090 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801c886:	4b06      	ldr	r3, [pc, #24]	@ (801c8a0 <ip4_reass+0x2b0>)
 801c888:	881a      	ldrh	r2, [r3, #0]
 801c88a:	8c3b      	ldrh	r3, [r7, #32]
 801c88c:	1ad3      	subs	r3, r2, r3
 801c88e:	b29a      	uxth	r2, r3
 801c890:	4b03      	ldr	r3, [pc, #12]	@ (801c8a0 <ip4_reass+0x2b0>)
 801c892:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801c894:	687b      	ldr	r3, [r7, #4]
 801c896:	e038      	b.n	801c90a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801c898:	2300      	movs	r3, #0
 801c89a:	e036      	b.n	801c90a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801c89c:	bf00      	nop
 801c89e:	e00a      	b.n	801c8b6 <ip4_reass+0x2c6>
 801c8a0:	20027908 	.word	0x20027908
 801c8a4:	20027904 	.word	0x20027904
 801c8a8:	08021a10 	.word	0x08021a10
 801c8ac:	08021b80 	.word	0x08021b80
 801c8b0:	08021a58 	.word	0x08021a58
    goto nullreturn_ipr;
 801c8b4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801c8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c8b8:	2b00      	cmp	r3, #0
 801c8ba:	d106      	bne.n	801c8ca <ip4_reass+0x2da>
 801c8bc:	4b15      	ldr	r3, [pc, #84]	@ (801c914 <ip4_reass+0x324>)
 801c8be:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801c8c2:	4915      	ldr	r1, [pc, #84]	@ (801c918 <ip4_reass+0x328>)
 801c8c4:	4815      	ldr	r0, [pc, #84]	@ (801c91c <ip4_reass+0x32c>)
 801c8c6:	f001 fbe3 	bl	801e090 <iprintf>
  if (ipr->p == NULL) {
 801c8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c8cc:	685b      	ldr	r3, [r3, #4]
 801c8ce:	2b00      	cmp	r3, #0
 801c8d0:	d116      	bne.n	801c900 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801c8d2:	4b13      	ldr	r3, [pc, #76]	@ (801c920 <ip4_reass+0x330>)
 801c8d4:	681b      	ldr	r3, [r3, #0]
 801c8d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c8d8:	429a      	cmp	r2, r3
 801c8da:	d006      	beq.n	801c8ea <ip4_reass+0x2fa>
 801c8dc:	4b0d      	ldr	r3, [pc, #52]	@ (801c914 <ip4_reass+0x324>)
 801c8de:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801c8e2:	4910      	ldr	r1, [pc, #64]	@ (801c924 <ip4_reass+0x334>)
 801c8e4:	480d      	ldr	r0, [pc, #52]	@ (801c91c <ip4_reass+0x32c>)
 801c8e6:	f001 fbd3 	bl	801e090 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801c8ea:	2100      	movs	r1, #0
 801c8ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c8ee:	f7ff fce7 	bl	801c2c0 <ip_reass_dequeue_datagram>
 801c8f2:	e006      	b.n	801c902 <ip4_reass+0x312>
    goto nullreturn;
 801c8f4:	bf00      	nop
 801c8f6:	e004      	b.n	801c902 <ip4_reass+0x312>
    goto nullreturn;
 801c8f8:	bf00      	nop
 801c8fa:	e002      	b.n	801c902 <ip4_reass+0x312>
      goto nullreturn;
 801c8fc:	bf00      	nop
 801c8fe:	e000      	b.n	801c902 <ip4_reass+0x312>
  }

nullreturn:
 801c900:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801c902:	6878      	ldr	r0, [r7, #4]
 801c904:	f7f7 fdda 	bl	80144bc <pbuf_free>
  return NULL;
 801c908:	2300      	movs	r3, #0
}
 801c90a:	4618      	mov	r0, r3
 801c90c:	3738      	adds	r7, #56	@ 0x38
 801c90e:	46bd      	mov	sp, r7
 801c910:	bd80      	pop	{r7, pc}
 801c912:	bf00      	nop
 801c914:	08021a10 	.word	0x08021a10
 801c918:	08021b9c 	.word	0x08021b9c
 801c91c:	08021a58 	.word	0x08021a58
 801c920:	20027904 	.word	0x20027904
 801c924:	08021ba8 	.word	0x08021ba8

0801c928 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801c928:	b580      	push	{r7, lr}
 801c92a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801c92c:	2005      	movs	r0, #5
 801c92e:	f7f6 feab 	bl	8013688 <memp_malloc>
 801c932:	4603      	mov	r3, r0
}
 801c934:	4618      	mov	r0, r3
 801c936:	bd80      	pop	{r7, pc}

0801c938 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801c938:	b580      	push	{r7, lr}
 801c93a:	b082      	sub	sp, #8
 801c93c:	af00      	add	r7, sp, #0
 801c93e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801c940:	687b      	ldr	r3, [r7, #4]
 801c942:	2b00      	cmp	r3, #0
 801c944:	d106      	bne.n	801c954 <ip_frag_free_pbuf_custom_ref+0x1c>
 801c946:	4b07      	ldr	r3, [pc, #28]	@ (801c964 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c948:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801c94c:	4906      	ldr	r1, [pc, #24]	@ (801c968 <ip_frag_free_pbuf_custom_ref+0x30>)
 801c94e:	4807      	ldr	r0, [pc, #28]	@ (801c96c <ip_frag_free_pbuf_custom_ref+0x34>)
 801c950:	f001 fb9e 	bl	801e090 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801c954:	6879      	ldr	r1, [r7, #4]
 801c956:	2005      	movs	r0, #5
 801c958:	f7f6 ff0c 	bl	8013774 <memp_free>
}
 801c95c:	bf00      	nop
 801c95e:	3708      	adds	r7, #8
 801c960:	46bd      	mov	sp, r7
 801c962:	bd80      	pop	{r7, pc}
 801c964:	08021a10 	.word	0x08021a10
 801c968:	08021bc8 	.word	0x08021bc8
 801c96c:	08021a58 	.word	0x08021a58

0801c970 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801c970:	b580      	push	{r7, lr}
 801c972:	b084      	sub	sp, #16
 801c974:	af00      	add	r7, sp, #0
 801c976:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801c978:	687b      	ldr	r3, [r7, #4]
 801c97a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c97c:	68fb      	ldr	r3, [r7, #12]
 801c97e:	2b00      	cmp	r3, #0
 801c980:	d106      	bne.n	801c990 <ipfrag_free_pbuf_custom+0x20>
 801c982:	4b11      	ldr	r3, [pc, #68]	@ (801c9c8 <ipfrag_free_pbuf_custom+0x58>)
 801c984:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801c988:	4910      	ldr	r1, [pc, #64]	@ (801c9cc <ipfrag_free_pbuf_custom+0x5c>)
 801c98a:	4811      	ldr	r0, [pc, #68]	@ (801c9d0 <ipfrag_free_pbuf_custom+0x60>)
 801c98c:	f001 fb80 	bl	801e090 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801c990:	68fa      	ldr	r2, [r7, #12]
 801c992:	687b      	ldr	r3, [r7, #4]
 801c994:	429a      	cmp	r2, r3
 801c996:	d006      	beq.n	801c9a6 <ipfrag_free_pbuf_custom+0x36>
 801c998:	4b0b      	ldr	r3, [pc, #44]	@ (801c9c8 <ipfrag_free_pbuf_custom+0x58>)
 801c99a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801c99e:	490d      	ldr	r1, [pc, #52]	@ (801c9d4 <ipfrag_free_pbuf_custom+0x64>)
 801c9a0:	480b      	ldr	r0, [pc, #44]	@ (801c9d0 <ipfrag_free_pbuf_custom+0x60>)
 801c9a2:	f001 fb75 	bl	801e090 <iprintf>
  if (pcr->original != NULL) {
 801c9a6:	68fb      	ldr	r3, [r7, #12]
 801c9a8:	695b      	ldr	r3, [r3, #20]
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	d004      	beq.n	801c9b8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801c9ae:	68fb      	ldr	r3, [r7, #12]
 801c9b0:	695b      	ldr	r3, [r3, #20]
 801c9b2:	4618      	mov	r0, r3
 801c9b4:	f7f7 fd82 	bl	80144bc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801c9b8:	68f8      	ldr	r0, [r7, #12]
 801c9ba:	f7ff ffbd 	bl	801c938 <ip_frag_free_pbuf_custom_ref>
}
 801c9be:	bf00      	nop
 801c9c0:	3710      	adds	r7, #16
 801c9c2:	46bd      	mov	sp, r7
 801c9c4:	bd80      	pop	{r7, pc}
 801c9c6:	bf00      	nop
 801c9c8:	08021a10 	.word	0x08021a10
 801c9cc:	08021bd4 	.word	0x08021bd4
 801c9d0:	08021a58 	.word	0x08021a58
 801c9d4:	08021be0 	.word	0x08021be0

0801c9d8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801c9d8:	b580      	push	{r7, lr}
 801c9da:	b094      	sub	sp, #80	@ 0x50
 801c9dc:	af02      	add	r7, sp, #8
 801c9de:	60f8      	str	r0, [r7, #12]
 801c9e0:	60b9      	str	r1, [r7, #8]
 801c9e2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801c9e4:	2300      	movs	r3, #0
 801c9e6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801c9ea:	68bb      	ldr	r3, [r7, #8]
 801c9ec:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801c9ee:	3b14      	subs	r3, #20
 801c9f0:	2b00      	cmp	r3, #0
 801c9f2:	da00      	bge.n	801c9f6 <ip4_frag+0x1e>
 801c9f4:	3307      	adds	r3, #7
 801c9f6:	10db      	asrs	r3, r3, #3
 801c9f8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801c9fa:	2314      	movs	r3, #20
 801c9fc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801c9fe:	68fb      	ldr	r3, [r7, #12]
 801ca00:	685b      	ldr	r3, [r3, #4]
 801ca02:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801ca04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ca06:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801ca08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca0a:	781b      	ldrb	r3, [r3, #0]
 801ca0c:	f003 030f 	and.w	r3, r3, #15
 801ca10:	b2db      	uxtb	r3, r3
 801ca12:	009b      	lsls	r3, r3, #2
 801ca14:	b2db      	uxtb	r3, r3
 801ca16:	2b14      	cmp	r3, #20
 801ca18:	d002      	beq.n	801ca20 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801ca1a:	f06f 0305 	mvn.w	r3, #5
 801ca1e:	e110      	b.n	801cc42 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801ca20:	68fb      	ldr	r3, [r7, #12]
 801ca22:	895b      	ldrh	r3, [r3, #10]
 801ca24:	2b13      	cmp	r3, #19
 801ca26:	d809      	bhi.n	801ca3c <ip4_frag+0x64>
 801ca28:	4b88      	ldr	r3, [pc, #544]	@ (801cc4c <ip4_frag+0x274>)
 801ca2a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801ca2e:	4988      	ldr	r1, [pc, #544]	@ (801cc50 <ip4_frag+0x278>)
 801ca30:	4888      	ldr	r0, [pc, #544]	@ (801cc54 <ip4_frag+0x27c>)
 801ca32:	f001 fb2d 	bl	801e090 <iprintf>
 801ca36:	f06f 0305 	mvn.w	r3, #5
 801ca3a:	e102      	b.n	801cc42 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801ca3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca3e:	88db      	ldrh	r3, [r3, #6]
 801ca40:	b29b      	uxth	r3, r3
 801ca42:	4618      	mov	r0, r3
 801ca44:	f7f6 f94c 	bl	8012ce0 <lwip_htons>
 801ca48:	4603      	mov	r3, r0
 801ca4a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801ca4c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ca4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ca52:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801ca56:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ca58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801ca5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801ca5e:	68fb      	ldr	r3, [r7, #12]
 801ca60:	891b      	ldrh	r3, [r3, #8]
 801ca62:	3b14      	subs	r3, #20
 801ca64:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801ca68:	e0e1      	b.n	801cc2e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ca6a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ca6c:	00db      	lsls	r3, r3, #3
 801ca6e:	b29b      	uxth	r3, r3
 801ca70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ca74:	4293      	cmp	r3, r2
 801ca76:	bf28      	it	cs
 801ca78:	4613      	movcs	r3, r2
 801ca7a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ca7c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ca80:	2114      	movs	r1, #20
 801ca82:	200e      	movs	r0, #14
 801ca84:	f7f7 fa36 	bl	8013ef4 <pbuf_alloc>
 801ca88:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801ca8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca8c:	2b00      	cmp	r3, #0
 801ca8e:	f000 80d5 	beq.w	801cc3c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ca92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca94:	895b      	ldrh	r3, [r3, #10]
 801ca96:	2b13      	cmp	r3, #19
 801ca98:	d806      	bhi.n	801caa8 <ip4_frag+0xd0>
 801ca9a:	4b6c      	ldr	r3, [pc, #432]	@ (801cc4c <ip4_frag+0x274>)
 801ca9c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801caa0:	496d      	ldr	r1, [pc, #436]	@ (801cc58 <ip4_frag+0x280>)
 801caa2:	486c      	ldr	r0, [pc, #432]	@ (801cc54 <ip4_frag+0x27c>)
 801caa4:	f001 faf4 	bl	801e090 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801caa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801caaa:	685b      	ldr	r3, [r3, #4]
 801caac:	2214      	movs	r2, #20
 801caae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801cab0:	4618      	mov	r0, r3
 801cab2:	f001 fd18 	bl	801e4e6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801cab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cab8:	685b      	ldr	r3, [r3, #4]
 801caba:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801cabc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cabe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801cac2:	e064      	b.n	801cb8e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801cac4:	68fb      	ldr	r3, [r7, #12]
 801cac6:	895a      	ldrh	r2, [r3, #10]
 801cac8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801caca:	1ad3      	subs	r3, r2, r3
 801cacc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801cace:	68fb      	ldr	r3, [r7, #12]
 801cad0:	895b      	ldrh	r3, [r3, #10]
 801cad2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801cad4:	429a      	cmp	r2, r3
 801cad6:	d906      	bls.n	801cae6 <ip4_frag+0x10e>
 801cad8:	4b5c      	ldr	r3, [pc, #368]	@ (801cc4c <ip4_frag+0x274>)
 801cada:	f240 322d 	movw	r2, #813	@ 0x32d
 801cade:	495f      	ldr	r1, [pc, #380]	@ (801cc5c <ip4_frag+0x284>)
 801cae0:	485c      	ldr	r0, [pc, #368]	@ (801cc54 <ip4_frag+0x27c>)
 801cae2:	f001 fad5 	bl	801e090 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801cae6:	8bfa      	ldrh	r2, [r7, #30]
 801cae8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801caec:	4293      	cmp	r3, r2
 801caee:	bf28      	it	cs
 801caf0:	4613      	movcs	r3, r2
 801caf2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801caf6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cafa:	2b00      	cmp	r3, #0
 801cafc:	d105      	bne.n	801cb0a <ip4_frag+0x132>
        poff = 0;
 801cafe:	2300      	movs	r3, #0
 801cb00:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801cb02:	68fb      	ldr	r3, [r7, #12]
 801cb04:	681b      	ldr	r3, [r3, #0]
 801cb06:	60fb      	str	r3, [r7, #12]
        continue;
 801cb08:	e041      	b.n	801cb8e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801cb0a:	f7ff ff0d 	bl	801c928 <ip_frag_alloc_pbuf_custom_ref>
 801cb0e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801cb10:	69bb      	ldr	r3, [r7, #24]
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	d103      	bne.n	801cb1e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801cb16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cb18:	f7f7 fcd0 	bl	80144bc <pbuf_free>
        goto memerr;
 801cb1c:	e08f      	b.n	801cc3e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801cb1e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801cb20:	68fb      	ldr	r3, [r7, #12]
 801cb22:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801cb24:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801cb26:	4413      	add	r3, r2
 801cb28:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801cb2c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801cb30:	9201      	str	r2, [sp, #4]
 801cb32:	9300      	str	r3, [sp, #0]
 801cb34:	4603      	mov	r3, r0
 801cb36:	2241      	movs	r2, #65	@ 0x41
 801cb38:	2000      	movs	r0, #0
 801cb3a:	f7f7 fb05 	bl	8014148 <pbuf_alloced_custom>
 801cb3e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801cb40:	697b      	ldr	r3, [r7, #20]
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	d106      	bne.n	801cb54 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801cb46:	69b8      	ldr	r0, [r7, #24]
 801cb48:	f7ff fef6 	bl	801c938 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801cb4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cb4e:	f7f7 fcb5 	bl	80144bc <pbuf_free>
        goto memerr;
 801cb52:	e074      	b.n	801cc3e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801cb54:	68f8      	ldr	r0, [r7, #12]
 801cb56:	f7f7 fd57 	bl	8014608 <pbuf_ref>
      pcr->original = p;
 801cb5a:	69bb      	ldr	r3, [r7, #24]
 801cb5c:	68fa      	ldr	r2, [r7, #12]
 801cb5e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801cb60:	69bb      	ldr	r3, [r7, #24]
 801cb62:	4a3f      	ldr	r2, [pc, #252]	@ (801cc60 <ip4_frag+0x288>)
 801cb64:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801cb66:	6979      	ldr	r1, [r7, #20]
 801cb68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cb6a:	f7f7 fd75 	bl	8014658 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801cb6e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801cb72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cb76:	1ad3      	subs	r3, r2, r3
 801cb78:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801cb7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cb80:	2b00      	cmp	r3, #0
 801cb82:	d004      	beq.n	801cb8e <ip4_frag+0x1b6>
        poff = 0;
 801cb84:	2300      	movs	r3, #0
 801cb86:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801cb88:	68fb      	ldr	r3, [r7, #12]
 801cb8a:	681b      	ldr	r3, [r3, #0]
 801cb8c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801cb8e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cb92:	2b00      	cmp	r3, #0
 801cb94:	d196      	bne.n	801cac4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801cb96:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801cb98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cb9c:	4413      	add	r3, r2
 801cb9e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801cba0:	68bb      	ldr	r3, [r7, #8]
 801cba2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801cba4:	f1a3 0213 	sub.w	r2, r3, #19
 801cba8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801cbac:	429a      	cmp	r2, r3
 801cbae:	bfcc      	ite	gt
 801cbb0:	2301      	movgt	r3, #1
 801cbb2:	2300      	movle	r3, #0
 801cbb4:	b2db      	uxtb	r3, r3
 801cbb6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801cbb8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801cbbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cbc0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801cbc2:	6a3b      	ldr	r3, [r7, #32]
 801cbc4:	2b00      	cmp	r3, #0
 801cbc6:	d002      	beq.n	801cbce <ip4_frag+0x1f6>
 801cbc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cbca:	2b00      	cmp	r3, #0
 801cbcc:	d003      	beq.n	801cbd6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801cbce:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cbd0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801cbd4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801cbd6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cbd8:	4618      	mov	r0, r3
 801cbda:	f7f6 f881 	bl	8012ce0 <lwip_htons>
 801cbde:	4603      	mov	r3, r0
 801cbe0:	461a      	mov	r2, r3
 801cbe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbe4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801cbe6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cbe8:	3314      	adds	r3, #20
 801cbea:	b29b      	uxth	r3, r3
 801cbec:	4618      	mov	r0, r3
 801cbee:	f7f6 f877 	bl	8012ce0 <lwip_htons>
 801cbf2:	4603      	mov	r3, r0
 801cbf4:	461a      	mov	r2, r3
 801cbf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbf8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801cbfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbfc:	2200      	movs	r2, #0
 801cbfe:	729a      	strb	r2, [r3, #10]
 801cc00:	2200      	movs	r2, #0
 801cc02:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801cc04:	68bb      	ldr	r3, [r7, #8]
 801cc06:	695b      	ldr	r3, [r3, #20]
 801cc08:	687a      	ldr	r2, [r7, #4]
 801cc0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801cc0c:	68b8      	ldr	r0, [r7, #8]
 801cc0e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801cc10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cc12:	f7f7 fc53 	bl	80144bc <pbuf_free>
    left = (u16_t)(left - fragsize);
 801cc16:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801cc1a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cc1c:	1ad3      	subs	r3, r2, r3
 801cc1e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801cc22:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801cc26:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801cc28:	4413      	add	r3, r2
 801cc2a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801cc2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801cc32:	2b00      	cmp	r3, #0
 801cc34:	f47f af19 	bne.w	801ca6a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801cc38:	2300      	movs	r3, #0
 801cc3a:	e002      	b.n	801cc42 <ip4_frag+0x26a>
      goto memerr;
 801cc3c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801cc3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801cc42:	4618      	mov	r0, r3
 801cc44:	3748      	adds	r7, #72	@ 0x48
 801cc46:	46bd      	mov	sp, r7
 801cc48:	bd80      	pop	{r7, pc}
 801cc4a:	bf00      	nop
 801cc4c:	08021a10 	.word	0x08021a10
 801cc50:	08021bec 	.word	0x08021bec
 801cc54:	08021a58 	.word	0x08021a58
 801cc58:	08021c08 	.word	0x08021c08
 801cc5c:	08021c28 	.word	0x08021c28
 801cc60:	0801c971 	.word	0x0801c971

0801cc64 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801cc64:	b580      	push	{r7, lr}
 801cc66:	b086      	sub	sp, #24
 801cc68:	af00      	add	r7, sp, #0
 801cc6a:	6078      	str	r0, [r7, #4]
 801cc6c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801cc6e:	230e      	movs	r3, #14
 801cc70:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801cc72:	687b      	ldr	r3, [r7, #4]
 801cc74:	895b      	ldrh	r3, [r3, #10]
 801cc76:	2b0e      	cmp	r3, #14
 801cc78:	d96e      	bls.n	801cd58 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801cc7a:	687b      	ldr	r3, [r7, #4]
 801cc7c:	7bdb      	ldrb	r3, [r3, #15]
 801cc7e:	2b00      	cmp	r3, #0
 801cc80:	d106      	bne.n	801cc90 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801cc82:	683b      	ldr	r3, [r7, #0]
 801cc84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801cc88:	3301      	adds	r3, #1
 801cc8a:	b2da      	uxtb	r2, r3
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801cc90:	687b      	ldr	r3, [r7, #4]
 801cc92:	685b      	ldr	r3, [r3, #4]
 801cc94:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801cc96:	693b      	ldr	r3, [r7, #16]
 801cc98:	7b1a      	ldrb	r2, [r3, #12]
 801cc9a:	7b5b      	ldrb	r3, [r3, #13]
 801cc9c:	021b      	lsls	r3, r3, #8
 801cc9e:	4313      	orrs	r3, r2
 801cca0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801cca2:	693b      	ldr	r3, [r7, #16]
 801cca4:	781b      	ldrb	r3, [r3, #0]
 801cca6:	f003 0301 	and.w	r3, r3, #1
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	d023      	beq.n	801ccf6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801ccae:	693b      	ldr	r3, [r7, #16]
 801ccb0:	781b      	ldrb	r3, [r3, #0]
 801ccb2:	2b01      	cmp	r3, #1
 801ccb4:	d10f      	bne.n	801ccd6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ccb6:	693b      	ldr	r3, [r7, #16]
 801ccb8:	785b      	ldrb	r3, [r3, #1]
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	d11b      	bne.n	801ccf6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801ccbe:	693b      	ldr	r3, [r7, #16]
 801ccc0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ccc2:	2b5e      	cmp	r3, #94	@ 0x5e
 801ccc4:	d117      	bne.n	801ccf6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	7b5b      	ldrb	r3, [r3, #13]
 801ccca:	f043 0310 	orr.w	r3, r3, #16
 801ccce:	b2da      	uxtb	r2, r3
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	735a      	strb	r2, [r3, #13]
 801ccd4:	e00f      	b.n	801ccf6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801ccd6:	693b      	ldr	r3, [r7, #16]
 801ccd8:	2206      	movs	r2, #6
 801ccda:	4928      	ldr	r1, [pc, #160]	@ (801cd7c <ethernet_input+0x118>)
 801ccdc:	4618      	mov	r0, r3
 801ccde:	f001 fb1f 	bl	801e320 <memcmp>
 801cce2:	4603      	mov	r3, r0
 801cce4:	2b00      	cmp	r3, #0
 801cce6:	d106      	bne.n	801ccf6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801cce8:	687b      	ldr	r3, [r7, #4]
 801ccea:	7b5b      	ldrb	r3, [r3, #13]
 801ccec:	f043 0308 	orr.w	r3, r3, #8
 801ccf0:	b2da      	uxtb	r2, r3
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801ccf6:	89fb      	ldrh	r3, [r7, #14]
 801ccf8:	2b08      	cmp	r3, #8
 801ccfa:	d003      	beq.n	801cd04 <ethernet_input+0xa0>
 801ccfc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801cd00:	d014      	beq.n	801cd2c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801cd02:	e032      	b.n	801cd6a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801cd04:	683b      	ldr	r3, [r7, #0]
 801cd06:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801cd0a:	f003 0308 	and.w	r3, r3, #8
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	d024      	beq.n	801cd5c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801cd12:	8afb      	ldrh	r3, [r7, #22]
 801cd14:	4619      	mov	r1, r3
 801cd16:	6878      	ldr	r0, [r7, #4]
 801cd18:	f7f7 fb4a 	bl	80143b0 <pbuf_remove_header>
 801cd1c:	4603      	mov	r3, r0
 801cd1e:	2b00      	cmp	r3, #0
 801cd20:	d11e      	bne.n	801cd60 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801cd22:	6839      	ldr	r1, [r7, #0]
 801cd24:	6878      	ldr	r0, [r7, #4]
 801cd26:	f7fe ff21 	bl	801bb6c <ip4_input>
      break;
 801cd2a:	e013      	b.n	801cd54 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801cd2c:	683b      	ldr	r3, [r7, #0]
 801cd2e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801cd32:	f003 0308 	and.w	r3, r3, #8
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d014      	beq.n	801cd64 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801cd3a:	8afb      	ldrh	r3, [r7, #22]
 801cd3c:	4619      	mov	r1, r3
 801cd3e:	6878      	ldr	r0, [r7, #4]
 801cd40:	f7f7 fb36 	bl	80143b0 <pbuf_remove_header>
 801cd44:	4603      	mov	r3, r0
 801cd46:	2b00      	cmp	r3, #0
 801cd48:	d10e      	bne.n	801cd68 <ethernet_input+0x104>
        etharp_input(p, netif);
 801cd4a:	6839      	ldr	r1, [r7, #0]
 801cd4c:	6878      	ldr	r0, [r7, #4]
 801cd4e:	f7fe f8c1 	bl	801aed4 <etharp_input>
      break;
 801cd52:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801cd54:	2300      	movs	r3, #0
 801cd56:	e00c      	b.n	801cd72 <ethernet_input+0x10e>
    goto free_and_return;
 801cd58:	bf00      	nop
 801cd5a:	e006      	b.n	801cd6a <ethernet_input+0x106>
        goto free_and_return;
 801cd5c:	bf00      	nop
 801cd5e:	e004      	b.n	801cd6a <ethernet_input+0x106>
        goto free_and_return;
 801cd60:	bf00      	nop
 801cd62:	e002      	b.n	801cd6a <ethernet_input+0x106>
        goto free_and_return;
 801cd64:	bf00      	nop
 801cd66:	e000      	b.n	801cd6a <ethernet_input+0x106>
        goto free_and_return;
 801cd68:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801cd6a:	6878      	ldr	r0, [r7, #4]
 801cd6c:	f7f7 fba6 	bl	80144bc <pbuf_free>
  return ERR_OK;
 801cd70:	2300      	movs	r3, #0
}
 801cd72:	4618      	mov	r0, r3
 801cd74:	3718      	adds	r7, #24
 801cd76:	46bd      	mov	sp, r7
 801cd78:	bd80      	pop	{r7, pc}
 801cd7a:	bf00      	nop
 801cd7c:	080222f0 	.word	0x080222f0

0801cd80 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801cd80:	b580      	push	{r7, lr}
 801cd82:	b086      	sub	sp, #24
 801cd84:	af00      	add	r7, sp, #0
 801cd86:	60f8      	str	r0, [r7, #12]
 801cd88:	60b9      	str	r1, [r7, #8]
 801cd8a:	607a      	str	r2, [r7, #4]
 801cd8c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801cd8e:	8c3b      	ldrh	r3, [r7, #32]
 801cd90:	4618      	mov	r0, r3
 801cd92:	f7f5 ffa5 	bl	8012ce0 <lwip_htons>
 801cd96:	4603      	mov	r3, r0
 801cd98:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801cd9a:	210e      	movs	r1, #14
 801cd9c:	68b8      	ldr	r0, [r7, #8]
 801cd9e:	f7f7 faf7 	bl	8014390 <pbuf_add_header>
 801cda2:	4603      	mov	r3, r0
 801cda4:	2b00      	cmp	r3, #0
 801cda6:	d125      	bne.n	801cdf4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801cda8:	68bb      	ldr	r3, [r7, #8]
 801cdaa:	685b      	ldr	r3, [r3, #4]
 801cdac:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801cdae:	693b      	ldr	r3, [r7, #16]
 801cdb0:	8afa      	ldrh	r2, [r7, #22]
 801cdb2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801cdb4:	693b      	ldr	r3, [r7, #16]
 801cdb6:	2206      	movs	r2, #6
 801cdb8:	6839      	ldr	r1, [r7, #0]
 801cdba:	4618      	mov	r0, r3
 801cdbc:	f001 fb93 	bl	801e4e6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801cdc0:	693b      	ldr	r3, [r7, #16]
 801cdc2:	3306      	adds	r3, #6
 801cdc4:	2206      	movs	r2, #6
 801cdc6:	6879      	ldr	r1, [r7, #4]
 801cdc8:	4618      	mov	r0, r3
 801cdca:	f001 fb8c 	bl	801e4e6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801cdce:	68fb      	ldr	r3, [r7, #12]
 801cdd0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801cdd4:	2b06      	cmp	r3, #6
 801cdd6:	d006      	beq.n	801cde6 <ethernet_output+0x66>
 801cdd8:	4b0a      	ldr	r3, [pc, #40]	@ (801ce04 <ethernet_output+0x84>)
 801cdda:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801cdde:	490a      	ldr	r1, [pc, #40]	@ (801ce08 <ethernet_output+0x88>)
 801cde0:	480a      	ldr	r0, [pc, #40]	@ (801ce0c <ethernet_output+0x8c>)
 801cde2:	f001 f955 	bl	801e090 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801cde6:	68fb      	ldr	r3, [r7, #12]
 801cde8:	699b      	ldr	r3, [r3, #24]
 801cdea:	68b9      	ldr	r1, [r7, #8]
 801cdec:	68f8      	ldr	r0, [r7, #12]
 801cdee:	4798      	blx	r3
 801cdf0:	4603      	mov	r3, r0
 801cdf2:	e002      	b.n	801cdfa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801cdf4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801cdf6:	f06f 0301 	mvn.w	r3, #1
}
 801cdfa:	4618      	mov	r0, r3
 801cdfc:	3718      	adds	r7, #24
 801cdfe:	46bd      	mov	sp, r7
 801ce00:	bd80      	pop	{r7, pc}
 801ce02:	bf00      	nop
 801ce04:	08021c38 	.word	0x08021c38
 801ce08:	08021c70 	.word	0x08021c70
 801ce0c:	08021ca4 	.word	0x08021ca4

0801ce10 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801ce10:	b580      	push	{r7, lr}
 801ce12:	b082      	sub	sp, #8
 801ce14:	af00      	add	r7, sp, #0
 801ce16:	6078      	str	r0, [r7, #4]
 801ce18:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801ce1a:	683b      	ldr	r3, [r7, #0]
 801ce1c:	2200      	movs	r2, #0
 801ce1e:	2104      	movs	r1, #4
 801ce20:	4618      	mov	r0, r3
 801ce22:	f7f2 f8ef 	bl	800f004 <osMessageQueueNew>
 801ce26:	4602      	mov	r2, r0
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801ce2c:	687b      	ldr	r3, [r7, #4]
 801ce2e:	681b      	ldr	r3, [r3, #0]
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	d102      	bne.n	801ce3a <sys_mbox_new+0x2a>
    return ERR_MEM;
 801ce34:	f04f 33ff 	mov.w	r3, #4294967295
 801ce38:	e000      	b.n	801ce3c <sys_mbox_new+0x2c>

  return ERR_OK;
 801ce3a:	2300      	movs	r3, #0
}
 801ce3c:	4618      	mov	r0, r3
 801ce3e:	3708      	adds	r7, #8
 801ce40:	46bd      	mov	sp, r7
 801ce42:	bd80      	pop	{r7, pc}

0801ce44 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801ce44:	b580      	push	{r7, lr}
 801ce46:	b084      	sub	sp, #16
 801ce48:	af00      	add	r7, sp, #0
 801ce4a:	6078      	str	r0, [r7, #4]
 801ce4c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	6818      	ldr	r0, [r3, #0]
 801ce52:	4639      	mov	r1, r7
 801ce54:	2300      	movs	r3, #0
 801ce56:	2200      	movs	r2, #0
 801ce58:	f7f2 f95a 	bl	800f110 <osMessageQueuePut>
 801ce5c:	4603      	mov	r3, r0
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	d102      	bne.n	801ce68 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801ce62:	2300      	movs	r3, #0
 801ce64:	73fb      	strb	r3, [r7, #15]
 801ce66:	e001      	b.n	801ce6c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801ce68:	23ff      	movs	r3, #255	@ 0xff
 801ce6a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801ce6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ce70:	4618      	mov	r0, r3
 801ce72:	3710      	adds	r7, #16
 801ce74:	46bd      	mov	sp, r7
 801ce76:	bd80      	pop	{r7, pc}

0801ce78 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801ce78:	b580      	push	{r7, lr}
 801ce7a:	b086      	sub	sp, #24
 801ce7c:	af00      	add	r7, sp, #0
 801ce7e:	60f8      	str	r0, [r7, #12]
 801ce80:	60b9      	str	r1, [r7, #8]
 801ce82:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801ce84:	f7f1 fd20 	bl	800e8c8 <osKernelGetTickCount>
 801ce88:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801ce8a:	687b      	ldr	r3, [r7, #4]
 801ce8c:	2b00      	cmp	r3, #0
 801ce8e:	d013      	beq.n	801ceb8 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801ce90:	68fb      	ldr	r3, [r7, #12]
 801ce92:	6818      	ldr	r0, [r3, #0]
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	2200      	movs	r2, #0
 801ce98:	68b9      	ldr	r1, [r7, #8]
 801ce9a:	f7f2 f9ad 	bl	800f1f8 <osMessageQueueGet>
 801ce9e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801cea0:	693b      	ldr	r3, [r7, #16]
 801cea2:	2b00      	cmp	r3, #0
 801cea4:	d105      	bne.n	801ceb2 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801cea6:	f7f1 fd0f 	bl	800e8c8 <osKernelGetTickCount>
 801ceaa:	4602      	mov	r2, r0
 801ceac:	697b      	ldr	r3, [r7, #20]
 801ceae:	1ad3      	subs	r3, r2, r3
 801ceb0:	e00f      	b.n	801ced2 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ceb2:	f04f 33ff 	mov.w	r3, #4294967295
 801ceb6:	e00c      	b.n	801ced2 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801ceb8:	68fb      	ldr	r3, [r7, #12]
 801ceba:	6818      	ldr	r0, [r3, #0]
 801cebc:	f04f 33ff 	mov.w	r3, #4294967295
 801cec0:	2200      	movs	r2, #0
 801cec2:	68b9      	ldr	r1, [r7, #8]
 801cec4:	f7f2 f998 	bl	800f1f8 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801cec8:	f7f1 fcfe 	bl	800e8c8 <osKernelGetTickCount>
 801cecc:	4602      	mov	r2, r0
 801cece:	697b      	ldr	r3, [r7, #20]
 801ced0:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801ced2:	4618      	mov	r0, r3
 801ced4:	3718      	adds	r7, #24
 801ced6:	46bd      	mov	sp, r7
 801ced8:	bd80      	pop	{r7, pc}

0801ceda <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801ceda:	b480      	push	{r7}
 801cedc:	b083      	sub	sp, #12
 801cede:	af00      	add	r7, sp, #0
 801cee0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801cee2:	687b      	ldr	r3, [r7, #4]
 801cee4:	681b      	ldr	r3, [r3, #0]
 801cee6:	2b00      	cmp	r3, #0
 801cee8:	d101      	bne.n	801ceee <sys_mbox_valid+0x14>
    return 0;
 801ceea:	2300      	movs	r3, #0
 801ceec:	e000      	b.n	801cef0 <sys_mbox_valid+0x16>
  else
    return 1;
 801ceee:	2301      	movs	r3, #1
}
 801cef0:	4618      	mov	r0, r3
 801cef2:	370c      	adds	r7, #12
 801cef4:	46bd      	mov	sp, r7
 801cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cefa:	4770      	bx	lr

0801cefc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801cefc:	b580      	push	{r7, lr}
 801cefe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801cf00:	2000      	movs	r0, #0
 801cf02:	f7f1 fddd 	bl	800eac0 <osMutexNew>
 801cf06:	4603      	mov	r3, r0
 801cf08:	4a01      	ldr	r2, [pc, #4]	@ (801cf10 <sys_init+0x14>)
 801cf0a:	6013      	str	r3, [r2, #0]
#endif
}
 801cf0c:	bf00      	nop
 801cf0e:	bd80      	pop	{r7, pc}
 801cf10:	2002790c 	.word	0x2002790c

0801cf14 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801cf14:	b580      	push	{r7, lr}
 801cf16:	b082      	sub	sp, #8
 801cf18:	af00      	add	r7, sp, #0
 801cf1a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801cf1c:	2000      	movs	r0, #0
 801cf1e:	f7f1 fdcf 	bl	800eac0 <osMutexNew>
 801cf22:	4602      	mov	r2, r0
 801cf24:	687b      	ldr	r3, [r7, #4]
 801cf26:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801cf28:	687b      	ldr	r3, [r7, #4]
 801cf2a:	681b      	ldr	r3, [r3, #0]
 801cf2c:	2b00      	cmp	r3, #0
 801cf2e:	d102      	bne.n	801cf36 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801cf30:	f04f 33ff 	mov.w	r3, #4294967295
 801cf34:	e000      	b.n	801cf38 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801cf36:	2300      	movs	r3, #0
}
 801cf38:	4618      	mov	r0, r3
 801cf3a:	3708      	adds	r7, #8
 801cf3c:	46bd      	mov	sp, r7
 801cf3e:	bd80      	pop	{r7, pc}

0801cf40 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801cf40:	b580      	push	{r7, lr}
 801cf42:	b082      	sub	sp, #8
 801cf44:	af00      	add	r7, sp, #0
 801cf46:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801cf48:	687b      	ldr	r3, [r7, #4]
 801cf4a:	681b      	ldr	r3, [r3, #0]
 801cf4c:	f04f 31ff 	mov.w	r1, #4294967295
 801cf50:	4618      	mov	r0, r3
 801cf52:	f7f1 fe4f 	bl	800ebf4 <osMutexAcquire>
#endif
}
 801cf56:	bf00      	nop
 801cf58:	3708      	adds	r7, #8
 801cf5a:	46bd      	mov	sp, r7
 801cf5c:	bd80      	pop	{r7, pc}

0801cf5e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801cf5e:	b580      	push	{r7, lr}
 801cf60:	b082      	sub	sp, #8
 801cf62:	af00      	add	r7, sp, #0
 801cf64:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	681b      	ldr	r3, [r3, #0]
 801cf6a:	4618      	mov	r0, r3
 801cf6c:	f7f1 fea0 	bl	800ecb0 <osMutexRelease>
}
 801cf70:	bf00      	nop
 801cf72:	3708      	adds	r7, #8
 801cf74:	46bd      	mov	sp, r7
 801cf76:	bd80      	pop	{r7, pc}

0801cf78 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801cf78:	b580      	push	{r7, lr}
 801cf7a:	b08e      	sub	sp, #56	@ 0x38
 801cf7c:	af00      	add	r7, sp, #0
 801cf7e:	60f8      	str	r0, [r7, #12]
 801cf80:	60b9      	str	r1, [r7, #8]
 801cf82:	607a      	str	r2, [r7, #4]
 801cf84:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801cf86:	f107 0314 	add.w	r3, r7, #20
 801cf8a:	2224      	movs	r2, #36	@ 0x24
 801cf8c:	2100      	movs	r1, #0
 801cf8e:	4618      	mov	r0, r3
 801cf90:	f001 f9d6 	bl	801e340 <memset>
 801cf94:	68fb      	ldr	r3, [r7, #12]
 801cf96:	617b      	str	r3, [r7, #20]
 801cf98:	683b      	ldr	r3, [r7, #0]
 801cf9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801cf9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cf9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801cfa0:	f107 0314 	add.w	r3, r7, #20
 801cfa4:	461a      	mov	r2, r3
 801cfa6:	6879      	ldr	r1, [r7, #4]
 801cfa8:	68b8      	ldr	r0, [r7, #8]
 801cfaa:	f7f1 fcb5 	bl	800e918 <osThreadNew>
 801cfae:	4603      	mov	r3, r0
#endif
}
 801cfb0:	4618      	mov	r0, r3
 801cfb2:	3738      	adds	r7, #56	@ 0x38
 801cfb4:	46bd      	mov	sp, r7
 801cfb6:	bd80      	pop	{r7, pc}

0801cfb8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801cfb8:	b580      	push	{r7, lr}
 801cfba:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801cfbc:	4b04      	ldr	r3, [pc, #16]	@ (801cfd0 <sys_arch_protect+0x18>)
 801cfbe:	681b      	ldr	r3, [r3, #0]
 801cfc0:	f04f 31ff 	mov.w	r1, #4294967295
 801cfc4:	4618      	mov	r0, r3
 801cfc6:	f7f1 fe15 	bl	800ebf4 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801cfca:	2301      	movs	r3, #1
}
 801cfcc:	4618      	mov	r0, r3
 801cfce:	bd80      	pop	{r7, pc}
 801cfd0:	2002790c 	.word	0x2002790c

0801cfd4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801cfd4:	b580      	push	{r7, lr}
 801cfd6:	b082      	sub	sp, #8
 801cfd8:	af00      	add	r7, sp, #0
 801cfda:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801cfdc:	4b04      	ldr	r3, [pc, #16]	@ (801cff0 <sys_arch_unprotect+0x1c>)
 801cfde:	681b      	ldr	r3, [r3, #0]
 801cfe0:	4618      	mov	r0, r3
 801cfe2:	f7f1 fe65 	bl	800ecb0 <osMutexRelease>
}
 801cfe6:	bf00      	nop
 801cfe8:	3708      	adds	r7, #8
 801cfea:	46bd      	mov	sp, r7
 801cfec:	bd80      	pop	{r7, pc}
 801cfee:	bf00      	nop
 801cff0:	2002790c 	.word	0x2002790c

0801cff4 <adc_testing>:
/*
 * @brief Performs a test on the ADC peripheral using the command protocol.
 * @param command: A pointer to the test_command_t struct.
 * @retval result_t: The result of the test (TEST_PASS or TEST_FAIL).
 */
Result adc_testing(test_command_t* command){
 801cff4:	b580      	push	{r7, lr}
 801cff6:	b088      	sub	sp, #32
 801cff8:	af00      	add	r7, sp, #0
 801cffa:	6078      	str	r0, [r7, #4]
	uint32_t adc_value;
    int32_t difference;
    HAL_StatusTypeDef status;

    // Check for valid command and bit pattern length
	if (command == NULL) {
 801cffc:	687b      	ldr	r3, [r7, #4]
 801cffe:	2b00      	cmp	r3, #0
 801d000:	d102      	bne.n	801d008 <adc_testing+0x14>
//        printf("ADC_TEST: Received NULL command pointer. Skipping.\n\r"); // Debug printf
        return TEST_ERR;
 801d002:	f04f 33ff 	mov.w	r3, #4294967295
 801d006:	e087      	b.n	801d118 <adc_testing+0x124>
	}
	uint32_t expected_adc_result = command->bit_pattern[0];
 801d008:	687b      	ldr	r3, [r7, #4]
 801d00a:	79db      	ldrb	r3, [r3, #7]
 801d00c:	61fb      	str	r3, [r7, #28]
	uint32_t adc_tolerance = (uint32_t)(expected_adc_result * TOLERANCE_PERCENT);
 801d00e:	69fb      	ldr	r3, [r7, #28]
 801d010:	ee07 3a90 	vmov	s15, r3
 801d014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d018:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 801d120 <adc_testing+0x12c>
 801d01c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d024:	ee17 3a90 	vmov	r3, s15
 801d028:	61bb      	str	r3, [r7, #24]

    status = HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 801d02a:	2100      	movs	r1, #0
 801d02c:	483d      	ldr	r0, [pc, #244]	@ (801d124 <adc_testing+0x130>)
 801d02e:	f7e6 fc35 	bl	800389c <HAL_DAC_Start>
 801d032:	4603      	mov	r3, r0
 801d034:	75bb      	strb	r3, [r7, #22]
    if (status != HAL_OK) {
 801d036:	7dbb      	ldrb	r3, [r7, #22]
 801d038:	2b00      	cmp	r3, #0
 801d03a:	d001      	beq.n	801d040 <adc_testing+0x4c>
//        printf("Error: Failed to start DAC conversion. Status: %d\n\r", status); // Debug printf
        return TEST_FAIL;
 801d03c:	23ff      	movs	r3, #255	@ 0xff
 801d03e:	e06b      	b.n	801d118 <adc_testing+0x124>
    }

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801d040:	2300      	movs	r3, #0
 801d042:	75fb      	strb	r3, [r7, #23]
 801d044:	e062      	b.n	801d10c <adc_testing+0x118>

		if(i < command->bit_pattern_length){
 801d046:	687b      	ldr	r3, [r7, #4]
 801d048:	799b      	ldrb	r3, [r3, #6]
 801d04a:	7dfa      	ldrb	r2, [r7, #23]
 801d04c:	429a      	cmp	r2, r3
 801d04e:	d214      	bcs.n	801d07a <adc_testing+0x86>
			// Extract the 8-bit expected ADC value from the command's bit pattern
		    expected_adc_result = command->bit_pattern[i];
 801d050:	7dfb      	ldrb	r3, [r7, #23]
 801d052:	687a      	ldr	r2, [r7, #4]
 801d054:	4413      	add	r3, r2
 801d056:	79db      	ldrb	r3, [r3, #7]
 801d058:	61fb      	str	r3, [r7, #28]
		    // Define a tolerance based on the expected result.
		    adc_tolerance = (uint8_t)(expected_adc_result * TOLERANCE_PERCENT);
 801d05a:	69fb      	ldr	r3, [r7, #28]
 801d05c:	ee07 3a90 	vmov	s15, r3
 801d060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d064:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 801d120 <adc_testing+0x12c>
 801d068:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d06c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d070:	edc7 7a00 	vstr	s15, [r7]
 801d074:	783b      	ldrb	r3, [r7, #0]
 801d076:	b2db      	uxtb	r3, r3
 801d078:	61bb      	str	r3, [r7, #24]
		}

	    // Set value to DAC and run
	    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_8B_R, expected_adc_result);
 801d07a:	69fb      	ldr	r3, [r7, #28]
 801d07c:	2208      	movs	r2, #8
 801d07e:	2100      	movs	r1, #0
 801d080:	4828      	ldr	r0, [pc, #160]	@ (801d124 <adc_testing+0x130>)
 801d082:	f7e6 fcb8 	bl	80039f6 <HAL_DAC_SetValue>
	    HAL_Delay(1); // allow DAC to settle
 801d086:	2001      	movs	r0, #1
 801d088:	f7e5 fbc4 	bl	8002814 <HAL_Delay>

	    // Start ADC conversion
	    status = HAL_ADC_Start_IT(&hadc1);
 801d08c:	4826      	ldr	r0, [pc, #152]	@ (801d128 <adc_testing+0x134>)
 801d08e:	f7e5 fc5d 	bl	800294c <HAL_ADC_Start_IT>
 801d092:	4603      	mov	r3, r0
 801d094:	75bb      	strb	r3, [r7, #22]
	    if (status != HAL_OK) {
 801d096:	7dbb      	ldrb	r3, [r7, #22]
 801d098:	2b00      	cmp	r3, #0
 801d09a:	d004      	beq.n	801d0a6 <adc_testing+0xb2>
//	        printf("Error: Failed to start ADC conversion. Status: %d\n\r", status); // Debug printf
	    	HAL_ADC_Stop(&hadc1);
 801d09c:	4822      	ldr	r0, [pc, #136]	@ (801d128 <adc_testing+0x134>)
 801d09e:	f7e5 fc21 	bl	80028e4 <HAL_ADC_Stop>
	        return TEST_FAIL;
 801d0a2:	23ff      	movs	r3, #255	@ 0xff
 801d0a4:	e038      	b.n	801d118 <adc_testing+0x124>
	    }

	    // waiting for the ADC conversion to complete and give a semaphore
	    if (xSemaphoreTake(AdcSemHandle, HAL_MAX_DELAY) == pdPASS){
 801d0a6:	4b21      	ldr	r3, [pc, #132]	@ (801d12c <adc_testing+0x138>)
 801d0a8:	681b      	ldr	r3, [r3, #0]
 801d0aa:	f04f 31ff 	mov.w	r1, #4294967295
 801d0ae:	4618      	mov	r0, r3
 801d0b0:	f7f2 ffb6 	bl	8010020 <xQueueSemaphoreTake>
 801d0b4:	4603      	mov	r3, r0
 801d0b6:	2b01      	cmp	r3, #1
 801d0b8:	d111      	bne.n	801d0de <adc_testing+0xea>
		  // Get the converted value
		  adc_value = HAL_ADC_GetValue(&hadc1);
 801d0ba:	481b      	ldr	r0, [pc, #108]	@ (801d128 <adc_testing+0x134>)
 801d0bc:	f7e5 fe2e 	bl	8002d1c <HAL_ADC_GetValue>
 801d0c0:	6138      	str	r0, [r7, #16]
	         HAL_ADC_Stop(&hadc1);
	         return TEST_FAIL;
		}

		// Compare the result with the expected value, within a tolerance
		difference = adc_value - expected_adc_result;
 801d0c2:	693a      	ldr	r2, [r7, #16]
 801d0c4:	69fb      	ldr	r3, [r7, #28]
 801d0c6:	1ad3      	subs	r3, r2, r3
 801d0c8:	60fb      	str	r3, [r7, #12]
		difference = (difference < 0) ? -difference : difference; //absolute value of the difference
 801d0ca:	68fb      	ldr	r3, [r7, #12]
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	bfb8      	it	lt
 801d0d0:	425b      	neglt	r3, r3
 801d0d2:	60fb      	str	r3, [r7, #12]

		if (difference > adc_tolerance)
 801d0d4:	68fb      	ldr	r3, [r7, #12]
 801d0d6:	69ba      	ldr	r2, [r7, #24]
 801d0d8:	429a      	cmp	r2, r3
 801d0da:	d20a      	bcs.n	801d0f2 <adc_testing+0xfe>
 801d0dc:	e004      	b.n	801d0e8 <adc_testing+0xf4>
	         HAL_ADC_Stop(&hadc1);
 801d0de:	4812      	ldr	r0, [pc, #72]	@ (801d128 <adc_testing+0x134>)
 801d0e0:	f7e5 fc00 	bl	80028e4 <HAL_ADC_Stop>
	         return TEST_FAIL;
 801d0e4:	23ff      	movs	r3, #255	@ 0xff
 801d0e6:	e017      	b.n	801d118 <adc_testing+0x124>
		{
//			  printf("Test failed on iteration %u- Expected Value: %u, ADC value: %lu.\n\r",i+1, expected_adc_result, adc_value); // Debug printf
			  HAL_ADC_Stop(&hadc1);
 801d0e8:	480f      	ldr	r0, [pc, #60]	@ (801d128 <adc_testing+0x134>)
 801d0ea:	f7e5 fbfb 	bl	80028e4 <HAL_ADC_Stop>
			  return TEST_FAIL;
 801d0ee:	23ff      	movs	r3, #255	@ 0xff
 801d0f0:	e012      	b.n	801d118 <adc_testing+0x124>
//				// Debug printf
//			  printf("ADC value is within tolerance for iteration %u\n\r", i+1);
//			  printf("Expected value=%d >> ADC value =%ld \n\r", expected_adc_result, adc_value);
		}
		// Stop the ADC conversion
		status = HAL_ADC_Stop(&hadc1);
 801d0f2:	480d      	ldr	r0, [pc, #52]	@ (801d128 <adc_testing+0x134>)
 801d0f4:	f7e5 fbf6 	bl	80028e4 <HAL_ADC_Stop>
 801d0f8:	4603      	mov	r3, r0
 801d0fa:	75bb      	strb	r3, [r7, #22]
		if (status != HAL_OK) {
 801d0fc:	7dbb      	ldrb	r3, [r7, #22]
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	d001      	beq.n	801d106 <adc_testing+0x112>
//			printf("Warning: Failed to stop ADC conversion. Status: %d\n\r", status); // Debug printf
	         return TEST_FAIL;
 801d102:	23ff      	movs	r3, #255	@ 0xff
 801d104:	e008      	b.n	801d118 <adc_testing+0x124>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 801d106:	7dfb      	ldrb	r3, [r7, #23]
 801d108:	3301      	adds	r3, #1
 801d10a:	75fb      	strb	r3, [r7, #23]
 801d10c:	687b      	ldr	r3, [r7, #4]
 801d10e:	795b      	ldrb	r3, [r3, #5]
 801d110:	7dfa      	ldrb	r2, [r7, #23]
 801d112:	429a      	cmp	r2, r3
 801d114:	d397      	bcc.n	801d046 <adc_testing+0x52>
		}
	} // end of iterations

	return TEST_PASS;
 801d116:	2301      	movs	r3, #1
}
 801d118:	4618      	mov	r0, r3
 801d11a:	3720      	adds	r7, #32
 801d11c:	46bd      	mov	sp, r7
 801d11e:	bd80      	pop	{r7, pc}
 801d120:	3dcccccd 	.word	0x3dcccccd
 801d124:	20000254 	.word	0x20000254
 801d128:	200001e8 	.word	0x200001e8
 801d12c:	20000dc4 	.word	0x20000dc4

0801d130 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801d130:	b580      	push	{r7, lr}
 801d132:	b084      	sub	sp, #16
 801d134:	af00      	add	r7, sp, #0
 801d136:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d138:	2300      	movs	r3, #0
 801d13a:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(AdcSemHandle, &xHigherPriorityTaskWoken);
 801d13c:	4b0b      	ldr	r3, [pc, #44]	@ (801d16c <HAL_ADC_ConvCpltCallback+0x3c>)
 801d13e:	681b      	ldr	r3, [r3, #0]
 801d140:	f107 020c 	add.w	r2, r7, #12
 801d144:	4611      	mov	r1, r2
 801d146:	4618      	mov	r0, r3
 801d148:	f7f2 fde9 	bl	800fd1e <xQueueGiveFromISR>
//	printf("ADC complete callback fired and gave a semaphore\n\r"); // Debug printf
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d14c:	68fb      	ldr	r3, [r7, #12]
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d007      	beq.n	801d162 <HAL_ADC_ConvCpltCallback+0x32>
 801d152:	4b07      	ldr	r3, [pc, #28]	@ (801d170 <HAL_ADC_ConvCpltCallback+0x40>)
 801d154:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d158:	601a      	str	r2, [r3, #0]
 801d15a:	f3bf 8f4f 	dsb	sy
 801d15e:	f3bf 8f6f 	isb	sy
}
 801d162:	bf00      	nop
 801d164:	3710      	adds	r7, #16
 801d166:	46bd      	mov	sp, r7
 801d168:	bd80      	pop	{r7, pc}
 801d16a:	bf00      	nop
 801d16c:	20000dc4 	.word	0x20000dc4
 801d170:	e000ed04 	.word	0xe000ed04

0801d174 <i2c_testing>:
/*
 * @brief Performs a test on the I2C peripheral using the command protocol.
 * @param command: A pointer to the test_command_t struct.
 * @retval result_t: The result of the test (TEST_PASS or TEST_FAIL).
 */
Result i2c_testing(test_command_t* command){
 801d174:	b580      	push	{r7, lr}
 801d176:	f5ad 7d46 	sub.w	sp, sp, #792	@ 0x318
 801d17a:	af00      	add	r7, sp, #0
 801d17c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d180:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d184:	6018      	str	r0, [r3, #0]

	uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801d186:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d18a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801d18e:	4618      	mov	r0, r3
 801d190:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801d194:	461a      	mov	r2, r3
 801d196:	2100      	movs	r1, #0
 801d198:	f001 f8d2 	bl	801e340 <memset>
	uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801d19c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d1a0:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801d1a4:	4618      	mov	r0, r3
 801d1a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801d1aa:	461a      	mov	r2, r3
 801d1ac:	2100      	movs	r1, #0
 801d1ae:	f001 f8c7 	bl	801e340 <memset>
	uint8_t echo_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801d1b2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d1b6:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 801d1ba:	4618      	mov	r0, r3
 801d1bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801d1c0:	461a      	mov	r2, r3
 801d1c2:	2100      	movs	r1, #0
 801d1c4:	f001 f8bc 	bl	801e340 <memset>

	HAL_StatusTypeDef status;

	if (command == NULL) {
 801d1c8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d1cc:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d1d0:	681b      	ldr	r3, [r3, #0]
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d102      	bne.n	801d1dc <i2c_testing+0x68>
//        printf("I2C_TEST: Received NULL command pointer. Skipping.\n\r"); // Debug printf
        return TEST_ERR;
 801d1d6:	f04f 33ff 	mov.w	r3, #4294967295
 801d1da:	e128      	b.n	801d42e <i2c_testing+0x2ba>
	}

    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 801d1dc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d1e0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d1e4:	681b      	ldr	r3, [r3, #0]
 801d1e6:	1dd9      	adds	r1, r3, #7
 801d1e8:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d1ec:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d1f0:	681b      	ldr	r3, [r3, #0]
 801d1f2:	799b      	ldrb	r3, [r3, #6]
 801d1f4:	461a      	mov	r2, r3
 801d1f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801d1fa:	4618      	mov	r0, r3
 801d1fc:	f001 f973 	bl	801e4e6 <memcpy>

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801d200:	2300      	movs	r3, #0
 801d202:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
 801d206:	e106      	b.n	801d416 <i2c_testing+0x2a2>
//	    printf("I2C_TEST: Iteration %u/%u -\n\r", i + 1, command->iterations); // Debug printf
	    memset(rx_buffer, 0, command->bit_pattern_length);
 801d208:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d20c:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d210:	681b      	ldr	r3, [r3, #0]
 801d212:	799b      	ldrb	r3, [r3, #6]
 801d214:	461a      	mov	r2, r3
 801d216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801d21a:	2100      	movs	r1, #0
 801d21c:	4618      	mov	r0, r3
 801d21e:	f001 f88f 	bl	801e340 <memset>

	    // --- 1. START RECEIVE DMA FIRST (SLAVE) ---
	    status = HAL_I2C_Slave_Receive_DMA(I2C_RECEIVER, echo_buffer, command->bit_pattern_length);
 801d222:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d226:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d22a:	681b      	ldr	r3, [r3, #0]
 801d22c:	799b      	ldrb	r3, [r3, #6]
 801d22e:	461a      	mov	r2, r3
 801d230:	f107 0308 	add.w	r3, r7, #8
 801d234:	4619      	mov	r1, r3
 801d236:	4880      	ldr	r0, [pc, #512]	@ (801d438 <i2c_testing+0x2c4>)
 801d238:	f7e9 f93a 	bl	80064b0 <HAL_I2C_Slave_Receive_DMA>
 801d23c:	4603      	mov	r3, r0
 801d23e:	f887 3316 	strb.w	r3, [r7, #790]	@ 0x316
	    if (status != HAL_OK) {
 801d242:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d246:	2b00      	cmp	r3, #0
 801d248:	d007      	beq.n	801d25a <i2c_testing+0xe6>
	        printf("Failed to start slave receive DMA: %d\n\r", status); // Debug printf
 801d24a:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d24e:	4619      	mov	r1, r3
 801d250:	487a      	ldr	r0, [pc, #488]	@ (801d43c <i2c_testing+0x2c8>)
 801d252:	f000 ff1d 	bl	801e090 <iprintf>
	        return TEST_FAIL;
 801d256:	23ff      	movs	r3, #255	@ 0xff
 801d258:	e0e9      	b.n	801d42e <i2c_testing+0x2ba>
	    }

	    // --- 2. TRANSMIT a block of data via DMA (MASTER) ---
	    status = HAL_I2C_Master_Transmit_DMA(I2C_SENDER, I2C_SLAVE_ADDR, tx_buffer, command->bit_pattern_length);
 801d25a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d25e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d262:	681b      	ldr	r3, [r3, #0]
 801d264:	799b      	ldrb	r3, [r3, #6]
 801d266:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 801d26a:	21f0      	movs	r1, #240	@ 0xf0
 801d26c:	4874      	ldr	r0, [pc, #464]	@ (801d440 <i2c_testing+0x2cc>)
 801d26e:	f7e9 f80b 	bl	8006288 <HAL_I2C_Master_Transmit_DMA>
 801d272:	4603      	mov	r3, r0
 801d274:	f887 3316 	strb.w	r3, [r7, #790]	@ 0x316
	    if (status != HAL_OK) {
 801d278:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	d00d      	beq.n	801d29c <i2c_testing+0x128>
	        printf("Failed to send DMA on I2C sender: %d\n\r", status); // Debug printf
 801d280:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d284:	4619      	mov	r1, r3
 801d286:	486f      	ldr	r0, [pc, #444]	@ (801d444 <i2c_testing+0x2d0>)
 801d288:	f000 ff02 	bl	801e090 <iprintf>
	        i2c_reset(I2C_SENDER); // Reset the Master on error
 801d28c:	486c      	ldr	r0, [pc, #432]	@ (801d440 <i2c_testing+0x2cc>)
 801d28e:	f000 f93d 	bl	801d50c <i2c_reset>
	        i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution
 801d292:	4869      	ldr	r0, [pc, #420]	@ (801d438 <i2c_testing+0x2c4>)
 801d294:	f000 f93a 	bl	801d50c <i2c_reset>
	        return TEST_FAIL;
 801d298:	23ff      	movs	r3, #255	@ 0xff
 801d29a:	e0c8      	b.n	801d42e <i2c_testing+0x2ba>
	    }

	    // --- 3. WAIT FOR BOTH TX DMA COMPLETION ---
	    if (xSemaphoreTake(I2cTxHandle, TIMEOUT) != pdPASS) {
 801d29c:	4b6a      	ldr	r3, [pc, #424]	@ (801d448 <i2c_testing+0x2d4>)
 801d29e:	681b      	ldr	r3, [r3, #0]
 801d2a0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d2a4:	4618      	mov	r0, r3
 801d2a6:	f7f2 febb 	bl	8010020 <xQueueSemaphoreTake>
 801d2aa:	4603      	mov	r3, r0
 801d2ac:	2b01      	cmp	r3, #1
 801d2ae:	d00a      	beq.n	801d2c6 <i2c_testing+0x152>
	         printf("Master TX timeout\n\r"); // Debug printf
 801d2b0:	4866      	ldr	r0, [pc, #408]	@ (801d44c <i2c_testing+0x2d8>)
 801d2b2:	f000 feed 	bl	801e090 <iprintf>
	         i2c_reset(I2C_SENDER); // Reset the Master on timeout
 801d2b6:	4862      	ldr	r0, [pc, #392]	@ (801d440 <i2c_testing+0x2cc>)
 801d2b8:	f000 f928 	bl	801d50c <i2c_reset>
	         i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution
 801d2bc:	485e      	ldr	r0, [pc, #376]	@ (801d438 <i2c_testing+0x2c4>)
 801d2be:	f000 f925 	bl	801d50c <i2c_reset>
	         return TEST_FAIL;
 801d2c2:	23ff      	movs	r3, #255	@ 0xff
 801d2c4:	e0b3      	b.n	801d42e <i2c_testing+0x2ba>
	    }
        else
        {
        	HAL_Delay(1);
 801d2c6:	2001      	movs	r0, #1
 801d2c8:	f7e5 faa4 	bl	8002814 <HAL_Delay>

        	status = HAL_I2C_Slave_Transmit_IT(I2C_RECEIVER, echo_buffer, command->bit_pattern_length);
 801d2cc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d2d0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d2d4:	681b      	ldr	r3, [r3, #0]
 801d2d6:	799b      	ldrb	r3, [r3, #6]
 801d2d8:	461a      	mov	r2, r3
 801d2da:	f107 0308 	add.w	r3, r7, #8
 801d2de:	4619      	mov	r1, r3
 801d2e0:	4855      	ldr	r0, [pc, #340]	@ (801d438 <i2c_testing+0x2c4>)
 801d2e2:	f7e8 ff63 	bl	80061ac <HAL_I2C_Slave_Transmit_IT>
 801d2e6:	4603      	mov	r3, r0
 801d2e8:	f887 3316 	strb.w	r3, [r7, #790]	@ 0x316
			 if (status != HAL_OK){
 801d2ec:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d2f0:	2b00      	cmp	r3, #0
 801d2f2:	d00d      	beq.n	801d310 <i2c_testing+0x19c>
				 printf("Failed to echo send on I2C receiver: %d\n\r", status);
 801d2f4:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d2f8:	4619      	mov	r1, r3
 801d2fa:	4855      	ldr	r0, [pc, #340]	@ (801d450 <i2c_testing+0x2dc>)
 801d2fc:	f000 fec8 	bl	801e090 <iprintf>
				 i2c_reset(I2C_SENDER); // Reset the Master on timeout
 801d300:	484f      	ldr	r0, [pc, #316]	@ (801d440 <i2c_testing+0x2cc>)
 801d302:	f000 f903 	bl	801d50c <i2c_reset>
				 i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution
 801d306:	484c      	ldr	r0, [pc, #304]	@ (801d438 <i2c_testing+0x2c4>)
 801d308:	f000 f900 	bl	801d50c <i2c_reset>
				 return TEST_FAIL;
 801d30c:	23ff      	movs	r3, #255	@ 0xff
 801d30e:	e08e      	b.n	801d42e <i2c_testing+0x2ba>
			 }
        	// Arm sender receive before receiver transmits back
			 status = HAL_I2C_Master_Receive_IT(I2C_SENDER, I2C_SLAVE_ADDR, rx_buffer, command->bit_pattern_length);
 801d310:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d314:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d318:	681b      	ldr	r3, [r3, #0]
 801d31a:	799b      	ldrb	r3, [r3, #6]
 801d31c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801d320:	21f0      	movs	r1, #240	@ 0xf0
 801d322:	4847      	ldr	r0, [pc, #284]	@ (801d440 <i2c_testing+0x2cc>)
 801d324:	f7e8 fed2 	bl	80060cc <HAL_I2C_Master_Receive_IT>
 801d328:	4603      	mov	r3, r0
 801d32a:	f887 3316 	strb.w	r3, [r7, #790]	@ 0x316
			if (status != HAL_OK) {
 801d32e:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d332:	2b00      	cmp	r3, #0
 801d334:	d007      	beq.n	801d346 <i2c_testing+0x1d2>
				printf("Sender Failed to start receive back: %d\n\r", status);
 801d336:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801d33a:	4619      	mov	r1, r3
 801d33c:	4845      	ldr	r0, [pc, #276]	@ (801d454 <i2c_testing+0x2e0>)
 801d33e:	f000 fea7 	bl	801e090 <iprintf>
				return TEST_FAIL;
 801d342:	23ff      	movs	r3, #255	@ 0xff
 801d344:	e073      	b.n	801d42e <i2c_testing+0x2ba>
			}

        }
	    //  WAIT FOR BOTH RX DMA COMPLETION
	    if (xSemaphoreTake(I2cRxHandle, TIMEOUT) != pdPASS) {
 801d346:	4b44      	ldr	r3, [pc, #272]	@ (801d458 <i2c_testing+0x2e4>)
 801d348:	681b      	ldr	r3, [r3, #0]
 801d34a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d34e:	4618      	mov	r0, r3
 801d350:	f7f2 fe66 	bl	8010020 <xQueueSemaphoreTake>
 801d354:	4603      	mov	r3, r0
 801d356:	2b01      	cmp	r3, #1
 801d358:	d00a      	beq.n	801d370 <i2c_testing+0x1fc>
	         printf("Slave RX timeout\n\r"); // Debug printf
 801d35a:	4840      	ldr	r0, [pc, #256]	@ (801d45c <i2c_testing+0x2e8>)
 801d35c:	f000 fe98 	bl	801e090 <iprintf>
			 i2c_reset(I2C_SENDER); // Reset the Master on timeout
 801d360:	4837      	ldr	r0, [pc, #220]	@ (801d440 <i2c_testing+0x2cc>)
 801d362:	f000 f8d3 	bl	801d50c <i2c_reset>
	         i2c_reset(I2C_RECEIVER); // Reset the Slave as a precaution
 801d366:	4834      	ldr	r0, [pc, #208]	@ (801d438 <i2c_testing+0x2c4>)
 801d368:	f000 f8d0 	bl	801d50c <i2c_reset>
	         return TEST_FAIL;
 801d36c:	23ff      	movs	r3, #255	@ 0xff
 801d36e:	e05e      	b.n	801d42e <i2c_testing+0x2ba>
	    }

	    // --- 4. COMPARE SENT vs. RECEIVED data ---
	    if (command->bit_pattern_length > 100) {
 801d370:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d374:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d378:	681b      	ldr	r3, [r3, #0]
 801d37a:	799b      	ldrb	r3, [r3, #6]
 801d37c:	2b64      	cmp	r3, #100	@ 0x64
 801d37e:	d925      	bls.n	801d3cc <i2c_testing+0x258>
	        uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 801d380:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d384:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d388:	681b      	ldr	r3, [r3, #0]
 801d38a:	799b      	ldrb	r3, [r3, #6]
 801d38c:	461a      	mov	r2, r3
 801d38e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801d392:	4611      	mov	r1, r2
 801d394:	4618      	mov	r0, r3
 801d396:	f7e3 ff3d 	bl	8001214 <calculate_crc>
 801d39a:	f8c7 030c 	str.w	r0, [r7, #780]	@ 0x30c
	        uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 801d39e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d3a2:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d3a6:	681b      	ldr	r3, [r3, #0]
 801d3a8:	799b      	ldrb	r3, [r3, #6]
 801d3aa:	461a      	mov	r2, r3
 801d3ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801d3b0:	4611      	mov	r1, r2
 801d3b2:	4618      	mov	r0, r3
 801d3b4:	f7e3 ff2e 	bl	8001214 <calculate_crc>
 801d3b8:	f8c7 0308 	str.w	r0, [r7, #776]	@ 0x308
	        if (sent_crc != received_crc) {
 801d3bc:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 801d3c0:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801d3c4:	429a      	cmp	r2, r3
 801d3c6:	d01e      	beq.n	801d406 <i2c_testing+0x292>
//	            printf("I2C_TEST: CRC mismatch on iteration %u.\n\r", i + 1); // Debug printf
	            return TEST_FAIL;
 801d3c8:	23ff      	movs	r3, #255	@ 0xff
 801d3ca:	e030      	b.n	801d42e <i2c_testing+0x2ba>
	        }
	    } else {
	        int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 801d3cc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d3d0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d3d4:	681b      	ldr	r3, [r3, #0]
 801d3d6:	799b      	ldrb	r3, [r3, #6]
 801d3d8:	461a      	mov	r2, r3
 801d3da:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 801d3de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801d3e2:	4618      	mov	r0, r3
 801d3e4:	f000 ff9c 	bl	801e320 <memcmp>
 801d3e8:	f8c7 0310 	str.w	r0, [r7, #784]	@ 0x310
	        if (comp != 0) {
 801d3ec:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	d008      	beq.n	801d406 <i2c_testing+0x292>
	            printf("Data mismatch on iteration %u.\n\r", i + 1); // Debug printf
 801d3f4:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 801d3f8:	3301      	adds	r3, #1
 801d3fa:	4619      	mov	r1, r3
 801d3fc:	4818      	ldr	r0, [pc, #96]	@ (801d460 <i2c_testing+0x2ec>)
 801d3fe:	f000 fe47 	bl	801e090 <iprintf>
	            return TEST_FAIL;
 801d402:	23ff      	movs	r3, #255	@ 0xff
 801d404:	e013      	b.n	801d42e <i2c_testing+0x2ba>
	        }
	    }
//	    printf("Data Match on iteration %u.\n\r", i + 1); // Debug printf

        osDelay(10);
 801d406:	200a      	movs	r0, #10
 801d408:	f7f1 fb2c 	bl	800ea64 <osDelay>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 801d40c:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 801d410:	3301      	adds	r3, #1
 801d412:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
 801d416:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801d41a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801d41e:	681b      	ldr	r3, [r3, #0]
 801d420:	795b      	ldrb	r3, [r3, #5]
 801d422:	f897 2317 	ldrb.w	r2, [r7, #791]	@ 0x317
 801d426:	429a      	cmp	r2, r3
 801d428:	f4ff aeee 	bcc.w	801d208 <i2c_testing+0x94>
	}
    return TEST_PASS;
 801d42c:	2301      	movs	r3, #1
}
 801d42e:	4618      	mov	r0, r3
 801d430:	f507 7746 	add.w	r7, r7, #792	@ 0x318
 801d434:	46bd      	mov	sp, r7
 801d436:	bd80      	pop	{r7, pc}
 801d438:	20000268 	.word	0x20000268
 801d43c:	08021ccc 	.word	0x08021ccc
 801d440:	200002bc 	.word	0x200002bc
 801d444:	08021cf4 	.word	0x08021cf4
 801d448:	20000dbc 	.word	0x20000dbc
 801d44c:	08021d1c 	.word	0x08021d1c
 801d450:	08021d30 	.word	0x08021d30
 801d454:	08021d5c 	.word	0x08021d5c
 801d458:	20000db8 	.word	0x20000db8
 801d45c:	08021d88 	.word	0x08021d88
 801d460:	08021d9c 	.word	0x08021d9c

0801d464 <HAL_I2C_MasterTxCpltCallback>:


void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801d464:	b580      	push	{r7, lr}
 801d466:	b084      	sub	sp, #16
 801d468:	af00      	add	r7, sp, #0
 801d46a:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d46c:	2300      	movs	r3, #0
 801d46e:	60fb      	str	r3, [r7, #12]

    if (hi2c->Instance == I2C_SENDER->Instance) // Check the instance of your sender UART
 801d470:	687b      	ldr	r3, [r7, #4]
 801d472:	681a      	ldr	r2, [r3, #0]
 801d474:	4b0d      	ldr	r3, [pc, #52]	@ (801d4ac <HAL_I2C_MasterTxCpltCallback+0x48>)
 801d476:	681b      	ldr	r3, [r3, #0]
 801d478:	429a      	cmp	r2, r3
 801d47a:	d107      	bne.n	801d48c <HAL_I2C_MasterTxCpltCallback+0x28>
    {
//        printf("Master TX callback fired\n\r"); // Debug printf
        xSemaphoreGiveFromISR(I2cTxHandle, &xHigherPriorityTaskWoken);
 801d47c:	4b0c      	ldr	r3, [pc, #48]	@ (801d4b0 <HAL_I2C_MasterTxCpltCallback+0x4c>)
 801d47e:	681b      	ldr	r3, [r3, #0]
 801d480:	f107 020c 	add.w	r2, r7, #12
 801d484:	4611      	mov	r1, r2
 801d486:	4618      	mov	r0, r3
 801d488:	f7f2 fc49 	bl	800fd1e <xQueueGiveFromISR>
    }
    else
    {
    	UNUSED(hi2c);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d48c:	68fb      	ldr	r3, [r7, #12]
 801d48e:	2b00      	cmp	r3, #0
 801d490:	d007      	beq.n	801d4a2 <HAL_I2C_MasterTxCpltCallback+0x3e>
 801d492:	4b08      	ldr	r3, [pc, #32]	@ (801d4b4 <HAL_I2C_MasterTxCpltCallback+0x50>)
 801d494:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d498:	601a      	str	r2, [r3, #0]
 801d49a:	f3bf 8f4f 	dsb	sy
 801d49e:	f3bf 8f6f 	isb	sy
}
 801d4a2:	bf00      	nop
 801d4a4:	3710      	adds	r7, #16
 801d4a6:	46bd      	mov	sp, r7
 801d4a8:	bd80      	pop	{r7, pc}
 801d4aa:	bf00      	nop
 801d4ac:	200002bc 	.word	0x200002bc
 801d4b0:	20000dbc 	.word	0x20000dbc
 801d4b4:	e000ed04 	.word	0xe000ed04

0801d4b8 <HAL_I2C_MasterRxCpltCallback>:
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801d4b8:	b580      	push	{r7, lr}
 801d4ba:	b084      	sub	sp, #16
 801d4bc:	af00      	add	r7, sp, #0
 801d4be:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d4c0:	2300      	movs	r3, #0
 801d4c2:	60fb      	str	r3, [r7, #12]

    if (hi2c->Instance == I2C_SENDER->Instance) // Check the instance of your sender UART
 801d4c4:	687b      	ldr	r3, [r7, #4]
 801d4c6:	681a      	ldr	r2, [r3, #0]
 801d4c8:	4b0d      	ldr	r3, [pc, #52]	@ (801d500 <HAL_I2C_MasterRxCpltCallback+0x48>)
 801d4ca:	681b      	ldr	r3, [r3, #0]
 801d4cc:	429a      	cmp	r2, r3
 801d4ce:	d107      	bne.n	801d4e0 <HAL_I2C_MasterRxCpltCallback+0x28>
    {
//        printf("Master RX callback fired\n\r"); // Debug printf
        xSemaphoreGiveFromISR(I2cRxHandle, &xHigherPriorityTaskWoken);
 801d4d0:	4b0c      	ldr	r3, [pc, #48]	@ (801d504 <HAL_I2C_MasterRxCpltCallback+0x4c>)
 801d4d2:	681b      	ldr	r3, [r3, #0]
 801d4d4:	f107 020c 	add.w	r2, r7, #12
 801d4d8:	4611      	mov	r1, r2
 801d4da:	4618      	mov	r0, r3
 801d4dc:	f7f2 fc1f 	bl	800fd1e <xQueueGiveFromISR>
    }
    else
    {
    	UNUSED(hi2c);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d4e0:	68fb      	ldr	r3, [r7, #12]
 801d4e2:	2b00      	cmp	r3, #0
 801d4e4:	d007      	beq.n	801d4f6 <HAL_I2C_MasterRxCpltCallback+0x3e>
 801d4e6:	4b08      	ldr	r3, [pc, #32]	@ (801d508 <HAL_I2C_MasterRxCpltCallback+0x50>)
 801d4e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d4ec:	601a      	str	r2, [r3, #0]
 801d4ee:	f3bf 8f4f 	dsb	sy
 801d4f2:	f3bf 8f6f 	isb	sy
}
 801d4f6:	bf00      	nop
 801d4f8:	3710      	adds	r7, #16
 801d4fa:	46bd      	mov	sp, r7
 801d4fc:	bd80      	pop	{r7, pc}
 801d4fe:	bf00      	nop
 801d500:	200002bc 	.word	0x200002bc
 801d504:	20000db8 	.word	0x20000db8
 801d508:	e000ed04 	.word	0xe000ed04

0801d50c <i2c_reset>:
// reset the I2C peripheral
void i2c_reset(I2C_HandleTypeDef *hi2c) {
 801d50c:	b580      	push	{r7, lr}
 801d50e:	b082      	sub	sp, #8
 801d510:	af00      	add	r7, sp, #0
 801d512:	6078      	str	r0, [r7, #4]
    if (HAL_I2C_DeInit(hi2c) != HAL_OK) {
 801d514:	6878      	ldr	r0, [r7, #4]
 801d516:	f7e8 fda9 	bl	800606c <HAL_I2C_DeInit>
 801d51a:	4603      	mov	r3, r0
 801d51c:	2b00      	cmp	r3, #0
 801d51e:	d001      	beq.n	801d524 <i2c_reset+0x18>
        // Log a fatal error, the peripheral is in an unrecoverable state
        Error_Handler();
 801d520:	f7e3 ff84 	bl	800142c <Error_Handler>
//        printf("Failed to de-initialize I2C peripheral!\n\r"); // Debug printf
    }
    if (HAL_I2C_Init(hi2c) != HAL_OK) {
 801d524:	6878      	ldr	r0, [r7, #4]
 801d526:	f7e8 fd05 	bl	8005f34 <HAL_I2C_Init>
 801d52a:	4603      	mov	r3, r0
 801d52c:	2b00      	cmp	r3, #0
 801d52e:	d001      	beq.n	801d534 <i2c_reset+0x28>
        // Log a fatal error
        Error_Handler();
 801d530:	f7e3 ff7c 	bl	800142c <Error_Handler>
//        printf("Failed to re-initialize I2C peripheral!\n\r"); // Debug printf
    }
}
 801d534:	bf00      	nop
 801d536:	3708      	adds	r7, #8
 801d538:	46bd      	mov	sp, r7
 801d53a:	bd80      	pop	{r7, pc}

0801d53c <SCB_InvalidateDCache_by_Addr>:
{
 801d53c:	b480      	push	{r7}
 801d53e:	b087      	sub	sp, #28
 801d540:	af00      	add	r7, sp, #0
 801d542:	6078      	str	r0, [r7, #4]
 801d544:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 801d546:	683b      	ldr	r3, [r7, #0]
 801d548:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 801d54a:	687b      	ldr	r3, [r7, #4]
 801d54c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 801d54e:	2320      	movs	r3, #32
 801d550:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801d552:	f3bf 8f4f 	dsb	sy
}
 801d556:	bf00      	nop
    while (op_size > 0) {
 801d558:	e00b      	b.n	801d572 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 801d55a:	4a0d      	ldr	r2, [pc, #52]	@ (801d590 <SCB_InvalidateDCache_by_Addr+0x54>)
 801d55c:	693b      	ldr	r3, [r7, #16]
 801d55e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 801d562:	68fb      	ldr	r3, [r7, #12]
 801d564:	693a      	ldr	r2, [r7, #16]
 801d566:	4413      	add	r3, r2
 801d568:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 801d56a:	697a      	ldr	r2, [r7, #20]
 801d56c:	68fb      	ldr	r3, [r7, #12]
 801d56e:	1ad3      	subs	r3, r2, r3
 801d570:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 801d572:	697b      	ldr	r3, [r7, #20]
 801d574:	2b00      	cmp	r3, #0
 801d576:	dcf0      	bgt.n	801d55a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 801d578:	f3bf 8f4f 	dsb	sy
}
 801d57c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801d57e:	f3bf 8f6f 	isb	sy
}
 801d582:	bf00      	nop
}
 801d584:	bf00      	nop
 801d586:	371c      	adds	r7, #28
 801d588:	46bd      	mov	sp, r7
 801d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d58e:	4770      	bx	lr
 801d590:	e000ed00 	.word	0xe000ed00

0801d594 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 801d594:	b480      	push	{r7}
 801d596:	b087      	sub	sp, #28
 801d598:	af00      	add	r7, sp, #0
 801d59a:	6078      	str	r0, [r7, #4]
 801d59c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 801d59e:	683b      	ldr	r3, [r7, #0]
 801d5a0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 801d5a2:	687b      	ldr	r3, [r7, #4]
 801d5a4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 801d5a6:	2320      	movs	r3, #32
 801d5a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801d5aa:	f3bf 8f4f 	dsb	sy
}
 801d5ae:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 801d5b0:	e00b      	b.n	801d5ca <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 801d5b2:	4a0d      	ldr	r2, [pc, #52]	@ (801d5e8 <SCB_CleanDCache_by_Addr+0x54>)
 801d5b4:	693b      	ldr	r3, [r7, #16]
 801d5b6:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 801d5ba:	68fb      	ldr	r3, [r7, #12]
 801d5bc:	693a      	ldr	r2, [r7, #16]
 801d5be:	4413      	add	r3, r2
 801d5c0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 801d5c2:	697a      	ldr	r2, [r7, #20]
 801d5c4:	68fb      	ldr	r3, [r7, #12]
 801d5c6:	1ad3      	subs	r3, r2, r3
 801d5c8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 801d5ca:	697b      	ldr	r3, [r7, #20]
 801d5cc:	2b00      	cmp	r3, #0
 801d5ce:	dcf0      	bgt.n	801d5b2 <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 801d5d0:	f3bf 8f4f 	dsb	sy
}
 801d5d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801d5d6:	f3bf 8f6f 	isb	sy
}
 801d5da:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 801d5dc:	bf00      	nop
 801d5de:	371c      	adds	r7, #28
 801d5e0:	46bd      	mov	sp, r7
 801d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5e6:	4770      	bx	lr
 801d5e8:	e000ed00 	.word	0xe000ed00

0801d5ec <spi_testing>:
/*
 * @brief Performs a test on the SPI peripheral using the command protocol.
 * @param command: A pointer to the test_command_t struct.
 * @retval result_t: The result of the test (TEST_PASS or TEST_FAIL).
 */
Result spi_testing(test_command_t* command){
 801d5ec:	b580      	push	{r7, lr}
 801d5ee:	b086      	sub	sp, #24
 801d5f0:	af00      	add	r7, sp, #0
 801d5f2:	6078      	str	r0, [r7, #4]
	static uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
	static uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};

	HAL_StatusTypeDef status;

	if (command == NULL) {
 801d5f4:	687b      	ldr	r3, [r7, #4]
 801d5f6:	2b00      	cmp	r3, #0
 801d5f8:	d105      	bne.n	801d606 <spi_testing+0x1a>
        printf("SPI_TEST: Received NULL command pointer. Skipping.\n");
 801d5fa:	4894      	ldr	r0, [pc, #592]	@ (801d84c <spi_testing+0x260>)
 801d5fc:	f000 fdb0 	bl	801e160 <puts>
        return TEST_ERR;
 801d600:	f04f 33ff 	mov.w	r3, #4294967295
 801d604:	e11e      	b.n	801d844 <spi_testing+0x258>
	}

    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 801d606:	687b      	ldr	r3, [r7, #4]
 801d608:	1dd9      	adds	r1, r3, #7
 801d60a:	687b      	ldr	r3, [r7, #4]
 801d60c:	799b      	ldrb	r3, [r3, #6]
 801d60e:	461a      	mov	r2, r3
 801d610:	488f      	ldr	r0, [pc, #572]	@ (801d850 <spi_testing+0x264>)
 801d612:	f000 ff68 	bl	801e4e6 <memcpy>

	for(uint8_t i = 0; i < command->iterations; i++)
 801d616:	2300      	movs	r3, #0
 801d618:	75fb      	strb	r3, [r7, #23]
 801d61a:	e10c      	b.n	801d836 <spi_testing+0x24a>
	{
	    printf("SPI_TEST: Iteration %u/%u -\n\r", i + 1, command->iterations);
 801d61c:	7dfb      	ldrb	r3, [r7, #23]
 801d61e:	1c59      	adds	r1, r3, #1
 801d620:	687b      	ldr	r3, [r7, #4]
 801d622:	795b      	ldrb	r3, [r3, #5]
 801d624:	461a      	mov	r2, r3
 801d626:	488b      	ldr	r0, [pc, #556]	@ (801d854 <spi_testing+0x268>)
 801d628:	f000 fd32 	bl	801e090 <iprintf>
	    memset(rx_buffer, 0, command->bit_pattern_length);
 801d62c:	687b      	ldr	r3, [r7, #4]
 801d62e:	799b      	ldrb	r3, [r3, #6]
 801d630:	461a      	mov	r2, r3
 801d632:	2100      	movs	r1, #0
 801d634:	4888      	ldr	r0, [pc, #544]	@ (801d858 <spi_testing+0x26c>)
 801d636:	f000 fe83 	bl	801e340 <memset>

	    reset_test();
 801d63a:	f000 f9d5 	bl	801d9e8 <reset_test>
	    clear_flags(SPI_SENDER);
 801d63e:	4887      	ldr	r0, [pc, #540]	@ (801d85c <spi_testing+0x270>)
 801d640:	f000 f9b8 	bl	801d9b4 <clear_flags>
	    clear_flags(SPI_RECEIVER);
 801d644:	4886      	ldr	r0, [pc, #536]	@ (801d860 <spi_testing+0x274>)
 801d646:	f000 f9b5 	bl	801d9b4 <clear_flags>

	    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); // CS low → enable slave
 801d64a:	2200      	movs	r2, #0
 801d64c:	2101      	movs	r1, #1
 801d64e:	4885      	ldr	r0, [pc, #532]	@ (801d864 <spi_testing+0x278>)
 801d650:	f7e8 fc18 	bl	8005e84 <HAL_GPIO_WritePin>

	    // 1. Prepare Slave for a Receive Operation
	    status = HAL_SPI_TransmitReceive_DMA(SPI_RECEIVER, echo_tx_buffer, echo_rx_buffer, command->bit_pattern_length);
 801d654:	687b      	ldr	r3, [r7, #4]
 801d656:	799b      	ldrb	r3, [r3, #6]
 801d658:	4a83      	ldr	r2, [pc, #524]	@ (801d868 <spi_testing+0x27c>)
 801d65a:	4984      	ldr	r1, [pc, #528]	@ (801d86c <spi_testing+0x280>)
 801d65c:	4880      	ldr	r0, [pc, #512]	@ (801d860 <spi_testing+0x274>)
 801d65e:	f7ec fabd 	bl	8009bdc <HAL_SPI_TransmitReceive_DMA>
 801d662:	4603      	mov	r3, r0
 801d664:	75bb      	strb	r3, [r7, #22]
	    if (status != HAL_OK) {
 801d666:	7dbb      	ldrb	r3, [r7, #22]
 801d668:	2b00      	cmp	r3, #0
 801d66a:	d006      	beq.n	801d67a <spi_testing+0x8e>
	        printf("Failed to start slave receive: %d\n\r", status);
 801d66c:	7dbb      	ldrb	r3, [r7, #22]
 801d66e:	4619      	mov	r1, r3
 801d670:	487f      	ldr	r0, [pc, #508]	@ (801d870 <spi_testing+0x284>)
 801d672:	f000 fd0d 	bl	801e090 <iprintf>
	        return TEST_FAIL;
 801d676:	23ff      	movs	r3, #255	@ 0xff
 801d678:	e0e4      	b.n	801d844 <spi_testing+0x258>
	    }
	    // 2. Master Transmits data
	    status = HAL_SPI_TransmitReceive_DMA(SPI_SENDER, tx_buffer, rx_buffer, command->bit_pattern_length);
 801d67a:	687b      	ldr	r3, [r7, #4]
 801d67c:	799b      	ldrb	r3, [r3, #6]
 801d67e:	4a76      	ldr	r2, [pc, #472]	@ (801d858 <spi_testing+0x26c>)
 801d680:	4973      	ldr	r1, [pc, #460]	@ (801d850 <spi_testing+0x264>)
 801d682:	4876      	ldr	r0, [pc, #472]	@ (801d85c <spi_testing+0x270>)
 801d684:	f7ec faaa 	bl	8009bdc <HAL_SPI_TransmitReceive_DMA>
 801d688:	4603      	mov	r3, r0
 801d68a:	75bb      	strb	r3, [r7, #22]
	    if (status != HAL_OK) {
 801d68c:	7dbb      	ldrb	r3, [r7, #22]
 801d68e:	2b00      	cmp	r3, #0
 801d690:	d008      	beq.n	801d6a4 <spi_testing+0xb8>
	        printf("Failed to start master transmit: %d\n\r", status);
 801d692:	7dbb      	ldrb	r3, [r7, #22]
 801d694:	4619      	mov	r1, r3
 801d696:	4877      	ldr	r0, [pc, #476]	@ (801d874 <spi_testing+0x288>)
 801d698:	f000 fcfa 	bl	801e090 <iprintf>
	        reset_test();
 801d69c:	f000 f9a4 	bl	801d9e8 <reset_test>
	        return TEST_FAIL;
 801d6a0:	23ff      	movs	r3, #255	@ 0xff
 801d6a2:	e0cf      	b.n	801d844 <spi_testing+0x258>
	    }

	    // 3. Wait for the Master's Transmit to complete
	    if (xSemaphoreTake(SpiTxHandle, TIMEOUT) != pdPASS) {
 801d6a4:	4b74      	ldr	r3, [pc, #464]	@ (801d878 <spi_testing+0x28c>)
 801d6a6:	681b      	ldr	r3, [r3, #0]
 801d6a8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d6ac:	4618      	mov	r0, r3
 801d6ae:	f7f2 fcb7 	bl	8010020 <xQueueSemaphoreTake>
 801d6b2:	4603      	mov	r3, r0
 801d6b4:	2b01      	cmp	r3, #1
 801d6b6:	d006      	beq.n	801d6c6 <spi_testing+0xda>
	         printf("Master TX timeout\n\r");
 801d6b8:	4870      	ldr	r0, [pc, #448]	@ (801d87c <spi_testing+0x290>)
 801d6ba:	f000 fce9 	bl	801e090 <iprintf>
		     reset_test();
 801d6be:	f000 f993 	bl	801d9e8 <reset_test>
		     return TEST_FAIL;
 801d6c2:	23ff      	movs	r3, #255	@ 0xff
 801d6c4:	e0be      	b.n	801d844 <spi_testing+0x258>
	    }
	    // 4. Wait for the Slave's Receive to complete, which triggers its echo back
	    if (xSemaphoreTake(SpiSlaveRxHandle, TIMEOUT) != pdPASS) {
 801d6c6:	4b6e      	ldr	r3, [pc, #440]	@ (801d880 <spi_testing+0x294>)
 801d6c8:	681b      	ldr	r3, [r3, #0]
 801d6ca:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d6ce:	4618      	mov	r0, r3
 801d6d0:	f7f2 fca6 	bl	8010020 <xQueueSemaphoreTake>
 801d6d4:	4603      	mov	r3, r0
 801d6d6:	2b01      	cmp	r3, #1
 801d6d8:	d006      	beq.n	801d6e8 <spi_testing+0xfc>
	         printf("Slave RX timeout\n\r");
 801d6da:	486a      	ldr	r0, [pc, #424]	@ (801d884 <spi_testing+0x298>)
 801d6dc:	f000 fcd8 	bl	801e090 <iprintf>
		     reset_test();
 801d6e0:	f000 f982 	bl	801d9e8 <reset_test>
	         return TEST_FAIL;
 801d6e4:	23ff      	movs	r3, #255	@ 0xff
 801d6e6:	e0ad      	b.n	801d844 <spi_testing+0x258>
	    }
	    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);   // CS high → disable slave
 801d6e8:	2201      	movs	r2, #1
 801d6ea:	2101      	movs	r1, #1
 801d6ec:	485d      	ldr	r0, [pc, #372]	@ (801d864 <spi_testing+0x278>)
 801d6ee:	f7e8 fbc9 	bl	8005e84 <HAL_GPIO_WritePin>

	    clear_flags(SPI_RECEIVER);
 801d6f2:	485b      	ldr	r0, [pc, #364]	@ (801d860 <spi_testing+0x274>)
 801d6f4:	f000 f95e 	bl	801d9b4 <clear_flags>
	    osDelay(1); // tiny delay 1ms
 801d6f8:	2001      	movs	r0, #1
 801d6fa:	f7f1 f9b3 	bl	800ea64 <osDelay>

		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); // CS low → enable slave
 801d6fe:	2200      	movs	r2, #0
 801d700:	2101      	movs	r1, #1
 801d702:	4858      	ldr	r0, [pc, #352]	@ (801d864 <spi_testing+0x278>)
 801d704:	f7e8 fbbe 	bl	8005e84 <HAL_GPIO_WritePin>
		SCB_CleanDCache_by_Addr((uint32_t*)echo_tx_buffer, command->bit_pattern_length);
 801d708:	687b      	ldr	r3, [r7, #4]
 801d70a:	799b      	ldrb	r3, [r3, #6]
 801d70c:	4619      	mov	r1, r3
 801d70e:	4857      	ldr	r0, [pc, #348]	@ (801d86c <spi_testing+0x280>)
 801d710:	f7ff ff40 	bl	801d594 <SCB_CleanDCache_by_Addr>

		// 5. Now, prepare Master to Receive the Echoed data
		status = HAL_SPI_Receive_DMA(SPI_SENDER, rx_buffer, command->bit_pattern_length);
 801d714:	687b      	ldr	r3, [r7, #4]
 801d716:	799b      	ldrb	r3, [r3, #6]
 801d718:	461a      	mov	r2, r3
 801d71a:	494f      	ldr	r1, [pc, #316]	@ (801d858 <spi_testing+0x26c>)
 801d71c:	484f      	ldr	r0, [pc, #316]	@ (801d85c <spi_testing+0x270>)
 801d71e:	f7ec f929 	bl	8009974 <HAL_SPI_Receive_DMA>
 801d722:	4603      	mov	r3, r0
 801d724:	75bb      	strb	r3, [r7, #22]
		if (status != HAL_OK) {
 801d726:	7dbb      	ldrb	r3, [r7, #22]
 801d728:	2b00      	cmp	r3, #0
 801d72a:	d008      	beq.n	801d73e <spi_testing+0x152>
			printf("Failed to start master Rx: %d\n\r", status);
 801d72c:	7dbb      	ldrb	r3, [r7, #22]
 801d72e:	4619      	mov	r1, r3
 801d730:	4855      	ldr	r0, [pc, #340]	@ (801d888 <spi_testing+0x29c>)
 801d732:	f000 fcad 	bl	801e090 <iprintf>
	        reset_test();
 801d736:	f000 f957 	bl	801d9e8 <reset_test>
			return TEST_FAIL;
 801d73a:	23ff      	movs	r3, #255	@ 0xff
 801d73c:	e082      	b.n	801d844 <spi_testing+0x258>
		}

		status = HAL_SPI_Transmit_DMA(SPI_RECEIVER, echo_tx_buffer, command->bit_pattern_length);
 801d73e:	687b      	ldr	r3, [r7, #4]
 801d740:	799b      	ldrb	r3, [r3, #6]
 801d742:	461a      	mov	r2, r3
 801d744:	4949      	ldr	r1, [pc, #292]	@ (801d86c <spi_testing+0x280>)
 801d746:	4846      	ldr	r0, [pc, #280]	@ (801d860 <spi_testing+0x274>)
 801d748:	f7ec f810 	bl	800976c <HAL_SPI_Transmit_DMA>
 801d74c:	4603      	mov	r3, r0
 801d74e:	75bb      	strb	r3, [r7, #22]
		if (status != HAL_OK) {
 801d750:	7dbb      	ldrb	r3, [r7, #22]
 801d752:	2b00      	cmp	r3, #0
 801d754:	d008      	beq.n	801d768 <spi_testing+0x17c>
			printf("Failed to start slave transmit: %d\n\r", status);
 801d756:	7dbb      	ldrb	r3, [r7, #22]
 801d758:	4619      	mov	r1, r3
 801d75a:	484c      	ldr	r0, [pc, #304]	@ (801d88c <spi_testing+0x2a0>)
 801d75c:	f000 fc98 	bl	801e090 <iprintf>
	        reset_test();
 801d760:	f000 f942 	bl	801d9e8 <reset_test>
			return TEST_FAIL;
 801d764:	23ff      	movs	r3, #255	@ 0xff
 801d766:	e06d      	b.n	801d844 <spi_testing+0x258>
		}

	    // 6. Wait for Master's final Receive to complete
	    if (xSemaphoreTake(SpiRxHandle, TIMEOUT) != pdPASS) {
 801d768:	4b49      	ldr	r3, [pc, #292]	@ (801d890 <spi_testing+0x2a4>)
 801d76a:	681b      	ldr	r3, [r3, #0]
 801d76c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801d770:	4618      	mov	r0, r3
 801d772:	f7f2 fc55 	bl	8010020 <xQueueSemaphoreTake>
 801d776:	4603      	mov	r3, r0
 801d778:	2b01      	cmp	r3, #1
 801d77a:	d006      	beq.n	801d78a <spi_testing+0x19e>
	         printf("Master RX timeout\n\r");
 801d77c:	4845      	ldr	r0, [pc, #276]	@ (801d894 <spi_testing+0x2a8>)
 801d77e:	f000 fc87 	bl	801e090 <iprintf>
	         reset_test();
 801d782:	f000 f931 	bl	801d9e8 <reset_test>
	         return TEST_FAIL;
 801d786:	23ff      	movs	r3, #255	@ 0xff
 801d788:	e05c      	b.n	801d844 <spi_testing+0x258>
	    }

		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);   // CS high → disable slave
 801d78a:	2201      	movs	r2, #1
 801d78c:	2101      	movs	r1, #1
 801d78e:	4835      	ldr	r0, [pc, #212]	@ (801d864 <spi_testing+0x278>)
 801d790:	f7e8 fb78 	bl	8005e84 <HAL_GPIO_WritePin>

    	SCB_InvalidateDCache_by_Addr((uint32_t*)echo_rx_buffer, command->bit_pattern_length);
 801d794:	687b      	ldr	r3, [r7, #4]
 801d796:	799b      	ldrb	r3, [r3, #6]
 801d798:	4619      	mov	r1, r3
 801d79a:	4833      	ldr	r0, [pc, #204]	@ (801d868 <spi_testing+0x27c>)
 801d79c:	f7ff fece 	bl	801d53c <SCB_InvalidateDCache_by_Addr>

	    // 7. Compare Sent vs. Received data
	    if (command->bit_pattern_length > 100) {
 801d7a0:	687b      	ldr	r3, [r7, #4]
 801d7a2:	799b      	ldrb	r3, [r3, #6]
 801d7a4:	2b64      	cmp	r3, #100	@ 0x64
 801d7a6:	d919      	bls.n	801d7dc <spi_testing+0x1f0>
	        uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 801d7a8:	687b      	ldr	r3, [r7, #4]
 801d7aa:	799b      	ldrb	r3, [r3, #6]
 801d7ac:	4619      	mov	r1, r3
 801d7ae:	4828      	ldr	r0, [pc, #160]	@ (801d850 <spi_testing+0x264>)
 801d7b0:	f7e3 fd30 	bl	8001214 <calculate_crc>
 801d7b4:	60f8      	str	r0, [r7, #12]
	        uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 801d7b6:	687b      	ldr	r3, [r7, #4]
 801d7b8:	799b      	ldrb	r3, [r3, #6]
 801d7ba:	4619      	mov	r1, r3
 801d7bc:	4826      	ldr	r0, [pc, #152]	@ (801d858 <spi_testing+0x26c>)
 801d7be:	f7e3 fd29 	bl	8001214 <calculate_crc>
 801d7c2:	60b8      	str	r0, [r7, #8]
	        if (sent_crc != received_crc) {
 801d7c4:	68fa      	ldr	r2, [r7, #12]
 801d7c6:	68bb      	ldr	r3, [r7, #8]
 801d7c8:	429a      	cmp	r2, r3
 801d7ca:	d028      	beq.n	801d81e <spi_testing+0x232>
	            printf("SPI_TEST: CRC mismatch on iteration %u.\n", i + 1);
 801d7cc:	7dfb      	ldrb	r3, [r7, #23]
 801d7ce:	3301      	adds	r3, #1
 801d7d0:	4619      	mov	r1, r3
 801d7d2:	4831      	ldr	r0, [pc, #196]	@ (801d898 <spi_testing+0x2ac>)
 801d7d4:	f000 fc5c 	bl	801e090 <iprintf>
	            return TEST_FAIL;
 801d7d8:	23ff      	movs	r3, #255	@ 0xff
 801d7da:	e033      	b.n	801d844 <spi_testing+0x258>
	        }
	    }
	    else
	    {
	        int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 801d7dc:	687b      	ldr	r3, [r7, #4]
 801d7de:	799b      	ldrb	r3, [r3, #6]
 801d7e0:	461a      	mov	r2, r3
 801d7e2:	491d      	ldr	r1, [pc, #116]	@ (801d858 <spi_testing+0x26c>)
 801d7e4:	481a      	ldr	r0, [pc, #104]	@ (801d850 <spi_testing+0x264>)
 801d7e6:	f000 fd9b 	bl	801e320 <memcmp>
 801d7ea:	6138      	str	r0, [r7, #16]
	        if (comp != 0) {
 801d7ec:	693b      	ldr	r3, [r7, #16]
 801d7ee:	2b00      	cmp	r3, #0
 801d7f0:	d015      	beq.n	801d81e <spi_testing+0x232>
	            printf("Data mismatch on iteration %u.\n", i + 1);
 801d7f2:	7dfb      	ldrb	r3, [r7, #23]
 801d7f4:	3301      	adds	r3, #1
 801d7f6:	4619      	mov	r1, r3
 801d7f8:	4828      	ldr	r0, [pc, #160]	@ (801d89c <spi_testing+0x2b0>)
 801d7fa:	f000 fc49 	bl	801e090 <iprintf>
				printf("Sent: %.*s\n", command->bit_pattern_length, tx_buffer);
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	799b      	ldrb	r3, [r3, #6]
 801d802:	4a13      	ldr	r2, [pc, #76]	@ (801d850 <spi_testing+0x264>)
 801d804:	4619      	mov	r1, r3
 801d806:	4826      	ldr	r0, [pc, #152]	@ (801d8a0 <spi_testing+0x2b4>)
 801d808:	f000 fc42 	bl	801e090 <iprintf>
				printf("Recv: %.*s\n", command->bit_pattern_length, rx_buffer);
 801d80c:	687b      	ldr	r3, [r7, #4]
 801d80e:	799b      	ldrb	r3, [r3, #6]
 801d810:	4a11      	ldr	r2, [pc, #68]	@ (801d858 <spi_testing+0x26c>)
 801d812:	4619      	mov	r1, r3
 801d814:	4823      	ldr	r0, [pc, #140]	@ (801d8a4 <spi_testing+0x2b8>)
 801d816:	f000 fc3b 	bl	801e090 <iprintf>
	            return TEST_FAIL;
 801d81a:	23ff      	movs	r3, #255	@ 0xff
 801d81c:	e012      	b.n	801d844 <spi_testing+0x258>
	        }
	    }
	    printf("Data Match on iteration %u.\n", i + 1);
 801d81e:	7dfb      	ldrb	r3, [r7, #23]
 801d820:	3301      	adds	r3, #1
 801d822:	4619      	mov	r1, r3
 801d824:	4820      	ldr	r0, [pc, #128]	@ (801d8a8 <spi_testing+0x2bc>)
 801d826:	f000 fc33 	bl	801e090 <iprintf>

        osDelay(10);
 801d82a:	200a      	movs	r0, #10
 801d82c:	f7f1 f91a 	bl	800ea64 <osDelay>
	for(uint8_t i = 0; i < command->iterations; i++)
 801d830:	7dfb      	ldrb	r3, [r7, #23]
 801d832:	3301      	adds	r3, #1
 801d834:	75fb      	strb	r3, [r7, #23]
 801d836:	687b      	ldr	r3, [r7, #4]
 801d838:	795b      	ldrb	r3, [r3, #5]
 801d83a:	7dfa      	ldrb	r2, [r7, #23]
 801d83c:	429a      	cmp	r2, r3
 801d83e:	f4ff aeed 	bcc.w	801d61c <spi_testing+0x30>
	}

    return TEST_PASS;
 801d842:	2301      	movs	r3, #1
}
 801d844:	4618      	mov	r0, r3
 801d846:	3718      	adds	r7, #24
 801d848:	46bd      	mov	sp, r7
 801d84a:	bd80      	pop	{r7, pc}
 801d84c:	08021dc0 	.word	0x08021dc0
 801d850:	20027b10 	.word	0x20027b10
 801d854:	08021df4 	.word	0x08021df4
 801d858:	20027c10 	.word	0x20027c10
 801d85c:	200003d0 	.word	0x200003d0
 801d860:	20000434 	.word	0x20000434
 801d864:	40021800 	.word	0x40021800
 801d868:	20027910 	.word	0x20027910
 801d86c:	20027a10 	.word	0x20027a10
 801d870:	08021e14 	.word	0x08021e14
 801d874:	08021e38 	.word	0x08021e38
 801d878:	20000dcc 	.word	0x20000dcc
 801d87c:	08021e60 	.word	0x08021e60
 801d880:	20000dd0 	.word	0x20000dd0
 801d884:	08021e74 	.word	0x08021e74
 801d888:	08021e88 	.word	0x08021e88
 801d88c:	08021ea8 	.word	0x08021ea8
 801d890:	20000dc0 	.word	0x20000dc0
 801d894:	08021ed0 	.word	0x08021ed0
 801d898:	08021ee4 	.word	0x08021ee4
 801d89c:	08021f10 	.word	0x08021f10
 801d8a0:	08021f30 	.word	0x08021f30
 801d8a4:	08021f3c 	.word	0x08021f3c
 801d8a8:	08021f48 	.word	0x08021f48

0801d8ac <HAL_SPI_RxCpltCallback>:
//    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
//}

// Rx Complete Callback
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801d8ac:	b580      	push	{r7, lr}
 801d8ae:	b084      	sub	sp, #16
 801d8b0:	af00      	add	r7, sp, #0
 801d8b2:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d8b4:	2300      	movs	r3, #0
 801d8b6:	60fb      	str	r3, [r7, #12]
    if (hspi->Instance == SPI_RECEIVER->Instance)
 801d8b8:	687b      	ldr	r3, [r7, #4]
 801d8ba:	681a      	ldr	r2, [r3, #0]
 801d8bc:	4b14      	ldr	r3, [pc, #80]	@ (801d910 <HAL_SPI_RxCpltCallback+0x64>)
 801d8be:	681b      	ldr	r3, [r3, #0]
 801d8c0:	429a      	cmp	r2, r3
 801d8c2:	d108      	bne.n	801d8d6 <HAL_SPI_RxCpltCallback+0x2a>
    {
        xSemaphoreGiveFromISR(SpiSlaveRxHandle, &xHigherPriorityTaskWoken);
 801d8c4:	4b13      	ldr	r3, [pc, #76]	@ (801d914 <HAL_SPI_RxCpltCallback+0x68>)
 801d8c6:	681b      	ldr	r3, [r3, #0]
 801d8c8:	f107 020c 	add.w	r2, r7, #12
 801d8cc:	4611      	mov	r1, r2
 801d8ce:	4618      	mov	r0, r3
 801d8d0:	f7f2 fa25 	bl	800fd1e <xQueueGiveFromISR>
 801d8d4:	e00d      	b.n	801d8f2 <HAL_SPI_RxCpltCallback+0x46>
//        printf("Slave Rx callback fired, starting echo\n\r");
    }
    else if (hspi->Instance == SPI_SENDER->Instance)
 801d8d6:	687b      	ldr	r3, [r7, #4]
 801d8d8:	681a      	ldr	r2, [r3, #0]
 801d8da:	4b0f      	ldr	r3, [pc, #60]	@ (801d918 <HAL_SPI_RxCpltCallback+0x6c>)
 801d8dc:	681b      	ldr	r3, [r3, #0]
 801d8de:	429a      	cmp	r2, r3
 801d8e0:	d107      	bne.n	801d8f2 <HAL_SPI_RxCpltCallback+0x46>
    {
//        printf("Master Rx callback fired\n\r");
        xSemaphoreGiveFromISR(SpiRxHandle, &xHigherPriorityTaskWoken);
 801d8e2:	4b0e      	ldr	r3, [pc, #56]	@ (801d91c <HAL_SPI_RxCpltCallback+0x70>)
 801d8e4:	681b      	ldr	r3, [r3, #0]
 801d8e6:	f107 020c 	add.w	r2, r7, #12
 801d8ea:	4611      	mov	r1, r2
 801d8ec:	4618      	mov	r0, r3
 801d8ee:	f7f2 fa16 	bl	800fd1e <xQueueGiveFromISR>
    }
    else
    {
    	UNUSED(hspi);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d8f2:	68fb      	ldr	r3, [r7, #12]
 801d8f4:	2b00      	cmp	r3, #0
 801d8f6:	d007      	beq.n	801d908 <HAL_SPI_RxCpltCallback+0x5c>
 801d8f8:	4b09      	ldr	r3, [pc, #36]	@ (801d920 <HAL_SPI_RxCpltCallback+0x74>)
 801d8fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d8fe:	601a      	str	r2, [r3, #0]
 801d900:	f3bf 8f4f 	dsb	sy
 801d904:	f3bf 8f6f 	isb	sy
}
 801d908:	bf00      	nop
 801d90a:	3710      	adds	r7, #16
 801d90c:	46bd      	mov	sp, r7
 801d90e:	bd80      	pop	{r7, pc}
 801d910:	20000434 	.word	0x20000434
 801d914:	20000dd0 	.word	0x20000dd0
 801d918:	200003d0 	.word	0x200003d0
 801d91c:	20000dc0 	.word	0x20000dc0
 801d920:	e000ed04 	.word	0xe000ed04

0801d924 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801d924:	b580      	push	{r7, lr}
 801d926:	b084      	sub	sp, #16
 801d928:	af00      	add	r7, sp, #0
 801d92a:	6078      	str	r0, [r7, #4]

    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d92c:	2300      	movs	r3, #0
 801d92e:	60fb      	str	r3, [r7, #12]
    if (hspi->Instance == SPI_RECEIVER->Instance)
 801d930:	687b      	ldr	r3, [r7, #4]
 801d932:	681a      	ldr	r2, [r3, #0]
 801d934:	4b18      	ldr	r3, [pc, #96]	@ (801d998 <HAL_SPI_TxRxCpltCallback+0x74>)
 801d936:	681b      	ldr	r3, [r3, #0]
 801d938:	429a      	cmp	r2, r3
 801d93a:	d110      	bne.n	801d95e <HAL_SPI_TxRxCpltCallback+0x3a>
    {
        xSemaphoreGiveFromISR(SpiSlaveRxHandle, &xHigherPriorityTaskWoken);
 801d93c:	4b17      	ldr	r3, [pc, #92]	@ (801d99c <HAL_SPI_TxRxCpltCallback+0x78>)
 801d93e:	681b      	ldr	r3, [r3, #0]
 801d940:	f107 020c 	add.w	r2, r7, #12
 801d944:	4611      	mov	r1, r2
 801d946:	4618      	mov	r0, r3
 801d948:	f7f2 f9e9 	bl	800fd1e <xQueueGiveFromISR>
//        printf("Slave TxRx callback fired\n\r");
        memcpy(echo_tx_buffer,echo_rx_buffer, SPI_RECEIVER->RxXferSize);
 801d94c:	4b12      	ldr	r3, [pc, #72]	@ (801d998 <HAL_SPI_TxRxCpltCallback+0x74>)
 801d94e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801d952:	461a      	mov	r2, r3
 801d954:	4912      	ldr	r1, [pc, #72]	@ (801d9a0 <HAL_SPI_TxRxCpltCallback+0x7c>)
 801d956:	4813      	ldr	r0, [pc, #76]	@ (801d9a4 <HAL_SPI_TxRxCpltCallback+0x80>)
 801d958:	f000 fdc5 	bl	801e4e6 <memcpy>
 801d95c:	e00d      	b.n	801d97a <HAL_SPI_TxRxCpltCallback+0x56>
    }
    else if (hspi->Instance == SPI_SENDER->Instance)
 801d95e:	687b      	ldr	r3, [r7, #4]
 801d960:	681a      	ldr	r2, [r3, #0]
 801d962:	4b11      	ldr	r3, [pc, #68]	@ (801d9a8 <HAL_SPI_TxRxCpltCallback+0x84>)
 801d964:	681b      	ldr	r3, [r3, #0]
 801d966:	429a      	cmp	r2, r3
 801d968:	d107      	bne.n	801d97a <HAL_SPI_TxRxCpltCallback+0x56>
    {
//        printf("Master TxRx callback fired\n\r");
        xSemaphoreGiveFromISR(SpiTxHandle, &xHigherPriorityTaskWoken);
 801d96a:	4b10      	ldr	r3, [pc, #64]	@ (801d9ac <HAL_SPI_TxRxCpltCallback+0x88>)
 801d96c:	681b      	ldr	r3, [r3, #0]
 801d96e:	f107 020c 	add.w	r2, r7, #12
 801d972:	4611      	mov	r1, r2
 801d974:	4618      	mov	r0, r3
 801d976:	f7f2 f9d2 	bl	800fd1e <xQueueGiveFromISR>
    }
    else
    {
    	UNUSED(hspi);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d97a:	68fb      	ldr	r3, [r7, #12]
 801d97c:	2b00      	cmp	r3, #0
 801d97e:	d007      	beq.n	801d990 <HAL_SPI_TxRxCpltCallback+0x6c>
 801d980:	4b0b      	ldr	r3, [pc, #44]	@ (801d9b0 <HAL_SPI_TxRxCpltCallback+0x8c>)
 801d982:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d986:	601a      	str	r2, [r3, #0]
 801d988:	f3bf 8f4f 	dsb	sy
 801d98c:	f3bf 8f6f 	isb	sy
}
 801d990:	bf00      	nop
 801d992:	3710      	adds	r7, #16
 801d994:	46bd      	mov	sp, r7
 801d996:	bd80      	pop	{r7, pc}
 801d998:	20000434 	.word	0x20000434
 801d99c:	20000dd0 	.word	0x20000dd0
 801d9a0:	20027910 	.word	0x20027910
 801d9a4:	20027a10 	.word	0x20027a10
 801d9a8:	200003d0 	.word	0x200003d0
 801d9ac:	20000dcc 	.word	0x20000dcc
 801d9b0:	e000ed04 	.word	0xe000ed04

0801d9b4 <clear_flags>:

void clear_flags(SPI_HandleTypeDef *hspi)
{
 801d9b4:	b580      	push	{r7, lr}
 801d9b6:	b084      	sub	sp, #16
 801d9b8:	af00      	add	r7, sp, #0
 801d9ba:	6078      	str	r0, [r7, #4]
    HAL_SPI_Abort(hspi);
 801d9bc:	6878      	ldr	r0, [r7, #4]
 801d9be:	f7ec faa7 	bl	8009f10 <HAL_SPI_Abort>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801d9c2:	2300      	movs	r3, #0
 801d9c4:	60fb      	str	r3, [r7, #12]
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	681b      	ldr	r3, [r3, #0]
 801d9ca:	68db      	ldr	r3, [r3, #12]
 801d9cc:	60fb      	str	r3, [r7, #12]
 801d9ce:	687b      	ldr	r3, [r7, #4]
 801d9d0:	681b      	ldr	r3, [r3, #0]
 801d9d2:	689b      	ldr	r3, [r3, #8]
 801d9d4:	60fb      	str	r3, [r7, #12]
 801d9d6:	68fb      	ldr	r3, [r7, #12]
    HAL_SPIEx_FlushRxFifo(hspi);
 801d9d8:	6878      	ldr	r0, [r7, #4]
 801d9da:	f7ed f9ed 	bl	800adb8 <HAL_SPIEx_FlushRxFifo>
}
 801d9de:	bf00      	nop
 801d9e0:	3710      	adds	r7, #16
 801d9e2:	46bd      	mov	sp, r7
 801d9e4:	bd80      	pop	{r7, pc}
	...

0801d9e8 <reset_test>:
void reset_test()
{
 801d9e8:	b580      	push	{r7, lr}
 801d9ea:	af00      	add	r7, sp, #0
	HAL_SPI_Abort(SPI_SENDER);
 801d9ec:	4813      	ldr	r0, [pc, #76]	@ (801da3c <reset_test+0x54>)
 801d9ee:	f7ec fa8f 	bl	8009f10 <HAL_SPI_Abort>
	HAL_SPI_Abort(SPI_RECEIVER);
 801d9f2:	4813      	ldr	r0, [pc, #76]	@ (801da40 <reset_test+0x58>)
 801d9f4:	f7ec fa8c 	bl	8009f10 <HAL_SPI_Abort>
    while (xSemaphoreTake(SpiTxHandle, 0) == pdTRUE) {}
 801d9f8:	bf00      	nop
 801d9fa:	4b12      	ldr	r3, [pc, #72]	@ (801da44 <reset_test+0x5c>)
 801d9fc:	681b      	ldr	r3, [r3, #0]
 801d9fe:	2100      	movs	r1, #0
 801da00:	4618      	mov	r0, r3
 801da02:	f7f2 fb0d 	bl	8010020 <xQueueSemaphoreTake>
 801da06:	4603      	mov	r3, r0
 801da08:	2b01      	cmp	r3, #1
 801da0a:	d0f6      	beq.n	801d9fa <reset_test+0x12>
    while (xSemaphoreTake(SpiRxHandle, 0) == pdTRUE) {}
 801da0c:	bf00      	nop
 801da0e:	4b0e      	ldr	r3, [pc, #56]	@ (801da48 <reset_test+0x60>)
 801da10:	681b      	ldr	r3, [r3, #0]
 801da12:	2100      	movs	r1, #0
 801da14:	4618      	mov	r0, r3
 801da16:	f7f2 fb03 	bl	8010020 <xQueueSemaphoreTake>
 801da1a:	4603      	mov	r3, r0
 801da1c:	2b01      	cmp	r3, #1
 801da1e:	d0f6      	beq.n	801da0e <reset_test+0x26>
    while (xSemaphoreTake(SpiSlaveRxHandle, 0) == pdTRUE) {}
 801da20:	bf00      	nop
 801da22:	4b0a      	ldr	r3, [pc, #40]	@ (801da4c <reset_test+0x64>)
 801da24:	681b      	ldr	r3, [r3, #0]
 801da26:	2100      	movs	r1, #0
 801da28:	4618      	mov	r0, r3
 801da2a:	f7f2 faf9 	bl	8010020 <xQueueSemaphoreTake>
 801da2e:	4603      	mov	r3, r0
 801da30:	2b01      	cmp	r3, #1
 801da32:	d0f6      	beq.n	801da22 <reset_test+0x3a>
}
 801da34:	bf00      	nop
 801da36:	bf00      	nop
 801da38:	bd80      	pop	{r7, pc}
 801da3a:	bf00      	nop
 801da3c:	200003d0 	.word	0x200003d0
 801da40:	20000434 	.word	0x20000434
 801da44:	20000dcc 	.word	0x20000dcc
 801da48:	20000dc0 	.word	0x20000dc0
 801da4c:	20000dd0 	.word	0x20000dd0

0801da50 <HAL_SPI_ErrorCallback>:


void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 801da50:	b580      	push	{r7, lr}
 801da52:	b084      	sub	sp, #16
 801da54:	af00      	add	r7, sp, #0
 801da56:	6078      	str	r0, [r7, #4]
  if (hspi->Instance == SPI_RECEIVER->Instance)
 801da58:	687b      	ldr	r3, [r7, #4]
 801da5a:	681a      	ldr	r2, [r3, #0]
 801da5c:	4b0e      	ldr	r3, [pc, #56]	@ (801da98 <HAL_SPI_ErrorCallback+0x48>)
 801da5e:	681b      	ldr	r3, [r3, #0]
 801da60:	429a      	cmp	r2, r3
 801da62:	d114      	bne.n	801da8e <HAL_SPI_ErrorCallback+0x3e>
  {
    if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_OVR))
 801da64:	687b      	ldr	r3, [r7, #4]
 801da66:	681b      	ldr	r3, [r3, #0]
 801da68:	689b      	ldr	r3, [r3, #8]
 801da6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801da6e:	2b40      	cmp	r3, #64	@ 0x40
 801da70:	d10d      	bne.n	801da8e <HAL_SPI_ErrorCallback+0x3e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801da72:	2300      	movs	r3, #0
 801da74:	60fb      	str	r3, [r7, #12]
 801da76:	687b      	ldr	r3, [r7, #4]
 801da78:	681b      	ldr	r3, [r3, #0]
 801da7a:	68db      	ldr	r3, [r3, #12]
 801da7c:	60fb      	str	r3, [r7, #12]
 801da7e:	687b      	ldr	r3, [r7, #4]
 801da80:	681b      	ldr	r3, [r3, #0]
 801da82:	689b      	ldr	r3, [r3, #8]
 801da84:	60fb      	str	r3, [r7, #12]
 801da86:	68fb      	ldr	r3, [r7, #12]
      HAL_SPIEx_FlushRxFifo(hspi);
 801da88:	6878      	ldr	r0, [r7, #4]
 801da8a:	f7ed f995 	bl	800adb8 <HAL_SPIEx_FlushRxFifo>
    }
  }
}
 801da8e:	bf00      	nop
 801da90:	3710      	adds	r7, #16
 801da92:	46bd      	mov	sp, r7
 801da94:	bd80      	pop	{r7, pc}
 801da96:	bf00      	nop
 801da98:	20000434 	.word	0x20000434

0801da9c <timer_testing>:
/*
 * @brief Performs a test on the TIMER using the command protocol.
 * @param command: A pointer to the test_command_t struct.
 * @retval result_t: The result of the test (TEST_PASS or TEST_FAIL).
 */
Result timer_testing(test_command_t* command){
 801da9c:	b580      	push	{r7, lr}
 801da9e:	b084      	sub	sp, #16
 801daa0:	af00      	add	r7, sp, #0
 801daa2:	6078      	str	r0, [r7, #4]

	uint16_t start_val ,end_val;

	if (command == NULL) {
 801daa4:	687b      	ldr	r3, [r7, #4]
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	d102      	bne.n	801dab0 <timer_testing+0x14>
//        printf("Received NULL command pointer. Skipping.\n\r"); // Debug printf
        return TEST_ERR;
 801daaa:	f04f 33ff 	mov.w	r3, #4294967295
 801daae:	e022      	b.n	801daf6 <timer_testing+0x5a>
	}

	// Start Timer
	HAL_TIM_Base_Start_IT(&htim7);
 801dab0:	4813      	ldr	r0, [pc, #76]	@ (801db00 <timer_testing+0x64>)
 801dab2:	f7ed f9fb 	bl	800aeac <HAL_TIM_Base_Start_IT>

	for(uint8_t i=0 ; i< command->iterations ; i++){
 801dab6:	2300      	movs	r3, #0
 801dab8:	73fb      	strb	r3, [r7, #15]
 801daba:	e013      	b.n	801dae4 <timer_testing+0x48>

	    if (xSemaphoreTake(TimSemHandle, pdMS_TO_TICKS(200)) != pdPASS) {
 801dabc:	4b11      	ldr	r3, [pc, #68]	@ (801db04 <timer_testing+0x68>)
 801dabe:	681b      	ldr	r3, [r3, #0]
 801dac0:	21c8      	movs	r1, #200	@ 0xc8
 801dac2:	4618      	mov	r0, r3
 801dac4:	f7f2 faac 	bl	8010020 <xQueueSemaphoreTake>
 801dac8:	4603      	mov	r3, r0
 801daca:	2b01      	cmp	r3, #1
 801dacc:	d004      	beq.n	801dad8 <timer_testing+0x3c>
//			printf("Fail on iteration %u.\n\r",i+1); // Debug printf
	         vPortFree(command);
 801dace:	6878      	ldr	r0, [r7, #4]
 801dad0:	f7f4 fe48 	bl	8012764 <vPortFree>
	         return TEST_FAIL;
 801dad4:	23ff      	movs	r3, #255	@ 0xff
 801dad6:	e00e      	b.n	801daf6 <timer_testing+0x5a>
	    }

//		printf("success on iteration %u.\n\r", i + 1); // Debug printf
        osDelay(10); // Small delay between iterations to prevent overwhelming the UUT or the system
 801dad8:	200a      	movs	r0, #10
 801dada:	f7f0 ffc3 	bl	800ea64 <osDelay>
	for(uint8_t i=0 ; i< command->iterations ; i++){
 801dade:	7bfb      	ldrb	r3, [r7, #15]
 801dae0:	3301      	adds	r3, #1
 801dae2:	73fb      	strb	r3, [r7, #15]
 801dae4:	687b      	ldr	r3, [r7, #4]
 801dae6:	795b      	ldrb	r3, [r3, #5]
 801dae8:	7bfa      	ldrb	r2, [r7, #15]
 801daea:	429a      	cmp	r2, r3
 801daec:	d3e6      	bcc.n	801dabc <timer_testing+0x20>
	}// end of iterations

    // Stop Timer after the test is complete
	HAL_TIM_Base_Stop_IT(&htim7);
 801daee:	4804      	ldr	r0, [pc, #16]	@ (801db00 <timer_testing+0x64>)
 801daf0:	f7ed fa54 	bl	800af9c <HAL_TIM_Base_Stop_IT>

    return TEST_PASS;
 801daf4:	2301      	movs	r3, #1
}
 801daf6:	4618      	mov	r0, r3
 801daf8:	3710      	adds	r7, #16
 801dafa:	46bd      	mov	sp, r7
 801dafc:	bd80      	pop	{r7, pc}
 801dafe:	bf00      	nop
 801db00:	20000618 	.word	0x20000618
 801db04:	20000dc8 	.word	0x20000dc8

0801db08 <uart_testing>:
/*
 * @brief Performs a test on the UART peripheral using the command protocol.
 * @param command: A pointer to the test_command_t struct.
 * @retval result_t: The result of the test (TEST_PASS or TEST_FAIL).
 */
Result uart_testing(test_command_t* command){
 801db08:	b580      	push	{r7, lr}
 801db0a:	f5ad 7d46 	sub.w	sp, sp, #792	@ 0x318
 801db0e:	af00      	add	r7, sp, #0
 801db10:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801db14:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801db18:	6018      	str	r0, [r3, #0]

	uint8_t tx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801db1a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801db1e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801db22:	4618      	mov	r0, r3
 801db24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801db28:	461a      	mov	r2, r3
 801db2a:	2100      	movs	r1, #0
 801db2c:	f000 fc08 	bl	801e340 <memset>
	uint8_t rx_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801db30:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801db34:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 801db38:	4618      	mov	r0, r3
 801db3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801db3e:	461a      	mov	r2, r3
 801db40:	2100      	movs	r1, #0
 801db42:	f000 fbfd 	bl	801e340 <memset>
	uint8_t echo_buffer[MAX_BIT_PATTERN_LENGTH] = {0};
 801db46:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801db4a:	f5a3 7344 	sub.w	r3, r3, #784	@ 0x310
 801db4e:	4618      	mov	r0, r3
 801db50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801db54:	461a      	mov	r2, r3
 801db56:	2100      	movs	r1, #0
 801db58:	f000 fbf2 	bl	801e340 <memset>

	HAL_StatusTypeDef rx_status, tx_status;

	if (command == NULL) {
 801db5c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801db60:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801db64:	681b      	ldr	r3, [r3, #0]
 801db66:	2b00      	cmp	r3, #0
 801db68:	d105      	bne.n	801db76 <uart_testing+0x6e>
        printf("UART_TEST: Received NULL command pointer. Skipping.\n\r"); // Debug printf
 801db6a:	4890      	ldr	r0, [pc, #576]	@ (801ddac <uart_testing+0x2a4>)
 801db6c:	f000 fa90 	bl	801e090 <iprintf>
        return TEST_ERR;
 801db70:	f04f 33ff 	mov.w	r3, #4294967295
 801db74:	e115      	b.n	801dda2 <uart_testing+0x29a>
	}

	// Copy pattern to TX buffer
    memcpy(tx_buffer, command->bit_pattern, command->bit_pattern_length);
 801db76:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801db7a:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801db7e:	681b      	ldr	r3, [r3, #0]
 801db80:	1dd9      	adds	r1, r3, #7
 801db82:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801db86:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801db8a:	681b      	ldr	r3, [r3, #0]
 801db8c:	799b      	ldrb	r3, [r3, #6]
 801db8e:	461a      	mov	r2, r3
 801db90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801db94:	4618      	mov	r0, r3
 801db96:	f000 fca6 	bl	801e4e6 <memcpy>

    for(uint8_t i=0 ; i< command->iterations ; i++){
 801db9a:	2300      	movs	r3, #0
 801db9c:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
 801dba0:	e0f3      	b.n	801dd8a <uart_testing+0x282>
//        printf("UART_TEST: Iteration %u/%u:\n\r", i + 1, command->iterations); // Debug printf
        memset(rx_buffer, 0, command->bit_pattern_length);
 801dba2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dba6:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dbaa:	681b      	ldr	r3, [r3, #0]
 801dbac:	799b      	ldrb	r3, [r3, #6]
 801dbae:	461a      	mov	r2, r3
 801dbb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801dbb4:	2100      	movs	r1, #0
 801dbb6:	4618      	mov	r0, r3
 801dbb8:	f000 fbc2 	bl	801e340 <memset>

        // RECEIVER start to RECEIVE DMA
        rx_status = HAL_UART_Receive_DMA(UART_RECEIVER, echo_buffer, command->bit_pattern_length);
 801dbbc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dbc0:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dbc4:	681b      	ldr	r3, [r3, #0]
 801dbc6:	799b      	ldrb	r3, [r3, #6]
 801dbc8:	461a      	mov	r2, r3
 801dbca:	f107 0308 	add.w	r3, r7, #8
 801dbce:	4619      	mov	r1, r3
 801dbd0:	4877      	ldr	r0, [pc, #476]	@ (801ddb0 <uart_testing+0x2a8>)
 801dbd2:	f7ed fe8b 	bl	800b8ec <HAL_UART_Receive_DMA>
 801dbd6:	4603      	mov	r3, r0
 801dbd8:	f887 3316 	strb.w	r3, [r7, #790]	@ 0x316
        if (rx_status != HAL_OK) {
 801dbdc:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801dbe0:	2b00      	cmp	r3, #0
 801dbe2:	d007      	beq.n	801dbf4 <uart_testing+0xec>
            printf("Receiver Failed to start receive: %d\n\r", rx_status);
 801dbe4:	f897 3316 	ldrb.w	r3, [r7, #790]	@ 0x316
 801dbe8:	4619      	mov	r1, r3
 801dbea:	4872      	ldr	r0, [pc, #456]	@ (801ddb4 <uart_testing+0x2ac>)
 801dbec:	f000 fa50 	bl	801e090 <iprintf>
            return TEST_FAIL;
 801dbf0:	23ff      	movs	r3, #255	@ 0xff
 801dbf2:	e0d6      	b.n	801dda2 <uart_testing+0x29a>
        }
        // Arm sender receive before receiver transmits back
        if (HAL_UART_Receive_IT(UART_SENDER, rx_buffer, command->bit_pattern_length) != HAL_OK) {
 801dbf4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dbf8:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dbfc:	681b      	ldr	r3, [r3, #0]
 801dbfe:	799b      	ldrb	r3, [r3, #6]
 801dc00:	461a      	mov	r2, r3
 801dc02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801dc06:	4619      	mov	r1, r3
 801dc08:	486b      	ldr	r0, [pc, #428]	@ (801ddb8 <uart_testing+0x2b0>)
 801dc0a:	f7ed fdaf 	bl	800b76c <HAL_UART_Receive_IT>
 801dc0e:	4603      	mov	r3, r0
 801dc10:	2b00      	cmp	r3, #0
 801dc12:	d007      	beq.n	801dc24 <uart_testing+0x11c>
            HAL_UART_Abort(UART_RECEIVER);
 801dc14:	4866      	ldr	r0, [pc, #408]	@ (801ddb0 <uart_testing+0x2a8>)
 801dc16:	f7ed fead 	bl	800b974 <HAL_UART_Abort>
            printf("Sender Failed to start receive back\n\r");
 801dc1a:	4868      	ldr	r0, [pc, #416]	@ (801ddbc <uart_testing+0x2b4>)
 801dc1c:	f000 fa38 	bl	801e090 <iprintf>
            return TEST_FAIL;
 801dc20:	23ff      	movs	r3, #255	@ 0xff
 801dc22:	e0be      	b.n	801dda2 <uart_testing+0x29a>
        }

        // SENDER TRANSMIT a block of data via DMA
        tx_status = HAL_UART_Transmit_DMA(UART_SENDER, tx_buffer, command->bit_pattern_length);
 801dc24:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dc28:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dc2c:	681b      	ldr	r3, [r3, #0]
 801dc2e:	799b      	ldrb	r3, [r3, #6]
 801dc30:	461a      	mov	r2, r3
 801dc32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801dc36:	4619      	mov	r1, r3
 801dc38:	485f      	ldr	r0, [pc, #380]	@ (801ddb8 <uart_testing+0x2b0>)
 801dc3a:	f7ed fddb 	bl	800b7f4 <HAL_UART_Transmit_DMA>
 801dc3e:	4603      	mov	r3, r0
 801dc40:	f887 3315 	strb.w	r3, [r7, #789]	@ 0x315
        if (tx_status != HAL_OK) {
 801dc44:	f897 3315 	ldrb.w	r3, [r7, #789]	@ 0x315
 801dc48:	2b00      	cmp	r3, #0
 801dc4a:	d00a      	beq.n	801dc62 <uart_testing+0x15a>
            printf("Failed to send on UART sender: %d\n\r", tx_status);
 801dc4c:	f897 3315 	ldrb.w	r3, [r7, #789]	@ 0x315
 801dc50:	4619      	mov	r1, r3
 801dc52:	485b      	ldr	r0, [pc, #364]	@ (801ddc0 <uart_testing+0x2b8>)
 801dc54:	f000 fa1c 	bl	801e090 <iprintf>
            HAL_UART_Abort(UART_RECEIVER);
 801dc58:	4855      	ldr	r0, [pc, #340]	@ (801ddb0 <uart_testing+0x2a8>)
 801dc5a:	f7ed fe8b 	bl	800b974 <HAL_UART_Abort>
            return TEST_FAIL;
 801dc5e:	23ff      	movs	r3, #255	@ 0xff
 801dc60:	e09f      	b.n	801dda2 <uart_testing+0x29a>
        }
        // WAIT FOR TX COMPLETION
        if (xSemaphoreTake(UartTxHandle, TIMEOUT) != pdPASS) {
 801dc62:	4b58      	ldr	r3, [pc, #352]	@ (801ddc4 <uart_testing+0x2bc>)
 801dc64:	681b      	ldr	r3, [r3, #0]
 801dc66:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801dc6a:	4618      	mov	r0, r3
 801dc6c:	f7f2 f9d8 	bl	8010020 <xQueueSemaphoreTake>
 801dc70:	4603      	mov	r3, r0
 801dc72:	2b01      	cmp	r3, #1
 801dc74:	d00a      	beq.n	801dc8c <uart_testing+0x184>
             printf("fail to get TxSemaphore\n\r");
 801dc76:	4854      	ldr	r0, [pc, #336]	@ (801ddc8 <uart_testing+0x2c0>)
 801dc78:	f000 fa0a 	bl	801e090 <iprintf>
             HAL_UART_Abort(UART_RECEIVER);
 801dc7c:	484c      	ldr	r0, [pc, #304]	@ (801ddb0 <uart_testing+0x2a8>)
 801dc7e:	f7ed fe79 	bl	800b974 <HAL_UART_Abort>
             HAL_UART_Abort(UART_SENDER);
 801dc82:	484d      	ldr	r0, [pc, #308]	@ (801ddb8 <uart_testing+0x2b0>)
 801dc84:	f7ed fe76 	bl	800b974 <HAL_UART_Abort>
             return TEST_FAIL;
 801dc88:	23ff      	movs	r3, #255	@ 0xff
 801dc8a:	e08a      	b.n	801dda2 <uart_testing+0x29a>
        }
        else
        {
			 if (HAL_UART_Transmit_IT(UART_RECEIVER, echo_buffer, command->bit_pattern_length) != HAL_OK){
 801dc8c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dc90:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dc94:	681b      	ldr	r3, [r3, #0]
 801dc96:	799b      	ldrb	r3, [r3, #6]
 801dc98:	461a      	mov	r2, r3
 801dc9a:	f107 0308 	add.w	r3, r7, #8
 801dc9e:	4619      	mov	r1, r3
 801dca0:	4843      	ldr	r0, [pc, #268]	@ (801ddb0 <uart_testing+0x2a8>)
 801dca2:	f7ed fd05 	bl	800b6b0 <HAL_UART_Transmit_IT>
 801dca6:	4603      	mov	r3, r0
 801dca8:	2b00      	cmp	r3, #0
 801dcaa:	d00d      	beq.n	801dcc8 <uart_testing+0x1c0>
				 printf("Failed to echo send on UART receiver: %d\n\r", tx_status);
 801dcac:	f897 3315 	ldrb.w	r3, [r7, #789]	@ 0x315
 801dcb0:	4619      	mov	r1, r3
 801dcb2:	4846      	ldr	r0, [pc, #280]	@ (801ddcc <uart_testing+0x2c4>)
 801dcb4:	f000 f9ec 	bl	801e090 <iprintf>
				 HAL_UART_Abort(UART_RECEIVER);
 801dcb8:	483d      	ldr	r0, [pc, #244]	@ (801ddb0 <uart_testing+0x2a8>)
 801dcba:	f7ed fe5b 	bl	800b974 <HAL_UART_Abort>
				 HAL_UART_Abort(UART_SENDER);
 801dcbe:	483e      	ldr	r0, [pc, #248]	@ (801ddb8 <uart_testing+0x2b0>)
 801dcc0:	f7ed fe58 	bl	800b974 <HAL_UART_Abort>
				 return TEST_FAIL;
 801dcc4:	23ff      	movs	r3, #255	@ 0xff
 801dcc6:	e06c      	b.n	801dda2 <uart_testing+0x29a>
			 }
        }

        // WAIT FOR RECEIVER RX COMPLETION
        if (xSemaphoreTake(UartRxHandle, TIMEOUT) != pdPASS) {
 801dcc8:	4b41      	ldr	r3, [pc, #260]	@ (801ddd0 <uart_testing+0x2c8>)
 801dcca:	681b      	ldr	r3, [r3, #0]
 801dccc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801dcd0:	4618      	mov	r0, r3
 801dcd2:	f7f2 f9a5 	bl	8010020 <xQueueSemaphoreTake>
 801dcd6:	4603      	mov	r3, r0
 801dcd8:	2b01      	cmp	r3, #1
 801dcda:	d00a      	beq.n	801dcf2 <uart_testing+0x1ea>
            printf("fail to get RxSemaphore\n\r");
 801dcdc:	483d      	ldr	r0, [pc, #244]	@ (801ddd4 <uart_testing+0x2cc>)
 801dcde:	f000 f9d7 	bl	801e090 <iprintf>
            HAL_UART_Abort(UART_SENDER);
 801dce2:	4835      	ldr	r0, [pc, #212]	@ (801ddb8 <uart_testing+0x2b0>)
 801dce4:	f7ed fe46 	bl	800b974 <HAL_UART_Abort>
            HAL_UART_Abort(UART_RECEIVER);
 801dce8:	4831      	ldr	r0, [pc, #196]	@ (801ddb0 <uart_testing+0x2a8>)
 801dcea:	f7ed fe43 	bl	800b974 <HAL_UART_Abort>
            return TEST_FAIL;
 801dcee:	23ff      	movs	r3, #255	@ 0xff
 801dcf0:	e057      	b.n	801dda2 <uart_testing+0x29a>
        }

	    // COMPARE SENT vs. RECEIVED data
	    if (command->bit_pattern_length > 100) {
 801dcf2:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dcf6:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dcfa:	681b      	ldr	r3, [r3, #0]
 801dcfc:	799b      	ldrb	r3, [r3, #6]
 801dcfe:	2b64      	cmp	r3, #100	@ 0x64
 801dd00:	d925      	bls.n	801dd4e <uart_testing+0x246>
//			printf("bit_pattern_length more than 100\n\r"); // Debug printf

			// Use CRC comparison for large data
			uint32_t sent_crc = calculate_crc(tx_buffer, command->bit_pattern_length);
 801dd02:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dd06:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dd0a:	681b      	ldr	r3, [r3, #0]
 801dd0c:	799b      	ldrb	r3, [r3, #6]
 801dd0e:	461a      	mov	r2, r3
 801dd10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801dd14:	4611      	mov	r1, r2
 801dd16:	4618      	mov	r0, r3
 801dd18:	f7e3 fa7c 	bl	8001214 <calculate_crc>
 801dd1c:	f8c7 030c 	str.w	r0, [r7, #780]	@ 0x30c
			uint32_t received_crc = calculate_crc(rx_buffer, command->bit_pattern_length);
 801dd20:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dd24:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dd28:	681b      	ldr	r3, [r3, #0]
 801dd2a:	799b      	ldrb	r3, [r3, #6]
 801dd2c:	461a      	mov	r2, r3
 801dd2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801dd32:	4611      	mov	r1, r2
 801dd34:	4618      	mov	r0, r3
 801dd36:	f7e3 fa6d 	bl	8001214 <calculate_crc>
 801dd3a:	f8c7 0308 	str.w	r0, [r7, #776]	@ 0x308
			if (sent_crc != received_crc) {
 801dd3e:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 801dd42:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801dd46:	429a      	cmp	r2, r3
 801dd48:	d017      	beq.n	801dd7a <uart_testing+0x272>
				// Debug printf
//				printf("UART_TEST: CRC mismatch on iteration %u. Sent CRC: 0x%lX, Received CRC: 0x%lX\n\r",
//					   i + 1, sent_crc, received_crc);
				return TEST_FAIL;
 801dd4a:	23ff      	movs	r3, #255	@ 0xff
 801dd4c:	e029      	b.n	801dda2 <uart_testing+0x29a>
			}
	    }
	    else {
			int comp = memcmp(tx_buffer, rx_buffer, command->bit_pattern_length);
 801dd4e:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dd52:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dd56:	681b      	ldr	r3, [r3, #0]
 801dd58:	799b      	ldrb	r3, [r3, #6]
 801dd5a:	461a      	mov	r2, r3
 801dd5c:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 801dd60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 801dd64:	4618      	mov	r0, r3
 801dd66:	f000 fadb 	bl	801e320 <memcmp>
 801dd6a:	f8c7 0310 	str.w	r0, [r7, #784]	@ 0x310
			if (comp != 0) {
 801dd6e:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 801dd72:	2b00      	cmp	r3, #0
 801dd74:	d001      	beq.n	801dd7a <uart_testing+0x272>
//				// Debug printf
//				printf("Data mismatch on iteration %u.\n\r", i + 1);
//				printf("Sent: %.*s\n\r", command->bit_pattern_length, tx_buffer);
//				printf("Recv: %.*s\n\r", command->bit_pattern_length, rx_buffer);
				return TEST_FAIL;
 801dd76:	23ff      	movs	r3, #255	@ 0xff
 801dd78:	e013      	b.n	801dda2 <uart_testing+0x29a>
			}
	    }
//	    printf("Data Match on iteration %u.\n\r", i + 1); // Debug printf

        osDelay(10); // Small delay between iterations to prevent overwhelming the UUT or the system
 801dd7a:	200a      	movs	r0, #10
 801dd7c:	f7f0 fe72 	bl	800ea64 <osDelay>
    for(uint8_t i=0 ; i< command->iterations ; i++){
 801dd80:	f897 3317 	ldrb.w	r3, [r7, #791]	@ 0x317
 801dd84:	3301      	adds	r3, #1
 801dd86:	f887 3317 	strb.w	r3, [r7, #791]	@ 0x317
 801dd8a:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 801dd8e:	f5a3 7345 	sub.w	r3, r3, #788	@ 0x314
 801dd92:	681b      	ldr	r3, [r3, #0]
 801dd94:	795b      	ldrb	r3, [r3, #5]
 801dd96:	f897 2317 	ldrb.w	r2, [r7, #791]	@ 0x317
 801dd9a:	429a      	cmp	r2, r3
 801dd9c:	f4ff af01 	bcc.w	801dba2 <uart_testing+0x9a>
	}
    return TEST_PASS;
 801dda0:	2301      	movs	r3, #1
}
 801dda2:	4618      	mov	r0, r3
 801dda4:	f507 7746 	add.w	r7, r7, #792	@ 0x318
 801dda8:	46bd      	mov	sp, r7
 801ddaa:	bd80      	pop	{r7, pc}
 801ddac:	08021f68 	.word	0x08021f68
 801ddb0:	20000664 	.word	0x20000664
 801ddb4:	08021fa0 	.word	0x08021fa0
 801ddb8:	200006ec 	.word	0x200006ec
 801ddbc:	08021fc8 	.word	0x08021fc8
 801ddc0:	08021ff0 	.word	0x08021ff0
 801ddc4:	20000db4 	.word	0x20000db4
 801ddc8:	08022014 	.word	0x08022014
 801ddcc:	08022030 	.word	0x08022030
 801ddd0:	20000db0 	.word	0x20000db0
 801ddd4:	0802205c 	.word	0x0802205c

0801ddd8 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801ddd8:	b480      	push	{r7}
 801ddda:	b085      	sub	sp, #20
 801dddc:	af00      	add	r7, sp, #0
 801ddde:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801dde0:	2300      	movs	r3, #0
 801dde2:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == UART_RECEIVER->Instance)
 801dde4:	687b      	ldr	r3, [r7, #4]
 801dde6:	681a      	ldr	r2, [r3, #0]
 801dde8:	4b09      	ldr	r3, [pc, #36]	@ (801de10 <HAL_UART_TxCpltCallback+0x38>)
 801ddea:	681b      	ldr	r3, [r3, #0]
 801ddec:	429a      	cmp	r2, r3
    }
    else
    {
    	UNUSED(huart);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801ddee:	68fb      	ldr	r3, [r7, #12]
 801ddf0:	2b00      	cmp	r3, #0
 801ddf2:	d007      	beq.n	801de04 <HAL_UART_TxCpltCallback+0x2c>
 801ddf4:	4b07      	ldr	r3, [pc, #28]	@ (801de14 <HAL_UART_TxCpltCallback+0x3c>)
 801ddf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801ddfa:	601a      	str	r2, [r3, #0]
 801ddfc:	f3bf 8f4f 	dsb	sy
 801de00:	f3bf 8f6f 	isb	sy
}
 801de04:	bf00      	nop
 801de06:	3714      	adds	r7, #20
 801de08:	46bd      	mov	sp, r7
 801de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de0e:	4770      	bx	lr
 801de10:	20000664 	.word	0x20000664
 801de14:	e000ed04 	.word	0xe000ed04

0801de18 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801de18:	b580      	push	{r7, lr}
 801de1a:	b084      	sub	sp, #16
 801de1c:	af00      	add	r7, sp, #0
 801de1e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801de20:	2300      	movs	r3, #0
 801de22:	60fb      	str	r3, [r7, #12]

    if (huart->Instance == UART_RECEIVER->Instance)
 801de24:	687b      	ldr	r3, [r7, #4]
 801de26:	681a      	ldr	r2, [r3, #0]
 801de28:	4b14      	ldr	r3, [pc, #80]	@ (801de7c <HAL_UART_RxCpltCallback+0x64>)
 801de2a:	681b      	ldr	r3, [r3, #0]
 801de2c:	429a      	cmp	r2, r3
 801de2e:	d108      	bne.n	801de42 <HAL_UART_RxCpltCallback+0x2a>
    {
        xSemaphoreGiveFromISR(UartTxHandle, &xHigherPriorityTaskWoken);
 801de30:	4b13      	ldr	r3, [pc, #76]	@ (801de80 <HAL_UART_RxCpltCallback+0x68>)
 801de32:	681b      	ldr	r3, [r3, #0]
 801de34:	f107 020c 	add.w	r2, r7, #12
 801de38:	4611      	mov	r1, r2
 801de3a:	4618      	mov	r0, r3
 801de3c:	f7f1 ff6f 	bl	800fd1e <xQueueGiveFromISR>
 801de40:	e00d      	b.n	801de5e <HAL_UART_RxCpltCallback+0x46>
//        printf("Receiver Rx callback fired \n\r"); // Debug printf
    }
    else if (huart->Instance == UART_SENDER->Instance)
 801de42:	687b      	ldr	r3, [r7, #4]
 801de44:	681a      	ldr	r2, [r3, #0]
 801de46:	4b0f      	ldr	r3, [pc, #60]	@ (801de84 <HAL_UART_RxCpltCallback+0x6c>)
 801de48:	681b      	ldr	r3, [r3, #0]
 801de4a:	429a      	cmp	r2, r3
 801de4c:	d107      	bne.n	801de5e <HAL_UART_RxCpltCallback+0x46>
    {
        xSemaphoreGiveFromISR(UartRxHandle, &xHigherPriorityTaskWoken);
 801de4e:	4b0e      	ldr	r3, [pc, #56]	@ (801de88 <HAL_UART_RxCpltCallback+0x70>)
 801de50:	681b      	ldr	r3, [r3, #0]
 801de52:	f107 020c 	add.w	r2, r7, #12
 801de56:	4611      	mov	r1, r2
 801de58:	4618      	mov	r0, r3
 801de5a:	f7f1 ff60 	bl	800fd1e <xQueueGiveFromISR>
    }
    else
    {
    	UNUSED(huart);
    }
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801de5e:	68fb      	ldr	r3, [r7, #12]
 801de60:	2b00      	cmp	r3, #0
 801de62:	d007      	beq.n	801de74 <HAL_UART_RxCpltCallback+0x5c>
 801de64:	4b09      	ldr	r3, [pc, #36]	@ (801de8c <HAL_UART_RxCpltCallback+0x74>)
 801de66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801de6a:	601a      	str	r2, [r3, #0]
 801de6c:	f3bf 8f4f 	dsb	sy
 801de70:	f3bf 8f6f 	isb	sy
}
 801de74:	bf00      	nop
 801de76:	3710      	adds	r7, #16
 801de78:	46bd      	mov	sp, r7
 801de7a:	bd80      	pop	{r7, pc}
 801de7c:	20000664 	.word	0x20000664
 801de80:	20000db4 	.word	0x20000db4
 801de84:	200006ec 	.word	0x200006ec
 801de88:	20000db0 	.word	0x20000db0
 801de8c:	e000ed04 	.word	0xe000ed04

0801de90 <rand>:
 801de90:	4b16      	ldr	r3, [pc, #88]	@ (801deec <rand+0x5c>)
 801de92:	b510      	push	{r4, lr}
 801de94:	681c      	ldr	r4, [r3, #0]
 801de96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801de98:	b9b3      	cbnz	r3, 801dec8 <rand+0x38>
 801de9a:	2018      	movs	r0, #24
 801de9c:	f000 fb9a 	bl	801e5d4 <malloc>
 801dea0:	4602      	mov	r2, r0
 801dea2:	6320      	str	r0, [r4, #48]	@ 0x30
 801dea4:	b920      	cbnz	r0, 801deb0 <rand+0x20>
 801dea6:	4b12      	ldr	r3, [pc, #72]	@ (801def0 <rand+0x60>)
 801dea8:	4812      	ldr	r0, [pc, #72]	@ (801def4 <rand+0x64>)
 801deaa:	2152      	movs	r1, #82	@ 0x52
 801deac:	f000 fb2a 	bl	801e504 <__assert_func>
 801deb0:	4911      	ldr	r1, [pc, #68]	@ (801def8 <rand+0x68>)
 801deb2:	4b12      	ldr	r3, [pc, #72]	@ (801defc <rand+0x6c>)
 801deb4:	e9c0 1300 	strd	r1, r3, [r0]
 801deb8:	4b11      	ldr	r3, [pc, #68]	@ (801df00 <rand+0x70>)
 801deba:	6083      	str	r3, [r0, #8]
 801debc:	230b      	movs	r3, #11
 801debe:	8183      	strh	r3, [r0, #12]
 801dec0:	2100      	movs	r1, #0
 801dec2:	2001      	movs	r0, #1
 801dec4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801dec8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801deca:	480e      	ldr	r0, [pc, #56]	@ (801df04 <rand+0x74>)
 801decc:	690b      	ldr	r3, [r1, #16]
 801dece:	694c      	ldr	r4, [r1, #20]
 801ded0:	4a0d      	ldr	r2, [pc, #52]	@ (801df08 <rand+0x78>)
 801ded2:	4358      	muls	r0, r3
 801ded4:	fb02 0004 	mla	r0, r2, r4, r0
 801ded8:	fba3 3202 	umull	r3, r2, r3, r2
 801dedc:	3301      	adds	r3, #1
 801dede:	eb40 0002 	adc.w	r0, r0, r2
 801dee2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801dee6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801deea:	bd10      	pop	{r4, pc}
 801deec:	2000003c 	.word	0x2000003c
 801def0:	080222fe 	.word	0x080222fe
 801def4:	08022315 	.word	0x08022315
 801def8:	abcd330e 	.word	0xabcd330e
 801defc:	e66d1234 	.word	0xe66d1234
 801df00:	0005deec 	.word	0x0005deec
 801df04:	5851f42d 	.word	0x5851f42d
 801df08:	4c957f2d 	.word	0x4c957f2d

0801df0c <std>:
 801df0c:	2300      	movs	r3, #0
 801df0e:	b510      	push	{r4, lr}
 801df10:	4604      	mov	r4, r0
 801df12:	e9c0 3300 	strd	r3, r3, [r0]
 801df16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801df1a:	6083      	str	r3, [r0, #8]
 801df1c:	8181      	strh	r1, [r0, #12]
 801df1e:	6643      	str	r3, [r0, #100]	@ 0x64
 801df20:	81c2      	strh	r2, [r0, #14]
 801df22:	6183      	str	r3, [r0, #24]
 801df24:	4619      	mov	r1, r3
 801df26:	2208      	movs	r2, #8
 801df28:	305c      	adds	r0, #92	@ 0x5c
 801df2a:	f000 fa09 	bl	801e340 <memset>
 801df2e:	4b0d      	ldr	r3, [pc, #52]	@ (801df64 <std+0x58>)
 801df30:	6263      	str	r3, [r4, #36]	@ 0x24
 801df32:	4b0d      	ldr	r3, [pc, #52]	@ (801df68 <std+0x5c>)
 801df34:	62a3      	str	r3, [r4, #40]	@ 0x28
 801df36:	4b0d      	ldr	r3, [pc, #52]	@ (801df6c <std+0x60>)
 801df38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801df3a:	4b0d      	ldr	r3, [pc, #52]	@ (801df70 <std+0x64>)
 801df3c:	6323      	str	r3, [r4, #48]	@ 0x30
 801df3e:	4b0d      	ldr	r3, [pc, #52]	@ (801df74 <std+0x68>)
 801df40:	6224      	str	r4, [r4, #32]
 801df42:	429c      	cmp	r4, r3
 801df44:	d006      	beq.n	801df54 <std+0x48>
 801df46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801df4a:	4294      	cmp	r4, r2
 801df4c:	d002      	beq.n	801df54 <std+0x48>
 801df4e:	33d0      	adds	r3, #208	@ 0xd0
 801df50:	429c      	cmp	r4, r3
 801df52:	d105      	bne.n	801df60 <std+0x54>
 801df54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801df58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801df5c:	f000 bac0 	b.w	801e4e0 <__retarget_lock_init_recursive>
 801df60:	bd10      	pop	{r4, pc}
 801df62:	bf00      	nop
 801df64:	0801e171 	.word	0x0801e171
 801df68:	0801e193 	.word	0x0801e193
 801df6c:	0801e1cb 	.word	0x0801e1cb
 801df70:	0801e1ef 	.word	0x0801e1ef
 801df74:	20027d10 	.word	0x20027d10

0801df78 <stdio_exit_handler>:
 801df78:	4a02      	ldr	r2, [pc, #8]	@ (801df84 <stdio_exit_handler+0xc>)
 801df7a:	4903      	ldr	r1, [pc, #12]	@ (801df88 <stdio_exit_handler+0x10>)
 801df7c:	4803      	ldr	r0, [pc, #12]	@ (801df8c <stdio_exit_handler+0x14>)
 801df7e:	f000 b869 	b.w	801e054 <_fwalk_sglue>
 801df82:	bf00      	nop
 801df84:	20000030 	.word	0x20000030
 801df88:	0801ede5 	.word	0x0801ede5
 801df8c:	20000040 	.word	0x20000040

0801df90 <cleanup_stdio>:
 801df90:	6841      	ldr	r1, [r0, #4]
 801df92:	4b0c      	ldr	r3, [pc, #48]	@ (801dfc4 <cleanup_stdio+0x34>)
 801df94:	4299      	cmp	r1, r3
 801df96:	b510      	push	{r4, lr}
 801df98:	4604      	mov	r4, r0
 801df9a:	d001      	beq.n	801dfa0 <cleanup_stdio+0x10>
 801df9c:	f000 ff22 	bl	801ede4 <_fflush_r>
 801dfa0:	68a1      	ldr	r1, [r4, #8]
 801dfa2:	4b09      	ldr	r3, [pc, #36]	@ (801dfc8 <cleanup_stdio+0x38>)
 801dfa4:	4299      	cmp	r1, r3
 801dfa6:	d002      	beq.n	801dfae <cleanup_stdio+0x1e>
 801dfa8:	4620      	mov	r0, r4
 801dfaa:	f000 ff1b 	bl	801ede4 <_fflush_r>
 801dfae:	68e1      	ldr	r1, [r4, #12]
 801dfb0:	4b06      	ldr	r3, [pc, #24]	@ (801dfcc <cleanup_stdio+0x3c>)
 801dfb2:	4299      	cmp	r1, r3
 801dfb4:	d004      	beq.n	801dfc0 <cleanup_stdio+0x30>
 801dfb6:	4620      	mov	r0, r4
 801dfb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dfbc:	f000 bf12 	b.w	801ede4 <_fflush_r>
 801dfc0:	bd10      	pop	{r4, pc}
 801dfc2:	bf00      	nop
 801dfc4:	20027d10 	.word	0x20027d10
 801dfc8:	20027d78 	.word	0x20027d78
 801dfcc:	20027de0 	.word	0x20027de0

0801dfd0 <global_stdio_init.part.0>:
 801dfd0:	b510      	push	{r4, lr}
 801dfd2:	4b0b      	ldr	r3, [pc, #44]	@ (801e000 <global_stdio_init.part.0+0x30>)
 801dfd4:	4c0b      	ldr	r4, [pc, #44]	@ (801e004 <global_stdio_init.part.0+0x34>)
 801dfd6:	4a0c      	ldr	r2, [pc, #48]	@ (801e008 <global_stdio_init.part.0+0x38>)
 801dfd8:	601a      	str	r2, [r3, #0]
 801dfda:	4620      	mov	r0, r4
 801dfdc:	2200      	movs	r2, #0
 801dfde:	2104      	movs	r1, #4
 801dfe0:	f7ff ff94 	bl	801df0c <std>
 801dfe4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801dfe8:	2201      	movs	r2, #1
 801dfea:	2109      	movs	r1, #9
 801dfec:	f7ff ff8e 	bl	801df0c <std>
 801dff0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801dff4:	2202      	movs	r2, #2
 801dff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dffa:	2112      	movs	r1, #18
 801dffc:	f7ff bf86 	b.w	801df0c <std>
 801e000:	20027e48 	.word	0x20027e48
 801e004:	20027d10 	.word	0x20027d10
 801e008:	0801df79 	.word	0x0801df79

0801e00c <__sfp_lock_acquire>:
 801e00c:	4801      	ldr	r0, [pc, #4]	@ (801e014 <__sfp_lock_acquire+0x8>)
 801e00e:	f000 ba68 	b.w	801e4e2 <__retarget_lock_acquire_recursive>
 801e012:	bf00      	nop
 801e014:	20027e51 	.word	0x20027e51

0801e018 <__sfp_lock_release>:
 801e018:	4801      	ldr	r0, [pc, #4]	@ (801e020 <__sfp_lock_release+0x8>)
 801e01a:	f000 ba63 	b.w	801e4e4 <__retarget_lock_release_recursive>
 801e01e:	bf00      	nop
 801e020:	20027e51 	.word	0x20027e51

0801e024 <__sinit>:
 801e024:	b510      	push	{r4, lr}
 801e026:	4604      	mov	r4, r0
 801e028:	f7ff fff0 	bl	801e00c <__sfp_lock_acquire>
 801e02c:	6a23      	ldr	r3, [r4, #32]
 801e02e:	b11b      	cbz	r3, 801e038 <__sinit+0x14>
 801e030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e034:	f7ff bff0 	b.w	801e018 <__sfp_lock_release>
 801e038:	4b04      	ldr	r3, [pc, #16]	@ (801e04c <__sinit+0x28>)
 801e03a:	6223      	str	r3, [r4, #32]
 801e03c:	4b04      	ldr	r3, [pc, #16]	@ (801e050 <__sinit+0x2c>)
 801e03e:	681b      	ldr	r3, [r3, #0]
 801e040:	2b00      	cmp	r3, #0
 801e042:	d1f5      	bne.n	801e030 <__sinit+0xc>
 801e044:	f7ff ffc4 	bl	801dfd0 <global_stdio_init.part.0>
 801e048:	e7f2      	b.n	801e030 <__sinit+0xc>
 801e04a:	bf00      	nop
 801e04c:	0801df91 	.word	0x0801df91
 801e050:	20027e48 	.word	0x20027e48

0801e054 <_fwalk_sglue>:
 801e054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e058:	4607      	mov	r7, r0
 801e05a:	4688      	mov	r8, r1
 801e05c:	4614      	mov	r4, r2
 801e05e:	2600      	movs	r6, #0
 801e060:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e064:	f1b9 0901 	subs.w	r9, r9, #1
 801e068:	d505      	bpl.n	801e076 <_fwalk_sglue+0x22>
 801e06a:	6824      	ldr	r4, [r4, #0]
 801e06c:	2c00      	cmp	r4, #0
 801e06e:	d1f7      	bne.n	801e060 <_fwalk_sglue+0xc>
 801e070:	4630      	mov	r0, r6
 801e072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e076:	89ab      	ldrh	r3, [r5, #12]
 801e078:	2b01      	cmp	r3, #1
 801e07a:	d907      	bls.n	801e08c <_fwalk_sglue+0x38>
 801e07c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e080:	3301      	adds	r3, #1
 801e082:	d003      	beq.n	801e08c <_fwalk_sglue+0x38>
 801e084:	4629      	mov	r1, r5
 801e086:	4638      	mov	r0, r7
 801e088:	47c0      	blx	r8
 801e08a:	4306      	orrs	r6, r0
 801e08c:	3568      	adds	r5, #104	@ 0x68
 801e08e:	e7e9      	b.n	801e064 <_fwalk_sglue+0x10>

0801e090 <iprintf>:
 801e090:	b40f      	push	{r0, r1, r2, r3}
 801e092:	b507      	push	{r0, r1, r2, lr}
 801e094:	4906      	ldr	r1, [pc, #24]	@ (801e0b0 <iprintf+0x20>)
 801e096:	ab04      	add	r3, sp, #16
 801e098:	6808      	ldr	r0, [r1, #0]
 801e09a:	f853 2b04 	ldr.w	r2, [r3], #4
 801e09e:	6881      	ldr	r1, [r0, #8]
 801e0a0:	9301      	str	r3, [sp, #4]
 801e0a2:	f000 fb77 	bl	801e794 <_vfiprintf_r>
 801e0a6:	b003      	add	sp, #12
 801e0a8:	f85d eb04 	ldr.w	lr, [sp], #4
 801e0ac:	b004      	add	sp, #16
 801e0ae:	4770      	bx	lr
 801e0b0:	2000003c 	.word	0x2000003c

0801e0b4 <_puts_r>:
 801e0b4:	6a03      	ldr	r3, [r0, #32]
 801e0b6:	b570      	push	{r4, r5, r6, lr}
 801e0b8:	6884      	ldr	r4, [r0, #8]
 801e0ba:	4605      	mov	r5, r0
 801e0bc:	460e      	mov	r6, r1
 801e0be:	b90b      	cbnz	r3, 801e0c4 <_puts_r+0x10>
 801e0c0:	f7ff ffb0 	bl	801e024 <__sinit>
 801e0c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e0c6:	07db      	lsls	r3, r3, #31
 801e0c8:	d405      	bmi.n	801e0d6 <_puts_r+0x22>
 801e0ca:	89a3      	ldrh	r3, [r4, #12]
 801e0cc:	0598      	lsls	r0, r3, #22
 801e0ce:	d402      	bmi.n	801e0d6 <_puts_r+0x22>
 801e0d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e0d2:	f000 fa06 	bl	801e4e2 <__retarget_lock_acquire_recursive>
 801e0d6:	89a3      	ldrh	r3, [r4, #12]
 801e0d8:	0719      	lsls	r1, r3, #28
 801e0da:	d502      	bpl.n	801e0e2 <_puts_r+0x2e>
 801e0dc:	6923      	ldr	r3, [r4, #16]
 801e0de:	2b00      	cmp	r3, #0
 801e0e0:	d135      	bne.n	801e14e <_puts_r+0x9a>
 801e0e2:	4621      	mov	r1, r4
 801e0e4:	4628      	mov	r0, r5
 801e0e6:	f000 f8c5 	bl	801e274 <__swsetup_r>
 801e0ea:	b380      	cbz	r0, 801e14e <_puts_r+0x9a>
 801e0ec:	f04f 35ff 	mov.w	r5, #4294967295
 801e0f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e0f2:	07da      	lsls	r2, r3, #31
 801e0f4:	d405      	bmi.n	801e102 <_puts_r+0x4e>
 801e0f6:	89a3      	ldrh	r3, [r4, #12]
 801e0f8:	059b      	lsls	r3, r3, #22
 801e0fa:	d402      	bmi.n	801e102 <_puts_r+0x4e>
 801e0fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e0fe:	f000 f9f1 	bl	801e4e4 <__retarget_lock_release_recursive>
 801e102:	4628      	mov	r0, r5
 801e104:	bd70      	pop	{r4, r5, r6, pc}
 801e106:	2b00      	cmp	r3, #0
 801e108:	da04      	bge.n	801e114 <_puts_r+0x60>
 801e10a:	69a2      	ldr	r2, [r4, #24]
 801e10c:	429a      	cmp	r2, r3
 801e10e:	dc17      	bgt.n	801e140 <_puts_r+0x8c>
 801e110:	290a      	cmp	r1, #10
 801e112:	d015      	beq.n	801e140 <_puts_r+0x8c>
 801e114:	6823      	ldr	r3, [r4, #0]
 801e116:	1c5a      	adds	r2, r3, #1
 801e118:	6022      	str	r2, [r4, #0]
 801e11a:	7019      	strb	r1, [r3, #0]
 801e11c:	68a3      	ldr	r3, [r4, #8]
 801e11e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801e122:	3b01      	subs	r3, #1
 801e124:	60a3      	str	r3, [r4, #8]
 801e126:	2900      	cmp	r1, #0
 801e128:	d1ed      	bne.n	801e106 <_puts_r+0x52>
 801e12a:	2b00      	cmp	r3, #0
 801e12c:	da11      	bge.n	801e152 <_puts_r+0x9e>
 801e12e:	4622      	mov	r2, r4
 801e130:	210a      	movs	r1, #10
 801e132:	4628      	mov	r0, r5
 801e134:	f000 f85f 	bl	801e1f6 <__swbuf_r>
 801e138:	3001      	adds	r0, #1
 801e13a:	d0d7      	beq.n	801e0ec <_puts_r+0x38>
 801e13c:	250a      	movs	r5, #10
 801e13e:	e7d7      	b.n	801e0f0 <_puts_r+0x3c>
 801e140:	4622      	mov	r2, r4
 801e142:	4628      	mov	r0, r5
 801e144:	f000 f857 	bl	801e1f6 <__swbuf_r>
 801e148:	3001      	adds	r0, #1
 801e14a:	d1e7      	bne.n	801e11c <_puts_r+0x68>
 801e14c:	e7ce      	b.n	801e0ec <_puts_r+0x38>
 801e14e:	3e01      	subs	r6, #1
 801e150:	e7e4      	b.n	801e11c <_puts_r+0x68>
 801e152:	6823      	ldr	r3, [r4, #0]
 801e154:	1c5a      	adds	r2, r3, #1
 801e156:	6022      	str	r2, [r4, #0]
 801e158:	220a      	movs	r2, #10
 801e15a:	701a      	strb	r2, [r3, #0]
 801e15c:	e7ee      	b.n	801e13c <_puts_r+0x88>
	...

0801e160 <puts>:
 801e160:	4b02      	ldr	r3, [pc, #8]	@ (801e16c <puts+0xc>)
 801e162:	4601      	mov	r1, r0
 801e164:	6818      	ldr	r0, [r3, #0]
 801e166:	f7ff bfa5 	b.w	801e0b4 <_puts_r>
 801e16a:	bf00      	nop
 801e16c:	2000003c 	.word	0x2000003c

0801e170 <__sread>:
 801e170:	b510      	push	{r4, lr}
 801e172:	460c      	mov	r4, r1
 801e174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e178:	f000 f96a 	bl	801e450 <_read_r>
 801e17c:	2800      	cmp	r0, #0
 801e17e:	bfab      	itete	ge
 801e180:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801e182:	89a3      	ldrhlt	r3, [r4, #12]
 801e184:	181b      	addge	r3, r3, r0
 801e186:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801e18a:	bfac      	ite	ge
 801e18c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801e18e:	81a3      	strhlt	r3, [r4, #12]
 801e190:	bd10      	pop	{r4, pc}

0801e192 <__swrite>:
 801e192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e196:	461f      	mov	r7, r3
 801e198:	898b      	ldrh	r3, [r1, #12]
 801e19a:	05db      	lsls	r3, r3, #23
 801e19c:	4605      	mov	r5, r0
 801e19e:	460c      	mov	r4, r1
 801e1a0:	4616      	mov	r6, r2
 801e1a2:	d505      	bpl.n	801e1b0 <__swrite+0x1e>
 801e1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e1a8:	2302      	movs	r3, #2
 801e1aa:	2200      	movs	r2, #0
 801e1ac:	f000 f93e 	bl	801e42c <_lseek_r>
 801e1b0:	89a3      	ldrh	r3, [r4, #12]
 801e1b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e1b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801e1ba:	81a3      	strh	r3, [r4, #12]
 801e1bc:	4632      	mov	r2, r6
 801e1be:	463b      	mov	r3, r7
 801e1c0:	4628      	mov	r0, r5
 801e1c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e1c6:	f000 b955 	b.w	801e474 <_write_r>

0801e1ca <__sseek>:
 801e1ca:	b510      	push	{r4, lr}
 801e1cc:	460c      	mov	r4, r1
 801e1ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e1d2:	f000 f92b 	bl	801e42c <_lseek_r>
 801e1d6:	1c43      	adds	r3, r0, #1
 801e1d8:	89a3      	ldrh	r3, [r4, #12]
 801e1da:	bf15      	itete	ne
 801e1dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 801e1de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801e1e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801e1e6:	81a3      	strheq	r3, [r4, #12]
 801e1e8:	bf18      	it	ne
 801e1ea:	81a3      	strhne	r3, [r4, #12]
 801e1ec:	bd10      	pop	{r4, pc}

0801e1ee <__sclose>:
 801e1ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e1f2:	f000 b8ad 	b.w	801e350 <_close_r>

0801e1f6 <__swbuf_r>:
 801e1f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e1f8:	460e      	mov	r6, r1
 801e1fa:	4614      	mov	r4, r2
 801e1fc:	4605      	mov	r5, r0
 801e1fe:	b118      	cbz	r0, 801e208 <__swbuf_r+0x12>
 801e200:	6a03      	ldr	r3, [r0, #32]
 801e202:	b90b      	cbnz	r3, 801e208 <__swbuf_r+0x12>
 801e204:	f7ff ff0e 	bl	801e024 <__sinit>
 801e208:	69a3      	ldr	r3, [r4, #24]
 801e20a:	60a3      	str	r3, [r4, #8]
 801e20c:	89a3      	ldrh	r3, [r4, #12]
 801e20e:	071a      	lsls	r2, r3, #28
 801e210:	d501      	bpl.n	801e216 <__swbuf_r+0x20>
 801e212:	6923      	ldr	r3, [r4, #16]
 801e214:	b943      	cbnz	r3, 801e228 <__swbuf_r+0x32>
 801e216:	4621      	mov	r1, r4
 801e218:	4628      	mov	r0, r5
 801e21a:	f000 f82b 	bl	801e274 <__swsetup_r>
 801e21e:	b118      	cbz	r0, 801e228 <__swbuf_r+0x32>
 801e220:	f04f 37ff 	mov.w	r7, #4294967295
 801e224:	4638      	mov	r0, r7
 801e226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e228:	6823      	ldr	r3, [r4, #0]
 801e22a:	6922      	ldr	r2, [r4, #16]
 801e22c:	1a98      	subs	r0, r3, r2
 801e22e:	6963      	ldr	r3, [r4, #20]
 801e230:	b2f6      	uxtb	r6, r6
 801e232:	4283      	cmp	r3, r0
 801e234:	4637      	mov	r7, r6
 801e236:	dc05      	bgt.n	801e244 <__swbuf_r+0x4e>
 801e238:	4621      	mov	r1, r4
 801e23a:	4628      	mov	r0, r5
 801e23c:	f000 fdd2 	bl	801ede4 <_fflush_r>
 801e240:	2800      	cmp	r0, #0
 801e242:	d1ed      	bne.n	801e220 <__swbuf_r+0x2a>
 801e244:	68a3      	ldr	r3, [r4, #8]
 801e246:	3b01      	subs	r3, #1
 801e248:	60a3      	str	r3, [r4, #8]
 801e24a:	6823      	ldr	r3, [r4, #0]
 801e24c:	1c5a      	adds	r2, r3, #1
 801e24e:	6022      	str	r2, [r4, #0]
 801e250:	701e      	strb	r6, [r3, #0]
 801e252:	6962      	ldr	r2, [r4, #20]
 801e254:	1c43      	adds	r3, r0, #1
 801e256:	429a      	cmp	r2, r3
 801e258:	d004      	beq.n	801e264 <__swbuf_r+0x6e>
 801e25a:	89a3      	ldrh	r3, [r4, #12]
 801e25c:	07db      	lsls	r3, r3, #31
 801e25e:	d5e1      	bpl.n	801e224 <__swbuf_r+0x2e>
 801e260:	2e0a      	cmp	r6, #10
 801e262:	d1df      	bne.n	801e224 <__swbuf_r+0x2e>
 801e264:	4621      	mov	r1, r4
 801e266:	4628      	mov	r0, r5
 801e268:	f000 fdbc 	bl	801ede4 <_fflush_r>
 801e26c:	2800      	cmp	r0, #0
 801e26e:	d0d9      	beq.n	801e224 <__swbuf_r+0x2e>
 801e270:	e7d6      	b.n	801e220 <__swbuf_r+0x2a>
	...

0801e274 <__swsetup_r>:
 801e274:	b538      	push	{r3, r4, r5, lr}
 801e276:	4b29      	ldr	r3, [pc, #164]	@ (801e31c <__swsetup_r+0xa8>)
 801e278:	4605      	mov	r5, r0
 801e27a:	6818      	ldr	r0, [r3, #0]
 801e27c:	460c      	mov	r4, r1
 801e27e:	b118      	cbz	r0, 801e288 <__swsetup_r+0x14>
 801e280:	6a03      	ldr	r3, [r0, #32]
 801e282:	b90b      	cbnz	r3, 801e288 <__swsetup_r+0x14>
 801e284:	f7ff fece 	bl	801e024 <__sinit>
 801e288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e28c:	0719      	lsls	r1, r3, #28
 801e28e:	d422      	bmi.n	801e2d6 <__swsetup_r+0x62>
 801e290:	06da      	lsls	r2, r3, #27
 801e292:	d407      	bmi.n	801e2a4 <__swsetup_r+0x30>
 801e294:	2209      	movs	r2, #9
 801e296:	602a      	str	r2, [r5, #0]
 801e298:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e29c:	81a3      	strh	r3, [r4, #12]
 801e29e:	f04f 30ff 	mov.w	r0, #4294967295
 801e2a2:	e033      	b.n	801e30c <__swsetup_r+0x98>
 801e2a4:	0758      	lsls	r0, r3, #29
 801e2a6:	d512      	bpl.n	801e2ce <__swsetup_r+0x5a>
 801e2a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e2aa:	b141      	cbz	r1, 801e2be <__swsetup_r+0x4a>
 801e2ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e2b0:	4299      	cmp	r1, r3
 801e2b2:	d002      	beq.n	801e2ba <__swsetup_r+0x46>
 801e2b4:	4628      	mov	r0, r5
 801e2b6:	f000 f943 	bl	801e540 <_free_r>
 801e2ba:	2300      	movs	r3, #0
 801e2bc:	6363      	str	r3, [r4, #52]	@ 0x34
 801e2be:	89a3      	ldrh	r3, [r4, #12]
 801e2c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e2c4:	81a3      	strh	r3, [r4, #12]
 801e2c6:	2300      	movs	r3, #0
 801e2c8:	6063      	str	r3, [r4, #4]
 801e2ca:	6923      	ldr	r3, [r4, #16]
 801e2cc:	6023      	str	r3, [r4, #0]
 801e2ce:	89a3      	ldrh	r3, [r4, #12]
 801e2d0:	f043 0308 	orr.w	r3, r3, #8
 801e2d4:	81a3      	strh	r3, [r4, #12]
 801e2d6:	6923      	ldr	r3, [r4, #16]
 801e2d8:	b94b      	cbnz	r3, 801e2ee <__swsetup_r+0x7a>
 801e2da:	89a3      	ldrh	r3, [r4, #12]
 801e2dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e2e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e2e4:	d003      	beq.n	801e2ee <__swsetup_r+0x7a>
 801e2e6:	4621      	mov	r1, r4
 801e2e8:	4628      	mov	r0, r5
 801e2ea:	f000 fddb 	bl	801eea4 <__smakebuf_r>
 801e2ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e2f2:	f013 0201 	ands.w	r2, r3, #1
 801e2f6:	d00a      	beq.n	801e30e <__swsetup_r+0x9a>
 801e2f8:	2200      	movs	r2, #0
 801e2fa:	60a2      	str	r2, [r4, #8]
 801e2fc:	6962      	ldr	r2, [r4, #20]
 801e2fe:	4252      	negs	r2, r2
 801e300:	61a2      	str	r2, [r4, #24]
 801e302:	6922      	ldr	r2, [r4, #16]
 801e304:	b942      	cbnz	r2, 801e318 <__swsetup_r+0xa4>
 801e306:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e30a:	d1c5      	bne.n	801e298 <__swsetup_r+0x24>
 801e30c:	bd38      	pop	{r3, r4, r5, pc}
 801e30e:	0799      	lsls	r1, r3, #30
 801e310:	bf58      	it	pl
 801e312:	6962      	ldrpl	r2, [r4, #20]
 801e314:	60a2      	str	r2, [r4, #8]
 801e316:	e7f4      	b.n	801e302 <__swsetup_r+0x8e>
 801e318:	2000      	movs	r0, #0
 801e31a:	e7f7      	b.n	801e30c <__swsetup_r+0x98>
 801e31c:	2000003c 	.word	0x2000003c

0801e320 <memcmp>:
 801e320:	b510      	push	{r4, lr}
 801e322:	3901      	subs	r1, #1
 801e324:	4402      	add	r2, r0
 801e326:	4290      	cmp	r0, r2
 801e328:	d101      	bne.n	801e32e <memcmp+0xe>
 801e32a:	2000      	movs	r0, #0
 801e32c:	e005      	b.n	801e33a <memcmp+0x1a>
 801e32e:	7803      	ldrb	r3, [r0, #0]
 801e330:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e334:	42a3      	cmp	r3, r4
 801e336:	d001      	beq.n	801e33c <memcmp+0x1c>
 801e338:	1b18      	subs	r0, r3, r4
 801e33a:	bd10      	pop	{r4, pc}
 801e33c:	3001      	adds	r0, #1
 801e33e:	e7f2      	b.n	801e326 <memcmp+0x6>

0801e340 <memset>:
 801e340:	4402      	add	r2, r0
 801e342:	4603      	mov	r3, r0
 801e344:	4293      	cmp	r3, r2
 801e346:	d100      	bne.n	801e34a <memset+0xa>
 801e348:	4770      	bx	lr
 801e34a:	f803 1b01 	strb.w	r1, [r3], #1
 801e34e:	e7f9      	b.n	801e344 <memset+0x4>

0801e350 <_close_r>:
 801e350:	b538      	push	{r3, r4, r5, lr}
 801e352:	4d06      	ldr	r5, [pc, #24]	@ (801e36c <_close_r+0x1c>)
 801e354:	2300      	movs	r3, #0
 801e356:	4604      	mov	r4, r0
 801e358:	4608      	mov	r0, r1
 801e35a:	602b      	str	r3, [r5, #0]
 801e35c:	f7e4 f880 	bl	8002460 <_close>
 801e360:	1c43      	adds	r3, r0, #1
 801e362:	d102      	bne.n	801e36a <_close_r+0x1a>
 801e364:	682b      	ldr	r3, [r5, #0]
 801e366:	b103      	cbz	r3, 801e36a <_close_r+0x1a>
 801e368:	6023      	str	r3, [r4, #0]
 801e36a:	bd38      	pop	{r3, r4, r5, pc}
 801e36c:	20027e4c 	.word	0x20027e4c

0801e370 <_reclaim_reent>:
 801e370:	4b2d      	ldr	r3, [pc, #180]	@ (801e428 <_reclaim_reent+0xb8>)
 801e372:	681b      	ldr	r3, [r3, #0]
 801e374:	4283      	cmp	r3, r0
 801e376:	b570      	push	{r4, r5, r6, lr}
 801e378:	4604      	mov	r4, r0
 801e37a:	d053      	beq.n	801e424 <_reclaim_reent+0xb4>
 801e37c:	69c3      	ldr	r3, [r0, #28]
 801e37e:	b31b      	cbz	r3, 801e3c8 <_reclaim_reent+0x58>
 801e380:	68db      	ldr	r3, [r3, #12]
 801e382:	b163      	cbz	r3, 801e39e <_reclaim_reent+0x2e>
 801e384:	2500      	movs	r5, #0
 801e386:	69e3      	ldr	r3, [r4, #28]
 801e388:	68db      	ldr	r3, [r3, #12]
 801e38a:	5959      	ldr	r1, [r3, r5]
 801e38c:	b9b1      	cbnz	r1, 801e3bc <_reclaim_reent+0x4c>
 801e38e:	3504      	adds	r5, #4
 801e390:	2d80      	cmp	r5, #128	@ 0x80
 801e392:	d1f8      	bne.n	801e386 <_reclaim_reent+0x16>
 801e394:	69e3      	ldr	r3, [r4, #28]
 801e396:	4620      	mov	r0, r4
 801e398:	68d9      	ldr	r1, [r3, #12]
 801e39a:	f000 f8d1 	bl	801e540 <_free_r>
 801e39e:	69e3      	ldr	r3, [r4, #28]
 801e3a0:	6819      	ldr	r1, [r3, #0]
 801e3a2:	b111      	cbz	r1, 801e3aa <_reclaim_reent+0x3a>
 801e3a4:	4620      	mov	r0, r4
 801e3a6:	f000 f8cb 	bl	801e540 <_free_r>
 801e3aa:	69e3      	ldr	r3, [r4, #28]
 801e3ac:	689d      	ldr	r5, [r3, #8]
 801e3ae:	b15d      	cbz	r5, 801e3c8 <_reclaim_reent+0x58>
 801e3b0:	4629      	mov	r1, r5
 801e3b2:	4620      	mov	r0, r4
 801e3b4:	682d      	ldr	r5, [r5, #0]
 801e3b6:	f000 f8c3 	bl	801e540 <_free_r>
 801e3ba:	e7f8      	b.n	801e3ae <_reclaim_reent+0x3e>
 801e3bc:	680e      	ldr	r6, [r1, #0]
 801e3be:	4620      	mov	r0, r4
 801e3c0:	f000 f8be 	bl	801e540 <_free_r>
 801e3c4:	4631      	mov	r1, r6
 801e3c6:	e7e1      	b.n	801e38c <_reclaim_reent+0x1c>
 801e3c8:	6961      	ldr	r1, [r4, #20]
 801e3ca:	b111      	cbz	r1, 801e3d2 <_reclaim_reent+0x62>
 801e3cc:	4620      	mov	r0, r4
 801e3ce:	f000 f8b7 	bl	801e540 <_free_r>
 801e3d2:	69e1      	ldr	r1, [r4, #28]
 801e3d4:	b111      	cbz	r1, 801e3dc <_reclaim_reent+0x6c>
 801e3d6:	4620      	mov	r0, r4
 801e3d8:	f000 f8b2 	bl	801e540 <_free_r>
 801e3dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801e3de:	b111      	cbz	r1, 801e3e6 <_reclaim_reent+0x76>
 801e3e0:	4620      	mov	r0, r4
 801e3e2:	f000 f8ad 	bl	801e540 <_free_r>
 801e3e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e3e8:	b111      	cbz	r1, 801e3f0 <_reclaim_reent+0x80>
 801e3ea:	4620      	mov	r0, r4
 801e3ec:	f000 f8a8 	bl	801e540 <_free_r>
 801e3f0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801e3f2:	b111      	cbz	r1, 801e3fa <_reclaim_reent+0x8a>
 801e3f4:	4620      	mov	r0, r4
 801e3f6:	f000 f8a3 	bl	801e540 <_free_r>
 801e3fa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801e3fc:	b111      	cbz	r1, 801e404 <_reclaim_reent+0x94>
 801e3fe:	4620      	mov	r0, r4
 801e400:	f000 f89e 	bl	801e540 <_free_r>
 801e404:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801e406:	b111      	cbz	r1, 801e40e <_reclaim_reent+0x9e>
 801e408:	4620      	mov	r0, r4
 801e40a:	f000 f899 	bl	801e540 <_free_r>
 801e40e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801e410:	b111      	cbz	r1, 801e418 <_reclaim_reent+0xa8>
 801e412:	4620      	mov	r0, r4
 801e414:	f000 f894 	bl	801e540 <_free_r>
 801e418:	6a23      	ldr	r3, [r4, #32]
 801e41a:	b11b      	cbz	r3, 801e424 <_reclaim_reent+0xb4>
 801e41c:	4620      	mov	r0, r4
 801e41e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e422:	4718      	bx	r3
 801e424:	bd70      	pop	{r4, r5, r6, pc}
 801e426:	bf00      	nop
 801e428:	2000003c 	.word	0x2000003c

0801e42c <_lseek_r>:
 801e42c:	b538      	push	{r3, r4, r5, lr}
 801e42e:	4d07      	ldr	r5, [pc, #28]	@ (801e44c <_lseek_r+0x20>)
 801e430:	4604      	mov	r4, r0
 801e432:	4608      	mov	r0, r1
 801e434:	4611      	mov	r1, r2
 801e436:	2200      	movs	r2, #0
 801e438:	602a      	str	r2, [r5, #0]
 801e43a:	461a      	mov	r2, r3
 801e43c:	f7e4 f837 	bl	80024ae <_lseek>
 801e440:	1c43      	adds	r3, r0, #1
 801e442:	d102      	bne.n	801e44a <_lseek_r+0x1e>
 801e444:	682b      	ldr	r3, [r5, #0]
 801e446:	b103      	cbz	r3, 801e44a <_lseek_r+0x1e>
 801e448:	6023      	str	r3, [r4, #0]
 801e44a:	bd38      	pop	{r3, r4, r5, pc}
 801e44c:	20027e4c 	.word	0x20027e4c

0801e450 <_read_r>:
 801e450:	b538      	push	{r3, r4, r5, lr}
 801e452:	4d07      	ldr	r5, [pc, #28]	@ (801e470 <_read_r+0x20>)
 801e454:	4604      	mov	r4, r0
 801e456:	4608      	mov	r0, r1
 801e458:	4611      	mov	r1, r2
 801e45a:	2200      	movs	r2, #0
 801e45c:	602a      	str	r2, [r5, #0]
 801e45e:	461a      	mov	r2, r3
 801e460:	f7e3 ffc5 	bl	80023ee <_read>
 801e464:	1c43      	adds	r3, r0, #1
 801e466:	d102      	bne.n	801e46e <_read_r+0x1e>
 801e468:	682b      	ldr	r3, [r5, #0]
 801e46a:	b103      	cbz	r3, 801e46e <_read_r+0x1e>
 801e46c:	6023      	str	r3, [r4, #0]
 801e46e:	bd38      	pop	{r3, r4, r5, pc}
 801e470:	20027e4c 	.word	0x20027e4c

0801e474 <_write_r>:
 801e474:	b538      	push	{r3, r4, r5, lr}
 801e476:	4d07      	ldr	r5, [pc, #28]	@ (801e494 <_write_r+0x20>)
 801e478:	4604      	mov	r4, r0
 801e47a:	4608      	mov	r0, r1
 801e47c:	4611      	mov	r1, r2
 801e47e:	2200      	movs	r2, #0
 801e480:	602a      	str	r2, [r5, #0]
 801e482:	461a      	mov	r2, r3
 801e484:	f7e3 ffd0 	bl	8002428 <_write>
 801e488:	1c43      	adds	r3, r0, #1
 801e48a:	d102      	bne.n	801e492 <_write_r+0x1e>
 801e48c:	682b      	ldr	r3, [r5, #0]
 801e48e:	b103      	cbz	r3, 801e492 <_write_r+0x1e>
 801e490:	6023      	str	r3, [r4, #0]
 801e492:	bd38      	pop	{r3, r4, r5, pc}
 801e494:	20027e4c 	.word	0x20027e4c

0801e498 <__libc_init_array>:
 801e498:	b570      	push	{r4, r5, r6, lr}
 801e49a:	4d0d      	ldr	r5, [pc, #52]	@ (801e4d0 <__libc_init_array+0x38>)
 801e49c:	4c0d      	ldr	r4, [pc, #52]	@ (801e4d4 <__libc_init_array+0x3c>)
 801e49e:	1b64      	subs	r4, r4, r5
 801e4a0:	10a4      	asrs	r4, r4, #2
 801e4a2:	2600      	movs	r6, #0
 801e4a4:	42a6      	cmp	r6, r4
 801e4a6:	d109      	bne.n	801e4bc <__libc_init_array+0x24>
 801e4a8:	4d0b      	ldr	r5, [pc, #44]	@ (801e4d8 <__libc_init_array+0x40>)
 801e4aa:	4c0c      	ldr	r4, [pc, #48]	@ (801e4dc <__libc_init_array+0x44>)
 801e4ac:	f000 fdb4 	bl	801f018 <_init>
 801e4b0:	1b64      	subs	r4, r4, r5
 801e4b2:	10a4      	asrs	r4, r4, #2
 801e4b4:	2600      	movs	r6, #0
 801e4b6:	42a6      	cmp	r6, r4
 801e4b8:	d105      	bne.n	801e4c6 <__libc_init_array+0x2e>
 801e4ba:	bd70      	pop	{r4, r5, r6, pc}
 801e4bc:	f855 3b04 	ldr.w	r3, [r5], #4
 801e4c0:	4798      	blx	r3
 801e4c2:	3601      	adds	r6, #1
 801e4c4:	e7ee      	b.n	801e4a4 <__libc_init_array+0xc>
 801e4c6:	f855 3b04 	ldr.w	r3, [r5], #4
 801e4ca:	4798      	blx	r3
 801e4cc:	3601      	adds	r6, #1
 801e4ce:	e7f2      	b.n	801e4b6 <__libc_init_array+0x1e>
 801e4d0:	080223e4 	.word	0x080223e4
 801e4d4:	080223e4 	.word	0x080223e4
 801e4d8:	080223e4 	.word	0x080223e4
 801e4dc:	080223e8 	.word	0x080223e8

0801e4e0 <__retarget_lock_init_recursive>:
 801e4e0:	4770      	bx	lr

0801e4e2 <__retarget_lock_acquire_recursive>:
 801e4e2:	4770      	bx	lr

0801e4e4 <__retarget_lock_release_recursive>:
 801e4e4:	4770      	bx	lr

0801e4e6 <memcpy>:
 801e4e6:	440a      	add	r2, r1
 801e4e8:	4291      	cmp	r1, r2
 801e4ea:	f100 33ff 	add.w	r3, r0, #4294967295
 801e4ee:	d100      	bne.n	801e4f2 <memcpy+0xc>
 801e4f0:	4770      	bx	lr
 801e4f2:	b510      	push	{r4, lr}
 801e4f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e4f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e4fc:	4291      	cmp	r1, r2
 801e4fe:	d1f9      	bne.n	801e4f4 <memcpy+0xe>
 801e500:	bd10      	pop	{r4, pc}
	...

0801e504 <__assert_func>:
 801e504:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e506:	4614      	mov	r4, r2
 801e508:	461a      	mov	r2, r3
 801e50a:	4b09      	ldr	r3, [pc, #36]	@ (801e530 <__assert_func+0x2c>)
 801e50c:	681b      	ldr	r3, [r3, #0]
 801e50e:	4605      	mov	r5, r0
 801e510:	68d8      	ldr	r0, [r3, #12]
 801e512:	b14c      	cbz	r4, 801e528 <__assert_func+0x24>
 801e514:	4b07      	ldr	r3, [pc, #28]	@ (801e534 <__assert_func+0x30>)
 801e516:	9100      	str	r1, [sp, #0]
 801e518:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e51c:	4906      	ldr	r1, [pc, #24]	@ (801e538 <__assert_func+0x34>)
 801e51e:	462b      	mov	r3, r5
 801e520:	f000 fc88 	bl	801ee34 <fiprintf>
 801e524:	f000 fd2c 	bl	801ef80 <abort>
 801e528:	4b04      	ldr	r3, [pc, #16]	@ (801e53c <__assert_func+0x38>)
 801e52a:	461c      	mov	r4, r3
 801e52c:	e7f3      	b.n	801e516 <__assert_func+0x12>
 801e52e:	bf00      	nop
 801e530:	2000003c 	.word	0x2000003c
 801e534:	0802236d 	.word	0x0802236d
 801e538:	0802237a 	.word	0x0802237a
 801e53c:	080223a8 	.word	0x080223a8

0801e540 <_free_r>:
 801e540:	b538      	push	{r3, r4, r5, lr}
 801e542:	4605      	mov	r5, r0
 801e544:	2900      	cmp	r1, #0
 801e546:	d041      	beq.n	801e5cc <_free_r+0x8c>
 801e548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e54c:	1f0c      	subs	r4, r1, #4
 801e54e:	2b00      	cmp	r3, #0
 801e550:	bfb8      	it	lt
 801e552:	18e4      	addlt	r4, r4, r3
 801e554:	f000 f8e8 	bl	801e728 <__malloc_lock>
 801e558:	4a1d      	ldr	r2, [pc, #116]	@ (801e5d0 <_free_r+0x90>)
 801e55a:	6813      	ldr	r3, [r2, #0]
 801e55c:	b933      	cbnz	r3, 801e56c <_free_r+0x2c>
 801e55e:	6063      	str	r3, [r4, #4]
 801e560:	6014      	str	r4, [r2, #0]
 801e562:	4628      	mov	r0, r5
 801e564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e568:	f000 b8e4 	b.w	801e734 <__malloc_unlock>
 801e56c:	42a3      	cmp	r3, r4
 801e56e:	d908      	bls.n	801e582 <_free_r+0x42>
 801e570:	6820      	ldr	r0, [r4, #0]
 801e572:	1821      	adds	r1, r4, r0
 801e574:	428b      	cmp	r3, r1
 801e576:	bf01      	itttt	eq
 801e578:	6819      	ldreq	r1, [r3, #0]
 801e57a:	685b      	ldreq	r3, [r3, #4]
 801e57c:	1809      	addeq	r1, r1, r0
 801e57e:	6021      	streq	r1, [r4, #0]
 801e580:	e7ed      	b.n	801e55e <_free_r+0x1e>
 801e582:	461a      	mov	r2, r3
 801e584:	685b      	ldr	r3, [r3, #4]
 801e586:	b10b      	cbz	r3, 801e58c <_free_r+0x4c>
 801e588:	42a3      	cmp	r3, r4
 801e58a:	d9fa      	bls.n	801e582 <_free_r+0x42>
 801e58c:	6811      	ldr	r1, [r2, #0]
 801e58e:	1850      	adds	r0, r2, r1
 801e590:	42a0      	cmp	r0, r4
 801e592:	d10b      	bne.n	801e5ac <_free_r+0x6c>
 801e594:	6820      	ldr	r0, [r4, #0]
 801e596:	4401      	add	r1, r0
 801e598:	1850      	adds	r0, r2, r1
 801e59a:	4283      	cmp	r3, r0
 801e59c:	6011      	str	r1, [r2, #0]
 801e59e:	d1e0      	bne.n	801e562 <_free_r+0x22>
 801e5a0:	6818      	ldr	r0, [r3, #0]
 801e5a2:	685b      	ldr	r3, [r3, #4]
 801e5a4:	6053      	str	r3, [r2, #4]
 801e5a6:	4408      	add	r0, r1
 801e5a8:	6010      	str	r0, [r2, #0]
 801e5aa:	e7da      	b.n	801e562 <_free_r+0x22>
 801e5ac:	d902      	bls.n	801e5b4 <_free_r+0x74>
 801e5ae:	230c      	movs	r3, #12
 801e5b0:	602b      	str	r3, [r5, #0]
 801e5b2:	e7d6      	b.n	801e562 <_free_r+0x22>
 801e5b4:	6820      	ldr	r0, [r4, #0]
 801e5b6:	1821      	adds	r1, r4, r0
 801e5b8:	428b      	cmp	r3, r1
 801e5ba:	bf04      	itt	eq
 801e5bc:	6819      	ldreq	r1, [r3, #0]
 801e5be:	685b      	ldreq	r3, [r3, #4]
 801e5c0:	6063      	str	r3, [r4, #4]
 801e5c2:	bf04      	itt	eq
 801e5c4:	1809      	addeq	r1, r1, r0
 801e5c6:	6021      	streq	r1, [r4, #0]
 801e5c8:	6054      	str	r4, [r2, #4]
 801e5ca:	e7ca      	b.n	801e562 <_free_r+0x22>
 801e5cc:	bd38      	pop	{r3, r4, r5, pc}
 801e5ce:	bf00      	nop
 801e5d0:	20027e58 	.word	0x20027e58

0801e5d4 <malloc>:
 801e5d4:	4b02      	ldr	r3, [pc, #8]	@ (801e5e0 <malloc+0xc>)
 801e5d6:	4601      	mov	r1, r0
 801e5d8:	6818      	ldr	r0, [r3, #0]
 801e5da:	f000 b825 	b.w	801e628 <_malloc_r>
 801e5de:	bf00      	nop
 801e5e0:	2000003c 	.word	0x2000003c

0801e5e4 <sbrk_aligned>:
 801e5e4:	b570      	push	{r4, r5, r6, lr}
 801e5e6:	4e0f      	ldr	r6, [pc, #60]	@ (801e624 <sbrk_aligned+0x40>)
 801e5e8:	460c      	mov	r4, r1
 801e5ea:	6831      	ldr	r1, [r6, #0]
 801e5ec:	4605      	mov	r5, r0
 801e5ee:	b911      	cbnz	r1, 801e5f6 <sbrk_aligned+0x12>
 801e5f0:	f000 fcb6 	bl	801ef60 <_sbrk_r>
 801e5f4:	6030      	str	r0, [r6, #0]
 801e5f6:	4621      	mov	r1, r4
 801e5f8:	4628      	mov	r0, r5
 801e5fa:	f000 fcb1 	bl	801ef60 <_sbrk_r>
 801e5fe:	1c43      	adds	r3, r0, #1
 801e600:	d103      	bne.n	801e60a <sbrk_aligned+0x26>
 801e602:	f04f 34ff 	mov.w	r4, #4294967295
 801e606:	4620      	mov	r0, r4
 801e608:	bd70      	pop	{r4, r5, r6, pc}
 801e60a:	1cc4      	adds	r4, r0, #3
 801e60c:	f024 0403 	bic.w	r4, r4, #3
 801e610:	42a0      	cmp	r0, r4
 801e612:	d0f8      	beq.n	801e606 <sbrk_aligned+0x22>
 801e614:	1a21      	subs	r1, r4, r0
 801e616:	4628      	mov	r0, r5
 801e618:	f000 fca2 	bl	801ef60 <_sbrk_r>
 801e61c:	3001      	adds	r0, #1
 801e61e:	d1f2      	bne.n	801e606 <sbrk_aligned+0x22>
 801e620:	e7ef      	b.n	801e602 <sbrk_aligned+0x1e>
 801e622:	bf00      	nop
 801e624:	20027e54 	.word	0x20027e54

0801e628 <_malloc_r>:
 801e628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e62c:	1ccd      	adds	r5, r1, #3
 801e62e:	f025 0503 	bic.w	r5, r5, #3
 801e632:	3508      	adds	r5, #8
 801e634:	2d0c      	cmp	r5, #12
 801e636:	bf38      	it	cc
 801e638:	250c      	movcc	r5, #12
 801e63a:	2d00      	cmp	r5, #0
 801e63c:	4606      	mov	r6, r0
 801e63e:	db01      	blt.n	801e644 <_malloc_r+0x1c>
 801e640:	42a9      	cmp	r1, r5
 801e642:	d904      	bls.n	801e64e <_malloc_r+0x26>
 801e644:	230c      	movs	r3, #12
 801e646:	6033      	str	r3, [r6, #0]
 801e648:	2000      	movs	r0, #0
 801e64a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e64e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801e724 <_malloc_r+0xfc>
 801e652:	f000 f869 	bl	801e728 <__malloc_lock>
 801e656:	f8d8 3000 	ldr.w	r3, [r8]
 801e65a:	461c      	mov	r4, r3
 801e65c:	bb44      	cbnz	r4, 801e6b0 <_malloc_r+0x88>
 801e65e:	4629      	mov	r1, r5
 801e660:	4630      	mov	r0, r6
 801e662:	f7ff ffbf 	bl	801e5e4 <sbrk_aligned>
 801e666:	1c43      	adds	r3, r0, #1
 801e668:	4604      	mov	r4, r0
 801e66a:	d158      	bne.n	801e71e <_malloc_r+0xf6>
 801e66c:	f8d8 4000 	ldr.w	r4, [r8]
 801e670:	4627      	mov	r7, r4
 801e672:	2f00      	cmp	r7, #0
 801e674:	d143      	bne.n	801e6fe <_malloc_r+0xd6>
 801e676:	2c00      	cmp	r4, #0
 801e678:	d04b      	beq.n	801e712 <_malloc_r+0xea>
 801e67a:	6823      	ldr	r3, [r4, #0]
 801e67c:	4639      	mov	r1, r7
 801e67e:	4630      	mov	r0, r6
 801e680:	eb04 0903 	add.w	r9, r4, r3
 801e684:	f000 fc6c 	bl	801ef60 <_sbrk_r>
 801e688:	4581      	cmp	r9, r0
 801e68a:	d142      	bne.n	801e712 <_malloc_r+0xea>
 801e68c:	6821      	ldr	r1, [r4, #0]
 801e68e:	1a6d      	subs	r5, r5, r1
 801e690:	4629      	mov	r1, r5
 801e692:	4630      	mov	r0, r6
 801e694:	f7ff ffa6 	bl	801e5e4 <sbrk_aligned>
 801e698:	3001      	adds	r0, #1
 801e69a:	d03a      	beq.n	801e712 <_malloc_r+0xea>
 801e69c:	6823      	ldr	r3, [r4, #0]
 801e69e:	442b      	add	r3, r5
 801e6a0:	6023      	str	r3, [r4, #0]
 801e6a2:	f8d8 3000 	ldr.w	r3, [r8]
 801e6a6:	685a      	ldr	r2, [r3, #4]
 801e6a8:	bb62      	cbnz	r2, 801e704 <_malloc_r+0xdc>
 801e6aa:	f8c8 7000 	str.w	r7, [r8]
 801e6ae:	e00f      	b.n	801e6d0 <_malloc_r+0xa8>
 801e6b0:	6822      	ldr	r2, [r4, #0]
 801e6b2:	1b52      	subs	r2, r2, r5
 801e6b4:	d420      	bmi.n	801e6f8 <_malloc_r+0xd0>
 801e6b6:	2a0b      	cmp	r2, #11
 801e6b8:	d917      	bls.n	801e6ea <_malloc_r+0xc2>
 801e6ba:	1961      	adds	r1, r4, r5
 801e6bc:	42a3      	cmp	r3, r4
 801e6be:	6025      	str	r5, [r4, #0]
 801e6c0:	bf18      	it	ne
 801e6c2:	6059      	strne	r1, [r3, #4]
 801e6c4:	6863      	ldr	r3, [r4, #4]
 801e6c6:	bf08      	it	eq
 801e6c8:	f8c8 1000 	streq.w	r1, [r8]
 801e6cc:	5162      	str	r2, [r4, r5]
 801e6ce:	604b      	str	r3, [r1, #4]
 801e6d0:	4630      	mov	r0, r6
 801e6d2:	f000 f82f 	bl	801e734 <__malloc_unlock>
 801e6d6:	f104 000b 	add.w	r0, r4, #11
 801e6da:	1d23      	adds	r3, r4, #4
 801e6dc:	f020 0007 	bic.w	r0, r0, #7
 801e6e0:	1ac2      	subs	r2, r0, r3
 801e6e2:	bf1c      	itt	ne
 801e6e4:	1a1b      	subne	r3, r3, r0
 801e6e6:	50a3      	strne	r3, [r4, r2]
 801e6e8:	e7af      	b.n	801e64a <_malloc_r+0x22>
 801e6ea:	6862      	ldr	r2, [r4, #4]
 801e6ec:	42a3      	cmp	r3, r4
 801e6ee:	bf0c      	ite	eq
 801e6f0:	f8c8 2000 	streq.w	r2, [r8]
 801e6f4:	605a      	strne	r2, [r3, #4]
 801e6f6:	e7eb      	b.n	801e6d0 <_malloc_r+0xa8>
 801e6f8:	4623      	mov	r3, r4
 801e6fa:	6864      	ldr	r4, [r4, #4]
 801e6fc:	e7ae      	b.n	801e65c <_malloc_r+0x34>
 801e6fe:	463c      	mov	r4, r7
 801e700:	687f      	ldr	r7, [r7, #4]
 801e702:	e7b6      	b.n	801e672 <_malloc_r+0x4a>
 801e704:	461a      	mov	r2, r3
 801e706:	685b      	ldr	r3, [r3, #4]
 801e708:	42a3      	cmp	r3, r4
 801e70a:	d1fb      	bne.n	801e704 <_malloc_r+0xdc>
 801e70c:	2300      	movs	r3, #0
 801e70e:	6053      	str	r3, [r2, #4]
 801e710:	e7de      	b.n	801e6d0 <_malloc_r+0xa8>
 801e712:	230c      	movs	r3, #12
 801e714:	6033      	str	r3, [r6, #0]
 801e716:	4630      	mov	r0, r6
 801e718:	f000 f80c 	bl	801e734 <__malloc_unlock>
 801e71c:	e794      	b.n	801e648 <_malloc_r+0x20>
 801e71e:	6005      	str	r5, [r0, #0]
 801e720:	e7d6      	b.n	801e6d0 <_malloc_r+0xa8>
 801e722:	bf00      	nop
 801e724:	20027e58 	.word	0x20027e58

0801e728 <__malloc_lock>:
 801e728:	4801      	ldr	r0, [pc, #4]	@ (801e730 <__malloc_lock+0x8>)
 801e72a:	f7ff beda 	b.w	801e4e2 <__retarget_lock_acquire_recursive>
 801e72e:	bf00      	nop
 801e730:	20027e50 	.word	0x20027e50

0801e734 <__malloc_unlock>:
 801e734:	4801      	ldr	r0, [pc, #4]	@ (801e73c <__malloc_unlock+0x8>)
 801e736:	f7ff bed5 	b.w	801e4e4 <__retarget_lock_release_recursive>
 801e73a:	bf00      	nop
 801e73c:	20027e50 	.word	0x20027e50

0801e740 <__sfputc_r>:
 801e740:	6893      	ldr	r3, [r2, #8]
 801e742:	3b01      	subs	r3, #1
 801e744:	2b00      	cmp	r3, #0
 801e746:	b410      	push	{r4}
 801e748:	6093      	str	r3, [r2, #8]
 801e74a:	da08      	bge.n	801e75e <__sfputc_r+0x1e>
 801e74c:	6994      	ldr	r4, [r2, #24]
 801e74e:	42a3      	cmp	r3, r4
 801e750:	db01      	blt.n	801e756 <__sfputc_r+0x16>
 801e752:	290a      	cmp	r1, #10
 801e754:	d103      	bne.n	801e75e <__sfputc_r+0x1e>
 801e756:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e75a:	f7ff bd4c 	b.w	801e1f6 <__swbuf_r>
 801e75e:	6813      	ldr	r3, [r2, #0]
 801e760:	1c58      	adds	r0, r3, #1
 801e762:	6010      	str	r0, [r2, #0]
 801e764:	7019      	strb	r1, [r3, #0]
 801e766:	4608      	mov	r0, r1
 801e768:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e76c:	4770      	bx	lr

0801e76e <__sfputs_r>:
 801e76e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e770:	4606      	mov	r6, r0
 801e772:	460f      	mov	r7, r1
 801e774:	4614      	mov	r4, r2
 801e776:	18d5      	adds	r5, r2, r3
 801e778:	42ac      	cmp	r4, r5
 801e77a:	d101      	bne.n	801e780 <__sfputs_r+0x12>
 801e77c:	2000      	movs	r0, #0
 801e77e:	e007      	b.n	801e790 <__sfputs_r+0x22>
 801e780:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e784:	463a      	mov	r2, r7
 801e786:	4630      	mov	r0, r6
 801e788:	f7ff ffda 	bl	801e740 <__sfputc_r>
 801e78c:	1c43      	adds	r3, r0, #1
 801e78e:	d1f3      	bne.n	801e778 <__sfputs_r+0xa>
 801e790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e794 <_vfiprintf_r>:
 801e794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e798:	460d      	mov	r5, r1
 801e79a:	b09d      	sub	sp, #116	@ 0x74
 801e79c:	4614      	mov	r4, r2
 801e79e:	4698      	mov	r8, r3
 801e7a0:	4606      	mov	r6, r0
 801e7a2:	b118      	cbz	r0, 801e7ac <_vfiprintf_r+0x18>
 801e7a4:	6a03      	ldr	r3, [r0, #32]
 801e7a6:	b90b      	cbnz	r3, 801e7ac <_vfiprintf_r+0x18>
 801e7a8:	f7ff fc3c 	bl	801e024 <__sinit>
 801e7ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e7ae:	07d9      	lsls	r1, r3, #31
 801e7b0:	d405      	bmi.n	801e7be <_vfiprintf_r+0x2a>
 801e7b2:	89ab      	ldrh	r3, [r5, #12]
 801e7b4:	059a      	lsls	r2, r3, #22
 801e7b6:	d402      	bmi.n	801e7be <_vfiprintf_r+0x2a>
 801e7b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e7ba:	f7ff fe92 	bl	801e4e2 <__retarget_lock_acquire_recursive>
 801e7be:	89ab      	ldrh	r3, [r5, #12]
 801e7c0:	071b      	lsls	r3, r3, #28
 801e7c2:	d501      	bpl.n	801e7c8 <_vfiprintf_r+0x34>
 801e7c4:	692b      	ldr	r3, [r5, #16]
 801e7c6:	b99b      	cbnz	r3, 801e7f0 <_vfiprintf_r+0x5c>
 801e7c8:	4629      	mov	r1, r5
 801e7ca:	4630      	mov	r0, r6
 801e7cc:	f7ff fd52 	bl	801e274 <__swsetup_r>
 801e7d0:	b170      	cbz	r0, 801e7f0 <_vfiprintf_r+0x5c>
 801e7d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e7d4:	07dc      	lsls	r4, r3, #31
 801e7d6:	d504      	bpl.n	801e7e2 <_vfiprintf_r+0x4e>
 801e7d8:	f04f 30ff 	mov.w	r0, #4294967295
 801e7dc:	b01d      	add	sp, #116	@ 0x74
 801e7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7e2:	89ab      	ldrh	r3, [r5, #12]
 801e7e4:	0598      	lsls	r0, r3, #22
 801e7e6:	d4f7      	bmi.n	801e7d8 <_vfiprintf_r+0x44>
 801e7e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e7ea:	f7ff fe7b 	bl	801e4e4 <__retarget_lock_release_recursive>
 801e7ee:	e7f3      	b.n	801e7d8 <_vfiprintf_r+0x44>
 801e7f0:	2300      	movs	r3, #0
 801e7f2:	9309      	str	r3, [sp, #36]	@ 0x24
 801e7f4:	2320      	movs	r3, #32
 801e7f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801e7fa:	f8cd 800c 	str.w	r8, [sp, #12]
 801e7fe:	2330      	movs	r3, #48	@ 0x30
 801e800:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801e9b0 <_vfiprintf_r+0x21c>
 801e804:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801e808:	f04f 0901 	mov.w	r9, #1
 801e80c:	4623      	mov	r3, r4
 801e80e:	469a      	mov	sl, r3
 801e810:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e814:	b10a      	cbz	r2, 801e81a <_vfiprintf_r+0x86>
 801e816:	2a25      	cmp	r2, #37	@ 0x25
 801e818:	d1f9      	bne.n	801e80e <_vfiprintf_r+0x7a>
 801e81a:	ebba 0b04 	subs.w	fp, sl, r4
 801e81e:	d00b      	beq.n	801e838 <_vfiprintf_r+0xa4>
 801e820:	465b      	mov	r3, fp
 801e822:	4622      	mov	r2, r4
 801e824:	4629      	mov	r1, r5
 801e826:	4630      	mov	r0, r6
 801e828:	f7ff ffa1 	bl	801e76e <__sfputs_r>
 801e82c:	3001      	adds	r0, #1
 801e82e:	f000 80a7 	beq.w	801e980 <_vfiprintf_r+0x1ec>
 801e832:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e834:	445a      	add	r2, fp
 801e836:	9209      	str	r2, [sp, #36]	@ 0x24
 801e838:	f89a 3000 	ldrb.w	r3, [sl]
 801e83c:	2b00      	cmp	r3, #0
 801e83e:	f000 809f 	beq.w	801e980 <_vfiprintf_r+0x1ec>
 801e842:	2300      	movs	r3, #0
 801e844:	f04f 32ff 	mov.w	r2, #4294967295
 801e848:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e84c:	f10a 0a01 	add.w	sl, sl, #1
 801e850:	9304      	str	r3, [sp, #16]
 801e852:	9307      	str	r3, [sp, #28]
 801e854:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801e858:	931a      	str	r3, [sp, #104]	@ 0x68
 801e85a:	4654      	mov	r4, sl
 801e85c:	2205      	movs	r2, #5
 801e85e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e862:	4853      	ldr	r0, [pc, #332]	@ (801e9b0 <_vfiprintf_r+0x21c>)
 801e864:	f7e1 fcd4 	bl	8000210 <memchr>
 801e868:	9a04      	ldr	r2, [sp, #16]
 801e86a:	b9d8      	cbnz	r0, 801e8a4 <_vfiprintf_r+0x110>
 801e86c:	06d1      	lsls	r1, r2, #27
 801e86e:	bf44      	itt	mi
 801e870:	2320      	movmi	r3, #32
 801e872:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e876:	0713      	lsls	r3, r2, #28
 801e878:	bf44      	itt	mi
 801e87a:	232b      	movmi	r3, #43	@ 0x2b
 801e87c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801e880:	f89a 3000 	ldrb.w	r3, [sl]
 801e884:	2b2a      	cmp	r3, #42	@ 0x2a
 801e886:	d015      	beq.n	801e8b4 <_vfiprintf_r+0x120>
 801e888:	9a07      	ldr	r2, [sp, #28]
 801e88a:	4654      	mov	r4, sl
 801e88c:	2000      	movs	r0, #0
 801e88e:	f04f 0c0a 	mov.w	ip, #10
 801e892:	4621      	mov	r1, r4
 801e894:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e898:	3b30      	subs	r3, #48	@ 0x30
 801e89a:	2b09      	cmp	r3, #9
 801e89c:	d94b      	bls.n	801e936 <_vfiprintf_r+0x1a2>
 801e89e:	b1b0      	cbz	r0, 801e8ce <_vfiprintf_r+0x13a>
 801e8a0:	9207      	str	r2, [sp, #28]
 801e8a2:	e014      	b.n	801e8ce <_vfiprintf_r+0x13a>
 801e8a4:	eba0 0308 	sub.w	r3, r0, r8
 801e8a8:	fa09 f303 	lsl.w	r3, r9, r3
 801e8ac:	4313      	orrs	r3, r2
 801e8ae:	9304      	str	r3, [sp, #16]
 801e8b0:	46a2      	mov	sl, r4
 801e8b2:	e7d2      	b.n	801e85a <_vfiprintf_r+0xc6>
 801e8b4:	9b03      	ldr	r3, [sp, #12]
 801e8b6:	1d19      	adds	r1, r3, #4
 801e8b8:	681b      	ldr	r3, [r3, #0]
 801e8ba:	9103      	str	r1, [sp, #12]
 801e8bc:	2b00      	cmp	r3, #0
 801e8be:	bfbb      	ittet	lt
 801e8c0:	425b      	neglt	r3, r3
 801e8c2:	f042 0202 	orrlt.w	r2, r2, #2
 801e8c6:	9307      	strge	r3, [sp, #28]
 801e8c8:	9307      	strlt	r3, [sp, #28]
 801e8ca:	bfb8      	it	lt
 801e8cc:	9204      	strlt	r2, [sp, #16]
 801e8ce:	7823      	ldrb	r3, [r4, #0]
 801e8d0:	2b2e      	cmp	r3, #46	@ 0x2e
 801e8d2:	d10a      	bne.n	801e8ea <_vfiprintf_r+0x156>
 801e8d4:	7863      	ldrb	r3, [r4, #1]
 801e8d6:	2b2a      	cmp	r3, #42	@ 0x2a
 801e8d8:	d132      	bne.n	801e940 <_vfiprintf_r+0x1ac>
 801e8da:	9b03      	ldr	r3, [sp, #12]
 801e8dc:	1d1a      	adds	r2, r3, #4
 801e8de:	681b      	ldr	r3, [r3, #0]
 801e8e0:	9203      	str	r2, [sp, #12]
 801e8e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801e8e6:	3402      	adds	r4, #2
 801e8e8:	9305      	str	r3, [sp, #20]
 801e8ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801e9c0 <_vfiprintf_r+0x22c>
 801e8ee:	7821      	ldrb	r1, [r4, #0]
 801e8f0:	2203      	movs	r2, #3
 801e8f2:	4650      	mov	r0, sl
 801e8f4:	f7e1 fc8c 	bl	8000210 <memchr>
 801e8f8:	b138      	cbz	r0, 801e90a <_vfiprintf_r+0x176>
 801e8fa:	9b04      	ldr	r3, [sp, #16]
 801e8fc:	eba0 000a 	sub.w	r0, r0, sl
 801e900:	2240      	movs	r2, #64	@ 0x40
 801e902:	4082      	lsls	r2, r0
 801e904:	4313      	orrs	r3, r2
 801e906:	3401      	adds	r4, #1
 801e908:	9304      	str	r3, [sp, #16]
 801e90a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e90e:	4829      	ldr	r0, [pc, #164]	@ (801e9b4 <_vfiprintf_r+0x220>)
 801e910:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801e914:	2206      	movs	r2, #6
 801e916:	f7e1 fc7b 	bl	8000210 <memchr>
 801e91a:	2800      	cmp	r0, #0
 801e91c:	d03f      	beq.n	801e99e <_vfiprintf_r+0x20a>
 801e91e:	4b26      	ldr	r3, [pc, #152]	@ (801e9b8 <_vfiprintf_r+0x224>)
 801e920:	bb1b      	cbnz	r3, 801e96a <_vfiprintf_r+0x1d6>
 801e922:	9b03      	ldr	r3, [sp, #12]
 801e924:	3307      	adds	r3, #7
 801e926:	f023 0307 	bic.w	r3, r3, #7
 801e92a:	3308      	adds	r3, #8
 801e92c:	9303      	str	r3, [sp, #12]
 801e92e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e930:	443b      	add	r3, r7
 801e932:	9309      	str	r3, [sp, #36]	@ 0x24
 801e934:	e76a      	b.n	801e80c <_vfiprintf_r+0x78>
 801e936:	fb0c 3202 	mla	r2, ip, r2, r3
 801e93a:	460c      	mov	r4, r1
 801e93c:	2001      	movs	r0, #1
 801e93e:	e7a8      	b.n	801e892 <_vfiprintf_r+0xfe>
 801e940:	2300      	movs	r3, #0
 801e942:	3401      	adds	r4, #1
 801e944:	9305      	str	r3, [sp, #20]
 801e946:	4619      	mov	r1, r3
 801e948:	f04f 0c0a 	mov.w	ip, #10
 801e94c:	4620      	mov	r0, r4
 801e94e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e952:	3a30      	subs	r2, #48	@ 0x30
 801e954:	2a09      	cmp	r2, #9
 801e956:	d903      	bls.n	801e960 <_vfiprintf_r+0x1cc>
 801e958:	2b00      	cmp	r3, #0
 801e95a:	d0c6      	beq.n	801e8ea <_vfiprintf_r+0x156>
 801e95c:	9105      	str	r1, [sp, #20]
 801e95e:	e7c4      	b.n	801e8ea <_vfiprintf_r+0x156>
 801e960:	fb0c 2101 	mla	r1, ip, r1, r2
 801e964:	4604      	mov	r4, r0
 801e966:	2301      	movs	r3, #1
 801e968:	e7f0      	b.n	801e94c <_vfiprintf_r+0x1b8>
 801e96a:	ab03      	add	r3, sp, #12
 801e96c:	9300      	str	r3, [sp, #0]
 801e96e:	462a      	mov	r2, r5
 801e970:	4b12      	ldr	r3, [pc, #72]	@ (801e9bc <_vfiprintf_r+0x228>)
 801e972:	a904      	add	r1, sp, #16
 801e974:	4630      	mov	r0, r6
 801e976:	f3af 8000 	nop.w
 801e97a:	4607      	mov	r7, r0
 801e97c:	1c78      	adds	r0, r7, #1
 801e97e:	d1d6      	bne.n	801e92e <_vfiprintf_r+0x19a>
 801e980:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801e982:	07d9      	lsls	r1, r3, #31
 801e984:	d405      	bmi.n	801e992 <_vfiprintf_r+0x1fe>
 801e986:	89ab      	ldrh	r3, [r5, #12]
 801e988:	059a      	lsls	r2, r3, #22
 801e98a:	d402      	bmi.n	801e992 <_vfiprintf_r+0x1fe>
 801e98c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801e98e:	f7ff fda9 	bl	801e4e4 <__retarget_lock_release_recursive>
 801e992:	89ab      	ldrh	r3, [r5, #12]
 801e994:	065b      	lsls	r3, r3, #25
 801e996:	f53f af1f 	bmi.w	801e7d8 <_vfiprintf_r+0x44>
 801e99a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801e99c:	e71e      	b.n	801e7dc <_vfiprintf_r+0x48>
 801e99e:	ab03      	add	r3, sp, #12
 801e9a0:	9300      	str	r3, [sp, #0]
 801e9a2:	462a      	mov	r2, r5
 801e9a4:	4b05      	ldr	r3, [pc, #20]	@ (801e9bc <_vfiprintf_r+0x228>)
 801e9a6:	a904      	add	r1, sp, #16
 801e9a8:	4630      	mov	r0, r6
 801e9aa:	f000 f879 	bl	801eaa0 <_printf_i>
 801e9ae:	e7e4      	b.n	801e97a <_vfiprintf_r+0x1e6>
 801e9b0:	080223a9 	.word	0x080223a9
 801e9b4:	080223b3 	.word	0x080223b3
 801e9b8:	00000000 	.word	0x00000000
 801e9bc:	0801e76f 	.word	0x0801e76f
 801e9c0:	080223af 	.word	0x080223af

0801e9c4 <_printf_common>:
 801e9c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e9c8:	4616      	mov	r6, r2
 801e9ca:	4698      	mov	r8, r3
 801e9cc:	688a      	ldr	r2, [r1, #8]
 801e9ce:	690b      	ldr	r3, [r1, #16]
 801e9d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801e9d4:	4293      	cmp	r3, r2
 801e9d6:	bfb8      	it	lt
 801e9d8:	4613      	movlt	r3, r2
 801e9da:	6033      	str	r3, [r6, #0]
 801e9dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801e9e0:	4607      	mov	r7, r0
 801e9e2:	460c      	mov	r4, r1
 801e9e4:	b10a      	cbz	r2, 801e9ea <_printf_common+0x26>
 801e9e6:	3301      	adds	r3, #1
 801e9e8:	6033      	str	r3, [r6, #0]
 801e9ea:	6823      	ldr	r3, [r4, #0]
 801e9ec:	0699      	lsls	r1, r3, #26
 801e9ee:	bf42      	ittt	mi
 801e9f0:	6833      	ldrmi	r3, [r6, #0]
 801e9f2:	3302      	addmi	r3, #2
 801e9f4:	6033      	strmi	r3, [r6, #0]
 801e9f6:	6825      	ldr	r5, [r4, #0]
 801e9f8:	f015 0506 	ands.w	r5, r5, #6
 801e9fc:	d106      	bne.n	801ea0c <_printf_common+0x48>
 801e9fe:	f104 0a19 	add.w	sl, r4, #25
 801ea02:	68e3      	ldr	r3, [r4, #12]
 801ea04:	6832      	ldr	r2, [r6, #0]
 801ea06:	1a9b      	subs	r3, r3, r2
 801ea08:	42ab      	cmp	r3, r5
 801ea0a:	dc26      	bgt.n	801ea5a <_printf_common+0x96>
 801ea0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801ea10:	6822      	ldr	r2, [r4, #0]
 801ea12:	3b00      	subs	r3, #0
 801ea14:	bf18      	it	ne
 801ea16:	2301      	movne	r3, #1
 801ea18:	0692      	lsls	r2, r2, #26
 801ea1a:	d42b      	bmi.n	801ea74 <_printf_common+0xb0>
 801ea1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ea20:	4641      	mov	r1, r8
 801ea22:	4638      	mov	r0, r7
 801ea24:	47c8      	blx	r9
 801ea26:	3001      	adds	r0, #1
 801ea28:	d01e      	beq.n	801ea68 <_printf_common+0xa4>
 801ea2a:	6823      	ldr	r3, [r4, #0]
 801ea2c:	6922      	ldr	r2, [r4, #16]
 801ea2e:	f003 0306 	and.w	r3, r3, #6
 801ea32:	2b04      	cmp	r3, #4
 801ea34:	bf02      	ittt	eq
 801ea36:	68e5      	ldreq	r5, [r4, #12]
 801ea38:	6833      	ldreq	r3, [r6, #0]
 801ea3a:	1aed      	subeq	r5, r5, r3
 801ea3c:	68a3      	ldr	r3, [r4, #8]
 801ea3e:	bf0c      	ite	eq
 801ea40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ea44:	2500      	movne	r5, #0
 801ea46:	4293      	cmp	r3, r2
 801ea48:	bfc4      	itt	gt
 801ea4a:	1a9b      	subgt	r3, r3, r2
 801ea4c:	18ed      	addgt	r5, r5, r3
 801ea4e:	2600      	movs	r6, #0
 801ea50:	341a      	adds	r4, #26
 801ea52:	42b5      	cmp	r5, r6
 801ea54:	d11a      	bne.n	801ea8c <_printf_common+0xc8>
 801ea56:	2000      	movs	r0, #0
 801ea58:	e008      	b.n	801ea6c <_printf_common+0xa8>
 801ea5a:	2301      	movs	r3, #1
 801ea5c:	4652      	mov	r2, sl
 801ea5e:	4641      	mov	r1, r8
 801ea60:	4638      	mov	r0, r7
 801ea62:	47c8      	blx	r9
 801ea64:	3001      	adds	r0, #1
 801ea66:	d103      	bne.n	801ea70 <_printf_common+0xac>
 801ea68:	f04f 30ff 	mov.w	r0, #4294967295
 801ea6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ea70:	3501      	adds	r5, #1
 801ea72:	e7c6      	b.n	801ea02 <_printf_common+0x3e>
 801ea74:	18e1      	adds	r1, r4, r3
 801ea76:	1c5a      	adds	r2, r3, #1
 801ea78:	2030      	movs	r0, #48	@ 0x30
 801ea7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801ea7e:	4422      	add	r2, r4
 801ea80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801ea84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801ea88:	3302      	adds	r3, #2
 801ea8a:	e7c7      	b.n	801ea1c <_printf_common+0x58>
 801ea8c:	2301      	movs	r3, #1
 801ea8e:	4622      	mov	r2, r4
 801ea90:	4641      	mov	r1, r8
 801ea92:	4638      	mov	r0, r7
 801ea94:	47c8      	blx	r9
 801ea96:	3001      	adds	r0, #1
 801ea98:	d0e6      	beq.n	801ea68 <_printf_common+0xa4>
 801ea9a:	3601      	adds	r6, #1
 801ea9c:	e7d9      	b.n	801ea52 <_printf_common+0x8e>
	...

0801eaa0 <_printf_i>:
 801eaa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801eaa4:	7e0f      	ldrb	r7, [r1, #24]
 801eaa6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801eaa8:	2f78      	cmp	r7, #120	@ 0x78
 801eaaa:	4691      	mov	r9, r2
 801eaac:	4680      	mov	r8, r0
 801eaae:	460c      	mov	r4, r1
 801eab0:	469a      	mov	sl, r3
 801eab2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801eab6:	d807      	bhi.n	801eac8 <_printf_i+0x28>
 801eab8:	2f62      	cmp	r7, #98	@ 0x62
 801eaba:	d80a      	bhi.n	801ead2 <_printf_i+0x32>
 801eabc:	2f00      	cmp	r7, #0
 801eabe:	f000 80d1 	beq.w	801ec64 <_printf_i+0x1c4>
 801eac2:	2f58      	cmp	r7, #88	@ 0x58
 801eac4:	f000 80b8 	beq.w	801ec38 <_printf_i+0x198>
 801eac8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801eacc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801ead0:	e03a      	b.n	801eb48 <_printf_i+0xa8>
 801ead2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ead6:	2b15      	cmp	r3, #21
 801ead8:	d8f6      	bhi.n	801eac8 <_printf_i+0x28>
 801eada:	a101      	add	r1, pc, #4	@ (adr r1, 801eae0 <_printf_i+0x40>)
 801eadc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801eae0:	0801eb39 	.word	0x0801eb39
 801eae4:	0801eb4d 	.word	0x0801eb4d
 801eae8:	0801eac9 	.word	0x0801eac9
 801eaec:	0801eac9 	.word	0x0801eac9
 801eaf0:	0801eac9 	.word	0x0801eac9
 801eaf4:	0801eac9 	.word	0x0801eac9
 801eaf8:	0801eb4d 	.word	0x0801eb4d
 801eafc:	0801eac9 	.word	0x0801eac9
 801eb00:	0801eac9 	.word	0x0801eac9
 801eb04:	0801eac9 	.word	0x0801eac9
 801eb08:	0801eac9 	.word	0x0801eac9
 801eb0c:	0801ec4b 	.word	0x0801ec4b
 801eb10:	0801eb77 	.word	0x0801eb77
 801eb14:	0801ec05 	.word	0x0801ec05
 801eb18:	0801eac9 	.word	0x0801eac9
 801eb1c:	0801eac9 	.word	0x0801eac9
 801eb20:	0801ec6d 	.word	0x0801ec6d
 801eb24:	0801eac9 	.word	0x0801eac9
 801eb28:	0801eb77 	.word	0x0801eb77
 801eb2c:	0801eac9 	.word	0x0801eac9
 801eb30:	0801eac9 	.word	0x0801eac9
 801eb34:	0801ec0d 	.word	0x0801ec0d
 801eb38:	6833      	ldr	r3, [r6, #0]
 801eb3a:	1d1a      	adds	r2, r3, #4
 801eb3c:	681b      	ldr	r3, [r3, #0]
 801eb3e:	6032      	str	r2, [r6, #0]
 801eb40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801eb44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801eb48:	2301      	movs	r3, #1
 801eb4a:	e09c      	b.n	801ec86 <_printf_i+0x1e6>
 801eb4c:	6833      	ldr	r3, [r6, #0]
 801eb4e:	6820      	ldr	r0, [r4, #0]
 801eb50:	1d19      	adds	r1, r3, #4
 801eb52:	6031      	str	r1, [r6, #0]
 801eb54:	0606      	lsls	r6, r0, #24
 801eb56:	d501      	bpl.n	801eb5c <_printf_i+0xbc>
 801eb58:	681d      	ldr	r5, [r3, #0]
 801eb5a:	e003      	b.n	801eb64 <_printf_i+0xc4>
 801eb5c:	0645      	lsls	r5, r0, #25
 801eb5e:	d5fb      	bpl.n	801eb58 <_printf_i+0xb8>
 801eb60:	f9b3 5000 	ldrsh.w	r5, [r3]
 801eb64:	2d00      	cmp	r5, #0
 801eb66:	da03      	bge.n	801eb70 <_printf_i+0xd0>
 801eb68:	232d      	movs	r3, #45	@ 0x2d
 801eb6a:	426d      	negs	r5, r5
 801eb6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801eb70:	4858      	ldr	r0, [pc, #352]	@ (801ecd4 <_printf_i+0x234>)
 801eb72:	230a      	movs	r3, #10
 801eb74:	e011      	b.n	801eb9a <_printf_i+0xfa>
 801eb76:	6821      	ldr	r1, [r4, #0]
 801eb78:	6833      	ldr	r3, [r6, #0]
 801eb7a:	0608      	lsls	r0, r1, #24
 801eb7c:	f853 5b04 	ldr.w	r5, [r3], #4
 801eb80:	d402      	bmi.n	801eb88 <_printf_i+0xe8>
 801eb82:	0649      	lsls	r1, r1, #25
 801eb84:	bf48      	it	mi
 801eb86:	b2ad      	uxthmi	r5, r5
 801eb88:	2f6f      	cmp	r7, #111	@ 0x6f
 801eb8a:	4852      	ldr	r0, [pc, #328]	@ (801ecd4 <_printf_i+0x234>)
 801eb8c:	6033      	str	r3, [r6, #0]
 801eb8e:	bf14      	ite	ne
 801eb90:	230a      	movne	r3, #10
 801eb92:	2308      	moveq	r3, #8
 801eb94:	2100      	movs	r1, #0
 801eb96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801eb9a:	6866      	ldr	r6, [r4, #4]
 801eb9c:	60a6      	str	r6, [r4, #8]
 801eb9e:	2e00      	cmp	r6, #0
 801eba0:	db05      	blt.n	801ebae <_printf_i+0x10e>
 801eba2:	6821      	ldr	r1, [r4, #0]
 801eba4:	432e      	orrs	r6, r5
 801eba6:	f021 0104 	bic.w	r1, r1, #4
 801ebaa:	6021      	str	r1, [r4, #0]
 801ebac:	d04b      	beq.n	801ec46 <_printf_i+0x1a6>
 801ebae:	4616      	mov	r6, r2
 801ebb0:	fbb5 f1f3 	udiv	r1, r5, r3
 801ebb4:	fb03 5711 	mls	r7, r3, r1, r5
 801ebb8:	5dc7      	ldrb	r7, [r0, r7]
 801ebba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ebbe:	462f      	mov	r7, r5
 801ebc0:	42bb      	cmp	r3, r7
 801ebc2:	460d      	mov	r5, r1
 801ebc4:	d9f4      	bls.n	801ebb0 <_printf_i+0x110>
 801ebc6:	2b08      	cmp	r3, #8
 801ebc8:	d10b      	bne.n	801ebe2 <_printf_i+0x142>
 801ebca:	6823      	ldr	r3, [r4, #0]
 801ebcc:	07df      	lsls	r7, r3, #31
 801ebce:	d508      	bpl.n	801ebe2 <_printf_i+0x142>
 801ebd0:	6923      	ldr	r3, [r4, #16]
 801ebd2:	6861      	ldr	r1, [r4, #4]
 801ebd4:	4299      	cmp	r1, r3
 801ebd6:	bfde      	ittt	le
 801ebd8:	2330      	movle	r3, #48	@ 0x30
 801ebda:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ebde:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ebe2:	1b92      	subs	r2, r2, r6
 801ebe4:	6122      	str	r2, [r4, #16]
 801ebe6:	f8cd a000 	str.w	sl, [sp]
 801ebea:	464b      	mov	r3, r9
 801ebec:	aa03      	add	r2, sp, #12
 801ebee:	4621      	mov	r1, r4
 801ebf0:	4640      	mov	r0, r8
 801ebf2:	f7ff fee7 	bl	801e9c4 <_printf_common>
 801ebf6:	3001      	adds	r0, #1
 801ebf8:	d14a      	bne.n	801ec90 <_printf_i+0x1f0>
 801ebfa:	f04f 30ff 	mov.w	r0, #4294967295
 801ebfe:	b004      	add	sp, #16
 801ec00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ec04:	6823      	ldr	r3, [r4, #0]
 801ec06:	f043 0320 	orr.w	r3, r3, #32
 801ec0a:	6023      	str	r3, [r4, #0]
 801ec0c:	4832      	ldr	r0, [pc, #200]	@ (801ecd8 <_printf_i+0x238>)
 801ec0e:	2778      	movs	r7, #120	@ 0x78
 801ec10:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ec14:	6823      	ldr	r3, [r4, #0]
 801ec16:	6831      	ldr	r1, [r6, #0]
 801ec18:	061f      	lsls	r7, r3, #24
 801ec1a:	f851 5b04 	ldr.w	r5, [r1], #4
 801ec1e:	d402      	bmi.n	801ec26 <_printf_i+0x186>
 801ec20:	065f      	lsls	r7, r3, #25
 801ec22:	bf48      	it	mi
 801ec24:	b2ad      	uxthmi	r5, r5
 801ec26:	6031      	str	r1, [r6, #0]
 801ec28:	07d9      	lsls	r1, r3, #31
 801ec2a:	bf44      	itt	mi
 801ec2c:	f043 0320 	orrmi.w	r3, r3, #32
 801ec30:	6023      	strmi	r3, [r4, #0]
 801ec32:	b11d      	cbz	r5, 801ec3c <_printf_i+0x19c>
 801ec34:	2310      	movs	r3, #16
 801ec36:	e7ad      	b.n	801eb94 <_printf_i+0xf4>
 801ec38:	4826      	ldr	r0, [pc, #152]	@ (801ecd4 <_printf_i+0x234>)
 801ec3a:	e7e9      	b.n	801ec10 <_printf_i+0x170>
 801ec3c:	6823      	ldr	r3, [r4, #0]
 801ec3e:	f023 0320 	bic.w	r3, r3, #32
 801ec42:	6023      	str	r3, [r4, #0]
 801ec44:	e7f6      	b.n	801ec34 <_printf_i+0x194>
 801ec46:	4616      	mov	r6, r2
 801ec48:	e7bd      	b.n	801ebc6 <_printf_i+0x126>
 801ec4a:	6833      	ldr	r3, [r6, #0]
 801ec4c:	6825      	ldr	r5, [r4, #0]
 801ec4e:	6961      	ldr	r1, [r4, #20]
 801ec50:	1d18      	adds	r0, r3, #4
 801ec52:	6030      	str	r0, [r6, #0]
 801ec54:	062e      	lsls	r6, r5, #24
 801ec56:	681b      	ldr	r3, [r3, #0]
 801ec58:	d501      	bpl.n	801ec5e <_printf_i+0x1be>
 801ec5a:	6019      	str	r1, [r3, #0]
 801ec5c:	e002      	b.n	801ec64 <_printf_i+0x1c4>
 801ec5e:	0668      	lsls	r0, r5, #25
 801ec60:	d5fb      	bpl.n	801ec5a <_printf_i+0x1ba>
 801ec62:	8019      	strh	r1, [r3, #0]
 801ec64:	2300      	movs	r3, #0
 801ec66:	6123      	str	r3, [r4, #16]
 801ec68:	4616      	mov	r6, r2
 801ec6a:	e7bc      	b.n	801ebe6 <_printf_i+0x146>
 801ec6c:	6833      	ldr	r3, [r6, #0]
 801ec6e:	1d1a      	adds	r2, r3, #4
 801ec70:	6032      	str	r2, [r6, #0]
 801ec72:	681e      	ldr	r6, [r3, #0]
 801ec74:	6862      	ldr	r2, [r4, #4]
 801ec76:	2100      	movs	r1, #0
 801ec78:	4630      	mov	r0, r6
 801ec7a:	f7e1 fac9 	bl	8000210 <memchr>
 801ec7e:	b108      	cbz	r0, 801ec84 <_printf_i+0x1e4>
 801ec80:	1b80      	subs	r0, r0, r6
 801ec82:	6060      	str	r0, [r4, #4]
 801ec84:	6863      	ldr	r3, [r4, #4]
 801ec86:	6123      	str	r3, [r4, #16]
 801ec88:	2300      	movs	r3, #0
 801ec8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ec8e:	e7aa      	b.n	801ebe6 <_printf_i+0x146>
 801ec90:	6923      	ldr	r3, [r4, #16]
 801ec92:	4632      	mov	r2, r6
 801ec94:	4649      	mov	r1, r9
 801ec96:	4640      	mov	r0, r8
 801ec98:	47d0      	blx	sl
 801ec9a:	3001      	adds	r0, #1
 801ec9c:	d0ad      	beq.n	801ebfa <_printf_i+0x15a>
 801ec9e:	6823      	ldr	r3, [r4, #0]
 801eca0:	079b      	lsls	r3, r3, #30
 801eca2:	d413      	bmi.n	801eccc <_printf_i+0x22c>
 801eca4:	68e0      	ldr	r0, [r4, #12]
 801eca6:	9b03      	ldr	r3, [sp, #12]
 801eca8:	4298      	cmp	r0, r3
 801ecaa:	bfb8      	it	lt
 801ecac:	4618      	movlt	r0, r3
 801ecae:	e7a6      	b.n	801ebfe <_printf_i+0x15e>
 801ecb0:	2301      	movs	r3, #1
 801ecb2:	4632      	mov	r2, r6
 801ecb4:	4649      	mov	r1, r9
 801ecb6:	4640      	mov	r0, r8
 801ecb8:	47d0      	blx	sl
 801ecba:	3001      	adds	r0, #1
 801ecbc:	d09d      	beq.n	801ebfa <_printf_i+0x15a>
 801ecbe:	3501      	adds	r5, #1
 801ecc0:	68e3      	ldr	r3, [r4, #12]
 801ecc2:	9903      	ldr	r1, [sp, #12]
 801ecc4:	1a5b      	subs	r3, r3, r1
 801ecc6:	42ab      	cmp	r3, r5
 801ecc8:	dcf2      	bgt.n	801ecb0 <_printf_i+0x210>
 801ecca:	e7eb      	b.n	801eca4 <_printf_i+0x204>
 801eccc:	2500      	movs	r5, #0
 801ecce:	f104 0619 	add.w	r6, r4, #25
 801ecd2:	e7f5      	b.n	801ecc0 <_printf_i+0x220>
 801ecd4:	080223ba 	.word	0x080223ba
 801ecd8:	080223cb 	.word	0x080223cb

0801ecdc <__sflush_r>:
 801ecdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801ece0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ece4:	0716      	lsls	r6, r2, #28
 801ece6:	4605      	mov	r5, r0
 801ece8:	460c      	mov	r4, r1
 801ecea:	d454      	bmi.n	801ed96 <__sflush_r+0xba>
 801ecec:	684b      	ldr	r3, [r1, #4]
 801ecee:	2b00      	cmp	r3, #0
 801ecf0:	dc02      	bgt.n	801ecf8 <__sflush_r+0x1c>
 801ecf2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801ecf4:	2b00      	cmp	r3, #0
 801ecf6:	dd48      	ble.n	801ed8a <__sflush_r+0xae>
 801ecf8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ecfa:	2e00      	cmp	r6, #0
 801ecfc:	d045      	beq.n	801ed8a <__sflush_r+0xae>
 801ecfe:	2300      	movs	r3, #0
 801ed00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801ed04:	682f      	ldr	r7, [r5, #0]
 801ed06:	6a21      	ldr	r1, [r4, #32]
 801ed08:	602b      	str	r3, [r5, #0]
 801ed0a:	d030      	beq.n	801ed6e <__sflush_r+0x92>
 801ed0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801ed0e:	89a3      	ldrh	r3, [r4, #12]
 801ed10:	0759      	lsls	r1, r3, #29
 801ed12:	d505      	bpl.n	801ed20 <__sflush_r+0x44>
 801ed14:	6863      	ldr	r3, [r4, #4]
 801ed16:	1ad2      	subs	r2, r2, r3
 801ed18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ed1a:	b10b      	cbz	r3, 801ed20 <__sflush_r+0x44>
 801ed1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ed1e:	1ad2      	subs	r2, r2, r3
 801ed20:	2300      	movs	r3, #0
 801ed22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801ed24:	6a21      	ldr	r1, [r4, #32]
 801ed26:	4628      	mov	r0, r5
 801ed28:	47b0      	blx	r6
 801ed2a:	1c43      	adds	r3, r0, #1
 801ed2c:	89a3      	ldrh	r3, [r4, #12]
 801ed2e:	d106      	bne.n	801ed3e <__sflush_r+0x62>
 801ed30:	6829      	ldr	r1, [r5, #0]
 801ed32:	291d      	cmp	r1, #29
 801ed34:	d82b      	bhi.n	801ed8e <__sflush_r+0xb2>
 801ed36:	4a2a      	ldr	r2, [pc, #168]	@ (801ede0 <__sflush_r+0x104>)
 801ed38:	40ca      	lsrs	r2, r1
 801ed3a:	07d6      	lsls	r6, r2, #31
 801ed3c:	d527      	bpl.n	801ed8e <__sflush_r+0xb2>
 801ed3e:	2200      	movs	r2, #0
 801ed40:	6062      	str	r2, [r4, #4]
 801ed42:	04d9      	lsls	r1, r3, #19
 801ed44:	6922      	ldr	r2, [r4, #16]
 801ed46:	6022      	str	r2, [r4, #0]
 801ed48:	d504      	bpl.n	801ed54 <__sflush_r+0x78>
 801ed4a:	1c42      	adds	r2, r0, #1
 801ed4c:	d101      	bne.n	801ed52 <__sflush_r+0x76>
 801ed4e:	682b      	ldr	r3, [r5, #0]
 801ed50:	b903      	cbnz	r3, 801ed54 <__sflush_r+0x78>
 801ed52:	6560      	str	r0, [r4, #84]	@ 0x54
 801ed54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ed56:	602f      	str	r7, [r5, #0]
 801ed58:	b1b9      	cbz	r1, 801ed8a <__sflush_r+0xae>
 801ed5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ed5e:	4299      	cmp	r1, r3
 801ed60:	d002      	beq.n	801ed68 <__sflush_r+0x8c>
 801ed62:	4628      	mov	r0, r5
 801ed64:	f7ff fbec 	bl	801e540 <_free_r>
 801ed68:	2300      	movs	r3, #0
 801ed6a:	6363      	str	r3, [r4, #52]	@ 0x34
 801ed6c:	e00d      	b.n	801ed8a <__sflush_r+0xae>
 801ed6e:	2301      	movs	r3, #1
 801ed70:	4628      	mov	r0, r5
 801ed72:	47b0      	blx	r6
 801ed74:	4602      	mov	r2, r0
 801ed76:	1c50      	adds	r0, r2, #1
 801ed78:	d1c9      	bne.n	801ed0e <__sflush_r+0x32>
 801ed7a:	682b      	ldr	r3, [r5, #0]
 801ed7c:	2b00      	cmp	r3, #0
 801ed7e:	d0c6      	beq.n	801ed0e <__sflush_r+0x32>
 801ed80:	2b1d      	cmp	r3, #29
 801ed82:	d001      	beq.n	801ed88 <__sflush_r+0xac>
 801ed84:	2b16      	cmp	r3, #22
 801ed86:	d11e      	bne.n	801edc6 <__sflush_r+0xea>
 801ed88:	602f      	str	r7, [r5, #0]
 801ed8a:	2000      	movs	r0, #0
 801ed8c:	e022      	b.n	801edd4 <__sflush_r+0xf8>
 801ed8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ed92:	b21b      	sxth	r3, r3
 801ed94:	e01b      	b.n	801edce <__sflush_r+0xf2>
 801ed96:	690f      	ldr	r7, [r1, #16]
 801ed98:	2f00      	cmp	r7, #0
 801ed9a:	d0f6      	beq.n	801ed8a <__sflush_r+0xae>
 801ed9c:	0793      	lsls	r3, r2, #30
 801ed9e:	680e      	ldr	r6, [r1, #0]
 801eda0:	bf08      	it	eq
 801eda2:	694b      	ldreq	r3, [r1, #20]
 801eda4:	600f      	str	r7, [r1, #0]
 801eda6:	bf18      	it	ne
 801eda8:	2300      	movne	r3, #0
 801edaa:	eba6 0807 	sub.w	r8, r6, r7
 801edae:	608b      	str	r3, [r1, #8]
 801edb0:	f1b8 0f00 	cmp.w	r8, #0
 801edb4:	dde9      	ble.n	801ed8a <__sflush_r+0xae>
 801edb6:	6a21      	ldr	r1, [r4, #32]
 801edb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801edba:	4643      	mov	r3, r8
 801edbc:	463a      	mov	r2, r7
 801edbe:	4628      	mov	r0, r5
 801edc0:	47b0      	blx	r6
 801edc2:	2800      	cmp	r0, #0
 801edc4:	dc08      	bgt.n	801edd8 <__sflush_r+0xfc>
 801edc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801edca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801edce:	81a3      	strh	r3, [r4, #12]
 801edd0:	f04f 30ff 	mov.w	r0, #4294967295
 801edd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801edd8:	4407      	add	r7, r0
 801edda:	eba8 0800 	sub.w	r8, r8, r0
 801edde:	e7e7      	b.n	801edb0 <__sflush_r+0xd4>
 801ede0:	20400001 	.word	0x20400001

0801ede4 <_fflush_r>:
 801ede4:	b538      	push	{r3, r4, r5, lr}
 801ede6:	690b      	ldr	r3, [r1, #16]
 801ede8:	4605      	mov	r5, r0
 801edea:	460c      	mov	r4, r1
 801edec:	b913      	cbnz	r3, 801edf4 <_fflush_r+0x10>
 801edee:	2500      	movs	r5, #0
 801edf0:	4628      	mov	r0, r5
 801edf2:	bd38      	pop	{r3, r4, r5, pc}
 801edf4:	b118      	cbz	r0, 801edfe <_fflush_r+0x1a>
 801edf6:	6a03      	ldr	r3, [r0, #32]
 801edf8:	b90b      	cbnz	r3, 801edfe <_fflush_r+0x1a>
 801edfa:	f7ff f913 	bl	801e024 <__sinit>
 801edfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ee02:	2b00      	cmp	r3, #0
 801ee04:	d0f3      	beq.n	801edee <_fflush_r+0xa>
 801ee06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801ee08:	07d0      	lsls	r0, r2, #31
 801ee0a:	d404      	bmi.n	801ee16 <_fflush_r+0x32>
 801ee0c:	0599      	lsls	r1, r3, #22
 801ee0e:	d402      	bmi.n	801ee16 <_fflush_r+0x32>
 801ee10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ee12:	f7ff fb66 	bl	801e4e2 <__retarget_lock_acquire_recursive>
 801ee16:	4628      	mov	r0, r5
 801ee18:	4621      	mov	r1, r4
 801ee1a:	f7ff ff5f 	bl	801ecdc <__sflush_r>
 801ee1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ee20:	07da      	lsls	r2, r3, #31
 801ee22:	4605      	mov	r5, r0
 801ee24:	d4e4      	bmi.n	801edf0 <_fflush_r+0xc>
 801ee26:	89a3      	ldrh	r3, [r4, #12]
 801ee28:	059b      	lsls	r3, r3, #22
 801ee2a:	d4e1      	bmi.n	801edf0 <_fflush_r+0xc>
 801ee2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ee2e:	f7ff fb59 	bl	801e4e4 <__retarget_lock_release_recursive>
 801ee32:	e7dd      	b.n	801edf0 <_fflush_r+0xc>

0801ee34 <fiprintf>:
 801ee34:	b40e      	push	{r1, r2, r3}
 801ee36:	b503      	push	{r0, r1, lr}
 801ee38:	4601      	mov	r1, r0
 801ee3a:	ab03      	add	r3, sp, #12
 801ee3c:	4805      	ldr	r0, [pc, #20]	@ (801ee54 <fiprintf+0x20>)
 801ee3e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ee42:	6800      	ldr	r0, [r0, #0]
 801ee44:	9301      	str	r3, [sp, #4]
 801ee46:	f7ff fca5 	bl	801e794 <_vfiprintf_r>
 801ee4a:	b002      	add	sp, #8
 801ee4c:	f85d eb04 	ldr.w	lr, [sp], #4
 801ee50:	b003      	add	sp, #12
 801ee52:	4770      	bx	lr
 801ee54:	2000003c 	.word	0x2000003c

0801ee58 <__swhatbuf_r>:
 801ee58:	b570      	push	{r4, r5, r6, lr}
 801ee5a:	460c      	mov	r4, r1
 801ee5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ee60:	2900      	cmp	r1, #0
 801ee62:	b096      	sub	sp, #88	@ 0x58
 801ee64:	4615      	mov	r5, r2
 801ee66:	461e      	mov	r6, r3
 801ee68:	da0d      	bge.n	801ee86 <__swhatbuf_r+0x2e>
 801ee6a:	89a3      	ldrh	r3, [r4, #12]
 801ee6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ee70:	f04f 0100 	mov.w	r1, #0
 801ee74:	bf14      	ite	ne
 801ee76:	2340      	movne	r3, #64	@ 0x40
 801ee78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801ee7c:	2000      	movs	r0, #0
 801ee7e:	6031      	str	r1, [r6, #0]
 801ee80:	602b      	str	r3, [r5, #0]
 801ee82:	b016      	add	sp, #88	@ 0x58
 801ee84:	bd70      	pop	{r4, r5, r6, pc}
 801ee86:	466a      	mov	r2, sp
 801ee88:	f000 f848 	bl	801ef1c <_fstat_r>
 801ee8c:	2800      	cmp	r0, #0
 801ee8e:	dbec      	blt.n	801ee6a <__swhatbuf_r+0x12>
 801ee90:	9901      	ldr	r1, [sp, #4]
 801ee92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801ee96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801ee9a:	4259      	negs	r1, r3
 801ee9c:	4159      	adcs	r1, r3
 801ee9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801eea2:	e7eb      	b.n	801ee7c <__swhatbuf_r+0x24>

0801eea4 <__smakebuf_r>:
 801eea4:	898b      	ldrh	r3, [r1, #12]
 801eea6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801eea8:	079d      	lsls	r5, r3, #30
 801eeaa:	4606      	mov	r6, r0
 801eeac:	460c      	mov	r4, r1
 801eeae:	d507      	bpl.n	801eec0 <__smakebuf_r+0x1c>
 801eeb0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801eeb4:	6023      	str	r3, [r4, #0]
 801eeb6:	6123      	str	r3, [r4, #16]
 801eeb8:	2301      	movs	r3, #1
 801eeba:	6163      	str	r3, [r4, #20]
 801eebc:	b003      	add	sp, #12
 801eebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801eec0:	ab01      	add	r3, sp, #4
 801eec2:	466a      	mov	r2, sp
 801eec4:	f7ff ffc8 	bl	801ee58 <__swhatbuf_r>
 801eec8:	9f00      	ldr	r7, [sp, #0]
 801eeca:	4605      	mov	r5, r0
 801eecc:	4639      	mov	r1, r7
 801eece:	4630      	mov	r0, r6
 801eed0:	f7ff fbaa 	bl	801e628 <_malloc_r>
 801eed4:	b948      	cbnz	r0, 801eeea <__smakebuf_r+0x46>
 801eed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eeda:	059a      	lsls	r2, r3, #22
 801eedc:	d4ee      	bmi.n	801eebc <__smakebuf_r+0x18>
 801eede:	f023 0303 	bic.w	r3, r3, #3
 801eee2:	f043 0302 	orr.w	r3, r3, #2
 801eee6:	81a3      	strh	r3, [r4, #12]
 801eee8:	e7e2      	b.n	801eeb0 <__smakebuf_r+0xc>
 801eeea:	89a3      	ldrh	r3, [r4, #12]
 801eeec:	6020      	str	r0, [r4, #0]
 801eeee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801eef2:	81a3      	strh	r3, [r4, #12]
 801eef4:	9b01      	ldr	r3, [sp, #4]
 801eef6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801eefa:	b15b      	cbz	r3, 801ef14 <__smakebuf_r+0x70>
 801eefc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ef00:	4630      	mov	r0, r6
 801ef02:	f000 f81d 	bl	801ef40 <_isatty_r>
 801ef06:	b128      	cbz	r0, 801ef14 <__smakebuf_r+0x70>
 801ef08:	89a3      	ldrh	r3, [r4, #12]
 801ef0a:	f023 0303 	bic.w	r3, r3, #3
 801ef0e:	f043 0301 	orr.w	r3, r3, #1
 801ef12:	81a3      	strh	r3, [r4, #12]
 801ef14:	89a3      	ldrh	r3, [r4, #12]
 801ef16:	431d      	orrs	r5, r3
 801ef18:	81a5      	strh	r5, [r4, #12]
 801ef1a:	e7cf      	b.n	801eebc <__smakebuf_r+0x18>

0801ef1c <_fstat_r>:
 801ef1c:	b538      	push	{r3, r4, r5, lr}
 801ef1e:	4d07      	ldr	r5, [pc, #28]	@ (801ef3c <_fstat_r+0x20>)
 801ef20:	2300      	movs	r3, #0
 801ef22:	4604      	mov	r4, r0
 801ef24:	4608      	mov	r0, r1
 801ef26:	4611      	mov	r1, r2
 801ef28:	602b      	str	r3, [r5, #0]
 801ef2a:	f7e3 faa5 	bl	8002478 <_fstat>
 801ef2e:	1c43      	adds	r3, r0, #1
 801ef30:	d102      	bne.n	801ef38 <_fstat_r+0x1c>
 801ef32:	682b      	ldr	r3, [r5, #0]
 801ef34:	b103      	cbz	r3, 801ef38 <_fstat_r+0x1c>
 801ef36:	6023      	str	r3, [r4, #0]
 801ef38:	bd38      	pop	{r3, r4, r5, pc}
 801ef3a:	bf00      	nop
 801ef3c:	20027e4c 	.word	0x20027e4c

0801ef40 <_isatty_r>:
 801ef40:	b538      	push	{r3, r4, r5, lr}
 801ef42:	4d06      	ldr	r5, [pc, #24]	@ (801ef5c <_isatty_r+0x1c>)
 801ef44:	2300      	movs	r3, #0
 801ef46:	4604      	mov	r4, r0
 801ef48:	4608      	mov	r0, r1
 801ef4a:	602b      	str	r3, [r5, #0]
 801ef4c:	f7e3 faa4 	bl	8002498 <_isatty>
 801ef50:	1c43      	adds	r3, r0, #1
 801ef52:	d102      	bne.n	801ef5a <_isatty_r+0x1a>
 801ef54:	682b      	ldr	r3, [r5, #0]
 801ef56:	b103      	cbz	r3, 801ef5a <_isatty_r+0x1a>
 801ef58:	6023      	str	r3, [r4, #0]
 801ef5a:	bd38      	pop	{r3, r4, r5, pc}
 801ef5c:	20027e4c 	.word	0x20027e4c

0801ef60 <_sbrk_r>:
 801ef60:	b538      	push	{r3, r4, r5, lr}
 801ef62:	4d06      	ldr	r5, [pc, #24]	@ (801ef7c <_sbrk_r+0x1c>)
 801ef64:	2300      	movs	r3, #0
 801ef66:	4604      	mov	r4, r0
 801ef68:	4608      	mov	r0, r1
 801ef6a:	602b      	str	r3, [r5, #0]
 801ef6c:	f7e3 faac 	bl	80024c8 <_sbrk>
 801ef70:	1c43      	adds	r3, r0, #1
 801ef72:	d102      	bne.n	801ef7a <_sbrk_r+0x1a>
 801ef74:	682b      	ldr	r3, [r5, #0]
 801ef76:	b103      	cbz	r3, 801ef7a <_sbrk_r+0x1a>
 801ef78:	6023      	str	r3, [r4, #0]
 801ef7a:	bd38      	pop	{r3, r4, r5, pc}
 801ef7c:	20027e4c 	.word	0x20027e4c

0801ef80 <abort>:
 801ef80:	b508      	push	{r3, lr}
 801ef82:	2006      	movs	r0, #6
 801ef84:	f000 f82c 	bl	801efe0 <raise>
 801ef88:	2001      	movs	r0, #1
 801ef8a:	f7e3 fa25 	bl	80023d8 <_exit>

0801ef8e <_raise_r>:
 801ef8e:	291f      	cmp	r1, #31
 801ef90:	b538      	push	{r3, r4, r5, lr}
 801ef92:	4605      	mov	r5, r0
 801ef94:	460c      	mov	r4, r1
 801ef96:	d904      	bls.n	801efa2 <_raise_r+0x14>
 801ef98:	2316      	movs	r3, #22
 801ef9a:	6003      	str	r3, [r0, #0]
 801ef9c:	f04f 30ff 	mov.w	r0, #4294967295
 801efa0:	bd38      	pop	{r3, r4, r5, pc}
 801efa2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801efa4:	b112      	cbz	r2, 801efac <_raise_r+0x1e>
 801efa6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801efaa:	b94b      	cbnz	r3, 801efc0 <_raise_r+0x32>
 801efac:	4628      	mov	r0, r5
 801efae:	f000 f831 	bl	801f014 <_getpid_r>
 801efb2:	4622      	mov	r2, r4
 801efb4:	4601      	mov	r1, r0
 801efb6:	4628      	mov	r0, r5
 801efb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801efbc:	f000 b818 	b.w	801eff0 <_kill_r>
 801efc0:	2b01      	cmp	r3, #1
 801efc2:	d00a      	beq.n	801efda <_raise_r+0x4c>
 801efc4:	1c59      	adds	r1, r3, #1
 801efc6:	d103      	bne.n	801efd0 <_raise_r+0x42>
 801efc8:	2316      	movs	r3, #22
 801efca:	6003      	str	r3, [r0, #0]
 801efcc:	2001      	movs	r0, #1
 801efce:	e7e7      	b.n	801efa0 <_raise_r+0x12>
 801efd0:	2100      	movs	r1, #0
 801efd2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801efd6:	4620      	mov	r0, r4
 801efd8:	4798      	blx	r3
 801efda:	2000      	movs	r0, #0
 801efdc:	e7e0      	b.n	801efa0 <_raise_r+0x12>
	...

0801efe0 <raise>:
 801efe0:	4b02      	ldr	r3, [pc, #8]	@ (801efec <raise+0xc>)
 801efe2:	4601      	mov	r1, r0
 801efe4:	6818      	ldr	r0, [r3, #0]
 801efe6:	f7ff bfd2 	b.w	801ef8e <_raise_r>
 801efea:	bf00      	nop
 801efec:	2000003c 	.word	0x2000003c

0801eff0 <_kill_r>:
 801eff0:	b538      	push	{r3, r4, r5, lr}
 801eff2:	4d07      	ldr	r5, [pc, #28]	@ (801f010 <_kill_r+0x20>)
 801eff4:	2300      	movs	r3, #0
 801eff6:	4604      	mov	r4, r0
 801eff8:	4608      	mov	r0, r1
 801effa:	4611      	mov	r1, r2
 801effc:	602b      	str	r3, [r5, #0]
 801effe:	f7e3 f9d9 	bl	80023b4 <_kill>
 801f002:	1c43      	adds	r3, r0, #1
 801f004:	d102      	bne.n	801f00c <_kill_r+0x1c>
 801f006:	682b      	ldr	r3, [r5, #0]
 801f008:	b103      	cbz	r3, 801f00c <_kill_r+0x1c>
 801f00a:	6023      	str	r3, [r4, #0]
 801f00c:	bd38      	pop	{r3, r4, r5, pc}
 801f00e:	bf00      	nop
 801f010:	20027e4c 	.word	0x20027e4c

0801f014 <_getpid_r>:
 801f014:	f7e3 b9c6 	b.w	80023a4 <_getpid>

0801f018 <_init>:
 801f018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f01a:	bf00      	nop
 801f01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f01e:	bc08      	pop	{r3}
 801f020:	469e      	mov	lr, r3
 801f022:	4770      	bx	lr

0801f024 <_fini>:
 801f024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f026:	bf00      	nop
 801f028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f02a:	bc08      	pop	{r3}
 801f02c:	469e      	mov	lr, r3
 801f02e:	4770      	bx	lr
